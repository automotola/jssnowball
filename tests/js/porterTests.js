QUnit.config.hidepassed = true;
var Stem = snowballFactory.newStemmer('porter').stem;
test("a -> a", function() {deepEqual( Stem("a"), "a");});
test("aaron -> aaron", function() {deepEqual( Stem("aaron"), "aaron");});
test("aback -> aback", function() {deepEqual( Stem("aback"), "aback");});
test("abaissiez -> abaissiez", function() {deepEqual( Stem("abaissiez"), "abaissiez");});
test("abandon -> abandon", function() {deepEqual( Stem("abandon"), "abandon");});
test("abandoned -> abandon", function() {deepEqual( Stem("abandoned"), "abandon");});
test("abase -> abas", function() {deepEqual( Stem("abase"), "abas");});
test("abash -> abash", function() {deepEqual( Stem("abash"), "abash");});
test("abashed -> abash", function() {deepEqual( Stem("abashed"), "abash");});
test("abate -> abat", function() {deepEqual( Stem("abate"), "abat");});
test("abated -> abat", function() {deepEqual( Stem("abated"), "abat");});
test("abatement -> abat", function() {deepEqual( Stem("abatement"), "abat");});
test("abatements -> abat", function() {deepEqual( Stem("abatements"), "abat");});
test("abates -> abat", function() {deepEqual( Stem("abates"), "abat");});
test("abattement -> abatt", function() {deepEqual( Stem("abattement"), "abatt");});
test("abbe -> abb", function() {deepEqual( Stem("abbe"), "abb");});
test("abbess -> abbess", function() {deepEqual( Stem("abbess"), "abbess");});
test("abbey -> abbei", function() {deepEqual( Stem("abbey"), "abbei");});
test("abbeys -> abbei", function() {deepEqual( Stem("abbeys"), "abbei");});
test("abbominable -> abbomin", function() {deepEqual( Stem("abbominable"), "abbomin");});
test("abbot -> abbot", function() {deepEqual( Stem("abbot"), "abbot");});
test("abbots -> abbot", function() {deepEqual( Stem("abbots"), "abbot");});
test("abbreviated -> abbrevi", function() {deepEqual( Stem("abbreviated"), "abbrevi");});
test("abdication -> abdic", function() {deepEqual( Stem("abdication"), "abdic");});
test("abduction -> abduct", function() {deepEqual( Stem("abduction"), "abduct");});
test("abed -> ab", function() {deepEqual( Stem("abed"), "ab");});
test("abel -> abel", function() {deepEqual( Stem("abel"), "abel");});
test("aberga -> aberga", function() {deepEqual( Stem("aberga"), "aberga");});
test("abergavenny -> abergavenni", function() {deepEqual( Stem("abergavenny"), "abergavenni");});
test("abet -> abet", function() {deepEqual( Stem("abet"), "abet");});
test("abetting -> abet", function() {deepEqual( Stem("abetting"), "abet");});
test("abhominable -> abhomin", function() {deepEqual( Stem("abhominable"), "abhomin");});
test("abhor -> abhor", function() {deepEqual( Stem("abhor"), "abhor");});
test("abhorr -> abhorr", function() {deepEqual( Stem("abhorr"), "abhorr");});
test("abhorred -> abhor", function() {deepEqual( Stem("abhorred"), "abhor");});
test("abhorrence -> abhorr", function() {deepEqual( Stem("abhorrence"), "abhorr");});
test("abhorring -> abhor", function() {deepEqual( Stem("abhorring"), "abhor");});
test("abhors -> abhor", function() {deepEqual( Stem("abhors"), "abhor");});
test("abhorson -> abhorson", function() {deepEqual( Stem("abhorson"), "abhorson");});
test("abide -> abid", function() {deepEqual( Stem("abide"), "abid");});
test("abides -> abid", function() {deepEqual( Stem("abides"), "abid");});
test("abilities -> abil", function() {deepEqual( Stem("abilities"), "abil");});
test("ability -> abil", function() {deepEqual( Stem("ability"), "abil");});
test("abingdon -> abingdon", function() {deepEqual( Stem("abingdon"), "abingdon");});
test("abject -> abject", function() {deepEqual( Stem("abject"), "abject");});
test("abjectly -> abjectli", function() {deepEqual( Stem("abjectly"), "abjectli");});
test("abjects -> abject", function() {deepEqual( Stem("abjects"), "abject");});
test("abjur -> abjur", function() {deepEqual( Stem("abjur"), "abjur");});
test("abjure -> abjur", function() {deepEqual( Stem("abjure"), "abjur");});
test("able -> abl", function() {deepEqual( Stem("able"), "abl");});
test("abler -> abler", function() {deepEqual( Stem("abler"), "abler");});
test("ablest -> ablest", function() {deepEqual( Stem("ablest"), "ablest");});
test("aboard -> aboard", function() {deepEqual( Stem("aboard"), "aboard");});
test("abode -> abod", function() {deepEqual( Stem("abode"), "abod");});
test("aboded -> abod", function() {deepEqual( Stem("aboded"), "abod");});
test("abodements -> abod", function() {deepEqual( Stem("abodements"), "abod");});
test("abodes -> abod", function() {deepEqual( Stem("abodes"), "abod");});
test("aboding -> abod", function() {deepEqual( Stem("aboding"), "abod");});
test("abolished -> abolish", function() {deepEqual( Stem("abolished"), "abolish");});
test("abominable -> abomin", function() {deepEqual( Stem("abominable"), "abomin");});
test("abominably -> abomin", function() {deepEqual( Stem("abominably"), "abomin");});
test("abominates -> abomin", function() {deepEqual( Stem("abominates"), "abomin");});
test("abominations -> abomin", function() {deepEqual( Stem("abominations"), "abomin");});
test("abortive -> abort", function() {deepEqual( Stem("abortive"), "abort");});
test("abortives -> abort", function() {deepEqual( Stem("abortives"), "abort");});
test("abound -> abound", function() {deepEqual( Stem("abound"), "abound");});
test("abounded -> abound", function() {deepEqual( Stem("abounded"), "abound");});
test("abounding -> abound", function() {deepEqual( Stem("abounding"), "abound");});
test("about -> about", function() {deepEqual( Stem("about"), "about");});
test("above -> abov", function() {deepEqual( Stem("above"), "abov");});
test("abr -> abr", function() {deepEqual( Stem("abr"), "abr");});
test("abraham -> abraham", function() {deepEqual( Stem("abraham"), "abraham");});
test("abram -> abram", function() {deepEqual( Stem("abram"), "abram");});
test("abreast -> abreast", function() {deepEqual( Stem("abreast"), "abreast");});
test("abridg -> abridg", function() {deepEqual( Stem("abridg"), "abridg");});
test("abridge -> abridg", function() {deepEqual( Stem("abridge"), "abridg");});
test("abridged -> abridg", function() {deepEqual( Stem("abridged"), "abridg");});
test("abridgment -> abridg", function() {deepEqual( Stem("abridgment"), "abridg");});
test("abroach -> abroach", function() {deepEqual( Stem("abroach"), "abroach");});
test("abroad -> abroad", function() {deepEqual( Stem("abroad"), "abroad");});
test("abrogate -> abrog", function() {deepEqual( Stem("abrogate"), "abrog");});
test("abrook -> abrook", function() {deepEqual( Stem("abrook"), "abrook");});
test("abrupt -> abrupt", function() {deepEqual( Stem("abrupt"), "abrupt");});
test("abruption -> abrupt", function() {deepEqual( Stem("abruption"), "abrupt");});
test("abruptly -> abruptli", function() {deepEqual( Stem("abruptly"), "abruptli");});
test("absence -> absenc", function() {deepEqual( Stem("absence"), "absenc");});
test("absences -> absenc", function() {deepEqual( Stem("absences"), "absenc");});
test("absent -> absent", function() {deepEqual( Stem("absent"), "absent");});
test("absey -> absei", function() {deepEqual( Stem("absey"), "absei");});
test("absolom -> absolom", function() {deepEqual( Stem("absolom"), "absolom");});
test("absolute -> absolut", function() {deepEqual( Stem("absolute"), "absolut");});
test("absolutely -> absolut", function() {deepEqual( Stem("absolutely"), "absolut");});
test("absolv -> absolv", function() {deepEqual( Stem("absolv"), "absolv");});
test("absolve -> absolv", function() {deepEqual( Stem("absolve"), "absolv");});
test("absolver -> absolv", function() {deepEqual( Stem("absolver"), "absolv");});
test("absorbed -> absorb", function() {deepEqual( Stem("absorbed"), "absorb");});
test("absorbing -> absorb", function() {deepEqual( Stem("absorbing"), "absorb");});
test("abstains -> abstain", function() {deepEqual( Stem("abstains"), "abstain");});
test("abstemious -> abstemi", function() {deepEqual( Stem("abstemious"), "abstemi");});
test("abstinence -> abstin", function() {deepEqual( Stem("abstinence"), "abstin");});
test("abstract -> abstract", function() {deepEqual( Stem("abstract"), "abstract");});
test("abstruse -> abstrus", function() {deepEqual( Stem("abstruse"), "abstrus");});
test("absurd -> absurd", function() {deepEqual( Stem("absurd"), "absurd");});
test("absurdity -> absurd", function() {deepEqual( Stem("absurdity"), "absurd");});
test("absurdly -> absurdli", function() {deepEqual( Stem("absurdly"), "absurdli");});
test("absyrtus -> absyrtu", function() {deepEqual( Stem("absyrtus"), "absyrtu");});
test("abundance -> abund", function() {deepEqual( Stem("abundance"), "abund");});
test("abundant -> abund", function() {deepEqual( Stem("abundant"), "abund");});
test("abundantly -> abundantli", function() {deepEqual( Stem("abundantly"), "abundantli");});
test("abus -> abu", function() {deepEqual( Stem("abus"), "abu");});
test("abuse -> abus", function() {deepEqual( Stem("abuse"), "abus");});
test("abused -> abus", function() {deepEqual( Stem("abused"), "abus");});
test("abuser -> abus", function() {deepEqual( Stem("abuser"), "abus");});
test("abuses -> abus", function() {deepEqual( Stem("abuses"), "abus");});
test("abusing -> abus", function() {deepEqual( Stem("abusing"), "abus");});
test("abutting -> abut", function() {deepEqual( Stem("abutting"), "abut");});
test("aby -> abi", function() {deepEqual( Stem("aby"), "abi");});
test("abysm -> abysm", function() {deepEqual( Stem("abysm"), "abysm");});
test("ac -> ac", function() {deepEqual( Stem("ac"), "ac");});
test("academe -> academ", function() {deepEqual( Stem("academe"), "academ");});
test("academes -> academ", function() {deepEqual( Stem("academes"), "academ");});
test("academies -> academi", function() {deepEqual( Stem("academies"), "academi");});
test("academy -> academi", function() {deepEqual( Stem("academy"), "academi");});
test("accadent -> accad", function() {deepEqual( Stem("accadent"), "accad");});
test("acceded -> acced", function() {deepEqual( Stem("acceded"), "acced");});
test("accent -> accent", function() {deepEqual( Stem("accent"), "accent");});
test("accents -> accent", function() {deepEqual( Stem("accents"), "accent");});
test("accept -> accept", function() {deepEqual( Stem("accept"), "accept");});
test("acceptable -> accept", function() {deepEqual( Stem("acceptable"), "accept");});
test("acceptance -> accept", function() {deepEqual( Stem("acceptance"), "accept");});
test("accepted -> accept", function() {deepEqual( Stem("accepted"), "accept");});
test("accepting -> accept", function() {deepEqual( Stem("accepting"), "accept");});
test("accepts -> accept", function() {deepEqual( Stem("accepts"), "accept");});
test("access -> access", function() {deepEqual( Stem("access"), "access");});
test("accessary -> accessari", function() {deepEqual( Stem("accessary"), "accessari");});
test("accessible -> access", function() {deepEqual( Stem("accessible"), "access");});
test("accidence -> accid", function() {deepEqual( Stem("accidence"), "accid");});
test("accident -> accid", function() {deepEqual( Stem("accident"), "accid");});
test("accidental -> accident", function() {deepEqual( Stem("accidental"), "accident");});
test("accidentally -> accident", function() {deepEqual( Stem("accidentally"), "accident");});
test("accidents -> accid", function() {deepEqual( Stem("accidents"), "accid");});
test("accite -> accit", function() {deepEqual( Stem("accite"), "accit");});
test("accited -> accit", function() {deepEqual( Stem("accited"), "accit");});
test("accites -> accit", function() {deepEqual( Stem("accites"), "accit");});
test("acclaim -> acclaim", function() {deepEqual( Stem("acclaim"), "acclaim");});
test("acclamation -> acclam", function() {deepEqual( Stem("acclamation"), "acclam");});
test("acclamations -> acclam", function() {deepEqual( Stem("acclamations"), "acclam");});
test("accommodate -> accommod", function() {deepEqual( Stem("accommodate"), "accommod");});
test("accommodated -> accommod", function() {deepEqual( Stem("accommodated"), "accommod");});
test("accommodation -> accommod", function() {deepEqual( Stem("accommodation"), "accommod");});
test("accommodations -> accommod", function() {deepEqual( Stem("accommodations"), "accommod");});
test("accommodo -> accommodo", function() {deepEqual( Stem("accommodo"), "accommodo");});
test("accompanied -> accompani", function() {deepEqual( Stem("accompanied"), "accompani");});
test("accompanies -> accompani", function() {deepEqual( Stem("accompanies"), "accompani");});
test("accompany -> accompani", function() {deepEqual( Stem("accompany"), "accompani");});
test("accompanying -> accompani", function() {deepEqual( Stem("accompanying"), "accompani");});
test("accomplice -> accomplic", function() {deepEqual( Stem("accomplice"), "accomplic");});
test("accomplices -> accomplic", function() {deepEqual( Stem("accomplices"), "accomplic");});
test("accomplish -> accomplish", function() {deepEqual( Stem("accomplish"), "accomplish");});
test("accomplished -> accomplish", function() {deepEqual( Stem("accomplished"), "accomplish");});
test("accomplishing -> accomplish", function() {deepEqual( Stem("accomplishing"), "accomplish");});
test("accomplishment -> accomplish", function() {deepEqual( Stem("accomplishment"), "accomplish");});
test("accomplishments -> accomplish", function() {deepEqual( Stem("accomplishments"), "accomplish");});
test("accompt -> accompt", function() {deepEqual( Stem("accompt"), "accompt");});
test("accord -> accord", function() {deepEqual( Stem("accord"), "accord");});
test("accordant -> accord", function() {deepEqual( Stem("accordant"), "accord");});
test("accorded -> accord", function() {deepEqual( Stem("accorded"), "accord");});
test("accordeth -> accordeth", function() {deepEqual( Stem("accordeth"), "accordeth");});
test("according -> accord", function() {deepEqual( Stem("according"), "accord");});
test("accordingly -> accordingli", function() {deepEqual( Stem("accordingly"), "accordingli");});
test("accords -> accord", function() {deepEqual( Stem("accords"), "accord");});
test("accost -> accost", function() {deepEqual( Stem("accost"), "accost");});
test("accosted -> accost", function() {deepEqual( Stem("accosted"), "accost");});
test("account -> account", function() {deepEqual( Stem("account"), "account");});
test("accountant -> account", function() {deepEqual( Stem("accountant"), "account");});
test("accounted -> account", function() {deepEqual( Stem("accounted"), "account");});
test("accounts -> account", function() {deepEqual( Stem("accounts"), "account");});
test("accoutred -> accoutr", function() {deepEqual( Stem("accoutred"), "accoutr");});
test("accoutrement -> accoutr", function() {deepEqual( Stem("accoutrement"), "accoutr");});
test("accoutrements -> accoutr", function() {deepEqual( Stem("accoutrements"), "accoutr");});
test("accredited -> accredit", function() {deepEqual( Stem("accredited"), "accredit");});
test("accrue -> accru", function() {deepEqual( Stem("accrue"), "accru");});
test("accruing -> accru", function() {deepEqual( Stem("accruing"), "accru");});
test("accumulate -> accumul", function() {deepEqual( Stem("accumulate"), "accumul");});
test("accumulated -> accumul", function() {deepEqual( Stem("accumulated"), "accumul");});
test("accumulation -> accumul", function() {deepEqual( Stem("accumulation"), "accumul");});
test("accuracy -> accuraci", function() {deepEqual( Stem("accuracy"), "accuraci");});
test("accurate -> accur", function() {deepEqual( Stem("accurate"), "accur");});
test("accurately -> accur", function() {deepEqual( Stem("accurately"), "accur");});
test("accurs -> accur", function() {deepEqual( Stem("accurs"), "accur");});
test("accursed -> accurs", function() {deepEqual( Stem("accursed"), "accurs");});
test("accurst -> accurst", function() {deepEqual( Stem("accurst"), "accurst");});
test("accus -> accu", function() {deepEqual( Stem("accus"), "accu");});
test("accusation -> accus", function() {deepEqual( Stem("accusation"), "accus");});
test("accusations -> accus", function() {deepEqual( Stem("accusations"), "accus");});
test("accusative -> accus", function() {deepEqual( Stem("accusative"), "accus");});
test("accusativo -> accusativo", function() {deepEqual( Stem("accusativo"), "accusativo");});
test("accuse -> accus", function() {deepEqual( Stem("accuse"), "accus");});
test("accused -> accus", function() {deepEqual( Stem("accused"), "accus");});
test("accuser -> accus", function() {deepEqual( Stem("accuser"), "accus");});
test("accusers -> accus", function() {deepEqual( Stem("accusers"), "accus");});
test("accuses -> accus", function() {deepEqual( Stem("accuses"), "accus");});
test("accuseth -> accuseth", function() {deepEqual( Stem("accuseth"), "accuseth");});
test("accusing -> accus", function() {deepEqual( Stem("accusing"), "accus");});
test("accustom -> accustom", function() {deepEqual( Stem("accustom"), "accustom");});
test("accustomed -> accustom", function() {deepEqual( Stem("accustomed"), "accustom");});
test("ace -> ac", function() {deepEqual( Stem("ace"), "ac");});
test("acerb -> acerb", function() {deepEqual( Stem("acerb"), "acerb");});
test("achaiois -> achaioi", function() {deepEqual( Stem("achaiois"), "achaioi");});
test("ache -> ach", function() {deepEqual( Stem("ache"), "ach");});
test("acheron -> acheron", function() {deepEqual( Stem("acheron"), "acheron");});
test("aches -> ach", function() {deepEqual( Stem("aches"), "ach");});
test("acheul -> acheul", function() {deepEqual( Stem("acheul"), "acheul");});
test("achiev -> achiev", function() {deepEqual( Stem("achiev"), "achiev");});
test("achieve -> achiev", function() {deepEqual( Stem("achieve"), "achiev");});
test("achieved -> achiev", function() {deepEqual( Stem("achieved"), "achiev");});
test("achievement -> achiev", function() {deepEqual( Stem("achievement"), "achiev");});
test("achievements -> achiev", function() {deepEqual( Stem("achievements"), "achiev");});
test("achiever -> achiev", function() {deepEqual( Stem("achiever"), "achiev");});
test("achieves -> achiev", function() {deepEqual( Stem("achieves"), "achiev");});
test("achieving -> achiev", function() {deepEqual( Stem("achieving"), "achiev");});
test("achilles -> achil", function() {deepEqual( Stem("achilles"), "achil");});
test("aching -> ach", function() {deepEqual( Stem("aching"), "ach");});
test("achitophel -> achitophel", function() {deepEqual( Stem("achitophel"), "achitophel");});
test("acid -> acid", function() {deepEqual( Stem("acid"), "acid");});
test("ackney -> acknei", function() {deepEqual( Stem("ackney"), "acknei");});
test("acknowledg -> acknowledg", function() {deepEqual( Stem("acknowledg"), "acknowledg");});
test("acknowledge -> acknowledg", function() {deepEqual( Stem("acknowledge"), "acknowledg");});
test("acknowledged -> acknowledg", function() {deepEqual( Stem("acknowledged"), "acknowledg");});
test("acknowledgement -> acknowledg", function() {deepEqual( Stem("acknowledgement"), "acknowledg");});
test("acknowledging -> acknowledg", function() {deepEqual( Stem("acknowledging"), "acknowledg");});
test("acknowledgment -> acknowledg", function() {deepEqual( Stem("acknowledgment"), "acknowledg");});
test("acknown -> acknown", function() {deepEqual( Stem("acknown"), "acknown");});
test("acold -> acold", function() {deepEqual( Stem("acold"), "acold");});
test("aconitum -> aconitum", function() {deepEqual( Stem("aconitum"), "aconitum");});
test("acordo -> acordo", function() {deepEqual( Stem("acordo"), "acordo");});
test("acorn -> acorn", function() {deepEqual( Stem("acorn"), "acorn");});
test("acquaint -> acquaint", function() {deepEqual( Stem("acquaint"), "acquaint");});
test("acquaintance -> acquaint", function() {deepEqual( Stem("acquaintance"), "acquaint");});
test("acquaintances -> acquaint", function() {deepEqual( Stem("acquaintances"), "acquaint");});
test("acquaintanceship -> acquaintanceship", function() {deepEqual( Stem("acquaintanceship"), "acquaintanceship");});
test("acquainted -> acquaint", function() {deepEqual( Stem("acquainted"), "acquaint");});
test("acquainting -> acquaint", function() {deepEqual( Stem("acquainting"), "acquaint");});
test("acquaints -> acquaint", function() {deepEqual( Stem("acquaints"), "acquaint");});
test("acquiesce -> acquiesc", function() {deepEqual( Stem("acquiesce"), "acquiesc");});
test("acquiesced -> acquiesc", function() {deepEqual( Stem("acquiesced"), "acquiesc");});
test("acquiescence -> acquiesc", function() {deepEqual( Stem("acquiescence"), "acquiesc");});
test("acquir -> acquir", function() {deepEqual( Stem("acquir"), "acquir");});
test("acquire -> acquir", function() {deepEqual( Stem("acquire"), "acquir");});
test("acquired -> acquir", function() {deepEqual( Stem("acquired"), "acquir");});
test("acquirement -> acquir", function() {deepEqual( Stem("acquirement"), "acquir");});
test("acquirements -> acquir", function() {deepEqual( Stem("acquirements"), "acquir");});
test("acquiring -> acquir", function() {deepEqual( Stem("acquiring"), "acquir");});
test("acquisition -> acquisit", function() {deepEqual( Stem("acquisition"), "acquisit");});
test("acquisitions -> acquisit", function() {deepEqual( Stem("acquisitions"), "acquisit");});
test("acquit -> acquit", function() {deepEqual( Stem("acquit"), "acquit");});
test("acquittance -> acquitt", function() {deepEqual( Stem("acquittance"), "acquitt");});
test("acquittances -> acquitt", function() {deepEqual( Stem("acquittances"), "acquitt");});
test("acquitted -> acquit", function() {deepEqual( Stem("acquitted"), "acquit");});
test("acre -> acr", function() {deepEqual( Stem("acre"), "acr");});
test("acres -> acr", function() {deepEqual( Stem("acres"), "acr");});
test("across -> across", function() {deepEqual( Stem("across"), "across");});
test("act -> act", function() {deepEqual( Stem("act"), "act");});
test("actaeon -> actaeon", function() {deepEqual( Stem("actaeon"), "actaeon");});
test("acted -> act", function() {deepEqual( Stem("acted"), "act");});
test("acting -> act", function() {deepEqual( Stem("acting"), "act");});
test("action -> action", function() {deepEqual( Stem("action"), "action");});
test("actions -> action", function() {deepEqual( Stem("actions"), "action");});
test("actium -> actium", function() {deepEqual( Stem("actium"), "actium");});
test("active -> activ", function() {deepEqual( Stem("active"), "activ");});
test("actively -> activ", function() {deepEqual( Stem("actively"), "activ");});
test("activity -> activ", function() {deepEqual( Stem("activity"), "activ");});
test("actor -> actor", function() {deepEqual( Stem("actor"), "actor");});
test("actors -> actor", function() {deepEqual( Stem("actors"), "actor");});
test("actress -> actress", function() {deepEqual( Stem("actress"), "actress");});
test("acts -> act", function() {deepEqual( Stem("acts"), "act");});
test("actual -> actual", function() {deepEqual( Stem("actual"), "actual");});
test("actually -> actual", function() {deepEqual( Stem("actually"), "actual");});
test("acture -> actur", function() {deepEqual( Stem("acture"), "actur");});
test("acute -> acut", function() {deepEqual( Stem("acute"), "acut");});
test("acutely -> acut", function() {deepEqual( Stem("acutely"), "acut");});
test("ad -> ad", function() {deepEqual( Stem("ad"), "ad");});
test("adage -> adag", function() {deepEqual( Stem("adage"), "adag");});
test("adallas -> adalla", function() {deepEqual( Stem("adallas"), "adalla");});
test("adam -> adam", function() {deepEqual( Stem("adam"), "adam");});
test("adamant -> adam", function() {deepEqual( Stem("adamant"), "adam");});
test("adamson -> adamson", function() {deepEqual( Stem("adamson"), "adamson");});
test("add -> add", function() {deepEqual( Stem("add"), "add");});
test("added -> ad", function() {deepEqual( Stem("added"), "ad");});
test("adder -> adder", function() {deepEqual( Stem("adder"), "adder");});
test("adders -> adder", function() {deepEqual( Stem("adders"), "adder");});
test("addeth -> addeth", function() {deepEqual( Stem("addeth"), "addeth");});
test("addict -> addict", function() {deepEqual( Stem("addict"), "addict");});
test("addicted -> addict", function() {deepEqual( Stem("addicted"), "addict");});
test("addiction -> addict", function() {deepEqual( Stem("addiction"), "addict");});
test("adding -> ad", function() {deepEqual( Stem("adding"), "ad");});
test("addington -> addington", function() {deepEqual( Stem("addington"), "addington");});
test("addison -> addison", function() {deepEqual( Stem("addison"), "addison");});
test("addition -> addit", function() {deepEqual( Stem("addition"), "addit");});
test("additional -> addit", function() {deepEqual( Stem("additional"), "addit");});
test("additions -> addit", function() {deepEqual( Stem("additions"), "addit");});
test("addle -> addl", function() {deepEqual( Stem("addle"), "addl");});
test("address -> address", function() {deepEqual( Stem("address"), "address");});
test("addressed -> address", function() {deepEqual( Stem("addressed"), "address");});
test("addresses -> address", function() {deepEqual( Stem("addresses"), "address");});
test("addressing -> address", function() {deepEqual( Stem("addressing"), "address");});
test("addrest -> addrest", function() {deepEqual( Stem("addrest"), "addrest");});
test("adds -> add", function() {deepEqual( Stem("adds"), "add");});
test("adelaide -> adelaid", function() {deepEqual( Stem("adelaide"), "adelaid");});
test("adept -> adept", function() {deepEqual( Stem("adept"), "adept");});
test("adhere -> adher", function() {deepEqual( Stem("adhere"), "adher");});
test("adhered -> adher", function() {deepEqual( Stem("adhered"), "adher");});
test("adheres -> adher", function() {deepEqual( Stem("adheres"), "adher");});
test("adieu -> adieu", function() {deepEqual( Stem("adieu"), "adieu");});
test("adieus -> adieu", function() {deepEqual( Stem("adieus"), "adieu");});
test("adieux -> adieux", function() {deepEqual( Stem("adieux"), "adieux");});
test("adjacent -> adjac", function() {deepEqual( Stem("adjacent"), "adjac");});
test("adjoin -> adjoin", function() {deepEqual( Stem("adjoin"), "adjoin");});
test("adjoining -> adjoin", function() {deepEqual( Stem("adjoining"), "adjoin");});
test("adjourn -> adjourn", function() {deepEqual( Stem("adjourn"), "adjourn");});
test("adjourning -> adjourn", function() {deepEqual( Stem("adjourning"), "adjourn");});
test("adjudg -> adjudg", function() {deepEqual( Stem("adjudg"), "adjudg");});
test("adjudged -> adjudg", function() {deepEqual( Stem("adjudged"), "adjudg");});
test("adjunct -> adjunct", function() {deepEqual( Stem("adjunct"), "adjunct");});
test("adjured -> adjur", function() {deepEqual( Stem("adjured"), "adjur");});
test("adjustment -> adjust", function() {deepEqual( Stem("adjustment"), "adjust");});
test("administer -> administ", function() {deepEqual( Stem("administer"), "administ");});
test("administered -> administ", function() {deepEqual( Stem("administered"), "administ");});
test("administering -> administ", function() {deepEqual( Stem("administering"), "administ");});
test("administration -> administr", function() {deepEqual( Stem("administration"), "administr");});
test("administrative -> administr", function() {deepEqual( Stem("administrative"), "administr");});
test("administratrix -> administratrix", function() {deepEqual( Stem("administratrix"), "administratrix");});
test("admir -> admir", function() {deepEqual( Stem("admir"), "admir");});
test("admirable -> admir", function() {deepEqual( Stem("admirable"), "admir");});
test("admirably -> admir", function() {deepEqual( Stem("admirably"), "admir");});
test("admiral -> admir", function() {deepEqual( Stem("admiral"), "admir");});
test("admiration -> admir", function() {deepEqual( Stem("admiration"), "admir");});
test("admire -> admir", function() {deepEqual( Stem("admire"), "admir");});
test("admired -> admir", function() {deepEqual( Stem("admired"), "admir");});
test("admirer -> admir", function() {deepEqual( Stem("admirer"), "admir");});
test("admirers -> admir", function() {deepEqual( Stem("admirers"), "admir");});
test("admires -> admir", function() {deepEqual( Stem("admires"), "admir");});
test("admiring -> admir", function() {deepEqual( Stem("admiring"), "admir");});
test("admiringly -> admiringli", function() {deepEqual( Stem("admiringly"), "admiringli");});
test("admission -> admiss", function() {deepEqual( Stem("admission"), "admiss");});
test("admissions -> admiss", function() {deepEqual( Stem("admissions"), "admiss");});
test("admit -> admit", function() {deepEqual( Stem("admit"), "admit");});
test("admits -> admit", function() {deepEqual( Stem("admits"), "admit");});
test("admittance -> admitt", function() {deepEqual( Stem("admittance"), "admitt");});
test("admitted -> admit", function() {deepEqual( Stem("admitted"), "admit");});
test("admitting -> admit", function() {deepEqual( Stem("admitting"), "admit");});
test("admonish -> admonish", function() {deepEqual( Stem("admonish"), "admonish");});
test("admonishing -> admonish", function() {deepEqual( Stem("admonishing"), "admonish");});
test("admonishment -> admonish", function() {deepEqual( Stem("admonishment"), "admonish");});
test("admonishments -> admonish", function() {deepEqual( Stem("admonishments"), "admonish");});
test("admonition -> admonit", function() {deepEqual( Stem("admonition"), "admonit");});
test("ado -> ado", function() {deepEqual( Stem("ado"), "ado");});
test("adonis -> adoni", function() {deepEqual( Stem("adonis"), "adoni");});
test("adopt -> adopt", function() {deepEqual( Stem("adopt"), "adopt");});
test("adopted -> adopt", function() {deepEqual( Stem("adopted"), "adopt");});
test("adoptedly -> adoptedli", function() {deepEqual( Stem("adoptedly"), "adoptedli");});
test("adopting -> adopt", function() {deepEqual( Stem("adopting"), "adopt");});
test("adoption -> adopt", function() {deepEqual( Stem("adoption"), "adopt");});
test("adoptious -> adopti", function() {deepEqual( Stem("adoptious"), "adopti");});
test("adopts -> adopt", function() {deepEqual( Stem("adopts"), "adopt");});
test("ador -> ador", function() {deepEqual( Stem("ador"), "ador");});
test("adorable -> ador", function() {deepEqual( Stem("adorable"), "ador");});
test("adoration -> ador", function() {deepEqual( Stem("adoration"), "ador");});
test("adorations -> ador", function() {deepEqual( Stem("adorations"), "ador");});
test("adore -> ador", function() {deepEqual( Stem("adore"), "ador");});
test("adored -> ador", function() {deepEqual( Stem("adored"), "ador");});
test("adorer -> ador", function() {deepEqual( Stem("adorer"), "ador");});
test("adores -> ador", function() {deepEqual( Stem("adores"), "ador");});
test("adorest -> adorest", function() {deepEqual( Stem("adorest"), "adorest");});
test("adoreth -> adoreth", function() {deepEqual( Stem("adoreth"), "adoreth");});
test("adoring -> ador", function() {deepEqual( Stem("adoring"), "ador");});
test("adorn -> adorn", function() {deepEqual( Stem("adorn"), "adorn");});
test("adorned -> adorn", function() {deepEqual( Stem("adorned"), "adorn");});
test("adornings -> adorn", function() {deepEqual( Stem("adornings"), "adorn");});
test("adornment -> adorn", function() {deepEqual( Stem("adornment"), "adorn");});
test("adorns -> adorn", function() {deepEqual( Stem("adorns"), "adorn");});
test("adown -> adown", function() {deepEqual( Stem("adown"), "adown");});
test("adramadio -> adramadio", function() {deepEqual( Stem("adramadio"), "adramadio");});
test("adrian -> adrian", function() {deepEqual( Stem("adrian"), "adrian");});
test("adriana -> adriana", function() {deepEqual( Stem("adriana"), "adriana");});
test("adriano -> adriano", function() {deepEqual( Stem("adriano"), "adriano");});
test("adriatic -> adriat", function() {deepEqual( Stem("adriatic"), "adriat");});
test("adriving -> adriv", function() {deepEqual( Stem("adriving"), "adriv");});
test("adroit -> adroit", function() {deepEqual( Stem("adroit"), "adroit");});
test("adroitly -> adroitli", function() {deepEqual( Stem("adroitly"), "adroitli");});
test("adsum -> adsum", function() {deepEqual( Stem("adsum"), "adsum");});
test("adulation -> adul", function() {deepEqual( Stem("adulation"), "adul");});
test("adulterate -> adulter", function() {deepEqual( Stem("adulterate"), "adulter");});
test("adulterates -> adulter", function() {deepEqual( Stem("adulterates"), "adulter");});
test("adulterers -> adulter", function() {deepEqual( Stem("adulterers"), "adulter");});
test("adulteress -> adulteress", function() {deepEqual( Stem("adulteress"), "adulteress");});
test("adulteries -> adulteri", function() {deepEqual( Stem("adulteries"), "adulteri");});
test("adulterous -> adulter", function() {deepEqual( Stem("adulterous"), "adulter");});
test("adultery -> adulteri", function() {deepEqual( Stem("adultery"), "adulteri");});
test("adultress -> adultress", function() {deepEqual( Stem("adultress"), "adultress");});
test("advanc -> advanc", function() {deepEqual( Stem("advanc"), "advanc");});
test("advance -> advanc", function() {deepEqual( Stem("advance"), "advanc");});
test("advanced -> advanc", function() {deepEqual( Stem("advanced"), "advanc");});
test("advancement -> advanc", function() {deepEqual( Stem("advancement"), "advanc");});
test("advancements -> advanc", function() {deepEqual( Stem("advancements"), "advanc");});
test("advances -> advanc", function() {deepEqual( Stem("advances"), "advanc");});
test("advancing -> advanc", function() {deepEqual( Stem("advancing"), "advanc");});
test("advantage -> advantag", function() {deepEqual( Stem("advantage"), "advantag");});
test("advantageable -> advantag", function() {deepEqual( Stem("advantageable"), "advantag");});
test("advantaged -> advantag", function() {deepEqual( Stem("advantaged"), "advantag");});
test("advantageous -> advantag", function() {deepEqual( Stem("advantageous"), "advantag");});
test("advantageously -> advantag", function() {deepEqual( Stem("advantageously"), "advantag");});
test("advantages -> advantag", function() {deepEqual( Stem("advantages"), "advantag");});
test("advantaging -> advantag", function() {deepEqual( Stem("advantaging"), "advantag");});
test("advent -> advent", function() {deepEqual( Stem("advent"), "advent");});
test("adventur -> adventur", function() {deepEqual( Stem("adventur"), "adventur");});
test("adventure -> adventur", function() {deepEqual( Stem("adventure"), "adventur");});
test("adventurer -> adventur", function() {deepEqual( Stem("adventurer"), "adventur");});
test("adventurers -> adventur", function() {deepEqual( Stem("adventurers"), "adventur");});
test("adventures -> adventur", function() {deepEqual( Stem("adventures"), "adventur");});
test("adventuress -> adventuress", function() {deepEqual( Stem("adventuress"), "adventuress");});
test("adventuring -> adventur", function() {deepEqual( Stem("adventuring"), "adventur");});
test("adventurous -> adventur", function() {deepEqual( Stem("adventurous"), "adventur");});
test("adventurously -> adventur", function() {deepEqual( Stem("adventurously"), "adventur");});
test("adversaries -> adversari", function() {deepEqual( Stem("adversaries"), "adversari");});
test("adversary -> adversari", function() {deepEqual( Stem("adversary"), "adversari");});
test("adverse -> advers", function() {deepEqual( Stem("adverse"), "advers");});
test("adversely -> advers", function() {deepEqual( Stem("adversely"), "advers");});
test("adversities -> advers", function() {deepEqual( Stem("adversities"), "advers");});
test("adversity -> advers", function() {deepEqual( Stem("adversity"), "advers");});
test("advertis -> adverti", function() {deepEqual( Stem("advertis"), "adverti");});
test("advertise -> advertis", function() {deepEqual( Stem("advertise"), "advertis");});
test("advertised -> advertis", function() {deepEqual( Stem("advertised"), "advertis");});
test("advertisement -> advertis", function() {deepEqual( Stem("advertisement"), "advertis");});
test("advertising -> advertis", function() {deepEqual( Stem("advertising"), "advertis");});
test("advice -> advic", function() {deepEqual( Stem("advice"), "advic");});
test("advis -> advi", function() {deepEqual( Stem("advis"), "advi");});
test("advisable -> advis", function() {deepEqual( Stem("advisable"), "advis");});
test("advise -> advis", function() {deepEqual( Stem("advise"), "advis");});
test("advised -> advis", function() {deepEqual( Stem("advised"), "advis");});
test("advisedly -> advisedli", function() {deepEqual( Stem("advisedly"), "advisedli");});
test("adviser -> advis", function() {deepEqual( Stem("adviser"), "advis");});
test("advises -> advis", function() {deepEqual( Stem("advises"), "advis");});
test("advisings -> advis", function() {deepEqual( Stem("advisings"), "advis");});
test("advocacy -> advocaci", function() {deepEqual( Stem("advocacy"), "advocaci");});
test("advocate -> advoc", function() {deepEqual( Stem("advocate"), "advoc");});
test("advocation -> advoc", function() {deepEqual( Stem("advocation"), "advoc");});
test("aeacida -> aeacida", function() {deepEqual( Stem("aeacida"), "aeacida");});
test("aeacides -> aeacid", function() {deepEqual( Stem("aeacides"), "aeacid");});
test("aedile -> aedil", function() {deepEqual( Stem("aedile"), "aedil");});
test("aediles -> aedil", function() {deepEqual( Stem("aediles"), "aedil");});
test("aegeon -> aegeon", function() {deepEqual( Stem("aegeon"), "aegeon");});
test("aegion -> aegion", function() {deepEqual( Stem("aegion"), "aegion");});
test("aegisthus -> aegisthu", function() {deepEqual( Stem("aegisthus"), "aegisthu");});
test("aegles -> aegl", function() {deepEqual( Stem("aegles"), "aegl");});
test("aemelia -> aemelia", function() {deepEqual( Stem("aemelia"), "aemelia");});
test("aemilia -> aemilia", function() {deepEqual( Stem("aemilia"), "aemilia");});
test("aemilius -> aemiliu", function() {deepEqual( Stem("aemilius"), "aemiliu");});
test("aeneas -> aenea", function() {deepEqual( Stem("aeneas"), "aenea");});
test("aeolus -> aeolu", function() {deepEqual( Stem("aeolus"), "aeolu");});
test("aequor -> aequor", function() {deepEqual( Stem("aequor"), "aequor");});
test("aer -> aer", function() {deepEqual( Stem("aer"), "aer");});
test("aerial -> aerial", function() {deepEqual( Stem("aerial"), "aerial");});
test("aery -> aeri", function() {deepEqual( Stem("aery"), "aeri");});
test("aesculapius -> aesculapiu", function() {deepEqual( Stem("aesculapius"), "aesculapiu");});
test("aeson -> aeson", function() {deepEqual( Stem("aeson"), "aeson");});
test("aesop -> aesop", function() {deepEqual( Stem("aesop"), "aesop");});
test("aetna -> aetna", function() {deepEqual( Stem("aetna"), "aetna");});
test("afar -> afar", function() {deepEqual( Stem("afar"), "afar");});
test("afear -> afear", function() {deepEqual( Stem("afear"), "afear");});
test("afeard -> afeard", function() {deepEqual( Stem("afeard"), "afeard");});
test("affability -> affabl", function() {deepEqual( Stem("affability"), "affabl");});
test("affable -> affabl", function() {deepEqual( Stem("affable"), "affabl");});
test("affair -> affair", function() {deepEqual( Stem("affair"), "affair");});
test("affaire -> affair", function() {deepEqual( Stem("affaire"), "affair");});
test("affaires -> affair", function() {deepEqual( Stem("affaires"), "affair");});
test("affairs -> affair", function() {deepEqual( Stem("affairs"), "affair");});
test("affect -> affect", function() {deepEqual( Stem("affect"), "affect");});
test("affectation -> affect", function() {deepEqual( Stem("affectation"), "affect");});
test("affectations -> affect", function() {deepEqual( Stem("affectations"), "affect");});
test("affected -> affect", function() {deepEqual( Stem("affected"), "affect");});
test("affectedly -> affectedli", function() {deepEqual( Stem("affectedly"), "affectedli");});
test("affecteth -> affecteth", function() {deepEqual( Stem("affecteth"), "affecteth");});
test("affecting -> affect", function() {deepEqual( Stem("affecting"), "affect");});
test("affection -> affect", function() {deepEqual( Stem("affection"), "affect");});
test("affectionate -> affection", function() {deepEqual( Stem("affectionate"), "affection");});
test("affectionately -> affection", function() {deepEqual( Stem("affectionately"), "affection");});
test("affections -> affect", function() {deepEqual( Stem("affections"), "affect");});
test("affects -> affect", function() {deepEqual( Stem("affects"), "affect");});
test("affeer -> affeer", function() {deepEqual( Stem("affeer"), "affeer");});
test("affianc -> affianc", function() {deepEqual( Stem("affianc"), "affianc");});
test("affiance -> affianc", function() {deepEqual( Stem("affiance"), "affianc");});
test("affianced -> affianc", function() {deepEqual( Stem("affianced"), "affianc");});
test("affidavit -> affidavit", function() {deepEqual( Stem("affidavit"), "affidavit");});
test("affied -> affi", function() {deepEqual( Stem("affied"), "affi");});
test("affin -> affin", function() {deepEqual( Stem("affin"), "affin");});
test("affined -> affin", function() {deepEqual( Stem("affined"), "affin");});
test("affinity -> affin", function() {deepEqual( Stem("affinity"), "affin");});
test("affirm -> affirm", function() {deepEqual( Stem("affirm"), "affirm");});
test("affirmation -> affirm", function() {deepEqual( Stem("affirmation"), "affirm");});
test("affirmatives -> affirm", function() {deepEqual( Stem("affirmatives"), "affirm");});
test("afflict -> afflict", function() {deepEqual( Stem("afflict"), "afflict");});
test("afflicted -> afflict", function() {deepEqual( Stem("afflicted"), "afflict");});
test("affliction -> afflict", function() {deepEqual( Stem("affliction"), "afflict");});
test("afflictions -> afflict", function() {deepEqual( Stem("afflictions"), "afflict");});
test("afflicts -> afflict", function() {deepEqual( Stem("afflicts"), "afflict");});
test("afford -> afford", function() {deepEqual( Stem("afford"), "afford");});
test("afforded -> afford", function() {deepEqual( Stem("afforded"), "afford");});
test("affordeth -> affordeth", function() {deepEqual( Stem("affordeth"), "affordeth");});
test("affords -> afford", function() {deepEqual( Stem("affords"), "afford");});
test("affray -> affrai", function() {deepEqual( Stem("affray"), "affrai");});
test("affreusement -> affreus", function() {deepEqual( Stem("affreusement"), "affreus");});
test("affright -> affright", function() {deepEqual( Stem("affright"), "affright");});
test("affrighted -> affright", function() {deepEqual( Stem("affrighted"), "affright");});
test("affrights -> affright", function() {deepEqual( Stem("affrights"), "affright");});
test("affront -> affront", function() {deepEqual( Stem("affront"), "affront");});
test("affronted -> affront", function() {deepEqual( Stem("affronted"), "affront");});
test("affy -> affi", function() {deepEqual( Stem("affy"), "affi");});
test("afield -> afield", function() {deepEqual( Stem("afield"), "afield");});
test("afire -> afir", function() {deepEqual( Stem("afire"), "afir");});
test("afloat -> afloat", function() {deepEqual( Stem("afloat"), "afloat");});
test("afoot -> afoot", function() {deepEqual( Stem("afoot"), "afoot");});
test("afore -> afor", function() {deepEqual( Stem("afore"), "afor");});
test("aforehand -> aforehand", function() {deepEqual( Stem("aforehand"), "aforehand");});
test("aforesaid -> aforesaid", function() {deepEqual( Stem("aforesaid"), "aforesaid");});
test("afraid -> afraid", function() {deepEqual( Stem("afraid"), "afraid");});
test("afresh -> afresh", function() {deepEqual( Stem("afresh"), "afresh");});
test("afric -> afric", function() {deepEqual( Stem("afric"), "afric");});
test("africa -> africa", function() {deepEqual( Stem("africa"), "africa");});
test("african -> african", function() {deepEqual( Stem("african"), "african");});
test("afront -> afront", function() {deepEqual( Stem("afront"), "afront");});
test("after -> after", function() {deepEqual( Stem("after"), "after");});
test("afternoon -> afternoon", function() {deepEqual( Stem("afternoon"), "afternoon");});
test("afternoons -> afternoon", function() {deepEqual( Stem("afternoons"), "afternoon");});
test("afterward -> afterward", function() {deepEqual( Stem("afterward"), "afterward");});
test("afterwards -> afterward", function() {deepEqual( Stem("afterwards"), "afterward");});
test("ag -> ag", function() {deepEqual( Stem("ag"), "ag");});
test("aga -> aga", function() {deepEqual( Stem("aga"), "aga");});
test("again -> again", function() {deepEqual( Stem("again"), "again");});
test("against -> against", function() {deepEqual( Stem("against"), "against");});
test("agamemmon -> agamemmon", function() {deepEqual( Stem("agamemmon"), "agamemmon");});
test("agamemnon -> agamemnon", function() {deepEqual( Stem("agamemnon"), "agamemnon");});
test("agate -> agat", function() {deepEqual( Stem("agate"), "agat");});
test("agaz -> agaz", function() {deepEqual( Stem("agaz"), "agaz");});
test("age -> ag", function() {deepEqual( Stem("age"), "ag");});
test("aged -> ag", function() {deepEqual( Stem("aged"), "ag");});
test("agencies -> agenc", function() {deepEqual( Stem("agencies"), "agenc");});
test("agency -> agenc", function() {deepEqual( Stem("agency"), "agenc");});
test("agenor -> agenor", function() {deepEqual( Stem("agenor"), "agenor");});
test("agent -> agent", function() {deepEqual( Stem("agent"), "agent");});
test("agents -> agent", function() {deepEqual( Stem("agents"), "agent");});
test("ages -> ag", function() {deepEqual( Stem("ages"), "ag");});
test("aggravate -> aggrav", function() {deepEqual( Stem("aggravate"), "aggrav");});
test("aggravated -> aggrav", function() {deepEqual( Stem("aggravated"), "aggrav");});
test("aggressive -> aggress", function() {deepEqual( Stem("aggressive"), "aggress");});
test("aggrief -> aggrief", function() {deepEqual( Stem("aggrief"), "aggrief");});
test("aghast -> aghast", function() {deepEqual( Stem("aghast"), "aghast");});
test("agile -> agil", function() {deepEqual( Stem("agile"), "agil");});
test("agin -> agin", function() {deepEqual( Stem("agin"), "agin");});
test("agincourt -> agincourt", function() {deepEqual( Stem("agincourt"), "agincourt");});
test("agios -> agio", function() {deepEqual( Stem("agios"), "agio");});
test("agitate -> agit", function() {deepEqual( Stem("agitate"), "agit");});
test("agitated -> agit", function() {deepEqual( Stem("agitated"), "agit");});
test("agitating -> agit", function() {deepEqual( Stem("agitating"), "agit");});
test("agitation -> agit", function() {deepEqual( Stem("agitation"), "agit");});
test("aglet -> aglet", function() {deepEqual( Stem("aglet"), "aglet");});
test("agnize -> agniz", function() {deepEqual( Stem("agnize"), "agniz");});
test("ago -> ago", function() {deepEqual( Stem("ago"), "ago");});
test("agone -> agon", function() {deepEqual( Stem("agone"), "agon");});
test("agonies -> agoni", function() {deepEqual( Stem("agonies"), "agoni");});
test("agonised -> agonis", function() {deepEqual( Stem("agonised"), "agonis");});
test("agonized -> agon", function() {deepEqual( Stem("agonized"), "agon");});
test("agony -> agoni", function() {deepEqual( Stem("agony"), "agoni");});
test("agree -> agre", function() {deepEqual( Stem("agree"), "agre");});
test("agreeable -> agreeabl", function() {deepEqual( Stem("agreeable"), "agreeabl");});
test("agreeably -> agreeabl", function() {deepEqual( Stem("agreeably"), "agreeabl");});
test("agreed -> agre", function() {deepEqual( Stem("agreed"), "agre");});
test("agreeing -> agre", function() {deepEqual( Stem("agreeing"), "agre");});
test("agreement -> agreement", function() {deepEqual( Stem("agreement"), "agreement");});
test("agrees -> agre", function() {deepEqual( Stem("agrees"), "agre");});
test("agremens -> agremen", function() {deepEqual( Stem("agremens"), "agremen");});
test("agricultural -> agricultur", function() {deepEqual( Stem("agricultural"), "agricultur");});
test("agrippa -> agrippa", function() {deepEqual( Stem("agrippa"), "agrippa");});
test("aground -> aground", function() {deepEqual( Stem("aground"), "aground");});
test("ague -> agu", function() {deepEqual( Stem("ague"), "agu");});
test("aguecheek -> aguecheek", function() {deepEqual( Stem("aguecheek"), "aguecheek");});
test("agued -> agu", function() {deepEqual( Stem("agued"), "agu");});
test("agueface -> aguefac", function() {deepEqual( Stem("agueface"), "aguefac");});
test("agues -> agu", function() {deepEqual( Stem("agues"), "agu");});
test("ah -> ah", function() {deepEqual( Stem("ah"), "ah");});
test("aha -> aha", function() {deepEqual( Stem("aha"), "aha");});
test("ahead -> ahead", function() {deepEqual( Stem("ahead"), "ahead");});
test("ahem -> ahem", function() {deepEqual( Stem("ahem"), "ahem");});
test("ahmed -> ahm", function() {deepEqual( Stem("ahmed"), "ahm");});
test("ahmednuggur -> ahmednuggur", function() {deepEqual( Stem("ahmednuggur"), "ahmednuggur");});
test("ahrimanians -> ahrimanian", function() {deepEqual( Stem("ahrimanians"), "ahrimanian");});
test("ahum -> ahum", function() {deepEqual( Stem("ahum"), "ahum");});
test("ahungry -> ahungri", function() {deepEqual( Stem("ahungry"), "ahungri");});
test("ai -> ai", function() {deepEqual( Stem("ai"), "ai");});
test("aialvolio -> aialvolio", function() {deepEqual( Stem("aialvolio"), "aialvolio");});
test("aiaria -> aiaria", function() {deepEqual( Stem("aiaria"), "aiaria");});
test("aid -> aid", function() {deepEqual( Stem("aid"), "aid");});
test("aidance -> aidanc", function() {deepEqual( Stem("aidance"), "aidanc");});
test("aidant -> aidant", function() {deepEqual( Stem("aidant"), "aidant");});
test("aide -> aid", function() {deepEqual( Stem("aide"), "aid");});
test("aided -> aid", function() {deepEqual( Stem("aided"), "aid");});
test("aides -> aid", function() {deepEqual( Stem("aides"), "aid");});
test("aiding -> aid", function() {deepEqual( Stem("aiding"), "aid");});
test("aidless -> aidless", function() {deepEqual( Stem("aidless"), "aidless");});
test("aids -> aid", function() {deepEqual( Stem("aids"), "aid");});
test("aigle -> aigl", function() {deepEqual( Stem("aigle"), "aigl");});
test("ail -> ail", function() {deepEqual( Stem("ail"), "ail");});
test("ailing -> ail", function() {deepEqual( Stem("ailing"), "ail");});
test("ailments -> ailment", function() {deepEqual( Stem("ailments"), "ailment");});
test("aim -> aim", function() {deepEqual( Stem("aim"), "aim");});
test("aimable -> aimabl", function() {deepEqual( Stem("aimable"), "aimabl");});
test("aimed -> aim", function() {deepEqual( Stem("aimed"), "aim");});
test("aimest -> aimest", function() {deepEqual( Stem("aimest"), "aimest");});
test("aiming -> aim", function() {deepEqual( Stem("aiming"), "aim");});
test("aims -> aim", function() {deepEqual( Stem("aims"), "aim");});
test("ain -> ain", function() {deepEqual( Stem("ain"), "ain");});
test("ainsi -> ainsi", function() {deepEqual( Stem("ainsi"), "ainsi");});
test("aio -> aio", function() {deepEqual( Stem("aio"), "aio");});
test("air -> air", function() {deepEqual( Stem("air"), "air");});
test("aired -> air", function() {deepEqual( Stem("aired"), "air");});
test("airing -> air", function() {deepEqual( Stem("airing"), "air");});
test("airless -> airless", function() {deepEqual( Stem("airless"), "airless");});
test("airs -> air", function() {deepEqual( Stem("airs"), "air");});
test("airy -> airi", function() {deepEqual( Stem("airy"), "airi");});
test("aix -> aix", function() {deepEqual( Stem("aix"), "aix");});
test("ajax -> ajax", function() {deepEqual( Stem("ajax"), "ajax");});
test("akilling -> akil", function() {deepEqual( Stem("akilling"), "akil");});
test("akimbo -> akimbo", function() {deepEqual( Stem("akimbo"), "akimbo");});
test("akin -> akin", function() {deepEqual( Stem("akin"), "akin");});
test("al -> al", function() {deepEqual( Stem("al"), "al");});
test("alabaster -> alabast", function() {deepEqual( Stem("alabaster"), "alabast");});
test("alack -> alack", function() {deepEqual( Stem("alack"), "alack");});
test("alacrity -> alacr", function() {deepEqual( Stem("alacrity"), "alacr");});
test("alarbus -> alarbu", function() {deepEqual( Stem("alarbus"), "alarbu");});
test("alarm -> alarm", function() {deepEqual( Stem("alarm"), "alarm");});
test("alarmed -> alarm", function() {deepEqual( Stem("alarmed"), "alarm");});
test("alarms -> alarm", function() {deepEqual( Stem("alarms"), "alarm");});
test("alarum -> alarum", function() {deepEqual( Stem("alarum"), "alarum");});
test("alarums -> alarum", function() {deepEqual( Stem("alarums"), "alarum");});
test("alas -> ala", function() {deepEqual( Stem("alas"), "ala");});
test("alb -> alb", function() {deepEqual( Stem("alb"), "alb");});
test("alban -> alban", function() {deepEqual( Stem("alban"), "alban");});
test("albans -> alban", function() {deepEqual( Stem("albans"), "alban");});
test("albany -> albani", function() {deepEqual( Stem("albany"), "albani");});
test("albeit -> albeit", function() {deepEqual( Stem("albeit"), "albeit");});
test("albion -> albion", function() {deepEqual( Stem("albion"), "albion");});
test("albums -> album", function() {deepEqual( Stem("albums"), "album");});
test("alchemist -> alchemist", function() {deepEqual( Stem("alchemist"), "alchemist");});
test("alchemy -> alchemi", function() {deepEqual( Stem("alchemy"), "alchemi");});
test("alcibiades -> alcibiad", function() {deepEqual( Stem("alcibiades"), "alcibiad");});
test("alcides -> alcid", function() {deepEqual( Stem("alcides"), "alcid");});
test("alder -> alder", function() {deepEqual( Stem("alder"), "alder");});
test("alderman -> alderman", function() {deepEqual( Stem("alderman"), "alderman");});
test("aldermen -> aldermen", function() {deepEqual( Stem("aldermen"), "aldermen");});
test("alderney -> aldernei", function() {deepEqual( Stem("alderney"), "aldernei");});
test("aldersgate -> aldersg", function() {deepEqual( Stem("aldersgate"), "aldersg");});
test("ale -> al", function() {deepEqual( Stem("ale"), "al");});
test("alecto -> alecto", function() {deepEqual( Stem("alecto"), "alecto");});
test("alehouse -> alehous", function() {deepEqual( Stem("alehouse"), "alehous");});
test("alehouses -> alehous", function() {deepEqual( Stem("alehouses"), "alehous");});
test("alencon -> alencon", function() {deepEqual( Stem("alencon"), "alencon");});
test("alengon -> alengon", function() {deepEqual( Stem("alengon"), "alengon");});
test("aleppo -> aleppo", function() {deepEqual( Stem("aleppo"), "aleppo");});
test("alert -> alert", function() {deepEqual( Stem("alert"), "alert");});
test("ales -> al", function() {deepEqual( Stem("ales"), "al");});
test("alessandro -> alessandro", function() {deepEqual( Stem("alessandro"), "alessandro");});
test("alewife -> alewif", function() {deepEqual( Stem("alewife"), "alewif");});
test("alexander -> alexand", function() {deepEqual( Stem("alexander"), "alexand");});
test("alexanders -> alexand", function() {deepEqual( Stem("alexanders"), "alexand");});
test("alexandria -> alexandria", function() {deepEqual( Stem("alexandria"), "alexandria");});
test("alexandrian -> alexandrian", function() {deepEqual( Stem("alexandrian"), "alexandrian");});
test("alexas -> alexa", function() {deepEqual( Stem("alexas"), "alexa");});
test("alexis -> alexi", function() {deepEqual( Stem("alexis"), "alexi");});
test("alge -> alg", function() {deepEqual( Stem("alge"), "alg");});
test("algebra -> algebra", function() {deepEqual( Stem("algebra"), "algebra");});
test("alias -> alia", function() {deepEqual( Stem("alias"), "alia");});
test("alice -> alic", function() {deepEqual( Stem("alice"), "alic");});
test("alien -> alien", function() {deepEqual( Stem("alien"), "alien");});
test("aliena -> aliena", function() {deepEqual( Stem("aliena"), "aliena");});
test("alieni -> alieni", function() {deepEqual( Stem("alieni"), "alieni");});
test("alight -> alight", function() {deepEqual( Stem("alight"), "alight");});
test("alighted -> alight", function() {deepEqual( Stem("alighted"), "alight");});
test("alights -> alight", function() {deepEqual( Stem("alights"), "alight");});
test("aliis -> alii", function() {deepEqual( Stem("aliis"), "alii");});
test("alike -> alik", function() {deepEqual( Stem("alike"), "alik");});
test("alisander -> alisand", function() {deepEqual( Stem("alisander"), "alisand");});
test("alive -> aliv", function() {deepEqual( Stem("alive"), "aliv");});
test("all -> all", function() {deepEqual( Stem("all"), "all");});
test("alla -> alla", function() {deepEqual( Stem("alla"), "alla");});
test("allay -> allai", function() {deepEqual( Stem("allay"), "allai");});
test("allayed -> allai", function() {deepEqual( Stem("allayed"), "allai");});
test("allaying -> allai", function() {deepEqual( Stem("allaying"), "allai");});
test("allayment -> allay", function() {deepEqual( Stem("allayment"), "allay");});
test("allayments -> allay", function() {deepEqual( Stem("allayments"), "allay");});
test("allays -> allai", function() {deepEqual( Stem("allays"), "allai");});
test("allee -> alle", function() {deepEqual( Stem("allee"), "alle");});
test("allegation -> alleg", function() {deepEqual( Stem("allegation"), "alleg");});
test("allegations -> alleg", function() {deepEqual( Stem("allegations"), "alleg");});
test("allege -> alleg", function() {deepEqual( Stem("allege"), "alleg");});
test("alleged -> alleg", function() {deepEqual( Stem("alleged"), "alleg");});
test("allegiance -> allegi", function() {deepEqual( Stem("allegiance"), "allegi");});
test("allegiant -> allegi", function() {deepEqual( Stem("allegiant"), "allegi");});
test("allegorical -> allegor", function() {deepEqual( Stem("allegorical"), "allegor");});
test("allegories -> allegori", function() {deepEqual( Stem("allegories"), "allegori");});
test("alleine -> allein", function() {deepEqual( Stem("alleine"), "allein");});
test("alley -> allei", function() {deepEqual( Stem("alley"), "allei");});
test("alleys -> allei", function() {deepEqual( Stem("alleys"), "allei");});
test("allhallowmas -> allhallowma", function() {deepEqual( Stem("allhallowmas"), "allhallowma");});
test("alliance -> allianc", function() {deepEqual( Stem("alliance"), "allianc");});
test("allicholy -> allicholi", function() {deepEqual( Stem("allicholy"), "allicholi");});
test("allied -> alli", function() {deepEqual( Stem("allied"), "alli");});
test("allies -> alli", function() {deepEqual( Stem("allies"), "alli");});
test("alligant -> allig", function() {deepEqual( Stem("alligant"), "allig");});
test("alligator -> allig", function() {deepEqual( Stem("alligator"), "allig");});
test("allocution -> allocut", function() {deepEqual( Stem("allocution"), "allocut");});
test("allons -> allon", function() {deepEqual( Stem("allons"), "allon");});
test("allot -> allot", function() {deepEqual( Stem("allot"), "allot");});
test("allots -> allot", function() {deepEqual( Stem("allots"), "allot");});
test("allotted -> allot", function() {deepEqual( Stem("allotted"), "allot");});
test("allottery -> allotteri", function() {deepEqual( Stem("allottery"), "allotteri");});
test("allow -> allow", function() {deepEqual( Stem("allow"), "allow");});
test("allowance -> allow", function() {deepEqual( Stem("allowance"), "allow");});
test("allowed -> allow", function() {deepEqual( Stem("allowed"), "allow");});
test("allowing -> allow", function() {deepEqual( Stem("allowing"), "allow");});
test("allows -> allow", function() {deepEqual( Stem("allows"), "allow");});
test("allude -> allud", function() {deepEqual( Stem("allude"), "allud");});
test("alluded -> allud", function() {deepEqual( Stem("alluded"), "allud");});
test("allur -> allur", function() {deepEqual( Stem("allur"), "allur");});
test("allure -> allur", function() {deepEqual( Stem("allure"), "allur");});
test("allurement -> allur", function() {deepEqual( Stem("allurement"), "allur");});
test("alluring -> allur", function() {deepEqual( Stem("alluring"), "allur");});
test("allusion -> allus", function() {deepEqual( Stem("allusion"), "allus");});
test("allusions -> allus", function() {deepEqual( Stem("allusions"), "allus");});
test("ally -> alli", function() {deepEqual( Stem("ally"), "alli");});
test("allycholly -> allycholli", function() {deepEqual( Stem("allycholly"), "allycholli");});
test("almack -> almack", function() {deepEqual( Stem("almack"), "almack");});
test("almain -> almain", function() {deepEqual( Stem("almain"), "almain");});
test("almanac -> almanac", function() {deepEqual( Stem("almanac"), "almanac");});
test("almanack -> almanack", function() {deepEqual( Stem("almanack"), "almanack");});
test("almanacs -> almanac", function() {deepEqual( Stem("almanacs"), "almanac");});
test("almighty -> almighti", function() {deepEqual( Stem("almighty"), "almighti");});
test("almond -> almond", function() {deepEqual( Stem("almond"), "almond");});
test("almost -> almost", function() {deepEqual( Stem("almost"), "almost");});
test("alms -> alm", function() {deepEqual( Stem("alms"), "alm");});
test("almsman -> almsman", function() {deepEqual( Stem("almsman"), "almsman");});
test("alnaschar -> alnaschar", function() {deepEqual( Stem("alnaschar"), "alnaschar");});
test("aloes -> alo", function() {deepEqual( Stem("aloes"), "alo");});
test("aloft -> aloft", function() {deepEqual( Stem("aloft"), "aloft");});
test("alone -> alon", function() {deepEqual( Stem("alone"), "alon");});
test("along -> along", function() {deepEqual( Stem("along"), "along");});
test("alongside -> alongsid", function() {deepEqual( Stem("alongside"), "alongsid");});
test("alonso -> alonso", function() {deepEqual( Stem("alonso"), "alonso");});
test("aloof -> aloof", function() {deepEqual( Stem("aloof"), "aloof");});
test("aloud -> aloud", function() {deepEqual( Stem("aloud"), "aloud");});
test("alphabet -> alphabet", function() {deepEqual( Stem("alphabet"), "alphabet");});
test("alphabetical -> alphabet", function() {deepEqual( Stem("alphabetical"), "alphabet");});
test("alphonso -> alphonso", function() {deepEqual( Stem("alphonso"), "alphonso");});
test("alps -> alp", function() {deepEqual( Stem("alps"), "alp");});
test("already -> alreadi", function() {deepEqual( Stem("already"), "alreadi");});
test("also -> also", function() {deepEqual( Stem("also"), "also");});
test("alt -> alt", function() {deepEqual( Stem("alt"), "alt");});
test("altar -> altar", function() {deepEqual( Stem("altar"), "altar");});
test("altars -> altar", function() {deepEqual( Stem("altars"), "altar");});
test("alter -> alter", function() {deepEqual( Stem("alter"), "alter");});
test("alteration -> alter", function() {deepEqual( Stem("alteration"), "alter");});
test("altercation -> alterc", function() {deepEqual( Stem("altercation"), "alterc");});
test("altered -> alter", function() {deepEqual( Stem("altered"), "alter");});
test("altering -> alter", function() {deepEqual( Stem("altering"), "alter");});
test("alternately -> altern", function() {deepEqual( Stem("alternately"), "altern");});
test("alternations -> altern", function() {deepEqual( Stem("alternations"), "altern");});
test("alters -> alter", function() {deepEqual( Stem("alters"), "alter");});
test("althaea -> althaea", function() {deepEqual( Stem("althaea"), "althaea");});
test("although -> although", function() {deepEqual( Stem("although"), "although");});
test("altitude -> altitud", function() {deepEqual( Stem("altitude"), "altitud");});
test("altogether -> altogeth", function() {deepEqual( Stem("altogether"), "altogeth");});
test("alton -> alton", function() {deepEqual( Stem("alton"), "alton");});
test("alway -> alwai", function() {deepEqual( Stem("alway"), "alwai");});
test("always -> alwai", function() {deepEqual( Stem("always"), "alwai");});
test("am -> am", function() {deepEqual( Stem("am"), "am");});
test("amaimon -> amaimon", function() {deepEqual( Stem("amaimon"), "amaimon");});
test("amain -> amain", function() {deepEqual( Stem("amain"), "amain");});
test("amaking -> amak", function() {deepEqual( Stem("amaking"), "amak");});
test("amamon -> amamon", function() {deepEqual( Stem("amamon"), "amamon");});
test("amantium -> amantium", function() {deepEqual( Stem("amantium"), "amantium");});
test("amanuensis -> amanuensi", function() {deepEqual( Stem("amanuensis"), "amanuensi");});
test("amaranthe -> amaranth", function() {deepEqual( Stem("amaranthe"), "amaranth");});
test("amassed -> amass", function() {deepEqual( Stem("amassed"), "amass");});
test("amateur -> amateur", function() {deepEqual( Stem("amateur"), "amateur");});
test("amateurs -> amateur", function() {deepEqual( Stem("amateurs"), "amateur");});
test("amaz -> amaz", function() {deepEqual( Stem("amaz"), "amaz");});
test("amaze -> amaz", function() {deepEqual( Stem("amaze"), "amaz");});
test("amazed -> amaz", function() {deepEqual( Stem("amazed"), "amaz");});
test("amazedly -> amazedli", function() {deepEqual( Stem("amazedly"), "amazedli");});
test("amazedness -> amazed", function() {deepEqual( Stem("amazedness"), "amazed");});
test("amazement -> amaz", function() {deepEqual( Stem("amazement"), "amaz");});
test("amazes -> amaz", function() {deepEqual( Stem("amazes"), "amaz");});
test("amazeth -> amazeth", function() {deepEqual( Stem("amazeth"), "amazeth");});
test("amazing -> amaz", function() {deepEqual( Stem("amazing"), "amaz");});
test("amazon -> amazon", function() {deepEqual( Stem("amazon"), "amazon");});
test("amazonian -> amazonian", function() {deepEqual( Stem("amazonian"), "amazonian");});
test("amazons -> amazon", function() {deepEqual( Stem("amazons"), "amazon");});
test("ambassador -> ambassador", function() {deepEqual( Stem("ambassador"), "ambassador");});
test("ambassadors -> ambassador", function() {deepEqual( Stem("ambassadors"), "ambassador");});
test("ambassadress -> ambassadress", function() {deepEqual( Stem("ambassadress"), "ambassadress");});
test("amber -> amber", function() {deepEqual( Stem("amber"), "amber");});
test("ambiguides -> ambiguid", function() {deepEqual( Stem("ambiguides"), "ambiguid");});
test("ambiguities -> ambigu", function() {deepEqual( Stem("ambiguities"), "ambigu");});
test("ambiguous -> ambigu", function() {deepEqual( Stem("ambiguous"), "ambigu");});
test("ambition -> ambit", function() {deepEqual( Stem("ambition"), "ambit");});
test("ambitions -> ambit", function() {deepEqual( Stem("ambitions"), "ambit");});
test("ambitious -> ambiti", function() {deepEqual( Stem("ambitious"), "ambiti");});
test("ambitiously -> ambiti", function() {deepEqual( Stem("ambitiously"), "ambiti");});
test("amble -> ambl", function() {deepEqual( Stem("amble"), "ambl");});
test("ambled -> ambl", function() {deepEqual( Stem("ambled"), "ambl");});
test("ambles -> ambl", function() {deepEqual( Stem("ambles"), "ambl");});
test("ambling -> ambl", function() {deepEqual( Stem("ambling"), "ambl");});
test("ambo -> ambo", function() {deepEqual( Stem("ambo"), "ambo");});
test("ambrosial -> ambrosi", function() {deepEqual( Stem("ambrosial"), "ambrosi");});
test("ambuscadoes -> ambuscado", function() {deepEqual( Stem("ambuscadoes"), "ambuscado");});
test("ambush -> ambush", function() {deepEqual( Stem("ambush"), "ambush");});
test("amelia -> amelia", function() {deepEqual( Stem("amelia"), "amelia");});
test("amelie -> ameli", function() {deepEqual( Stem("amelie"), "ameli");});
test("amen -> amen", function() {deepEqual( Stem("amen"), "amen");});
test("amenaide -> amenaid", function() {deepEqual( Stem("amenaide"), "amenaid");});
test("amend -> amend", function() {deepEqual( Stem("amend"), "amend");});
test("amended -> amend", function() {deepEqual( Stem("amended"), "amend");});
test("amendment -> amend", function() {deepEqual( Stem("amendment"), "amend");});
test("amends -> amend", function() {deepEqual( Stem("amends"), "amend");});
test("amerce -> amerc", function() {deepEqual( Stem("amerce"), "amerc");});
test("america -> america", function() {deepEqual( Stem("america"), "america");});
test("american -> american", function() {deepEqual( Stem("american"), "american");});
test("ames -> am", function() {deepEqual( Stem("ames"), "am");});
test("ami -> ami", function() {deepEqual( Stem("ami"), "ami");});
test("amiable -> amiabl", function() {deepEqual( Stem("amiable"), "amiabl");});
test("amiably -> amiabl", function() {deepEqual( Stem("amiably"), "amiabl");});
test("amicable -> amic", function() {deepEqual( Stem("amicable"), "amic");});
test("amid -> amid", function() {deepEqual( Stem("amid"), "amid");});
test("amidst -> amidst", function() {deepEqual( Stem("amidst"), "amidst");});
test("amiens -> amien", function() {deepEqual( Stem("amiens"), "amien");});
test("amis -> ami", function() {deepEqual( Stem("amis"), "ami");});
test("amiss -> amiss", function() {deepEqual( Stem("amiss"), "amiss");});
test("amities -> amiti", function() {deepEqual( Stem("amities"), "amiti");});
test("amity -> amiti", function() {deepEqual( Stem("amity"), "amiti");});
test("ammunition -> ammunit", function() {deepEqual( Stem("ammunition"), "ammunit");});
test("amnipotent -> amnipot", function() {deepEqual( Stem("amnipotent"), "amnipot");});
test("among -> among", function() {deepEqual( Stem("among"), "among");});
test("amongst -> amongst", function() {deepEqual( Stem("amongst"), "amongst");});
test("amorous -> amor", function() {deepEqual( Stem("amorous"), "amor");});
test("amorously -> amor", function() {deepEqual( Stem("amorously"), "amor");});
test("amort -> amort", function() {deepEqual( Stem("amort"), "amort");});
test("amount -> amount", function() {deepEqual( Stem("amount"), "amount");});
test("amounts -> amount", function() {deepEqual( Stem("amounts"), "amount");});
test("amour -> amour", function() {deepEqual( Stem("amour"), "amour");});
test("amours -> amour", function() {deepEqual( Stem("amours"), "amour");});
test("amphimacus -> amphimacu", function() {deepEqual( Stem("amphimacus"), "amphimacu");});
test("ample -> ampl", function() {deepEqual( Stem("ample"), "ampl");});
test("ampler -> ampler", function() {deepEqual( Stem("ampler"), "ampler");});
test("amplest -> amplest", function() {deepEqual( Stem("amplest"), "amplest");});
test("amplified -> amplifi", function() {deepEqual( Stem("amplified"), "amplifi");});
test("amplify -> amplifi", function() {deepEqual( Stem("amplify"), "amplifi");});
test("amply -> ampli", function() {deepEqual( Stem("amply"), "ampli");});
test("ampthill -> ampthil", function() {deepEqual( Stem("ampthill"), "ampthil");});
test("amurath -> amurath", function() {deepEqual( Stem("amurath"), "amurath");});
test("amuse -> amus", function() {deepEqual( Stem("amuse"), "amus");});
test("amused -> amus", function() {deepEqual( Stem("amused"), "amus");});
test("amusement -> amus", function() {deepEqual( Stem("amusement"), "amus");});
test("amusements -> amus", function() {deepEqual( Stem("amusements"), "amus");});
test("amuser -> amus", function() {deepEqual( Stem("amuser"), "amus");});
test("amuses -> amus", function() {deepEqual( Stem("amuses"), "amus");});
test("amusing -> amus", function() {deepEqual( Stem("amusing"), "amus");});
test("amyntas -> amynta", function() {deepEqual( Stem("amyntas"), "amynta");});
test("an -> an", function() {deepEqual( Stem("an"), "an");});
test("analyse -> analys", function() {deepEqual( Stem("analyse"), "analys");});
test("anathemas -> anathema", function() {deepEqual( Stem("anathemas"), "anathema");});
test("anatomiz -> anatomiz", function() {deepEqual( Stem("anatomiz"), "anatomiz");});
test("anatomize -> anatom", function() {deepEqual( Stem("anatomize"), "anatom");});
test("anatomy -> anatomi", function() {deepEqual( Stem("anatomy"), "anatomi");});
test("anax -> anax", function() {deepEqual( Stem("anax"), "anax");});
test("ancestor -> ancestor", function() {deepEqual( Stem("ancestor"), "ancestor");});
test("ancestors -> ancestor", function() {deepEqual( Stem("ancestors"), "ancestor");});
test("ancestral -> ancestr", function() {deepEqual( Stem("ancestral"), "ancestr");});
test("ancestry -> ancestri", function() {deepEqual( Stem("ancestry"), "ancestri");});
test("anchises -> anchis", function() {deepEqual( Stem("anchises"), "anchis");});
test("anchor -> anchor", function() {deepEqual( Stem("anchor"), "anchor");});
test("anchorage -> anchorag", function() {deepEqual( Stem("anchorage"), "anchorag");});
test("anchored -> anchor", function() {deepEqual( Stem("anchored"), "anchor");});
test("anchoring -> anchor", function() {deepEqual( Stem("anchoring"), "anchor");});
test("anchorite -> anchorit", function() {deepEqual( Stem("anchorite"), "anchorit");});
test("anchors -> anchor", function() {deepEqual( Stem("anchors"), "anchor");});
test("anchovies -> anchovi", function() {deepEqual( Stem("anchovies"), "anchovi");});
test("ancient -> ancient", function() {deepEqual( Stem("ancient"), "ancient");});
test("ancientry -> ancientri", function() {deepEqual( Stem("ancientry"), "ancientri");});
test("ancients -> ancient", function() {deepEqual( Stem("ancients"), "ancient");});
test("ancus -> ancu", function() {deepEqual( Stem("ancus"), "ancu");});
test("and -> and", function() {deepEqual( Stem("and"), "and");});
test("andirons -> andiron", function() {deepEqual( Stem("andirons"), "andiron");});
test("andpholus -> andpholu", function() {deepEqual( Stem("andpholus"), "andpholu");});
test("andren -> andren", function() {deepEqual( Stem("andren"), "andren");});
test("andrew -> andrew", function() {deepEqual( Stem("andrew"), "andrew");});
test("andromache -> andromach", function() {deepEqual( Stem("andromache"), "andromach");});
test("andron -> andron", function() {deepEqual( Stem("andron"), "andron");});
test("andronici -> andronici", function() {deepEqual( Stem("andronici"), "andronici");});
test("andronicus -> andronicu", function() {deepEqual( Stem("andronicus"), "andronicu");});
test("anecdotes -> anecdot", function() {deepEqual( Stem("anecdotes"), "anecdot");});
test("anew -> anew", function() {deepEqual( Stem("anew"), "anew");});
test("ang -> ang", function() {deepEqual( Stem("ang"), "ang");});
test("angcore -> angcor", function() {deepEqual( Stem("angcore"), "angcor");});
test("angel -> angel", function() {deepEqual( Stem("angel"), "angel");});
test("angelic -> angel", function() {deepEqual( Stem("angelic"), "angel");});
test("angelica -> angelica", function() {deepEqual( Stem("angelica"), "angelica");});
test("angelical -> angel", function() {deepEqual( Stem("angelical"), "angel");});
test("angelically -> angel", function() {deepEqual( Stem("angelically"), "angel");});
test("angelo -> angelo", function() {deepEqual( Stem("angelo"), "angelo");});
test("angels -> angel", function() {deepEqual( Stem("angels"), "angel");});
test("anger -> anger", function() {deepEqual( Stem("anger"), "anger");});
test("angered -> anger", function() {deepEqual( Stem("angered"), "anger");});
test("angerly -> angerli", function() {deepEqual( Stem("angerly"), "angerli");});
test("angers -> anger", function() {deepEqual( Stem("angers"), "anger");});
test("anges -> ang", function() {deepEqual( Stem("anges"), "ang");});
test("angiers -> angier", function() {deepEqual( Stem("angiers"), "angier");});
test("angl -> angl", function() {deepEqual( Stem("angl"), "angl");});
test("anglais -> anglai", function() {deepEqual( Stem("anglais"), "anglai");});
test("angle -> angl", function() {deepEqual( Stem("angle"), "angl");});
test("angler -> angler", function() {deepEqual( Stem("angler"), "angler");});
test("angleterre -> angleterr", function() {deepEqual( Stem("angleterre"), "angleterr");});
test("angliae -> anglia", function() {deepEqual( Stem("angliae"), "anglia");});
test("anglican -> anglican", function() {deepEqual( Stem("anglican"), "anglican");});
test("angling -> angl", function() {deepEqual( Stem("angling"), "angl");});
test("anglish -> anglish", function() {deepEqual( Stem("anglish"), "anglish");});
test("anglo -> anglo", function() {deepEqual( Stem("anglo"), "anglo");});
test("angouleme -> angoulem", function() {deepEqual( Stem("angouleme"), "angoulem");});
test("angrily -> angrili", function() {deepEqual( Stem("angrily"), "angrili");});
test("angry -> angri", function() {deepEqual( Stem("angry"), "angri");});
test("anguish -> anguish", function() {deepEqual( Stem("anguish"), "anguish");});
test("angus -> angu", function() {deepEqual( Stem("angus"), "angu");});
test("animal -> anim", function() {deepEqual( Stem("animal"), "anim");});
test("animals -> anim", function() {deepEqual( Stem("animals"), "anim");});
test("animis -> animi", function() {deepEqual( Stem("animis"), "animi");});
test("anjou -> anjou", function() {deepEqual( Stem("anjou"), "anjou");});
test("ankle -> ankl", function() {deepEqual( Stem("ankle"), "ankl");});
test("ankles -> ankl", function() {deepEqual( Stem("ankles"), "ankl");});
test("ann -> ann", function() {deepEqual( Stem("ann"), "ann");});
test("anna -> anna", function() {deepEqual( Stem("anna"), "anna");});
test("annals -> annal", function() {deepEqual( Stem("annals"), "annal");});
test("anne -> ann", function() {deepEqual( Stem("anne"), "ann");});
test("annex -> annex", function() {deepEqual( Stem("annex"), "annex");});
test("annexed -> annex", function() {deepEqual( Stem("annexed"), "annex");});
test("annexions -> annexion", function() {deepEqual( Stem("annexions"), "annexion");});
test("annexment -> annex", function() {deepEqual( Stem("annexment"), "annex");});
test("annihilate -> annihil", function() {deepEqual( Stem("annihilate"), "annihil");});
test("annihilated -> annihil", function() {deepEqual( Stem("annihilated"), "annihil");});
test("anniversary -> anniversari", function() {deepEqual( Stem("anniversary"), "anniversari");});
test("anno -> anno", function() {deepEqual( Stem("anno"), "anno");});
test("annothanize -> annothan", function() {deepEqual( Stem("annothanize"), "annothan");});
test("announce -> announc", function() {deepEqual( Stem("announce"), "announc");});
test("announced -> announc", function() {deepEqual( Stem("announced"), "announc");});
test("announcement -> announc", function() {deepEqual( Stem("announcement"), "announc");});
test("announcements -> announc", function() {deepEqual( Stem("announcements"), "announc");});
test("announces -> announc", function() {deepEqual( Stem("announces"), "announc");});
test("announcing -> announc", function() {deepEqual( Stem("announcing"), "announc");});
test("annoy -> annoi", function() {deepEqual( Stem("annoy"), "annoi");});
test("annoyance -> annoy", function() {deepEqual( Stem("annoyance"), "annoy");});
test("annoyed -> annoi", function() {deepEqual( Stem("annoyed"), "annoi");});
test("annoying -> annoi", function() {deepEqual( Stem("annoying"), "annoi");});
test("annual -> annual", function() {deepEqual( Stem("annual"), "annual");});
test("annuities -> annuiti", function() {deepEqual( Stem("annuities"), "annuiti");});
test("annuity -> annuiti", function() {deepEqual( Stem("annuity"), "annuiti");});
test("annum -> annum", function() {deepEqual( Stem("annum"), "annum");});
test("anoint -> anoint", function() {deepEqual( Stem("anoint"), "anoint");});
test("anointed -> anoint", function() {deepEqual( Stem("anointed"), "anoint");});
test("anon -> anon", function() {deepEqual( Stem("anon"), "anon");});
test("anonymously -> anonym", function() {deepEqual( Stem("anonymously"), "anonym");});
test("another -> anoth", function() {deepEqual( Stem("another"), "anoth");});
test("anselmo -> anselmo", function() {deepEqual( Stem("anselmo"), "anselmo");});
test("answer -> answer", function() {deepEqual( Stem("answer"), "answer");});
test("answerable -> answer", function() {deepEqual( Stem("answerable"), "answer");});
test("answered -> answer", function() {deepEqual( Stem("answered"), "answer");});
test("answerest -> answerest", function() {deepEqual( Stem("answerest"), "answerest");});
test("answering -> answer", function() {deepEqual( Stem("answering"), "answer");});
test("answers -> answer", function() {deepEqual( Stem("answers"), "answer");});
test("ant -> ant", function() {deepEqual( Stem("ant"), "ant");});
test("ante -> ant", function() {deepEqual( Stem("ante"), "ant");});
test("antechamber -> antechamb", function() {deepEqual( Stem("antechamber"), "antechamb");});
test("antenor -> antenor", function() {deepEqual( Stem("antenor"), "antenor");});
test("antenorides -> antenorid", function() {deepEqual( Stem("antenorides"), "antenorid");});
test("anteroom -> anteroom", function() {deepEqual( Stem("anteroom"), "anteroom");});
test("anthem -> anthem", function() {deepEqual( Stem("anthem"), "anthem");});
test("anthems -> anthem", function() {deepEqual( Stem("anthems"), "anthem");});
test("anthony -> anthoni", function() {deepEqual( Stem("anthony"), "anthoni");});
test("anthropophagi -> anthropophagi", function() {deepEqual( Stem("anthropophagi"), "anthropophagi");});
test("anthropophaginian -> anthropophaginian", function() {deepEqual( Stem("anthropophaginian"), "anthropophaginian");});
test("anti -> anti", function() {deepEqual( Stem("anti"), "anti");});
test("antiates -> antiat", function() {deepEqual( Stem("antiates"), "antiat");});
test("antic -> antic", function() {deepEqual( Stem("antic"), "antic");});
test("anticipate -> anticip", function() {deepEqual( Stem("anticipate"), "anticip");});
test("anticipated -> anticip", function() {deepEqual( Stem("anticipated"), "anticip");});
test("anticipates -> anticip", function() {deepEqual( Stem("anticipates"), "anticip");});
test("anticipatest -> anticipatest", function() {deepEqual( Stem("anticipatest"), "anticipatest");});
test("anticipating -> anticip", function() {deepEqual( Stem("anticipating"), "anticip");});
test("anticipation -> anticip", function() {deepEqual( Stem("anticipation"), "anticip");});
test("antick -> antick", function() {deepEqual( Stem("antick"), "antick");});
test("anticly -> anticli", function() {deepEqual( Stem("anticly"), "anticli");});
test("antics -> antic", function() {deepEqual( Stem("antics"), "antic");});
test("antidote -> antidot", function() {deepEqual( Stem("antidote"), "antidot");});
test("antidotes -> antidot", function() {deepEqual( Stem("antidotes"), "antidot");});
test("antigonus -> antigonu", function() {deepEqual( Stem("antigonus"), "antigonu");});
test("antiopa -> antiopa", function() {deepEqual( Stem("antiopa"), "antiopa");});
test("antipathy -> antipathi", function() {deepEqual( Stem("antipathy"), "antipathi");});
test("antiphlogistic -> antiphlogist", function() {deepEqual( Stem("antiphlogistic"), "antiphlogist");});
test("antipholus -> antipholu", function() {deepEqual( Stem("antipholus"), "antipholu");});
test("antipholuses -> antipholus", function() {deepEqual( Stem("antipholuses"), "antipholus");});
test("antipodes -> antipod", function() {deepEqual( Stem("antipodes"), "antipod");});
test("antiquary -> antiquari", function() {deepEqual( Stem("antiquary"), "antiquari");});
test("antique -> antiqu", function() {deepEqual( Stem("antique"), "antiqu");});
test("antiques -> antiqu", function() {deepEqual( Stem("antiques"), "antiqu");});
test("antiquities -> antiqu", function() {deepEqual( Stem("antiquities"), "antiqu");});
test("antiquity -> antiqu", function() {deepEqual( Stem("antiquity"), "antiqu");});
test("antium -> antium", function() {deepEqual( Stem("antium"), "antium");});
test("antoinette -> antoinett", function() {deepEqual( Stem("antoinette"), "antoinett");});
test("antoniad -> antoniad", function() {deepEqual( Stem("antoniad"), "antoniad");});
test("antonio -> antonio", function() {deepEqual( Stem("antonio"), "antonio");});
test("antonius -> antoniu", function() {deepEqual( Stem("antonius"), "antoniu");});
test("antony -> antoni", function() {deepEqual( Stem("antony"), "antoni");});
test("antres -> antr", function() {deepEqual( Stem("antres"), "antr");});
test("anvil -> anvil", function() {deepEqual( Stem("anvil"), "anvil");});
test("anxieties -> anxieti", function() {deepEqual( Stem("anxieties"), "anxieti");});
test("anxiety -> anxieti", function() {deepEqual( Stem("anxiety"), "anxieti");});
test("anxious -> anxiou", function() {deepEqual( Stem("anxious"), "anxiou");});
test("anxiously -> anxious", function() {deepEqual( Stem("anxiously"), "anxious");});
test("any -> ani", function() {deepEqual( Stem("any"), "ani");});
test("anybody -> anybodi", function() {deepEqual( Stem("anybody"), "anybodi");});
test("anyhow -> anyhow", function() {deepEqual( Stem("anyhow"), "anyhow");});
test("anyone -> anyon", function() {deepEqual( Stem("anyone"), "anyon");});
test("anything -> anyth", function() {deepEqual( Stem("anything"), "anyth");});
test("anyway -> anywai", function() {deepEqual( Stem("anyway"), "anywai");});
test("anyways -> anywai", function() {deepEqual( Stem("anyways"), "anywai");});
test("anywhere -> anywher", function() {deepEqual( Stem("anywhere"), "anywher");});
test("aohnh -> aohnh", function() {deepEqual( Stem("aohnh"), "aohnh");});
test("ap -> ap", function() {deepEqual( Stem("ap"), "ap");});
test("apace -> apac", function() {deepEqual( Stem("apace"), "apac");});
test("apart -> apart", function() {deepEqual( Stem("apart"), "apart");});
test("apartment -> apart", function() {deepEqual( Stem("apartment"), "apart");});
test("apartments -> apart", function() {deepEqual( Stem("apartments"), "apart");});
test("apathetic -> apathet", function() {deepEqual( Stem("apathetic"), "apathet");});
test("ape -> ap", function() {deepEqual( Stem("ape"), "ap");});
test("apemantus -> apemantu", function() {deepEqual( Stem("apemantus"), "apemantu");});
test("apennines -> apennin", function() {deepEqual( Stem("apennines"), "apennin");});
test("apes -> ap", function() {deepEqual( Stem("apes"), "ap");});
test("apiece -> apiec", function() {deepEqual( Stem("apiece"), "apiec");});
test("apish -> apish", function() {deepEqual( Stem("apish"), "apish");});
test("apollinem -> apollinem", function() {deepEqual( Stem("apollinem"), "apollinem");});
test("apollo -> apollo", function() {deepEqual( Stem("apollo"), "apollo");});
test("apollodorus -> apollodoru", function() {deepEqual( Stem("apollodorus"), "apollodoru");});
test("apologetically -> apologet", function() {deepEqual( Stem("apologetically"), "apologet");});
test("apologies -> apologi", function() {deepEqual( Stem("apologies"), "apologi");});
test("apologise -> apologis", function() {deepEqual( Stem("apologise"), "apologis");});
test("apologised -> apologis", function() {deepEqual( Stem("apologised"), "apologis");});
test("apologists -> apologist", function() {deepEqual( Stem("apologists"), "apologist");});
test("apologize -> apolog", function() {deepEqual( Stem("apologize"), "apolog");});
test("apologized -> apolog", function() {deepEqual( Stem("apologized"), "apolog");});
test("apologue -> apologu", function() {deepEqual( Stem("apologue"), "apologu");});
test("apology -> apologi", function() {deepEqual( Stem("apology"), "apologi");});
test("apoplectic -> apoplect", function() {deepEqual( Stem("apoplectic"), "apoplect");});
test("apoplex -> apoplex", function() {deepEqual( Stem("apoplex"), "apoplex");});
test("apoplexy -> apoplexi", function() {deepEqual( Stem("apoplexy"), "apoplexi");});
test("apostle -> apostl", function() {deepEqual( Stem("apostle"), "apostl");});
test("apostles -> apostl", function() {deepEqual( Stem("apostles"), "apostl");});
test("apostrophas -> apostropha", function() {deepEqual( Stem("apostrophas"), "apostropha");});
test("apoth -> apoth", function() {deepEqual( Stem("apoth"), "apoth");});
test("apothecary -> apothecari", function() {deepEqual( Stem("apothecary"), "apothecari");});
test("appal -> appal", function() {deepEqual( Stem("appal"), "appal");});
test("appall -> appal", function() {deepEqual( Stem("appall"), "appal");});
test("appalled -> appal", function() {deepEqual( Stem("appalled"), "appal");});
test("appals -> appal", function() {deepEqual( Stem("appals"), "appal");});
test("apparatus -> apparatu", function() {deepEqual( Stem("apparatus"), "apparatu");});
test("apparel -> apparel", function() {deepEqual( Stem("apparel"), "apparel");});
test("apparell -> apparel", function() {deepEqual( Stem("apparell"), "apparel");});
test("apparelled -> apparel", function() {deepEqual( Stem("apparelled"), "apparel");});
test("apparent -> appar", function() {deepEqual( Stem("apparent"), "appar");});
test("apparently -> appar", function() {deepEqual( Stem("apparently"), "appar");});
test("apparition -> apparit", function() {deepEqual( Stem("apparition"), "apparit");});
test("apparitions -> apparit", function() {deepEqual( Stem("apparitions"), "apparit");});
test("appartements -> appart", function() {deepEqual( Stem("appartements"), "appart");});
test("appeach -> appeach", function() {deepEqual( Stem("appeach"), "appeach");});
test("appeal -> appeal", function() {deepEqual( Stem("appeal"), "appeal");});
test("appealed -> appeal", function() {deepEqual( Stem("appealed"), "appeal");});
test("appealing -> appeal", function() {deepEqual( Stem("appealing"), "appeal");});
test("appeals -> appeal", function() {deepEqual( Stem("appeals"), "appeal");});
test("appear -> appear", function() {deepEqual( Stem("appear"), "appear");});
test("appearance -> appear", function() {deepEqual( Stem("appearance"), "appear");});
test("appearances -> appear", function() {deepEqual( Stem("appearances"), "appear");});
test("appeared -> appear", function() {deepEqual( Stem("appeared"), "appear");});
test("appeareth -> appeareth", function() {deepEqual( Stem("appeareth"), "appeareth");});
test("appearing -> appear", function() {deepEqual( Stem("appearing"), "appear");});
test("appears -> appear", function() {deepEqual( Stem("appears"), "appear");});
test("appeas -> appea", function() {deepEqual( Stem("appeas"), "appea");});
test("appease -> appeas", function() {deepEqual( Stem("appease"), "appeas");});
test("appeased -> appeas", function() {deepEqual( Stem("appeased"), "appeas");});
test("appelant -> appel", function() {deepEqual( Stem("appelant"), "appel");});
test("appele -> appel", function() {deepEqual( Stem("appele"), "appel");});
test("appelee -> appele", function() {deepEqual( Stem("appelee"), "appele");});
test("appeles -> appel", function() {deepEqual( Stem("appeles"), "appel");});
test("appelez -> appelez", function() {deepEqual( Stem("appelez"), "appelez");});
test("appellant -> appel", function() {deepEqual( Stem("appellant"), "appel");});
test("appellants -> appel", function() {deepEqual( Stem("appellants"), "appel");});
test("appelons -> appelon", function() {deepEqual( Stem("appelons"), "appelon");});
test("appended -> append", function() {deepEqual( Stem("appended"), "append");});
test("appendix -> appendix", function() {deepEqual( Stem("appendix"), "appendix");});
test("apperil -> apperil", function() {deepEqual( Stem("apperil"), "apperil");});
test("appertain -> appertain", function() {deepEqual( Stem("appertain"), "appertain");});
test("appertaining -> appertain", function() {deepEqual( Stem("appertaining"), "appertain");});
test("appertainings -> appertain", function() {deepEqual( Stem("appertainings"), "appertain");});
test("appertains -> appertain", function() {deepEqual( Stem("appertains"), "appertain");});
test("appertinent -> appertin", function() {deepEqual( Stem("appertinent"), "appertin");});
test("appertinents -> appertin", function() {deepEqual( Stem("appertinents"), "appertin");});
test("appetens -> appeten", function() {deepEqual( Stem("appetens"), "appeten");});
test("appetite -> appetit", function() {deepEqual( Stem("appetite"), "appetit");});
test("appetites -> appetit", function() {deepEqual( Stem("appetites"), "appetit");});
test("applaud -> applaud", function() {deepEqual( Stem("applaud"), "applaud");});
test("applauded -> applaud", function() {deepEqual( Stem("applauded"), "applaud");});
test("applauding -> applaud", function() {deepEqual( Stem("applauding"), "applaud");});
test("applause -> applaus", function() {deepEqual( Stem("applause"), "applaus");});
test("applauses -> applaus", function() {deepEqual( Stem("applauses"), "applaus");});
test("apple -> appl", function() {deepEqual( Stem("apple"), "appl");});
test("apples -> appl", function() {deepEqual( Stem("apples"), "appl");});
test("appletart -> appletart", function() {deepEqual( Stem("appletart"), "appletart");});
test("applewoman -> applewoman", function() {deepEqual( Stem("applewoman"), "applewoman");});
test("appliance -> applianc", function() {deepEqual( Stem("appliance"), "applianc");});
test("appliances -> applianc", function() {deepEqual( Stem("appliances"), "applianc");});
test("application -> applic", function() {deepEqual( Stem("application"), "applic");});
test("applications -> applic", function() {deepEqual( Stem("applications"), "applic");});
test("applied -> appli", function() {deepEqual( Stem("applied"), "appli");});
test("applies -> appli", function() {deepEqual( Stem("applies"), "appli");});
test("apply -> appli", function() {deepEqual( Stem("apply"), "appli");});
test("applying -> appli", function() {deepEqual( Stem("applying"), "appli");});
test("appoint -> appoint", function() {deepEqual( Stem("appoint"), "appoint");});
test("appointed -> appoint", function() {deepEqual( Stem("appointed"), "appoint");});
test("appointing -> appoint", function() {deepEqual( Stem("appointing"), "appoint");});
test("appointment -> appoint", function() {deepEqual( Stem("appointment"), "appoint");});
test("appointments -> appoint", function() {deepEqual( Stem("appointments"), "appoint");});
test("appoints -> appoint", function() {deepEqual( Stem("appoints"), "appoint");});
test("apportioned -> apport", function() {deepEqual( Stem("apportioned"), "apport");});
test("apportions -> apport", function() {deepEqual( Stem("apportions"), "apport");});
test("apposite -> apposit", function() {deepEqual( Stem("apposite"), "apposit");});
test("appreciate -> appreci", function() {deepEqual( Stem("appreciate"), "appreci");});
test("appreciated -> appreci", function() {deepEqual( Stem("appreciated"), "appreci");});
test("appreciation -> appreci", function() {deepEqual( Stem("appreciation"), "appreci");});
test("apprehend -> apprehend", function() {deepEqual( Stem("apprehend"), "apprehend");});
test("apprehended -> apprehend", function() {deepEqual( Stem("apprehended"), "apprehend");});
test("apprehends -> apprehend", function() {deepEqual( Stem("apprehends"), "apprehend");});
test("apprehension -> apprehens", function() {deepEqual( Stem("apprehension"), "apprehens");});
test("apprehensions -> apprehens", function() {deepEqual( Stem("apprehensions"), "apprehens");});
test("apprehensive -> apprehens", function() {deepEqual( Stem("apprehensive"), "apprehens");});
test("apprendre -> apprendr", function() {deepEqual( Stem("apprendre"), "apprendr");});
test("apprenne -> apprenn", function() {deepEqual( Stem("apprenne"), "apprenn");});
test("apprentice -> apprentic", function() {deepEqual( Stem("apprentice"), "apprentic");});
test("apprenticehood -> apprenticehood", function() {deepEqual( Stem("apprenticehood"), "apprenticehood");});
test("apprentices -> apprentic", function() {deepEqual( Stem("apprentices"), "apprentic");});
test("appris -> appri", function() {deepEqual( Stem("appris"), "appri");});
test("apprised -> appris", function() {deepEqual( Stem("apprised"), "appris");});
test("approach -> approach", function() {deepEqual( Stem("approach"), "approach");});
test("approached -> approach", function() {deepEqual( Stem("approached"), "approach");});
test("approachers -> approach", function() {deepEqual( Stem("approachers"), "approach");});
test("approaches -> approach", function() {deepEqual( Stem("approaches"), "approach");});
test("approacheth -> approacheth", function() {deepEqual( Stem("approacheth"), "approacheth");});
test("approaching -> approach", function() {deepEqual( Stem("approaching"), "approach");});
test("approbation -> approb", function() {deepEqual( Stem("approbation"), "approb");});
test("approof -> approof", function() {deepEqual( Stem("approof"), "approof");});
test("appropinquity -> appropinqu", function() {deepEqual( Stem("appropinquity"), "appropinqu");});
test("appropriate -> appropri", function() {deepEqual( Stem("appropriate"), "appropri");});
test("appropriated -> appropri", function() {deepEqual( Stem("appropriated"), "appropri");});
test("appropriation -> appropri", function() {deepEqual( Stem("appropriation"), "appropri");});
test("appropriator -> appropri", function() {deepEqual( Stem("appropriator"), "appropri");});
test("approv -> approv", function() {deepEqual( Stem("approv"), "approv");});
test("approval -> approv", function() {deepEqual( Stem("approval"), "approv");});
test("approve -> approv", function() {deepEqual( Stem("approve"), "approv");});
test("approved -> approv", function() {deepEqual( Stem("approved"), "approv");});
test("approvers -> approv", function() {deepEqual( Stem("approvers"), "approv");});
test("approves -> approv", function() {deepEqual( Stem("approves"), "approv");});
test("approving -> approv", function() {deepEqual( Stem("approving"), "approv");});
test("approvingly -> approvingli", function() {deepEqual( Stem("approvingly"), "approvingli");});
test("appurtenance -> appurten", function() {deepEqual( Stem("appurtenance"), "appurten");});
test("appurtenances -> appurten", function() {deepEqual( Stem("appurtenances"), "appurten");});
test("apricocks -> apricock", function() {deepEqual( Stem("apricocks"), "apricock");});
test("apricots -> apricot", function() {deepEqual( Stem("apricots"), "apricot");});
test("april -> april", function() {deepEqual( Stem("april"), "april");});
test("apron -> apron", function() {deepEqual( Stem("apron"), "apron");});
test("aprons -> apron", function() {deepEqual( Stem("aprons"), "apron");});
test("apropos -> apropo", function() {deepEqual( Stem("apropos"), "apropo");});
test("apsley -> apslei", function() {deepEqual( Stem("apsley"), "apslei");});
test("apt -> apt", function() {deepEqual( Stem("apt"), "apt");});
test("apter -> apter", function() {deepEqual( Stem("apter"), "apter");});
test("aptest -> aptest", function() {deepEqual( Stem("aptest"), "aptest");});
test("aptitude -> aptitud", function() {deepEqual( Stem("aptitude"), "aptitud");});
test("aptly -> aptli", function() {deepEqual( Stem("aptly"), "aptli");});
test("aptness -> apt", function() {deepEqual( Stem("aptness"), "apt");});
test("aqua -> aqua", function() {deepEqual( Stem("aqua"), "aqua");});
test("aquatic -> aquat", function() {deepEqual( Stem("aquatic"), "aquat");});
test("aquilon -> aquilon", function() {deepEqual( Stem("aquilon"), "aquilon");});
test("aquitaine -> aquitain", function() {deepEqual( Stem("aquitaine"), "aquitain");});
test("ar -> ar", function() {deepEqual( Stem("ar"), "ar");});
test("arab -> arab", function() {deepEqual( Stem("arab"), "arab");});
test("arabella -> arabella", function() {deepEqual( Stem("arabella"), "arabella");});
test("arabia -> arabia", function() {deepEqual( Stem("arabia"), "arabia");});
test("arabian -> arabian", function() {deepEqual( Stem("arabian"), "arabian");});
test("araise -> arais", function() {deepEqual( Stem("araise"), "arais");});
test("arbitrate -> arbitr", function() {deepEqual( Stem("arbitrate"), "arbitr");});
test("arbitrating -> arbitr", function() {deepEqual( Stem("arbitrating"), "arbitr");});
test("arbitrator -> arbitr", function() {deepEqual( Stem("arbitrator"), "arbitr");});
test("arbitrement -> arbitr", function() {deepEqual( Stem("arbitrement"), "arbitr");});
test("arbors -> arbor", function() {deepEqual( Stem("arbors"), "arbor");});
test("arbour -> arbour", function() {deepEqual( Stem("arbour"), "arbour");});
test("arbours -> arbour", function() {deepEqual( Stem("arbours"), "arbour");});
test("arc -> arc", function() {deepEqual( Stem("arc"), "arc");});
test("arcades -> arcad", function() {deepEqual( Stem("arcades"), "arcad");});
test("arcadia -> arcadia", function() {deepEqual( Stem("arcadia"), "arcadia");});
test("arcadian -> arcadian", function() {deepEqual( Stem("arcadian"), "arcadian");});
test("arch -> arch", function() {deepEqual( Stem("arch"), "arch");});
test("archaeologian -> archaeologian", function() {deepEqual( Stem("archaeologian"), "archaeologian");});
test("archaeological -> archaeolog", function() {deepEqual( Stem("archaeological"), "archaeolog");});
test("archaeologically -> archaeolog", function() {deepEqual( Stem("archaeologically"), "archaeolog");});
test("archaeologies -> archaeologi", function() {deepEqual( Stem("archaeologies"), "archaeologi");});
test("archaeology -> archaeologi", function() {deepEqual( Stem("archaeology"), "archaeologi");});
test("archbishop -> archbishop", function() {deepEqual( Stem("archbishop"), "archbishop");});
test("archbishopric -> archbishopr", function() {deepEqual( Stem("archbishopric"), "archbishopr");});
test("archdeacon -> archdeacon", function() {deepEqual( Stem("archdeacon"), "archdeacon");});
test("arched -> arch", function() {deepEqual( Stem("arched"), "arch");});
test("archelaus -> archelau", function() {deepEqual( Stem("archelaus"), "archelau");});
test("archer -> archer", function() {deepEqual( Stem("archer"), "archer");});
test("archers -> archer", function() {deepEqual( Stem("archers"), "archer");});
test("archery -> archeri", function() {deepEqual( Stem("archery"), "archeri");});
test("arches -> arch", function() {deepEqual( Stem("arches"), "arch");});
test("archibald -> archibald", function() {deepEqual( Stem("archibald"), "archibald");});
test("archidamus -> archidamu", function() {deepEqual( Stem("archidamus"), "archidamu");});
test("architect -> architect", function() {deepEqual( Stem("architect"), "architect");});
test("architecture -> architectur", function() {deepEqual( Stem("architecture"), "architectur");});
test("archly -> archli", function() {deepEqual( Stem("archly"), "archli");});
test("archness -> arch", function() {deepEqual( Stem("archness"), "arch");});
test("arcu -> arcu", function() {deepEqual( Stem("arcu"), "arcu");});
test("arde -> ard", function() {deepEqual( Stem("arde"), "ard");});
test("arden -> arden", function() {deepEqual( Stem("arden"), "arden");});
test("ardent -> ardent", function() {deepEqual( Stem("ardent"), "ardent");});
test("ardour -> ardour", function() {deepEqual( Stem("ardour"), "ardour");});
test("arduous -> arduou", function() {deepEqual( Stem("arduous"), "arduou");});
test("are -> ar", function() {deepEqual( Stem("are"), "ar");});
test("area -> area", function() {deepEqual( Stem("area"), "area");});
test("argal -> argal", function() {deepEqual( Stem("argal"), "argal");});
test("argent -> argent", function() {deepEqual( Stem("argent"), "argent");});
test("argier -> argier", function() {deepEqual( Stem("argier"), "argier");});
test("argo -> argo", function() {deepEqual( Stem("argo"), "argo");});
test("argos -> argo", function() {deepEqual( Stem("argos"), "argo");});
test("argosies -> argosi", function() {deepEqual( Stem("argosies"), "argosi");});
test("argosy -> argosi", function() {deepEqual( Stem("argosy"), "argosi");});
test("argu -> argu", function() {deepEqual( Stem("argu"), "argu");});
test("argue -> argu", function() {deepEqual( Stem("argue"), "argu");});
test("argued -> argu", function() {deepEqual( Stem("argued"), "argu");});
test("argues -> argu", function() {deepEqual( Stem("argues"), "argu");});
test("arguing -> argu", function() {deepEqual( Stem("arguing"), "argu");});
test("argument -> argument", function() {deepEqual( Stem("argument"), "argument");});
test("arguments -> argument", function() {deepEqual( Stem("arguments"), "argument");});
test("argus -> argu", function() {deepEqual( Stem("argus"), "argu");});
test("ariachne -> ariachn", function() {deepEqual( Stem("ariachne"), "ariachn");});
test("ariadne -> ariadn", function() {deepEqual( Stem("ariadne"), "ariadn");});
test("ariane -> arian", function() {deepEqual( Stem("ariane"), "arian");});
test("ariel -> ariel", function() {deepEqual( Stem("ariel"), "ariel");});
test("aries -> ari", function() {deepEqual( Stem("aries"), "ari");});
test("aright -> aright", function() {deepEqual( Stem("aright"), "aright");});
test("arinado -> arinado", function() {deepEqual( Stem("arinado"), "arinado");});
test("arinies -> arini", function() {deepEqual( Stem("arinies"), "arini");});
test("arion -> arion", function() {deepEqual( Stem("arion"), "arion");});
test("arise -> aris", function() {deepEqual( Stem("arise"), "aris");});
test("arisen -> arisen", function() {deepEqual( Stem("arisen"), "arisen");});
test("arises -> aris", function() {deepEqual( Stem("arises"), "aris");});
test("ariseth -> ariseth", function() {deepEqual( Stem("ariseth"), "ariseth");});
test("arising -> aris", function() {deepEqual( Stem("arising"), "aris");});
test("aristocracy -> aristocraci", function() {deepEqual( Stem("aristocracy"), "aristocraci");});
test("aristocrat -> aristocrat", function() {deepEqual( Stem("aristocrat"), "aristocrat");});
test("aristocratic -> aristocrat", function() {deepEqual( Stem("aristocratic"), "aristocrat");});
test("aristode -> aristod", function() {deepEqual( Stem("aristode"), "aristod");});
test("aristos -> aristo", function() {deepEqual( Stem("aristos"), "aristo");});
test("aristotle -> aristotl", function() {deepEqual( Stem("aristotle"), "aristotl");});
test("arithmetic -> arithmet", function() {deepEqual( Stem("arithmetic"), "arithmet");});
test("arithmetician -> arithmetician", function() {deepEqual( Stem("arithmetician"), "arithmetician");});
test("ark -> ark", function() {deepEqual( Stem("ark"), "ark");});
test("arm -> arm", function() {deepEqual( Stem("arm"), "arm");});
test("arma -> arma", function() {deepEqual( Stem("arma"), "arma");});
test("armada -> armada", function() {deepEqual( Stem("armada"), "armada");});
test("armado -> armado", function() {deepEqual( Stem("armado"), "armado");});
test("armadoes -> armado", function() {deepEqual( Stem("armadoes"), "armado");});
test("armageddon -> armageddon", function() {deepEqual( Stem("armageddon"), "armageddon");});
test("armagnac -> armagnac", function() {deepEqual( Stem("armagnac"), "armagnac");});
test("armament -> armament", function() {deepEqual( Stem("armament"), "armament");});
test("arme -> arm", function() {deepEqual( Stem("arme"), "arm");});
test("armed -> arm", function() {deepEqual( Stem("armed"), "arm");});
test("armee -> arme", function() {deepEqual( Stem("armee"), "arme");});
test("armenia -> armenia", function() {deepEqual( Stem("armenia"), "armenia");});
test("armies -> armi", function() {deepEqual( Stem("armies"), "armi");});
test("armigero -> armigero", function() {deepEqual( Stem("armigero"), "armigero");});
test("arming -> arm", function() {deepEqual( Stem("arming"), "arm");});
test("armipotent -> armipot", function() {deepEqual( Stem("armipotent"), "armipot");});
test("armor -> armor", function() {deepEqual( Stem("armor"), "armor");});
test("armorial -> armori", function() {deepEqual( Stem("armorial"), "armori");});
test("armour -> armour", function() {deepEqual( Stem("armour"), "armour");});
test("armourer -> armour", function() {deepEqual( Stem("armourer"), "armour");});
test("armourers -> armour", function() {deepEqual( Stem("armourers"), "armour");});
test("armours -> armour", function() {deepEqual( Stem("armours"), "armour");});
test("armoury -> armouri", function() {deepEqual( Stem("armoury"), "armouri");});
test("arms -> arm", function() {deepEqual( Stem("arms"), "arm");});
test("army -> armi", function() {deepEqual( Stem("army"), "armi");});
test("arn -> arn", function() {deepEqual( Stem("arn"), "arn");});
test("aroarer -> aroar", function() {deepEqual( Stem("aroarer"), "aroar");});
test("aroint -> aroint", function() {deepEqual( Stem("aroint"), "aroint");});
test("aromatic -> aromat", function() {deepEqual( Stem("aromatic"), "aromat");});
test("arose -> aros", function() {deepEqual( Stem("arose"), "aros");});
test("around -> around", function() {deepEqual( Stem("around"), "around");});
test("arouse -> arous", function() {deepEqual( Stem("arouse"), "arous");});
test("aroused -> arous", function() {deepEqual( Stem("aroused"), "arous");});
test("arragon -> arragon", function() {deepEqual( Stem("arragon"), "arragon");});
test("arraign -> arraign", function() {deepEqual( Stem("arraign"), "arraign");});
test("arraigned -> arraign", function() {deepEqual( Stem("arraigned"), "arraign");});
test("arraigning -> arraign", function() {deepEqual( Stem("arraigning"), "arraign");});
test("arraignment -> arraign", function() {deepEqual( Stem("arraignment"), "arraign");});
test("arrange -> arrang", function() {deepEqual( Stem("arrange"), "arrang");});
test("arranged -> arrang", function() {deepEqual( Stem("arranged"), "arrang");});
test("arrangement -> arrang", function() {deepEqual( Stem("arrangement"), "arrang");});
test("arrangements -> arrang", function() {deepEqual( Stem("arrangements"), "arrang");});
test("arranger -> arrang", function() {deepEqual( Stem("arranger"), "arrang");});
test("arranges -> arrang", function() {deepEqual( Stem("arranges"), "arrang");});
test("arranging -> arrang", function() {deepEqual( Stem("arranging"), "arrang");});
test("arrant -> arrant", function() {deepEqual( Stem("arrant"), "arrant");});
test("arras -> arra", function() {deepEqual( Stem("arras"), "arra");});
test("array -> arrai", function() {deepEqual( Stem("array"), "arrai");});
test("arrayed -> arrai", function() {deepEqual( Stem("arrayed"), "arrai");});
test("arrear -> arrear", function() {deepEqual( Stem("arrear"), "arrear");});
test("arrearages -> arrearag", function() {deepEqual( Stem("arrearages"), "arrearag");});
test("arrest -> arrest", function() {deepEqual( Stem("arrest"), "arrest");});
test("arrested -> arrest", function() {deepEqual( Stem("arrested"), "arrest");});
test("arrests -> arrest", function() {deepEqual( Stem("arrests"), "arrest");});
test("arriv -> arriv", function() {deepEqual( Stem("arriv"), "arriv");});
test("arrival -> arriv", function() {deepEqual( Stem("arrival"), "arriv");});
test("arrivance -> arriv", function() {deepEqual( Stem("arrivance"), "arriv");});
test("arrive -> arriv", function() {deepEqual( Stem("arrive"), "arriv");});
test("arrived -> arriv", function() {deepEqual( Stem("arrived"), "arriv");});
test("arrives -> arriv", function() {deepEqual( Stem("arrives"), "arriv");});
test("arriving -> arriv", function() {deepEqual( Stem("arriving"), "arriv");});
test("arrogance -> arrog", function() {deepEqual( Stem("arrogance"), "arrog");});
test("arrogancy -> arrog", function() {deepEqual( Stem("arrogancy"), "arrog");});
test("arrogant -> arrog", function() {deepEqual( Stem("arrogant"), "arrog");});
test("arrow -> arrow", function() {deepEqual( Stem("arrow"), "arrow");});
test("arrowroot -> arrowroot", function() {deepEqual( Stem("arrowroot"), "arrowroot");});
test("arrows -> arrow", function() {deepEqual( Stem("arrows"), "arrow");});
test("art -> art", function() {deepEqual( Stem("art"), "art");});
test("artemidorus -> artemidoru", function() {deepEqual( Stem("artemidorus"), "artemidoru");});
test("arteries -> arteri", function() {deepEqual( Stem("arteries"), "arteri");});
test("artful -> art", function() {deepEqual( Stem("artful"), "art");});
test("arthur -> arthur", function() {deepEqual( Stem("arthur"), "arthur");});
test("arthurs -> arthur", function() {deepEqual( Stem("arthurs"), "arthur");});
test("article -> articl", function() {deepEqual( Stem("article"), "articl");});
test("articled -> articl", function() {deepEqual( Stem("articled"), "articl");});
test("articles -> articl", function() {deepEqual( Stem("articles"), "articl");});
test("articulate -> articul", function() {deepEqual( Stem("articulate"), "articul");});
test("artifice -> artific", function() {deepEqual( Stem("artifice"), "artific");});
test("artificer -> artific", function() {deepEqual( Stem("artificer"), "artific");});
test("artifices -> artific", function() {deepEqual( Stem("artifices"), "artific");});
test("artificial -> artifici", function() {deepEqual( Stem("artificial"), "artifici");});
test("artillery -> artilleri", function() {deepEqual( Stem("artillery"), "artilleri");});
test("artire -> artir", function() {deepEqual( Stem("artire"), "artir");});
test("artist -> artist", function() {deepEqual( Stem("artist"), "artist");});
test("artists -> artist", function() {deepEqual( Stem("artists"), "artist");});
test("artless -> artless", function() {deepEqual( Stem("artless"), "artless");});
test("artlessly -> artlessli", function() {deepEqual( Stem("artlessly"), "artlessli");});
test("artlessness -> artless", function() {deepEqual( Stem("artlessness"), "artless");});
test("artois -> artoi", function() {deepEqual( Stem("artois"), "artoi");});
test("arts -> art", function() {deepEqual( Stem("arts"), "art");});
test("artus -> artu", function() {deepEqual( Stem("artus"), "artu");});
test("arviragus -> arviragu", function() {deepEqual( Stem("arviragus"), "arviragu");});
test("as -> a", function() {deepEqual( Stem("as"), "a");});
test("asaph -> asaph", function() {deepEqual( Stem("asaph"), "asaph");});
test("asaying -> asai", function() {deepEqual( Stem("asaying"), "asai");});
test("ascanius -> ascaniu", function() {deepEqual( Stem("ascanius"), "ascaniu");});
test("ascend -> ascend", function() {deepEqual( Stem("ascend"), "ascend");});
test("ascendancy -> ascend", function() {deepEqual( Stem("ascendancy"), "ascend");});
test("ascended -> ascend", function() {deepEqual( Stem("ascended"), "ascend");});
test("ascendency -> ascend", function() {deepEqual( Stem("ascendency"), "ascend");});
test("ascendeth -> ascendeth", function() {deepEqual( Stem("ascendeth"), "ascendeth");});
test("ascending -> ascend", function() {deepEqual( Stem("ascending"), "ascend");});
test("ascends -> ascend", function() {deepEqual( Stem("ascends"), "ascend");});
test("ascension -> ascens", function() {deepEqual( Stem("ascension"), "ascens");});
test("ascent -> ascent", function() {deepEqual( Stem("ascent"), "ascent");});
test("ascertain -> ascertain", function() {deepEqual( Stem("ascertain"), "ascertain");});
test("ascertained -> ascertain", function() {deepEqual( Stem("ascertained"), "ascertain");});
test("ascribe -> ascrib", function() {deepEqual( Stem("ascribe"), "ascrib");});
test("ascribes -> ascrib", function() {deepEqual( Stem("ascribes"), "ascrib");});
test("ash -> ash", function() {deepEqual( Stem("ash"), "ash");});
test("asham -> asham", function() {deepEqual( Stem("asham"), "asham");});
test("ashamed -> asham", function() {deepEqual( Stem("ashamed"), "asham");});
test("ashantee -> ashante", function() {deepEqual( Stem("ashantee"), "ashante");});
test("asher -> asher", function() {deepEqual( Stem("asher"), "asher");});
test("ashes -> ash", function() {deepEqual( Stem("ashes"), "ash");});
test("ashford -> ashford", function() {deepEqual( Stem("ashford"), "ashford");});
test("ashore -> ashor", function() {deepEqual( Stem("ashore"), "ashor");});
test("ashouting -> ashout", function() {deepEqual( Stem("ashouting"), "ashout");});
test("ashy -> ashi", function() {deepEqual( Stem("ashy"), "ashi");});
test("asia -> asia", function() {deepEqual( Stem("asia"), "asia");});
test("aside -> asid", function() {deepEqual( Stem("aside"), "asid");});
test("ask -> ask", function() {deepEqual( Stem("ask"), "ask");});
test("askance -> askanc", function() {deepEqual( Stem("askance"), "askanc");});
test("asked -> ask", function() {deepEqual( Stem("asked"), "ask");});
test("asker -> asker", function() {deepEqual( Stem("asker"), "asker");});
test("asketh -> asketh", function() {deepEqual( Stem("asketh"), "asketh");});
test("asking -> ask", function() {deepEqual( Stem("asking"), "ask");});
test("asks -> ask", function() {deepEqual( Stem("asks"), "ask");});
test("aslant -> aslant", function() {deepEqual( Stem("aslant"), "aslant");});
test("asleep -> asleep", function() {deepEqual( Stem("asleep"), "asleep");});
test("asmath -> asmath", function() {deepEqual( Stem("asmath"), "asmath");});
test("asp -> asp", function() {deepEqual( Stem("asp"), "asp");});
test("aspect -> aspect", function() {deepEqual( Stem("aspect"), "aspect");});
test("aspects -> aspect", function() {deepEqual( Stem("aspects"), "aspect");});
test("aspen -> aspen", function() {deepEqual( Stem("aspen"), "aspen");});
test("asperity -> asper", function() {deepEqual( Stem("asperity"), "asper");});
test("aspersion -> aspers", function() {deepEqual( Stem("aspersion"), "aspers");});
test("asphalt -> asphalt", function() {deepEqual( Stem("asphalt"), "asphalt");});
test("aspic -> aspic", function() {deepEqual( Stem("aspic"), "aspic");});
test("aspicious -> aspici", function() {deepEqual( Stem("aspicious"), "aspici");});
test("aspics -> aspic", function() {deepEqual( Stem("aspics"), "aspic");});
test("aspir -> aspir", function() {deepEqual( Stem("aspir"), "aspir");});
test("aspiration -> aspir", function() {deepEqual( Stem("aspiration"), "aspir");});
test("aspire -> aspir", function() {deepEqual( Stem("aspire"), "aspir");});
test("aspiring -> aspir", function() {deepEqual( Stem("aspiring"), "aspir");});
test("asquint -> asquint", function() {deepEqual( Stem("asquint"), "asquint");});
test("ass -> ass", function() {deepEqual( Stem("ass"), "ass");});
test("assail -> assail", function() {deepEqual( Stem("assail"), "assail");});
test("assailable -> assail", function() {deepEqual( Stem("assailable"), "assail");});
test("assailant -> assail", function() {deepEqual( Stem("assailant"), "assail");});
test("assailants -> assail", function() {deepEqual( Stem("assailants"), "assail");});
test("assailed -> assail", function() {deepEqual( Stem("assailed"), "assail");});
test("assaileth -> assaileth", function() {deepEqual( Stem("assaileth"), "assaileth");});
test("assailing -> assail", function() {deepEqual( Stem("assailing"), "assail");});
test("assails -> assail", function() {deepEqual( Stem("assails"), "assail");});
test("assassinate -> assassin", function() {deepEqual( Stem("assassinate"), "assassin");});
test("assassination -> assassin", function() {deepEqual( Stem("assassination"), "assassin");});
test("assault -> assault", function() {deepEqual( Stem("assault"), "assault");});
test("assaulted -> assault", function() {deepEqual( Stem("assaulted"), "assault");});
test("assaults -> assault", function() {deepEqual( Stem("assaults"), "assault");});
test("assay -> assai", function() {deepEqual( Stem("assay"), "assai");});
test("assaye -> assay", function() {deepEqual( Stem("assaye"), "assay");});
test("assaying -> assai", function() {deepEqual( Stem("assaying"), "assai");});
test("assays -> assai", function() {deepEqual( Stem("assays"), "assai");});
test("assemblance -> assembl", function() {deepEqual( Stem("assemblance"), "assembl");});
test("assemble -> assembl", function() {deepEqual( Stem("assemble"), "assembl");});
test("assembled -> assembl", function() {deepEqual( Stem("assembled"), "assembl");});
test("assemblies -> assembli", function() {deepEqual( Stem("assemblies"), "assembli");});
test("assembly -> assembli", function() {deepEqual( Stem("assembly"), "assembli");});
test("assent -> assent", function() {deepEqual( Stem("assent"), "assent");});
test("assented -> assent", function() {deepEqual( Stem("assented"), "assent");});
test("assert -> assert", function() {deepEqual( Stem("assert"), "assert");});
test("asserted -> assert", function() {deepEqual( Stem("asserted"), "assert");});
test("asserting -> assert", function() {deepEqual( Stem("asserting"), "assert");});
test("assertion -> assert", function() {deepEqual( Stem("assertion"), "assert");});
test("asses -> ass", function() {deepEqual( Stem("asses"), "ass");});
test("assets -> asset", function() {deepEqual( Stem("assets"), "asset");});
test("assez -> assez", function() {deepEqual( Stem("assez"), "assez");});
test("assiduity -> assidu", function() {deepEqual( Stem("assiduity"), "assidu");});
test("assiduously -> assidu", function() {deepEqual( Stem("assiduously"), "assidu");});
test("assign -> assign", function() {deepEqual( Stem("assign"), "assign");});
test("assigned -> assign", function() {deepEqual( Stem("assigned"), "assign");});
test("assignees -> assigne", function() {deepEqual( Stem("assignees"), "assigne");});
test("assigns -> assign", function() {deepEqual( Stem("assigns"), "assign");});
test("assinico -> assinico", function() {deepEqual( Stem("assinico"), "assinico");});
test("assist -> assist", function() {deepEqual( Stem("assist"), "assist");});
test("assistance -> assist", function() {deepEqual( Stem("assistance"), "assist");});
test("assistances -> assist", function() {deepEqual( Stem("assistances"), "assist");});
test("assistant -> assist", function() {deepEqual( Stem("assistant"), "assist");});
test("assistants -> assist", function() {deepEqual( Stem("assistants"), "assist");});
test("assisted -> assist", function() {deepEqual( Stem("assisted"), "assist");});
test("assisting -> assist", function() {deepEqual( Stem("assisting"), "assist");});
test("assizes -> assiz", function() {deepEqual( Stem("assizes"), "assiz");});
test("associate -> associ", function() {deepEqual( Stem("associate"), "associ");});
test("associated -> associ", function() {deepEqual( Stem("associated"), "associ");});
test("associates -> associ", function() {deepEqual( Stem("associates"), "associ");});
test("association -> associ", function() {deepEqual( Stem("association"), "associ");});
test("associations -> associ", function() {deepEqual( Stem("associations"), "associ");});
test("assuage -> assuag", function() {deepEqual( Stem("assuage"), "assuag");});
test("assubjugate -> assubjug", function() {deepEqual( Stem("assubjugate"), "assubjug");});
test("assum -> assum", function() {deepEqual( Stem("assum"), "assum");});
test("assume -> assum", function() {deepEqual( Stem("assume"), "assum");});
test("assumed -> assum", function() {deepEqual( Stem("assumed"), "assum");});
test("assumes -> assum", function() {deepEqual( Stem("assumes"), "assum");});
test("assuming -> assum", function() {deepEqual( Stem("assuming"), "assum");});
test("assumption -> assumpt", function() {deepEqual( Stem("assumption"), "assumpt");});
test("assumptions -> assumpt", function() {deepEqual( Stem("assumptions"), "assumpt");});
test("assur -> assur", function() {deepEqual( Stem("assur"), "assur");});
test("assurance -> assur", function() {deepEqual( Stem("assurance"), "assur");});
test("assure -> assur", function() {deepEqual( Stem("assure"), "assur");});
test("assured -> assur", function() {deepEqual( Stem("assured"), "assur");});
test("assuredly -> assuredli", function() {deepEqual( Stem("assuredly"), "assuredli");});
test("assures -> assur", function() {deepEqual( Stem("assures"), "assur");});
test("assuring -> assur", function() {deepEqual( Stem("assuring"), "assur");});
test("assyrian -> assyrian", function() {deepEqual( Stem("assyrian"), "assyrian");});
test("asthmatic -> asthmat", function() {deepEqual( Stem("asthmatic"), "asthmat");});
test("astir -> astir", function() {deepEqual( Stem("astir"), "astir");});
test("astley -> astlei", function() {deepEqual( Stem("astley"), "astlei");});
test("astonish -> astonish", function() {deepEqual( Stem("astonish"), "astonish");});
test("astonished -> astonish", function() {deepEqual( Stem("astonished"), "astonish");});
test("astonishing -> astonish", function() {deepEqual( Stem("astonishing"), "astonish");});
test("astonishment -> astonish", function() {deepEqual( Stem("astonishment"), "astonish");});
test("astounding -> astound", function() {deepEqual( Stem("astounding"), "astound");});
test("astraea -> astraea", function() {deepEqual( Stem("astraea"), "astraea");});
test("astray -> astrai", function() {deepEqual( Stem("astray"), "astrai");});
test("astrea -> astrea", function() {deepEqual( Stem("astrea"), "astrea");});
test("astronomer -> astronom", function() {deepEqual( Stem("astronomer"), "astronom");});
test("astronomers -> astronom", function() {deepEqual( Stem("astronomers"), "astronom");});
test("astronomical -> astronom", function() {deepEqual( Stem("astronomical"), "astronom");});
test("astronomy -> astronomi", function() {deepEqual( Stem("astronomy"), "astronomi");});
test("astute -> astut", function() {deepEqual( Stem("astute"), "astut");});
test("astuteness -> astut", function() {deepEqual( Stem("astuteness"), "astut");});
test("asunder -> asund", function() {deepEqual( Stem("asunder"), "asund");});
test("asylum -> asylum", function() {deepEqual( Stem("asylum"), "asylum");});
test("at -> at", function() {deepEqual( Stem("at"), "at");});
test("atalanta -> atalanta", function() {deepEqual( Stem("atalanta"), "atalanta");});
test("ate -> at", function() {deepEqual( Stem("ate"), "at");});
test("ates -> at", function() {deepEqual( Stem("ates"), "at");});
test("atheists -> atheist", function() {deepEqual( Stem("atheists"), "atheist");});
test("athene -> athen", function() {deepEqual( Stem("athene"), "athen");});
test("athenian -> athenian", function() {deepEqual( Stem("athenian"), "athenian");});
test("athenians -> athenian", function() {deepEqual( Stem("athenians"), "athenian");});
test("athens -> athen", function() {deepEqual( Stem("athens"), "athen");});
test("athinking -> athink", function() {deepEqual( Stem("athinking"), "athink");});
test("athletic -> athlet", function() {deepEqual( Stem("athletic"), "athlet");});
test("athol -> athol", function() {deepEqual( Stem("athol"), "athol");});
test("athversary -> athversari", function() {deepEqual( Stem("athversary"), "athversari");});
test("athwart -> athwart", function() {deepEqual( Stem("athwart"), "athwart");});
test("atlantic -> atlant", function() {deepEqual( Stem("atlantic"), "atlant");});
test("atlas -> atla", function() {deepEqual( Stem("atlas"), "atla");});
test("atmosphere -> atmospher", function() {deepEqual( Stem("atmosphere"), "atmospher");});
test("atomies -> atomi", function() {deepEqual( Stem("atomies"), "atomi");});
test("atomy -> atomi", function() {deepEqual( Stem("atomy"), "atomi");});
test("atone -> aton", function() {deepEqual( Stem("atone"), "aton");});
test("atonement -> aton", function() {deepEqual( Stem("atonement"), "aton");});
test("atonements -> aton", function() {deepEqual( Stem("atonements"), "aton");});
test("atrocious -> atroci", function() {deepEqual( Stem("atrocious"), "atroci");});
test("atropos -> atropo", function() {deepEqual( Stem("atropos"), "atropo");});
test("attach -> attach", function() {deepEqual( Stem("attach"), "attach");});
test("attache -> attach", function() {deepEqual( Stem("attache"), "attach");});
test("attached -> attach", function() {deepEqual( Stem("attached"), "attach");});
test("attaches -> attach", function() {deepEqual( Stem("attaches"), "attach");});
test("attaching -> attach", function() {deepEqual( Stem("attaching"), "attach");});
test("attachment -> attach", function() {deepEqual( Stem("attachment"), "attach");});
test("attachments -> attach", function() {deepEqual( Stem("attachments"), "attach");});
test("attack -> attack", function() {deepEqual( Stem("attack"), "attack");});
test("attacked -> attack", function() {deepEqual( Stem("attacked"), "attack");});
test("attacks -> attack", function() {deepEqual( Stem("attacks"), "attack");});
test("attain -> attain", function() {deepEqual( Stem("attain"), "attain");});
test("attainder -> attaind", function() {deepEqual( Stem("attainder"), "attaind");});
test("attained -> attain", function() {deepEqual( Stem("attained"), "attain");});
test("attaining -> attain", function() {deepEqual( Stem("attaining"), "attain");});
test("attains -> attain", function() {deepEqual( Stem("attains"), "attain");});
test("attaint -> attaint", function() {deepEqual( Stem("attaint"), "attaint");});
test("attainted -> attaint", function() {deepEqual( Stem("attainted"), "attaint");});
test("attainture -> attaintur", function() {deepEqual( Stem("attainture"), "attaintur");});
test("attempt -> attempt", function() {deepEqual( Stem("attempt"), "attempt");});
test("attemptable -> attempt", function() {deepEqual( Stem("attemptable"), "attempt");});
test("attempted -> attempt", function() {deepEqual( Stem("attempted"), "attempt");});
test("attempting -> attempt", function() {deepEqual( Stem("attempting"), "attempt");});
test("attempts -> attempt", function() {deepEqual( Stem("attempts"), "attempt");});
test("attend -> attend", function() {deepEqual( Stem("attend"), "attend");});
test("attendance -> attend", function() {deepEqual( Stem("attendance"), "attend");});
test("attendant -> attend", function() {deepEqual( Stem("attendant"), "attend");});
test("attendants -> attend", function() {deepEqual( Stem("attendants"), "attend");});
test("attended -> attend", function() {deepEqual( Stem("attended"), "attend");});
test("attendents -> attend", function() {deepEqual( Stem("attendents"), "attend");});
test("attendeth -> attendeth", function() {deepEqual( Stem("attendeth"), "attendeth");});
test("attending -> attend", function() {deepEqual( Stem("attending"), "attend");});
test("attends -> attend", function() {deepEqual( Stem("attends"), "attend");});
test("attent -> attent", function() {deepEqual( Stem("attent"), "attent");});
test("attention -> attent", function() {deepEqual( Stem("attention"), "attent");});
test("attentions -> attent", function() {deepEqual( Stem("attentions"), "attent");});
test("attentive -> attent", function() {deepEqual( Stem("attentive"), "attent");});
test("attentivenes -> attentiven", function() {deepEqual( Stem("attentivenes"), "attentiven");});
test("attenuated -> attenu", function() {deepEqual( Stem("attenuated"), "attenu");});
test("attest -> attest", function() {deepEqual( Stem("attest"), "attest");});
test("attested -> attest", function() {deepEqual( Stem("attested"), "attest");});
test("attir -> attir", function() {deepEqual( Stem("attir"), "attir");});
test("attire -> attir", function() {deepEqual( Stem("attire"), "attir");});
test("attired -> attir", function() {deepEqual( Stem("attired"), "attir");});
test("attires -> attir", function() {deepEqual( Stem("attires"), "attir");});
test("attiring -> attir", function() {deepEqual( Stem("attiring"), "attir");});
test("attitude -> attitud", function() {deepEqual( Stem("attitude"), "attitud");});
test("attitudes -> attitud", function() {deepEqual( Stem("attitudes"), "attitud");});
test("attorney -> attornei", function() {deepEqual( Stem("attorney"), "attornei");});
test("attorneyed -> attornei", function() {deepEqual( Stem("attorneyed"), "attornei");});
test("attorneys -> attornei", function() {deepEqual( Stem("attorneys"), "attornei");});
test("attorneyship -> attorneyship", function() {deepEqual( Stem("attorneyship"), "attorneyship");});
test("attract -> attract", function() {deepEqual( Stem("attract"), "attract");});
test("attracted -> attract", function() {deepEqual( Stem("attracted"), "attract");});
test("attraction -> attract", function() {deepEqual( Stem("attraction"), "attract");});
test("attractions -> attract", function() {deepEqual( Stem("attractions"), "attract");});
test("attractive -> attract", function() {deepEqual( Stem("attractive"), "attract");});
test("attracts -> attract", function() {deepEqual( Stem("attracts"), "attract");});
test("attributable -> attribut", function() {deepEqual( Stem("attributable"), "attribut");});
test("attribute -> attribut", function() {deepEqual( Stem("attribute"), "attribut");});
test("attributed -> attribut", function() {deepEqual( Stem("attributed"), "attribut");});
test("attributes -> attribut", function() {deepEqual( Stem("attributes"), "attribut");});
test("attribution -> attribut", function() {deepEqual( Stem("attribution"), "attribut");});
test("attributive -> attribut", function() {deepEqual( Stem("attributive"), "attribut");});
test("atwain -> atwain", function() {deepEqual( Stem("atwain"), "atwain");});
test("au -> au", function() {deepEqual( Stem("au"), "au");});
test("aubrey -> aubrei", function() {deepEqual( Stem("aubrey"), "aubrei");});
test("auburn -> auburn", function() {deepEqual( Stem("auburn"), "auburn");});
test("auction -> auction", function() {deepEqual( Stem("auction"), "auction");});
test("auctioneer -> auction", function() {deepEqual( Stem("auctioneer"), "auction");});
test("aucun -> aucun", function() {deepEqual( Stem("aucun"), "aucun");});
test("aud -> aud", function() {deepEqual( Stem("aud"), "aud");});
test("audacious -> audaci", function() {deepEqual( Stem("audacious"), "audaci");});
test("audaciously -> audaci", function() {deepEqual( Stem("audaciously"), "audaci");});
test("audacity -> audac", function() {deepEqual( Stem("audacity"), "audac");});
test("audible -> audibl", function() {deepEqual( Stem("audible"), "audibl");});
test("audience -> audienc", function() {deepEqual( Stem("audience"), "audienc");});
test("audiences -> audienc", function() {deepEqual( Stem("audiences"), "audienc");});
test("audis -> audi", function() {deepEqual( Stem("audis"), "audi");});
test("audit -> audit", function() {deepEqual( Stem("audit"), "audit");});
test("auditor -> auditor", function() {deepEqual( Stem("auditor"), "auditor");});
test("auditors -> auditor", function() {deepEqual( Stem("auditors"), "auditor");});
test("auditory -> auditori", function() {deepEqual( Stem("auditory"), "auditori");});
test("audre -> audr", function() {deepEqual( Stem("audre"), "audr");});
test("audrey -> audrei", function() {deepEqual( Stem("audrey"), "audrei");});
test("aufidius -> aufidiu", function() {deepEqual( Stem("aufidius"), "aufidiu");});
test("aufidiuses -> aufidius", function() {deepEqual( Stem("aufidiuses"), "aufidius");});
test("auger -> auger", function() {deepEqual( Stem("auger"), "auger");});
test("aught -> aught", function() {deepEqual( Stem("aught"), "aught");});
test("augment -> augment", function() {deepEqual( Stem("augment"), "augment");});
test("augmentation -> augment", function() {deepEqual( Stem("augmentation"), "augment");});
test("augmented -> augment", function() {deepEqual( Stem("augmented"), "augment");});
test("augmenting -> augment", function() {deepEqual( Stem("augmenting"), "augment");});
test("augur -> augur", function() {deepEqual( Stem("augur"), "augur");});
test("augured -> augur", function() {deepEqual( Stem("augured"), "augur");});
test("augurer -> augur", function() {deepEqual( Stem("augurer"), "augur");});
test("augurers -> augur", function() {deepEqual( Stem("augurers"), "augur");});
test("augures -> augur", function() {deepEqual( Stem("augures"), "augur");});
test("auguring -> augur", function() {deepEqual( Stem("auguring"), "augur");});
test("augurs -> augur", function() {deepEqual( Stem("augurs"), "augur");});
test("augury -> auguri", function() {deepEqual( Stem("augury"), "auguri");});
test("august -> august", function() {deepEqual( Stem("august"), "august");});
test("augustus -> augustu", function() {deepEqual( Stem("augustus"), "augustu");});
test("auld -> auld", function() {deepEqual( Stem("auld"), "auld");});
test("aumerle -> aumerl", function() {deepEqual( Stem("aumerle"), "aumerl");});
test("aunchient -> aunchient", function() {deepEqual( Stem("aunchient"), "aunchient");});
test("aunt -> aunt", function() {deepEqual( Stem("aunt"), "aunt");});
test("aunts -> aunt", function() {deepEqual( Stem("aunts"), "aunt");});
test("aunty -> aunti", function() {deepEqual( Stem("aunty"), "aunti");});
test("auralia -> auralia", function() {deepEqual( Stem("auralia"), "auralia");});
test("aurelius -> aureliu", function() {deepEqual( Stem("aurelius"), "aureliu");});
test("auricular -> auricular", function() {deepEqual( Stem("auricular"), "auricular");});
test("aurora -> aurora", function() {deepEqual( Stem("aurora"), "aurora");});
test("aus -> au", function() {deepEqual( Stem("aus"), "au");});
test("auspices -> auspic", function() {deepEqual( Stem("auspices"), "auspic");});
test("auspicious -> auspici", function() {deepEqual( Stem("auspicious"), "auspici");});
test("aussi -> aussi", function() {deepEqual( Stem("aussi"), "aussi");});
test("austere -> auster", function() {deepEqual( Stem("austere"), "auster");});
test("austerely -> auster", function() {deepEqual( Stem("austerely"), "auster");});
test("austereness -> auster", function() {deepEqual( Stem("austereness"), "auster");});
test("austerity -> auster", function() {deepEqual( Stem("austerity"), "auster");});
test("austerlitz -> austerlitz", function() {deepEqual( Stem("austerlitz"), "austerlitz");});
test("australasia -> australasia", function() {deepEqual( Stem("australasia"), "australasia");});
test("austria -> austria", function() {deepEqual( Stem("austria"), "austria");});
test("austrian -> austrian", function() {deepEqual( Stem("austrian"), "austrian");});
test("austrians -> austrian", function() {deepEqual( Stem("austrians"), "austrian");});
test("aut -> aut", function() {deepEqual( Stem("aut"), "aut");});
test("authentic -> authent", function() {deepEqual( Stem("authentic"), "authent");});
test("author -> author", function() {deepEqual( Stem("author"), "author");});
test("authoress -> authoress", function() {deepEqual( Stem("authoress"), "authoress");});
test("authorities -> author", function() {deepEqual( Stem("authorities"), "author");});
test("authority -> author", function() {deepEqual( Stem("authority"), "author");});
test("authorized -> author", function() {deepEqual( Stem("authorized"), "author");});
test("authorizing -> author", function() {deepEqual( Stem("authorizing"), "author");});
test("authors -> author", function() {deepEqual( Stem("authors"), "author");});
test("autograph -> autograph", function() {deepEqual( Stem("autograph"), "autograph");});
test("autolycus -> autolycu", function() {deepEqual( Stem("autolycus"), "autolycu");});
test("autre -> autr", function() {deepEqual( Stem("autre"), "autr");});
test("autumn -> autumn", function() {deepEqual( Stem("autumn"), "autumn");});
test("auvergne -> auvergn", function() {deepEqual( Stem("auvergne"), "auvergn");});
test("aux -> aux", function() {deepEqual( Stem("aux"), "aux");});
test("avail -> avail", function() {deepEqual( Stem("avail"), "avail");});
test("available -> avail", function() {deepEqual( Stem("available"), "avail");});
test("avails -> avail", function() {deepEqual( Stem("avails"), "avail");});
test("avance -> avanc", function() {deepEqual( Stem("avance"), "avanc");});
test("avarice -> avaric", function() {deepEqual( Stem("avarice"), "avaric");});
test("avaricious -> avarici", function() {deepEqual( Stem("avaricious"), "avarici");});
test("avaunt -> avaunt", function() {deepEqual( Stem("avaunt"), "avaunt");});
test("ave -> av", function() {deepEqual( Stem("ave"), "av");});
test("avec -> avec", function() {deepEqual( Stem("avec"), "avec");});
test("aveng -> aveng", function() {deepEqual( Stem("aveng"), "aveng");});
test("avenge -> aveng", function() {deepEqual( Stem("avenge"), "aveng");});
test("avenged -> aveng", function() {deepEqual( Stem("avenged"), "aveng");});
test("avenging -> aveng", function() {deepEqual( Stem("avenging"), "aveng");});
test("avenue -> avenu", function() {deepEqual( Stem("avenue"), "avenu");});
test("avernus -> avernu", function() {deepEqual( Stem("avernus"), "avernu");});
test("averred -> aver", function() {deepEqual( Stem("averred"), "aver");});
test("averring -> aver", function() {deepEqual( Stem("averring"), "aver");});
test("avers -> aver", function() {deepEqual( Stem("avers"), "aver");});
test("averse -> avers", function() {deepEqual( Stem("averse"), "avers");});
test("aversion -> avers", function() {deepEqual( Stem("aversion"), "avers");});
test("avert -> avert", function() {deepEqual( Stem("avert"), "avert");});
test("averted -> avert", function() {deepEqual( Stem("averted"), "avert");});
test("aves -> av", function() {deepEqual( Stem("aves"), "av");});
test("avesnes -> avesn", function() {deepEqual( Stem("avesnes"), "avesn");});
test("avez -> avez", function() {deepEqual( Stem("avez"), "avez");});
test("avis -> avi", function() {deepEqual( Stem("avis"), "avi");});
test("avocation -> avoc", function() {deepEqual( Stem("avocation"), "avoc");});
test("avocations -> avoc", function() {deepEqual( Stem("avocations"), "avoc");});
test("avoid -> avoid", function() {deepEqual( Stem("avoid"), "avoid");});
test("avoided -> avoid", function() {deepEqual( Stem("avoided"), "avoid");});
test("avoiding -> avoid", function() {deepEqual( Stem("avoiding"), "avoid");});
test("avoids -> avoid", function() {deepEqual( Stem("avoids"), "avoid");});
test("avoir -> avoir", function() {deepEqual( Stem("avoir"), "avoir");});
test("avoirdupois -> avoirdupoi", function() {deepEqual( Stem("avoirdupois"), "avoirdupoi");});
test("avouch -> avouch", function() {deepEqual( Stem("avouch"), "avouch");});
test("avouched -> avouch", function() {deepEqual( Stem("avouched"), "avouch");});
test("avouches -> avouch", function() {deepEqual( Stem("avouches"), "avouch");});
test("avouchment -> avouch", function() {deepEqual( Stem("avouchment"), "avouch");});
test("avow -> avow", function() {deepEqual( Stem("avow"), "avow");});
test("avowal -> avow", function() {deepEqual( Stem("avowal"), "avow");});
test("avowed -> avow", function() {deepEqual( Stem("avowed"), "avow");});
test("avowing -> avow", function() {deepEqual( Stem("avowing"), "avow");});
test("aw -> aw", function() {deepEqual( Stem("aw"), "aw");});
test("await -> await", function() {deepEqual( Stem("await"), "await");});
test("awaited -> await", function() {deepEqual( Stem("awaited"), "await");});
test("awaiting -> await", function() {deepEqual( Stem("awaiting"), "await");});
test("awaits -> await", function() {deepEqual( Stem("awaits"), "await");});
test("awak -> awak", function() {deepEqual( Stem("awak"), "awak");});
test("awake -> awak", function() {deepEqual( Stem("awake"), "awak");});
test("awaked -> awak", function() {deepEqual( Stem("awaked"), "awak");});
test("awaken -> awaken", function() {deepEqual( Stem("awaken"), "awaken");});
test("awakened -> awaken", function() {deepEqual( Stem("awakened"), "awaken");});
test("awakening -> awaken", function() {deepEqual( Stem("awakening"), "awaken");});
test("awakens -> awaken", function() {deepEqual( Stem("awakens"), "awaken");});
test("awakes -> awak", function() {deepEqual( Stem("awakes"), "awak");});
test("awaking -> awak", function() {deepEqual( Stem("awaking"), "awak");});
test("award -> award", function() {deepEqual( Stem("award"), "award");});
test("awarded -> award", function() {deepEqual( Stem("awarded"), "award");});
test("awards -> award", function() {deepEqual( Stem("awards"), "award");});
test("aware -> awar", function() {deepEqual( Stem("aware"), "awar");});
test("awasy -> awasi", function() {deepEqual( Stem("awasy"), "awasi");});
test("away -> awai", function() {deepEqual( Stem("away"), "awai");});
test("awe -> aw", function() {deepEqual( Stem("awe"), "aw");});
test("aweary -> aweari", function() {deepEqual( Stem("aweary"), "aweari");});
test("awed -> aw", function() {deepEqual( Stem("awed"), "aw");});
test("aweless -> aweless", function() {deepEqual( Stem("aweless"), "aweless");});
test("awes -> aw", function() {deepEqual( Stem("awes"), "aw");});
test("awful -> aw", function() {deepEqual( Stem("awful"), "aw");});
test("awfully -> awfulli", function() {deepEqual( Stem("awfully"), "awfulli");});
test("awhile -> awhil", function() {deepEqual( Stem("awhile"), "awhil");});
test("awkward -> awkward", function() {deepEqual( Stem("awkward"), "awkward");});
test("awkwardness -> awkward", function() {deepEqual( Stem("awkwardness"), "awkward");});
test("awl -> awl", function() {deepEqual( Stem("awl"), "awl");});
test("awning -> awn", function() {deepEqual( Stem("awning"), "awn");});
test("awnings -> awn", function() {deepEqual( Stem("awnings"), "awn");});
test("awoke -> awok", function() {deepEqual( Stem("awoke"), "awok");});
test("awooing -> awoo", function() {deepEqual( Stem("awooing"), "awoo");});
test("awork -> awork", function() {deepEqual( Stem("awork"), "awork");});
test("awry -> awri", function() {deepEqual( Stem("awry"), "awri");});
test("axe -> ax", function() {deepEqual( Stem("axe"), "ax");});
test("axle -> axl", function() {deepEqual( Stem("axle"), "axl");});
test("axletree -> axletre", function() {deepEqual( Stem("axletree"), "axletre");});
test("ay -> ai", function() {deepEqual( Stem("ay"), "ai");});
test("aye -> ay", function() {deepEqual( Stem("aye"), "ay");});
test("ayez -> ayez", function() {deepEqual( Stem("ayez"), "ayez");});
test("ayli -> ayli", function() {deepEqual( Stem("ayli"), "ayli");});
test("aynt -> aynt", function() {deepEqual( Stem("aynt"), "aynt");});
test("azur -> azur", function() {deepEqual( Stem("azur"), "azur");});
test("azure -> azur", function() {deepEqual( Stem("azure"), "azur");});
test("b -> b", function() {deepEqual( Stem("b"), "b");});
test("ba -> ba", function() {deepEqual( Stem("ba"), "ba");});
test("baa -> baa", function() {deepEqual( Stem("baa"), "baa");});
test("babbl -> babbl", function() {deepEqual( Stem("babbl"), "babbl");});
test("babble -> babbl", function() {deepEqual( Stem("babble"), "babbl");});
test("babbling -> babbl", function() {deepEqual( Stem("babbling"), "babbl");});
test("babby -> babbi", function() {deepEqual( Stem("babby"), "babbi");});
test("babe -> babe", function() {deepEqual( Stem("babe"), "babe");});
test("babes -> babe", function() {deepEqual( Stem("babes"), "babe");});
test("babies -> babi", function() {deepEqual( Stem("babies"), "babi");});
test("baboon -> baboon", function() {deepEqual( Stem("baboon"), "baboon");});
test("baboons -> baboon", function() {deepEqual( Stem("baboons"), "baboon");});
test("baby -> babi", function() {deepEqual( Stem("baby"), "babi");});
test("babylon -> babylon", function() {deepEqual( Stem("babylon"), "babylon");});
test("bacare -> bacar", function() {deepEqual( Stem("bacare"), "bacar");});
test("bacchanalian -> bacchanalian", function() {deepEqual( Stem("bacchanalian"), "bacchanalian");});
test("bacchanals -> bacchan", function() {deepEqual( Stem("bacchanals"), "bacchan");});
test("bacchus -> bacchu", function() {deepEqual( Stem("bacchus"), "bacchu");});
test("bach -> bach", function() {deepEqual( Stem("bach"), "bach");});
test("bachelor -> bachelor", function() {deepEqual( Stem("bachelor"), "bachelor");});
test("bachelorhood -> bachelorhood", function() {deepEqual( Stem("bachelorhood"), "bachelorhood");});
test("bachelors -> bachelor", function() {deepEqual( Stem("bachelors"), "bachelor");});
test("back -> back", function() {deepEqual( Stem("back"), "back");});
test("backbite -> backbit", function() {deepEqual( Stem("backbite"), "backbit");});
test("backbitten -> backbitten", function() {deepEqual( Stem("backbitten"), "backbitten");});
test("backboard -> backboard", function() {deepEqual( Stem("backboard"), "backboard");});
test("backed -> back", function() {deepEqual( Stem("backed"), "back");});
test("backgammon -> backgammon", function() {deepEqual( Stem("backgammon"), "backgammon");});
test("background -> background", function() {deepEqual( Stem("background"), "background");});
test("backing -> back", function() {deepEqual( Stem("backing"), "back");});
test("backs -> back", function() {deepEqual( Stem("backs"), "back");});
test("backward -> backward", function() {deepEqual( Stem("backward"), "backward");});
test("backwardly -> backwardli", function() {deepEqual( Stem("backwardly"), "backwardli");});
test("backwards -> backward", function() {deepEqual( Stem("backwards"), "backward");});
test("bacon -> bacon", function() {deepEqual( Stem("bacon"), "bacon");});
test("bacons -> bacon", function() {deepEqual( Stem("bacons"), "bacon");});
test("bad -> bad", function() {deepEqual( Stem("bad"), "bad");});
test("bade -> bade", function() {deepEqual( Stem("bade"), "bade");});
test("baden -> baden", function() {deepEqual( Stem("baden"), "baden");});
test("badge -> badg", function() {deepEqual( Stem("badge"), "badg");});
test("badged -> badg", function() {deepEqual( Stem("badged"), "badg");});
test("badges -> badg", function() {deepEqual( Stem("badges"), "badg");});
test("badly -> badli", function() {deepEqual( Stem("badly"), "badli");});
test("badness -> bad", function() {deepEqual( Stem("badness"), "bad");});
test("baes -> bae", function() {deepEqual( Stem("baes"), "bae");});
test("baffl -> baffl", function() {deepEqual( Stem("baffl"), "baffl");});
test("baffle -> baffl", function() {deepEqual( Stem("baffle"), "baffl");});
test("baffled -> baffl", function() {deepEqual( Stem("baffled"), "baffl");});
test("bag -> bag", function() {deepEqual( Stem("bag"), "bag");});
test("baggage -> baggag", function() {deepEqual( Stem("baggage"), "baggag");});
test("baggidge -> baggidg", function() {deepEqual( Stem("baggidge"), "baggidg");});
test("bagging -> bag", function() {deepEqual( Stem("bagging"), "bag");});
test("bagmen -> bagmen", function() {deepEqual( Stem("bagmen"), "bagmen");});
test("bagot -> bagot", function() {deepEqual( Stem("bagot"), "bagot");});
test("bagpipe -> bagpip", function() {deepEqual( Stem("bagpipe"), "bagpip");});
test("bagpipes -> bagpip", function() {deepEqual( Stem("bagpipes"), "bagpip");});
test("bags -> bag", function() {deepEqual( Stem("bags"), "bag");});
test("bagshot -> bagshot", function() {deepEqual( Stem("bagshot"), "bagshot");});
test("bagwig -> bagwig", function() {deepEqual( Stem("bagwig"), "bagwig");});
test("bah -> bah", function() {deepEqual( Stem("bah"), "bah");});
test("bahawder -> bahawd", function() {deepEqual( Stem("bahawder"), "bahawd");});
test("bail -> bail", function() {deepEqual( Stem("bail"), "bail");});
test("bailey -> bailei", function() {deepEqual( Stem("bailey"), "bailei");});
test("bailiff -> bailiff", function() {deepEqual( Stem("bailiff"), "bailiff");});
test("bailiffs -> bailiff", function() {deepEqual( Stem("bailiffs"), "bailiff");});
test("baillez -> baillez", function() {deepEqual( Stem("baillez"), "baillez");});
test("baily -> baili", function() {deepEqual( Stem("baily"), "baili");});
test("baisant -> baisant", function() {deepEqual( Stem("baisant"), "baisant");});
test("baisees -> baise", function() {deepEqual( Stem("baisees"), "baise");});
test("baiser -> baiser", function() {deepEqual( Stem("baiser"), "baiser");});
test("bait -> bait", function() {deepEqual( Stem("bait"), "bait");});
test("baited -> bait", function() {deepEqual( Stem("baited"), "bait");});
test("baiting -> bait", function() {deepEqual( Stem("baiting"), "bait");});
test("baitings -> bait", function() {deepEqual( Stem("baitings"), "bait");});
test("baits -> bait", function() {deepEqual( Stem("baits"), "bait");});
test("bajazet -> bajazet", function() {deepEqual( Stem("bajazet"), "bajazet");});
test("bajocchi -> bajocchi", function() {deepEqual( Stem("bajocchi"), "bajocchi");});
test("bak -> bak", function() {deepEqual( Stem("bak"), "bak");});
test("bake -> bake", function() {deepEqual( Stem("bake"), "bake");});
test("baked -> bake", function() {deepEqual( Stem("baked"), "bake");});
test("baker -> baker", function() {deepEqual( Stem("baker"), "baker");});
test("bakers -> baker", function() {deepEqual( Stem("bakers"), "baker");});
test("bakes -> bake", function() {deepEqual( Stem("bakes"), "bake");});
test("baking -> bake", function() {deepEqual( Stem("baking"), "bake");});
test("bal -> bal", function() {deepEqual( Stem("bal"), "bal");});
test("balanc -> balanc", function() {deepEqual( Stem("balanc"), "balanc");});
test("balance -> balanc", function() {deepEqual( Stem("balance"), "balanc");});
test("balanced -> balanc", function() {deepEqual( Stem("balanced"), "balanc");});
test("balancing -> balanc", function() {deepEqual( Stem("balancing"), "balanc");});
test("balcony -> balconi", function() {deepEqual( Stem("balcony"), "balconi");});
test("bald -> bald", function() {deepEqual( Stem("bald"), "bald");});
test("baldaquin -> baldaquin", function() {deepEqual( Stem("baldaquin"), "baldaquin");});
test("baldaquins -> baldaquin", function() {deepEqual( Stem("baldaquins"), "baldaquin");});
test("baldheaded -> baldhead", function() {deepEqual( Stem("baldheaded"), "baldhead");});
test("baldrick -> baldrick", function() {deepEqual( Stem("baldrick"), "baldrick");});
test("bale -> bale", function() {deepEqual( Stem("bale"), "bale");});
test("baleful -> bale", function() {deepEqual( Stem("baleful"), "bale");});
test("balefully -> balefulli", function() {deepEqual( Stem("balefully"), "balefulli");});
test("balgony -> balgoni", function() {deepEqual( Stem("balgony"), "balgoni");});
test("balk -> balk", function() {deepEqual( Stem("balk"), "balk");});
test("balked -> balk", function() {deepEqual( Stem("balked"), "balk");});
test("ball -> ball", function() {deepEqual( Stem("ball"), "ball");});
test("ballad -> ballad", function() {deepEqual( Stem("ballad"), "ballad");});
test("ballads -> ballad", function() {deepEqual( Stem("ballads"), "ballad");});
test("ballast -> ballast", function() {deepEqual( Stem("ballast"), "ballast");});
test("ballasting -> ballast", function() {deepEqual( Stem("ballasting"), "ballast");});
test("ballet -> ballet", function() {deepEqual( Stem("ballet"), "ballet");});
test("ballinafad -> ballinafad", function() {deepEqual( Stem("ballinafad"), "ballinafad");});
test("ballinasloe -> ballinaslo", function() {deepEqual( Stem("ballinasloe"), "ballinaslo");});
test("ballow -> ballow", function() {deepEqual( Stem("ballow"), "ballow");});
test("balls -> ball", function() {deepEqual( Stem("balls"), "ball");});
test("ballymalony -> ballymaloni", function() {deepEqual( Stem("ballymalony"), "ballymaloni");});
test("balm -> balm", function() {deepEqual( Stem("balm"), "balm");});
test("balms -> balm", function() {deepEqual( Stem("balms"), "balm");});
test("balmy -> balmi", function() {deepEqual( Stem("balmy"), "balmi");});
test("balsam -> balsam", function() {deepEqual( Stem("balsam"), "balsam");});
test("balsamum -> balsamum", function() {deepEqual( Stem("balsamum"), "balsamum");});
test("balth -> balth", function() {deepEqual( Stem("balth"), "balth");});
test("balthasar -> balthasar", function() {deepEqual( Stem("balthasar"), "balthasar");});
test("balthazar -> balthazar", function() {deepEqual( Stem("balthazar"), "balthazar");});
test("bamboo -> bamboo", function() {deepEqual( Stem("bamboo"), "bamboo");});
test("bames -> bame", function() {deepEqual( Stem("bames"), "bame");});
test("bampfylde -> bampfyld", function() {deepEqual( Stem("bampfylde"), "bampfyld");});
test("ban -> ban", function() {deepEqual( Stem("ban"), "ban");});
test("banbury -> banburi", function() {deepEqual( Stem("banbury"), "banburi");});
test("band -> band", function() {deepEqual( Stem("band"), "band");});
test("bandanna -> bandanna", function() {deepEqual( Stem("bandanna"), "bandanna");});
test("bandbox -> bandbox", function() {deepEqual( Stem("bandbox"), "bandbox");});
test("bandboxes -> bandbox", function() {deepEqual( Stem("bandboxes"), "bandbox");});
test("bandied -> bandi", function() {deepEqual( Stem("bandied"), "bandi");});
test("banding -> band", function() {deepEqual( Stem("banding"), "band");});
test("bandit -> bandit", function() {deepEqual( Stem("bandit"), "bandit");});
test("banditti -> banditti", function() {deepEqual( Stem("banditti"), "banditti");});
test("banditto -> banditto", function() {deepEqual( Stem("banditto"), "banditto");});
test("bands -> band", function() {deepEqual( Stem("bands"), "band");});
test("bandy -> bandi", function() {deepEqual( Stem("bandy"), "bandi");});
test("bandying -> bandi", function() {deepEqual( Stem("bandying"), "bandi");});
test("bane -> bane", function() {deepEqual( Stem("bane"), "bane");});
test("banes -> bane", function() {deepEqual( Stem("banes"), "bane");});
test("bang -> bang", function() {deepEqual( Stem("bang"), "bang");});
test("banging -> bang", function() {deepEqual( Stem("banging"), "bang");});
test("bangles -> bangl", function() {deepEqual( Stem("bangles"), "bangl");});
test("bangor -> bangor", function() {deepEqual( Stem("bangor"), "bangor");});
test("banish -> banish", function() {deepEqual( Stem("banish"), "banish");});
test("banished -> banish", function() {deepEqual( Stem("banished"), "banish");});
test("banishers -> banish", function() {deepEqual( Stem("banishers"), "banish");});
test("banishing -> banish", function() {deepEqual( Stem("banishing"), "banish");});
test("banishment -> banish", function() {deepEqual( Stem("banishment"), "banish");});
test("banister -> banist", function() {deepEqual( Stem("banister"), "banist");});
test("banisters -> banist", function() {deepEqual( Stem("banisters"), "banist");});
test("bank -> bank", function() {deepEqual( Stem("bank"), "bank");});
test("banker -> banker", function() {deepEqual( Stem("banker"), "banker");});
test("bankers -> banker", function() {deepEqual( Stem("bankers"), "banker");});
test("banking -> bank", function() {deepEqual( Stem("banking"), "bank");});
test("bankrout -> bankrout", function() {deepEqual( Stem("bankrout"), "bankrout");});
test("bankrupt -> bankrupt", function() {deepEqual( Stem("bankrupt"), "bankrupt");});
test("bankruptcy -> bankruptci", function() {deepEqual( Stem("bankruptcy"), "bankruptci");});
test("bankrupts -> bankrupt", function() {deepEqual( Stem("bankrupts"), "bankrupt");});
test("banks -> bank", function() {deepEqual( Stem("banks"), "bank");});
test("banner -> banner", function() {deepEqual( Stem("banner"), "banner");});
test("bannerets -> banneret", function() {deepEqual( Stem("bannerets"), "banneret");});
test("banners -> banner", function() {deepEqual( Stem("banners"), "banner");});
test("banning -> ban", function() {deepEqual( Stem("banning"), "ban");});
test("banns -> bann", function() {deepEqual( Stem("banns"), "bann");});
test("banquet -> banquet", function() {deepEqual( Stem("banquet"), "banquet");});
test("banqueted -> banquet", function() {deepEqual( Stem("banqueted"), "banquet");});
test("banqueting -> banquet", function() {deepEqual( Stem("banqueting"), "banquet");});
test("banquets -> banquet", function() {deepEqual( Stem("banquets"), "banquet");});
test("banquo -> banquo", function() {deepEqual( Stem("banquo"), "banquo");});
test("bans -> ban", function() {deepEqual( Stem("bans"), "ban");});
test("banter -> banter", function() {deepEqual( Stem("banter"), "banter");});
test("bantered -> banter", function() {deepEqual( Stem("bantered"), "banter");});
test("bantering -> banter", function() {deepEqual( Stem("bantering"), "banter");});
test("bantings -> bant", function() {deepEqual( Stem("bantings"), "bant");});
test("banyhann -> banyhann", function() {deepEqual( Stem("banyhann"), "banyhann");});
test("baptism -> baptism", function() {deepEqual( Stem("baptism"), "baptism");});
test("baptista -> baptista", function() {deepEqual( Stem("baptista"), "baptista");});
test("baptiz -> baptiz", function() {deepEqual( Stem("baptiz"), "baptiz");});
test("bar -> bar", function() {deepEqual( Stem("bar"), "bar");});
test("barbara -> barbara", function() {deepEqual( Stem("barbara"), "barbara");});
test("barbarian -> barbarian", function() {deepEqual( Stem("barbarian"), "barbarian");});
test("barbarians -> barbarian", function() {deepEqual( Stem("barbarians"), "barbarian");});
test("barbarism -> barbar", function() {deepEqual( Stem("barbarism"), "barbar");});
test("barbarous -> barbar", function() {deepEqual( Stem("barbarous"), "barbar");});
test("barbary -> barbari", function() {deepEqual( Stem("barbary"), "barbari");});
test("barbason -> barbason", function() {deepEqual( Stem("barbason"), "barbason");});
test("barbed -> barb", function() {deepEqual( Stem("barbed"), "barb");});
test("barber -> barber", function() {deepEqual( Stem("barber"), "barber");});
test("barbermonger -> barbermong", function() {deepEqual( Stem("barbermonger"), "barbermong");});
test("barclay -> barclai", function() {deepEqual( Stem("barclay"), "barclai");});
test("bard -> bard", function() {deepEqual( Stem("bard"), "bard");});
test("bardolph -> bardolph", function() {deepEqual( Stem("bardolph"), "bardolph");});
test("bards -> bard", function() {deepEqual( Stem("bards"), "bard");});
test("bare -> bare", function() {deepEqual( Stem("bare"), "bare");});
test("bareacres -> bareacr", function() {deepEqual( Stem("bareacres"), "bareacr");});
test("barebones -> barebon", function() {deepEqual( Stem("barebones"), "barebon");});
test("bared -> bare", function() {deepEqual( Stem("bared"), "bare");});
test("barefac -> barefac", function() {deepEqual( Stem("barefac"), "barefac");});
test("barefaced -> barefac", function() {deepEqual( Stem("barefaced"), "barefac");});
test("barefoot -> barefoot", function() {deepEqual( Stem("barefoot"), "barefoot");});
test("bareheaded -> barehead", function() {deepEqual( Stem("bareheaded"), "barehead");});
test("barely -> bare", function() {deepEqual( Stem("barely"), "bare");});
test("bareness -> bare", function() {deepEqual( Stem("bareness"), "bare");});
test("barful -> bar", function() {deepEqual( Stem("barful"), "bar");});
test("bargain -> bargain", function() {deepEqual( Stem("bargain"), "bargain");});
test("bargainers -> bargain", function() {deepEqual( Stem("bargainers"), "bargain");});
test("bargaining -> bargain", function() {deepEqual( Stem("bargaining"), "bargain");});
test("bargains -> bargain", function() {deepEqual( Stem("bargains"), "bargain");});
test("barge -> barg", function() {deepEqual( Stem("barge"), "barg");});
test("bargeman -> bargeman", function() {deepEqual( Stem("bargeman"), "bargeman");});
test("barges -> barg", function() {deepEqual( Stem("barges"), "barg");});
test("bargulus -> bargulu", function() {deepEqual( Stem("bargulus"), "bargulu");});
test("baring -> bare", function() {deepEqual( Stem("baring"), "bare");});
test("bark -> bark", function() {deepEqual( Stem("bark"), "bark");});
test("barking -> bark", function() {deepEqual( Stem("barking"), "bark");});
test("barkloughly -> barkloughli", function() {deepEqual( Stem("barkloughly"), "barkloughli");});
test("barks -> bark", function() {deepEqual( Stem("barks"), "bark");});
test("barky -> barki", function() {deepEqual( Stem("barky"), "barki");});
test("barley -> barlei", function() {deepEqual( Stem("barley"), "barlei");});
test("barm -> barm", function() {deepEqual( Stem("barm"), "barm");});
test("barn -> barn", function() {deepEqual( Stem("barn"), "barn");});
test("barnacles -> barnacl", function() {deepEqual( Stem("barnacles"), "barnacl");});
test("barnardine -> barnardin", function() {deepEqual( Stem("barnardine"), "barnardin");});
test("barne -> barn", function() {deepEqual( Stem("barne"), "barn");});
test("barnes -> barn", function() {deepEqual( Stem("barnes"), "barn");});
test("barnet -> barnet", function() {deepEqual( Stem("barnet"), "barnet");});
test("barns -> barn", function() {deepEqual( Stem("barns"), "barn");});
test("baron -> baron", function() {deepEqual( Stem("baron"), "baron");});
test("baroness -> baro", function() {deepEqual( Stem("baroness"), "baro");});
test("baronet -> baronet", function() {deepEqual( Stem("baronet"), "baronet");});
test("baronetage -> baronetag", function() {deepEqual( Stem("baronetage"), "baronetag");});
test("baronetcy -> baronetci", function() {deepEqual( Stem("baronetcy"), "baronetci");});
test("baronets -> baronet", function() {deepEqual( Stem("baronets"), "baronet");});
test("barons -> baron", function() {deepEqual( Stem("barons"), "baron");});
test("barony -> baroni", function() {deepEqual( Stem("barony"), "baroni");});
test("barouche -> barouch", function() {deepEqual( Stem("barouche"), "barouch");});
test("barr -> barr", function() {deepEqual( Stem("barr"), "barr");});
test("barrabas -> barraba", function() {deepEqual( Stem("barrabas"), "barraba");});
test("barrack -> barrack", function() {deepEqual( Stem("barrack"), "barrack");});
test("barracks -> barrack", function() {deepEqual( Stem("barracks"), "barrack");});
test("barred -> bar", function() {deepEqual( Stem("barred"), "bar");});
test("barrel -> barrel", function() {deepEqual( Stem("barrel"), "barrel");});
test("barrelled -> barrel", function() {deepEqual( Stem("barrelled"), "barrel");});
test("barrels -> barrel", function() {deepEqual( Stem("barrels"), "barrel");});
test("barren -> barren", function() {deepEqual( Stem("barren"), "barren");});
test("barrenly -> barrenli", function() {deepEqual( Stem("barrenly"), "barrenli");});
test("barrenness -> barren", function() {deepEqual( Stem("barrenness"), "barren");});
test("barri -> barri", function() {deepEqual( Stem("barri"), "barri");});
test("barricado -> barricado", function() {deepEqual( Stem("barricado"), "barricado");});
test("barricadoes -> barricado", function() {deepEqual( Stem("barricadoes"), "barricado");});
test("barrier -> barrier", function() {deepEqual( Stem("barrier"), "barrier");});
test("barril -> barril", function() {deepEqual( Stem("barril"), "barril");});
test("barrister -> barrist", function() {deepEqual( Stem("barrister"), "barrist");});
test("barristers -> barrist", function() {deepEqual( Stem("barristers"), "barrist");});
test("barrow -> barrow", function() {deepEqual( Stem("barrow"), "barrow");});
test("bars -> bar", function() {deepEqual( Stem("bars"), "bar");});
test("barson -> barson", function() {deepEqual( Stem("barson"), "barson");});
test("bart -> bart", function() {deepEqual( Stem("bart"), "bart");});
test("barter -> barter", function() {deepEqual( Stem("barter"), "barter");});
test("bartering -> barter", function() {deepEqual( Stem("bartering"), "barter");});
test("bartholomew -> bartholomew", function() {deepEqual( Stem("bartholomew"), "bartholomew");});
test("bas -> ba", function() {deepEqual( Stem("bas"), "ba");});
test("basan -> basan", function() {deepEqual( Stem("basan"), "basan");});
test("base -> base", function() {deepEqual( Stem("base"), "base");});
test("baseless -> baseless", function() {deepEqual( Stem("baseless"), "baseless");});
test("basely -> base", function() {deepEqual( Stem("basely"), "base");});
test("basement -> basement", function() {deepEqual( Stem("basement"), "basement");});
test("baseness -> base", function() {deepEqual( Stem("baseness"), "base");});
test("baser -> baser", function() {deepEqual( Stem("baser"), "baser");});
test("bases -> base", function() {deepEqual( Stem("bases"), "base");});
test("basest -> basest", function() {deepEqual( Stem("basest"), "basest");});
test("bashful -> bash", function() {deepEqual( Stem("bashful"), "bash");});
test("bashfulness -> bash", function() {deepEqual( Stem("bashfulness"), "bash");});
test("basilisco -> basilisco", function() {deepEqual( Stem("basilisco"), "basilisco");});
test("basilisk -> basilisk", function() {deepEqual( Stem("basilisk"), "basilisk");});
test("basilisks -> basilisk", function() {deepEqual( Stem("basilisks"), "basilisk");});
test("basimecu -> basimecu", function() {deepEqual( Stem("basimecu"), "basimecu");});
test("basin -> basin", function() {deepEqual( Stem("basin"), "basin");});
test("basingstoke -> basingstok", function() {deepEqual( Stem("basingstoke"), "basingstok");});
test("basins -> basin", function() {deepEqual( Stem("basins"), "basin");});
test("basis -> basi", function() {deepEqual( Stem("basis"), "basi");});
test("bask -> bask", function() {deepEqual( Stem("bask"), "bask");});
test("basked -> bask", function() {deepEqual( Stem("basked"), "bask");});
test("basket -> basket", function() {deepEqual( Stem("basket"), "basket");});
test("baskets -> basket", function() {deepEqual( Stem("baskets"), "basket");});
test("bass -> bass", function() {deepEqual( Stem("bass"), "bass");});
test("bassanio -> bassanio", function() {deepEqual( Stem("bassanio"), "bassanio");});
test("basset -> basset", function() {deepEqual( Stem("basset"), "basset");});
test("bassianus -> bassianu", function() {deepEqual( Stem("bassianus"), "bassianu");});
test("bassoon -> bassoon", function() {deepEqual( Stem("bassoon"), "bassoon");});
test("basta -> basta", function() {deepEqual( Stem("basta"), "basta");});
test("bastard -> bastard", function() {deepEqual( Stem("bastard"), "bastard");});
test("bastardizing -> bastard", function() {deepEqual( Stem("bastardizing"), "bastard");});
test("bastardly -> bastardli", function() {deepEqual( Stem("bastardly"), "bastardli");});
test("bastards -> bastard", function() {deepEqual( Stem("bastards"), "bastard");});
test("bastardy -> bastardi", function() {deepEqual( Stem("bastardy"), "bastardi");});
test("basted -> bast", function() {deepEqual( Stem("basted"), "bast");});
test("bastes -> bast", function() {deepEqual( Stem("bastes"), "bast");});
test("bastinado -> bastinado", function() {deepEqual( Stem("bastinado"), "bastinado");});
test("basting -> bast", function() {deepEqual( Stem("basting"), "bast");});
test("bat -> bat", function() {deepEqual( Stem("bat"), "bat");});
test("batailles -> batail", function() {deepEqual( Stem("batailles"), "batail");});
test("batavier -> batavi", function() {deepEqual( Stem("batavier"), "batavi");});
test("batch -> batch", function() {deepEqual( Stem("batch"), "batch");});
test("bate -> bate", function() {deepEqual( Stem("bate"), "bate");});
test("bated -> bate", function() {deepEqual( Stem("bated"), "bate");});
test("bates -> bate", function() {deepEqual( Stem("bates"), "bate");});
test("bath -> bath", function() {deepEqual( Stem("bath"), "bath");});
test("bathe -> bath", function() {deepEqual( Stem("bathe"), "bath");});
test("bathed -> bath", function() {deepEqual( Stem("bathed"), "bath");});
test("bathing -> bath", function() {deepEqual( Stem("bathing"), "bath");});
test("baths -> bath", function() {deepEqual( Stem("baths"), "bath");});
test("bating -> bate", function() {deepEqual( Stem("bating"), "bate");});
test("batler -> batler", function() {deepEqual( Stem("batler"), "batler");});
test("bats -> bat", function() {deepEqual( Stem("bats"), "bat");});
test("batt -> batt", function() {deepEqual( Stem("batt"), "batt");});
test("battalia -> battalia", function() {deepEqual( Stem("battalia"), "battalia");});
test("battalions -> battalion", function() {deepEqual( Stem("battalions"), "battalion");});
test("batten -> batten", function() {deepEqual( Stem("batten"), "batten");});
test("battened -> batten", function() {deepEqual( Stem("battened"), "batten");});
test("batter -> batter", function() {deepEqual( Stem("batter"), "batter");});
test("battered -> batter", function() {deepEqual( Stem("battered"), "batter");});
test("battering -> batter", function() {deepEqual( Stem("battering"), "batter");});
test("batters -> batter", function() {deepEqual( Stem("batters"), "batter");});
test("battersea -> battersea", function() {deepEqual( Stem("battersea"), "battersea");});
test("battery -> batteri", function() {deepEqual( Stem("battery"), "batteri");});
test("batti -> batti", function() {deepEqual( Stem("batti"), "batti");});
test("battle -> battl", function() {deepEqual( Stem("battle"), "battl");});
test("battled -> battl", function() {deepEqual( Stem("battled"), "battl");});
test("battlefield -> battlefield", function() {deepEqual( Stem("battlefield"), "battlefield");});
test("battlements -> battlement", function() {deepEqual( Stem("battlements"), "battlement");});
test("battles -> battl", function() {deepEqual( Stem("battles"), "battl");});
test("battling -> battl", function() {deepEqual( Stem("battling"), "battl");});
test("battues -> battu", function() {deepEqual( Stem("battues"), "battu");});
test("batty -> batti", function() {deepEqual( Stem("batty"), "batti");});
test("bauble -> baubl", function() {deepEqual( Stem("bauble"), "baubl");});
test("baubles -> baubl", function() {deepEqual( Stem("baubles"), "baubl");});
test("baubling -> baubl", function() {deepEqual( Stem("baubling"), "baubl");});
test("baulk -> baulk", function() {deepEqual( Stem("baulk"), "baulk");});
test("baulked -> baulk", function() {deepEqual( Stem("baulked"), "baulk");});
test("bavarian -> bavarian", function() {deepEqual( Stem("bavarian"), "bavarian");});
test("bavin -> bavin", function() {deepEqual( Stem("bavin"), "bavin");});
test("bawcock -> bawcock", function() {deepEqual( Stem("bawcock"), "bawcock");});
test("bawd -> bawd", function() {deepEqual( Stem("bawd"), "bawd");});
test("bawdry -> bawdri", function() {deepEqual( Stem("bawdry"), "bawdri");});
test("bawds -> bawd", function() {deepEqual( Stem("bawds"), "bawd");});
test("bawdy -> bawdi", function() {deepEqual( Stem("bawdy"), "bawdi");});
test("bawl -> bawl", function() {deepEqual( Stem("bawl"), "bawl");});
test("bawled -> bawl", function() {deepEqual( Stem("bawled"), "bawl");});
test("bawler -> bawler", function() {deepEqual( Stem("bawler"), "bawler");});
test("bawling -> bawl", function() {deepEqual( Stem("bawling"), "bawl");});
test("bawls -> bawl", function() {deepEqual( Stem("bawls"), "bawl");});
test("bay -> bai", function() {deepEqual( Stem("bay"), "bai");});
test("baying -> bai", function() {deepEqual( Stem("baying"), "bai");});
test("baynard -> baynard", function() {deepEqual( Stem("baynard"), "baynard");});
test("bayonet -> bayonet", function() {deepEqual( Stem("bayonet"), "bayonet");});
test("bayonets -> bayonet", function() {deepEqual( Stem("bayonets"), "bayonet");});
test("bayonne -> bayonn", function() {deepEqual( Stem("bayonne"), "bayonn");});
test("bays -> bai", function() {deepEqual( Stem("bays"), "bai");});
test("bayswater -> bayswat", function() {deepEqual( Stem("bayswater"), "bayswat");});
test("bazaars -> bazaar", function() {deepEqual( Stem("bazaars"), "bazaar");});
test("be -> be", function() {deepEqual( Stem("be"), "be");});
test("beach -> beach", function() {deepEqual( Stem("beach"), "beach");});
test("beached -> beach", function() {deepEqual( Stem("beached"), "beach");});
test("beachy -> beachi", function() {deepEqual( Stem("beachy"), "beachi");});
test("beacon -> beacon", function() {deepEqual( Stem("beacon"), "beacon");});
test("bead -> bead", function() {deepEqual( Stem("bead"), "bead");});
test("beaded -> bead", function() {deepEqual( Stem("beaded"), "bead");});
test("beadle -> beadl", function() {deepEqual( Stem("beadle"), "beadl");});
test("beadles -> beadl", function() {deepEqual( Stem("beadles"), "beadl");});
test("beads -> bead", function() {deepEqual( Stem("beads"), "bead");});
test("beadsmen -> beadsmen", function() {deepEqual( Stem("beadsmen"), "beadsmen");});
test("beady -> beadi", function() {deepEqual( Stem("beady"), "beadi");});
test("beagle -> beagl", function() {deepEqual( Stem("beagle"), "beagl");});
test("beagles -> beagl", function() {deepEqual( Stem("beagles"), "beagl");});
test("beak -> beak", function() {deepEqual( Stem("beak"), "beak");});
test("beaks -> beak", function() {deepEqual( Stem("beaks"), "beak");});
test("beam -> beam", function() {deepEqual( Stem("beam"), "beam");});
test("beamed -> beam", function() {deepEqual( Stem("beamed"), "beam");});
test("beaming -> beam", function() {deepEqual( Stem("beaming"), "beam");});
test("beams -> beam", function() {deepEqual( Stem("beams"), "beam");});
test("bean -> bean", function() {deepEqual( Stem("bean"), "bean");});
test("beans -> bean", function() {deepEqual( Stem("beans"), "bean");});
test("bear -> bear", function() {deepEqual( Stem("bear"), "bear");});
test("bearable -> bearabl", function() {deepEqual( Stem("bearable"), "bearabl");});
test("beard -> beard", function() {deepEqual( Stem("beard"), "beard");});
test("bearded -> beard", function() {deepEqual( Stem("bearded"), "beard");});
test("beardless -> beardless", function() {deepEqual( Stem("beardless"), "beardless");});
test("beards -> beard", function() {deepEqual( Stem("beards"), "beard");});
test("bearer -> bearer", function() {deepEqual( Stem("bearer"), "bearer");});
test("bearers -> bearer", function() {deepEqual( Stem("bearers"), "bearer");});
test("bearest -> bearest", function() {deepEqual( Stem("bearest"), "bearest");});
test("beareth -> beareth", function() {deepEqual( Stem("beareth"), "beareth");});
test("bearing -> bear", function() {deepEqual( Stem("bearing"), "bear");});
test("bearings -> bear", function() {deepEqual( Stem("bearings"), "bear");});
test("bears -> bear", function() {deepEqual( Stem("bears"), "bear");});
test("bearskin -> bearskin", function() {deepEqual( Stem("bearskin"), "bearskin");});
test("beast -> beast", function() {deepEqual( Stem("beast"), "beast");});
test("beastliest -> beastliest", function() {deepEqual( Stem("beastliest"), "beastliest");});
test("beastliness -> beastli", function() {deepEqual( Stem("beastliness"), "beastli");});
test("beastly -> beastli", function() {deepEqual( Stem("beastly"), "beastli");});
test("beasts -> beast", function() {deepEqual( Stem("beasts"), "beast");});
test("beat -> beat", function() {deepEqual( Stem("beat"), "beat");});
test("beated -> beat", function() {deepEqual( Stem("beated"), "beat");});
test("beaten -> beaten", function() {deepEqual( Stem("beaten"), "beaten");});
test("beating -> beat", function() {deepEqual( Stem("beating"), "beat");});
test("beatrice -> beatric", function() {deepEqual( Stem("beatrice"), "beatric");});
test("beats -> beat", function() {deepEqual( Stem("beats"), "beat");});
test("beau -> beau", function() {deepEqual( Stem("beau"), "beau");});
test("beaufort -> beaufort", function() {deepEqual( Stem("beaufort"), "beaufort");});
test("beaumond -> beaumond", function() {deepEqual( Stem("beaumond"), "beaumond");});
test("beaumont -> beaumont", function() {deepEqual( Stem("beaumont"), "beaumont");});
test("beaumoris -> beaumori", function() {deepEqual( Stem("beaumoris"), "beaumori");});
test("beauteous -> beauteou", function() {deepEqual( Stem("beauteous"), "beauteou");});
test("beautied -> beauti", function() {deepEqual( Stem("beautied"), "beauti");});
test("beauties -> beauti", function() {deepEqual( Stem("beauties"), "beauti");});
test("beautified -> beautifi", function() {deepEqual( Stem("beautified"), "beautifi");});
test("beautiful -> beauti", function() {deepEqual( Stem("beautiful"), "beauti");});
test("beautifully -> beautifulli", function() {deepEqual( Stem("beautifully"), "beautifulli");});
test("beautify -> beautifi", function() {deepEqual( Stem("beautify"), "beautifi");});
test("beauty -> beauti", function() {deepEqual( Stem("beauty"), "beauti");});
test("beauvilliers -> beauvilli", function() {deepEqual( Stem("beauvilliers"), "beauvilli");});
test("beaux -> beaux", function() {deepEqual( Stem("beaux"), "beaux");});
test("beaver -> beaver", function() {deepEqual( Stem("beaver"), "beaver");});
test("beavers -> beaver", function() {deepEqual( Stem("beavers"), "beaver");});
test("became -> becam", function() {deepEqual( Stem("became"), "becam");});
test("because -> becaus", function() {deepEqual( Stem("because"), "becaus");});
test("bechanc -> bechanc", function() {deepEqual( Stem("bechanc"), "bechanc");});
test("bechance -> bechanc", function() {deepEqual( Stem("bechance"), "bechanc");});
test("bechanced -> bechanc", function() {deepEqual( Stem("bechanced"), "bechanc");});
test("beck -> beck", function() {deepEqual( Stem("beck"), "beck");});
test("beckon -> beckon", function() {deepEqual( Stem("beckon"), "beckon");});
test("beckoning -> beckon", function() {deepEqual( Stem("beckoning"), "beckon");});
test("beckons -> beckon", function() {deepEqual( Stem("beckons"), "beckon");});
test("becks -> beck", function() {deepEqual( Stem("becks"), "beck");});
test("becky -> becki", function() {deepEqual( Stem("becky"), "becki");});
test("becom -> becom", function() {deepEqual( Stem("becom"), "becom");});
test("become -> becom", function() {deepEqual( Stem("become"), "becom");});
test("becomed -> becom", function() {deepEqual( Stem("becomed"), "becom");});
test("becomes -> becom", function() {deepEqual( Stem("becomes"), "becom");});
test("becoming -> becom", function() {deepEqual( Stem("becoming"), "becom");});
test("becomings -> becom", function() {deepEqual( Stem("becomings"), "becom");});
test("bed -> bed", function() {deepEqual( Stem("bed"), "bed");});
test("bedabbled -> bedabbl", function() {deepEqual( Stem("bedabbled"), "bedabbl");});
test("bedad -> bedad", function() {deepEqual( Stem("bedad"), "bedad");});
test("bedash -> bedash", function() {deepEqual( Stem("bedash"), "bedash");});
test("bedaub -> bedaub", function() {deepEqual( Stem("bedaub"), "bedaub");});
test("bedazzled -> bedazzl", function() {deepEqual( Stem("bedazzled"), "bedazzl");});
test("bedchamber -> bedchamb", function() {deepEqual( Stem("bedchamber"), "bedchamb");});
test("bedclothes -> bedcloth", function() {deepEqual( Stem("bedclothes"), "bedcloth");});
test("bedded -> bed", function() {deepEqual( Stem("bedded"), "bed");});
test("beddoes -> beddo", function() {deepEqual( Stem("beddoes"), "beddo");});
test("bedeck -> bedeck", function() {deepEqual( Stem("bedeck"), "bedeck");});
test("bedecking -> bedeck", function() {deepEqual( Stem("bedecking"), "bedeck");});
test("bedew -> bedew", function() {deepEqual( Stem("bedew"), "bedew");});
test("bedfellow -> bedfellow", function() {deepEqual( Stem("bedfellow"), "bedfellow");});
test("bedfellows -> bedfellow", function() {deepEqual( Stem("bedfellows"), "bedfellow");});
test("bedford -> bedford", function() {deepEqual( Stem("bedford"), "bedford");});
test("bedlam -> bedlam", function() {deepEqual( Stem("bedlam"), "bedlam");});
test("bedrench -> bedrench", function() {deepEqual( Stem("bedrench"), "bedrench");});
test("bedrid -> bedrid", function() {deepEqual( Stem("bedrid"), "bedrid");});
test("bedroom -> bedroom", function() {deepEqual( Stem("bedroom"), "bedroom");});
test("bedrooms -> bedroom", function() {deepEqual( Stem("bedrooms"), "bedroom");});
test("beds -> bed", function() {deepEqual( Stem("beds"), "bed");});
test("bedside -> bedsid", function() {deepEqual( Stem("bedside"), "bedsid");});
test("bedtime -> bedtim", function() {deepEqual( Stem("bedtime"), "bedtim");});
test("bedward -> bedward", function() {deepEqual( Stem("bedward"), "bedward");});
test("bedwin -> bedwin", function() {deepEqual( Stem("bedwin"), "bedwin");});
test("bee -> bee", function() {deepEqual( Stem("bee"), "bee");});
test("beef -> beef", function() {deepEqual( Stem("beef"), "beef");});
test("beefeaters -> beefeat", function() {deepEqual( Stem("beefeaters"), "beefeat");});
test("beefs -> beef", function() {deepEqual( Stem("beefs"), "beef");});
test("beehives -> beehiv", function() {deepEqual( Stem("beehives"), "beehiv");});
test("been -> been", function() {deepEqual( Stem("been"), "been");});
test("beer -> beer", function() {deepEqual( Stem("beer"), "beer");});
test("beery -> beeri", function() {deepEqual( Stem("beery"), "beeri");});
test("bees -> bee", function() {deepEqual( Stem("bees"), "bee");});
test("beest -> beest", function() {deepEqual( Stem("beest"), "beest");});
test("beeswing -> beesw", function() {deepEqual( Stem("beeswing"), "beesw");});
test("beethoven -> beethoven", function() {deepEqual( Stem("beethoven"), "beethoven");});
test("beetle -> beetl", function() {deepEqual( Stem("beetle"), "beetl");});
test("beetles -> beetl", function() {deepEqual( Stem("beetles"), "beetl");});
test("beeves -> beev", function() {deepEqual( Stem("beeves"), "beev");});
test("befall -> befal", function() {deepEqual( Stem("befall"), "befal");});
test("befallen -> befallen", function() {deepEqual( Stem("befallen"), "befallen");});
test("befalls -> befal", function() {deepEqual( Stem("befalls"), "befal");});
test("befell -> befel", function() {deepEqual( Stem("befell"), "befel");});
test("befits -> befit", function() {deepEqual( Stem("befits"), "befit");});
test("befitted -> befit", function() {deepEqual( Stem("befitted"), "befit");});
test("befitting -> befit", function() {deepEqual( Stem("befitting"), "befit");});
test("befooled -> befool", function() {deepEqual( Stem("befooled"), "befool");});
test("befor -> befor", function() {deepEqual( Stem("befor"), "befor");});
test("before -> befor", function() {deepEqual( Stem("before"), "befor");});
test("beforehand -> beforehand", function() {deepEqual( Stem("beforehand"), "beforehand");});
test("befortune -> befortun", function() {deepEqual( Stem("befortune"), "befortun");});
test("befriend -> befriend", function() {deepEqual( Stem("befriend"), "befriend");});
test("befriended -> befriend", function() {deepEqual( Stem("befriended"), "befriend");});
test("befriends -> befriend", function() {deepEqual( Stem("befriends"), "befriend");});
test("beg -> beg", function() {deepEqual( Stem("beg"), "beg");});
test("begad -> begad", function() {deepEqual( Stem("begad"), "begad");});
test("began -> began", function() {deepEqual( Stem("began"), "began");});
test("beget -> beget", function() {deepEqual( Stem("beget"), "beget");});
test("begets -> beget", function() {deepEqual( Stem("begets"), "beget");});
test("begetting -> beget", function() {deepEqual( Stem("begetting"), "beget");});
test("begg -> begg", function() {deepEqual( Stem("begg"), "begg");});
test("beggar -> beggar", function() {deepEqual( Stem("beggar"), "beggar");});
test("beggared -> beggar", function() {deepEqual( Stem("beggared"), "beggar");});
test("beggarly -> beggarli", function() {deepEqual( Stem("beggarly"), "beggarli");});
test("beggarman -> beggarman", function() {deepEqual( Stem("beggarman"), "beggarman");});
test("beggars -> beggar", function() {deepEqual( Stem("beggars"), "beggar");});
test("beggary -> beggari", function() {deepEqual( Stem("beggary"), "beggari");});
test("begged -> beg", function() {deepEqual( Stem("begged"), "beg");});
test("begging -> beg", function() {deepEqual( Stem("begging"), "beg");});
test("begilt -> begilt", function() {deepEqual( Stem("begilt"), "begilt");});
test("begin -> begin", function() {deepEqual( Stem("begin"), "begin");});
test("beginners -> beginn", function() {deepEqual( Stem("beginners"), "beginn");});
test("beginning -> begin", function() {deepEqual( Stem("beginning"), "begin");});
test("beginnings -> begin", function() {deepEqual( Stem("beginnings"), "begin");});
test("begins -> begin", function() {deepEqual( Stem("begins"), "begin");});
test("begleitung -> begleitung", function() {deepEqual( Stem("begleitung"), "begleitung");});
test("begnawn -> begnawn", function() {deepEqual( Stem("begnawn"), "begnawn");});
test("begnis -> begni", function() {deepEqual( Stem("begnis"), "begni");});
test("begone -> begon", function() {deepEqual( Stem("begone"), "begon");});
test("begot -> begot", function() {deepEqual( Stem("begot"), "begot");});
test("begotten -> begotten", function() {deepEqual( Stem("begotten"), "begotten");});
test("begrimed -> begrim", function() {deepEqual( Stem("begrimed"), "begrim");});
test("begs -> beg", function() {deepEqual( Stem("begs"), "beg");});
test("beguil -> beguil", function() {deepEqual( Stem("beguil"), "beguil");});
test("beguile -> beguil", function() {deepEqual( Stem("beguile"), "beguil");});
test("beguiled -> beguil", function() {deepEqual( Stem("beguiled"), "beguil");});
test("beguiles -> beguil", function() {deepEqual( Stem("beguiles"), "beguil");});
test("beguiling -> beguil", function() {deepEqual( Stem("beguiling"), "beguil");});
test("begun -> begun", function() {deepEqual( Stem("begun"), "begun");});
test("behalf -> behalf", function() {deepEqual( Stem("behalf"), "behalf");});
test("behalfs -> behalf", function() {deepEqual( Stem("behalfs"), "behalf");});
test("behav -> behav", function() {deepEqual( Stem("behav"), "behav");});
test("behave -> behav", function() {deepEqual( Stem("behave"), "behav");});
test("behaved -> behav", function() {deepEqual( Stem("behaved"), "behav");});
test("behavedst -> behavedst", function() {deepEqual( Stem("behavedst"), "behavedst");});
test("behaving -> behav", function() {deepEqual( Stem("behaving"), "behav");});
test("behavior -> behavior", function() {deepEqual( Stem("behavior"), "behavior");});
test("behaviors -> behavior", function() {deepEqual( Stem("behaviors"), "behavior");});
test("behaviour -> behaviour", function() {deepEqual( Stem("behaviour"), "behaviour");});
test("behaviours -> behaviour", function() {deepEqual( Stem("behaviours"), "behaviour");});
test("behead -> behead", function() {deepEqual( Stem("behead"), "behead");});
test("beheaded -> behead", function() {deepEqual( Stem("beheaded"), "behead");});
test("beheld -> beheld", function() {deepEqual( Stem("beheld"), "beheld");});
test("behest -> behest", function() {deepEqual( Stem("behest"), "behest");});
test("behests -> behest", function() {deepEqual( Stem("behests"), "behest");});
test("behind -> behind", function() {deepEqual( Stem("behind"), "behind");});
test("behindhand -> behindhand", function() {deepEqual( Stem("behindhand"), "behindhand");});
test("behold -> behold", function() {deepEqual( Stem("behold"), "behold");});
test("beholder -> behold", function() {deepEqual( Stem("beholder"), "behold");});
test("beholders -> behold", function() {deepEqual( Stem("beholders"), "behold");});
test("beholdest -> beholdest", function() {deepEqual( Stem("beholdest"), "beholdest");});
test("beholding -> behold", function() {deepEqual( Stem("beholding"), "behold");});
test("beholds -> behold", function() {deepEqual( Stem("beholds"), "behold");});
test("behoof -> behoof", function() {deepEqual( Stem("behoof"), "behoof");});
test("behooffull -> behoofful", function() {deepEqual( Stem("behooffull"), "behoofful");});
test("behooves -> behoov", function() {deepEqual( Stem("behooves"), "behoov");});
test("behove -> behov", function() {deepEqual( Stem("behove"), "behov");});
test("behoves -> behov", function() {deepEqual( Stem("behoves"), "behov");});
test("behowls -> behowl", function() {deepEqual( Stem("behowls"), "behowl");});
test("bei -> bei", function() {deepEqual( Stem("bei"), "bei");});
test("beilby -> beilbi", function() {deepEqual( Stem("beilby"), "beilbi");});
test("being -> be", function() {deepEqual( Stem("being"), "be");});
test("beings -> be", function() {deepEqual( Stem("beings"), "be");});
test("bejewelled -> bejewel", function() {deepEqual( Stem("bejewelled"), "bejewel");});
test("bel -> bel", function() {deepEqual( Stem("bel"), "bel");});
test("belabouring -> belabour", function() {deepEqual( Stem("belabouring"), "belabour");});
test("belarius -> belariu", function() {deepEqual( Stem("belarius"), "belariu");});
test("belch -> belch", function() {deepEqual( Stem("belch"), "belch");});
test("belching -> belch", function() {deepEqual( Stem("belching"), "belch");});
test("beldam -> beldam", function() {deepEqual( Stem("beldam"), "beldam");});
test("beldame -> beldam", function() {deepEqual( Stem("beldame"), "beldam");});
test("beldams -> beldam", function() {deepEqual( Stem("beldams"), "beldam");});
test("belee -> bele", function() {deepEqual( Stem("belee"), "bele");});
test("belgia -> belgia", function() {deepEqual( Stem("belgia"), "belgia");});
test("belgian -> belgian", function() {deepEqual( Stem("belgian"), "belgian");});
test("belgians -> belgian", function() {deepEqual( Stem("belgians"), "belgian");});
test("belgic -> belgic", function() {deepEqual( Stem("belgic"), "belgic");});
test("belgium -> belgium", function() {deepEqual( Stem("belgium"), "belgium");});
test("belgrave -> belgrav", function() {deepEqual( Stem("belgrave"), "belgrav");});
test("belgravia -> belgravia", function() {deepEqual( Stem("belgravia"), "belgravia");});
test("belgravians -> belgravian", function() {deepEqual( Stem("belgravians"), "belgravian");});
test("beli -> beli", function() {deepEqual( Stem("beli"), "beli");});
test("belie -> beli", function() {deepEqual( Stem("belie"), "beli");});
test("belied -> beli", function() {deepEqual( Stem("belied"), "beli");});
test("belief -> belief", function() {deepEqual( Stem("belief"), "belief");});
test("beliest -> beliest", function() {deepEqual( Stem("beliest"), "beliest");});
test("believ -> believ", function() {deepEqual( Stem("believ"), "believ");});
test("believe -> believ", function() {deepEqual( Stem("believe"), "believ");});
test("believed -> believ", function() {deepEqual( Stem("believed"), "believ");});
test("believers -> believ", function() {deepEqual( Stem("believers"), "believ");});
test("believes -> believ", function() {deepEqual( Stem("believes"), "believ");});
test("believest -> believest", function() {deepEqual( Stem("believest"), "believest");});
test("believing -> believ", function() {deepEqual( Stem("believing"), "believ");});
test("belike -> belik", function() {deepEqual( Stem("belike"), "belik");});
test("belinda -> belinda", function() {deepEqual( Stem("belinda"), "belinda");});
test("bell -> bell", function() {deepEqual( Stem("bell"), "bell");});
test("belladonna -> belladonna", function() {deepEqual( Stem("belladonna"), "belladonna");});
test("bellario -> bellario", function() {deepEqual( Stem("bellario"), "bellario");});
test("belle -> bell", function() {deepEqual( Stem("belle"), "bell");});
test("bellied -> belli", function() {deepEqual( Stem("bellied"), "belli");});
test("bellies -> belli", function() {deepEqual( Stem("bellies"), "belli");});
test("bellman -> bellman", function() {deepEqual( Stem("bellman"), "bellman");});
test("bello -> bello", function() {deepEqual( Stem("bello"), "bello");});
test("bellona -> bellona", function() {deepEqual( Stem("bellona"), "bellona");});
test("bellow -> bellow", function() {deepEqual( Stem("bellow"), "bellow");});
test("bellowed -> bellow", function() {deepEqual( Stem("bellowed"), "bellow");});
test("bellowing -> bellow", function() {deepEqual( Stem("bellowing"), "bellow");});
test("bellows -> bellow", function() {deepEqual( Stem("bellows"), "bellow");});
test("bells -> bell", function() {deepEqual( Stem("bells"), "bell");});
test("belly -> belli", function() {deepEqual( Stem("belly"), "belli");});
test("bellyful -> belly", function() {deepEqual( Stem("bellyful"), "belly");});
test("belman -> belman", function() {deepEqual( Stem("belman"), "belman");});
test("belmont -> belmont", function() {deepEqual( Stem("belmont"), "belmont");});
test("belock -> belock", function() {deepEqual( Stem("belock"), "belock");});
test("belong -> belong", function() {deepEqual( Stem("belong"), "belong");});
test("belonged -> belong", function() {deepEqual( Stem("belonged"), "belong");});
test("belonging -> belong", function() {deepEqual( Stem("belonging"), "belong");});
test("belongings -> belong", function() {deepEqual( Stem("belongings"), "belong");});
test("belongs -> belong", function() {deepEqual( Stem("belongs"), "belong");});
test("belov -> belov", function() {deepEqual( Stem("belov"), "belov");});
test("beloved -> belov", function() {deepEqual( Stem("beloved"), "belov");});
test("beloving -> belov", function() {deepEqual( Stem("beloving"), "belov");});
test("below -> below", function() {deepEqual( Stem("below"), "below");});
test("belt -> belt", function() {deepEqual( Stem("belt"), "belt");});
test("belts -> belt", function() {deepEqual( Stem("belts"), "belt");});
test("belzebub -> belzebub", function() {deepEqual( Stem("belzebub"), "belzebub");});
test("bemadding -> bemad", function() {deepEqual( Stem("bemadding"), "bemad");});
test("bemet -> bemet", function() {deepEqual( Stem("bemet"), "bemet");});
test("bemete -> bemet", function() {deepEqual( Stem("bemete"), "bemet");});
test("bemoan -> bemoan", function() {deepEqual( Stem("bemoan"), "bemoan");});
test("bemoaned -> bemoan", function() {deepEqual( Stem("bemoaned"), "bemoan");});
test("bemock -> bemock", function() {deepEqual( Stem("bemock"), "bemock");});
test("bemoil -> bemoil", function() {deepEqual( Stem("bemoil"), "bemoil");});
test("bemonster -> bemonst", function() {deepEqual( Stem("bemonster"), "bemonst");});
test("ben -> ben", function() {deepEqual( Stem("ben"), "ben");});
test("bench -> bench", function() {deepEqual( Stem("bench"), "bench");});
test("bencher -> bencher", function() {deepEqual( Stem("bencher"), "bencher");});
test("benches -> bench", function() {deepEqual( Stem("benches"), "bench");});
test("bend -> bend", function() {deepEqual( Stem("bend"), "bend");});
test("bended -> bend", function() {deepEqual( Stem("bended"), "bend");});
test("bending -> bend", function() {deepEqual( Stem("bending"), "bend");});
test("bends -> bend", function() {deepEqual( Stem("bends"), "bend");});
test("bene -> bene", function() {deepEqual( Stem("bene"), "bene");});
test("beneath -> beneath", function() {deepEqual( Stem("beneath"), "beneath");});
test("benedicite -> benedicit", function() {deepEqual( Stem("benedicite"), "benedicit");});
test("benedick -> benedick", function() {deepEqual( Stem("benedick"), "benedick");});
test("benediction -> benedict", function() {deepEqual( Stem("benediction"), "benedict");});
test("benedictus -> benedictu", function() {deepEqual( Stem("benedictus"), "benedictu");});
test("benefactions -> benefact", function() {deepEqual( Stem("benefactions"), "benefact");});
test("benefactor -> benefactor", function() {deepEqual( Stem("benefactor"), "benefactor");});
test("benefactors -> benefactor", function() {deepEqual( Stem("benefactors"), "benefactor");});
test("benefactress -> benefactress", function() {deepEqual( Stem("benefactress"), "benefactress");});
test("benefice -> benefic", function() {deepEqual( Stem("benefice"), "benefic");});
test("beneficent -> benefic", function() {deepEqual( Stem("beneficent"), "benefic");});
test("beneficial -> benefici", function() {deepEqual( Stem("beneficial"), "benefici");});
test("benefit -> benefit", function() {deepEqual( Stem("benefit"), "benefit");});
test("benefited -> benefit", function() {deepEqual( Stem("benefited"), "benefit");});
test("benefiting -> benefit", function() {deepEqual( Stem("benefiting"), "benefit");});
test("benefits -> benefit", function() {deepEqual( Stem("benefits"), "benefit");});
test("benetted -> benet", function() {deepEqual( Stem("benetted"), "benet");});
test("benevolence -> benevol", function() {deepEqual( Stem("benevolence"), "benevol");});
test("benevolences -> benevol", function() {deepEqual( Stem("benevolences"), "benevol");});
test("benevolent -> benevol", function() {deepEqual( Stem("benevolent"), "benevol");});
test("benevolently -> benevol", function() {deepEqual( Stem("benevolently"), "benevol");});
test("bengal -> bengal", function() {deepEqual( Stem("bengal"), "bengal");});
test("bengalee -> bengale", function() {deepEqual( Stem("bengalee"), "bengale");});
test("benied -> beni", function() {deepEqual( Stem("benied"), "beni");});
test("benighted -> benight", function() {deepEqual( Stem("benighted"), "benight");});
test("benison -> benison", function() {deepEqual( Stem("benison"), "benison");});
test("benjamin -> benjamin", function() {deepEqual( Stem("benjamin"), "benjamin");});
test("benjamins -> benjamin", function() {deepEqual( Stem("benjamins"), "benjamin");});
test("bennet -> bennet", function() {deepEqual( Stem("bennet"), "bennet");});
test("bense -> bens", function() {deepEqual( Stem("bense"), "bens");});
test("bent -> bent", function() {deepEqual( Stem("bent"), "bent");});
test("bentii -> bentii", function() {deepEqual( Stem("bentii"), "bentii");});
test("bentivolii -> bentivolii", function() {deepEqual( Stem("bentivolii"), "bentivolii");});
test("bents -> bent", function() {deepEqual( Stem("bents"), "bent");});
test("benumbed -> benumb", function() {deepEqual( Stem("benumbed"), "benumb");});
test("benvolio -> benvolio", function() {deepEqual( Stem("benvolio"), "benvolio");});
test("bepaint -> bepaint", function() {deepEqual( Stem("bepaint"), "bepaint");});
test("bepray -> beprai", function() {deepEqual( Stem("bepray"), "beprai");});
test("bequeath -> bequeath", function() {deepEqual( Stem("bequeath"), "bequeath");});
test("bequeathed -> bequeath", function() {deepEqual( Stem("bequeathed"), "bequeath");});
test("bequeathing -> bequeath", function() {deepEqual( Stem("bequeathing"), "bequeath");});
test("bequest -> bequest", function() {deepEqual( Stem("bequest"), "bequest");});
test("ber -> ber", function() {deepEqual( Stem("ber"), "ber");});
test("berard -> berard", function() {deepEqual( Stem("berard"), "berard");});
test("berattle -> berattl", function() {deepEqual( Stem("berattle"), "berattl");});
test("beray -> berai", function() {deepEqual( Stem("beray"), "berai");});
test("bere -> bere", function() {deepEqual( Stem("bere"), "bere");});
test("bereave -> bereav", function() {deepEqual( Stem("bereave"), "bereav");});
test("bereaved -> bereav", function() {deepEqual( Stem("bereaved"), "bereav");});
test("bereavement -> bereav", function() {deepEqual( Stem("bereavement"), "bereav");});
test("bereaves -> bereav", function() {deepEqual( Stem("bereaves"), "bereav");});
test("bereft -> bereft", function() {deepEqual( Stem("bereft"), "bereft");});
test("bergamo -> bergamo", function() {deepEqual( Stem("bergamo"), "bergamo");});
test("bergomask -> bergomask", function() {deepEqual( Stem("bergomask"), "bergomask");});
test("berhym -> berhym", function() {deepEqual( Stem("berhym"), "berhym");});
test("berhyme -> berhym", function() {deepEqual( Stem("berhyme"), "berhym");});
test("berkeley -> berkelei", function() {deepEqual( Stem("berkeley"), "berkelei");});
test("bermoothes -> bermooth", function() {deepEqual( Stem("bermoothes"), "bermooth");});
test("bernardo -> bernardo", function() {deepEqual( Stem("bernardo"), "bernardo");});
test("berod -> berod", function() {deepEqual( Stem("berod"), "berod");});
test("berowne -> berown", function() {deepEqual( Stem("berowne"), "berown");});
test("berri -> berri", function() {deepEqual( Stem("berri"), "berri");});
test("berries -> berri", function() {deepEqual( Stem("berries"), "berri");});
test("berrord -> berrord", function() {deepEqual( Stem("berrord"), "berrord");});
test("berry -> berri", function() {deepEqual( Stem("berry"), "berri");});
test("bertram -> bertram", function() {deepEqual( Stem("bertram"), "bertram");});
test("berwick -> berwick", function() {deepEqual( Stem("berwick"), "berwick");});
test("bescreen -> bescreen", function() {deepEqual( Stem("bescreen"), "bescreen");});
test("beseech -> beseech", function() {deepEqual( Stem("beseech"), "beseech");});
test("beseeched -> beseech", function() {deepEqual( Stem("beseeched"), "beseech");});
test("beseechers -> beseech", function() {deepEqual( Stem("beseechers"), "beseech");});
test("beseeching -> beseech", function() {deepEqual( Stem("beseeching"), "beseech");});
test("beseek -> beseek", function() {deepEqual( Stem("beseek"), "beseek");});
test("beseem -> beseem", function() {deepEqual( Stem("beseem"), "beseem");});
test("beseemeth -> beseemeth", function() {deepEqual( Stem("beseemeth"), "beseemeth");});
test("beseeming -> beseem", function() {deepEqual( Stem("beseeming"), "beseem");});
test("beseems -> beseem", function() {deepEqual( Stem("beseems"), "beseem");});
test("beset -> beset", function() {deepEqual( Stem("beset"), "beset");});
test("beshrew -> beshrew", function() {deepEqual( Stem("beshrew"), "beshrew");});
test("beside -> besid", function() {deepEqual( Stem("beside"), "besid");});
test("besides -> besid", function() {deepEqual( Stem("besides"), "besid");});
test("besieg -> besieg", function() {deepEqual( Stem("besieg"), "besieg");});
test("besiege -> besieg", function() {deepEqual( Stem("besiege"), "besieg");});
test("besieged -> besieg", function() {deepEqual( Stem("besieged"), "besieg");});
test("beslubber -> beslubb", function() {deepEqual( Stem("beslubber"), "beslubb");});
test("besmear -> besmear", function() {deepEqual( Stem("besmear"), "besmear");});
test("besmeared -> besmear", function() {deepEqual( Stem("besmeared"), "besmear");});
test("besmirch -> besmirch", function() {deepEqual( Stem("besmirch"), "besmirch");});
test("besom -> besom", function() {deepEqual( Stem("besom"), "besom");});
test("besort -> besort", function() {deepEqual( Stem("besort"), "besort");});
test("besotted -> besot", function() {deepEqual( Stem("besotted"), "besot");});
test("besought -> besought", function() {deepEqual( Stem("besought"), "besought");});
test("bespake -> bespak", function() {deepEqual( Stem("bespake"), "bespak");});
test("bespeak -> bespeak", function() {deepEqual( Stem("bespeak"), "bespeak");});
test("bespice -> bespic", function() {deepEqual( Stem("bespice"), "bespic");});
test("bespoke -> bespok", function() {deepEqual( Stem("bespoke"), "bespok");});
test("bespotted -> bespot", function() {deepEqual( Stem("bespotted"), "bespot");});
test("bess -> bess", function() {deepEqual( Stem("bess"), "bess");});
test("bessy -> bessi", function() {deepEqual( Stem("bessy"), "bessi");});
test("best -> best", function() {deepEqual( Stem("best"), "best");});
test("bestained -> bestain", function() {deepEqual( Stem("bestained"), "bestain");});
test("bested -> best", function() {deepEqual( Stem("bested"), "best");});
test("bestial -> bestial", function() {deepEqual( Stem("bestial"), "bestial");});
test("bestir -> bestir", function() {deepEqual( Stem("bestir"), "bestir");});
test("bestirr -> bestirr", function() {deepEqual( Stem("bestirr"), "bestirr");});
test("bestow -> bestow", function() {deepEqual( Stem("bestow"), "bestow");});
test("bestowed -> bestow", function() {deepEqual( Stem("bestowed"), "bestow");});
test("bestowing -> bestow", function() {deepEqual( Stem("bestowing"), "bestow");});
test("bestows -> bestow", function() {deepEqual( Stem("bestows"), "bestow");});
test("bestraught -> bestraught", function() {deepEqual( Stem("bestraught"), "bestraught");});
test("bestrew -> bestrew", function() {deepEqual( Stem("bestrew"), "bestrew");});
test("bestrid -> bestrid", function() {deepEqual( Stem("bestrid"), "bestrid");});
test("bestride -> bestrid", function() {deepEqual( Stem("bestride"), "bestrid");});
test("bestrides -> bestrid", function() {deepEqual( Stem("bestrides"), "bestrid");});
test("bet -> bet", function() {deepEqual( Stem("bet"), "bet");});
test("betake -> betak", function() {deepEqual( Stem("betake"), "betak");});
test("bete -> bete", function() {deepEqual( Stem("bete"), "bete");});
test("beteem -> beteem", function() {deepEqual( Stem("beteem"), "beteem");});
test("bethesda -> bethesda", function() {deepEqual( Stem("bethesda"), "bethesda");});
test("bethink -> bethink", function() {deepEqual( Stem("bethink"), "bethink");});
test("bethought -> bethought", function() {deepEqual( Stem("bethought"), "bethought");});
test("bethrothed -> bethroth", function() {deepEqual( Stem("bethrothed"), "bethroth");});
test("bethump -> bethump", function() {deepEqual( Stem("bethump"), "bethump");});
test("betid -> betid", function() {deepEqual( Stem("betid"), "betid");});
test("betide -> betid", function() {deepEqual( Stem("betide"), "betid");});
test("betideth -> betideth", function() {deepEqual( Stem("betideth"), "betideth");});
test("betime -> betim", function() {deepEqual( Stem("betime"), "betim");});
test("betimes -> betim", function() {deepEqual( Stem("betimes"), "betim");});
test("betoken -> betoken", function() {deepEqual( Stem("betoken"), "betoken");});
test("betokened -> betoken", function() {deepEqual( Stem("betokened"), "betoken");});
test("betook -> betook", function() {deepEqual( Stem("betook"), "betook");});
test("betossed -> betoss", function() {deepEqual( Stem("betossed"), "betoss");});
test("betray -> betrai", function() {deepEqual( Stem("betray"), "betrai");});
test("betrayed -> betrai", function() {deepEqual( Stem("betrayed"), "betrai");});
test("betraying -> betrai", function() {deepEqual( Stem("betraying"), "betrai");});
test("betrays -> betrai", function() {deepEqual( Stem("betrays"), "betrai");});
test("betrims -> betrim", function() {deepEqual( Stem("betrims"), "betrim");});
test("betroth -> betroth", function() {deepEqual( Stem("betroth"), "betroth");});
test("betrothed -> betroth", function() {deepEqual( Stem("betrothed"), "betroth");});
test("betroths -> betroth", function() {deepEqual( Stem("betroths"), "betroth");});
test("bets -> bet", function() {deepEqual( Stem("bets"), "bet");});
test("betsy -> betsi", function() {deepEqual( Stem("betsy"), "betsi");});
test("bett -> bett", function() {deepEqual( Stem("bett"), "bett");});
test("betted -> bet", function() {deepEqual( Stem("betted"), "bet");});
test("better -> better", function() {deepEqual( Stem("better"), "better");});
test("bettered -> better", function() {deepEqual( Stem("bettered"), "better");});
test("bettering -> better", function() {deepEqual( Stem("bettering"), "better");});
test("betters -> better", function() {deepEqual( Stem("betters"), "better");});
test("betther -> betther", function() {deepEqual( Stem("betther"), "betther");});
test("betting -> bet", function() {deepEqual( Stem("betting"), "bet");});
test("bettre -> bettr", function() {deepEqual( Stem("bettre"), "bettr");});
test("betty -> betti", function() {deepEqual( Stem("betty"), "betti");});
test("between -> between", function() {deepEqual( Stem("between"), "between");});
test("betwigst -> betwigst", function() {deepEqual( Stem("betwigst"), "betwigst");});
test("betwixt -> betwixt", function() {deepEqual( Stem("betwixt"), "betwixt");});
test("bevel -> bevel", function() {deepEqual( Stem("bevel"), "bevel");});
test("beverage -> beverag", function() {deepEqual( Stem("beverage"), "beverag");});
test("bevis -> bevi", function() {deepEqual( Stem("bevis"), "bevi");});
test("bevy -> bevi", function() {deepEqual( Stem("bevy"), "bevi");});
test("bewail -> bewail", function() {deepEqual( Stem("bewail"), "bewail");});
test("bewailed -> bewail", function() {deepEqual( Stem("bewailed"), "bewail");});
test("bewailing -> bewail", function() {deepEqual( Stem("bewailing"), "bewail");});
test("bewails -> bewail", function() {deepEqual( Stem("bewails"), "bewail");});
test("beware -> bewar", function() {deepEqual( Stem("beware"), "bewar");});
test("bewasted -> bewast", function() {deepEqual( Stem("bewasted"), "bewast");});
test("beweep -> beweep", function() {deepEqual( Stem("beweep"), "beweep");});
test("bewept -> bewept", function() {deepEqual( Stem("bewept"), "bewept");});
test("bewet -> bewet", function() {deepEqual( Stem("bewet"), "bewet");});
test("bewhored -> bewhor", function() {deepEqual( Stem("bewhored"), "bewhor");});
test("bewidged -> bewidg", function() {deepEqual( Stem("bewidged"), "bewidg");});
test("bewildered -> bewild", function() {deepEqual( Stem("bewildered"), "bewild");});
test("bewildering -> bewild", function() {deepEqual( Stem("bewildering"), "bewild");});
test("bewilderment -> bewilder", function() {deepEqual( Stem("bewilderment"), "bewilder");});
test("bewitch -> bewitch", function() {deepEqual( Stem("bewitch"), "bewitch");});
test("bewitched -> bewitch", function() {deepEqual( Stem("bewitched"), "bewitch");});
test("bewitchingly -> bewitchingli", function() {deepEqual( Stem("bewitchingly"), "bewitchingli");});
test("bewitchment -> bewitch", function() {deepEqual( Stem("bewitchment"), "bewitch");});
test("bewray -> bewrai", function() {deepEqual( Stem("bewray"), "bewrai");});
test("bey -> bei", function() {deepEqual( Stem("bey"), "bei");});
test("beyond -> beyond", function() {deepEqual( Stem("beyond"), "beyond");});
test("bezonian -> bezonian", function() {deepEqual( Stem("bezonian"), "bezonian");});
test("bezonians -> bezonian", function() {deepEqual( Stem("bezonians"), "bezonian");});
test("bianca -> bianca", function() {deepEqual( Stem("bianca"), "bianca");});
test("bianco -> bianco", function() {deepEqual( Stem("bianco"), "bianco");});
test("bias -> bia", function() {deepEqual( Stem("bias"), "bia");});
test("bibble -> bibbl", function() {deepEqual( Stem("bibble"), "bibbl");});
test("bible -> bibl", function() {deepEqual( Stem("bible"), "bibl");});
test("bicetre -> bicetr", function() {deepEqual( Stem("bicetre"), "bicetr");});
test("bickering -> bicker", function() {deepEqual( Stem("bickering"), "bicker");});
test("bickerings -> bicker", function() {deepEqual( Stem("bickerings"), "bicker");});
test("bid -> bid", function() {deepEqual( Stem("bid"), "bid");});
test("bidden -> bidden", function() {deepEqual( Stem("bidden"), "bidden");});
test("bidding -> bid", function() {deepEqual( Stem("bidding"), "bid");});
test("biddings -> bid", function() {deepEqual( Stem("biddings"), "bid");});
test("biddy -> biddi", function() {deepEqual( Stem("biddy"), "biddi");});
test("bide -> bide", function() {deepEqual( Stem("bide"), "bide");});
test("bides -> bide", function() {deepEqual( Stem("bides"), "bide");});
test("biding -> bide", function() {deepEqual( Stem("biding"), "bide");});
test("bids -> bid", function() {deepEqual( Stem("bids"), "bid");});
test("bien -> bien", function() {deepEqual( Stem("bien"), "bien");});
test("bier -> bier", function() {deepEqual( Stem("bier"), "bier");});
test("bierstadt -> bierstadt", function() {deepEqual( Stem("bierstadt"), "bierstadt");});
test("bifold -> bifold", function() {deepEqual( Stem("bifold"), "bifold");});
test("big -> big", function() {deepEqual( Stem("big"), "big");});
test("bigamy -> bigami", function() {deepEqual( Stem("bigamy"), "bigami");});
test("biggen -> biggen", function() {deepEqual( Stem("biggen"), "biggen");});
test("bigger -> bigger", function() {deepEqual( Stem("bigger"), "bigger");});
test("biglietto -> biglietto", function() {deepEqual( Stem("biglietto"), "biglietto");});
test("bigness -> big", function() {deepEqual( Stem("bigness"), "big");});
test("bigot -> bigot", function() {deepEqual( Stem("bigot"), "bigot");});
test("bigoted -> bigot", function() {deepEqual( Stem("bigoted"), "bigot");});
test("bijou -> bijou", function() {deepEqual( Stem("bijou"), "bijou");});
test("bilberry -> bilberri", function() {deepEqual( Stem("bilberry"), "bilberri");});
test("bilbo -> bilbo", function() {deepEqual( Stem("bilbo"), "bilbo");});
test("bilboes -> bilbo", function() {deepEqual( Stem("bilboes"), "bilbo");});
test("bilbow -> bilbow", function() {deepEqual( Stem("bilbow"), "bilbow");});
test("bilious -> biliou", function() {deepEqual( Stem("bilious"), "biliou");});
test("bill -> bill", function() {deepEqual( Stem("bill"), "bill");});
test("billet -> billet", function() {deepEqual( Stem("billet"), "billet");});
test("billeted -> billet", function() {deepEqual( Stem("billeted"), "billet");});
test("billets -> billet", function() {deepEqual( Stem("billets"), "billet");});
test("billiard -> billiard", function() {deepEqual( Stem("billiard"), "billiard");});
test("billiards -> billiard", function() {deepEqual( Stem("billiards"), "billiard");});
test("billing -> bill", function() {deepEqual( Stem("billing"), "bill");});
test("billingsgate -> billingsg", function() {deepEqual( Stem("billingsgate"), "billingsg");});
test("billington -> billington", function() {deepEqual( Stem("billington"), "billington");});
test("billow -> billow", function() {deepEqual( Stem("billow"), "billow");});
test("billows -> billow", function() {deepEqual( Stem("billows"), "billow");});
test("bills -> bill", function() {deepEqual( Stem("bills"), "bill");});
test("bin -> bin", function() {deepEqual( Stem("bin"), "bin");});
test("bind -> bind", function() {deepEqual( Stem("bind"), "bind");});
test("bindeth -> bindeth", function() {deepEqual( Stem("bindeth"), "bindeth");});
test("binding -> bind", function() {deepEqual( Stem("binding"), "bind");});
test("bindings -> bind", function() {deepEqual( Stem("bindings"), "bind");});
test("binds -> bind", function() {deepEqual( Stem("binds"), "bind");});
test("binkie -> binki", function() {deepEqual( Stem("binkie"), "binki");});
test("binkies -> binki", function() {deepEqual( Stem("binkies"), "binki");});
test("binnacle -> binnacl", function() {deepEqual( Stem("binnacle"), "binnacl");});
test("binny -> binni", function() {deepEqual( Stem("binny"), "binni");});
test("biographical -> biograph", function() {deepEqual( Stem("biographical"), "biograph");});
test("biography -> biographi", function() {deepEqual( Stem("biography"), "biographi");});
test("biological -> biolog", function() {deepEqual( Stem("biological"), "biolog");});
test("biologically -> biolog", function() {deepEqual( Stem("biologically"), "biolog");});
test("biologies -> biologi", function() {deepEqual( Stem("biologies"), "biologi");});
test("biology -> biologi", function() {deepEqual( Stem("biology"), "biologi");});
test("biondello -> biondello", function() {deepEqual( Stem("biondello"), "biondello");});
test("birch -> birch", function() {deepEqual( Stem("birch"), "birch");});
test("birched -> birch", function() {deepEqual( Stem("birched"), "birch");});
test("bird -> bird", function() {deepEqual( Stem("bird"), "bird");});
test("birding -> bird", function() {deepEqual( Stem("birding"), "bird");});
test("birdlime -> birdlim", function() {deepEqual( Stem("birdlime"), "birdlim");});
test("birds -> bird", function() {deepEqual( Stem("birds"), "bird");});
test("birnam -> birnam", function() {deepEqual( Stem("birnam"), "birnam");});
test("birth -> birth", function() {deepEqual( Stem("birth"), "birth");});
test("birthday -> birthdai", function() {deepEqual( Stem("birthday"), "birthdai");});
test("birthdays -> birthdai", function() {deepEqual( Stem("birthdays"), "birthdai");});
test("birthdom -> birthdom", function() {deepEqual( Stem("birthdom"), "birthdom");});
test("birthplace -> birthplac", function() {deepEqual( Stem("birthplace"), "birthplac");});
test("birthright -> birthright", function() {deepEqual( Stem("birthright"), "birthright");});
test("birthrights -> birthright", function() {deepEqual( Stem("birthrights"), "birthright");});
test("births -> birth", function() {deepEqual( Stem("births"), "birth");});
test("bis -> bi", function() {deepEqual( Stem("bis"), "bi");});
test("biscay -> biscai", function() {deepEqual( Stem("biscay"), "biscai");});
test("biscuit -> biscuit", function() {deepEqual( Stem("biscuit"), "biscuit");});
test("biscuits -> biscuit", function() {deepEqual( Stem("biscuits"), "biscuit");});
test("bishop -> bishop", function() {deepEqual( Stem("bishop"), "bishop");});
test("bishopess -> bishopess", function() {deepEqual( Stem("bishopess"), "bishopess");});
test("bishopric -> bishopr", function() {deepEqual( Stem("bishopric"), "bishopr");});
test("bishops -> bishop", function() {deepEqual( Stem("bishops"), "bishop");});
test("bisson -> bisson", function() {deepEqual( Stem("bisson"), "bisson");});
test("bit -> bit", function() {deepEqual( Stem("bit"), "bit");});
test("bitch -> bitch", function() {deepEqual( Stem("bitch"), "bitch");});
test("bite -> bite", function() {deepEqual( Stem("bite"), "bite");});
test("biter -> biter", function() {deepEqual( Stem("biter"), "biter");});
test("bites -> bite", function() {deepEqual( Stem("bites"), "bite");});
test("biting -> bite", function() {deepEqual( Stem("biting"), "bite");});
test("bits -> bit", function() {deepEqual( Stem("bits"), "bit");});
test("bitt -> bitt", function() {deepEqual( Stem("bitt"), "bitt");});
test("bitten -> bitten", function() {deepEqual( Stem("bitten"), "bitten");});
test("bitter -> bitter", function() {deepEqual( Stem("bitter"), "bitter");});
test("bitterest -> bitterest", function() {deepEqual( Stem("bitterest"), "bitterest");});
test("bitterly -> bitterli", function() {deepEqual( Stem("bitterly"), "bitterli");});
test("bitterness -> bitter", function() {deepEqual( Stem("bitterness"), "bitter");});
test("bittiful -> bitti", function() {deepEqual( Stem("bittiful"), "bitti");});
test("bivouac -> bivouac", function() {deepEqual( Stem("bivouac"), "bivouac");});
test("bivouacked -> bivouack", function() {deepEqual( Stem("bivouacked"), "bivouack");});
test("bivouacking -> bivouack", function() {deepEqual( Stem("bivouacking"), "bivouack");});
test("blab -> blab", function() {deepEqual( Stem("blab"), "blab");});
test("blabb -> blabb", function() {deepEqual( Stem("blabb"), "blabb");});
test("blabbing -> blab", function() {deepEqual( Stem("blabbing"), "blab");});
test("blabs -> blab", function() {deepEqual( Stem("blabs"), "blab");});
test("black -> black", function() {deepEqual( Stem("black"), "black");});
test("blackamoor -> blackamoor", function() {deepEqual( Stem("blackamoor"), "blackamoor");});
test("blackamoors -> blackamoor", function() {deepEqual( Stem("blackamoors"), "blackamoor");});
test("blackball -> blackbal", function() {deepEqual( Stem("blackball"), "blackbal");});
test("blackberries -> blackberri", function() {deepEqual( Stem("blackberries"), "blackberri");});
test("blackberry -> blackberri", function() {deepEqual( Stem("blackberry"), "blackberri");});
test("blackbrook -> blackbrook", function() {deepEqual( Stem("blackbrook"), "blackbrook");});
test("blackbrooks -> blackbrook", function() {deepEqual( Stem("blackbrooks"), "blackbrook");});
test("blacked -> black", function() {deepEqual( Stem("blacked"), "black");});
test("blackened -> blacken", function() {deepEqual( Stem("blackened"), "blacken");});
test("blacker -> blacker", function() {deepEqual( Stem("blacker"), "blacker");});
test("blackest -> blackest", function() {deepEqual( Stem("blackest"), "blackest");});
test("blackfriars -> blackfriar", function() {deepEqual( Stem("blackfriars"), "blackfriar");});
test("blackguard -> blackguard", function() {deepEqual( Stem("blackguard"), "blackguard");});
test("blackheath -> blackheath", function() {deepEqual( Stem("blackheath"), "blackheath");});
test("blacking -> black", function() {deepEqual( Stem("blacking"), "black");});
test("blackleg -> blackleg", function() {deepEqual( Stem("blackleg"), "blackleg");});
test("blackmere -> blackmer", function() {deepEqual( Stem("blackmere"), "blackmer");});
test("blackmore -> blackmor", function() {deepEqual( Stem("blackmore"), "blackmor");});
test("blackness -> black", function() {deepEqual( Stem("blackness"), "black");});
test("blacks -> black", function() {deepEqual( Stem("blacks"), "black");});
test("blacksmith -> blacksmith", function() {deepEqual( Stem("blacksmith"), "blacksmith");});
test("blackstone -> blackston", function() {deepEqual( Stem("blackstone"), "blackston");});
test("bladder -> bladder", function() {deepEqual( Stem("bladder"), "bladder");});
test("bladders -> bladder", function() {deepEqual( Stem("bladders"), "bladder");});
test("blade -> blade", function() {deepEqual( Stem("blade"), "blade");});
test("bladed -> blade", function() {deepEqual( Stem("bladed"), "blade");});
test("blades -> blade", function() {deepEqual( Stem("blades"), "blade");});
test("blains -> blain", function() {deepEqual( Stem("blains"), "blain");});
test("blair -> blair", function() {deepEqual( Stem("blair"), "blair");});
test("blam -> blam", function() {deepEqual( Stem("blam"), "blam");});
test("blame -> blame", function() {deepEqual( Stem("blame"), "blame");});
test("blamed -> blame", function() {deepEqual( Stem("blamed"), "blame");});
test("blameful -> blame", function() {deepEqual( Stem("blameful"), "blame");});
test("blameless -> blameless", function() {deepEqual( Stem("blameless"), "blameless");});
test("blames -> blame", function() {deepEqual( Stem("blames"), "blame");});
test("blanc -> blanc", function() {deepEqual( Stem("blanc"), "blanc");});
test("blanca -> blanca", function() {deepEqual( Stem("blanca"), "blanca");});
test("blanch -> blanch", function() {deepEqual( Stem("blanch"), "blanch");});
test("blanche -> blanch", function() {deepEqual( Stem("blanche"), "blanch");});
test("bland -> bland", function() {deepEqual( Stem("bland"), "bland");});
test("blandest -> blandest", function() {deepEqual( Stem("blandest"), "blandest");});
test("blandly -> blandli", function() {deepEqual( Stem("blandly"), "blandli");});
test("blandness -> bland", function() {deepEqual( Stem("blandness"), "bland");});
test("blank -> blank", function() {deepEqual( Stem("blank"), "blank");});
test("blanket -> blanket", function() {deepEqual( Stem("blanket"), "blanket");});
test("blanks -> blank", function() {deepEqual( Stem("blanks"), "blank");});
test("blase -> blase", function() {deepEqual( Stem("blase"), "blase");});
test("blaspheme -> blasphem", function() {deepEqual( Stem("blaspheme"), "blasphem");});
test("blaspheming -> blasphem", function() {deepEqual( Stem("blaspheming"), "blasphem");});
test("blasphemous -> blasphem", function() {deepEqual( Stem("blasphemous"), "blasphem");});
test("blasphemy -> blasphemi", function() {deepEqual( Stem("blasphemy"), "blasphemi");});
test("blast -> blast", function() {deepEqual( Stem("blast"), "blast");});
test("blasted -> blast", function() {deepEqual( Stem("blasted"), "blast");});
test("blasting -> blast", function() {deepEqual( Stem("blasting"), "blast");});
test("blastments -> blastment", function() {deepEqual( Stem("blastments"), "blastment");});
test("blasts -> blast", function() {deepEqual( Stem("blasts"), "blast");});
test("blatherwick -> blatherwick", function() {deepEqual( Stem("blatherwick"), "blatherwick");});
test("blaz -> blaz", function() {deepEqual( Stem("blaz"), "blaz");});
test("blaze -> blaze", function() {deepEqual( Stem("blaze"), "blaze");});
test("blazed -> blaze", function() {deepEqual( Stem("blazed"), "blaze");});
test("blazes -> blaze", function() {deepEqual( Stem("blazes"), "blaze");});
test("blazing -> blaze", function() {deepEqual( Stem("blazing"), "blaze");});
test("blazon -> blazon", function() {deepEqual( Stem("blazon"), "blazon");});
test("blazoned -> blazon", function() {deepEqual( Stem("blazoned"), "blazon");});
test("blazoning -> blazon", function() {deepEqual( Stem("blazoning"), "blazon");});
test("bleach -> bleach", function() {deepEqual( Stem("bleach"), "bleach");});
test("bleaching -> bleach", function() {deepEqual( Stem("bleaching"), "bleach");});
test("bleak -> bleak", function() {deepEqual( Stem("bleak"), "bleak");});
test("blear -> blear", function() {deepEqual( Stem("blear"), "blear");});
test("bleared -> blear", function() {deepEqual( Stem("bleared"), "blear");});
test("bleat -> bleat", function() {deepEqual( Stem("bleat"), "bleat");});
test("bleated -> bleat", function() {deepEqual( Stem("bleated"), "bleat");});
test("bleats -> bleat", function() {deepEqual( Stem("bleats"), "bleat");});
test("bled -> bled", function() {deepEqual( Stem("bled"), "bled");});
test("bleed -> bleed", function() {deepEqual( Stem("bleed"), "bleed");});
test("bleeders -> bleeder", function() {deepEqual( Stem("bleeders"), "bleeder");});
test("bleedest -> bleedest", function() {deepEqual( Stem("bleedest"), "bleedest");});
test("bleedeth -> bleedeth", function() {deepEqual( Stem("bleedeth"), "bleedeth");});
test("bleeding -> bleed", function() {deepEqual( Stem("bleeding"), "bleed");});
test("bleedn -> bleedn", function() {deepEqual( Stem("bleedn"), "bleedn");});
test("bleeds -> bleed", function() {deepEqual( Stem("bleeds"), "bleed");});
test("blemish -> blemish", function() {deepEqual( Stem("blemish"), "blemish");});
test("blemishes -> blemish", function() {deepEqual( Stem("blemishes"), "blemish");});
test("blench -> blench", function() {deepEqual( Stem("blench"), "blench");});
test("blenches -> blench", function() {deepEqual( Stem("blenches"), "blench");});
test("blend -> blend", function() {deepEqual( Stem("blend"), "blend");});
test("blended -> blend", function() {deepEqual( Stem("blended"), "blend");});
test("blenheim -> blenheim", function() {deepEqual( Stem("blenheim"), "blenheim");});
test("blenkinsop -> blenkinsop", function() {deepEqual( Stem("blenkinsop"), "blenkinsop");});
test("blent -> blent", function() {deepEqual( Stem("blent"), "blent");});
test("bless -> bless", function() {deepEqual( Stem("bless"), "bless");});
test("blessed -> bless", function() {deepEqual( Stem("blessed"), "bless");});
test("blessedly -> blessedli", function() {deepEqual( Stem("blessedly"), "blessedli");});
test("blessedness -> blessed", function() {deepEqual( Stem("blessedness"), "blessed");});
test("blesses -> bless", function() {deepEqual( Stem("blesses"), "bless");});
test("blesseth -> blesseth", function() {deepEqual( Stem("blesseth"), "blesseth");});
test("blessing -> bless", function() {deepEqual( Stem("blessing"), "bless");});
test("blessings -> bless", function() {deepEqual( Stem("blessings"), "bless");});
test("blest -> blest", function() {deepEqual( Stem("blest"), "blest");});
test("bleu -> bleu", function() {deepEqual( Stem("bleu"), "bleu");});
test("blew -> blew", function() {deepEqual( Stem("blew"), "blew");});
test("blighted -> blight", function() {deepEqual( Stem("blighted"), "blight");});
test("blind -> blind", function() {deepEqual( Stem("blind"), "blind");});
test("blinded -> blind", function() {deepEqual( Stem("blinded"), "blind");});
test("blindfold -> blindfold", function() {deepEqual( Stem("blindfold"), "blindfold");});
test("blinding -> blind", function() {deepEqual( Stem("blinding"), "blind");});
test("blindly -> blindli", function() {deepEqual( Stem("blindly"), "blindli");});
test("blindness -> blind", function() {deepEqual( Stem("blindness"), "blind");});
test("blinds -> blind", function() {deepEqual( Stem("blinds"), "blind");});
test("blink -> blink", function() {deepEqual( Stem("blink"), "blink");});
test("blinkey -> blinkei", function() {deepEqual( Stem("blinkey"), "blinkei");});
test("blinking -> blink", function() {deepEqual( Stem("blinking"), "blink");});
test("bliss -> bliss", function() {deepEqual( Stem("bliss"), "bliss");});
test("blissful -> bliss", function() {deepEqual( Stem("blissful"), "bliss");});
test("blist -> blist", function() {deepEqual( Stem("blist"), "blist");});
test("blister -> blister", function() {deepEqual( Stem("blister"), "blister");});
test("blisters -> blister", function() {deepEqual( Stem("blisters"), "blister");});
test("blithe -> blith", function() {deepEqual( Stem("blithe"), "blith");});
test("blithild -> blithild", function() {deepEqual( Stem("blithild"), "blithild");});
test("bloat -> bloat", function() {deepEqual( Stem("bloat"), "bloat");});
test("block -> block", function() {deepEqual( Stem("block"), "block");});
test("blocked -> block", function() {deepEqual( Stem("blocked"), "block");});
test("blockish -> blockish", function() {deepEqual( Stem("blockish"), "blockish");});
test("blocks -> block", function() {deepEqual( Stem("blocks"), "block");});
test("blois -> bloi", function() {deepEqual( Stem("blois"), "bloi");});
test("blond -> blond", function() {deepEqual( Stem("blond"), "blond");});
test("blonde -> blond", function() {deepEqual( Stem("blonde"), "blond");});
test("blondes -> blond", function() {deepEqual( Stem("blondes"), "blond");});
test("blood -> blood", function() {deepEqual( Stem("blood"), "blood");});
test("blooded -> blood", function() {deepEqual( Stem("blooded"), "blood");});
test("bloodhound -> bloodhound", function() {deepEqual( Stem("bloodhound"), "bloodhound");});
test("bloodhounds -> bloodhound", function() {deepEqual( Stem("bloodhounds"), "bloodhound");});
test("bloodied -> bloodi", function() {deepEqual( Stem("bloodied"), "bloodi");});
test("bloodier -> bloodier", function() {deepEqual( Stem("bloodier"), "bloodier");});
test("bloodiest -> bloodiest", function() {deepEqual( Stem("bloodiest"), "bloodiest");});
test("bloodily -> bloodili", function() {deepEqual( Stem("bloodily"), "bloodili");});
test("bloodless -> bloodless", function() {deepEqual( Stem("bloodless"), "bloodless");});
test("bloods -> blood", function() {deepEqual( Stem("bloods"), "blood");});
test("bloodshed -> bloodsh", function() {deepEqual( Stem("bloodshed"), "bloodsh");});
test("bloodshedding -> bloodshed", function() {deepEqual( Stem("bloodshedding"), "bloodshed");});
test("bloodshot -> bloodshot", function() {deepEqual( Stem("bloodshot"), "bloodshot");});
test("bloodstained -> bloodstain", function() {deepEqual( Stem("bloodstained"), "bloodstain");});
test("bloodthirsty -> bloodthirsti", function() {deepEqual( Stem("bloodthirsty"), "bloodthirsti");});
test("bloody -> bloodi", function() {deepEqual( Stem("bloody"), "bloodi");});
test("bloom -> bloom", function() {deepEqual( Stem("bloom"), "bloom");});
test("bloomed -> bloom", function() {deepEqual( Stem("bloomed"), "bloom");});
test("blooming -> bloom", function() {deepEqual( Stem("blooming"), "bloom");});
test("blooms -> bloom", function() {deepEqual( Stem("blooms"), "bloom");});
test("bloomsbury -> bloomsburi", function() {deepEqual( Stem("bloomsbury"), "bloomsburi");});
test("blossom -> blossom", function() {deepEqual( Stem("blossom"), "blossom");});
test("blossoming -> blossom", function() {deepEqual( Stem("blossoming"), "blossom");});
test("blossoms -> blossom", function() {deepEqual( Stem("blossoms"), "blossom");});
test("blot -> blot", function() {deepEqual( Stem("blot"), "blot");});
test("blots -> blot", function() {deepEqual( Stem("blots"), "blot");});
test("blotted -> blot", function() {deepEqual( Stem("blotted"), "blot");});
test("blotting -> blot", function() {deepEqual( Stem("blotting"), "blot");});
test("blount -> blount", function() {deepEqual( Stem("blount"), "blount");});
test("blow -> blow", function() {deepEqual( Stem("blow"), "blow");});
test("blowed -> blow", function() {deepEqual( Stem("blowed"), "blow");});
test("blowers -> blower", function() {deepEqual( Stem("blowers"), "blower");});
test("blowest -> blowest", function() {deepEqual( Stem("blowest"), "blowest");});
test("blowing -> blow", function() {deepEqual( Stem("blowing"), "blow");});
test("blowman -> blowman", function() {deepEqual( Stem("blowman"), "blowman");});
test("blown -> blown", function() {deepEqual( Stem("blown"), "blown");});
test("blows -> blow", function() {deepEqual( Stem("blows"), "blow");});
test("blowse -> blows", function() {deepEqual( Stem("blowse"), "blows");});
test("blubb -> blubb", function() {deepEqual( Stem("blubb"), "blubb");});
test("blubber -> blubber", function() {deepEqual( Stem("blubber"), "blubber");});
test("blubbered -> blubber", function() {deepEqual( Stem("blubbered"), "blubber");});
test("blubbering -> blubber", function() {deepEqual( Stem("blubbering"), "blubber");});
test("bluchers -> blucher", function() {deepEqual( Stem("bluchers"), "blucher");});
test("bluck -> bluck", function() {deepEqual( Stem("bluck"), "bluck");});
test("bludyer -> bludyer", function() {deepEqual( Stem("bludyer"), "bludyer");});
test("bludyers -> bludyer", function() {deepEqual( Stem("bludyers"), "bludyer");});
test("blue -> blue", function() {deepEqual( Stem("blue"), "blue");});
test("bluebeard -> bluebeard", function() {deepEqual( Stem("bluebeard"), "bluebeard");});
test("bluecaps -> bluecap", function() {deepEqual( Stem("bluecaps"), "bluecap");});
test("bluest -> bluest", function() {deepEqual( Stem("bluest"), "bluest");});
test("blundering -> blunder", function() {deepEqual( Stem("blundering"), "blunder");});
test("blunders -> blunder", function() {deepEqual( Stem("blunders"), "blunder");});
test("blunt -> blunt", function() {deepEqual( Stem("blunt"), "blunt");});
test("blunted -> blunt", function() {deepEqual( Stem("blunted"), "blunt");});
test("blunter -> blunter", function() {deepEqual( Stem("blunter"), "blunter");});
test("bluntest -> bluntest", function() {deepEqual( Stem("bluntest"), "bluntest");});
test("blunting -> blunt", function() {deepEqual( Stem("blunting"), "blunt");});
test("bluntly -> bluntli", function() {deepEqual( Stem("bluntly"), "bluntli");});
test("bluntness -> blunt", function() {deepEqual( Stem("bluntness"), "blunt");});
test("blunts -> blunt", function() {deepEqual( Stem("blunts"), "blunt");});
test("blur -> blur", function() {deepEqual( Stem("blur"), "blur");});
test("blurr -> blurr", function() {deepEqual( Stem("blurr"), "blurr");});
test("blurs -> blur", function() {deepEqual( Stem("blurs"), "blur");});
test("blurting -> blurt", function() {deepEqual( Stem("blurting"), "blurt");});
test("blush -> blush", function() {deepEqual( Stem("blush"), "blush");});
test("blushed -> blush", function() {deepEqual( Stem("blushed"), "blush");});
test("blushes -> blush", function() {deepEqual( Stem("blushes"), "blush");});
test("blushest -> blushest", function() {deepEqual( Stem("blushest"), "blushest");});
test("blushing -> blush", function() {deepEqual( Stem("blushing"), "blush");});
test("blust -> blust", function() {deepEqual( Stem("blust"), "blust");});
test("bluster -> bluster", function() {deepEqual( Stem("bluster"), "bluster");});
test("blusterer -> bluster", function() {deepEqual( Stem("blusterer"), "bluster");});
test("blustering -> bluster", function() {deepEqual( Stem("blustering"), "bluster");});
test("blusters -> bluster", function() {deepEqual( Stem("blusters"), "bluster");});
test("bo -> bo", function() {deepEqual( Stem("bo"), "bo");});
test("boar -> boar", function() {deepEqual( Stem("boar"), "boar");});
test("board -> board", function() {deepEqual( Stem("board"), "board");});
test("boarded -> board", function() {deepEqual( Stem("boarded"), "board");});
test("boarder -> boarder", function() {deepEqual( Stem("boarder"), "boarder");});
test("boarders -> boarder", function() {deepEqual( Stem("boarders"), "boarder");});
test("boarding -> board", function() {deepEqual( Stem("boarding"), "board");});
test("boards -> board", function() {deepEqual( Stem("boards"), "board");});
test("boarish -> boarish", function() {deepEqual( Stem("boarish"), "boarish");});
test("boars -> boar", function() {deepEqual( Stem("boars"), "boar");});
test("boast -> boast", function() {deepEqual( Stem("boast"), "boast");});
test("boasted -> boast", function() {deepEqual( Stem("boasted"), "boast");});
test("boastful -> boast", function() {deepEqual( Stem("boastful"), "boast");});
test("boasting -> boast", function() {deepEqual( Stem("boasting"), "boast");});
test("boasts -> boast", function() {deepEqual( Stem("boasts"), "boast");});
test("boat -> boat", function() {deepEqual( Stem("boat"), "boat");});
test("boats -> boat", function() {deepEqual( Stem("boats"), "boat");});
test("boatswain -> boatswain", function() {deepEqual( Stem("boatswain"), "boatswain");});
test("bob -> bob", function() {deepEqual( Stem("bob"), "bob");});
test("bobachy -> bobachi", function() {deepEqual( Stem("bobachy"), "bobachi");});
test("bobb -> bobb", function() {deepEqual( Stem("bobb"), "bobb");});
test("bobbing -> bob", function() {deepEqual( Stem("bobbing"), "bob");});
test("bobbins -> bobbin", function() {deepEqual( Stem("bobbins"), "bobbin");});
test("bobby -> bobbi", function() {deepEqual( Stem("bobby"), "bobbi");});
test("bobinot -> bobinot", function() {deepEqual( Stem("bobinot"), "bobinot");});
test("boblibindo -> boblibindo", function() {deepEqual( Stem("boblibindo"), "boblibindo");});
test("bobs -> bob", function() {deepEqual( Stem("bobs"), "bob");});
test("bobtail -> bobtail", function() {deepEqual( Stem("bobtail"), "bobtail");});
test("bocchus -> bocchu", function() {deepEqual( Stem("bocchus"), "bocchu");});
test("bode -> bode", function() {deepEqual( Stem("bode"), "bode");});
test("boded -> bode", function() {deepEqual( Stem("boded"), "bode");});
test("bodements -> bodement", function() {deepEqual( Stem("bodements"), "bodement");});
test("bodes -> bode", function() {deepEqual( Stem("bodes"), "bode");});
test("bodg -> bodg", function() {deepEqual( Stem("bodg"), "bodg");});
test("bodied -> bodi", function() {deepEqual( Stem("bodied"), "bodi");});
test("bodies -> bodi", function() {deepEqual( Stem("bodies"), "bodi");});
test("bodiless -> bodiless", function() {deepEqual( Stem("bodiless"), "bodiless");});
test("bodily -> bodili", function() {deepEqual( Stem("bodily"), "bodili");});
test("boding -> bode", function() {deepEqual( Stem("boding"), "bode");});
test("bodkin -> bodkin", function() {deepEqual( Stem("bodkin"), "bodkin");});
test("body -> bodi", function() {deepEqual( Stem("body"), "bodi");});
test("bodykins -> bodykin", function() {deepEqual( Stem("bodykins"), "bodykin");});
test("bog -> bog", function() {deepEqual( Stem("bog"), "bog");});
test("boggle -> boggl", function() {deepEqual( Stem("boggle"), "boggl");});
test("boggler -> boggler", function() {deepEqual( Stem("boggler"), "boggler");});
test("boggley -> bogglei", function() {deepEqual( Stem("boggley"), "bogglei");});
test("bogs -> bog", function() {deepEqual( Stem("bogs"), "bog");});
test("bohemia -> bohemia", function() {deepEqual( Stem("bohemia"), "bohemia");});
test("bohemian -> bohemian", function() {deepEqual( Stem("bohemian"), "bohemian");});
test("bohemians -> bohemian", function() {deepEqual( Stem("bohemians"), "bohemian");});
test("bohun -> bohun", function() {deepEqual( Stem("bohun"), "bohun");});
test("boil -> boil", function() {deepEqual( Stem("boil"), "boil");});
test("boiled -> boil", function() {deepEqual( Stem("boiled"), "boil");});
test("boiling -> boil", function() {deepEqual( Stem("boiling"), "boil");});
test("boils -> boil", function() {deepEqual( Stem("boils"), "boil");});
test("bois -> boi", function() {deepEqual( Stem("bois"), "boi");});
test("boist -> boist", function() {deepEqual( Stem("boist"), "boist");});
test("boisterous -> boister", function() {deepEqual( Stem("boisterous"), "boister");});
test("boisterously -> boister", function() {deepEqual( Stem("boisterously"), "boister");});
test("boisterousness -> boister", function() {deepEqual( Stem("boisterousness"), "boister");});
test("boitier -> boitier", function() {deepEqual( Stem("boitier"), "boitier");});
test("bokay -> bokai", function() {deepEqual( Stem("bokay"), "bokai");});
test("bold -> bold", function() {deepEqual( Stem("bold"), "bold");});
test("bolden -> bolden", function() {deepEqual( Stem("bolden"), "bolden");});
test("bolder -> bolder", function() {deepEqual( Stem("bolder"), "bolder");});
test("boldest -> boldest", function() {deepEqual( Stem("boldest"), "boldest");});
test("boldly -> boldli", function() {deepEqual( Stem("boldly"), "boldli");});
test("boldness -> bold", function() {deepEqual( Stem("boldness"), "bold");});
test("bolds -> bold", function() {deepEqual( Stem("bolds"), "bold");});
test("bolingbroke -> bolingbrok", function() {deepEqual( Stem("bolingbroke"), "bolingbrok");});
test("bolkum -> bolkum", function() {deepEqual( Stem("bolkum"), "bolkum");});
test("bolster -> bolster", function() {deepEqual( Stem("bolster"), "bolster");});
test("bolt -> bolt", function() {deepEqual( Stem("bolt"), "bolt");});
test("bolted -> bolt", function() {deepEqual( Stem("bolted"), "bolt");});
test("bolter -> bolter", function() {deepEqual( Stem("bolter"), "bolter");});
test("bolters -> bolter", function() {deepEqual( Stem("bolters"), "bolter");});
test("bolting -> bolt", function() {deepEqual( Stem("bolting"), "bolt");});
test("bolts -> bolt", function() {deepEqual( Stem("bolts"), "bolt");});
test("bolus -> bolu", function() {deepEqual( Stem("bolus"), "bolu");});
test("bombard -> bombard", function() {deepEqual( Stem("bombard"), "bombard");});
test("bombards -> bombard", function() {deepEqual( Stem("bombards"), "bombard");});
test("bombast -> bombast", function() {deepEqual( Stem("bombast"), "bombast");});
test("bombay -> bombai", function() {deepEqual( Stem("bombay"), "bombai");});
test("bon -> bon", function() {deepEqual( Stem("bon"), "bon");});
test("bona -> bona", function() {deepEqual( Stem("bona"), "bona");});
test("bonamy -> bonami", function() {deepEqual( Stem("bonamy"), "bonami");});
test("bonaparte -> bonapart", function() {deepEqual( Stem("bonaparte"), "bonapart");});
test("bonaparty -> bonaparti", function() {deepEqual( Stem("bonaparty"), "bonaparti");});
test("bond -> bond", function() {deepEqual( Stem("bond"), "bond");});
test("bondage -> bondag", function() {deepEqual( Stem("bondage"), "bondag");});
test("bonded -> bond", function() {deepEqual( Stem("bonded"), "bond");});
test("bondmaid -> bondmaid", function() {deepEqual( Stem("bondmaid"), "bondmaid");});
test("bondman -> bondman", function() {deepEqual( Stem("bondman"), "bondman");});
test("bondmen -> bondmen", function() {deepEqual( Stem("bondmen"), "bondmen");});
test("bonds -> bond", function() {deepEqual( Stem("bonds"), "bond");});
test("bondslave -> bondslav", function() {deepEqual( Stem("bondslave"), "bondslav");});
test("bone -> bone", function() {deepEqual( Stem("bone"), "bone");});
test("boned -> bone", function() {deepEqual( Stem("boned"), "bone");});
test("boneless -> boneless", function() {deepEqual( Stem("boneless"), "boneless");});
test("bones -> bone", function() {deepEqual( Stem("bones"), "bone");});
test("boney -> bonei", function() {deepEqual( Stem("boney"), "bonei");});
test("bonfire -> bonfir", function() {deepEqual( Stem("bonfire"), "bonfir");});
test("bonfires -> bonfir", function() {deepEqual( Stem("bonfires"), "bonfir");});
test("boniface -> bonifac", function() {deepEqual( Stem("boniface"), "bonifac");});
test("bonjour -> bonjour", function() {deepEqual( Stem("bonjour"), "bonjour");});
test("bonn -> bonn", function() {deepEqual( Stem("bonn"), "bonn");});
test("bonne -> bonn", function() {deepEqual( Stem("bonne"), "bonn");});
test("bonnet -> bonnet", function() {deepEqual( Stem("bonnet"), "bonnet");});
test("bonneted -> bonnet", function() {deepEqual( Stem("bonneted"), "bonnet");});
test("bonnets -> bonnet", function() {deepEqual( Stem("bonnets"), "bonnet");});
test("bonny -> bonni", function() {deepEqual( Stem("bonny"), "bonni");});
test("bonos -> bono", function() {deepEqual( Stem("bonos"), "bono");});
test("bonto -> bonto", function() {deepEqual( Stem("bonto"), "bonto");});
test("bonville -> bonvil", function() {deepEqual( Stem("bonville"), "bonvil");});
test("boo -> boo", function() {deepEqual( Stem("boo"), "boo");});
test("booby -> boobi", function() {deepEqual( Stem("booby"), "boobi");});
test("bood -> bood", function() {deepEqual( Stem("bood"), "bood");});
test("book -> book", function() {deepEqual( Stem("book"), "book");});
test("bookcases -> bookcas", function() {deepEqual( Stem("bookcases"), "bookcas");});
test("booked -> book", function() {deepEqual( Stem("booked"), "book");});
test("bookish -> bookish", function() {deepEqual( Stem("bookish"), "bookish");});
test("books -> book", function() {deepEqual( Stem("books"), "book");});
test("bookseller -> booksel", function() {deepEqual( Stem("bookseller"), "booksel");});
test("booky -> booki", function() {deepEqual( Stem("booky"), "booki");});
test("boompjes -> boompj", function() {deepEqual( Stem("boompjes"), "boompj");});
test("boon -> boon", function() {deepEqual( Stem("boon"), "boon");});
test("boons -> boon", function() {deepEqual( Stem("boons"), "boon");});
test("boor -> boor", function() {deepEqual( Stem("boor"), "boor");});
test("boorish -> boorish", function() {deepEqual( Stem("boorish"), "boorish");});
test("boors -> boor", function() {deepEqual( Stem("boors"), "boor");});
test("boot -> boot", function() {deepEqual( Stem("boot"), "boot");});
test("booted -> boot", function() {deepEqual( Stem("booted"), "boot");});
test("booterstown -> booterstown", function() {deepEqual( Stem("booterstown"), "booterstown");});
test("booth -> booth", function() {deepEqual( Stem("booth"), "booth");});
test("booths -> booth", function() {deepEqual( Stem("booths"), "booth");});
test("booties -> booti", function() {deepEqual( Stem("booties"), "booti");});
test("bootless -> bootless", function() {deepEqual( Stem("bootless"), "bootless");});
test("boots -> boot", function() {deepEqual( Stem("boots"), "boot");});
test("booty -> booti", function() {deepEqual( Stem("booty"), "booti");});
test("boozed -> booz", function() {deepEqual( Stem("boozed"), "booz");});
test("bor -> bor", function() {deepEqual( Stem("bor"), "bor");});
test("bora -> bora", function() {deepEqual( Stem("bora"), "bora");});
test("borachio -> borachio", function() {deepEqual( Stem("borachio"), "borachio");});
test("bordeaux -> bordeaux", function() {deepEqual( Stem("bordeaux"), "bordeaux");});
test("border -> border", function() {deepEqual( Stem("border"), "border");});
test("bordered -> border", function() {deepEqual( Stem("bordered"), "border");});
test("borderers -> border", function() {deepEqual( Stem("borderers"), "border");});
test("borders -> border", function() {deepEqual( Stem("borders"), "border");});
test("bore -> bore", function() {deepEqual( Stem("bore"), "bore");});
test("boreas -> borea", function() {deepEqual( Stem("boreas"), "borea");});
test("bored -> bore", function() {deepEqual( Stem("bored"), "bore");});
test("bores -> bore", function() {deepEqual( Stem("bores"), "bore");});
test("boring -> bore", function() {deepEqual( Stem("boring"), "bore");});
test("born -> born", function() {deepEqual( Stem("born"), "born");});
test("borne -> born", function() {deepEqual( Stem("borne"), "born");});
test("borodino -> borodino", function() {deepEqual( Stem("borodino"), "borodino");});
test("borough -> borough", function() {deepEqual( Stem("borough"), "borough");});
test("boroughs -> borough", function() {deepEqual( Stem("boroughs"), "borough");});
test("borrow -> borrow", function() {deepEqual( Stem("borrow"), "borrow");});
test("borrowed -> borrow", function() {deepEqual( Stem("borrowed"), "borrow");});
test("borrower -> borrow", function() {deepEqual( Stem("borrower"), "borrow");});
test("borrowing -> borrow", function() {deepEqual( Stem("borrowing"), "borrow");});
test("borrows -> borrow", function() {deepEqual( Stem("borrows"), "borrow");});
test("bosko -> bosko", function() {deepEqual( Stem("bosko"), "bosko");});
test("boskos -> bosko", function() {deepEqual( Stem("boskos"), "bosko");});
test("bosky -> boski", function() {deepEqual( Stem("bosky"), "boski");});
test("bosom -> bosom", function() {deepEqual( Stem("bosom"), "bosom");});
test("bosoms -> bosom", function() {deepEqual( Stem("bosoms"), "bosom");});
test("boson -> boson", function() {deepEqual( Stem("boson"), "boson");});
test("boss -> boss", function() {deepEqual( Stem("boss"), "boss");});
test("bosworth -> bosworth", function() {deepEqual( Stem("bosworth"), "bosworth");});
test("botany -> botani", function() {deepEqual( Stem("botany"), "botani");});
test("botch -> botch", function() {deepEqual( Stem("botch"), "botch");});
test("botcher -> botcher", function() {deepEqual( Stem("botcher"), "botcher");});
test("botches -> botch", function() {deepEqual( Stem("botches"), "botch");});
test("botchy -> botchi", function() {deepEqual( Stem("botchy"), "botchi");});
test("both -> both", function() {deepEqual( Stem("both"), "both");});
test("bother -> bother", function() {deepEqual( Stem("bother"), "bother");});
test("botley -> botlei", function() {deepEqual( Stem("botley"), "botlei");});
test("bots -> bot", function() {deepEqual( Stem("bots"), "bot");});
test("bottle -> bottl", function() {deepEqual( Stem("bottle"), "bottl");});
test("bottled -> bottl", function() {deepEqual( Stem("bottled"), "bottl");});
test("bottles -> bottl", function() {deepEqual( Stem("bottles"), "bottl");});
test("bottom -> bottom", function() {deepEqual( Stem("bottom"), "bottom");});
test("bottomless -> bottomless", function() {deepEqual( Stem("bottomless"), "bottomless");});
test("bottoms -> bottom", function() {deepEqual( Stem("bottoms"), "bottom");});
test("bouciqualt -> bouciqualt", function() {deepEqual( Stem("bouciqualt"), "bouciqualt");});
test("bouge -> boug", function() {deepEqual( Stem("bouge"), "boug");});
test("bough -> bough", function() {deepEqual( Stem("bough"), "bough");});
test("boughs -> bough", function() {deepEqual( Stem("boughs"), "bough");});
test("bought -> bought", function() {deepEqual( Stem("bought"), "bought");});
test("boule -> boul", function() {deepEqual( Stem("boule"), "boul");});
test("boulevard -> boulevard", function() {deepEqual( Stem("boulevard"), "boulevard");});
test("boulevards -> boulevard", function() {deepEqual( Stem("boulevards"), "boulevard");});
test("boulogne -> boulogn", function() {deepEqual( Stem("boulogne"), "boulogn");});
test("boulter -> boulter", function() {deepEqual( Stem("boulter"), "boulter");});
test("bounce -> bounc", function() {deepEqual( Stem("bounce"), "bounc");});
test("bounced -> bounc", function() {deepEqual( Stem("bounced"), "bounc");});
test("bouncing -> bounc", function() {deepEqual( Stem("bouncing"), "bounc");});
test("bound -> bound", function() {deepEqual( Stem("bound"), "bound");});
test("boundary -> boundari", function() {deepEqual( Stem("boundary"), "boundari");});
test("bounded -> bound", function() {deepEqual( Stem("bounded"), "bound");});
test("bounden -> bounden", function() {deepEqual( Stem("bounden"), "bounden");});
test("boundeth -> boundeth", function() {deepEqual( Stem("boundeth"), "boundeth");});
test("bounding -> bound", function() {deepEqual( Stem("bounding"), "bound");});
test("boundless -> boundless", function() {deepEqual( Stem("boundless"), "boundless");});
test("bounds -> bound", function() {deepEqual( Stem("bounds"), "bound");});
test("bounteous -> bounteou", function() {deepEqual( Stem("bounteous"), "bounteou");});
test("bounteously -> bounteous", function() {deepEqual( Stem("bounteously"), "bounteous");});
test("bounties -> bounti", function() {deepEqual( Stem("bounties"), "bounti");});
test("bountiful -> bounti", function() {deepEqual( Stem("bountiful"), "bounti");});
test("bountifully -> bountifulli", function() {deepEqual( Stem("bountifully"), "bountifulli");});
test("bounty -> bounti", function() {deepEqual( Stem("bounty"), "bounti");});
test("bouquet -> bouquet", function() {deepEqual( Stem("bouquet"), "bouquet");});
test("bouquets -> bouquet", function() {deepEqual( Stem("bouquets"), "bouquet");});
test("bourbier -> bourbier", function() {deepEqual( Stem("bourbier"), "bourbier");});
test("bourbon -> bourbon", function() {deepEqual( Stem("bourbon"), "bourbon");});
test("bourbons -> bourbon", function() {deepEqual( Stem("bourbons"), "bourbon");});
test("bourchier -> bourchier", function() {deepEqual( Stem("bourchier"), "bourchier");});
test("bourdeaux -> bourdeaux", function() {deepEqual( Stem("bourdeaux"), "bourdeaux");});
test("bourgeois -> bourgeoi", function() {deepEqual( Stem("bourgeois"), "bourgeoi");});
test("bourgeoisie -> bourgeoisi", function() {deepEqual( Stem("bourgeoisie"), "bourgeoisi");});
test("bourn -> bourn", function() {deepEqual( Stem("bourn"), "bourn");});
test("bout -> bout", function() {deepEqual( Stem("bout"), "bout");});
test("bouts -> bout", function() {deepEqual( Stem("bouts"), "bout");});
test("bove -> bove", function() {deepEqual( Stem("bove"), "bove");});
test("bow -> bow", function() {deepEqual( Stem("bow"), "bow");});
test("bowcase -> bowcas", function() {deepEqual( Stem("bowcase"), "bowcas");});
test("bowed -> bow", function() {deepEqual( Stem("bowed"), "bow");});
test("bowels -> bowel", function() {deepEqual( Stem("bowels"), "bowel");});
test("bower -> bower", function() {deepEqual( Stem("bower"), "bower");});
test("bowing -> bow", function() {deepEqual( Stem("bowing"), "bow");});
test("bowl -> bowl", function() {deepEqual( Stem("bowl"), "bowl");});
test("bowler -> bowler", function() {deepEqual( Stem("bowler"), "bowler");});
test("bowling -> bowl", function() {deepEqual( Stem("bowling"), "bowl");});
test("bowls -> bowl", function() {deepEqual( Stem("bowls"), "bowl");});
test("bows -> bow", function() {deepEqual( Stem("bows"), "bow");});
test("bowsprit -> bowsprit", function() {deepEqual( Stem("bowsprit"), "bowsprit");});
test("bowstring -> bowstr", function() {deepEqual( Stem("bowstring"), "bowstr");});
test("box -> box", function() {deepEqual( Stem("box"), "box");});
test("boxed -> box", function() {deepEqual( Stem("boxed"), "box");});
test("boxers -> boxer", function() {deepEqual( Stem("boxers"), "boxer");});
test("boxes -> box", function() {deepEqual( Stem("boxes"), "box");});
test("boxing -> box", function() {deepEqual( Stem("boxing"), "box");});
test("boy -> boi", function() {deepEqual( Stem("boy"), "boi");});
test("boyet -> boyet", function() {deepEqual( Stem("boyet"), "boyet");});
test("boyhood -> boyhood", function() {deepEqual( Stem("boyhood"), "boyhood");});
test("boyish -> boyish", function() {deepEqual( Stem("boyish"), "boyish");});
test("boys -> boi", function() {deepEqual( Stem("boys"), "boi");});
test("brabant -> brabant", function() {deepEqual( Stem("brabant"), "brabant");});
test("brabantio -> brabantio", function() {deepEqual( Stem("brabantio"), "brabantio");});
test("brabble -> brabbl", function() {deepEqual( Stem("brabble"), "brabbl");});
test("brabbler -> brabbler", function() {deepEqual( Stem("brabbler"), "brabbler");});
test("brac -> brac", function() {deepEqual( Stem("brac"), "brac");});
test("brace -> brace", function() {deepEqual( Stem("brace"), "brace");});
test("bracelet -> bracelet", function() {deepEqual( Stem("bracelet"), "bracelet");});
test("bracelets -> bracelet", function() {deepEqual( Stem("bracelets"), "bracelet");});
test("braces -> brace", function() {deepEqual( Stem("braces"), "brace");});
test("brach -> brach", function() {deepEqual( Stem("brach"), "brach");});
test("bracy -> braci", function() {deepEqual( Stem("bracy"), "braci");});
test("brag -> brag", function() {deepEqual( Stem("brag"), "brag");});
test("bragg -> bragg", function() {deepEqual( Stem("bragg"), "bragg");});
test("braggadocio -> braggadocio", function() {deepEqual( Stem("braggadocio"), "braggadocio");});
test("braggardism -> braggard", function() {deepEqual( Stem("braggardism"), "braggard");});
test("braggards -> braggard", function() {deepEqual( Stem("braggards"), "braggard");});
test("braggart -> braggart", function() {deepEqual( Stem("braggart"), "braggart");});
test("braggarts -> braggart", function() {deepEqual( Stem("braggarts"), "braggart");});
test("bragged -> brag", function() {deepEqual( Stem("bragged"), "brag");});
test("bragging -> brag", function() {deepEqual( Stem("bragging"), "brag");});
test("bragless -> bragless", function() {deepEqual( Stem("bragless"), "bragless");});
test("brags -> brag", function() {deepEqual( Stem("brags"), "brag");});
test("braid -> braid", function() {deepEqual( Stem("braid"), "braid");});
test("braided -> braid", function() {deepEqual( Stem("braided"), "braid");});
test("brain -> brain", function() {deepEqual( Stem("brain"), "brain");});
test("brained -> brain", function() {deepEqual( Stem("brained"), "brain");});
test("brainford -> brainford", function() {deepEqual( Stem("brainford"), "brainford");});
test("brainish -> brainish", function() {deepEqual( Stem("brainish"), "brainish");});
test("brainless -> brainless", function() {deepEqual( Stem("brainless"), "brainless");});
test("brains -> brain", function() {deepEqual( Stem("brains"), "brain");});
test("brainsick -> brainsick", function() {deepEqual( Stem("brainsick"), "brainsick");});
test("brainsickly -> brainsickli", function() {deepEqual( Stem("brainsickly"), "brainsickli");});
test("brake -> brake", function() {deepEqual( Stem("brake"), "brake");});
test("brakenbury -> brakenburi", function() {deepEqual( Stem("brakenbury"), "brakenburi");});
test("brakes -> brake", function() {deepEqual( Stem("brakes"), "brake");});
test("bramah -> bramah", function() {deepEqual( Stem("bramah"), "bramah");});
test("brambles -> brambl", function() {deepEqual( Stem("brambles"), "brambl");});
test("bran -> bran", function() {deepEqual( Stem("bran"), "bran");});
test("branch -> branch", function() {deepEqual( Stem("branch"), "branch");});
test("branches -> branch", function() {deepEqual( Stem("branches"), "branch");});
test("branchless -> branchless", function() {deepEqual( Stem("branchless"), "branchless");});
test("brand -> brand", function() {deepEqual( Stem("brand"), "brand");});
test("branded -> brand", function() {deepEqual( Stem("branded"), "brand");});
test("brandish -> brandish", function() {deepEqual( Stem("brandish"), "brandish");});
test("brandon -> brandon", function() {deepEqual( Stem("brandon"), "brandon");});
test("brands -> brand", function() {deepEqual( Stem("brands"), "brand");});
test("brandy -> brandi", function() {deepEqual( Stem("brandy"), "brandi");});
test("bras -> bra", function() {deepEqual( Stem("bras"), "bra");});
test("brass -> brass", function() {deepEqual( Stem("brass"), "brass");});
test("brassy -> brassi", function() {deepEqual( Stem("brassy"), "brassi");});
test("brat -> brat", function() {deepEqual( Stem("brat"), "brat");});
test("braten -> braten", function() {deepEqual( Stem("braten"), "braten");});
test("brats -> brat", function() {deepEqual( Stem("brats"), "brat");});
test("brav -> brav", function() {deepEqual( Stem("brav"), "brav");});
test("brava -> brava", function() {deepEqual( Stem("brava"), "brava");});
test("brave -> brave", function() {deepEqual( Stem("brave"), "brave");});
test("braved -> brave", function() {deepEqual( Stem("braved"), "brave");});
test("bravely -> brave", function() {deepEqual( Stem("bravely"), "brave");});
test("braver -> braver", function() {deepEqual( Stem("braver"), "braver");});
test("bravery -> braveri", function() {deepEqual( Stem("bravery"), "braveri");});
test("braves -> brave", function() {deepEqual( Stem("braves"), "brave");});
test("bravest -> bravest", function() {deepEqual( Stem("bravest"), "bravest");});
test("braving -> brave", function() {deepEqual( Stem("braving"), "brave");});
test("bravo -> bravo", function() {deepEqual( Stem("bravo"), "bravo");});
test("bravos -> bravo", function() {deepEqual( Stem("bravos"), "bravo");});
test("brawl -> brawl", function() {deepEqual( Stem("brawl"), "brawl");});
test("brawler -> brawler", function() {deepEqual( Stem("brawler"), "brawler");});
test("brawling -> brawl", function() {deepEqual( Stem("brawling"), "brawl");});
test("brawls -> brawl", function() {deepEqual( Stem("brawls"), "brawl");});
test("brawn -> brawn", function() {deepEqual( Stem("brawn"), "brawn");});
test("brawns -> brawn", function() {deepEqual( Stem("brawns"), "brawn");});
test("bray -> brai", function() {deepEqual( Stem("bray"), "brai");});
test("braying -> brai", function() {deepEqual( Stem("braying"), "brai");});
test("brayvo -> brayvo", function() {deepEqual( Stem("brayvo"), "brayvo");});
test("braz -> braz", function() {deepEqual( Stem("braz"), "braz");});
test("brazen -> brazen", function() {deepEqual( Stem("brazen"), "brazen");});
test("brazier -> brazier", function() {deepEqual( Stem("brazier"), "brazier");});
test("brazil -> brazil", function() {deepEqual( Stem("brazil"), "brazil");});
test("brazils -> brazil", function() {deepEqual( Stem("brazils"), "brazil");});
test("breach -> breach", function() {deepEqual( Stem("breach"), "breach");});
test("breaches -> breach", function() {deepEqual( Stem("breaches"), "breach");});
test("bread -> bread", function() {deepEqual( Stem("bread"), "bread");});
test("breadth -> breadth", function() {deepEqual( Stem("breadth"), "breadth");});
test("break -> break", function() {deepEqual( Stem("break"), "break");});
test("breaker -> breaker", function() {deepEqual( Stem("breaker"), "breaker");});
test("breakfast -> breakfast", function() {deepEqual( Stem("breakfast"), "breakfast");});
test("breakfasted -> breakfast", function() {deepEqual( Stem("breakfasted"), "breakfast");});
test("breakfasts -> breakfast", function() {deepEqual( Stem("breakfasts"), "breakfast");});
test("breaking -> break", function() {deepEqual( Stem("breaking"), "break");});
test("breaks -> break", function() {deepEqual( Stem("breaks"), "break");});
test("breast -> breast", function() {deepEqual( Stem("breast"), "breast");});
test("breasted -> breast", function() {deepEqual( Stem("breasted"), "breast");});
test("breasting -> breast", function() {deepEqual( Stem("breasting"), "breast");});
test("breastplate -> breastplat", function() {deepEqual( Stem("breastplate"), "breastplat");});
test("breasts -> breast", function() {deepEqual( Stem("breasts"), "breast");});
test("breath -> breath", function() {deepEqual( Stem("breath"), "breath");});
test("breathe -> breath", function() {deepEqual( Stem("breathe"), "breath");});
test("breathed -> breath", function() {deepEqual( Stem("breathed"), "breath");});
test("breather -> breather", function() {deepEqual( Stem("breather"), "breather");});
test("breathers -> breather", function() {deepEqual( Stem("breathers"), "breather");});
test("breathes -> breath", function() {deepEqual( Stem("breathes"), "breath");});
test("breathest -> breathest", function() {deepEqual( Stem("breathest"), "breathest");});
test("breathing -> breath", function() {deepEqual( Stem("breathing"), "breath");});
test("breathless -> breathless", function() {deepEqual( Stem("breathless"), "breathless");});
test("breaths -> breath", function() {deepEqual( Stem("breaths"), "breath");});
test("brecknock -> brecknock", function() {deepEqual( Stem("brecknock"), "brecknock");});
test("bred -> bred", function() {deepEqual( Stem("bred"), "bred");});
test("breech -> breech", function() {deepEqual( Stem("breech"), "breech");});
test("breeches -> breech", function() {deepEqual( Stem("breeches"), "breech");});
test("breeching -> breech", function() {deepEqual( Stem("breeching"), "breech");});
test("breed -> breed", function() {deepEqual( Stem("breed"), "breed");});
test("breeder -> breeder", function() {deepEqual( Stem("breeder"), "breeder");});
test("breeders -> breeder", function() {deepEqual( Stem("breeders"), "breeder");});
test("breeding -> breed", function() {deepEqual( Stem("breeding"), "breed");});
test("breeds -> breed", function() {deepEqual( Stem("breeds"), "breed");});
test("breese -> brees", function() {deepEqual( Stem("breese"), "brees");});
test("breeze -> breez", function() {deepEqual( Stem("breeze"), "breez");});
test("breff -> breff", function() {deepEqual( Stem("breff"), "breff");});
test("brenoit -> brenoit", function() {deepEqual( Stem("brenoit"), "brenoit");});
test("brent -> brent", function() {deepEqual( Stem("brent"), "brent");});
test("brentwood -> brentwood", function() {deepEqual( Stem("brentwood"), "brentwood");});
test("brequet -> brequet", function() {deepEqual( Stem("brequet"), "brequet");});
test("bretagne -> bretagn", function() {deepEqual( Stem("bretagne"), "bretagn");});
test("brethen -> brethen", function() {deepEqual( Stem("brethen"), "brethen");});
test("bretheren -> bretheren", function() {deepEqual( Stem("bretheren"), "bretheren");});
test("brethren -> brethren", function() {deepEqual( Stem("brethren"), "brethren");});
test("brevet -> brevet", function() {deepEqual( Stem("brevet"), "brevet");});
test("brevis -> brevi", function() {deepEqual( Stem("brevis"), "brevi");});
test("brevity -> breviti", function() {deepEqual( Stem("brevity"), "breviti");});
test("brew -> brew", function() {deepEqual( Stem("brew"), "brew");});
test("brewage -> brewag", function() {deepEqual( Stem("brewage"), "brewag");});
test("brewed -> brew", function() {deepEqual( Stem("brewed"), "brew");});
test("brewer -> brewer", function() {deepEqual( Stem("brewer"), "brewer");});
test("brewers -> brewer", function() {deepEqual( Stem("brewers"), "brewer");});
test("brewing -> brew", function() {deepEqual( Stem("brewing"), "brew");});
test("brews -> brew", function() {deepEqual( Stem("brews"), "brew");});
test("brian -> brian", function() {deepEqual( Stem("brian"), "brian");});
test("briareus -> briareu", function() {deepEqual( Stem("briareus"), "briareu");});
test("briars -> briar", function() {deepEqual( Stem("briars"), "briar");});
test("brib -> brib", function() {deepEqual( Stem("brib"), "brib");});
test("bribe -> bribe", function() {deepEqual( Stem("bribe"), "bribe");});
test("bribed -> bribe", function() {deepEqual( Stem("bribed"), "bribe");});
test("briber -> briber", function() {deepEqual( Stem("briber"), "briber");});
test("bribes -> bribe", function() {deepEqual( Stem("bribes"), "bribe");});
test("brick -> brick", function() {deepEqual( Stem("brick"), "brick");});
test("bricklayer -> bricklay", function() {deepEqual( Stem("bricklayer"), "bricklay");});
test("bricks -> brick", function() {deepEqual( Stem("bricks"), "brick");});
test("bridal -> bridal", function() {deepEqual( Stem("bridal"), "bridal");});
test("bride -> bride", function() {deepEqual( Stem("bride"), "bride");});
test("bridegroom -> bridegroom", function() {deepEqual( Stem("bridegroom"), "bridegroom");});
test("bridegrooms -> bridegroom", function() {deepEqual( Stem("bridegrooms"), "bridegroom");});
test("brides -> bride", function() {deepEqual( Stem("brides"), "bride");});
test("bridesmaid -> bridesmaid", function() {deepEqual( Stem("bridesmaid"), "bridesmaid");});
test("bridesmaids -> bridesmaid", function() {deepEqual( Stem("bridesmaids"), "bridesmaid");});
test("bridge -> bridg", function() {deepEqual( Stem("bridge"), "bridg");});
test("bridgenorth -> bridgenorth", function() {deepEqual( Stem("bridgenorth"), "bridgenorth");});
test("bridges -> bridg", function() {deepEqual( Stem("bridges"), "bridg");});
test("bridget -> bridget", function() {deepEqual( Stem("bridget"), "bridget");});
test("bridle -> bridl", function() {deepEqual( Stem("bridle"), "bridl");});
test("bridled -> bridl", function() {deepEqual( Stem("bridled"), "bridl");});
test("brie -> brie", function() {deepEqual( Stem("brie"), "brie");});
test("brief -> brief", function() {deepEqual( Stem("brief"), "brief");});
test("briefer -> briefer", function() {deepEqual( Stem("briefer"), "briefer");});
test("briefest -> briefest", function() {deepEqual( Stem("briefest"), "briefest");});
test("briefless -> briefless", function() {deepEqual( Stem("briefless"), "briefless");});
test("briefly -> briefli", function() {deepEqual( Stem("briefly"), "briefli");});
test("briefness -> brief", function() {deepEqual( Stem("briefness"), "brief");});
test("brienne -> brienn", function() {deepEqual( Stem("brienne"), "brienn");});
test("brier -> brier", function() {deepEqual( Stem("brier"), "brier");});
test("briers -> brier", function() {deepEqual( Stem("briers"), "brier");});
test("brigade -> brigad", function() {deepEqual( Stem("brigade"), "brigad");});
test("brigandine -> brigandin", function() {deepEqual( Stem("brigandine"), "brigandin");});
test("briggs -> brigg", function() {deepEqual( Stem("briggs"), "brigg");});
test("bright -> bright", function() {deepEqual( Stem("bright"), "bright");});
test("brighten -> brighten", function() {deepEqual( Stem("brighten"), "brighten");});
test("brightened -> brighten", function() {deepEqual( Stem("brightened"), "brighten");});
test("brightest -> brightest", function() {deepEqual( Stem("brightest"), "brightest");});
test("brightly -> brightli", function() {deepEqual( Stem("brightly"), "brightli");});
test("brightness -> bright", function() {deepEqual( Stem("brightness"), "bright");});
test("brighton -> brighton", function() {deepEqual( Stem("brighton"), "brighton");});
test("brilliance -> brillianc", function() {deepEqual( Stem("brilliance"), "brillianc");});
test("brilliancy -> brillianc", function() {deepEqual( Stem("brilliancy"), "brillianc");});
test("brilliant -> brilliant", function() {deepEqual( Stem("brilliant"), "brilliant");});
test("brilliantly -> brilliantli", function() {deepEqual( Stem("brilliantly"), "brilliantli");});
test("brilliants -> brilliant", function() {deepEqual( Stem("brilliants"), "brilliant");});
test("brim -> brim", function() {deepEqual( Stem("brim"), "brim");});
test("brimful -> brim", function() {deepEqual( Stem("brimful"), "brim");});
test("brimming -> brim", function() {deepEqual( Stem("brimming"), "brim");});
test("brims -> brim", function() {deepEqual( Stem("brims"), "brim");});
test("brimstone -> brimston", function() {deepEqual( Stem("brimstone"), "brimston");});
test("brinded -> brind", function() {deepEqual( Stem("brinded"), "brind");});
test("brine -> brine", function() {deepEqual( Stem("brine"), "brine");});
test("bring -> bring", function() {deepEqual( Stem("bring"), "bring");});
test("bringer -> bringer", function() {deepEqual( Stem("bringer"), "bringer");});
test("bringeth -> bringeth", function() {deepEqual( Stem("bringeth"), "bringeth");});
test("bringing -> bring", function() {deepEqual( Stem("bringing"), "bring");});
test("bringings -> bring", function() {deepEqual( Stem("bringings"), "bring");});
test("brings -> bring", function() {deepEqual( Stem("brings"), "bring");});
test("brinish -> brinish", function() {deepEqual( Stem("brinish"), "brinish");});
test("brink -> brink", function() {deepEqual( Stem("brink"), "brink");});
test("brisk -> brisk", function() {deepEqual( Stem("brisk"), "brisk");});
test("brisker -> brisker", function() {deepEqual( Stem("brisker"), "brisker");});
test("briskly -> briskli", function() {deepEqual( Stem("briskly"), "briskli");});
test("briskness -> brisk", function() {deepEqual( Stem("briskness"), "brisk");});
test("brisky -> briski", function() {deepEqual( Stem("brisky"), "briski");});
test("bristle -> bristl", function() {deepEqual( Stem("bristle"), "bristl");});
test("bristled -> bristl", function() {deepEqual( Stem("bristled"), "bristl");});
test("bristling -> bristl", function() {deepEqual( Stem("bristling"), "bristl");});
test("bristly -> bristli", function() {deepEqual( Stem("bristly"), "bristli");});
test("bristol -> bristol", function() {deepEqual( Stem("bristol"), "bristol");});
test("bristow -> bristow", function() {deepEqual( Stem("bristow"), "bristow");});
test("britain -> britain", function() {deepEqual( Stem("britain"), "britain");});
test("britaine -> britain", function() {deepEqual( Stem("britaine"), "britain");});
test("britaines -> britain", function() {deepEqual( Stem("britaines"), "britain");});
test("britannia -> britannia", function() {deepEqual( Stem("britannia"), "britannia");});
test("british -> british", function() {deepEqual( Stem("british"), "british");});
test("briton -> briton", function() {deepEqual( Stem("briton"), "briton");});
test("britons -> briton", function() {deepEqual( Stem("britons"), "briton");});
test("brittany -> brittani", function() {deepEqual( Stem("brittany"), "brittani");});
test("brittle -> brittl", function() {deepEqual( Stem("brittle"), "brittl");});
test("britzkas -> britzka", function() {deepEqual( Stem("britzkas"), "britzka");});
test("britzska -> britzska", function() {deepEqual( Stem("britzska"), "britzska");});
test("broach -> broach", function() {deepEqual( Stem("broach"), "broach");});
test("broached -> broach", function() {deepEqual( Stem("broached"), "broach");});
test("broad -> broad", function() {deepEqual( Stem("broad"), "broad");});
test("broader -> broader", function() {deepEqual( Stem("broader"), "broader");});
test("broadsides -> broadsid", function() {deepEqual( Stem("broadsides"), "broadsid");});
test("broadwood -> broadwood", function() {deepEqual( Stem("broadwood"), "broadwood");});
test("brocade -> brocad", function() {deepEqual( Stem("brocade"), "brocad");});
test("brocades -> brocad", function() {deepEqual( Stem("brocades"), "brocad");});
test("brocas -> broca", function() {deepEqual( Stem("brocas"), "broca");});
test("brock -> brock", function() {deepEqual( Stem("brock"), "brock");});
test("brogues -> brogu", function() {deepEqual( Stem("brogues"), "brogu");});
test("broil -> broil", function() {deepEqual( Stem("broil"), "broil");});
test("broiling -> broil", function() {deepEqual( Stem("broiling"), "broil");});
test("broils -> broil", function() {deepEqual( Stem("broils"), "broil");});
test("broke -> broke", function() {deepEqual( Stem("broke"), "broke");});
test("broken -> broken", function() {deepEqual( Stem("broken"), "broken");});
test("brokenly -> brokenli", function() {deepEqual( Stem("brokenly"), "brokenli");});
test("broker -> broker", function() {deepEqual( Stem("broker"), "broker");});
test("brokers -> broker", function() {deepEqual( Stem("brokers"), "broker");});
test("brokes -> broke", function() {deepEqual( Stem("brokes"), "broke");});
test("broking -> broke", function() {deepEqual( Stem("broking"), "broke");});
test("brompton -> brompton", function() {deepEqual( Stem("brompton"), "brompton");});
test("bronze -> bronz", function() {deepEqual( Stem("bronze"), "bronz");});
test("brooch -> brooch", function() {deepEqual( Stem("brooch"), "brooch");});
test("brooches -> brooch", function() {deepEqual( Stem("brooches"), "brooch");});
test("brood -> brood", function() {deepEqual( Stem("brood"), "brood");});
test("brooded -> brood", function() {deepEqual( Stem("brooded"), "brood");});
test("brooding -> brood", function() {deepEqual( Stem("brooding"), "brood");});
test("brook -> brook", function() {deepEqual( Stem("brook"), "brook");});
test("brookgreen -> brookgreen", function() {deepEqual( Stem("brookgreen"), "brookgreen");});
test("brooks -> brook", function() {deepEqual( Stem("brooks"), "brook");});
test("broom -> broom", function() {deepEqual( Stem("broom"), "broom");});
test("broomstaff -> broomstaff", function() {deepEqual( Stem("broomstaff"), "broomstaff");});
test("broth -> broth", function() {deepEqual( Stem("broth"), "broth");});
test("brothel -> brothel", function() {deepEqual( Stem("brothel"), "brothel");});
test("brother -> brother", function() {deepEqual( Stem("brother"), "brother");});
test("brotherhood -> brotherhood", function() {deepEqual( Stem("brotherhood"), "brotherhood");});
test("brotherhoods -> brotherhood", function() {deepEqual( Stem("brotherhoods"), "brotherhood");});
test("brotherly -> brotherli", function() {deepEqual( Stem("brotherly"), "brotherli");});
test("brothernlaw -> brothernlaw", function() {deepEqual( Stem("brothernlaw"), "brothernlaw");});
test("brothers -> brother", function() {deepEqual( Stem("brothers"), "brother");});
test("broths -> broth", function() {deepEqual( Stem("broths"), "broth");});
test("brougham -> brougham", function() {deepEqual( Stem("brougham"), "brougham");});
test("broughams -> brougham", function() {deepEqual( Stem("broughams"), "brougham");});
test("brought -> brought", function() {deepEqual( Stem("brought"), "brought");});
test("brow -> brow", function() {deepEqual( Stem("brow"), "brow");});
test("browed -> brow", function() {deepEqual( Stem("browed"), "brow");});
test("brown -> brown", function() {deepEqual( Stem("brown"), "brown");});
test("browner -> browner", function() {deepEqual( Stem("browner"), "browner");});
test("brownist -> brownist", function() {deepEqual( Stem("brownist"), "brownist");});
test("browny -> browni", function() {deepEqual( Stem("browny"), "browni");});
test("brows -> brow", function() {deepEqual( Stem("brows"), "brow");});
test("browse -> brows", function() {deepEqual( Stem("browse"), "brows");});
test("browsing -> brows", function() {deepEqual( Stem("browsing"), "brows");});
test("bruges -> bruge", function() {deepEqual( Stem("bruges"), "bruge");});
test("bruin -> bruin", function() {deepEqual( Stem("bruin"), "bruin");});
test("bruis -> brui", function() {deepEqual( Stem("bruis"), "brui");});
test("bruise -> bruis", function() {deepEqual( Stem("bruise"), "bruis");});
test("bruised -> bruis", function() {deepEqual( Stem("bruised"), "bruis");});
test("bruisers -> bruiser", function() {deepEqual( Stem("bruisers"), "bruiser");});
test("bruises -> bruis", function() {deepEqual( Stem("bruises"), "bruis");});
test("bruising -> bruis", function() {deepEqual( Stem("bruising"), "bruis");});
test("bruit -> bruit", function() {deepEqual( Stem("bruit"), "bruit");});
test("bruited -> bruit", function() {deepEqual( Stem("bruited"), "bruit");});
test("brummel -> brummel", function() {deepEqual( Stem("brummel"), "brummel");});
test("brummell -> brummel", function() {deepEqual( Stem("brummell"), "brummel");});
test("brun -> brun", function() {deepEqual( Stem("brun"), "brun");});
test("brundusium -> brundusium", function() {deepEqual( Stem("brundusium"), "brundusium");});
test("brunoy -> brunoi", function() {deepEqual( Stem("brunoy"), "brunoi");});
test("brunswick -> brunswick", function() {deepEqual( Stem("brunswick"), "brunswick");});
test("brunswickers -> brunswick", function() {deepEqual( Stem("brunswickers"), "brunswick");});
test("brunt -> brunt", function() {deepEqual( Stem("brunt"), "brunt");});
test("brush -> brush", function() {deepEqual( Stem("brush"), "brush");});
test("brushed -> brush", function() {deepEqual( Stem("brushed"), "brush");});
test("brushes -> brush", function() {deepEqual( Stem("brushes"), "brush");});
test("brushing -> brush", function() {deepEqual( Stem("brushing"), "brush");});
test("brussels -> brussel", function() {deepEqual( Stem("brussels"), "brussel");});
test("brutal -> brutal", function() {deepEqual( Stem("brutal"), "brutal");});
test("brutality -> brutal", function() {deepEqual( Stem("brutality"), "brutal");});
test("brute -> brute", function() {deepEqual( Stem("brute"), "brute");});
test("brutish -> brutish", function() {deepEqual( Stem("brutish"), "brutish");});
test("brutus -> brutu", function() {deepEqual( Stem("brutus"), "brutu");});
test("bubble -> bubbl", function() {deepEqual( Stem("bubble"), "bubbl");});
test("bubbles -> bubbl", function() {deepEqual( Stem("bubbles"), "bubbl");});
test("bubbling -> bubbl", function() {deepEqual( Stem("bubbling"), "bubbl");});
test("bubukles -> bubukl", function() {deepEqual( Stem("bubukles"), "bubukl");});
test("bucephalus -> bucephalu", function() {deepEqual( Stem("bucephalus"), "bucephalu");});
test("buck -> buck", function() {deepEqual( Stem("buck"), "buck");});
test("bucket -> bucket", function() {deepEqual( Stem("bucket"), "bucket");});
test("buckets -> bucket", function() {deepEqual( Stem("buckets"), "bucket");});
test("bucking -> buck", function() {deepEqual( Stem("bucking"), "buck");});
test("buckingham -> buckingham", function() {deepEqual( Stem("buckingham"), "buckingham");});
test("buckinghamshire -> buckinghamshir", function() {deepEqual( Stem("buckinghamshire"), "buckinghamshir");});
test("buckle -> buckl", function() {deepEqual( Stem("buckle"), "buckl");});
test("buckled -> buckl", function() {deepEqual( Stem("buckled"), "buckl");});
test("buckler -> buckler", function() {deepEqual( Stem("buckler"), "buckler");});
test("bucklers -> buckler", function() {deepEqual( Stem("bucklers"), "buckler");});
test("bucklersbury -> bucklersburi", function() {deepEqual( Stem("bucklersbury"), "bucklersburi");});
test("buckles -> buckl", function() {deepEqual( Stem("buckles"), "buckl");});
test("buckram -> buckram", function() {deepEqual( Stem("buckram"), "buckram");});
test("bucks -> buck", function() {deepEqual( Stem("bucks"), "buck");});
test("buckskin -> buckskin", function() {deepEqual( Stem("buckskin"), "buckskin");});
test("buckskins -> buckskin", function() {deepEqual( Stem("buckskins"), "buckskin");});
test("bud -> bud", function() {deepEqual( Stem("bud"), "bud");});
test("budded -> bud", function() {deepEqual( Stem("budded"), "bud");});
test("budding -> bud", function() {deepEqual( Stem("budding"), "bud");});
test("budge -> budg", function() {deepEqual( Stem("budge"), "budg");});
test("budgebudge -> budgebudg", function() {deepEqual( Stem("budgebudge"), "budgebudg");});
test("budger -> budger", function() {deepEqual( Stem("budger"), "budger");});
test("budget -> budget", function() {deepEqual( Stem("budget"), "budget");});
test("buds -> bud", function() {deepEqual( Stem("buds"), "bud");});
test("buff -> buff", function() {deepEqual( Stem("buff"), "buff");});
test("buffet -> buffet", function() {deepEqual( Stem("buffet"), "buffet");});
test("buffeting -> buffet", function() {deepEqual( Stem("buffeting"), "buffet");});
test("buffets -> buffet", function() {deepEqual( Stem("buffets"), "buffet");});
test("buffoons -> buffoon", function() {deepEqual( Stem("buffoons"), "buffoon");});
test("bug -> bug", function() {deepEqual( Stem("bug"), "bug");});
test("bugbear -> bugbear", function() {deepEqual( Stem("bugbear"), "bugbear");});
test("buggy -> buggi", function() {deepEqual( Stem("buggy"), "buggi");});
test("bugle -> bugl", function() {deepEqual( Stem("bugle"), "bugl");});
test("bugles -> bugl", function() {deepEqual( Stem("bugles"), "bugl");});
test("bugs -> bug", function() {deepEqual( Stem("bugs"), "bug");});
test("build -> build", function() {deepEqual( Stem("build"), "build");});
test("builded -> build", function() {deepEqual( Stem("builded"), "build");});
test("builder -> builder", function() {deepEqual( Stem("builder"), "builder");});
test("buildeth -> buildeth", function() {deepEqual( Stem("buildeth"), "buildeth");});
test("building -> build", function() {deepEqual( Stem("building"), "build");});
test("buildings -> build", function() {deepEqual( Stem("buildings"), "build");});
test("builds -> build", function() {deepEqual( Stem("builds"), "build");});
test("built -> built", function() {deepEqual( Stem("built"), "built");});
test("bulbul -> bulbul", function() {deepEqual( Stem("bulbul"), "bulbul");});
test("bulders -> bulder", function() {deepEqual( Stem("bulders"), "bulder");});
test("bulgaria -> bulgaria", function() {deepEqual( Stem("bulgaria"), "bulgaria");});
test("bulgarian -> bulgarian", function() {deepEqual( Stem("bulgarian"), "bulgarian");});
test("bulk -> bulk", function() {deepEqual( Stem("bulk"), "bulk");});
test("bulkeley -> bulkelei", function() {deepEqual( Stem("bulkeley"), "bulkelei");});
test("bulks -> bulk", function() {deepEqual( Stem("bulks"), "bulk");});
test("bull -> bull", function() {deepEqual( Stem("bull"), "bull");});
test("bullcalf -> bullcalf", function() {deepEqual( Stem("bullcalf"), "bullcalf");});
test("bullen -> bullen", function() {deepEqual( Stem("bullen"), "bullen");});
test("bullens -> bullen", function() {deepEqual( Stem("bullens"), "bullen");});
test("bullet -> bullet", function() {deepEqual( Stem("bullet"), "bullet");});
test("bulletin -> bulletin", function() {deepEqual( Stem("bulletin"), "bulletin");});
test("bulletins -> bulletin", function() {deepEqual( Stem("bulletins"), "bulletin");});
test("bullets -> bullet", function() {deepEqual( Stem("bullets"), "bullet");});
test("bullfinch -> bullfinch", function() {deepEqual( Stem("bullfinch"), "bullfinch");});
test("bullied -> bulli", function() {deepEqual( Stem("bullied"), "bulli");});
test("bullies -> bulli", function() {deepEqual( Stem("bullies"), "bulli");});
test("bullion -> bullion", function() {deepEqual( Stem("bullion"), "bullion");});
test("bullminster -> bullminst", function() {deepEqual( Stem("bullminster"), "bullminst");});
test("bullock -> bullock", function() {deepEqual( Stem("bullock"), "bullock");});
test("bullocks -> bullock", function() {deepEqual( Stem("bullocks"), "bullock");});
test("bulls -> bull", function() {deepEqual( Stem("bulls"), "bull");});
test("bully -> bulli", function() {deepEqual( Stem("bully"), "bulli");});
test("bullyin -> bullyin", function() {deepEqual( Stem("bullyin"), "bullyin");});
test("bullying -> bulli", function() {deepEqual( Stem("bullying"), "bulli");});
test("bulmer -> bulmer", function() {deepEqual( Stem("bulmer"), "bulmer");});
test("bulwark -> bulwark", function() {deepEqual( Stem("bulwark"), "bulwark");});
test("bulwarks -> bulwark", function() {deepEqual( Stem("bulwarks"), "bulwark");});
test("bum -> bum", function() {deepEqual( Stem("bum"), "bum");});
test("bumbast -> bumbast", function() {deepEqual( Stem("bumbast"), "bumbast");});
test("bump -> bump", function() {deepEqual( Stem("bump"), "bump");});
test("bumper -> bumper", function() {deepEqual( Stem("bumper"), "bumper");});
test("bumpers -> bumper", function() {deepEqual( Stem("bumpers"), "bumper");});
test("bumpkin -> bumpkin", function() {deepEqual( Stem("bumpkin"), "bumpkin");});
test("bums -> bum", function() {deepEqual( Stem("bums"), "bum");});
test("bunch -> bunch", function() {deepEqual( Stem("bunch"), "bunch");});
test("bunches -> bunch", function() {deepEqual( Stem("bunches"), "bunch");});
test("bundle -> bundl", function() {deepEqual( Stem("bundle"), "bundl");});
test("bundlegunge -> bundlegung", function() {deepEqual( Stem("bundlegunge"), "bundlegung");});
test("bundles -> bundl", function() {deepEqual( Stem("bundles"), "bundl");});
test("bung -> bung", function() {deepEqual( Stem("bung"), "bung");});
test("bungalow -> bungalow", function() {deepEqual( Stem("bungalow"), "bungalow");});
test("bunghole -> bunghol", function() {deepEqual( Stem("bunghole"), "bunghol");});
test("bungle -> bungl", function() {deepEqual( Stem("bungle"), "bungl");});
test("bungler -> bungler", function() {deepEqual( Stem("bungler"), "bungler");});
test("bunglers -> bungler", function() {deepEqual( Stem("bunglers"), "bungler");});
test("bunker -> bunker", function() {deepEqual( Stem("bunker"), "bunker");});
test("bunny -> bunni", function() {deepEqual( Stem("bunny"), "bunni");});
test("bunting -> bunt", function() {deepEqual( Stem("bunting"), "bunt");});
test("buoy -> buoi", function() {deepEqual( Stem("buoy"), "buoi");});
test("bur -> bur", function() {deepEqual( Stem("bur"), "bur");});
test("burbolt -> burbolt", function() {deepEqual( Stem("burbolt"), "burbolt");});
test("burcke -> burck", function() {deepEqual( Stem("burcke"), "burck");});
test("burd -> burd", function() {deepEqual( Stem("burd"), "burd");});
test("burden -> burden", function() {deepEqual( Stem("burden"), "burden");});
test("burdened -> burden", function() {deepEqual( Stem("burdened"), "burden");});
test("burdening -> burden", function() {deepEqual( Stem("burdening"), "burden");});
test("burdenous -> burden", function() {deepEqual( Stem("burdenous"), "burden");});
test("burdens -> burden", function() {deepEqual( Stem("burdens"), "burden");});
test("burgh -> burgh", function() {deepEqual( Stem("burgh"), "burgh");});
test("burgher -> burgher", function() {deepEqual( Stem("burgher"), "burgher");});
test("burghers -> burgher", function() {deepEqual( Stem("burghers"), "burgher");});
test("burglar -> burglar", function() {deepEqual( Stem("burglar"), "burglar");});
test("burglary -> burglari", function() {deepEqual( Stem("burglary"), "burglari");});
test("burgo -> burgo", function() {deepEqual( Stem("burgo"), "burgo");});
test("burgomasters -> burgomast", function() {deepEqual( Stem("burgomasters"), "burgomast");});
test("burgonet -> burgonet", function() {deepEqual( Stem("burgonet"), "burgonet");});
test("burgundy -> burgundi", function() {deepEqual( Stem("burgundy"), "burgundi");});
test("burial -> burial", function() {deepEqual( Stem("burial"), "burial");});
test("buried -> buri", function() {deepEqual( Stem("buried"), "buri");});
test("burier -> burier", function() {deepEqual( Stem("burier"), "burier");});
test("buriest -> buriest", function() {deepEqual( Stem("buriest"), "buriest");});
test("burjoice -> burjoic", function() {deepEqual( Stem("burjoice"), "burjoic");});
test("burke -> burk", function() {deepEqual( Stem("burke"), "burk");});
test("burly -> burli", function() {deepEqual( Stem("burly"), "burli");});
test("burmese -> burmes", function() {deepEqual( Stem("burmese"), "burmes");});
test("burn -> burn", function() {deepEqual( Stem("burn"), "burn");});
test("burned -> burn", function() {deepEqual( Stem("burned"), "burn");});
test("burnet -> burnet", function() {deepEqual( Stem("burnet"), "burnet");});
test("burneth -> burneth", function() {deepEqual( Stem("burneth"), "burneth");});
test("burning -> burn", function() {deepEqual( Stem("burning"), "burn");});
test("burnish -> burnish", function() {deepEqual( Stem("burnish"), "burnish");});
test("burns -> burn", function() {deepEqual( Stem("burns"), "burn");});
test("burnt -> burnt", function() {deepEqual( Stem("burnt"), "burnt");});
test("burr -> burr", function() {deepEqual( Stem("burr"), "burr");});
test("burrows -> burrow", function() {deepEqual( Stem("burrows"), "burrow");});
test("burs -> bur", function() {deepEqual( Stem("burs"), "bur");});
test("burschen -> burschen", function() {deepEqual( Stem("burschen"), "burschen");});
test("burst -> burst", function() {deepEqual( Stem("burst"), "burst");});
test("bursting -> burst", function() {deepEqual( Stem("bursting"), "burst");});
test("bursts -> burst", function() {deepEqual( Stem("bursts"), "burst");});
test("burthen -> burthen", function() {deepEqual( Stem("burthen"), "burthen");});
test("burthens -> burthen", function() {deepEqual( Stem("burthens"), "burthen");});
test("burton -> burton", function() {deepEqual( Stem("burton"), "burton");});
test("bury -> buri", function() {deepEqual( Stem("bury"), "buri");});
test("burying -> buri", function() {deepEqual( Stem("burying"), "buri");});
test("bush -> bush", function() {deepEqual( Stem("bush"), "bush");});
test("bushels -> bushel", function() {deepEqual( Stem("bushels"), "bushel");});
test("bushes -> bush", function() {deepEqual( Stem("bushes"), "bush");});
test("bushy -> bushi", function() {deepEqual( Stem("bushy"), "bushi");});
test("busied -> busi", function() {deepEqual( Stem("busied"), "busi");});
test("busies -> busi", function() {deepEqual( Stem("busies"), "busi");});
test("busiest -> busiest", function() {deepEqual( Stem("busiest"), "busiest");});
test("busily -> busili", function() {deepEqual( Stem("busily"), "busili");});
test("busines -> busin", function() {deepEqual( Stem("busines"), "busin");});
test("business -> busi", function() {deepEqual( Stem("business"), "busi");});
test("businesses -> busi", function() {deepEqual( Stem("businesses"), "busi");});
test("buskin -> buskin", function() {deepEqual( Stem("buskin"), "buskin");});
test("busky -> buski", function() {deepEqual( Stem("busky"), "buski");});
test("buss -> buss", function() {deepEqual( Stem("buss"), "buss");});
test("busses -> buss", function() {deepEqual( Stem("busses"), "buss");});
test("bussing -> buss", function() {deepEqual( Stem("bussing"), "buss");});
test("bust -> bust", function() {deepEqual( Stem("bust"), "bust");});
test("busting -> bust", function() {deepEqual( Stem("busting"), "bust");});
test("bustle -> bustl", function() {deepEqual( Stem("bustle"), "bustl");});
test("bustled -> bustl", function() {deepEqual( Stem("bustled"), "bustl");});
test("bustling -> bustl", function() {deepEqual( Stem("bustling"), "bustl");});
test("busy -> busi", function() {deepEqual( Stem("busy"), "busi");});
test("but -> but", function() {deepEqual( Stem("but"), "but");});
test("butcheed -> butche", function() {deepEqual( Stem("butcheed"), "butche");});
test("butcher -> butcher", function() {deepEqual( Stem("butcher"), "butcher");});
test("butchered -> butcher", function() {deepEqual( Stem("butchered"), "butcher");});
test("butcheries -> butcheri", function() {deepEqual( Stem("butcheries"), "butcheri");});
test("butcherly -> butcherli", function() {deepEqual( Stem("butcherly"), "butcherli");});
test("butchers -> butcher", function() {deepEqual( Stem("butchers"), "butcher");});
test("butchery -> butcheri", function() {deepEqual( Stem("butchery"), "butcheri");});
test("bute -> bute", function() {deepEqual( Stem("bute"), "bute");});
test("butes -> bute", function() {deepEqual( Stem("butes"), "bute");});
test("butler -> butler", function() {deepEqual( Stem("butler"), "butler");});
test("butlers -> butler", function() {deepEqual( Stem("butlers"), "butler");});
test("butt -> butt", function() {deepEqual( Stem("butt"), "butt");});
test("butter -> butter", function() {deepEqual( Stem("butter"), "butter");});
test("butterbrod -> butterbrod", function() {deepEqual( Stem("butterbrod"), "butterbrod");});
test("butterbrods -> butterbrod", function() {deepEqual( Stem("butterbrods"), "butterbrod");});
test("buttered -> butter", function() {deepEqual( Stem("buttered"), "butter");});
test("butterflies -> butterfli", function() {deepEqual( Stem("butterflies"), "butterfli");});
test("butterfly -> butterfli", function() {deepEqual( Stem("butterfly"), "butterfli");});
test("butterwoman -> butterwoman", function() {deepEqual( Stem("butterwoman"), "butterwoman");});
test("buttery -> butteri", function() {deepEqual( Stem("buttery"), "butteri");});
test("buttock -> buttock", function() {deepEqual( Stem("buttock"), "buttock");});
test("buttocks -> buttock", function() {deepEqual( Stem("buttocks"), "buttock");});
test("button -> button", function() {deepEqual( Stem("button"), "button");});
test("buttoned -> button", function() {deepEqual( Stem("buttoned"), "button");});
test("buttonhole -> buttonhol", function() {deepEqual( Stem("buttonhole"), "buttonhol");});
test("buttonholes -> buttonhol", function() {deepEqual( Stem("buttonholes"), "buttonhol");});
test("buttoning -> button", function() {deepEqual( Stem("buttoning"), "button");});
test("buttons -> button", function() {deepEqual( Stem("buttons"), "button");});
test("buttony -> buttoni", function() {deepEqual( Stem("buttony"), "buttoni");});
test("buttress -> buttress", function() {deepEqual( Stem("buttress"), "buttress");});
test("buttry -> buttri", function() {deepEqual( Stem("buttry"), "buttri");});
test("butts -> butt", function() {deepEqual( Stem("butts"), "butt");});
test("buty -> buti", function() {deepEqual( Stem("buty"), "buti");});
test("buxom -> buxom", function() {deepEqual( Stem("buxom"), "buxom");});
test("buxton -> buxton", function() {deepEqual( Stem("buxton"), "buxton");});
test("buy -> bui", function() {deepEqual( Stem("buy"), "bui");});
test("buyer -> buyer", function() {deepEqual( Stem("buyer"), "buyer");});
test("buying -> bui", function() {deepEqual( Stem("buying"), "bui");});
test("buys -> bui", function() {deepEqual( Stem("buys"), "bui");});
test("buzz -> buzz", function() {deepEqual( Stem("buzz"), "buzz");});
test("buzzard -> buzzard", function() {deepEqual( Stem("buzzard"), "buzzard");});
test("buzzards -> buzzard", function() {deepEqual( Stem("buzzards"), "buzzard");});
test("buzzers -> buzzer", function() {deepEqual( Stem("buzzers"), "buzzer");});
test("buzzing -> buzz", function() {deepEqual( Stem("buzzing"), "buzz");});
test("by -> by", function() {deepEqual( Stem("by"), "by");});
test("bye -> bye", function() {deepEqual( Stem("bye"), "bye");});
test("bygone -> bygon", function() {deepEqual( Stem("bygone"), "bygon");});
test("bygones -> bygon", function() {deepEqual( Stem("bygones"), "bygon");});
test("byoo -> byoo", function() {deepEqual( Stem("byoo"), "byoo");});
test("byword -> byword", function() {deepEqual( Stem("byword"), "byword");});
test("byzantium -> byzantium", function() {deepEqual( Stem("byzantium"), "byzantium");});
test("c -> c", function() {deepEqual( Stem("c"), "c");});
test("ca -> ca", function() {deepEqual( Stem("ca"), "ca");});
test("cab -> cab", function() {deepEqual( Stem("cab"), "cab");});
test("cabal -> cabal", function() {deepEqual( Stem("cabal"), "cabal");});
test("cabbage -> cabbag", function() {deepEqual( Stem("cabbage"), "cabbag");});
test("cabileros -> cabilero", function() {deepEqual( Stem("cabileros"), "cabilero");});
test("cabin -> cabin", function() {deepEqual( Stem("cabin"), "cabin");});
test("cabinet -> cabinet", function() {deepEqual( Stem("cabinet"), "cabinet");});
test("cabins -> cabin", function() {deepEqual( Stem("cabins"), "cabin");});
test("cable -> cabl", function() {deepEqual( Stem("cable"), "cabl");});
test("cables -> cabl", function() {deepEqual( Stem("cables"), "cabl");});
test("cabs -> cab", function() {deepEqual( Stem("cabs"), "cab");});
test("cackle -> cackl", function() {deepEqual( Stem("cackle"), "cackl");});
test("cackleby -> cacklebi", function() {deepEqual( Stem("cackleby"), "cacklebi");});
test("cackled -> cackl", function() {deepEqual( Stem("cackled"), "cackl");});
test("cackling -> cackl", function() {deepEqual( Stem("cackling"), "cackl");});
test("cacodemon -> cacodemon", function() {deepEqual( Stem("cacodemon"), "cacodemon");});
test("cadaverous -> cadaver", function() {deepEqual( Stem("cadaverous"), "cadaver");});
test("caddies -> caddi", function() {deepEqual( Stem("caddies"), "caddi");});
test("caddis -> caddi", function() {deepEqual( Stem("caddis"), "caddi");});
test("caddisses -> caddiss", function() {deepEqual( Stem("caddisses"), "caddiss");});
test("cade -> cade", function() {deepEqual( Stem("cade"), "cade");});
test("cadence -> cadenc", function() {deepEqual( Stem("cadence"), "cadenc");});
test("cadent -> cadent", function() {deepEqual( Stem("cadent"), "cadent");});
test("cades -> cade", function() {deepEqual( Stem("cades"), "cade");});
test("cadet -> cadet", function() {deepEqual( Stem("cadet"), "cadet");});
test("cadets -> cadet", function() {deepEqual( Stem("cadets"), "cadet");});
test("cadmus -> cadmu", function() {deepEqual( Stem("cadmus"), "cadmu");});
test("caduceus -> caduceu", function() {deepEqual( Stem("caduceus"), "caduceu");});
test("cadwal -> cadwal", function() {deepEqual( Stem("cadwal"), "cadwal");});
test("cadwallader -> cadwallad", function() {deepEqual( Stem("cadwallader"), "cadwallad");});
test("caelius -> caeliu", function() {deepEqual( Stem("caelius"), "caeliu");});
test("caelo -> caelo", function() {deepEqual( Stem("caelo"), "caelo");});
test("caen -> caen", function() {deepEqual( Stem("caen"), "caen");});
test("caerlyon -> caerlyon", function() {deepEqual( Stem("caerlyon"), "caerlyon");});
test("caerlyons -> caerlyon", function() {deepEqual( Stem("caerlyons"), "caerlyon");});
test("caerylon -> caerylon", function() {deepEqual( Stem("caerylon"), "caerylon");});
test("caesar -> caesar", function() {deepEqual( Stem("caesar"), "caesar");});
test("caesarion -> caesarion", function() {deepEqual( Stem("caesarion"), "caesarion");});
test("caesars -> caesar", function() {deepEqual( Stem("caesars"), "caesar");});
test("cafe -> cafe", function() {deepEqual( Stem("cafe"), "cafe");});
test("caffraria -> caffraria", function() {deepEqual( Stem("caffraria"), "caffraria");});
test("cage -> cage", function() {deepEqual( Stem("cage"), "cage");});
test("caged -> cage", function() {deepEqual( Stem("caged"), "cage");});
test("cagion -> cagion", function() {deepEqual( Stem("cagion"), "cagion");});
test("cain -> cain", function() {deepEqual( Stem("cain"), "cain");});
test("cairngorm -> cairngorm", function() {deepEqual( Stem("cairngorm"), "cairngorm");});
test("cairngorms -> cairngorm", function() {deepEqual( Stem("cairngorms"), "cairngorm");});
test("caithness -> caith", function() {deepEqual( Stem("caithness"), "caith");});
test("caitiff -> caitiff", function() {deepEqual( Stem("caitiff"), "caitiff");});
test("caitiffs -> caitiff", function() {deepEqual( Stem("caitiffs"), "caitiff");});
test("caius -> caiu", function() {deepEqual( Stem("caius"), "caiu");});
test("cajole -> cajol", function() {deepEqual( Stem("cajole"), "cajol");});
test("cajoled -> cajol", function() {deepEqual( Stem("cajoled"), "cajol");});
test("cajolements -> cajol", function() {deepEqual( Stem("cajolements"), "cajol");});
test("cajoleries -> cajoleri", function() {deepEqual( Stem("cajoleries"), "cajoleri");});
test("cajoling -> cajol", function() {deepEqual( Stem("cajoling"), "cajol");});
test("cak -> cak", function() {deepEqual( Stem("cak"), "cak");});
test("cake -> cake", function() {deepEqual( Stem("cake"), "cake");});
test("cakes -> cake", function() {deepEqual( Stem("cakes"), "cake");});
test("calaber -> calab", function() {deepEqual( Stem("calaber"), "calab");});
test("calais -> calai", function() {deepEqual( Stem("calais"), "calai");});
test("calamities -> calam", function() {deepEqual( Stem("calamities"), "calam");});
test("calamity -> calam", function() {deepEqual( Stem("calamity"), "calam");});
test("calash -> calash", function() {deepEqual( Stem("calash"), "calash");});
test("calchas -> calcha", function() {deepEqual( Stem("calchas"), "calcha");});
test("calculate -> calcul", function() {deepEqual( Stem("calculate"), "calcul");});
test("calculated -> calcul", function() {deepEqual( Stem("calculated"), "calcul");});
test("calculating -> calcul", function() {deepEqual( Stem("calculating"), "calcul");});
test("calculation -> calcul", function() {deepEqual( Stem("calculation"), "calcul");});
test("calculations -> calcul", function() {deepEqual( Stem("calculations"), "calcul");});
test("calcutta -> calcutta", function() {deepEqual( Stem("calcutta"), "calcutta");});
test("calen -> calen", function() {deepEqual( Stem("calen"), "calen");});
test("calendar -> calendar", function() {deepEqual( Stem("calendar"), "calendar");});
test("calendars -> calendar", function() {deepEqual( Stem("calendars"), "calendar");});
test("calf -> calf", function() {deepEqual( Stem("calf"), "calf");});
test("caliban -> caliban", function() {deepEqual( Stem("caliban"), "caliban");});
test("calibans -> caliban", function() {deepEqual( Stem("calibans"), "caliban");});
test("calico -> calico", function() {deepEqual( Stem("calico"), "calico");});
test("calipash -> calipash", function() {deepEqual( Stem("calipash"), "calipash");});
test("calipee -> calipe", function() {deepEqual( Stem("calipee"), "calipe");});
test("calipolis -> calipoli", function() {deepEqual( Stem("calipolis"), "calipoli");});
test("cality -> caliti", function() {deepEqual( Stem("cality"), "caliti");});
test("caliver -> caliv", function() {deepEqual( Stem("caliver"), "caliv");});
test("call -> call", function() {deepEqual( Stem("call"), "call");});
test("callat -> callat", function() {deepEqual( Stem("callat"), "callat");});
test("called -> call", function() {deepEqual( Stem("called"), "call");});
test("callet -> callet", function() {deepEqual( Stem("callet"), "callet");});
test("calling -> call", function() {deepEqual( Stem("calling"), "call");});
test("callous -> callou", function() {deepEqual( Stem("callous"), "callou");});
test("calls -> call", function() {deepEqual( Stem("calls"), "call");});
test("calm -> calm", function() {deepEqual( Stem("calm"), "calm");});
test("calmest -> calmest", function() {deepEqual( Stem("calmest"), "calmest");});
test("calmly -> calmli", function() {deepEqual( Stem("calmly"), "calmli");});
test("calmness -> calm", function() {deepEqual( Stem("calmness"), "calm");});
test("calms -> calm", function() {deepEqual( Stem("calms"), "calm");});
test("calomel -> calomel", function() {deepEqual( Stem("calomel"), "calomel");});
test("calpurnia -> calpurnia", function() {deepEqual( Stem("calpurnia"), "calpurnia");});
test("calumniate -> calumni", function() {deepEqual( Stem("calumniate"), "calumni");});
test("calumniated -> calumni", function() {deepEqual( Stem("calumniated"), "calumni");});
test("calumniating -> calumni", function() {deepEqual( Stem("calumniating"), "calumni");});
test("calumnies -> calumni", function() {deepEqual( Stem("calumnies"), "calumni");});
test("calumnious -> calumni", function() {deepEqual( Stem("calumnious"), "calumni");});
test("calumny -> calumni", function() {deepEqual( Stem("calumny"), "calumni");});
test("calve -> calv", function() {deepEqual( Stem("calve"), "calv");});
test("calved -> calv", function() {deepEqual( Stem("calved"), "calv");});
test("calves -> calv", function() {deepEqual( Stem("calves"), "calv");});
test("calveskins -> calveskin", function() {deepEqual( Stem("calveskins"), "calveskin");});
test("calydon -> calydon", function() {deepEqual( Stem("calydon"), "calydon");});
test("calypso -> calypso", function() {deepEqual( Stem("calypso"), "calypso");});
test("cam -> cam", function() {deepEqual( Stem("cam"), "cam");});
test("camberwell -> camberwel", function() {deepEqual( Stem("camberwell"), "camberwel");});
test("cambio -> cambio", function() {deepEqual( Stem("cambio"), "cambio");});
test("cambray -> cambrai", function() {deepEqual( Stem("cambray"), "cambrai");});
test("cambria -> cambria", function() {deepEqual( Stem("cambria"), "cambria");});
test("cambric -> cambric", function() {deepEqual( Stem("cambric"), "cambric");});
test("cambrics -> cambric", function() {deepEqual( Stem("cambrics"), "cambric");});
test("cambridge -> cambridg", function() {deepEqual( Stem("cambridge"), "cambridg");});
test("cambyses -> cambys", function() {deepEqual( Stem("cambyses"), "cambys");});
test("came -> came", function() {deepEqual( Stem("came"), "came");});
test("camel -> camel", function() {deepEqual( Stem("camel"), "camel");});
test("camellias -> camellia", function() {deepEqual( Stem("camellias"), "camellia");});
test("camelot -> camelot", function() {deepEqual( Stem("camelot"), "camelot");});
test("camels -> camel", function() {deepEqual( Stem("camels"), "camel");});
test("camest -> camest", function() {deepEqual( Stem("camest"), "camest");});
test("camilla -> camilla", function() {deepEqual( Stem("camilla"), "camilla");});
test("camillo -> camillo", function() {deepEqual( Stem("camillo"), "camillo");});
test("camisole -> camisol", function() {deepEqual( Stem("camisole"), "camisol");});
test("camlet -> camlet", function() {deepEqual( Stem("camlet"), "camlet");});
test("camomile -> camomil", function() {deepEqual( Stem("camomile"), "camomil");});
test("camp -> camp", function() {deepEqual( Stem("camp"), "camp");});
test("campaign -> campaign", function() {deepEqual( Stem("campaign"), "campaign");});
test("campaigner -> campaign", function() {deepEqual( Stem("campaigner"), "campaign");});
test("campaigns -> campaign", function() {deepEqual( Stem("campaigns"), "campaign");});
test("campeius -> campeiu", function() {deepEqual( Stem("campeius"), "campeiu");});
test("camping -> camp", function() {deepEqual( Stem("camping"), "camp");});
test("camps -> camp", function() {deepEqual( Stem("camps"), "camp");});
test("can -> can", function() {deepEqual( Stem("can"), "can");});
test("canada -> canada", function() {deepEqual( Stem("canada"), "canada");});
test("canakin -> canakin", function() {deepEqual( Stem("canakin"), "canakin");});
test("canal -> canal", function() {deepEqual( Stem("canal"), "canal");});
test("canals -> canal", function() {deepEqual( Stem("canals"), "canal");});
test("canaries -> canari", function() {deepEqual( Stem("canaries"), "canari");});
test("canary -> canari", function() {deepEqual( Stem("canary"), "canari");});
test("cancel -> cancel", function() {deepEqual( Stem("cancel"), "cancel");});
test("cancell -> cancel", function() {deepEqual( Stem("cancell"), "cancel");});
test("cancelled -> cancel", function() {deepEqual( Stem("cancelled"), "cancel");});
test("cancelling -> cancel", function() {deepEqual( Stem("cancelling"), "cancel");});
test("cancels -> cancel", function() {deepEqual( Stem("cancels"), "cancel");});
test("cancer -> cancer", function() {deepEqual( Stem("cancer"), "cancer");});
test("candid -> candid", function() {deepEqual( Stem("candid"), "candid");});
test("candidate -> candid", function() {deepEqual( Stem("candidate"), "candid");});
test("candidates -> candid", function() {deepEqual( Stem("candidates"), "candid");});
test("candidatus -> candidatu", function() {deepEqual( Stem("candidatus"), "candidatu");});
test("candidly -> candidli", function() {deepEqual( Stem("candidly"), "candidli");});
test("candied -> candi", function() {deepEqual( Stem("candied"), "candi");});
test("candle -> candl", function() {deepEqual( Stem("candle"), "candl");});
test("candles -> candl", function() {deepEqual( Stem("candles"), "candl");});
test("candlestick -> candlestick", function() {deepEqual( Stem("candlestick"), "candlestick");});
test("candlesticks -> candlestick", function() {deepEqual( Stem("candlesticks"), "candlestick");});
test("candour -> candour", function() {deepEqual( Stem("candour"), "candour");});
test("candy -> candi", function() {deepEqual( Stem("candy"), "candi");});
test("cane -> cane", function() {deepEqual( Stem("cane"), "cane");});
test("caned -> cane", function() {deepEqual( Stem("caned"), "cane");});
test("canidius -> canidiu", function() {deepEqual( Stem("canidius"), "canidiu");});
test("canine -> canin", function() {deepEqual( Stem("canine"), "canin");});
test("canister -> canist", function() {deepEqual( Stem("canister"), "canist");});
test("cank -> cank", function() {deepEqual( Stem("cank"), "cank");});
test("canker -> canker", function() {deepEqual( Stem("canker"), "canker");});
test("cankerblossom -> cankerblossom", function() {deepEqual( Stem("cankerblossom"), "cankerblossom");});
test("cankers -> canker", function() {deepEqual( Stem("cankers"), "canker");});
test("cannes -> cann", function() {deepEqual( Stem("cannes"), "cann");});
test("cannibal -> cannib", function() {deepEqual( Stem("cannibal"), "cannib");});
test("cannibally -> cannib", function() {deepEqual( Stem("cannibally"), "cannib");});
test("cannibals -> cannib", function() {deepEqual( Stem("cannibals"), "cannib");});
test("cannon -> cannon", function() {deepEqual( Stem("cannon"), "cannon");});
test("cannonade -> cannonad", function() {deepEqual( Stem("cannonade"), "cannonad");});
test("cannonading -> cannonad", function() {deepEqual( Stem("cannonading"), "cannonad");});
test("cannoneer -> cannon", function() {deepEqual( Stem("cannoneer"), "cannon");});
test("cannons -> cannon", function() {deepEqual( Stem("cannons"), "cannon");});
test("cannot -> cannot", function() {deepEqual( Stem("cannot"), "cannot");});
test("canon -> canon", function() {deepEqual( Stem("canon"), "canon");});
test("canoness -> cano", function() {deepEqual( Stem("canoness"), "cano");});
test("canoniz -> canoniz", function() {deepEqual( Stem("canoniz"), "canoniz");});
test("canonize -> canon", function() {deepEqual( Stem("canonize"), "canon");});
test("canonized -> canon", function() {deepEqual( Stem("canonized"), "canon");});
test("canons -> canon", function() {deepEqual( Stem("canons"), "canon");});
test("canopied -> canopi", function() {deepEqual( Stem("canopied"), "canopi");});
test("canopies -> canopi", function() {deepEqual( Stem("canopies"), "canopi");});
test("canopy -> canopi", function() {deepEqual( Stem("canopy"), "canopi");});
test("canova -> canova", function() {deepEqual( Stem("canova"), "canova");});
test("canst -> canst", function() {deepEqual( Stem("canst"), "canst");});
test("canstick -> canstick", function() {deepEqual( Stem("canstick"), "canstick");});
test("cantab -> cantab", function() {deepEqual( Stem("cantab"), "cantab");});
test("cantata -> cantata", function() {deepEqual( Stem("cantata"), "cantata");});
test("canter -> canter", function() {deepEqual( Stem("canter"), "canter");});
test("canterbury -> canterburi", function() {deepEqual( Stem("canterbury"), "canterburi");});
test("cantered -> canter", function() {deepEqual( Stem("cantered"), "canter");});
test("cantering -> canter", function() {deepEqual( Stem("cantering"), "canter");});
test("cantle -> cantl", function() {deepEqual( Stem("cantle"), "cantl");});
test("cantonment -> canton", function() {deepEqual( Stem("cantonment"), "canton");});
test("cantons -> canton", function() {deepEqual( Stem("cantons"), "canton");});
test("canus -> canu", function() {deepEqual( Stem("canus"), "canu");});
test("canvas -> canva", function() {deepEqual( Stem("canvas"), "canva");});
test("canvass -> canvass", function() {deepEqual( Stem("canvass"), "canvass");});
test("canvassed -> canvass", function() {deepEqual( Stem("canvassed"), "canvass");});
test("canzonet -> canzonet", function() {deepEqual( Stem("canzonet"), "canzonet");});
test("cap -> cap", function() {deepEqual( Stem("cap"), "cap");});
test("capability -> capabl", function() {deepEqual( Stem("capability"), "capabl");});
test("capable -> capabl", function() {deepEqual( Stem("capable"), "capabl");});
test("capacious -> capaci", function() {deepEqual( Stem("capacious"), "capaci");});
test("capacities -> capac", function() {deepEqual( Stem("capacities"), "capac");});
test("capacity -> capac", function() {deepEqual( Stem("capacity"), "capac");});
test("caparison -> caparison", function() {deepEqual( Stem("caparison"), "caparison");});
test("capdv -> capdv", function() {deepEqual( Stem("capdv"), "capdv");});
test("cape -> cape", function() {deepEqual( Stem("cape"), "cape");});
test("capel -> capel", function() {deepEqual( Stem("capel"), "capel");});
test("capels -> capel", function() {deepEqual( Stem("capels"), "capel");});
test("caper -> caper", function() {deepEqual( Stem("caper"), "caper");});
test("capered -> caper", function() {deepEqual( Stem("capered"), "caper");});
test("capering -> caper", function() {deepEqual( Stem("capering"), "caper");});
test("capers -> caper", function() {deepEqual( Stem("capers"), "caper");});
test("capet -> capet", function() {deepEqual( Stem("capet"), "capet");});
test("caphis -> caphi", function() {deepEqual( Stem("caphis"), "caphi");});
test("capilet -> capilet", function() {deepEqual( Stem("capilet"), "capilet");});
test("capitaine -> capitain", function() {deepEqual( Stem("capitaine"), "capitain");});
test("capital -> capit", function() {deepEqual( Stem("capital"), "capit");});
test("capitalized -> capit", function() {deepEqual( Stem("capitalized"), "capit");});
test("capitals -> capit", function() {deepEqual( Stem("capitals"), "capit");});
test("capite -> capit", function() {deepEqual( Stem("capite"), "capit");});
test("capitol -> capitol", function() {deepEqual( Stem("capitol"), "capitol");});
test("capitulate -> capitul", function() {deepEqual( Stem("capitulate"), "capitul");});
test("capitulation -> capitul", function() {deepEqual( Stem("capitulation"), "capitul");});
test("capocchia -> capocchia", function() {deepEqual( Stem("capocchia"), "capocchia");});
test("capon -> capon", function() {deepEqual( Stem("capon"), "capon");});
test("capons -> capon", function() {deepEqual( Stem("capons"), "capon");});
test("capp -> capp", function() {deepEqual( Stem("capp"), "capp");});
test("cappadocia -> cappadocia", function() {deepEqual( Stem("cappadocia"), "cappadocia");});
test("capri -> capri", function() {deepEqual( Stem("capri"), "capri");});
test("capriccio -> capriccio", function() {deepEqual( Stem("capriccio"), "capriccio");});
test("capricious -> caprici", function() {deepEqual( Stem("capricious"), "caprici");});
test("caps -> cap", function() {deepEqual( Stem("caps"), "cap");});
test("capt -> capt", function() {deepEqual( Stem("capt"), "capt");});
test("captain -> captain", function() {deepEqual( Stem("captain"), "captain");});
test("captains -> captain", function() {deepEqual( Stem("captains"), "captain");});
test("captainship -> captainship", function() {deepEqual( Stem("captainship"), "captainship");});
test("capting -> capt", function() {deepEqual( Stem("capting"), "capt");});
test("captious -> captiou", function() {deepEqual( Stem("captious"), "captiou");});
test("captivate -> captiv", function() {deepEqual( Stem("captivate"), "captiv");});
test("captivated -> captiv", function() {deepEqual( Stem("captivated"), "captiv");});
test("captivates -> captiv", function() {deepEqual( Stem("captivates"), "captiv");});
test("captive -> captiv", function() {deepEqual( Stem("captive"), "captiv");});
test("captives -> captiv", function() {deepEqual( Stem("captives"), "captiv");});
test("captivity -> captiv", function() {deepEqual( Stem("captivity"), "captiv");});
test("captum -> captum", function() {deepEqual( Stem("captum"), "captum");});
test("capture -> captur", function() {deepEqual( Stem("capture"), "captur");});
test("captured -> captur", function() {deepEqual( Stem("captured"), "captur");});
test("capuchin -> capuchin", function() {deepEqual( Stem("capuchin"), "capuchin");});
test("capucius -> capuciu", function() {deepEqual( Stem("capucius"), "capuciu");});
test("capulet -> capulet", function() {deepEqual( Stem("capulet"), "capulet");});
test("capulets -> capulet", function() {deepEqual( Stem("capulets"), "capulet");});
test("car -> car", function() {deepEqual( Stem("car"), "car");});
test("carack -> carack", function() {deepEqual( Stem("carack"), "carack");});
test("caracks -> carack", function() {deepEqual( Stem("caracks"), "carack");});
test("caradocs -> caradoc", function() {deepEqual( Stem("caradocs"), "caradoc");});
test("caradori -> caradori", function() {deepEqual( Stem("caradori"), "caradori");});
test("carat -> carat", function() {deepEqual( Stem("carat"), "carat");});
test("caravan -> caravan", function() {deepEqual( Stem("caravan"), "caravan");});
test("caraways -> carawai", function() {deepEqual( Stem("caraways"), "carawai");});
test("carbonado -> carbonado", function() {deepEqual( Stem("carbonado"), "carbonado");});
test("carbonell -> carbonel", function() {deepEqual( Stem("carbonell"), "carbonel");});
test("carbuncle -> carbuncl", function() {deepEqual( Stem("carbuncle"), "carbuncl");});
test("carbuncled -> carbuncl", function() {deepEqual( Stem("carbuncled"), "carbuncl");});
test("carbuncles -> carbuncl", function() {deepEqual( Stem("carbuncles"), "carbuncl");});
test("carcanet -> carcanet", function() {deepEqual( Stem("carcanet"), "carcanet");});
test("carcase -> carcas", function() {deepEqual( Stem("carcase"), "carcas");});
test("carcases -> carcas", function() {deepEqual( Stem("carcases"), "carcas");});
test("carcass -> carcass", function() {deepEqual( Stem("carcass"), "carcass");});
test("carcasses -> carcass", function() {deepEqual( Stem("carcasses"), "carcass");});
test("card -> card", function() {deepEqual( Stem("card"), "card");});
test("cardboard -> cardboard", function() {deepEqual( Stem("cardboard"), "cardboard");});
test("cardecue -> cardecu", function() {deepEqual( Stem("cardecue"), "cardecu");});
test("carded -> card", function() {deepEqual( Stem("carded"), "card");});
test("carders -> carder", function() {deepEqual( Stem("carders"), "carder");});
test("cardinal -> cardin", function() {deepEqual( Stem("cardinal"), "cardin");});
test("cardinally -> cardin", function() {deepEqual( Stem("cardinally"), "cardin");});
test("cardinals -> cardin", function() {deepEqual( Stem("cardinals"), "cardin");});
test("cardmaker -> cardmak", function() {deepEqual( Stem("cardmaker"), "cardmak");});
test("cards -> card", function() {deepEqual( Stem("cards"), "card");});
test("carduus -> carduu", function() {deepEqual( Stem("carduus"), "carduu");});
test("care -> care", function() {deepEqual( Stem("care"), "care");});
test("cared -> care", function() {deepEqual( Stem("cared"), "care");});
test("career -> career", function() {deepEqual( Stem("career"), "career");});
test("careered -> career", function() {deepEqual( Stem("careered"), "career");});
test("careers -> career", function() {deepEqual( Stem("careers"), "career");});
test("careful -> care", function() {deepEqual( Stem("careful"), "care");});
test("carefully -> carefulli", function() {deepEqual( Stem("carefully"), "carefulli");});
test("careless -> careless", function() {deepEqual( Stem("careless"), "careless");});
test("carelessly -> carelessli", function() {deepEqual( Stem("carelessly"), "carelessli");});
test("carelessness -> careless", function() {deepEqual( Stem("carelessness"), "careless");});
test("cares -> care", function() {deepEqual( Stem("cares"), "care");});
test("caress -> caress", function() {deepEqual( Stem("caress"), "caress");});
test("caresses -> caress", function() {deepEqual( Stem("caresses"), "caress");});
test("caressing -> caress", function() {deepEqual( Stem("caressing"), "caress");});
test("caret -> caret", function() {deepEqual( Stem("caret"), "caret");});
test("carew -> carew", function() {deepEqual( Stem("carew"), "carew");});
test("cargo -> cargo", function() {deepEqual( Stem("cargo"), "cargo");});
test("cargoes -> cargo", function() {deepEqual( Stem("cargoes"), "cargo");});
test("caricature -> caricatur", function() {deepEqual( Stem("caricature"), "caricatur");});
test("caricatured -> caricatur", function() {deepEqual( Stem("caricatured"), "caricatur");});
test("caricatures -> caricatur", function() {deepEqual( Stem("caricatures"), "caricatur");});
test("caricaturing -> caricatur", function() {deepEqual( Stem("caricaturing"), "caricatur");});
test("caring -> care", function() {deepEqual( Stem("caring"), "care");});
test("carino -> carino", function() {deepEqual( Stem("carino"), "carino");});
test("carl -> carl", function() {deepEqual( Stem("carl"), "carl");});
test("carlisle -> carlisl", function() {deepEqual( Stem("carlisle"), "carlisl");});
test("carlot -> carlot", function() {deepEqual( Stem("carlot"), "carlot");});
test("carlton -> carlton", function() {deepEqual( Stem("carlton"), "carlton");});
test("carman -> carman", function() {deepEqual( Stem("carman"), "carman");});
test("carmarthenshire -> carmarthenshir", function() {deepEqual( Stem("carmarthenshire"), "carmarthenshir");});
test("carmen -> carmen", function() {deepEqual( Stem("carmen"), "carmen");});
test("carnage -> carnag", function() {deepEqual( Stem("carnage"), "carnag");});
test("carnal -> carnal", function() {deepEqual( Stem("carnal"), "carnal");});
test("carnally -> carnal", function() {deepEqual( Stem("carnally"), "carnal");});
test("carnarvonshire -> carnarvonshir", function() {deepEqual( Stem("carnarvonshire"), "carnarvonshir");});
test("carnation -> carnat", function() {deepEqual( Stem("carnation"), "carnat");});
test("carnations -> carnat", function() {deepEqual( Stem("carnations"), "carnat");});
test("carnival -> carniv", function() {deepEqual( Stem("carnival"), "carniv");});
test("carol -> carol", function() {deepEqual( Stem("carol"), "carol");});
test("carous -> carou", function() {deepEqual( Stem("carous"), "carou");});
test("carouse -> carous", function() {deepEqual( Stem("carouse"), "carous");});
test("caroused -> carous", function() {deepEqual( Stem("caroused"), "carous");});
test("carouses -> carous", function() {deepEqual( Stem("carouses"), "carous");});
test("carousing -> carous", function() {deepEqual( Stem("carousing"), "carous");});
test("carp -> carp", function() {deepEqual( Stem("carp"), "carp");});
test("carpenter -> carpent", function() {deepEqual( Stem("carpenter"), "carpent");});
test("carper -> carper", function() {deepEqual( Stem("carper"), "carper");});
test("carpers -> carper", function() {deepEqual( Stem("carpers"), "carper");});
test("carpet -> carpet", function() {deepEqual( Stem("carpet"), "carpet");});
test("carpets -> carpet", function() {deepEqual( Stem("carpets"), "carpet");});
test("carping -> carp", function() {deepEqual( Stem("carping"), "carp");});
test("carps -> carp", function() {deepEqual( Stem("carps"), "carp");});
test("carr -> carr", function() {deepEqual( Stem("carr"), "carr");});
test("carriage -> carriag", function() {deepEqual( Stem("carriage"), "carriag");});
test("carriages -> carriag", function() {deepEqual( Stem("carriages"), "carriag");});
test("carried -> carri", function() {deepEqual( Stem("carried"), "carri");});
test("carrier -> carrier", function() {deepEqual( Stem("carrier"), "carrier");});
test("carriers -> carrier", function() {deepEqual( Stem("carriers"), "carrier");});
test("carries -> carri", function() {deepEqual( Stem("carries"), "carri");});
test("carrion -> carrion", function() {deepEqual( Stem("carrion"), "carrion");});
test("carrions -> carrion", function() {deepEqual( Stem("carrions"), "carrion");});
test("carrots -> carrot", function() {deepEqual( Stem("carrots"), "carrot");});
test("carry -> carri", function() {deepEqual( Stem("carry"), "carri");});
test("carrying -> carri", function() {deepEqual( Stem("carrying"), "carri");});
test("cars -> car", function() {deepEqual( Stem("cars"), "car");});
test("cart -> cart", function() {deepEqual( Stem("cart"), "cart");});
test("carte -> cart", function() {deepEqual( Stem("carte"), "cart");});
test("carters -> carter", function() {deepEqual( Stem("carters"), "carter");});
test("carthage -> carthag", function() {deepEqual( Stem("carthage"), "carthag");});
test("carts -> cart", function() {deepEqual( Stem("carts"), "cart");});
test("carv -> carv", function() {deepEqual( Stem("carv"), "carv");});
test("carve -> carv", function() {deepEqual( Stem("carve"), "carv");});
test("carved -> carv", function() {deepEqual( Stem("carved"), "carv");});
test("carver -> carver", function() {deepEqual( Stem("carver"), "carver");});
test("carves -> carv", function() {deepEqual( Stem("carves"), "carv");});
test("carving -> carv", function() {deepEqual( Stem("carving"), "carv");});
test("cas -> ca", function() {deepEqual( Stem("cas"), "ca");});
test("casa -> casa", function() {deepEqual( Stem("casa"), "casa");});
test("casaer -> casaer", function() {deepEqual( Stem("casaer"), "casaer");});
test("casca -> casca", function() {deepEqual( Stem("casca"), "casca");});
test("case -> case", function() {deepEqual( Stem("case"), "case");});
test("cased -> case", function() {deepEqual( Stem("cased"), "case");});
test("casement -> casement", function() {deepEqual( Stem("casement"), "casement");});
test("casements -> casement", function() {deepEqual( Stem("casements"), "casement");});
test("cases -> case", function() {deepEqual( Stem("cases"), "case");});
test("cash -> cash", function() {deepEqual( Stem("cash"), "cash");});
test("cashed -> cash", function() {deepEqual( Stem("cashed"), "cash");});
test("cashier -> cashier", function() {deepEqual( Stem("cashier"), "cashier");});
test("cashmere -> cashmer", function() {deepEqual( Stem("cashmere"), "cashmer");});
test("casing -> case", function() {deepEqual( Stem("casing"), "case");});
test("casinos -> casino", function() {deepEqual( Stem("casinos"), "casino");});
test("cask -> cask", function() {deepEqual( Stem("cask"), "cask");});
test("casket -> casket", function() {deepEqual( Stem("casket"), "casket");});
test("casketed -> casket", function() {deepEqual( Stem("casketed"), "casket");});
test("caskets -> casket", function() {deepEqual( Stem("caskets"), "casket");});
test("casks -> cask", function() {deepEqual( Stem("casks"), "cask");});
test("casque -> casqu", function() {deepEqual( Stem("casque"), "casqu");});
test("casques -> casqu", function() {deepEqual( Stem("casques"), "casqu");});
test("cassado -> cassado", function() {deepEqual( Stem("cassado"), "cassado");});
test("cassandra -> cassandra", function() {deepEqual( Stem("cassandra"), "cassandra");});
test("cassibelan -> cassibelan", function() {deepEqual( Stem("cassibelan"), "cassibelan");});
test("cassio -> cassio", function() {deepEqual( Stem("cassio"), "cassio");});
test("cassius -> cassiu", function() {deepEqual( Stem("cassius"), "cassiu");});
test("cassocks -> cassock", function() {deepEqual( Stem("cassocks"), "cassock");});
test("cast -> cast", function() {deepEqual( Stem("cast"), "cast");});
test("castalion -> castalion", function() {deepEqual( Stem("castalion"), "castalion");});
test("castaway -> castawai", function() {deepEqual( Stem("castaway"), "castawai");});
test("castaways -> castawai", function() {deepEqual( Stem("castaways"), "castawai");});
test("caste -> cast", function() {deepEqual( Stem("caste"), "cast");});
test("casted -> cast", function() {deepEqual( Stem("casted"), "cast");});
test("caster -> caster", function() {deepEqual( Stem("caster"), "caster");});
test("castigate -> castig", function() {deepEqual( Stem("castigate"), "castig");});
test("castigation -> castig", function() {deepEqual( Stem("castigation"), "castig");});
test("castile -> castil", function() {deepEqual( Stem("castile"), "castil");});
test("castiliano -> castiliano", function() {deepEqual( Stem("castiliano"), "castiliano");});
test("casting -> cast", function() {deepEqual( Stem("casting"), "cast");});
test("castle -> castl", function() {deepEqual( Stem("castle"), "castl");});
test("castlefogarty -> castlefogarti", function() {deepEqual( Stem("castlefogarty"), "castlefogarti");});
test("castlemouldy -> castlemouldi", function() {deepEqual( Stem("castlemouldy"), "castlemouldi");});
test("castles -> castl", function() {deepEqual( Stem("castles"), "castl");});
test("castletoddy -> castletoddi", function() {deepEqual( Stem("castletoddy"), "castletoddi");});
test("casts -> cast", function() {deepEqual( Stem("casts"), "cast");});
test("casual -> casual", function() {deepEqual( Stem("casual"), "casual");});
test("casually -> casual", function() {deepEqual( Stem("casually"), "casual");});
test("casualties -> casualti", function() {deepEqual( Stem("casualties"), "casualti");});
test("casualty -> casualti", function() {deepEqual( Stem("casualty"), "casualti");});
test("casuist -> casuist", function() {deepEqual( Stem("casuist"), "casuist");});
test("cat -> cat", function() {deepEqual( Stem("cat"), "cat");});
test("cataian -> cataian", function() {deepEqual( Stem("cataian"), "cataian");});
test("catalani -> catalani", function() {deepEqual( Stem("catalani"), "catalani");});
test("catalogue -> catalogu", function() {deepEqual( Stem("catalogue"), "catalogu");});
test("cataplasm -> cataplasm", function() {deepEqual( Stem("cataplasm"), "cataplasm");});
test("cataract -> cataract", function() {deepEqual( Stem("cataract"), "cataract");});
test("cataracts -> cataract", function() {deepEqual( Stem("cataracts"), "cataract");});
test("catarrhs -> catarrh", function() {deepEqual( Stem("catarrhs"), "catarrh");});
test("catastrophe -> catastroph", function() {deepEqual( Stem("catastrophe"), "catastroph");});
test("catch -> catch", function() {deepEqual( Stem("catch"), "catch");});
test("catcher -> catcher", function() {deepEqual( Stem("catcher"), "catcher");});
test("catches -> catch", function() {deepEqual( Stem("catches"), "catch");});
test("catching -> catch", function() {deepEqual( Stem("catching"), "catch");});
test("cate -> cate", function() {deepEqual( Stem("cate"), "cate");});
test("catechising -> catechis", function() {deepEqual( Stem("catechising"), "catechis");});
test("catechism -> catech", function() {deepEqual( Stem("catechism"), "catech");});
test("catechize -> catech", function() {deepEqual( Stem("catechize"), "catech");});
test("cater -> cater", function() {deepEqual( Stem("cater"), "cater");});
test("caterpillars -> caterpillar", function() {deepEqual( Stem("caterpillars"), "caterpillar");});
test("caters -> cater", function() {deepEqual( Stem("caters"), "cater");});
test("caterwauling -> caterwaul", function() {deepEqual( Stem("caterwauling"), "caterwaul");});
test("cates -> cate", function() {deepEqual( Stem("cates"), "cate");});
test("catesby -> catesbi", function() {deepEqual( Stem("catesby"), "catesbi");});
test("cathaydral -> cathaydr", function() {deepEqual( Stem("cathaydral"), "cathaydr");});
test("cathedral -> cathedr", function() {deepEqual( Stem("cathedral"), "cathedr");});
test("catherine -> catherin", function() {deepEqual( Stem("catherine"), "catherin");});
test("catholic -> cathol", function() {deepEqual( Stem("catholic"), "cathol");});
test("catlike -> catlik", function() {deepEqual( Stem("catlike"), "catlik");});
test("catling -> catl", function() {deepEqual( Stem("catling"), "catl");});
test("catlings -> catl", function() {deepEqual( Stem("catlings"), "catl");});
test("cato -> cato", function() {deepEqual( Stem("cato"), "cato");});
test("cats -> cat", function() {deepEqual( Stem("cats"), "cat");});
test("cattle -> cattl", function() {deepEqual( Stem("cattle"), "cattl");});
test("caucasus -> caucasu", function() {deepEqual( Stem("caucasus"), "caucasu");});
test("caudle -> caudl", function() {deepEqual( Stem("caudle"), "caudl");});
test("cauf -> cauf", function() {deepEqual( Stem("cauf"), "cauf");});
test("caught -> caught", function() {deepEqual( Stem("caught"), "caught");});
test("cauldron -> cauldron", function() {deepEqual( Stem("cauldron"), "cauldron");});
test("cauliflowers -> cauliflow", function() {deepEqual( Stem("cauliflowers"), "cauliflow");});
test("caus -> cau", function() {deepEqual( Stem("caus"), "cau");});
test("cause -> caus", function() {deepEqual( Stem("cause"), "caus");});
test("caused -> caus", function() {deepEqual( Stem("caused"), "caus");});
test("causeless -> causeless", function() {deepEqual( Stem("causeless"), "causeless");});
test("causer -> causer", function() {deepEqual( Stem("causer"), "causer");});
test("causes -> caus", function() {deepEqual( Stem("causes"), "caus");});
test("causest -> causest", function() {deepEqual( Stem("causest"), "causest");});
test("causeth -> causeth", function() {deepEqual( Stem("causeth"), "causeth");});
test("cautel -> cautel", function() {deepEqual( Stem("cautel"), "cautel");});
test("cautelous -> cautel", function() {deepEqual( Stem("cautelous"), "cautel");});
test("cautels -> cautel", function() {deepEqual( Stem("cautels"), "cautel");});
test("cauterizing -> cauter", function() {deepEqual( Stem("cauterizing"), "cauter");});
test("caution -> caution", function() {deepEqual( Stem("caution"), "caution");});
test("cautioned -> caution", function() {deepEqual( Stem("cautioned"), "caution");});
test("cautions -> caution", function() {deepEqual( Stem("cautions"), "caution");});
test("cautious -> cautiou", function() {deepEqual( Stem("cautious"), "cautiou");});
test("cavaleiro -> cavaleiro", function() {deepEqual( Stem("cavaleiro"), "cavaleiro");});
test("cavalery -> cavaleri", function() {deepEqual( Stem("cavalery"), "cavaleri");});
test("cavaliers -> cavali", function() {deepEqual( Stem("cavaliers"), "cavali");});
test("cavalry -> cavalri", function() {deepEqual( Stem("cavalry"), "cavalri");});
test("cave -> cave", function() {deepEqual( Stem("cave"), "cave");});
test("cavendish -> cavendish", function() {deepEqual( Stem("cavendish"), "cavendish");});
test("cavern -> cavern", function() {deepEqual( Stem("cavern"), "cavern");});
test("caverns -> cavern", function() {deepEqual( Stem("caverns"), "cavern");});
test("caves -> cave", function() {deepEqual( Stem("caves"), "cave");});
test("caveto -> caveto", function() {deepEqual( Stem("caveto"), "caveto");});
test("caviary -> caviari", function() {deepEqual( Stem("caviary"), "caviari");});
test("cavil -> cavil", function() {deepEqual( Stem("cavil"), "cavil");});
test("cavilling -> cavil", function() {deepEqual( Stem("cavilling"), "cavil");});
test("cawdor -> cawdor", function() {deepEqual( Stem("cawdor"), "cawdor");});
test("cawdron -> cawdron", function() {deepEqual( Stem("cawdron"), "cawdron");});
test("cawing -> caw", function() {deepEqual( Stem("cawing"), "caw");});
test("cayenne -> cayenn", function() {deepEqual( Stem("cayenne"), "cayenn");});
test("caypable -> caypabl", function() {deepEqual( Stem("caypable"), "caypabl");});
test("ce -> ce", function() {deepEqual( Stem("ce"), "ce");});
test("ceas -> cea", function() {deepEqual( Stem("ceas"), "cea");});
test("cease -> ceas", function() {deepEqual( Stem("cease"), "ceas");});
test("ceased -> ceas", function() {deepEqual( Stem("ceased"), "ceas");});
test("ceaseless -> ceaseless", function() {deepEqual( Stem("ceaseless"), "ceaseless");});
test("ceases -> ceas", function() {deepEqual( Stem("ceases"), "ceas");});
test("ceaseth -> ceaseth", function() {deepEqual( Stem("ceaseth"), "ceaseth");});
test("ceasing -> ceas", function() {deepEqual( Stem("ceasing"), "ceas");});
test("cecilia -> cecilia", function() {deepEqual( Stem("cecilia"), "cecilia");});
test("cedar -> cedar", function() {deepEqual( Stem("cedar"), "cedar");});
test("cedars -> cedar", function() {deepEqual( Stem("cedars"), "cedar");});
test("ceded -> cede", function() {deepEqual( Stem("ceded"), "cede");});
test("cedius -> cediu", function() {deepEqual( Stem("cedius"), "cediu");});
test("ceiling -> ceil", function() {deepEqual( Stem("ceiling"), "ceil");});
test("celebrate -> celebr", function() {deepEqual( Stem("celebrate"), "celebr");});
test("celebrated -> celebr", function() {deepEqual( Stem("celebrated"), "celebr");});
test("celebrates -> celebr", function() {deepEqual( Stem("celebrates"), "celebr");});
test("celebration -> celebr", function() {deepEqual( Stem("celebration"), "celebr");});
test("celerity -> celer", function() {deepEqual( Stem("celerity"), "celer");});
test("celestial -> celesti", function() {deepEqual( Stem("celestial"), "celesti");});
test("celia -> celia", function() {deepEqual( Stem("celia"), "celia");});
test("cell -> cell", function() {deepEqual( Stem("cell"), "cell");});
test("cellar -> cellar", function() {deepEqual( Stem("cellar"), "cellar");});
test("cellarage -> cellarag", function() {deepEqual( Stem("cellarage"), "cellarag");});
test("cellaret -> cellaret", function() {deepEqual( Stem("cellaret"), "cellaret");});
test("cellars -> cellar", function() {deepEqual( Stem("cellars"), "cellar");});
test("celsa -> celsa", function() {deepEqual( Stem("celsa"), "celsa");});
test("cement -> cement", function() {deepEqual( Stem("cement"), "cement");});
test("censer -> censer", function() {deepEqual( Stem("censer"), "censer");});
test("censor -> censor", function() {deepEqual( Stem("censor"), "censor");});
test("censorinus -> censorinu", function() {deepEqual( Stem("censorinus"), "censorinu");});
test("censorious -> censori", function() {deepEqual( Stem("censorious"), "censori");});
test("censur -> censur", function() {deepEqual( Stem("censur"), "censur");});
test("censure -> censur", function() {deepEqual( Stem("censure"), "censur");});
test("censured -> censur", function() {deepEqual( Stem("censured"), "censur");});
test("censurers -> censur", function() {deepEqual( Stem("censurers"), "censur");});
test("censures -> censur", function() {deepEqual( Stem("censures"), "censur");});
test("censuring -> censur", function() {deepEqual( Stem("censuring"), "censur");});
test("cent -> cent", function() {deepEqual( Stem("cent"), "cent");});
test("centaur -> centaur", function() {deepEqual( Stem("centaur"), "centaur");});
test("centaurs -> centaur", function() {deepEqual( Stem("centaurs"), "centaur");});
test("centre -> centr", function() {deepEqual( Stem("centre"), "centr");});
test("centred -> centr", function() {deepEqual( Stem("centred"), "centr");});
test("cents -> cent", function() {deepEqual( Stem("cents"), "cent");});
test("centuries -> centuri", function() {deepEqual( Stem("centuries"), "centuri");});
test("centurion -> centurion", function() {deepEqual( Stem("centurion"), "centurion");});
test("centurions -> centurion", function() {deepEqual( Stem("centurions"), "centurion");});
test("century -> centuri", function() {deepEqual( Stem("century"), "centuri");});
test("ceramony -> ceramoni", function() {deepEqual( Stem("ceramony"), "ceramoni");});
test("cerberus -> cerberu", function() {deepEqual( Stem("cerberus"), "cerberu");});
test("cerecloth -> cerecloth", function() {deepEqual( Stem("cerecloth"), "cerecloth");});
test("cerements -> cerement", function() {deepEqual( Stem("cerements"), "cerement");});
test("ceremonial -> ceremoni", function() {deepEqual( Stem("ceremonial"), "ceremoni");});
test("ceremonies -> ceremoni", function() {deepEqual( Stem("ceremonies"), "ceremoni");});
test("ceremonious -> ceremoni", function() {deepEqual( Stem("ceremonious"), "ceremoni");});
test("ceremoniously -> ceremoni", function() {deepEqual( Stem("ceremoniously"), "ceremoni");});
test("ceremony -> ceremoni", function() {deepEqual( Stem("ceremony"), "ceremoni");});
test("ceres -> cere", function() {deepEqual( Stem("ceres"), "cere");});
test("cerns -> cern", function() {deepEqual( Stem("cerns"), "cern");});
test("certain -> certain", function() {deepEqual( Stem("certain"), "certain");});
test("certainer -> certain", function() {deepEqual( Stem("certainer"), "certain");});
test("certainly -> certainli", function() {deepEqual( Stem("certainly"), "certainli");});
test("certainties -> certainti", function() {deepEqual( Stem("certainties"), "certainti");});
test("certainty -> certainti", function() {deepEqual( Stem("certainty"), "certainti");});
test("certes -> cert", function() {deepEqual( Stem("certes"), "cert");});
test("certificate -> certif", function() {deepEqual( Stem("certificate"), "certif");});
test("certified -> certifi", function() {deepEqual( Stem("certified"), "certifi");});
test("certifies -> certifi", function() {deepEqual( Stem("certifies"), "certifi");});
test("certify -> certifi", function() {deepEqual( Stem("certify"), "certifi");});
test("ces -> ce", function() {deepEqual( Stem("ces"), "ce");});
test("cesario -> cesario", function() {deepEqual( Stem("cesario"), "cesario");});
test("cess -> cess", function() {deepEqual( Stem("cess"), "cess");});
test("cessation -> cessat", function() {deepEqual( Stem("cessation"), "cessat");});
test("cesse -> cess", function() {deepEqual( Stem("cesse"), "cess");});
test("cest -> cest", function() {deepEqual( Stem("cest"), "cest");});
test("cestern -> cestern", function() {deepEqual( Stem("cestern"), "cestern");});
test("cetera -> cetera", function() {deepEqual( Stem("cetera"), "cetera");});
test("cette -> cett", function() {deepEqual( Stem("cette"), "cett");});
test("chaces -> chace", function() {deepEqual( Stem("chaces"), "chace");});
test("chaf -> chaf", function() {deepEqual( Stem("chaf"), "chaf");});
test("chafe -> chafe", function() {deepEqual( Stem("chafe"), "chafe");});
test("chafed -> chafe", function() {deepEqual( Stem("chafed"), "chafe");});
test("chafes -> chafe", function() {deepEqual( Stem("chafes"), "chafe");});
test("chaff -> chaff", function() {deepEqual( Stem("chaff"), "chaff");});
test("chaffers -> chaffer", function() {deepEqual( Stem("chaffers"), "chaffer");});
test("chaffless -> chaffless", function() {deepEqual( Stem("chaffless"), "chaffless");});
test("chafing -> chafe", function() {deepEqual( Stem("chafing"), "chafe");});
test("chain -> chain", function() {deepEqual( Stem("chain"), "chain");});
test("chained -> chain", function() {deepEqual( Stem("chained"), "chain");});
test("chaining -> chain", function() {deepEqual( Stem("chaining"), "chain");});
test("chains -> chain", function() {deepEqual( Stem("chains"), "chain");});
test("chair -> chair", function() {deepEqual( Stem("chair"), "chair");});
test("chairs -> chair", function() {deepEqual( Stem("chairs"), "chair");});
test("chaise -> chais", function() {deepEqual( Stem("chaise"), "chais");});
test("chaises -> chais", function() {deepEqual( Stem("chaises"), "chais");});
test("chaldron -> chaldron", function() {deepEqual( Stem("chaldron"), "chaldron");});
test("chalic -> chalic", function() {deepEqual( Stem("chalic"), "chalic");});
test("chalice -> chalic", function() {deepEqual( Stem("chalice"), "chalic");});
test("chalices -> chalic", function() {deepEqual( Stem("chalices"), "chalic");});
test("chalk -> chalk", function() {deepEqual( Stem("chalk"), "chalk");});
test("chalks -> chalk", function() {deepEqual( Stem("chalks"), "chalk");});
test("chalky -> chalki", function() {deepEqual( Stem("chalky"), "chalki");});
test("challeng -> challeng", function() {deepEqual( Stem("challeng"), "challeng");});
test("challenge -> challeng", function() {deepEqual( Stem("challenge"), "challeng");});
test("challenged -> challeng", function() {deepEqual( Stem("challenged"), "challeng");});
test("challenger -> challeng", function() {deepEqual( Stem("challenger"), "challeng");});
test("challengers -> challeng", function() {deepEqual( Stem("challengers"), "challeng");});
test("challenges -> challeng", function() {deepEqual( Stem("challenges"), "challeng");});
test("cham -> cham", function() {deepEqual( Stem("cham"), "cham");});
test("chamber -> chamber", function() {deepEqual( Stem("chamber"), "chamber");});
test("chamberers -> chamber", function() {deepEqual( Stem("chamberers"), "chamber");});
test("chamberlain -> chamberlain", function() {deepEqual( Stem("chamberlain"), "chamberlain");});
test("chamberlains -> chamberlain", function() {deepEqual( Stem("chamberlains"), "chamberlain");});
test("chambermaid -> chambermaid", function() {deepEqual( Stem("chambermaid"), "chambermaid");});
test("chambermaids -> chambermaid", function() {deepEqual( Stem("chambermaids"), "chambermaid");});
test("chambers -> chamber", function() {deepEqual( Stem("chambers"), "chamber");});
test("chambre -> chambr", function() {deepEqual( Stem("chambre"), "chambr");});
test("chameleon -> chameleon", function() {deepEqual( Stem("chameleon"), "chameleon");});
test("champ -> champ", function() {deepEqual( Stem("champ"), "champ");});
test("champagne -> champagn", function() {deepEqual( Stem("champagne"), "champagn");});
test("champain -> champain", function() {deepEqual( Stem("champain"), "champain");});
test("champains -> champain", function() {deepEqual( Stem("champains"), "champain");});
test("champignac -> champignac", function() {deepEqual( Stem("champignac"), "champignac");});
test("champion -> champion", function() {deepEqual( Stem("champion"), "champion");});
test("champions -> champion", function() {deepEqual( Stem("champions"), "champion");});
test("chanc -> chanc", function() {deepEqual( Stem("chanc"), "chanc");});
test("chance -> chanc", function() {deepEqual( Stem("chance"), "chanc");});
test("chanced -> chanc", function() {deepEqual( Stem("chanced"), "chanc");});
test("chancel -> chancel", function() {deepEqual( Stem("chancel"), "chancel");});
test("chancellerie -> chancelleri", function() {deepEqual( Stem("chancellerie"), "chancelleri");});
test("chancellor -> chancellor", function() {deepEqual( Stem("chancellor"), "chancellor");});
test("chancery -> chanceri", function() {deepEqual( Stem("chancery"), "chanceri");});
test("chances -> chanc", function() {deepEqual( Stem("chances"), "chanc");});
test("chandelier -> chandeli", function() {deepEqual( Stem("chandelier"), "chandeli");});
test("chandeliers -> chandeli", function() {deepEqual( Stem("chandeliers"), "chandeli");});
test("chandler -> chandler", function() {deepEqual( Stem("chandler"), "chandler");});
test("chang -> chang", function() {deepEqual( Stem("chang"), "chang");});
test("change -> chang", function() {deepEqual( Stem("change"), "chang");});
test("changeable -> changeabl", function() {deepEqual( Stem("changeable"), "changeabl");});
test("changed -> chang", function() {deepEqual( Stem("changed"), "chang");});
test("changeful -> chang", function() {deepEqual( Stem("changeful"), "chang");});
test("changeling -> changel", function() {deepEqual( Stem("changeling"), "changel");});
test("changelings -> changel", function() {deepEqual( Stem("changelings"), "changel");});
test("changer -> changer", function() {deepEqual( Stem("changer"), "changer");});
test("changes -> chang", function() {deepEqual( Stem("changes"), "chang");});
test("changest -> changest", function() {deepEqual( Stem("changest"), "changest");});
test("changing -> chang", function() {deepEqual( Stem("changing"), "chang");});
test("channel -> channel", function() {deepEqual( Stem("channel"), "channel");});
test("channels -> channel", function() {deepEqual( Stem("channels"), "channel");});
test("chanson -> chanson", function() {deepEqual( Stem("chanson"), "chanson");});
test("chant -> chant", function() {deepEqual( Stem("chant"), "chant");});
test("chanticleer -> chanticl", function() {deepEqual( Stem("chanticleer"), "chanticl");});
test("chantilly -> chantilli", function() {deepEqual( Stem("chantilly"), "chantilli");});
test("chanting -> chant", function() {deepEqual( Stem("chanting"), "chant");});
test("chantries -> chantri", function() {deepEqual( Stem("chantries"), "chantri");});
test("chantry -> chantri", function() {deepEqual( Stem("chantry"), "chantri");});
test("chants -> chant", function() {deepEqual( Stem("chants"), "chant");});
test("chaos -> chao", function() {deepEqual( Stem("chaos"), "chao");});
test("chap -> chap", function() {deepEqual( Stem("chap"), "chap");});
test("chape -> chape", function() {deepEqual( Stem("chape"), "chape");});
test("chapel -> chapel", function() {deepEqual( Stem("chapel"), "chapel");});
test("chapeless -> chapeless", function() {deepEqual( Stem("chapeless"), "chapeless");});
test("chapelle -> chapel", function() {deepEqual( Stem("chapelle"), "chapel");});
test("chapels -> chapel", function() {deepEqual( Stem("chapels"), "chapel");});
test("chaperon -> chaperon", function() {deepEqual( Stem("chaperon"), "chaperon");});
test("chaperoned -> chaperon", function() {deepEqual( Stem("chaperoned"), "chaperon");});
test("chapier -> chapier", function() {deepEqual( Stem("chapier"), "chapier");});
test("chaplain -> chaplain", function() {deepEqual( Stem("chaplain"), "chaplain");});
test("chaplains -> chaplain", function() {deepEqual( Stem("chaplains"), "chaplain");});
test("chapless -> chapless", function() {deepEqual( Stem("chapless"), "chapless");});
test("chaplet -> chaplet", function() {deepEqual( Stem("chaplet"), "chaplet");});
test("chapmen -> chapmen", function() {deepEqual( Stem("chapmen"), "chapmen");});
test("chapone -> chapon", function() {deepEqual( Stem("chapone"), "chapon");});
test("chaps -> chap", function() {deepEqual( Stem("chaps"), "chap");});
test("chapter -> chapter", function() {deepEqual( Stem("chapter"), "chapter");});
test("chapters -> chapter", function() {deepEqual( Stem("chapters"), "chapter");});
test("character -> charact", function() {deepEqual( Stem("character"), "charact");});
test("charactered -> charact", function() {deepEqual( Stem("charactered"), "charact");});
test("characterises -> characteris", function() {deepEqual( Stem("characterises"), "characteris");});
test("characterize -> character", function() {deepEqual( Stem("characterize"), "character");});
test("characterless -> characterless", function() {deepEqual( Stem("characterless"), "characterless");});
test("characters -> charact", function() {deepEqual( Stem("characters"), "charact");});
test("charactery -> characteri", function() {deepEqual( Stem("charactery"), "characteri");});
test("characts -> charact", function() {deepEqual( Stem("characts"), "charact");});
test("charade -> charad", function() {deepEqual( Stem("charade"), "charad");});
test("charades -> charad", function() {deepEqual( Stem("charades"), "charad");});
test("charaty -> charati", function() {deepEqual( Stem("charaty"), "charati");});
test("charbon -> charbon", function() {deepEqual( Stem("charbon"), "charbon");});
test("chare -> chare", function() {deepEqual( Stem("chare"), "chare");});
test("chares -> chare", function() {deepEqual( Stem("chares"), "chare");});
test("charg -> charg", function() {deepEqual( Stem("charg"), "charg");});
test("charge -> charg", function() {deepEqual( Stem("charge"), "charg");});
test("chargeable -> chargeabl", function() {deepEqual( Stem("chargeable"), "chargeabl");});
test("charged -> charg", function() {deepEqual( Stem("charged"), "charg");});
test("chargeful -> charg", function() {deepEqual( Stem("chargeful"), "charg");});
test("charger -> charger", function() {deepEqual( Stem("charger"), "charger");});
test("chargers -> charger", function() {deepEqual( Stem("chargers"), "charger");});
test("charges -> charg", function() {deepEqual( Stem("charges"), "charg");});
test("chargeth -> chargeth", function() {deepEqual( Stem("chargeth"), "chargeth");});
test("charging -> charg", function() {deepEqual( Stem("charging"), "charg");});
test("chariest -> chariest", function() {deepEqual( Stem("chariest"), "chariest");});
test("chariness -> chari", function() {deepEqual( Stem("chariness"), "chari");});
test("charing -> chare", function() {deepEqual( Stem("charing"), "chare");});
test("chariot -> chariot", function() {deepEqual( Stem("chariot"), "chariot");});
test("chariots -> chariot", function() {deepEqual( Stem("chariots"), "chariot");});
test("charitable -> charit", function() {deepEqual( Stem("charitable"), "charit");});
test("charitableness -> charit", function() {deepEqual( Stem("charitableness"), "charit");});
test("charitably -> charit", function() {deepEqual( Stem("charitably"), "charit");});
test("charities -> chariti", function() {deepEqual( Stem("charities"), "chariti");});
test("charity -> chariti", function() {deepEqual( Stem("charity"), "chariti");});
test("charityless -> charityless", function() {deepEqual( Stem("charityless"), "charityless");});
test("charlemain -> charlemain", function() {deepEqual( Stem("charlemain"), "charlemain");});
test("charles -> charl", function() {deepEqual( Stem("charles"), "charl");});
test("charlotte -> charlott", function() {deepEqual( Stem("charlotte"), "charlott");});
test("charm -> charm", function() {deepEqual( Stem("charm"), "charm");});
test("charmante -> charmant", function() {deepEqual( Stem("charmante"), "charmant");});
test("charmed -> charm", function() {deepEqual( Stem("charmed"), "charm");});
test("charmer -> charmer", function() {deepEqual( Stem("charmer"), "charmer");});
test("charmers -> charmer", function() {deepEqual( Stem("charmers"), "charmer");});
test("charmeth -> charmeth", function() {deepEqual( Stem("charmeth"), "charmeth");});
test("charmian -> charmian", function() {deepEqual( Stem("charmian"), "charmian");});
test("charming -> charm", function() {deepEqual( Stem("charming"), "charm");});
test("charmingly -> charmingli", function() {deepEqual( Stem("charmingly"), "charmingli");});
test("charms -> charm", function() {deepEqual( Stem("charms"), "charm");});
test("charneco -> charneco", function() {deepEqual( Stem("charneco"), "charneco");});
test("charnel -> charnel", function() {deepEqual( Stem("charnel"), "charnel");});
test("charolois -> charoloi", function() {deepEqual( Stem("charolois"), "charoloi");});
test("charon -> charon", function() {deepEqual( Stem("charon"), "charon");});
test("charter -> charter", function() {deepEqual( Stem("charter"), "charter");});
test("charters -> charter", function() {deepEqual( Stem("charters"), "charter");});
test("chartreux -> chartreux", function() {deepEqual( Stem("chartreux"), "chartreux");});
test("charwoman -> charwoman", function() {deepEqual( Stem("charwoman"), "charwoman");});
test("chary -> chari", function() {deepEqual( Stem("chary"), "chari");});
test("charybdis -> charybdi", function() {deepEqual( Stem("charybdis"), "charybdi");});
test("chas -> cha", function() {deepEqual( Stem("chas"), "cha");});
test("chase -> chase", function() {deepEqual( Stem("chase"), "chase");});
test("chased -> chase", function() {deepEqual( Stem("chased"), "chase");});
test("chaser -> chaser", function() {deepEqual( Stem("chaser"), "chaser");});
test("chaseth -> chaseth", function() {deepEqual( Stem("chaseth"), "chaseth");});
test("chasing -> chase", function() {deepEqual( Stem("chasing"), "chase");});
test("chasse -> chass", function() {deepEqual( Stem("chasse"), "chass");});
test("chasseur -> chasseur", function() {deepEqual( Stem("chasseur"), "chasseur");});
test("chaste -> chast", function() {deepEqual( Stem("chaste"), "chast");});
test("chastely -> chast", function() {deepEqual( Stem("chastely"), "chast");});
test("chastis -> chasti", function() {deepEqual( Stem("chastis"), "chasti");});
test("chastise -> chastis", function() {deepEqual( Stem("chastise"), "chastis");});
test("chastised -> chastis", function() {deepEqual( Stem("chastised"), "chastis");});
test("chastisement -> chastis", function() {deepEqual( Stem("chastisement"), "chastis");});
test("chastity -> chastiti", function() {deepEqual( Stem("chastity"), "chastiti");});
test("chat -> chat", function() {deepEqual( Stem("chat"), "chat");});
test("chateaux -> chateaux", function() {deepEqual( Stem("chateaux"), "chateaux");});
test("chatham -> chatham", function() {deepEqual( Stem("chatham"), "chatham");});
test("chatillon -> chatillon", function() {deepEqual( Stem("chatillon"), "chatillon");});
test("chats -> chat", function() {deepEqual( Stem("chats"), "chat");});
test("chatt -> chatt", function() {deepEqual( Stem("chatt"), "chatt");});
test("chatted -> chat", function() {deepEqual( Stem("chatted"), "chat");});
test("chattels -> chattel", function() {deepEqual( Stem("chattels"), "chattel");});
test("chatter -> chatter", function() {deepEqual( Stem("chatter"), "chatter");});
test("chattered -> chatter", function() {deepEqual( Stem("chattered"), "chatter");});
test("chattering -> chatter", function() {deepEqual( Stem("chattering"), "chatter");});
test("chatting -> chat", function() {deepEqual( Stem("chatting"), "chat");});
test("chattles -> chattl", function() {deepEqual( Stem("chattles"), "chattl");});
test("chaud -> chaud", function() {deepEqual( Stem("chaud"), "chaud");});
test("chaunted -> chaunt", function() {deepEqual( Stem("chaunted"), "chaunt");});
test("chaussee -> chausse", function() {deepEqual( Stem("chaussee"), "chausse");});
test("chaussees -> chausse", function() {deepEqual( Stem("chaussees"), "chausse");});
test("chaussure -> chaussur", function() {deepEqual( Stem("chaussure"), "chaussur");});
test("chaw -> chaw", function() {deepEqual( Stem("chaw"), "chaw");});
test("chawdron -> chawdron", function() {deepEqual( Stem("chawdron"), "chawdron");});
test("chawles -> chawl", function() {deepEqual( Stem("chawles"), "chawl");});
test("chay -> chai", function() {deepEqual( Stem("chay"), "chai");});
test("che -> che", function() {deepEqual( Stem("che"), "che");});
test("cheap -> cheap", function() {deepEqual( Stem("cheap"), "cheap");});
test("cheapen -> cheapen", function() {deepEqual( Stem("cheapen"), "cheapen");});
test("cheaper -> cheaper", function() {deepEqual( Stem("cheaper"), "cheaper");});
test("cheapest -> cheapest", function() {deepEqual( Stem("cheapest"), "cheapest");});
test("cheaply -> cheapli", function() {deepEqual( Stem("cheaply"), "cheapli");});
test("cheapside -> cheapsid", function() {deepEqual( Stem("cheapside"), "cheapsid");});
test("cheat -> cheat", function() {deepEqual( Stem("cheat"), "cheat");});
test("cheated -> cheat", function() {deepEqual( Stem("cheated"), "cheat");});
test("cheater -> cheater", function() {deepEqual( Stem("cheater"), "cheater");});
test("cheaters -> cheater", function() {deepEqual( Stem("cheaters"), "cheater");});
test("cheating -> cheat", function() {deepEqual( Stem("cheating"), "cheat");});
test("cheats -> cheat", function() {deepEqual( Stem("cheats"), "cheat");});
test("check -> check", function() {deepEqual( Stem("check"), "check");});
test("checked -> check", function() {deepEqual( Stem("checked"), "check");});
test("checker -> checker", function() {deepEqual( Stem("checker"), "checker");});
test("checkered -> checker", function() {deepEqual( Stem("checkered"), "checker");});
test("checking -> check", function() {deepEqual( Stem("checking"), "check");});
test("checks -> check", function() {deepEqual( Stem("checks"), "check");});
test("cheek -> cheek", function() {deepEqual( Stem("cheek"), "cheek");});
test("cheeked -> cheek", function() {deepEqual( Stem("cheeked"), "cheek");});
test("cheeks -> cheek", function() {deepEqual( Stem("cheeks"), "cheek");});
test("cheer -> cheer", function() {deepEqual( Stem("cheer"), "cheer");});
test("cheered -> cheer", function() {deepEqual( Stem("cheered"), "cheer");});
test("cheerer -> cheerer", function() {deepEqual( Stem("cheerer"), "cheerer");});
test("cheerful -> cheer", function() {deepEqual( Stem("cheerful"), "cheer");});
test("cheerfully -> cheerfulli", function() {deepEqual( Stem("cheerfully"), "cheerfulli");});
test("cheerfulness -> cheer", function() {deepEqual( Stem("cheerfulness"), "cheer");});
test("cheering -> cheer", function() {deepEqual( Stem("cheering"), "cheer");});
test("cheerless -> cheerless", function() {deepEqual( Stem("cheerless"), "cheerless");});
test("cheerly -> cheerli", function() {deepEqual( Stem("cheerly"), "cheerli");});
test("cheers -> cheer", function() {deepEqual( Stem("cheers"), "cheer");});
test("cheery -> cheeri", function() {deepEqual( Stem("cheery"), "cheeri");});
test("cheese -> chees", function() {deepEqual( Stem("cheese"), "chees");});
test("chef -> chef", function() {deepEqual( Stem("chef"), "chef");});
test("chelsea -> chelsea", function() {deepEqual( Stem("chelsea"), "chelsea");});
test("cheltenham -> cheltenham", function() {deepEqual( Stem("cheltenham"), "cheltenham");});
test("cheltonham -> cheltonham", function() {deepEqual( Stem("cheltonham"), "cheltonham");});
test("chemical -> chemic", function() {deepEqual( Stem("chemical"), "chemic");});
test("chemise -> chemis", function() {deepEqual( Stem("chemise"), "chemis");});
test("cheque -> chequ", function() {deepEqual( Stem("cheque"), "chequ");});
test("chequer -> chequer", function() {deepEqual( Stem("chequer"), "chequer");});
test("chequered -> chequer", function() {deepEqual( Stem("chequered"), "chequer");});
test("cheques -> chequ", function() {deepEqual( Stem("cheques"), "chequ");});
test("cher -> cher", function() {deepEqual( Stem("cher"), "cher");});
test("chere -> chere", function() {deepEqual( Stem("chere"), "chere");});
test("cherish -> cherish", function() {deepEqual( Stem("cherish"), "cherish");});
test("cherished -> cherish", function() {deepEqual( Stem("cherished"), "cherish");});
test("cherisher -> cherish", function() {deepEqual( Stem("cherisher"), "cherish");});
test("cherishes -> cherish", function() {deepEqual( Stem("cherishes"), "cherish");});
test("cherishing -> cherish", function() {deepEqual( Stem("cherishing"), "cherish");});
test("cheroot -> cheroot", function() {deepEqual( Stem("cheroot"), "cheroot");});
test("cheroots -> cheroot", function() {deepEqual( Stem("cheroots"), "cheroot");});
test("cherries -> cherri", function() {deepEqual( Stem("cherries"), "cherri");});
test("cherry -> cherri", function() {deepEqual( Stem("cherry"), "cherri");});
test("cherrypit -> cherrypit", function() {deepEqual( Stem("cherrypit"), "cherrypit");});
test("chers -> cher", function() {deepEqual( Stem("chers"), "cher");});
test("chertsey -> chertsei", function() {deepEqual( Stem("chertsey"), "chertsei");});
test("cherub -> cherub", function() {deepEqual( Stem("cherub"), "cherub");});
test("cherubim -> cherubim", function() {deepEqual( Stem("cherubim"), "cherubim");});
test("cherubims -> cherubim", function() {deepEqual( Stem("cherubims"), "cherubim");});
test("cherubin -> cherubin", function() {deepEqual( Stem("cherubin"), "cherubin");});
test("cherubins -> cherubin", function() {deepEqual( Stem("cherubins"), "cherubin");});
test("cherubs -> cherub", function() {deepEqual( Stem("cherubs"), "cherub");});
test("cheshire -> cheshir", function() {deepEqual( Stem("cheshire"), "cheshir");});
test("cheshu -> cheshu", function() {deepEqual( Stem("cheshu"), "cheshu");});
test("chess -> chess", function() {deepEqual( Stem("chess"), "chess");});
test("chest -> chest", function() {deepEqual( Stem("chest"), "chest");});
test("chested -> chest", function() {deepEqual( Stem("chested"), "chest");});
test("chester -> chester", function() {deepEqual( Stem("chester"), "chester");});
test("chestnut -> chestnut", function() {deepEqual( Stem("chestnut"), "chestnut");});
test("chestnuts -> chestnut", function() {deepEqual( Stem("chestnuts"), "chestnut");});
test("chests -> chest", function() {deepEqual( Stem("chests"), "chest");});
test("chetas -> cheta", function() {deepEqual( Stem("chetas"), "cheta");});
test("chev -> chev", function() {deepEqual( Stem("chev"), "chev");});
test("cheval -> cheval", function() {deepEqual( Stem("cheval"), "cheval");});
test("chevalier -> chevali", function() {deepEqual( Stem("chevalier"), "chevali");});
test("chevaliers -> chevali", function() {deepEqual( Stem("chevaliers"), "chevali");});
test("chevaux -> chevaux", function() {deepEqual( Stem("chevaux"), "chevaux");});
test("cheveril -> cheveril", function() {deepEqual( Stem("cheveril"), "cheveril");});
test("chew -> chew", function() {deepEqual( Stem("chew"), "chew");});
test("chewed -> chew", function() {deepEqual( Stem("chewed"), "chew");});
test("chewet -> chewet", function() {deepEqual( Stem("chewet"), "chewet");});
test("chewing -> chew", function() {deepEqual( Stem("chewing"), "chew");});
test("chez -> chez", function() {deepEqual( Stem("chez"), "chez");});
test("chi -> chi", function() {deepEqual( Stem("chi"), "chi");});
test("chick -> chick", function() {deepEqual( Stem("chick"), "chick");});
test("chickasaw -> chickasaw", function() {deepEqual( Stem("chickasaw"), "chickasaw");});
test("chicken -> chicken", function() {deepEqual( Stem("chicken"), "chicken");});
test("chickens -> chicken", function() {deepEqual( Stem("chickens"), "chicken");});
test("chicurmurco -> chicurmurco", function() {deepEqual( Stem("chicurmurco"), "chicurmurco");});
test("chid -> chid", function() {deepEqual( Stem("chid"), "chid");});
test("chidden -> chidden", function() {deepEqual( Stem("chidden"), "chidden");});
test("chide -> chide", function() {deepEqual( Stem("chide"), "chide");});
test("chiders -> chider", function() {deepEqual( Stem("chiders"), "chider");});
test("chides -> chide", function() {deepEqual( Stem("chides"), "chide");});
test("chiding -> chide", function() {deepEqual( Stem("chiding"), "chide");});
test("chief -> chief", function() {deepEqual( Stem("chief"), "chief");});
test("chiefest -> chiefest", function() {deepEqual( Stem("chiefest"), "chiefest");});
test("chiefly -> chiefli", function() {deepEqual( Stem("chiefly"), "chiefli");});
test("chiefs -> chief", function() {deepEqual( Stem("chiefs"), "chief");});
test("chieftain -> chieftain", function() {deepEqual( Stem("chieftain"), "chieftain");});
test("chien -> chien", function() {deepEqual( Stem("chien"), "chien");});
test("chiffonne -> chiffonn", function() {deepEqual( Stem("chiffonne"), "chiffonn");});
test("child -> child", function() {deepEqual( Stem("child"), "child");});
test("childed -> child", function() {deepEqual( Stem("childed"), "child");});
test("childeric -> childer", function() {deepEqual( Stem("childeric"), "childer");});
test("childhood -> childhood", function() {deepEqual( Stem("childhood"), "childhood");});
test("childhoods -> childhood", function() {deepEqual( Stem("childhoods"), "childhood");});
test("childing -> child", function() {deepEqual( Stem("childing"), "child");});
test("childish -> childish", function() {deepEqual( Stem("childish"), "childish");});
test("childishness -> childish", function() {deepEqual( Stem("childishness"), "childish");});
test("childlike -> childlik", function() {deepEqual( Stem("childlike"), "childlik");});
test("childness -> child", function() {deepEqual( Stem("childness"), "child");});
test("children -> children", function() {deepEqual( Stem("children"), "children");});
test("chili -> chili", function() {deepEqual( Stem("chili"), "chili");});
test("chilis -> chili", function() {deepEqual( Stem("chilis"), "chili");});
test("chill -> chill", function() {deepEqual( Stem("chill"), "chill");});
test("chilling -> chill", function() {deepEqual( Stem("chilling"), "chill");});
test("chillum -> chillum", function() {deepEqual( Stem("chillum"), "chillum");});
test("chime -> chime", function() {deepEqual( Stem("chime"), "chime");});
test("chimed -> chime", function() {deepEqual( Stem("chimed"), "chime");});
test("chimes -> chime", function() {deepEqual( Stem("chimes"), "chime");});
test("chimney -> chimnei", function() {deepEqual( Stem("chimney"), "chimnei");});
test("chimneypiece -> chimneypiec", function() {deepEqual( Stem("chimneypiece"), "chimneypiec");});
test("chimneys -> chimnei", function() {deepEqual( Stem("chimneys"), "chimnei");});
test("chimurcho -> chimurcho", function() {deepEqual( Stem("chimurcho"), "chimurcho");});
test("chin -> chin", function() {deepEqual( Stem("chin"), "chin");});
test("china -> china", function() {deepEqual( Stem("china"), "china");});
test("chine -> chine", function() {deepEqual( Stem("chine"), "chine");});
test("chines -> chine", function() {deepEqual( Stem("chines"), "chine");});
test("chinese -> chines", function() {deepEqual( Stem("chinese"), "chines");});
test("chink -> chink", function() {deepEqual( Stem("chink"), "chink");});
test("chinking -> chink", function() {deepEqual( Stem("chinking"), "chink");});
test("chinks -> chink", function() {deepEqual( Stem("chinks"), "chink");});
test("chins -> chin", function() {deepEqual( Stem("chins"), "chin");});
test("chintz -> chintz", function() {deepEqual( Stem("chintz"), "chintz");});
test("chipp -> chipp", function() {deepEqual( Stem("chipp"), "chipp");});
test("chippenham -> chippenham", function() {deepEqual( Stem("chippenham"), "chippenham");});
test("chipper -> chipper", function() {deepEqual( Stem("chipper"), "chipper");});
test("chips -> chip", function() {deepEqual( Stem("chips"), "chip");});
test("chiron -> chiron", function() {deepEqual( Stem("chiron"), "chiron");});
test("chirped -> chirp", function() {deepEqual( Stem("chirped"), "chirp");});
test("chirping -> chirp", function() {deepEqual( Stem("chirping"), "chirp");});
test("chirrah -> chirrah", function() {deepEqual( Stem("chirrah"), "chirrah");});
test("chirurgeonly -> chirurgeonli", function() {deepEqual( Stem("chirurgeonly"), "chirurgeonli");});
test("chisel -> chisel", function() {deepEqual( Stem("chisel"), "chisel");});
test("chiswick -> chiswick", function() {deepEqual( Stem("chiswick"), "chiswick");});
test("chit -> chit", function() {deepEqual( Stem("chit"), "chit");});
test("chitopher -> chitoph", function() {deepEqual( Stem("chitopher"), "chitoph");});
test("chits -> chit", function() {deepEqual( Stem("chits"), "chit");});
test("chivalrous -> chivalr", function() {deepEqual( Stem("chivalrous"), "chivalr");});
test("chivalry -> chivalri", function() {deepEqual( Stem("chivalry"), "chivalri");});
test("chocolate -> chocol", function() {deepEqual( Stem("chocolate"), "chocol");});
test("choice -> choic", function() {deepEqual( Stem("choice"), "choic");});
test("choicely -> choic", function() {deepEqual( Stem("choicely"), "choic");});
test("choicest -> choicest", function() {deepEqual( Stem("choicest"), "choicest");});
test("choir -> choir", function() {deepEqual( Stem("choir"), "choir");});
test("choirs -> choir", function() {deepEqual( Stem("choirs"), "choir");});
test("chok -> chok", function() {deepEqual( Stem("chok"), "chok");});
test("choke -> choke", function() {deepEqual( Stem("choke"), "choke");});
test("choked -> choke", function() {deepEqual( Stem("choked"), "choke");});
test("chokes -> choke", function() {deepEqual( Stem("chokes"), "choke");});
test("choking -> choke", function() {deepEqual( Stem("choking"), "choke");});
test("choky -> choki", function() {deepEqual( Stem("choky"), "choki");});
test("choler -> choler", function() {deepEqual( Stem("choler"), "choler");});
test("choleric -> choler", function() {deepEqual( Stem("choleric"), "choler");});
test("cholers -> choler", function() {deepEqual( Stem("cholers"), "choler");});
test("chollors -> chollor", function() {deepEqual( Stem("chollors"), "chollor");});
test("choose -> choos", function() {deepEqual( Stem("choose"), "choos");});
test("chooser -> chooser", function() {deepEqual( Stem("chooser"), "chooser");});
test("chooses -> choos", function() {deepEqual( Stem("chooses"), "choos");});
test("chooseth -> chooseth", function() {deepEqual( Stem("chooseth"), "chooseth");});
test("choosing -> choos", function() {deepEqual( Stem("choosing"), "choos");});
test("chop -> chop", function() {deepEqual( Stem("chop"), "chop");});
test("chopine -> chopin", function() {deepEqual( Stem("chopine"), "chopin");});
test("choplogic -> choplog", function() {deepEqual( Stem("choplogic"), "choplog");});
test("chopp -> chopp", function() {deepEqual( Stem("chopp"), "chopp");});
test("chopped -> chop", function() {deepEqual( Stem("chopped"), "chop");});
test("chopper -> chopper", function() {deepEqual( Stem("chopper"), "chopper");});
test("chopping -> chop", function() {deepEqual( Stem("chopping"), "chop");});
test("choppy -> choppi", function() {deepEqual( Stem("choppy"), "choppi");});
test("chops -> chop", function() {deepEqual( Stem("chops"), "chop");});
test("chopt -> chopt", function() {deepEqual( Stem("chopt"), "chopt");});
test("chor -> chor", function() {deepEqual( Stem("chor"), "chor");});
test("choristers -> chorist", function() {deepEqual( Stem("choristers"), "chorist");});
test("chorus -> choru", function() {deepEqual( Stem("chorus"), "choru");});
test("chose -> chose", function() {deepEqual( Stem("chose"), "chose");});
test("chosen -> chosen", function() {deepEqual( Stem("chosen"), "chosen");});
test("choufleur -> choufleur", function() {deepEqual( Stem("choufleur"), "choufleur");});
test("chough -> chough", function() {deepEqual( Stem("chough"), "chough");});
test("choughs -> chough", function() {deepEqual( Stem("choughs"), "chough");});
test("chowringhee -> chowringhe", function() {deepEqual( Stem("chowringhee"), "chowringhe");});
test("chrish -> chrish", function() {deepEqual( Stem("chrish"), "chrish");});
test("christ -> christ", function() {deepEqual( Stem("christ"), "christ");});
test("christchurch -> christchurch", function() {deepEqual( Stem("christchurch"), "christchurch");});
test("christen -> christen", function() {deepEqual( Stem("christen"), "christen");});
test("christendom -> christendom", function() {deepEqual( Stem("christendom"), "christendom");});
test("christendoms -> christendom", function() {deepEqual( Stem("christendoms"), "christendom");});
test("christened -> christen", function() {deepEqual( Stem("christened"), "christen");});
test("christening -> christen", function() {deepEqual( Stem("christening"), "christen");});
test("christenings -> christen", function() {deepEqual( Stem("christenings"), "christen");});
test("christian -> christian", function() {deepEqual( Stem("christian"), "christian");});
test("christianlike -> christianlik", function() {deepEqual( Stem("christianlike"), "christianlik");});
test("christians -> christian", function() {deepEqual( Stem("christians"), "christian");});
test("christmas -> christma", function() {deepEqual( Stem("christmas"), "christma");});
test("christom -> christom", function() {deepEqual( Stem("christom"), "christom");});
test("christopher -> christoph", function() {deepEqual( Stem("christopher"), "christoph");});
test("christophero -> christophero", function() {deepEqual( Stem("christophero"), "christophero");});
test("chronicle -> chronicl", function() {deepEqual( Stem("chronicle"), "chronicl");});
test("chronicled -> chronicl", function() {deepEqual( Stem("chronicled"), "chronicl");});
test("chronicler -> chronicl", function() {deepEqual( Stem("chronicler"), "chronicl");});
test("chroniclers -> chronicl", function() {deepEqual( Stem("chroniclers"), "chronicl");});
test("chronicles -> chronicl", function() {deepEqual( Stem("chronicles"), "chronicl");});
test("chronometer -> chronomet", function() {deepEqual( Stem("chronometer"), "chronomet");});
test("chrysolite -> chrysolit", function() {deepEqual( Stem("chrysolite"), "chrysolit");});
test("chuck -> chuck", function() {deepEqual( Stem("chuck"), "chuck");});
test("chuckled -> chuckl", function() {deepEqual( Stem("chuckled"), "chuckl");});
test("chuckling -> chuckl", function() {deepEqual( Stem("chuckling"), "chuckl");});
test("chucks -> chuck", function() {deepEqual( Stem("chucks"), "chuck");});
test("chud -> chud", function() {deepEqual( Stem("chud"), "chud");});
test("chuffs -> chuff", function() {deepEqual( Stem("chuffs"), "chuff");});
test("chummy -> chummi", function() {deepEqual( Stem("chummy"), "chummi");});
test("chune -> chune", function() {deepEqual( Stem("chune"), "chune");});
test("church -> church", function() {deepEqual( Stem("church"), "church");});
test("churches -> church", function() {deepEqual( Stem("churches"), "church");});
test("churchill -> churchil", function() {deepEqual( Stem("churchill"), "churchil");});
test("churchman -> churchman", function() {deepEqual( Stem("churchman"), "churchman");});
test("churchmen -> churchmen", function() {deepEqual( Stem("churchmen"), "churchmen");});
test("churchyard -> churchyard", function() {deepEqual( Stem("churchyard"), "churchyard");});
test("churchyards -> churchyard", function() {deepEqual( Stem("churchyards"), "churchyard");});
test("churl -> churl", function() {deepEqual( Stem("churl"), "churl");});
test("churlish -> churlish", function() {deepEqual( Stem("churlish"), "churlish");});
test("churlishly -> churlishli", function() {deepEqual( Stem("churlishly"), "churlishli");});
test("churls -> churl", function() {deepEqual( Stem("churls"), "churl");});
test("churn -> churn", function() {deepEqual( Stem("churn"), "churn");});
test("chus -> chu", function() {deepEqual( Stem("chus"), "chu");});
test("chutney -> chutnei", function() {deepEqual( Stem("chutney"), "chutnei");});
test("cicatrice -> cicatric", function() {deepEqual( Stem("cicatrice"), "cicatric");});
test("cicatrices -> cicatric", function() {deepEqual( Stem("cicatrices"), "cicatric");});
test("cicatrized -> cicatr", function() {deepEqual( Stem("cicatrized"), "cicatr");});
test("cicely -> cice", function() {deepEqual( Stem("cicely"), "cice");});
test("cicero -> cicero", function() {deepEqual( Stem("cicero"), "cicero");});
test("ciceter -> cicet", function() {deepEqual( Stem("ciceter"), "cicet");});
test("ciel -> ciel", function() {deepEqual( Stem("ciel"), "ciel");});
test("cigar -> cigar", function() {deepEqual( Stem("cigar"), "cigar");});
test("cigars -> cigar", function() {deepEqual( Stem("cigars"), "cigar");});
test("ciitzens -> ciitzen", function() {deepEqual( Stem("ciitzens"), "ciitzen");});
test("cilicia -> cilicia", function() {deepEqual( Stem("cilicia"), "cilicia");});
test("cimarosa -> cimarosa", function() {deepEqual( Stem("cimarosa"), "cimarosa");});
test("cimber -> cimber", function() {deepEqual( Stem("cimber"), "cimber");});
test("cimmerian -> cimmerian", function() {deepEqual( Stem("cimmerian"), "cimmerian");});
test("cinable -> cinabl", function() {deepEqual( Stem("cinable"), "cinabl");});
test("cincture -> cinctur", function() {deepEqual( Stem("cincture"), "cinctur");});
test("cinder -> cinder", function() {deepEqual( Stem("cinder"), "cinder");});
test("cinderella -> cinderella", function() {deepEqual( Stem("cinderella"), "cinderella");});
test("cinders -> cinder", function() {deepEqual( Stem("cinders"), "cinder");});
test("cine -> cine", function() {deepEqual( Stem("cine"), "cine");});
test("cinna -> cinna", function() {deepEqual( Stem("cinna"), "cinna");});
test("cinqbars -> cinqbar", function() {deepEqual( Stem("cinqbars"), "cinqbar");});
test("cinque -> cinqu", function() {deepEqual( Stem("cinque"), "cinqu");});
test("cipher -> cipher", function() {deepEqual( Stem("cipher"), "cipher");});
test("ciphers -> cipher", function() {deepEqual( Stem("ciphers"), "cipher");});
test("circa -> circa", function() {deepEqual( Stem("circa"), "circa");});
test("circassian -> circassian", function() {deepEqual( Stem("circassian"), "circassian");});
test("circe -> circ", function() {deepEqual( Stem("circe"), "circ");});
test("circle -> circl", function() {deepEqual( Stem("circle"), "circl");});
test("circled -> circl", function() {deepEqual( Stem("circled"), "circl");});
test("circles -> circl", function() {deepEqual( Stem("circles"), "circl");});
test("circlets -> circlet", function() {deepEqual( Stem("circlets"), "circlet");});
test("circling -> circl", function() {deepEqual( Stem("circling"), "circl");});
test("circuit -> circuit", function() {deepEqual( Stem("circuit"), "circuit");});
test("circulars -> circular", function() {deepEqual( Stem("circulars"), "circular");});
test("circulation -> circul", function() {deepEqual( Stem("circulation"), "circul");});
test("circum -> circum", function() {deepEqual( Stem("circum"), "circum");});
test("circumcised -> circumcis", function() {deepEqual( Stem("circumcised"), "circumcis");});
test("circumference -> circumfer", function() {deepEqual( Stem("circumference"), "circumfer");});
test("circummur -> circummur", function() {deepEqual( Stem("circummur"), "circummur");});
test("circumscrib -> circumscrib", function() {deepEqual( Stem("circumscrib"), "circumscrib");});
test("circumscribed -> circumscrib", function() {deepEqual( Stem("circumscribed"), "circumscrib");});
test("circumscription -> circumscript", function() {deepEqual( Stem("circumscription"), "circumscript");});
test("circumspect -> circumspect", function() {deepEqual( Stem("circumspect"), "circumspect");});
test("circumspection -> circumspect", function() {deepEqual( Stem("circumspection"), "circumspect");});
test("circumstance -> circumst", function() {deepEqual( Stem("circumstance"), "circumst");});
test("circumstanced -> circumstanc", function() {deepEqual( Stem("circumstanced"), "circumstanc");});
test("circumstances -> circumst", function() {deepEqual( Stem("circumstances"), "circumst");});
test("circumstantial -> circumstanti", function() {deepEqual( Stem("circumstantial"), "circumstanti");});
test("circumvent -> circumv", function() {deepEqual( Stem("circumvent"), "circumv");});
test("circumvention -> circumvent", function() {deepEqual( Stem("circumvention"), "circumvent");});
test("cistercian -> cistercian", function() {deepEqual( Stem("cistercian"), "cistercian");});
test("cistercians -> cistercian", function() {deepEqual( Stem("cistercians"), "cistercian");});
test("cistern -> cistern", function() {deepEqual( Stem("cistern"), "cistern");});
test("citadel -> citadel", function() {deepEqual( Stem("citadel"), "citadel");});
test("cital -> cital", function() {deepEqual( Stem("cital"), "cital");});
test("cite -> cite", function() {deepEqual( Stem("cite"), "cite");});
test("cited -> cite", function() {deepEqual( Stem("cited"), "cite");});
test("cites -> cite", function() {deepEqual( Stem("cites"), "cite");});
test("cities -> citi", function() {deepEqual( Stem("cities"), "citi");});
test("citing -> cite", function() {deepEqual( Stem("citing"), "cite");});
test("citizen -> citizen", function() {deepEqual( Stem("citizen"), "citizen");});
test("citizens -> citizen", function() {deepEqual( Stem("citizens"), "citizen");});
test("citron -> citron", function() {deepEqual( Stem("citron"), "citron");});
test("cittern -> cittern", function() {deepEqual( Stem("cittern"), "cittern");});
test("city -> citi", function() {deepEqual( Stem("city"), "citi");});
test("civet -> civet", function() {deepEqual( Stem("civet"), "civet");});
test("civil -> civil", function() {deepEqual( Stem("civil"), "civil");});
test("civilian -> civilian", function() {deepEqual( Stem("civilian"), "civilian");});
test("civilians -> civilian", function() {deepEqual( Stem("civilians"), "civilian");});
test("civility -> civil", function() {deepEqual( Stem("civility"), "civil");});
test("civilization -> civil", function() {deepEqual( Stem("civilization"), "civil");});
test("civilized -> civil", function() {deepEqual( Stem("civilized"), "civil");});
test("civilly -> civilli", function() {deepEqual( Stem("civilly"), "civilli");});
test("ck -> ck", function() {deepEqual( Stem("ck"), "ck");});
test("clack -> clack", function() {deepEqual( Stem("clack"), "clack");});
test("clad -> clad", function() {deepEqual( Stem("clad"), "clad");});
test("claim -> claim", function() {deepEqual( Stem("claim"), "claim");});
test("claimed -> claim", function() {deepEqual( Stem("claimed"), "claim");});
test("claiming -> claim", function() {deepEqual( Stem("claiming"), "claim");});
test("claims -> claim", function() {deepEqual( Stem("claims"), "claim");});
test("clamb -> clamb", function() {deepEqual( Stem("clamb"), "clamb");});
test("clamber -> clamber", function() {deepEqual( Stem("clamber"), "clamber");});
test("clambered -> clamber", function() {deepEqual( Stem("clambered"), "clamber");});
test("clammer -> clammer", function() {deepEqual( Stem("clammer"), "clammer");});
test("clamor -> clamor", function() {deepEqual( Stem("clamor"), "clamor");});
test("clamorous -> clamor", function() {deepEqual( Stem("clamorous"), "clamor");});
test("clamors -> clamor", function() {deepEqual( Stem("clamors"), "clamor");});
test("clamour -> clamour", function() {deepEqual( Stem("clamour"), "clamour");});
test("clamours -> clamour", function() {deepEqual( Stem("clamours"), "clamour");});
test("clandestine -> clandestin", function() {deepEqual( Stem("clandestine"), "clandestin");});
test("clandestinely -> clandestin", function() {deepEqual( Stem("clandestinely"), "clandestin");});
test("clang -> clang", function() {deepEqual( Stem("clang"), "clang");});
test("clanging -> clang", function() {deepEqual( Stem("clanging"), "clang");});
test("clangor -> clangor", function() {deepEqual( Stem("clangor"), "clangor");});
test("clap -> clap", function() {deepEqual( Stem("clap"), "clap");});
test("clapham -> clapham", function() {deepEqual( Stem("clapham"), "clapham");});
test("clapp -> clapp", function() {deepEqual( Stem("clapp"), "clapp");});
test("clapped -> clap", function() {deepEqual( Stem("clapped"), "clap");});
test("clapper -> clapper", function() {deepEqual( Stem("clapper"), "clapper");});
test("clapping -> clap", function() {deepEqual( Stem("clapping"), "clap");});
test("claps -> clap", function() {deepEqual( Stem("claps"), "clap");});
test("clar -> clar", function() {deepEqual( Stem("clar"), "clar");});
test("clare -> clare", function() {deepEqual( Stem("clare"), "clare");});
test("clarence -> clarenc", function() {deepEqual( Stem("clarence"), "clarenc");});
test("claret -> claret", function() {deepEqual( Stem("claret"), "claret");});
test("claribel -> claribel", function() {deepEqual( Stem("claribel"), "claribel");});
test("clarke -> clark", function() {deepEqual( Stem("clarke"), "clark");});
test("clasp -> clasp", function() {deepEqual( Stem("clasp"), "clasp");});
test("clasped -> clasp", function() {deepEqual( Stem("clasped"), "clasp");});
test("clasping -> clasp", function() {deepEqual( Stem("clasping"), "clasp");});
test("clasps -> clasp", function() {deepEqual( Stem("clasps"), "clasp");});
test("class -> class", function() {deepEqual( Stem("class"), "class");});
test("classes -> class", function() {deepEqual( Stem("classes"), "class");});
test("classical -> classic", function() {deepEqual( Stem("classical"), "classic");});
test("clatter -> clatter", function() {deepEqual( Stem("clatter"), "clatter");});
test("clattering -> clatter", function() {deepEqual( Stem("clattering"), "clatter");});
test("claud -> claud", function() {deepEqual( Stem("claud"), "claud");});
test("claudio -> claudio", function() {deepEqual( Stem("claudio"), "claudio");});
test("claudius -> claudiu", function() {deepEqual( Stem("claudius"), "claudiu");});
test("clause -> claus", function() {deepEqual( Stem("clause"), "claus");});
test("clavers -> claver", function() {deepEqual( Stem("clavers"), "claver");});
test("claw -> claw", function() {deepEqual( Stem("claw"), "claw");});
test("clawed -> claw", function() {deepEqual( Stem("clawed"), "claw");});
test("clawing -> claw", function() {deepEqual( Stem("clawing"), "claw");});
test("claws -> claw", function() {deepEqual( Stem("claws"), "claw");});
test("clay -> clai", function() {deepEqual( Stem("clay"), "clai");});
test("clays -> clai", function() {deepEqual( Stem("clays"), "clai");});
test("clean -> clean", function() {deepEqual( Stem("clean"), "clean");});
test("cleaned -> clean", function() {deepEqual( Stem("cleaned"), "clean");});
test("cleanliest -> cleanliest", function() {deepEqual( Stem("cleanliest"), "cleanliest");});
test("cleanly -> cleanli", function() {deepEqual( Stem("cleanly"), "cleanli");});
test("cleans -> clean", function() {deepEqual( Stem("cleans"), "clean");});
test("cleanse -> cleans", function() {deepEqual( Stem("cleanse"), "cleans");});
test("cleansing -> cleans", function() {deepEqual( Stem("cleansing"), "cleans");});
test("clear -> clear", function() {deepEqual( Stem("clear"), "clear");});
test("cleared -> clear", function() {deepEqual( Stem("cleared"), "clear");});
test("clearer -> clearer", function() {deepEqual( Stem("clearer"), "clearer");});
test("clearest -> clearest", function() {deepEqual( Stem("clearest"), "clearest");});
test("clearing -> clear", function() {deepEqual( Stem("clearing"), "clear");});
test("clearly -> clearli", function() {deepEqual( Stem("clearly"), "clearli");});
test("clearness -> clear", function() {deepEqual( Stem("clearness"), "clear");});
test("clears -> clear", function() {deepEqual( Stem("clears"), "clear");});
test("cleave -> cleav", function() {deepEqual( Stem("cleave"), "cleav");});
test("cleaving -> cleav", function() {deepEqual( Stem("cleaving"), "cleav");});
test("clef -> clef", function() {deepEqual( Stem("clef"), "clef");});
test("cleft -> cleft", function() {deepEqual( Stem("cleft"), "cleft");});
test("cleitus -> cleitu", function() {deepEqual( Stem("cleitus"), "cleitu");});
test("clemency -> clemenc", function() {deepEqual( Stem("clemency"), "clemenc");});
test("clement -> clement", function() {deepEqual( Stem("clement"), "clement");});
test("clementi -> clementi", function() {deepEqual( Stem("clementi"), "clementi");});
test("clench -> clench", function() {deepEqual( Stem("clench"), "clench");});
test("clenched -> clench", function() {deepEqual( Stem("clenched"), "clench");});
test("cleomenes -> cleomen", function() {deepEqual( Stem("cleomenes"), "cleomen");});
test("cleopatpa -> cleopatpa", function() {deepEqual( Stem("cleopatpa"), "cleopatpa");});
test("cleopatra -> cleopatra", function() {deepEqual( Stem("cleopatra"), "cleopatra");});
test("clepeth -> clepeth", function() {deepEqual( Stem("clepeth"), "clepeth");});
test("clept -> clept", function() {deepEqual( Stem("clept"), "clept");});
test("clerestories -> clerestori", function() {deepEqual( Stem("clerestories"), "clerestori");});
test("clergy -> clergi", function() {deepEqual( Stem("clergy"), "clergi");});
test("clergyman -> clergyman", function() {deepEqual( Stem("clergyman"), "clergyman");});
test("clergymen -> clergymen", function() {deepEqual( Stem("clergymen"), "clergymen");});
test("clerical -> cleric", function() {deepEqual( Stem("clerical"), "cleric");});
test("clerics -> cleric", function() {deepEqual( Stem("clerics"), "cleric");});
test("clerk -> clerk", function() {deepEqual( Stem("clerk"), "clerk");});
test("clerklike -> clerklik", function() {deepEqual( Stem("clerklike"), "clerklik");});
test("clerkly -> clerkli", function() {deepEqual( Stem("clerkly"), "clerkli");});
test("clerks -> clerk", function() {deepEqual( Stem("clerks"), "clerk");});
test("clever -> clever", function() {deepEqual( Stem("clever"), "clever");});
test("cleverer -> clever", function() {deepEqual( Stem("cleverer"), "clever");});
test("cleverest -> cleverest", function() {deepEqual( Stem("cleverest"), "cleverest");});
test("cleverly -> cleverli", function() {deepEqual( Stem("cleverly"), "cleverli");});
test("cleverness -> clever", function() {deepEqual( Stem("cleverness"), "clever");});
test("clew -> clew", function() {deepEqual( Stem("clew"), "clew");});
test("clicked -> click", function() {deepEqual( Stem("clicked"), "click");});
test("clicking -> click", function() {deepEqual( Stem("clicking"), "click");});
test("client -> client", function() {deepEqual( Stem("client"), "client");});
test("clients -> client", function() {deepEqual( Stem("clients"), "client");});
test("cliff -> cliff", function() {deepEqual( Stem("cliff"), "cliff");});
test("clifford -> clifford", function() {deepEqual( Stem("clifford"), "clifford");});
test("cliffords -> clifford", function() {deepEqual( Stem("cliffords"), "clifford");});
test("cliffs -> cliff", function() {deepEqual( Stem("cliffs"), "cliff");});
test("clifton -> clifton", function() {deepEqual( Stem("clifton"), "clifton");});
test("climate -> climat", function() {deepEqual( Stem("climate"), "climat");});
test("climature -> climatur", function() {deepEqual( Stem("climature"), "climatur");});
test("climb -> climb", function() {deepEqual( Stem("climb"), "climb");});
test("climbed -> climb", function() {deepEqual( Stem("climbed"), "climb");});
test("climber -> climber", function() {deepEqual( Stem("climber"), "climber");});
test("climbeth -> climbeth", function() {deepEqual( Stem("climbeth"), "climbeth");});
test("climbing -> climb", function() {deepEqual( Stem("climbing"), "climb");});
test("climbs -> climb", function() {deepEqual( Stem("climbs"), "climb");});
test("clime -> clime", function() {deepEqual( Stem("clime"), "clime");});
test("cling -> cling", function() {deepEqual( Stem("cling"), "cling");});
test("clinging -> cling", function() {deepEqual( Stem("clinging"), "cling");});
test("clink -> clink", function() {deepEqual( Stem("clink"), "clink");});
test("clinked -> clink", function() {deepEqual( Stem("clinked"), "clink");});
test("clinker -> clinker", function() {deepEqual( Stem("clinker"), "clinker");});
test("clinking -> clink", function() {deepEqual( Stem("clinking"), "clink");});
test("clinquant -> clinquant", function() {deepEqual( Stem("clinquant"), "clinquant");});
test("clip -> clip", function() {deepEqual( Stem("clip"), "clip");});
test("clipp -> clipp", function() {deepEqual( Stem("clipp"), "clipp");});
test("clipped -> clip", function() {deepEqual( Stem("clipped"), "clip");});
test("clipper -> clipper", function() {deepEqual( Stem("clipper"), "clipper");});
test("clippers -> clipper", function() {deepEqual( Stem("clippers"), "clipper");});
test("clippeth -> clippeth", function() {deepEqual( Stem("clippeth"), "clippeth");});
test("clipping -> clip", function() {deepEqual( Stem("clipping"), "clip");});
test("clipt -> clipt", function() {deepEqual( Stem("clipt"), "clipt");});
test("clique -> cliqu", function() {deepEqual( Stem("clique"), "cliqu");});
test("clitus -> clitu", function() {deepEqual( Stem("clitus"), "clitu");});
test("clive -> clive", function() {deepEqual( Stem("clive"), "clive");});
test("clo -> clo", function() {deepEqual( Stem("clo"), "clo");});
test("cloak -> cloak", function() {deepEqual( Stem("cloak"), "cloak");});
test("cloakbag -> cloakbag", function() {deepEqual( Stem("cloakbag"), "cloakbag");});
test("cloaks -> cloak", function() {deepEqual( Stem("cloaks"), "cloak");});
test("clock -> clock", function() {deepEqual( Stem("clock"), "clock");});
test("clocks -> clock", function() {deepEqual( Stem("clocks"), "clock");});
test("clod -> clod", function() {deepEqual( Stem("clod"), "clod");});
test("cloddy -> cloddi", function() {deepEqual( Stem("cloddy"), "cloddi");});
test("clodpole -> clodpol", function() {deepEqual( Stem("clodpole"), "clodpol");});
test("clog -> clog", function() {deepEqual( Stem("clog"), "clog");});
test("clogging -> clog", function() {deepEqual( Stem("clogging"), "clog");});
test("clogs -> clog", function() {deepEqual( Stem("clogs"), "clog");});
test("cloister -> cloister", function() {deepEqual( Stem("cloister"), "cloister");});
test("cloistress -> cloistress", function() {deepEqual( Stem("cloistress"), "cloistress");});
test("cloquence -> cloquenc", function() {deepEqual( Stem("cloquence"), "cloquenc");});
test("clos -> clo", function() {deepEqual( Stem("clos"), "clo");});
test("close -> close", function() {deepEqual( Stem("close"), "close");});
test("closed -> close", function() {deepEqual( Stem("closed"), "close");});
test("closely -> close", function() {deepEqual( Stem("closely"), "close");});
test("closeness -> close", function() {deepEqual( Stem("closeness"), "close");});
test("closer -> closer", function() {deepEqual( Stem("closer"), "closer");});
test("closes -> close", function() {deepEqual( Stem("closes"), "close");});
test("closest -> closest", function() {deepEqual( Stem("closest"), "closest");});
test("closet -> closet", function() {deepEqual( Stem("closet"), "closet");});
test("closeted -> closet", function() {deepEqual( Stem("closeted"), "closet");});
test("closets -> closet", function() {deepEqual( Stem("closets"), "closet");});
test("closing -> close", function() {deepEqual( Stem("closing"), "close");});
test("closure -> closur", function() {deepEqual( Stem("closure"), "closur");});
test("cloten -> cloten", function() {deepEqual( Stem("cloten"), "cloten");});
test("clotens -> cloten", function() {deepEqual( Stem("clotens"), "cloten");});
test("cloth -> cloth", function() {deepEqual( Stem("cloth"), "cloth");});
test("clothair -> clothair", function() {deepEqual( Stem("clothair"), "clothair");});
test("clotharius -> clothariu", function() {deepEqual( Stem("clotharius"), "clothariu");});
test("clothe -> cloth", function() {deepEqual( Stem("clothe"), "cloth");});
test("clothed -> cloth", function() {deepEqual( Stem("clothed"), "cloth");});
test("clothes -> cloth", function() {deepEqual( Stem("clothes"), "cloth");});
test("clothier -> clothier", function() {deepEqual( Stem("clothier"), "clothier");});
test("clothiers -> clothier", function() {deepEqual( Stem("clothiers"), "clothier");});
test("clothing -> cloth", function() {deepEqual( Stem("clothing"), "cloth");});
test("cloths -> cloth", function() {deepEqual( Stem("cloths"), "cloth");});
test("clotpoles -> clotpol", function() {deepEqual( Stem("clotpoles"), "clotpol");});
test("clotpoll -> clotpol", function() {deepEqual( Stem("clotpoll"), "clotpol");});
test("cloud -> cloud", function() {deepEqual( Stem("cloud"), "cloud");});
test("clouded -> cloud", function() {deepEqual( Stem("clouded"), "cloud");});
test("cloudiness -> cloudi", function() {deepEqual( Stem("cloudiness"), "cloudi");});
test("clouds -> cloud", function() {deepEqual( Stem("clouds"), "cloud");});
test("cloudy -> cloudi", function() {deepEqual( Stem("cloudy"), "cloudi");});
test("clout -> clout", function() {deepEqual( Stem("clout"), "clout");});
test("clouted -> clout", function() {deepEqual( Stem("clouted"), "clout");});
test("clouts -> clout", function() {deepEqual( Stem("clouts"), "clout");});
test("cloven -> cloven", function() {deepEqual( Stem("cloven"), "cloven");});
test("clover -> clover", function() {deepEqual( Stem("clover"), "clover");});
test("cloves -> clove", function() {deepEqual( Stem("cloves"), "clove");});
test("clovest -> clovest", function() {deepEqual( Stem("clovest"), "clovest");});
test("clowder -> clowder", function() {deepEqual( Stem("clowder"), "clowder");});
test("clown -> clown", function() {deepEqual( Stem("clown"), "clown");});
test("clownish -> clownish", function() {deepEqual( Stem("clownish"), "clownish");});
test("clowns -> clown", function() {deepEqual( Stem("clowns"), "clown");});
test("cloy -> cloi", function() {deepEqual( Stem("cloy"), "cloi");});
test("cloyed -> cloi", function() {deepEqual( Stem("cloyed"), "cloi");});
test("cloying -> cloi", function() {deepEqual( Stem("cloying"), "cloi");});
test("cloyless -> cloyless", function() {deepEqual( Stem("cloyless"), "cloyless");});
test("cloyment -> cloyment", function() {deepEqual( Stem("cloyment"), "cloyment");});
test("cloys -> cloi", function() {deepEqual( Stem("cloys"), "cloi");});
test("club -> club", function() {deepEqual( Stem("club"), "club");});
test("clubbed -> club", function() {deepEqual( Stem("clubbed"), "club");});
test("clubs -> club", function() {deepEqual( Stem("clubs"), "club");});
test("cluck -> cluck", function() {deepEqual( Stem("cluck"), "cluck");});
test("clue -> clue", function() {deepEqual( Stem("clue"), "clue");});
test("clump -> clump", function() {deepEqual( Stem("clump"), "clump");});
test("clumsiest -> clumsiest", function() {deepEqual( Stem("clumsiest"), "clumsiest");});
test("clumsiness -> clumsi", function() {deepEqual( Stem("clumsiness"), "clumsi");});
test("clumsy -> clumsi", function() {deepEqual( Stem("clumsy"), "clumsi");});
test("clung -> clung", function() {deepEqual( Stem("clung"), "clung");});
test("clust -> clust", function() {deepEqual( Stem("clust"), "clust");});
test("cluster -> cluster", function() {deepEqual( Stem("cluster"), "cluster");});
test("clustered -> cluster", function() {deepEqual( Stem("clustered"), "cluster");});
test("clusters -> cluster", function() {deepEqual( Stem("clusters"), "cluster");});
test("clutch -> clutch", function() {deepEqual( Stem("clutch"), "clutch");});
test("clutches -> clutch", function() {deepEqual( Stem("clutches"), "clutch");});
test("clutching -> clutch", function() {deepEqual( Stem("clutching"), "clutch");});
test("clyster -> clyster", function() {deepEqual( Stem("clyster"), "clyster");});
test("clytemnestra -> clytemnestra", function() {deepEqual( Stem("clytemnestra"), "clytemnestra");});
test("cneius -> cneiu", function() {deepEqual( Stem("cneius"), "cneiu");});
test("cnemies -> cnemi", function() {deepEqual( Stem("cnemies"), "cnemi");});
test("co -> co", function() {deepEqual( Stem("co"), "co");});
test("coach -> coach", function() {deepEqual( Stem("coach"), "coach");});
test("coached -> coach", function() {deepEqual( Stem("coached"), "coach");});
test("coaches -> coach", function() {deepEqual( Stem("coaches"), "coach");});
test("coachmakers -> coachmak", function() {deepEqual( Stem("coachmakers"), "coachmak");});
test("coachman -> coachman", function() {deepEqual( Stem("coachman"), "coachman");});
test("coachmen -> coachmen", function() {deepEqual( Stem("coachmen"), "coachmen");});
test("coact -> coact", function() {deepEqual( Stem("coact"), "coact");});
test("coactive -> coactiv", function() {deepEqual( Stem("coactive"), "coactiv");});
test("coagulate -> coagul", function() {deepEqual( Stem("coagulate"), "coagul");});
test("coal -> coal", function() {deepEqual( Stem("coal"), "coal");});
test("coals -> coal", function() {deepEqual( Stem("coals"), "coal");});
test("coarse -> coars", function() {deepEqual( Stem("coarse"), "coars");});
test("coarsely -> coars", function() {deepEqual( Stem("coarsely"), "coars");});
test("coarsest -> coarsest", function() {deepEqual( Stem("coarsest"), "coarsest");});
test("coast -> coast", function() {deepEqual( Stem("coast"), "coast");});
test("coasting -> coast", function() {deepEqual( Stem("coasting"), "coast");});
test("coasts -> coast", function() {deepEqual( Stem("coasts"), "coast");});
test("coat -> coat", function() {deepEqual( Stem("coat"), "coat");});
test("coated -> coat", function() {deepEqual( Stem("coated"), "coat");});
test("coating -> coat", function() {deepEqual( Stem("coating"), "coat");});
test("coats -> coat", function() {deepEqual( Stem("coats"), "coat");});
test("coax -> coax", function() {deepEqual( Stem("coax"), "coax");});
test("coaxed -> coax", function() {deepEqual( Stem("coaxed"), "coax");});
test("coaxes -> coax", function() {deepEqual( Stem("coaxes"), "coax");});
test("coaxing -> coax", function() {deepEqual( Stem("coaxing"), "coax");});
test("coaxings -> coax", function() {deepEqual( Stem("coaxings"), "coax");});
test("cob -> cob", function() {deepEqual( Stem("cob"), "cob");});
test("cobble -> cobbl", function() {deepEqual( Stem("cobble"), "cobbl");});
test("cobbled -> cobbl", function() {deepEqual( Stem("cobbled"), "cobbl");});
test("cobbler -> cobbler", function() {deepEqual( Stem("cobbler"), "cobbler");});
test("cobham -> cobham", function() {deepEqual( Stem("cobham"), "cobham");});
test("cobloaf -> cobloaf", function() {deepEqual( Stem("cobloaf"), "cobloaf");});
test("cobweb -> cobweb", function() {deepEqual( Stem("cobweb"), "cobweb");});
test("cobwebs -> cobweb", function() {deepEqual( Stem("cobwebs"), "cobweb");});
test("cochere -> cocher", function() {deepEqual( Stem("cochere"), "cocher");});
test("cock -> cock", function() {deepEqual( Stem("cock"), "cock");});
test("cockades -> cockad", function() {deepEqual( Stem("cockades"), "cockad");});
test("cockatrice -> cockatric", function() {deepEqual( Stem("cockatrice"), "cockatric");});
test("cockatrices -> cockatric", function() {deepEqual( Stem("cockatrices"), "cockatric");});
test("cocked -> cock", function() {deepEqual( Stem("cocked"), "cock");});
test("cockle -> cockl", function() {deepEqual( Stem("cockle"), "cockl");});
test("cockled -> cockl", function() {deepEqual( Stem("cockled"), "cockl");});
test("cockney -> cocknei", function() {deepEqual( Stem("cockney"), "cocknei");});
test("cockneyesses -> cockneyess", function() {deepEqual( Stem("cockneyesses"), "cockneyess");});
test("cockneys -> cocknei", function() {deepEqual( Stem("cockneys"), "cocknei");});
test("cockpit -> cockpit", function() {deepEqual( Stem("cockpit"), "cockpit");});
test("cocks -> cock", function() {deepEqual( Stem("cocks"), "cock");});
test("cocksure -> cocksur", function() {deepEqual( Stem("cocksure"), "cocksur");});
test("cocoa -> cocoa", function() {deepEqual( Stem("cocoa"), "cocoa");});
test("cocoanut -> cocoanut", function() {deepEqual( Stem("cocoanut"), "cocoanut");});
test("coctus -> coctu", function() {deepEqual( Stem("coctus"), "coctu");});
test("cocytus -> cocytu", function() {deepEqual( Stem("cocytus"), "cocytu");});
test("cod -> cod", function() {deepEqual( Stem("cod"), "cod");});
test("codding -> cod", function() {deepEqual( Stem("codding"), "cod");});
test("code -> code", function() {deepEqual( Stem("code"), "code");});
test("codling -> codl", function() {deepEqual( Stem("codling"), "codl");});
test("codpiece -> codpiec", function() {deepEqual( Stem("codpiece"), "codpiec");});
test("codpieces -> codpiec", function() {deepEqual( Stem("codpieces"), "codpiec");});
test("cods -> cod", function() {deepEqual( Stem("cods"), "cod");});
test("coelestibus -> coelestibu", function() {deepEqual( Stem("coelestibus"), "coelestibu");});
test("coesar -> coesar", function() {deepEqual( Stem("coesar"), "coesar");});
test("coeur -> coeur", function() {deepEqual( Stem("coeur"), "coeur");});
test("coffee -> coffe", function() {deepEqual( Stem("coffee"), "coffe");});
test("coffer -> coffer", function() {deepEqual( Stem("coffer"), "coffer");});
test("coffers -> coffer", function() {deepEqual( Stem("coffers"), "coffer");});
test("coffin -> coffin", function() {deepEqual( Stem("coffin"), "coffin");});
test("coffins -> coffin", function() {deepEqual( Stem("coffins"), "coffin");});
test("coffy -> coffi", function() {deepEqual( Stem("coffy"), "coffi");});
test("cog -> cog", function() {deepEqual( Stem("cog"), "cog");});
test("cogging -> cog", function() {deepEqual( Stem("cogging"), "cog");});
test("cogitation -> cogit", function() {deepEqual( Stem("cogitation"), "cogit");});
test("cogitations -> cogit", function() {deepEqual( Stem("cogitations"), "cogit");});
test("cognac -> cognac", function() {deepEqual( Stem("cognac"), "cognac");});
test("cognition -> cognit", function() {deepEqual( Stem("cognition"), "cognit");});
test("cognizance -> cogniz", function() {deepEqual( Stem("cognizance"), "cogniz");});
test("cogscomb -> cogscomb", function() {deepEqual( Stem("cogscomb"), "cogscomb");});
test("cohabitants -> cohabit", function() {deepEqual( Stem("cohabitants"), "cohabit");});
test("coher -> coher", function() {deepEqual( Stem("coher"), "coher");});
test("cohere -> coher", function() {deepEqual( Stem("cohere"), "coher");});
test("coherence -> coher", function() {deepEqual( Stem("coherence"), "coher");});
test("coherent -> coher", function() {deepEqual( Stem("coherent"), "coher");});
test("cohorts -> cohort", function() {deepEqual( Stem("cohorts"), "cohort");});
test("coif -> coif", function() {deepEqual( Stem("coif"), "coif");});
test("coign -> coign", function() {deepEqual( Stem("coign"), "coign");});
test("coil -> coil", function() {deepEqual( Stem("coil"), "coil");});
test("coiled -> coil", function() {deepEqual( Stem("coiled"), "coil");});
test("coin -> coin", function() {deepEqual( Stem("coin"), "coin");});
test("coinage -> coinag", function() {deepEqual( Stem("coinage"), "coinag");});
test("coincided -> coincid", function() {deepEqual( Stem("coincided"), "coincid");});
test("coiner -> coiner", function() {deepEqual( Stem("coiner"), "coiner");});
test("coining -> coin", function() {deepEqual( Stem("coining"), "coin");});
test("coins -> coin", function() {deepEqual( Stem("coins"), "coin");});
test("col -> col", function() {deepEqual( Stem("col"), "col");});
test("colbrand -> colbrand", function() {deepEqual( Stem("colbrand"), "colbrand");});
test("colchos -> colcho", function() {deepEqual( Stem("colchos"), "colcho");});
test("cold -> cold", function() {deepEqual( Stem("cold"), "cold");});
test("colder -> colder", function() {deepEqual( Stem("colder"), "colder");});
test("coldest -> coldest", function() {deepEqual( Stem("coldest"), "coldest");});
test("coldly -> coldli", function() {deepEqual( Stem("coldly"), "coldli");});
test("coldness -> cold", function() {deepEqual( Stem("coldness"), "cold");});
test("coldspur -> coldspur", function() {deepEqual( Stem("coldspur"), "coldspur");});
test("colebrook -> colebrook", function() {deepEqual( Stem("colebrook"), "colebrook");});
test("colic -> colic", function() {deepEqual( Stem("colic"), "colic");});
test("collapsed -> collaps", function() {deepEqual( Stem("collapsed"), "collaps");});
test("collar -> collar", function() {deepEqual( Stem("collar"), "collar");});
test("collars -> collar", function() {deepEqual( Stem("collars"), "collar");});
test("collateral -> collater", function() {deepEqual( Stem("collateral"), "collater");});
test("colleague -> colleagu", function() {deepEqual( Stem("colleague"), "colleagu");});
test("colleagued -> colleagu", function() {deepEqual( Stem("colleagued"), "colleagu");});
test("collect -> collect", function() {deepEqual( Stem("collect"), "collect");});
test("collected -> collect", function() {deepEqual( Stem("collected"), "collect");});
test("collection -> collect", function() {deepEqual( Stem("collection"), "collect");});
test("collections -> collect", function() {deepEqual( Stem("collections"), "collect");});
test("collector -> collector", function() {deepEqual( Stem("collector"), "collector");});
test("collectorship -> collectorship", function() {deepEqual( Stem("collectorship"), "collectorship");});
test("college -> colleg", function() {deepEqual( Stem("college"), "colleg");});
test("colleges -> colleg", function() {deepEqual( Stem("colleges"), "colleg");});
test("collegian -> collegian", function() {deepEqual( Stem("collegian"), "collegian");});
test("collegiate -> collegi", function() {deepEqual( Stem("collegiate"), "collegi");});
test("collied -> colli", function() {deepEqual( Stem("collied"), "colli");});
test("collier -> collier", function() {deepEqual( Stem("collier"), "collier");});
test("colliers -> collier", function() {deepEqual( Stem("colliers"), "collier");});
test("collingwood -> collingwood", function() {deepEqual( Stem("collingwood"), "collingwood");});
test("collop -> collop", function() {deepEqual( Stem("collop"), "collop");});
test("colloquies -> colloqui", function() {deepEqual( Stem("colloquies"), "colloqui");});
test("colloquy -> colloqui", function() {deepEqual( Stem("colloquy"), "colloqui");});
test("collusion -> collus", function() {deepEqual( Stem("collusion"), "collus");});
test("colme -> colm", function() {deepEqual( Stem("colme"), "colm");});
test("colmekill -> colmekil", function() {deepEqual( Stem("colmekill"), "colmekil");});
test("colnaghi -> colnaghi", function() {deepEqual( Stem("colnaghi"), "colnaghi");});
test("cologne -> cologn", function() {deepEqual( Stem("cologne"), "cologn");});
test("colonel -> colonel", function() {deepEqual( Stem("colonel"), "colonel");});
test("colonels -> colonel", function() {deepEqual( Stem("colonels"), "colonel");});
test("colonial -> coloni", function() {deepEqual( Stem("colonial"), "coloni");});
test("colonies -> coloni", function() {deepEqual( Stem("colonies"), "coloni");});
test("colony -> coloni", function() {deepEqual( Stem("colony"), "coloni");});
test("coloquintida -> coloquintida", function() {deepEqual( Stem("coloquintida"), "coloquintida");});
test("color -> color", function() {deepEqual( Stem("color"), "color");});
test("colors -> color", function() {deepEqual( Stem("colors"), "color");});
test("colossus -> colossu", function() {deepEqual( Stem("colossus"), "colossu");});
test("colour -> colour", function() {deepEqual( Stem("colour"), "colour");});
test("colourable -> colour", function() {deepEqual( Stem("colourable"), "colour");});
test("coloured -> colour", function() {deepEqual( Stem("coloured"), "colour");});
test("colouring -> colour", function() {deepEqual( Stem("colouring"), "colour");});
test("colours -> colour", function() {deepEqual( Stem("colours"), "colour");});
test("colt -> colt", function() {deepEqual( Stem("colt"), "colt");});
test("colted -> colt", function() {deepEqual( Stem("colted"), "colt");});
test("colts -> colt", function() {deepEqual( Stem("colts"), "colt");});
test("columbine -> columbin", function() {deepEqual( Stem("columbine"), "columbin");});
test("columbines -> columbin", function() {deepEqual( Stem("columbines"), "columbin");});
test("column -> column", function() {deepEqual( Stem("column"), "column");});
test("columns -> column", function() {deepEqual( Stem("columns"), "column");});
test("colville -> colvil", function() {deepEqual( Stem("colville"), "colvil");});
test("com -> com", function() {deepEqual( Stem("com"), "com");});
test("comagene -> comagen", function() {deepEqual( Stem("comagene"), "comagen");});
test("comart -> comart", function() {deepEqual( Stem("comart"), "comart");});
test("comb -> comb", function() {deepEqual( Stem("comb"), "comb");});
test("combat -> combat", function() {deepEqual( Stem("combat"), "combat");});
test("combatant -> combat", function() {deepEqual( Stem("combatant"), "combat");});
test("combatants -> combat", function() {deepEqual( Stem("combatants"), "combat");});
test("combated -> combat", function() {deepEqual( Stem("combated"), "combat");});
test("combating -> combat", function() {deepEqual( Stem("combating"), "combat");});
test("combats -> combat", function() {deepEqual( Stem("combats"), "combat");});
test("combed -> comb", function() {deepEqual( Stem("combed"), "comb");});
test("combin -> combin", function() {deepEqual( Stem("combin"), "combin");});
test("combinate -> combin", function() {deepEqual( Stem("combinate"), "combin");});
test("combination -> combin", function() {deepEqual( Stem("combination"), "combin");});
test("combine -> combin", function() {deepEqual( Stem("combine"), "combin");});
test("combined -> combin", function() {deepEqual( Stem("combined"), "combin");});
test("combing -> comb", function() {deepEqual( Stem("combing"), "comb");});
test("combless -> combless", function() {deepEqual( Stem("combless"), "combless");});
test("comboined -> comboin", function() {deepEqual( Stem("comboined"), "comboin");});
test("combs -> comb", function() {deepEqual( Stem("combs"), "comb");});
test("combustion -> combust", function() {deepEqual( Stem("combustion"), "combust");});
test("come -> come", function() {deepEqual( Stem("come"), "come");});
test("comedian -> comedian", function() {deepEqual( Stem("comedian"), "comedian");});
test("comedians -> comedian", function() {deepEqual( Stem("comedians"), "comedian");});
test("comedies -> comedi", function() {deepEqual( Stem("comedies"), "comedi");});
test("comedy -> comedi", function() {deepEqual( Stem("comedy"), "comedi");});
test("comeliness -> comeli", function() {deepEqual( Stem("comeliness"), "comeli");});
test("comely -> come", function() {deepEqual( Stem("comely"), "come");});
test("comer -> comer", function() {deepEqual( Stem("comer"), "comer");});
test("comers -> comer", function() {deepEqual( Stem("comers"), "comer");});
test("comes -> come", function() {deepEqual( Stem("comes"), "come");});
test("comest -> comest", function() {deepEqual( Stem("comest"), "comest");});
test("comestibles -> comest", function() {deepEqual( Stem("comestibles"), "comest");});
test("comet -> comet", function() {deepEqual( Stem("comet"), "comet");});
test("cometh -> cometh", function() {deepEqual( Stem("cometh"), "cometh");});
test("comets -> comet", function() {deepEqual( Stem("comets"), "comet");});
test("comfect -> comfect", function() {deepEqual( Stem("comfect"), "comfect");});
test("comfit -> comfit", function() {deepEqual( Stem("comfit"), "comfit");});
test("comfits -> comfit", function() {deepEqual( Stem("comfits"), "comfit");});
test("comfort -> comfort", function() {deepEqual( Stem("comfort"), "comfort");});
test("comfortable -> comfort", function() {deepEqual( Stem("comfortable"), "comfort");});
test("comfortably -> comfort", function() {deepEqual( Stem("comfortably"), "comfort");});
test("comforted -> comfort", function() {deepEqual( Stem("comforted"), "comfort");});
test("comforter -> comfort", function() {deepEqual( Stem("comforter"), "comfort");});
test("comforters -> comfort", function() {deepEqual( Stem("comforters"), "comfort");});
test("comforting -> comfort", function() {deepEqual( Stem("comforting"), "comfort");});
test("comfortless -> comfortless", function() {deepEqual( Stem("comfortless"), "comfortless");});
test("comforts -> comfort", function() {deepEqual( Stem("comforts"), "comfort");});
test("comic -> comic", function() {deepEqual( Stem("comic"), "comic");});
test("comical -> comic", function() {deepEqual( Stem("comical"), "comic");});
test("coming -> come", function() {deepEqual( Stem("coming"), "come");});
test("comings -> come", function() {deepEqual( Stem("comings"), "come");});
test("cominius -> cominiu", function() {deepEqual( Stem("cominius"), "cominiu");});
test("comite -> comit", function() {deepEqual( Stem("comite"), "comit");});
test("comma -> comma", function() {deepEqual( Stem("comma"), "comma");});
test("command -> command", function() {deepEqual( Stem("command"), "command");});
test("commandant -> command", function() {deepEqual( Stem("commandant"), "command");});
test("commande -> command", function() {deepEqual( Stem("commande"), "command");});
test("commanded -> command", function() {deepEqual( Stem("commanded"), "command");});
test("commander -> command", function() {deepEqual( Stem("commander"), "command");});
test("commanders -> command", function() {deepEqual( Stem("commanders"), "command");});
test("commanding -> command", function() {deepEqual( Stem("commanding"), "command");});
test("commandment -> command", function() {deepEqual( Stem("commandment"), "command");});
test("commandments -> command", function() {deepEqual( Stem("commandments"), "command");});
test("commands -> command", function() {deepEqual( Stem("commands"), "command");});
test("comme -> comm", function() {deepEqual( Stem("comme"), "comm");});
test("commemorating -> commemor", function() {deepEqual( Stem("commemorating"), "commemor");});
test("commenc -> commenc", function() {deepEqual( Stem("commenc"), "commenc");});
test("commence -> commenc", function() {deepEqual( Stem("commence"), "commenc");});
test("commenced -> commenc", function() {deepEqual( Stem("commenced"), "commenc");});
test("commencement -> commenc", function() {deepEqual( Stem("commencement"), "commenc");});
test("commences -> commenc", function() {deepEqual( Stem("commences"), "commenc");});
test("commencing -> commenc", function() {deepEqual( Stem("commencing"), "commenc");});
test("commend -> commend", function() {deepEqual( Stem("commend"), "commend");});
test("commendable -> commend", function() {deepEqual( Stem("commendable"), "commend");});
test("commendation -> commend", function() {deepEqual( Stem("commendation"), "commend");});
test("commendations -> commend", function() {deepEqual( Stem("commendations"), "commend");});
test("commended -> commend", function() {deepEqual( Stem("commended"), "commend");});
test("commending -> commend", function() {deepEqual( Stem("commending"), "commend");});
test("commends -> commend", function() {deepEqual( Stem("commends"), "commend");});
test("comment -> comment", function() {deepEqual( Stem("comment"), "comment");});
test("commentaries -> commentari", function() {deepEqual( Stem("commentaries"), "commentari");});
test("commenting -> comment", function() {deepEqual( Stem("commenting"), "comment");});
test("comments -> comment", function() {deepEqual( Stem("comments"), "comment");});
test("commerce -> commerc", function() {deepEqual( Stem("commerce"), "commerc");});
test("commercial -> commerci", function() {deepEqual( Stem("commercial"), "commerci");});
test("comminations -> commin", function() {deepEqual( Stem("comminations"), "commin");});
test("commingled -> commingl", function() {deepEqual( Stem("commingled"), "commingl");});
test("commiserate -> commiser", function() {deepEqual( Stem("commiserate"), "commiser");});
test("commiseration -> commiser", function() {deepEqual( Stem("commiseration"), "commiser");});
test("commissary -> commissari", function() {deepEqual( Stem("commissary"), "commissari");});
test("commission -> commiss", function() {deepEqual( Stem("commission"), "commiss");});
test("commissioned -> commiss", function() {deepEqual( Stem("commissioned"), "commiss");});
test("commissioner -> commission", function() {deepEqual( Stem("commissioner"), "commission");});
test("commissioners -> commission", function() {deepEqual( Stem("commissioners"), "commission");});
test("commissions -> commiss", function() {deepEqual( Stem("commissions"), "commiss");});
test("commit -> commit", function() {deepEqual( Stem("commit"), "commit");});
test("commits -> commit", function() {deepEqual( Stem("commits"), "commit");});
test("committ -> committ", function() {deepEqual( Stem("committ"), "committ");});
test("committal -> committ", function() {deepEqual( Stem("committal"), "committ");});
test("committed -> commit", function() {deepEqual( Stem("committed"), "commit");});
test("committee -> committe", function() {deepEqual( Stem("committee"), "committe");});
test("committing -> commit", function() {deepEqual( Stem("committing"), "commit");});
test("commix -> commix", function() {deepEqual( Stem("commix"), "commix");});
test("commixed -> commix", function() {deepEqual( Stem("commixed"), "commix");});
test("commixtion -> commixt", function() {deepEqual( Stem("commixtion"), "commixt");});
test("commixture -> commixtur", function() {deepEqual( Stem("commixture"), "commixtur");});
test("commodious -> commodi", function() {deepEqual( Stem("commodious"), "commodi");});
test("commodities -> commod", function() {deepEqual( Stem("commodities"), "commod");});
test("commodity -> commod", function() {deepEqual( Stem("commodity"), "commod");});
test("common -> common", function() {deepEqual( Stem("common"), "common");});
test("commonage -> commonag", function() {deepEqual( Stem("commonage"), "commonag");});
test("commonalty -> commonalti", function() {deepEqual( Stem("commonalty"), "commonalti");});
test("commoner -> common", function() {deepEqual( Stem("commoner"), "common");});
test("commoners -> common", function() {deepEqual( Stem("commoners"), "common");});
test("commonly -> commonli", function() {deepEqual( Stem("commonly"), "commonli");});
test("commons -> common", function() {deepEqual( Stem("commons"), "common");});
test("commonweal -> commonw", function() {deepEqual( Stem("commonweal"), "commonw");});
test("commonwealth -> commonwealth", function() {deepEqual( Stem("commonwealth"), "commonwealth");});
test("commotion -> commot", function() {deepEqual( Stem("commotion"), "commot");});
test("commotions -> commot", function() {deepEqual( Stem("commotions"), "commot");});
test("commune -> commun", function() {deepEqual( Stem("commune"), "commun");});
test("communed -> commun", function() {deepEqual( Stem("communed"), "commun");});
test("communicat -> communicat", function() {deepEqual( Stem("communicat"), "communicat");});
test("communicate -> commun", function() {deepEqual( Stem("communicate"), "commun");});
test("communicated -> commun", function() {deepEqual( Stem("communicated"), "commun");});
test("communicating -> commun", function() {deepEqual( Stem("communicating"), "commun");});
test("communication -> commun", function() {deepEqual( Stem("communication"), "commun");});
test("communications -> commun", function() {deepEqual( Stem("communications"), "commun");});
test("communicative -> commun", function() {deepEqual( Stem("communicative"), "commun");});
test("communing -> commun", function() {deepEqual( Stem("communing"), "commun");});
test("communion -> communion", function() {deepEqual( Stem("communion"), "communion");});
test("communities -> commun", function() {deepEqual( Stem("communities"), "commun");});
test("community -> commun", function() {deepEqual( Stem("community"), "commun");});
test("comonty -> comonti", function() {deepEqual( Stem("comonty"), "comonti");});
test("compact -> compact", function() {deepEqual( Stem("compact"), "compact");});
test("compagnie -> compagni", function() {deepEqual( Stem("compagnie"), "compagni");});
test("companies -> compani", function() {deepEqual( Stem("companies"), "compani");});
test("companion -> companion", function() {deepEqual( Stem("companion"), "companion");});
test("companions -> companion", function() {deepEqual( Stem("companions"), "companion");});
test("companionship -> companionship", function() {deepEqual( Stem("companionship"), "companionship");});
test("company -> compani", function() {deepEqual( Stem("company"), "compani");});
test("compar -> compar", function() {deepEqual( Stem("compar"), "compar");});
test("comparable -> compar", function() {deepEqual( Stem("comparable"), "compar");});
test("comparative -> compar", function() {deepEqual( Stem("comparative"), "compar");});
test("comparatively -> compar", function() {deepEqual( Stem("comparatively"), "compar");});
test("compare -> compar", function() {deepEqual( Stem("compare"), "compar");});
test("compared -> compar", function() {deepEqual( Stem("compared"), "compar");});
test("comparing -> compar", function() {deepEqual( Stem("comparing"), "compar");});
test("comparison -> comparison", function() {deepEqual( Stem("comparison"), "comparison");});
test("comparisons -> comparison", function() {deepEqual( Stem("comparisons"), "comparison");});
test("compartner -> compartn", function() {deepEqual( Stem("compartner"), "compartn");});
test("compass -> compass", function() {deepEqual( Stem("compass"), "compass");});
test("compasses -> compass", function() {deepEqual( Stem("compasses"), "compass");});
test("compassing -> compass", function() {deepEqual( Stem("compassing"), "compass");});
test("compassion -> compass", function() {deepEqual( Stem("compassion"), "compass");});
test("compassionate -> compassion", function() {deepEqual( Stem("compassionate"), "compassion");});
test("compassionating -> compassion", function() {deepEqual( Stem("compassionating"), "compassion");});
test("compatriot -> compatriot", function() {deepEqual( Stem("compatriot"), "compatriot");});
test("compeers -> compeer", function() {deepEqual( Stem("compeers"), "compeer");});
test("compel -> compel", function() {deepEqual( Stem("compel"), "compel");});
test("compell -> compel", function() {deepEqual( Stem("compell"), "compel");});
test("compelled -> compel", function() {deepEqual( Stem("compelled"), "compel");});
test("compelling -> compel", function() {deepEqual( Stem("compelling"), "compel");});
test("compels -> compel", function() {deepEqual( Stem("compels"), "compel");});
test("compensate -> compens", function() {deepEqual( Stem("compensate"), "compens");});
test("compensated -> compens", function() {deepEqual( Stem("compensated"), "compens");});
test("compensation -> compens", function() {deepEqual( Stem("compensation"), "compens");});
test("compete -> compet", function() {deepEqual( Stem("compete"), "compet");});
test("competence -> compet", function() {deepEqual( Stem("competence"), "compet");});
test("competency -> compet", function() {deepEqual( Stem("competency"), "compet");});
test("competent -> compet", function() {deepEqual( Stem("competent"), "compet");});
test("competition -> competit", function() {deepEqual( Stem("competition"), "competit");});
test("competitor -> competitor", function() {deepEqual( Stem("competitor"), "competitor");});
test("competitors -> competitor", function() {deepEqual( Stem("competitors"), "competitor");});
test("compil -> compil", function() {deepEqual( Stem("compil"), "compil");});
test("compile -> compil", function() {deepEqual( Stem("compile"), "compil");});
test("compiled -> compil", function() {deepEqual( Stem("compiled"), "compil");});
test("compiling -> compil", function() {deepEqual( Stem("compiling"), "compil");});
test("complacency -> complac", function() {deepEqual( Stem("complacency"), "complac");});
test("complacently -> complac", function() {deepEqual( Stem("complacently"), "complac");});
test("complain -> complain", function() {deepEqual( Stem("complain"), "complain");});
test("complainer -> complain", function() {deepEqual( Stem("complainer"), "complain");});
test("complainest -> complainest", function() {deepEqual( Stem("complainest"), "complainest");});
test("complaining -> complain", function() {deepEqual( Stem("complaining"), "complain");});
test("complainings -> complain", function() {deepEqual( Stem("complainings"), "complain");});
test("complains -> complain", function() {deepEqual( Stem("complains"), "complain");});
test("complaint -> complaint", function() {deepEqual( Stem("complaint"), "complaint");});
test("complaints -> complaint", function() {deepEqual( Stem("complaints"), "complaint");});
test("complaisance -> complais", function() {deepEqual( Stem("complaisance"), "complais");});
test("complement -> complement", function() {deepEqual( Stem("complement"), "complement");});
test("complements -> complement", function() {deepEqual( Stem("complements"), "complement");});
test("complete -> complet", function() {deepEqual( Stem("complete"), "complet");});
test("completed -> complet", function() {deepEqual( Stem("completed"), "complet");});
test("completely -> complet", function() {deepEqual( Stem("completely"), "complet");});
test("completing -> complet", function() {deepEqual( Stem("completing"), "complet");});
test("completion -> complet", function() {deepEqual( Stem("completion"), "complet");});
test("complexion -> complexion", function() {deepEqual( Stem("complexion"), "complexion");});
test("complexioned -> complexion", function() {deepEqual( Stem("complexioned"), "complexion");});
test("complexions -> complexion", function() {deepEqual( Stem("complexions"), "complexion");});
test("complicated -> complic", function() {deepEqual( Stem("complicated"), "complic");});
test("complications -> complic", function() {deepEqual( Stem("complications"), "complic");});
test("complices -> complic", function() {deepEqual( Stem("complices"), "complic");});
test("complies -> compli", function() {deepEqual( Stem("complies"), "compli");});
test("compliment -> compliment", function() {deepEqual( Stem("compliment"), "compliment");});
test("complimental -> compliment", function() {deepEqual( Stem("complimental"), "compliment");});
test("complimentary -> complimentari", function() {deepEqual( Stem("complimentary"), "complimentari");});
test("complimented -> compliment", function() {deepEqual( Stem("complimented"), "compliment");});
test("compliments -> compliment", function() {deepEqual( Stem("compliments"), "compliment");});
test("complot -> complot", function() {deepEqual( Stem("complot"), "complot");});
test("complots -> complot", function() {deepEqual( Stem("complots"), "complot");});
test("complotted -> complot", function() {deepEqual( Stem("complotted"), "complot");});
test("comply -> compli", function() {deepEqual( Stem("comply"), "compli");});
test("complying -> compli", function() {deepEqual( Stem("complying"), "compli");});
test("comported -> comport", function() {deepEqual( Stem("comported"), "comport");});
test("compos -> compo", function() {deepEqual( Stem("compos"), "compo");});
test("compose -> compos", function() {deepEqual( Stem("compose"), "compos");});
test("composed -> compos", function() {deepEqual( Stem("composed"), "compos");});
test("composing -> compos", function() {deepEqual( Stem("composing"), "compos");});
test("composition -> composit", function() {deepEqual( Stem("composition"), "composit");});
test("compositions -> composit", function() {deepEqual( Stem("compositions"), "composit");});
test("compositor -> compositor", function() {deepEqual( Stem("compositor"), "compositor");});
test("compost -> compost", function() {deepEqual( Stem("compost"), "compost");});
test("composture -> compostur", function() {deepEqual( Stem("composture"), "compostur");});
test("composure -> composur", function() {deepEqual( Stem("composure"), "composur");});
test("compound -> compound", function() {deepEqual( Stem("compound"), "compound");});
test("compounded -> compound", function() {deepEqual( Stem("compounded"), "compound");});
test("compounds -> compound", function() {deepEqual( Stem("compounds"), "compound");});
test("comprehend -> comprehend", function() {deepEqual( Stem("comprehend"), "comprehend");});
test("comprehended -> comprehend", function() {deepEqual( Stem("comprehended"), "comprehend");});
test("comprehending -> comprehend", function() {deepEqual( Stem("comprehending"), "comprehend");});
test("comprehends -> comprehend", function() {deepEqual( Stem("comprehends"), "comprehend");});
test("comprehension -> comprehens", function() {deepEqual( Stem("comprehension"), "comprehens");});
test("compremises -> compremis", function() {deepEqual( Stem("compremises"), "compremis");});
test("compris -> compri", function() {deepEqual( Stem("compris"), "compri");});
test("comprising -> compris", function() {deepEqual( Stem("comprising"), "compris");});
test("compromis -> compromi", function() {deepEqual( Stem("compromis"), "compromi");});
test("compromise -> compromis", function() {deepEqual( Stem("compromise"), "compromis");});
test("compromised -> compromis", function() {deepEqual( Stem("compromised"), "compromis");});
test("compt -> compt", function() {deepEqual( Stem("compt"), "compt");});
test("comptible -> comptibl", function() {deepEqual( Stem("comptible"), "comptibl");});
test("comptrollers -> comptrol", function() {deepEqual( Stem("comptrollers"), "comptrol");});
test("compulsatory -> compulsatori", function() {deepEqual( Stem("compulsatory"), "compulsatori");});
test("compulsion -> compuls", function() {deepEqual( Stem("compulsion"), "compuls");});
test("compulsive -> compuls", function() {deepEqual( Stem("compulsive"), "compuls");});
test("compunction -> compunct", function() {deepEqual( Stem("compunction"), "compunct");});
test("compunctious -> compuncti", function() {deepEqual( Stem("compunctious"), "compuncti");});
test("computation -> comput", function() {deepEqual( Stem("computation"), "comput");});
test("comrade -> comrad", function() {deepEqual( Stem("comrade"), "comrad");});
test("comrades -> comrad", function() {deepEqual( Stem("comrades"), "comrad");});
test("comte -> comt", function() {deepEqual( Stem("comte"), "comt");});
test("comtesse -> comtess", function() {deepEqual( Stem("comtesse"), "comtess");});
test("comus -> comu", function() {deepEqual( Stem("comus"), "comu");});
test("comutual -> comutu", function() {deepEqual( Stem("comutual"), "comutu");});
test("con -> con", function() {deepEqual( Stem("con"), "con");});
test("concave -> concav", function() {deepEqual( Stem("concave"), "concav");});
test("concavities -> concav", function() {deepEqual( Stem("concavities"), "concav");});
test("conceal -> conceal", function() {deepEqual( Stem("conceal"), "conceal");});
test("concealed -> conceal", function() {deepEqual( Stem("concealed"), "conceal");});
test("concealing -> conceal", function() {deepEqual( Stem("concealing"), "conceal");});
test("concealment -> conceal", function() {deepEqual( Stem("concealment"), "conceal");});
test("concealments -> conceal", function() {deepEqual( Stem("concealments"), "conceal");});
test("conceals -> conceal", function() {deepEqual( Stem("conceals"), "conceal");});
test("conceit -> conceit", function() {deepEqual( Stem("conceit"), "conceit");});
test("conceited -> conceit", function() {deepEqual( Stem("conceited"), "conceit");});
test("conceitless -> conceitless", function() {deepEqual( Stem("conceitless"), "conceitless");});
test("conceits -> conceit", function() {deepEqual( Stem("conceits"), "conceit");});
test("conceiv -> conceiv", function() {deepEqual( Stem("conceiv"), "conceiv");});
test("conceivable -> conceiv", function() {deepEqual( Stem("conceivable"), "conceiv");});
test("conceive -> conceiv", function() {deepEqual( Stem("conceive"), "conceiv");});
test("conceived -> conceiv", function() {deepEqual( Stem("conceived"), "conceiv");});
test("conceives -> conceiv", function() {deepEqual( Stem("conceives"), "conceiv");});
test("conceiving -> conceiv", function() {deepEqual( Stem("conceiving"), "conceiv");});
test("conception -> concept", function() {deepEqual( Stem("conception"), "concept");});
test("conceptions -> concept", function() {deepEqual( Stem("conceptions"), "concept");});
test("conceptious -> concepti", function() {deepEqual( Stem("conceptious"), "concepti");});
test("concern -> concern", function() {deepEqual( Stem("concern"), "concern");});
test("concernancy -> concern", function() {deepEqual( Stem("concernancy"), "concern");});
test("concerned -> concern", function() {deepEqual( Stem("concerned"), "concern");});
test("concerneth -> concerneth", function() {deepEqual( Stem("concerneth"), "concerneth");});
test("concerning -> concern", function() {deepEqual( Stem("concerning"), "concern");});
test("concernings -> concern", function() {deepEqual( Stem("concernings"), "concern");});
test("concerns -> concern", function() {deepEqual( Stem("concerns"), "concern");});
test("concert -> concert", function() {deepEqual( Stem("concert"), "concert");});
test("concerts -> concert", function() {deepEqual( Stem("concerts"), "concert");});
test("conchs -> conch", function() {deepEqual( Stem("conchs"), "conch");});
test("conciliate -> concili", function() {deepEqual( Stem("conciliate"), "concili");});
test("conciliation -> concili", function() {deepEqual( Stem("conciliation"), "concili");});
test("conclave -> conclav", function() {deepEqual( Stem("conclave"), "conclav");});
test("conclaves -> conclav", function() {deepEqual( Stem("conclaves"), "conclav");});
test("conclud -> conclud", function() {deepEqual( Stem("conclud"), "conclud");});
test("conclude -> conclud", function() {deepEqual( Stem("conclude"), "conclud");});
test("concluded -> conclud", function() {deepEqual( Stem("concluded"), "conclud");});
test("concludes -> conclud", function() {deepEqual( Stem("concludes"), "conclud");});
test("concluding -> conclud", function() {deepEqual( Stem("concluding"), "conclud");});
test("conclusion -> conclus", function() {deepEqual( Stem("conclusion"), "conclus");});
test("conclusions -> conclus", function() {deepEqual( Stem("conclusions"), "conclus");});
test("concoct -> concoct", function() {deepEqual( Stem("concoct"), "concoct");});
test("concocted -> concoct", function() {deepEqual( Stem("concocted"), "concoct");});
test("concolinel -> concolinel", function() {deepEqual( Stem("concolinel"), "concolinel");});
test("concord -> concord", function() {deepEqual( Stem("concord"), "concord");});
test("concubine -> concubin", function() {deepEqual( Stem("concubine"), "concubin");});
test("concupiscible -> concupisc", function() {deepEqual( Stem("concupiscible"), "concupisc");});
test("concupy -> concupi", function() {deepEqual( Stem("concupy"), "concupi");});
test("concur -> concur", function() {deepEqual( Stem("concur"), "concur");});
test("concurrence -> concurr", function() {deepEqual( Stem("concurrence"), "concurr");});
test("concurring -> concur", function() {deepEqual( Stem("concurring"), "concur");});
test("concurs -> concur", function() {deepEqual( Stem("concurs"), "concur");});
test("condemn -> condemn", function() {deepEqual( Stem("condemn"), "condemn");});
test("condemnation -> condemn", function() {deepEqual( Stem("condemnation"), "condemn");});
test("condemned -> condemn", function() {deepEqual( Stem("condemned"), "condemn");});
test("condemning -> condemn", function() {deepEqual( Stem("condemning"), "condemn");});
test("condemns -> condemn", function() {deepEqual( Stem("condemns"), "condemn");});
test("condescend -> condescend", function() {deepEqual( Stem("condescend"), "condescend");});
test("condescended -> condescend", function() {deepEqual( Stem("condescended"), "condescend");});
test("condescending -> condescend", function() {deepEqual( Stem("condescending"), "condescend");});
test("condescends -> condescend", function() {deepEqual( Stem("condescends"), "condescend");});
test("condescension -> condescens", function() {deepEqual( Stem("condescension"), "condescens");});
test("condign -> condign", function() {deepEqual( Stem("condign"), "condign");});
test("condiment -> condiment", function() {deepEqual( Stem("condiment"), "condiment");});
test("condition -> condit", function() {deepEqual( Stem("condition"), "condit");});
test("conditionally -> condition", function() {deepEqual( Stem("conditionally"), "condition");});
test("conditions -> condit", function() {deepEqual( Stem("conditions"), "condit");});
test("conditorey -> conditorei", function() {deepEqual( Stem("conditorey"), "conditorei");});
test("condole -> condol", function() {deepEqual( Stem("condole"), "condol");});
test("condoled -> condol", function() {deepEqual( Stem("condoled"), "condol");});
test("condolement -> condol", function() {deepEqual( Stem("condolement"), "condol");});
test("condolence -> condol", function() {deepEqual( Stem("condolence"), "condol");});
test("condolences -> condol", function() {deepEqual( Stem("condolences"), "condol");});
test("condoles -> condol", function() {deepEqual( Stem("condoles"), "condol");});
test("condoling -> condol", function() {deepEqual( Stem("condoling"), "condol");});
test("conduce -> conduc", function() {deepEqual( Stem("conduce"), "conduc");});
test("conduct -> conduct", function() {deepEqual( Stem("conduct"), "conduct");});
test("conducted -> conduct", function() {deepEqual( Stem("conducted"), "conduct");});
test("conducting -> conduct", function() {deepEqual( Stem("conducting"), "conduct");});
test("conductor -> conductor", function() {deepEqual( Stem("conductor"), "conductor");});
test("conductors -> conductor", function() {deepEqual( Stem("conductors"), "conductor");});
test("conducts -> conduct", function() {deepEqual( Stem("conducts"), "conduct");});
test("conduit -> conduit", function() {deepEqual( Stem("conduit"), "conduit");});
test("conduits -> conduit", function() {deepEqual( Stem("conduits"), "conduit");});
test("conected -> conect", function() {deepEqual( Stem("conected"), "conect");});
test("cones -> cone", function() {deepEqual( Stem("cones"), "cone");});
test("coney -> conei", function() {deepEqual( Stem("coney"), "conei");});
test("confection -> confect", function() {deepEqual( Stem("confection"), "confect");});
test("confectionary -> confectionari", function() {deepEqual( Stem("confectionary"), "confectionari");});
test("confections -> confect", function() {deepEqual( Stem("confections"), "confect");});
test("confederacy -> confederaci", function() {deepEqual( Stem("confederacy"), "confederaci");});
test("confederate -> confeder", function() {deepEqual( Stem("confederate"), "confeder");});
test("confederates -> confeder", function() {deepEqual( Stem("confederates"), "confeder");});
test("confer -> confer", function() {deepEqual( Stem("confer"), "confer");});
test("conference -> confer", function() {deepEqual( Stem("conference"), "confer");});
test("conferences -> confer", function() {deepEqual( Stem("conferences"), "confer");});
test("conferr -> conferr", function() {deepEqual( Stem("conferr"), "conferr");});
test("conferred -> confer", function() {deepEqual( Stem("conferred"), "confer");});
test("conferring -> confer", function() {deepEqual( Stem("conferring"), "confer");});
test("confess -> confess", function() {deepEqual( Stem("confess"), "confess");});
test("confessed -> confess", function() {deepEqual( Stem("confessed"), "confess");});
test("confesses -> confess", function() {deepEqual( Stem("confesses"), "confess");});
test("confesseth -> confesseth", function() {deepEqual( Stem("confesseth"), "confesseth");});
test("confessing -> confess", function() {deepEqual( Stem("confessing"), "confess");});
test("confession -> confess", function() {deepEqual( Stem("confession"), "confess");});
test("confessions -> confess", function() {deepEqual( Stem("confessions"), "confess");});
test("confessor -> confessor", function() {deepEqual( Stem("confessor"), "confessor");});
test("confidant -> confid", function() {deepEqual( Stem("confidant"), "confid");});
test("confidante -> confidant", function() {deepEqual( Stem("confidante"), "confidant");});
test("confidantes -> confidant", function() {deepEqual( Stem("confidantes"), "confidant");});
test("confide -> confid", function() {deepEqual( Stem("confide"), "confid");});
test("confided -> confid", function() {deepEqual( Stem("confided"), "confid");});
test("confidence -> confid", function() {deepEqual( Stem("confidence"), "confid");});
test("confidences -> confid", function() {deepEqual( Stem("confidences"), "confid");});
test("confident -> confid", function() {deepEqual( Stem("confident"), "confid");});
test("confidential -> confidenti", function() {deepEqual( Stem("confidential"), "confidenti");});
test("confidentially -> confidenti", function() {deepEqual( Stem("confidentially"), "confidenti");});
test("confidently -> confid", function() {deepEqual( Stem("confidently"), "confid");});
test("confides -> confid", function() {deepEqual( Stem("confides"), "confid");});
test("confiding -> confid", function() {deepEqual( Stem("confiding"), "confid");});
test("confin -> confin", function() {deepEqual( Stem("confin"), "confin");});
test("confine -> confin", function() {deepEqual( Stem("confine"), "confin");});
test("confined -> confin", function() {deepEqual( Stem("confined"), "confin");});
test("confineless -> confineless", function() {deepEqual( Stem("confineless"), "confineless");});
test("confinement -> confin", function() {deepEqual( Stem("confinement"), "confin");});
test("confiners -> confin", function() {deepEqual( Stem("confiners"), "confin");});
test("confines -> confin", function() {deepEqual( Stem("confines"), "confin");});
test("confining -> confin", function() {deepEqual( Stem("confining"), "confin");});
test("confirm -> confirm", function() {deepEqual( Stem("confirm"), "confirm");});
test("confirmation -> confirm", function() {deepEqual( Stem("confirmation"), "confirm");});
test("confirmations -> confirm", function() {deepEqual( Stem("confirmations"), "confirm");});
test("confirmed -> confirm", function() {deepEqual( Stem("confirmed"), "confirm");});
test("confirmer -> confirm", function() {deepEqual( Stem("confirmer"), "confirm");});
test("confirmers -> confirm", function() {deepEqual( Stem("confirmers"), "confirm");});
test("confirming -> confirm", function() {deepEqual( Stem("confirming"), "confirm");});
test("confirmities -> confirm", function() {deepEqual( Stem("confirmities"), "confirm");});
test("confirms -> confirm", function() {deepEqual( Stem("confirms"), "confirm");});
test("confiscate -> confisc", function() {deepEqual( Stem("confiscate"), "confisc");});
test("confiscated -> confisc", function() {deepEqual( Stem("confiscated"), "confisc");});
test("confiscation -> confisc", function() {deepEqual( Stem("confiscation"), "confisc");});
test("confiscations -> confisc", function() {deepEqual( Stem("confiscations"), "confisc");});
test("confixed -> confix", function() {deepEqual( Stem("confixed"), "confix");});
test("conflict -> conflict", function() {deepEqual( Stem("conflict"), "conflict");});
test("conflicting -> conflict", function() {deepEqual( Stem("conflicting"), "conflict");});
test("conflicts -> conflict", function() {deepEqual( Stem("conflicts"), "conflict");});
test("confluence -> confluenc", function() {deepEqual( Stem("confluence"), "confluenc");});
test("conflux -> conflux", function() {deepEqual( Stem("conflux"), "conflux");});
test("conform -> conform", function() {deepEqual( Stem("conform"), "conform");});
test("conformable -> conform", function() {deepEqual( Stem("conformable"), "conform");});
test("confound -> confound", function() {deepEqual( Stem("confound"), "confound");});
test("confounded -> confound", function() {deepEqual( Stem("confounded"), "confound");});
test("confounding -> confound", function() {deepEqual( Stem("confounding"), "confound");});
test("confounds -> confound", function() {deepEqual( Stem("confounds"), "confound");});
test("confront -> confront", function() {deepEqual( Stem("confront"), "confront");});
test("confronted -> confront", function() {deepEqual( Stem("confronted"), "confront");});
test("confus -> confu", function() {deepEqual( Stem("confus"), "confu");});
test("confused -> confus", function() {deepEqual( Stem("confused"), "confus");});
test("confusedly -> confusedli", function() {deepEqual( Stem("confusedly"), "confusedli");});
test("confusion -> confus", function() {deepEqual( Stem("confusion"), "confus");});
test("confusions -> confus", function() {deepEqual( Stem("confusions"), "confus");});
test("confutation -> confut", function() {deepEqual( Stem("confutation"), "confut");});
test("confutes -> confut", function() {deepEqual( Stem("confutes"), "confut");});
test("conge -> cong", function() {deepEqual( Stem("conge"), "cong");});
test("congeal -> congeal", function() {deepEqual( Stem("congeal"), "congeal");});
test("congealed -> congeal", function() {deepEqual( Stem("congealed"), "congeal");});
test("congealment -> congeal", function() {deepEqual( Stem("congealment"), "congeal");});
test("congee -> conge", function() {deepEqual( Stem("congee"), "conge");});
test("conger -> conger", function() {deepEqual( Stem("conger"), "conger");});
test("congest -> congest", function() {deepEqual( Stem("congest"), "congest");});
test("congied -> congi", function() {deepEqual( Stem("congied"), "congi");});
test("congratulate -> congratul", function() {deepEqual( Stem("congratulate"), "congratul");});
test("congratulated -> congratul", function() {deepEqual( Stem("congratulated"), "congratul");});
test("congratulating -> congratul", function() {deepEqual( Stem("congratulating"), "congratul");});
test("congratulations -> congratul", function() {deepEqual( Stem("congratulations"), "congratul");});
test("congreeing -> congre", function() {deepEqual( Stem("congreeing"), "congre");});
test("congreeted -> congreet", function() {deepEqual( Stem("congreeted"), "congreet");});
test("congregate -> congreg", function() {deepEqual( Stem("congregate"), "congreg");});
test("congregated -> congreg", function() {deepEqual( Stem("congregated"), "congreg");});
test("congregation -> congreg", function() {deepEqual( Stem("congregation"), "congreg");});
test("congregations -> congreg", function() {deepEqual( Stem("congregations"), "congreg");});
test("congress -> congress", function() {deepEqual( Stem("congress"), "congress");});
test("congruent -> congruent", function() {deepEqual( Stem("congruent"), "congruent");});
test("congruing -> congru", function() {deepEqual( Stem("congruing"), "congru");});
test("conies -> coni", function() {deepEqual( Stem("conies"), "coni");});
test("conjectural -> conjectur", function() {deepEqual( Stem("conjectural"), "conjectur");});
test("conjecture -> conjectur", function() {deepEqual( Stem("conjecture"), "conjectur");});
test("conjectured -> conjectur", function() {deepEqual( Stem("conjectured"), "conjectur");});
test("conjectures -> conjectur", function() {deepEqual( Stem("conjectures"), "conjectur");});
test("conjecturing -> conjectur", function() {deepEqual( Stem("conjecturing"), "conjectur");});
test("conjoin -> conjoin", function() {deepEqual( Stem("conjoin"), "conjoin");});
test("conjoined -> conjoin", function() {deepEqual( Stem("conjoined"), "conjoin");});
test("conjoins -> conjoin", function() {deepEqual( Stem("conjoins"), "conjoin");});
test("conjointly -> conjointli", function() {deepEqual( Stem("conjointly"), "conjointli");});
test("conjugal -> conjug", function() {deepEqual( Stem("conjugal"), "conjug");});
test("conjunct -> conjunct", function() {deepEqual( Stem("conjunct"), "conjunct");});
test("conjunction -> conjunct", function() {deepEqual( Stem("conjunction"), "conjunct");});
test("conjunctive -> conjunct", function() {deepEqual( Stem("conjunctive"), "conjunct");});
test("conjur -> conjur", function() {deepEqual( Stem("conjur"), "conjur");});
test("conjuration -> conjur", function() {deepEqual( Stem("conjuration"), "conjur");});
test("conjurations -> conjur", function() {deepEqual( Stem("conjurations"), "conjur");});
test("conjure -> conjur", function() {deepEqual( Stem("conjure"), "conjur");});
test("conjured -> conjur", function() {deepEqual( Stem("conjured"), "conjur");});
test("conjurer -> conjur", function() {deepEqual( Stem("conjurer"), "conjur");});
test("conjurers -> conjur", function() {deepEqual( Stem("conjurers"), "conjur");});
test("conjures -> conjur", function() {deepEqual( Stem("conjures"), "conjur");});
test("conjuring -> conjur", function() {deepEqual( Stem("conjuring"), "conjur");});
test("conjuro -> conjuro", function() {deepEqual( Stem("conjuro"), "conjuro");});
test("conjurors -> conjuror", function() {deepEqual( Stem("conjurors"), "conjuror");});
test("conn -> conn", function() {deepEqual( Stem("conn"), "conn");});
test("connected -> connect", function() {deepEqual( Stem("connected"), "connect");});
test("connection -> connect", function() {deepEqual( Stem("connection"), "connect");});
test("connections -> connect", function() {deepEqual( Stem("connections"), "connect");});
test("conned -> con", function() {deepEqual( Stem("conned"), "con");});
test("connexion -> connexion", function() {deepEqual( Stem("connexion"), "connexion");});
test("connexions -> connexion", function() {deepEqual( Stem("connexions"), "connexion");});
test("conning -> con", function() {deepEqual( Stem("conning"), "con");});
test("connive -> conniv", function() {deepEqual( Stem("connive"), "conniv");});
test("connoisseur -> connoisseur", function() {deepEqual( Stem("connoisseur"), "connoisseur");});
test("connoisseurs -> connoisseur", function() {deepEqual( Stem("connoisseurs"), "connoisseur");});
test("conqu -> conqu", function() {deepEqual( Stem("conqu"), "conqu");});
test("conquer -> conquer", function() {deepEqual( Stem("conquer"), "conquer");});
test("conquered -> conquer", function() {deepEqual( Stem("conquered"), "conquer");});
test("conquering -> conquer", function() {deepEqual( Stem("conquering"), "conquer");});
test("conqueror -> conqueror", function() {deepEqual( Stem("conqueror"), "conqueror");});
test("conquerors -> conqueror", function() {deepEqual( Stem("conquerors"), "conqueror");});
test("conquers -> conquer", function() {deepEqual( Stem("conquers"), "conquer");});
test("conquest -> conquest", function() {deepEqual( Stem("conquest"), "conquest");});
test("conquests -> conquest", function() {deepEqual( Stem("conquests"), "conquest");});
test("conquring -> conqur", function() {deepEqual( Stem("conquring"), "conqur");});
test("conrade -> conrad", function() {deepEqual( Stem("conrade"), "conrad");});
test("cons -> con", function() {deepEqual( Stem("cons"), "con");});
test("consanguineous -> consanguin", function() {deepEqual( Stem("consanguineous"), "consanguin");});
test("consanguinity -> consanguin", function() {deepEqual( Stem("consanguinity"), "consanguin");});
test("conscienc -> conscienc", function() {deepEqual( Stem("conscienc"), "conscienc");});
test("conscience -> conscienc", function() {deepEqual( Stem("conscience"), "conscienc");});
test("conscienceless -> conscienceless", function() {deepEqual( Stem("conscienceless"), "conscienceless");});
test("consciences -> conscienc", function() {deepEqual( Stem("consciences"), "conscienc");});
test("conscionable -> conscion", function() {deepEqual( Stem("conscionable"), "conscion");});
test("conscious -> consciou", function() {deepEqual( Stem("conscious"), "consciou");});
test("consciousness -> conscious", function() {deepEqual( Stem("consciousness"), "conscious");});
test("consecrate -> consecr", function() {deepEqual( Stem("consecrate"), "consecr");});
test("consecrated -> consecr", function() {deepEqual( Stem("consecrated"), "consecr");});
test("consecrating -> consecr", function() {deepEqual( Stem("consecrating"), "consecr");});
test("consecrations -> consecr", function() {deepEqual( Stem("consecrations"), "consecr");});
test("consent -> consent", function() {deepEqual( Stem("consent"), "consent");});
test("consented -> consent", function() {deepEqual( Stem("consented"), "consent");});
test("consenting -> consent", function() {deepEqual( Stem("consenting"), "consent");});
test("consents -> consent", function() {deepEqual( Stem("consents"), "consent");});
test("consequence -> consequ", function() {deepEqual( Stem("consequence"), "consequ");});
test("consequences -> consequ", function() {deepEqual( Stem("consequences"), "consequ");});
test("consequent -> consequ", function() {deepEqual( Stem("consequent"), "consequ");});
test("consequently -> consequ", function() {deepEqual( Stem("consequently"), "consequ");});
test("conservatories -> conservatori", function() {deepEqual( Stem("conservatories"), "conservatori");});
test("conserve -> conserv", function() {deepEqual( Stem("conserve"), "conserv");});
test("conserved -> conserv", function() {deepEqual( Stem("conserved"), "conserv");});
test("conserves -> conserv", function() {deepEqual( Stem("conserves"), "conserv");});
test("consider -> consid", function() {deepEqual( Stem("consider"), "consid");});
test("considerable -> consider", function() {deepEqual( Stem("considerable"), "consider");});
test("considerably -> consider", function() {deepEqual( Stem("considerably"), "consider");});
test("considerance -> consider", function() {deepEqual( Stem("considerance"), "consider");});
test("considerate -> consider", function() {deepEqual( Stem("considerate"), "consider");});
test("consideration -> consider", function() {deepEqual( Stem("consideration"), "consider");});
test("considerations -> consider", function() {deepEqual( Stem("considerations"), "consider");});
test("considered -> consid", function() {deepEqual( Stem("considered"), "consid");});
test("considering -> consid", function() {deepEqual( Stem("considering"), "consid");});
test("considerings -> consid", function() {deepEqual( Stem("considerings"), "consid");});
test("considers -> consid", function() {deepEqual( Stem("considers"), "consid");});
test("consign -> consign", function() {deepEqual( Stem("consign"), "consign");});
test("consigned -> consign", function() {deepEqual( Stem("consigned"), "consign");});
test("consigning -> consign", function() {deepEqual( Stem("consigning"), "consign");});
test("consignment -> consign", function() {deepEqual( Stem("consignment"), "consign");});
test("consist -> consist", function() {deepEqual( Stem("consist"), "consist");});
test("consisted -> consist", function() {deepEqual( Stem("consisted"), "consist");});
test("consistency -> consist", function() {deepEqual( Stem("consistency"), "consist");});
test("consistent -> consist", function() {deepEqual( Stem("consistent"), "consist");});
test("consisteth -> consisteth", function() {deepEqual( Stem("consisteth"), "consisteth");});
test("consisting -> consist", function() {deepEqual( Stem("consisting"), "consist");});
test("consistory -> consistori", function() {deepEqual( Stem("consistory"), "consistori");});
test("consists -> consist", function() {deepEqual( Stem("consists"), "consist");});
test("consolate -> consol", function() {deepEqual( Stem("consolate"), "consol");});
test("consolation -> consol", function() {deepEqual( Stem("consolation"), "consol");});
test("consolations -> consol", function() {deepEqual( Stem("consolations"), "consol");});
test("console -> consol", function() {deepEqual( Stem("console"), "consol");});
test("consoled -> consol", function() {deepEqual( Stem("consoled"), "consol");});
test("consoler -> consol", function() {deepEqual( Stem("consoler"), "consol");});
test("consolidation -> consolid", function() {deepEqual( Stem("consolidation"), "consolid");});
test("consoling -> consol", function() {deepEqual( Stem("consoling"), "consol");});
test("consols -> consol", function() {deepEqual( Stem("consols"), "consol");});
test("consonancy -> conson", function() {deepEqual( Stem("consonancy"), "conson");});
test("consonant -> conson", function() {deepEqual( Stem("consonant"), "conson");});
test("consort -> consort", function() {deepEqual( Stem("consort"), "consort");});
test("consorted -> consort", function() {deepEqual( Stem("consorted"), "consort");});
test("consortest -> consortest", function() {deepEqual( Stem("consortest"), "consortest");});
test("consorting -> consort", function() {deepEqual( Stem("consorting"), "consort");});
test("conspectuities -> conspectu", function() {deepEqual( Stem("conspectuities"), "conspectu");});
test("conspicuous -> conspicu", function() {deepEqual( Stem("conspicuous"), "conspicu");});
test("conspicuously -> conspicu", function() {deepEqual( Stem("conspicuously"), "conspicu");});
test("conspir -> conspir", function() {deepEqual( Stem("conspir"), "conspir");});
test("conspiracy -> conspiraci", function() {deepEqual( Stem("conspiracy"), "conspiraci");});
test("conspirant -> conspir", function() {deepEqual( Stem("conspirant"), "conspir");});
test("conspirator -> conspir", function() {deepEqual( Stem("conspirator"), "conspir");});
test("conspirators -> conspir", function() {deepEqual( Stem("conspirators"), "conspir");});
test("conspire -> conspir", function() {deepEqual( Stem("conspire"), "conspir");});
test("conspired -> conspir", function() {deepEqual( Stem("conspired"), "conspir");});
test("conspirers -> conspir", function() {deepEqual( Stem("conspirers"), "conspir");});
test("conspires -> conspir", function() {deepEqual( Stem("conspires"), "conspir");});
test("conspiring -> conspir", function() {deepEqual( Stem("conspiring"), "conspir");});
test("constable -> constabl", function() {deepEqual( Stem("constable"), "constabl");});
test("constables -> constabl", function() {deepEqual( Stem("constables"), "constabl");});
test("constance -> constanc", function() {deepEqual( Stem("constance"), "constanc");});
test("constancies -> constanc", function() {deepEqual( Stem("constancies"), "constanc");});
test("constancy -> constanc", function() {deepEqual( Stem("constancy"), "constanc");});
test("constant -> constant", function() {deepEqual( Stem("constant"), "constant");});
test("constantine -> constantin", function() {deepEqual( Stem("constantine"), "constantin");});
test("constantinople -> constantinopl", function() {deepEqual( Stem("constantinople"), "constantinopl");});
test("constantly -> constantli", function() {deepEqual( Stem("constantly"), "constantli");});
test("constellation -> constel", function() {deepEqual( Stem("constellation"), "constel");});
test("consternation -> constern", function() {deepEqual( Stem("consternation"), "constern");});
test("constituted -> constitut", function() {deepEqual( Stem("constituted"), "constitut");});
test("constitution -> constitut", function() {deepEqual( Stem("constitution"), "constitut");});
test("constitutional -> constitut", function() {deepEqual( Stem("constitutional"), "constitut");});
test("constrain -> constrain", function() {deepEqual( Stem("constrain"), "constrain");});
test("constrained -> constrain", function() {deepEqual( Stem("constrained"), "constrain");});
test("constraineth -> constraineth", function() {deepEqual( Stem("constraineth"), "constraineth");});
test("constrains -> constrain", function() {deepEqual( Stem("constrains"), "constrain");});
test("constraint -> constraint", function() {deepEqual( Stem("constraint"), "constraint");});
test("constring -> constr", function() {deepEqual( Stem("constring"), "constr");});
test("construct -> construct", function() {deepEqual( Stem("construct"), "construct");});
test("constructed -> construct", function() {deepEqual( Stem("constructed"), "construct");});
test("construction -> construct", function() {deepEqual( Stem("construction"), "construct");});
test("construe -> constru", function() {deepEqual( Stem("construe"), "constru");});
test("consul -> consul", function() {deepEqual( Stem("consul"), "consul");});
test("consuls -> consul", function() {deepEqual( Stem("consuls"), "consul");});
test("consulship -> consulship", function() {deepEqual( Stem("consulship"), "consulship");});
test("consulships -> consulship", function() {deepEqual( Stem("consulships"), "consulship");});
test("consult -> consult", function() {deepEqual( Stem("consult"), "consult");});
test("consultation -> consult", function() {deepEqual( Stem("consultation"), "consult");});
test("consulted -> consult", function() {deepEqual( Stem("consulted"), "consult");});
test("consulting -> consult", function() {deepEqual( Stem("consulting"), "consult");});
test("consults -> consult", function() {deepEqual( Stem("consults"), "consult");});
test("consum -> consum", function() {deepEqual( Stem("consum"), "consum");});
test("consume -> consum", function() {deepEqual( Stem("consume"), "consum");});
test("consumed -> consum", function() {deepEqual( Stem("consumed"), "consum");});
test("consumedly -> consumedli", function() {deepEqual( Stem("consumedly"), "consumedli");});
test("consumes -> consum", function() {deepEqual( Stem("consumes"), "consum");});
test("consuming -> consum", function() {deepEqual( Stem("consuming"), "consum");});
test("consummate -> consumm", function() {deepEqual( Stem("consummate"), "consumm");});
test("consummated -> consumm", function() {deepEqual( Stem("consummated"), "consumm");});
test("consummation -> consumm", function() {deepEqual( Stem("consummation"), "consumm");});
test("consumption -> consumpt", function() {deepEqual( Stem("consumption"), "consumpt");});
test("consumptions -> consumpt", function() {deepEqual( Stem("consumptions"), "consumpt");});
test("consumptive -> consumpt", function() {deepEqual( Stem("consumptive"), "consumpt");});
test("contact -> contact", function() {deepEqual( Stem("contact"), "contact");});
test("contagion -> contagion", function() {deepEqual( Stem("contagion"), "contagion");});
test("contagious -> contagi", function() {deepEqual( Stem("contagious"), "contagi");});
test("contain -> contain", function() {deepEqual( Stem("contain"), "contain");});
test("contained -> contain", function() {deepEqual( Stem("contained"), "contain");});
test("containing -> contain", function() {deepEqual( Stem("containing"), "contain");});
test("contains -> contain", function() {deepEqual( Stem("contains"), "contain");});
test("contaminate -> contamin", function() {deepEqual( Stem("contaminate"), "contamin");});
test("contaminated -> contamin", function() {deepEqual( Stem("contaminated"), "contamin");});
test("contemn -> contemn", function() {deepEqual( Stem("contemn"), "contemn");});
test("contemned -> contemn", function() {deepEqual( Stem("contemned"), "contemn");});
test("contemning -> contemn", function() {deepEqual( Stem("contemning"), "contemn");});
test("contemns -> contemn", function() {deepEqual( Stem("contemns"), "contemn");});
test("contemplate -> contempl", function() {deepEqual( Stem("contemplate"), "contempl");});
test("contemplated -> contempl", function() {deepEqual( Stem("contemplated"), "contempl");});
test("contemplation -> contempl", function() {deepEqual( Stem("contemplation"), "contempl");});
test("contemplative -> contempl", function() {deepEqual( Stem("contemplative"), "contempl");});
test("contemporaries -> contemporari", function() {deepEqual( Stem("contemporaries"), "contemporari");});
test("contempt -> contempt", function() {deepEqual( Stem("contempt"), "contempt");});
test("contemptible -> contempt", function() {deepEqual( Stem("contemptible"), "contempt");});
test("contempts -> contempt", function() {deepEqual( Stem("contempts"), "contempt");});
test("contemptuous -> contemptu", function() {deepEqual( Stem("contemptuous"), "contemptu");});
test("contemptuously -> contemptu", function() {deepEqual( Stem("contemptuously"), "contemptu");});
test("contend -> contend", function() {deepEqual( Stem("contend"), "contend");});
test("contended -> contend", function() {deepEqual( Stem("contended"), "contend");});
test("contending -> contend", function() {deepEqual( Stem("contending"), "contend");});
test("contendon -> contendon", function() {deepEqual( Stem("contendon"), "contendon");});
test("content -> content", function() {deepEqual( Stem("content"), "content");});
test("contenta -> contenta", function() {deepEqual( Stem("contenta"), "contenta");});
test("contented -> content", function() {deepEqual( Stem("contented"), "content");});
test("contentedly -> contentedli", function() {deepEqual( Stem("contentedly"), "contentedli");});
test("contenteth -> contenteth", function() {deepEqual( Stem("contenteth"), "contenteth");});
test("contenting -> content", function() {deepEqual( Stem("contenting"), "content");});
test("contention -> content", function() {deepEqual( Stem("contention"), "content");});
test("contentious -> contenti", function() {deepEqual( Stem("contentious"), "contenti");});
test("contentless -> contentless", function() {deepEqual( Stem("contentless"), "contentless");});
test("contentment -> content", function() {deepEqual( Stem("contentment"), "content");});
test("contento -> contento", function() {deepEqual( Stem("contento"), "contento");});
test("contents -> content", function() {deepEqual( Stem("contents"), "content");});
test("contest -> contest", function() {deepEqual( Stem("contest"), "contest");});
test("contestation -> contest", function() {deepEqual( Stem("contestation"), "contest");});
test("contests -> contest", function() {deepEqual( Stem("contests"), "contest");});
test("contiguous -> contigu", function() {deepEqual( Stem("contiguous"), "contigu");});
test("continence -> contin", function() {deepEqual( Stem("continence"), "contin");});
test("continency -> contin", function() {deepEqual( Stem("continency"), "contin");});
test("continent -> contin", function() {deepEqual( Stem("continent"), "contin");});
test("continental -> continent", function() {deepEqual( Stem("continental"), "continent");});
test("continents -> contin", function() {deepEqual( Stem("continents"), "contin");});
test("contingent -> conting", function() {deepEqual( Stem("contingent"), "conting");});
test("continu -> continu", function() {deepEqual( Stem("continu"), "continu");});
test("continual -> continu", function() {deepEqual( Stem("continual"), "continu");});
test("continually -> continu", function() {deepEqual( Stem("continually"), "continu");});
test("continuance -> continu", function() {deepEqual( Stem("continuance"), "continu");});
test("continuantly -> continuantli", function() {deepEqual( Stem("continuantly"), "continuantli");});
test("continuate -> continu", function() {deepEqual( Stem("continuate"), "continu");});
test("continue -> continu", function() {deepEqual( Stem("continue"), "continu");});
test("continued -> continu", function() {deepEqual( Stem("continued"), "continu");});
test("continuer -> continu", function() {deepEqual( Stem("continuer"), "continu");});
test("continues -> continu", function() {deepEqual( Stem("continues"), "continu");});
test("continuing -> continu", function() {deepEqual( Stem("continuing"), "continu");});
test("continuous -> continu", function() {deepEqual( Stem("continuous"), "continu");});
test("contract -> contract", function() {deepEqual( Stem("contract"), "contract");});
test("contracted -> contract", function() {deepEqual( Stem("contracted"), "contract");});
test("contracting -> contract", function() {deepEqual( Stem("contracting"), "contract");});
test("contraction -> contract", function() {deepEqual( Stem("contraction"), "contract");});
test("contracts -> contract", function() {deepEqual( Stem("contracts"), "contract");});
test("contradict -> contradict", function() {deepEqual( Stem("contradict"), "contradict");});
test("contradicted -> contradict", function() {deepEqual( Stem("contradicted"), "contradict");});
test("contradiction -> contradict", function() {deepEqual( Stem("contradiction"), "contradict");});
test("contradicts -> contradict", function() {deepEqual( Stem("contradicts"), "contradict");});
test("contraries -> contrari", function() {deepEqual( Stem("contraries"), "contrari");});
test("contrarieties -> contrarieti", function() {deepEqual( Stem("contrarieties"), "contrarieti");});
test("contrariety -> contrarieti", function() {deepEqual( Stem("contrariety"), "contrarieti");});
test("contrarious -> contrari", function() {deepEqual( Stem("contrarious"), "contrari");});
test("contrariously -> contrari", function() {deepEqual( Stem("contrariously"), "contrari");});
test("contrary -> contrari", function() {deepEqual( Stem("contrary"), "contrari");});
test("contrast -> contrast", function() {deepEqual( Stem("contrast"), "contrast");});
test("contrasted -> contrast", function() {deepEqual( Stem("contrasted"), "contrast");});
test("contrasts -> contrast", function() {deepEqual( Stem("contrasts"), "contrast");});
test("contre -> contr", function() {deepEqual( Stem("contre"), "contr");});
test("contretemps -> contretemp", function() {deepEqual( Stem("contretemps"), "contretemp");});
test("contribute -> contribut", function() {deepEqual( Stem("contribute"), "contribut");});
test("contribution -> contribut", function() {deepEqual( Stem("contribution"), "contribut");});
test("contributions -> contribut", function() {deepEqual( Stem("contributions"), "contribut");});
test("contributors -> contributor", function() {deepEqual( Stem("contributors"), "contributor");});
test("contrite -> contrit", function() {deepEqual( Stem("contrite"), "contrit");});
test("contrition -> contrit", function() {deepEqual( Stem("contrition"), "contrit");});
test("contriv -> contriv", function() {deepEqual( Stem("contriv"), "contriv");});
test("contrivances -> contriv", function() {deepEqual( Stem("contrivances"), "contriv");});
test("contrive -> contriv", function() {deepEqual( Stem("contrive"), "contriv");});
test("contrived -> contriv", function() {deepEqual( Stem("contrived"), "contriv");});
test("contriver -> contriv", function() {deepEqual( Stem("contriver"), "contriv");});
test("contrives -> contriv", function() {deepEqual( Stem("contrives"), "contriv");});
test("contriving -> contriv", function() {deepEqual( Stem("contriving"), "contriv");});
test("control -> control", function() {deepEqual( Stem("control"), "control");});
test("controll -> control", function() {deepEqual( Stem("controll"), "control");});
test("controlled -> control", function() {deepEqual( Stem("controlled"), "control");});
test("controller -> control", function() {deepEqual( Stem("controller"), "control");});
test("controlling -> control", function() {deepEqual( Stem("controlling"), "control");});
test("controlment -> control", function() {deepEqual( Stem("controlment"), "control");});
test("controls -> control", function() {deepEqual( Stem("controls"), "control");});
test("controversy -> controversi", function() {deepEqual( Stem("controversy"), "controversi");});
test("contumelious -> contumeli", function() {deepEqual( Stem("contumelious"), "contumeli");});
test("contumeliously -> contumeli", function() {deepEqual( Stem("contumeliously"), "contumeli");});
test("contumely -> contum", function() {deepEqual( Stem("contumely"), "contum");});
test("contusions -> contus", function() {deepEqual( Stem("contusions"), "contus");});
test("convalescence -> convalesc", function() {deepEqual( Stem("convalescence"), "convalesc");});
test("convalescent -> convalesc", function() {deepEqual( Stem("convalescent"), "convalesc");});
test("convenience -> conveni", function() {deepEqual( Stem("convenience"), "conveni");});
test("conveniences -> conveni", function() {deepEqual( Stem("conveniences"), "conveni");});
test("conveniency -> conveni", function() {deepEqual( Stem("conveniency"), "conveni");});
test("convenient -> conveni", function() {deepEqual( Stem("convenient"), "conveni");});
test("conveniently -> conveni", function() {deepEqual( Stem("conveniently"), "conveni");});
test("convent -> convent", function() {deepEqual( Stem("convent"), "convent");});
test("convented -> convent", function() {deepEqual( Stem("convented"), "convent");});
test("conventicles -> conventicl", function() {deepEqual( Stem("conventicles"), "conventicl");});
test("convents -> convent", function() {deepEqual( Stem("convents"), "convent");});
test("conventual -> conventu", function() {deepEqual( Stem("conventual"), "conventu");});
test("convers -> conver", function() {deepEqual( Stem("convers"), "conver");});
test("conversant -> convers", function() {deepEqual( Stem("conversant"), "convers");});
test("conversation -> convers", function() {deepEqual( Stem("conversation"), "convers");});
test("conversational -> convers", function() {deepEqual( Stem("conversational"), "convers");});
test("conversations -> convers", function() {deepEqual( Stem("conversations"), "convers");});
test("conversazioni -> conversazioni", function() {deepEqual( Stem("conversazioni"), "conversazioni");});
test("converse -> convers", function() {deepEqual( Stem("converse"), "convers");});
test("conversed -> convers", function() {deepEqual( Stem("conversed"), "convers");});
test("converses -> convers", function() {deepEqual( Stem("converses"), "convers");});
test("conversing -> convers", function() {deepEqual( Stem("conversing"), "convers");});
test("conversion -> convers", function() {deepEqual( Stem("conversion"), "convers");});
test("convert -> convert", function() {deepEqual( Stem("convert"), "convert");});
test("converted -> convert", function() {deepEqual( Stem("converted"), "convert");});
test("convertest -> convertest", function() {deepEqual( Stem("convertest"), "convertest");});
test("converting -> convert", function() {deepEqual( Stem("converting"), "convert");});
test("convertite -> convertit", function() {deepEqual( Stem("convertite"), "convertit");});
test("convertites -> convertit", function() {deepEqual( Stem("convertites"), "convertit");});
test("converts -> convert", function() {deepEqual( Stem("converts"), "convert");});
test("convey -> convei", function() {deepEqual( Stem("convey"), "convei");});
test("conveyance -> convey", function() {deepEqual( Stem("conveyance"), "convey");});
test("conveyances -> convey", function() {deepEqual( Stem("conveyances"), "convey");});
test("conveyed -> convei", function() {deepEqual( Stem("conveyed"), "convei");});
test("conveyers -> convey", function() {deepEqual( Stem("conveyers"), "convey");});
test("conveying -> convei", function() {deepEqual( Stem("conveying"), "convei");});
test("convict -> convict", function() {deepEqual( Stem("convict"), "convict");});
test("convicted -> convict", function() {deepEqual( Stem("convicted"), "convict");});
test("conviction -> convict", function() {deepEqual( Stem("conviction"), "convict");});
test("convictions -> convict", function() {deepEqual( Stem("convictions"), "convict");});
test("convince -> convinc", function() {deepEqual( Stem("convince"), "convinc");});
test("convinced -> convinc", function() {deepEqual( Stem("convinced"), "convinc");});
test("convinces -> convinc", function() {deepEqual( Stem("convinces"), "convinc");});
test("convive -> conviv", function() {deepEqual( Stem("convive"), "conviv");});
test("convocation -> convoc", function() {deepEqual( Stem("convocation"), "convoc");});
test("convoy -> convoi", function() {deepEqual( Stem("convoy"), "convoi");});
test("convulsion -> convuls", function() {deepEqual( Stem("convulsion"), "convuls");});
test("convulsions -> convuls", function() {deepEqual( Stem("convulsions"), "convuls");});
test("convulsively -> convuls", function() {deepEqual( Stem("convulsively"), "convuls");});
test("cony -> coni", function() {deepEqual( Stem("cony"), "coni");});
test("coo -> coo", function() {deepEqual( Stem("coo"), "coo");});
test("cooing -> coo", function() {deepEqual( Stem("cooing"), "coo");});
test("cook -> cook", function() {deepEqual( Stem("cook"), "cook");});
test("cooked -> cook", function() {deepEqual( Stem("cooked"), "cook");});
test("cookery -> cookeri", function() {deepEqual( Stem("cookery"), "cookeri");});
test("cooking -> cook", function() {deepEqual( Stem("cooking"), "cook");});
test("cooks -> cook", function() {deepEqual( Stem("cooks"), "cook");});
test("cooky -> cooki", function() {deepEqual( Stem("cooky"), "cooki");});
test("cool -> cool", function() {deepEqual( Stem("cool"), "cool");});
test("cooled -> cool", function() {deepEqual( Stem("cooled"), "cool");});
test("coolers -> cooler", function() {deepEqual( Stem("coolers"), "cooler");});
test("cooling -> cool", function() {deepEqual( Stem("cooling"), "cool");});
test("coolly -> coolli", function() {deepEqual( Stem("coolly"), "coolli");});
test("coolness -> cool", function() {deepEqual( Stem("coolness"), "cool");});
test("cools -> cool", function() {deepEqual( Stem("cools"), "cool");});
test("coom -> coom", function() {deepEqual( Stem("coom"), "coom");});
test("coop -> coop", function() {deepEqual( Stem("coop"), "coop");});
test("coops -> coop", function() {deepEqual( Stem("coops"), "coop");});
test("coorted -> coort", function() {deepEqual( Stem("coorted"), "coort");});
test("cop -> cop", function() {deepEqual( Stem("cop"), "cop");});
test("copatain -> copatain", function() {deepEqual( Stem("copatain"), "copatain");});
test("cope -> cope", function() {deepEqual( Stem("cope"), "cope");});
test("cophetua -> cophetua", function() {deepEqual( Stem("cophetua"), "cophetua");});
test("copied -> copi", function() {deepEqual( Stem("copied"), "copi");});
test("copies -> copi", function() {deepEqual( Stem("copies"), "copi");});
test("copious -> copiou", function() {deepEqual( Stem("copious"), "copiou");});
test("copiously -> copious", function() {deepEqual( Stem("copiously"), "copious");});
test("copper -> copper", function() {deepEqual( Stem("copper"), "copper");});
test("copperspur -> copperspur", function() {deepEqual( Stem("copperspur"), "copperspur");});
test("coppice -> coppic", function() {deepEqual( Stem("coppice"), "coppic");});
test("copses -> cops", function() {deepEqual( Stem("copses"), "cops");});
test("copulation -> copul", function() {deepEqual( Stem("copulation"), "copul");});
test("copulatives -> copul", function() {deepEqual( Stem("copulatives"), "copul");});
test("copy -> copi", function() {deepEqual( Stem("copy"), "copi");});
test("copying -> copi", function() {deepEqual( Stem("copying"), "copi");});
test("coquet -> coquet", function() {deepEqual( Stem("coquet"), "coquet");});
test("coquette -> coquett", function() {deepEqual( Stem("coquette"), "coquett");});
test("coquettes -> coquett", function() {deepEqual( Stem("coquettes"), "coquett");});
test("cor -> cor", function() {deepEqual( Stem("cor"), "cor");});
test("coragio -> coragio", function() {deepEqual( Stem("coragio"), "coragio");});
test("coral -> coral", function() {deepEqual( Stem("coral"), "coral");});
test("corals -> coral", function() {deepEqual( Stem("corals"), "coral");});
test("coram -> coram", function() {deepEqual( Stem("coram"), "coram");});
test("corambus -> corambu", function() {deepEqual( Stem("corambus"), "corambu");});
test("coranto -> coranto", function() {deepEqual( Stem("coranto"), "coranto");});
test("corantos -> coranto", function() {deepEqual( Stem("corantos"), "coranto");});
test("corbleu -> corbleu", function() {deepEqual( Stem("corbleu"), "corbleu");});
test("corbo -> corbo", function() {deepEqual( Stem("corbo"), "corbo");});
test("cord -> cord", function() {deepEqual( Stem("cord"), "cord");});
test("corded -> cord", function() {deepEqual( Stem("corded"), "cord");});
test("cordelia -> cordelia", function() {deepEqual( Stem("cordelia"), "cordelia");});
test("cordial -> cordial", function() {deepEqual( Stem("cordial"), "cordial");});
test("cordiality -> cordial", function() {deepEqual( Stem("cordiality"), "cordial");});
test("cordially -> cordial", function() {deepEqual( Stem("cordially"), "cordial");});
test("cordis -> cordi", function() {deepEqual( Stem("cordis"), "cordi");});
test("cordon -> cordon", function() {deepEqual( Stem("cordon"), "cordon");});
test("cordons -> cordon", function() {deepEqual( Stem("cordons"), "cordon");});
test("cordovan -> cordovan", function() {deepEqual( Stem("cordovan"), "cordovan");});
test("cords -> cord", function() {deepEqual( Stem("cords"), "cord");});
test("corduroy -> corduroi", function() {deepEqual( Stem("corduroy"), "corduroi");});
test("corduroys -> corduroi", function() {deepEqual( Stem("corduroys"), "corduroi");});
test("core -> core", function() {deepEqual( Stem("core"), "core");});
test("corin -> corin", function() {deepEqual( Stem("corin"), "corin");});
test("corinth -> corinth", function() {deepEqual( Stem("corinth"), "corinth");});
test("corinthian -> corinthian", function() {deepEqual( Stem("corinthian"), "corinthian");});
test("coriolanus -> coriolanu", function() {deepEqual( Stem("coriolanus"), "coriolanu");});
test("corioli -> corioli", function() {deepEqual( Stem("corioli"), "corioli");});
test("cork -> cork", function() {deepEqual( Stem("cork"), "cork");});
test("corky -> corki", function() {deepEqual( Stem("corky"), "corki");});
test("cormorant -> cormor", function() {deepEqual( Stem("cormorant"), "cormor");});
test("corn -> corn", function() {deepEqual( Stem("corn"), "corn");});
test("cornelia -> cornelia", function() {deepEqual( Stem("cornelia"), "cornelia");});
test("cornelian -> cornelian", function() {deepEqual( Stem("cornelian"), "cornelian");});
test("cornelius -> corneliu", function() {deepEqual( Stem("cornelius"), "corneliu");});
test("corner -> corner", function() {deepEqual( Stem("corner"), "corner");});
test("cornered -> corner", function() {deepEqual( Stem("cornered"), "corner");});
test("corners -> corner", function() {deepEqual( Stem("corners"), "corner");});
test("cornerstone -> cornerston", function() {deepEqual( Stem("cornerstone"), "cornerston");});
test("cornet -> cornet", function() {deepEqual( Stem("cornet"), "cornet");});
test("cornets -> cornet", function() {deepEqual( Stem("cornets"), "cornet");});
test("cornfactors -> cornfactor", function() {deepEqual( Stem("cornfactors"), "cornfactor");});
test("cornhill -> cornhil", function() {deepEqual( Stem("cornhill"), "cornhil");});
test("cornices -> cornic", function() {deepEqual( Stem("cornices"), "cornic");});
test("cornish -> cornish", function() {deepEqual( Stem("cornish"), "cornish");});
test("corns -> corn", function() {deepEqual( Stem("corns"), "corn");});
test("cornuto -> cornuto", function() {deepEqual( Stem("cornuto"), "cornuto");});
test("cornwall -> cornwal", function() {deepEqual( Stem("cornwall"), "cornwal");});
test("corollary -> corollari", function() {deepEqual( Stem("corollary"), "corollari");});
test("coronal -> coron", function() {deepEqual( Stem("coronal"), "coron");});
test("coronation -> coron", function() {deepEqual( Stem("coronation"), "coron");});
test("coronet -> coronet", function() {deepEqual( Stem("coronet"), "coronet");});
test("coronets -> coronet", function() {deepEqual( Stem("coronets"), "coronet");});
test("corporal -> corpor", function() {deepEqual( Stem("corporal"), "corpor");});
test("corporals -> corpor", function() {deepEqual( Stem("corporals"), "corpor");});
test("corporate -> corpor", function() {deepEqual( Stem("corporate"), "corpor");});
test("corps -> corp", function() {deepEqual( Stem("corps"), "corp");});
test("corpse -> corps", function() {deepEqual( Stem("corpse"), "corps");});
test("corpses -> corps", function() {deepEqual( Stem("corpses"), "corps");});
test("corpulent -> corpul", function() {deepEqual( Stem("corpulent"), "corpul");});
test("corpus -> corpu", function() {deepEqual( Stem("corpus"), "corpu");});
test("correct -> correct", function() {deepEqual( Stem("correct"), "correct");});
test("corrected -> correct", function() {deepEqual( Stem("corrected"), "correct");});
test("correcting -> correct", function() {deepEqual( Stem("correcting"), "correct");});
test("correction -> correct", function() {deepEqual( Stem("correction"), "correct");});
test("correctioner -> correction", function() {deepEqual( Stem("correctioner"), "correction");});
test("correctly -> correctli", function() {deepEqual( Stem("correctly"), "correctli");});
test("correctness -> correct", function() {deepEqual( Stem("correctness"), "correct");});
test("corrects -> correct", function() {deepEqual( Stem("corrects"), "correct");});
test("correspond -> correspond", function() {deepEqual( Stem("correspond"), "correspond");});
test("correspondence -> correspond", function() {deepEqual( Stem("correspondence"), "correspond");});
test("correspondences -> correspond", function() {deepEqual( Stem("correspondences"), "correspond");});
test("correspondent -> correspond", function() {deepEqual( Stem("correspondent"), "correspond");});
test("correspondents -> correspond", function() {deepEqual( Stem("correspondents"), "correspond");});
test("corresponding -> correspond", function() {deepEqual( Stem("corresponding"), "correspond");});
test("corresponsive -> correspons", function() {deepEqual( Stem("corresponsive"), "correspons");});
test("corridor -> corridor", function() {deepEqual( Stem("corridor"), "corridor");});
test("corridors -> corridor", function() {deepEqual( Stem("corridors"), "corridor");});
test("corrigible -> corrig", function() {deepEqual( Stem("corrigible"), "corrig");});
test("corrival -> corriv", function() {deepEqual( Stem("corrival"), "corriv");});
test("corrivals -> corriv", function() {deepEqual( Stem("corrivals"), "corriv");});
test("corroborate -> corrobor", function() {deepEqual( Stem("corroborate"), "corrobor");});
test("corrosive -> corros", function() {deepEqual( Stem("corrosive"), "corros");});
test("corrupt -> corrupt", function() {deepEqual( Stem("corrupt"), "corrupt");});
test("corrupted -> corrupt", function() {deepEqual( Stem("corrupted"), "corrupt");});
test("corrupter -> corrupt", function() {deepEqual( Stem("corrupter"), "corrupt");});
test("corrupters -> corrupt", function() {deepEqual( Stem("corrupters"), "corrupt");});
test("corruptible -> corrupt", function() {deepEqual( Stem("corruptible"), "corrupt");});
test("corruptibly -> corruptibli", function() {deepEqual( Stem("corruptibly"), "corruptibli");});
test("corrupting -> corrupt", function() {deepEqual( Stem("corrupting"), "corrupt");});
test("corruption -> corrupt", function() {deepEqual( Stem("corruption"), "corrupt");});
test("corruptly -> corruptli", function() {deepEqual( Stem("corruptly"), "corruptli");});
test("corrupts -> corrupt", function() {deepEqual( Stem("corrupts"), "corrupt");});
test("corsage -> corsag", function() {deepEqual( Stem("corsage"), "corsag");});
test("corse -> cors", function() {deepEqual( Stem("corse"), "cors");});
test("corses -> cors", function() {deepEqual( Stem("corses"), "cors");});
test("corsetiere -> corsetier", function() {deepEqual( Stem("corsetiere"), "corsetier");});
test("corsican -> corsican", function() {deepEqual( Stem("corsican"), "corsican");});
test("corslet -> corslet", function() {deepEqual( Stem("corslet"), "corslet");});
test("cortege -> corteg", function() {deepEqual( Stem("cortege"), "corteg");});
test("corydon -> corydon", function() {deepEqual( Stem("corydon"), "corydon");});
test("cosmo -> cosmo", function() {deepEqual( Stem("cosmo"), "cosmo");});
test("cossacks -> cossack", function() {deepEqual( Stem("cossacks"), "cossack");});
test("cost -> cost", function() {deepEqual( Stem("cost"), "cost");});
test("costard -> costard", function() {deepEqual( Stem("costard"), "costard");});
test("costermongers -> costermong", function() {deepEqual( Stem("costermongers"), "costermong");});
test("costlier -> costlier", function() {deepEqual( Stem("costlier"), "costlier");});
test("costly -> costli", function() {deepEqual( Stem("costly"), "costli");});
test("costs -> cost", function() {deepEqual( Stem("costs"), "cost");});
test("costume -> costum", function() {deepEqual( Stem("costume"), "costum");});
test("costumes -> costum", function() {deepEqual( Stem("costumes"), "costum");});
test("cosway -> coswai", function() {deepEqual( Stem("cosway"), "coswai");});
test("cot -> cot", function() {deepEqual( Stem("cot"), "cot");});
test("cote -> cote", function() {deepEqual( Stem("cote"), "cote");});
test("coted -> cote", function() {deepEqual( Stem("coted"), "cote");});
test("cotillon -> cotillon", function() {deepEqual( Stem("cotillon"), "cotillon");});
test("cotsall -> cotsal", function() {deepEqual( Stem("cotsall"), "cotsal");});
test("cotsole -> cotsol", function() {deepEqual( Stem("cotsole"), "cotsol");});
test("cotswold -> cotswold", function() {deepEqual( Stem("cotswold"), "cotswold");});
test("cottage -> cottag", function() {deepEqual( Stem("cottage"), "cottag");});
test("cottagers -> cottag", function() {deepEqual( Stem("cottagers"), "cottag");});
test("cottages -> cottag", function() {deepEqual( Stem("cottages"), "cottag");});
test("cotton -> cotton", function() {deepEqual( Stem("cotton"), "cotton");});
test("cotus -> cotu", function() {deepEqual( Stem("cotus"), "cotu");});
test("couch -> couch", function() {deepEqual( Stem("couch"), "couch");});
test("couchant -> couchant", function() {deepEqual( Stem("couchant"), "couchant");});
test("couched -> couch", function() {deepEqual( Stem("couched"), "couch");});
test("couches -> couch", function() {deepEqual( Stem("couches"), "couch");});
test("couching -> couch", function() {deepEqual( Stem("couching"), "couch");});
test("couchings -> couch", function() {deepEqual( Stem("couchings"), "couch");});
test("coude -> coud", function() {deepEqual( Stem("coude"), "coud");});
test("cough -> cough", function() {deepEqual( Stem("cough"), "cough");});
test("coughing -> cough", function() {deepEqual( Stem("coughing"), "cough");});
test("could -> could", function() {deepEqual( Stem("could"), "could");});
test("couldn -> couldn", function() {deepEqual( Stem("couldn"), "couldn");});
test("couldst -> couldst", function() {deepEqual( Stem("couldst"), "couldst");});
test("coulter -> coulter", function() {deepEqual( Stem("coulter"), "coulter");});
test("council -> council", function() {deepEqual( Stem("council"), "council");});
test("councillor -> councillor", function() {deepEqual( Stem("councillor"), "councillor");});
test("councillors -> councillor", function() {deepEqual( Stem("councillors"), "councillor");});
test("councils -> council", function() {deepEqual( Stem("councils"), "council");});
test("counsel -> counsel", function() {deepEqual( Stem("counsel"), "counsel");});
test("counsell -> counsel", function() {deepEqual( Stem("counsell"), "counsel");});
test("counselled -> counsel", function() {deepEqual( Stem("counselled"), "counsel");});
test("counsellor -> counsellor", function() {deepEqual( Stem("counsellor"), "counsellor");});
test("counsellors -> counsellor", function() {deepEqual( Stem("counsellors"), "counsellor");});
test("counselor -> counselor", function() {deepEqual( Stem("counselor"), "counselor");});
test("counselors -> counselor", function() {deepEqual( Stem("counselors"), "counselor");});
test("counsels -> counsel", function() {deepEqual( Stem("counsels"), "counsel");});
test("count -> count", function() {deepEqual( Stem("count"), "count");});
test("counted -> count", function() {deepEqual( Stem("counted"), "count");});
test("countenanc -> countenanc", function() {deepEqual( Stem("countenanc"), "countenanc");});
test("countenance -> counten", function() {deepEqual( Stem("countenance"), "counten");});
test("countenances -> counten", function() {deepEqual( Stem("countenances"), "counten");});
test("counter -> counter", function() {deepEqual( Stem("counter"), "counter");});
test("counteracted -> counteract", function() {deepEqual( Stem("counteracted"), "counteract");});
test("counterchange -> counterchang", function() {deepEqual( Stem("counterchange"), "counterchang");});
test("countercheck -> countercheck", function() {deepEqual( Stem("countercheck"), "countercheck");});
test("counterfeit -> counterfeit", function() {deepEqual( Stem("counterfeit"), "counterfeit");});
test("counterfeited -> counterfeit", function() {deepEqual( Stem("counterfeited"), "counterfeit");});
test("counterfeiting -> counterfeit", function() {deepEqual( Stem("counterfeiting"), "counterfeit");});
test("counterfeitly -> counterfeitli", function() {deepEqual( Stem("counterfeitly"), "counterfeitli");});
test("counterfeits -> counterfeit", function() {deepEqual( Stem("counterfeits"), "counterfeit");});
test("countermand -> countermand", function() {deepEqual( Stem("countermand"), "countermand");});
test("countermands -> countermand", function() {deepEqual( Stem("countermands"), "countermand");});
test("countermines -> countermin", function() {deepEqual( Stem("countermines"), "countermin");});
test("counterpane -> counterpan", function() {deepEqual( Stem("counterpane"), "counterpan");});
test("counterpanes -> counterpan", function() {deepEqual( Stem("counterpanes"), "counterpan");});
test("counterpart -> counterpart", function() {deepEqual( Stem("counterpart"), "counterpart");});
test("counterpoints -> counterpoint", function() {deepEqual( Stem("counterpoints"), "counterpoint");});
test("counterpois -> counterpoi", function() {deepEqual( Stem("counterpois"), "counterpoi");});
test("counterpoise -> counterpois", function() {deepEqual( Stem("counterpoise"), "counterpois");});
test("counters -> counter", function() {deepEqual( Stem("counters"), "counter");});
test("countervail -> countervail", function() {deepEqual( Stem("countervail"), "countervail");});
test("countess -> countess", function() {deepEqual( Stem("countess"), "countess");});
test("countesses -> countess", function() {deepEqual( Stem("countesses"), "countess");});
test("counties -> counti", function() {deepEqual( Stem("counties"), "counti");});
test("counting -> count", function() {deepEqual( Stem("counting"), "count");});
test("countless -> countless", function() {deepEqual( Stem("countless"), "countless");});
test("countries -> countri", function() {deepEqual( Stem("countries"), "countri");});
test("countrv -> countrv", function() {deepEqual( Stem("countrv"), "countrv");});
test("country -> countri", function() {deepEqual( Stem("country"), "countri");});
test("countryman -> countryman", function() {deepEqual( Stem("countryman"), "countryman");});
test("countrymen -> countrymen", function() {deepEqual( Stem("countrymen"), "countrymen");});
test("counts -> count", function() {deepEqual( Stem("counts"), "count");});
test("county -> counti", function() {deepEqual( Stem("county"), "counti");});
test("coup -> coup", function() {deepEqual( Stem("coup"), "coup");});
test("couper -> couper", function() {deepEqual( Stem("couper"), "couper");});
test("coupez -> coupez", function() {deepEqual( Stem("coupez"), "coupez");});
test("couple -> coupl", function() {deepEqual( Stem("couple"), "coupl");});
test("coupled -> coupl", function() {deepEqual( Stem("coupled"), "coupl");});
test("couplement -> couplement", function() {deepEqual( Stem("couplement"), "couplement");});
test("couples -> coupl", function() {deepEqual( Stem("couples"), "coupl");});
test("couplet -> couplet", function() {deepEqual( Stem("couplet"), "couplet");});
test("couplets -> couplet", function() {deepEqual( Stem("couplets"), "couplet");});
test("coupy -> coupi", function() {deepEqual( Stem("coupy"), "coupi");});
test("cour -> cour", function() {deepEqual( Stem("cour"), "cour");});
test("courage -> courag", function() {deepEqual( Stem("courage"), "courag");});
test("courageous -> courag", function() {deepEqual( Stem("courageous"), "courag");});
test("courageously -> courag", function() {deepEqual( Stem("courageously"), "courag");});
test("courages -> courag", function() {deepEqual( Stem("courages"), "courag");});
test("courier -> courier", function() {deepEqual( Stem("courier"), "courier");});
test("couriers -> courier", function() {deepEqual( Stem("couriers"), "courier");});
test("couronne -> couronn", function() {deepEqual( Stem("couronne"), "couronn");});
test("cours -> cour", function() {deepEqual( Stem("cours"), "cour");});
test("course -> cours", function() {deepEqual( Stem("course"), "cours");});
test("coursed -> cours", function() {deepEqual( Stem("coursed"), "cours");});
test("courser -> courser", function() {deepEqual( Stem("courser"), "courser");});
test("coursers -> courser", function() {deepEqual( Stem("coursers"), "courser");});
test("courses -> cours", function() {deepEqual( Stem("courses"), "cours");});
test("coursing -> cours", function() {deepEqual( Stem("coursing"), "cours");});
test("court -> court", function() {deepEqual( Stem("court"), "court");});
test("courte -> court", function() {deepEqual( Stem("courte"), "court");});
test("courted -> court", function() {deepEqual( Stem("courted"), "court");});
test("courteous -> courteou", function() {deepEqual( Stem("courteous"), "courteou");});
test("courteously -> courteous", function() {deepEqual( Stem("courteously"), "courteous");});
test("courtesan -> courtesan", function() {deepEqual( Stem("courtesan"), "courtesan");});
test("courtesies -> courtesi", function() {deepEqual( Stem("courtesies"), "courtesi");});
test("courtesy -> courtesi", function() {deepEqual( Stem("courtesy"), "courtesi");});
test("courtezan -> courtezan", function() {deepEqual( Stem("courtezan"), "courtezan");});
test("courtezans -> courtezan", function() {deepEqual( Stem("courtezans"), "courtezan");});
test("courtier -> courtier", function() {deepEqual( Stem("courtier"), "courtier");});
test("courtiers -> courtier", function() {deepEqual( Stem("courtiers"), "courtier");});
test("courting -> court", function() {deepEqual( Stem("courting"), "court");});
test("courtlike -> courtlik", function() {deepEqual( Stem("courtlike"), "courtlik");});
test("courtly -> courtli", function() {deepEqual( Stem("courtly"), "courtli");});
test("courtney -> courtnei", function() {deepEqual( Stem("courtney"), "courtnei");});
test("courts -> court", function() {deepEqual( Stem("courts"), "court");});
test("courtship -> courtship", function() {deepEqual( Stem("courtship"), "courtship");});
test("courtships -> courtship", function() {deepEqual( Stem("courtships"), "courtship");});
test("courtyard -> courtyard", function() {deepEqual( Stem("courtyard"), "courtyard");});
test("cousin -> cousin", function() {deepEqual( Stem("cousin"), "cousin");});
test("cousins -> cousin", function() {deepEqual( Stem("cousins"), "cousin");});
test("couterfeit -> couterfeit", function() {deepEqual( Stem("couterfeit"), "couterfeit");});
test("coutume -> coutum", function() {deepEqual( Stem("coutume"), "coutum");});
test("covenant -> coven", function() {deepEqual( Stem("covenant"), "coven");});
test("covenants -> coven", function() {deepEqual( Stem("covenants"), "coven");});
test("covent -> covent", function() {deepEqual( Stem("covent"), "covent");});
test("coventry -> coventri", function() {deepEqual( Stem("coventry"), "coventri");});
test("cover -> cover", function() {deepEqual( Stem("cover"), "cover");});
test("covered -> cover", function() {deepEqual( Stem("covered"), "cover");});
test("covering -> cover", function() {deepEqual( Stem("covering"), "cover");});
test("coverings -> cover", function() {deepEqual( Stem("coverings"), "cover");});
test("coverlet -> coverlet", function() {deepEqual( Stem("coverlet"), "coverlet");});
test("covers -> cover", function() {deepEqual( Stem("covers"), "cover");});
test("covert -> covert", function() {deepEqual( Stem("covert"), "covert");});
test("covertly -> covertli", function() {deepEqual( Stem("covertly"), "covertli");});
test("coverture -> covertur", function() {deepEqual( Stem("coverture"), "covertur");});
test("covet -> covet", function() {deepEqual( Stem("covet"), "covet");});
test("coveted -> covet", function() {deepEqual( Stem("coveted"), "covet");});
test("coveting -> covet", function() {deepEqual( Stem("coveting"), "covet");});
test("covetings -> covet", function() {deepEqual( Stem("covetings"), "covet");});
test("covetous -> covet", function() {deepEqual( Stem("covetous"), "covet");});
test("covetously -> covet", function() {deepEqual( Stem("covetously"), "covet");});
test("covetousness -> covet", function() {deepEqual( Stem("covetousness"), "covet");});
test("covets -> covet", function() {deepEqual( Stem("covets"), "covet");});
test("cow -> cow", function() {deepEqual( Stem("cow"), "cow");});
test("coward -> coward", function() {deepEqual( Stem("coward"), "coward");});
test("cowarded -> coward", function() {deepEqual( Stem("cowarded"), "coward");});
test("cowardice -> cowardic", function() {deepEqual( Stem("cowardice"), "cowardic");});
test("cowardly -> cowardli", function() {deepEqual( Stem("cowardly"), "cowardli");});
test("cowards -> coward", function() {deepEqual( Stem("cowards"), "coward");});
test("cowardship -> cowardship", function() {deepEqual( Stem("cowardship"), "cowardship");});
test("cowed -> cow", function() {deepEqual( Stem("cowed"), "cow");});
test("cowering -> cower", function() {deepEqual( Stem("cowering"), "cower");});
test("cowes -> cow", function() {deepEqual( Stem("cowes"), "cow");});
test("cowish -> cowish", function() {deepEqual( Stem("cowish"), "cowish");});
test("cowl -> cowl", function() {deepEqual( Stem("cowl"), "cowl");});
test("cows -> cow", function() {deepEqual( Stem("cows"), "cow");});
test("cowslip -> cowslip", function() {deepEqual( Stem("cowslip"), "cowslip");});
test("cowslips -> cowslip", function() {deepEqual( Stem("cowslips"), "cowslip");});
test("cox -> cox", function() {deepEqual( Stem("cox"), "cox");});
test("coxcomb -> coxcomb", function() {deepEqual( Stem("coxcomb"), "coxcomb");});
test("coxcombs -> coxcomb", function() {deepEqual( Stem("coxcombs"), "coxcomb");});
test("coy -> coi", function() {deepEqual( Stem("coy"), "coi");});
test("coyness -> coy", function() {deepEqual( Stem("coyness"), "coy");});
test("coystrill -> coystril", function() {deepEqual( Stem("coystrill"), "coystril");});
test("coz -> coz", function() {deepEqual( Stem("coz"), "coz");});
test("cozen -> cozen", function() {deepEqual( Stem("cozen"), "cozen");});
test("cozenage -> cozenag", function() {deepEqual( Stem("cozenage"), "cozenag");});
test("cozened -> cozen", function() {deepEqual( Stem("cozened"), "cozen");});
test("cozener -> cozen", function() {deepEqual( Stem("cozener"), "cozen");});
test("cozeners -> cozen", function() {deepEqual( Stem("cozeners"), "cozen");});
test("cozening -> cozen", function() {deepEqual( Stem("cozening"), "cozen");});
test("coziers -> cozier", function() {deepEqual( Stem("coziers"), "cozier");});
test("crab -> crab", function() {deepEqual( Stem("crab"), "crab");});
test("crabbed -> crab", function() {deepEqual( Stem("crabbed"), "crab");});
test("crabs -> crab", function() {deepEqual( Stem("crabs"), "crab");});
test("crack -> crack", function() {deepEqual( Stem("crack"), "crack");});
test("cracked -> crack", function() {deepEqual( Stem("cracked"), "crack");});
test("crackenbury -> crackenburi", function() {deepEqual( Stem("crackenbury"), "crackenburi");});
test("cracker -> cracker", function() {deepEqual( Stem("cracker"), "cracker");});
test("crackers -> cracker", function() {deepEqual( Stem("crackers"), "cracker");});
test("cracking -> crack", function() {deepEqual( Stem("cracking"), "crack");});
test("crackled -> crackl", function() {deepEqual( Stem("crackled"), "crackl");});
test("crackling -> crackl", function() {deepEqual( Stem("crackling"), "crackl");});
test("cracks -> crack", function() {deepEqual( Stem("cracks"), "crack");});
test("cracksman -> cracksman", function() {deepEqual( Stem("cracksman"), "cracksman");});
test("cradle -> cradl", function() {deepEqual( Stem("cradle"), "cradl");});
test("cradled -> cradl", function() {deepEqual( Stem("cradled"), "cradl");});
test("cradles -> cradl", function() {deepEqual( Stem("cradles"), "cradl");});
test("craft -> craft", function() {deepEqual( Stem("craft"), "craft");});
test("crafted -> craft", function() {deepEqual( Stem("crafted"), "craft");});
test("craftied -> crafti", function() {deepEqual( Stem("craftied"), "crafti");});
test("craftier -> craftier", function() {deepEqual( Stem("craftier"), "craftier");});
test("craftily -> craftili", function() {deepEqual( Stem("craftily"), "craftili");});
test("crafts -> craft", function() {deepEqual( Stem("crafts"), "craft");});
test("craftsmen -> craftsmen", function() {deepEqual( Stem("craftsmen"), "craftsmen");});
test("crafty -> crafti", function() {deepEqual( Stem("crafty"), "crafti");});
test("crags -> crag", function() {deepEqual( Stem("crags"), "crag");});
test("cram -> cram", function() {deepEqual( Stem("cram"), "cram");});
test("cramm -> cramm", function() {deepEqual( Stem("cramm"), "cramm");});
test("crammed -> cram", function() {deepEqual( Stem("crammed"), "cram");});
test("cramp -> cramp", function() {deepEqual( Stem("cramp"), "cramp");});
test("cramps -> cramp", function() {deepEqual( Stem("cramps"), "cramp");});
test("crams -> cram", function() {deepEqual( Stem("crams"), "cram");});
test("cranberry -> cranberri", function() {deepEqual( Stem("cranberry"), "cranberri");});
test("cranking -> crank", function() {deepEqual( Stem("cranking"), "crank");});
test("cranks -> crank", function() {deepEqual( Stem("cranks"), "crank");});
test("cranmer -> cranmer", function() {deepEqual( Stem("cranmer"), "cranmer");});
test("crannied -> cranni", function() {deepEqual( Stem("crannied"), "cranni");});
test("crannies -> cranni", function() {deepEqual( Stem("crannies"), "cranni");});
test("cranny -> cranni", function() {deepEqual( Stem("cranny"), "cranni");});
test("crants -> crant", function() {deepEqual( Stem("crants"), "crant");});
test("crape -> crape", function() {deepEqual( Stem("crape"), "crape");});
test("crapes -> crape", function() {deepEqual( Stem("crapes"), "crape");});
test("crare -> crare", function() {deepEqual( Stem("crare"), "crare");});
test("cras -> cra", function() {deepEqual( Stem("cras"), "cra");});
test("crash -> crash", function() {deepEqual( Stem("crash"), "crash");});
test("crashing -> crash", function() {deepEqual( Stem("crashing"), "crash");});
test("crassus -> crassu", function() {deepEqual( Stem("crassus"), "crassu");});
test("crav -> crav", function() {deepEqual( Stem("crav"), "crav");});
test("cravat -> cravat", function() {deepEqual( Stem("cravat"), "cravat");});
test("cravatted -> cravat", function() {deepEqual( Stem("cravatted"), "cravat");});
test("crave -> crave", function() {deepEqual( Stem("crave"), "crave");});
test("craved -> crave", function() {deepEqual( Stem("craved"), "crave");});
test("craven -> craven", function() {deepEqual( Stem("craven"), "craven");});
test("cravens -> craven", function() {deepEqual( Stem("cravens"), "craven");});
test("craves -> crave", function() {deepEqual( Stem("craves"), "crave");});
test("craveth -> craveth", function() {deepEqual( Stem("craveth"), "craveth");});
test("craving -> crave", function() {deepEqual( Stem("craving"), "crave");});
test("cravley -> cravlei", function() {deepEqual( Stem("cravley"), "cravlei");});
test("crawl -> crawl", function() {deepEqual( Stem("crawl"), "crawl");});
test("crawled -> crawl", function() {deepEqual( Stem("crawled"), "crawl");});
test("crawlers -> crawler", function() {deepEqual( Stem("crawlers"), "crawler");});
test("crawley -> crawlei", function() {deepEqual( Stem("crawley"), "crawlei");});
test("crawleys -> crawlei", function() {deepEqual( Stem("crawleys"), "crawlei");});
test("crawling -> crawl", function() {deepEqual( Stem("crawling"), "crawl");});
test("crawls -> crawl", function() {deepEqual( Stem("crawls"), "crawl");});
test("craz -> craz", function() {deepEqual( Stem("craz"), "craz");});
test("crazed -> craze", function() {deepEqual( Stem("crazed"), "craze");});
test("crazy -> crazi", function() {deepEqual( Stem("crazy"), "crazi");});
test("creak -> creak", function() {deepEqual( Stem("creak"), "creak");});
test("creaked -> creak", function() {deepEqual( Stem("creaked"), "creak");});
test("creaking -> creak", function() {deepEqual( Stem("creaking"), "creak");});
test("cream -> cream", function() {deepEqual( Stem("cream"), "cream");});
test("creamer -> creamer", function() {deepEqual( Stem("creamer"), "creamer");});
test("create -> creat", function() {deepEqual( Stem("create"), "creat");});
test("created -> creat", function() {deepEqual( Stem("created"), "creat");});
test("creates -> creat", function() {deepEqual( Stem("creates"), "creat");});
test("creating -> creat", function() {deepEqual( Stem("creating"), "creat");});
test("creation -> creation", function() {deepEqual( Stem("creation"), "creation");});
test("creator -> creator", function() {deepEqual( Stem("creator"), "creator");});
test("creature -> creatur", function() {deepEqual( Stem("creature"), "creatur");});
test("creatures -> creatur", function() {deepEqual( Stem("creatures"), "creatur");});
test("crebillon -> crebillon", function() {deepEqual( Stem("crebillon"), "crebillon");});
test("credence -> credenc", function() {deepEqual( Stem("credence"), "credenc");});
test("credent -> credent", function() {deepEqual( Stem("credent"), "credent");});
test("credible -> credibl", function() {deepEqual( Stem("credible"), "credibl");});
test("credit -> credit", function() {deepEqual( Stem("credit"), "credit");});
test("creditable -> credit", function() {deepEqual( Stem("creditable"), "credit");});
test("creditor -> creditor", function() {deepEqual( Stem("creditor"), "creditor");});
test("creditors -> creditor", function() {deepEqual( Stem("creditors"), "creditor");});
test("credo -> credo", function() {deepEqual( Stem("credo"), "credo");});
test("credulity -> credul", function() {deepEqual( Stem("credulity"), "credul");});
test("credulous -> credul", function() {deepEqual( Stem("credulous"), "credul");});
test("creed -> creed", function() {deepEqual( Stem("creed"), "creed");});
test("creek -> creek", function() {deepEqual( Stem("creek"), "creek");});
test("creeks -> creek", function() {deepEqual( Stem("creeks"), "creek");});
test("creep -> creep", function() {deepEqual( Stem("creep"), "creep");});
test("creeping -> creep", function() {deepEqual( Stem("creeping"), "creep");});
test("creeps -> creep", function() {deepEqual( Stem("creeps"), "creep");});
test("creole -> creol", function() {deepEqual( Stem("creole"), "creol");});
test("crept -> crept", function() {deepEqual( Stem("crept"), "crept");});
test("crescent -> crescent", function() {deepEqual( Stem("crescent"), "crescent");});
test("crescive -> cresciv", function() {deepEqual( Stem("crescive"), "cresciv");});
test("cressets -> cresset", function() {deepEqual( Stem("cressets"), "cresset");});
test("cressid -> cressid", function() {deepEqual( Stem("cressid"), "cressid");});
test("cressida -> cressida", function() {deepEqual( Stem("cressida"), "cressida");});
test("cressids -> cressid", function() {deepEqual( Stem("cressids"), "cressid");});
test("cressy -> cressi", function() {deepEqual( Stem("cressy"), "cressi");});
test("crest -> crest", function() {deepEqual( Stem("crest"), "crest");});
test("crested -> crest", function() {deepEqual( Stem("crested"), "crest");});
test("crestfall -> crestfal", function() {deepEqual( Stem("crestfall"), "crestfal");});
test("crestfallen -> crestfallen", function() {deepEqual( Stem("crestfallen"), "crestfallen");});
test("crestless -> crestless", function() {deepEqual( Stem("crestless"), "crestless");});
test("crests -> crest", function() {deepEqual( Stem("crests"), "crest");});
test("cretan -> cretan", function() {deepEqual( Stem("cretan"), "cretan");});
test("crete -> crete", function() {deepEqual( Stem("crete"), "crete");});
test("crevice -> crevic", function() {deepEqual( Stem("crevice"), "crevic");});
test("crew -> crew", function() {deepEqual( Stem("crew"), "crew");});
test("crews -> crew", function() {deepEqual( Stem("crews"), "crew");});
test("crib -> crib", function() {deepEqual( Stem("crib"), "crib");});
test("cribb -> cribb", function() {deepEqual( Stem("cribb"), "cribb");});
test("cribbage -> cribbag", function() {deepEqual( Stem("cribbage"), "cribbag");});
test("crible -> cribl", function() {deepEqual( Stem("crible"), "cribl");});
test("cribs -> crib", function() {deepEqual( Stem("cribs"), "crib");});
test("crichton -> crichton", function() {deepEqual( Stem("crichton"), "crichton");});
test("cricket -> cricket", function() {deepEqual( Stem("cricket"), "cricket");});
test("crickets -> cricket", function() {deepEqual( Stem("crickets"), "cricket");});
test("cried -> cri", function() {deepEqual( Stem("cried"), "cri");});
test("criedst -> criedst", function() {deepEqual( Stem("criedst"), "criedst");});
test("crier -> crier", function() {deepEqual( Stem("crier"), "crier");});
test("cries -> cri", function() {deepEqual( Stem("cries"), "cri");});
test("criest -> criest", function() {deepEqual( Stem("criest"), "criest");});
test("crieth -> crieth", function() {deepEqual( Stem("crieth"), "crieth");});
test("crime -> crime", function() {deepEqual( Stem("crime"), "crime");});
test("crimeful -> crime", function() {deepEqual( Stem("crimeful"), "crime");});
test("crimeless -> crimeless", function() {deepEqual( Stem("crimeless"), "crimeless");});
test("crimes -> crime", function() {deepEqual( Stem("crimes"), "crime");});
test("criminal -> crimin", function() {deepEqual( Stem("criminal"), "crimin");});
test("crimped -> crimp", function() {deepEqual( Stem("crimped"), "crimp");});
test("crimson -> crimson", function() {deepEqual( Stem("crimson"), "crimson");});
test("cringe -> cring", function() {deepEqual( Stem("cringe"), "cring");});
test("cringed -> cring", function() {deepEqual( Stem("cringed"), "cring");});
test("cringing -> cring", function() {deepEqual( Stem("cringing"), "cring");});
test("crinoline -> crinolin", function() {deepEqual( Stem("crinoline"), "crinolin");});
test("cripple -> crippl", function() {deepEqual( Stem("cripple"), "crippl");});
test("crisis -> crisi", function() {deepEqual( Stem("crisis"), "crisi");});
test("crisp -> crisp", function() {deepEqual( Stem("crisp"), "crisp");});
test("crisped -> crisp", function() {deepEqual( Stem("crisped"), "crisp");});
test("crispian -> crispian", function() {deepEqual( Stem("crispian"), "crispian");});
test("crispianus -> crispianu", function() {deepEqual( Stem("crispianus"), "crispianu");});
test("crispin -> crispin", function() {deepEqual( Stem("crispin"), "crispin");});
test("critic -> critic", function() {deepEqual( Stem("critic"), "critic");});
test("critical -> critic", function() {deepEqual( Stem("critical"), "critic");});
test("criticisms -> critic", function() {deepEqual( Stem("criticisms"), "critic");});
test("critics -> critic", function() {deepEqual( Stem("critics"), "critic");});
test("croak -> croak", function() {deepEqual( Stem("croak"), "croak");});
test("croaking -> croak", function() {deepEqual( Stem("croaking"), "croak");});
test("croaks -> croak", function() {deepEqual( Stem("croaks"), "croak");});
test("crockery -> crockeri", function() {deepEqual( Stem("crockery"), "crockeri");});
test("crocky -> crocki", function() {deepEqual( Stem("crocky"), "crocki");});
test("crocodile -> crocodil", function() {deepEqual( Stem("crocodile"), "crocodil");});
test("croesus -> croesu", function() {deepEqual( Stem("croesus"), "croesu");});
test("cromer -> cromer", function() {deepEqual( Stem("cromer"), "cromer");});
test("cromwell -> cromwel", function() {deepEqual( Stem("cromwell"), "cromwel");});
test("crone -> crone", function() {deepEqual( Stem("crone"), "crone");});
test("cronies -> croni", function() {deepEqual( Stem("cronies"), "croni");});
test("crony -> croni", function() {deepEqual( Stem("crony"), "croni");});
test("crook -> crook", function() {deepEqual( Stem("crook"), "crook");});
test("crookback -> crookback", function() {deepEqual( Stem("crookback"), "crookback");});
test("crooked -> crook", function() {deepEqual( Stem("crooked"), "crook");});
test("crooking -> crook", function() {deepEqual( Stem("crooking"), "crook");});
test("crop -> crop", function() {deepEqual( Stem("crop"), "crop");});
test("cropp -> cropp", function() {deepEqual( Stem("cropp"), "cropp");});
test("cropped -> crop", function() {deepEqual( Stem("cropped"), "crop");});
test("crops -> crop", function() {deepEqual( Stem("crops"), "crop");});
test("crosby -> crosbi", function() {deepEqual( Stem("crosby"), "crosbi");});
test("cross -> cross", function() {deepEqual( Stem("cross"), "cross");});
test("crossed -> cross", function() {deepEqual( Stem("crossed"), "cross");});
test("crosses -> cross", function() {deepEqual( Stem("crosses"), "cross");});
test("crossest -> crossest", function() {deepEqual( Stem("crossest"), "crossest");});
test("crossing -> cross", function() {deepEqual( Stem("crossing"), "cross");});
test("crossings -> cross", function() {deepEqual( Stem("crossings"), "cross");});
test("crossly -> crossli", function() {deepEqual( Stem("crossly"), "crossli");});
test("crossness -> cross", function() {deepEqual( Stem("crossness"), "cross");});
test("crost -> crost", function() {deepEqual( Stem("crost"), "crost");});
test("crotchets -> crotchet", function() {deepEqual( Stem("crotchets"), "crotchet");});
test("crouch -> crouch", function() {deepEqual( Stem("crouch"), "crouch");});
test("crouching -> crouch", function() {deepEqual( Stem("crouching"), "crouch");});
test("croup -> croup", function() {deepEqual( Stem("croup"), "croup");});
test("croupier -> croupier", function() {deepEqual( Stem("croupier"), "croupier");});
test("croupiers -> croupier", function() {deepEqual( Stem("croupiers"), "croupier");});
test("crow -> crow", function() {deepEqual( Stem("crow"), "crow");});
test("crowd -> crowd", function() {deepEqual( Stem("crowd"), "crowd");});
test("crowded -> crowd", function() {deepEqual( Stem("crowded"), "crowd");});
test("crowding -> crowd", function() {deepEqual( Stem("crowding"), "crowd");});
test("crowds -> crowd", function() {deepEqual( Stem("crowds"), "crowd");});
test("crowed -> crow", function() {deepEqual( Stem("crowed"), "crow");});
test("crowflowers -> crowflow", function() {deepEqual( Stem("crowflowers"), "crowflow");});
test("crowing -> crow", function() {deepEqual( Stem("crowing"), "crow");});
test("crowkeeper -> crowkeep", function() {deepEqual( Stem("crowkeeper"), "crowkeep");});
test("crown -> crown", function() {deepEqual( Stem("crown"), "crown");});
test("crowned -> crown", function() {deepEqual( Stem("crowned"), "crown");});
test("crowner -> crowner", function() {deepEqual( Stem("crowner"), "crowner");});
test("crownet -> crownet", function() {deepEqual( Stem("crownet"), "crownet");});
test("crownets -> crownet", function() {deepEqual( Stem("crownets"), "crownet");});
test("crowning -> crown", function() {deepEqual( Stem("crowning"), "crown");});
test("crowns -> crown", function() {deepEqual( Stem("crowns"), "crown");});
test("crows -> crow", function() {deepEqual( Stem("crows"), "crow");});
test("cruchecassee -> cruchecasse", function() {deepEqual( Stem("cruchecassee"), "cruchecasse");});
test("crudy -> crudi", function() {deepEqual( Stem("crudy"), "crudi");});
test("cruel -> cruel", function() {deepEqual( Stem("cruel"), "cruel");});
test("cruell -> cruell", function() {deepEqual( Stem("cruell"), "cruell");});
test("crueller -> crueller", function() {deepEqual( Stem("crueller"), "crueller");});
test("cruellest -> cruellest", function() {deepEqual( Stem("cruellest"), "cruellest");});
test("cruelly -> cruelli", function() {deepEqual( Stem("cruelly"), "cruelli");});
test("cruels -> cruel", function() {deepEqual( Stem("cruels"), "cruel");});
test("cruelty -> cruelti", function() {deepEqual( Stem("cruelty"), "cruelti");});
test("cruet -> cruet", function() {deepEqual( Stem("cruet"), "cruet");});
test("crum -> crum", function() {deepEqual( Stem("crum"), "crum");});
test("crumble -> crumbl", function() {deepEqual( Stem("crumble"), "crumbl");});
test("crumbs -> crumb", function() {deepEqual( Stem("crumbs"), "crumb");});
test("crump -> crump", function() {deepEqual( Stem("crump"), "crump");});
test("crumpled -> crumpl", function() {deepEqual( Stem("crumpled"), "crumpl");});
test("crupper -> crupper", function() {deepEqual( Stem("crupper"), "crupper");});
test("crusadoes -> crusado", function() {deepEqual( Stem("crusadoes"), "crusado");});
test("crush -> crush", function() {deepEqual( Stem("crush"), "crush");});
test("crushed -> crush", function() {deepEqual( Stem("crushed"), "crush");});
test("crushes -> crush", function() {deepEqual( Stem("crushes"), "crush");});
test("crushest -> crushest", function() {deepEqual( Stem("crushest"), "crushest");});
test("crushing -> crush", function() {deepEqual( Stem("crushing"), "crush");});
test("crust -> crust", function() {deepEqual( Stem("crust"), "crust");});
test("crusts -> crust", function() {deepEqual( Stem("crusts"), "crust");});
test("crusty -> crusti", function() {deepEqual( Stem("crusty"), "crusti");});
test("crutch -> crutch", function() {deepEqual( Stem("crutch"), "crutch");});
test("crutched -> crutch", function() {deepEqual( Stem("crutched"), "crutch");});
test("crutches -> crutch", function() {deepEqual( Stem("crutches"), "crutch");});
test("cry -> cry", function() {deepEqual( Stem("cry"), "cry");});
test("crying -> cry", function() {deepEqual( Stem("crying"), "cry");});
test("crypt -> crypt", function() {deepEqual( Stem("crypt"), "crypt");});
test("crystal -> crystal", function() {deepEqual( Stem("crystal"), "crystal");});
test("crystalline -> crystallin", function() {deepEqual( Stem("crystalline"), "crystallin");});
test("crystals -> crystal", function() {deepEqual( Stem("crystals"), "crystal");});
test("cub -> cub", function() {deepEqual( Stem("cub"), "cub");});
test("cubbert -> cubbert", function() {deepEqual( Stem("cubbert"), "cubbert");});
test("cubiculo -> cubiculo", function() {deepEqual( Stem("cubiculo"), "cubiculo");});
test("cubit -> cubit", function() {deepEqual( Stem("cubit"), "cubit");});
test("cubs -> cub", function() {deepEqual( Stem("cubs"), "cub");});
test("cuckold -> cuckold", function() {deepEqual( Stem("cuckold"), "cuckold");});
test("cuckoldly -> cuckoldli", function() {deepEqual( Stem("cuckoldly"), "cuckoldli");});
test("cuckolds -> cuckold", function() {deepEqual( Stem("cuckolds"), "cuckold");});
test("cuckoo -> cuckoo", function() {deepEqual( Stem("cuckoo"), "cuckoo");});
test("cucullus -> cucullu", function() {deepEqual( Stem("cucullus"), "cucullu");});
test("cuddle -> cuddl", function() {deepEqual( Stem("cuddle"), "cuddl");});
test("cuddled -> cuddl", function() {deepEqual( Stem("cuddled"), "cuddl");});
test("cuddling -> cuddl", function() {deepEqual( Stem("cuddling"), "cuddl");});
test("cuddy -> cuddi", function() {deepEqual( Stem("cuddy"), "cuddi");});
test("cudgel -> cudgel", function() {deepEqual( Stem("cudgel"), "cudgel");});
test("cudgeled -> cudgel", function() {deepEqual( Stem("cudgeled"), "cudgel");});
test("cudgell -> cudgel", function() {deepEqual( Stem("cudgell"), "cudgel");});
test("cudgelling -> cudgel", function() {deepEqual( Stem("cudgelling"), "cudgel");});
test("cudgels -> cudgel", function() {deepEqual( Stem("cudgels"), "cudgel");});
test("cue -> cue", function() {deepEqual( Stem("cue"), "cue");});
test("cues -> cue", function() {deepEqual( Stem("cues"), "cue");});
test("cuff -> cuff", function() {deepEqual( Stem("cuff"), "cuff");});
test("cuffs -> cuff", function() {deepEqual( Stem("cuffs"), "cuff");});
test("cuique -> cuiqu", function() {deepEqual( Stem("cuique"), "cuiqu");});
test("cuirasses -> cuirass", function() {deepEqual( Stem("cuirasses"), "cuirass");});
test("cull -> cull", function() {deepEqual( Stem("cull"), "cull");});
test("culling -> cull", function() {deepEqual( Stem("culling"), "cull");});
test("cullion -> cullion", function() {deepEqual( Stem("cullion"), "cullion");});
test("cullionly -> cullionli", function() {deepEqual( Stem("cullionly"), "cullionli");});
test("cullions -> cullion", function() {deepEqual( Stem("cullions"), "cullion");});
test("culmination -> culmin", function() {deepEqual( Stem("culmination"), "culmin");});
test("culotte -> culott", function() {deepEqual( Stem("culotte"), "culott");});
test("culpable -> culpabl", function() {deepEqual( Stem("culpable"), "culpabl");});
test("culprit -> culprit", function() {deepEqual( Stem("culprit"), "culprit");});
test("cultivate -> cultiv", function() {deepEqual( Stem("cultivate"), "cultiv");});
test("cultivated -> cultiv", function() {deepEqual( Stem("cultivated"), "cultiv");});
test("cultivating -> cultiv", function() {deepEqual( Stem("cultivating"), "cultiv");});
test("culverin -> culverin", function() {deepEqual( Stem("culverin"), "culverin");});
test("cum -> cum", function() {deepEqual( Stem("cum"), "cum");});
test("cumber -> cumber", function() {deepEqual( Stem("cumber"), "cumber");});
test("cumberland -> cumberland", function() {deepEqual( Stem("cumberland"), "cumberland");});
test("cumbrous -> cumbrou", function() {deepEqual( Stem("cumbrous"), "cumbrou");});
test("cunning -> cun", function() {deepEqual( Stem("cunning"), "cun");});
test("cunningly -> cunningli", function() {deepEqual( Stem("cunningly"), "cunningli");});
test("cunnings -> cun", function() {deepEqual( Stem("cunnings"), "cun");});
test("cuore -> cuor", function() {deepEqual( Stem("cuore"), "cuor");});
test("cup -> cup", function() {deepEqual( Stem("cup"), "cup");});
test("cupbearer -> cupbear", function() {deepEqual( Stem("cupbearer"), "cupbear");});
test("cupboard -> cupboard", function() {deepEqual( Stem("cupboard"), "cupboard");});
test("cupboarding -> cupboard", function() {deepEqual( Stem("cupboarding"), "cupboard");});
test("cupboards -> cupboard", function() {deepEqual( Stem("cupboards"), "cupboard");});
test("cupid -> cupid", function() {deepEqual( Stem("cupid"), "cupid");});
test("cupids -> cupid", function() {deepEqual( Stem("cupids"), "cupid");});
test("cupola -> cupola", function() {deepEqual( Stem("cupola"), "cupola");});
test("cupped -> cup", function() {deepEqual( Stem("cupped"), "cup");});
test("cuppele -> cuppel", function() {deepEqual( Stem("cuppele"), "cuppel");});
test("cuppers -> cupper", function() {deepEqual( Stem("cuppers"), "cupper");});
test("cups -> cup", function() {deepEqual( Stem("cups"), "cup");});
test("cur -> cur", function() {deepEqual( Stem("cur"), "cur");});
test("curacao -> curacao", function() {deepEqual( Stem("curacao"), "curacao");});
test("curan -> curan", function() {deepEqual( Stem("curan"), "curan");});
test("curas -> cura", function() {deepEqual( Stem("curas"), "cura");});
test("curate -> curat", function() {deepEqual( Stem("curate"), "curat");});
test("curates -> curat", function() {deepEqual( Stem("curates"), "curat");});
test("curb -> curb", function() {deepEqual( Stem("curb"), "curb");});
test("curbed -> curb", function() {deepEqual( Stem("curbed"), "curb");});
test("curbing -> curb", function() {deepEqual( Stem("curbing"), "curb");});
test("curbs -> curb", function() {deepEqual( Stem("curbs"), "curb");});
test("curd -> curd", function() {deepEqual( Stem("curd"), "curd");});
test("curdied -> curdi", function() {deepEqual( Stem("curdied"), "curdi");});
test("curds -> curd", function() {deepEqual( Stem("curds"), "curd");});
test("cure -> cure", function() {deepEqual( Stem("cure"), "cure");});
test("cured -> cure", function() {deepEqual( Stem("cured"), "cure");});
test("cureless -> cureless", function() {deepEqual( Stem("cureless"), "cureless");});
test("curer -> curer", function() {deepEqual( Stem("curer"), "curer");});
test("cures -> cure", function() {deepEqual( Stem("cures"), "cure");});
test("curfew -> curfew", function() {deepEqual( Stem("curfew"), "curfew");});
test("curing -> cure", function() {deepEqual( Stem("curing"), "cure");});
test("curio -> curio", function() {deepEqual( Stem("curio"), "curio");});
test("curiosity -> curios", function() {deepEqual( Stem("curiosity"), "curios");});
test("curious -> curiou", function() {deepEqual( Stem("curious"), "curiou");});
test("curiously -> curious", function() {deepEqual( Stem("curiously"), "curious");});
test("curl -> curl", function() {deepEqual( Stem("curl"), "curl");});
test("curled -> curl", function() {deepEqual( Stem("curled"), "curl");});
test("curling -> curl", function() {deepEqual( Stem("curling"), "curl");});
test("curls -> curl", function() {deepEqual( Stem("curls"), "curl");});
test("curly -> curli", function() {deepEqual( Stem("curly"), "curli");});
test("curragh -> curragh", function() {deepEqual( Stem("curragh"), "curragh");});
test("currance -> curranc", function() {deepEqual( Stem("currance"), "curranc");});
test("currant -> currant", function() {deepEqual( Stem("currant"), "currant");});
test("currants -> currant", function() {deepEqual( Stem("currants"), "currant");});
test("current -> current", function() {deepEqual( Stem("current"), "current");});
test("currently -> current", function() {deepEqual( Stem("currently"), "current");});
test("currents -> current", function() {deepEqual( Stem("currents"), "current");});
test("curricle -> curricl", function() {deepEqual( Stem("curricle"), "curricl");});
test("curriculum -> curriculum", function() {deepEqual( Stem("curriculum"), "curriculum");});
test("curries -> curri", function() {deepEqual( Stem("curries"), "curri");});
test("currish -> currish", function() {deepEqual( Stem("currish"), "currish");});
test("curry -> curri", function() {deepEqual( Stem("curry"), "curri");});
test("curs -> cur", function() {deepEqual( Stem("curs"), "cur");});
test("curse -> curs", function() {deepEqual( Stem("curse"), "curs");});
test("cursed -> curs", function() {deepEqual( Stem("cursed"), "curs");});
test("curses -> curs", function() {deepEqual( Stem("curses"), "curs");});
test("cursies -> cursi", function() {deepEqual( Stem("cursies"), "cursi");});
test("cursing -> curs", function() {deepEqual( Stem("cursing"), "curs");});
test("cursitor -> cursitor", function() {deepEqual( Stem("cursitor"), "cursitor");});
test("cursorary -> cursorari", function() {deepEqual( Stem("cursorary"), "cursorari");});
test("cursorily -> cursorili", function() {deepEqual( Stem("cursorily"), "cursorili");});
test("curst -> curst", function() {deepEqual( Stem("curst"), "curst");});
test("curster -> curster", function() {deepEqual( Stem("curster"), "curster");});
test("curstest -> curstest", function() {deepEqual( Stem("curstest"), "curstest");});
test("curstness -> curst", function() {deepEqual( Stem("curstness"), "curst");});
test("cursy -> cursi", function() {deepEqual( Stem("cursy"), "cursi");});
test("curt -> curt", function() {deepEqual( Stem("curt"), "curt");});
test("curtail -> curtail", function() {deepEqual( Stem("curtail"), "curtail");});
test("curtailed -> curtail", function() {deepEqual( Stem("curtailed"), "curtail");});
test("curtain -> curtain", function() {deepEqual( Stem("curtain"), "curtain");});
test("curtains -> curtain", function() {deepEqual( Stem("curtains"), "curtain");});
test("curtal -> curtal", function() {deepEqual( Stem("curtal"), "curtal");});
test("curtis -> curti", function() {deepEqual( Stem("curtis"), "curti");});
test("curtle -> curtl", function() {deepEqual( Stem("curtle"), "curtl");});
test("curtsey -> curtsei", function() {deepEqual( Stem("curtsey"), "curtsei");});
test("curtseying -> curtsei", function() {deepEqual( Stem("curtseying"), "curtsei");});
test("curtseys -> curtsei", function() {deepEqual( Stem("curtseys"), "curtsei");});
test("curtsied -> curtsi", function() {deepEqual( Stem("curtsied"), "curtsi");});
test("curtsies -> curtsi", function() {deepEqual( Stem("curtsies"), "curtsi");});
test("curtsy -> curtsi", function() {deepEqual( Stem("curtsy"), "curtsi");});
test("curvet -> curvet", function() {deepEqual( Stem("curvet"), "curvet");});
test("curvets -> curvet", function() {deepEqual( Stem("curvets"), "curvet");});
test("curvetted -> curvet", function() {deepEqual( Stem("curvetted"), "curvet");});
test("curzon -> curzon", function() {deepEqual( Stem("curzon"), "curzon");});
test("cushes -> cush", function() {deepEqual( Stem("cushes"), "cush");});
test("cushion -> cushion", function() {deepEqual( Stem("cushion"), "cushion");});
test("cushions -> cushion", function() {deepEqual( Stem("cushions"), "cushion");});
test("custalorum -> custalorum", function() {deepEqual( Stem("custalorum"), "custalorum");});
test("custard -> custard", function() {deepEqual( Stem("custard"), "custard");});
test("custody -> custodi", function() {deepEqual( Stem("custody"), "custodi");});
test("custom -> custom", function() {deepEqual( Stem("custom"), "custom");});
test("customary -> customari", function() {deepEqual( Stem("customary"), "customari");});
test("customed -> custom", function() {deepEqual( Stem("customed"), "custom");});
test("customer -> custom", function() {deepEqual( Stem("customer"), "custom");});
test("customers -> custom", function() {deepEqual( Stem("customers"), "custom");});
test("customs -> custom", function() {deepEqual( Stem("customs"), "custom");});
test("custure -> custur", function() {deepEqual( Stem("custure"), "custur");});
test("cut -> cut", function() {deepEqual( Stem("cut"), "cut");});
test("cutcherry -> cutcherri", function() {deepEqual( Stem("cutcherry"), "cutcherri");});
test("cutler -> cutler", function() {deepEqual( Stem("cutler"), "cutler");});
test("cutlery -> cutleri", function() {deepEqual( Stem("cutlery"), "cutleri");});
test("cutlets -> cutlet", function() {deepEqual( Stem("cutlets"), "cutlet");});
test("cutpurse -> cutpurs", function() {deepEqual( Stem("cutpurse"), "cutpurs");});
test("cutpurses -> cutpurs", function() {deepEqual( Stem("cutpurses"), "cutpurs");});
test("cuts -> cut", function() {deepEqual( Stem("cuts"), "cut");});
test("cutsum -> cutsum", function() {deepEqual( Stem("cutsum"), "cutsum");});
test("cutter -> cutter", function() {deepEqual( Stem("cutter"), "cutter");});
test("cutting -> cut", function() {deepEqual( Stem("cutting"), "cut");});
test("cuttle -> cuttl", function() {deepEqual( Stem("cuttle"), "cuttl");});
test("cutts -> cutt", function() {deepEqual( Stem("cutts"), "cutt");});
test("cxsar -> cxsar", function() {deepEqual( Stem("cxsar"), "cxsar");});
test("cyclops -> cyclop", function() {deepEqual( Stem("cyclops"), "cyclop");});
test("cydnus -> cydnu", function() {deepEqual( Stem("cydnus"), "cydnu");});
test("cygnet -> cygnet", function() {deepEqual( Stem("cygnet"), "cygnet");});
test("cygnets -> cygnet", function() {deepEqual( Stem("cygnets"), "cygnet");});
test("cym -> cym", function() {deepEqual( Stem("cym"), "cym");});
test("cymbal -> cymbal", function() {deepEqual( Stem("cymbal"), "cymbal");});
test("cymbals -> cymbal", function() {deepEqual( Stem("cymbals"), "cymbal");});
test("cymbeline -> cymbelin", function() {deepEqual( Stem("cymbeline"), "cymbelin");});
test("cyme -> cyme", function() {deepEqual( Stem("cyme"), "cyme");});
test("cynic -> cynic", function() {deepEqual( Stem("cynic"), "cynic");});
test("cynical -> cynic", function() {deepEqual( Stem("cynical"), "cynic");});
test("cynthia -> cynthia", function() {deepEqual( Stem("cynthia"), "cynthia");});
test("cypress -> cypress", function() {deepEqual( Stem("cypress"), "cypress");});
test("cypriot -> cypriot", function() {deepEqual( Stem("cypriot"), "cypriot");});
test("cyprus -> cypru", function() {deepEqual( Stem("cyprus"), "cypru");});
test("cyrus -> cyru", function() {deepEqual( Stem("cyrus"), "cyru");});
test("cytherea -> cytherea", function() {deepEqual( Stem("cytherea"), "cytherea");});
test("d -> d", function() {deepEqual( Stem("d"), "d");});
test("dabbled -> dabbl", function() {deepEqual( Stem("dabbled"), "dabbl");});
test("dabbling -> dabbl", function() {deepEqual( Stem("dabbling"), "dabbl");});
test("dace -> dace", function() {deepEqual( Stem("dace"), "dace");});
test("dad -> dad", function() {deepEqual( Stem("dad"), "dad");});
test("daedalus -> daedalu", function() {deepEqual( Stem("daedalus"), "daedalu");});
test("daemon -> daemon", function() {deepEqual( Stem("daemon"), "daemon");});
test("daff -> daff", function() {deepEqual( Stem("daff"), "daff");});
test("daffed -> daf", function() {deepEqual( Stem("daffed"), "daf");});
test("daffest -> daffest", function() {deepEqual( Stem("daffest"), "daffest");});
test("daffodils -> daffodil", function() {deepEqual( Stem("daffodils"), "daffodil");});
test("daffy -> daffi", function() {deepEqual( Stem("daffy"), "daffi");});
test("dagger -> dagger", function() {deepEqual( Stem("dagger"), "dagger");});
test("daggers -> dagger", function() {deepEqual( Stem("daggers"), "dagger");});
test("dagonet -> dagonet", function() {deepEqual( Stem("dagonet"), "dagonet");});
test("daguilet -> daguilet", function() {deepEqual( Stem("daguilet"), "daguilet");});
test("dahlia -> dahlia", function() {deepEqual( Stem("dahlia"), "dahlia");});
test("daily -> daili", function() {deepEqual( Stem("daily"), "daili");});
test("daintier -> daintier", function() {deepEqual( Stem("daintier"), "daintier");});
test("dainties -> dainti", function() {deepEqual( Stem("dainties"), "dainti");});
test("daintiest -> daintiest", function() {deepEqual( Stem("daintiest"), "daintiest");});
test("daintily -> daintili", function() {deepEqual( Stem("daintily"), "daintili");});
test("daintiness -> dainti", function() {deepEqual( Stem("daintiness"), "dainti");});
test("daintry -> daintri", function() {deepEqual( Stem("daintry"), "daintri");});
test("dainty -> dainti", function() {deepEqual( Stem("dainty"), "dainti");});
test("daisied -> daisi", function() {deepEqual( Stem("daisied"), "daisi");});
test("daisies -> daisi", function() {deepEqual( Stem("daisies"), "daisi");});
test("daisy -> daisi", function() {deepEqual( Stem("daisy"), "daisi");});
test("dakruoen -> dakruoen", function() {deepEqual( Stem("dakruoen"), "dakruoen");});
test("dale -> dale", function() {deepEqual( Stem("dale"), "dale");});
test("dalliance -> dallianc", function() {deepEqual( Stem("dalliance"), "dallianc");});
test("dallied -> dalli", function() {deepEqual( Stem("dallied"), "dalli");});
test("dallies -> dalli", function() {deepEqual( Stem("dallies"), "dalli");});
test("dally -> dalli", function() {deepEqual( Stem("dally"), "dalli");});
test("dallying -> dalli", function() {deepEqual( Stem("dallying"), "dalli");});
test("dalmatia -> dalmatia", function() {deepEqual( Stem("dalmatia"), "dalmatia");});
test("dalmatians -> dalmatian", function() {deepEqual( Stem("dalmatians"), "dalmatian");});
test("dam -> dam", function() {deepEqual( Stem("dam"), "dam");});
test("damage -> damag", function() {deepEqual( Stem("damage"), "damag");});
test("damaged -> damag", function() {deepEqual( Stem("damaged"), "damag");});
test("damascus -> damascu", function() {deepEqual( Stem("damascus"), "damascu");});
test("damask -> damask", function() {deepEqual( Stem("damask"), "damask");});
test("damasked -> damask", function() {deepEqual( Stem("damasked"), "damask");});
test("dame -> dame", function() {deepEqual( Stem("dame"), "dame");});
test("dames -> dame", function() {deepEqual( Stem("dames"), "dame");});
test("damm -> damm", function() {deepEqual( Stem("damm"), "damm");});
test("damme -> damm", function() {deepEqual( Stem("damme"), "damm");});
test("dammy -> dammi", function() {deepEqual( Stem("dammy"), "dammi");});
test("damn -> damn", function() {deepEqual( Stem("damn"), "damn");});
test("damnable -> damnabl", function() {deepEqual( Stem("damnable"), "damnabl");});
test("damnably -> damnabl", function() {deepEqual( Stem("damnably"), "damnabl");});
test("damnation -> damnat", function() {deepEqual( Stem("damnation"), "damnat");});
test("damned -> damn", function() {deepEqual( Stem("damned"), "damn");});
test("damns -> damn", function() {deepEqual( Stem("damns"), "damn");});
test("damocles -> damocl", function() {deepEqual( Stem("damocles"), "damocl");});
test("damoiselle -> damoisel", function() {deepEqual( Stem("damoiselle"), "damoisel");});
test("damon -> damon", function() {deepEqual( Stem("damon"), "damon");});
test("damosella -> damosella", function() {deepEqual( Stem("damosella"), "damosella");});
test("damp -> damp", function() {deepEqual( Stem("damp"), "damp");});
test("damped -> damp", function() {deepEqual( Stem("damped"), "damp");});
test("dampness -> damp", function() {deepEqual( Stem("dampness"), "damp");});
test("dams -> dam", function() {deepEqual( Stem("dams"), "dam");});
test("damsel -> damsel", function() {deepEqual( Stem("damsel"), "damsel");});
test("damsons -> damson", function() {deepEqual( Stem("damsons"), "damson");});
test("dan -> dan", function() {deepEqual( Stem("dan"), "dan");});
test("danc -> danc", function() {deepEqual( Stem("danc"), "danc");});
test("dance -> danc", function() {deepEqual( Stem("dance"), "danc");});
test("danced -> danc", function() {deepEqual( Stem("danced"), "danc");});
test("dancer -> dancer", function() {deepEqual( Stem("dancer"), "dancer");});
test("dancers -> dancer", function() {deepEqual( Stem("dancers"), "dancer");});
test("dances -> danc", function() {deepEqual( Stem("dances"), "danc");});
test("dancing -> danc", function() {deepEqual( Stem("dancing"), "danc");});
test("dandies -> dandi", function() {deepEqual( Stem("dandies"), "dandi");});
test("dandified -> dandifi", function() {deepEqual( Stem("dandified"), "dandifi");});
test("dandle -> dandl", function() {deepEqual( Stem("dandle"), "dandl");});
test("dandling -> dandl", function() {deepEqual( Stem("dandling"), "dandl");});
test("dandy -> dandi", function() {deepEqual( Stem("dandy"), "dandi");});
test("dandyfied -> dandyfi", function() {deepEqual( Stem("dandyfied"), "dandyfi");});
test("dane -> dane", function() {deepEqual( Stem("dane"), "dane");});
test("dang -> dang", function() {deepEqual( Stem("dang"), "dang");});
test("danger -> danger", function() {deepEqual( Stem("danger"), "danger");});
test("dangerous -> danger", function() {deepEqual( Stem("dangerous"), "danger");});
test("dangerously -> danger", function() {deepEqual( Stem("dangerously"), "danger");});
test("dangers -> danger", function() {deepEqual( Stem("dangers"), "danger");});
test("dangled -> dangl", function() {deepEqual( Stem("dangled"), "dangl");});
test("dangling -> dangl", function() {deepEqual( Stem("dangling"), "dangl");});
test("daniel -> daniel", function() {deepEqual( Stem("daniel"), "daniel");});
test("danish -> danish", function() {deepEqual( Stem("danish"), "danish");});
test("dank -> dank", function() {deepEqual( Stem("dank"), "dank");});
test("dankish -> dankish", function() {deepEqual( Stem("dankish"), "dankish");});
test("dans -> dan", function() {deepEqual( Stem("dans"), "dan");});
test("danskers -> dansker", function() {deepEqual( Stem("danskers"), "dansker");});
test("danube -> danub", function() {deepEqual( Stem("danube"), "danub");});
test("danubian -> danubian", function() {deepEqual( Stem("danubian"), "danubian");});
test("daphne -> daphn", function() {deepEqual( Stem("daphne"), "daphn");});
test("dappled -> dappl", function() {deepEqual( Stem("dappled"), "dappl");});
test("dapples -> dappl", function() {deepEqual( Stem("dapples"), "dappl");});
test("dar -> dar", function() {deepEqual( Stem("dar"), "dar");});
test("darbyite -> darbyit", function() {deepEqual( Stem("darbyite"), "darbyit");});
test("dardan -> dardan", function() {deepEqual( Stem("dardan"), "dardan");});
test("dardanian -> dardanian", function() {deepEqual( Stem("dardanian"), "dardanian");});
test("dardanius -> dardaniu", function() {deepEqual( Stem("dardanius"), "dardaniu");});
test("dare -> dare", function() {deepEqual( Stem("dare"), "dare");});
test("dared -> dare", function() {deepEqual( Stem("dared"), "dare");});
test("daredn -> daredn", function() {deepEqual( Stem("daredn"), "daredn");});
test("dareful -> dare", function() {deepEqual( Stem("dareful"), "dare");});
test("daren -> daren", function() {deepEqual( Stem("daren"), "daren");});
test("dares -> dare", function() {deepEqual( Stem("dares"), "dare");});
test("daresay -> daresai", function() {deepEqual( Stem("daresay"), "daresai");});
test("darest -> darest", function() {deepEqual( Stem("darest"), "darest");});
test("daring -> dare", function() {deepEqual( Stem("daring"), "dare");});
test("darius -> dariu", function() {deepEqual( Stem("darius"), "dariu");});
test("dark -> dark", function() {deepEqual( Stem("dark"), "dark");});
test("darken -> darken", function() {deepEqual( Stem("darken"), "darken");});
test("darkened -> darken", function() {deepEqual( Stem("darkened"), "darken");});
test("darkening -> darken", function() {deepEqual( Stem("darkening"), "darken");});
test("darkens -> darken", function() {deepEqual( Stem("darkens"), "darken");});
test("darker -> darker", function() {deepEqual( Stem("darker"), "darker");});
test("darkest -> darkest", function() {deepEqual( Stem("darkest"), "darkest");});
test("darkling -> darkl", function() {deepEqual( Stem("darkling"), "darkl");});
test("darkly -> darkli", function() {deepEqual( Stem("darkly"), "darkli");});
test("darkness -> dark", function() {deepEqual( Stem("darkness"), "dark");});
test("darksome -> darksom", function() {deepEqual( Stem("darksome"), "darksom");});
test("darling -> darl", function() {deepEqual( Stem("darling"), "darl");});
test("darlings -> darl", function() {deepEqual( Stem("darlings"), "darl");});
test("darned -> darn", function() {deepEqual( Stem("darned"), "darn");});
test("darnel -> darnel", function() {deepEqual( Stem("darnel"), "darnel");});
test("darraign -> darraign", function() {deepEqual( Stem("darraign"), "darraign");});
test("dart -> dart", function() {deepEqual( Stem("dart"), "dart");});
test("darted -> dart", function() {deepEqual( Stem("darted"), "dart");});
test("darter -> darter", function() {deepEqual( Stem("darter"), "darter");});
test("dartford -> dartford", function() {deepEqual( Stem("dartford"), "dartford");});
test("darting -> dart", function() {deepEqual( Stem("darting"), "dart");});
test("darton -> darton", function() {deepEqual( Stem("darton"), "darton");});
test("darts -> dart", function() {deepEqual( Stem("darts"), "dart");});
test("dash -> dash", function() {deepEqual( Stem("dash"), "dash");});
test("dashed -> dash", function() {deepEqual( Stem("dashed"), "dash");});
test("dashes -> dash", function() {deepEqual( Stem("dashes"), "dash");});
test("dashing -> dash", function() {deepEqual( Stem("dashing"), "dash");});
test("dastard -> dastard", function() {deepEqual( Stem("dastard"), "dastard");});
test("dastardly -> dastardli", function() {deepEqual( Stem("dastardly"), "dastardli");});
test("dastards -> dastard", function() {deepEqual( Stem("dastards"), "dastard");});
test("dat -> dat", function() {deepEqual( Stem("dat"), "dat");});
test("datchet -> datchet", function() {deepEqual( Stem("datchet"), "datchet");});
test("date -> date", function() {deepEqual( Stem("date"), "date");});
test("dated -> date", function() {deepEqual( Stem("dated"), "date");});
test("dateless -> dateless", function() {deepEqual( Stem("dateless"), "dateless");});
test("dates -> date", function() {deepEqual( Stem("dates"), "date");});
test("daub -> daub", function() {deepEqual( Stem("daub"), "daub");});
test("daughter -> daughter", function() {deepEqual( Stem("daughter"), "daughter");});
test("daughters -> daughter", function() {deepEqual( Stem("daughters"), "daughter");});
test("daunt -> daunt", function() {deepEqual( Stem("daunt"), "daunt");});
test("daunted -> daunt", function() {deepEqual( Stem("daunted"), "daunt");});
test("dauntless -> dauntless", function() {deepEqual( Stem("dauntless"), "dauntless");});
test("dauphin -> dauphin", function() {deepEqual( Stem("dauphin"), "dauphin");});
test("dauphiness -> dauphi", function() {deepEqual( Stem("dauphiness"), "dauphi");});
test("daventry -> daventri", function() {deepEqual( Stem("daventry"), "daventri");});
test("david -> david", function() {deepEqual( Stem("david"), "david");});
test("davids -> david", function() {deepEqual( Stem("davids"), "david");});
test("davy -> davi", function() {deepEqual( Stem("davy"), "davi");});
test("daw -> daw", function() {deepEqual( Stem("daw"), "daw");});
test("dawdle -> dawdl", function() {deepEqual( Stem("dawdle"), "dawdl");});
test("dawdling -> dawdl", function() {deepEqual( Stem("dawdling"), "dawdl");});
test("dawg -> dawg", function() {deepEqual( Stem("dawg"), "dawg");});
test("dawgs -> dawg", function() {deepEqual( Stem("dawgs"), "dawg");});
test("dawn -> dawn", function() {deepEqual( Stem("dawn"), "dawn");});
test("dawned -> dawn", function() {deepEqual( Stem("dawned"), "dawn");});
test("dawning -> dawn", function() {deepEqual( Stem("dawning"), "dawn");});
test("daws -> daw", function() {deepEqual( Stem("daws"), "daw");});
test("dawson -> dawson", function() {deepEqual( Stem("dawson"), "dawson");});
test("day -> dai", function() {deepEqual( Stem("day"), "dai");});
test("daybreak -> daybreak", function() {deepEqual( Stem("daybreak"), "daybreak");});
test("daylight -> daylight", function() {deepEqual( Stem("daylight"), "daylight");});
test("days -> dai", function() {deepEqual( Stem("days"), "dai");});
test("dazzle -> dazzl", function() {deepEqual( Stem("dazzle"), "dazzl");});
test("dazzled -> dazzl", function() {deepEqual( Stem("dazzled"), "dazzl");});
test("dazzling -> dazzl", function() {deepEqual( Stem("dazzling"), "dazzl");});
test("de -> de", function() {deepEqual( Stem("de"), "de");});
test("dead -> dead", function() {deepEqual( Stem("dead"), "dead");});
test("deadened -> deaden", function() {deepEqual( Stem("deadened"), "deaden");});
test("deadliest -> deadliest", function() {deepEqual( Stem("deadliest"), "deadliest");});
test("deadly -> deadli", function() {deepEqual( Stem("deadly"), "deadli");});
test("deaf -> deaf", function() {deepEqual( Stem("deaf"), "deaf");});
test("deafing -> deaf", function() {deepEqual( Stem("deafing"), "deaf");});
test("deafness -> deaf", function() {deepEqual( Stem("deafness"), "deaf");});
test("deafs -> deaf", function() {deepEqual( Stem("deafs"), "deaf");});
test("deal -> deal", function() {deepEqual( Stem("deal"), "deal");});
test("dealer -> dealer", function() {deepEqual( Stem("dealer"), "dealer");});
test("dealers -> dealer", function() {deepEqual( Stem("dealers"), "dealer");});
test("dealest -> dealest", function() {deepEqual( Stem("dealest"), "dealest");});
test("dealing -> deal", function() {deepEqual( Stem("dealing"), "deal");});
test("dealings -> deal", function() {deepEqual( Stem("dealings"), "deal");});
test("deals -> deal", function() {deepEqual( Stem("deals"), "deal");});
test("dealt -> dealt", function() {deepEqual( Stem("dealt"), "dealt");});
test("dean -> dean", function() {deepEqual( Stem("dean"), "dean");});
test("deanery -> deaneri", function() {deepEqual( Stem("deanery"), "deaneri");});
test("deans -> dean", function() {deepEqual( Stem("deans"), "dean");});
test("dear -> dear", function() {deepEqual( Stem("dear"), "dear");});
test("deared -> dear", function() {deepEqual( Stem("deared"), "dear");});
test("dearer -> dearer", function() {deepEqual( Stem("dearer"), "dearer");});
test("dearest -> dearest", function() {deepEqual( Stem("dearest"), "dearest");});
test("dearly -> dearli", function() {deepEqual( Stem("dearly"), "dearli");});
test("dearness -> dear", function() {deepEqual( Stem("dearness"), "dear");});
test("dears -> dear", function() {deepEqual( Stem("dears"), "dear");});
test("dearth -> dearth", function() {deepEqual( Stem("dearth"), "dearth");});
test("dearths -> dearth", function() {deepEqual( Stem("dearths"), "dearth");});
test("death -> death", function() {deepEqual( Stem("death"), "death");});
test("deathbed -> deathb", function() {deepEqual( Stem("deathbed"), "deathb");});
test("deathful -> death", function() {deepEqual( Stem("deathful"), "death");});
test("deaths -> death", function() {deepEqual( Stem("deaths"), "death");});
test("deathsman -> deathsman", function() {deepEqual( Stem("deathsman"), "deathsman");});
test("deathsmen -> deathsmen", function() {deepEqual( Stem("deathsmen"), "deathsmen");});
test("debacle -> debacl", function() {deepEqual( Stem("debacle"), "debacl");});
test("debarred -> debar", function() {deepEqual( Stem("debarred"), "debar");});
test("debase -> debas", function() {deepEqual( Stem("debase"), "debas");});
test("debasement -> debas", function() {deepEqual( Stem("debasement"), "debas");});
test("debate -> debat", function() {deepEqual( Stem("debate"), "debat");});
test("debated -> debat", function() {deepEqual( Stem("debated"), "debat");});
test("debatement -> debat", function() {deepEqual( Stem("debatement"), "debat");});
test("debates -> debat", function() {deepEqual( Stem("debates"), "debat");});
test("debateth -> debateth", function() {deepEqual( Stem("debateth"), "debateth");});
test("debating -> debat", function() {deepEqual( Stem("debating"), "debat");});
test("debauch -> debauch", function() {deepEqual( Stem("debauch"), "debauch");});
test("debauched -> debauch", function() {deepEqual( Stem("debauched"), "debauch");});
test("debile -> debil", function() {deepEqual( Stem("debile"), "debil");});
test("debility -> debil", function() {deepEqual( Stem("debility"), "debil");});
test("debitor -> debitor", function() {deepEqual( Stem("debitor"), "debitor");});
test("debonair -> debonair", function() {deepEqual( Stem("debonair"), "debonair");});
test("deborah -> deborah", function() {deepEqual( Stem("deborah"), "deborah");});
test("debosh -> debosh", function() {deepEqual( Stem("debosh"), "debosh");});
test("debrett -> debrett", function() {deepEqual( Stem("debrett"), "debrett");});
test("debt -> debt", function() {deepEqual( Stem("debt"), "debt");});
test("debted -> debt", function() {deepEqual( Stem("debted"), "debt");});
test("debtor -> debtor", function() {deepEqual( Stem("debtor"), "debtor");});
test("debtors -> debtor", function() {deepEqual( Stem("debtors"), "debtor");});
test("debts -> debt", function() {deepEqual( Stem("debts"), "debt");});
test("debut -> debut", function() {deepEqual( Stem("debut"), "debut");});
test("debutante -> debutant", function() {deepEqual( Stem("debutante"), "debutant");});
test("debuty -> debuti", function() {deepEqual( Stem("debuty"), "debuti");});
test("dec -> dec", function() {deepEqual( Stem("dec"), "dec");});
test("decamp -> decamp", function() {deepEqual( Stem("decamp"), "decamp");});
test("decamped -> decamp", function() {deepEqual( Stem("decamped"), "decamp");});
test("decanter -> decant", function() {deepEqual( Stem("decanter"), "decant");});
test("decanters -> decant", function() {deepEqual( Stem("decanters"), "decant");});
test("decay -> decai", function() {deepEqual( Stem("decay"), "decai");});
test("decayed -> decai", function() {deepEqual( Stem("decayed"), "decai");});
test("decayer -> decay", function() {deepEqual( Stem("decayer"), "decay");});
test("decaying -> decai", function() {deepEqual( Stem("decaying"), "decai");});
test("decays -> decai", function() {deepEqual( Stem("decays"), "decai");});
test("deceas -> decea", function() {deepEqual( Stem("deceas"), "decea");});
test("decease -> deceas", function() {deepEqual( Stem("decease"), "deceas");});
test("deceased -> deceas", function() {deepEqual( Stem("deceased"), "deceas");});
test("deceit -> deceit", function() {deepEqual( Stem("deceit"), "deceit");});
test("deceitful -> deceit", function() {deepEqual( Stem("deceitful"), "deceit");});
test("deceits -> deceit", function() {deepEqual( Stem("deceits"), "deceit");});
test("deceiv -> deceiv", function() {deepEqual( Stem("deceiv"), "deceiv");});
test("deceivable -> deceiv", function() {deepEqual( Stem("deceivable"), "deceiv");});
test("deceive -> deceiv", function() {deepEqual( Stem("deceive"), "deceiv");});
test("deceived -> deceiv", function() {deepEqual( Stem("deceived"), "deceiv");});
test("deceiver -> deceiv", function() {deepEqual( Stem("deceiver"), "deceiv");});
test("deceivers -> deceiv", function() {deepEqual( Stem("deceivers"), "deceiv");});
test("deceives -> deceiv", function() {deepEqual( Stem("deceives"), "deceiv");});
test("deceivest -> deceivest", function() {deepEqual( Stem("deceivest"), "deceivest");});
test("deceiveth -> deceiveth", function() {deepEqual( Stem("deceiveth"), "deceiveth");});
test("deceiving -> deceiv", function() {deepEqual( Stem("deceiving"), "deceiv");});
test("december -> decemb", function() {deepEqual( Stem("december"), "decemb");});
test("decency -> decenc", function() {deepEqual( Stem("decency"), "decenc");});
test("decent -> decent", function() {deepEqual( Stem("decent"), "decent");});
test("decently -> decent", function() {deepEqual( Stem("decently"), "decent");});
test("deception -> decept", function() {deepEqual( Stem("deception"), "decept");});
test("deceptious -> decepti", function() {deepEqual( Stem("deceptious"), "decepti");});
test("decerns -> decern", function() {deepEqual( Stem("decerns"), "decern");});
test("decide -> decid", function() {deepEqual( Stem("decide"), "decid");});
test("decided -> decid", function() {deepEqual( Stem("decided"), "decid");});
test("decidedly -> decidedli", function() {deepEqual( Stem("decidedly"), "decidedli");});
test("decides -> decid", function() {deepEqual( Stem("decides"), "decid");});
test("decimation -> decim", function() {deepEqual( Stem("decimation"), "decim");});
test("decipher -> deciph", function() {deepEqual( Stem("decipher"), "deciph");});
test("deciphers -> deciph", function() {deepEqual( Stem("deciphers"), "deciph");});
test("decision -> decis", function() {deepEqual( Stem("decision"), "decis");});
test("decisive -> decis", function() {deepEqual( Stem("decisive"), "decis");});
test("decius -> deciu", function() {deepEqual( Stem("decius"), "deciu");});
test("deck -> deck", function() {deepEqual( Stem("deck"), "deck");});
test("decking -> deck", function() {deepEqual( Stem("decking"), "deck");});
test("decks -> deck", function() {deepEqual( Stem("decks"), "deck");});
test("deckt -> deckt", function() {deepEqual( Stem("deckt"), "deckt");});
test("declaration -> declar", function() {deepEqual( Stem("declaration"), "declar");});
test("declarations -> declar", function() {deepEqual( Stem("declarations"), "declar");});
test("declare -> declar", function() {deepEqual( Stem("declare"), "declar");});
test("declared -> declar", function() {deepEqual( Stem("declared"), "declar");});
test("declares -> declar", function() {deepEqual( Stem("declares"), "declar");});
test("declaring -> declar", function() {deepEqual( Stem("declaring"), "declar");});
test("declension -> declens", function() {deepEqual( Stem("declension"), "declens");});
test("declensions -> declens", function() {deepEqual( Stem("declensions"), "declens");});
test("declin -> declin", function() {deepEqual( Stem("declin"), "declin");});
test("decline -> declin", function() {deepEqual( Stem("decline"), "declin");});
test("declined -> declin", function() {deepEqual( Stem("declined"), "declin");});
test("declines -> declin", function() {deepEqual( Stem("declines"), "declin");});
test("declining -> declin", function() {deepEqual( Stem("declining"), "declin");});
test("declivity -> decliv", function() {deepEqual( Stem("declivity"), "decliv");});
test("decoct -> decoct", function() {deepEqual( Stem("decoct"), "decoct");});
test("decolletee -> decollete", function() {deepEqual( Stem("decolletee"), "decollete");});
test("decorated -> decor", function() {deepEqual( Stem("decorated"), "decor");});
test("decorating -> decor", function() {deepEqual( Stem("decorating"), "decor");});
test("decorations -> decor", function() {deepEqual( Stem("decorations"), "decor");});
test("decorous -> decor", function() {deepEqual( Stem("decorous"), "decor");});
test("decorum -> decorum", function() {deepEqual( Stem("decorum"), "decorum");});
test("decreas -> decrea", function() {deepEqual( Stem("decreas"), "decrea");});
test("decrease -> decreas", function() {deepEqual( Stem("decrease"), "decreas");});
test("decreasing -> decreas", function() {deepEqual( Stem("decreasing"), "decreas");});
test("decree -> decre", function() {deepEqual( Stem("decree"), "decre");});
test("decreed -> decre", function() {deepEqual( Stem("decreed"), "decre");});
test("decrees -> decre", function() {deepEqual( Stem("decrees"), "decre");});
test("decrepit -> decrepit", function() {deepEqual( Stem("decrepit"), "decrepit");});
test("dedicate -> dedic", function() {deepEqual( Stem("dedicate"), "dedic");});
test("dedicated -> dedic", function() {deepEqual( Stem("dedicated"), "dedic");});
test("dedicates -> dedic", function() {deepEqual( Stem("dedicates"), "dedic");});
test("dedication -> dedic", function() {deepEqual( Stem("dedication"), "dedic");});
test("dee -> dee", function() {deepEqual( Stem("dee"), "dee");});
test("deed -> deed", function() {deepEqual( Stem("deed"), "deed");});
test("deedless -> deedless", function() {deepEqual( Stem("deedless"), "deedless");});
test("deeds -> deed", function() {deepEqual( Stem("deeds"), "deed");});
test("deem -> deem", function() {deepEqual( Stem("deem"), "deem");});
test("deemed -> deem", function() {deepEqual( Stem("deemed"), "deem");});
test("deep -> deep", function() {deepEqual( Stem("deep"), "deep");});
test("deepened -> deepen", function() {deepEqual( Stem("deepened"), "deepen");});
test("deepening -> deepen", function() {deepEqual( Stem("deepening"), "deepen");});
test("deeper -> deeper", function() {deepEqual( Stem("deeper"), "deeper");});
test("deepest -> deepest", function() {deepEqual( Stem("deepest"), "deepest");});
test("deeply -> deepli", function() {deepEqual( Stem("deeply"), "deepli");});
test("deeps -> deep", function() {deepEqual( Stem("deeps"), "deep");});
test("deepvow -> deepvow", function() {deepEqual( Stem("deepvow"), "deepvow");});
test("deer -> deer", function() {deepEqual( Stem("deer"), "deer");});
test("deesse -> deess", function() {deepEqual( Stem("deesse"), "deess");});
test("defac -> defac", function() {deepEqual( Stem("defac"), "defac");});
test("deface -> defac", function() {deepEqual( Stem("deface"), "defac");});
test("defaced -> defac", function() {deepEqual( Stem("defaced"), "defac");});
test("defacer -> defac", function() {deepEqual( Stem("defacer"), "defac");});
test("defacers -> defac", function() {deepEqual( Stem("defacers"), "defac");});
test("defacing -> defac", function() {deepEqual( Stem("defacing"), "defac");});
test("defam -> defam", function() {deepEqual( Stem("defam"), "defam");});
test("default -> default", function() {deepEqual( Stem("default"), "default");});
test("defaulter -> default", function() {deepEqual( Stem("defaulter"), "default");});
test("defeat -> defeat", function() {deepEqual( Stem("defeat"), "defeat");});
test("defeated -> defeat", function() {deepEqual( Stem("defeated"), "defeat");});
test("defeats -> defeat", function() {deepEqual( Stem("defeats"), "defeat");});
test("defeatures -> defeatur", function() {deepEqual( Stem("defeatures"), "defeatur");});
test("defect -> defect", function() {deepEqual( Stem("defect"), "defect");});
test("defective -> defect", function() {deepEqual( Stem("defective"), "defect");});
test("defects -> defect", function() {deepEqual( Stem("defects"), "defect");});
test("defence -> defenc", function() {deepEqual( Stem("defence"), "defenc");});
test("defences -> defenc", function() {deepEqual( Stem("defences"), "defenc");});
test("defend -> defend", function() {deepEqual( Stem("defend"), "defend");});
test("defendant -> defend", function() {deepEqual( Stem("defendant"), "defend");});
test("defended -> defend", function() {deepEqual( Stem("defended"), "defend");});
test("defender -> defend", function() {deepEqual( Stem("defender"), "defend");});
test("defenders -> defend", function() {deepEqual( Stem("defenders"), "defend");});
test("defending -> defend", function() {deepEqual( Stem("defending"), "defend");});
test("defends -> defend", function() {deepEqual( Stem("defends"), "defend");});
test("defense -> defens", function() {deepEqual( Stem("defense"), "defens");});
test("defensible -> defens", function() {deepEqual( Stem("defensible"), "defens");});
test("defensive -> defens", function() {deepEqual( Stem("defensive"), "defens");});
test("defer -> defer", function() {deepEqual( Stem("defer"), "defer");});
test("deference -> defer", function() {deepEqual( Stem("deference"), "defer");});
test("deferential -> deferenti", function() {deepEqual( Stem("deferential"), "deferenti");});
test("deferentially -> deferenti", function() {deepEqual( Stem("deferentially"), "deferenti");});
test("deferr -> deferr", function() {deepEqual( Stem("deferr"), "deferr");});
test("defiance -> defianc", function() {deepEqual( Stem("defiance"), "defianc");});
test("deficiency -> defici", function() {deepEqual( Stem("deficiency"), "defici");});
test("deficient -> defici", function() {deepEqual( Stem("deficient"), "defici");});
test("defied -> defi", function() {deepEqual( Stem("defied"), "defi");});
test("defies -> defi", function() {deepEqual( Stem("defies"), "defi");});
test("defil -> defil", function() {deepEqual( Stem("defil"), "defil");});
test("defile -> defil", function() {deepEqual( Stem("defile"), "defil");});
test("defiler -> defil", function() {deepEqual( Stem("defiler"), "defil");});
test("defiles -> defil", function() {deepEqual( Stem("defiles"), "defil");});
test("defiling -> defil", function() {deepEqual( Stem("defiling"), "defil");});
test("define -> defin", function() {deepEqual( Stem("define"), "defin");});
test("definement -> defin", function() {deepEqual( Stem("definement"), "defin");});
test("definite -> definit", function() {deepEqual( Stem("definite"), "definit");});
test("definitive -> definit", function() {deepEqual( Stem("definitive"), "definit");});
test("definitively -> definit", function() {deepEqual( Stem("definitively"), "definit");});
test("deflow -> deflow", function() {deepEqual( Stem("deflow"), "deflow");});
test("deflower -> deflow", function() {deepEqual( Stem("deflower"), "deflow");});
test("deflowered -> deflow", function() {deepEqual( Stem("deflowered"), "deflow");});
test("deform -> deform", function() {deepEqual( Stem("deform"), "deform");});
test("deformed -> deform", function() {deepEqual( Stem("deformed"), "deform");});
test("deformities -> deform", function() {deepEqual( Stem("deformities"), "deform");});
test("deformity -> deform", function() {deepEqual( Stem("deformity"), "deform");});
test("defray -> defrai", function() {deepEqual( Stem("defray"), "defrai");});
test("defrayed -> defrai", function() {deepEqual( Stem("defrayed"), "defrai");});
test("defrays -> defrai", function() {deepEqual( Stem("defrays"), "defrai");});
test("deftly -> deftli", function() {deepEqual( Stem("deftly"), "deftli");});
test("defunct -> defunct", function() {deepEqual( Stem("defunct"), "defunct");});
test("defunction -> defunct", function() {deepEqual( Stem("defunction"), "defunct");});
test("defuse -> defus", function() {deepEqual( Stem("defuse"), "defus");});
test("defy -> defi", function() {deepEqual( Stem("defy"), "defi");});
test("defying -> defi", function() {deepEqual( Stem("defying"), "defi");});
test("degenerate -> degener", function() {deepEqual( Stem("degenerate"), "degener");});
test("degradation -> degrad", function() {deepEqual( Stem("degradation"), "degrad");});
test("degrade -> degrad", function() {deepEqual( Stem("degrade"), "degrad");});
test("degraded -> degrad", function() {deepEqual( Stem("degraded"), "degrad");});
test("degrading -> degrad", function() {deepEqual( Stem("degrading"), "degrad");});
test("degree -> degre", function() {deepEqual( Stem("degree"), "degre");});
test("degrees -> degre", function() {deepEqual( Stem("degrees"), "degre");});
test("dehors -> dehor", function() {deepEqual( Stem("dehors"), "dehor");});
test("deified -> deifi", function() {deepEqual( Stem("deified"), "deifi");});
test("deifying -> deifi", function() {deepEqual( Stem("deifying"), "deifi");});
test("deign -> deign", function() {deepEqual( Stem("deign"), "deign");});
test("deigned -> deign", function() {deepEqual( Stem("deigned"), "deign");});
test("deiphobus -> deiphobu", function() {deepEqual( Stem("deiphobus"), "deiphobu");});
test("deities -> deiti", function() {deepEqual( Stem("deities"), "deiti");});
test("deity -> deiti", function() {deepEqual( Stem("deity"), "deiti");});
test("deja -> deja", function() {deepEqual( Stem("deja"), "deja");});
test("deject -> deject", function() {deepEqual( Stem("deject"), "deject");});
test("dejected -> deject", function() {deepEqual( Stem("dejected"), "deject");});
test("dejeuner -> dejeun", function() {deepEqual( Stem("dejeuner"), "dejeun");});
test("dejeuners -> dejeun", function() {deepEqual( Stem("dejeuners"), "dejeun");});
test("delabreth -> delabreth", function() {deepEqual( Stem("delabreth"), "delabreth");});
test("delamere -> delamer", function() {deepEqual( Stem("delamere"), "delamer");});
test("delay -> delai", function() {deepEqual( Stem("delay"), "delai");});
test("delayed -> delai", function() {deepEqual( Stem("delayed"), "delai");});
test("delaying -> delai", function() {deepEqual( Stem("delaying"), "delai");});
test("delays -> delai", function() {deepEqual( Stem("delays"), "delai");});
test("delectable -> delect", function() {deepEqual( Stem("delectable"), "delect");});
test("delectation -> delect", function() {deepEqual( Stem("delectation"), "delect");});
test("deleterious -> deleteri", function() {deepEqual( Stem("deleterious"), "deleteri");});
test("deliberate -> deliber", function() {deepEqual( Stem("deliberate"), "deliber");});
test("delicacies -> delicaci", function() {deepEqual( Stem("delicacies"), "delicaci");});
test("delicacy -> delicaci", function() {deepEqual( Stem("delicacy"), "delicaci");});
test("delicate -> delic", function() {deepEqual( Stem("delicate"), "delic");});
test("delicately -> delic", function() {deepEqual( Stem("delicately"), "delic");});
test("delicates -> delic", function() {deepEqual( Stem("delicates"), "delic");});
test("delicious -> delici", function() {deepEqual( Stem("delicious"), "delici");});
test("deliciousness -> delici", function() {deepEqual( Stem("deliciousness"), "delici");});
test("delight -> delight", function() {deepEqual( Stem("delight"), "delight");});
test("delighted -> delight", function() {deepEqual( Stem("delighted"), "delight");});
test("delightful -> delight", function() {deepEqual( Stem("delightful"), "delight");});
test("delightfully -> delightfulli", function() {deepEqual( Stem("delightfully"), "delightfulli");});
test("delighting -> delight", function() {deepEqual( Stem("delighting"), "delight");});
test("delights -> delight", function() {deepEqual( Stem("delights"), "delight");});
test("delilah -> delilah", function() {deepEqual( Stem("delilah"), "delilah");});
test("delinquents -> delinqu", function() {deepEqual( Stem("delinquents"), "delinqu");});
test("delirious -> deliri", function() {deepEqual( Stem("delirious"), "deliri");});
test("delirium -> delirium", function() {deepEqual( Stem("delirium"), "delirium");});
test("deliv -> deliv", function() {deepEqual( Stem("deliv"), "deliv");});
test("deliver -> deliv", function() {deepEqual( Stem("deliver"), "deliv");});
test("deliverance -> deliver", function() {deepEqual( Stem("deliverance"), "deliver");});
test("delivered -> deliv", function() {deepEqual( Stem("delivered"), "deliv");});
test("delivering -> deliv", function() {deepEqual( Stem("delivering"), "deliv");});
test("delivers -> deliv", function() {deepEqual( Stem("delivers"), "deliv");});
test("delivery -> deliveri", function() {deepEqual( Stem("delivery"), "deliveri");});
test("della -> della", function() {deepEqual( Stem("della"), "della");});
test("deloighted -> deloight", function() {deepEqual( Stem("deloighted"), "deloight");});
test("delphos -> delpho", function() {deepEqual( Stem("delphos"), "delpho");});
test("deluded -> delud", function() {deepEqual( Stem("deluded"), "delud");});
test("deluding -> delud", function() {deepEqual( Stem("deluding"), "delud");});
test("deluge -> delug", function() {deepEqual( Stem("deluge"), "delug");});
test("deluged -> delug", function() {deepEqual( Stem("deluged"), "delug");});
test("delusion -> delus", function() {deepEqual( Stem("delusion"), "delus");});
test("delve -> delv", function() {deepEqual( Stem("delve"), "delv");});
test("delver -> delver", function() {deepEqual( Stem("delver"), "delver");});
test("delves -> delv", function() {deepEqual( Stem("delves"), "delv");});
test("dem -> dem", function() {deepEqual( Stem("dem"), "dem");});
test("demagogue -> demagogu", function() {deepEqual( Stem("demagogue"), "demagogu");});
test("demand -> demand", function() {deepEqual( Stem("demand"), "demand");});
test("demanded -> demand", function() {deepEqual( Stem("demanded"), "demand");});
test("demanding -> demand", function() {deepEqual( Stem("demanding"), "demand");});
test("demands -> demand", function() {deepEqual( Stem("demands"), "demand");});
test("demean -> demean", function() {deepEqual( Stem("demean"), "demean");});
test("demeaned -> demean", function() {deepEqual( Stem("demeaned"), "demean");});
test("demeanor -> demeanor", function() {deepEqual( Stem("demeanor"), "demeanor");});
test("demeanour -> demeanour", function() {deepEqual( Stem("demeanour"), "demeanour");});
test("demerara -> demerara", function() {deepEqual( Stem("demerara"), "demerara");});
test("demerits -> demerit", function() {deepEqual( Stem("demerits"), "demerit");});
test("demesnes -> demesn", function() {deepEqual( Stem("demesnes"), "demesn");});
test("demetrius -> demetriu", function() {deepEqual( Stem("demetrius"), "demetriu");});
test("demi -> demi", function() {deepEqual( Stem("demi"), "demi");});
test("demigod -> demigod", function() {deepEqual( Stem("demigod"), "demigod");});
test("demireps -> demirep", function() {deepEqual( Stem("demireps"), "demirep");});
test("demise -> demis", function() {deepEqual( Stem("demise"), "demis");});
test("demmy -> demmi", function() {deepEqual( Stem("demmy"), "demmi");});
test("demoiselles -> demoisel", function() {deepEqual( Stem("demoiselles"), "demoisel");});
test("demon -> demon", function() {deepEqual( Stem("demon"), "demon");});
test("demoniacal -> demoniac", function() {deepEqual( Stem("demoniacal"), "demoniac");});
test("demonstrable -> demonstr", function() {deepEqual( Stem("demonstrable"), "demonstr");});
test("demonstrate -> demonstr", function() {deepEqual( Stem("demonstrate"), "demonstr");});
test("demonstrated -> demonstr", function() {deepEqual( Stem("demonstrated"), "demonstr");});
test("demonstrating -> demonstr", function() {deepEqual( Stem("demonstrating"), "demonstr");});
test("demonstration -> demonstr", function() {deepEqual( Stem("demonstration"), "demonstr");});
test("demonstrations -> demonstr", function() {deepEqual( Stem("demonstrations"), "demonstr");});
test("demonstrative -> demonstr", function() {deepEqual( Stem("demonstrative"), "demonstr");});
test("demure -> demur", function() {deepEqual( Stem("demure"), "demur");});
test("demurely -> demur", function() {deepEqual( Stem("demurely"), "demur");});
test("demuring -> demur", function() {deepEqual( Stem("demuring"), "demur");});
test("den -> den", function() {deepEqual( Stem("den"), "den");});
test("denay -> denai", function() {deepEqual( Stem("denay"), "denai");});
test("deni -> deni", function() {deepEqual( Stem("deni"), "deni");});
test("denial -> denial", function() {deepEqual( Stem("denial"), "denial");});
test("denials -> denial", function() {deepEqual( Stem("denials"), "denial");});
test("denied -> deni", function() {deepEqual( Stem("denied"), "deni");});
test("denier -> denier", function() {deepEqual( Stem("denier"), "denier");});
test("denies -> deni", function() {deepEqual( Stem("denies"), "deni");});
test("deniest -> deniest", function() {deepEqual( Stem("deniest"), "deniest");});
test("denis -> deni", function() {deepEqual( Stem("denis"), "deni");});
test("denmark -> denmark", function() {deepEqual( Stem("denmark"), "denmark");});
test("dennis -> denni", function() {deepEqual( Stem("dennis"), "denni");});
test("denny -> denni", function() {deepEqual( Stem("denny"), "denni");});
test("denominated -> denomin", function() {deepEqual( Stem("denominated"), "denomin");});
test("denote -> denot", function() {deepEqual( Stem("denote"), "denot");});
test("denoted -> denot", function() {deepEqual( Stem("denoted"), "denot");});
test("denotement -> denot", function() {deepEqual( Stem("denotement"), "denot");});
test("denounc -> denounc", function() {deepEqual( Stem("denounc"), "denounc");});
test("denounce -> denounc", function() {deepEqual( Stem("denounce"), "denounc");});
test("denouncing -> denounc", function() {deepEqual( Stem("denouncing"), "denounc");});
test("dens -> den", function() {deepEqual( Stem("dens"), "den");});
test("denunciation -> denunci", function() {deepEqual( Stem("denunciation"), "denunci");});
test("denunciations -> denunci", function() {deepEqual( Stem("denunciations"), "denunci");});
test("deny -> deni", function() {deepEqual( Stem("deny"), "deni");});
test("denying -> deni", function() {deepEqual( Stem("denying"), "deni");});
test("deo -> deo", function() {deepEqual( Stem("deo"), "deo");});
test("depart -> depart", function() {deepEqual( Stem("depart"), "depart");});
test("departed -> depart", function() {deepEqual( Stem("departed"), "depart");});
test("departest -> departest", function() {deepEqual( Stem("departest"), "departest");});
test("departing -> depart", function() {deepEqual( Stem("departing"), "depart");});
test("departs -> depart", function() {deepEqual( Stem("departs"), "depart");});
test("departure -> departur", function() {deepEqual( Stem("departure"), "departur");});
test("depeche -> depech", function() {deepEqual( Stem("depeche"), "depech");});
test("depend -> depend", function() {deepEqual( Stem("depend"), "depend");});
test("dependant -> depend", function() {deepEqual( Stem("dependant"), "depend");});
test("dependants -> depend", function() {deepEqual( Stem("dependants"), "depend");});
test("depended -> depend", function() {deepEqual( Stem("depended"), "depend");});
test("dependence -> depend", function() {deepEqual( Stem("dependence"), "depend");});
test("dependences -> depend", function() {deepEqual( Stem("dependences"), "depend");});
test("dependency -> depend", function() {deepEqual( Stem("dependency"), "depend");});
test("dependent -> depend", function() {deepEqual( Stem("dependent"), "depend");});
test("dependents -> depend", function() {deepEqual( Stem("dependents"), "depend");});
test("depender -> depend", function() {deepEqual( Stem("depender"), "depend");});
test("depending -> depend", function() {deepEqual( Stem("depending"), "depend");});
test("depends -> depend", function() {deepEqual( Stem("depends"), "depend");});
test("depict -> depict", function() {deepEqual( Stem("depict"), "depict");});
test("depicted -> depict", function() {deepEqual( Stem("depicted"), "depict");});
test("deplorable -> deplor", function() {deepEqual( Stem("deplorable"), "deplor");});
test("deplore -> deplor", function() {deepEqual( Stem("deplore"), "deplor");});
test("deplored -> deplor", function() {deepEqual( Stem("deplored"), "deplor");});
test("deploring -> deplor", function() {deepEqual( Stem("deploring"), "deplor");});
test("depopulate -> depopul", function() {deepEqual( Stem("depopulate"), "depopul");});
test("deportment -> deport", function() {deepEqual( Stem("deportment"), "deport");});
test("depos -> depo", function() {deepEqual( Stem("depos"), "depo");});
test("depose -> depos", function() {deepEqual( Stem("depose"), "depos");});
test("deposed -> depos", function() {deepEqual( Stem("deposed"), "depos");});
test("deposing -> depos", function() {deepEqual( Stem("deposing"), "depos");});
test("depositaries -> depositari", function() {deepEqual( Stem("depositaries"), "depositari");});
test("deposited -> deposit", function() {deepEqual( Stem("deposited"), "deposit");});
test("depot -> depot", function() {deepEqual( Stem("depot"), "depot");});
test("depots -> depot", function() {deepEqual( Stem("depots"), "depot");});
test("deprav -> deprav", function() {deepEqual( Stem("deprav"), "deprav");});
test("depravation -> deprav", function() {deepEqual( Stem("depravation"), "deprav");});
test("deprave -> deprav", function() {deepEqual( Stem("deprave"), "deprav");});
test("depraved -> deprav", function() {deepEqual( Stem("depraved"), "deprav");});
test("depraves -> deprav", function() {deepEqual( Stem("depraves"), "deprav");});
test("deprecate -> deprec", function() {deepEqual( Stem("deprecate"), "deprec");});
test("deprecatingly -> deprecatingli", function() {deepEqual( Stem("deprecatingly"), "deprecatingli");});
test("deprecatory -> deprecatori", function() {deepEqual( Stem("deprecatory"), "deprecatori");});
test("depress -> depress", function() {deepEqual( Stem("depress"), "depress");});
test("depressed -> depress", function() {deepEqual( Stem("depressed"), "depress");});
test("depression -> depress", function() {deepEqual( Stem("depression"), "depress");});
test("depriv -> depriv", function() {deepEqual( Stem("depriv"), "depriv");});
test("deprive -> depriv", function() {deepEqual( Stem("deprive"), "depriv");});
test("deprived -> depriv", function() {deepEqual( Stem("deprived"), "depriv");});
test("depth -> depth", function() {deepEqual( Stem("depth"), "depth");});
test("depths -> depth", function() {deepEqual( Stem("depths"), "depth");});
test("deputation -> deput", function() {deepEqual( Stem("deputation"), "deput");});
test("depute -> deput", function() {deepEqual( Stem("depute"), "deput");});
test("deputed -> deput", function() {deepEqual( Stem("deputed"), "deput");});
test("deputies -> deputi", function() {deepEqual( Stem("deputies"), "deputi");});
test("deputing -> deput", function() {deepEqual( Stem("deputing"), "deput");});
test("deputy -> deputi", function() {deepEqual( Stem("deputy"), "deputi");});
test("der -> der", function() {deepEqual( Stem("der"), "der");});
test("deracinate -> deracin", function() {deepEqual( Stem("deracinate"), "deracin");});
test("derby -> derbi", function() {deepEqual( Stem("derby"), "derbi");});
test("dercetas -> derceta", function() {deepEqual( Stem("dercetas"), "derceta");});
test("dere -> dere", function() {deepEqual( Stem("dere"), "dere");});
test("derides -> derid", function() {deepEqual( Stem("derides"), "derid");});
test("derision -> deris", function() {deepEqual( Stem("derision"), "deris");});
test("deriv -> deriv", function() {deepEqual( Stem("deriv"), "deriv");});
test("derivation -> deriv", function() {deepEqual( Stem("derivation"), "deriv");});
test("derivative -> deriv", function() {deepEqual( Stem("derivative"), "deriv");});
test("derive -> deriv", function() {deepEqual( Stem("derive"), "deriv");});
test("derived -> deriv", function() {deepEqual( Stem("derived"), "deriv");});
test("derives -> deriv", function() {deepEqual( Stem("derives"), "deriv");});
test("derogate -> derog", function() {deepEqual( Stem("derogate"), "derog");});
test("derogately -> derog", function() {deepEqual( Stem("derogately"), "derog");});
test("derogation -> derog", function() {deepEqual( Stem("derogation"), "derog");});
test("des -> de", function() {deepEqual( Stem("des"), "de");});
test("desartless -> desartless", function() {deepEqual( Stem("desartless"), "desartless");});
test("descant -> descant", function() {deepEqual( Stem("descant"), "descant");});
test("descanted -> descant", function() {deepEqual( Stem("descanted"), "descant");});
test("descanting -> descant", function() {deepEqual( Stem("descanting"), "descant");});
test("descend -> descend", function() {deepEqual( Stem("descend"), "descend");});
test("descendant -> descend", function() {deepEqual( Stem("descendant"), "descend");});
test("descended -> descend", function() {deepEqual( Stem("descended"), "descend");});
test("descending -> descend", function() {deepEqual( Stem("descending"), "descend");});
test("descends -> descend", function() {deepEqual( Stem("descends"), "descend");});
test("descension -> descens", function() {deepEqual( Stem("descension"), "descens");});
test("descent -> descent", function() {deepEqual( Stem("descent"), "descent");});
test("descents -> descent", function() {deepEqual( Stem("descents"), "descent");});
test("describe -> describ", function() {deepEqual( Stem("describe"), "describ");});
test("described -> describ", function() {deepEqual( Stem("described"), "describ");});
test("describes -> describ", function() {deepEqual( Stem("describes"), "describ");});
test("describing -> describ", function() {deepEqual( Stem("describing"), "describ");});
test("descried -> descri", function() {deepEqual( Stem("descried"), "descri");});
test("description -> descript", function() {deepEqual( Stem("description"), "descript");});
test("descriptions -> descript", function() {deepEqual( Stem("descriptions"), "descript");});
test("descry -> descri", function() {deepEqual( Stem("descry"), "descri");});
test("desdemon -> desdemon", function() {deepEqual( Stem("desdemon"), "desdemon");});
test("desdemona -> desdemona", function() {deepEqual( Stem("desdemona"), "desdemona");});
test("desecration -> desecr", function() {deepEqual( Stem("desecration"), "desecr");});
test("desert -> desert", function() {deepEqual( Stem("desert"), "desert");});
test("deserted -> desert", function() {deepEqual( Stem("deserted"), "desert");});
test("desertion -> desert", function() {deepEqual( Stem("desertion"), "desert");});
test("deserts -> desert", function() {deepEqual( Stem("deserts"), "desert");});
test("deserv -> deserv", function() {deepEqual( Stem("deserv"), "deserv");});
test("deserve -> deserv", function() {deepEqual( Stem("deserve"), "deserv");});
test("deserved -> deserv", function() {deepEqual( Stem("deserved"), "deserv");});
test("deservedly -> deservedli", function() {deepEqual( Stem("deservedly"), "deservedli");});
test("deserver -> deserv", function() {deepEqual( Stem("deserver"), "deserv");});
test("deservers -> deserv", function() {deepEqual( Stem("deservers"), "deserv");});
test("deserves -> deserv", function() {deepEqual( Stem("deserves"), "deserv");});
test("deservest -> deservest", function() {deepEqual( Stem("deservest"), "deservest");});
test("deserving -> deserv", function() {deepEqual( Stem("deserving"), "deserv");});
test("deservings -> deserv", function() {deepEqual( Stem("deservings"), "deserv");});
test("desideratum -> desideratum", function() {deepEqual( Stem("desideratum"), "desideratum");});
test("design -> design", function() {deepEqual( Stem("design"), "design");});
test("designing -> design", function() {deepEqual( Stem("designing"), "design");});
test("designment -> design", function() {deepEqual( Stem("designment"), "design");});
test("designments -> design", function() {deepEqual( Stem("designments"), "design");});
test("designs -> design", function() {deepEqual( Stem("designs"), "design");});
test("desir -> desir", function() {deepEqual( Stem("desir"), "desir");});
test("desirable -> desir", function() {deepEqual( Stem("desirable"), "desir");});
test("desire -> desir", function() {deepEqual( Stem("desire"), "desir");});
test("desired -> desir", function() {deepEqual( Stem("desired"), "desir");});
test("desirers -> desir", function() {deepEqual( Stem("desirers"), "desir");});
test("desires -> desir", function() {deepEqual( Stem("desires"), "desir");});
test("desirest -> desirest", function() {deepEqual( Stem("desirest"), "desirest");});
test("desiring -> desir", function() {deepEqual( Stem("desiring"), "desir");});
test("desirous -> desir", function() {deepEqual( Stem("desirous"), "desir");});
test("desist -> desist", function() {deepEqual( Stem("desist"), "desist");});
test("desisted -> desist", function() {deepEqual( Stem("desisted"), "desist");});
test("desk -> desk", function() {deepEqual( Stem("desk"), "desk");});
test("desks -> desk", function() {deepEqual( Stem("desks"), "desk");});
test("desolate -> desol", function() {deepEqual( Stem("desolate"), "desol");});
test("desolation -> desol", function() {deepEqual( Stem("desolation"), "desol");});
test("desp -> desp", function() {deepEqual( Stem("desp"), "desp");});
test("despair -> despair", function() {deepEqual( Stem("despair"), "despair");});
test("despaired -> despair", function() {deepEqual( Stem("despaired"), "despair");});
test("despairing -> despair", function() {deepEqual( Stem("despairing"), "despair");});
test("despairs -> despair", function() {deepEqual( Stem("despairs"), "despair");});
test("despatch -> despatch", function() {deepEqual( Stem("despatch"), "despatch");});
test("despatched -> despatch", function() {deepEqual( Stem("despatched"), "despatch");});
test("despatches -> despatch", function() {deepEqual( Stem("despatches"), "despatch");});
test("desperate -> desper", function() {deepEqual( Stem("desperate"), "desper");});
test("desperately -> desper", function() {deepEqual( Stem("desperately"), "desper");});
test("desperation -> desper", function() {deepEqual( Stem("desperation"), "desper");});
test("despicable -> despic", function() {deepEqual( Stem("despicable"), "despic");});
test("despis -> despi", function() {deepEqual( Stem("despis"), "despi");});
test("despise -> despis", function() {deepEqual( Stem("despise"), "despis");});
test("despised -> despis", function() {deepEqual( Stem("despised"), "despis");});
test("despiser -> despis", function() {deepEqual( Stem("despiser"), "despis");});
test("despises -> despis", function() {deepEqual( Stem("despises"), "despis");});
test("despiseth -> despiseth", function() {deepEqual( Stem("despiseth"), "despiseth");});
test("despising -> despis", function() {deepEqual( Stem("despising"), "despis");});
test("despite -> despit", function() {deepEqual( Stem("despite"), "despit");});
test("despiteful -> despit", function() {deepEqual( Stem("despiteful"), "despit");});
test("despoiled -> despoil", function() {deepEqual( Stem("despoiled"), "despoil");});
test("despond -> despond", function() {deepEqual( Stem("despond"), "despond");});
test("despondency -> despond", function() {deepEqual( Stem("despondency"), "despond");});
test("despondent -> despond", function() {deepEqual( Stem("despondent"), "despond");});
test("desponding -> despond", function() {deepEqual( Stem("desponding"), "despond");});
test("despotism -> despot", function() {deepEqual( Stem("despotism"), "despot");});
test("despots -> despot", function() {deepEqual( Stem("despots"), "despot");});
test("dessert -> dessert", function() {deepEqual( Stem("dessert"), "dessert");});
test("dest -> dest", function() {deepEqual( Stem("dest"), "dest");});
test("destin -> destin", function() {deepEqual( Stem("destin"), "destin");});
test("destination -> destin", function() {deepEqual( Stem("destination"), "destin");});
test("destinations -> destin", function() {deepEqual( Stem("destinations"), "destin");});
test("destined -> destin", function() {deepEqual( Stem("destined"), "destin");});
test("destinies -> destini", function() {deepEqual( Stem("destinies"), "destini");});
test("destiny -> destini", function() {deepEqual( Stem("destiny"), "destini");});
test("destitute -> destitut", function() {deepEqual( Stem("destitute"), "destitut");});
test("destroy -> destroi", function() {deepEqual( Stem("destroy"), "destroi");});
test("destroyed -> destroi", function() {deepEqual( Stem("destroyed"), "destroi");});
test("destroyer -> destroy", function() {deepEqual( Stem("destroyer"), "destroy");});
test("destroyers -> destroy", function() {deepEqual( Stem("destroyers"), "destroy");});
test("destroying -> destroi", function() {deepEqual( Stem("destroying"), "destroi");});
test("destroys -> destroi", function() {deepEqual( Stem("destroys"), "destroi");});
test("destruction -> destruct", function() {deepEqual( Stem("destruction"), "destruct");});
test("destructions -> destruct", function() {deepEqual( Stem("destructions"), "destruct");});
test("det -> det", function() {deepEqual( Stem("det"), "det");});
test("detachment -> detach", function() {deepEqual( Stem("detachment"), "detach");});
test("details -> detail", function() {deepEqual( Stem("details"), "detail");});
test("detain -> detain", function() {deepEqual( Stem("detain"), "detain");});
test("detained -> detain", function() {deepEqual( Stem("detained"), "detain");});
test("detaining -> detain", function() {deepEqual( Stem("detaining"), "detain");});
test("detains -> detain", function() {deepEqual( Stem("detains"), "detain");});
test("detect -> detect", function() {deepEqual( Stem("detect"), "detect");});
test("detected -> detect", function() {deepEqual( Stem("detected"), "detect");});
test("detecting -> detect", function() {deepEqual( Stem("detecting"), "detect");});
test("detection -> detect", function() {deepEqual( Stem("detection"), "detect");});
test("detector -> detector", function() {deepEqual( Stem("detector"), "detector");});
test("detects -> detect", function() {deepEqual( Stem("detects"), "detect");});
test("detention -> detent", function() {deepEqual( Stem("detention"), "detent");});
test("deterioration -> deterior", function() {deepEqual( Stem("deterioration"), "deterior");});
test("determin -> determin", function() {deepEqual( Stem("determin"), "determin");});
test("determinate -> determin", function() {deepEqual( Stem("determinate"), "determin");});
test("determination -> determin", function() {deepEqual( Stem("determination"), "determin");});
test("determinations -> determin", function() {deepEqual( Stem("determinations"), "determin");});
test("determine -> determin", function() {deepEqual( Stem("determine"), "determin");});
test("determined -> determin", function() {deepEqual( Stem("determined"), "determin");});
test("determines -> determin", function() {deepEqual( Stem("determines"), "determin");});
test("determining -> determin", function() {deepEqual( Stem("determining"), "determin");});
test("detest -> detest", function() {deepEqual( Stem("detest"), "detest");});
test("detestable -> detest", function() {deepEqual( Stem("detestable"), "detest");});
test("detested -> detest", function() {deepEqual( Stem("detested"), "detest");});
test("detesting -> detest", function() {deepEqual( Stem("detesting"), "detest");});
test("detests -> detest", function() {deepEqual( Stem("detests"), "detest");});
test("dethroned -> dethron", function() {deepEqual( Stem("dethroned"), "dethron");});
test("detract -> detract", function() {deepEqual( Stem("detract"), "detract");});
test("detraction -> detract", function() {deepEqual( Stem("detraction"), "detract");});
test("detractions -> detract", function() {deepEqual( Stem("detractions"), "detract");});
test("detriment -> detriment", function() {deepEqual( Stem("detriment"), "detriment");});
test("dettes -> dett", function() {deepEqual( Stem("dettes"), "dett");});
test("deucalion -> deucalion", function() {deepEqual( Stem("deucalion"), "deucalion");});
test("deuce -> deuc", function() {deepEqual( Stem("deuce"), "deuc");});
test("deuceace -> deuceac", function() {deepEqual( Stem("deuceace"), "deuceac");});
test("deuced -> deuc", function() {deepEqual( Stem("deuced"), "deuc");});
test("deuces -> deuc", function() {deepEqual( Stem("deuces"), "deuc");});
test("deum -> deum", function() {deepEqual( Stem("deum"), "deum");});
test("deux -> deux", function() {deepEqual( Stem("deux"), "deux");});
test("dev -> dev", function() {deepEqual( Stem("dev"), "dev");});
test("devant -> devant", function() {deepEqual( Stem("devant"), "devant");});
test("development -> develop", function() {deepEqual( Stem("development"), "develop");});
test("devereux -> devereux", function() {deepEqual( Stem("devereux"), "devereux");});
test("devesting -> devest", function() {deepEqual( Stem("devesting"), "devest");});
test("device -> devic", function() {deepEqual( Stem("device"), "devic");});
test("devices -> devic", function() {deepEqual( Stem("devices"), "devic");});
test("devil -> devil", function() {deepEqual( Stem("devil"), "devil");});
test("devilish -> devilish", function() {deepEqual( Stem("devilish"), "devilish");});
test("devilled -> devil", function() {deepEqual( Stem("devilled"), "devil");});
test("devils -> devil", function() {deepEqual( Stem("devils"), "devil");});
test("devis -> devi", function() {deepEqual( Stem("devis"), "devi");});
test("devise -> devis", function() {deepEqual( Stem("devise"), "devis");});
test("devised -> devis", function() {deepEqual( Stem("devised"), "devis");});
test("devises -> devis", function() {deepEqual( Stem("devises"), "devis");});
test("devising -> devis", function() {deepEqual( Stem("devising"), "devis");});
test("devlish -> devlish", function() {deepEqual( Stem("devlish"), "devlish");});
test("devoid -> devoid", function() {deepEqual( Stem("devoid"), "devoid");});
test("devolved -> devolv", function() {deepEqual( Stem("devolved"), "devolv");});
test("devonshire -> devonshir", function() {deepEqual( Stem("devonshire"), "devonshir");});
test("devote -> devot", function() {deepEqual( Stem("devote"), "devot");});
test("devoted -> devot", function() {deepEqual( Stem("devoted"), "devot");});
test("devotedness -> devoted", function() {deepEqual( Stem("devotedness"), "devoted");});
test("devotion -> devot", function() {deepEqual( Stem("devotion"), "devot");});
test("devotional -> devot", function() {deepEqual( Stem("devotional"), "devot");});
test("devotions -> devot", function() {deepEqual( Stem("devotions"), "devot");});
test("devour -> devour", function() {deepEqual( Stem("devour"), "devour");});
test("devoured -> devour", function() {deepEqual( Stem("devoured"), "devour");});
test("devourers -> devour", function() {deepEqual( Stem("devourers"), "devour");});
test("devouring -> devour", function() {deepEqual( Stem("devouring"), "devour");});
test("devours -> devour", function() {deepEqual( Stem("devours"), "devour");});
test("devout -> devout", function() {deepEqual( Stem("devout"), "devout");});
test("devoutly -> devoutli", function() {deepEqual( Stem("devoutly"), "devoutli");});
test("devrient -> devrient", function() {deepEqual( Stem("devrient"), "devrient");});
test("dew -> dew", function() {deepEqual( Stem("dew"), "dew");});
test("dewberries -> dewberri", function() {deepEqual( Stem("dewberries"), "dewberri");});
test("dewdrops -> dewdrop", function() {deepEqual( Stem("dewdrops"), "dewdrop");});
test("dewlap -> dewlap", function() {deepEqual( Stem("dewlap"), "dewlap");});
test("dewlapp -> dewlapp", function() {deepEqual( Stem("dewlapp"), "dewlapp");});
test("dews -> dew", function() {deepEqual( Stem("dews"), "dew");});
test("dewy -> dewi", function() {deepEqual( Stem("dewy"), "dewi");});
test("dexter -> dexter", function() {deepEqual( Stem("dexter"), "dexter");});
test("dexteriously -> dexteri", function() {deepEqual( Stem("dexteriously"), "dexteri");});
test("dexterity -> dexter", function() {deepEqual( Stem("dexterity"), "dexter");});
test("dexterous -> dexter", function() {deepEqual( Stem("dexterous"), "dexter");});
test("dexterously -> dexter", function() {deepEqual( Stem("dexterously"), "dexter");});
test("di -> di", function() {deepEqual( Stem("di"), "di");});
test("diable -> diabl", function() {deepEqual( Stem("diable"), "diabl");});
test("diablo -> diablo", function() {deepEqual( Stem("diablo"), "diablo");});
test("diabolically -> diabol", function() {deepEqual( Stem("diabolically"), "diabol");});
test("diadem -> diadem", function() {deepEqual( Stem("diadem"), "diadem");});
test("dial -> dial", function() {deepEqual( Stem("dial"), "dial");});
test("dialect -> dialect", function() {deepEqual( Stem("dialect"), "dialect");});
test("dialogue -> dialogu", function() {deepEqual( Stem("dialogue"), "dialogu");});
test("dialogued -> dialogu", function() {deepEqual( Stem("dialogued"), "dialogu");});
test("dialogues -> dialogu", function() {deepEqual( Stem("dialogues"), "dialogu");});
test("dials -> dial", function() {deepEqual( Stem("dials"), "dial");});
test("diameter -> diamet", function() {deepEqual( Stem("diameter"), "diamet");});
test("diamond -> diamond", function() {deepEqual( Stem("diamond"), "diamond");});
test("diamonds -> diamond", function() {deepEqual( Stem("diamonds"), "diamond");});
test("dian -> dian", function() {deepEqual( Stem("dian"), "dian");});
test("diana -> diana", function() {deepEqual( Stem("diana"), "diana");});
test("diaper -> diaper", function() {deepEqual( Stem("diaper"), "diaper");});
test("dib -> dib", function() {deepEqual( Stem("dib"), "dib");});
test("dibble -> dibbl", function() {deepEqual( Stem("dibble"), "dibbl");});
test("dic -> dic", function() {deepEqual( Stem("dic"), "dic");});
test("dice -> dice", function() {deepEqual( Stem("dice"), "dice");});
test("dicers -> dicer", function() {deepEqual( Stem("dicers"), "dicer");});
test("dich -> dich", function() {deepEqual( Stem("dich"), "dich");});
test("dick -> dick", function() {deepEqual( Stem("dick"), "dick");});
test("dickens -> dicken", function() {deepEqual( Stem("dickens"), "dicken");});
test("dickon -> dickon", function() {deepEqual( Stem("dickon"), "dickon");});
test("dicky -> dicki", function() {deepEqual( Stem("dicky"), "dicki");});
test("dictate -> dictat", function() {deepEqual( Stem("dictate"), "dictat");});
test("dictated -> dictat", function() {deepEqual( Stem("dictated"), "dictat");});
test("dictates -> dictat", function() {deepEqual( Stem("dictates"), "dictat");});
test("dictation -> dictat", function() {deepEqual( Stem("dictation"), "dictat");});
test("dictator -> dictat", function() {deepEqual( Stem("dictator"), "dictat");});
test("diction -> diction", function() {deepEqual( Stem("diction"), "diction");});
test("dictionaries -> dictionari", function() {deepEqual( Stem("dictionaries"), "dictionari");});
test("dictionary -> dictionari", function() {deepEqual( Stem("dictionary"), "dictionari");});
test("dictynna -> dictynna", function() {deepEqual( Stem("dictynna"), "dictynna");});
test("did -> did", function() {deepEqual( Stem("did"), "did");});
test("diddle -> diddl", function() {deepEqual( Stem("diddle"), "diddl");});
test("diddlesex -> diddlesex", function() {deepEqual( Stem("diddlesex"), "diddlesex");});
test("didelot -> didelot", function() {deepEqual( Stem("didelot"), "didelot");});
test("didest -> didest", function() {deepEqual( Stem("didest"), "didest");});
test("didn -> didn", function() {deepEqual( Stem("didn"), "didn");});
test("dido -> dido", function() {deepEqual( Stem("dido"), "dido");});
test("didst -> didst", function() {deepEqual( Stem("didst"), "didst");});
test("die -> die", function() {deepEqual( Stem("die"), "die");});
test("died -> di", function() {deepEqual( Stem("died"), "di");});
test("diedst -> diedst", function() {deepEqual( Stem("diedst"), "diedst");});
test("dieppe -> diepp", function() {deepEqual( Stem("dieppe"), "diepp");});
test("dies -> di", function() {deepEqual( Stem("dies"), "di");});
test("diest -> diest", function() {deepEqual( Stem("diest"), "diest");});
test("diet -> diet", function() {deepEqual( Stem("diet"), "diet");});
test("dieted -> diet", function() {deepEqual( Stem("dieted"), "diet");});
test("dieter -> dieter", function() {deepEqual( Stem("dieter"), "dieter");});
test("dieu -> dieu", function() {deepEqual( Stem("dieu"), "dieu");});
test("diff -> diff", function() {deepEqual( Stem("diff"), "diff");});
test("differ -> differ", function() {deepEqual( Stem("differ"), "differ");});
test("differed -> differ", function() {deepEqual( Stem("differed"), "differ");});
test("difference -> differ", function() {deepEqual( Stem("difference"), "differ");});
test("differences -> differ", function() {deepEqual( Stem("differences"), "differ");});
test("differency -> differ", function() {deepEqual( Stem("differency"), "differ");});
test("different -> differ", function() {deepEqual( Stem("different"), "differ");});
test("differing -> differ", function() {deepEqual( Stem("differing"), "differ");});
test("differs -> differ", function() {deepEqual( Stem("differs"), "differ");});
test("difficile -> difficil", function() {deepEqual( Stem("difficile"), "difficil");});
test("difficult -> difficult", function() {deepEqual( Stem("difficult"), "difficult");});
test("difficulties -> difficulti", function() {deepEqual( Stem("difficulties"), "difficulti");});
test("difficulty -> difficulti", function() {deepEqual( Stem("difficulty"), "difficulti");});
test("diffidence -> diffid", function() {deepEqual( Stem("diffidence"), "diffid");});
test("diffidences -> diffid", function() {deepEqual( Stem("diffidences"), "diffid");});
test("diffident -> diffid", function() {deepEqual( Stem("diffident"), "diffid");});
test("diffus -> diffu", function() {deepEqual( Stem("diffus"), "diffu");});
test("diffused -> diffus", function() {deepEqual( Stem("diffused"), "diffus");});
test("diffusest -> diffusest", function() {deepEqual( Stem("diffusest"), "diffusest");});
test("dig -> dig", function() {deepEqual( Stem("dig"), "dig");});
test("digest -> digest", function() {deepEqual( Stem("digest"), "digest");});
test("digested -> digest", function() {deepEqual( Stem("digested"), "digest");});
test("digestion -> digest", function() {deepEqual( Stem("digestion"), "digest");});
test("digestions -> digest", function() {deepEqual( Stem("digestions"), "digest");});
test("digg -> digg", function() {deepEqual( Stem("digg"), "digg");});
test("digging -> dig", function() {deepEqual( Stem("digging"), "dig");});
test("dighton -> dighton", function() {deepEqual( Stem("dighton"), "dighton");});
test("dignified -> dignifi", function() {deepEqual( Stem("dignified"), "dignifi");});
test("dignifies -> dignifi", function() {deepEqual( Stem("dignifies"), "dignifi");});
test("dignify -> dignifi", function() {deepEqual( Stem("dignify"), "dignifi");});
test("dignitaries -> dignitari", function() {deepEqual( Stem("dignitaries"), "dignitari");});
test("dignitary -> dignitari", function() {deepEqual( Stem("dignitary"), "dignitari");});
test("dignities -> digniti", function() {deepEqual( Stem("dignities"), "digniti");});
test("dignity -> digniti", function() {deepEqual( Stem("dignity"), "digniti");});
test("digress -> digress", function() {deepEqual( Stem("digress"), "digress");});
test("digressing -> digress", function() {deepEqual( Stem("digressing"), "digress");});
test("digression -> digress", function() {deepEqual( Stem("digression"), "digress");});
test("digressions -> digress", function() {deepEqual( Stem("digressions"), "digress");});
test("digs -> dig", function() {deepEqual( Stem("digs"), "dig");});
test("digt -> digt", function() {deepEqual( Stem("digt"), "digt");});
test("dike -> dike", function() {deepEqual( Stem("dike"), "dike");});
test("dilapidated -> dilapid", function() {deepEqual( Stem("dilapidated"), "dilapid");});
test("dilate -> dilat", function() {deepEqual( Stem("dilate"), "dilat");});
test("dilated -> dilat", function() {deepEqual( Stem("dilated"), "dilat");});
test("dilations -> dilat", function() {deepEqual( Stem("dilations"), "dilat");});
test("dilatory -> dilatori", function() {deepEqual( Stem("dilatory"), "dilatori");});
test("dild -> dild", function() {deepEqual( Stem("dild"), "dild");});
test("dildos -> dildo", function() {deepEqual( Stem("dildos"), "dildo");});
test("dilemma -> dilemma", function() {deepEqual( Stem("dilemma"), "dilemma");});
test("dilemmas -> dilemma", function() {deepEqual( Stem("dilemmas"), "dilemma");});
test("diligence -> dilig", function() {deepEqual( Stem("diligence"), "dilig");});
test("diligent -> dilig", function() {deepEqual( Stem("diligent"), "dilig");});
test("diluculo -> diluculo", function() {deepEqual( Stem("diluculo"), "diluculo");});
test("dim -> dim", function() {deepEqual( Stem("dim"), "dim");});
test("dimension -> dimens", function() {deepEqual( Stem("dimension"), "dimens");});
test("dimensions -> dimens", function() {deepEqual( Stem("dimensions"), "dimens");});
test("diminish -> diminish", function() {deepEqual( Stem("diminish"), "diminish");});
test("diminished -> diminish", function() {deepEqual( Stem("diminished"), "diminish");});
test("diminishing -> diminish", function() {deepEqual( Stem("diminishing"), "diminish");});
test("diminution -> diminut", function() {deepEqual( Stem("diminution"), "diminut");});
test("diminutive -> diminut", function() {deepEqual( Stem("diminutive"), "diminut");});
test("diminutives -> diminut", function() {deepEqual( Stem("diminutives"), "diminut");});
test("dimity -> dimiti", function() {deepEqual( Stem("dimity"), "dimiti");});
test("dimm -> dimm", function() {deepEqual( Stem("dimm"), "dimm");});
test("dimmed -> dim", function() {deepEqual( Stem("dimmed"), "dim");});
test("dimming -> dim", function() {deepEqual( Stem("dimming"), "dim");});
test("dimpled -> dimpl", function() {deepEqual( Stem("dimpled"), "dimpl");});
test("dimples -> dimpl", function() {deepEqual( Stem("dimples"), "dimpl");});
test("dims -> dim", function() {deepEqual( Stem("dims"), "dim");});
test("din -> din", function() {deepEqual( Stem("din"), "din");});
test("dine -> dine", function() {deepEqual( Stem("dine"), "dine");});
test("dined -> dine", function() {deepEqual( Stem("dined"), "dine");});
test("diner -> diner", function() {deepEqual( Stem("diner"), "diner");});
test("dines -> dine", function() {deepEqual( Stem("dines"), "dine");});
test("ding -> ding", function() {deepEqual( Stem("ding"), "ding");});
test("dingy -> dingi", function() {deepEqual( Stem("dingy"), "dingi");});
test("dining -> dine", function() {deepEqual( Stem("dining"), "dine");});
test("dinner -> dinner", function() {deepEqual( Stem("dinner"), "dinner");});
test("dinners -> dinner", function() {deepEqual( Stem("dinners"), "dinner");});
test("dinnertime -> dinnertim", function() {deepEqual( Stem("dinnertime"), "dinnertim");});
test("dint -> dint", function() {deepEqual( Stem("dint"), "dint");});
test("diogenes -> diogen", function() {deepEqual( Stem("diogenes"), "diogen");});
test("diomed -> diom", function() {deepEqual( Stem("diomed"), "diom");});
test("diomede -> diomed", function() {deepEqual( Stem("diomede"), "diomed");});
test("diomedes -> diomed", function() {deepEqual( Stem("diomedes"), "diomed");});
test("dion -> dion", function() {deepEqual( Stem("dion"), "dion");});
test("dip -> dip", function() {deepEqual( Stem("dip"), "dip");});
test("dipley -> diplei", function() {deepEqual( Stem("dipley"), "diplei");});
test("diplomacy -> diplomaci", function() {deepEqual( Stem("diplomacy"), "diplomaci");});
test("diplomatic -> diplomat", function() {deepEqual( Stem("diplomatic"), "diplomat");});
test("diplomatist -> diplomatist", function() {deepEqual( Stem("diplomatist"), "diplomatist");});
test("diplomatists -> diplomatist", function() {deepEqual( Stem("diplomatists"), "diplomatist");});
test("dipp -> dipp", function() {deepEqual( Stem("dipp"), "dipp");});
test("dipping -> dip", function() {deepEqual( Stem("dipping"), "dip");});
test("dips -> dip", function() {deepEqual( Stem("dips"), "dip");});
test("dir -> dir", function() {deepEqual( Stem("dir"), "dir");});
test("dire -> dire", function() {deepEqual( Stem("dire"), "dire");});
test("direct -> direct", function() {deepEqual( Stem("direct"), "direct");});
test("directed -> direct", function() {deepEqual( Stem("directed"), "direct");});
test("directing -> direct", function() {deepEqual( Stem("directing"), "direct");});
test("direction -> direct", function() {deepEqual( Stem("direction"), "direct");});
test("directions -> direct", function() {deepEqual( Stem("directions"), "direct");});
test("directitude -> directitud", function() {deepEqual( Stem("directitude"), "directitud");});
test("directive -> direct", function() {deepEqual( Stem("directive"), "direct");});
test("directly -> directli", function() {deepEqual( Stem("directly"), "directli");});
test("director -> director", function() {deepEqual( Stem("director"), "director");});
test("directs -> direct", function() {deepEqual( Stem("directs"), "direct");});
test("direful -> dire", function() {deepEqual( Stem("direful"), "dire");});
test("direfully -> direfulli", function() {deepEqual( Stem("direfully"), "direfulli");});
test("direly -> dire", function() {deepEqual( Stem("direly"), "dire");});
test("direness -> dire", function() {deepEqual( Stem("direness"), "dire");});
test("direst -> direst", function() {deepEqual( Stem("direst"), "direst");});
test("dirge -> dirg", function() {deepEqual( Stem("dirge"), "dirg");});
test("dirges -> dirg", function() {deepEqual( Stem("dirges"), "dirg");});
test("dirt -> dirt", function() {deepEqual( Stem("dirt"), "dirt");});
test("dirty -> dirti", function() {deepEqual( Stem("dirty"), "dirti");});
test("dis -> di", function() {deepEqual( Stem("dis"), "di");});
test("disability -> disabl", function() {deepEqual( Stem("disability"), "disabl");});
test("disable -> disabl", function() {deepEqual( Stem("disable"), "disabl");});
test("disabled -> disabl", function() {deepEqual( Stem("disabled"), "disabl");});
test("disabling -> disabl", function() {deepEqual( Stem("disabling"), "disabl");});
test("disadvantage -> disadvantag", function() {deepEqual( Stem("disadvantage"), "disadvantag");});
test("disaffected -> disaffect", function() {deepEqual( Stem("disaffected"), "disaffect");});
test("disagree -> disagre", function() {deepEqual( Stem("disagree"), "disagre");});
test("disagreeable -> disagre", function() {deepEqual( Stem("disagreeable"), "disagre");});
test("disagreeing -> disagre", function() {deepEqual( Stem("disagreeing"), "disagre");});
test("disallow -> disallow", function() {deepEqual( Stem("disallow"), "disallow");});
test("disanimates -> disanim", function() {deepEqual( Stem("disanimates"), "disanim");});
test("disannul -> disannul", function() {deepEqual( Stem("disannul"), "disannul");});
test("disannuls -> disannul", function() {deepEqual( Stem("disannuls"), "disannul");});
test("disappear -> disappear", function() {deepEqual( Stem("disappear"), "disappear");});
test("disappeared -> disappear", function() {deepEqual( Stem("disappeared"), "disappear");});
test("disappears -> disappear", function() {deepEqual( Stem("disappears"), "disappear");});
test("disappointed -> disappoint", function() {deepEqual( Stem("disappointed"), "disappoint");});
test("disappointment -> disappoint", function() {deepEqual( Stem("disappointment"), "disappoint");});
test("disappointments -> disappoint", function() {deepEqual( Stem("disappointments"), "disappoint");});
test("disarm -> disarm", function() {deepEqual( Stem("disarm"), "disarm");});
test("disarmed -> disarm", function() {deepEqual( Stem("disarmed"), "disarm");});
test("disarmeth -> disarmeth", function() {deepEqual( Stem("disarmeth"), "disarmeth");});
test("disarms -> disarm", function() {deepEqual( Stem("disarms"), "disarm");});
test("disarrangement -> disarrang", function() {deepEqual( Stem("disarrangement"), "disarrang");});
test("disaster -> disast", function() {deepEqual( Stem("disaster"), "disast");});
test("disasters -> disast", function() {deepEqual( Stem("disasters"), "disast");});
test("disastrous -> disastr", function() {deepEqual( Stem("disastrous"), "disastr");});
test("disbench -> disbench", function() {deepEqual( Stem("disbench"), "disbench");});
test("disbranch -> disbranch", function() {deepEqual( Stem("disbranch"), "disbranch");});
test("disburdened -> disburden", function() {deepEqual( Stem("disburdened"), "disburden");});
test("disburs -> disbur", function() {deepEqual( Stem("disburs"), "disbur");});
test("disburse -> disburs", function() {deepEqual( Stem("disburse"), "disburs");});
test("disbursed -> disburs", function() {deepEqual( Stem("disbursed"), "disburs");});
test("disburthening -> disburthen", function() {deepEqual( Stem("disburthening"), "disburthen");});
test("discandy -> discandi", function() {deepEqual( Stem("discandy"), "discandi");});
test("discandying -> discandi", function() {deepEqual( Stem("discandying"), "discandi");});
test("discard -> discard", function() {deepEqual( Stem("discard"), "discard");});
test("discarded -> discard", function() {deepEqual( Stem("discarded"), "discard");});
test("discase -> discas", function() {deepEqual( Stem("discase"), "discas");});
test("discased -> discas", function() {deepEqual( Stem("discased"), "discas");});
test("discern -> discern", function() {deepEqual( Stem("discern"), "discern");});
test("discerner -> discern", function() {deepEqual( Stem("discerner"), "discern");});
test("discerning -> discern", function() {deepEqual( Stem("discerning"), "discern");});
test("discernings -> discern", function() {deepEqual( Stem("discernings"), "discern");});
test("discernment -> discern", function() {deepEqual( Stem("discernment"), "discern");});
test("discerns -> discern", function() {deepEqual( Stem("discerns"), "discern");});
test("discharg -> discharg", function() {deepEqual( Stem("discharg"), "discharg");});
test("discharge -> discharg", function() {deepEqual( Stem("discharge"), "discharg");});
test("discharged -> discharg", function() {deepEqual( Stem("discharged"), "discharg");});
test("discharging -> discharg", function() {deepEqual( Stem("discharging"), "discharg");});
test("disciple -> discipl", function() {deepEqual( Stem("disciple"), "discipl");});
test("discipled -> discipl", function() {deepEqual( Stem("discipled"), "discipl");});
test("disciples -> discipl", function() {deepEqual( Stem("disciples"), "discipl");});
test("disciplin -> disciplin", function() {deepEqual( Stem("disciplin"), "disciplin");});
test("discipline -> disciplin", function() {deepEqual( Stem("discipline"), "disciplin");});
test("disciplined -> disciplin", function() {deepEqual( Stem("disciplined"), "disciplin");});
test("disciplines -> disciplin", function() {deepEqual( Stem("disciplines"), "disciplin");});
test("disclaim -> disclaim", function() {deepEqual( Stem("disclaim"), "disclaim");});
test("disclaiming -> disclaim", function() {deepEqual( Stem("disclaiming"), "disclaim");});
test("disclaims -> disclaim", function() {deepEqual( Stem("disclaims"), "disclaim");});
test("disclos -> disclo", function() {deepEqual( Stem("disclos"), "disclo");});
test("disclose -> disclos", function() {deepEqual( Stem("disclose"), "disclos");});
test("disclosed -> disclos", function() {deepEqual( Stem("disclosed"), "disclos");});
test("discloses -> disclos", function() {deepEqual( Stem("discloses"), "disclos");});
test("discolour -> discolour", function() {deepEqual( Stem("discolour"), "discolour");});
test("discoloured -> discolour", function() {deepEqual( Stem("discoloured"), "discolour");});
test("discolours -> discolour", function() {deepEqual( Stem("discolours"), "discolour");});
test("discomfit -> discomfit", function() {deepEqual( Stem("discomfit"), "discomfit");});
test("discomfited -> discomfit", function() {deepEqual( Stem("discomfited"), "discomfit");});
test("discomfiture -> discomfitur", function() {deepEqual( Stem("discomfiture"), "discomfitur");});
test("discomfort -> discomfort", function() {deepEqual( Stem("discomfort"), "discomfort");});
test("discomfortable -> discomfort", function() {deepEqual( Stem("discomfortable"), "discomfort");});
test("discommend -> discommend", function() {deepEqual( Stem("discommend"), "discommend");});
test("discomposed -> discompos", function() {deepEqual( Stem("discomposed"), "discompos");});
test("disconcerted -> disconcert", function() {deepEqual( Stem("disconcerted"), "disconcert");});
test("disconsolate -> disconsol", function() {deepEqual( Stem("disconsolate"), "disconsol");});
test("disconsolately -> disconsol", function() {deepEqual( Stem("disconsolately"), "disconsol");});
test("discontent -> discont", function() {deepEqual( Stem("discontent"), "discont");});
test("discontented -> discont", function() {deepEqual( Stem("discontented"), "discont");});
test("discontentedly -> discontentedli", function() {deepEqual( Stem("discontentedly"), "discontentedli");});
test("discontenting -> discont", function() {deepEqual( Stem("discontenting"), "discont");});
test("discontents -> discont", function() {deepEqual( Stem("discontents"), "discont");});
test("discontinue -> discontinu", function() {deepEqual( Stem("discontinue"), "discontinu");});
test("discontinued -> discontinu", function() {deepEqual( Stem("discontinued"), "discontinu");});
test("discord -> discord", function() {deepEqual( Stem("discord"), "discord");});
test("discordant -> discord", function() {deepEqual( Stem("discordant"), "discord");});
test("discorded -> discord", function() {deepEqual( Stem("discorded"), "discord");});
test("discords -> discord", function() {deepEqual( Stem("discords"), "discord");});
test("discounts -> discount", function() {deepEqual( Stem("discounts"), "discount");});
test("discourse -> discours", function() {deepEqual( Stem("discourse"), "discours");});
test("discoursed -> discours", function() {deepEqual( Stem("discoursed"), "discours");});
test("discourser -> discours", function() {deepEqual( Stem("discourser"), "discours");});
test("discourses -> discours", function() {deepEqual( Stem("discourses"), "discours");});
test("discoursing -> discours", function() {deepEqual( Stem("discoursing"), "discours");});
test("discoursive -> discours", function() {deepEqual( Stem("discoursive"), "discours");});
test("discourtesy -> discourtesi", function() {deepEqual( Stem("discourtesy"), "discourtesi");});
test("discov -> discov", function() {deepEqual( Stem("discov"), "discov");});
test("discover -> discov", function() {deepEqual( Stem("discover"), "discov");});
test("discovered -> discov", function() {deepEqual( Stem("discovered"), "discov");});
test("discoverer -> discover", function() {deepEqual( Stem("discoverer"), "discover");});
test("discoverers -> discover", function() {deepEqual( Stem("discoverers"), "discover");});
test("discoveries -> discoveri", function() {deepEqual( Stem("discoveries"), "discoveri");});
test("discovering -> discov", function() {deepEqual( Stem("discovering"), "discov");});
test("discovers -> discov", function() {deepEqual( Stem("discovers"), "discov");});
test("discovery -> discoveri", function() {deepEqual( Stem("discovery"), "discoveri");});
test("discredit -> discredit", function() {deepEqual( Stem("discredit"), "discredit");});
test("discreditable -> discredit", function() {deepEqual( Stem("discreditable"), "discredit");});
test("discredited -> discredit", function() {deepEqual( Stem("discredited"), "discredit");});
test("discredits -> discredit", function() {deepEqual( Stem("discredits"), "discredit");});
test("discreet -> discreet", function() {deepEqual( Stem("discreet"), "discreet");});
test("discreetly -> discreetli", function() {deepEqual( Stem("discreetly"), "discreetli");});
test("discretion -> discret", function() {deepEqual( Stem("discretion"), "discret");});
test("discretions -> discret", function() {deepEqual( Stem("discretions"), "discret");});
test("discriminating -> discrimin", function() {deepEqual( Stem("discriminating"), "discrimin");});
test("discrimination -> discrimin", function() {deepEqual( Stem("discrimination"), "discrimin");});
test("discuss -> discuss", function() {deepEqual( Stem("discuss"), "discuss");});
test("discussed -> discuss", function() {deepEqual( Stem("discussed"), "discuss");});
test("discussing -> discuss", function() {deepEqual( Stem("discussing"), "discuss");});
test("discussions -> discuss", function() {deepEqual( Stem("discussions"), "discuss");});
test("disdain -> disdain", function() {deepEqual( Stem("disdain"), "disdain");});
test("disdained -> disdain", function() {deepEqual( Stem("disdained"), "disdain");});
test("disdaineth -> disdaineth", function() {deepEqual( Stem("disdaineth"), "disdaineth");});
test("disdainful -> disdain", function() {deepEqual( Stem("disdainful"), "disdain");});
test("disdainfully -> disdainfulli", function() {deepEqual( Stem("disdainfully"), "disdainfulli");});
test("disdaining -> disdain", function() {deepEqual( Stem("disdaining"), "disdain");});
test("disdains -> disdain", function() {deepEqual( Stem("disdains"), "disdain");});
test("disdnguish -> disdnguish", function() {deepEqual( Stem("disdnguish"), "disdnguish");});
test("diseas -> disea", function() {deepEqual( Stem("diseas"), "disea");});
test("disease -> diseas", function() {deepEqual( Stem("disease"), "diseas");});
test("diseased -> diseas", function() {deepEqual( Stem("diseased"), "diseas");});
test("diseases -> diseas", function() {deepEqual( Stem("diseases"), "diseas");});
test("disedg -> disedg", function() {deepEqual( Stem("disedg"), "disedg");});
test("disembark -> disembark", function() {deepEqual( Stem("disembark"), "disembark");});
test("disenchanted -> disench", function() {deepEqual( Stem("disenchanted"), "disench");});
test("disengage -> disengag", function() {deepEqual( Stem("disengage"), "disengag");});
test("disengaged -> disengag", function() {deepEqual( Stem("disengaged"), "disengag");});
test("disfavour -> disfavour", function() {deepEqual( Stem("disfavour"), "disfavour");});
test("disfigure -> disfigur", function() {deepEqual( Stem("disfigure"), "disfigur");});
test("disfigured -> disfigur", function() {deepEqual( Stem("disfigured"), "disfigur");});
test("disfurnish -> disfurnish", function() {deepEqual( Stem("disfurnish"), "disfurnish");});
test("disgorge -> disgorg", function() {deepEqual( Stem("disgorge"), "disgorg");});
test("disgrac -> disgrac", function() {deepEqual( Stem("disgrac"), "disgrac");});
test("disgrace -> disgrac", function() {deepEqual( Stem("disgrace"), "disgrac");});
test("disgraced -> disgrac", function() {deepEqual( Stem("disgraced"), "disgrac");});
test("disgraceful -> disgrac", function() {deepEqual( Stem("disgraceful"), "disgrac");});
test("disgraces -> disgrac", function() {deepEqual( Stem("disgraces"), "disgrac");});
test("disgracing -> disgrac", function() {deepEqual( Stem("disgracing"), "disgrac");});
test("disgracious -> disgraci", function() {deepEqual( Stem("disgracious"), "disgraci");});
test("disguis -> disgui", function() {deepEqual( Stem("disguis"), "disgui");});
test("disguise -> disguis", function() {deepEqual( Stem("disguise"), "disguis");});
test("disguised -> disguis", function() {deepEqual( Stem("disguised"), "disguis");});
test("disguiser -> disguis", function() {deepEqual( Stem("disguiser"), "disguis");});
test("disguises -> disguis", function() {deepEqual( Stem("disguises"), "disguis");});
test("disguising -> disguis", function() {deepEqual( Stem("disguising"), "disguis");});
test("disgust -> disgust", function() {deepEqual( Stem("disgust"), "disgust");});
test("dish -> dish", function() {deepEqual( Stem("dish"), "dish");});
test("dishabited -> dishabit", function() {deepEqual( Stem("dishabited"), "dishabit");});
test("dishclout -> dishclout", function() {deepEqual( Stem("dishclout"), "dishclout");});
test("dishearten -> dishearten", function() {deepEqual( Stem("dishearten"), "dishearten");});
test("disheartening -> dishearten", function() {deepEqual( Stem("disheartening"), "dishearten");});
test("disheartens -> dishearten", function() {deepEqual( Stem("disheartens"), "dishearten");});
test("dished -> dish", function() {deepEqual( Stem("dished"), "dish");});
test("dishes -> dish", function() {deepEqual( Stem("dishes"), "dish");});
test("dishevelled -> dishevel", function() {deepEqual( Stem("dishevelled"), "dishevel");});
test("dishonest -> dishonest", function() {deepEqual( Stem("dishonest"), "dishonest");});
test("dishonestly -> dishonestli", function() {deepEqual( Stem("dishonestly"), "dishonestli");});
test("dishonesty -> dishonesti", function() {deepEqual( Stem("dishonesty"), "dishonesti");});
test("dishonor -> dishonor", function() {deepEqual( Stem("dishonor"), "dishonor");});
test("dishonorable -> dishonor", function() {deepEqual( Stem("dishonorable"), "dishonor");});
test("dishonors -> dishonor", function() {deepEqual( Stem("dishonors"), "dishonor");});
test("dishonour -> dishonour", function() {deepEqual( Stem("dishonour"), "dishonour");});
test("dishonourable -> dishonour", function() {deepEqual( Stem("dishonourable"), "dishonour");});
test("dishonoured -> dishonour", function() {deepEqual( Stem("dishonoured"), "dishonour");});
test("dishonours -> dishonour", function() {deepEqual( Stem("dishonours"), "dishonour");});
test("disinclined -> disinclin", function() {deepEqual( Stem("disinclined"), "disinclin");});
test("disinherit -> disinherit", function() {deepEqual( Stem("disinherit"), "disinherit");});
test("disinherited -> disinherit", function() {deepEqual( Stem("disinherited"), "disinherit");});
test("disinheriting -> disinherit", function() {deepEqual( Stem("disinheriting"), "disinherit");});
test("disinterested -> disinterest", function() {deepEqual( Stem("disinterested"), "disinterest");});
test("disjoin -> disjoin", function() {deepEqual( Stem("disjoin"), "disjoin");});
test("disjoining -> disjoin", function() {deepEqual( Stem("disjoining"), "disjoin");});
test("disjoins -> disjoin", function() {deepEqual( Stem("disjoins"), "disjoin");});
test("disjoint -> disjoint", function() {deepEqual( Stem("disjoint"), "disjoint");});
test("disjunction -> disjunct", function() {deepEqual( Stem("disjunction"), "disjunct");});
test("dislik -> dislik", function() {deepEqual( Stem("dislik"), "dislik");});
test("dislike -> dislik", function() {deepEqual( Stem("dislike"), "dislik");});
test("disliked -> dislik", function() {deepEqual( Stem("disliked"), "dislik");});
test("disliken -> disliken", function() {deepEqual( Stem("disliken"), "disliken");});
test("dislikes -> dislik", function() {deepEqual( Stem("dislikes"), "dislik");});
test("disliking -> dislik", function() {deepEqual( Stem("disliking"), "dislik");});
test("dislimns -> dislimn", function() {deepEqual( Stem("dislimns"), "dislimn");});
test("dislocate -> disloc", function() {deepEqual( Stem("dislocate"), "disloc");});
test("dislodg -> dislodg", function() {deepEqual( Stem("dislodg"), "dislodg");});
test("dislodge -> dislodg", function() {deepEqual( Stem("dislodge"), "dislodg");});
test("dislodged -> dislodg", function() {deepEqual( Stem("dislodged"), "dislodg");});
test("disloyal -> disloy", function() {deepEqual( Stem("disloyal"), "disloy");});
test("disloyalty -> disloyalti", function() {deepEqual( Stem("disloyalty"), "disloyalti");});
test("dismal -> dismal", function() {deepEqual( Stem("dismal"), "dismal");});
test("dismallest -> dismallest", function() {deepEqual( Stem("dismallest"), "dismallest");});
test("dismally -> dismal", function() {deepEqual( Stem("dismally"), "dismal");});
test("dismantle -> dismantl", function() {deepEqual( Stem("dismantle"), "dismantl");});
test("dismantled -> dismantl", function() {deepEqual( Stem("dismantled"), "dismantl");});
test("dismask -> dismask", function() {deepEqual( Stem("dismask"), "dismask");});
test("dismay -> dismai", function() {deepEqual( Stem("dismay"), "dismai");});
test("dismayed -> dismai", function() {deepEqual( Stem("dismayed"), "dismai");});
test("dismemb -> dismemb", function() {deepEqual( Stem("dismemb"), "dismemb");});
test("dismember -> dismemb", function() {deepEqual( Stem("dismember"), "dismemb");});
test("dismes -> dism", function() {deepEqual( Stem("dismes"), "dism");});
test("dismiss -> dismiss", function() {deepEqual( Stem("dismiss"), "dismiss");});
test("dismissal -> dismiss", function() {deepEqual( Stem("dismissal"), "dismiss");});
test("dismissals -> dismiss", function() {deepEqual( Stem("dismissals"), "dismiss");});
test("dismissed -> dismiss", function() {deepEqual( Stem("dismissed"), "dismiss");});
test("dismissing -> dismiss", function() {deepEqual( Stem("dismissing"), "dismiss");});
test("dismission -> dismiss", function() {deepEqual( Stem("dismission"), "dismiss");});
test("dismount -> dismount", function() {deepEqual( Stem("dismount"), "dismount");});
test("dismounted -> dismount", function() {deepEqual( Stem("dismounted"), "dismount");});
test("disnatur -> disnatur", function() {deepEqual( Stem("disnatur"), "disnatur");});
test("disobedience -> disobedi", function() {deepEqual( Stem("disobedience"), "disobedi");});
test("disobedient -> disobedi", function() {deepEqual( Stem("disobedient"), "disobedi");});
test("disobey -> disobei", function() {deepEqual( Stem("disobey"), "disobei");});
test("disobeyed -> disobei", function() {deepEqual( Stem("disobeyed"), "disobei");});
test("disobeys -> disobei", function() {deepEqual( Stem("disobeys"), "disobei");});
test("disorb -> disorb", function() {deepEqual( Stem("disorb"), "disorb");});
test("disorder -> disord", function() {deepEqual( Stem("disorder"), "disord");});
test("disordered -> disord", function() {deepEqual( Stem("disordered"), "disord");});
test("disorderly -> disorderli", function() {deepEqual( Stem("disorderly"), "disorderli");});
test("disorders -> disord", function() {deepEqual( Stem("disorders"), "disord");});
test("disorganised -> disorganis", function() {deepEqual( Stem("disorganised"), "disorganis");});
test("disown -> disown", function() {deepEqual( Stem("disown"), "disown");});
test("disowned -> disown", function() {deepEqual( Stem("disowned"), "disown");});
test("disowns -> disown", function() {deepEqual( Stem("disowns"), "disown");});
test("disparage -> disparag", function() {deepEqual( Stem("disparage"), "disparag");});
test("disparagement -> disparag", function() {deepEqual( Stem("disparagement"), "disparag");});
test("disparagements -> disparag", function() {deepEqual( Stem("disparagements"), "disparag");});
test("dispark -> dispark", function() {deepEqual( Stem("dispark"), "dispark");});
test("dispatch -> dispatch", function() {deepEqual( Stem("dispatch"), "dispatch");});
test("dispatched -> dispatch", function() {deepEqual( Stem("dispatched"), "dispatch");});
test("dispatches -> dispatch", function() {deepEqual( Stem("dispatches"), "dispatch");});
test("dispatching -> dispatch", function() {deepEqual( Stem("dispatching"), "dispatch");});
test("dispensation -> dispens", function() {deepEqual( Stem("dispensation"), "dispens");});
test("dispense -> dispens", function() {deepEqual( Stem("dispense"), "dispens");});
test("dispenses -> dispens", function() {deepEqual( Stem("dispenses"), "dispens");});
test("dispers -> disper", function() {deepEqual( Stem("dispers"), "disper");});
test("disperse -> dispers", function() {deepEqual( Stem("disperse"), "dispers");});
test("dispersed -> dispers", function() {deepEqual( Stem("dispersed"), "dispers");});
test("dispersedly -> dispersedli", function() {deepEqual( Stem("dispersedly"), "dispersedli");});
test("dispersing -> dispers", function() {deepEqual( Stem("dispersing"), "dispers");});
test("dispiteous -> dispit", function() {deepEqual( Stem("dispiteous"), "dispit");});
test("displac -> displac", function() {deepEqual( Stem("displac"), "displac");});
test("displace -> displac", function() {deepEqual( Stem("displace"), "displac");});
test("displaced -> displac", function() {deepEqual( Stem("displaced"), "displac");});
test("displant -> displant", function() {deepEqual( Stem("displant"), "displant");});
test("displanting -> displant", function() {deepEqual( Stem("displanting"), "displant");});
test("display -> displai", function() {deepEqual( Stem("display"), "displai");});
test("displayed -> displai", function() {deepEqual( Stem("displayed"), "displai");});
test("displaying -> displai", function() {deepEqual( Stem("displaying"), "displai");});
test("displeas -> displea", function() {deepEqual( Stem("displeas"), "displea");});
test("displease -> displeas", function() {deepEqual( Stem("displease"), "displeas");});
test("displeased -> displeas", function() {deepEqual( Stem("displeased"), "displeas");});
test("displeasing -> displeas", function() {deepEqual( Stem("displeasing"), "displeas");});
test("displeasure -> displeasur", function() {deepEqual( Stem("displeasure"), "displeasur");});
test("displeasures -> displeasur", function() {deepEqual( Stem("displeasures"), "displeasur");});
test("disponge -> dispong", function() {deepEqual( Stem("disponge"), "dispong");});
test("disport -> disport", function() {deepEqual( Stem("disport"), "disport");});
test("disports -> disport", function() {deepEqual( Stem("disports"), "disport");});
test("dispos -> dispo", function() {deepEqual( Stem("dispos"), "dispo");});
test("disposal -> dispos", function() {deepEqual( Stem("disposal"), "dispos");});
test("dispose -> dispos", function() {deepEqual( Stem("dispose"), "dispos");});
test("disposed -> dispos", function() {deepEqual( Stem("disposed"), "dispos");});
test("disposer -> dispos", function() {deepEqual( Stem("disposer"), "dispos");});
test("disposing -> dispos", function() {deepEqual( Stem("disposing"), "dispos");});
test("disposition -> disposit", function() {deepEqual( Stem("disposition"), "disposit");});
test("dispositions -> disposit", function() {deepEqual( Stem("dispositions"), "disposit");});
test("dispossess -> dispossess", function() {deepEqual( Stem("dispossess"), "dispossess");});
test("dispossessing -> dispossess", function() {deepEqual( Stem("dispossessing"), "dispossess");});
test("disprais -> disprai", function() {deepEqual( Stem("disprais"), "disprai");});
test("dispraise -> disprais", function() {deepEqual( Stem("dispraise"), "disprais");});
test("dispraising -> disprais", function() {deepEqual( Stem("dispraising"), "disprais");});
test("dispraisingly -> dispraisingli", function() {deepEqual( Stem("dispraisingly"), "dispraisingli");});
test("dispropertied -> disproperti", function() {deepEqual( Stem("dispropertied"), "disproperti");});
test("disproportion -> disproport", function() {deepEqual( Stem("disproportion"), "disproport");});
test("disproportioned -> disproport", function() {deepEqual( Stem("disproportioned"), "disproport");});
test("disprov -> disprov", function() {deepEqual( Stem("disprov"), "disprov");});
test("disprove -> disprov", function() {deepEqual( Stem("disprove"), "disprov");});
test("disproved -> disprov", function() {deepEqual( Stem("disproved"), "disprov");});
test("dispursed -> dispurs", function() {deepEqual( Stem("dispursed"), "dispurs");});
test("disputable -> disput", function() {deepEqual( Stem("disputable"), "disput");});
test("disputation -> disput", function() {deepEqual( Stem("disputation"), "disput");});
test("disputations -> disput", function() {deepEqual( Stem("disputations"), "disput");});
test("dispute -> disput", function() {deepEqual( Stem("dispute"), "disput");});
test("disputed -> disput", function() {deepEqual( Stem("disputed"), "disput");});
test("disputes -> disput", function() {deepEqual( Stem("disputes"), "disput");});
test("disputing -> disput", function() {deepEqual( Stem("disputing"), "disput");});
test("disquantity -> disquant", function() {deepEqual( Stem("disquantity"), "disquant");});
test("disquiet -> disquiet", function() {deepEqual( Stem("disquiet"), "disquiet");});
test("disquieted -> disquiet", function() {deepEqual( Stem("disquieted"), "disquiet");});
test("disquietly -> disquietli", function() {deepEqual( Stem("disquietly"), "disquietli");});
test("disquietude -> disquietud", function() {deepEqual( Stem("disquietude"), "disquietud");});
test("disregarded -> disregard", function() {deepEqual( Stem("disregarded"), "disregard");});
test("disrelish -> disrelish", function() {deepEqual( Stem("disrelish"), "disrelish");});
test("disreputable -> disreput", function() {deepEqual( Stem("disreputable"), "disreput");});
test("disrespectability -> disrespect", function() {deepEqual( Stem("disrespectability"), "disrespect");});
test("disrespectfully -> disrespectfulli", function() {deepEqual( Stem("disrespectfully"), "disrespectfulli");});
test("disrobe -> disrob", function() {deepEqual( Stem("disrobe"), "disrob");});
test("dissatisfied -> dissatisfi", function() {deepEqual( Stem("dissatisfied"), "dissatisfi");});
test("disseat -> disseat", function() {deepEqual( Stem("disseat"), "disseat");});
test("dissemble -> dissembl", function() {deepEqual( Stem("dissemble"), "dissembl");});
test("dissembled -> dissembl", function() {deepEqual( Stem("dissembled"), "dissembl");});
test("dissembler -> dissembl", function() {deepEqual( Stem("dissembler"), "dissembl");});
test("dissemblers -> dissembl", function() {deepEqual( Stem("dissemblers"), "dissembl");});
test("dissembling -> dissembl", function() {deepEqual( Stem("dissembling"), "dissembl");});
test("dissembly -> dissembli", function() {deepEqual( Stem("dissembly"), "dissembli");});
test("dissension -> dissens", function() {deepEqual( Stem("dissension"), "dissens");});
test("dissensions -> dissens", function() {deepEqual( Stem("dissensions"), "dissens");});
test("dissenters -> dissent", function() {deepEqual( Stem("dissenters"), "dissent");});
test("dissenting -> dissent", function() {deepEqual( Stem("dissenting"), "dissent");});
test("dissentious -> dissenti", function() {deepEqual( Stem("dissentious"), "dissenti");});
test("dissever -> dissev", function() {deepEqual( Stem("dissever"), "dissev");});
test("dissipated -> dissip", function() {deepEqual( Stem("dissipated"), "dissip");});
test("dissipating -> dissip", function() {deepEqual( Stem("dissipating"), "dissip");});
test("dissipation -> dissip", function() {deepEqual( Stem("dissipation"), "dissip");});
test("dissolute -> dissolut", function() {deepEqual( Stem("dissolute"), "dissolut");});
test("dissolutely -> dissolut", function() {deepEqual( Stem("dissolutely"), "dissolut");});
test("dissolution -> dissolut", function() {deepEqual( Stem("dissolution"), "dissolut");});
test("dissolutions -> dissolut", function() {deepEqual( Stem("dissolutions"), "dissolut");});
test("dissolv -> dissolv", function() {deepEqual( Stem("dissolv"), "dissolv");});
test("dissolve -> dissolv", function() {deepEqual( Stem("dissolve"), "dissolv");});
test("dissolved -> dissolv", function() {deepEqual( Stem("dissolved"), "dissolv");});
test("dissolves -> dissolv", function() {deepEqual( Stem("dissolves"), "dissolv");});
test("dissuade -> dissuad", function() {deepEqual( Stem("dissuade"), "dissuad");});
test("dissuaded -> dissuad", function() {deepEqual( Stem("dissuaded"), "dissuad");});
test("distaff -> distaff", function() {deepEqual( Stem("distaff"), "distaff");});
test("distaffs -> distaff", function() {deepEqual( Stem("distaffs"), "distaff");});
test("distain -> distain", function() {deepEqual( Stem("distain"), "distain");});
test("distains -> distain", function() {deepEqual( Stem("distains"), "distain");});
test("distance -> distanc", function() {deepEqual( Stem("distance"), "distanc");});
test("distances -> distanc", function() {deepEqual( Stem("distances"), "distanc");});
test("distangy -> distangi", function() {deepEqual( Stem("distangy"), "distangi");});
test("distant -> distant", function() {deepEqual( Stem("distant"), "distant");});
test("distaste -> distast", function() {deepEqual( Stem("distaste"), "distast");});
test("distasted -> distast", function() {deepEqual( Stem("distasted"), "distast");});
test("distasteful -> distast", function() {deepEqual( Stem("distasteful"), "distast");});
test("distemp -> distemp", function() {deepEqual( Stem("distemp"), "distemp");});
test("distemper -> distemp", function() {deepEqual( Stem("distemper"), "distemp");});
test("distemperature -> distemperatur", function() {deepEqual( Stem("distemperature"), "distemperatur");});
test("distemperatures -> distemperatur", function() {deepEqual( Stem("distemperatures"), "distemperatur");});
test("distempered -> distemp", function() {deepEqual( Stem("distempered"), "distemp");});
test("distempering -> distemp", function() {deepEqual( Stem("distempering"), "distemp");});
test("distil -> distil", function() {deepEqual( Stem("distil"), "distil");});
test("distill -> distil", function() {deepEqual( Stem("distill"), "distil");});
test("distillation -> distil", function() {deepEqual( Stem("distillation"), "distil");});
test("distilled -> distil", function() {deepEqual( Stem("distilled"), "distil");});
test("distills -> distil", function() {deepEqual( Stem("distills"), "distil");});
test("distilment -> distil", function() {deepEqual( Stem("distilment"), "distil");});
test("distinct -> distinct", function() {deepEqual( Stem("distinct"), "distinct");});
test("distinction -> distinct", function() {deepEqual( Stem("distinction"), "distinct");});
test("distinctly -> distinctli", function() {deepEqual( Stem("distinctly"), "distinctli");});
test("distingue -> distingu", function() {deepEqual( Stem("distingue"), "distingu");});
test("distinguee -> distingue", function() {deepEqual( Stem("distinguee"), "distingue");});
test("distinguish -> distinguish", function() {deepEqual( Stem("distinguish"), "distinguish");});
test("distinguished -> distinguish", function() {deepEqual( Stem("distinguished"), "distinguish");});
test("distinguishes -> distinguish", function() {deepEqual( Stem("distinguishes"), "distinguish");});
test("distinguishing -> distinguish", function() {deepEqual( Stem("distinguishing"), "distinguish");});
test("distinguishment -> distinguish", function() {deepEqual( Stem("distinguishment"), "distinguish");});
test("distorted -> distort", function() {deepEqual( Stem("distorted"), "distort");});
test("distract -> distract", function() {deepEqual( Stem("distract"), "distract");});
test("distracted -> distract", function() {deepEqual( Stem("distracted"), "distract");});
test("distractedly -> distractedli", function() {deepEqual( Stem("distractedly"), "distractedli");});
test("distraction -> distract", function() {deepEqual( Stem("distraction"), "distract");});
test("distractions -> distract", function() {deepEqual( Stem("distractions"), "distract");});
test("distracts -> distract", function() {deepEqual( Stem("distracts"), "distract");});
test("distrain -> distrain", function() {deepEqual( Stem("distrain"), "distrain");});
test("distraining -> distrain", function() {deepEqual( Stem("distraining"), "distrain");});
test("distraite -> distrait", function() {deepEqual( Stem("distraite"), "distrait");});
test("distraught -> distraught", function() {deepEqual( Stem("distraught"), "distraught");});
test("distress -> distress", function() {deepEqual( Stem("distress"), "distress");});
test("distressed -> distress", function() {deepEqual( Stem("distressed"), "distress");});
test("distresses -> distress", function() {deepEqual( Stem("distresses"), "distress");});
test("distressful -> distress", function() {deepEqual( Stem("distressful"), "distress");});
test("distribute -> distribut", function() {deepEqual( Stem("distribute"), "distribut");});
test("distributed -> distribut", function() {deepEqual( Stem("distributed"), "distribut");});
test("distributing -> distribut", function() {deepEqual( Stem("distributing"), "distribut");});
test("distribution -> distribut", function() {deepEqual( Stem("distribution"), "distribut");});
test("district -> district", function() {deepEqual( Stem("district"), "district");});
test("distrust -> distrust", function() {deepEqual( Stem("distrust"), "distrust");});
test("distrustful -> distrust", function() {deepEqual( Stem("distrustful"), "distrust");});
test("disturb -> disturb", function() {deepEqual( Stem("disturb"), "disturb");});
test("disturbance -> disturb", function() {deepEqual( Stem("disturbance"), "disturb");});
test("disturbances -> disturb", function() {deepEqual( Stem("disturbances"), "disturb");});
test("disturbed -> disturb", function() {deepEqual( Stem("disturbed"), "disturb");});
test("disturbers -> disturb", function() {deepEqual( Stem("disturbers"), "disturb");});
test("disturbing -> disturb", function() {deepEqual( Stem("disturbing"), "disturb");});
test("disunite -> disunit", function() {deepEqual( Stem("disunite"), "disunit");});
test("disvalued -> disvalu", function() {deepEqual( Stem("disvalued"), "disvalu");});
test("disvouch -> disvouch", function() {deepEqual( Stem("disvouch"), "disvouch");});
test("dit -> dit", function() {deepEqual( Stem("dit"), "dit");});
test("ditch -> ditch", function() {deepEqual( Stem("ditch"), "ditch");});
test("ditchers -> ditcher", function() {deepEqual( Stem("ditchers"), "ditcher");});
test("ditches -> ditch", function() {deepEqual( Stem("ditches"), "ditch");});
test("dites -> dite", function() {deepEqual( Stem("dites"), "dite");});
test("ditties -> ditti", function() {deepEqual( Stem("ditties"), "ditti");});
test("ditto -> ditto", function() {deepEqual( Stem("ditto"), "ditto");});
test("ditty -> ditti", function() {deepEqual( Stem("ditty"), "ditti");});
test("diurnal -> diurnal", function() {deepEqual( Stem("diurnal"), "diurnal");});
test("div -> div", function() {deepEqual( Stem("div"), "div");});
test("divagation -> divag", function() {deepEqual( Stem("divagation"), "divag");});
test("divan -> divan", function() {deepEqual( Stem("divan"), "divan");});
test("dive -> dive", function() {deepEqual( Stem("dive"), "dive");});
test("dived -> dive", function() {deepEqual( Stem("dived"), "dive");});
test("diver -> diver", function() {deepEqual( Stem("diver"), "diver");});
test("diverge -> diverg", function() {deepEqual( Stem("diverge"), "diverg");});
test("divers -> diver", function() {deepEqual( Stem("divers"), "diver");});
test("diversely -> divers", function() {deepEqual( Stem("diversely"), "divers");});
test("diversion -> divers", function() {deepEqual( Stem("diversion"), "divers");});
test("diversity -> divers", function() {deepEqual( Stem("diversity"), "divers");});
test("divert -> divert", function() {deepEqual( Stem("divert"), "divert");});
test("diverted -> divert", function() {deepEqual( Stem("diverted"), "divert");});
test("diverting -> divert", function() {deepEqual( Stem("diverting"), "divert");});
test("diverts -> divert", function() {deepEqual( Stem("diverts"), "divert");});
test("dives -> dive", function() {deepEqual( Stem("dives"), "dive");});
test("divest -> divest", function() {deepEqual( Stem("divest"), "divest");});
test("divested -> divest", function() {deepEqual( Stem("divested"), "divest");});
test("divests -> divest", function() {deepEqual( Stem("divests"), "divest");});
test("dividable -> divid", function() {deepEqual( Stem("dividable"), "divid");});
test("dividant -> divid", function() {deepEqual( Stem("dividant"), "divid");});
test("divide -> divid", function() {deepEqual( Stem("divide"), "divid");});
test("divided -> divid", function() {deepEqual( Stem("divided"), "divid");});
test("dividend -> dividend", function() {deepEqual( Stem("dividend"), "dividend");});
test("dividends -> dividend", function() {deepEqual( Stem("dividends"), "dividend");});
test("divides -> divid", function() {deepEqual( Stem("divides"), "divid");});
test("divideth -> divideth", function() {deepEqual( Stem("divideth"), "divideth");});
test("divin -> divin", function() {deepEqual( Stem("divin"), "divin");});
test("divination -> divin", function() {deepEqual( Stem("divination"), "divin");});
test("divine -> divin", function() {deepEqual( Stem("divine"), "divin");});
test("divined -> divin", function() {deepEqual( Stem("divined"), "divin");});
test("divinely -> divin", function() {deepEqual( Stem("divinely"), "divin");});
test("divineness -> divin", function() {deepEqual( Stem("divineness"), "divin");});
test("diviner -> divin", function() {deepEqual( Stem("diviner"), "divin");});
test("divines -> divin", function() {deepEqual( Stem("divines"), "divin");});
test("divinest -> divinest", function() {deepEqual( Stem("divinest"), "divinest");});
test("divining -> divin", function() {deepEqual( Stem("divining"), "divin");});
test("divinity -> divin", function() {deepEqual( Stem("divinity"), "divin");});
test("division -> divis", function() {deepEqual( Stem("division"), "divis");});
test("divisions -> divis", function() {deepEqual( Stem("divisions"), "divis");});
test("divorc -> divorc", function() {deepEqual( Stem("divorc"), "divorc");});
test("divorce -> divorc", function() {deepEqual( Stem("divorce"), "divorc");});
test("divorced -> divorc", function() {deepEqual( Stem("divorced"), "divorc");});
test("divorcement -> divorc", function() {deepEqual( Stem("divorcement"), "divorc");});
test("divorcing -> divorc", function() {deepEqual( Stem("divorcing"), "divorc");});
test("divulg -> divulg", function() {deepEqual( Stem("divulg"), "divulg");});
test("divulge -> divulg", function() {deepEqual( Stem("divulge"), "divulg");});
test("divulged -> divulg", function() {deepEqual( Stem("divulged"), "divulg");});
test("divulging -> divulg", function() {deepEqual( Stem("divulging"), "divulg");});
test("divvle -> divvl", function() {deepEqual( Stem("divvle"), "divvl");});
test("diwinity -> diwin", function() {deepEqual( Stem("diwinity"), "diwin");});
test("dixonary -> dixonari", function() {deepEqual( Stem("dixonary"), "dixonari");});
test("dizy -> dizi", function() {deepEqual( Stem("dizy"), "dizi");});
test("dizzy -> dizzi", function() {deepEqual( Stem("dizzy"), "dizzi");});
test("do -> do", function() {deepEqual( Stem("do"), "do");});
test("doating -> doat", function() {deepEqual( Stem("doating"), "doat");});
test("dob -> dob", function() {deepEqual( Stem("dob"), "dob");});
test("dobbin -> dobbin", function() {deepEqual( Stem("dobbin"), "dobbin");});
test("dobbs -> dobb", function() {deepEqual( Stem("dobbs"), "dobb");});
test("doblin -> doblin", function() {deepEqual( Stem("doblin"), "doblin");});
test("docility -> docil", function() {deepEqual( Stem("docility"), "docil");});
test("dock -> dock", function() {deepEqual( Stem("dock"), "dock");});
test("docketed -> docket", function() {deepEqual( Stem("docketed"), "docket");});
test("docks -> dock", function() {deepEqual( Stem("docks"), "dock");});
test("doct -> doct", function() {deepEqual( Stem("doct"), "doct");});
test("docther -> docther", function() {deepEqual( Stem("docther"), "docther");});
test("doctor -> doctor", function() {deepEqual( Stem("doctor"), "doctor");});
test("doctored -> doctor", function() {deepEqual( Stem("doctored"), "doctor");});
test("doctors -> doctor", function() {deepEqual( Stem("doctors"), "doctor");});
test("doctrine -> doctrin", function() {deepEqual( Stem("doctrine"), "doctrin");});
test("doctrines -> doctrin", function() {deepEqual( Stem("doctrines"), "doctrin");});
test("document -> document", function() {deepEqual( Stem("document"), "document");});
test("documents -> document", function() {deepEqual( Stem("documents"), "document");});
test("dodge -> dodg", function() {deepEqual( Stem("dodge"), "dodg");});
test("doe -> doe", function() {deepEqual( Stem("doe"), "doe");});
test("doer -> doer", function() {deepEqual( Stem("doer"), "doer");});
test("doers -> doer", function() {deepEqual( Stem("doers"), "doer");});
test("does -> doe", function() {deepEqual( Stem("does"), "doe");});
test("doesn -> doesn", function() {deepEqual( Stem("doesn"), "doesn");});
test("doest -> doest", function() {deepEqual( Stem("doest"), "doest");});
test("doff -> doff", function() {deepEqual( Stem("doff"), "doff");});
test("dog -> dog", function() {deepEqual( Stem("dog"), "dog");});
test("dogberry -> dogberri", function() {deepEqual( Stem("dogberry"), "dogberri");});
test("dogfish -> dogfish", function() {deepEqual( Stem("dogfish"), "dogfish");});
test("dogg -> dogg", function() {deepEqual( Stem("dogg"), "dogg");});
test("dogged -> dog", function() {deepEqual( Stem("dogged"), "dog");});
test("doggedly -> doggedli", function() {deepEqual( Stem("doggedly"), "doggedli");});
test("dogs -> dog", function() {deepEqual( Stem("dogs"), "dog");});
test("doigts -> doigt", function() {deepEqual( Stem("doigts"), "doigt");});
test("doing -> do", function() {deepEqual( Stem("doing"), "do");});
test("doings -> do", function() {deepEqual( Stem("doings"), "do");});
test("doit -> doit", function() {deepEqual( Stem("doit"), "doit");});
test("doits -> doit", function() {deepEqual( Stem("doits"), "doit");});
test("dolabella -> dolabella", function() {deepEqual( Stem("dolabella"), "dolabella");});
test("dolby -> dolbi", function() {deepEqual( Stem("dolby"), "dolbi");});
test("dole -> dole", function() {deepEqual( Stem("dole"), "dole");});
test("doleful -> dole", function() {deepEqual( Stem("doleful"), "dole");});
test("doll -> doll", function() {deepEqual( Stem("doll"), "doll");});
test("dollar -> dollar", function() {deepEqual( Stem("dollar"), "dollar");});
test("dollars -> dollar", function() {deepEqual( Stem("dollars"), "dollar");});
test("dolly -> dolli", function() {deepEqual( Stem("dolly"), "dolli");});
test("dolor -> dolor", function() {deepEqual( Stem("dolor"), "dolor");});
test("dolorous -> dolor", function() {deepEqual( Stem("dolorous"), "dolor");});
test("dolour -> dolour", function() {deepEqual( Stem("dolour"), "dolour");});
test("dolours -> dolour", function() {deepEqual( Stem("dolours"), "dolour");});
test("dolphin -> dolphin", function() {deepEqual( Stem("dolphin"), "dolphin");});
test("dolt -> dolt", function() {deepEqual( Stem("dolt"), "dolt");});
test("dolts -> dolt", function() {deepEqual( Stem("dolts"), "dolt");});
test("domain -> domain", function() {deepEqual( Stem("domain"), "domain");});
test("domestic -> domest", function() {deepEqual( Stem("domestic"), "domest");});
test("domestics -> domest", function() {deepEqual( Stem("domestics"), "domest");});
test("domicile -> domicil", function() {deepEqual( Stem("domicile"), "domicil");});
test("dominance -> domin", function() {deepEqual( Stem("dominance"), "domin");});
test("dominating -> domin", function() {deepEqual( Stem("dominating"), "domin");});
test("dominations -> domin", function() {deepEqual( Stem("dominations"), "domin");});
test("dominator -> domin", function() {deepEqual( Stem("dominator"), "domin");});
test("domine -> domin", function() {deepEqual( Stem("domine"), "domin");});
test("domineer -> domin", function() {deepEqual( Stem("domineer"), "domin");});
test("domineered -> domin", function() {deepEqual( Stem("domineered"), "domin");});
test("domineering -> domin", function() {deepEqual( Stem("domineering"), "domin");});
test("domini -> domini", function() {deepEqual( Stem("domini"), "domini");});
test("dominical -> domin", function() {deepEqual( Stem("dominical"), "domin");});
test("dominion -> dominion", function() {deepEqual( Stem("dominion"), "dominion");});
test("dominions -> dominion", function() {deepEqual( Stem("dominions"), "dominion");});
test("domino -> domino", function() {deepEqual( Stem("domino"), "domino");});
test("dominoes -> domino", function() {deepEqual( Stem("dominoes"), "domino");});
test("domitius -> domitiu", function() {deepEqual( Stem("domitius"), "domitiu");});
test("dommelton -> dommelton", function() {deepEqual( Stem("dommelton"), "dommelton");});
test("don -> don", function() {deepEqual( Stem("don"), "don");});
test("donalbain -> donalbain", function() {deepEqual( Stem("donalbain"), "donalbain");});
test("donald -> donald", function() {deepEqual( Stem("donald"), "donald");});
test("donation -> donat", function() {deepEqual( Stem("donation"), "donat");});
test("donc -> donc", function() {deepEqual( Stem("donc"), "donc");});
test("doncaster -> doncast", function() {deepEqual( Stem("doncaster"), "doncast");});
test("done -> done", function() {deepEqual( Stem("done"), "done");});
test("dong -> dong", function() {deepEqual( Stem("dong"), "dong");});
test("donizettian -> donizettian", function() {deepEqual( Stem("donizettian"), "donizettian");});
test("donkey -> donkei", function() {deepEqual( Stem("donkey"), "donkei");});
test("donkeys -> donkei", function() {deepEqual( Stem("donkeys"), "donkei");});
test("donn -> donn", function() {deepEqual( Stem("donn"), "donn");});
test("donne -> donn", function() {deepEqual( Stem("donne"), "donn");});
test("donner -> donner", function() {deepEqual( Stem("donner"), "donner");});
test("donnerai -> donnerai", function() {deepEqual( Stem("donnerai"), "donnerai");});
test("donnerwetter -> donnerwett", function() {deepEqual( Stem("donnerwetter"), "donnerwett");});
test("donor -> donor", function() {deepEqual( Stem("donor"), "donor");});
test("doo -> doo", function() {deepEqual( Stem("doo"), "doo");});
test("dooce -> dooc", function() {deepEqual( Stem("dooce"), "dooc");});
test("doom -> doom", function() {deepEqual( Stem("doom"), "doom");});
test("doomed -> doom", function() {deepEqual( Stem("doomed"), "doom");});
test("doomsday -> doomsdai", function() {deepEqual( Stem("doomsday"), "doomsdai");});
test("door -> door", function() {deepEqual( Stem("door"), "door");});
test("doorbell -> doorbel", function() {deepEqual( Stem("doorbell"), "doorbel");});
test("doorkeeper -> doorkeep", function() {deepEqual( Stem("doorkeeper"), "doorkeep");});
test("doorpost -> doorpost", function() {deepEqual( Stem("doorpost"), "doorpost");});
test("doors -> door", function() {deepEqual( Stem("doors"), "door");});
test("doorsteps -> doorstep", function() {deepEqual( Stem("doorsteps"), "doorstep");});
test("doose -> doos", function() {deepEqual( Stem("doose"), "doos");});
test("dooze -> dooz", function() {deepEqual( Stem("dooze"), "dooz");});
test("dorcas -> dorca", function() {deepEqual( Stem("dorcas"), "dorca");});
test("doreus -> doreu", function() {deepEqual( Stem("doreus"), "doreu");});
test("doricles -> doricl", function() {deepEqual( Stem("doricles"), "doricl");});
test("dormez -> dormez", function() {deepEqual( Stem("dormez"), "dormez");});
test("dormouse -> dormous", function() {deepEqual( Stem("dormouse"), "dormous");});
test("dorothy -> dorothi", function() {deepEqual( Stem("dorothy"), "dorothi");});
test("dorset -> dorset", function() {deepEqual( Stem("dorset"), "dorset");});
test("dorsetshire -> dorsetshir", function() {deepEqual( Stem("dorsetshire"), "dorsetshir");});
test("dose -> dose", function() {deepEqual( Stem("dose"), "dose");});
test("dosed -> dose", function() {deepEqual( Stem("dosed"), "dose");});
test("doses -> dose", function() {deepEqual( Stem("doses"), "dose");});
test("dost -> dost", function() {deepEqual( Stem("dost"), "dost");});
test("dot -> dot", function() {deepEqual( Stem("dot"), "dot");});
test("dotage -> dotag", function() {deepEqual( Stem("dotage"), "dotag");});
test("dotant -> dotant", function() {deepEqual( Stem("dotant"), "dotant");});
test("dotard -> dotard", function() {deepEqual( Stem("dotard"), "dotard");});
test("dotards -> dotard", function() {deepEqual( Stem("dotards"), "dotard");});
test("dote -> dote", function() {deepEqual( Stem("dote"), "dote");});
test("doted -> dote", function() {deepEqual( Stem("doted"), "dote");});
test("doter -> doter", function() {deepEqual( Stem("doter"), "doter");});
test("doters -> doter", function() {deepEqual( Stem("doters"), "doter");});
test("dotes -> dote", function() {deepEqual( Stem("dotes"), "dote");});
test("doteth -> doteth", function() {deepEqual( Stem("doteth"), "doteth");});
test("doth -> doth", function() {deepEqual( Stem("doth"), "doth");});
test("doting -> dote", function() {deepEqual( Stem("doting"), "dote");});
test("double -> doubl", function() {deepEqual( Stem("double"), "doubl");});
test("doubled -> doubl", function() {deepEqual( Stem("doubled"), "doubl");});
test("doubleness -> doubl", function() {deepEqual( Stem("doubleness"), "doubl");});
test("doubler -> doubler", function() {deepEqual( Stem("doubler"), "doubler");});
test("doublet -> doublet", function() {deepEqual( Stem("doublet"), "doublet");});
test("doublets -> doublet", function() {deepEqual( Stem("doublets"), "doublet");});
test("doubling -> doubl", function() {deepEqual( Stem("doubling"), "doubl");});
test("doubly -> doubli", function() {deepEqual( Stem("doubly"), "doubli");});
test("doubt -> doubt", function() {deepEqual( Stem("doubt"), "doubt");});
test("doubted -> doubt", function() {deepEqual( Stem("doubted"), "doubt");});
test("doubtful -> doubt", function() {deepEqual( Stem("doubtful"), "doubt");});
test("doubtfully -> doubtfulli", function() {deepEqual( Stem("doubtfully"), "doubtfulli");});
test("doubting -> doubt", function() {deepEqual( Stem("doubting"), "doubt");});
test("doubtless -> doubtless", function() {deepEqual( Stem("doubtless"), "doubtless");});
test("doubts -> doubt", function() {deepEqual( Stem("doubts"), "doubt");});
test("doug -> doug", function() {deepEqual( Stem("doug"), "doug");});
test("dough -> dough", function() {deepEqual( Stem("dough"), "dough");});
test("doughty -> doughti", function() {deepEqual( Stem("doughty"), "doughti");});
test("doughy -> doughi", function() {deepEqual( Stem("doughy"), "doughi");});
test("douglas -> dougla", function() {deepEqual( Stem("douglas"), "dougla");});
test("dout -> dout", function() {deepEqual( Stem("dout"), "dout");});
test("doute -> dout", function() {deepEqual( Stem("doute"), "dout");});
test("douts -> dout", function() {deepEqual( Stem("douts"), "dout");});
test("doux -> doux", function() {deepEqual( Stem("doux"), "doux");});
test("dove -> dove", function() {deepEqual( Stem("dove"), "dove");});
test("dovecot -> dovecot", function() {deepEqual( Stem("dovecot"), "dovecot");});
test("dovedale -> dovedal", function() {deepEqual( Stem("dovedale"), "dovedal");});
test("dovehouse -> dovehous", function() {deepEqual( Stem("dovehouse"), "dovehous");});
test("dover -> dover", function() {deepEqual( Stem("dover"), "dover");});
test("doves -> dove", function() {deepEqual( Stem("doves"), "dove");});
test("dow -> dow", function() {deepEqual( Stem("dow"), "dow");});
test("dowager -> dowag", function() {deepEqual( Stem("dowager"), "dowag");});
test("dowagerism -> dowager", function() {deepEqual( Stem("dowagerism"), "dowager");});
test("dowagers -> dowag", function() {deepEqual( Stem("dowagers"), "dowag");});
test("dowd -> dowd", function() {deepEqual( Stem("dowd"), "dowd");});
test("dowdstown -> dowdstown", function() {deepEqual( Stem("dowdstown"), "dowdstown");});
test("dowdy -> dowdi", function() {deepEqual( Stem("dowdy"), "dowdi");});
test("dower -> dower", function() {deepEqual( Stem("dower"), "dower");});
test("dowerless -> dowerless", function() {deepEqual( Stem("dowerless"), "dowerless");});
test("dowers -> dower", function() {deepEqual( Stem("dowers"), "dower");});
test("dowlas -> dowla", function() {deepEqual( Stem("dowlas"), "dowla");});
test("dowle -> dowl", function() {deepEqual( Stem("dowle"), "dowl");});
test("down -> down", function() {deepEqual( Stem("down"), "down");});
test("downcast -> downcast", function() {deepEqual( Stem("downcast"), "downcast");});
test("downfall -> downfal", function() {deepEqual( Stem("downfall"), "downfal");});
test("downright -> downright", function() {deepEqual( Stem("downright"), "downright");});
test("downs -> down", function() {deepEqual( Stem("downs"), "down");});
test("downstairs -> downstair", function() {deepEqual( Stem("downstairs"), "downstair");});
test("downtrod -> downtrod", function() {deepEqual( Stem("downtrod"), "downtrod");});
test("downward -> downward", function() {deepEqual( Stem("downward"), "downward");});
test("downwards -> downward", function() {deepEqual( Stem("downwards"), "downward");});
test("downy -> downi", function() {deepEqual( Stem("downy"), "downi");});
test("dowries -> dowri", function() {deepEqual( Stem("dowries"), "dowri");});
test("dowry -> dowri", function() {deepEqual( Stem("dowry"), "dowri");});
test("dowsabel -> dowsabel", function() {deepEqual( Stem("dowsabel"), "dowsabel");});
test("dowton -> dowton", function() {deepEqual( Stem("dowton"), "dowton");});
test("doxy -> doxi", function() {deepEqual( Stem("doxy"), "doxi");});
test("doyle -> doyl", function() {deepEqual( Stem("doyle"), "doyl");});
test("doze -> doze", function() {deepEqual( Stem("doze"), "doze");});
test("dozed -> doze", function() {deepEqual( Stem("dozed"), "doze");});
test("dozen -> dozen", function() {deepEqual( Stem("dozen"), "dozen");});
test("dozens -> dozen", function() {deepEqual( Stem("dozens"), "dozen");});
test("dozing -> doze", function() {deepEqual( Stem("dozing"), "doze");});
test("dozy -> dozi", function() {deepEqual( Stem("dozy"), "dozi");});
test("dr -> dr", function() {deepEqual( Stem("dr"), "dr");});
test("drab -> drab", function() {deepEqual( Stem("drab"), "drab");});
test("drabbing -> drab", function() {deepEqual( Stem("drabbing"), "drab");});
test("drabs -> drab", function() {deepEqual( Stem("drabs"), "drab");});
test("drachma -> drachma", function() {deepEqual( Stem("drachma"), "drachma");});
test("drachmas -> drachma", function() {deepEqual( Stem("drachmas"), "drachma");});
test("draff -> draff", function() {deepEqual( Stem("draff"), "draff");});
test("draft -> draft", function() {deepEqual( Stem("draft"), "draft");});
test("drafted -> draft", function() {deepEqual( Stem("drafted"), "draft");});
test("drafts -> draft", function() {deepEqual( Stem("drafts"), "draft");});
test("drag -> drag", function() {deepEqual( Stem("drag"), "drag");});
test("dragg -> dragg", function() {deepEqual( Stem("dragg"), "dragg");});
test("dragged -> drag", function() {deepEqual( Stem("dragged"), "drag");});
test("dragging -> drag", function() {deepEqual( Stem("dragging"), "drag");});
test("draggled -> draggl", function() {deepEqual( Stem("draggled"), "draggl");});
test("dragoman -> dragoman", function() {deepEqual( Stem("dragoman"), "dragoman");});
test("dragon -> dragon", function() {deepEqual( Stem("dragon"), "dragon");});
test("dragonish -> dragonish", function() {deepEqual( Stem("dragonish"), "dragonish");});
test("dragons -> dragon", function() {deepEqual( Stem("dragons"), "dragon");});
test("dragoon -> dragoon", function() {deepEqual( Stem("dragoon"), "dragoon");});
test("dragoons -> dragoon", function() {deepEqual( Stem("dragoons"), "dragoon");});
test("drain -> drain", function() {deepEqual( Stem("drain"), "drain");});
test("drained -> drain", function() {deepEqual( Stem("drained"), "drain");});
test("draining -> drain", function() {deepEqual( Stem("draining"), "drain");});
test("drains -> drain", function() {deepEqual( Stem("drains"), "drain");});
test("drake -> drake", function() {deepEqual( Stem("drake"), "drake");});
test("dram -> dram", function() {deepEqual( Stem("dram"), "dram");});
test("drama -> drama", function() {deepEqual( Stem("drama"), "drama");});
test("dramas -> drama", function() {deepEqual( Stem("dramas"), "drama");});
test("dramatic -> dramat", function() {deepEqual( Stem("dramatic"), "dramat");});
test("dramatis -> dramati", function() {deepEqual( Stem("dramatis"), "dramati");});
test("drank -> drank", function() {deepEqual( Stem("drank"), "drank");});
test("draper -> draper", function() {deepEqual( Stem("draper"), "draper");});
test("drapery -> draperi", function() {deepEqual( Stem("drapery"), "draperi");});
test("draught -> draught", function() {deepEqual( Stem("draught"), "draught");});
test("draughts -> draught", function() {deepEqual( Stem("draughts"), "draught");});
test("drave -> drave", function() {deepEqual( Stem("drave"), "drave");});
test("draw -> draw", function() {deepEqual( Stem("draw"), "draw");});
test("drawback -> drawback", function() {deepEqual( Stem("drawback"), "drawback");});
test("drawbridge -> drawbridg", function() {deepEqual( Stem("drawbridge"), "drawbridg");});
test("drawer -> drawer", function() {deepEqual( Stem("drawer"), "drawer");});
test("drawers -> drawer", function() {deepEqual( Stem("drawers"), "drawer");});
test("draweth -> draweth", function() {deepEqual( Stem("draweth"), "draweth");});
test("drawing -> draw", function() {deepEqual( Stem("drawing"), "draw");});
test("drawingroom -> drawingroom", function() {deepEqual( Stem("drawingroom"), "drawingroom");});
test("drawings -> draw", function() {deepEqual( Stem("drawings"), "draw");});
test("drawled -> drawl", function() {deepEqual( Stem("drawled"), "drawl");});
test("drawling -> drawl", function() {deepEqual( Stem("drawling"), "drawl");});
test("drawn -> drawn", function() {deepEqual( Stem("drawn"), "drawn");});
test("draws -> draw", function() {deepEqual( Stem("draws"), "draw");});
test("drayman -> drayman", function() {deepEqual( Stem("drayman"), "drayman");});
test("draymen -> draymen", function() {deepEqual( Stem("draymen"), "draymen");});
test("dread -> dread", function() {deepEqual( Stem("dread"), "dread");});
test("dreaded -> dread", function() {deepEqual( Stem("dreaded"), "dread");});
test("dreadful -> dread", function() {deepEqual( Stem("dreadful"), "dread");});
test("dreadfully -> dreadfulli", function() {deepEqual( Stem("dreadfully"), "dreadfulli");});
test("dreading -> dread", function() {deepEqual( Stem("dreading"), "dread");});
test("dreads -> dread", function() {deepEqual( Stem("dreads"), "dread");});
test("dream -> dream", function() {deepEqual( Stem("dream"), "dream");});
test("dreamed -> dream", function() {deepEqual( Stem("dreamed"), "dream");});
test("dreamer -> dreamer", function() {deepEqual( Stem("dreamer"), "dreamer");});
test("dreamers -> dreamer", function() {deepEqual( Stem("dreamers"), "dreamer");});
test("dreaming -> dream", function() {deepEqual( Stem("dreaming"), "dream");});
test("dreams -> dream", function() {deepEqual( Stem("dreams"), "dream");});
test("dreamt -> dreamt", function() {deepEqual( Stem("dreamt"), "dreamt");});
test("dreariest -> dreariest", function() {deepEqual( Stem("dreariest"), "dreariest");});
test("drearily -> drearili", function() {deepEqual( Stem("drearily"), "drearili");});
test("dreariness -> dreari", function() {deepEqual( Stem("dreariness"), "dreari");});
test("drearning -> drearn", function() {deepEqual( Stem("drearning"), "drearn");});
test("dreary -> dreari", function() {deepEqual( Stem("dreary"), "dreari");});
test("dreg -> dreg", function() {deepEqual( Stem("dreg"), "dreg");});
test("dregs -> dreg", function() {deepEqual( Stem("dregs"), "dreg");});
test("drench -> drench", function() {deepEqual( Stem("drench"), "drench");});
test("drenched -> drench", function() {deepEqual( Stem("drenched"), "drench");});
test("dresden -> dresden", function() {deepEqual( Stem("dresden"), "dresden");});
test("dress -> dress", function() {deepEqual( Stem("dress"), "dress");});
test("dressed -> dress", function() {deepEqual( Stem("dressed"), "dress");});
test("dresser -> dresser", function() {deepEqual( Stem("dresser"), "dresser");});
test("dresses -> dress", function() {deepEqual( Stem("dresses"), "dress");});
test("dressing -> dress", function() {deepEqual( Stem("dressing"), "dress");});
test("dressings -> dress", function() {deepEqual( Stem("dressings"), "dress");});
test("dressy -> dressi", function() {deepEqual( Stem("dressy"), "dressi");});
test("drest -> drest", function() {deepEqual( Stem("drest"), "drest");});
test("drew -> drew", function() {deepEqual( Stem("drew"), "drew");});
test("dribbling -> dribbl", function() {deepEqual( Stem("dribbling"), "dribbl");});
test("dried -> dri", function() {deepEqual( Stem("dried"), "dri");});
test("drier -> drier", function() {deepEqual( Stem("drier"), "drier");});
test("dries -> dri", function() {deepEqual( Stem("dries"), "dri");});
test("drift -> drift", function() {deepEqual( Stem("drift"), "drift");});
test("drilling -> drill", function() {deepEqual( Stem("drilling"), "drill");});
test("drills -> drill", function() {deepEqual( Stem("drills"), "drill");});
test("drily -> drili", function() {deepEqual( Stem("drily"), "drili");});
test("drink -> drink", function() {deepEqual( Stem("drink"), "drink");});
test("drinketh -> drinketh", function() {deepEqual( Stem("drinketh"), "drinketh");});
test("drinkin -> drinkin", function() {deepEqual( Stem("drinkin"), "drinkin");});
test("drinking -> drink", function() {deepEqual( Stem("drinking"), "drink");});
test("drinkings -> drink", function() {deepEqual( Stem("drinkings"), "drink");});
test("drinks -> drink", function() {deepEqual( Stem("drinks"), "drink");});
test("dripping -> drip", function() {deepEqual( Stem("dripping"), "drip");});
test("driv -> driv", function() {deepEqual( Stem("driv"), "driv");});
test("drive -> drive", function() {deepEqual( Stem("drive"), "drive");});
test("drivelling -> drivel", function() {deepEqual( Stem("drivelling"), "drivel");});
test("driven -> driven", function() {deepEqual( Stem("driven"), "driven");});
test("driver -> driver", function() {deepEqual( Stem("driver"), "driver");});
test("drives -> drive", function() {deepEqual( Stem("drives"), "drive");});
test("driveth -> driveth", function() {deepEqual( Stem("driveth"), "driveth");});
test("driving -> drive", function() {deepEqual( Stem("driving"), "drive");});
test("drizzle -> drizzl", function() {deepEqual( Stem("drizzle"), "drizzl");});
test("drizzled -> drizzl", function() {deepEqual( Stem("drizzled"), "drizzl");});
test("drizzles -> drizzl", function() {deepEqual( Stem("drizzles"), "drizzl");});
test("droit -> droit", function() {deepEqual( Stem("droit"), "droit");});
test("droll -> droll", function() {deepEqual( Stem("droll"), "droll");});
test("drollery -> drolleri", function() {deepEqual( Stem("drollery"), "drolleri");});
test("drolly -> drolli", function() {deepEqual( Stem("drolly"), "drolli");});
test("dromedaries -> dromedari", function() {deepEqual( Stem("dromedaries"), "dromedari");});
test("dromedary -> dromedari", function() {deepEqual( Stem("dromedary"), "dromedari");});
test("dromio -> dromio", function() {deepEqual( Stem("dromio"), "dromio");});
test("dromios -> dromio", function() {deepEqual( Stem("dromios"), "dromio");});
test("drone -> drone", function() {deepEqual( Stem("drone"), "drone");});
test("drones -> drone", function() {deepEqual( Stem("drones"), "drone");});
test("droop -> droop", function() {deepEqual( Stem("droop"), "droop");});
test("droopeth -> droopeth", function() {deepEqual( Stem("droopeth"), "droopeth");});
test("drooping -> droop", function() {deepEqual( Stem("drooping"), "droop");});
test("droops -> droop", function() {deepEqual( Stem("droops"), "droop");});
test("drop -> drop", function() {deepEqual( Stem("drop"), "drop");});
test("dropheir -> dropheir", function() {deepEqual( Stem("dropheir"), "dropheir");});
test("droplets -> droplet", function() {deepEqual( Stem("droplets"), "droplet");});
test("dropp -> dropp", function() {deepEqual( Stem("dropp"), "dropp");});
test("dropped -> drop", function() {deepEqual( Stem("dropped"), "drop");});
test("dropper -> dropper", function() {deepEqual( Stem("dropper"), "dropper");});
test("droppeth -> droppeth", function() {deepEqual( Stem("droppeth"), "droppeth");});
test("dropping -> drop", function() {deepEqual( Stem("dropping"), "drop");});
test("droppings -> drop", function() {deepEqual( Stem("droppings"), "drop");});
test("drops -> drop", function() {deepEqual( Stem("drops"), "drop");});
test("dropsied -> dropsi", function() {deepEqual( Stem("dropsied"), "dropsi");});
test("dropsies -> dropsi", function() {deepEqual( Stem("dropsies"), "dropsi");});
test("dropsy -> dropsi", function() {deepEqual( Stem("dropsy"), "dropsi");});
test("dropt -> dropt", function() {deepEqual( Stem("dropt"), "dropt");});
test("dross -> dross", function() {deepEqual( Stem("dross"), "dross");});
test("drossy -> drossi", function() {deepEqual( Stem("drossy"), "drossi");});
test("drought -> drought", function() {deepEqual( Stem("drought"), "drought");});
test("drove -> drove", function() {deepEqual( Stem("drove"), "drove");});
test("droven -> droven", function() {deepEqual( Stem("droven"), "droven");});
test("drovier -> drovier", function() {deepEqual( Stem("drovier"), "drovier");});
test("drown -> drown", function() {deepEqual( Stem("drown"), "drown");});
test("drowned -> drown", function() {deepEqual( Stem("drowned"), "drown");});
test("drowning -> drown", function() {deepEqual( Stem("drowning"), "drown");});
test("drowns -> drown", function() {deepEqual( Stem("drowns"), "drown");});
test("drows -> drow", function() {deepEqual( Stem("drows"), "drow");});
test("drowse -> drows", function() {deepEqual( Stem("drowse"), "drows");});
test("drowsily -> drowsili", function() {deepEqual( Stem("drowsily"), "drowsili");});
test("drowsiness -> drowsi", function() {deepEqual( Stem("drowsiness"), "drowsi");});
test("drowsy -> drowsi", function() {deepEqual( Stem("drowsy"), "drowsi");});
test("drudge -> drudg", function() {deepEqual( Stem("drudge"), "drudg");});
test("drudgery -> drudgeri", function() {deepEqual( Stem("drudgery"), "drudgeri");});
test("drudges -> drudg", function() {deepEqual( Stem("drudges"), "drudg");});
test("drug -> drug", function() {deepEqual( Stem("drug"), "drug");});
test("drugg -> drugg", function() {deepEqual( Stem("drugg"), "drugg");});
test("drugs -> drug", function() {deepEqual( Stem("drugs"), "drug");});
test("druid -> druid", function() {deepEqual( Stem("druid"), "druid");});
test("drum -> drum", function() {deepEqual( Stem("drum"), "drum");});
test("drumble -> drumbl", function() {deepEqual( Stem("drumble"), "drumbl");});
test("drummer -> drummer", function() {deepEqual( Stem("drummer"), "drummer");});
test("drumming -> drum", function() {deepEqual( Stem("drumming"), "drum");});
test("drums -> drum", function() {deepEqual( Stem("drums"), "drum");});
test("drunk -> drunk", function() {deepEqual( Stem("drunk"), "drunk");});
test("drunkard -> drunkard", function() {deepEqual( Stem("drunkard"), "drunkard");});
test("drunkards -> drunkard", function() {deepEqual( Stem("drunkards"), "drunkard");});
test("drunken -> drunken", function() {deepEqual( Stem("drunken"), "drunken");});
test("drunkenly -> drunkenli", function() {deepEqual( Stem("drunkenly"), "drunkenli");});
test("drunkenness -> drunken", function() {deepEqual( Stem("drunkenness"), "drunken");});
test("drury -> druri", function() {deepEqual( Stem("drury"), "druri");});
test("dry -> dry", function() {deepEqual( Stem("dry"), "dry");});
test("dryly -> dryli", function() {deepEqual( Stem("dryly"), "dryli");});
test("dryness -> dryness", function() {deepEqual( Stem("dryness"), "dryness");});
test("drysalter -> drysalt", function() {deepEqual( Stem("drysalter"), "drysalt");});
test("dst -> dst", function() {deepEqual( Stem("dst"), "dst");});
test("du -> du", function() {deepEqual( Stem("du"), "du");});
test("dub -> dub", function() {deepEqual( Stem("dub"), "dub");});
test("dubb -> dubb", function() {deepEqual( Stem("dubb"), "dubb");});
test("dubbed -> dub", function() {deepEqual( Stem("dubbed"), "dub");});
test("dubious -> dubiou", function() {deepEqual( Stem("dubious"), "dubiou");});
test("dubiously -> dubious", function() {deepEqual( Stem("dubiously"), "dubious");});
test("dublin -> dublin", function() {deepEqual( Stem("dublin"), "dublin");});
test("duc -> duc", function() {deepEqual( Stem("duc"), "duc");});
test("ducal -> ducal", function() {deepEqual( Stem("ducal"), "ducal");});
test("ducat -> ducat", function() {deepEqual( Stem("ducat"), "ducat");});
test("ducats -> ducat", function() {deepEqual( Stem("ducats"), "ducat");});
test("ducdame -> ducdam", function() {deepEqual( Stem("ducdame"), "ducdam");});
test("duchess -> duchess", function() {deepEqual( Stem("duchess"), "duchess");});
test("duchesses -> duchess", function() {deepEqual( Stem("duchesses"), "duchess");});
test("duchies -> duchi", function() {deepEqual( Stem("duchies"), "duchi");});
test("duchy -> duchi", function() {deepEqual( Stem("duchy"), "duchi");});
test("duck -> duck", function() {deepEqual( Stem("duck"), "duck");});
test("ducked -> duck", function() {deepEqual( Stem("ducked"), "duck");});
test("ducking -> duck", function() {deepEqual( Stem("ducking"), "duck");});
test("ducks -> duck", function() {deepEqual( Stem("ducks"), "duck");});
test("dudgeon -> dudgeon", function() {deepEqual( Stem("dudgeon"), "dudgeon");});
test("due -> due", function() {deepEqual( Stem("due"), "due");});
test("duel -> duel", function() {deepEqual( Stem("duel"), "duel");});
test("duelling -> duell", function() {deepEqual( Stem("duelling"), "duell");});
test("duellist -> duellist", function() {deepEqual( Stem("duellist"), "duellist");});
test("duello -> duello", function() {deepEqual( Stem("duello"), "duello");});
test("duels -> duel", function() {deepEqual( Stem("duels"), "duel");});
test("duer -> duer", function() {deepEqual( Stem("duer"), "duer");});
test("dues -> due", function() {deepEqual( Stem("dues"), "due");});
test("duet -> duet", function() {deepEqual( Stem("duet"), "duet");});
test("duets -> duet", function() {deepEqual( Stem("duets"), "duet");});
test("duff -> duff", function() {deepEqual( Stem("duff"), "duff");});
test("dug -> dug", function() {deepEqual( Stem("dug"), "dug");});
test("dugs -> dug", function() {deepEqual( Stem("dugs"), "dug");});
test("duke -> duke", function() {deepEqual( Stem("duke"), "duke");});
test("dukedom -> dukedom", function() {deepEqual( Stem("dukedom"), "dukedom");});
test("dukedoms -> dukedom", function() {deepEqual( Stem("dukedoms"), "dukedom");});
test("dukes -> duke", function() {deepEqual( Stem("dukes"), "duke");});
test("dulce -> dulc", function() {deepEqual( Stem("dulce"), "dulc");});
test("dulcet -> dulcet", function() {deepEqual( Stem("dulcet"), "dulcet");});
test("dulche -> dulch", function() {deepEqual( Stem("dulche"), "dulch");});
test("dull -> dull", function() {deepEqual( Stem("dull"), "dull");});
test("dullard -> dullard", function() {deepEqual( Stem("dullard"), "dullard");});
test("duller -> duller", function() {deepEqual( Stem("duller"), "duller");});
test("dullest -> dullest", function() {deepEqual( Stem("dullest"), "dullest");});
test("dulling -> dull", function() {deepEqual( Stem("dulling"), "dull");});
test("dullness -> dull", function() {deepEqual( Stem("dullness"), "dull");});
test("dulls -> dull", function() {deepEqual( Stem("dulls"), "dull");});
test("dully -> dulli", function() {deepEqual( Stem("dully"), "dulli");});
test("dulness -> dul", function() {deepEqual( Stem("dulness"), "dul");});
test("dulwich -> dulwich", function() {deepEqual( Stem("dulwich"), "dulwich");});
test("duly -> duli", function() {deepEqual( Stem("duly"), "duli");});
test("dumain -> dumain", function() {deepEqual( Stem("dumain"), "dumain");});
test("dumb -> dumb", function() {deepEqual( Stem("dumb"), "dumb");});
test("dumbe -> dumb", function() {deepEqual( Stem("dumbe"), "dumb");});
test("dumbly -> dumbli", function() {deepEqual( Stem("dumbly"), "dumbli");});
test("dumbness -> dumb", function() {deepEqual( Stem("dumbness"), "dumb");});
test("dumdum -> dumdum", function() {deepEqual( Stem("dumdum"), "dumdum");});
test("dump -> dump", function() {deepEqual( Stem("dump"), "dump");});
test("dumps -> dump", function() {deepEqual( Stem("dumps"), "dump");});
test("dumpy -> dumpi", function() {deepEqual( Stem("dumpy"), "dumpi");});
test("dun -> dun", function() {deepEqual( Stem("dun"), "dun");});
test("duncan -> duncan", function() {deepEqual( Stem("duncan"), "duncan");});
test("dundas -> dunda", function() {deepEqual( Stem("dundas"), "dunda");});
test("dung -> dung", function() {deepEqual( Stem("dung"), "dung");});
test("dungeon -> dungeon", function() {deepEqual( Stem("dungeon"), "dungeon");});
test("dungeons -> dungeon", function() {deepEqual( Stem("dungeons"), "dungeon");});
test("dunghill -> dunghil", function() {deepEqual( Stem("dunghill"), "dunghil");});
test("dunghills -> dunghil", function() {deepEqual( Stem("dunghills"), "dunghil");});
test("dungy -> dungi", function() {deepEqual( Stem("dungy"), "dungi");});
test("dunkirk -> dunkirk", function() {deepEqual( Stem("dunkirk"), "dunkirk");});
test("dunnest -> dunnest", function() {deepEqual( Stem("dunnest"), "dunnest");});
test("dunning -> dun", function() {deepEqual( Stem("dunning"), "dun");});
test("duns -> dun", function() {deepEqual( Stem("duns"), "dun");});
test("dunsinane -> dunsinan", function() {deepEqual( Stem("dunsinane"), "dunsinan");});
test("dunsmore -> dunsmor", function() {deepEqual( Stem("dunsmore"), "dunsmor");});
test("dunstable -> dunstabl", function() {deepEqual( Stem("dunstable"), "dunstabl");});
test("dupp -> dupp", function() {deepEqual( Stem("dupp"), "dupp");});
test("durable -> durabl", function() {deepEqual( Stem("durable"), "durabl");});
test("durance -> duranc", function() {deepEqual( Stem("durance"), "duranc");});
test("duration -> durat", function() {deepEqual( Stem("duration"), "durat");});
test("during -> dure", function() {deepEqual( Stem("during"), "dure");});
test("durst -> durst", function() {deepEqual( Stem("durst"), "durst");});
test("dusky -> duski", function() {deepEqual( Stem("dusky"), "duski");});
test("dust -> dust", function() {deepEqual( Stem("dust"), "dust");});
test("dusted -> dust", function() {deepEqual( Stem("dusted"), "dust");});
test("dusty -> dusti", function() {deepEqual( Stem("dusty"), "dusti");});
test("dutch -> dutch", function() {deepEqual( Stem("dutch"), "dutch");});
test("dutchman -> dutchman", function() {deepEqual( Stem("dutchman"), "dutchman");});
test("duteous -> duteou", function() {deepEqual( Stem("duteous"), "duteou");});
test("duties -> duti", function() {deepEqual( Stem("duties"), "duti");});
test("dutiful -> duti", function() {deepEqual( Stem("dutiful"), "duti");});
test("dutifully -> dutifulli", function() {deepEqual( Stem("dutifully"), "dutifulli");});
test("dutton -> dutton", function() {deepEqual( Stem("dutton"), "dutton");});
test("duty -> duti", function() {deepEqual( Stem("duty"), "duti");});
test("dwarf -> dwarf", function() {deepEqual( Stem("dwarf"), "dwarf");});
test("dwarfish -> dwarfish", function() {deepEqual( Stem("dwarfish"), "dwarfish");});
test("dwell -> dwell", function() {deepEqual( Stem("dwell"), "dwell");});
test("dwellers -> dweller", function() {deepEqual( Stem("dwellers"), "dweller");});
test("dwelling -> dwell", function() {deepEqual( Stem("dwelling"), "dwell");});
test("dwells -> dwell", function() {deepEqual( Stem("dwells"), "dwell");});
test("dwelt -> dwelt", function() {deepEqual( Stem("dwelt"), "dwelt");});
test("dwindle -> dwindl", function() {deepEqual( Stem("dwindle"), "dwindl");});
test("dwindling -> dwindl", function() {deepEqual( Stem("dwindling"), "dwindl");});
test("dy -> dy", function() {deepEqual( Stem("dy"), "dy");});
test("dye -> dye", function() {deepEqual( Stem("dye"), "dye");});
test("dyed -> dy", function() {deepEqual( Stem("dyed"), "dy");});
test("dyer -> dyer", function() {deepEqual( Stem("dyer"), "dyer");});
test("dying -> dy", function() {deepEqual( Stem("dying"), "dy");});
test("dykes -> dyke", function() {deepEqual( Stem("dykes"), "dyke");});
test("e -> e", function() {deepEqual( Stem("e"), "e");});
test("each -> each", function() {deepEqual( Stem("each"), "each");});
test("eager -> eager", function() {deepEqual( Stem("eager"), "eager");});
test("eagerly -> eagerli", function() {deepEqual( Stem("eagerly"), "eagerli");});
test("eagerness -> eager", function() {deepEqual( Stem("eagerness"), "eager");});
test("eagle -> eagl", function() {deepEqual( Stem("eagle"), "eagl");});
test("eagles -> eagl", function() {deepEqual( Stem("eagles"), "eagl");});
test("ealing -> eal", function() {deepEqual( Stem("ealing"), "eal");});
test("ealth -> ealth", function() {deepEqual( Stem("ealth"), "ealth");});
test("eaning -> ean", function() {deepEqual( Stem("eaning"), "ean");});
test("eanlings -> eanl", function() {deepEqual( Stem("eanlings"), "eanl");});
test("ear -> ear", function() {deepEqual( Stem("ear"), "ear");});
test("eared -> ear", function() {deepEqual( Stem("eared"), "ear");});
test("earing -> ear", function() {deepEqual( Stem("earing"), "ear");});
test("earl -> earl", function() {deepEqual( Stem("earl"), "earl");});
test("earldom -> earldom", function() {deepEqual( Stem("earldom"), "earldom");});
test("earlier -> earlier", function() {deepEqual( Stem("earlier"), "earlier");});
test("earliest -> earliest", function() {deepEqual( Stem("earliest"), "earliest");});
test("earliness -> earli", function() {deepEqual( Stem("earliness"), "earli");});
test("earls -> earl", function() {deepEqual( Stem("earls"), "earl");});
test("early -> earli", function() {deepEqual( Stem("early"), "earli");});
test("earn -> earn", function() {deepEqual( Stem("earn"), "earn");});
test("earned -> earn", function() {deepEqual( Stem("earned"), "earn");});
test("earnest -> earnest", function() {deepEqual( Stem("earnest"), "earnest");});
test("earnestly -> earnestli", function() {deepEqual( Stem("earnestly"), "earnestli");});
test("earnestness -> earnest", function() {deepEqual( Stem("earnestness"), "earnest");});
test("earnings -> earn", function() {deepEqual( Stem("earnings"), "earn");});
test("earns -> earn", function() {deepEqual( Stem("earns"), "earn");});
test("earrings -> ear", function() {deepEqual( Stem("earrings"), "ear");});
test("ears -> ear", function() {deepEqual( Stem("ears"), "ear");});
test("earth -> earth", function() {deepEqual( Stem("earth"), "earth");});
test("earthen -> earthen", function() {deepEqual( Stem("earthen"), "earthen");});
test("earthenware -> earthenwar", function() {deepEqual( Stem("earthenware"), "earthenwar");});
test("earthlier -> earthlier", function() {deepEqual( Stem("earthlier"), "earthlier");});
test("earthly -> earthli", function() {deepEqual( Stem("earthly"), "earthli");});
test("earthquake -> earthquak", function() {deepEqual( Stem("earthquake"), "earthquak");});
test("earthquakes -> earthquak", function() {deepEqual( Stem("earthquakes"), "earthquak");});
test("earthy -> earthi", function() {deepEqual( Stem("earthy"), "earthi");});
test("eas -> ea", function() {deepEqual( Stem("eas"), "ea");});
test("ease -> eas", function() {deepEqual( Stem("ease"), "eas");});
test("eased -> eas", function() {deepEqual( Stem("eased"), "eas");});
test("easeful -> eas", function() {deepEqual( Stem("easeful"), "eas");});
test("eases -> eas", function() {deepEqual( Stem("eases"), "eas");});
test("easier -> easier", function() {deepEqual( Stem("easier"), "easier");});
test("easiest -> easiest", function() {deepEqual( Stem("easiest"), "easiest");});
test("easiliest -> easiliest", function() {deepEqual( Stem("easiliest"), "easiliest");});
test("easily -> easili", function() {deepEqual( Stem("easily"), "easili");});
test("easiness -> easi", function() {deepEqual( Stem("easiness"), "easi");});
test("easing -> eas", function() {deepEqual( Stem("easing"), "eas");});
test("east -> east", function() {deepEqual( Stem("east"), "east");});
test("eastbourne -> eastbourn", function() {deepEqual( Stem("eastbourne"), "eastbourn");});
test("eastcheap -> eastcheap", function() {deepEqual( Stem("eastcheap"), "eastcheap");});
test("easter -> easter", function() {deepEqual( Stem("easter"), "easter");});
test("eastern -> eastern", function() {deepEqual( Stem("eastern"), "eastern");});
test("eastward -> eastward", function() {deepEqual( Stem("eastward"), "eastward");});
test("eastwards -> eastward", function() {deepEqual( Stem("eastwards"), "eastward");});
test("easy -> easi", function() {deepEqual( Stem("easy"), "easi");});
test("eat -> eat", function() {deepEqual( Stem("eat"), "eat");});
test("eaten -> eaten", function() {deepEqual( Stem("eaten"), "eaten");});
test("eater -> eater", function() {deepEqual( Stem("eater"), "eater");});
test("eaters -> eater", function() {deepEqual( Stem("eaters"), "eater");});
test("eating -> eat", function() {deepEqual( Stem("eating"), "eat");});
test("eats -> eat", function() {deepEqual( Stem("eats"), "eat");});
test("eau -> eau", function() {deepEqual( Stem("eau"), "eau");});
test("eaux -> eaux", function() {deepEqual( Stem("eaux"), "eaux");});
test("eaves -> eav", function() {deepEqual( Stem("eaves"), "eav");});
test("ebb -> ebb", function() {deepEqual( Stem("ebb"), "ebb");});
test("ebbing -> eb", function() {deepEqual( Stem("ebbing"), "eb");});
test("ebbs -> ebb", function() {deepEqual( Stem("ebbs"), "ebb");});
test("ebon -> ebon", function() {deepEqual( Stem("ebon"), "ebon");});
test("ebony -> eboni", function() {deepEqual( Stem("ebony"), "eboni");});
test("ebrew -> ebrew", function() {deepEqual( Stem("ebrew"), "ebrew");});
test("ebullition -> ebullit", function() {deepEqual( Stem("ebullition"), "ebullit");});
test("ebullitions -> ebullit", function() {deepEqual( Stem("ebullitions"), "ebullit");});
test("ecarte -> ecart", function() {deepEqual( Stem("ecarte"), "ecart");});
test("ecce -> ecc", function() {deepEqual( Stem("ecce"), "ecc");});
test("eccentricities -> eccentr", function() {deepEqual( Stem("eccentricities"), "eccentr");});
test("ecclesiastical -> ecclesiast", function() {deepEqual( Stem("ecclesiastical"), "ecclesiast");});
test("eccolo -> eccolo", function() {deepEqual( Stem("eccolo"), "eccolo");});
test("echapper -> echapp", function() {deepEqual( Stem("echapper"), "echapp");});
test("echo -> echo", function() {deepEqual( Stem("echo"), "echo");});
test("echoed -> echo", function() {deepEqual( Stem("echoed"), "echo");});
test("echoes -> echo", function() {deepEqual( Stem("echoes"), "echo");});
test("eclaircissement -> eclairciss", function() {deepEqual( Stem("eclaircissement"), "eclairciss");});
test("eclips -> eclip", function() {deepEqual( Stem("eclips"), "eclip");});
test("eclipse -> eclips", function() {deepEqual( Stem("eclipse"), "eclips");});
test("eclipsed -> eclips", function() {deepEqual( Stem("eclipsed"), "eclips");});
test("eclipses -> eclips", function() {deepEqual( Stem("eclipses"), "eclips");});
test("ecolier -> ecoli", function() {deepEqual( Stem("ecolier"), "ecoli");});
test("economist -> economist", function() {deepEqual( Stem("economist"), "economist");});
test("economy -> economi", function() {deepEqual( Stem("economy"), "economi");});
test("ecossais -> ecossai", function() {deepEqual( Stem("ecossais"), "ecossai");});
test("ecossaise -> ecossais", function() {deepEqual( Stem("ecossaise"), "ecossais");});
test("ecoutez -> ecoutez", function() {deepEqual( Stem("ecoutez"), "ecoutez");});
test("ecrased -> ecras", function() {deepEqual( Stem("ecrased"), "ecras");});
test("ecstacy -> ecstaci", function() {deepEqual( Stem("ecstacy"), "ecstaci");});
test("ecstasies -> ecstasi", function() {deepEqual( Stem("ecstasies"), "ecstasi");});
test("ecstasy -> ecstasi", function() {deepEqual( Stem("ecstasy"), "ecstasi");});
test("ecstatic -> ecstat", function() {deepEqual( Stem("ecstatic"), "ecstat");});
test("ecus -> ecu", function() {deepEqual( Stem("ecus"), "ecu");});
test("ecuyer -> ecuy", function() {deepEqual( Stem("ecuyer"), "ecuy");});
test("eden -> eden", function() {deepEqual( Stem("eden"), "eden");});
test("edg -> edg", function() {deepEqual( Stem("edg"), "edg");});
test("edgar -> edgar", function() {deepEqual( Stem("edgar"), "edgar");});
test("edge -> edg", function() {deepEqual( Stem("edge"), "edg");});
test("edged -> edg", function() {deepEqual( Stem("edged"), "edg");});
test("edgeless -> edgeless", function() {deepEqual( Stem("edgeless"), "edgeless");});
test("edges -> edg", function() {deepEqual( Stem("edges"), "edg");});
test("edict -> edict", function() {deepEqual( Stem("edict"), "edict");});
test("edicts -> edict", function() {deepEqual( Stem("edicts"), "edict");});
test("edification -> edif", function() {deepEqual( Stem("edification"), "edif");});
test("edifice -> edific", function() {deepEqual( Stem("edifice"), "edific");});
test("edifices -> edific", function() {deepEqual( Stem("edifices"), "edific");});
test("edified -> edifi", function() {deepEqual( Stem("edified"), "edifi");});
test("edifies -> edifi", function() {deepEqual( Stem("edifies"), "edifi");});
test("edifying -> edifi", function() {deepEqual( Stem("edifying"), "edifi");});
test("edinburgh -> edinburgh", function() {deepEqual( Stem("edinburgh"), "edinburgh");});
test("edition -> edit", function() {deepEqual( Stem("edition"), "edit");});
test("edm -> edm", function() {deepEqual( Stem("edm"), "edm");});
test("edmund -> edmund", function() {deepEqual( Stem("edmund"), "edmund");});
test("edmunds -> edmund", function() {deepEqual( Stem("edmunds"), "edmund");});
test("edmundsbury -> edmundsburi", function() {deepEqual( Stem("edmundsbury"), "edmundsburi");});
test("educate -> educ", function() {deepEqual( Stem("educate"), "educ");});
test("educated -> educ", function() {deepEqual( Stem("educated"), "educ");});
test("educating -> educ", function() {deepEqual( Stem("educating"), "educ");});
test("education -> educ", function() {deepEqual( Stem("education"), "educ");});
test("educational -> educ", function() {deepEqual( Stem("educational"), "educ");});
test("edward -> edward", function() {deepEqual( Stem("edward"), "edward");});
test("edwards -> edward", function() {deepEqual( Stem("edwards"), "edward");});
test("ee -> ee", function() {deepEqual( Stem("ee"), "ee");});
test("eel -> eel", function() {deepEqual( Stem("eel"), "eel");});
test("eels -> eel", function() {deepEqual( Stem("eels"), "eel");});
test("ees -> ee", function() {deepEqual( Stem("ees"), "ee");});
test("effect -> effect", function() {deepEqual( Stem("effect"), "effect");});
test("effected -> effect", function() {deepEqual( Stem("effected"), "effect");});
test("effectless -> effectless", function() {deepEqual( Stem("effectless"), "effectless");});
test("effects -> effect", function() {deepEqual( Stem("effects"), "effect");});
test("effectual -> effectu", function() {deepEqual( Stem("effectual"), "effectu");});
test("effectually -> effectu", function() {deepEqual( Stem("effectually"), "effectu");});
test("effeminate -> effemin", function() {deepEqual( Stem("effeminate"), "effemin");});
test("effigies -> effigi", function() {deepEqual( Stem("effigies"), "effigi");});
test("effort -> effort", function() {deepEqual( Stem("effort"), "effort");});
test("efforts -> effort", function() {deepEqual( Stem("efforts"), "effort");});
test("effus -> effu", function() {deepEqual( Stem("effus"), "effu");});
test("effuse -> effus", function() {deepEqual( Stem("effuse"), "effus");});
test("effusion -> effus", function() {deepEqual( Stem("effusion"), "effus");});
test("eftest -> eftest", function() {deepEqual( Stem("eftest"), "eftest");});
test("egad -> egad", function() {deepEqual( Stem("egad"), "egad");});
test("egal -> egal", function() {deepEqual( Stem("egal"), "egal");});
test("egalite -> egalit", function() {deepEqual( Stem("egalite"), "egalit");});
test("egally -> egal", function() {deepEqual( Stem("egally"), "egal");});
test("egeria -> egeria", function() {deepEqual( Stem("egeria"), "egeria");});
test("eget -> eget", function() {deepEqual( Stem("eget"), "eget");});
test("egeus -> egeu", function() {deepEqual( Stem("egeus"), "egeu");});
test("egg -> egg", function() {deepEqual( Stem("egg"), "egg");});
test("eggs -> egg", function() {deepEqual( Stem("eggs"), "egg");});
test("eggshell -> eggshel", function() {deepEqual( Stem("eggshell"), "eggshel");});
test("eglamour -> eglamour", function() {deepEqual( Stem("eglamour"), "eglamour");});
test("eglantine -> eglantin", function() {deepEqual( Stem("eglantine"), "eglantin");});
test("egma -> egma", function() {deepEqual( Stem("egma"), "egma");});
test("ego -> ego", function() {deepEqual( Stem("ego"), "ego");});
test("egotism -> egot", function() {deepEqual( Stem("egotism"), "egot");});
test("egregious -> egregi", function() {deepEqual( Stem("egregious"), "egregi");});
test("egregiously -> egregi", function() {deepEqual( Stem("egregiously"), "egregi");});
test("egress -> egress", function() {deepEqual( Stem("egress"), "egress");});
test("egypt -> egypt", function() {deepEqual( Stem("egypt"), "egypt");});
test("egyptian -> egyptian", function() {deepEqual( Stem("egyptian"), "egyptian");});
test("egyptians -> egyptian", function() {deepEqual( Stem("egyptians"), "egyptian");});
test("eh -> eh", function() {deepEqual( Stem("eh"), "eh");});
test("eie -> eie", function() {deepEqual( Stem("eie"), "eie");});
test("eight -> eight", function() {deepEqual( Stem("eight"), "eight");});
test("eighteen -> eighteen", function() {deepEqual( Stem("eighteen"), "eighteen");});
test("eighteenth -> eighteenth", function() {deepEqual( Stem("eighteenth"), "eighteenth");});
test("eighth -> eighth", function() {deepEqual( Stem("eighth"), "eighth");});
test("eightpence -> eightpenc", function() {deepEqual( Stem("eightpence"), "eightpenc");});
test("eightpences -> eightpenc", function() {deepEqual( Stem("eightpences"), "eightpenc");});
test("eightpenny -> eightpenni", function() {deepEqual( Stem("eightpenny"), "eightpenni");});
test("eighty -> eighti", function() {deepEqual( Stem("eighty"), "eighti");});
test("eilwagen -> eilwagen", function() {deepEqual( Stem("eilwagen"), "eilwagen");});
test("einsam -> einsam", function() {deepEqual( Stem("einsam"), "einsam");});
test("eisel -> eisel", function() {deepEqual( Stem("eisel"), "eisel");});
test("either -> either", function() {deepEqual( Stem("either"), "either");});
test("ejaculate -> ejacul", function() {deepEqual( Stem("ejaculate"), "ejacul");});
test("ejaculated -> ejacul", function() {deepEqual( Stem("ejaculated"), "ejacul");});
test("ejaculations -> ejacul", function() {deepEqual( Stem("ejaculations"), "ejacul");});
test("ejaculatory -> ejaculatori", function() {deepEqual( Stem("ejaculatory"), "ejaculatori");});
test("eject -> eject", function() {deepEqual( Stem("eject"), "eject");});
test("eke -> ek", function() {deepEqual( Stem("eke"), "ek");});
test("el -> el", function() {deepEqual( Stem("el"), "el");});
test("elaborate -> elabor", function() {deepEqual( Stem("elaborate"), "elabor");});
test("elaborately -> elabor", function() {deepEqual( Stem("elaborately"), "elabor");});
test("elapse -> elaps", function() {deepEqual( Stem("elapse"), "elaps");});
test("elapsed -> elaps", function() {deepEqual( Stem("elapsed"), "elaps");});
test("elated -> elat", function() {deepEqual( Stem("elated"), "elat");});
test("elating -> elat", function() {deepEqual( Stem("elating"), "elat");});
test("elation -> elat", function() {deepEqual( Stem("elation"), "elat");});
test("elba -> elba", function() {deepEqual( Stem("elba"), "elba");});
test("elban -> elban", function() {deepEqual( Stem("elban"), "elban");});
test("elbe -> elb", function() {deepEqual( Stem("elbe"), "elb");});
test("elbow -> elbow", function() {deepEqual( Stem("elbow"), "elbow");});
test("elbows -> elbow", function() {deepEqual( Stem("elbows"), "elbow");});
test("eld -> eld", function() {deepEqual( Stem("eld"), "eld");});
test("elder -> elder", function() {deepEqual( Stem("elder"), "elder");});
test("elderly -> elderli", function() {deepEqual( Stem("elderly"), "elderli");});
test("elders -> elder", function() {deepEqual( Stem("elders"), "elder");});
test("eldest -> eldest", function() {deepEqual( Stem("eldest"), "eldest");});
test("eldon -> eldon", function() {deepEqual( Stem("eldon"), "eldon");});
test("eleanor -> eleanor", function() {deepEqual( Stem("eleanor"), "eleanor");});
test("elect -> elect", function() {deepEqual( Stem("elect"), "elect");});
test("elected -> elect", function() {deepEqual( Stem("elected"), "elect");});
test("election -> elect", function() {deepEqual( Stem("election"), "elect");});
test("electrifying -> electrifi", function() {deepEqual( Stem("electrifying"), "electrifi");});
test("elegance -> eleg", function() {deepEqual( Stem("elegance"), "eleg");});
test("elegances -> eleg", function() {deepEqual( Stem("elegances"), "eleg");});
test("elegancy -> eleg", function() {deepEqual( Stem("elegancy"), "eleg");});
test("elegant -> eleg", function() {deepEqual( Stem("elegant"), "eleg");});
test("elegantly -> elegantli", function() {deepEqual( Stem("elegantly"), "elegantli");});
test("elegies -> elegi", function() {deepEqual( Stem("elegies"), "elegi");});
test("element -> element", function() {deepEqual( Stem("element"), "element");});
test("elements -> element", function() {deepEqual( Stem("elements"), "element");});
test("elephant -> eleph", function() {deepEqual( Stem("elephant"), "eleph");});
test("elephants -> eleph", function() {deepEqual( Stem("elephants"), "eleph");});
test("elevated -> elev", function() {deepEqual( Stem("elevated"), "elev");});
test("eleven -> eleven", function() {deepEqual( Stem("eleven"), "eleven");});
test("eleventh -> eleventh", function() {deepEqual( Stem("eleventh"), "eleventh");});
test("elf -> elf", function() {deepEqual( Stem("elf"), "elf");});
test("elflocks -> elflock", function() {deepEqual( Stem("elflocks"), "elflock");});
test("eli -> eli", function() {deepEqual( Stem("eli"), "eli");});
test("eliads -> eliad", function() {deepEqual( Stem("eliads"), "eliad");});
test("elicited -> elicit", function() {deepEqual( Stem("elicited"), "elicit");});
test("eligible -> elig", function() {deepEqual( Stem("eligible"), "elig");});
test("eliminated -> elimin", function() {deepEqual( Stem("eliminated"), "elimin");});
test("elinor -> elinor", function() {deepEqual( Stem("elinor"), "elinor");});
test("elixir -> elixir", function() {deepEqual( Stem("elixir"), "elixir");});
test("eliza -> eliza", function() {deepEqual( Stem("eliza"), "eliza");});
test("elizabeth -> elizabeth", function() {deepEqual( Stem("elizabeth"), "elizabeth");});
test("ell -> ell", function() {deepEqual( Stem("ell"), "ell");});
test("elle -> ell", function() {deepEqual( Stem("elle"), "ell");});
test("ellen -> ellen", function() {deepEqual( Stem("ellen"), "ellen");});
test("elliotson -> elliotson", function() {deepEqual( Stem("elliotson"), "elliotson");});
test("elliston -> elliston", function() {deepEqual( Stem("elliston"), "elliston");});
test("elm -> elm", function() {deepEqual( Stem("elm"), "elm");});
test("elms -> elm", function() {deepEqual( Stem("elms"), "elm");});
test("elopement -> elop", function() {deepEqual( Stem("elopement"), "elop");});
test("eloquence -> eloqu", function() {deepEqual( Stem("eloquence"), "eloqu");});
test("eloquent -> eloqu", function() {deepEqual( Stem("eloquent"), "eloqu");});
test("else -> els", function() {deepEqual( Stem("else"), "els");});
test("elsewhere -> elsewher", function() {deepEqual( Stem("elsewhere"), "elsewher");});
test("elsinore -> elsinor", function() {deepEqual( Stem("elsinore"), "elsinor");});
test("eltham -> eltham", function() {deepEqual( Stem("eltham"), "eltham");});
test("elude -> elud", function() {deepEqual( Stem("elude"), "elud");});
test("eluded -> elud", function() {deepEqual( Stem("eluded"), "elud");});
test("elves -> elv", function() {deepEqual( Stem("elves"), "elv");});
test("elvino -> elvino", function() {deepEqual( Stem("elvino"), "elvino");});
test("elvish -> elvish", function() {deepEqual( Stem("elvish"), "elvish");});
test("ely -> eli", function() {deepEqual( Stem("ely"), "eli");});
test("elysium -> elysium", function() {deepEqual( Stem("elysium"), "elysium");});
test("em -> em", function() {deepEqual( Stem("em"), "em");});
test("emancipation -> emancip", function() {deepEqual( Stem("emancipation"), "emancip");});
test("emballing -> embal", function() {deepEqual( Stem("emballing"), "embal");});
test("embalm -> embalm", function() {deepEqual( Stem("embalm"), "embalm");});
test("embalms -> embalm", function() {deepEqual( Stem("embalms"), "embalm");});
test("embark -> embark", function() {deepEqual( Stem("embark"), "embark");});
test("embarked -> embark", function() {deepEqual( Stem("embarked"), "embark");});
test("embarks -> embark", function() {deepEqual( Stem("embarks"), "embark");});
test("embarquements -> embarqu", function() {deepEqual( Stem("embarquements"), "embarqu");});
test("embarrassed -> embarrass", function() {deepEqual( Stem("embarrassed"), "embarrass");});
test("embarrassments -> embarrass", function() {deepEqual( Stem("embarrassments"), "embarrass");});
test("embassade -> embassad", function() {deepEqual( Stem("embassade"), "embassad");});
test("embassage -> embassag", function() {deepEqual( Stem("embassage"), "embassag");});
test("embassies -> embassi", function() {deepEqual( Stem("embassies"), "embassi");});
test("embassy -> embassi", function() {deepEqual( Stem("embassy"), "embassi");});
test("embattailed -> embattail", function() {deepEqual( Stem("embattailed"), "embattail");});
test("embattl -> embattl", function() {deepEqual( Stem("embattl"), "embattl");});
test("embattle -> embattl", function() {deepEqual( Stem("embattle"), "embattl");});
test("embay -> embai", function() {deepEqual( Stem("embay"), "embai");});
test("embellished -> embellish", function() {deepEqual( Stem("embellished"), "embellish");});
test("embers -> ember", function() {deepEqual( Stem("embers"), "ember");});
test("emblaze -> emblaz", function() {deepEqual( Stem("emblaze"), "emblaz");});
test("emblazoned -> emblazon", function() {deepEqual( Stem("emblazoned"), "emblazon");});
test("emblem -> emblem", function() {deepEqual( Stem("emblem"), "emblem");});
test("emblems -> emblem", function() {deepEqual( Stem("emblems"), "emblem");});
test("embodied -> embodi", function() {deepEqual( Stem("embodied"), "embodi");});
test("embold -> embold", function() {deepEqual( Stem("embold"), "embold");});
test("emboldens -> embolden", function() {deepEqual( Stem("emboldens"), "embolden");});
test("emboss -> emboss", function() {deepEqual( Stem("emboss"), "emboss");});
test("embossed -> emboss", function() {deepEqual( Stem("embossed"), "emboss");});
test("embounded -> embound", function() {deepEqual( Stem("embounded"), "embound");});
test("embowel -> embowel", function() {deepEqual( Stem("embowel"), "embowel");});
test("embowell -> embowel", function() {deepEqual( Stem("embowell"), "embowel");});
test("embrac -> embrac", function() {deepEqual( Stem("embrac"), "embrac");});
test("embrace -> embrac", function() {deepEqual( Stem("embrace"), "embrac");});
test("embraced -> embrac", function() {deepEqual( Stem("embraced"), "embrac");});
test("embracement -> embrac", function() {deepEqual( Stem("embracement"), "embrac");});
test("embracements -> embrac", function() {deepEqual( Stem("embracements"), "embrac");});
test("embraces -> embrac", function() {deepEqual( Stem("embraces"), "embrac");});
test("embracing -> embrac", function() {deepEqual( Stem("embracing"), "embrac");});
test("embrasures -> embrasur", function() {deepEqual( Stem("embrasures"), "embrasur");});
test("embroider -> embroid", function() {deepEqual( Stem("embroider"), "embroid");});
test("embroidered -> embroid", function() {deepEqual( Stem("embroidered"), "embroid");});
test("embroidery -> embroideri", function() {deepEqual( Stem("embroidery"), "embroideri");});
test("emendations -> emend", function() {deepEqual( Stem("emendations"), "emend");});
test("emerged -> emerg", function() {deepEqual( Stem("emerged"), "emerg");});
test("emergencies -> emerg", function() {deepEqual( Stem("emergencies"), "emerg");});
test("emerging -> emerg", function() {deepEqual( Stem("emerging"), "emerg");});
test("emhracing -> emhrac", function() {deepEqual( Stem("emhracing"), "emhrac");});
test("emigrants -> emigr", function() {deepEqual( Stem("emigrants"), "emigr");});
test("emigrate -> emigr", function() {deepEqual( Stem("emigrate"), "emigr");});
test("emigration -> emigr", function() {deepEqual( Stem("emigration"), "emigr");});
test("emigres -> emigr", function() {deepEqual( Stem("emigres"), "emigr");});
test("emilia -> emilia", function() {deepEqual( Stem("emilia"), "emilia");});
test("emily -> emili", function() {deepEqual( Stem("emily"), "emili");});
test("eminence -> emin", function() {deepEqual( Stem("eminence"), "emin");});
test("eminent -> emin", function() {deepEqual( Stem("eminent"), "emin");});
test("eminently -> emin", function() {deepEqual( Stem("eminently"), "emin");});
test("emissaries -> emissari", function() {deepEqual( Stem("emissaries"), "emissari");});
test("emissary -> emissari", function() {deepEqual( Stem("emissary"), "emissari");});
test("emma -> emma", function() {deepEqual( Stem("emma"), "emma");});
test("emmanuel -> emmanuel", function() {deepEqual( Stem("emmanuel"), "emmanuel");});
test("emmy -> emmi", function() {deepEqual( Stem("emmy"), "emmi");});
test("emnity -> emniti", function() {deepEqual( Stem("emnity"), "emniti");});
test("emotion -> emot", function() {deepEqual( Stem("emotion"), "emot");});
test("emotions -> emot", function() {deepEqual( Stem("emotions"), "emot");});
test("empale -> empal", function() {deepEqual( Stem("empale"), "empal");});
test("emperal -> emper", function() {deepEqual( Stem("emperal"), "emper");});
test("emperess -> emperess", function() {deepEqual( Stem("emperess"), "emperess");});
test("empereur -> empereur", function() {deepEqual( Stem("empereur"), "empereur");});
test("emperial -> emperi", function() {deepEqual( Stem("emperial"), "emperi");});
test("emperor -> emperor", function() {deepEqual( Stem("emperor"), "emperor");});
test("emperors -> emperor", function() {deepEqual( Stem("emperors"), "emperor");});
test("empery -> emperi", function() {deepEqual( Stem("empery"), "emperi");});
test("emphasis -> emphasi", function() {deepEqual( Stem("emphasis"), "emphasi");});
test("empire -> empir", function() {deepEqual( Stem("empire"), "empir");});
test("empires -> empir", function() {deepEqual( Stem("empires"), "empir");});
test("empirics -> empir", function() {deepEqual( Stem("empirics"), "empir");});
test("empiricutic -> empiricut", function() {deepEqual( Stem("empiricutic"), "empiricut");});
test("empleached -> empleach", function() {deepEqual( Stem("empleached"), "empleach");});
test("employ -> emploi", function() {deepEqual( Stem("employ"), "emploi");});
test("employed -> emploi", function() {deepEqual( Stem("employed"), "emploi");});
test("employer -> employ", function() {deepEqual( Stem("employer"), "employ");});
test("employers -> employ", function() {deepEqual( Stem("employers"), "employ");});
test("employing -> emploi", function() {deepEqual( Stem("employing"), "emploi");});
test("employment -> employ", function() {deepEqual( Stem("employment"), "employ");});
test("employments -> employ", function() {deepEqual( Stem("employments"), "employ");});
test("employs -> emploi", function() {deepEqual( Stem("employs"), "emploi");});
test("empoison -> empoison", function() {deepEqual( Stem("empoison"), "empoison");});
test("emporium -> emporium", function() {deepEqual( Stem("emporium"), "emporium");});
test("empowered -> empow", function() {deepEqual( Stem("empowered"), "empow");});
test("empress -> empress", function() {deepEqual( Stem("empress"), "empress");});
test("emptied -> empti", function() {deepEqual( Stem("emptied"), "empti");});
test("emptier -> emptier", function() {deepEqual( Stem("emptier"), "emptier");});
test("empties -> empti", function() {deepEqual( Stem("empties"), "empti");});
test("emptiness -> empti", function() {deepEqual( Stem("emptiness"), "empti");});
test("empty -> empti", function() {deepEqual( Stem("empty"), "empti");});
test("emptying -> empti", function() {deepEqual( Stem("emptying"), "empti");});
test("ems -> em", function() {deepEqual( Stem("ems"), "em");});
test("emulate -> emul", function() {deepEqual( Stem("emulate"), "emul");});
test("emulation -> emul", function() {deepEqual( Stem("emulation"), "emul");});
test("emulations -> emul", function() {deepEqual( Stem("emulations"), "emul");});
test("emulator -> emul", function() {deepEqual( Stem("emulator"), "emul");});
test("emulous -> emul", function() {deepEqual( Stem("emulous"), "emul");});
test("en -> en", function() {deepEqual( Stem("en"), "en");});
test("enable -> enabl", function() {deepEqual( Stem("enable"), "enabl");});
test("enabled -> enabl", function() {deepEqual( Stem("enabled"), "enabl");});
test("enabling -> enabl", function() {deepEqual( Stem("enabling"), "enabl");});
test("enact -> enact", function() {deepEqual( Stem("enact"), "enact");});
test("enacted -> enact", function() {deepEqual( Stem("enacted"), "enact");});
test("enacting -> enact", function() {deepEqual( Stem("enacting"), "enact");});
test("enacts -> enact", function() {deepEqual( Stem("enacts"), "enact");});
test("enactures -> enactur", function() {deepEqual( Stem("enactures"), "enactur");});
test("enamel -> enamel", function() {deepEqual( Stem("enamel"), "enamel");});
test("enamell -> enamel", function() {deepEqual( Stem("enamell"), "enamel");});
test("enamelled -> enamel", function() {deepEqual( Stem("enamelled"), "enamel");});
test("enamour -> enamour", function() {deepEqual( Stem("enamour"), "enamour");});
test("enamoured -> enamour", function() {deepEqual( Stem("enamoured"), "enamour");});
test("enanmour -> enanmour", function() {deepEqual( Stem("enanmour"), "enanmour");});
test("encamp -> encamp", function() {deepEqual( Stem("encamp"), "encamp");});
test("encamped -> encamp", function() {deepEqual( Stem("encamped"), "encamp");});
test("encave -> encav", function() {deepEqual( Stem("encave"), "encav");});
test("enceladus -> enceladu", function() {deepEqual( Stem("enceladus"), "enceladu");});
test("enchaf -> enchaf", function() {deepEqual( Stem("enchaf"), "enchaf");});
test("enchafed -> enchaf", function() {deepEqual( Stem("enchafed"), "enchaf");});
test("enchant -> enchant", function() {deepEqual( Stem("enchant"), "enchant");});
test("enchanted -> enchant", function() {deepEqual( Stem("enchanted"), "enchant");});
test("enchanting -> enchant", function() {deepEqual( Stem("enchanting"), "enchant");});
test("enchantingly -> enchantingli", function() {deepEqual( Stem("enchantingly"), "enchantingli");});
test("enchantment -> enchant", function() {deepEqual( Stem("enchantment"), "enchant");});
test("enchantress -> enchantress", function() {deepEqual( Stem("enchantress"), "enchantress");});
test("enchants -> enchant", function() {deepEqual( Stem("enchants"), "enchant");});
test("enchas -> encha", function() {deepEqual( Stem("enchas"), "encha");});
test("encircle -> encircl", function() {deepEqual( Stem("encircle"), "encircl");});
test("encircled -> encircl", function() {deepEqual( Stem("encircled"), "encircl");});
test("enclos -> enclo", function() {deepEqual( Stem("enclos"), "enclo");});
test("enclose -> enclos", function() {deepEqual( Stem("enclose"), "enclos");});
test("enclosed -> enclos", function() {deepEqual( Stem("enclosed"), "enclos");});
test("encloses -> enclos", function() {deepEqual( Stem("encloses"), "enclos");});
test("encloseth -> encloseth", function() {deepEqual( Stem("encloseth"), "encloseth");});
test("enclosing -> enclos", function() {deepEqual( Stem("enclosing"), "enclos");});
test("enclouded -> encloud", function() {deepEqual( Stem("enclouded"), "encloud");});
test("encompass -> encompass", function() {deepEqual( Stem("encompass"), "encompass");});
test("encompassed -> encompass", function() {deepEqual( Stem("encompassed"), "encompass");});
test("encompasseth -> encompasseth", function() {deepEqual( Stem("encompasseth"), "encompasseth");});
test("encompassment -> encompass", function() {deepEqual( Stem("encompassment"), "encompass");});
test("encore -> encor", function() {deepEqual( Stem("encore"), "encor");});
test("encoring -> encor", function() {deepEqual( Stem("encoring"), "encor");});
test("encorporal -> encorpor", function() {deepEqual( Stem("encorporal"), "encorpor");});
test("encount -> encount", function() {deepEqual( Stem("encount"), "encount");});
test("encounter -> encount", function() {deepEqual( Stem("encounter"), "encount");});
test("encountered -> encount", function() {deepEqual( Stem("encountered"), "encount");});
test("encountering -> encount", function() {deepEqual( Stem("encountering"), "encount");});
test("encounters -> encount", function() {deepEqual( Stem("encounters"), "encount");});
test("encourage -> encourag", function() {deepEqual( Stem("encourage"), "encourag");});
test("encouraged -> encourag", function() {deepEqual( Stem("encouraged"), "encourag");});
test("encouragement -> encourag", function() {deepEqual( Stem("encouragement"), "encourag");});
test("encouraging -> encourag", function() {deepEqual( Stem("encouraging"), "encourag");});
test("encouragingly -> encouragingli", function() {deepEqual( Stem("encouragingly"), "encouragingli");});
test("encrimsoned -> encrimson", function() {deepEqual( Stem("encrimsoned"), "encrimson");});
test("encroaching -> encroach", function() {deepEqual( Stem("encroaching"), "encroach");});
test("encumb -> encumb", function() {deepEqual( Stem("encumb"), "encumb");});
test("encumbered -> encumb", function() {deepEqual( Stem("encumbered"), "encumb");});
test("end -> end", function() {deepEqual( Stem("end"), "end");});
test("endamage -> endamag", function() {deepEqual( Stem("endamage"), "endamag");});
test("endamagement -> endamag", function() {deepEqual( Stem("endamagement"), "endamag");});
test("endanger -> endang", function() {deepEqual( Stem("endanger"), "endang");});
test("endangering -> endang", function() {deepEqual( Stem("endangering"), "endang");});
test("endart -> endart", function() {deepEqual( Stem("endart"), "endart");});
test("endear -> endear", function() {deepEqual( Stem("endear"), "endear");});
test("endeared -> endear", function() {deepEqual( Stem("endeared"), "endear");});
test("endearment -> endear", function() {deepEqual( Stem("endearment"), "endear");});
test("endearments -> endear", function() {deepEqual( Stem("endearments"), "endear");});
test("endeavour -> endeavour", function() {deepEqual( Stem("endeavour"), "endeavour");});
test("endeavoured -> endeavour", function() {deepEqual( Stem("endeavoured"), "endeavour");});
test("endeavouring -> endeavour", function() {deepEqual( Stem("endeavouring"), "endeavour");});
test("endeavours -> endeavour", function() {deepEqual( Stem("endeavours"), "endeavour");});
test("ended -> end", function() {deepEqual( Stem("ended"), "end");});
test("ender -> ender", function() {deepEqual( Stem("ender"), "ender");});
test("ending -> end", function() {deepEqual( Stem("ending"), "end");});
test("endings -> end", function() {deepEqual( Stem("endings"), "end");});
test("endite -> endit", function() {deepEqual( Stem("endite"), "endit");});
test("endless -> endless", function() {deepEqual( Stem("endless"), "endless");});
test("endow -> endow", function() {deepEqual( Stem("endow"), "endow");});
test("endowed -> endow", function() {deepEqual( Stem("endowed"), "endow");});
test("endowments -> endow", function() {deepEqual( Stem("endowments"), "endow");});
test("endows -> endow", function() {deepEqual( Stem("endows"), "endow");});
test("ends -> end", function() {deepEqual( Stem("ends"), "end");});
test("endu -> endu", function() {deepEqual( Stem("endu"), "endu");});
test("endue -> endu", function() {deepEqual( Stem("endue"), "endu");});
test("endur -> endur", function() {deepEqual( Stem("endur"), "endur");});
test("endurance -> endur", function() {deepEqual( Stem("endurance"), "endur");});
test("endure -> endur", function() {deepEqual( Stem("endure"), "endur");});
test("endured -> endur", function() {deepEqual( Stem("endured"), "endur");});
test("endures -> endur", function() {deepEqual( Stem("endures"), "endur");});
test("enduring -> endur", function() {deepEqual( Stem("enduring"), "endur");});
test("endymion -> endymion", function() {deepEqual( Stem("endymion"), "endymion");});
test("eneas -> enea", function() {deepEqual( Stem("eneas"), "enea");});
test("enemies -> enemi", function() {deepEqual( Stem("enemies"), "enemi");});
test("enemy -> enemi", function() {deepEqual( Stem("enemy"), "enemi");});
test("energetic -> energet", function() {deepEqual( Stem("energetic"), "energet");});
test("energetically -> energet", function() {deepEqual( Stem("energetically"), "energet");});
test("energies -> energi", function() {deepEqual( Stem("energies"), "energi");});
test("energy -> energi", function() {deepEqual( Stem("energy"), "energi");});
test("enernies -> enerni", function() {deepEqual( Stem("enernies"), "enerni");});
test("enew -> enew", function() {deepEqual( Stem("enew"), "enew");});
test("enfant -> enfant", function() {deepEqual( Stem("enfant"), "enfant");});
test("enfeebled -> enfeebl", function() {deepEqual( Stem("enfeebled"), "enfeebl");});
test("enfeebles -> enfeebl", function() {deepEqual( Stem("enfeebles"), "enfeebl");});
test("enfeoff -> enfeoff", function() {deepEqual( Stem("enfeoff"), "enfeoff");});
test("enfetter -> enfett", function() {deepEqual( Stem("enfetter"), "enfett");});
test("enfoldings -> enfold", function() {deepEqual( Stem("enfoldings"), "enfold");});
test("enforc -> enforc", function() {deepEqual( Stem("enforc"), "enforc");});
test("enforce -> enforc", function() {deepEqual( Stem("enforce"), "enforc");});
test("enforced -> enforc", function() {deepEqual( Stem("enforced"), "enforc");});
test("enforcedly -> enforcedli", function() {deepEqual( Stem("enforcedly"), "enforcedli");});
test("enforcement -> enforc", function() {deepEqual( Stem("enforcement"), "enforc");});
test("enforces -> enforc", function() {deepEqual( Stem("enforces"), "enforc");});
test("enforcest -> enforcest", function() {deepEqual( Stem("enforcest"), "enforcest");});
test("enfranched -> enfranch", function() {deepEqual( Stem("enfranched"), "enfranch");});
test("enfranchis -> enfranchi", function() {deepEqual( Stem("enfranchis"), "enfranchi");});
test("enfranchise -> enfranchis", function() {deepEqual( Stem("enfranchise"), "enfranchis");});
test("enfranchised -> enfranchis", function() {deepEqual( Stem("enfranchised"), "enfranchis");});
test("enfranchisement -> enfranchis", function() {deepEqual( Stem("enfranchisement"), "enfranchis");});
test("enfreed -> enfre", function() {deepEqual( Stem("enfreed"), "enfre");});
test("enfreedoming -> enfreedom", function() {deepEqual( Stem("enfreedoming"), "enfreedom");});
test("engag -> engag", function() {deepEqual( Stem("engag"), "engag");});
test("engage -> engag", function() {deepEqual( Stem("engage"), "engag");});
test("engaged -> engag", function() {deepEqual( Stem("engaged"), "engag");});
test("engagement -> engag", function() {deepEqual( Stem("engagement"), "engag");});
test("engagements -> engag", function() {deepEqual( Stem("engagements"), "engag");});
test("engaging -> engag", function() {deepEqual( Stem("engaging"), "engag");});
test("engaol -> engaol", function() {deepEqual( Stem("engaol"), "engaol");});
test("engend -> engend", function() {deepEqual( Stem("engend"), "engend");});
test("engender -> engend", function() {deepEqual( Stem("engender"), "engend");});
test("engenders -> engend", function() {deepEqual( Stem("engenders"), "engend");});
test("engilds -> engild", function() {deepEqual( Stem("engilds"), "engild");});
test("engine -> engin", function() {deepEqual( Stem("engine"), "engin");});
test("engineer -> engin", function() {deepEqual( Stem("engineer"), "engin");});
test("engineers -> engin", function() {deepEqual( Stem("engineers"), "engin");});
test("enginer -> engin", function() {deepEqual( Stem("enginer"), "engin");});
test("engines -> engin", function() {deepEqual( Stem("engines"), "engin");});
test("engirt -> engirt", function() {deepEqual( Stem("engirt"), "engirt");});
test("england -> england", function() {deepEqual( Stem("england"), "england");});
test("englanderinn -> englanderinn", function() {deepEqual( Stem("englanderinn"), "englanderinn");});
test("english -> english", function() {deepEqual( Stem("english"), "english");});
test("englishman -> englishman", function() {deepEqual( Stem("englishman"), "englishman");});
test("englishmen -> englishmen", function() {deepEqual( Stem("englishmen"), "englishmen");});
test("englishwomen -> englishwomen", function() {deepEqual( Stem("englishwomen"), "englishwomen");});
test("engluts -> englut", function() {deepEqual( Stem("engluts"), "englut");});
test("englutted -> englut", function() {deepEqual( Stem("englutted"), "englut");});
test("engoument -> engoument", function() {deepEqual( Stem("engoument"), "engoument");});
test("engraffed -> engraf", function() {deepEqual( Stem("engraffed"), "engraf");});
test("engraft -> engraft", function() {deepEqual( Stem("engraft"), "engraft");});
test("engrafted -> engraft", function() {deepEqual( Stem("engrafted"), "engraft");});
test("engrav -> engrav", function() {deepEqual( Stem("engrav"), "engrav");});
test("engrave -> engrav", function() {deepEqual( Stem("engrave"), "engrav");});
test("engraved -> engrav", function() {deepEqual( Stem("engraved"), "engrav");});
test("engraven -> engraven", function() {deepEqual( Stem("engraven"), "engraven");});
test("engross -> engross", function() {deepEqual( Stem("engross"), "engross");});
test("engrossed -> engross", function() {deepEqual( Stem("engrossed"), "engross");});
test("engrossest -> engrossest", function() {deepEqual( Stem("engrossest"), "engrossest");});
test("engrossing -> engross", function() {deepEqual( Stem("engrossing"), "engross");});
test("engrossments -> engross", function() {deepEqual( Stem("engrossments"), "engross");});
test("enguard -> enguard", function() {deepEqual( Stem("enguard"), "enguard");});
test("enhanced -> enhanc", function() {deepEqual( Stem("enhanced"), "enhanc");});
test("enigma -> enigma", function() {deepEqual( Stem("enigma"), "enigma");});
test("enigmatical -> enigmat", function() {deepEqual( Stem("enigmatical"), "enigmat");});
test("enigmatically -> enigmat", function() {deepEqual( Stem("enigmatically"), "enigmat");});
test("enjoin -> enjoin", function() {deepEqual( Stem("enjoin"), "enjoin");});
test("enjoined -> enjoin", function() {deepEqual( Stem("enjoined"), "enjoin");});
test("enjoining -> enjoin", function() {deepEqual( Stem("enjoining"), "enjoin");});
test("enjoy -> enjoi", function() {deepEqual( Stem("enjoy"), "enjoi");});
test("enjoyed -> enjoi", function() {deepEqual( Stem("enjoyed"), "enjoi");});
test("enjoyer -> enjoy", function() {deepEqual( Stem("enjoyer"), "enjoy");});
test("enjoying -> enjoi", function() {deepEqual( Stem("enjoying"), "enjoi");});
test("enjoyment -> enjoy", function() {deepEqual( Stem("enjoyment"), "enjoy");});
test("enjoyments -> enjoy", function() {deepEqual( Stem("enjoyments"), "enjoy");});
test("enjoys -> enjoi", function() {deepEqual( Stem("enjoys"), "enjoi");});
test("enkindle -> enkindl", function() {deepEqual( Stem("enkindle"), "enkindl");});
test("enkindled -> enkindl", function() {deepEqual( Stem("enkindled"), "enkindl");});
test("enlard -> enlard", function() {deepEqual( Stem("enlard"), "enlard");});
test("enlarg -> enlarg", function() {deepEqual( Stem("enlarg"), "enlarg");});
test("enlarge -> enlarg", function() {deepEqual( Stem("enlarge"), "enlarg");});
test("enlarged -> enlarg", function() {deepEqual( Stem("enlarged"), "enlarg");});
test("enlargement -> enlarg", function() {deepEqual( Stem("enlargement"), "enlarg");});
test("enlargeth -> enlargeth", function() {deepEqual( Stem("enlargeth"), "enlargeth");});
test("enlighten -> enlighten", function() {deepEqual( Stem("enlighten"), "enlighten");});
test("enlightened -> enlighten", function() {deepEqual( Stem("enlightened"), "enlighten");});
test("enlink -> enlink", function() {deepEqual( Stem("enlink"), "enlink");});
test("enlist -> enlist", function() {deepEqual( Stem("enlist"), "enlist");});
test("enlisted -> enlist", function() {deepEqual( Stem("enlisted"), "enlist");});
test("enliven -> enliven", function() {deepEqual( Stem("enliven"), "enliven");});
test("enlivened -> enliven", function() {deepEqual( Stem("enlivened"), "enliven");});
test("enlivening -> enliven", function() {deepEqual( Stem("enlivening"), "enliven");});
test("enmesh -> enmesh", function() {deepEqual( Stem("enmesh"), "enmesh");});
test("enmities -> enmiti", function() {deepEqual( Stem("enmities"), "enmiti");});
test("enmity -> enmiti", function() {deepEqual( Stem("enmity"), "enmiti");});
test("ennoble -> ennobl", function() {deepEqual( Stem("ennoble"), "ennobl");});
test("ennobled -> ennobl", function() {deepEqual( Stem("ennobled"), "ennobl");});
test("ennui -> ennui", function() {deepEqual( Stem("ennui"), "ennui");});
test("ennuis -> ennui", function() {deepEqual( Stem("ennuis"), "ennui");});
test("enobarb -> enobarb", function() {deepEqual( Stem("enobarb"), "enobarb");});
test("enobarbus -> enobarbu", function() {deepEqual( Stem("enobarbus"), "enobarbu");});
test("enon -> enon", function() {deepEqual( Stem("enon"), "enon");});
test("enormity -> enorm", function() {deepEqual( Stem("enormity"), "enorm");});
test("enormous -> enorm", function() {deepEqual( Stem("enormous"), "enorm");});
test("enormously -> enorm", function() {deepEqual( Stem("enormously"), "enorm");});
test("enough -> enough", function() {deepEqual( Stem("enough"), "enough");});
test("enow -> enow", function() {deepEqual( Stem("enow"), "enow");});
test("enpatron -> enpatron", function() {deepEqual( Stem("enpatron"), "enpatron");});
test("enpierced -> enpierc", function() {deepEqual( Stem("enpierced"), "enpierc");});
test("enquir -> enquir", function() {deepEqual( Stem("enquir"), "enquir");});
test("enquire -> enquir", function() {deepEqual( Stem("enquire"), "enquir");});
test("enquired -> enquir", function() {deepEqual( Stem("enquired"), "enquir");});
test("enrag -> enrag", function() {deepEqual( Stem("enrag"), "enrag");});
test("enrage -> enrag", function() {deepEqual( Stem("enrage"), "enrag");});
test("enraged -> enrag", function() {deepEqual( Stem("enraged"), "enrag");});
test("enrages -> enrag", function() {deepEqual( Stem("enrages"), "enrag");});
test("enrank -> enrank", function() {deepEqual( Stem("enrank"), "enrank");});
test("enrapt -> enrapt", function() {deepEqual( Stem("enrapt"), "enrapt");});
test("enraptured -> enraptur", function() {deepEqual( Stem("enraptured"), "enraptur");});
test("enrich -> enrich", function() {deepEqual( Stem("enrich"), "enrich");});
test("enriched -> enrich", function() {deepEqual( Stem("enriched"), "enrich");});
test("enriches -> enrich", function() {deepEqual( Stem("enriches"), "enrich");});
test("enridged -> enridg", function() {deepEqual( Stem("enridged"), "enridg");});
test("enrings -> enr", function() {deepEqual( Stem("enrings"), "enr");});
test("enrob -> enrob", function() {deepEqual( Stem("enrob"), "enrob");});
test("enrobe -> enrob", function() {deepEqual( Stem("enrobe"), "enrob");});
test("enroll -> enrol", function() {deepEqual( Stem("enroll"), "enrol");});
test("enrolled -> enrol", function() {deepEqual( Stem("enrolled"), "enrol");});
test("enrooted -> enroot", function() {deepEqual( Stem("enrooted"), "enroot");});
test("enrounded -> enround", function() {deepEqual( Stem("enrounded"), "enround");});
test("enschedul -> enschedul", function() {deepEqual( Stem("enschedul"), "enschedul");});
test("ensconce -> ensconc", function() {deepEqual( Stem("ensconce"), "ensconc");});
test("ensconced -> ensconc", function() {deepEqual( Stem("ensconced"), "ensconc");});
test("ensconcing -> ensconc", function() {deepEqual( Stem("ensconcing"), "ensconc");});
test("enseamed -> enseam", function() {deepEqual( Stem("enseamed"), "enseam");});
test("ensear -> ensear", function() {deepEqual( Stem("ensear"), "ensear");});
test("enseigne -> enseign", function() {deepEqual( Stem("enseigne"), "enseign");});
test("enseignez -> enseignez", function() {deepEqual( Stem("enseignez"), "enseignez");});
test("ensemble -> ensembl", function() {deepEqual( Stem("ensemble"), "ensembl");});
test("enshelter -> enshelt", function() {deepEqual( Stem("enshelter"), "enshelt");});
test("enshielded -> enshield", function() {deepEqual( Stem("enshielded"), "enshield");});
test("enshrines -> enshrin", function() {deepEqual( Stem("enshrines"), "enshrin");});
test("ensign -> ensign", function() {deepEqual( Stem("ensign"), "ensign");});
test("ensigns -> ensign", function() {deepEqual( Stem("ensigns"), "ensign");});
test("enskied -> enski", function() {deepEqual( Stem("enskied"), "enski");});
test("ensman -> ensman", function() {deepEqual( Stem("ensman"), "ensman");});
test("ensnare -> ensnar", function() {deepEqual( Stem("ensnare"), "ensnar");});
test("ensnared -> ensnar", function() {deepEqual( Stem("ensnared"), "ensnar");});
test("ensnareth -> ensnareth", function() {deepEqual( Stem("ensnareth"), "ensnareth");});
test("ensteep -> ensteep", function() {deepEqual( Stem("ensteep"), "ensteep");});
test("ensu -> ensu", function() {deepEqual( Stem("ensu"), "ensu");});
test("ensue -> ensu", function() {deepEqual( Stem("ensue"), "ensu");});
test("ensued -> ensu", function() {deepEqual( Stem("ensued"), "ensu");});
test("ensues -> ensu", function() {deepEqual( Stem("ensues"), "ensu");});
test("ensuing -> ensu", function() {deepEqual( Stem("ensuing"), "ensu");});
test("enswathed -> enswath", function() {deepEqual( Stem("enswathed"), "enswath");});
test("ent -> ent", function() {deepEqual( Stem("ent"), "ent");});
test("entail -> entail", function() {deepEqual( Stem("entail"), "entail");});
test("entame -> entam", function() {deepEqual( Stem("entame"), "entam");});
test("entangled -> entangl", function() {deepEqual( Stem("entangled"), "entangl");});
test("entangles -> entangl", function() {deepEqual( Stem("entangles"), "entangl");});
test("entendre -> entendr", function() {deepEqual( Stem("entendre"), "entendr");});
test("enter -> enter", function() {deepEqual( Stem("enter"), "enter");});
test("entered -> enter", function() {deepEqual( Stem("entered"), "enter");});
test("entering -> enter", function() {deepEqual( Stem("entering"), "enter");});
test("enterprise -> enterpris", function() {deepEqual( Stem("enterprise"), "enterpris");});
test("enterprises -> enterpris", function() {deepEqual( Stem("enterprises"), "enterpris");});
test("enterprising -> enterpris", function() {deepEqual( Stem("enterprising"), "enterpris");});
test("enters -> enter", function() {deepEqual( Stem("enters"), "enter");});
test("entertain -> entertain", function() {deepEqual( Stem("entertain"), "entertain");});
test("entertained -> entertain", function() {deepEqual( Stem("entertained"), "entertain");});
test("entertainer -> entertain", function() {deepEqual( Stem("entertainer"), "entertain");});
test("entertaining -> entertain", function() {deepEqual( Stem("entertaining"), "entertain");});
test("entertainment -> entertain", function() {deepEqual( Stem("entertainment"), "entertain");});
test("entertainments -> entertain", function() {deepEqual( Stem("entertainments"), "entertain");});
test("entertains -> entertain", function() {deepEqual( Stem("entertains"), "entertain");});
test("enthrall -> enthral", function() {deepEqual( Stem("enthrall"), "enthral");});
test("enthralled -> enthral", function() {deepEqual( Stem("enthralled"), "enthral");});
test("enthron -> enthron", function() {deepEqual( Stem("enthron"), "enthron");});
test("enthroned -> enthron", function() {deepEqual( Stem("enthroned"), "enthron");});
test("enthusiasm -> enthusiasm", function() {deepEqual( Stem("enthusiasm"), "enthusiasm");});
test("enthusiast -> enthusiast", function() {deepEqual( Stem("enthusiast"), "enthusiast");});
test("enthusiastic -> enthusiast", function() {deepEqual( Stem("enthusiastic"), "enthusiast");});
test("enthusiastically -> enthusiast", function() {deepEqual( Stem("enthusiastically"), "enthusiast");});
test("entice -> entic", function() {deepEqual( Stem("entice"), "entic");});
test("enticements -> entic", function() {deepEqual( Stem("enticements"), "entic");});
test("enticing -> entic", function() {deepEqual( Stem("enticing"), "entic");});
test("entire -> entir", function() {deepEqual( Stem("entire"), "entir");});
test("entirely -> entir", function() {deepEqual( Stem("entirely"), "entir");});
test("entitle -> entitl", function() {deepEqual( Stem("entitle"), "entitl");});
test("entitled -> entitl", function() {deepEqual( Stem("entitled"), "entitl");});
test("entitling -> entitl", function() {deepEqual( Stem("entitling"), "entitl");});
test("entomb -> entomb", function() {deepEqual( Stem("entomb"), "entomb");});
test("entombed -> entomb", function() {deepEqual( Stem("entombed"), "entomb");});
test("entomological -> entomolog", function() {deepEqual( Stem("entomological"), "entomolog");});
test("entrails -> entrail", function() {deepEqual( Stem("entrails"), "entrail");});
test("entrance -> entranc", function() {deepEqual( Stem("entrance"), "entranc");});
test("entrances -> entranc", function() {deepEqual( Stem("entrances"), "entranc");});
test("entrap -> entrap", function() {deepEqual( Stem("entrap"), "entrap");});
test("entrapp -> entrapp", function() {deepEqual( Stem("entrapp"), "entrapp");});
test("entre -> entr", function() {deepEqual( Stem("entre"), "entr");});
test("entreat -> entreat", function() {deepEqual( Stem("entreat"), "entreat");});
test("entreated -> entreat", function() {deepEqual( Stem("entreated"), "entreat");});
test("entreaties -> entreati", function() {deepEqual( Stem("entreaties"), "entreati");});
test("entreating -> entreat", function() {deepEqual( Stem("entreating"), "entreat");});
test("entreatments -> entreat", function() {deepEqual( Stem("entreatments"), "entreat");});
test("entreats -> entreat", function() {deepEqual( Stem("entreats"), "entreat");});
test("entreaty -> entreati", function() {deepEqual( Stem("entreaty"), "entreati");});
test("entrechats -> entrechat", function() {deepEqual( Stem("entrechats"), "entrechat");});
test("entree -> entre", function() {deepEqual( Stem("entree"), "entre");});
test("entrees -> entre", function() {deepEqual( Stem("entrees"), "entre");});
test("entrench -> entrench", function() {deepEqual( Stem("entrench"), "entrench");});
test("entresol -> entresol", function() {deepEqual( Stem("entresol"), "entresol");});
test("entrez -> entrez", function() {deepEqual( Stem("entrez"), "entrez");});
test("entrusted -> entrust", function() {deepEqual( Stem("entrusted"), "entrust");});
test("entry -> entri", function() {deepEqual( Stem("entry"), "entri");});
test("entwist -> entwist", function() {deepEqual( Stem("entwist"), "entwist");});
test("enumerated -> enumer", function() {deepEqual( Stem("enumerated"), "enumer");});
test("enumeration -> enumer", function() {deepEqual( Stem("enumeration"), "enumer");});
test("envelop -> envelop", function() {deepEqual( Stem("envelop"), "envelop");});
test("envelope -> envelop", function() {deepEqual( Stem("envelope"), "envelop");});
test("enveloped -> envelop", function() {deepEqual( Stem("enveloped"), "envelop");});
test("envelopes -> envelop", function() {deepEqual( Stem("envelopes"), "envelop");});
test("envenom -> envenom", function() {deepEqual( Stem("envenom"), "envenom");});
test("envenomed -> envenom", function() {deepEqual( Stem("envenomed"), "envenom");});
test("envenoms -> envenom", function() {deepEqual( Stem("envenoms"), "envenom");});
test("envied -> envi", function() {deepEqual( Stem("envied"), "envi");});
test("envies -> envi", function() {deepEqual( Stem("envies"), "envi");});
test("envious -> enviou", function() {deepEqual( Stem("envious"), "enviou");});
test("enviously -> envious", function() {deepEqual( Stem("enviously"), "envious");});
test("environ -> environ", function() {deepEqual( Stem("environ"), "environ");});
test("environed -> environ", function() {deepEqual( Stem("environed"), "environ");});
test("envoy -> envoi", function() {deepEqual( Stem("envoy"), "envoi");});
test("envy -> envi", function() {deepEqual( Stem("envy"), "envi");});
test("envying -> envi", function() {deepEqual( Stem("envying"), "envi");});
test("enwheel -> enwheel", function() {deepEqual( Stem("enwheel"), "enwheel");});
test("enwombed -> enwomb", function() {deepEqual( Stem("enwombed"), "enwomb");});
test("enwraps -> enwrap", function() {deepEqual( Stem("enwraps"), "enwrap");});
test("eothen -> eothen", function() {deepEqual( Stem("eothen"), "eothen");});
test("epaulet -> epaulet", function() {deepEqual( Stem("epaulet"), "epaulet");});
test("epaulets -> epaulet", function() {deepEqual( Stem("epaulets"), "epaulet");});
test("ephesian -> ephesian", function() {deepEqual( Stem("ephesian"), "ephesian");});
test("ephesians -> ephesian", function() {deepEqual( Stem("ephesians"), "ephesian");});
test("ephesus -> ephesu", function() {deepEqual( Stem("ephesus"), "ephesu");});
test("epicure -> epicur", function() {deepEqual( Stem("epicure"), "epicur");});
test("epicurean -> epicurean", function() {deepEqual( Stem("epicurean"), "epicurean");});
test("epicures -> epicur", function() {deepEqual( Stem("epicures"), "epicur");});
test("epicurism -> epicur", function() {deepEqual( Stem("epicurism"), "epicur");});
test("epicurus -> epicuru", function() {deepEqual( Stem("epicurus"), "epicuru");});
test("epidamnum -> epidamnum", function() {deepEqual( Stem("epidamnum"), "epidamnum");});
test("epidaurus -> epidauru", function() {deepEqual( Stem("epidaurus"), "epidauru");});
test("epigram -> epigram", function() {deepEqual( Stem("epigram"), "epigram");});
test("epigrams -> epigram", function() {deepEqual( Stem("epigrams"), "epigram");});
test("epilepsy -> epilepsi", function() {deepEqual( Stem("epilepsy"), "epilepsi");});
test("epileptic -> epilept", function() {deepEqual( Stem("epileptic"), "epilept");});
test("epilogue -> epilogu", function() {deepEqual( Stem("epilogue"), "epilogu");});
test("epilogues -> epilogu", function() {deepEqual( Stem("epilogues"), "epilogu");});
test("episode -> episod", function() {deepEqual( Stem("episode"), "episod");});
test("epistle -> epistl", function() {deepEqual( Stem("epistle"), "epistl");});
test("epistles -> epistl", function() {deepEqual( Stem("epistles"), "epistl");});
test("epistolarily -> epistolarili", function() {deepEqual( Stem("epistolarily"), "epistolarili");});
test("epistrophus -> epistrophu", function() {deepEqual( Stem("epistrophus"), "epistrophu");});
test("epitaph -> epitaph", function() {deepEqual( Stem("epitaph"), "epitaph");});
test("epitaphs -> epitaph", function() {deepEqual( Stem("epitaphs"), "epitaph");});
test("epithet -> epithet", function() {deepEqual( Stem("epithet"), "epithet");});
test("epitheton -> epitheton", function() {deepEqual( Stem("epitheton"), "epitheton");});
test("epithets -> epithet", function() {deepEqual( Stem("epithets"), "epithet");});
test("epitome -> epitom", function() {deepEqual( Stem("epitome"), "epitom");});
test("epris -> epri", function() {deepEqual( Stem("epris"), "epri");});
test("equal -> equal", function() {deepEqual( Stem("equal"), "equal");});
test("equalities -> equal", function() {deepEqual( Stem("equalities"), "equal");});
test("equality -> equal", function() {deepEqual( Stem("equality"), "equal");});
test("equalizing -> equal", function() {deepEqual( Stem("equalizing"), "equal");});
test("equall -> equal", function() {deepEqual( Stem("equall"), "equal");});
test("equally -> equal", function() {deepEqual( Stem("equally"), "equal");});
test("equalness -> equal", function() {deepEqual( Stem("equalness"), "equal");});
test("equals -> equal", function() {deepEqual( Stem("equals"), "equal");});
test("equanimity -> equanim", function() {deepEqual( Stem("equanimity"), "equanim");});
test("equerries -> equerri", function() {deepEqual( Stem("equerries"), "equerri");});
test("equestrian -> equestrian", function() {deepEqual( Stem("equestrian"), "equestrian");});
test("equinoctial -> equinocti", function() {deepEqual( Stem("equinoctial"), "equinocti");});
test("equinox -> equinox", function() {deepEqual( Stem("equinox"), "equinox");});
test("equipage -> equipag", function() {deepEqual( Stem("equipage"), "equipag");});
test("equipages -> equipag", function() {deepEqual( Stem("equipages"), "equipag");});
test("equipments -> equip", function() {deepEqual( Stem("equipments"), "equip");});
test("equity -> equiti", function() {deepEqual( Stem("equity"), "equiti");});
test("equivalent -> equival", function() {deepEqual( Stem("equivalent"), "equival");});
test("equivocal -> equivoc", function() {deepEqual( Stem("equivocal"), "equivoc");});
test("equivocate -> equivoc", function() {deepEqual( Stem("equivocate"), "equivoc");});
test("equivocates -> equivoc", function() {deepEqual( Stem("equivocates"), "equivoc");});
test("equivocation -> equivoc", function() {deepEqual( Stem("equivocation"), "equivoc");});
test("equivocator -> equivoc", function() {deepEqual( Stem("equivocator"), "equivoc");});
test("er -> er", function() {deepEqual( Stem("er"), "er");});
test("erbear -> erbear", function() {deepEqual( Stem("erbear"), "erbear");});
test("erbearing -> erbear", function() {deepEqual( Stem("erbearing"), "erbear");});
test("erbears -> erbear", function() {deepEqual( Stem("erbears"), "erbear");});
test("erbeat -> erbeat", function() {deepEqual( Stem("erbeat"), "erbeat");});
test("erblows -> erblow", function() {deepEqual( Stem("erblows"), "erblow");});
test("erboard -> erboard", function() {deepEqual( Stem("erboard"), "erboard");});
test("erborne -> erborn", function() {deepEqual( Stem("erborne"), "erborn");});
test("erbprinz -> erbprinz", function() {deepEqual( Stem("erbprinz"), "erbprinz");});
test("ercame -> ercam", function() {deepEqual( Stem("ercame"), "ercam");});
test("ercast -> ercast", function() {deepEqual( Stem("ercast"), "ercast");});
test("ercharg -> ercharg", function() {deepEqual( Stem("ercharg"), "ercharg");});
test("ercharged -> ercharg", function() {deepEqual( Stem("ercharged"), "ercharg");});
test("ercharging -> ercharg", function() {deepEqual( Stem("ercharging"), "ercharg");});
test("ercles -> ercl", function() {deepEqual( Stem("ercles"), "ercl");});
test("ercome -> ercom", function() {deepEqual( Stem("ercome"), "ercom");});
test("ercover -> ercov", function() {deepEqual( Stem("ercover"), "ercov");});
test("ercrows -> ercrow", function() {deepEqual( Stem("ercrows"), "ercrow");});
test("erdoing -> erdo", function() {deepEqual( Stem("erdoing"), "erdo");});
test("ere -> er", function() {deepEqual( Stem("ere"), "er");});
test("erebus -> erebu", function() {deepEqual( Stem("erebus"), "erebu");});
test("erect -> erect", function() {deepEqual( Stem("erect"), "erect");});
test("erected -> erect", function() {deepEqual( Stem("erected"), "erect");});
test("erecting -> erect", function() {deepEqual( Stem("erecting"), "erect");});
test("erection -> erect", function() {deepEqual( Stem("erection"), "erect");});
test("erects -> erect", function() {deepEqual( Stem("erects"), "erect");});
test("erewhile -> erewhil", function() {deepEqual( Stem("erewhile"), "erewhil");});
test("erflourish -> erflourish", function() {deepEqual( Stem("erflourish"), "erflourish");});
test("erflow -> erflow", function() {deepEqual( Stem("erflow"), "erflow");});
test("erflowing -> erflow", function() {deepEqual( Stem("erflowing"), "erflow");});
test("erflows -> erflow", function() {deepEqual( Stem("erflows"), "erflow");});
test("erfraught -> erfraught", function() {deepEqual( Stem("erfraught"), "erfraught");});
test("erga -> erga", function() {deepEqual( Stem("erga"), "erga");});
test("ergalled -> ergal", function() {deepEqual( Stem("ergalled"), "ergal");});
test("erglanced -> erglanc", function() {deepEqual( Stem("erglanced"), "erglanc");});
test("ergo -> ergo", function() {deepEqual( Stem("ergo"), "ergo");});
test("ergone -> ergon", function() {deepEqual( Stem("ergone"), "ergon");});
test("ergrow -> ergrow", function() {deepEqual( Stem("ergrow"), "ergrow");});
test("ergrown -> ergrown", function() {deepEqual( Stem("ergrown"), "ergrown");});
test("ergrowth -> ergrowth", function() {deepEqual( Stem("ergrowth"), "ergrowth");});
test("erhang -> erhang", function() {deepEqual( Stem("erhang"), "erhang");});
test("erhanging -> erhang", function() {deepEqual( Stem("erhanging"), "erhang");});
test("erhasty -> erhasti", function() {deepEqual( Stem("erhasty"), "erhasti");});
test("erhear -> erhear", function() {deepEqual( Stem("erhear"), "erhear");});
test("erheard -> erheard", function() {deepEqual( Stem("erheard"), "erheard");});
test("eringoes -> eringo", function() {deepEqual( Stem("eringoes"), "eringo");});
test("erjoy -> erjoi", function() {deepEqual( Stem("erjoy"), "erjoi");});
test("erleap -> erleap", function() {deepEqual( Stem("erleap"), "erleap");});
test("erleaps -> erleap", function() {deepEqual( Stem("erleaps"), "erleap");});
test("erleavens -> erleaven", function() {deepEqual( Stem("erleavens"), "erleaven");});
test("erlebt -> erlebt", function() {deepEqual( Stem("erlebt"), "erlebt");});
test("erlook -> erlook", function() {deepEqual( Stem("erlook"), "erlook");});
test("erlooking -> erlook", function() {deepEqual( Stem("erlooking"), "erlook");});
test("erly -> erli", function() {deepEqual( Stem("erly"), "erli");});
test("ermaster -> ermast", function() {deepEqual( Stem("ermaster"), "ermast");});
test("ermengare -> ermengar", function() {deepEqual( Stem("ermengare"), "ermengar");});
test("ermine -> ermin", function() {deepEqual( Stem("ermine"), "ermin");});
test("ermount -> ermount", function() {deepEqual( Stem("ermount"), "ermount");});
test("ern -> ern", function() {deepEqual( Stem("ern"), "ern");});
test("ernight -> ernight", function() {deepEqual( Stem("ernight"), "ernight");});
test("eros -> ero", function() {deepEqual( Stem("eros"), "ero");});
test("erpaid -> erpaid", function() {deepEqual( Stem("erpaid"), "erpaid");});
test("erparted -> erpart", function() {deepEqual( Stem("erparted"), "erpart");});
test("erpast -> erpast", function() {deepEqual( Stem("erpast"), "erpast");});
test("erpays -> erpai", function() {deepEqual( Stem("erpays"), "erpai");});
test("erpeer -> erpeer", function() {deepEqual( Stem("erpeer"), "erpeer");});
test("erperch -> erperch", function() {deepEqual( Stem("erperch"), "erperch");});
test("erpicturing -> erpictur", function() {deepEqual( Stem("erpicturing"), "erpictur");});
test("erpingham -> erpingham", function() {deepEqual( Stem("erpingham"), "erpingham");});
test("erposting -> erpost", function() {deepEqual( Stem("erposting"), "erpost");});
test("erpow -> erpow", function() {deepEqual( Stem("erpow"), "erpow");});
test("erpress -> erpress", function() {deepEqual( Stem("erpress"), "erpress");});
test("erpressed -> erpress", function() {deepEqual( Stem("erpressed"), "erpress");});
test("err -> err", function() {deepEqual( Stem("err"), "err");});
test("errand -> errand", function() {deepEqual( Stem("errand"), "errand");});
test("errands -> errand", function() {deepEqual( Stem("errands"), "errand");});
test("errant -> errant", function() {deepEqual( Stem("errant"), "errant");});
test("errate -> errat", function() {deepEqual( Stem("errate"), "errat");});
test("erraught -> erraught", function() {deepEqual( Stem("erraught"), "erraught");});
test("erreaches -> erreach", function() {deepEqual( Stem("erreaches"), "erreach");});
test("erred -> er", function() {deepEqual( Stem("erred"), "er");});
test("errest -> errest", function() {deepEqual( Stem("errest"), "errest");});
test("erring -> er", function() {deepEqual( Stem("erring"), "er");});
test("erroneous -> erron", function() {deepEqual( Stem("erroneous"), "erron");});
test("error -> error", function() {deepEqual( Stem("error"), "error");});
test("errors -> error", function() {deepEqual( Stem("errors"), "error");});
test("errs -> err", function() {deepEqual( Stem("errs"), "err");});
test("errule -> errul", function() {deepEqual( Stem("errule"), "errul");});
test("errun -> errun", function() {deepEqual( Stem("errun"), "errun");});
test("erset -> erset", function() {deepEqual( Stem("erset"), "erset");});
test("ershade -> ershad", function() {deepEqual( Stem("ershade"), "ershad");});
test("ershades -> ershad", function() {deepEqual( Stem("ershades"), "ershad");});
test("ershine -> ershin", function() {deepEqual( Stem("ershine"), "ershin");});
test("ershot -> ershot", function() {deepEqual( Stem("ershot"), "ershot");});
test("ersized -> ersiz", function() {deepEqual( Stem("ersized"), "ersiz");});
test("erskip -> erskip", function() {deepEqual( Stem("erskip"), "erskip");});
test("erslips -> erslip", function() {deepEqual( Stem("erslips"), "erslip");});
test("erspreads -> erspread", function() {deepEqual( Stem("erspreads"), "erspread");});
test("erst -> erst", function() {deepEqual( Stem("erst"), "erst");});
test("erstare -> erstar", function() {deepEqual( Stem("erstare"), "erstar");});
test("erstep -> erstep", function() {deepEqual( Stem("erstep"), "erstep");});
test("erstunk -> erstunk", function() {deepEqual( Stem("erstunk"), "erstunk");});
test("ersway -> erswai", function() {deepEqual( Stem("ersway"), "erswai");});
test("ersways -> erswai", function() {deepEqual( Stem("ersways"), "erswai");});
test("erswell -> erswel", function() {deepEqual( Stem("erswell"), "erswel");});
test("erta -> erta", function() {deepEqual( Stem("erta"), "erta");});
test("ertake -> ertak", function() {deepEqual( Stem("ertake"), "ertak");});
test("erteemed -> erteem", function() {deepEqual( Stem("erteemed"), "erteem");});
test("erthrow -> erthrow", function() {deepEqual( Stem("erthrow"), "erthrow");});
test("erthrown -> erthrown", function() {deepEqual( Stem("erthrown"), "erthrown");});
test("erthrows -> erthrow", function() {deepEqual( Stem("erthrows"), "erthrow");});
test("ertook -> ertook", function() {deepEqual( Stem("ertook"), "ertook");});
test("ertop -> ertop", function() {deepEqual( Stem("ertop"), "ertop");});
test("ertopping -> ertop", function() {deepEqual( Stem("ertopping"), "ertop");});
test("ertrip -> ertrip", function() {deepEqual( Stem("ertrip"), "ertrip");});
test("erturn -> erturn", function() {deepEqual( Stem("erturn"), "erturn");});
test("erudition -> erudit", function() {deepEqual( Stem("erudition"), "erudit");});
test("eruption -> erupt", function() {deepEqual( Stem("eruption"), "erupt");});
test("eruptions -> erupt", function() {deepEqual( Stem("eruptions"), "erupt");});
test("ervalues -> ervalu", function() {deepEqual( Stem("ervalues"), "ervalu");});
test("erwalk -> erwalk", function() {deepEqual( Stem("erwalk"), "erwalk");});
test("erwatch -> erwatch", function() {deepEqual( Stem("erwatch"), "erwatch");});
test("erween -> erween", function() {deepEqual( Stem("erween"), "erween");});
test("erweens -> erween", function() {deepEqual( Stem("erweens"), "erween");});
test("erweigh -> erweigh", function() {deepEqual( Stem("erweigh"), "erweigh");});
test("erweighs -> erweigh", function() {deepEqual( Stem("erweighs"), "erweigh");});
test("erwhelm -> erwhelm", function() {deepEqual( Stem("erwhelm"), "erwhelm");});
test("erwhelmed -> erwhelm", function() {deepEqual( Stem("erwhelmed"), "erwhelm");});
test("erworn -> erworn", function() {deepEqual( Stem("erworn"), "erworn");});
test("es -> e", function() {deepEqual( Stem("es"), "e");});
test("escalus -> escalu", function() {deepEqual( Stem("escalus"), "escalu");});
test("escap -> escap", function() {deepEqual( Stem("escap"), "escap");});
test("escape -> escap", function() {deepEqual( Stem("escape"), "escap");});
test("escaped -> escap", function() {deepEqual( Stem("escaped"), "escap");});
test("escapes -> escap", function() {deepEqual( Stem("escapes"), "escap");});
test("escaping -> escap", function() {deepEqual( Stem("escaping"), "escap");});
test("eschew -> eschew", function() {deepEqual( Stem("eschew"), "eschew");});
test("eschewed -> eschew", function() {deepEqual( Stem("eschewed"), "eschew");});
test("escort -> escort", function() {deepEqual( Stem("escort"), "escort");});
test("escorted -> escort", function() {deepEqual( Stem("escorted"), "escort");});
test("escoted -> escot", function() {deepEqual( Stem("escoted"), "escot");});
test("escritoire -> escritoir", function() {deepEqual( Stem("escritoire"), "escritoir");});
test("escritoires -> escritoir", function() {deepEqual( Stem("escritoires"), "escritoir");});
test("esill -> esil", function() {deepEqual( Stem("esill"), "esil");});
test("especial -> especi", function() {deepEqual( Stem("especial"), "especi");});
test("especially -> especi", function() {deepEqual( Stem("especially"), "especi");});
test("esperance -> esper", function() {deepEqual( Stem("esperance"), "esper");});
test("espials -> espial", function() {deepEqual( Stem("espials"), "espial");});
test("espied -> espi", function() {deepEqual( Stem("espied"), "espi");});
test("espiegle -> espiegl", function() {deepEqual( Stem("espiegle"), "espiegl");});
test("espieglerie -> espiegleri", function() {deepEqual( Stem("espieglerie"), "espiegleri");});
test("espies -> espi", function() {deepEqual( Stem("espies"), "espi");});
test("espous -> espou", function() {deepEqual( Stem("espous"), "espou");});
test("espouse -> espous", function() {deepEqual( Stem("espouse"), "espous");});
test("esprit -> esprit", function() {deepEqual( Stem("esprit"), "esprit");});
test("espy -> espi", function() {deepEqual( Stem("espy"), "espi");});
test("esq -> esq", function() {deepEqual( Stem("esq"), "esq");});
test("esquire -> esquir", function() {deepEqual( Stem("esquire"), "esquir");});
test("esquires -> esquir", function() {deepEqual( Stem("esquires"), "esquir");});
test("essay -> essai", function() {deepEqual( Stem("essay"), "essai");});
test("essays -> essai", function() {deepEqual( Stem("essays"), "essai");});
test("essence -> essenc", function() {deepEqual( Stem("essence"), "essenc");});
test("essences -> essenc", function() {deepEqual( Stem("essences"), "essenc");});
test("essential -> essenti", function() {deepEqual( Stem("essential"), "essenti");});
test("essentially -> essenti", function() {deepEqual( Stem("essentially"), "essenti");});
test("esses -> ess", function() {deepEqual( Stem("esses"), "ess");});
test("essex -> essex", function() {deepEqual( Stem("essex"), "essex");});
test("est -> est", function() {deepEqual( Stem("est"), "est");});
test("establish -> establish", function() {deepEqual( Stem("establish"), "establish");});
test("established -> establish", function() {deepEqual( Stem("established"), "establish");});
test("establishing -> establish", function() {deepEqual( Stem("establishing"), "establish");});
test("establishment -> establish", function() {deepEqual( Stem("establishment"), "establish");});
test("estaminets -> estaminet", function() {deepEqual( Stem("estaminets"), "estaminet");});
test("estate -> estat", function() {deepEqual( Stem("estate"), "estat");});
test("estates -> estat", function() {deepEqual( Stem("estates"), "estat");});
test("esteem -> esteem", function() {deepEqual( Stem("esteem"), "esteem");});
test("esteemed -> esteem", function() {deepEqual( Stem("esteemed"), "esteem");});
test("esteemeth -> esteemeth", function() {deepEqual( Stem("esteemeth"), "esteemeth");});
test("esteeming -> esteem", function() {deepEqual( Stem("esteeming"), "esteem");});
test("esteems -> esteem", function() {deepEqual( Stem("esteems"), "esteem");});
test("esther -> esther", function() {deepEqual( Stem("esther"), "esther");});
test("estimable -> estim", function() {deepEqual( Stem("estimable"), "estim");});
test("estimate -> estim", function() {deepEqual( Stem("estimate"), "estim");});
test("estimated -> estim", function() {deepEqual( Stem("estimated"), "estim");});
test("estimation -> estim", function() {deepEqual( Stem("estimation"), "estim");});
test("estimations -> estim", function() {deepEqual( Stem("estimations"), "estim");});
test("estime -> estim", function() {deepEqual( Stem("estime"), "estim");});
test("estrange -> estrang", function() {deepEqual( Stem("estrange"), "estrang");});
test("estranged -> estrang", function() {deepEqual( Stem("estranged"), "estrang");});
test("estrangement -> estrang", function() {deepEqual( Stem("estrangement"), "estrang");});
test("estridge -> estridg", function() {deepEqual( Stem("estridge"), "estridg");});
test("estridges -> estridg", function() {deepEqual( Stem("estridges"), "estridg");});
test("et -> et", function() {deepEqual( Stem("et"), "et");});
test("etat -> etat", function() {deepEqual( Stem("etat"), "etat");});
test("etc -> etc", function() {deepEqual( Stem("etc"), "etc");});
test("etceteras -> etcetera", function() {deepEqual( Stem("etceteras"), "etcetera");});
test("ete -> et", function() {deepEqual( Stem("ete"), "et");});
test("eternal -> etern", function() {deepEqual( Stem("eternal"), "etern");});
test("eternally -> etern", function() {deepEqual( Stem("eternally"), "etern");});
test("eterne -> etern", function() {deepEqual( Stem("eterne"), "etern");});
test("eternity -> etern", function() {deepEqual( Stem("eternity"), "etern");});
test("eterniz -> eterniz", function() {deepEqual( Stem("eterniz"), "eterniz");});
test("etes -> et", function() {deepEqual( Stem("etes"), "et");});
test("etheke -> ethek", function() {deepEqual( Stem("etheke"), "ethek");});
test("ethiop -> ethiop", function() {deepEqual( Stem("ethiop"), "ethiop");});
test("ethiope -> ethiop", function() {deepEqual( Stem("ethiope"), "ethiop");});
test("ethiopes -> ethiop", function() {deepEqual( Stem("ethiopes"), "ethiop");});
test("ethiopian -> ethiopian", function() {deepEqual( Stem("ethiopian"), "ethiopian");});
test("etna -> etna", function() {deepEqual( Stem("etna"), "etna");});
test("eton -> eton", function() {deepEqual( Stem("eton"), "eton");});
test("etre -> etr", function() {deepEqual( Stem("etre"), "etr");});
test("eunuch -> eunuch", function() {deepEqual( Stem("eunuch"), "eunuch");});
test("eunuchs -> eunuch", function() {deepEqual( Stem("eunuchs"), "eunuch");});
test("euphrates -> euphrat", function() {deepEqual( Stem("euphrates"), "euphrat");});
test("euphronius -> euphroniu", function() {deepEqual( Stem("euphronius"), "euphroniu");});
test("euriphile -> euriphil", function() {deepEqual( Stem("euriphile"), "euriphil");});
test("europa -> europa", function() {deepEqual( Stem("europa"), "europa");});
test("europe -> europ", function() {deepEqual( Stem("europe"), "europ");});
test("european -> european", function() {deepEqual( Stem("european"), "european");});
test("eutropis -> eutropi", function() {deepEqual( Stem("eutropis"), "eutropi");});
test("eutropius -> eutropiu", function() {deepEqual( Stem("eutropius"), "eutropiu");});
test("ev -> ev", function() {deepEqual( Stem("ev"), "ev");});
test("evade -> evad", function() {deepEqual( Stem("evade"), "evad");});
test("evades -> evad", function() {deepEqual( Stem("evades"), "evad");});
test("evangelical -> evangel", function() {deepEqual( Stem("evangelical"), "evangel");});
test("evans -> evan", function() {deepEqual( Stem("evans"), "evan");});
test("evasion -> evas", function() {deepEqual( Stem("evasion"), "evas");});
test("evasions -> evas", function() {deepEqual( Stem("evasions"), "evas");});
test("eve -> ev", function() {deepEqual( Stem("eve"), "ev");});
test("even -> even", function() {deepEqual( Stem("even"), "even");});
test("evening -> even", function() {deepEqual( Stem("evening"), "even");});
test("evenings -> even", function() {deepEqual( Stem("evenings"), "even");});
test("evenly -> evenli", function() {deepEqual( Stem("evenly"), "evenli");});
test("event -> event", function() {deepEqual( Stem("event"), "event");});
test("eventful -> event", function() {deepEqual( Stem("eventful"), "event");});
test("events -> event", function() {deepEqual( Stem("events"), "event");});
test("evenue -> evenu", function() {deepEqual( Stem("evenue"), "evenu");});
test("ever -> ever", function() {deepEqual( Stem("ever"), "ever");});
test("evergreens -> evergreen", function() {deepEqual( Stem("evergreens"), "evergreen");});
test("everlasting -> everlast", function() {deepEqual( Stem("everlasting"), "everlast");});
test("everlastingly -> everlastingli", function() {deepEqual( Stem("everlastingly"), "everlastingli");});
test("evermore -> evermor", function() {deepEqual( Stem("evermore"), "evermor");});
test("every -> everi", function() {deepEqual( Stem("every"), "everi");});
test("everybody -> everybodi", function() {deepEqual( Stem("everybody"), "everybodi");});
test("everyday -> everydai", function() {deepEqual( Stem("everyday"), "everydai");});
test("everyone -> everyon", function() {deepEqual( Stem("everyone"), "everyon");});
test("everything -> everyth", function() {deepEqual( Stem("everything"), "everyth");});
test("everythink -> everythink", function() {deepEqual( Stem("everythink"), "everythink");});
test("everywhere -> everywher", function() {deepEqual( Stem("everywhere"), "everywher");});
test("evidence -> evid", function() {deepEqual( Stem("evidence"), "evid");});
test("evidences -> evid", function() {deepEqual( Stem("evidences"), "evid");});
test("evident -> evid", function() {deepEqual( Stem("evident"), "evid");});
test("evidently -> evid", function() {deepEqual( Stem("evidently"), "evid");});
test("evil -> evil", function() {deepEqual( Stem("evil"), "evil");});
test("evilly -> evilli", function() {deepEqual( Stem("evilly"), "evilli");});
test("evils -> evil", function() {deepEqual( Stem("evils"), "evil");});
test("evincing -> evinc", function() {deepEqual( Stem("evincing"), "evinc");});
test("evitate -> evit", function() {deepEqual( Stem("evitate"), "evit");});
test("ewe -> ew", function() {deepEqual( Stem("ewe"), "ew");});
test("ewer -> ewer", function() {deepEqual( Stem("ewer"), "ewer");});
test("ewers -> ewer", function() {deepEqual( Stem("ewers"), "ewer");});
test("ewes -> ew", function() {deepEqual( Stem("ewes"), "ew");});
test("ex -> ex", function() {deepEqual( Stem("ex"), "ex");});
test("exact -> exact", function() {deepEqual( Stem("exact"), "exact");});
test("exacted -> exact", function() {deepEqual( Stem("exacted"), "exact");});
test("exactest -> exactest", function() {deepEqual( Stem("exactest"), "exactest");});
test("exacting -> exact", function() {deepEqual( Stem("exacting"), "exact");});
test("exaction -> exact", function() {deepEqual( Stem("exaction"), "exact");});
test("exactions -> exact", function() {deepEqual( Stem("exactions"), "exact");});
test("exactly -> exactli", function() {deepEqual( Stem("exactly"), "exactli");});
test("exacts -> exact", function() {deepEqual( Stem("exacts"), "exact");});
test("exaggerate -> exagger", function() {deepEqual( Stem("exaggerate"), "exagger");});
test("exaggerated -> exagger", function() {deepEqual( Stem("exaggerated"), "exagger");});
test("exaggerates -> exagger", function() {deepEqual( Stem("exaggerates"), "exagger");});
test("exaggerating -> exagger", function() {deepEqual( Stem("exaggerating"), "exagger");});
test("exalt -> exalt", function() {deepEqual( Stem("exalt"), "exalt");});
test("exalted -> exalt", function() {deepEqual( Stem("exalted"), "exalt");});
test("exalteth -> exalteth", function() {deepEqual( Stem("exalteth"), "exalteth");});
test("examin -> examin", function() {deepEqual( Stem("examin"), "examin");});
test("examination -> examin", function() {deepEqual( Stem("examination"), "examin");});
test("examinations -> examin", function() {deepEqual( Stem("examinations"), "examin");});
test("examine -> examin", function() {deepEqual( Stem("examine"), "examin");});
test("examined -> examin", function() {deepEqual( Stem("examined"), "examin");});
test("examines -> examin", function() {deepEqual( Stem("examines"), "examin");});
test("examining -> examin", function() {deepEqual( Stem("examining"), "examin");});
test("exampl -> exampl", function() {deepEqual( Stem("exampl"), "exampl");});
test("example -> exampl", function() {deepEqual( Stem("example"), "exampl");});
test("exampled -> exampl", function() {deepEqual( Stem("exampled"), "exampl");});
test("examples -> exampl", function() {deepEqual( Stem("examples"), "exampl");});
test("exasperate -> exasper", function() {deepEqual( Stem("exasperate"), "exasper");});
test("exasperated -> exasper", function() {deepEqual( Stem("exasperated"), "exasper");});
test("exasperates -> exasper", function() {deepEqual( Stem("exasperates"), "exasper");});
test("exasperating -> exasper", function() {deepEqual( Stem("exasperating"), "exasper");});
test("excaytement -> excayt", function() {deepEqual( Stem("excaytement"), "excayt");});
test("exceed -> exce", function() {deepEqual( Stem("exceed"), "exce");});
test("exceeded -> exceed", function() {deepEqual( Stem("exceeded"), "exceed");});
test("exceedeth -> exceedeth", function() {deepEqual( Stem("exceedeth"), "exceedeth");});
test("exceeding -> exceed", function() {deepEqual( Stem("exceeding"), "exceed");});
test("exceedingly -> exceedingli", function() {deepEqual( Stem("exceedingly"), "exceedingli");});
test("exceeds -> exce", function() {deepEqual( Stem("exceeds"), "exce");});
test("excel -> excel", function() {deepEqual( Stem("excel"), "excel");});
test("excelled -> excel", function() {deepEqual( Stem("excelled"), "excel");});
test("excellence -> excel", function() {deepEqual( Stem("excellence"), "excel");});
test("excellences -> excel", function() {deepEqual( Stem("excellences"), "excel");});
test("excellencies -> excel", function() {deepEqual( Stem("excellencies"), "excel");});
test("excellency -> excel", function() {deepEqual( Stem("excellency"), "excel");});
test("excellent -> excel", function() {deepEqual( Stem("excellent"), "excel");});
test("excellently -> excel", function() {deepEqual( Stem("excellently"), "excel");});
test("excellenz -> excellenz", function() {deepEqual( Stem("excellenz"), "excellenz");});
test("excelling -> excel", function() {deepEqual( Stem("excelling"), "excel");});
test("excels -> excel", function() {deepEqual( Stem("excels"), "excel");});
test("except -> except", function() {deepEqual( Stem("except"), "except");});
test("excepted -> except", function() {deepEqual( Stem("excepted"), "except");});
test("excepting -> except", function() {deepEqual( Stem("excepting"), "except");});
test("exception -> except", function() {deepEqual( Stem("exception"), "except");});
test("exceptions -> except", function() {deepEqual( Stem("exceptions"), "except");});
test("exceptless -> exceptless", function() {deepEqual( Stem("exceptless"), "exceptless");});
test("excess -> excess", function() {deepEqual( Stem("excess"), "excess");});
test("excessive -> excess", function() {deepEqual( Stem("excessive"), "excess");});
test("excessively -> excess", function() {deepEqual( Stem("excessively"), "excess");});
test("exchang -> exchang", function() {deepEqual( Stem("exchang"), "exchang");});
test("exchange -> exchang", function() {deepEqual( Stem("exchange"), "exchang");});
test("exchanged -> exchang", function() {deepEqual( Stem("exchanged"), "exchang");});
test("exchanges -> exchang", function() {deepEqual( Stem("exchanges"), "exchang");});
test("exchanging -> exchang", function() {deepEqual( Stem("exchanging"), "exchang");});
test("exchequer -> exchequ", function() {deepEqual( Stem("exchequer"), "exchequ");});
test("exchequers -> exchequ", function() {deepEqual( Stem("exchequers"), "exchequ");});
test("excite -> excit", function() {deepEqual( Stem("excite"), "excit");});
test("excited -> excit", function() {deepEqual( Stem("excited"), "excit");});
test("excitement -> excit", function() {deepEqual( Stem("excitement"), "excit");});
test("excitements -> excit", function() {deepEqual( Stem("excitements"), "excit");});
test("excites -> excit", function() {deepEqual( Stem("excites"), "excit");});
test("exciting -> excit", function() {deepEqual( Stem("exciting"), "excit");});
test("exclaim -> exclaim", function() {deepEqual( Stem("exclaim"), "exclaim");});
test("exclaimed -> exclaim", function() {deepEqual( Stem("exclaimed"), "exclaim");});
test("exclaiming -> exclaim", function() {deepEqual( Stem("exclaiming"), "exclaim");});
test("exclaims -> exclaim", function() {deepEqual( Stem("exclaims"), "exclaim");});
test("exclamation -> exclam", function() {deepEqual( Stem("exclamation"), "exclam");});
test("exclamations -> exclam", function() {deepEqual( Stem("exclamations"), "exclam");});
test("excluded -> exclud", function() {deepEqual( Stem("excluded"), "exclud");});
test("excludes -> exclud", function() {deepEqual( Stem("excludes"), "exclud");});
test("excluding -> exclud", function() {deepEqual( Stem("excluding"), "exclud");});
test("exclusive -> exclus", function() {deepEqual( Stem("exclusive"), "exclus");});
test("exclusively -> exclus", function() {deepEqual( Stem("exclusively"), "exclus");});
test("excommunicate -> excommun", function() {deepEqual( Stem("excommunicate"), "excommun");});
test("excommunication -> excommun", function() {deepEqual( Stem("excommunication"), "excommun");});
test("excrement -> excrement", function() {deepEqual( Stem("excrement"), "excrement");});
test("excrements -> excrement", function() {deepEqual( Stem("excrements"), "excrement");});
test("excruciate -> excruci", function() {deepEqual( Stem("excruciate"), "excruci");});
test("excruciating -> excruci", function() {deepEqual( Stem("excruciating"), "excruci");});
test("excursion -> excurs", function() {deepEqual( Stem("excursion"), "excurs");});
test("excursions -> excurs", function() {deepEqual( Stem("excursions"), "excurs");});
test("excus -> excu", function() {deepEqual( Stem("excus"), "excu");});
test("excusable -> excus", function() {deepEqual( Stem("excusable"), "excus");});
test("excuse -> excus", function() {deepEqual( Stem("excuse"), "excus");});
test("excused -> excus", function() {deepEqual( Stem("excused"), "excus");});
test("excuses -> excus", function() {deepEqual( Stem("excuses"), "excus");});
test("excusez -> excusez", function() {deepEqual( Stem("excusez"), "excusez");});
test("excusing -> excus", function() {deepEqual( Stem("excusing"), "excus");});
test("execrable -> execr", function() {deepEqual( Stem("execrable"), "execr");});
test("execrations -> execr", function() {deepEqual( Stem("execrations"), "execr");});
test("execute -> execut", function() {deepEqual( Stem("execute"), "execut");});
test("executed -> execut", function() {deepEqual( Stem("executed"), "execut");});
test("executes -> execut", function() {deepEqual( Stem("executes"), "execut");});
test("executing -> execut", function() {deepEqual( Stem("executing"), "execut");});
test("execution -> execut", function() {deepEqual( Stem("execution"), "execut");});
test("executioner -> execution", function() {deepEqual( Stem("executioner"), "execution");});
test("executioners -> execution", function() {deepEqual( Stem("executioners"), "execution");});
test("executor -> executor", function() {deepEqual( Stem("executor"), "executor");});
test("executors -> executor", function() {deepEqual( Stem("executors"), "executor");});
test("exemplary -> exemplari", function() {deepEqual( Stem("exemplary"), "exemplari");});
test("exemplifying -> exemplifi", function() {deepEqual( Stem("exemplifying"), "exemplifi");});
test("exempt -> exempt", function() {deepEqual( Stem("exempt"), "exempt");});
test("exempted -> exempt", function() {deepEqual( Stem("exempted"), "exempt");});
test("exequies -> exequi", function() {deepEqual( Stem("exequies"), "exequi");});
test("exercise -> exercis", function() {deepEqual( Stem("exercise"), "exercis");});
test("exercised -> exercis", function() {deepEqual( Stem("exercised"), "exercis");});
test("exercises -> exercis", function() {deepEqual( Stem("exercises"), "exercis");});
test("exercising -> exercis", function() {deepEqual( Stem("exercising"), "exercis");});
test("exerted -> exert", function() {deepEqual( Stem("exerted"), "exert");});
test("exerting -> exert", function() {deepEqual( Stem("exerting"), "exert");});
test("exertions -> exert", function() {deepEqual( Stem("exertions"), "exert");});
test("exeter -> exet", function() {deepEqual( Stem("exeter"), "exet");});
test("exeunt -> exeunt", function() {deepEqual( Stem("exeunt"), "exeunt");});
test("exhal -> exhal", function() {deepEqual( Stem("exhal"), "exhal");});
test("exhalation -> exhal", function() {deepEqual( Stem("exhalation"), "exhal");});
test("exhalations -> exhal", function() {deepEqual( Stem("exhalations"), "exhal");});
test("exhale -> exhal", function() {deepEqual( Stem("exhale"), "exhal");});
test("exhales -> exhal", function() {deepEqual( Stem("exhales"), "exhal");});
test("exhaust -> exhaust", function() {deepEqual( Stem("exhaust"), "exhaust");});
test("exhausted -> exhaust", function() {deepEqual( Stem("exhausted"), "exhaust");});
test("exhaustion -> exhaust", function() {deepEqual( Stem("exhaustion"), "exhaust");});
test("exhibit -> exhibit", function() {deepEqual( Stem("exhibit"), "exhibit");});
test("exhibited -> exhibit", function() {deepEqual( Stem("exhibited"), "exhibit");});
test("exhibiters -> exhibit", function() {deepEqual( Stem("exhibiters"), "exhibit");});
test("exhibiting -> exhibit", function() {deepEqual( Stem("exhibiting"), "exhibit");});
test("exhibition -> exhibit", function() {deepEqual( Stem("exhibition"), "exhibit");});
test("exhibitions -> exhibit", function() {deepEqual( Stem("exhibitions"), "exhibit");});
test("exhibits -> exhibit", function() {deepEqual( Stem("exhibits"), "exhibit");});
test("exhilarated -> exhilar", function() {deepEqual( Stem("exhilarated"), "exhilar");});
test("exhort -> exhort", function() {deepEqual( Stem("exhort"), "exhort");});
test("exhortation -> exhort", function() {deepEqual( Stem("exhortation"), "exhort");});
test("exhorting -> exhort", function() {deepEqual( Stem("exhorting"), "exhort");});
test("exigent -> exig", function() {deepEqual( Stem("exigent"), "exig");});
test("exil -> exil", function() {deepEqual( Stem("exil"), "exil");});
test("exile -> exil", function() {deepEqual( Stem("exile"), "exil");});
test("exiled -> exil", function() {deepEqual( Stem("exiled"), "exil");});
test("exion -> exion", function() {deepEqual( Stem("exion"), "exion");});
test("exist -> exist", function() {deepEqual( Stem("exist"), "exist");});
test("existed -> exist", function() {deepEqual( Stem("existed"), "exist");});
test("existence -> exist", function() {deepEqual( Stem("existence"), "exist");});
test("exists -> exist", function() {deepEqual( Stem("exists"), "exist");});
test("exit -> exit", function() {deepEqual( Stem("exit"), "exit");});
test("exits -> exit", function() {deepEqual( Stem("exits"), "exit");});
test("exorbitant -> exorbit", function() {deepEqual( Stem("exorbitant"), "exorbit");});
test("exorciser -> exorcis", function() {deepEqual( Stem("exorciser"), "exorcis");});
test("exorcisms -> exorc", function() {deepEqual( Stem("exorcisms"), "exorc");});
test("exorcist -> exorcist", function() {deepEqual( Stem("exorcist"), "exorcist");});
test("expanded -> expand", function() {deepEqual( Stem("expanded"), "expand");});
test("expansiveness -> expans", function() {deepEqual( Stem("expansiveness"), "expans");});
test("expatiating -> expati", function() {deepEqual( Stem("expatiating"), "expati");});
test("expect -> expect", function() {deepEqual( Stem("expect"), "expect");});
test("expectance -> expect", function() {deepEqual( Stem("expectance"), "expect");});
test("expectancy -> expect", function() {deepEqual( Stem("expectancy"), "expect");});
test("expectant -> expect", function() {deepEqual( Stem("expectant"), "expect");});
test("expectation -> expect", function() {deepEqual( Stem("expectation"), "expect");});
test("expectations -> expect", function() {deepEqual( Stem("expectations"), "expect");});
test("expected -> expect", function() {deepEqual( Stem("expected"), "expect");});
test("expecters -> expect", function() {deepEqual( Stem("expecters"), "expect");});
test("expecting -> expect", function() {deepEqual( Stem("expecting"), "expect");});
test("expects -> expect", function() {deepEqual( Stem("expects"), "expect");});
test("expedience -> expedi", function() {deepEqual( Stem("expedience"), "expedi");});
test("expedient -> expedi", function() {deepEqual( Stem("expedient"), "expedi");});
test("expediently -> expedi", function() {deepEqual( Stem("expediently"), "expedi");});
test("expedition -> expedit", function() {deepEqual( Stem("expedition"), "expedit");});
test("expeditions -> expedit", function() {deepEqual( Stem("expeditions"), "expedit");});
test("expeditious -> expediti", function() {deepEqual( Stem("expeditious"), "expediti");});
test("expel -> expel", function() {deepEqual( Stem("expel"), "expel");});
test("expell -> expel", function() {deepEqual( Stem("expell"), "expel");});
test("expelling -> expel", function() {deepEqual( Stem("expelling"), "expel");});
test("expels -> expel", function() {deepEqual( Stem("expels"), "expel");});
test("expend -> expend", function() {deepEqual( Stem("expend"), "expend");});
test("expended -> expend", function() {deepEqual( Stem("expended"), "expend");});
test("expenditure -> expenditur", function() {deepEqual( Stem("expenditure"), "expenditur");});
test("expense -> expens", function() {deepEqual( Stem("expense"), "expens");});
test("expenses -> expens", function() {deepEqual( Stem("expenses"), "expens");});
test("expensive -> expens", function() {deepEqual( Stem("expensive"), "expens");});
test("experienc -> experienc", function() {deepEqual( Stem("experienc"), "experienc");});
test("experience -> experi", function() {deepEqual( Stem("experience"), "experi");});
test("experienced -> experienc", function() {deepEqual( Stem("experienced"), "experienc");});
test("experiences -> experi", function() {deepEqual( Stem("experiences"), "experi");});
test("experiment -> experi", function() {deepEqual( Stem("experiment"), "experi");});
test("experimental -> experiment", function() {deepEqual( Stem("experimental"), "experiment");});
test("experiments -> experi", function() {deepEqual( Stem("experiments"), "experi");});
test("expert -> expert", function() {deepEqual( Stem("expert"), "expert");});
test("expertness -> expert", function() {deepEqual( Stem("expertness"), "expert");});
test("expiate -> expiat", function() {deepEqual( Stem("expiate"), "expiat");});
test("expiation -> expiat", function() {deepEqual( Stem("expiation"), "expiat");});
test("expince -> expinc", function() {deepEqual( Stem("expince"), "expinc");});
test("expir -> expir", function() {deepEqual( Stem("expir"), "expir");});
test("expiration -> expir", function() {deepEqual( Stem("expiration"), "expir");});
test("expire -> expir", function() {deepEqual( Stem("expire"), "expir");});
test("expired -> expir", function() {deepEqual( Stem("expired"), "expir");});
test("expires -> expir", function() {deepEqual( Stem("expires"), "expir");});
test("expiring -> expir", function() {deepEqual( Stem("expiring"), "expir");});
test("explain -> explain", function() {deepEqual( Stem("explain"), "explain");});
test("explained -> explain", function() {deepEqual( Stem("explained"), "explain");});
test("explaining -> explain", function() {deepEqual( Stem("explaining"), "explain");});
test("explanation -> explan", function() {deepEqual( Stem("explanation"), "explan");});
test("explanations -> explan", function() {deepEqual( Stem("explanations"), "explan");});
test("explication -> explic", function() {deepEqual( Stem("explication"), "explic");});
test("explode -> explod", function() {deepEqual( Stem("explode"), "explod");});
test("exploded -> explod", function() {deepEqual( Stem("exploded"), "explod");});
test("exploding -> explod", function() {deepEqual( Stem("exploding"), "explod");});
test("exploit -> exploit", function() {deepEqual( Stem("exploit"), "exploit");});
test("exploits -> exploit", function() {deepEqual( Stem("exploits"), "exploit");});
test("explosion -> explos", function() {deepEqual( Stem("explosion"), "explos");});
test("explosions -> explos", function() {deepEqual( Stem("explosions"), "explos");});
test("expos -> expo", function() {deepEqual( Stem("expos"), "expo");});
test("expose -> expos", function() {deepEqual( Stem("expose"), "expos");});
test("exposed -> expos", function() {deepEqual( Stem("exposed"), "expos");});
test("exposing -> expos", function() {deepEqual( Stem("exposing"), "expos");});
test("exposition -> exposit", function() {deepEqual( Stem("exposition"), "exposit");});
test("expositor -> expositor", function() {deepEqual( Stem("expositor"), "expositor");});
test("expostulate -> expostul", function() {deepEqual( Stem("expostulate"), "expostul");});
test("expostulated -> expostul", function() {deepEqual( Stem("expostulated"), "expostul");});
test("expostulation -> expostul", function() {deepEqual( Stem("expostulation"), "expostul");});
test("expostulations -> expostul", function() {deepEqual( Stem("expostulations"), "expostul");});
test("exposture -> expostur", function() {deepEqual( Stem("exposture"), "expostur");});
test("exposure -> exposur", function() {deepEqual( Stem("exposure"), "exposur");});
test("expound -> expound", function() {deepEqual( Stem("expound"), "expound");});
test("expounded -> expound", function() {deepEqual( Stem("expounded"), "expound");});
test("expounding -> expound", function() {deepEqual( Stem("expounding"), "expound");});
test("express -> express", function() {deepEqual( Stem("express"), "express");});
test("expressed -> express", function() {deepEqual( Stem("expressed"), "express");});
test("expresses -> express", function() {deepEqual( Stem("expresses"), "express");});
test("expresseth -> expresseth", function() {deepEqual( Stem("expresseth"), "expresseth");});
test("expressing -> express", function() {deepEqual( Stem("expressing"), "express");});
test("expression -> express", function() {deepEqual( Stem("expression"), "express");});
test("expressive -> express", function() {deepEqual( Stem("expressive"), "express");});
test("expressly -> expressli", function() {deepEqual( Stem("expressly"), "expressli");});
test("expressure -> expressur", function() {deepEqual( Stem("expressure"), "expressur");});
test("expuls -> expul", function() {deepEqual( Stem("expuls"), "expul");});
test("expulsion -> expuls", function() {deepEqual( Stem("expulsion"), "expuls");});
test("exquisite -> exquisit", function() {deepEqual( Stem("exquisite"), "exquisit");});
test("exquisitely -> exquisit", function() {deepEqual( Stem("exquisitely"), "exquisit");});
test("exsufflicate -> exsuffl", function() {deepEqual( Stem("exsufflicate"), "exsuffl");});
test("extant -> extant", function() {deepEqual( Stem("extant"), "extant");});
test("extemporal -> extempor", function() {deepEqual( Stem("extemporal"), "extempor");});
test("extemporally -> extempor", function() {deepEqual( Stem("extemporally"), "extempor");});
test("extempore -> extempor", function() {deepEqual( Stem("extempore"), "extempor");});
test("extend -> extend", function() {deepEqual( Stem("extend"), "extend");});
test("extended -> extend", function() {deepEqual( Stem("extended"), "extend");});
test("extending -> extend", function() {deepEqual( Stem("extending"), "extend");});
test("extends -> extend", function() {deepEqual( Stem("extends"), "extend");});
test("extension -> extens", function() {deepEqual( Stem("extension"), "extens");});
test("extent -> extent", function() {deepEqual( Stem("extent"), "extent");});
test("extenuate -> extenu", function() {deepEqual( Stem("extenuate"), "extenu");});
test("extenuated -> extenu", function() {deepEqual( Stem("extenuated"), "extenu");});
test("extenuates -> extenu", function() {deepEqual( Stem("extenuates"), "extenu");});
test("extenuation -> extenu", function() {deepEqual( Stem("extenuation"), "extenu");});
test("exterior -> exterior", function() {deepEqual( Stem("exterior"), "exterior");});
test("exteriorly -> exteriorli", function() {deepEqual( Stem("exteriorly"), "exteriorli");});
test("exteriors -> exterior", function() {deepEqual( Stem("exteriors"), "exterior");});
test("extermin -> extermin", function() {deepEqual( Stem("extermin"), "extermin");});
test("extermination -> extermin", function() {deepEqual( Stem("extermination"), "extermin");});
test("extern -> extern", function() {deepEqual( Stem("extern"), "extern");});
test("external -> extern", function() {deepEqual( Stem("external"), "extern");});
test("extinct -> extinct", function() {deepEqual( Stem("extinct"), "extinct");});
test("extincted -> extinct", function() {deepEqual( Stem("extincted"), "extinct");});
test("extincture -> extinctur", function() {deepEqual( Stem("extincture"), "extinctur");});
test("extinguish -> extinguish", function() {deepEqual( Stem("extinguish"), "extinguish");});
test("extinguished -> extinguish", function() {deepEqual( Stem("extinguished"), "extinguish");});
test("extinguishers -> extinguish", function() {deepEqual( Stem("extinguishers"), "extinguish");});
test("extirp -> extirp", function() {deepEqual( Stem("extirp"), "extirp");});
test("extirpate -> extirp", function() {deepEqual( Stem("extirpate"), "extirp");});
test("extirped -> extirp", function() {deepEqual( Stem("extirped"), "extirp");});
test("extol -> extol", function() {deepEqual( Stem("extol"), "extol");});
test("extoll -> extol", function() {deepEqual( Stem("extoll"), "extol");});
test("extolling -> extol", function() {deepEqual( Stem("extolling"), "extol");});
test("extolment -> extol", function() {deepEqual( Stem("extolment"), "extol");});
test("exton -> exton", function() {deepEqual( Stem("exton"), "exton");});
test("extort -> extort", function() {deepEqual( Stem("extort"), "extort");});
test("extorted -> extort", function() {deepEqual( Stem("extorted"), "extort");});
test("extortion -> extort", function() {deepEqual( Stem("extortion"), "extort");});
test("extortions -> extort", function() {deepEqual( Stem("extortions"), "extort");});
test("extra -> extra", function() {deepEqual( Stem("extra"), "extra");});
test("extract -> extract", function() {deepEqual( Stem("extract"), "extract");});
test("extracted -> extract", function() {deepEqual( Stem("extracted"), "extract");});
test("extracting -> extract", function() {deepEqual( Stem("extracting"), "extract");});
test("extracts -> extract", function() {deepEqual( Stem("extracts"), "extract");});
test("extraordinarily -> extraordinarili", function() {deepEqual( Stem("extraordinarily"), "extraordinarili");});
test("extraordinary -> extraordinari", function() {deepEqual( Stem("extraordinary"), "extraordinari");});
test("extraught -> extraught", function() {deepEqual( Stem("extraught"), "extraught");});
test("extravagance -> extravag", function() {deepEqual( Stem("extravagance"), "extravag");});
test("extravagances -> extravag", function() {deepEqual( Stem("extravagances"), "extravag");});
test("extravagancy -> extravag", function() {deepEqual( Stem("extravagancy"), "extravag");});
test("extravagant -> extravag", function() {deepEqual( Stem("extravagant"), "extravag");});
test("extreme -> extrem", function() {deepEqual( Stem("extreme"), "extrem");});
test("extremely -> extrem", function() {deepEqual( Stem("extremely"), "extrem");});
test("extremes -> extrem", function() {deepEqual( Stem("extremes"), "extrem");});
test("extremest -> extremest", function() {deepEqual( Stem("extremest"), "extremest");});
test("extremities -> extrem", function() {deepEqual( Stem("extremities"), "extrem");});
test("extremity -> extrem", function() {deepEqual( Stem("extremity"), "extrem");});
test("exuent -> exuent", function() {deepEqual( Stem("exuent"), "exuent");});
test("exult -> exult", function() {deepEqual( Stem("exult"), "exult");});
test("exultation -> exult", function() {deepEqual( Stem("exultation"), "exult");});
test("exulting -> exult", function() {deepEqual( Stem("exulting"), "exult");});
test("ey -> ei", function() {deepEqual( Stem("ey"), "ei");});
test("eyas -> eya", function() {deepEqual( Stem("eyas"), "eya");});
test("eyases -> eyas", function() {deepEqual( Stem("eyases"), "eyas");});
test("eye -> ey", function() {deepEqual( Stem("eye"), "ey");});
test("eyeball -> eyebal", function() {deepEqual( Stem("eyeball"), "eyebal");});
test("eyeballs -> eyebal", function() {deepEqual( Stem("eyeballs"), "eyebal");});
test("eyebrow -> eyebrow", function() {deepEqual( Stem("eyebrow"), "eyebrow");});
test("eyebrows -> eyebrow", function() {deepEqual( Stem("eyebrows"), "eyebrow");});
test("eyed -> ei", function() {deepEqual( Stem("eyed"), "ei");});
test("eyeless -> eyeless", function() {deepEqual( Stem("eyeless"), "eyeless");});
test("eyelets -> eyelet", function() {deepEqual( Stem("eyelets"), "eyelet");});
test("eyelid -> eyelid", function() {deepEqual( Stem("eyelid"), "eyelid");});
test("eyelids -> eyelid", function() {deepEqual( Stem("eyelids"), "eyelid");});
test("eyes -> ey", function() {deepEqual( Stem("eyes"), "ey");});
test("eyesight -> eyesight", function() {deepEqual( Stem("eyesight"), "eyesight");});
test("eyestrings -> eyestr", function() {deepEqual( Stem("eyestrings"), "eyestr");});
test("eying -> ei", function() {deepEqual( Stem("eying"), "ei");});
test("eyne -> eyn", function() {deepEqual( Stem("eyne"), "eyn");});
test("eyrie -> eyri", function() {deepEqual( Stem("eyrie"), "eyri");});
test("f -> f", function() {deepEqual( Stem("f"), "f");});
test("fa -> fa", function() {deepEqual( Stem("fa"), "fa");});
test("fabian -> fabian", function() {deepEqual( Stem("fabian"), "fabian");});
test("fable -> fabl", function() {deepEqual( Stem("fable"), "fabl");});
test("fables -> fabl", function() {deepEqual( Stem("fables"), "fabl");});
test("fabric -> fabric", function() {deepEqual( Stem("fabric"), "fabric");});
test("fabulous -> fabul", function() {deepEqual( Stem("fabulous"), "fabul");});
test("fac -> fac", function() {deepEqual( Stem("fac"), "fac");});
test("face -> face", function() {deepEqual( Stem("face"), "face");});
test("faced -> face", function() {deepEqual( Stem("faced"), "face");});
test("facere -> facer", function() {deepEqual( Stem("facere"), "facer");});
test("faces -> face", function() {deepEqual( Stem("faces"), "face");});
test("facetious -> faceti", function() {deepEqual( Stem("facetious"), "faceti");});
test("facetiously -> faceti", function() {deepEqual( Stem("facetiously"), "faceti");});
test("faciant -> faciant", function() {deepEqual( Stem("faciant"), "faciant");});
test("facile -> facil", function() {deepEqual( Stem("facile"), "facil");});
test("facility -> facil", function() {deepEqual( Stem("facility"), "facil");});
test("facinerious -> facineri", function() {deepEqual( Stem("facinerious"), "facineri");});
test("facing -> face", function() {deepEqual( Stem("facing"), "face");});
test("facings -> face", function() {deepEqual( Stem("facings"), "face");});
test("facit -> facit", function() {deepEqual( Stem("facit"), "facit");});
test("fact -> fact", function() {deepEqual( Stem("fact"), "fact");});
test("faction -> faction", function() {deepEqual( Stem("faction"), "faction");});
test("factionary -> factionari", function() {deepEqual( Stem("factionary"), "factionari");});
test("factions -> faction", function() {deepEqual( Stem("factions"), "faction");});
test("factious -> factiou", function() {deepEqual( Stem("factious"), "factiou");});
test("factor -> factor", function() {deepEqual( Stem("factor"), "factor");});
test("factors -> factor", function() {deepEqual( Stem("factors"), "factor");});
test("factotum -> factotum", function() {deepEqual( Stem("factotum"), "factotum");});
test("facts -> fact", function() {deepEqual( Stem("facts"), "fact");});
test("faculties -> faculti", function() {deepEqual( Stem("faculties"), "faculti");});
test("faculty -> faculti", function() {deepEqual( Stem("faculty"), "faculti");});
test("faddle -> faddl", function() {deepEqual( Stem("faddle"), "faddl");});
test("fade -> fade", function() {deepEqual( Stem("fade"), "fade");});
test("faded -> fade", function() {deepEqual( Stem("faded"), "fade");});
test("fadeth -> fadeth", function() {deepEqual( Stem("fadeth"), "fadeth");});
test("fadge -> fadg", function() {deepEqual( Stem("fadge"), "fadg");});
test("fading -> fade", function() {deepEqual( Stem("fading"), "fade");});
test("fadings -> fade", function() {deepEqual( Stem("fadings"), "fade");});
test("fadom -> fadom", function() {deepEqual( Stem("fadom"), "fadom");});
test("fadoms -> fadom", function() {deepEqual( Stem("fadoms"), "fadom");});
test("fag -> fag", function() {deepEqual( Stem("fag"), "fag");});
test("fagging -> fag", function() {deepEqual( Stem("fagging"), "fag");});
test("fagot -> fagot", function() {deepEqual( Stem("fagot"), "fagot");});
test("fagots -> fagot", function() {deepEqual( Stem("fagots"), "fagot");});
test("fail -> fail", function() {deepEqual( Stem("fail"), "fail");});
test("failed -> fail", function() {deepEqual( Stem("failed"), "fail");});
test("failing -> fail", function() {deepEqual( Stem("failing"), "fail");});
test("fails -> fail", function() {deepEqual( Stem("fails"), "fail");});
test("failure -> failur", function() {deepEqual( Stem("failure"), "failur");});
test("fain -> fain", function() {deepEqual( Stem("fain"), "fain");});
test("faint -> faint", function() {deepEqual( Stem("faint"), "faint");});
test("fainted -> faint", function() {deepEqual( Stem("fainted"), "faint");});
test("fainter -> fainter", function() {deepEqual( Stem("fainter"), "fainter");});
test("faintest -> faintest", function() {deepEqual( Stem("faintest"), "faintest");});
test("fainting -> faint", function() {deepEqual( Stem("fainting"), "faint");});
test("faintly -> faintli", function() {deepEqual( Stem("faintly"), "faintli");});
test("faintness -> faint", function() {deepEqual( Stem("faintness"), "faint");});
test("faints -> faint", function() {deepEqual( Stem("faints"), "faint");});
test("fair -> fair", function() {deepEqual( Stem("fair"), "fair");});
test("faire -> fair", function() {deepEqual( Stem("faire"), "fair");});
test("fairer -> fairer", function() {deepEqual( Stem("fairer"), "fairer");});
test("fairest -> fairest", function() {deepEqual( Stem("fairest"), "fairest");});
test("fairian -> fairian", function() {deepEqual( Stem("fairian"), "fairian");});
test("fairies -> fairi", function() {deepEqual( Stem("fairies"), "fairi");});
test("fairing -> fair", function() {deepEqual( Stem("fairing"), "fair");});
test("fairings -> fair", function() {deepEqual( Stem("fairings"), "fair");});
test("fairly -> fairli", function() {deepEqual( Stem("fairly"), "fairli");});
test("fairness -> fair", function() {deepEqual( Stem("fairness"), "fair");});
test("fairs -> fair", function() {deepEqual( Stem("fairs"), "fair");});
test("fairwell -> fairwel", function() {deepEqual( Stem("fairwell"), "fairwel");});
test("fairy -> fairi", function() {deepEqual( Stem("fairy"), "fairi");});
test("fais -> fai", function() {deepEqual( Stem("fais"), "fai");});
test("fait -> fait", function() {deepEqual( Stem("fait"), "fait");});
test("faites -> fait", function() {deepEqual( Stem("faites"), "fait");});
test("faith -> faith", function() {deepEqual( Stem("faith"), "faith");});
test("faithful -> faith", function() {deepEqual( Stem("faithful"), "faith");});
test("faithfull -> faithful", function() {deepEqual( Stem("faithfull"), "faithful");});
test("faithfully -> faithfulli", function() {deepEqual( Stem("faithfully"), "faithfulli");});
test("faithless -> faithless", function() {deepEqual( Stem("faithless"), "faithless");});
test("faiths -> faith", function() {deepEqual( Stem("faiths"), "faith");});
test("faitors -> faitor", function() {deepEqual( Stem("faitors"), "faitor");});
test("fake -> fake", function() {deepEqual( Stem("fake"), "fake");});
test("fal -> fal", function() {deepEqual( Stem("fal"), "fal");});
test("falchion -> falchion", function() {deepEqual( Stem("falchion"), "falchion");});
test("falcon -> falcon", function() {deepEqual( Stem("falcon"), "falcon");});
test("falconbridge -> falconbridg", function() {deepEqual( Stem("falconbridge"), "falconbridg");});
test("falconer -> falcon", function() {deepEqual( Stem("falconer"), "falcon");});
test("falconers -> falcon", function() {deepEqual( Stem("falconers"), "falcon");});
test("fall -> fall", function() {deepEqual( Stem("fall"), "fall");});
test("fallacy -> fallaci", function() {deepEqual( Stem("fallacy"), "fallaci");});
test("fallals -> fallal", function() {deepEqual( Stem("fallals"), "fallal");});
test("fallen -> fallen", function() {deepEqual( Stem("fallen"), "fallen");});
test("falleth -> falleth", function() {deepEqual( Stem("falleth"), "falleth");});
test("falliable -> falliabl", function() {deepEqual( Stem("falliable"), "falliabl");});
test("fallible -> fallibl", function() {deepEqual( Stem("fallible"), "fallibl");});
test("falling -> fall", function() {deepEqual( Stem("falling"), "fall");});
test("fallow -> fallow", function() {deepEqual( Stem("fallow"), "fallow");});
test("fallows -> fallow", function() {deepEqual( Stem("fallows"), "fallow");});
test("falls -> fall", function() {deepEqual( Stem("falls"), "fall");});
test("fally -> falli", function() {deepEqual( Stem("fally"), "falli");});
test("falorous -> falor", function() {deepEqual( Stem("falorous"), "falor");});
test("false -> fals", function() {deepEqual( Stem("false"), "fals");});
test("falsehood -> falsehood", function() {deepEqual( Stem("falsehood"), "falsehood");});
test("falsehoods -> falsehood", function() {deepEqual( Stem("falsehoods"), "falsehood");});
test("falsely -> fals", function() {deepEqual( Stem("falsely"), "fals");});
test("falseness -> fals", function() {deepEqual( Stem("falseness"), "fals");});
test("falsenesses -> fals", function() {deepEqual( Stem("falsenesses"), "fals");});
test("falser -> falser", function() {deepEqual( Stem("falser"), "falser");});
test("falsify -> falsifi", function() {deepEqual( Stem("falsify"), "falsifi");});
test("falsing -> fals", function() {deepEqual( Stem("falsing"), "fals");});
test("falstaff -> falstaff", function() {deepEqual( Stem("falstaff"), "falstaff");});
test("falstaffs -> falstaff", function() {deepEqual( Stem("falstaffs"), "falstaff");});
test("falter -> falter", function() {deepEqual( Stem("falter"), "falter");});
test("faltered -> falter", function() {deepEqual( Stem("faltered"), "falter");});
test("faltering -> falter", function() {deepEqual( Stem("faltering"), "falter");});
test("fam -> fam", function() {deepEqual( Stem("fam"), "fam");});
test("fame -> fame", function() {deepEqual( Stem("fame"), "fame");});
test("famed -> fame", function() {deepEqual( Stem("famed"), "fame");});
test("familiar -> familiar", function() {deepEqual( Stem("familiar"), "familiar");});
test("familiarise -> familiaris", function() {deepEqual( Stem("familiarise"), "familiaris");});
test("familiarities -> familiar", function() {deepEqual( Stem("familiarities"), "familiar");});
test("familiarity -> familiar", function() {deepEqual( Stem("familiarity"), "familiar");});
test("familiarly -> familiarli", function() {deepEqual( Stem("familiarly"), "familiarli");});
test("familiars -> familiar", function() {deepEqual( Stem("familiars"), "familiar");});
test("families -> famili", function() {deepEqual( Stem("families"), "famili");});
test("family -> famili", function() {deepEqual( Stem("family"), "famili");});
test("famine -> famin", function() {deepEqual( Stem("famine"), "famin");});
test("famish -> famish", function() {deepEqual( Stem("famish"), "famish");});
test("famished -> famish", function() {deepEqual( Stem("famished"), "famish");});
test("famous -> famou", function() {deepEqual( Stem("famous"), "famou");});
test("famoused -> famous", function() {deepEqual( Stem("famoused"), "famous");});
test("famously -> famous", function() {deepEqual( Stem("famously"), "famous");});
test("fan -> fan", function() {deepEqual( Stem("fan"), "fan");});
test("fanatical -> fanat", function() {deepEqual( Stem("fanatical"), "fanat");});
test("fanatically -> fanat", function() {deepEqual( Stem("fanatically"), "fanat");});
test("fancied -> fanci", function() {deepEqual( Stem("fancied"), "fanci");});
test("fanciers -> fancier", function() {deepEqual( Stem("fanciers"), "fancier");});
test("fancies -> fanci", function() {deepEqual( Stem("fancies"), "fanci");});
test("fanciful -> fanci", function() {deepEqual( Stem("fanciful"), "fanci");});
test("fancy -> fanci", function() {deepEqual( Stem("fancy"), "fanci");});
test("fancying -> fanci", function() {deepEqual( Stem("fancying"), "fanci");});
test("fane -> fane", function() {deepEqual( Stem("fane"), "fane");});
test("fanes -> fane", function() {deepEqual( Stem("fanes"), "fane");});
test("fang -> fang", function() {deepEqual( Stem("fang"), "fang");});
test("fangled -> fangl", function() {deepEqual( Stem("fangled"), "fangl");});
test("fangless -> fangless", function() {deepEqual( Stem("fangless"), "fangless");});
test("fangs -> fang", function() {deepEqual( Stem("fangs"), "fang");});
test("fann -> fann", function() {deepEqual( Stem("fann"), "fann");});
test("fanning -> fan", function() {deepEqual( Stem("fanning"), "fan");});
test("fanny -> fanni", function() {deepEqual( Stem("fanny"), "fanni");});
test("fans -> fan", function() {deepEqual( Stem("fans"), "fan");});
test("fantasied -> fantasi", function() {deepEqual( Stem("fantasied"), "fantasi");});
test("fantasies -> fantasi", function() {deepEqual( Stem("fantasies"), "fantasi");});
test("fantastic -> fantast", function() {deepEqual( Stem("fantastic"), "fantast");});
test("fantastical -> fantast", function() {deepEqual( Stem("fantastical"), "fantast");});
test("fantastically -> fantast", function() {deepEqual( Stem("fantastically"), "fantast");});
test("fantasticoes -> fantastico", function() {deepEqual( Stem("fantasticoes"), "fantastico");});
test("fantasy -> fantasi", function() {deepEqual( Stem("fantasy"), "fantasi");});
test("fap -> fap", function() {deepEqual( Stem("fap"), "fap");});
test("far -> far", function() {deepEqual( Stem("far"), "far");});
test("farborough -> farborough", function() {deepEqual( Stem("farborough"), "farborough");});
test("farce -> farc", function() {deepEqual( Stem("farce"), "farc");});
test("farced -> farc", function() {deepEqual( Stem("farced"), "farc");});
test("fardel -> fardel", function() {deepEqual( Stem("fardel"), "fardel");});
test("fardels -> fardel", function() {deepEqual( Stem("fardels"), "fardel");});
test("farden -> farden", function() {deepEqual( Stem("farden"), "farden");});
test("fare -> fare", function() {deepEqual( Stem("fare"), "fare");});
test("fares -> fare", function() {deepEqual( Stem("fares"), "fare");});
test("farewell -> farewel", function() {deepEqual( Stem("farewell"), "farewel");});
test("farewells -> farewel", function() {deepEqual( Stem("farewells"), "farewel");});
test("fariner -> farin", function() {deepEqual( Stem("fariner"), "farin");});
test("faring -> fare", function() {deepEqual( Stem("faring"), "fare");});
test("farm -> farm", function() {deepEqual( Stem("farm"), "farm");});
test("farmed -> farm", function() {deepEqual( Stem("farmed"), "farm");});
test("farmer -> farmer", function() {deepEqual( Stem("farmer"), "farmer");});
test("farmers -> farmer", function() {deepEqual( Stem("farmers"), "farmer");});
test("farmhouse -> farmhous", function() {deepEqual( Stem("farmhouse"), "farmhous");});
test("farming -> farm", function() {deepEqual( Stem("farming"), "farm");});
test("farms -> farm", function() {deepEqual( Stem("farms"), "farm");});
test("farnham -> farnham", function() {deepEqual( Stem("farnham"), "farnham");});
test("faro -> faro", function() {deepEqual( Stem("faro"), "faro");});
test("farre -> farr", function() {deepEqual( Stem("farre"), "farr");});
test("farrow -> farrow", function() {deepEqual( Stem("farrow"), "farrow");});
test("farther -> farther", function() {deepEqual( Stem("farther"), "farther");});
test("farthest -> farthest", function() {deepEqual( Stem("farthest"), "farthest");});
test("farthing -> farth", function() {deepEqual( Stem("farthing"), "farth");});
test("farthingale -> farthingal", function() {deepEqual( Stem("farthingale"), "farthingal");});
test("farthingales -> farthingal", function() {deepEqual( Stem("farthingales"), "farthingal");});
test("farthings -> farth", function() {deepEqual( Stem("farthings"), "farth");});
test("fartuous -> fartuou", function() {deepEqual( Stem("fartuous"), "fartuou");});
test("fas -> fa", function() {deepEqual( Stem("fas"), "fa");});
test("fascinate -> fascin", function() {deepEqual( Stem("fascinate"), "fascin");});
test("fascinated -> fascin", function() {deepEqual( Stem("fascinated"), "fascin");});
test("fascinating -> fascin", function() {deepEqual( Stem("fascinating"), "fascin");});
test("fascination -> fascin", function() {deepEqual( Stem("fascination"), "fascin");});
test("fascinations -> fascin", function() {deepEqual( Stem("fascinations"), "fascin");});
test("fashion -> fashion", function() {deepEqual( Stem("fashion"), "fashion");});
test("fashionable -> fashion", function() {deepEqual( Stem("fashionable"), "fashion");});
test("fashionables -> fashion", function() {deepEqual( Stem("fashionables"), "fashion");});
test("fashioned -> fashion", function() {deepEqual( Stem("fashioned"), "fashion");});
test("fashioning -> fashion", function() {deepEqual( Stem("fashioning"), "fashion");});
test("fashions -> fashion", function() {deepEqual( Stem("fashions"), "fashion");});
test("fast -> fast", function() {deepEqual( Stem("fast"), "fast");});
test("fasted -> fast", function() {deepEqual( Stem("fasted"), "fast");});
test("fasten -> fasten", function() {deepEqual( Stem("fasten"), "fasten");});
test("fastened -> fasten", function() {deepEqual( Stem("fastened"), "fasten");});
test("faster -> faster", function() {deepEqual( Stem("faster"), "faster");});
test("fastest -> fastest", function() {deepEqual( Stem("fastest"), "fastest");});
test("fasting -> fast", function() {deepEqual( Stem("fasting"), "fast");});
test("fastly -> fastli", function() {deepEqual( Stem("fastly"), "fastli");});
test("fastolfe -> fastolf", function() {deepEqual( Stem("fastolfe"), "fastolf");});
test("fasts -> fast", function() {deepEqual( Stem("fasts"), "fast");});
test("fat -> fat", function() {deepEqual( Stem("fat"), "fat");});
test("fatal -> fatal", function() {deepEqual( Stem("fatal"), "fatal");});
test("fatally -> fatal", function() {deepEqual( Stem("fatally"), "fatal");});
test("fate -> fate", function() {deepEqual( Stem("fate"), "fate");});
test("fated -> fate", function() {deepEqual( Stem("fated"), "fate");});
test("fateful -> fate", function() {deepEqual( Stem("fateful"), "fate");});
test("fates -> fate", function() {deepEqual( Stem("fates"), "fate");});
test("father -> father", function() {deepEqual( Stem("father"), "father");});
test("fathered -> father", function() {deepEqual( Stem("fathered"), "father");});
test("fatherless -> fatherless", function() {deepEqual( Stem("fatherless"), "fatherless");});
test("fatherly -> fatherli", function() {deepEqual( Stem("fatherly"), "fatherli");});
test("fathers -> father", function() {deepEqual( Stem("fathers"), "father");});
test("fathom -> fathom", function() {deepEqual( Stem("fathom"), "fathom");});
test("fathomless -> fathomless", function() {deepEqual( Stem("fathomless"), "fathomless");});
test("fathoms -> fathom", function() {deepEqual( Stem("fathoms"), "fathom");});
test("fatigate -> fatig", function() {deepEqual( Stem("fatigate"), "fatig");});
test("fatigue -> fatigu", function() {deepEqual( Stem("fatigue"), "fatigu");});
test("fatigued -> fatigu", function() {deepEqual( Stem("fatigued"), "fatigu");});
test("fatigues -> fatigu", function() {deepEqual( Stem("fatigues"), "fatigu");});
test("fatness -> fat", function() {deepEqual( Stem("fatness"), "fat");});
test("fats -> fat", function() {deepEqual( Stem("fats"), "fat");});
test("fatted -> fat", function() {deepEqual( Stem("fatted"), "fat");});
test("fatter -> fatter", function() {deepEqual( Stem("fatter"), "fatter");});
test("fattest -> fattest", function() {deepEqual( Stem("fattest"), "fattest");});
test("fatting -> fat", function() {deepEqual( Stem("fatting"), "fat");});
test("fatuus -> fatuu", function() {deepEqual( Stem("fatuus"), "fatuu");});
test("faubourg -> faubourg", function() {deepEqual( Stem("faubourg"), "faubourg");});
test("fauconbridge -> fauconbridg", function() {deepEqual( Stem("fauconbridge"), "fauconbridg");});
test("faugh -> faugh", function() {deepEqual( Stem("faugh"), "faugh");});
test("faulconbridge -> faulconbridg", function() {deepEqual( Stem("faulconbridge"), "faulconbridg");});
test("fault -> fault", function() {deepEqual( Stem("fault"), "fault");});
test("faultiness -> faulti", function() {deepEqual( Stem("faultiness"), "faulti");});
test("faultless -> faultless", function() {deepEqual( Stem("faultless"), "faultless");});
test("faultlessly -> faultlessli", function() {deepEqual( Stem("faultlessly"), "faultlessli");});
test("faults -> fault", function() {deepEqual( Stem("faults"), "fault");});
test("faulty -> faulti", function() {deepEqual( Stem("faulty"), "faulti");});
test("fausse -> fauss", function() {deepEqual( Stem("fausse"), "fauss");});
test("fauste -> faust", function() {deepEqual( Stem("fauste"), "faust");});
test("faustuses -> faustus", function() {deepEqual( Stem("faustuses"), "faustus");});
test("faut -> faut", function() {deepEqual( Stem("faut"), "faut");});
test("faver -> faver", function() {deepEqual( Stem("faver"), "faver");});
test("faviour -> faviour", function() {deepEqual( Stem("faviour"), "faviour");});
test("favor -> favor", function() {deepEqual( Stem("favor"), "favor");});
test("favorable -> favor", function() {deepEqual( Stem("favorable"), "favor");});
test("favorably -> favor", function() {deepEqual( Stem("favorably"), "favor");});
test("favors -> favor", function() {deepEqual( Stem("favors"), "favor");});
test("favour -> favour", function() {deepEqual( Stem("favour"), "favour");});
test("favourable -> favour", function() {deepEqual( Stem("favourable"), "favour");});
test("favourably -> favour", function() {deepEqual( Stem("favourably"), "favour");});
test("favoured -> favour", function() {deepEqual( Stem("favoured"), "favour");});
test("favouredly -> favouredli", function() {deepEqual( Stem("favouredly"), "favouredli");});
test("favourer -> favour", function() {deepEqual( Stem("favourer"), "favour");});
test("favourers -> favour", function() {deepEqual( Stem("favourers"), "favour");});
test("favouring -> favour", function() {deepEqual( Stem("favouring"), "favour");});
test("favourite -> favourit", function() {deepEqual( Stem("favourite"), "favourit");});
test("favourites -> favourit", function() {deepEqual( Stem("favourites"), "favourit");});
test("favours -> favour", function() {deepEqual( Stem("favours"), "favour");});
test("favout -> favout", function() {deepEqual( Stem("favout"), "favout");});
test("fawn -> fawn", function() {deepEqual( Stem("fawn"), "fawn");});
test("fawneth -> fawneth", function() {deepEqual( Stem("fawneth"), "fawneth");});
test("fawning -> fawn", function() {deepEqual( Stem("fawning"), "fawn");});
test("fawns -> fawn", function() {deepEqual( Stem("fawns"), "fawn");});
test("fawther -> fawther", function() {deepEqual( Stem("fawther"), "fawther");});
test("fay -> fai", function() {deepEqual( Stem("fay"), "fai");});
test("fe -> fe", function() {deepEqual( Stem("fe"), "fe");});
test("fealty -> fealti", function() {deepEqual( Stem("fealty"), "fealti");});
test("fear -> fear", function() {deepEqual( Stem("fear"), "fear");});
test("feared -> fear", function() {deepEqual( Stem("feared"), "fear");});
test("fearest -> fearest", function() {deepEqual( Stem("fearest"), "fearest");});
test("fearful -> fear", function() {deepEqual( Stem("fearful"), "fear");});
test("fearfull -> fearful", function() {deepEqual( Stem("fearfull"), "fearful");});
test("fearfully -> fearfulli", function() {deepEqual( Stem("fearfully"), "fearfulli");});
test("fearfulness -> fear", function() {deepEqual( Stem("fearfulness"), "fear");});
test("fearing -> fear", function() {deepEqual( Stem("fearing"), "fear");});
test("fearless -> fearless", function() {deepEqual( Stem("fearless"), "fearless");});
test("fears -> fear", function() {deepEqual( Stem("fears"), "fear");});
test("feast -> feast", function() {deepEqual( Stem("feast"), "feast");});
test("feasted -> feast", function() {deepEqual( Stem("feasted"), "feast");});
test("feasters -> feaster", function() {deepEqual( Stem("feasters"), "feaster");});
test("feasting -> feast", function() {deepEqual( Stem("feasting"), "feast");});
test("feasts -> feast", function() {deepEqual( Stem("feasts"), "feast");});
test("feat -> feat", function() {deepEqual( Stem("feat"), "feat");});
test("feated -> feat", function() {deepEqual( Stem("feated"), "feat");});
test("feater -> feater", function() {deepEqual( Stem("feater"), "feater");});
test("feather -> feather", function() {deepEqual( Stem("feather"), "feather");});
test("featherbed -> featherb", function() {deepEqual( Stem("featherbed"), "featherb");});
test("feathered -> feather", function() {deepEqual( Stem("feathered"), "feather");});
test("feathers -> feather", function() {deepEqual( Stem("feathers"), "feather");});
test("featly -> featli", function() {deepEqual( Stem("featly"), "featli");});
test("feats -> feat", function() {deepEqual( Stem("feats"), "feat");});
test("featur -> featur", function() {deepEqual( Stem("featur"), "featur");});
test("feature -> featur", function() {deepEqual( Stem("feature"), "featur");});
test("featured -> featur", function() {deepEqual( Stem("featured"), "featur");});
test("featureless -> featureless", function() {deepEqual( Stem("featureless"), "featureless");});
test("features -> featur", function() {deepEqual( Stem("features"), "featur");});
test("february -> februari", function() {deepEqual( Stem("february"), "februari");});
test("fecks -> feck", function() {deepEqual( Stem("fecks"), "feck");});
test("fed -> fed", function() {deepEqual( Stem("fed"), "fed");});
test("fedary -> fedari", function() {deepEqual( Stem("fedary"), "fedari");});
test("federary -> federari", function() {deepEqual( Stem("federary"), "federari");});
test("fee -> fee", function() {deepEqual( Stem("fee"), "fee");});
test("feeble -> feebl", function() {deepEqual( Stem("feeble"), "feebl");});
test("feebled -> feebl", function() {deepEqual( Stem("feebled"), "feebl");});
test("feebleness -> feebl", function() {deepEqual( Stem("feebleness"), "feebl");});
test("feebling -> feebl", function() {deepEqual( Stem("feebling"), "feebl");});
test("feebly -> feebli", function() {deepEqual( Stem("feebly"), "feebli");});
test("feed -> feed", function() {deepEqual( Stem("feed"), "feed");});
test("feeder -> feeder", function() {deepEqual( Stem("feeder"), "feeder");});
test("feeders -> feeder", function() {deepEqual( Stem("feeders"), "feeder");});
test("feedeth -> feedeth", function() {deepEqual( Stem("feedeth"), "feedeth");});
test("feeding -> feed", function() {deepEqual( Stem("feeding"), "feed");});
test("feeds -> feed", function() {deepEqual( Stem("feeds"), "feed");});
test("feel -> feel", function() {deepEqual( Stem("feel"), "feel");});
test("feeler -> feeler", function() {deepEqual( Stem("feeler"), "feeler");});
test("feeling -> feel", function() {deepEqual( Stem("feeling"), "feel");});
test("feelingly -> feelingli", function() {deepEqual( Stem("feelingly"), "feelingli");});
test("feelings -> feel", function() {deepEqual( Stem("feelings"), "feel");});
test("feels -> feel", function() {deepEqual( Stem("feels"), "feel");});
test("fees -> fee", function() {deepEqual( Stem("fees"), "fee");});
test("feet -> feet", function() {deepEqual( Stem("feet"), "feet");});
test("fehemently -> fehement", function() {deepEqual( Stem("fehemently"), "fehement");});
test("feign -> feign", function() {deepEqual( Stem("feign"), "feign");});
test("feigned -> feign", function() {deepEqual( Stem("feigned"), "feign");});
test("feigning -> feign", function() {deepEqual( Stem("feigning"), "feign");});
test("feil -> feil", function() {deepEqual( Stem("feil"), "feil");});
test("feith -> feith", function() {deepEqual( Stem("feith"), "feith");});
test("felicita -> felicita", function() {deepEqual( Stem("felicita"), "felicita");});
test("felicitate -> felicit", function() {deepEqual( Stem("felicitate"), "felicit");});
test("felicitous -> felicit", function() {deepEqual( Stem("felicitous"), "felicit");});
test("felicity -> felic", function() {deepEqual( Stem("felicity"), "felic");});
test("felix -> felix", function() {deepEqual( Stem("felix"), "felix");});
test("fell -> fell", function() {deepEqual( Stem("fell"), "fell");});
test("fellar -> fellar", function() {deepEqual( Stem("fellar"), "fellar");});
test("feller -> feller", function() {deepEqual( Stem("feller"), "feller");});
test("fellers -> feller", function() {deepEqual( Stem("fellers"), "feller");});
test("fellest -> fellest", function() {deepEqual( Stem("fellest"), "fellest");});
test("fellies -> felli", function() {deepEqual( Stem("fellies"), "felli");});
test("felling -> fell", function() {deepEqual( Stem("felling"), "fell");});
test("fellow -> fellow", function() {deepEqual( Stem("fellow"), "fellow");});
test("fellowly -> fellowli", function() {deepEqual( Stem("fellowly"), "fellowli");});
test("fellows -> fellow", function() {deepEqual( Stem("fellows"), "fellow");});
test("fellowship -> fellowship", function() {deepEqual( Stem("fellowship"), "fellowship");});
test("fellowships -> fellowship", function() {deepEqual( Stem("fellowships"), "fellowship");});
test("fells -> fell", function() {deepEqual( Stem("fells"), "fell");});
test("felon -> felon", function() {deepEqual( Stem("felon"), "felon");});
test("felonious -> feloni", function() {deepEqual( Stem("felonious"), "feloni");});
test("felony -> feloni", function() {deepEqual( Stem("felony"), "feloni");});
test("felt -> felt", function() {deepEqual( Stem("felt"), "felt");});
test("feltham -> feltham", function() {deepEqual( Stem("feltham"), "feltham");});
test("female -> femal", function() {deepEqual( Stem("female"), "femal");});
test("females -> femal", function() {deepEqual( Stem("females"), "femal");});
test("feminine -> feminin", function() {deepEqual( Stem("feminine"), "feminin");});
test("femme -> femm", function() {deepEqual( Stem("femme"), "femm");});
test("femmes -> femm", function() {deepEqual( Stem("femmes"), "femm");});
test("fen -> fen", function() {deepEqual( Stem("fen"), "fen");});
test("fenc -> fenc", function() {deepEqual( Stem("fenc"), "fenc");});
test("fence -> fenc", function() {deepEqual( Stem("fence"), "fenc");});
test("fencer -> fencer", function() {deepEqual( Stem("fencer"), "fencer");});
test("fences -> fenc", function() {deepEqual( Stem("fences"), "fenc");});
test("fencing -> fenc", function() {deepEqual( Stem("fencing"), "fenc");});
test("fends -> fend", function() {deepEqual( Stem("fends"), "fend");});
test("fennel -> fennel", function() {deepEqual( Stem("fennel"), "fennel");});
test("fenny -> fenni", function() {deepEqual( Stem("fenny"), "fenni");});
test("fens -> fen", function() {deepEqual( Stem("fens"), "fen");});
test("fenton -> fenton", function() {deepEqual( Stem("fenton"), "fenton");});
test("fer -> fer", function() {deepEqual( Stem("fer"), "fer");});
test("ferdinand -> ferdinand", function() {deepEqual( Stem("ferdinand"), "ferdinand");});
test("fere -> fere", function() {deepEqual( Stem("fere"), "fere");});
test("fernseed -> fernse", function() {deepEqual( Stem("fernseed"), "fernse");});
test("ferocity -> feroc", function() {deepEqual( Stem("ferocity"), "feroc");});
test("ferrara -> ferrara", function() {deepEqual( Stem("ferrara"), "ferrara");});
test("ferrers -> ferrer", function() {deepEqual( Stem("ferrers"), "ferrer");});
test("ferret -> ferret", function() {deepEqual( Stem("ferret"), "ferret");});
test("ferrets -> ferret", function() {deepEqual( Stem("ferrets"), "ferret");});
test("ferry -> ferri", function() {deepEqual( Stem("ferry"), "ferri");});
test("ferryman -> ferryman", function() {deepEqual( Stem("ferryman"), "ferryman");});
test("fertile -> fertil", function() {deepEqual( Stem("fertile"), "fertil");});
test("fertility -> fertil", function() {deepEqual( Stem("fertility"), "fertil");});
test("fertilizing -> fertil", function() {deepEqual( Stem("fertilizing"), "fertil");});
test("fervency -> fervenc", function() {deepEqual( Stem("fervency"), "fervenc");});
test("fervently -> fervent", function() {deepEqual( Stem("fervently"), "fervent");});
test("fervour -> fervour", function() {deepEqual( Stem("fervour"), "fervour");});
test("fery -> feri", function() {deepEqual( Stem("fery"), "feri");});
test("fest -> fest", function() {deepEqual( Stem("fest"), "fest");});
test("feste -> fest", function() {deepEqual( Stem("feste"), "fest");});
test("fester -> fester", function() {deepEqual( Stem("fester"), "fester");});
test("festin -> festin", function() {deepEqual( Stem("festin"), "festin");});
test("festinate -> festin", function() {deepEqual( Stem("festinate"), "festin");});
test("festinately -> festin", function() {deepEqual( Stem("festinately"), "festin");});
test("festival -> festiv", function() {deepEqual( Stem("festival"), "festiv");});
test("festivals -> festiv", function() {deepEqual( Stem("festivals"), "festiv");});
test("festive -> festiv", function() {deepEqual( Stem("festive"), "festiv");});
test("festivities -> festiv", function() {deepEqual( Stem("festivities"), "festiv");});
test("festivity -> festiv", function() {deepEqual( Stem("festivity"), "festiv");});
test("fet -> fet", function() {deepEqual( Stem("fet"), "fet");});
test("fetch -> fetch", function() {deepEqual( Stem("fetch"), "fetch");});
test("fetched -> fetch", function() {deepEqual( Stem("fetched"), "fetch");});
test("fetches -> fetch", function() {deepEqual( Stem("fetches"), "fetch");});
test("fetching -> fetch", function() {deepEqual( Stem("fetching"), "fetch");});
test("fete -> fete", function() {deepEqual( Stem("fete"), "fete");});
test("fetes -> fete", function() {deepEqual( Stem("fetes"), "fete");});
test("fetlock -> fetlock", function() {deepEqual( Stem("fetlock"), "fetlock");});
test("fetlocks -> fetlock", function() {deepEqual( Stem("fetlocks"), "fetlock");});
test("fett -> fett", function() {deepEqual( Stem("fett"), "fett");});
test("fetter -> fetter", function() {deepEqual( Stem("fetter"), "fetter");});
test("fettering -> fetter", function() {deepEqual( Stem("fettering"), "fetter");});
test("fetters -> fetter", function() {deepEqual( Stem("fetters"), "fetter");});
test("fettle -> fettl", function() {deepEqual( Stem("fettle"), "fettl");});
test("feu -> feu", function() {deepEqual( Stem("feu"), "feu");});
test("feud -> feud", function() {deepEqual( Stem("feud"), "feud");});
test("feuds -> feud", function() {deepEqual( Stem("feuds"), "feud");});
test("fever -> fever", function() {deepEqual( Stem("fever"), "fever");});
test("fevered -> fever", function() {deepEqual( Stem("fevered"), "fever");});
test("feverish -> feverish", function() {deepEqual( Stem("feverish"), "feverish");});
test("feverishly -> feverishli", function() {deepEqual( Stem("feverishly"), "feverishli");});
test("feverous -> fever", function() {deepEqual( Stem("feverous"), "fever");});
test("fevers -> fever", function() {deepEqual( Stem("fevers"), "fever");});
test("few -> few", function() {deepEqual( Stem("few"), "few");});
test("fewer -> fewer", function() {deepEqual( Stem("fewer"), "fewer");});
test("fewest -> fewest", function() {deepEqual( Stem("fewest"), "fewest");});
test("fewness -> few", function() {deepEqual( Stem("fewness"), "few");});
test("fib -> fib", function() {deepEqual( Stem("fib"), "fib");});
test("fibber -> fibber", function() {deepEqual( Stem("fibber"), "fibber");});
test("fibre -> fibr", function() {deepEqual( Stem("fibre"), "fibr");});
test("fibs -> fib", function() {deepEqual( Stem("fibs"), "fib");});
test("fibster -> fibster", function() {deepEqual( Stem("fibster"), "fibster");});
test("ficci -> ficci", function() {deepEqual( Stem("ficci"), "ficci");});
test("fiche -> fich", function() {deepEqual( Stem("fiche"), "fich");});
test("fichus -> fichu", function() {deepEqual( Stem("fichus"), "fichu");});
test("fickle -> fickl", function() {deepEqual( Stem("fickle"), "fickl");});
test("fickleness -> fickl", function() {deepEqual( Stem("fickleness"), "fickl");});
test("fico -> fico", function() {deepEqual( Stem("fico"), "fico");});
test("fiction -> fiction", function() {deepEqual( Stem("fiction"), "fiction");});
test("fictitious -> fictiti", function() {deepEqual( Stem("fictitious"), "fictiti");});
test("fiddle -> fiddl", function() {deepEqual( Stem("fiddle"), "fiddl");});
test("fiddlede -> fiddled", function() {deepEqual( Stem("fiddlede"), "fiddled");});
test("fiddler -> fiddler", function() {deepEqual( Stem("fiddler"), "fiddler");});
test("fiddlers -> fiddler", function() {deepEqual( Stem("fiddlers"), "fiddler");});
test("fiddlestick -> fiddlestick", function() {deepEqual( Stem("fiddlestick"), "fiddlestick");});
test("fiddling -> fiddl", function() {deepEqual( Stem("fiddling"), "fiddl");});
test("fidele -> fidel", function() {deepEqual( Stem("fidele"), "fidel");});
test("fidelicet -> fidelicet", function() {deepEqual( Stem("fidelicet"), "fidelicet");});
test("fidelio -> fidelio", function() {deepEqual( Stem("fidelio"), "fidelio");});
test("fidelity -> fidel", function() {deepEqual( Stem("fidelity"), "fidel");});
test("fidius -> fidiu", function() {deepEqual( Stem("fidius"), "fidiu");});
test("fie -> fie", function() {deepEqual( Stem("fie"), "fie");});
test("field -> field", function() {deepEqual( Stem("field"), "field");});
test("fielded -> field", function() {deepEqual( Stem("fielded"), "field");});
test("fielding -> field", function() {deepEqual( Stem("fielding"), "field");});
test("fields -> field", function() {deepEqual( Stem("fields"), "field");});
test("fiend -> fiend", function() {deepEqual( Stem("fiend"), "fiend");});
test("fiendish -> fiendish", function() {deepEqual( Stem("fiendish"), "fiendish");});
test("fiends -> fiend", function() {deepEqual( Stem("fiends"), "fiend");});
test("fierce -> fierc", function() {deepEqual( Stem("fierce"), "fierc");});
test("fiercely -> fierc", function() {deepEqual( Stem("fiercely"), "fierc");});
test("fierceness -> fierc", function() {deepEqual( Stem("fierceness"), "fierc");});
test("fiery -> fieri", function() {deepEqual( Stem("fiery"), "fieri");});
test("fife -> fife", function() {deepEqual( Stem("fife"), "fife");});
test("fifes -> fife", function() {deepEqual( Stem("fifes"), "fife");});
test("fifine -> fifin", function() {deepEqual( Stem("fifine"), "fifin");});
test("fifteen -> fifteen", function() {deepEqual( Stem("fifteen"), "fifteen");});
test("fifteens -> fifteen", function() {deepEqual( Stem("fifteens"), "fifteen");});
test("fifteenth -> fifteenth", function() {deepEqual( Stem("fifteenth"), "fifteenth");});
test("fifth -> fifth", function() {deepEqual( Stem("fifth"), "fifth");});
test("fiftieth -> fiftieth", function() {deepEqual( Stem("fiftieth"), "fiftieth");});
test("fifty -> fifti", function() {deepEqual( Stem("fifty"), "fifti");});
test("fiftyfold -> fiftyfold", function() {deepEqual( Stem("fiftyfold"), "fiftyfold");});
test("fig -> fig", function() {deepEqual( Stem("fig"), "fig");});
test("fight -> fight", function() {deepEqual( Stem("fight"), "fight");});
test("fighter -> fighter", function() {deepEqual( Stem("fighter"), "fighter");});
test("fightest -> fightest", function() {deepEqual( Stem("fightest"), "fightest");});
test("fighteth -> fighteth", function() {deepEqual( Stem("fighteth"), "fighteth");});
test("fighting -> fight", function() {deepEqual( Stem("fighting"), "fight");});
test("fights -> fight", function() {deepEqual( Stem("fights"), "fight");});
test("figo -> figo", function() {deepEqual( Stem("figo"), "figo");});
test("figs -> fig", function() {deepEqual( Stem("figs"), "fig");});
test("figur -> figur", function() {deepEqual( Stem("figur"), "figur");});
test("figure -> figur", function() {deepEqual( Stem("figure"), "figur");});
test("figured -> figur", function() {deepEqual( Stem("figured"), "figur");});
test("figures -> figur", function() {deepEqual( Stem("figures"), "figur");});
test("figuring -> figur", function() {deepEqual( Stem("figuring"), "figur");});
test("fiji -> fiji", function() {deepEqual( Stem("fiji"), "fiji");});
test("fike -> fike", function() {deepEqual( Stem("fike"), "fike");});
test("fil -> fil", function() {deepEqual( Stem("fil"), "fil");});
test("filberts -> filbert", function() {deepEqual( Stem("filberts"), "filbert");});
test("filch -> filch", function() {deepEqual( Stem("filch"), "filch");});
test("filches -> filch", function() {deepEqual( Stem("filches"), "filch");});
test("filching -> filch", function() {deepEqual( Stem("filching"), "filch");});
test("file -> file", function() {deepEqual( Stem("file"), "file");});
test("filed -> file", function() {deepEqual( Stem("filed"), "file");});
test("files -> file", function() {deepEqual( Stem("files"), "file");});
test("filial -> filial", function() {deepEqual( Stem("filial"), "filial");});
test("filigree -> filigre", function() {deepEqual( Stem("filigree"), "filigre");});
test("filius -> filiu", function() {deepEqual( Stem("filius"), "filiu");});
test("fill -> fill", function() {deepEqual( Stem("fill"), "fill");});
test("filled -> fill", function() {deepEqual( Stem("filled"), "fill");});
test("fillet -> fillet", function() {deepEqual( Stem("fillet"), "fillet");});
test("filling -> fill", function() {deepEqual( Stem("filling"), "fill");});
test("fillip -> fillip", function() {deepEqual( Stem("fillip"), "fillip");});
test("fills -> fill", function() {deepEqual( Stem("fills"), "fill");});
test("filly -> filli", function() {deepEqual( Stem("filly"), "filli");});
test("film -> film", function() {deepEqual( Stem("film"), "film");});
test("fils -> fil", function() {deepEqual( Stem("fils"), "fil");});
test("filth -> filth", function() {deepEqual( Stem("filth"), "filth");});
test("filths -> filth", function() {deepEqual( Stem("filths"), "filth");});
test("filthy -> filthi", function() {deepEqual( Stem("filthy"), "filthi");});
test("fin -> fin", function() {deepEqual( Stem("fin"), "fin");});
test("final -> final", function() {deepEqual( Stem("final"), "final");});
test("finale -> final", function() {deepEqual( Stem("finale"), "final");});
test("finally -> final", function() {deepEqual( Stem("finally"), "final");});
test("finances -> financ", function() {deepEqual( Stem("finances"), "financ");});
test("financier -> financi", function() {deepEqual( Stem("financier"), "financi");});
test("finch -> finch", function() {deepEqual( Stem("finch"), "finch");});
test("finchley -> finchlei", function() {deepEqual( Stem("finchley"), "finchlei");});
test("find -> find", function() {deepEqual( Stem("find"), "find");});
test("finder -> finder", function() {deepEqual( Stem("finder"), "finder");});
test("findeth -> findeth", function() {deepEqual( Stem("findeth"), "findeth");});
test("finding -> find", function() {deepEqual( Stem("finding"), "find");});
test("findings -> find", function() {deepEqual( Stem("findings"), "find");});
test("finds -> find", function() {deepEqual( Stem("finds"), "find");});
test("fine -> fine", function() {deepEqual( Stem("fine"), "fine");});
test("fineless -> fineless", function() {deepEqual( Stem("fineless"), "fineless");});
test("finely -> fine", function() {deepEqual( Stem("finely"), "fine");});
test("finem -> finem", function() {deepEqual( Stem("finem"), "finem");});
test("fineness -> fine", function() {deepEqual( Stem("fineness"), "fine");});
test("finer -> finer", function() {deepEqual( Stem("finer"), "finer");});
test("finery -> fineri", function() {deepEqual( Stem("finery"), "fineri");});
test("fines -> fine", function() {deepEqual( Stem("fines"), "fine");});
test("finest -> finest", function() {deepEqual( Stem("finest"), "finest");});
test("finette -> finett", function() {deepEqual( Stem("finette"), "finett");});
test("fing -> fing", function() {deepEqual( Stem("fing"), "fing");});
test("finger -> finger", function() {deepEqual( Stem("finger"), "finger");});
test("fingered -> finger", function() {deepEqual( Stem("fingered"), "finger");});
test("fingering -> finger", function() {deepEqual( Stem("fingering"), "finger");});
test("fingers -> finger", function() {deepEqual( Stem("fingers"), "finger");});
test("fingre -> fingr", function() {deepEqual( Stem("fingre"), "fingr");});
test("fingres -> fingr", function() {deepEqual( Stem("fingres"), "fingr");});
test("finical -> finic", function() {deepEqual( Stem("finical"), "finic");});
test("finikin -> finikin", function() {deepEqual( Stem("finikin"), "finikin");});
test("finish -> finish", function() {deepEqual( Stem("finish"), "finish");});
test("finished -> finish", function() {deepEqual( Stem("finished"), "finish");});
test("finisher -> finish", function() {deepEqual( Stem("finisher"), "finish");});
test("finishing -> finish", function() {deepEqual( Stem("finishing"), "finish");});
test("finless -> finless", function() {deepEqual( Stem("finless"), "finless");});
test("finn -> finn", function() {deepEqual( Stem("finn"), "finn");});
test("fins -> fin", function() {deepEqual( Stem("fins"), "fin");});
test("finsbury -> finsburi", function() {deepEqual( Stem("finsbury"), "finsburi");});
test("fipps -> fipp", function() {deepEqual( Stem("fipps"), "fipp");});
test("fir -> fir", function() {deepEqual( Stem("fir"), "fir");});
test("firago -> firago", function() {deepEqual( Stem("firago"), "firago");});
test("fire -> fire", function() {deepEqual( Stem("fire"), "fire");});
test("firebrace -> firebrac", function() {deepEqual( Stem("firebrace"), "firebrac");});
test("firebrand -> firebrand", function() {deepEqual( Stem("firebrand"), "firebrand");});
test("firebrands -> firebrand", function() {deepEqual( Stem("firebrands"), "firebrand");});
test("fired -> fire", function() {deepEqual( Stem("fired"), "fire");});
test("fireplace -> fireplac", function() {deepEqual( Stem("fireplace"), "fireplac");});
test("fires -> fire", function() {deepEqual( Stem("fires"), "fire");});
test("fireside -> firesid", function() {deepEqual( Stem("fireside"), "firesid");});
test("firework -> firework", function() {deepEqual( Stem("firework"), "firework");});
test("fireworks -> firework", function() {deepEqual( Stem("fireworks"), "firework");});
test("firing -> fire", function() {deepEqual( Stem("firing"), "fire");});
test("firk -> firk", function() {deepEqual( Stem("firk"), "firk");});
test("firkin -> firkin", function() {deepEqual( Stem("firkin"), "firkin");});
test("firm -> firm", function() {deepEqual( Stem("firm"), "firm");});
test("firmament -> firmament", function() {deepEqual( Stem("firmament"), "firmament");});
test("firman -> firman", function() {deepEqual( Stem("firman"), "firman");});
test("firmly -> firmli", function() {deepEqual( Stem("firmly"), "firmli");});
test("firmness -> firm", function() {deepEqual( Stem("firmness"), "firm");});
test("firms -> firm", function() {deepEqual( Stem("firms"), "firm");});
test("first -> first", function() {deepEqual( Stem("first"), "first");});
test("firstlings -> firstl", function() {deepEqual( Stem("firstlings"), "firstl");});
test("fish -> fish", function() {deepEqual( Stem("fish"), "fish");});
test("fishamble -> fishambl", function() {deepEqual( Stem("fishamble"), "fishambl");});
test("fisher -> fisher", function() {deepEqual( Stem("fisher"), "fisher");});
test("fishermen -> fishermen", function() {deepEqual( Stem("fishermen"), "fishermen");});
test("fishers -> fisher", function() {deepEqual( Stem("fishers"), "fisher");});
test("fishes -> fish", function() {deepEqual( Stem("fishes"), "fish");});
test("fishified -> fishifi", function() {deepEqual( Stem("fishified"), "fishifi");});
test("fishing -> fish", function() {deepEqual( Stem("fishing"), "fish");});
test("fishmonger -> fishmong", function() {deepEqual( Stem("fishmonger"), "fishmong");});
test("fishpond -> fishpond", function() {deepEqual( Stem("fishpond"), "fishpond");});
test("fisnomy -> fisnomi", function() {deepEqual( Stem("fisnomy"), "fisnomi");});
test("fist -> fist", function() {deepEqual( Stem("fist"), "fist");});
test("fisting -> fist", function() {deepEqual( Stem("fisting"), "fist");});
test("fists -> fist", function() {deepEqual( Stem("fists"), "fist");});
test("fistula -> fistula", function() {deepEqual( Stem("fistula"), "fistula");});
test("fit -> fit", function() {deepEqual( Stem("fit"), "fit");});
test("fitchew -> fitchew", function() {deepEqual( Stem("fitchew"), "fitchew");});
test("fitful -> fit", function() {deepEqual( Stem("fitful"), "fit");});
test("fitly -> fitli", function() {deepEqual( Stem("fitly"), "fitli");});
test("fitment -> fitment", function() {deepEqual( Stem("fitment"), "fitment");});
test("fitness -> fit", function() {deepEqual( Stem("fitness"), "fit");});
test("fits -> fit", function() {deepEqual( Stem("fits"), "fit");});
test("fitted -> fit", function() {deepEqual( Stem("fitted"), "fit");});
test("fitter -> fitter", function() {deepEqual( Stem("fitter"), "fitter");});
test("fittest -> fittest", function() {deepEqual( Stem("fittest"), "fittest");});
test("fitteth -> fitteth", function() {deepEqual( Stem("fitteth"), "fitteth");});
test("fitting -> fit", function() {deepEqual( Stem("fitting"), "fit");});
test("fitz -> fitz", function() {deepEqual( Stem("fitz"), "fitz");});
test("fitzjurld -> fitzjurld", function() {deepEqual( Stem("fitzjurld"), "fitzjurld");});
test("fitzoof -> fitzoof", function() {deepEqual( Stem("fitzoof"), "fitzoof");});
test("fitzrufus -> fitzrufu", function() {deepEqual( Stem("fitzrufus"), "fitzrufu");});
test("fitzurse -> fitzurs", function() {deepEqual( Stem("fitzurse"), "fitzurs");});
test("fitzwater -> fitzwat", function() {deepEqual( Stem("fitzwater"), "fitzwat");});
test("five -> five", function() {deepEqual( Stem("five"), "five");});
test("fivepence -> fivep", function() {deepEqual( Stem("fivepence"), "fivep");});
test("fives -> five", function() {deepEqual( Stem("fives"), "five");});
test("fix -> fix", function() {deepEqual( Stem("fix"), "fix");});
test("fixed -> fix", function() {deepEqual( Stem("fixed"), "fix");});
test("fixes -> fix", function() {deepEqual( Stem("fixes"), "fix");});
test("fixeth -> fixeth", function() {deepEqual( Stem("fixeth"), "fixeth");});
test("fixing -> fix", function() {deepEqual( Stem("fixing"), "fix");});
test("fixture -> fixtur", function() {deepEqual( Stem("fixture"), "fixtur");});
test("fl -> fl", function() {deepEqual( Stem("fl"), "fl");});
test("flaccid -> flaccid", function() {deepEqual( Stem("flaccid"), "flaccid");});
test("flag -> flag", function() {deepEqual( Stem("flag"), "flag");});
test("flagging -> flag", function() {deepEqual( Stem("flagging"), "flag");});
test("flagon -> flagon", function() {deepEqual( Stem("flagon"), "flagon");});
test("flagons -> flagon", function() {deepEqual( Stem("flagons"), "flagon");});
test("flagrant -> flagrant", function() {deepEqual( Stem("flagrant"), "flagrant");});
test("flags -> flag", function() {deepEqual( Stem("flags"), "flag");});
test("flail -> flail", function() {deepEqual( Stem("flail"), "flail");});
test("flakes -> flake", function() {deepEqual( Stem("flakes"), "flake");});
test("flaky -> flaki", function() {deepEqual( Stem("flaky"), "flaki");});
test("flam -> flam", function() {deepEqual( Stem("flam"), "flam");});
test("flambeau -> flambeau", function() {deepEqual( Stem("flambeau"), "flambeau");});
test("flame -> flame", function() {deepEqual( Stem("flame"), "flame");});
test("flamed -> flame", function() {deepEqual( Stem("flamed"), "flame");});
test("flamen -> flamen", function() {deepEqual( Stem("flamen"), "flamen");});
test("flamens -> flamen", function() {deepEqual( Stem("flamens"), "flamen");});
test("flames -> flame", function() {deepEqual( Stem("flames"), "flame");});
test("flaming -> flame", function() {deepEqual( Stem("flaming"), "flame");});
test("flamingo -> flamingo", function() {deepEqual( Stem("flamingo"), "flamingo");});
test("flaminius -> flaminiu", function() {deepEqual( Stem("flaminius"), "flaminiu");});
test("flanagan -> flanagan", function() {deepEqual( Stem("flanagan"), "flanagan");});
test("flanahan -> flanahan", function() {deepEqual( Stem("flanahan"), "flanahan");});
test("flanders -> flander", function() {deepEqual( Stem("flanders"), "flander");});
test("flank -> flank", function() {deepEqual( Stem("flank"), "flank");});
test("flanked -> flank", function() {deepEqual( Stem("flanked"), "flank");});
test("flannel -> flannel", function() {deepEqual( Stem("flannel"), "flannel");});
test("flannigan -> flannigan", function() {deepEqual( Stem("flannigan"), "flannigan");});
test("flap -> flap", function() {deepEqual( Stem("flap"), "flap");});
test("flapping -> flap", function() {deepEqual( Stem("flapping"), "flap");});
test("flaps -> flap", function() {deepEqual( Stem("flaps"), "flap");});
test("flare -> flare", function() {deepEqual( Stem("flare"), "flare");});
test("flaring -> flare", function() {deepEqual( Stem("flaring"), "flare");});
test("flash -> flash", function() {deepEqual( Stem("flash"), "flash");});
test("flashed -> flash", function() {deepEqual( Stem("flashed"), "flash");});
test("flashes -> flash", function() {deepEqual( Stem("flashes"), "flash");});
test("flashing -> flash", function() {deepEqual( Stem("flashing"), "flash");});
test("flask -> flask", function() {deepEqual( Stem("flask"), "flask");});
test("flasks -> flask", function() {deepEqual( Stem("flasks"), "flask");});
test("flat -> flat", function() {deepEqual( Stem("flat"), "flat");});
test("flatly -> flatli", function() {deepEqual( Stem("flatly"), "flatli");});
test("flatness -> flat", function() {deepEqual( Stem("flatness"), "flat");});
test("flats -> flat", function() {deepEqual( Stem("flats"), "flat");});
test("flatt -> flatt", function() {deepEqual( Stem("flatt"), "flatt");});
test("flattened -> flatten", function() {deepEqual( Stem("flattened"), "flatten");});
test("flatter -> flatter", function() {deepEqual( Stem("flatter"), "flatter");});
test("flattered -> flatter", function() {deepEqual( Stem("flattered"), "flatter");});
test("flatterer -> flatter", function() {deepEqual( Stem("flatterer"), "flatter");});
test("flatterers -> flatter", function() {deepEqual( Stem("flatterers"), "flatter");});
test("flatterest -> flatterest", function() {deepEqual( Stem("flatterest"), "flatterest");});
test("flatteries -> flatteri", function() {deepEqual( Stem("flatteries"), "flatteri");});
test("flattering -> flatter", function() {deepEqual( Stem("flattering"), "flatter");});
test("flatters -> flatter", function() {deepEqual( Stem("flatters"), "flatter");});
test("flattery -> flatteri", function() {deepEqual( Stem("flattery"), "flatteri");});
test("flaunted -> flaunt", function() {deepEqual( Stem("flaunted"), "flaunt");});
test("flaunting -> flaunt", function() {deepEqual( Stem("flaunting"), "flaunt");});
test("flaunts -> flaunt", function() {deepEqual( Stem("flaunts"), "flaunt");});
test("flavio -> flavio", function() {deepEqual( Stem("flavio"), "flavio");});
test("flavius -> flaviu", function() {deepEqual( Stem("flavius"), "flaviu");});
test("flavour -> flavour", function() {deepEqual( Stem("flavour"), "flavour");});
test("flaw -> flaw", function() {deepEqual( Stem("flaw"), "flaw");});
test("flaws -> flaw", function() {deepEqual( Stem("flaws"), "flaw");});
test("flax -> flax", function() {deepEqual( Stem("flax"), "flax");});
test("flaxen -> flaxen", function() {deepEqual( Stem("flaxen"), "flaxen");});
test("flay -> flai", function() {deepEqual( Stem("flay"), "flai");});
test("flaying -> flai", function() {deepEqual( Stem("flaying"), "flai");});
test("flea -> flea", function() {deepEqual( Stem("flea"), "flea");});
test("fleance -> fleanc", function() {deepEqual( Stem("fleance"), "fleanc");});
test("fleas -> flea", function() {deepEqual( Stem("fleas"), "flea");});
test("flecked -> fleck", function() {deepEqual( Stem("flecked"), "fleck");});
test("fled -> fled", function() {deepEqual( Stem("fled"), "fled");});
test("fledge -> fledg", function() {deepEqual( Stem("fledge"), "fledg");});
test("flee -> flee", function() {deepEqual( Stem("flee"), "flee");});
test("fleec -> fleec", function() {deepEqual( Stem("fleec"), "fleec");});
test("fleece -> fleec", function() {deepEqual( Stem("fleece"), "fleec");});
test("fleeced -> fleec", function() {deepEqual( Stem("fleeced"), "fleec");});
test("fleeces -> fleec", function() {deepEqual( Stem("fleeces"), "fleec");});
test("fleer -> fleer", function() {deepEqual( Stem("fleer"), "fleer");});
test("fleering -> fleer", function() {deepEqual( Stem("fleering"), "fleer");});
test("fleers -> fleer", function() {deepEqual( Stem("fleers"), "fleer");});
test("fleet -> fleet", function() {deepEqual( Stem("fleet"), "fleet");});
test("fleeter -> fleeter", function() {deepEqual( Stem("fleeter"), "fleeter");});
test("fleeting -> fleet", function() {deepEqual( Stem("fleeting"), "fleet");});
test("fleming -> fleme", function() {deepEqual( Stem("fleming"), "fleme");});
test("flemish -> flemish", function() {deepEqual( Stem("flemish"), "flemish");});
test("flesh -> flesh", function() {deepEqual( Stem("flesh"), "flesh");});
test("fleshes -> flesh", function() {deepEqual( Stem("fleshes"), "flesh");});
test("fleshly -> fleshli", function() {deepEqual( Stem("fleshly"), "fleshli");});
test("fleshment -> fleshment", function() {deepEqual( Stem("fleshment"), "fleshment");});
test("fleshmonger -> fleshmong", function() {deepEqual( Stem("fleshmonger"), "fleshmong");});
test("fleshpots -> fleshpot", function() {deepEqual( Stem("fleshpots"), "fleshpot");});
test("flethers -> flether", function() {deepEqual( Stem("flethers"), "flether");});
test("fleuve -> fleuv", function() {deepEqual( Stem("fleuve"), "fleuv");});
test("flew -> flew", function() {deepEqual( Stem("flew"), "flew");});
test("flexible -> flexibl", function() {deepEqual( Stem("flexible"), "flexibl");});
test("flexure -> flexur", function() {deepEqual( Stem("flexure"), "flexur");});
test("flibbertigibbet -> flibbertigibbet", function() {deepEqual( Stem("flibbertigibbet"), "flibbertigibbet");});
test("flick -> flick", function() {deepEqual( Stem("flick"), "flick");});
test("flickered -> flicker", function() {deepEqual( Stem("flickered"), "flicker");});
test("flickering -> flicker", function() {deepEqual( Stem("flickering"), "flicker");});
test("flicks -> flick", function() {deepEqual( Stem("flicks"), "flick");});
test("flidge -> flidg", function() {deepEqual( Stem("flidge"), "flidg");});
test("fliers -> flier", function() {deepEqual( Stem("fliers"), "flier");});
test("flies -> fli", function() {deepEqual( Stem("flies"), "fli");});
test("flieth -> flieth", function() {deepEqual( Stem("flieth"), "flieth");});
test("flight -> flight", function() {deepEqual( Stem("flight"), "flight");});
test("flights -> flight", function() {deepEqual( Stem("flights"), "flight");});
test("flighty -> flighti", function() {deepEqual( Stem("flighty"), "flighti");});
test("flinch -> flinch", function() {deepEqual( Stem("flinch"), "flinch");});
test("fling -> fling", function() {deepEqual( Stem("fling"), "fling");});
test("flinging -> fling", function() {deepEqual( Stem("flinging"), "fling");});
test("flings -> fling", function() {deepEqual( Stem("flings"), "fling");});
test("flint -> flint", function() {deepEqual( Stem("flint"), "flint");});
test("flints -> flint", function() {deepEqual( Stem("flints"), "flint");});
test("flinty -> flinti", function() {deepEqual( Stem("flinty"), "flinti");});
test("flippancy -> flippanc", function() {deepEqual( Stem("flippancy"), "flippanc");});
test("flirt -> flirt", function() {deepEqual( Stem("flirt"), "flirt");});
test("flirtation -> flirtat", function() {deepEqual( Stem("flirtation"), "flirtat");});
test("flirted -> flirt", function() {deepEqual( Stem("flirted"), "flirt");});
test("flirting -> flirt", function() {deepEqual( Stem("flirting"), "flirt");});
test("flitting -> flit", function() {deepEqual( Stem("flitting"), "flit");});
test("float -> float", function() {deepEqual( Stem("float"), "float");});
test("floated -> float", function() {deepEqual( Stem("floated"), "float");});
test("floating -> float", function() {deepEqual( Stem("floating"), "float");});
test("floats -> float", function() {deepEqual( Stem("floats"), "float");});
test("flock -> flock", function() {deepEqual( Stem("flock"), "flock");});
test("flocks -> flock", function() {deepEqual( Stem("flocks"), "flock");});
test("flog -> flog", function() {deepEqual( Stem("flog"), "flog");});
test("flogged -> flog", function() {deepEqual( Stem("flogged"), "flog");});
test("floggings -> flog", function() {deepEqual( Stem("floggings"), "flog");});
test("flood -> flood", function() {deepEqual( Stem("flood"), "flood");});
test("floodgates -> floodgat", function() {deepEqual( Stem("floodgates"), "floodgat");});
test("floods -> flood", function() {deepEqual( Stem("floods"), "flood");});
test("floor -> floor", function() {deepEqual( Stem("floor"), "floor");});
test("floored -> floor", function() {deepEqual( Stem("floored"), "floor");});
test("floors -> floor", function() {deepEqual( Stem("floors"), "floor");});
test("flora -> flora", function() {deepEqual( Stem("flora"), "flora");});
test("florence -> florenc", function() {deepEqual( Stem("florence"), "florenc");});
test("florentine -> florentin", function() {deepEqual( Stem("florentine"), "florentin");});
test("florentines -> florentin", function() {deepEqual( Stem("florentines"), "florentin");});
test("florentius -> florentiu", function() {deepEqual( Stem("florentius"), "florentiu");});
test("florestan -> florestan", function() {deepEqual( Stem("florestan"), "florestan");});
test("florid -> florid", function() {deepEqual( Stem("florid"), "florid");});
test("florins -> florin", function() {deepEqual( Stem("florins"), "florin");});
test("florizel -> florizel", function() {deepEqual( Stem("florizel"), "florizel");});
test("floss -> floss", function() {deepEqual( Stem("floss"), "floss");});
test("flote -> flote", function() {deepEqual( Stem("flote"), "flote");});
test("floulish -> floulish", function() {deepEqual( Stem("floulish"), "floulish");});
test("flouncing -> flounc", function() {deepEqual( Stem("flouncing"), "flounc");});
test("floundered -> flounder", function() {deepEqual( Stem("floundered"), "flounder");});
test("flour -> flour", function() {deepEqual( Stem("flour"), "flour");});
test("flourish -> flourish", function() {deepEqual( Stem("flourish"), "flourish");});
test("flourishes -> flourish", function() {deepEqual( Stem("flourishes"), "flourish");});
test("flourisheth -> flourisheth", function() {deepEqual( Stem("flourisheth"), "flourisheth");});
test("flourishing -> flourish", function() {deepEqual( Stem("flourishing"), "flourish");});
test("flout -> flout", function() {deepEqual( Stem("flout"), "flout");});
test("flouted -> flout", function() {deepEqual( Stem("flouted"), "flout");});
test("flouting -> flout", function() {deepEqual( Stem("flouting"), "flout");});
test("flouts -> flout", function() {deepEqual( Stem("flouts"), "flout");});
test("flow -> flow", function() {deepEqual( Stem("flow"), "flow");});
test("flowed -> flow", function() {deepEqual( Stem("flowed"), "flow");});
test("flower -> flower", function() {deepEqual( Stem("flower"), "flower");});
test("flowerdale -> flowerdal", function() {deepEqual( Stem("flowerdale"), "flowerdal");});
test("flowerdew -> flowerdew", function() {deepEqual( Stem("flowerdew"), "flowerdew");});
test("flowered -> flower", function() {deepEqual( Stem("flowered"), "flower");});
test("flowerets -> floweret", function() {deepEqual( Stem("flowerets"), "floweret");});
test("flowers -> flower", function() {deepEqual( Stem("flowers"), "flower");});
test("flowing -> flow", function() {deepEqual( Stem("flowing"), "flow");});
test("flown -> flown", function() {deepEqual( Stem("flown"), "flown");});
test("flows -> flow", function() {deepEqual( Stem("flows"), "flow");});
test("fluellen -> fluellen", function() {deepEqual( Stem("fluellen"), "fluellen");});
test("fluency -> fluenci", function() {deepEqual( Stem("fluency"), "fluenci");});
test("fluent -> fluent", function() {deepEqual( Stem("fluent"), "fluent");});
test("fluid -> fluid", function() {deepEqual( Stem("fluid"), "fluid");});
test("flung -> flung", function() {deepEqual( Stem("flung"), "flung");});
test("flures -> flure", function() {deepEqual( Stem("flures"), "flure");});
test("flurried -> flurri", function() {deepEqual( Stem("flurried"), "flurri");});
test("flurry -> flurri", function() {deepEqual( Stem("flurry"), "flurri");});
test("flush -> flush", function() {deepEqual( Stem("flush"), "flush");});
test("flushed -> flush", function() {deepEqual( Stem("flushed"), "flush");});
test("flushing -> flush", function() {deepEqual( Stem("flushing"), "flush");});
test("fluster -> fluster", function() {deepEqual( Stem("fluster"), "fluster");});
test("flute -> flute", function() {deepEqual( Stem("flute"), "flute");});
test("flutes -> flute", function() {deepEqual( Stem("flutes"), "flute");});
test("flutter -> flutter", function() {deepEqual( Stem("flutter"), "flutter");});
test("fluttering -> flutter", function() {deepEqual( Stem("fluttering"), "flutter");});
test("fluvy -> fluvi", function() {deepEqual( Stem("fluvy"), "fluvi");});
test("flux -> flux", function() {deepEqual( Stem("flux"), "flux");});
test("fluxive -> fluxiv", function() {deepEqual( Stem("fluxive"), "fluxiv");});
test("fly -> fly", function() {deepEqual( Stem("fly"), "fly");});
test("flyer -> flyer", function() {deepEqual( Stem("flyer"), "flyer");});
test("flying -> fly", function() {deepEqual( Stem("flying"), "fly");});
test("fo -> fo", function() {deepEqual( Stem("fo"), "fo");});
test("foal -> foal", function() {deepEqual( Stem("foal"), "foal");});
test("foals -> foal", function() {deepEqual( Stem("foals"), "foal");});
test("foam -> foam", function() {deepEqual( Stem("foam"), "foam");});
test("foamed -> foam", function() {deepEqual( Stem("foamed"), "foam");});
test("foaming -> foam", function() {deepEqual( Stem("foaming"), "foam");});
test("foams -> foam", function() {deepEqual( Stem("foams"), "foam");});
test("foamy -> foami", function() {deepEqual( Stem("foamy"), "foami");});
test("fob -> fob", function() {deepEqual( Stem("fob"), "fob");});
test("focative -> foc", function() {deepEqual( Stem("focative"), "foc");});
test("fodder -> fodder", function() {deepEqual( Stem("fodder"), "fodder");});
test("foe -> foe", function() {deepEqual( Stem("foe"), "foe");});
test("foeman -> foeman", function() {deepEqual( Stem("foeman"), "foeman");});
test("foemen -> foemen", function() {deepEqual( Stem("foemen"), "foemen");});
test("foes -> foe", function() {deepEqual( Stem("foes"), "foe");});
test("fog -> fog", function() {deepEqual( Stem("fog"), "fog");});
test("fogarty -> fogarti", function() {deepEqual( Stem("fogarty"), "fogarti");});
test("fogey -> fogei", function() {deepEqual( Stem("fogey"), "fogei");});
test("foggy -> foggi", function() {deepEqual( Stem("foggy"), "foggi");});
test("fogle -> fogl", function() {deepEqual( Stem("fogle"), "fogl");});
test("fogles -> fogl", function() {deepEqual( Stem("fogles"), "fogl");});
test("fogs -> fog", function() {deepEqual( Stem("fogs"), "fog");});
test("foh -> foh", function() {deepEqual( Stem("foh"), "foh");});
test("foi -> foi", function() {deepEqual( Stem("foi"), "foi");});
test("foibles -> foibl", function() {deepEqual( Stem("foibles"), "foibl");});
test("foie -> foie", function() {deepEqual( Stem("foie"), "foie");});
test("foil -> foil", function() {deepEqual( Stem("foil"), "foil");});
test("foiled -> foil", function() {deepEqual( Stem("foiled"), "foil");});
test("foils -> foil", function() {deepEqual( Stem("foils"), "foil");});
test("foin -> foin", function() {deepEqual( Stem("foin"), "foin");});
test("foining -> foin", function() {deepEqual( Stem("foining"), "foin");});
test("foins -> foin", function() {deepEqual( Stem("foins"), "foin");});
test("fois -> foi", function() {deepEqual( Stem("fois"), "foi");});
test("foison -> foison", function() {deepEqual( Stem("foison"), "foison");});
test("foisons -> foison", function() {deepEqual( Stem("foisons"), "foison");});
test("foist -> foist", function() {deepEqual( Stem("foist"), "foist");});
test("foix -> foix", function() {deepEqual( Stem("foix"), "foix");});
test("fold -> fold", function() {deepEqual( Stem("fold"), "fold");});
test("folded -> fold", function() {deepEqual( Stem("folded"), "fold");});
test("folds -> fold", function() {deepEqual( Stem("folds"), "fold");});
test("foliage -> foliag", function() {deepEqual( Stem("foliage"), "foliag");});
test("folio -> folio", function() {deepEqual( Stem("folio"), "folio");});
test("folk -> folk", function() {deepEqual( Stem("folk"), "folk");});
test("folks -> folk", function() {deepEqual( Stem("folks"), "folk");});
test("follies -> folli", function() {deepEqual( Stem("follies"), "folli");});
test("follow -> follow", function() {deepEqual( Stem("follow"), "follow");});
test("followed -> follow", function() {deepEqual( Stem("followed"), "follow");});
test("follower -> follow", function() {deepEqual( Stem("follower"), "follow");});
test("followers -> follow", function() {deepEqual( Stem("followers"), "follow");});
test("followest -> followest", function() {deepEqual( Stem("followest"), "followest");});
test("following -> follow", function() {deepEqual( Stem("following"), "follow");});
test("follows -> follow", function() {deepEqual( Stem("follows"), "follow");});
test("folly -> folli", function() {deepEqual( Stem("folly"), "folli");});
test("fond -> fond", function() {deepEqual( Stem("fond"), "fond");});
test("fonder -> fonder", function() {deepEqual( Stem("fonder"), "fonder");});
test("fondest -> fondest", function() {deepEqual( Stem("fondest"), "fondest");});
test("fondle -> fondl", function() {deepEqual( Stem("fondle"), "fondl");});
test("fondly -> fondli", function() {deepEqual( Stem("fondly"), "fondli");});
test("fondness -> fond", function() {deepEqual( Stem("fondness"), "fond");});
test("font -> font", function() {deepEqual( Stem("font"), "font");});
test("fontibell -> fontibel", function() {deepEqual( Stem("fontibell"), "fontibel");});
test("food -> food", function() {deepEqual( Stem("food"), "food");});
test("fool -> fool", function() {deepEqual( Stem("fool"), "fool");});
test("fooleries -> fooleri", function() {deepEqual( Stem("fooleries"), "fooleri");});
test("foolery -> fooleri", function() {deepEqual( Stem("foolery"), "fooleri");});
test("foolhardy -> foolhardi", function() {deepEqual( Stem("foolhardy"), "foolhardi");});
test("fooling -> fool", function() {deepEqual( Stem("fooling"), "fool");});
test("foolish -> foolish", function() {deepEqual( Stem("foolish"), "foolish");});
test("foolishly -> foolishli", function() {deepEqual( Stem("foolishly"), "foolishli");});
test("foolishness -> foolish", function() {deepEqual( Stem("foolishness"), "foolish");});
test("fools -> fool", function() {deepEqual( Stem("fools"), "fool");});
test("foot -> foot", function() {deepEqual( Stem("foot"), "foot");});
test("football -> footbal", function() {deepEqual( Stem("football"), "footbal");});
test("footboard -> footboard", function() {deepEqual( Stem("footboard"), "footboard");});
test("footboy -> footboi", function() {deepEqual( Stem("footboy"), "footboi");});
test("footboys -> footboi", function() {deepEqual( Stem("footboys"), "footboi");});
test("footed -> foot", function() {deepEqual( Stem("footed"), "foot");});
test("footfall -> footfal", function() {deepEqual( Stem("footfall"), "footfal");});
test("footing -> foot", function() {deepEqual( Stem("footing"), "foot");});
test("footman -> footman", function() {deepEqual( Stem("footman"), "footman");});
test("footmen -> footmen", function() {deepEqual( Stem("footmen"), "footmen");});
test("footpath -> footpath", function() {deepEqual( Stem("footpath"), "footpath");});
test("footsteps -> footstep", function() {deepEqual( Stem("footsteps"), "footstep");});
test("footstool -> footstool", function() {deepEqual( Stem("footstool"), "footstool");});
test("footstools -> footstool", function() {deepEqual( Stem("footstools"), "footstool");});
test("fopp -> fopp", function() {deepEqual( Stem("fopp"), "fopp");});
test("fopped -> fop", function() {deepEqual( Stem("fopped"), "fop");});
test("foppery -> fopperi", function() {deepEqual( Stem("foppery"), "fopperi");});
test("foppish -> foppish", function() {deepEqual( Stem("foppish"), "foppish");});
test("fops -> fop", function() {deepEqual( Stem("fops"), "fop");});
test("for -> for", function() {deepEqual( Stem("for"), "for");});
test("forage -> forag", function() {deepEqual( Stem("forage"), "forag");});
test("foragers -> forag", function() {deepEqual( Stem("foragers"), "forag");});
test("foraging -> forag", function() {deepEqual( Stem("foraging"), "forag");});
test("forbade -> forbad", function() {deepEqual( Stem("forbade"), "forbad");});
test("forbear -> forbear", function() {deepEqual( Stem("forbear"), "forbear");});
test("forbearance -> forbear", function() {deepEqual( Stem("forbearance"), "forbear");});
test("forbears -> forbear", function() {deepEqual( Stem("forbears"), "forbear");});
test("forbid -> forbid", function() {deepEqual( Stem("forbid"), "forbid");});
test("forbidden -> forbidden", function() {deepEqual( Stem("forbidden"), "forbidden");});
test("forbiddenly -> forbiddenli", function() {deepEqual( Stem("forbiddenly"), "forbiddenli");});
test("forbids -> forbid", function() {deepEqual( Stem("forbids"), "forbid");});
test("forbod -> forbod", function() {deepEqual( Stem("forbod"), "forbod");});
test("forborne -> forborn", function() {deepEqual( Stem("forborne"), "forborn");});
test("forc -> forc", function() {deepEqual( Stem("forc"), "forc");});
test("force -> forc", function() {deepEqual( Stem("force"), "forc");});
test("forced -> forc", function() {deepEqual( Stem("forced"), "forc");});
test("forceful -> forc", function() {deepEqual( Stem("forceful"), "forc");});
test("forceless -> forceless", function() {deepEqual( Stem("forceless"), "forceless");});
test("forceps -> forcep", function() {deepEqual( Stem("forceps"), "forcep");});
test("forces -> forc", function() {deepEqual( Stem("forces"), "forc");});
test("forcible -> forcibl", function() {deepEqual( Stem("forcible"), "forcibl");});
test("forcibly -> forcibli", function() {deepEqual( Stem("forcibly"), "forcibli");});
test("forcing -> forc", function() {deepEqual( Stem("forcing"), "forc");});
test("ford -> ford", function() {deepEqual( Stem("ford"), "ford");});
test("fordid -> fordid", function() {deepEqual( Stem("fordid"), "fordid");});
test("fordo -> fordo", function() {deepEqual( Stem("fordo"), "fordo");});
test("fordoes -> fordo", function() {deepEqual( Stem("fordoes"), "fordo");});
test("fordone -> fordon", function() {deepEqual( Stem("fordone"), "fordon");});
test("fore -> fore", function() {deepEqual( Stem("fore"), "fore");});
test("foreboded -> forebod", function() {deepEqual( Stem("foreboded"), "forebod");});
test("forebodings -> forebod", function() {deepEqual( Stem("forebodings"), "forebod");});
test("forecast -> forecast", function() {deepEqual( Stem("forecast"), "forecast");});
test("foredeck -> foredeck", function() {deepEqual( Stem("foredeck"), "foredeck");});
test("forefather -> forefath", function() {deepEqual( Stem("forefather"), "forefath");});
test("forefathers -> forefath", function() {deepEqual( Stem("forefathers"), "forefath");});
test("forefinger -> forefing", function() {deepEqual( Stem("forefinger"), "forefing");});
test("forego -> forego", function() {deepEqual( Stem("forego"), "forego");});
test("foregoing -> forego", function() {deepEqual( Stem("foregoing"), "forego");});
test("foregone -> foregon", function() {deepEqual( Stem("foregone"), "foregon");});
test("foreground -> foreground", function() {deepEqual( Stem("foreground"), "foreground");});
test("forehand -> forehand", function() {deepEqual( Stem("forehand"), "forehand");});
test("forehead -> forehead", function() {deepEqual( Stem("forehead"), "forehead");});
test("foreheads -> forehead", function() {deepEqual( Stem("foreheads"), "forehead");});
test("forehorse -> forehors", function() {deepEqual( Stem("forehorse"), "forehors");});
test("foreign -> foreign", function() {deepEqual( Stem("foreign"), "foreign");});
test("foreigner -> foreign", function() {deepEqual( Stem("foreigner"), "foreign");});
test("foreigners -> foreign", function() {deepEqual( Stem("foreigners"), "foreign");});
test("foreknowing -> foreknow", function() {deepEqual( Stem("foreknowing"), "foreknow");});
test("foreknowledge -> foreknowledg", function() {deepEqual( Stem("foreknowledge"), "foreknowledg");});
test("foremost -> foremost", function() {deepEqual( Stem("foremost"), "foremost");});
test("forenamed -> forenam", function() {deepEqual( Stem("forenamed"), "forenam");});
test("forenoon -> forenoon", function() {deepEqual( Stem("forenoon"), "forenoon");});
test("forenoons -> forenoon", function() {deepEqual( Stem("forenoons"), "forenoon");});
test("forerun -> forerun", function() {deepEqual( Stem("forerun"), "forerun");});
test("forerunner -> forerunn", function() {deepEqual( Stem("forerunner"), "forerunn");});
test("forerunning -> forerun", function() {deepEqual( Stem("forerunning"), "forerun");});
test("foreruns -> forerun", function() {deepEqual( Stem("foreruns"), "forerun");});
test("foresaid -> foresaid", function() {deepEqual( Stem("foresaid"), "foresaid");});
test("foresaw -> foresaw", function() {deepEqual( Stem("foresaw"), "foresaw");});
test("foresay -> foresai", function() {deepEqual( Stem("foresay"), "foresai");});
test("foresee -> forese", function() {deepEqual( Stem("foresee"), "forese");});
test("foreseeing -> forese", function() {deepEqual( Stem("foreseeing"), "forese");});
test("foresees -> forese", function() {deepEqual( Stem("foresees"), "forese");});
test("foreshow -> foreshow", function() {deepEqual( Stem("foreshow"), "foreshow");});
test("foresight -> foresight", function() {deepEqual( Stem("foresight"), "foresight");});
test("foreskirt -> foreskirt", function() {deepEqual( Stem("foreskirt"), "foreskirt");});
test("forespent -> foresp", function() {deepEqual( Stem("forespent"), "foresp");});
test("forest -> forest", function() {deepEqual( Stem("forest"), "forest");});
test("forestall -> forestal", function() {deepEqual( Stem("forestall"), "forestal");});
test("forestalled -> forestal", function() {deepEqual( Stem("forestalled"), "forestal");});
test("forester -> forest", function() {deepEqual( Stem("forester"), "forest");});
test("foresters -> forest", function() {deepEqual( Stem("foresters"), "forest");});
test("forests -> forest", function() {deepEqual( Stem("forests"), "forest");});
test("foretell -> foretel", function() {deepEqual( Stem("foretell"), "foretel");});
test("foretelling -> foretel", function() {deepEqual( Stem("foretelling"), "foretel");});
test("foretells -> foretel", function() {deepEqual( Stem("foretells"), "foretel");});
test("forethink -> forethink", function() {deepEqual( Stem("forethink"), "forethink");});
test("forethought -> forethought", function() {deepEqual( Stem("forethought"), "forethought");});
test("foretold -> foretold", function() {deepEqual( Stem("foretold"), "foretold");});
test("forever -> forev", function() {deepEqual( Stem("forever"), "forev");});
test("foreward -> foreward", function() {deepEqual( Stem("foreward"), "foreward");});
test("forewarn -> forewarn", function() {deepEqual( Stem("forewarn"), "forewarn");});
test("forewarned -> forewarn", function() {deepEqual( Stem("forewarned"), "forewarn");});
test("forewarning -> forewarn", function() {deepEqual( Stem("forewarning"), "forewarn");});
test("forfeit -> forfeit", function() {deepEqual( Stem("forfeit"), "forfeit");});
test("forfeited -> forfeit", function() {deepEqual( Stem("forfeited"), "forfeit");});
test("forfeiters -> forfeit", function() {deepEqual( Stem("forfeiters"), "forfeit");});
test("forfeiting -> forfeit", function() {deepEqual( Stem("forfeiting"), "forfeit");});
test("forfeits -> forfeit", function() {deepEqual( Stem("forfeits"), "forfeit");});
test("forfeiture -> forfeitur", function() {deepEqual( Stem("forfeiture"), "forfeitur");});
test("forfeitures -> forfeitur", function() {deepEqual( Stem("forfeitures"), "forfeitur");});
test("forfend -> forfend", function() {deepEqual( Stem("forfend"), "forfend");});
test("forfended -> forfend", function() {deepEqual( Stem("forfended"), "forfend");});
test("forg -> forg", function() {deepEqual( Stem("forg"), "forg");});
test("forgave -> forgav", function() {deepEqual( Stem("forgave"), "forgav");});
test("forge -> forg", function() {deepEqual( Stem("forge"), "forg");});
test("forged -> forg", function() {deepEqual( Stem("forged"), "forg");});
test("forgeries -> forgeri", function() {deepEqual( Stem("forgeries"), "forgeri");});
test("forgery -> forgeri", function() {deepEqual( Stem("forgery"), "forgeri");});
test("forges -> forg", function() {deepEqual( Stem("forges"), "forg");});
test("forget -> forget", function() {deepEqual( Stem("forget"), "forget");});
test("forgetful -> forget", function() {deepEqual( Stem("forgetful"), "forget");});
test("forgetfulness -> forget", function() {deepEqual( Stem("forgetfulness"), "forget");});
test("forgetive -> forget", function() {deepEqual( Stem("forgetive"), "forget");});
test("forgets -> forget", function() {deepEqual( Stem("forgets"), "forget");});
test("forgetting -> forget", function() {deepEqual( Stem("forgetting"), "forget");});
test("forgive -> forgiv", function() {deepEqual( Stem("forgive"), "forgiv");});
test("forgiven -> forgiven", function() {deepEqual( Stem("forgiven"), "forgiven");});
test("forgiveness -> forgiv", function() {deepEqual( Stem("forgiveness"), "forgiv");});
test("forgives -> forgiv", function() {deepEqual( Stem("forgives"), "forgiv");});
test("forgiving -> forgiv", function() {deepEqual( Stem("forgiving"), "forgiv");});
test("forgo -> forgo", function() {deepEqual( Stem("forgo"), "forgo");});
test("forgoing -> forgo", function() {deepEqual( Stem("forgoing"), "forgo");});
test("forgone -> forgon", function() {deepEqual( Stem("forgone"), "forgon");});
test("forgot -> forgot", function() {deepEqual( Stem("forgot"), "forgot");});
test("forgotten -> forgotten", function() {deepEqual( Stem("forgotten"), "forgotten");});
test("fork -> fork", function() {deepEqual( Stem("fork"), "fork");});
test("forked -> fork", function() {deepEqual( Stem("forked"), "fork");});
test("forks -> fork", function() {deepEqual( Stem("forks"), "fork");});
test("forlorn -> forlorn", function() {deepEqual( Stem("forlorn"), "forlorn");});
test("form -> form", function() {deepEqual( Stem("form"), "form");});
test("formal -> formal", function() {deepEqual( Stem("formal"), "formal");});
test("formality -> formal", function() {deepEqual( Stem("formality"), "formal");});
test("formally -> formal", function() {deepEqual( Stem("formally"), "formal");});
test("formed -> form", function() {deepEqual( Stem("formed"), "form");});
test("former -> former", function() {deepEqual( Stem("former"), "former");});
test("formerly -> formerli", function() {deepEqual( Stem("formerly"), "formerli");});
test("forming -> form", function() {deepEqual( Stem("forming"), "form");});
test("formless -> formless", function() {deepEqual( Stem("formless"), "formless");});
test("forms -> form", function() {deepEqual( Stem("forms"), "form");});
test("formula -> formula", function() {deepEqual( Stem("formula"), "formula");});
test("fornication -> fornic", function() {deepEqual( Stem("fornication"), "fornic");});
test("fornications -> fornic", function() {deepEqual( Stem("fornications"), "fornic");});
test("fornicatress -> fornicatress", function() {deepEqual( Stem("fornicatress"), "fornicatress");});
test("forres -> forr", function() {deepEqual( Stem("forres"), "forr");});
test("forrest -> forrest", function() {deepEqual( Stem("forrest"), "forrest");});
test("forsake -> forsak", function() {deepEqual( Stem("forsake"), "forsak");});
test("forsaken -> forsaken", function() {deepEqual( Stem("forsaken"), "forsaken");});
test("forsaketh -> forsaketh", function() {deepEqual( Stem("forsaketh"), "forsaketh");});
test("forslow -> forslow", function() {deepEqual( Stem("forslow"), "forslow");});
test("forsook -> forsook", function() {deepEqual( Stem("forsook"), "forsook");});
test("forsooth -> forsooth", function() {deepEqual( Stem("forsooth"), "forsooth");});
test("forspent -> forspent", function() {deepEqual( Stem("forspent"), "forspent");});
test("forspoke -> forspok", function() {deepEqual( Stem("forspoke"), "forspok");});
test("forswear -> forswear", function() {deepEqual( Stem("forswear"), "forswear");});
test("forswearing -> forswear", function() {deepEqual( Stem("forswearing"), "forswear");});
test("forswore -> forswor", function() {deepEqual( Stem("forswore"), "forswor");});
test("forsworn -> forsworn", function() {deepEqual( Stem("forsworn"), "forsworn");});
test("fort -> fort", function() {deepEqual( Stem("fort"), "fort");});
test("forte -> fort", function() {deepEqual( Stem("forte"), "fort");});
test("forted -> fort", function() {deepEqual( Stem("forted"), "fort");});
test("forth -> forth", function() {deepEqual( Stem("forth"), "forth");});
test("forthcoming -> forthcom", function() {deepEqual( Stem("forthcoming"), "forthcom");});
test("forthlight -> forthlight", function() {deepEqual( Stem("forthlight"), "forthlight");});
test("forthright -> forthright", function() {deepEqual( Stem("forthright"), "forthright");});
test("forthwith -> forthwith", function() {deepEqual( Stem("forthwith"), "forthwith");});
test("fortification -> fortif", function() {deepEqual( Stem("fortification"), "fortif");});
test("fortifications -> fortif", function() {deepEqual( Stem("fortifications"), "fortif");});
test("fortified -> fortifi", function() {deepEqual( Stem("fortified"), "fortifi");});
test("fortifies -> fortifi", function() {deepEqual( Stem("fortifies"), "fortifi");});
test("fortify -> fortifi", function() {deepEqual( Stem("fortify"), "fortifi");});
test("fortinbras -> fortinbra", function() {deepEqual( Stem("fortinbras"), "fortinbra");});
test("fortitude -> fortitud", function() {deepEqual( Stem("fortitude"), "fortitud");});
test("fortnight -> fortnight", function() {deepEqual( Stem("fortnight"), "fortnight");});
test("fortress -> fortress", function() {deepEqual( Stem("fortress"), "fortress");});
test("fortresses -> fortress", function() {deepEqual( Stem("fortresses"), "fortress");});
test("forts -> fort", function() {deepEqual( Stem("forts"), "fort");});
test("fortun -> fortun", function() {deepEqual( Stem("fortun"), "fortun");});
test("fortuna -> fortuna", function() {deepEqual( Stem("fortuna"), "fortuna");});
test("fortunate -> fortun", function() {deepEqual( Stem("fortunate"), "fortun");});
test("fortunately -> fortun", function() {deepEqual( Stem("fortunately"), "fortun");});
test("fortune -> fortun", function() {deepEqual( Stem("fortune"), "fortun");});
test("fortuned -> fortun", function() {deepEqual( Stem("fortuned"), "fortun");});
test("fortunes -> fortun", function() {deepEqual( Stem("fortunes"), "fortun");});
test("fortward -> fortward", function() {deepEqual( Stem("fortward"), "fortward");});
test("forty -> forti", function() {deepEqual( Stem("forty"), "forti");});
test("forum -> forum", function() {deepEqual( Stem("forum"), "forum");});
test("forward -> forward", function() {deepEqual( Stem("forward"), "forward");});
test("forwarding -> forward", function() {deepEqual( Stem("forwarding"), "forward");});
test("forwardness -> forward", function() {deepEqual( Stem("forwardness"), "forward");});
test("forwards -> forward", function() {deepEqual( Stem("forwards"), "forward");});
test("forwearied -> forweari", function() {deepEqual( Stem("forwearied"), "forweari");});
test("fosset -> fosset", function() {deepEqual( Stem("fosset"), "fosset");});
test("fost -> fost", function() {deepEqual( Stem("fost"), "fost");});
test("foster -> foster", function() {deepEqual( Stem("foster"), "foster");});
test("fostered -> foster", function() {deepEqual( Stem("fostered"), "foster");});
test("fought -> fought", function() {deepEqual( Stem("fought"), "fought");});
test("foughten -> foughten", function() {deepEqual( Stem("foughten"), "foughten");});
test("foul -> foul", function() {deepEqual( Stem("foul"), "foul");});
test("fouler -> fouler", function() {deepEqual( Stem("fouler"), "fouler");});
test("foulest -> foulest", function() {deepEqual( Stem("foulest"), "foulest");});
test("foully -> foulli", function() {deepEqual( Stem("foully"), "foulli");});
test("foulness -> foul", function() {deepEqual( Stem("foulness"), "foul");});
test("found -> found", function() {deepEqual( Stem("found"), "found");});
test("foundation -> foundat", function() {deepEqual( Stem("foundation"), "foundat");});
test("foundations -> foundat", function() {deepEqual( Stem("foundations"), "foundat");});
test("founded -> found", function() {deepEqual( Stem("founded"), "found");});
test("founder -> founder", function() {deepEqual( Stem("founder"), "founder");});
test("founders -> founder", function() {deepEqual( Stem("founders"), "founder");});
test("foundling -> foundl", function() {deepEqual( Stem("foundling"), "foundl");});
test("fount -> fount", function() {deepEqual( Stem("fount"), "fount");});
test("fountain -> fountain", function() {deepEqual( Stem("fountain"), "fountain");});
test("fountains -> fountain", function() {deepEqual( Stem("fountains"), "fountain");});
test("founts -> fount", function() {deepEqual( Stem("founts"), "fount");});
test("four -> four", function() {deepEqual( Stem("four"), "four");});
test("fourchette -> fourchett", function() {deepEqual( Stem("fourchette"), "fourchett");});
test("fourgon -> fourgon", function() {deepEqual( Stem("fourgon"), "fourgon");});
test("fourgons -> fourgon", function() {deepEqual( Stem("fourgons"), "fourgon");});
test("fourscore -> fourscor", function() {deepEqual( Stem("fourscore"), "fourscor");});
test("fourteen -> fourteen", function() {deepEqual( Stem("fourteen"), "fourteen");});
test("fourth -> fourth", function() {deepEqual( Stem("fourth"), "fourth");});
test("fourths -> fourth", function() {deepEqual( Stem("fourths"), "fourth");});
test("foutra -> foutra", function() {deepEqual( Stem("foutra"), "foutra");});
test("fowl -> fowl", function() {deepEqual( Stem("fowl"), "fowl");});
test("fowler -> fowler", function() {deepEqual( Stem("fowler"), "fowler");});
test("fowling -> fowl", function() {deepEqual( Stem("fowling"), "fowl");});
test("fowls -> fowl", function() {deepEqual( Stem("fowls"), "fowl");});
test("fowr -> fowr", function() {deepEqual( Stem("fowr"), "fowr");});
test("fox -> fox", function() {deepEqual( Stem("fox"), "fox");});
test("foxes -> fox", function() {deepEqual( Stem("foxes"), "fox");});
test("foxship -> foxship", function() {deepEqual( Stem("foxship"), "foxship");});
test("fracas -> fraca", function() {deepEqual( Stem("fracas"), "fraca");});
test("fracted -> fract", function() {deepEqual( Stem("fracted"), "fract");});
test("fraction -> fraction", function() {deepEqual( Stem("fraction"), "fraction");});
test("fractions -> fraction", function() {deepEqual( Stem("fractions"), "fraction");});
test("fragile -> fragil", function() {deepEqual( Stem("fragile"), "fragil");});
test("fragment -> fragment", function() {deepEqual( Stem("fragment"), "fragment");});
test("fragments -> fragment", function() {deepEqual( Stem("fragments"), "fragment");});
test("fragrance -> fragranc", function() {deepEqual( Stem("fragrance"), "fragranc");});
test("fragrant -> fragrant", function() {deepEqual( Stem("fragrant"), "fragrant");});
test("fraiches -> fraich", function() {deepEqual( Stem("fraiches"), "fraich");});
test("frail -> frail", function() {deepEqual( Stem("frail"), "frail");});
test("frailer -> frailer", function() {deepEqual( Stem("frailer"), "frailer");});
test("frailties -> frailti", function() {deepEqual( Stem("frailties"), "frailti");});
test("frailty -> frailti", function() {deepEqual( Stem("frailty"), "frailti");});
test("fram -> fram", function() {deepEqual( Stem("fram"), "fram");});
test("frame -> frame", function() {deepEqual( Stem("frame"), "frame");});
test("framed -> frame", function() {deepEqual( Stem("framed"), "frame");});
test("frames -> frame", function() {deepEqual( Stem("frames"), "frame");});
test("frampold -> frampold", function() {deepEqual( Stem("frampold"), "frampold");});
test("fran -> fran", function() {deepEqual( Stem("fran"), "fran");});
test("franc -> franc", function() {deepEqual( Stem("franc"), "franc");});
test("francais -> francai", function() {deepEqual( Stem("francais"), "francai");});
test("france -> franc", function() {deepEqual( Stem("france"), "franc");});
test("frances -> franc", function() {deepEqual( Stem("frances"), "franc");});
test("franchise -> franchis", function() {deepEqual( Stem("franchise"), "franchis");});
test("franchised -> franchis", function() {deepEqual( Stem("franchised"), "franchis");});
test("franchisement -> franchis", function() {deepEqual( Stem("franchisement"), "franchis");});
test("franchises -> franchis", function() {deepEqual( Stem("franchises"), "franchis");});
test("franciae -> francia", function() {deepEqual( Stem("franciae"), "francia");});
test("francis -> franci", function() {deepEqual( Stem("francis"), "franci");});
test("francisca -> francisca", function() {deepEqual( Stem("francisca"), "francisca");});
test("franciscan -> franciscan", function() {deepEqual( Stem("franciscan"), "franciscan");});
test("francisco -> francisco", function() {deepEqual( Stem("francisco"), "francisco");});
test("francs -> franc", function() {deepEqual( Stem("francs"), "franc");});
test("frank -> frank", function() {deepEqual( Stem("frank"), "frank");});
test("franker -> franker", function() {deepEqual( Stem("franker"), "franker");});
test("frankest -> frankest", function() {deepEqual( Stem("frankest"), "frankest");});
test("frankfort -> frankfort", function() {deepEqual( Stem("frankfort"), "frankfort");});
test("franklin -> franklin", function() {deepEqual( Stem("franklin"), "franklin");});
test("franklins -> franklin", function() {deepEqual( Stem("franklins"), "franklin");});
test("frankly -> frankli", function() {deepEqual( Stem("frankly"), "frankli");});
test("frankness -> frank", function() {deepEqual( Stem("frankness"), "frank");});
test("frantic -> frantic", function() {deepEqual( Stem("frantic"), "frantic");});
test("frantically -> frantic", function() {deepEqual( Stem("frantically"), "frantic");});
test("franticly -> franticli", function() {deepEqual( Stem("franticly"), "franticli");});
test("frascati -> frascati", function() {deepEqual( Stem("frascati"), "frascati");});
test("frateretto -> frateretto", function() {deepEqual( Stem("frateretto"), "frateretto");});
test("fraternally -> fratern", function() {deepEqual( Stem("fraternally"), "fratern");});
test("fraternity -> fratern", function() {deepEqual( Stem("fraternity"), "fratern");});
test("fratrum -> fratrum", function() {deepEqual( Stem("fratrum"), "fratrum");});
test("fraud -> fraud", function() {deepEqual( Stem("fraud"), "fraud");});
test("fraudful -> fraud", function() {deepEqual( Stem("fraudful"), "fraud");});
test("fraught -> fraught", function() {deepEqual( Stem("fraught"), "fraught");});
test("fraughtage -> fraughtag", function() {deepEqual( Stem("fraughtage"), "fraughtag");});
test("fraughting -> fraught", function() {deepEqual( Stem("fraughting"), "fraught");});
test("fray -> frai", function() {deepEqual( Stem("fray"), "frai");});
test("frays -> frai", function() {deepEqual( Stem("frays"), "frai");});
test("freckl -> freckl", function() {deepEqual( Stem("freckl"), "freckl");});
test("freckled -> freckl", function() {deepEqual( Stem("freckled"), "freckl");});
test("freckles -> freckl", function() {deepEqual( Stem("freckles"), "freckl");});
test("fred -> fred", function() {deepEqual( Stem("fred"), "fred");});
test("fredaines -> fredain", function() {deepEqual( Stem("fredaines"), "fredain");});
test("frederica -> frederica", function() {deepEqual( Stem("frederica"), "frederica");});
test("frederick -> frederick", function() {deepEqual( Stem("frederick"), "frederick");});
test("free -> free", function() {deepEqual( Stem("free"), "free");});
test("freed -> freed", function() {deepEqual( Stem("freed"), "freed");});
test("freedom -> freedom", function() {deepEqual( Stem("freedom"), "freedom");});
test("freedoms -> freedom", function() {deepEqual( Stem("freedoms"), "freedom");});
test("freehearted -> freeheart", function() {deepEqual( Stem("freehearted"), "freeheart");});
test("freehold -> freehold", function() {deepEqual( Stem("freehold"), "freehold");});
test("freeing -> free", function() {deepEqual( Stem("freeing"), "free");});
test("freelier -> freelier", function() {deepEqual( Stem("freelier"), "freelier");});
test("freely -> freeli", function() {deepEqual( Stem("freely"), "freeli");});
test("freeman -> freeman", function() {deepEqual( Stem("freeman"), "freeman");});
test("freemasonry -> freemasonri", function() {deepEqual( Stem("freemasonry"), "freemasonri");});
test("freemen -> freemen", function() {deepEqual( Stem("freemen"), "freemen");});
test("freeness -> freeness", function() {deepEqual( Stem("freeness"), "freeness");});
test("freer -> freer", function() {deepEqual( Stem("freer"), "freer");});
test("frees -> free", function() {deepEqual( Stem("frees"), "free");});
test("freestone -> freeston", function() {deepEqual( Stem("freestone"), "freeston");});
test("freetown -> freetown", function() {deepEqual( Stem("freetown"), "freetown");});
test("freeze -> freez", function() {deepEqual( Stem("freeze"), "freez");});
test("freezes -> freez", function() {deepEqual( Stem("freezes"), "freez");});
test("freezing -> freez", function() {deepEqual( Stem("freezing"), "freez");});
test("freezings -> freez", function() {deepEqual( Stem("freezings"), "freez");});
test("french -> french", function() {deepEqual( Stem("french"), "french");});
test("frenchman -> frenchman", function() {deepEqual( Stem("frenchman"), "frenchman");});
test("frenchmen -> frenchmen", function() {deepEqual( Stem("frenchmen"), "frenchmen");});
test("frenchwoman -> frenchwoman", function() {deepEqual( Stem("frenchwoman"), "frenchwoman");});
test("frenzied -> frenzi", function() {deepEqual( Stem("frenzied"), "frenzi");});
test("frenzy -> frenzi", function() {deepEqual( Stem("frenzy"), "frenzi");});
test("frequency -> frequenc", function() {deepEqual( Stem("frequency"), "frequenc");});
test("frequent -> frequent", function() {deepEqual( Stem("frequent"), "frequent");});
test("frequented -> frequent", function() {deepEqual( Stem("frequented"), "frequent");});
test("frequenter -> frequent", function() {deepEqual( Stem("frequenter"), "frequent");});
test("frequenters -> frequent", function() {deepEqual( Stem("frequenters"), "frequent");});
test("frequenting -> frequent", function() {deepEqual( Stem("frequenting"), "frequent");});
test("frequently -> frequent", function() {deepEqual( Stem("frequently"), "frequent");});
test("frequents -> frequent", function() {deepEqual( Stem("frequents"), "frequent");});
test("fresh -> fresh", function() {deepEqual( Stem("fresh"), "fresh");});
test("fresher -> fresher", function() {deepEqual( Stem("fresher"), "fresher");});
test("freshes -> fresh", function() {deepEqual( Stem("freshes"), "fresh");});
test("freshest -> freshest", function() {deepEqual( Stem("freshest"), "freshest");});
test("freshly -> freshli", function() {deepEqual( Stem("freshly"), "freshli");});
test("freshness -> fresh", function() {deepEqual( Stem("freshness"), "fresh");});
test("fret -> fret", function() {deepEqual( Stem("fret"), "fret");});
test("fretful -> fret", function() {deepEqual( Stem("fretful"), "fret");});
test("frets -> fret", function() {deepEqual( Stem("frets"), "fret");});
test("fretted -> fret", function() {deepEqual( Stem("fretted"), "fret");});
test("fretten -> fretten", function() {deepEqual( Stem("fretten"), "fretten");});
test("fretting -> fret", function() {deepEqual( Stem("fretting"), "fret");});
test("friar -> friar", function() {deepEqual( Stem("friar"), "friar");});
test("friars -> friar", function() {deepEqual( Stem("friars"), "friar");});
test("friday -> fridai", function() {deepEqual( Stem("friday"), "fridai");});
test("fridays -> fridai", function() {deepEqual( Stem("fridays"), "fridai");});
test("friedland -> friedland", function() {deepEqual( Stem("friedland"), "friedland");});
test("friend -> friend", function() {deepEqual( Stem("friend"), "friend");});
test("friended -> friend", function() {deepEqual( Stem("friended"), "friend");});
test("friending -> friend", function() {deepEqual( Stem("friending"), "friend");});
test("friendless -> friendless", function() {deepEqual( Stem("friendless"), "friendless");});
test("friendliest -> friendliest", function() {deepEqual( Stem("friendliest"), "friendliest");});
test("friendliness -> friendli", function() {deepEqual( Stem("friendliness"), "friendli");});
test("friendly -> friendli", function() {deepEqual( Stem("friendly"), "friendli");});
test("friends -> friend", function() {deepEqual( Stem("friends"), "friend");});
test("friendship -> friendship", function() {deepEqual( Stem("friendship"), "friendship");});
test("friendships -> friendship", function() {deepEqual( Stem("friendships"), "friendship");});
test("frieze -> friez", function() {deepEqual( Stem("frieze"), "friez");});
test("fright -> fright", function() {deepEqual( Stem("fright"), "fright");});
test("frighted -> fright", function() {deepEqual( Stem("frighted"), "fright");});
test("frighten -> frighten", function() {deepEqual( Stem("frighten"), "frighten");});
test("frightened -> frighten", function() {deepEqual( Stem("frightened"), "frighten");});
test("frightening -> frighten", function() {deepEqual( Stem("frightening"), "frighten");});
test("frightful -> fright", function() {deepEqual( Stem("frightful"), "fright");});
test("frightfully -> frightfulli", function() {deepEqual( Stem("frightfully"), "frightfulli");});
test("frighting -> fright", function() {deepEqual( Stem("frighting"), "fright");});
test("frights -> fright", function() {deepEqual( Stem("frights"), "fright");});
test("frigid -> frigid", function() {deepEqual( Stem("frigid"), "frigid");});
test("frigidity -> frigid", function() {deepEqual( Stem("frigidity"), "frigid");});
test("frill -> frill", function() {deepEqual( Stem("frill"), "frill");});
test("frilled -> frill", function() {deepEqual( Stem("frilled"), "frill");});
test("fringe -> fring", function() {deepEqual( Stem("fringe"), "fring");});
test("fringed -> fring", function() {deepEqual( Stem("fringed"), "fring");});
test("frippery -> fripperi", function() {deepEqual( Stem("frippery"), "fripperi");});
test("frisk -> frisk", function() {deepEqual( Stem("frisk"), "frisk");});
test("frisks -> frisk", function() {deepEqual( Stem("frisks"), "frisk");});
test("frith -> frith", function() {deepEqual( Stem("frith"), "frith");});
test("fritters -> fritter", function() {deepEqual( Stem("fritters"), "fritter");});
test("fritz -> fritz", function() {deepEqual( Stem("fritz"), "fritz");});
test("frivolity -> frivol", function() {deepEqual( Stem("frivolity"), "frivol");});
test("frivolous -> frivol", function() {deepEqual( Stem("frivolous"), "frivol");});
test("fro -> fro", function() {deepEqual( Stem("fro"), "fro");});
test("frock -> frock", function() {deepEqual( Stem("frock"), "frock");});
test("frockcoat -> frockcoat", function() {deepEqual( Stem("frockcoat"), "frockcoat");});
test("frocks -> frock", function() {deepEqual( Stem("frocks"), "frock");});
test("frog -> frog", function() {deepEqual( Stem("frog"), "frog");});
test("frogged -> frog", function() {deepEqual( Stem("frogged"), "frog");});
test("frogmore -> frogmor", function() {deepEqual( Stem("frogmore"), "frogmor");});
test("frogs -> frog", function() {deepEqual( Stem("frogs"), "frog");});
test("froissart -> froissart", function() {deepEqual( Stem("froissart"), "froissart");});
test("frolic -> frolic", function() {deepEqual( Stem("frolic"), "frolic");});
test("from -> from", function() {deepEqual( Stem("from"), "from");});
test("front -> front", function() {deepEqual( Stem("front"), "front");});
test("frontal -> frontal", function() {deepEqual( Stem("frontal"), "frontal");});
test("fronted -> front", function() {deepEqual( Stem("fronted"), "front");});
test("frontier -> frontier", function() {deepEqual( Stem("frontier"), "frontier");});
test("frontiers -> frontier", function() {deepEqual( Stem("frontiers"), "frontier");});
test("fronting -> front", function() {deepEqual( Stem("fronting"), "front");});
test("frontispiece -> frontispiec", function() {deepEqual( Stem("frontispiece"), "frontispiec");});
test("frontispieces -> frontispiec", function() {deepEqual( Stem("frontispieces"), "frontispiec");});
test("frontlet -> frontlet", function() {deepEqual( Stem("frontlet"), "frontlet");});
test("fronts -> front", function() {deepEqual( Stem("fronts"), "front");});
test("frost -> frost", function() {deepEqual( Stem("frost"), "frost");});
test("frosts -> frost", function() {deepEqual( Stem("frosts"), "frost");});
test("frosty -> frosti", function() {deepEqual( Stem("frosty"), "frosti");});
test("froth -> froth", function() {deepEqual( Stem("froth"), "froth");});
test("frothed -> froth", function() {deepEqual( Stem("frothed"), "froth");});
test("frothing -> froth", function() {deepEqual( Stem("frothing"), "froth");});
test("froward -> froward", function() {deepEqual( Stem("froward"), "froward");});
test("frown -> frown", function() {deepEqual( Stem("frown"), "frown");});
test("frowning -> frown", function() {deepEqual( Stem("frowning"), "frown");});
test("frowningly -> frowningli", function() {deepEqual( Stem("frowningly"), "frowningli");});
test("frowns -> frown", function() {deepEqual( Stem("frowns"), "frown");});
test("frowser -> frowser", function() {deepEqual( Stem("frowser"), "frowser");});
test("froze -> froze", function() {deepEqual( Stem("froze"), "froze");});
test("frozen -> frozen", function() {deepEqual( Stem("frozen"), "frozen");});
test("fructify -> fructifi", function() {deepEqual( Stem("fructify"), "fructifi");});
test("frugal -> frugal", function() {deepEqual( Stem("frugal"), "frugal");});
test("fruit -> fruit", function() {deepEqual( Stem("fruit"), "fruit");});
test("fruiterer -> fruiter", function() {deepEqual( Stem("fruiterer"), "fruiter");});
test("fruitful -> fruit", function() {deepEqual( Stem("fruitful"), "fruit");});
test("fruitfully -> fruitfulli", function() {deepEqual( Stem("fruitfully"), "fruitfulli");});
test("fruitfulness -> fruit", function() {deepEqual( Stem("fruitfulness"), "fruit");});
test("fruition -> fruition", function() {deepEqual( Stem("fruition"), "fruition");});
test("fruitless -> fruitless", function() {deepEqual( Stem("fruitless"), "fruitless");});
test("fruits -> fruit", function() {deepEqual( Stem("fruits"), "fruit");});
test("frush -> frush", function() {deepEqual( Stem("frush"), "frush");});
test("frustrate -> frustrat", function() {deepEqual( Stem("frustrate"), "frustrat");});
test("frutify -> frutifi", function() {deepEqual( Stem("frutify"), "frutifi");});
test("fry -> fry", function() {deepEqual( Stem("fry"), "fry");});
test("frying -> fry", function() {deepEqual( Stem("frying"), "fry");});
test("fubb -> fubb", function() {deepEqual( Stem("fubb"), "fubb");});
test("fuchs -> fuch", function() {deepEqual( Stem("fuchs"), "fuch");});
test("fuddled -> fuddl", function() {deepEqual( Stem("fuddled"), "fuddl");});
test("fuddleston -> fuddleston", function() {deepEqual( Stem("fuddleston"), "fuddleston");});
test("fuddlestone -> fuddleston", function() {deepEqual( Stem("fuddlestone"), "fuddleston");});
test("fuddlestones -> fuddleston", function() {deepEqual( Stem("fuddlestones"), "fuddleston");});
test("fuel -> fuel", function() {deepEqual( Stem("fuel"), "fuel");});
test("fugitive -> fugit", function() {deepEqual( Stem("fugitive"), "fugit");});
test("fugitives -> fugit", function() {deepEqual( Stem("fugitives"), "fugit");});
test("fulfil -> fulfil", function() {deepEqual( Stem("fulfil"), "fulfil");});
test("fulfill -> fulfil", function() {deepEqual( Stem("fulfill"), "fulfil");});
test("fulfilling -> fulfil", function() {deepEqual( Stem("fulfilling"), "fulfil");});
test("fulfilment -> fulfil", function() {deepEqual( Stem("fulfilment"), "fulfil");});
test("fulfils -> fulfil", function() {deepEqual( Stem("fulfils"), "fulfil");});
test("fulham -> fulham", function() {deepEqual( Stem("fulham"), "fulham");});
test("full -> full", function() {deepEqual( Stem("full"), "full");});
test("fullam -> fullam", function() {deepEqual( Stem("fullam"), "fullam");});
test("fuller -> fuller", function() {deepEqual( Stem("fuller"), "fuller");});
test("fullers -> fuller", function() {deepEqual( Stem("fullers"), "fuller");});
test("fullest -> fullest", function() {deepEqual( Stem("fullest"), "fullest");});
test("fullness -> full", function() {deepEqual( Stem("fullness"), "full");});
test("fully -> fulli", function() {deepEqual( Stem("fully"), "fulli");});
test("fulness -> ful", function() {deepEqual( Stem("fulness"), "ful");});
test("fulsome -> fulsom", function() {deepEqual( Stem("fulsome"), "fulsom");});
test("fulvia -> fulvia", function() {deepEqual( Stem("fulvia"), "fulvia");});
test("fum -> fum", function() {deepEqual( Stem("fum"), "fum");});
test("fumble -> fumbl", function() {deepEqual( Stem("fumble"), "fumbl");});
test("fumbles -> fumbl", function() {deepEqual( Stem("fumbles"), "fumbl");});
test("fumblest -> fumblest", function() {deepEqual( Stem("fumblest"), "fumblest");});
test("fumbling -> fumbl", function() {deepEqual( Stem("fumbling"), "fumbl");});
test("fume -> fume", function() {deepEqual( Stem("fume"), "fume");});
test("fumed -> fume", function() {deepEqual( Stem("fumed"), "fume");});
test("fumes -> fume", function() {deepEqual( Stem("fumes"), "fume");});
test("fuming -> fume", function() {deepEqual( Stem("fuming"), "fume");});
test("fumiter -> fumit", function() {deepEqual( Stem("fumiter"), "fumit");});
test("fumitory -> fumitori", function() {deepEqual( Stem("fumitory"), "fumitori");});
test("fumum -> fumum", function() {deepEqual( Stem("fumum"), "fumum");});
test("fun -> fun", function() {deepEqual( Stem("fun"), "fun");});
test("function -> function", function() {deepEqual( Stem("function"), "function");});
test("functionaries -> functionari", function() {deepEqual( Stem("functionaries"), "functionari");});
test("functionary -> functionari", function() {deepEqual( Stem("functionary"), "functionari");});
test("functions -> function", function() {deepEqual( Stem("functions"), "function");});
test("fund -> fund", function() {deepEqual( Stem("fund"), "fund");});
test("fundamental -> fundament", function() {deepEqual( Stem("fundamental"), "fundament");});
test("funded -> fund", function() {deepEqual( Stem("funded"), "fund");});
test("funds -> fund", function() {deepEqual( Stem("funds"), "fund");});
test("funeral -> funer", function() {deepEqual( Stem("funeral"), "funer");});
test("funerals -> funer", function() {deepEqual( Stem("funerals"), "funer");});
test("funereal -> funer", function() {deepEqual( Stem("funereal"), "funer");});
test("funny -> funni", function() {deepEqual( Stem("funny"), "funni");});
test("fur -> fur", function() {deepEqual( Stem("fur"), "fur");});
test("furbish -> furbish", function() {deepEqual( Stem("furbish"), "furbish");});
test("furbished -> furbish", function() {deepEqual( Stem("furbished"), "furbish");});
test("furies -> furi", function() {deepEqual( Stem("furies"), "furi");});
test("furious -> furiou", function() {deepEqual( Stem("furious"), "furiou");});
test("furiously -> furious", function() {deepEqual( Stem("furiously"), "furious");});
test("furlongs -> furlong", function() {deepEqual( Stem("furlongs"), "furlong");});
test("furlough -> furlough", function() {deepEqual( Stem("furlough"), "furlough");});
test("furnace -> furnac", function() {deepEqual( Stem("furnace"), "furnac");});
test("furnaces -> furnac", function() {deepEqual( Stem("furnaces"), "furnac");});
test("furnish -> furnish", function() {deepEqual( Stem("furnish"), "furnish");});
test("furnished -> furnish", function() {deepEqual( Stem("furnished"), "furnish");});
test("furnishings -> furnish", function() {deepEqual( Stem("furnishings"), "furnish");});
test("furniture -> furnitur", function() {deepEqual( Stem("furniture"), "furnitur");});
test("furnival -> furniv", function() {deepEqual( Stem("furnival"), "furniv");});
test("furor -> furor", function() {deepEqual( Stem("furor"), "furor");});
test("furr -> furr", function() {deepEqual( Stem("furr"), "furr");});
test("furrow -> furrow", function() {deepEqual( Stem("furrow"), "furrow");});
test("furrowed -> furrow", function() {deepEqual( Stem("furrowed"), "furrow");});
test("furrows -> furrow", function() {deepEqual( Stem("furrows"), "furrow");});
test("furs -> fur", function() {deepEqual( Stem("furs"), "fur");});
test("furth -> furth", function() {deepEqual( Stem("furth"), "furth");});
test("further -> further", function() {deepEqual( Stem("further"), "further");});
test("furtherance -> further", function() {deepEqual( Stem("furtherance"), "further");});
test("furtherer -> further", function() {deepEqual( Stem("furtherer"), "further");});
test("furthermore -> furthermor", function() {deepEqual( Stem("furthermore"), "furthermor");});
test("furthest -> furthest", function() {deepEqual( Stem("furthest"), "furthest");});
test("furtive -> furtiv", function() {deepEqual( Stem("furtive"), "furtiv");});
test("furtively -> furtiv", function() {deepEqual( Stem("furtively"), "furtiv");});
test("fury -> furi", function() {deepEqual( Stem("fury"), "furi");});
test("furze -> furz", function() {deepEqual( Stem("furze"), "furz");});
test("furzes -> furz", function() {deepEqual( Stem("furzes"), "furz");});
test("fust -> fust", function() {deepEqual( Stem("fust"), "fust");});
test("fustian -> fustian", function() {deepEqual( Stem("fustian"), "fustian");});
test("fustilarian -> fustilarian", function() {deepEqual( Stem("fustilarian"), "fustilarian");});
test("fusty -> fusti", function() {deepEqual( Stem("fusty"), "fusti");});
test("fut -> fut", function() {deepEqual( Stem("fut"), "fut");});
test("future -> futur", function() {deepEqual( Stem("future"), "futur");});
test("futurity -> futur", function() {deepEqual( Stem("futurity"), "futur");});
test("g -> g", function() {deepEqual( Stem("g"), "g");});
test("gabble -> gabbl", function() {deepEqual( Stem("gabble"), "gabbl");});
test("gaberdine -> gaberdin", function() {deepEqual( Stem("gaberdine"), "gaberdin");});
test("gable -> gabl", function() {deepEqual( Stem("gable"), "gabl");});
test("gables -> gabl", function() {deepEqual( Stem("gables"), "gabl");});
test("gabriel -> gabriel", function() {deepEqual( Stem("gabriel"), "gabriel");});
test("gaby -> gabi", function() {deepEqual( Stem("gaby"), "gabi");});
test("gad -> gad", function() {deepEqual( Stem("gad"), "gad");});
test("gadding -> gad", function() {deepEqual( Stem("gadding"), "gad");});
test("gads -> gad", function() {deepEqual( Stem("gads"), "gad");});
test("gadshill -> gadshil", function() {deepEqual( Stem("gadshill"), "gadshil");});
test("gaffer -> gaffer", function() {deepEqual( Stem("gaffer"), "gaffer");});
test("gag -> gag", function() {deepEqual( Stem("gag"), "gag");});
test("gage -> gage", function() {deepEqual( Stem("gage"), "gage");});
test("gaged -> gage", function() {deepEqual( Stem("gaged"), "gage");});
test("gagg -> gagg", function() {deepEqual( Stem("gagg"), "gagg");});
test("gaging -> gage", function() {deepEqual( Stem("gaging"), "gage");});
test("gagne -> gagn", function() {deepEqual( Stem("gagne"), "gagn");});
test("gaieties -> gaieti", function() {deepEqual( Stem("gaieties"), "gaieti");});
test("gaiety -> gaieti", function() {deepEqual( Stem("gaiety"), "gaieti");});
test("gaily -> gaili", function() {deepEqual( Stem("gaily"), "gaili");});
test("gain -> gain", function() {deepEqual( Stem("gain"), "gain");});
test("gained -> gain", function() {deepEqual( Stem("gained"), "gain");});
test("gainer -> gainer", function() {deepEqual( Stem("gainer"), "gainer");});
test("gaingiving -> gaingiv", function() {deepEqual( Stem("gaingiving"), "gaingiv");});
test("gaining -> gain", function() {deepEqual( Stem("gaining"), "gain");});
test("gains -> gain", function() {deepEqual( Stem("gains"), "gain");});
test("gainsaid -> gainsaid", function() {deepEqual( Stem("gainsaid"), "gainsaid");});
test("gainsay -> gainsai", function() {deepEqual( Stem("gainsay"), "gainsai");});
test("gainsaying -> gainsai", function() {deepEqual( Stem("gainsaying"), "gainsai");});
test("gainsays -> gainsai", function() {deepEqual( Stem("gainsays"), "gainsai");});
test("gainst -> gainst", function() {deepEqual( Stem("gainst"), "gainst");});
test("gait -> gait", function() {deepEqual( Stem("gait"), "gait");});
test("gaited -> gait", function() {deepEqual( Stem("gaited"), "gait");});
test("gaiters -> gaiter", function() {deepEqual( Stem("gaiters"), "gaiter");});
test("gal -> gal", function() {deepEqual( Stem("gal"), "gal");});
test("galathe -> galath", function() {deepEqual( Stem("galathe"), "galath");});
test("gale -> gale", function() {deepEqual( Stem("gale"), "gale");});
test("galen -> galen", function() {deepEqual( Stem("galen"), "galen");});
test("gales -> gale", function() {deepEqual( Stem("gales"), "gale");});
test("galignani -> galignani", function() {deepEqual( Stem("galignani"), "galignani");});
test("gall -> gall", function() {deepEqual( Stem("gall"), "gall");});
test("gallant -> gallant", function() {deepEqual( Stem("gallant"), "gallant");});
test("gallantly -> gallantli", function() {deepEqual( Stem("gallantly"), "gallantli");});
test("gallantry -> gallantri", function() {deepEqual( Stem("gallantry"), "gallantri");});
test("gallants -> gallant", function() {deepEqual( Stem("gallants"), "gallant");});
test("galled -> gall", function() {deepEqual( Stem("galled"), "gall");});
test("galleries -> galleri", function() {deepEqual( Stem("galleries"), "galleri");});
test("gallery -> galleri", function() {deepEqual( Stem("gallery"), "galleri");});
test("galley -> gallei", function() {deepEqual( Stem("galley"), "gallei");});
test("galleys -> gallei", function() {deepEqual( Stem("galleys"), "gallei");});
test("gallia -> gallia", function() {deepEqual( Stem("gallia"), "gallia");});
test("gallian -> gallian", function() {deepEqual( Stem("gallian"), "gallian");});
test("galliard -> galliard", function() {deepEqual( Stem("galliard"), "galliard");});
test("galliasses -> galliass", function() {deepEqual( Stem("galliasses"), "galliass");});
test("gallimaufry -> gallimaufri", function() {deepEqual( Stem("gallimaufry"), "gallimaufri");});
test("galling -> gall", function() {deepEqual( Stem("galling"), "gall");});
test("gallons -> gallon", function() {deepEqual( Stem("gallons"), "gallon");});
test("gallop -> gallop", function() {deepEqual( Stem("gallop"), "gallop");});
test("galloping -> gallop", function() {deepEqual( Stem("galloping"), "gallop");});
test("gallops -> gallop", function() {deepEqual( Stem("gallops"), "gallop");});
test("gallow -> gallow", function() {deepEqual( Stem("gallow"), "gallow");});
test("galloway -> gallowai", function() {deepEqual( Stem("galloway"), "gallowai");});
test("gallowglasses -> gallowglass", function() {deepEqual( Stem("gallowglasses"), "gallowglass");});
test("gallows -> gallow", function() {deepEqual( Stem("gallows"), "gallow");});
test("gallowses -> gallows", function() {deepEqual( Stem("gallowses"), "gallows");});
test("galls -> gall", function() {deepEqual( Stem("galls"), "gall");});
test("gallus -> gallu", function() {deepEqual( Stem("gallus"), "gallu");});
test("gam -> gam", function() {deepEqual( Stem("gam"), "gam");});
test("gamble -> gambl", function() {deepEqual( Stem("gamble"), "gambl");});
test("gambled -> gambl", function() {deepEqual( Stem("gambled"), "gambl");});
test("gambler -> gambler", function() {deepEqual( Stem("gambler"), "gambler");});
test("gamblers -> gambler", function() {deepEqual( Stem("gamblers"), "gambler");});
test("gambling -> gambl", function() {deepEqual( Stem("gambling"), "gambl");});
test("gambol -> gambol", function() {deepEqual( Stem("gambol"), "gambol");});
test("gambold -> gambold", function() {deepEqual( Stem("gambold"), "gambold");});
test("gambols -> gambol", function() {deepEqual( Stem("gambols"), "gambol");});
test("gamboys -> gamboi", function() {deepEqual( Stem("gamboys"), "gamboi");});
test("game -> game", function() {deepEqual( Stem("game"), "game");});
test("gamers -> gamer", function() {deepEqual( Stem("gamers"), "gamer");});
test("games -> game", function() {deepEqual( Stem("games"), "game");});
test("gamesome -> gamesom", function() {deepEqual( Stem("gamesome"), "gamesom");});
test("gamester -> gamest", function() {deepEqual( Stem("gamester"), "gamest");});
test("gaming -> game", function() {deepEqual( Stem("gaming"), "game");});
test("gammon -> gammon", function() {deepEqual( Stem("gammon"), "gammon");});
test("gamut -> gamut", function() {deepEqual( Stem("gamut"), "gamut");});
test("gan -> gan", function() {deepEqual( Stem("gan"), "gan");});
test("gand -> gand", function() {deepEqual( Stem("gand"), "gand");});
test("gangren -> gangren", function() {deepEqual( Stem("gangren"), "gangren");});
test("gangways -> gangwai", function() {deepEqual( Stem("gangways"), "gangwai");});
test("ganymede -> ganymed", function() {deepEqual( Stem("ganymede"), "ganymed");});
test("gaol -> gaol", function() {deepEqual( Stem("gaol"), "gaol");});
test("gaoler -> gaoler", function() {deepEqual( Stem("gaoler"), "gaoler");});
test("gaolers -> gaoler", function() {deepEqual( Stem("gaolers"), "gaoler");});
test("gaols -> gaol", function() {deepEqual( Stem("gaols"), "gaol");});
test("gap -> gap", function() {deepEqual( Stem("gap"), "gap");});
test("gape -> gape", function() {deepEqual( Stem("gape"), "gape");});
test("gapes -> gape", function() {deepEqual( Stem("gapes"), "gape");});
test("gaping -> gape", function() {deepEqual( Stem("gaping"), "gape");});
test("gaps -> gap", function() {deepEqual( Stem("gaps"), "gap");});
test("gar -> gar", function() {deepEqual( Stem("gar"), "gar");});
test("garb -> garb", function() {deepEqual( Stem("garb"), "garb");});
test("garbage -> garbag", function() {deepEqual( Stem("garbage"), "garbag");});
test("garbled -> garbl", function() {deepEqual( Stem("garbled"), "garbl");});
test("garboils -> garboil", function() {deepEqual( Stem("garboils"), "garboil");});
test("garcon -> garcon", function() {deepEqual( Stem("garcon"), "garcon");});
test("gard -> gard", function() {deepEqual( Stem("gard"), "gard");});
test("garde -> gard", function() {deepEqual( Stem("garde"), "gard");});
test("garden -> garden", function() {deepEqual( Stem("garden"), "garden");});
test("gardener -> garden", function() {deepEqual( Stem("gardener"), "garden");});
test("gardeners -> garden", function() {deepEqual( Stem("gardeners"), "garden");});
test("gardens -> garden", function() {deepEqual( Stem("gardens"), "garden");});
test("gardez -> gardez", function() {deepEqual( Stem("gardez"), "gardez");});
test("gardiner -> gardin", function() {deepEqual( Stem("gardiner"), "gardin");});
test("gardon -> gardon", function() {deepEqual( Stem("gardon"), "gardon");});
test("gare -> gare", function() {deepEqual( Stem("gare"), "gare");});
test("gargantua -> gargantua", function() {deepEqual( Stem("gargantua"), "gargantua");});
test("garge -> garg", function() {deepEqual( Stem("garge"), "garg");});
test("gargrave -> gargrav", function() {deepEqual( Stem("gargrave"), "gargrav");});
test("garish -> garish", function() {deepEqual( Stem("garish"), "garish");});
test("garland -> garland", function() {deepEqual( Stem("garland"), "garland");});
test("garlands -> garland", function() {deepEqual( Stem("garlands"), "garland");});
test("garlic -> garlic", function() {deepEqual( Stem("garlic"), "garlic");});
test("garment -> garment", function() {deepEqual( Stem("garment"), "garment");});
test("garments -> garment", function() {deepEqual( Stem("garments"), "garment");});
test("garmet -> garmet", function() {deepEqual( Stem("garmet"), "garmet");});
test("garner -> garner", function() {deepEqual( Stem("garner"), "garner");});
test("garners -> garner", function() {deepEqual( Stem("garners"), "garner");});
test("garnish -> garnish", function() {deepEqual( Stem("garnish"), "garnish");});
test("garnished -> garnish", function() {deepEqual( Stem("garnished"), "garnish");});
test("garret -> garret", function() {deepEqual( Stem("garret"), "garret");});
test("garrets -> garret", function() {deepEqual( Stem("garrets"), "garret");});
test("garrison -> garrison", function() {deepEqual( Stem("garrison"), "garrison");});
test("garrisons -> garrison", function() {deepEqual( Stem("garrisons"), "garrison");});
test("gart -> gart", function() {deepEqual( Stem("gart"), "gart");});
test("garter -> garter", function() {deepEqual( Stem("garter"), "garter");});
test("garterd -> garterd", function() {deepEqual( Stem("garterd"), "garterd");});
test("gartering -> garter", function() {deepEqual( Stem("gartering"), "garter");});
test("garters -> garter", function() {deepEqual( Stem("garters"), "garter");});
test("gascony -> gasconi", function() {deepEqual( Stem("gascony"), "gasconi");});
test("gash -> gash", function() {deepEqual( Stem("gash"), "gash");});
test("gashes -> gash", function() {deepEqual( Stem("gashes"), "gash");});
test("gaskins -> gaskin", function() {deepEqual( Stem("gaskins"), "gaskin");});
test("gasp -> gasp", function() {deepEqual( Stem("gasp"), "gasp");});
test("gasped -> gasp", function() {deepEqual( Stem("gasped"), "gasp");});
test("gasping -> gasp", function() {deepEqual( Stem("gasping"), "gasp");});
test("gast -> gast", function() {deepEqual( Stem("gast"), "gast");});
test("gasted -> gast", function() {deepEqual( Stem("gasted"), "gast");});
test("gastness -> gast", function() {deepEqual( Stem("gastness"), "gast");});
test("gat -> gat", function() {deepEqual( Stem("gat"), "gat");});
test("gate -> gate", function() {deepEqual( Stem("gate"), "gate");});
test("gated -> gate", function() {deepEqual( Stem("gated"), "gate");});
test("gates -> gate", function() {deepEqual( Stem("gates"), "gate");});
test("gath -> gath", function() {deepEqual( Stem("gath"), "gath");});
test("gather -> gather", function() {deepEqual( Stem("gather"), "gather");});
test("gathered -> gather", function() {deepEqual( Stem("gathered"), "gather");});
test("gathering -> gather", function() {deepEqual( Stem("gathering"), "gather");});
test("gathers -> gather", function() {deepEqual( Stem("gathers"), "gather");});
test("gatories -> gatori", function() {deepEqual( Stem("gatories"), "gatori");});
test("gatory -> gatori", function() {deepEqual( Stem("gatory"), "gatori");});
test("gaud -> gaud", function() {deepEqual( Stem("gaud"), "gaud");});
test("gaudeo -> gaudeo", function() {deepEqual( Stem("gaudeo"), "gaudeo");});
test("gaudy -> gaudi", function() {deepEqual( Stem("gaudy"), "gaudi");});
test("gauge -> gaug", function() {deepEqual( Stem("gauge"), "gaug");});
test("gaul -> gaul", function() {deepEqual( Stem("gaul"), "gaul");});
test("gaultree -> gaultre", function() {deepEqual( Stem("gaultree"), "gaultre");});
test("gaunt -> gaunt", function() {deepEqual( Stem("gaunt"), "gaunt");});
test("gauntlet -> gauntlet", function() {deepEqual( Stem("gauntlet"), "gauntlet");});
test("gauntlets -> gauntlet", function() {deepEqual( Stem("gauntlets"), "gauntlet");});
test("gauntly -> gauntli", function() {deepEqual( Stem("gauntly"), "gauntli");});
test("gaunts -> gaunt", function() {deepEqual( Stem("gaunts"), "gaunt");});
test("gav -> gav", function() {deepEqual( Stem("gav"), "gav");});
test("gave -> gave", function() {deepEqual( Stem("gave"), "gave");});
test("gavest -> gavest", function() {deepEqual( Stem("gavest"), "gavest");});
test("gavottes -> gavott", function() {deepEqual( Stem("gavottes"), "gavott");});
test("gawd -> gawd", function() {deepEqual( Stem("gawd"), "gawd");});
test("gawded -> gawd", function() {deepEqual( Stem("gawded"), "gawd");});
test("gawds -> gawd", function() {deepEqual( Stem("gawds"), "gawd");});
test("gawky -> gawki", function() {deepEqual( Stem("gawky"), "gawki");});
test("gawsey -> gawsei", function() {deepEqual( Stem("gawsey"), "gawsei");});
test("gay -> gai", function() {deepEqual( Stem("gay"), "gai");});
test("gayd -> gayd", function() {deepEqual( Stem("gayd"), "gayd");});
test("gayer -> gayer", function() {deepEqual( Stem("gayer"), "gayer");});
test("gayest -> gayest", function() {deepEqual( Stem("gayest"), "gayest");});
test("gayness -> gay", function() {deepEqual( Stem("gayness"), "gay");});
test("gaz -> gaz", function() {deepEqual( Stem("gaz"), "gaz");});
test("gazabo -> gazabo", function() {deepEqual( Stem("gazabo"), "gazabo");});
test("gaze -> gaze", function() {deepEqual( Stem("gaze"), "gaze");});
test("gazed -> gaze", function() {deepEqual( Stem("gazed"), "gaze");});
test("gazer -> gazer", function() {deepEqual( Stem("gazer"), "gazer");});
test("gazers -> gazer", function() {deepEqual( Stem("gazers"), "gazer");});
test("gazes -> gaze", function() {deepEqual( Stem("gazes"), "gaze");});
test("gazeth -> gazeth", function() {deepEqual( Stem("gazeth"), "gazeth");});
test("gazette -> gazett", function() {deepEqual( Stem("gazette"), "gazett");});
test("gazetted -> gazet", function() {deepEqual( Stem("gazetted"), "gazet");});
test("gazing -> gaze", function() {deepEqual( Stem("gazing"), "gaze");});
test("ge -> ge", function() {deepEqual( Stem("ge"), "ge");});
test("gear -> gear", function() {deepEqual( Stem("gear"), "gear");});
test("geck -> geck", function() {deepEqual( Stem("geck"), "geck");});
test("gee -> gee", function() {deepEqual( Stem("gee"), "gee");});
test("geese -> gees", function() {deepEqual( Stem("geese"), "gees");});
test("geffrey -> geffrei", function() {deepEqual( Stem("geffrey"), "geffrei");});
test("gelasasa -> gelasasa", function() {deepEqual( Stem("gelasasa"), "gelasasa");});
test("geld -> geld", function() {deepEqual( Stem("geld"), "geld");});
test("gelded -> geld", function() {deepEqual( Stem("gelded"), "geld");});
test("gelding -> geld", function() {deepEqual( Stem("gelding"), "geld");});
test("gelebet -> gelebet", function() {deepEqual( Stem("gelebet"), "gelebet");});
test("gelida -> gelida", function() {deepEqual( Stem("gelida"), "gelida");});
test("gelidus -> gelidu", function() {deepEqual( Stem("gelidus"), "gelidu");});
test("geliebt -> geliebt", function() {deepEqual( Stem("geliebt"), "geliebt");});
test("gelt -> gelt", function() {deepEqual( Stem("gelt"), "gelt");});
test("gem -> gem", function() {deepEqual( Stem("gem"), "gem");});
test("geminy -> gemini", function() {deepEqual( Stem("geminy"), "gemini");});
test("gems -> gem", function() {deepEqual( Stem("gems"), "gem");});
test("gen -> gen", function() {deepEqual( Stem("gen"), "gen");});
test("gender -> gender", function() {deepEqual( Stem("gender"), "gender");});
test("genders -> gender", function() {deepEqual( Stem("genders"), "gender");});
test("general -> gener", function() {deepEqual( Stem("general"), "gener");});
test("generally -> gener", function() {deepEqual( Stem("generally"), "gener");});
test("generals -> gener", function() {deepEqual( Stem("generals"), "gener");});
test("generating -> gener", function() {deepEqual( Stem("generating"), "gener");});
test("generation -> gener", function() {deepEqual( Stem("generation"), "gener");});
test("generations -> gener", function() {deepEqual( Stem("generations"), "gener");});
test("generative -> gener", function() {deepEqual( Stem("generative"), "gener");});
test("generosity -> generos", function() {deepEqual( Stem("generosity"), "generos");});
test("generous -> gener", function() {deepEqual( Stem("generous"), "gener");});
test("generousest -> generousest", function() {deepEqual( Stem("generousest"), "generousest");});
test("generously -> gener", function() {deepEqual( Stem("generously"), "gener");});
test("genevieve -> geneviev", function() {deepEqual( Stem("genevieve"), "geneviev");});
test("genievre -> genievr", function() {deepEqual( Stem("genievre"), "genievr");});
test("genitive -> genit", function() {deepEqual( Stem("genitive"), "genit");});
test("genitivo -> genitivo", function() {deepEqual( Stem("genitivo"), "genitivo");});
test("genius -> geniu", function() {deepEqual( Stem("genius"), "geniu");});
test("geniuses -> genius", function() {deepEqual( Stem("geniuses"), "genius");});
test("gennets -> gennet", function() {deepEqual( Stem("gennets"), "gennet");});
test("genoa -> genoa", function() {deepEqual( Stem("genoa"), "genoa");});
test("genoux -> genoux", function() {deepEqual( Stem("genoux"), "genoux");});
test("gens -> gen", function() {deepEqual( Stem("gens"), "gen");});
test("gent -> gent", function() {deepEqual( Stem("gent"), "gent");});
test("genteel -> genteel", function() {deepEqual( Stem("genteel"), "genteel");});
test("genteeler -> genteel", function() {deepEqual( Stem("genteeler"), "genteel");});
test("genteelest -> genteelest", function() {deepEqual( Stem("genteelest"), "genteelest");});
test("genteelly -> genteelli", function() {deepEqual( Stem("genteelly"), "genteelli");});
test("gentilhomme -> gentilhomm", function() {deepEqual( Stem("gentilhomme"), "gentilhomm");});
test("gentility -> gentil", function() {deepEqual( Stem("gentility"), "gentil");});
test("gentle -> gentl", function() {deepEqual( Stem("gentle"), "gentl");});
test("gentlefolks -> gentlefolk", function() {deepEqual( Stem("gentlefolks"), "gentlefolk");});
test("gentleman -> gentleman", function() {deepEqual( Stem("gentleman"), "gentleman");});
test("gentlemanlike -> gentlemanlik", function() {deepEqual( Stem("gentlemanlike"), "gentlemanlik");});
test("gentlemanly -> gentlemanli", function() {deepEqual( Stem("gentlemanly"), "gentlemanli");});
test("gentlemen -> gentlemen", function() {deepEqual( Stem("gentlemen"), "gentlemen");});
test("gentleness -> gentl", function() {deepEqual( Stem("gentleness"), "gentl");});
test("gentler -> gentler", function() {deepEqual( Stem("gentler"), "gentler");});
test("gentles -> gentl", function() {deepEqual( Stem("gentles"), "gentl");});
test("gentlest -> gentlest", function() {deepEqual( Stem("gentlest"), "gentlest");});
test("gentlewoman -> gentlewoman", function() {deepEqual( Stem("gentlewoman"), "gentlewoman");});
test("gentlewomanhood -> gentlewomanhood", function() {deepEqual( Stem("gentlewomanhood"), "gentlewomanhood");});
test("gentlewomen -> gentlewomen", function() {deepEqual( Stem("gentlewomen"), "gentlewomen");});
test("gently -> gentli", function() {deepEqual( Stem("gently"), "gentli");});
test("gentry -> gentri", function() {deepEqual( Stem("gentry"), "gentri");});
test("gents -> gent", function() {deepEqual( Stem("gents"), "gent");});
test("genuine -> genuin", function() {deepEqual( Stem("genuine"), "genuin");});
test("geography -> geographi", function() {deepEqual( Stem("geography"), "geographi");});
test("geological -> geolog", function() {deepEqual( Stem("geological"), "geolog");});
test("geologically -> geolog", function() {deepEqual( Stem("geologically"), "geolog");});
test("geologies -> geologi", function() {deepEqual( Stem("geologies"), "geologi");});
test("geology -> geologi", function() {deepEqual( Stem("geology"), "geologi");});
test("george -> georg", function() {deepEqual( Stem("george"), "georg");});
test("georges -> georg", function() {deepEqual( Stem("georges"), "georg");});
test("georgina -> georgina", function() {deepEqual( Stem("georgina"), "georgina");});
test("georgy -> georgi", function() {deepEqual( Stem("georgy"), "georgi");});
test("geranium -> geranium", function() {deepEqual( Stem("geranium"), "geranium");});
test("geraniums -> geranium", function() {deepEqual( Stem("geraniums"), "geranium");});
test("gerard -> gerard", function() {deepEqual( Stem("gerard"), "gerard");});
test("germain -> germain", function() {deepEqual( Stem("germain"), "germain");});
test("germaines -> germain", function() {deepEqual( Stem("germaines"), "germain");});
test("germains -> germain", function() {deepEqual( Stem("germains"), "germain");});
test("german -> german", function() {deepEqual( Stem("german"), "german");});
test("germane -> german", function() {deepEqual( Stem("germane"), "german");});
test("germans -> german", function() {deepEqual( Stem("germans"), "german");});
test("germany -> germani", function() {deepEqual( Stem("germany"), "germani");});
test("gerrard -> gerrard", function() {deepEqual( Stem("gerrard"), "gerrard");});
test("gertrude -> gertrud", function() {deepEqual( Stem("gertrude"), "gertrud");});
test("gest -> gest", function() {deepEqual( Stem("gest"), "gest");});
test("gests -> gest", function() {deepEqual( Stem("gests"), "gest");});
test("gesture -> gestur", function() {deepEqual( Stem("gesture"), "gestur");});
test("gestures -> gestur", function() {deepEqual( Stem("gestures"), "gestur");});
test("get -> get", function() {deepEqual( Stem("get"), "get");});
test("getrude -> getrud", function() {deepEqual( Stem("getrude"), "getrud");});
test("gets -> get", function() {deepEqual( Stem("gets"), "get");});
test("getter -> getter", function() {deepEqual( Stem("getter"), "getter");});
test("gettin -> gettin", function() {deepEqual( Stem("gettin"), "gettin");});
test("getting -> get", function() {deepEqual( Stem("getting"), "get");});
test("ghastly -> ghastli", function() {deepEqual( Stem("ghastly"), "ghastli");});
test("ghent -> ghent", function() {deepEqual( Stem("ghent"), "ghent");});
test("ghost -> ghost", function() {deepEqual( Stem("ghost"), "ghost");});
test("ghosted -> ghost", function() {deepEqual( Stem("ghosted"), "ghost");});
test("ghostly -> ghostli", function() {deepEqual( Stem("ghostly"), "ghostli");});
test("ghosts -> ghost", function() {deepEqual( Stem("ghosts"), "ghost");});
test("gi -> gi", function() {deepEqual( Stem("gi"), "gi");});
test("giant -> giant", function() {deepEqual( Stem("giant"), "giant");});
test("giantess -> giantess", function() {deepEqual( Stem("giantess"), "giantess");});
test("giantlike -> giantlik", function() {deepEqual( Stem("giantlike"), "giantlik");});
test("giants -> giant", function() {deepEqual( Stem("giants"), "giant");});
test("gib -> gib", function() {deepEqual( Stem("gib"), "gib");});
test("gibber -> gibber", function() {deepEqual( Stem("gibber"), "gibber");});
test("gibbet -> gibbet", function() {deepEqual( Stem("gibbet"), "gibbet");});
test("gibbeted -> gibbet", function() {deepEqual( Stem("gibbeted"), "gibbet");});
test("gibbets -> gibbet", function() {deepEqual( Stem("gibbets"), "gibbet");});
test("gibe -> gibe", function() {deepEqual( Stem("gibe"), "gibe");});
test("giber -> giber", function() {deepEqual( Stem("giber"), "giber");});
test("gibes -> gibe", function() {deepEqual( Stem("gibes"), "gibe");});
test("gibing -> gibe", function() {deepEqual( Stem("gibing"), "gibe");});
test("gibingly -> gibingli", function() {deepEqual( Stem("gibingly"), "gibingli");});
test("giddily -> giddili", function() {deepEqual( Stem("giddily"), "giddili");});
test("giddiness -> giddi", function() {deepEqual( Stem("giddiness"), "giddi");});
test("giddy -> giddi", function() {deepEqual( Stem("giddy"), "giddi");});
test("gift -> gift", function() {deepEqual( Stem("gift"), "gift");});
test("gifted -> gift", function() {deepEqual( Stem("gifted"), "gift");});
test("gifts -> gift", function() {deepEqual( Stem("gifts"), "gift");});
test("gig -> gig", function() {deepEqual( Stem("gig"), "gig");});
test("gigantic -> gigant", function() {deepEqual( Stem("gigantic"), "gigant");});
test("giggle -> giggl", function() {deepEqual( Stem("giggle"), "giggl");});
test("giggled -> giggl", function() {deepEqual( Stem("giggled"), "giggl");});
test("giggling -> giggl", function() {deepEqual( Stem("giggling"), "giggl");});
test("giglets -> giglet", function() {deepEqual( Stem("giglets"), "giglet");});
test("giglot -> giglot", function() {deepEqual( Stem("giglot"), "giglot");});
test("gigots -> gigot", function() {deepEqual( Stem("gigots"), "gigot");});
test("gilbert -> gilbert", function() {deepEqual( Stem("gilbert"), "gilbert");});
test("gild -> gild", function() {deepEqual( Stem("gild"), "gild");});
test("gilded -> gild", function() {deepEqual( Stem("gilded"), "gild");});
test("gilding -> gild", function() {deepEqual( Stem("gilding"), "gild");});
test("giles -> gile", function() {deepEqual( Stem("giles"), "gile");});
test("gillespie -> gillespi", function() {deepEqual( Stem("gillespie"), "gillespi");});
test("gilliams -> gilliam", function() {deepEqual( Stem("gilliams"), "gilliam");});
test("gillian -> gillian", function() {deepEqual( Stem("gillian"), "gillian");});
test("gillows -> gillow", function() {deepEqual( Stem("gillows"), "gillow");});
test("gills -> gill", function() {deepEqual( Stem("gills"), "gill");});
test("gillyflower -> gillyflow", function() {deepEqual( Stem("gillyflower"), "gillyflow");});
test("gillyvors -> gillyvor", function() {deepEqual( Stem("gillyvors"), "gillyvor");});
test("gilt -> gilt", function() {deepEqual( Stem("gilt"), "gilt");});
test("gim -> gim", function() {deepEqual( Stem("gim"), "gim");});
test("gimcrack -> gimcrack", function() {deepEqual( Stem("gimcrack"), "gimcrack");});
test("gimcracks -> gimcrack", function() {deepEqual( Stem("gimcracks"), "gimcrack");});
test("gimmal -> gimmal", function() {deepEqual( Stem("gimmal"), "gimmal");});
test("gimmers -> gimmer", function() {deepEqual( Stem("gimmers"), "gimmer");});
test("gin -> gin", function() {deepEqual( Stem("gin"), "gin");});
test("ging -> ging", function() {deepEqual( Stem("ging"), "ging");});
test("ginger -> ginger", function() {deepEqual( Stem("ginger"), "ginger");});
test("gingerbread -> gingerbread", function() {deepEqual( Stem("gingerbread"), "gingerbread");});
test("gingerly -> gingerli", function() {deepEqual( Stem("gingerly"), "gingerli");});
test("ginn -> ginn", function() {deepEqual( Stem("ginn"), "ginn");});
test("gins -> gin", function() {deepEqual( Stem("gins"), "gin");});
test("gioucestershire -> gioucestershir", function() {deepEqual( Stem("gioucestershire"), "gioucestershir");});
test("giovanni -> giovanni", function() {deepEqual( Stem("giovanni"), "giovanni");});
test("gipes -> gipe", function() {deepEqual( Stem("gipes"), "gipe");});
test("gipsies -> gipsi", function() {deepEqual( Stem("gipsies"), "gipsi");});
test("gipsy -> gipsi", function() {deepEqual( Stem("gipsy"), "gipsi");});
test("gird -> gird", function() {deepEqual( Stem("gird"), "gird");});
test("girded -> gird", function() {deepEqual( Stem("girded"), "gird");});
test("girdle -> girdl", function() {deepEqual( Stem("girdle"), "girdl");});
test("girdled -> girdl", function() {deepEqual( Stem("girdled"), "girdl");});
test("girdles -> girdl", function() {deepEqual( Stem("girdles"), "girdl");});
test("girdling -> girdl", function() {deepEqual( Stem("girdling"), "girdl");});
test("girl -> girl", function() {deepEqual( Stem("girl"), "girl");});
test("girlish -> girlish", function() {deepEqual( Stem("girlish"), "girlish");});
test("girls -> girl", function() {deepEqual( Stem("girls"), "girl");});
test("girt -> girt", function() {deepEqual( Stem("girt"), "girt");});
test("girth -> girth", function() {deepEqual( Stem("girth"), "girth");});
test("girthed -> girth", function() {deepEqual( Stem("girthed"), "girth");});
test("gis -> gi", function() {deepEqual( Stem("gis"), "gi");});
test("git -> git", function() {deepEqual( Stem("git"), "git");});
test("gittin -> gittin", function() {deepEqual( Stem("gittin"), "gittin");});
test("giv -> giv", function() {deepEqual( Stem("giv"), "giv");});
test("give -> give", function() {deepEqual( Stem("give"), "give");});
test("given -> given", function() {deepEqual( Stem("given"), "given");});
test("giver -> giver", function() {deepEqual( Stem("giver"), "giver");});
test("givers -> giver", function() {deepEqual( Stem("givers"), "giver");});
test("gives -> give", function() {deepEqual( Stem("gives"), "give");});
test("givest -> givest", function() {deepEqual( Stem("givest"), "givest");});
test("giveth -> giveth", function() {deepEqual( Stem("giveth"), "giveth");});
test("giving -> give", function() {deepEqual( Stem("giving"), "give");});
test("givings -> give", function() {deepEqual( Stem("givings"), "give");});
test("gizzard -> gizzard", function() {deepEqual( Stem("gizzard"), "gizzard");});
test("glad -> glad", function() {deepEqual( Stem("glad"), "glad");});
test("gladded -> glad", function() {deepEqual( Stem("gladded"), "glad");});
test("gladding -> glad", function() {deepEqual( Stem("gladding"), "glad");});
test("gladly -> gladli", function() {deepEqual( Stem("gladly"), "gladli");});
test("gladness -> glad", function() {deepEqual( Stem("gladness"), "glad");});
test("glamis -> glami", function() {deepEqual( Stem("glamis"), "glami");});
test("glanc -> glanc", function() {deepEqual( Stem("glanc"), "glanc");});
test("glance -> glanc", function() {deepEqual( Stem("glance"), "glanc");});
test("glanced -> glanc", function() {deepEqual( Stem("glanced"), "glanc");});
test("glances -> glanc", function() {deepEqual( Stem("glances"), "glanc");});
test("glancing -> glanc", function() {deepEqual( Stem("glancing"), "glanc");});
test("glanders -> glander", function() {deepEqual( Stem("glanders"), "glander");});
test("glandier -> glandier", function() {deepEqual( Stem("glandier"), "glandier");});
test("glansdale -> glansdal", function() {deepEqual( Stem("glansdale"), "glansdal");});
test("glare -> glare", function() {deepEqual( Stem("glare"), "glare");});
test("glared -> glare", function() {deepEqual( Stem("glared"), "glare");});
test("glares -> glare", function() {deepEqual( Stem("glares"), "glare");});
test("glass -> glass", function() {deepEqual( Stem("glass"), "glass");});
test("glasses -> glass", function() {deepEqual( Stem("glasses"), "glass");});
test("glassy -> glassi", function() {deepEqual( Stem("glassy"), "glassi");});
test("glauber -> glauber", function() {deepEqual( Stem("glauber"), "glauber");});
test("glaz -> glaz", function() {deepEqual( Stem("glaz"), "glaz");});
test("glazed -> glaze", function() {deepEqual( Stem("glazed"), "glaze");});
test("glazier -> glazier", function() {deepEqual( Stem("glazier"), "glazier");});
test("gleams -> gleam", function() {deepEqual( Stem("gleams"), "gleam");});
test("glean -> glean", function() {deepEqual( Stem("glean"), "glean");});
test("gleaned -> glean", function() {deepEqual( Stem("gleaned"), "glean");});
test("gleaning -> glean", function() {deepEqual( Stem("gleaning"), "glean");});
test("glee -> glee", function() {deepEqual( Stem("glee"), "glee");});
test("gleeful -> gleeful", function() {deepEqual( Stem("gleeful"), "gleeful");});
test("gleek -> gleek", function() {deepEqual( Stem("gleek"), "gleek");});
test("gleeking -> gleek", function() {deepEqual( Stem("gleeking"), "gleek");});
test("gleeks -> gleek", function() {deepEqual( Stem("gleeks"), "gleek");});
test("glend -> glend", function() {deepEqual( Stem("glend"), "glend");});
test("glendower -> glendow", function() {deepEqual( Stem("glendower"), "glendow");});
test("glenmalony -> glenmaloni", function() {deepEqual( Stem("glenmalony"), "glenmaloni");});
test("glib -> glib", function() {deepEqual( Stem("glib"), "glib");});
test("glide -> glide", function() {deepEqual( Stem("glide"), "glide");});
test("glided -> glide", function() {deepEqual( Stem("glided"), "glide");});
test("glides -> glide", function() {deepEqual( Stem("glides"), "glide");});
test("glideth -> glideth", function() {deepEqual( Stem("glideth"), "glideth");});
test("gliding -> glide", function() {deepEqual( Stem("gliding"), "glide");});
test("glimmer -> glimmer", function() {deepEqual( Stem("glimmer"), "glimmer");});
test("glimmering -> glimmer", function() {deepEqual( Stem("glimmering"), "glimmer");});
test("glimmers -> glimmer", function() {deepEqual( Stem("glimmers"), "glimmer");});
test("glimpse -> glimps", function() {deepEqual( Stem("glimpse"), "glimps");});
test("glimpses -> glimps", function() {deepEqual( Stem("glimpses"), "glimps");});
test("glist -> glist", function() {deepEqual( Stem("glist"), "glist");});
test("glistened -> glisten", function() {deepEqual( Stem("glistened"), "glisten");});
test("glistening -> glisten", function() {deepEqual( Stem("glistening"), "glisten");});
test("glister -> glister", function() {deepEqual( Stem("glister"), "glister");});
test("glistering -> glister", function() {deepEqual( Stem("glistering"), "glister");});
test("glisters -> glister", function() {deepEqual( Stem("glisters"), "glister");});
test("glitt -> glitt", function() {deepEqual( Stem("glitt"), "glitt");});
test("glitter -> glitter", function() {deepEqual( Stem("glitter"), "glitter");});
test("glittered -> glitter", function() {deepEqual( Stem("glittered"), "glitter");});
test("glittering -> glitter", function() {deepEqual( Stem("glittering"), "glitter");});
test("gloating -> gloat", function() {deepEqual( Stem("gloating"), "gloat");});
test("globe -> globe", function() {deepEqual( Stem("globe"), "globe");});
test("globes -> globe", function() {deepEqual( Stem("globes"), "globe");});
test("gloom -> gloom", function() {deepEqual( Stem("gloom"), "gloom");});
test("gloomily -> gloomili", function() {deepEqual( Stem("gloomily"), "gloomili");});
test("glooming -> gloom", function() {deepEqual( Stem("glooming"), "gloom");});
test("gloomy -> gloomi", function() {deepEqual( Stem("gloomy"), "gloomi");});
test("glories -> glori", function() {deepEqual( Stem("glories"), "glori");});
test("glorified -> glorifi", function() {deepEqual( Stem("glorified"), "glorifi");});
test("glorify -> glorifi", function() {deepEqual( Stem("glorify"), "glorifi");});
test("glorifying -> glorifi", function() {deepEqual( Stem("glorifying"), "glorifi");});
test("glorious -> gloriou", function() {deepEqual( Stem("glorious"), "gloriou");});
test("gloriously -> glorious", function() {deepEqual( Stem("gloriously"), "glorious");});
test("glorvina -> glorvina", function() {deepEqual( Stem("glorvina"), "glorvina");});
test("glory -> glori", function() {deepEqual( Stem("glory"), "glori");});
test("glose -> glose", function() {deepEqual( Stem("glose"), "glose");});
test("gloss -> gloss", function() {deepEqual( Stem("gloss"), "gloss");});
test("glosses -> gloss", function() {deepEqual( Stem("glosses"), "gloss");});
test("glossy -> glossi", function() {deepEqual( Stem("glossy"), "glossi");});
test("gloster -> gloster", function() {deepEqual( Stem("gloster"), "gloster");});
test("glou -> glou", function() {deepEqual( Stem("glou"), "glou");});
test("glouceste -> gloucest", function() {deepEqual( Stem("glouceste"), "gloucest");});
test("gloucester -> gloucest", function() {deepEqual( Stem("gloucester"), "gloucest");});
test("gloucestershire -> gloucestershir", function() {deepEqual( Stem("gloucestershire"), "gloucestershir");});
test("glove -> glove", function() {deepEqual( Stem("glove"), "glove");});
test("gloved -> glove", function() {deepEqual( Stem("gloved"), "glove");});
test("glover -> glover", function() {deepEqual( Stem("glover"), "glover");});
test("gloves -> glove", function() {deepEqual( Stem("gloves"), "glove");});
test("glow -> glow", function() {deepEqual( Stem("glow"), "glow");});
test("glowed -> glow", function() {deepEqual( Stem("glowed"), "glow");});
test("glowing -> glow", function() {deepEqual( Stem("glowing"), "glow");});
test("glowry -> glowri", function() {deepEqual( Stem("glowry"), "glowri");});
test("glowworm -> glowworm", function() {deepEqual( Stem("glowworm"), "glowworm");});
test("gloz -> gloz", function() {deepEqual( Stem("gloz"), "gloz");});
test("gloze -> gloze", function() {deepEqual( Stem("gloze"), "gloze");});
test("glozes -> gloze", function() {deepEqual( Stem("glozes"), "gloze");});
test("glu -> glu", function() {deepEqual( Stem("glu"), "glu");});
test("glue -> glue", function() {deepEqual( Stem("glue"), "glue");});
test("glued -> glu", function() {deepEqual( Stem("glued"), "glu");});
test("glues -> glue", function() {deepEqual( Stem("glues"), "glue");});
test("glum -> glum", function() {deepEqual( Stem("glum"), "glum");});
test("glut -> glut", function() {deepEqual( Stem("glut"), "glut");});
test("glutt -> glutt", function() {deepEqual( Stem("glutt"), "glutt");});
test("glutted -> glut", function() {deepEqual( Stem("glutted"), "glut");});
test("glutton -> glutton", function() {deepEqual( Stem("glutton"), "glutton");});
test("gluttoning -> glutton", function() {deepEqual( Stem("gluttoning"), "glutton");});
test("gluttony -> gluttoni", function() {deepEqual( Stem("gluttony"), "gluttoni");});
test("gnarled -> gnarl", function() {deepEqual( Stem("gnarled"), "gnarl");});
test("gnarling -> gnarl", function() {deepEqual( Stem("gnarling"), "gnarl");});
test("gnat -> gnat", function() {deepEqual( Stem("gnat"), "gnat");});
test("gnats -> gnat", function() {deepEqual( Stem("gnats"), "gnat");});
test("gnaw -> gnaw", function() {deepEqual( Stem("gnaw"), "gnaw");});
test("gnawing -> gnaw", function() {deepEqual( Stem("gnawing"), "gnaw");});
test("gnawn -> gnawn", function() {deepEqual( Stem("gnawn"), "gnawn");});
test("gnaws -> gnaw", function() {deepEqual( Stem("gnaws"), "gnaw");});
test("go -> go", function() {deepEqual( Stem("go"), "go");});
test("goad -> goad", function() {deepEqual( Stem("goad"), "goad");});
test("goaded -> goad", function() {deepEqual( Stem("goaded"), "goad");});
test("goads -> goad", function() {deepEqual( Stem("goads"), "goad");});
test("goal -> goal", function() {deepEqual( Stem("goal"), "goal");});
test("goat -> goat", function() {deepEqual( Stem("goat"), "goat");});
test("goatish -> goatish", function() {deepEqual( Stem("goatish"), "goatish");});
test("goats -> goat", function() {deepEqual( Stem("goats"), "goat");});
test("gobbets -> gobbet", function() {deepEqual( Stem("gobbets"), "gobbet");});
test("gobbled -> gobbl", function() {deepEqual( Stem("gobbled"), "gobbl");});
test("gobbling -> gobbl", function() {deepEqual( Stem("gobbling"), "gobbl");});
test("gobbo -> gobbo", function() {deepEqual( Stem("gobbo"), "gobbo");});
test("goblet -> goblet", function() {deepEqual( Stem("goblet"), "goblet");});
test("goblets -> goblet", function() {deepEqual( Stem("goblets"), "goblet");});
test("goblin -> goblin", function() {deepEqual( Stem("goblin"), "goblin");});
test("goblins -> goblin", function() {deepEqual( Stem("goblins"), "goblin");});
test("god -> god", function() {deepEqual( Stem("god"), "god");});
test("godded -> god", function() {deepEqual( Stem("godded"), "god");});
test("goddem -> goddem", function() {deepEqual( Stem("goddem"), "goddem");});
test("godden -> godden", function() {deepEqual( Stem("godden"), "godden");});
test("goddess -> goddess", function() {deepEqual( Stem("goddess"), "goddess");});
test("goddesses -> goddess", function() {deepEqual( Stem("goddesses"), "goddess");});
test("goddild -> goddild", function() {deepEqual( Stem("goddild"), "goddild");});
test("godfather -> godfath", function() {deepEqual( Stem("godfather"), "godfath");});
test("godfathers -> godfath", function() {deepEqual( Stem("godfathers"), "godfath");});
test("godhead -> godhead", function() {deepEqual( Stem("godhead"), "godhead");});
test("godless -> godless", function() {deepEqual( Stem("godless"), "godless");});
test("godlike -> godlik", function() {deepEqual( Stem("godlike"), "godlik");});
test("godliness -> godli", function() {deepEqual( Stem("godliness"), "godli");});
test("godly -> godli", function() {deepEqual( Stem("godly"), "godli");});
test("godmother -> godmoth", function() {deepEqual( Stem("godmother"), "godmoth");});
test("godpapa -> godpapa", function() {deepEqual( Stem("godpapa"), "godpapa");});
test("gods -> god", function() {deepEqual( Stem("gods"), "god");});
test("godson -> godson", function() {deepEqual( Stem("godson"), "godson");});
test("goer -> goer", function() {deepEqual( Stem("goer"), "goer");});
test("goers -> goer", function() {deepEqual( Stem("goers"), "goer");});
test("goes -> goe", function() {deepEqual( Stem("goes"), "goe");});
test("goest -> goest", function() {deepEqual( Stem("goest"), "goest");});
test("goeth -> goeth", function() {deepEqual( Stem("goeth"), "goeth");});
test("goethe -> goeth", function() {deepEqual( Stem("goethe"), "goeth");});
test("goffe -> goff", function() {deepEqual( Stem("goffe"), "goff");});
test("gogs -> gog", function() {deepEqual( Stem("gogs"), "gog");});
test("goin -> goin", function() {deepEqual( Stem("goin"), "goin");});
test("going -> go", function() {deepEqual( Stem("going"), "go");});
test("golconda -> golconda", function() {deepEqual( Stem("golconda"), "golconda");});
test("gold -> gold", function() {deepEqual( Stem("gold"), "gold");});
test("golden -> golden", function() {deepEqual( Stem("golden"), "golden");});
test("goldenly -> goldenli", function() {deepEqual( Stem("goldenly"), "goldenli");});
test("golding -> gold", function() {deepEqual( Stem("golding"), "gold");});
test("goldmore -> goldmor", function() {deepEqual( Stem("goldmore"), "goldmor");});
test("goldsmith -> goldsmith", function() {deepEqual( Stem("goldsmith"), "goldsmith");});
test("goldsmiths -> goldsmith", function() {deepEqual( Stem("goldsmiths"), "goldsmith");});
test("golgotha -> golgotha", function() {deepEqual( Stem("golgotha"), "golgotha");});
test("goliases -> golias", function() {deepEqual( Stem("goliases"), "golias");});
test("goliath -> goliath", function() {deepEqual( Stem("goliath"), "goliath");});
test("gollop -> gollop", function() {deepEqual( Stem("gollop"), "gollop");});
test("gon -> gon", function() {deepEqual( Stem("gon"), "gon");});
test("gondola -> gondola", function() {deepEqual( Stem("gondola"), "gondola");});
test("gondolier -> gondoli", function() {deepEqual( Stem("gondolier"), "gondoli");});
test("gone -> gone", function() {deepEqual( Stem("gone"), "gone");});
test("goneril -> goneril", function() {deepEqual( Stem("goneril"), "goneril");});
test("gong -> gong", function() {deepEqual( Stem("gong"), "gong");});
test("gonnoisance -> gonnois", function() {deepEqual( Stem("gonnoisance"), "gonnois");});
test("gonzago -> gonzago", function() {deepEqual( Stem("gonzago"), "gonzago");});
test("gonzalo -> gonzalo", function() {deepEqual( Stem("gonzalo"), "gonzalo");});
test("goo -> goo", function() {deepEqual( Stem("goo"), "goo");});
test("good -> good", function() {deepEqual( Stem("good"), "good");});
test("goodfellow -> goodfellow", function() {deepEqual( Stem("goodfellow"), "goodfellow");});
test("goodish -> goodish", function() {deepEqual( Stem("goodish"), "goodish");});
test("goodlier -> goodlier", function() {deepEqual( Stem("goodlier"), "goodlier");});
test("goodliest -> goodliest", function() {deepEqual( Stem("goodliest"), "goodliest");});
test("goodly -> goodli", function() {deepEqual( Stem("goodly"), "goodli");});
test("goodman -> goodman", function() {deepEqual( Stem("goodman"), "goodman");});
test("goodness -> good", function() {deepEqual( Stem("goodness"), "good");});
test("goodnight -> goodnight", function() {deepEqual( Stem("goodnight"), "goodnight");});
test("goodrig -> goodrig", function() {deepEqual( Stem("goodrig"), "goodrig");});
test("goods -> good", function() {deepEqual( Stem("goods"), "good");});
test("goodwife -> goodwif", function() {deepEqual( Stem("goodwife"), "goodwif");});
test("goodwill -> goodwil", function() {deepEqual( Stem("goodwill"), "goodwil");});
test("goodwin -> goodwin", function() {deepEqual( Stem("goodwin"), "goodwin");});
test("goodwins -> goodwin", function() {deepEqual( Stem("goodwins"), "goodwin");});
test("goodwood -> goodwood", function() {deepEqual( Stem("goodwood"), "goodwood");});
test("goody -> goodi", function() {deepEqual( Stem("goody"), "goodi");});
test("goodyear -> goodyear", function() {deepEqual( Stem("goodyear"), "goodyear");});
test("goodyears -> goodyear", function() {deepEqual( Stem("goodyears"), "goodyear");});
test("goold -> goold", function() {deepEqual( Stem("goold"), "goold");});
test("goose -> goos", function() {deepEqual( Stem("goose"), "goos");});
test("gooseberry -> gooseberri", function() {deepEqual( Stem("gooseberry"), "gooseberri");});
test("goosequills -> goosequil", function() {deepEqual( Stem("goosequills"), "goosequil");});
test("goosey -> goosei", function() {deepEqual( Stem("goosey"), "goosei");});
test("goot -> goot", function() {deepEqual( Stem("goot"), "goot");});
test("gor -> gor", function() {deepEqual( Stem("gor"), "gor");});
test("gorbellied -> gorbelli", function() {deepEqual( Stem("gorbellied"), "gorbelli");});
test("gorboduc -> gorboduc", function() {deepEqual( Stem("gorboduc"), "gorboduc");});
test("gordian -> gordian", function() {deepEqual( Stem("gordian"), "gordian");});
test("gore -> gore", function() {deepEqual( Stem("gore"), "gore");});
test("gored -> gore", function() {deepEqual( Stem("gored"), "gore");});
test("gorer -> gorer", function() {deepEqual( Stem("gorer"), "gorer");});
test("gorg -> gorg", function() {deepEqual( Stem("gorg"), "gorg");});
test("gorge -> gorg", function() {deepEqual( Stem("gorge"), "gorg");});
test("gorgeous -> gorgeou", function() {deepEqual( Stem("gorgeous"), "gorgeou");});
test("gorgeously -> gorgeous", function() {deepEqual( Stem("gorgeously"), "gorgeous");});
test("gorget -> gorget", function() {deepEqual( Stem("gorget"), "gorget");});
test("gorging -> gorg", function() {deepEqual( Stem("gorging"), "gorg");});
test("gorgon -> gorgon", function() {deepEqual( Stem("gorgon"), "gorgon");});
test("gormandize -> gormand", function() {deepEqual( Stem("gormandize"), "gormand");});
test("gormandizing -> gormand", function() {deepEqual( Stem("gormandizing"), "gormand");});
test("gory -> gori", function() {deepEqual( Stem("gory"), "gori");});
test("gosling -> gosl", function() {deepEqual( Stem("gosling"), "gosl");});
test("gospel -> gospel", function() {deepEqual( Stem("gospel"), "gospel");});
test("gospels -> gospel", function() {deepEqual( Stem("gospels"), "gospel");});
test("goss -> goss", function() {deepEqual( Stem("goss"), "goss");});
test("gossamer -> gossam", function() {deepEqual( Stem("gossamer"), "gossam");});
test("gossip -> gossip", function() {deepEqual( Stem("gossip"), "gossip");});
test("gossiping -> gossip", function() {deepEqual( Stem("gossiping"), "gossip");});
test("gossiplike -> gossiplik", function() {deepEqual( Stem("gossiplike"), "gossiplik");});
test("gossips -> gossip", function() {deepEqual( Stem("gossips"), "gossip");});
test("got -> got", function() {deepEqual( Stem("got"), "got");});
test("goth -> goth", function() {deepEqual( Stem("goth"), "goth");});
test("gothic -> gothic", function() {deepEqual( Stem("gothic"), "gothic");});
test("goths -> goth", function() {deepEqual( Stem("goths"), "goth");});
test("gotten -> gotten", function() {deepEqual( Stem("gotten"), "gotten");});
test("gourd -> gourd", function() {deepEqual( Stem("gourd"), "gourd");});
test("gourmand -> gourmand", function() {deepEqual( Stem("gourmand"), "gourmand");});
test("gourmandise -> gourmandis", function() {deepEqual( Stem("gourmandise"), "gourmandis");});
test("gout -> gout", function() {deepEqual( Stem("gout"), "gout");});
test("gouts -> gout", function() {deepEqual( Stem("gouts"), "gout");});
test("gouty -> gouti", function() {deepEqual( Stem("gouty"), "gouti");});
test("govern -> govern", function() {deepEqual( Stem("govern"), "govern");});
test("governance -> govern", function() {deepEqual( Stem("governance"), "govern");});
test("governed -> govern", function() {deepEqual( Stem("governed"), "govern");});
test("governess -> gover", function() {deepEqual( Stem("governess"), "gover");});
test("governesses -> gover", function() {deepEqual( Stem("governesses"), "gover");});
test("government -> govern", function() {deepEqual( Stem("government"), "govern");});
test("governor -> governor", function() {deepEqual( Stem("governor"), "governor");});
test("governors -> governor", function() {deepEqual( Stem("governors"), "governor");});
test("governorship -> governorship", function() {deepEqual( Stem("governorship"), "governorship");});
test("governs -> govern", function() {deepEqual( Stem("governs"), "govern");});
test("gower -> gower", function() {deepEqual( Stem("gower"), "gower");});
test("gown -> gown", function() {deepEqual( Stem("gown"), "gown");});
test("gownds -> gownd", function() {deepEqual( Stem("gownds"), "gownd");});
test("gowns -> gown", function() {deepEqual( Stem("gowns"), "gown");});
test("grac -> grac", function() {deepEqual( Stem("grac"), "grac");});
test("grace -> grace", function() {deepEqual( Stem("grace"), "grace");});
test("graced -> grace", function() {deepEqual( Stem("graced"), "grace");});
test("graceful -> grace", function() {deepEqual( Stem("graceful"), "grace");});
test("gracefully -> gracefulli", function() {deepEqual( Stem("gracefully"), "gracefulli");});
test("graceless -> graceless", function() {deepEqual( Stem("graceless"), "graceless");});
test("graces -> grace", function() {deepEqual( Stem("graces"), "grace");});
test("gracing -> grace", function() {deepEqual( Stem("gracing"), "grace");});
test("gracious -> graciou", function() {deepEqual( Stem("gracious"), "graciou");});
test("graciously -> gracious", function() {deepEqual( Stem("graciously"), "gracious");});
test("graciousness -> gracious", function() {deepEqual( Stem("graciousness"), "gracious");});
test("gradation -> gradat", function() {deepEqual( Stem("gradation"), "gradat");});
test("gradual -> gradual", function() {deepEqual( Stem("gradual"), "gradual");});
test("gradually -> gradual", function() {deepEqual( Stem("gradually"), "gradual");});
test("grady -> gradi", function() {deepEqual( Stem("grady"), "gradi");});
test("graf -> graf", function() {deepEqual( Stem("graf"), "graf");});
test("graff -> graff", function() {deepEqual( Stem("graff"), "graff");});
test("graffing -> graf", function() {deepEqual( Stem("graffing"), "graf");});
test("grafinn -> grafinn", function() {deepEqual( Stem("grafinn"), "grafinn");});
test("graft -> graft", function() {deepEqual( Stem("graft"), "graft");});
test("grafted -> graft", function() {deepEqual( Stem("grafted"), "graft");});
test("grafters -> grafter", function() {deepEqual( Stem("grafters"), "grafter");});
test("grain -> grain", function() {deepEqual( Stem("grain"), "grain");});
test("grained -> grain", function() {deepEqual( Stem("grained"), "grain");});
test("grains -> grain", function() {deepEqual( Stem("grains"), "grain");});
test("gramercies -> gramerci", function() {deepEqual( Stem("gramercies"), "gramerci");});
test("gramercy -> gramerci", function() {deepEqual( Stem("gramercy"), "gramerci");});
test("grammar -> grammar", function() {deepEqual( Stem("grammar"), "grammar");});
test("grammars -> grammar", function() {deepEqual( Stem("grammars"), "grammar");});
test("grand -> grand", function() {deepEqual( Stem("grand"), "grand");});
test("grandam -> grandam", function() {deepEqual( Stem("grandam"), "grandam");});
test("grandame -> grandam", function() {deepEqual( Stem("grandame"), "grandam");});
test("grandchild -> grandchild", function() {deepEqual( Stem("grandchild"), "grandchild");});
test("grandchildren -> grandchildren", function() {deepEqual( Stem("grandchildren"), "grandchildren");});
test("granddaughter -> granddaught", function() {deepEqual( Stem("granddaughter"), "granddaught");});
test("grande -> grand", function() {deepEqual( Stem("grande"), "grand");});
test("grandee -> grande", function() {deepEqual( Stem("grandee"), "grande");});
test("grandees -> grande", function() {deepEqual( Stem("grandees"), "grande");});
test("grandes -> grand", function() {deepEqual( Stem("grandes"), "grand");});
test("grandest -> grandest", function() {deepEqual( Stem("grandest"), "grandest");});
test("grandeur -> grandeur", function() {deepEqual( Stem("grandeur"), "grandeur");});
test("grandfather -> grandfath", function() {deepEqual( Stem("grandfather"), "grandfath");});
test("grandfathers -> grandfath", function() {deepEqual( Stem("grandfathers"), "grandfath");});
test("grandjurors -> grandjuror", function() {deepEqual( Stem("grandjurors"), "grandjuror");});
test("grandmother -> grandmoth", function() {deepEqual( Stem("grandmother"), "grandmoth");});
test("grandmothers -> grandmoth", function() {deepEqual( Stem("grandmothers"), "grandmoth");});
test("grandpapa -> grandpapa", function() {deepEqual( Stem("grandpapa"), "grandpapa");});
test("grandpre -> grandpr", function() {deepEqual( Stem("grandpre"), "grandpr");});
test("grandsir -> grandsir", function() {deepEqual( Stem("grandsir"), "grandsir");});
test("grandsire -> grandsir", function() {deepEqual( Stem("grandsire"), "grandsir");});
test("grandsires -> grandsir", function() {deepEqual( Stem("grandsires"), "grandsir");});
test("grandson -> grandson", function() {deepEqual( Stem("grandson"), "grandson");});
test("grange -> grang", function() {deepEqual( Stem("grange"), "grang");});
test("granite -> granit", function() {deepEqual( Stem("granite"), "granit");});
test("grant -> grant", function() {deepEqual( Stem("grant"), "grant");});
test("granted -> grant", function() {deepEqual( Stem("granted"), "grant");});
test("granting -> grant", function() {deepEqual( Stem("granting"), "grant");});
test("grants -> grant", function() {deepEqual( Stem("grants"), "grant");});
test("grape -> grape", function() {deepEqual( Stem("grape"), "grape");});
test("graperies -> graperi", function() {deepEqual( Stem("graperies"), "graperi");});
test("grapes -> grape", function() {deepEqual( Stem("grapes"), "grape");});
test("grapple -> grappl", function() {deepEqual( Stem("grapple"), "grappl");});
test("grapples -> grappl", function() {deepEqual( Stem("grapples"), "grappl");});
test("grappling -> grappl", function() {deepEqual( Stem("grappling"), "grappl");});
test("gras -> gra", function() {deepEqual( Stem("gras"), "gra");});
test("grasp -> grasp", function() {deepEqual( Stem("grasp"), "grasp");});
test("grasped -> grasp", function() {deepEqual( Stem("grasped"), "grasp");});
test("grasping -> grasp", function() {deepEqual( Stem("grasping"), "grasp");});
test("grasps -> grasp", function() {deepEqual( Stem("grasps"), "grasp");});
test("grass -> grass", function() {deepEqual( Stem("grass"), "grass");});
test("grasshoppers -> grasshopp", function() {deepEqual( Stem("grasshoppers"), "grasshopp");});
test("grassy -> grassi", function() {deepEqual( Stem("grassy"), "grassi");});
test("grate -> grate", function() {deepEqual( Stem("grate"), "grate");});
test("grated -> grate", function() {deepEqual( Stem("grated"), "grate");});
test("grateful -> grate", function() {deepEqual( Stem("grateful"), "grate");});
test("gratefully -> gratefulli", function() {deepEqual( Stem("gratefully"), "gratefulli");});
test("grates -> grate", function() {deepEqual( Stem("grates"), "grate");});
test("gratiano -> gratiano", function() {deepEqual( Stem("gratiano"), "gratiano");});
test("gratification -> gratif", function() {deepEqual( Stem("gratification"), "gratif");});
test("gratified -> gratifi", function() {deepEqual( Stem("gratified"), "gratifi");});
test("gratify -> gratifi", function() {deepEqual( Stem("gratify"), "gratifi");});
test("gratifying -> gratifi", function() {deepEqual( Stem("gratifying"), "gratifi");});
test("gratii -> gratii", function() {deepEqual( Stem("gratii"), "gratii");});
test("gratillity -> gratil", function() {deepEqual( Stem("gratillity"), "gratil");});
test("grating -> grate", function() {deepEqual( Stem("grating"), "grate");});
test("gratis -> grati", function() {deepEqual( Stem("gratis"), "grati");});
test("gratitude -> gratitud", function() {deepEqual( Stem("gratitude"), "gratitud");});
test("gratuities -> gratuiti", function() {deepEqual( Stem("gratuities"), "gratuiti");});
test("gratulate -> gratul", function() {deepEqual( Stem("gratulate"), "gratul");});
test("grav -> grav", function() {deepEqual( Stem("grav"), "grav");});
test("grave -> grave", function() {deepEqual( Stem("grave"), "grave");});
test("gravediggers -> gravedigg", function() {deepEqual( Stem("gravediggers"), "gravedigg");});
test("gravel -> gravel", function() {deepEqual( Stem("gravel"), "gravel");});
test("graveless -> graveless", function() {deepEqual( Stem("graveless"), "graveless");});
test("gravell -> gravel", function() {deepEqual( Stem("gravell"), "gravel");});
test("gravely -> grave", function() {deepEqual( Stem("gravely"), "grave");});
test("graven -> graven", function() {deepEqual( Stem("graven"), "graven");});
test("graveness -> grave", function() {deepEqual( Stem("graveness"), "grave");});
test("graver -> graver", function() {deepEqual( Stem("graver"), "graver");});
test("graves -> grave", function() {deepEqual( Stem("graves"), "grave");});
test("gravesend -> gravesend", function() {deepEqual( Stem("gravesend"), "gravesend");});
test("gravest -> gravest", function() {deepEqual( Stem("gravest"), "gravest");});
test("gravestone -> graveston", function() {deepEqual( Stem("gravestone"), "graveston");});
test("gravities -> graviti", function() {deepEqual( Stem("gravities"), "graviti");});
test("gravity -> graviti", function() {deepEqual( Stem("gravity"), "graviti");});
test("gravy -> gravi", function() {deepEqual( Stem("gravy"), "gravi");});
test("gray -> grai", function() {deepEqual( Stem("gray"), "grai");});
test("graymalkin -> graymalkin", function() {deepEqual( Stem("graymalkin"), "graymalkin");});
test("graz -> graz", function() {deepEqual( Stem("graz"), "graz");});
test("graze -> graze", function() {deepEqual( Stem("graze"), "graze");});
test("grazed -> graze", function() {deepEqual( Stem("grazed"), "graze");});
test("grazing -> graze", function() {deepEqual( Stem("grazing"), "graze");});
test("grease -> greas", function() {deepEqual( Stem("grease"), "greas");});
test("greased -> greas", function() {deepEqual( Stem("greased"), "greas");});
test("greases -> greas", function() {deepEqual( Stem("greases"), "greas");});
test("greasily -> greasili", function() {deepEqual( Stem("greasily"), "greasili");});
test("greasy -> greasi", function() {deepEqual( Stem("greasy"), "greasi");});
test("great -> great", function() {deepEqual( Stem("great"), "great");});
test("greatcoat -> greatcoat", function() {deepEqual( Stem("greatcoat"), "greatcoat");});
test("greater -> greater", function() {deepEqual( Stem("greater"), "greater");});
test("greatest -> greatest", function() {deepEqual( Stem("greatest"), "greatest");});
test("greatly -> greatli", function() {deepEqual( Stem("greatly"), "greatli");});
test("greatness -> great", function() {deepEqual( Stem("greatness"), "great");});
test("grecian -> grecian", function() {deepEqual( Stem("grecian"), "grecian");});
test("grecians -> grecian", function() {deepEqual( Stem("grecians"), "grecian");});
test("gredin -> gredin", function() {deepEqual( Stem("gredin"), "gredin");});
test("gree -> gree", function() {deepEqual( Stem("gree"), "gree");});
test("greece -> greec", function() {deepEqual( Stem("greece"), "greec");});
test("greed -> greed", function() {deepEqual( Stem("greed"), "greed");});
test("greedily -> greedili", function() {deepEqual( Stem("greedily"), "greedili");});
test("greediness -> greedi", function() {deepEqual( Stem("greediness"), "greedi");});
test("greedy -> greedi", function() {deepEqual( Stem("greedy"), "greedi");});
test("greeing -> gree", function() {deepEqual( Stem("greeing"), "gree");});
test("greek -> greek", function() {deepEqual( Stem("greek"), "greek");});
test("greekish -> greekish", function() {deepEqual( Stem("greekish"), "greekish");});
test("greeks -> greek", function() {deepEqual( Stem("greeks"), "greek");});
test("green -> green", function() {deepEqual( Stem("green"), "green");});
test("greener -> greener", function() {deepEqual( Stem("greener"), "greener");});
test("greenest -> greenest", function() {deepEqual( Stem("greenest"), "greenest");});
test("greengrocer -> greengroc", function() {deepEqual( Stem("greengrocer"), "greengroc");});
test("greengroceries -> greengroceri", function() {deepEqual( Stem("greengroceries"), "greengroceri");});
test("greengrocers -> greengroc", function() {deepEqual( Stem("greengrocers"), "greengroc");});
test("greenhorn -> greenhorn", function() {deepEqual( Stem("greenhorn"), "greenhorn");});
test("greenly -> greenli", function() {deepEqual( Stem("greenly"), "greenli");});
test("greens -> green", function() {deepEqual( Stem("greens"), "green");});
test("greensleeves -> greensleev", function() {deepEqual( Stem("greensleeves"), "greensleev");});
test("greenwich -> greenwich", function() {deepEqual( Stem("greenwich"), "greenwich");});
test("greenwood -> greenwood", function() {deepEqual( Stem("greenwood"), "greenwood");});
test("greeps -> greep", function() {deepEqual( Stem("greeps"), "greep");});
test("greet -> greet", function() {deepEqual( Stem("greet"), "greet");});
test("greeted -> greet", function() {deepEqual( Stem("greeted"), "greet");});
test("greeting -> greet", function() {deepEqual( Stem("greeting"), "greet");});
test("greetings -> greet", function() {deepEqual( Stem("greetings"), "greet");});
test("greets -> greet", function() {deepEqual( Stem("greets"), "greet");});
test("greg -> greg", function() {deepEqual( Stem("greg"), "greg");});
test("gregory -> gregori", function() {deepEqual( Stem("gregory"), "gregori");});
test("gremio -> gremio", function() {deepEqual( Stem("gremio"), "gremio");});
test("grenadier -> grenadi", function() {deepEqual( Stem("grenadier"), "grenadi");});
test("grenadiers -> grenadi", function() {deepEqual( Stem("grenadiers"), "grenadi");});
test("gretney -> gretnei", function() {deepEqual( Stem("gretney"), "gretnei");});
test("grew -> grew", function() {deepEqual( Stem("grew"), "grew");});
test("grey -> grei", function() {deepEqual( Stem("grey"), "grei");});
test("greybeard -> greybeard", function() {deepEqual( Stem("greybeard"), "greybeard");});
test("greybeards -> greybeard", function() {deepEqual( Stem("greybeards"), "greybeard");});
test("greyhound -> greyhound", function() {deepEqual( Stem("greyhound"), "greyhound");});
test("greyhounds -> greyhound", function() {deepEqual( Stem("greyhounds"), "greyhound");});
test("greys -> grei", function() {deepEqual( Stem("greys"), "grei");});
test("grief -> grief", function() {deepEqual( Stem("grief"), "grief");});
test("griefs -> grief", function() {deepEqual( Stem("griefs"), "grief");});
test("griev -> griev", function() {deepEqual( Stem("griev"), "griev");});
test("grievance -> grievanc", function() {deepEqual( Stem("grievance"), "grievanc");});
test("grievances -> grievanc", function() {deepEqual( Stem("grievances"), "grievanc");});
test("grieve -> griev", function() {deepEqual( Stem("grieve"), "griev");});
test("grieved -> griev", function() {deepEqual( Stem("grieved"), "griev");});
test("grieves -> griev", function() {deepEqual( Stem("grieves"), "griev");});
test("grievest -> grievest", function() {deepEqual( Stem("grievest"), "grievest");});
test("grieving -> griev", function() {deepEqual( Stem("grieving"), "griev");});
test("grievingly -> grievingli", function() {deepEqual( Stem("grievingly"), "grievingli");});
test("grievous -> grievou", function() {deepEqual( Stem("grievous"), "grievou");});
test("grievously -> grievous", function() {deepEqual( Stem("grievously"), "grievous");});
test("griffin -> griffin", function() {deepEqual( Stem("griffin"), "griffin");});
test("griffith -> griffith", function() {deepEqual( Stem("griffith"), "griffith");});
test("grigg -> grigg", function() {deepEqual( Stem("grigg"), "grigg");});
test("grignac -> grignac", function() {deepEqual( Stem("grignac"), "grignac");});
test("grills -> grill", function() {deepEqual( Stem("grills"), "grill");});
test("grillsby -> grillsbi", function() {deepEqual( Stem("grillsby"), "grillsbi");});
test("grim -> grim", function() {deepEqual( Stem("grim"), "grim");});
test("grimace -> grimac", function() {deepEqual( Stem("grimace"), "grimac");});
test("grimaces -> grimac", function() {deepEqual( Stem("grimaces"), "grimac");});
test("grime -> grime", function() {deepEqual( Stem("grime"), "grime");});
test("grimly -> grimli", function() {deepEqual( Stem("grimly"), "grimli");});
test("grin -> grin", function() {deepEqual( Stem("grin"), "grin");});
test("grind -> grind", function() {deepEqual( Stem("grind"), "grind");});
test("grinding -> grind", function() {deepEqual( Stem("grinding"), "grind");});
test("grindstone -> grindston", function() {deepEqual( Stem("grindstone"), "grindston");});
test("grinned -> grin", function() {deepEqual( Stem("grinned"), "grin");});
test("grinning -> grin", function() {deepEqual( Stem("grinning"), "grin");});
test("grins -> grin", function() {deepEqual( Stem("grins"), "grin");});
test("grinstone -> grinston", function() {deepEqual( Stem("grinstone"), "grinston");});
test("grip -> grip", function() {deepEqual( Stem("grip"), "grip");});
test("gripe -> gripe", function() {deepEqual( Stem("gripe"), "gripe");});
test("gripes -> gripe", function() {deepEqual( Stem("gripes"), "gripe");});
test("griping -> gripe", function() {deepEqual( Stem("griping"), "gripe");});
test("gripped -> grip", function() {deepEqual( Stem("gripped"), "grip");});
test("gris -> gri", function() {deepEqual( Stem("gris"), "gri");});
test("grise -> grise", function() {deepEqual( Stem("grise"), "grise");});
test("griselda -> griselda", function() {deepEqual( Stem("griselda"), "griselda");});
test("grisly -> grisli", function() {deepEqual( Stem("grisly"), "grisli");});
test("grissel -> grissel", function() {deepEqual( Stem("grissel"), "grissel");});
test("grits -> grit", function() {deepEqual( Stem("grits"), "grit");});
test("grize -> grize", function() {deepEqual( Stem("grize"), "grize");});
test("grizzel -> grizzel", function() {deepEqual( Stem("grizzel"), "grizzel");});
test("grizzle -> grizzl", function() {deepEqual( Stem("grizzle"), "grizzl");});
test("grizzled -> grizzl", function() {deepEqual( Stem("grizzled"), "grizzl");});
test("groan -> groan", function() {deepEqual( Stem("groan"), "groan");});
test("groaned -> groan", function() {deepEqual( Stem("groaned"), "groan");});
test("groaning -> groan", function() {deepEqual( Stem("groaning"), "groan");});
test("groans -> groan", function() {deepEqual( Stem("groans"), "groan");});
test("groat -> groat", function() {deepEqual( Stem("groat"), "groat");});
test("groats -> groat", function() {deepEqual( Stem("groats"), "groat");});
test("grocer -> grocer", function() {deepEqual( Stem("grocer"), "grocer");});
test("grocers -> grocer", function() {deepEqual( Stem("grocers"), "grocer");});
test("grog -> grog", function() {deepEqual( Stem("grog"), "grog");});
test("groggy -> groggi", function() {deepEqual( Stem("groggy"), "groggi");});
test("grogram -> grogram", function() {deepEqual( Stem("grogram"), "grogram");});
test("grogwitz -> grogwitz", function() {deepEqual( Stem("grogwitz"), "grogwitz");});
test("groin -> groin", function() {deepEqual( Stem("groin"), "groin");});
test("groom -> groom", function() {deepEqual( Stem("groom"), "groom");});
test("grooms -> groom", function() {deepEqual( Stem("grooms"), "groom");});
test("groomsman -> groomsman", function() {deepEqual( Stem("groomsman"), "groomsman");});
test("grop -> grop", function() {deepEqual( Stem("grop"), "grop");});
test("groping -> grope", function() {deepEqual( Stem("groping"), "grope");});
test("gros -> gro", function() {deepEqual( Stem("gros"), "gro");});
test("gross -> gross", function() {deepEqual( Stem("gross"), "gross");});
test("grosser -> grosser", function() {deepEqual( Stem("grosser"), "grosser");});
test("grossly -> grossli", function() {deepEqual( Stem("grossly"), "grossli");});
test("grossness -> gross", function() {deepEqual( Stem("grossness"), "gross");});
test("grosvenor -> grosvenor", function() {deepEqual( Stem("grosvenor"), "grosvenor");});
test("ground -> ground", function() {deepEqual( Stem("ground"), "ground");});
test("grounded -> ground", function() {deepEqual( Stem("grounded"), "ground");});
test("groundless -> groundless", function() {deepEqual( Stem("groundless"), "groundless");});
test("groundlings -> groundl", function() {deepEqual( Stem("groundlings"), "groundl");});
test("grounds -> ground", function() {deepEqual( Stem("grounds"), "ground");});
test("group -> group", function() {deepEqual( Stem("group"), "group");});
test("grove -> grove", function() {deepEqual( Stem("grove"), "grove");});
test("grovel -> grovel", function() {deepEqual( Stem("grovel"), "grovel");});
test("grovelled -> grovel", function() {deepEqual( Stem("grovelled"), "grovel");});
test("grovelling -> grovel", function() {deepEqual( Stem("grovelling"), "grovel");});
test("groves -> grove", function() {deepEqual( Stem("groves"), "grove");});
test("grow -> grow", function() {deepEqual( Stem("grow"), "grow");});
test("groweth -> groweth", function() {deepEqual( Stem("groweth"), "groweth");});
test("growing -> grow", function() {deepEqual( Stem("growing"), "grow");});
test("growl -> growl", function() {deepEqual( Stem("growl"), "growl");});
test("growled -> growl", function() {deepEqual( Stem("growled"), "growl");});
test("growling -> growl", function() {deepEqual( Stem("growling"), "growl");});
test("grown -> grown", function() {deepEqual( Stem("grown"), "grown");});
test("grows -> grow", function() {deepEqual( Stem("grows"), "grow");});
test("growth -> growth", function() {deepEqual( Stem("growth"), "growth");});
test("growths -> growth", function() {deepEqual( Stem("growths"), "growth");});
test("grub -> grub", function() {deepEqual( Stem("grub"), "grub");});
test("grubb -> grubb", function() {deepEqual( Stem("grubb"), "grubb");});
test("grubbing -> grub", function() {deepEqual( Stem("grubbing"), "grub");});
test("grubs -> grub", function() {deepEqual( Stem("grubs"), "grub");});
test("grudge -> grudg", function() {deepEqual( Stem("grudge"), "grudg");});
test("grudged -> grudg", function() {deepEqual( Stem("grudged"), "grudg");});
test("grudges -> grudg", function() {deepEqual( Stem("grudges"), "grudg");});
test("grudging -> grudg", function() {deepEqual( Stem("grudging"), "grudg");});
test("gruel -> gruel", function() {deepEqual( Stem("gruel"), "gruel");});
test("gruffly -> gruffli", function() {deepEqual( Stem("gruffly"), "gruffli");});
test("grumble -> grumbl", function() {deepEqual( Stem("grumble"), "grumbl");});
test("grumbled -> grumbl", function() {deepEqual( Stem("grumbled"), "grumbl");});
test("grumblest -> grumblest", function() {deepEqual( Stem("grumblest"), "grumblest");});
test("grumbling -> grumbl", function() {deepEqual( Stem("grumbling"), "grumbl");});
test("grumblings -> grumbl", function() {deepEqual( Stem("grumblings"), "grumbl");});
test("grumio -> grumio", function() {deepEqual( Stem("grumio"), "grumio");});
test("grund -> grund", function() {deepEqual( Stem("grund"), "grund");});
test("grundy -> grundi", function() {deepEqual( Stem("grundy"), "grundi");});
test("grunt -> grunt", function() {deepEqual( Stem("grunt"), "grunt");});
test("gruyere -> gruyer", function() {deepEqual( Stem("gruyere"), "gruyer");});
test("gualtier -> gualtier", function() {deepEqual( Stem("gualtier"), "gualtier");});
test("guard -> guard", function() {deepEqual( Stem("guard"), "guard");});
test("guardage -> guardag", function() {deepEqual( Stem("guardage"), "guardag");});
test("guardant -> guardant", function() {deepEqual( Stem("guardant"), "guardant");});
test("guarded -> guard", function() {deepEqual( Stem("guarded"), "guard");});
test("guardian -> guardian", function() {deepEqual( Stem("guardian"), "guardian");});
test("guardians -> guardian", function() {deepEqual( Stem("guardians"), "guardian");});
test("guardianship -> guardianship", function() {deepEqual( Stem("guardianship"), "guardianship");});
test("guarding -> guard", function() {deepEqual( Stem("guarding"), "guard");});
test("guards -> guard", function() {deepEqual( Stem("guards"), "guard");});
test("guardsman -> guardsman", function() {deepEqual( Stem("guardsman"), "guardsman");});
test("guardsmen -> guardsmen", function() {deepEqual( Stem("guardsmen"), "guardsmen");});
test("guava -> guava", function() {deepEqual( Stem("guava"), "guava");});
test("gud -> gud", function() {deepEqual( Stem("gud"), "gud");});
test("gudgeon -> gudgeon", function() {deepEqual( Stem("gudgeon"), "gudgeon");});
test("guerdon -> guerdon", function() {deepEqual( Stem("guerdon"), "guerdon");});
test("guerra -> guerra", function() {deepEqual( Stem("guerra"), "guerra");});
test("guess -> guess", function() {deepEqual( Stem("guess"), "guess");});
test("guessed -> guess", function() {deepEqual( Stem("guessed"), "guess");});
test("guesses -> guess", function() {deepEqual( Stem("guesses"), "guess");});
test("guessingly -> guessingli", function() {deepEqual( Stem("guessingly"), "guessingli");});
test("guest -> guest", function() {deepEqual( Stem("guest"), "guest");});
test("guests -> guest", function() {deepEqual( Stem("guests"), "guest");});
test("guffaw -> guffaw", function() {deepEqual( Stem("guffaw"), "guffaw");});
test("guggling -> guggl", function() {deepEqual( Stem("guggling"), "guggl");});
test("guiana -> guiana", function() {deepEqual( Stem("guiana"), "guiana");});
test("guichard -> guichard", function() {deepEqual( Stem("guichard"), "guichard");});
test("guidance -> guidanc", function() {deepEqual( Stem("guidance"), "guidanc");});
test("guide -> guid", function() {deepEqual( Stem("guide"), "guid");});
test("guided -> guid", function() {deepEqual( Stem("guided"), "guid");});
test("guider -> guider", function() {deepEqual( Stem("guider"), "guider");});
test("guiderius -> guideriu", function() {deepEqual( Stem("guiderius"), "guideriu");});
test("guides -> guid", function() {deepEqual( Stem("guides"), "guid");});
test("guiding -> guid", function() {deepEqual( Stem("guiding"), "guid");});
test("guidon -> guidon", function() {deepEqual( Stem("guidon"), "guidon");});
test("guienne -> guienn", function() {deepEqual( Stem("guienne"), "guienn");});
test("guil -> guil", function() {deepEqual( Stem("guil"), "guil");});
test("guilbert -> guilbert", function() {deepEqual( Stem("guilbert"), "guilbert");});
test("guildenstern -> guildenstern", function() {deepEqual( Stem("guildenstern"), "guildenstern");});
test("guilders -> guilder", function() {deepEqual( Stem("guilders"), "guilder");});
test("guildford -> guildford", function() {deepEqual( Stem("guildford"), "guildford");});
test("guildhall -> guildhal", function() {deepEqual( Stem("guildhall"), "guildhal");});
test("guile -> guil", function() {deepEqual( Stem("guile"), "guil");});
test("guiled -> guil", function() {deepEqual( Stem("guiled"), "guil");});
test("guileful -> guil", function() {deepEqual( Stem("guileful"), "guil");});
test("guileless -> guileless", function() {deepEqual( Stem("guileless"), "guileless");});
test("guilfords -> guilford", function() {deepEqual( Stem("guilfords"), "guilford");});
test("guilt -> guilt", function() {deepEqual( Stem("guilt"), "guilt");});
test("guiltian -> guiltian", function() {deepEqual( Stem("guiltian"), "guiltian");});
test("guiltier -> guiltier", function() {deepEqual( Stem("guiltier"), "guiltier");});
test("guiltily -> guiltili", function() {deepEqual( Stem("guiltily"), "guiltili");});
test("guiltiness -> guilti", function() {deepEqual( Stem("guiltiness"), "guilti");});
test("guiltless -> guiltless", function() {deepEqual( Stem("guiltless"), "guiltless");});
test("guilts -> guilt", function() {deepEqual( Stem("guilts"), "guilt");});
test("guilty -> guilti", function() {deepEqual( Stem("guilty"), "guilti");});
test("guinea -> guinea", function() {deepEqual( Stem("guinea"), "guinea");});
test("guineas -> guinea", function() {deepEqual( Stem("guineas"), "guinea");});
test("guinever -> guinev", function() {deepEqual( Stem("guinever"), "guinev");});
test("guise -> guis", function() {deepEqual( Stem("guise"), "guis");});
test("guises -> guis", function() {deepEqual( Stem("guises"), "guis");});
test("gul -> gul", function() {deepEqual( Stem("gul"), "gul");});
test("gules -> gule", function() {deepEqual( Stem("gules"), "gule");});
test("gulf -> gulf", function() {deepEqual( Stem("gulf"), "gulf");});
test("gulfs -> gulf", function() {deepEqual( Stem("gulfs"), "gulf");});
test("gulielmo -> gulielmo", function() {deepEqual( Stem("gulielmo"), "gulielmo");});
test("gull -> gull", function() {deepEqual( Stem("gull"), "gull");});
test("gulls -> gull", function() {deepEqual( Stem("gulls"), "gull");});
test("gulp -> gulp", function() {deepEqual( Stem("gulp"), "gulp");});
test("gulping -> gulp", function() {deepEqual( Stem("gulping"), "gulp");});
test("gum -> gum", function() {deepEqual( Stem("gum"), "gum");});
test("gumm -> gumm", function() {deepEqual( Stem("gumm"), "gumm");});
test("gums -> gum", function() {deepEqual( Stem("gums"), "gum");});
test("gun -> gun", function() {deepEqual( Stem("gun"), "gun");});
test("gunner -> gunner", function() {deepEqual( Stem("gunner"), "gunner");});
test("gunpowder -> gunpowd", function() {deepEqual( Stem("gunpowder"), "gunpowd");});
test("guns -> gun", function() {deepEqual( Stem("guns"), "gun");});
test("gunter -> gunter", function() {deepEqual( Stem("gunter"), "gunter");});
test("gurgled -> gurgl", function() {deepEqual( Stem("gurgled"), "gurgl");});
test("gurgling -> gurgl", function() {deepEqual( Stem("gurgling"), "gurgl");});
test("gurnet -> gurnet", function() {deepEqual( Stem("gurnet"), "gurnet");});
test("gurney -> gurnei", function() {deepEqual( Stem("gurney"), "gurnei");});
test("gush -> gush", function() {deepEqual( Stem("gush"), "gush");});
test("gushing -> gush", function() {deepEqual( Stem("gushing"), "gush");});
test("gust -> gust", function() {deepEqual( Stem("gust"), "gust");});
test("gustavus -> gustavu", function() {deepEqual( Stem("gustavus"), "gustavu");});
test("gusto -> gusto", function() {deepEqual( Stem("gusto"), "gusto");});
test("gusts -> gust", function() {deepEqual( Stem("gusts"), "gust");});
test("gusty -> gusti", function() {deepEqual( Stem("gusty"), "gusti");});
test("guthrie -> guthri", function() {deepEqual( Stem("guthrie"), "guthri");});
test("guts -> gut", function() {deepEqual( Stem("guts"), "gut");});
test("gutter -> gutter", function() {deepEqual( Stem("gutter"), "gutter");});
test("guy -> gui", function() {deepEqual( Stem("guy"), "gui");});
test("guynes -> guyn", function() {deepEqual( Stem("guynes"), "guyn");});
test("guysors -> guysor", function() {deepEqual( Stem("guysors"), "guysor");});
test("gwendoline -> gwendolin", function() {deepEqual( Stem("gwendoline"), "gwendolin");});
test("gypsy -> gypsi", function() {deepEqual( Stem("gypsy"), "gypsi");});
test("gyve -> gyve", function() {deepEqual( Stem("gyve"), "gyve");});
test("gyved -> gyve", function() {deepEqual( Stem("gyved"), "gyve");});
test("gyves -> gyve", function() {deepEqual( Stem("gyves"), "gyve");});
test("h -> h", function() {deepEqual( Stem("h"), "h");});
test("ha -> ha", function() {deepEqual( Stem("ha"), "ha");});
test("haberdasher -> haberdash", function() {deepEqual( Stem("haberdasher"), "haberdash");});
test("habiliment -> habili", function() {deepEqual( Stem("habiliment"), "habili");});
test("habiliments -> habili", function() {deepEqual( Stem("habiliments"), "habili");});
test("habit -> habit", function() {deepEqual( Stem("habit"), "habit");});
test("habitation -> habit", function() {deepEqual( Stem("habitation"), "habit");});
test("habitations -> habit", function() {deepEqual( Stem("habitations"), "habit");});
test("habited -> habit", function() {deepEqual( Stem("habited"), "habit");});
test("habits -> habit", function() {deepEqual( Stem("habits"), "habit");});
test("habitual -> habitu", function() {deepEqual( Stem("habitual"), "habitu");});
test("habitually -> habitu", function() {deepEqual( Stem("habitually"), "habitu");});
test("habitude -> habitud", function() {deepEqual( Stem("habitude"), "habitud");});
test("habitues -> habitu", function() {deepEqual( Stem("habitues"), "habitu");});
test("hack -> hack", function() {deepEqual( Stem("hack"), "hack");});
test("hacked -> hack", function() {deepEqual( Stem("hacked"), "hack");});
test("hacket -> hacket", function() {deepEqual( Stem("hacket"), "hacket");});
test("hackney -> hacknei", function() {deepEqual( Stem("hackney"), "hacknei");});
test("hackneyed -> hacknei", function() {deepEqual( Stem("hackneyed"), "hacknei");});
test("hacks -> hack", function() {deepEqual( Stem("hacks"), "hack");});
test("had -> had", function() {deepEqual( Stem("had"), "had");});
test("hadn -> hadn", function() {deepEqual( Stem("hadn"), "hadn");});
test("hadst -> hadst", function() {deepEqual( Stem("hadst"), "hadst");});
test("haec -> haec", function() {deepEqual( Stem("haec"), "haec");});
test("haeres -> haer", function() {deepEqual( Stem("haeres"), "haer");});
test("hag -> hag", function() {deepEqual( Stem("hag"), "hag");});
test("hagar -> hagar", function() {deepEqual( Stem("hagar"), "hagar");});
test("haggard -> haggard", function() {deepEqual( Stem("haggard"), "haggard");});
test("haggards -> haggard", function() {deepEqual( Stem("haggards"), "haggard");});
test("haggish -> haggish", function() {deepEqual( Stem("haggish"), "haggish");});
test("haggistoun -> haggistoun", function() {deepEqual( Stem("haggistoun"), "haggistoun");});
test("haggle -> haggl", function() {deepEqual( Stem("haggle"), "haggl");});
test("haggled -> haggl", function() {deepEqual( Stem("haggled"), "haggl");});
test("haggles -> haggl", function() {deepEqual( Stem("haggles"), "haggl");});
test("hags -> hag", function() {deepEqual( Stem("hags"), "hag");});
test("hail -> hail", function() {deepEqual( Stem("hail"), "hail");});
test("hailed -> hail", function() {deepEqual( Stem("hailed"), "hail");});
test("hailstone -> hailston", function() {deepEqual( Stem("hailstone"), "hailston");});
test("hailstones -> hailston", function() {deepEqual( Stem("hailstones"), "hailston");});
test("hair -> hair", function() {deepEqual( Stem("hair"), "hair");});
test("hairdresser -> hairdress", function() {deepEqual( Stem("hairdresser"), "hairdress");});
test("haired -> hair", function() {deepEqual( Stem("haired"), "hair");});
test("hairless -> hairless", function() {deepEqual( Stem("hairless"), "hairless");});
test("hairs -> hair", function() {deepEqual( Stem("hairs"), "hair");});
test("hairy -> hairi", function() {deepEqual( Stem("hairy"), "hairi");});
test("hal -> hal", function() {deepEqual( Stem("hal"), "hal");});
test("halberd -> halberd", function() {deepEqual( Stem("halberd"), "halberd");});
test("halberds -> halberd", function() {deepEqual( Stem("halberds"), "halberd");});
test("halcyon -> halcyon", function() {deepEqual( Stem("halcyon"), "halcyon");});
test("hale -> hale", function() {deepEqual( Stem("hale"), "hale");});
test("haled -> hale", function() {deepEqual( Stem("haled"), "hale");});
test("hales -> hale", function() {deepEqual( Stem("hales"), "hale");});
test("half -> half", function() {deepEqual( Stem("half"), "half");});
test("halfcan -> halfcan", function() {deepEqual( Stem("halfcan"), "halfcan");});
test("halfpence -> halfpenc", function() {deepEqual( Stem("halfpence"), "halfpenc");});
test("halfpenny -> halfpenni", function() {deepEqual( Stem("halfpenny"), "halfpenni");});
test("halfpennyworth -> halfpennyworth", function() {deepEqual( Stem("halfpennyworth"), "halfpennyworth");});
test("halfway -> halfwai", function() {deepEqual( Stem("halfway"), "halfwai");});
test("halidom -> halidom", function() {deepEqual( Stem("halidom"), "halidom");});
test("halixander -> halixand", function() {deepEqual( Stem("halixander"), "halixand");});
test("hall -> hall", function() {deepEqual( Stem("hall"), "hall");});
test("halloa -> halloa", function() {deepEqual( Stem("halloa"), "halloa");});
test("halloing -> hallo", function() {deepEqual( Stem("halloing"), "hallo");});
test("hallond -> hallond", function() {deepEqual( Stem("hallond"), "hallond");});
test("halloo -> halloo", function() {deepEqual( Stem("halloo"), "halloo");});
test("hallooing -> halloo", function() {deepEqual( Stem("hallooing"), "halloo");});
test("hallow -> hallow", function() {deepEqual( Stem("hallow"), "hallow");});
test("hallowed -> hallow", function() {deepEqual( Stem("hallowed"), "hallow");});
test("hallowmas -> hallowma", function() {deepEqual( Stem("hallowmas"), "hallowma");});
test("hallown -> hallown", function() {deepEqual( Stem("hallown"), "hallown");});
test("halls -> hall", function() {deepEqual( Stem("halls"), "hall");});
test("halo -> halo", function() {deepEqual( Stem("halo"), "halo");});
test("hals -> hal", function() {deepEqual( Stem("hals"), "hal");});
test("halt -> halt", function() {deepEqual( Stem("halt"), "halt");});
test("halter -> halter", function() {deepEqual( Stem("halter"), "halter");});
test("halters -> halter", function() {deepEqual( Stem("halters"), "halter");});
test("halting -> halt", function() {deepEqual( Stem("halting"), "halt");});
test("halts -> halt", function() {deepEqual( Stem("halts"), "halt");});
test("halves -> halv", function() {deepEqual( Stem("halves"), "halv");});
test("ham -> ham", function() {deepEqual( Stem("ham"), "ham");});
test("hames -> hame", function() {deepEqual( Stem("hames"), "hame");});
test("hamlet -> hamlet", function() {deepEqual( Stem("hamlet"), "hamlet");});
test("hamlets -> hamlet", function() {deepEqual( Stem("hamlets"), "hamlet");});
test("hammer -> hammer", function() {deepEqual( Stem("hammer"), "hammer");});
test("hammerdown -> hammerdown", function() {deepEqual( Stem("hammerdown"), "hammerdown");});
test("hammered -> hammer", function() {deepEqual( Stem("hammered"), "hammer");});
test("hammering -> hammer", function() {deepEqual( Stem("hammering"), "hammer");});
test("hammers -> hammer", function() {deepEqual( Stem("hammers"), "hammer");});
test("hammersmith -> hammersmith", function() {deepEqual( Stem("hammersmith"), "hammersmith");});
test("hammock -> hammock", function() {deepEqual( Stem("hammock"), "hammock");});
test("hamper -> hamper", function() {deepEqual( Stem("hamper"), "hamper");});
test("hampers -> hamper", function() {deepEqual( Stem("hampers"), "hamper");});
test("hampshire -> hampshir", function() {deepEqual( Stem("hampshire"), "hampshir");});
test("hampstead -> hampstead", function() {deepEqual( Stem("hampstead"), "hampstead");});
test("hampton -> hampton", function() {deepEqual( Stem("hampton"), "hampton");});
test("hams -> ham", function() {deepEqual( Stem("hams"), "ham");});
test("hamstring -> hamstr", function() {deepEqual( Stem("hamstring"), "hamstr");});
test("hand -> hand", function() {deepEqual( Stem("hand"), "hand");});
test("handcuffs -> handcuff", function() {deepEqual( Stem("handcuffs"), "handcuff");});
test("handed -> hand", function() {deepEqual( Stem("handed"), "hand");});
test("handel -> handel", function() {deepEqual( Stem("handel"), "handel");});
test("handful -> hand", function() {deepEqual( Stem("handful"), "hand");});
test("handicraft -> handicraft", function() {deepEqual( Stem("handicraft"), "handicraft");});
test("handicraftsmen -> handicraftsmen", function() {deepEqual( Stem("handicraftsmen"), "handicraftsmen");});
test("handing -> hand", function() {deepEqual( Stem("handing"), "hand");});
test("handiwork -> handiwork", function() {deepEqual( Stem("handiwork"), "handiwork");});
test("handkercher -> handkerch", function() {deepEqual( Stem("handkercher"), "handkerch");});
test("handkerchers -> handkerch", function() {deepEqual( Stem("handkerchers"), "handkerch");});
test("handkerchief -> handkerchief", function() {deepEqual( Stem("handkerchief"), "handkerchief");});
test("handkerchiefs -> handkerchief", function() {deepEqual( Stem("handkerchiefs"), "handkerchief");});
test("handle -> handl", function() {deepEqual( Stem("handle"), "handl");});
test("handled -> handl", function() {deepEqual( Stem("handled"), "handl");});
test("handles -> handl", function() {deepEqual( Stem("handles"), "handl");});
test("handless -> handless", function() {deepEqual( Stem("handless"), "handless");});
test("handlest -> handlest", function() {deepEqual( Stem("handlest"), "handlest");});
test("handling -> handl", function() {deepEqual( Stem("handling"), "handl");});
test("handmaid -> handmaid", function() {deepEqual( Stem("handmaid"), "handmaid");});
test("handmaids -> handmaid", function() {deepEqual( Stem("handmaids"), "handmaid");});
test("hands -> hand", function() {deepEqual( Stem("hands"), "hand");});
test("handsaw -> handsaw", function() {deepEqual( Stem("handsaw"), "handsaw");});
test("handscreens -> handscreen", function() {deepEqual( Stem("handscreens"), "handscreen");});
test("handshaking -> handshak", function() {deepEqual( Stem("handshaking"), "handshak");});
test("handsome -> handsom", function() {deepEqual( Stem("handsome"), "handsom");});
test("handsomely -> handsom", function() {deepEqual( Stem("handsomely"), "handsom");});
test("handsomeness -> handsom", function() {deepEqual( Stem("handsomeness"), "handsom");});
test("handsomer -> handsom", function() {deepEqual( Stem("handsomer"), "handsom");});
test("handsomest -> handsomest", function() {deepEqual( Stem("handsomest"), "handsomest");});
test("handwriting -> handwrit", function() {deepEqual( Stem("handwriting"), "handwrit");});
test("handwritings -> handwrit", function() {deepEqual( Stem("handwritings"), "handwrit");});
test("handy -> handi", function() {deepEqual( Stem("handy"), "handi");});
test("hang -> hang", function() {deepEqual( Stem("hang"), "hang");});
test("hanged -> hang", function() {deepEqual( Stem("hanged"), "hang");});
test("hanger -> hanger", function() {deepEqual( Stem("hanger"), "hanger");});
test("hangers -> hanger", function() {deepEqual( Stem("hangers"), "hanger");});
test("hangeth -> hangeth", function() {deepEqual( Stem("hangeth"), "hangeth");});
test("hanging -> hang", function() {deepEqual( Stem("hanging"), "hang");});
test("hangings -> hang", function() {deepEqual( Stem("hangings"), "hang");});
test("hangman -> hangman", function() {deepEqual( Stem("hangman"), "hangman");});
test("hangmen -> hangmen", function() {deepEqual( Stem("hangmen"), "hangmen");});
test("hangs -> hang", function() {deepEqual( Stem("hangs"), "hang");});
test("hankered -> hanker", function() {deepEqual( Stem("hankered"), "hanker");});
test("hankering -> hanker", function() {deepEqual( Stem("hankering"), "hanker");});
test("hannah -> hannah", function() {deepEqual( Stem("hannah"), "hannah");});
test("hannibal -> hannib", function() {deepEqual( Stem("hannibal"), "hannib");});
test("hanover -> hanov", function() {deepEqual( Stem("hanover"), "hanov");});
test("hanoverian -> hanoverian", function() {deepEqual( Stem("hanoverian"), "hanoverian");});
test("hans -> han", function() {deepEqual( Stem("hans"), "han");});
test("hants -> hant", function() {deepEqual( Stem("hants"), "hant");});
test("hap -> hap", function() {deepEqual( Stem("hap"), "hap");});
test("hapless -> hapless", function() {deepEqual( Stem("hapless"), "hapless");});
test("haply -> hapli", function() {deepEqual( Stem("haply"), "hapli");});
test("happ -> happ", function() {deepEqual( Stem("happ"), "happ");});
test("happen -> happen", function() {deepEqual( Stem("happen"), "happen");});
test("happened -> happen", function() {deepEqual( Stem("happened"), "happen");});
test("happening -> happen", function() {deepEqual( Stem("happening"), "happen");});
test("happens -> happen", function() {deepEqual( Stem("happens"), "happen");});
test("happier -> happier", function() {deepEqual( Stem("happier"), "happier");});
test("happies -> happi", function() {deepEqual( Stem("happies"), "happi");});
test("happiest -> happiest", function() {deepEqual( Stem("happiest"), "happiest");});
test("happily -> happili", function() {deepEqual( Stem("happily"), "happili");});
test("happiness -> happi", function() {deepEqual( Stem("happiness"), "happi");});
test("happy -> happi", function() {deepEqual( Stem("happy"), "happi");});
test("haps -> hap", function() {deepEqual( Stem("haps"), "hap");});
test("har -> har", function() {deepEqual( Stem("har"), "har");});
test("harangues -> harangu", function() {deepEqual( Stem("harangues"), "harangu");});
test("haranguing -> harangu", function() {deepEqual( Stem("haranguing"), "harangu");});
test("harassed -> harass", function() {deepEqual( Stem("harassed"), "harass");});
test("harassing -> harass", function() {deepEqual( Stem("harassing"), "harass");});
test("harassment -> harass", function() {deepEqual( Stem("harassment"), "harass");});
test("harbinger -> harbing", function() {deepEqual( Stem("harbinger"), "harbing");});
test("harbingers -> harbing", function() {deepEqual( Stem("harbingers"), "harbing");});
test("harbor -> harbor", function() {deepEqual( Stem("harbor"), "harbor");});
test("harbour -> harbour", function() {deepEqual( Stem("harbour"), "harbour");});
test("harbourage -> harbourag", function() {deepEqual( Stem("harbourage"), "harbourag");});
test("harbouring -> harbour", function() {deepEqual( Stem("harbouring"), "harbour");});
test("harbours -> harbour", function() {deepEqual( Stem("harbours"), "harbour");});
test("harcourt -> harcourt", function() {deepEqual( Stem("harcourt"), "harcourt");});
test("hard -> hard", function() {deepEqual( Stem("hard"), "hard");});
test("hardbake -> hardbak", function() {deepEqual( Stem("hardbake"), "hardbak");});
test("hardcastle -> hardcastl", function() {deepEqual( Stem("hardcastle"), "hardcastl");});
test("hardenberg -> hardenberg", function() {deepEqual( Stem("hardenberg"), "hardenberg");});
test("hardened -> harden", function() {deepEqual( Stem("hardened"), "harden");});
test("harder -> harder", function() {deepEqual( Stem("harder"), "harder");});
test("hardest -> hardest", function() {deepEqual( Stem("hardest"), "hardest");});
test("hardiest -> hardiest", function() {deepEqual( Stem("hardiest"), "hardiest");});
test("hardiment -> hardiment", function() {deepEqual( Stem("hardiment"), "hardiment");});
test("hardiness -> hardi", function() {deepEqual( Stem("hardiness"), "hardi");});
test("hardly -> hardli", function() {deepEqual( Stem("hardly"), "hardli");});
test("hardness -> hard", function() {deepEqual( Stem("hardness"), "hard");});
test("hardocks -> hardock", function() {deepEqual( Stem("hardocks"), "hardock");});
test("hardy -> hardi", function() {deepEqual( Stem("hardy"), "hardi");});
test("hardyman -> hardyman", function() {deepEqual( Stem("hardyman"), "hardyman");});
test("hare -> hare", function() {deepEqual( Stem("hare"), "hare");});
test("hareem -> hareem", function() {deepEqual( Stem("hareem"), "hareem");});
test("harelip -> harelip", function() {deepEqual( Stem("harelip"), "harelip");});
test("hares -> hare", function() {deepEqual( Stem("hares"), "hare");});
test("harfleur -> harfleur", function() {deepEqual( Stem("harfleur"), "harfleur");});
test("hark -> hark", function() {deepEqual( Stem("hark"), "hark");});
test("harlequin -> harlequin", function() {deepEqual( Stem("harlequin"), "harlequin");});
test("harlot -> harlot", function() {deepEqual( Stem("harlot"), "harlot");});
test("harlotry -> harlotri", function() {deepEqual( Stem("harlotry"), "harlotri");});
test("harlots -> harlot", function() {deepEqual( Stem("harlots"), "harlot");});
test("harm -> harm", function() {deepEqual( Stem("harm"), "harm");});
test("harmed -> harm", function() {deepEqual( Stem("harmed"), "harm");});
test("harmful -> harm", function() {deepEqual( Stem("harmful"), "harm");});
test("harming -> harm", function() {deepEqual( Stem("harming"), "harm");});
test("harmless -> harmless", function() {deepEqual( Stem("harmless"), "harmless");});
test("harmonies -> harmoni", function() {deepEqual( Stem("harmonies"), "harmoni");});
test("harmonious -> harmoni", function() {deepEqual( Stem("harmonious"), "harmoni");});
test("harmonized -> harmon", function() {deepEqual( Stem("harmonized"), "harmon");});
test("harmony -> harmoni", function() {deepEqual( Stem("harmony"), "harmoni");});
test("harms -> harm", function() {deepEqual( Stem("harms"), "harm");});
test("harness -> har", function() {deepEqual( Stem("harness"), "har");});
test("harp -> harp", function() {deepEqual( Stem("harp"), "harp");});
test("harper -> harper", function() {deepEqual( Stem("harper"), "harper");});
test("harpier -> harpier", function() {deepEqual( Stem("harpier"), "harpier");});
test("harpies -> harpi", function() {deepEqual( Stem("harpies"), "harpi");});
test("harping -> harp", function() {deepEqual( Stem("harping"), "harp");});
test("harps -> harp", function() {deepEqual( Stem("harps"), "harp");});
test("harpy -> harpi", function() {deepEqual( Stem("harpy"), "harpi");});
test("harridan -> harridan", function() {deepEqual( Stem("harridan"), "harridan");});
test("harridans -> harridan", function() {deepEqual( Stem("harridans"), "harridan");});
test("harried -> harri", function() {deepEqual( Stem("harried"), "harri");});
test("harrow -> harrow", function() {deepEqual( Stem("harrow"), "harrow");});
test("harrowgate -> harrowg", function() {deepEqual( Stem("harrowgate"), "harrowg");});
test("harrowing -> harrow", function() {deepEqual( Stem("harrowing"), "harrow");});
test("harrows -> harrow", function() {deepEqual( Stem("harrows"), "harrow");});
test("harry -> harri", function() {deepEqual( Stem("harry"), "harri");});
test("harsh -> harsh", function() {deepEqual( Stem("harsh"), "harsh");});
test("harshly -> harshli", function() {deepEqual( Stem("harshly"), "harshli");});
test("harshness -> harsh", function() {deepEqual( Stem("harshness"), "harsh");});
test("hart -> hart", function() {deepEqual( Stem("hart"), "hart");});
test("harts -> hart", function() {deepEqual( Stem("harts"), "hart");});
test("harum -> harum", function() {deepEqual( Stem("harum"), "harum");});
test("harvest -> harvest", function() {deepEqual( Stem("harvest"), "harvest");});
test("harvey -> harvei", function() {deepEqual( Stem("harvey"), "harvei");});
test("harwich -> harwich", function() {deepEqual( Stem("harwich"), "harwich");});
test("has -> ha", function() {deepEqual( Stem("has"), "ha");});
test("hasn -> hasn", function() {deepEqual( Stem("hasn"), "hasn");});
test("hassan -> hassan", function() {deepEqual( Stem("hassan"), "hassan");});
test("hast -> hast", function() {deepEqual( Stem("hast"), "hast");});
test("haste -> hast", function() {deepEqual( Stem("haste"), "hast");});
test("hasted -> hast", function() {deepEqual( Stem("hasted"), "hast");});
test("hasten -> hasten", function() {deepEqual( Stem("hasten"), "hasten");});
test("hastened -> hasten", function() {deepEqual( Stem("hastened"), "hasten");});
test("hastes -> hast", function() {deepEqual( Stem("hastes"), "hast");});
test("hastily -> hastili", function() {deepEqual( Stem("hastily"), "hastili");});
test("hasting -> hast", function() {deepEqual( Stem("hasting"), "hast");});
test("hastings -> hast", function() {deepEqual( Stem("hastings"), "hast");});
test("hasty -> hasti", function() {deepEqual( Stem("hasty"), "hasti");});
test("hat -> hat", function() {deepEqual( Stem("hat"), "hat");});
test("hatband -> hatband", function() {deepEqual( Stem("hatband"), "hatband");});
test("hatbands -> hatband", function() {deepEqual( Stem("hatbands"), "hatband");});
test("hatch -> hatch", function() {deepEqual( Stem("hatch"), "hatch");});
test("hatches -> hatch", function() {deepEqual( Stem("hatches"), "hatch");});
test("hatchet -> hatchet", function() {deepEqual( Stem("hatchet"), "hatchet");});
test("hatching -> hatch", function() {deepEqual( Stem("hatching"), "hatch");});
test("hatchment -> hatchment", function() {deepEqual( Stem("hatchment"), "hatchment");});
test("hatchments -> hatchment", function() {deepEqual( Stem("hatchments"), "hatchment");});
test("hate -> hate", function() {deepEqual( Stem("hate"), "hate");});
test("hated -> hate", function() {deepEqual( Stem("hated"), "hate");});
test("hateful -> hate", function() {deepEqual( Stem("hateful"), "hate");});
test("hater -> hater", function() {deepEqual( Stem("hater"), "hater");});
test("haters -> hater", function() {deepEqual( Stem("haters"), "hater");});
test("hates -> hate", function() {deepEqual( Stem("hates"), "hate");});
test("hateth -> hateth", function() {deepEqual( Stem("hateth"), "hateth");});
test("hatfield -> hatfield", function() {deepEqual( Stem("hatfield"), "hatfield");});
test("hath -> hath", function() {deepEqual( Stem("hath"), "hath");});
test("hating -> hate", function() {deepEqual( Stem("hating"), "hate");});
test("hatless -> hatless", function() {deepEqual( Stem("hatless"), "hatless");});
test("hatred -> hatr", function() {deepEqual( Stem("hatred"), "hatr");});
test("hats -> hat", function() {deepEqual( Stem("hats"), "hat");});
test("hatted -> hat", function() {deepEqual( Stem("hatted"), "hat");});
test("hatter -> hatter", function() {deepEqual( Stem("hatter"), "hatter");});
test("hatters -> hatter", function() {deepEqual( Stem("hatters"), "hatter");});
test("haud -> haud", function() {deepEqual( Stem("haud"), "haud");});
test("hauf -> hauf", function() {deepEqual( Stem("hauf"), "hauf");});
test("haught -> haught", function() {deepEqual( Stem("haught"), "haught");});
test("haughtiest -> haughtiest", function() {deepEqual( Stem("haughtiest"), "haughtiest");});
test("haughtily -> haughtili", function() {deepEqual( Stem("haughtily"), "haughtili");});
test("haughtiness -> haughti", function() {deepEqual( Stem("haughtiness"), "haughti");});
test("haughty -> haughti", function() {deepEqual( Stem("haughty"), "haughti");});
test("haunch -> haunch", function() {deepEqual( Stem("haunch"), "haunch");});
test("haunches -> haunch", function() {deepEqual( Stem("haunches"), "haunch");});
test("haunt -> haunt", function() {deepEqual( Stem("haunt"), "haunt");});
test("haunted -> haunt", function() {deepEqual( Stem("haunted"), "haunt");});
test("haunting -> haunt", function() {deepEqual( Stem("haunting"), "haunt");});
test("haunts -> haunt", function() {deepEqual( Stem("haunts"), "haunt");});
test("hautboy -> hautboi", function() {deepEqual( Stem("hautboy"), "hautboi");});
test("hautboys -> hautboi", function() {deepEqual( Stem("hautboys"), "hautboi");});
test("have -> have", function() {deepEqual( Stem("have"), "have");});
test("haven -> haven", function() {deepEqual( Stem("haven"), "haven");});
test("havens -> haven", function() {deepEqual( Stem("havens"), "haven");});
test("haver -> haver", function() {deepEqual( Stem("haver"), "haver");});
test("having -> have", function() {deepEqual( Stem("having"), "have");});
test("havings -> have", function() {deepEqual( Stem("havings"), "have");});
test("havior -> havior", function() {deepEqual( Stem("havior"), "havior");});
test("haviour -> haviour", function() {deepEqual( Stem("haviour"), "haviour");});
test("havoc -> havoc", function() {deepEqual( Stem("havoc"), "havoc");});
test("haw -> haw", function() {deepEqual( Stem("haw"), "haw");});
test("hawk -> hawk", function() {deepEqual( Stem("hawk"), "hawk");});
test("hawking -> hawk", function() {deepEqual( Stem("hawking"), "hawk");});
test("hawks -> hawk", function() {deepEqual( Stem("hawks"), "hawk");});
test("hawky -> hawki", function() {deepEqual( Stem("hawky"), "hawki");});
test("haws -> haw", function() {deepEqual( Stem("haws"), "haw");});
test("hawthorn -> hawthorn", function() {deepEqual( Stem("hawthorn"), "hawthorn");});
test("hawthorns -> hawthorn", function() {deepEqual( Stem("hawthorns"), "hawthorn");});
test("hay -> hai", function() {deepEqual( Stem("hay"), "hai");});
test("haydn -> haydn", function() {deepEqual( Stem("haydn"), "haydn");});
test("haye -> hay", function() {deepEqual( Stem("haye"), "hay");});
test("hayes -> hay", function() {deepEqual( Stem("hayes"), "hay");});
test("haymarket -> haymarket", function() {deepEqual( Stem("haymarket"), "haymarket");});
test("haystack -> haystack", function() {deepEqual( Stem("haystack"), "haystack");});
test("haystacks -> haystack", function() {deepEqual( Stem("haystacks"), "haystack");});
test("hazard -> hazard", function() {deepEqual( Stem("hazard"), "hazard");});
test("hazarded -> hazard", function() {deepEqual( Stem("hazarded"), "hazard");});
test("hazards -> hazard", function() {deepEqual( Stem("hazards"), "hazard");});
test("haze -> haze", function() {deepEqual( Stem("haze"), "haze");});
test("hazel -> hazel", function() {deepEqual( Stem("hazel"), "hazel");});
test("hazelnut -> hazelnut", function() {deepEqual( Stem("hazelnut"), "hazelnut");});
test("hazy -> hazi", function() {deepEqual( Stem("hazy"), "hazi");});
test("he -> he", function() {deepEqual( Stem("he"), "he");});
test("head -> head", function() {deepEqual( Stem("head"), "head");});
test("headache -> headach", function() {deepEqual( Stem("headache"), "headach");});
test("headaches -> headach", function() {deepEqual( Stem("headaches"), "headach");});
test("headborough -> headborough", function() {deepEqual( Stem("headborough"), "headborough");});
test("headed -> head", function() {deepEqual( Stem("headed"), "head");});
test("headier -> headier", function() {deepEqual( Stem("headier"), "headier");});
test("heading -> head", function() {deepEqual( Stem("heading"), "head");});
test("headland -> headland", function() {deepEqual( Stem("headland"), "headland");});
test("headless -> headless", function() {deepEqual( Stem("headless"), "headless");});
test("headlong -> headlong", function() {deepEqual( Stem("headlong"), "headlong");});
test("headquarters -> headquart", function() {deepEqual( Stem("headquarters"), "headquart");});
test("heads -> head", function() {deepEqual( Stem("heads"), "head");});
test("headsman -> headsman", function() {deepEqual( Stem("headsman"), "headsman");});
test("headstrong -> headstrong", function() {deepEqual( Stem("headstrong"), "headstrong");});
test("heady -> headi", function() {deepEqual( Stem("heady"), "headi");});
test("heal -> heal", function() {deepEqual( Stem("heal"), "heal");});
test("healed -> heal", function() {deepEqual( Stem("healed"), "heal");});
test("healing -> heal", function() {deepEqual( Stem("healing"), "heal");});
test("heals -> heal", function() {deepEqual( Stem("heals"), "heal");});
test("health -> health", function() {deepEqual( Stem("health"), "health");});
test("healthful -> health", function() {deepEqual( Stem("healthful"), "health");});
test("healths -> health", function() {deepEqual( Stem("healths"), "health");});
test("healthsome -> healthsom", function() {deepEqual( Stem("healthsome"), "healthsom");});
test("healthy -> healthi", function() {deepEqual( Stem("healthy"), "healthi");});
test("heap -> heap", function() {deepEqual( Stem("heap"), "heap");});
test("heaped -> heap", function() {deepEqual( Stem("heaped"), "heap");});
test("heaping -> heap", function() {deepEqual( Stem("heaping"), "heap");});
test("heaps -> heap", function() {deepEqual( Stem("heaps"), "heap");});
test("hear -> hear", function() {deepEqual( Stem("hear"), "hear");});
test("heard -> heard", function() {deepEqual( Stem("heard"), "heard");});
test("hearer -> hearer", function() {deepEqual( Stem("hearer"), "hearer");});
test("hearers -> hearer", function() {deepEqual( Stem("hearers"), "hearer");});
test("hearest -> hearest", function() {deepEqual( Stem("hearest"), "hearest");});
test("heareth -> heareth", function() {deepEqual( Stem("heareth"), "heareth");});
test("hearing -> hear", function() {deepEqual( Stem("hearing"), "hear");});
test("hearings -> hear", function() {deepEqual( Stem("hearings"), "hear");});
test("heark -> heark", function() {deepEqual( Stem("heark"), "heark");});
test("hearken -> hearken", function() {deepEqual( Stem("hearken"), "hearken");});
test("hearkens -> hearken", function() {deepEqual( Stem("hearkens"), "hearken");});
test("hears -> hear", function() {deepEqual( Stem("hears"), "hear");});
test("hearsay -> hearsai", function() {deepEqual( Stem("hearsay"), "hearsai");});
test("hearse -> hears", function() {deepEqual( Stem("hearse"), "hears");});
test("hearsed -> hears", function() {deepEqual( Stem("hearsed"), "hears");});
test("hearst -> hearst", function() {deepEqual( Stem("hearst"), "hearst");});
test("heart -> heart", function() {deepEqual( Stem("heart"), "heart");});
test("heartache -> heartach", function() {deepEqual( Stem("heartache"), "heartach");});
test("heartbreak -> heartbreak", function() {deepEqual( Stem("heartbreak"), "heartbreak");});
test("heartbreaking -> heartbreak", function() {deepEqual( Stem("heartbreaking"), "heartbreak");});
test("heartburn -> heartburn", function() {deepEqual( Stem("heartburn"), "heartburn");});
test("hearted -> heart", function() {deepEqual( Stem("hearted"), "heart");});
test("heartedness -> hearted", function() {deepEqual( Stem("heartedness"), "hearted");});
test("hearten -> hearten", function() {deepEqual( Stem("hearten"), "hearten");});
test("hearth -> hearth", function() {deepEqual( Stem("hearth"), "hearth");});
test("hearths -> hearth", function() {deepEqual( Stem("hearths"), "hearth");});
test("heartily -> heartili", function() {deepEqual( Stem("heartily"), "heartili");});
test("heartiness -> hearti", function() {deepEqual( Stem("heartiness"), "hearti");});
test("heartless -> heartless", function() {deepEqual( Stem("heartless"), "heartless");});
test("heartlings -> heartl", function() {deepEqual( Stem("heartlings"), "heartl");});
test("heartly -> heartli", function() {deepEqual( Stem("heartly"), "heartli");});
test("hearts -> heart", function() {deepEqual( Stem("hearts"), "heart");});
test("heartsick -> heartsick", function() {deepEqual( Stem("heartsick"), "heartsick");});
test("heartstrings -> heartstr", function() {deepEqual( Stem("heartstrings"), "heartstr");});
test("hearty -> hearti", function() {deepEqual( Stem("hearty"), "hearti");});
test("heat -> heat", function() {deepEqual( Stem("heat"), "heat");});
test("heated -> heat", function() {deepEqual( Stem("heated"), "heat");});
test("heath -> heath", function() {deepEqual( Stem("heath"), "heath");});
test("heathen -> heathen", function() {deepEqual( Stem("heathen"), "heathen");});
test("heathenish -> heathenish", function() {deepEqual( Stem("heathenish"), "heathenish");});
test("heating -> heat", function() {deepEqual( Stem("heating"), "heat");});
test("heats -> heat", function() {deepEqual( Stem("heats"), "heat");});
test("heauties -> heauti", function() {deepEqual( Stem("heauties"), "heauti");});
test("heav -> heav", function() {deepEqual( Stem("heav"), "heav");});
test("heave -> heav", function() {deepEqual( Stem("heave"), "heav");});
test("heaved -> heav", function() {deepEqual( Stem("heaved"), "heav");});
test("heaven -> heaven", function() {deepEqual( Stem("heaven"), "heaven");});
test("heavenly -> heavenli", function() {deepEqual( Stem("heavenly"), "heavenli");});
test("heavens -> heaven", function() {deepEqual( Stem("heavens"), "heaven");});
test("heaves -> heav", function() {deepEqual( Stem("heaves"), "heav");});
test("heavier -> heavier", function() {deepEqual( Stem("heavier"), "heavier");});
test("heavies -> heavi", function() {deepEqual( Stem("heavies"), "heavi");});
test("heaviest -> heaviest", function() {deepEqual( Stem("heaviest"), "heaviest");});
test("heavily -> heavili", function() {deepEqual( Stem("heavily"), "heavili");});
test("heaviness -> heavi", function() {deepEqual( Stem("heaviness"), "heavi");});
test("heaving -> heav", function() {deepEqual( Stem("heaving"), "heav");});
test("heavings -> heav", function() {deepEqual( Stem("heavings"), "heav");});
test("heavy -> heavi", function() {deepEqual( Stem("heavy"), "heavi");});
test("heavytop -> heavytop", function() {deepEqual( Stem("heavytop"), "heavytop");});
test("hebona -> hebona", function() {deepEqual( Stem("hebona"), "hebona");});
test("hebrew -> hebrew", function() {deepEqual( Stem("hebrew"), "hebrew");});
test("hecate -> hecat", function() {deepEqual( Stem("hecate"), "hecat");});
test("hectic -> hectic", function() {deepEqual( Stem("hectic"), "hectic");});
test("hector -> hector", function() {deepEqual( Stem("hector"), "hector");});
test("hectoring -> hector", function() {deepEqual( Stem("hectoring"), "hector");});
test("hectors -> hector", function() {deepEqual( Stem("hectors"), "hector");});
test("hecuba -> hecuba", function() {deepEqual( Stem("hecuba"), "hecuba");});
test("hedg -> hedg", function() {deepEqual( Stem("hedg"), "hedg");});
test("hedge -> hedg", function() {deepEqual( Stem("hedge"), "hedg");});
test("hedgehog -> hedgehog", function() {deepEqual( Stem("hedgehog"), "hedgehog");});
test("hedgehogs -> hedgehog", function() {deepEqual( Stem("hedgehogs"), "hedgehog");});
test("hedges -> hedg", function() {deepEqual( Stem("hedges"), "hedg");});
test("heed -> heed", function() {deepEqual( Stem("heed"), "heed");});
test("heeded -> heed", function() {deepEqual( Stem("heeded"), "heed");});
test("heedful -> heed", function() {deepEqual( Stem("heedful"), "heed");});
test("heedfull -> heedful", function() {deepEqual( Stem("heedfull"), "heedful");});
test("heedfully -> heedfulli", function() {deepEqual( Stem("heedfully"), "heedfulli");});
test("heeding -> heed", function() {deepEqual( Stem("heeding"), "heed");});
test("heedless -> heedless", function() {deepEqual( Stem("heedless"), "heedless");});
test("heehaw -> heehaw", function() {deepEqual( Stem("heehaw"), "heehaw");});
test("heel -> heel", function() {deepEqual( Stem("heel"), "heel");});
test("heeled -> heel", function() {deepEqual( Stem("heeled"), "heel");});
test("heels -> heel", function() {deepEqual( Stem("heels"), "heel");});
test("heeltap -> heeltap", function() {deepEqual( Stem("heeltap"), "heeltap");});
test("hefted -> heft", function() {deepEqual( Stem("hefted"), "heft");});
test("hefts -> heft", function() {deepEqual( Stem("hefts"), "heft");});
test("heggs -> hegg", function() {deepEqual( Stem("heggs"), "hegg");});
test("heifer -> heifer", function() {deepEqual( Stem("heifer"), "heifer");});
test("heifers -> heifer", function() {deepEqual( Stem("heifers"), "heifer");});
test("heigh -> heigh", function() {deepEqual( Stem("heigh"), "heigh");});
test("heigho -> heigho", function() {deepEqual( Stem("heigho"), "heigho");});
test("height -> height", function() {deepEqual( Stem("height"), "height");});
test("heighten -> heighten", function() {deepEqual( Stem("heighten"), "heighten");});
test("heightened -> heighten", function() {deepEqual( Stem("heightened"), "heighten");});
test("heights -> height", function() {deepEqual( Stem("heights"), "height");});
test("heinous -> heinou", function() {deepEqual( Stem("heinous"), "heinou");});
test("heinously -> heinous", function() {deepEqual( Stem("heinously"), "heinous");});
test("heir -> heir", function() {deepEqual( Stem("heir"), "heir");});
test("heiress -> heiress", function() {deepEqual( Stem("heiress"), "heiress");});
test("heirless -> heirless", function() {deepEqual( Stem("heirless"), "heirless");});
test("heirs -> heir", function() {deepEqual( Stem("heirs"), "heir");});
test("held -> held", function() {deepEqual( Stem("held"), "held");});
test("helder -> helder", function() {deepEqual( Stem("helder"), "helder");});
test("helen -> helen", function() {deepEqual( Stem("helen"), "helen");});
test("helena -> helena", function() {deepEqual( Stem("helena"), "helena");});
test("helenus -> helenu", function() {deepEqual( Stem("helenus"), "helenu");});
test("helias -> helia", function() {deepEqual( Stem("helias"), "helia");});
test("helicons -> helicon", function() {deepEqual( Stem("helicons"), "helicon");});
test("hell -> hell", function() {deepEqual( Stem("hell"), "hell");});
test("hellborough -> hellborough", function() {deepEqual( Stem("hellborough"), "hellborough");});
test("hellespont -> hellespont", function() {deepEqual( Stem("hellespont"), "hellespont");});
test("hellfire -> hellfir", function() {deepEqual( Stem("hellfire"), "hellfir");});
test("hellish -> hellish", function() {deepEqual( Stem("hellish"), "hellish");});
test("helm -> helm", function() {deepEqual( Stem("helm"), "helm");});
test("helmed -> helm", function() {deepEqual( Stem("helmed"), "helm");});
test("helmet -> helmet", function() {deepEqual( Stem("helmet"), "helmet");});
test("helmets -> helmet", function() {deepEqual( Stem("helmets"), "helmet");});
test("helms -> helm", function() {deepEqual( Stem("helms"), "helm");});
test("help -> help", function() {deepEqual( Stem("help"), "help");});
test("helped -> help", function() {deepEqual( Stem("helped"), "help");});
test("helper -> helper", function() {deepEqual( Stem("helper"), "helper");});
test("helpers -> helper", function() {deepEqual( Stem("helpers"), "helper");});
test("helpful -> help", function() {deepEqual( Stem("helpful"), "help");});
test("helping -> help", function() {deepEqual( Stem("helping"), "help");});
test("helpless -> helpless", function() {deepEqual( Stem("helpless"), "helpless");});
test("helplessly -> helplessli", function() {deepEqual( Stem("helplessly"), "helplessli");});
test("helps -> help", function() {deepEqual( Stem("helps"), "help");});
test("helter -> helter", function() {deepEqual( Stem("helter"), "helter");});
test("helvellyn -> helvellyn", function() {deepEqual( Stem("helvellyn"), "helvellyn");});
test("hem -> hem", function() {deepEqual( Stem("hem"), "hem");});
test("heme -> heme", function() {deepEqual( Stem("heme"), "heme");});
test("hemlock -> hemlock", function() {deepEqual( Stem("hemlock"), "hemlock");});
test("hemm -> hemm", function() {deepEqual( Stem("hemm"), "hemm");});
test("hemmed -> hem", function() {deepEqual( Stem("hemmed"), "hem");});
test("hemming -> hem", function() {deepEqual( Stem("hemming"), "hem");});
test("hemp -> hemp", function() {deepEqual( Stem("hemp"), "hemp");});
test("hempen -> hempen", function() {deepEqual( Stem("hempen"), "hempen");});
test("hems -> hem", function() {deepEqual( Stem("hems"), "hem");});
test("hen -> hen", function() {deepEqual( Stem("hen"), "hen");});
test("hence -> henc", function() {deepEqual( Stem("hence"), "henc");});
test("henceforth -> henceforth", function() {deepEqual( Stem("henceforth"), "henceforth");});
test("henceforward -> henceforward", function() {deepEqual( Stem("henceforward"), "henceforward");});
test("henchman -> henchman", function() {deepEqual( Stem("henchman"), "henchman");});
test("henri -> henri", function() {deepEqual( Stem("henri"), "henri");});
test("henricus -> henricu", function() {deepEqual( Stem("henricus"), "henricu");});
test("henry -> henri", function() {deepEqual( Stem("henry"), "henri");});
test("hens -> hen", function() {deepEqual( Stem("hens"), "hen");});
test("hent -> hent", function() {deepEqual( Stem("hent"), "hent");});
test("henton -> henton", function() {deepEqual( Stem("henton"), "henton");});
test("her -> her", function() {deepEqual( Stem("her"), "her");});
test("herald -> herald", function() {deepEqual( Stem("herald"), "herald");});
test("heraldic -> herald", function() {deepEqual( Stem("heraldic"), "herald");});
test("heraldry -> heraldri", function() {deepEqual( Stem("heraldry"), "heraldri");});
test("heralds -> herald", function() {deepEqual( Stem("heralds"), "herald");});
test("herb -> herb", function() {deepEqual( Stem("herb"), "herb");});
test("herbert -> herbert", function() {deepEqual( Stem("herbert"), "herbert");});
test("herblets -> herblet", function() {deepEqual( Stem("herblets"), "herblet");});
test("herbs -> herb", function() {deepEqual( Stem("herbs"), "herb");});
test("herculean -> herculean", function() {deepEqual( Stem("herculean"), "herculean");});
test("hercules -> hercul", function() {deepEqual( Stem("hercules"), "hercul");});
test("herd -> herd", function() {deepEqual( Stem("herd"), "herd");});
test("herding -> herd", function() {deepEqual( Stem("herding"), "herd");});
test("herds -> herd", function() {deepEqual( Stem("herds"), "herd");});
test("herdsman -> herdsman", function() {deepEqual( Stem("herdsman"), "herdsman");});
test("herdsmen -> herdsmen", function() {deepEqual( Stem("herdsmen"), "herdsmen");});
test("here -> here", function() {deepEqual( Stem("here"), "here");});
test("hereabout -> hereabout", function() {deepEqual( Stem("hereabout"), "hereabout");});
test("hereabouts -> hereabout", function() {deepEqual( Stem("hereabouts"), "hereabout");});
test("hereafter -> hereaft", function() {deepEqual( Stem("hereafter"), "hereaft");});
test("hereby -> herebi", function() {deepEqual( Stem("hereby"), "herebi");});
test("hereditary -> hereditari", function() {deepEqual( Stem("hereditary"), "hereditari");});
test("hereford -> hereford", function() {deepEqual( Stem("hereford"), "hereford");});
test("herefordshire -> herefordshir", function() {deepEqual( Stem("herefordshire"), "herefordshir");});
test("herein -> herein", function() {deepEqual( Stem("herein"), "herein");});
test("hereof -> hereof", function() {deepEqual( Stem("hereof"), "hereof");});
test("heresies -> heresi", function() {deepEqual( Stem("heresies"), "heresi");});
test("heresy -> heresi", function() {deepEqual( Stem("heresy"), "heresi");});
test("heretic -> heret", function() {deepEqual( Stem("heretic"), "heret");});
test("heretics -> heret", function() {deepEqual( Stem("heretics"), "heret");});
test("hereto -> hereto", function() {deepEqual( Stem("hereto"), "hereto");});
test("heretofore -> heretofor", function() {deepEqual( Stem("heretofore"), "heretofor");});
test("hereupon -> hereupon", function() {deepEqual( Stem("hereupon"), "hereupon");});
test("herewith -> herewith", function() {deepEqual( Stem("herewith"), "herewith");});
test("heritage -> heritag", function() {deepEqual( Stem("heritage"), "heritag");});
test("heritier -> heriti", function() {deepEqual( Stem("heritier"), "heriti");});
test("hermes -> herm", function() {deepEqual( Stem("hermes"), "herm");});
test("hermia -> hermia", function() {deepEqual( Stem("hermia"), "hermia");});
test("hermione -> hermion", function() {deepEqual( Stem("hermione"), "hermion");});
test("hermit -> hermit", function() {deepEqual( Stem("hermit"), "hermit");});
test("hermitage -> hermitag", function() {deepEqual( Stem("hermitage"), "hermitag");});
test("hermits -> hermit", function() {deepEqual( Stem("hermits"), "hermit");});
test("herne -> hern", function() {deepEqual( Stem("herne"), "hern");});
test("hero -> hero", function() {deepEqual( Stem("hero"), "hero");});
test("herod -> herod", function() {deepEqual( Stem("herod"), "herod");});
test("herods -> herod", function() {deepEqual( Stem("herods"), "herod");});
test("heroes -> hero", function() {deepEqual( Stem("heroes"), "hero");});
test("heroic -> heroic", function() {deepEqual( Stem("heroic"), "heroic");});
test("heroical -> heroic", function() {deepEqual( Stem("heroical"), "heroic");});
test("heroine -> heroin", function() {deepEqual( Stem("heroine"), "heroin");});
test("heroines -> heroin", function() {deepEqual( Stem("heroines"), "heroin");});
test("heroism -> heroism", function() {deepEqual( Stem("heroism"), "heroism");});
test("herr -> herr", function() {deepEqual( Stem("herr"), "herr");});
test("herring -> her", function() {deepEqual( Stem("herring"), "her");});
test("herrings -> her", function() {deepEqual( Stem("herrings"), "her");});
test("hers -> her", function() {deepEqual( Stem("hers"), "her");});
test("herself -> herself", function() {deepEqual( Stem("herself"), "herself");});
test("herz -> herz", function() {deepEqual( Stem("herz"), "herz");});
test("hesitate -> hesit", function() {deepEqual( Stem("hesitate"), "hesit");});
test("hesitated -> hesit", function() {deepEqual( Stem("hesitated"), "hesit");});
test("hesitating -> hesit", function() {deepEqual( Stem("hesitating"), "hesit");});
test("hesitation -> hesit", function() {deepEqual( Stem("hesitation"), "hesit");});
test("hesperides -> hesperid", function() {deepEqual( Stem("hesperides"), "hesperid");});
test("hesperus -> hesperu", function() {deepEqual( Stem("hesperus"), "hesperu");});
test("hessian -> hessian", function() {deepEqual( Stem("hessian"), "hessian");});
test("hessians -> hessian", function() {deepEqual( Stem("hessians"), "hessian");});
test("hest -> hest", function() {deepEqual( Stem("hest"), "hest");});
test("hester -> hester", function() {deepEqual( Stem("hester"), "hester");});
test("hests -> hest", function() {deepEqual( Stem("hests"), "hest");});
test("heure -> heur", function() {deepEqual( Stem("heure"), "heur");});
test("heureux -> heureux", function() {deepEqual( Stem("heureux"), "heureux");});
test("hew -> hew", function() {deepEqual( Stem("hew"), "hew");});
test("hewgh -> hewgh", function() {deepEqual( Stem("hewgh"), "hewgh");});
test("hewing -> hew", function() {deepEqual( Stem("hewing"), "hew");});
test("hewn -> hewn", function() {deepEqual( Stem("hewn"), "hewn");});
test("hews -> hew", function() {deepEqual( Stem("hews"), "hew");});
test("hey -> hei", function() {deepEqual( Stem("hey"), "hei");});
test("heyday -> heydai", function() {deepEqual( Stem("heyday"), "heydai");});
test("hi -> hi", function() {deepEqual( Stem("hi"), "hi");});
test("hibocrates -> hibocr", function() {deepEqual( Stem("hibocrates"), "hibocr");});
test("hic -> hic", function() {deepEqual( Stem("hic"), "hic");});
test("hiccupped -> hiccup", function() {deepEqual( Stem("hiccupped"), "hiccup");});
test("hiccupping -> hiccup", function() {deepEqual( Stem("hiccupping"), "hiccup");});
test("hiccups -> hiccup", function() {deepEqual( Stem("hiccups"), "hiccup");});
test("hick -> hick", function() {deepEqual( Stem("hick"), "hick");});
test("hicks -> hick", function() {deepEqual( Stem("hicks"), "hick");});
test("hid -> hid", function() {deepEqual( Stem("hid"), "hid");});
test("hidden -> hidden", function() {deepEqual( Stem("hidden"), "hidden");});
test("hide -> hide", function() {deepEqual( Stem("hide"), "hide");});
test("hideous -> hideou", function() {deepEqual( Stem("hideous"), "hideou");});
test("hideously -> hideous", function() {deepEqual( Stem("hideously"), "hideous");});
test("hideousness -> hideous", function() {deepEqual( Stem("hideousness"), "hideous");});
test("hides -> hide", function() {deepEqual( Stem("hides"), "hide");});
test("hidest -> hidest", function() {deepEqual( Stem("hidest"), "hidest");});
test("hiding -> hide", function() {deepEqual( Stem("hiding"), "hide");});
test("hie -> hie", function() {deepEqual( Stem("hie"), "hie");});
test("hied -> hi", function() {deepEqual( Stem("hied"), "hi");});
test("hieing -> hie", function() {deepEqual( Stem("hieing"), "hie");});
test("hiems -> hiem", function() {deepEqual( Stem("hiems"), "hiem");});
test("hies -> hi", function() {deepEqual( Stem("hies"), "hi");});
test("hig -> hig", function() {deepEqual( Stem("hig"), "hig");});
test("higgs -> higg", function() {deepEqual( Stem("higgs"), "higg");});
test("high -> high", function() {deepEqual( Stem("high"), "high");});
test("higham -> higham", function() {deepEqual( Stem("higham"), "higham");});
test("highbury -> highburi", function() {deepEqual( Stem("highbury"), "highburi");});
test("higher -> higher", function() {deepEqual( Stem("higher"), "higher");});
test("highest -> highest", function() {deepEqual( Stem("highest"), "highest");});
test("highflyer -> highflyer", function() {deepEqual( Stem("highflyer"), "highflyer");});
test("highgate -> highgat", function() {deepEqual( Stem("highgate"), "highgat");});
test("highlander -> highland", function() {deepEqual( Stem("highlander"), "highland");});
test("highly -> highli", function() {deepEqual( Stem("highly"), "highli");});
test("highmost -> highmost", function() {deepEqual( Stem("highmost"), "highmost");});
test("highness -> high", function() {deepEqual( Stem("highness"), "high");});
test("highnesses -> high", function() {deepEqual( Stem("highnesses"), "high");});
test("hight -> hight", function() {deepEqual( Stem("hight"), "hight");});
test("highty -> highti", function() {deepEqual( Stem("highty"), "highti");});
test("highway -> highwai", function() {deepEqual( Stem("highway"), "highwai");});
test("highways -> highwai", function() {deepEqual( Stem("highways"), "highwai");});
test("hilarity -> hilar", function() {deepEqual( Stem("hilarity"), "hilar");});
test("hilding -> hild", function() {deepEqual( Stem("hilding"), "hild");});
test("hildings -> hild", function() {deepEqual( Stem("hildings"), "hild");});
test("hill -> hill", function() {deepEqual( Stem("hill"), "hill");});
test("hillisberg -> hillisberg", function() {deepEqual( Stem("hillisberg"), "hillisberg");});
test("hillo -> hillo", function() {deepEqual( Stem("hillo"), "hillo");});
test("hilloa -> hilloa", function() {deepEqual( Stem("hilloa"), "hilloa");});
test("hills -> hill", function() {deepEqual( Stem("hills"), "hill");});
test("hilt -> hilt", function() {deepEqual( Stem("hilt"), "hilt");});
test("hilts -> hilt", function() {deepEqual( Stem("hilts"), "hilt");});
test("hily -> hili", function() {deepEqual( Stem("hily"), "hili");});
test("him -> him", function() {deepEqual( Stem("him"), "him");});
test("himself -> himself", function() {deepEqual( Stem("himself"), "himself");});
test("hinc -> hinc", function() {deepEqual( Stem("hinc"), "hinc");});
test("hinckley -> hincklei", function() {deepEqual( Stem("hinckley"), "hincklei");});
test("hind -> hind", function() {deepEqual( Stem("hind"), "hind");});
test("hinder -> hinder", function() {deepEqual( Stem("hinder"), "hinder");});
test("hindered -> hinder", function() {deepEqual( Stem("hindered"), "hinder");});
test("hinders -> hinder", function() {deepEqual( Stem("hinders"), "hinder");});
test("hindmost -> hindmost", function() {deepEqual( Stem("hindmost"), "hindmost");});
test("hinds -> hind", function() {deepEqual( Stem("hinds"), "hind");});
test("hing -> hing", function() {deepEqual( Stem("hing"), "hing");});
test("hinge -> hing", function() {deepEqual( Stem("hinge"), "hing");});
test("hinges -> hing", function() {deepEqual( Stem("hinges"), "hing");});
test("hint -> hint", function() {deepEqual( Stem("hint"), "hint");});
test("hinted -> hint", function() {deepEqual( Stem("hinted"), "hint");});
test("hinting -> hint", function() {deepEqual( Stem("hinting"), "hint");});
test("hints -> hint", function() {deepEqual( Stem("hints"), "hint");});
test("hip -> hip", function() {deepEqual( Stem("hip"), "hip");});
test("hipp -> hipp", function() {deepEqual( Stem("hipp"), "hipp");});
test("hipparchus -> hipparchu", function() {deepEqual( Stem("hipparchus"), "hipparchu");});
test("hippolyta -> hippolyta", function() {deepEqual( Stem("hippolyta"), "hippolyta");});
test("hips -> hip", function() {deepEqual( Stem("hips"), "hip");});
test("hir -> hir", function() {deepEqual( Stem("hir"), "hir");});
test("hire -> hire", function() {deepEqual( Stem("hire"), "hire");});
test("hired -> hire", function() {deepEqual( Stem("hired"), "hire");});
test("hireling -> hirel", function() {deepEqual( Stem("hireling"), "hirel");});
test("hiren -> hiren", function() {deepEqual( Stem("hiren"), "hiren");});
test("hiring -> hire", function() {deepEqual( Stem("hiring"), "hire");});
test("hirsute -> hirsut", function() {deepEqual( Stem("hirsute"), "hirsut");});
test("hirtius -> hirtiu", function() {deepEqual( Stem("hirtius"), "hirtiu");});
test("his -> hi", function() {deepEqual( Stem("his"), "hi");});
test("hisperia -> hisperia", function() {deepEqual( Stem("hisperia"), "hisperia");});
test("hiss -> hiss", function() {deepEqual( Stem("hiss"), "hiss");});
test("hissed -> hiss", function() {deepEqual( Stem("hissed"), "hiss");});
test("hisses -> hiss", function() {deepEqual( Stem("hisses"), "hiss");});
test("hissing -> hiss", function() {deepEqual( Stem("hissing"), "hiss");});
test("hist -> hist", function() {deepEqual( Stem("hist"), "hist");});
test("historian -> historian", function() {deepEqual( Stem("historian"), "historian");});
test("historians -> historian", function() {deepEqual( Stem("historians"), "historian");});
test("historical -> histor", function() {deepEqual( Stem("historical"), "histor");});
test("histories -> histori", function() {deepEqual( Stem("histories"), "histori");});
test("history -> histori", function() {deepEqual( Stem("history"), "histori");});
test("hit -> hit", function() {deepEqual( Stem("hit"), "hit");});
test("hither -> hither", function() {deepEqual( Stem("hither"), "hither");});
test("hitherto -> hitherto", function() {deepEqual( Stem("hitherto"), "hitherto");});
test("hitherward -> hitherward", function() {deepEqual( Stem("hitherward"), "hitherward");});
test("hitherwards -> hitherward", function() {deepEqual( Stem("hitherwards"), "hitherward");});
test("hits -> hit", function() {deepEqual( Stem("hits"), "hit");});
test("hitting -> hit", function() {deepEqual( Stem("hitting"), "hit");});
test("hive -> hive", function() {deepEqual( Stem("hive"), "hive");});
test("hives -> hive", function() {deepEqual( Stem("hives"), "hive");});
test("hizzing -> hizz", function() {deepEqual( Stem("hizzing"), "hizz");});
test("hm -> hm", function() {deepEqual( Stem("hm"), "hm");});
test("ho -> ho", function() {deepEqual( Stem("ho"), "ho");});
test("hoa -> hoa", function() {deepEqual( Stem("hoa"), "hoa");});
test("hoar -> hoar", function() {deepEqual( Stem("hoar"), "hoar");});
test("hoard -> hoard", function() {deepEqual( Stem("hoard"), "hoard");});
test("hoarded -> hoard", function() {deepEqual( Stem("hoarded"), "hoard");});
test("hoarding -> hoard", function() {deepEqual( Stem("hoarding"), "hoard");});
test("hoars -> hoar", function() {deepEqual( Stem("hoars"), "hoar");});
test("hoarse -> hoars", function() {deepEqual( Stem("hoarse"), "hoars");});
test("hoary -> hoari", function() {deepEqual( Stem("hoary"), "hoari");});
test("hob -> hob", function() {deepEqual( Stem("hob"), "hob");});
test("hobbadehoy -> hobbadehoi", function() {deepEqual( Stem("hobbadehoy"), "hobbadehoi");});
test("hobbadyhoy -> hobbadyhoi", function() {deepEqual( Stem("hobbadyhoy"), "hobbadyhoi");});
test("hobbididence -> hobbidid", function() {deepEqual( Stem("hobbididence"), "hobbidid");});
test("hobbled -> hobbl", function() {deepEqual( Stem("hobbled"), "hobbl");});
test("hobbling -> hobbl", function() {deepEqual( Stem("hobbling"), "hobbl");});
test("hobbs -> hobb", function() {deepEqual( Stem("hobbs"), "hobb");});
test("hobby -> hobbi", function() {deepEqual( Stem("hobby"), "hobbi");});
test("hobbyhorse -> hobbyhors", function() {deepEqual( Stem("hobbyhorse"), "hobbyhors");});
test("hobgoblin -> hobgoblin", function() {deepEqual( Stem("hobgoblin"), "hobgoblin");});
test("hobnails -> hobnail", function() {deepEqual( Stem("hobnails"), "hobnail");});
test("hoc -> hoc", function() {deepEqual( Stem("hoc"), "hoc");});
test("hocussed -> hocuss", function() {deepEqual( Stem("hocussed"), "hocuss");});
test("hod -> hod", function() {deepEqual( Stem("hod"), "hod");});
test("hodge -> hodg", function() {deepEqual( Stem("hodge"), "hodg");});
test("hodson -> hodson", function() {deepEqual( Stem("hodson"), "hodson");});
test("hof -> hof", function() {deepEqual( Stem("hof"), "hof");});
test("hoff -> hoff", function() {deepEqual( Stem("hoff"), "hoff");});
test("hog -> hog", function() {deepEqual( Stem("hog"), "hog");});
test("hoggarty -> hoggarti", function() {deepEqual( Stem("hoggarty"), "hoggarti");});
test("hogs -> hog", function() {deepEqual( Stem("hogs"), "hog");});
test("hogshead -> hogshead", function() {deepEqual( Stem("hogshead"), "hogshead");});
test("hogsheads -> hogshead", function() {deepEqual( Stem("hogsheads"), "hogshead");});
test("hohenlaufen -> hohenlaufen", function() {deepEqual( Stem("hohenlaufen"), "hohenlaufen");});
test("hois -> hoi", function() {deepEqual( Stem("hois"), "hoi");});
test("hoise -> hois", function() {deepEqual( Stem("hoise"), "hois");});
test("hoist -> hoist", function() {deepEqual( Stem("hoist"), "hoist");});
test("hoisted -> hoist", function() {deepEqual( Stem("hoisted"), "hoist");});
test("hoists -> hoist", function() {deepEqual( Stem("hoists"), "hoist");});
test("holborn -> holborn", function() {deepEqual( Stem("holborn"), "holborn");});
test("hold -> hold", function() {deepEqual( Stem("hold"), "hold");});
test("holden -> holden", function() {deepEqual( Stem("holden"), "holden");});
test("holder -> holder", function() {deepEqual( Stem("holder"), "holder");});
test("holdeth -> holdeth", function() {deepEqual( Stem("holdeth"), "holdeth");});
test("holdfast -> holdfast", function() {deepEqual( Stem("holdfast"), "holdfast");});
test("holding -> hold", function() {deepEqual( Stem("holding"), "hold");});
test("holds -> hold", function() {deepEqual( Stem("holds"), "hold");});
test("hole -> hole", function() {deepEqual( Stem("hole"), "hole");});
test("holes -> hole", function() {deepEqual( Stem("holes"), "hole");});
test("holidam -> holidam", function() {deepEqual( Stem("holidam"), "holidam");});
test("holidame -> holidam", function() {deepEqual( Stem("holidame"), "holidam");});
test("holiday -> holidai", function() {deepEqual( Stem("holiday"), "holidai");});
test("holidays -> holidai", function() {deepEqual( Stem("holidays"), "holidai");});
test("holier -> holier", function() {deepEqual( Stem("holier"), "holier");});
test("holiest -> holiest", function() {deepEqual( Stem("holiest"), "holiest");});
test("holily -> holili", function() {deepEqual( Stem("holily"), "holili");});
test("holiness -> holi", function() {deepEqual( Stem("holiness"), "holi");});
test("holla -> holla", function() {deepEqual( Stem("holla"), "holla");});
test("holland -> holland", function() {deepEqual( Stem("holland"), "holland");});
test("hollander -> holland", function() {deepEqual( Stem("hollander"), "holland");});
test("hollanders -> holland", function() {deepEqual( Stem("hollanders"), "holland");});
test("holloa -> holloa", function() {deepEqual( Stem("holloa"), "holloa");});
test("holloaing -> holloa", function() {deepEqual( Stem("holloaing"), "holloa");});
test("hollow -> hollow", function() {deepEqual( Stem("hollow"), "hollow");});
test("hollowly -> hollowli", function() {deepEqual( Stem("hollowly"), "hollowli");});
test("hollowness -> hollow", function() {deepEqual( Stem("hollowness"), "hollow");});
test("holly -> holli", function() {deepEqual( Stem("holly"), "holli");});
test("hollyock -> hollyock", function() {deepEqual( Stem("hollyock"), "hollyock");});
test("holmedon -> holmedon", function() {deepEqual( Stem("holmedon"), "holmedon");});
test("holofernes -> holofern", function() {deepEqual( Stem("holofernes"), "holofern");});
test("holp -> holp", function() {deepEqual( Stem("holp"), "holp");});
test("holsters -> holster", function() {deepEqual( Stem("holsters"), "holster");});
test("holy -> holi", function() {deepEqual( Stem("holy"), "holi");});
test("hom -> hom", function() {deepEqual( Stem("hom"), "hom");});
test("homage -> homag", function() {deepEqual( Stem("homage"), "homag");});
test("homager -> homag", function() {deepEqual( Stem("homager"), "homag");});
test("home -> home", function() {deepEqual( Stem("home"), "home");});
test("homely -> home", function() {deepEqual( Stem("homely"), "home");});
test("homer -> homer", function() {deepEqual( Stem("homer"), "homer");});
test("homes -> home", function() {deepEqual( Stem("homes"), "home");});
test("homespuns -> homespun", function() {deepEqual( Stem("homespuns"), "homespun");});
test("homestead -> homestead", function() {deepEqual( Stem("homestead"), "homestead");});
test("homesteads -> homestead", function() {deepEqual( Stem("homesteads"), "homestead");});
test("homeward -> homeward", function() {deepEqual( Stem("homeward"), "homeward");});
test("homewards -> homeward", function() {deepEqual( Stem("homewards"), "homeward");});
test("homicide -> homicid", function() {deepEqual( Stem("homicide"), "homicid");});
test("homicides -> homicid", function() {deepEqual( Stem("homicides"), "homicid");});
test("homilies -> homili", function() {deepEqual( Stem("homilies"), "homili");});
test("homily -> homili", function() {deepEqual( Stem("homily"), "homili");});
test("hominem -> hominem", function() {deepEqual( Stem("hominem"), "hominem");});
test("homlets -> homlet", function() {deepEqual( Stem("homlets"), "homlet");});
test("homme -> homm", function() {deepEqual( Stem("homme"), "homm");});
test("hommes -> homm", function() {deepEqual( Stem("hommes"), "homm");});
test("homo -> homo", function() {deepEqual( Stem("homo"), "homo");});
test("hon -> hon", function() {deepEqual( Stem("hon"), "hon");});
test("honest -> honest", function() {deepEqual( Stem("honest"), "honest");});
test("honester -> honest", function() {deepEqual( Stem("honester"), "honest");});
test("honestest -> honestest", function() {deepEqual( Stem("honestest"), "honestest");});
test("honestly -> honestli", function() {deepEqual( Stem("honestly"), "honestli");});
test("honesty -> honesti", function() {deepEqual( Stem("honesty"), "honesti");});
test("honey -> honei", function() {deepEqual( Stem("honey"), "honei");});
test("honeycomb -> honeycomb", function() {deepEqual( Stem("honeycomb"), "honeycomb");});
test("honeying -> honei", function() {deepEqual( Stem("honeying"), "honei");});
test("honeyless -> honeyless", function() {deepEqual( Stem("honeyless"), "honeyless");});
test("honeymoon -> honeymoon", function() {deepEqual( Stem("honeymoon"), "honeymoon");});
test("honeysuckle -> honeysuckl", function() {deepEqual( Stem("honeysuckle"), "honeysuckl");});
test("honeysuckles -> honeysuckl", function() {deepEqual( Stem("honeysuckles"), "honeysuckl");});
test("honi -> honi", function() {deepEqual( Stem("honi"), "honi");});
test("honneur -> honneur", function() {deepEqual( Stem("honneur"), "honneur");});
test("honor -> honor", function() {deepEqual( Stem("honor"), "honor");});
test("honorable -> honor", function() {deepEqual( Stem("honorable"), "honor");});
test("honorably -> honor", function() {deepEqual( Stem("honorably"), "honor");});
test("honorato -> honorato", function() {deepEqual( Stem("honorato"), "honorato");});
test("honorificabilitudinitatibus -> honorificabilitudinitatibu", function() {deepEqual( Stem("honorificabilitudinitatibus"), "honorificabilitudinitatibu");});
test("honors -> honor", function() {deepEqual( Stem("honors"), "honor");});
test("honour -> honour", function() {deepEqual( Stem("honour"), "honour");});
test("honourable -> honour", function() {deepEqual( Stem("honourable"), "honour");});
test("honourables -> honour", function() {deepEqual( Stem("honourables"), "honour");});
test("honourably -> honour", function() {deepEqual( Stem("honourably"), "honour");});
test("honoured -> honour", function() {deepEqual( Stem("honoured"), "honour");});
test("honourest -> honourest", function() {deepEqual( Stem("honourest"), "honourest");});
test("honourible -> honour", function() {deepEqual( Stem("honourible"), "honour");});
test("honouring -> honour", function() {deepEqual( Stem("honouring"), "honour");});
test("honours -> honour", function() {deepEqual( Stem("honours"), "honour");});
test("hoo -> hoo", function() {deepEqual( Stem("hoo"), "hoo");});
test("hood -> hood", function() {deepEqual( Stem("hood"), "hood");});
test("hooded -> hood", function() {deepEqual( Stem("hooded"), "hood");});
test("hoodman -> hoodman", function() {deepEqual( Stem("hoodman"), "hoodman");});
test("hoods -> hood", function() {deepEqual( Stem("hoods"), "hood");});
test("hoodwink -> hoodwink", function() {deepEqual( Stem("hoodwink"), "hoodwink");});
test("hoodwinked -> hoodwink", function() {deepEqual( Stem("hoodwinked"), "hoodwink");});
test("hoof -> hoof", function() {deepEqual( Stem("hoof"), "hoof");});
test("hoofs -> hoof", function() {deepEqual( Stem("hoofs"), "hoof");});
test("hook -> hook", function() {deepEqual( Stem("hook"), "hook");});
test("hookah -> hookah", function() {deepEqual( Stem("hookah"), "hookah");});
test("hooked -> hook", function() {deepEqual( Stem("hooked"), "hook");});
test("hooking -> hook", function() {deepEqual( Stem("hooking"), "hook");});
test("hooks -> hook", function() {deepEqual( Stem("hooks"), "hook");});
test("hoop -> hoop", function() {deepEqual( Stem("hoop"), "hoop");});
test("hooper -> hooper", function() {deepEqual( Stem("hooper"), "hooper");});
test("hooping -> hoop", function() {deepEqual( Stem("hooping"), "hoop");});
test("hoops -> hoop", function() {deepEqual( Stem("hoops"), "hoop");});
test("hooray -> hoorai", function() {deepEqual( Stem("hooray"), "hoorai");});
test("hoot -> hoot", function() {deepEqual( Stem("hoot"), "hoot");});
test("hooted -> hoot", function() {deepEqual( Stem("hooted"), "hoot");});
test("hooting -> hoot", function() {deepEqual( Stem("hooting"), "hoot");});
test("hoots -> hoot", function() {deepEqual( Stem("hoots"), "hoot");});
test("hop -> hop", function() {deepEqual( Stem("hop"), "hop");});
test("hope -> hope", function() {deepEqual( Stem("hope"), "hope");});
test("hoped -> hope", function() {deepEqual( Stem("hoped"), "hope");});
test("hopeful -> hope", function() {deepEqual( Stem("hopeful"), "hope");});
test("hopeless -> hopeless", function() {deepEqual( Stem("hopeless"), "hopeless");});
test("hopelessly -> hopelessli", function() {deepEqual( Stem("hopelessly"), "hopelessli");});
test("hopes -> hope", function() {deepEqual( Stem("hopes"), "hope");});
test("hopest -> hopest", function() {deepEqual( Stem("hopest"), "hopest");});
test("hoping -> hope", function() {deepEqual( Stem("hoping"), "hope");});
test("hopkins -> hopkin", function() {deepEqual( Stem("hopkins"), "hopkin");});
test("hoppedance -> hopped", function() {deepEqual( Stem("hoppedance"), "hopped");});
test("hopping -> hop", function() {deepEqual( Stem("hopping"), "hop");});
test("hor -> hor", function() {deepEqual( Stem("hor"), "hor");});
test("horace -> horac", function() {deepEqual( Stem("horace"), "horac");});
test("horatio -> horatio", function() {deepEqual( Stem("horatio"), "horatio");});
test("horizon -> horizon", function() {deepEqual( Stem("horizon"), "horizon");});
test("horn -> horn", function() {deepEqual( Stem("horn"), "horn");});
test("hornblower -> hornblow", function() {deepEqual( Stem("hornblower"), "hornblow");});
test("hornbook -> hornbook", function() {deepEqual( Stem("hornbook"), "hornbook");});
test("hornby -> hornbi", function() {deepEqual( Stem("hornby"), "hornbi");});
test("horned -> horn", function() {deepEqual( Stem("horned"), "horn");});
test("horner -> horner", function() {deepEqual( Stem("horner"), "horner");});
test("horning -> horn", function() {deepEqual( Stem("horning"), "horn");});
test("hornpipes -> hornpip", function() {deepEqual( Stem("hornpipes"), "hornpip");});
test("horns -> horn", function() {deepEqual( Stem("horns"), "horn");});
test("hornsey -> hornsei", function() {deepEqual( Stem("hornsey"), "hornsei");});
test("horny -> horni", function() {deepEqual( Stem("horny"), "horni");});
test("horologe -> horolog", function() {deepEqual( Stem("horologe"), "horolog");});
test("horrible -> horribl", function() {deepEqual( Stem("horrible"), "horribl");});
test("horribly -> horribli", function() {deepEqual( Stem("horribly"), "horribli");});
test("horrid -> horrid", function() {deepEqual( Stem("horrid"), "horrid");});
test("horrider -> horrid", function() {deepEqual( Stem("horrider"), "horrid");});
test("horridly -> horridli", function() {deepEqual( Stem("horridly"), "horridli");});
test("horrified -> horrifi", function() {deepEqual( Stem("horrified"), "horrifi");});
test("horrocks -> horrock", function() {deepEqual( Stem("horrocks"), "horrock");});
test("horror -> horror", function() {deepEqual( Stem("horror"), "horror");});
test("horrors -> horror", function() {deepEqual( Stem("horrors"), "horror");});
test("horrud -> horrud", function() {deepEqual( Stem("horrud"), "horrud");});
test("hors -> hor", function() {deepEqual( Stem("hors"), "hor");});
test("horse -> hors", function() {deepEqual( Stem("horse"), "hors");});
test("horseback -> horseback", function() {deepEqual( Stem("horseback"), "horseback");});
test("horsed -> hors", function() {deepEqual( Stem("horsed"), "hors");});
test("horsehairs -> horsehair", function() {deepEqual( Stem("horsehairs"), "horsehair");});
test("horsejockey -> horsejockei", function() {deepEqual( Stem("horsejockey"), "horsejockei");});
test("horseless -> horseless", function() {deepEqual( Stem("horseless"), "horseless");});
test("horseman -> horseman", function() {deepEqual( Stem("horseman"), "horseman");});
test("horsemanship -> horsemanship", function() {deepEqual( Stem("horsemanship"), "horsemanship");});
test("horsemen -> horsemen", function() {deepEqual( Stem("horsemen"), "horsemen");});
test("horses -> hors", function() {deepEqual( Stem("horses"), "hors");});
test("horseway -> horsewai", function() {deepEqual( Stem("horseway"), "horsewai");});
test("horsewhip -> horsewhip", function() {deepEqual( Stem("horsewhip"), "horsewhip");});
test("horsewhipped -> horsewhip", function() {deepEqual( Stem("horsewhipped"), "horsewhip");});
test("horsing -> hors", function() {deepEqual( Stem("horsing"), "hors");});
test("hortensio -> hortensio", function() {deepEqual( Stem("hortensio"), "hortensio");});
test("hortensius -> hortensiu", function() {deepEqual( Stem("hortensius"), "hortensiu");});
test("horticultural -> horticultur", function() {deepEqual( Stem("horticultural"), "horticultur");});
test("horum -> horum", function() {deepEqual( Stem("horum"), "horum");});
test("hosbin -> hosbin", function() {deepEqual( Stem("hosbin"), "hosbin");});
test("hose -> hose", function() {deepEqual( Stem("hose"), "hose");});
test("hospitable -> hospit", function() {deepEqual( Stem("hospitable"), "hospit");});
test("hospital -> hospit", function() {deepEqual( Stem("hospital"), "hospit");});
test("hospitalities -> hospit", function() {deepEqual( Stem("hospitalities"), "hospit");});
test("hospitality -> hospit", function() {deepEqual( Stem("hospitality"), "hospit");});
test("hospitals -> hospit", function() {deepEqual( Stem("hospitals"), "hospit");});
test("hospodar -> hospodar", function() {deepEqual( Stem("hospodar"), "hospodar");});
test("hoss -> hoss", function() {deepEqual( Stem("hoss"), "hoss");});
test("hosses -> hoss", function() {deepEqual( Stem("hosses"), "hoss");});
test("host -> host", function() {deepEqual( Stem("host"), "host");});
test("hostage -> hostag", function() {deepEqual( Stem("hostage"), "hostag");});
test("hostages -> hostag", function() {deepEqual( Stem("hostages"), "hostag");});
test("hostess -> hostess", function() {deepEqual( Stem("hostess"), "hostess");});
test("hostile -> hostil", function() {deepEqual( Stem("hostile"), "hostil");});
test("hostilities -> hostil", function() {deepEqual( Stem("hostilities"), "hostil");});
test("hostility -> hostil", function() {deepEqual( Stem("hostility"), "hostil");});
test("hostilius -> hostiliu", function() {deepEqual( Stem("hostilius"), "hostiliu");});
test("hosts -> host", function() {deepEqual( Stem("hosts"), "host");});
test("hot -> hot", function() {deepEqual( Stem("hot"), "hot");});
test("hote -> hote", function() {deepEqual( Stem("hote"), "hote");});
test("hotel -> hotel", function() {deepEqual( Stem("hotel"), "hotel");});
test("hotels -> hotel", function() {deepEqual( Stem("hotels"), "hotel");});
test("hotly -> hotli", function() {deepEqual( Stem("hotly"), "hotli");});
test("hotspur -> hotspur", function() {deepEqual( Stem("hotspur"), "hotspur");});
test("hottentot -> hottentot", function() {deepEqual( Stem("hottentot"), "hottentot");});
test("hotter -> hotter", function() {deepEqual( Stem("hotter"), "hotter");});
test("hottest -> hottest", function() {deepEqual( Stem("hottest"), "hottest");});
test("hoty -> hoti", function() {deepEqual( Stem("hoty"), "hoti");});
test("hould -> hould", function() {deepEqual( Stem("hould"), "hould");});
test("hound -> hound", function() {deepEqual( Stem("hound"), "hound");});
test("hounds -> hound", function() {deepEqual( Stem("hounds"), "hound");});
test("houndsditch -> houndsditch", function() {deepEqual( Stem("houndsditch"), "houndsditch");});
test("hour -> hour", function() {deepEqual( Stem("hour"), "hour");});
test("houri -> houri", function() {deepEqual( Stem("houri"), "houri");});
test("hourly -> hourli", function() {deepEqual( Stem("hourly"), "hourli");});
test("hours -> hour", function() {deepEqual( Stem("hours"), "hour");});
test("hous -> hou", function() {deepEqual( Stem("hous"), "hou");});
test("house -> hous", function() {deepEqual( Stem("house"), "hous");});
test("housed -> hous", function() {deepEqual( Stem("housed"), "hous");});
test("household -> household", function() {deepEqual( Stem("household"), "household");});
test("householder -> household", function() {deepEqual( Stem("householder"), "household");});
test("householders -> household", function() {deepEqual( Stem("householders"), "household");});
test("households -> household", function() {deepEqual( Stem("households"), "household");});
test("housekeeper -> housekeep", function() {deepEqual( Stem("housekeeper"), "housekeep");});
test("housekeepers -> housekeep", function() {deepEqual( Stem("housekeepers"), "housekeep");});
test("housekeeping -> housekeep", function() {deepEqual( Stem("housekeeping"), "housekeep");});
test("houseless -> houseless", function() {deepEqual( Stem("houseless"), "houseless");});
test("housemaid -> housemaid", function() {deepEqual( Stem("housemaid"), "housemaid");});
test("houses -> hous", function() {deepEqual( Stem("houses"), "hous");});
test("housewife -> housewif", function() {deepEqual( Stem("housewife"), "housewif");});
test("housewifery -> housewiferi", function() {deepEqual( Stem("housewifery"), "housewiferi");});
test("housewives -> housew", function() {deepEqual( Stem("housewives"), "housew");});
test("housings -> hous", function() {deepEqual( Stem("housings"), "hous");});
test("hout -> hout", function() {deepEqual( Stem("hout"), "hout");});
test("hovel -> hovel", function() {deepEqual( Stem("hovel"), "hovel");});
test("hover -> hover", function() {deepEqual( Stem("hover"), "hover");});
test("hovered -> hover", function() {deepEqual( Stem("hovered"), "hover");});
test("hovering -> hover", function() {deepEqual( Stem("hovering"), "hover");});
test("hovers -> hover", function() {deepEqual( Stem("hovers"), "hover");});
test("how -> how", function() {deepEqual( Stem("how"), "how");});
test("howard -> howard", function() {deepEqual( Stem("howard"), "howard");});
test("howbeit -> howbeit", function() {deepEqual( Stem("howbeit"), "howbeit");});
test("howe -> how", function() {deepEqual( Stem("howe"), "how");});
test("howeer -> howeer", function() {deepEqual( Stem("howeer"), "howeer");});
test("howell -> howel", function() {deepEqual( Stem("howell"), "howel");});
test("however -> howev", function() {deepEqual( Stem("however"), "howev");});
test("howl -> howl", function() {deepEqual( Stem("howl"), "howl");});
test("howled -> howl", function() {deepEqual( Stem("howled"), "howl");});
test("howlet -> howlet", function() {deepEqual( Stem("howlet"), "howlet");});
test("howling -> howl", function() {deepEqual( Stem("howling"), "howl");});
test("howls -> howl", function() {deepEqual( Stem("howls"), "howl");});
test("howsoe -> howso", function() {deepEqual( Stem("howsoe"), "howso");});
test("howsoever -> howsoev", function() {deepEqual( Stem("howsoever"), "howsoev");});
test("howsome -> howsom", function() {deepEqual( Stem("howsome"), "howsom");});
test("hoxes -> hox", function() {deepEqual( Stem("hoxes"), "hox");});
test("hoy -> hoi", function() {deepEqual( Stem("hoy"), "hoi");});
test("hoyday -> hoydai", function() {deepEqual( Stem("hoyday"), "hoydai");});
test("hozier -> hozier", function() {deepEqual( Stem("hozier"), "hozier");});
test("hubert -> hubert", function() {deepEqual( Stem("hubert"), "hubert");});
test("huckster -> huckster", function() {deepEqual( Stem("huckster"), "huckster");});
test("huddled -> huddl", function() {deepEqual( Stem("huddled"), "huddl");});
test("huddleston -> huddleston", function() {deepEqual( Stem("huddleston"), "huddleston");});
test("huddlestone -> huddleston", function() {deepEqual( Stem("huddlestone"), "huddleston");});
test("huddlestons -> huddleston", function() {deepEqual( Stem("huddlestons"), "huddleston");});
test("huddling -> huddl", function() {deepEqual( Stem("huddling"), "huddl");});
test("hue -> hue", function() {deepEqual( Stem("hue"), "hue");});
test("hued -> hu", function() {deepEqual( Stem("hued"), "hu");});
test("hues -> hue", function() {deepEqual( Stem("hues"), "hue");});
test("huff -> huff", function() {deepEqual( Stem("huff"), "huff");});
test("hug -> hug", function() {deepEqual( Stem("hug"), "hug");});
test("huge -> huge", function() {deepEqual( Stem("huge"), "huge");});
test("hugely -> huge", function() {deepEqual( Stem("hugely"), "huge");});
test("hugeness -> huge", function() {deepEqual( Stem("hugeness"), "huge");});
test("hugest -> hugest", function() {deepEqual( Stem("hugest"), "hugest");});
test("hugg -> hugg", function() {deepEqual( Stem("hugg"), "hugg");});
test("hugger -> hugger", function() {deepEqual( Stem("hugger"), "hugger");});
test("hugging -> hug", function() {deepEqual( Stem("hugging"), "hug");});
test("huggleton -> huggleton", function() {deepEqual( Stem("huggleton"), "huggleton");});
test("hugh -> hugh", function() {deepEqual( Stem("hugh"), "hugh");});
test("hugs -> hug", function() {deepEqual( Stem("hugs"), "hug");});
test("hugues -> hugu", function() {deepEqual( Stem("hugues"), "hugu");});
test("hujus -> huju", function() {deepEqual( Stem("hujus"), "huju");});
test("hulk -> hulk", function() {deepEqual( Stem("hulk"), "hulk");});
test("hulker -> hulker", function() {deepEqual( Stem("hulker"), "hulker");});
test("hulkers -> hulker", function() {deepEqual( Stem("hulkers"), "hulker");});
test("hulking -> hulk", function() {deepEqual( Stem("hulking"), "hulk");});
test("hulks -> hulk", function() {deepEqual( Stem("hulks"), "hulk");});
test("hull -> hull", function() {deepEqual( Stem("hull"), "hull");});
test("hulling -> hull", function() {deepEqual( Stem("hulling"), "hull");});
test("hullo -> hullo", function() {deepEqual( Stem("hullo"), "hullo");});
test("hum -> hum", function() {deepEqual( Stem("hum"), "hum");});
test("human -> human", function() {deepEqual( Stem("human"), "human");});
test("humane -> human", function() {deepEqual( Stem("humane"), "human");});
test("humanely -> human", function() {deepEqual( Stem("humanely"), "human");});
test("humanity -> human", function() {deepEqual( Stem("humanity"), "human");});
test("humble -> humbl", function() {deepEqual( Stem("humble"), "humbl");});
test("humbled -> humbl", function() {deepEqual( Stem("humbled"), "humbl");});
test("humbleness -> humbl", function() {deepEqual( Stem("humbleness"), "humbl");});
test("humbler -> humbler", function() {deepEqual( Stem("humbler"), "humbler");});
test("humbles -> humbl", function() {deepEqual( Stem("humbles"), "humbl");});
test("humblest -> humblest", function() {deepEqual( Stem("humblest"), "humblest");});
test("humbling -> humbl", function() {deepEqual( Stem("humbling"), "humbl");});
test("humbly -> humbli", function() {deepEqual( Stem("humbly"), "humbli");});
test("humbourg -> humbourg", function() {deepEqual( Stem("humbourg"), "humbourg");});
test("humbug -> humbug", function() {deepEqual( Stem("humbug"), "humbug");});
test("humbugs -> humbug", function() {deepEqual( Stem("humbugs"), "humbug");});
test("humby -> humbi", function() {deepEqual( Stem("humby"), "humbi");});
test("humdrum -> humdrum", function() {deepEqual( Stem("humdrum"), "humdrum");});
test("hume -> hume", function() {deepEqual( Stem("hume"), "hume");});
test("humh -> humh", function() {deepEqual( Stem("humh"), "humh");});
test("humidity -> humid", function() {deepEqual( Stem("humidity"), "humid");});
test("humiliate -> humili", function() {deepEqual( Stem("humiliate"), "humili");});
test("humiliated -> humili", function() {deepEqual( Stem("humiliated"), "humili");});
test("humiliation -> humili", function() {deepEqual( Stem("humiliation"), "humili");});
test("humiliations -> humili", function() {deepEqual( Stem("humiliations"), "humili");});
test("humility -> humil", function() {deepEqual( Stem("humility"), "humil");});
test("humming -> hum", function() {deepEqual( Stem("humming"), "hum");});
test("hummums -> hummum", function() {deepEqual( Stem("hummums"), "hummum");});
test("humor -> humor", function() {deepEqual( Stem("humor"), "humor");});
test("humorous -> humor", function() {deepEqual( Stem("humorous"), "humor");});
test("humors -> humor", function() {deepEqual( Stem("humors"), "humor");});
test("humour -> humour", function() {deepEqual( Stem("humour"), "humour");});
test("humoured -> humour", function() {deepEqual( Stem("humoured"), "humour");});
test("humouredly -> humouredli", function() {deepEqual( Stem("humouredly"), "humouredli");});
test("humourists -> humourist", function() {deepEqual( Stem("humourists"), "humourist");});
test("humours -> humour", function() {deepEqual( Stem("humours"), "humour");});
test("hump -> hump", function() {deepEqual( Stem("hump"), "hump");});
test("humph -> humph", function() {deepEqual( Stem("humph"), "humph");});
test("humphrey -> humphrei", function() {deepEqual( Stem("humphrey"), "humphrei");});
test("humphry -> humphri", function() {deepEqual( Stem("humphry"), "humphri");});
test("hums -> hum", function() {deepEqual( Stem("hums"), "hum");});
test("hundred -> hundr", function() {deepEqual( Stem("hundred"), "hundr");});
test("hundreds -> hundr", function() {deepEqual( Stem("hundreds"), "hundr");});
test("hundredth -> hundredth", function() {deepEqual( Stem("hundredth"), "hundredth");});
test("hung -> hung", function() {deepEqual( Stem("hung"), "hung");});
test("hungarian -> hungarian", function() {deepEqual( Stem("hungarian"), "hungarian");});
test("hungary -> hungari", function() {deepEqual( Stem("hungary"), "hungari");});
test("hunger -> hunger", function() {deepEqual( Stem("hunger"), "hunger");});
test("hungerford -> hungerford", function() {deepEqual( Stem("hungerford"), "hungerford");});
test("hungerly -> hungerli", function() {deepEqual( Stem("hungerly"), "hungerli");});
test("hungry -> hungri", function() {deepEqual( Stem("hungry"), "hungri");});
test("hunt -> hunt", function() {deepEqual( Stem("hunt"), "hunt");});
test("hunted -> hunt", function() {deepEqual( Stem("hunted"), "hunt");});
test("hunter -> hunter", function() {deepEqual( Stem("hunter"), "hunter");});
test("hunters -> hunter", function() {deepEqual( Stem("hunters"), "hunter");});
test("hunteth -> hunteth", function() {deepEqual( Stem("hunteth"), "hunteth");});
test("hunting -> hunt", function() {deepEqual( Stem("hunting"), "hunt");});
test("huntington -> huntington", function() {deepEqual( Stem("huntington"), "huntington");});
test("huntress -> huntress", function() {deepEqual( Stem("huntress"), "huntress");});
test("hunts -> hunt", function() {deepEqual( Stem("hunts"), "hunt");});
test("huntsman -> huntsman", function() {deepEqual( Stem("huntsman"), "huntsman");});
test("huntsmen -> huntsmen", function() {deepEqual( Stem("huntsmen"), "huntsmen");});
test("hupstarts -> hupstart", function() {deepEqual( Stem("hupstarts"), "hupstart");});
test("hurdle -> hurdl", function() {deepEqual( Stem("hurdle"), "hurdl");});
test("hurl -> hurl", function() {deepEqual( Stem("hurl"), "hurl");});
test("hurled -> hurl", function() {deepEqual( Stem("hurled"), "hurl");});
test("hurling -> hurl", function() {deepEqual( Stem("hurling"), "hurl");});
test("hurls -> hurl", function() {deepEqual( Stem("hurls"), "hurl");});
test("hurly -> hurli", function() {deepEqual( Stem("hurly"), "hurli");});
test("hurlyburly -> hurlyburli", function() {deepEqual( Stem("hurlyburly"), "hurlyburli");});
test("hurrahing -> hurrah", function() {deepEqual( Stem("hurrahing"), "hurrah");});
test("hurray -> hurrai", function() {deepEqual( Stem("hurray"), "hurrai");});
test("hurraying -> hurrai", function() {deepEqual( Stem("hurraying"), "hurrai");});
test("hurricano -> hurricano", function() {deepEqual( Stem("hurricano"), "hurricano");});
test("hurricanoes -> hurricano", function() {deepEqual( Stem("hurricanoes"), "hurricano");});
test("hurried -> hurri", function() {deepEqual( Stem("hurried"), "hurri");});
test("hurriedly -> hurriedli", function() {deepEqual( Stem("hurriedly"), "hurriedli");});
test("hurries -> hurri", function() {deepEqual( Stem("hurries"), "hurri");});
test("hurry -> hurri", function() {deepEqual( Stem("hurry"), "hurri");});
test("hurrying -> hurri", function() {deepEqual( Stem("hurrying"), "hurri");});
test("hurt -> hurt", function() {deepEqual( Stem("hurt"), "hurt");});
test("hurting -> hurt", function() {deepEqual( Stem("hurting"), "hurt");});
test("hurtled -> hurtl", function() {deepEqual( Stem("hurtled"), "hurtl");});
test("hurtless -> hurtless", function() {deepEqual( Stem("hurtless"), "hurtless");});
test("hurtling -> hurtl", function() {deepEqual( Stem("hurtling"), "hurtl");});
test("hurts -> hurt", function() {deepEqual( Stem("hurts"), "hurt");});
test("husband -> husband", function() {deepEqual( Stem("husband"), "husband");});
test("husbanded -> husband", function() {deepEqual( Stem("husbanded"), "husband");});
test("husbandless -> husbandless", function() {deepEqual( Stem("husbandless"), "husbandless");});
test("husbandmen -> husbandmen", function() {deepEqual( Stem("husbandmen"), "husbandmen");});
test("husbandry -> husbandri", function() {deepEqual( Stem("husbandry"), "husbandri");});
test("husbands -> husband", function() {deepEqual( Stem("husbands"), "husband");});
test("hush -> hush", function() {deepEqual( Stem("hush"), "hush");});
test("hushed -> hush", function() {deepEqual( Stem("hushed"), "hush");});
test("hushes -> hush", function() {deepEqual( Stem("hushes"), "hush");});
test("husht -> husht", function() {deepEqual( Stem("husht"), "husht");});
test("husks -> husk", function() {deepEqual( Stem("husks"), "husk");});
test("husky -> huski", function() {deepEqual( Stem("husky"), "huski");});
test("hussar -> hussar", function() {deepEqual( Stem("hussar"), "hussar");});
test("hussars -> hussar", function() {deepEqual( Stem("hussars"), "hussar");});
test("hussy -> hussi", function() {deepEqual( Stem("hussy"), "hussi");});
test("huswife -> huswif", function() {deepEqual( Stem("huswife"), "huswif");});
test("huswifes -> huswif", function() {deepEqual( Stem("huswifes"), "huswif");});
test("hut -> hut", function() {deepEqual( Stem("hut"), "hut");});
test("hutch -> hutch", function() {deepEqual( Stem("hutch"), "hutch");});
test("hwhat -> hwhat", function() {deepEqual( Stem("hwhat"), "hwhat");});
test("hybla -> hybla", function() {deepEqual( Stem("hybla"), "hybla");});
test("hyde -> hyde", function() {deepEqual( Stem("hyde"), "hyde");});
test("hydra -> hydra", function() {deepEqual( Stem("hydra"), "hydra");});
test("hyen -> hyen", function() {deepEqual( Stem("hyen"), "hyen");});
test("hyena -> hyena", function() {deepEqual( Stem("hyena"), "hyena");});
test("hygeia -> hygeia", function() {deepEqual( Stem("hygeia"), "hygeia");});
test("hymen -> hymen", function() {deepEqual( Stem("hymen"), "hymen");});
test("hymenaeus -> hymenaeu", function() {deepEqual( Stem("hymenaeus"), "hymenaeu");});
test("hymeneal -> hymen", function() {deepEqual( Stem("hymeneal"), "hymen");});
test("hymn -> hymn", function() {deepEqual( Stem("hymn"), "hymn");});
test("hymns -> hymn", function() {deepEqual( Stem("hymns"), "hymn");});
test("hyperboles -> hyperbol", function() {deepEqual( Stem("hyperboles"), "hyperbol");});
test("hyperbolical -> hyperbol", function() {deepEqual( Stem("hyperbolical"), "hyperbol");});
test("hyperion -> hyperion", function() {deepEqual( Stem("hyperion"), "hyperion");});
test("hypocrisy -> hypocrisi", function() {deepEqual( Stem("hypocrisy"), "hypocrisi");});
test("hypocrite -> hypocrit", function() {deepEqual( Stem("hypocrite"), "hypocrit");});
test("hypocrites -> hypocrit", function() {deepEqual( Stem("hypocrites"), "hypocrit");});
test("hypocritical -> hypocrit", function() {deepEqual( Stem("hypocritical"), "hypocrit");});
test("hyrcan -> hyrcan", function() {deepEqual( Stem("hyrcan"), "hyrcan");});
test("hyrcania -> hyrcania", function() {deepEqual( Stem("hyrcania"), "hyrcania");});
test("hyrcanian -> hyrcanian", function() {deepEqual( Stem("hyrcanian"), "hyrcanian");});
test("hyssop -> hyssop", function() {deepEqual( Stem("hyssop"), "hyssop");});
test("hysteric -> hyster", function() {deepEqual( Stem("hysteric"), "hyster");});
test("hysterica -> hysterica", function() {deepEqual( Stem("hysterica"), "hysterica");});
test("hysterical -> hyster", function() {deepEqual( Stem("hysterical"), "hyster");});
test("hysterically -> hyster", function() {deepEqual( Stem("hysterically"), "hyster");});
test("hysterics -> hyster", function() {deepEqual( Stem("hysterics"), "hyster");});
test("i -> i", function() {deepEqual( Stem("i"), "i");});
test("iachimo -> iachimo", function() {deepEqual( Stem("iachimo"), "iachimo");});
test("iaculis -> iaculi", function() {deepEqual( Stem("iaculis"), "iaculi");});
test("iago -> iago", function() {deepEqual( Stem("iago"), "iago");});
test("iament -> iament", function() {deepEqual( Stem("iament"), "iament");});
test("ibat -> ibat", function() {deepEqual( Stem("ibat"), "ibat");});
test("icarus -> icaru", function() {deepEqual( Stem("icarus"), "icaru");});
test("ice -> ic", function() {deepEqual( Stem("ice"), "ic");});
test("iced -> ic", function() {deepEqual( Stem("iced"), "ic");});
test("iceland -> iceland", function() {deepEqual( Stem("iceland"), "iceland");});
test("ices -> ic", function() {deepEqual( Stem("ices"), "ic");});
test("ich -> ich", function() {deepEqual( Stem("ich"), "ich");});
test("ici -> ici", function() {deepEqual( Stem("ici"), "ici");});
test("icicle -> icicl", function() {deepEqual( Stem("icicle"), "icicl");});
test("icicles -> icicl", function() {deepEqual( Stem("icicles"), "icicl");});
test("icy -> ici", function() {deepEqual( Stem("icy"), "ici");});
test("ida -> ida", function() {deepEqual( Stem("ida"), "ida");});
test("idea -> idea", function() {deepEqual( Stem("idea"), "idea");});
test("ideal -> ideal", function() {deepEqual( Stem("ideal"), "ideal");});
test("ideas -> idea", function() {deepEqual( Stem("ideas"), "idea");});
test("idem -> idem", function() {deepEqual( Stem("idem"), "idem");});
test("iden -> iden", function() {deepEqual( Stem("iden"), "iden");});
test("identical -> ident", function() {deepEqual( Stem("identical"), "ident");});
test("ides -> id", function() {deepEqual( Stem("ides"), "id");});
test("idiom -> idiom", function() {deepEqual( Stem("idiom"), "idiom");});
test("idiot -> idiot", function() {deepEqual( Stem("idiot"), "idiot");});
test("idiots -> idiot", function() {deepEqual( Stem("idiots"), "idiot");});
test("idle -> idl", function() {deepEqual( Stem("idle"), "idl");});
test("idled -> idl", function() {deepEqual( Stem("idled"), "idl");});
test("idleness -> idl", function() {deepEqual( Stem("idleness"), "idl");});
test("idlers -> idler", function() {deepEqual( Stem("idlers"), "idler");});
test("idles -> idl", function() {deepEqual( Stem("idles"), "idl");});
test("idly -> idli", function() {deepEqual( Stem("idly"), "idli");});
test("idol -> idol", function() {deepEqual( Stem("idol"), "idol");});
test("idolatrous -> idolatr", function() {deepEqual( Stem("idolatrous"), "idolatr");});
test("idolatry -> idolatri", function() {deepEqual( Stem("idolatry"), "idolatri");});
test("idolizes -> idol", function() {deepEqual( Stem("idolizes"), "idol");});
test("idols -> idol", function() {deepEqual( Stem("idols"), "idol");});
test("ied -> i", function() {deepEqual( Stem("ied"), "i");});
test("ield -> ield", function() {deepEqual( Stem("ield"), "ield");});
test("if -> if", function() {deepEqual( Stem("if"), "if");});
test("iffley -> ifflei", function() {deepEqual( Stem("iffley"), "ifflei");});
test("ifs -> if", function() {deepEqual( Stem("ifs"), "if");});
test("ignis -> igni", function() {deepEqual( Stem("ignis"), "igni");});
test("ignoble -> ignobl", function() {deepEqual( Stem("ignoble"), "ignobl");});
test("ignobly -> ignobli", function() {deepEqual( Stem("ignobly"), "ignobli");});
test("ignominious -> ignomini", function() {deepEqual( Stem("ignominious"), "ignomini");});
test("ignominy -> ignomini", function() {deepEqual( Stem("ignominy"), "ignomini");});
test("ignomy -> ignomi", function() {deepEqual( Stem("ignomy"), "ignomi");});
test("ignorance -> ignor", function() {deepEqual( Stem("ignorance"), "ignor");});
test("ignorant -> ignor", function() {deepEqual( Stem("ignorant"), "ignor");});
test("ignore -> ignor", function() {deepEqual( Stem("ignore"), "ignor");});
test("ignored -> ignor", function() {deepEqual( Stem("ignored"), "ignor");});
test("ii -> ii", function() {deepEqual( Stem("ii"), "ii");});
test("iii -> iii", function() {deepEqual( Stem("iii"), "iii");});
test("iiii -> iiii", function() {deepEqual( Stem("iiii"), "iiii");});
test("il -> il", function() {deepEqual( Stem("il"), "il");});
test("ilbow -> ilbow", function() {deepEqual( Stem("ilbow"), "ilbow");});
test("ild -> ild", function() {deepEqual( Stem("ild"), "ild");});
test("ilion -> ilion", function() {deepEqual( Stem("ilion"), "ilion");});
test("ilium -> ilium", function() {deepEqual( Stem("ilium"), "ilium");});
test("ill -> ill", function() {deepEqual( Stem("ill"), "ill");});
test("illegibility -> illeg", function() {deepEqual( Stem("illegibility"), "illeg");});
test("illegitimate -> illegitim", function() {deepEqual( Stem("illegitimate"), "illegitim");});
test("illiterate -> illiter", function() {deepEqual( Stem("illiterate"), "illiter");});
test("illness -> ill", function() {deepEqual( Stem("illness"), "ill");});
test("illnesses -> ill", function() {deepEqual( Stem("illnesses"), "ill");});
test("illo -> illo", function() {deepEqual( Stem("illo"), "illo");});
test("ills -> ill", function() {deepEqual( Stem("ills"), "ill");});
test("illume -> illum", function() {deepEqual( Stem("illume"), "illum");});
test("illumin -> illumin", function() {deepEqual( Stem("illumin"), "illumin");});
test("illuminate -> illumin", function() {deepEqual( Stem("illuminate"), "illumin");});
test("illuminated -> illumin", function() {deepEqual( Stem("illuminated"), "illumin");});
test("illumination -> illumin", function() {deepEqual( Stem("illumination"), "illumin");});
test("illuminations -> illumin", function() {deepEqual( Stem("illuminations"), "illumin");});
test("illumineth -> illumineth", function() {deepEqual( Stem("illumineth"), "illumineth");});
test("illusion -> illus", function() {deepEqual( Stem("illusion"), "illus");});
test("illusions -> illus", function() {deepEqual( Stem("illusions"), "illus");});
test("illustrate -> illustr", function() {deepEqual( Stem("illustrate"), "illustr");});
test("illustrated -> illustr", function() {deepEqual( Stem("illustrated"), "illustr");});
test("illustrative -> illustr", function() {deepEqual( Stem("illustrative"), "illustr");});
test("illustrious -> illustri", function() {deepEqual( Stem("illustrious"), "illustri");});
test("illyria -> illyria", function() {deepEqual( Stem("illyria"), "illyria");});
test("illyrian -> illyrian", function() {deepEqual( Stem("illyrian"), "illyrian");});
test("ils -> il", function() {deepEqual( Stem("ils"), "il");});
test("ilyssus -> ilyssu", function() {deepEqual( Stem("ilyssus"), "ilyssu");});
test("im -> im", function() {deepEqual( Stem("im"), "im");});
test("image -> imag", function() {deepEqual( Stem("image"), "imag");});
test("imagery -> imageri", function() {deepEqual( Stem("imagery"), "imageri");});
test("images -> imag", function() {deepEqual( Stem("images"), "imag");});
test("imagin -> imagin", function() {deepEqual( Stem("imagin"), "imagin");});
test("imaginable -> imagin", function() {deepEqual( Stem("imaginable"), "imagin");});
test("imaginary -> imaginari", function() {deepEqual( Stem("imaginary"), "imaginari");});
test("imagination -> imagin", function() {deepEqual( Stem("imagination"), "imagin");});
test("imaginations -> imagin", function() {deepEqual( Stem("imaginations"), "imagin");});
test("imagine -> imagin", function() {deepEqual( Stem("imagine"), "imagin");});
test("imagined -> imagin", function() {deepEqual( Stem("imagined"), "imagin");});
test("imagining -> imagin", function() {deepEqual( Stem("imagining"), "imagin");});
test("imaginings -> imagin", function() {deepEqual( Stem("imaginings"), "imagin");});
test("imbar -> imbar", function() {deepEqual( Stem("imbar"), "imbar");});
test("imbecility -> imbecil", function() {deepEqual( Stem("imbecility"), "imbecil");});
test("imbibed -> imbib", function() {deepEqual( Stem("imbibed"), "imbib");});
test("imbibing -> imbib", function() {deepEqual( Stem("imbibing"), "imbib");});
test("imbrue -> imbru", function() {deepEqual( Stem("imbrue"), "imbru");});
test("imitari -> imitari", function() {deepEqual( Stem("imitari"), "imitari");});
test("imitate -> imit", function() {deepEqual( Stem("imitate"), "imit");});
test("imitated -> imit", function() {deepEqual( Stem("imitated"), "imit");});
test("imitating -> imit", function() {deepEqual( Stem("imitating"), "imit");});
test("imitation -> imit", function() {deepEqual( Stem("imitation"), "imit");});
test("imitations -> imit", function() {deepEqual( Stem("imitations"), "imit");});
test("immaculate -> immacul", function() {deepEqual( Stem("immaculate"), "immacul");});
test("immanity -> imman", function() {deepEqual( Stem("immanity"), "imman");});
test("immask -> immask", function() {deepEqual( Stem("immask"), "immask");});
test("immaterial -> immateri", function() {deepEqual( Stem("immaterial"), "immateri");});
test("immeasurably -> immeasur", function() {deepEqual( Stem("immeasurably"), "immeasur");});
test("immediacy -> immediaci", function() {deepEqual( Stem("immediacy"), "immediaci");});
test("immediate -> immedi", function() {deepEqual( Stem("immediate"), "immedi");});
test("immediately -> immedi", function() {deepEqual( Stem("immediately"), "immedi");});
test("immemorial -> immemori", function() {deepEqual( Stem("immemorial"), "immemori");});
test("immense -> immens", function() {deepEqual( Stem("immense"), "immens");});
test("immensely -> immens", function() {deepEqual( Stem("immensely"), "immens");});
test("immersed -> immers", function() {deepEqual( Stem("immersed"), "immers");});
test("imminence -> immin", function() {deepEqual( Stem("imminence"), "immin");});
test("imminent -> immin", function() {deepEqual( Stem("imminent"), "immin");});
test("immoderate -> immoder", function() {deepEqual( Stem("immoderate"), "immoder");});
test("immoderately -> immoder", function() {deepEqual( Stem("immoderately"), "immoder");});
test("immodest -> immodest", function() {deepEqual( Stem("immodest"), "immodest");});
test("immolating -> immol", function() {deepEqual( Stem("immolating"), "immol");});
test("immoment -> immoment", function() {deepEqual( Stem("immoment"), "immoment");});
test("immoral -> immor", function() {deepEqual( Stem("immoral"), "immor");});
test("immoralist -> immoralist", function() {deepEqual( Stem("immoralist"), "immoralist");});
test("immortal -> immort", function() {deepEqual( Stem("immortal"), "immort");});
test("immortaliz -> immortaliz", function() {deepEqual( Stem("immortaliz"), "immortaliz");});
test("immortally -> immort", function() {deepEqual( Stem("immortally"), "immort");});
test("immur -> immur", function() {deepEqual( Stem("immur"), "immur");});
test("immured -> immur", function() {deepEqual( Stem("immured"), "immur");});
test("immures -> immur", function() {deepEqual( Stem("immures"), "immur");});
test("imogen -> imogen", function() {deepEqual( Stem("imogen"), "imogen");});
test("imp -> imp", function() {deepEqual( Stem("imp"), "imp");});
test("impaint -> impaint", function() {deepEqual( Stem("impaint"), "impaint");});
test("impair -> impair", function() {deepEqual( Stem("impair"), "impair");});
test("impaired -> impair", function() {deepEqual( Stem("impaired"), "impair");});
test("impairing -> impair", function() {deepEqual( Stem("impairing"), "impair");});
test("impale -> impal", function() {deepEqual( Stem("impale"), "impal");});
test("impaled -> impal", function() {deepEqual( Stem("impaled"), "impal");});
test("impanelled -> impanel", function() {deepEqual( Stem("impanelled"), "impanel");});
test("impart -> impart", function() {deepEqual( Stem("impart"), "impart");});
test("imparted -> impart", function() {deepEqual( Stem("imparted"), "impart");});
test("impartial -> imparti", function() {deepEqual( Stem("impartial"), "imparti");});
test("impartment -> impart", function() {deepEqual( Stem("impartment"), "impart");});
test("imparts -> impart", function() {deepEqual( Stem("imparts"), "impart");});
test("impassable -> impass", function() {deepEqual( Stem("impassable"), "impass");});
test("impasted -> impast", function() {deepEqual( Stem("impasted"), "impast");});
test("impatience -> impati", function() {deepEqual( Stem("impatience"), "impati");});
test("impatient -> impati", function() {deepEqual( Stem("impatient"), "impati");});
test("impatiently -> impati", function() {deepEqual( Stem("impatiently"), "impati");});
test("impawn -> impawn", function() {deepEqual( Stem("impawn"), "impawn");});
test("impeach -> impeach", function() {deepEqual( Stem("impeach"), "impeach");});
test("impeached -> impeach", function() {deepEqual( Stem("impeached"), "impeach");});
test("impeachment -> impeach", function() {deepEqual( Stem("impeachment"), "impeach");});
test("impeachments -> impeach", function() {deepEqual( Stem("impeachments"), "impeach");});
test("impedes -> imped", function() {deepEqual( Stem("impedes"), "imped");});
test("impediment -> impedi", function() {deepEqual( Stem("impediment"), "impedi");});
test("impediments -> impedi", function() {deepEqual( Stem("impediments"), "impedi");});
test("impending -> impend", function() {deepEqual( Stem("impending"), "impend");});
test("impenetrable -> impenetr", function() {deepEqual( Stem("impenetrable"), "impenetr");});
test("imperative -> imper", function() {deepEqual( Stem("imperative"), "imper");});
test("imperator -> imper", function() {deepEqual( Stem("imperator"), "imper");});
test("imperceiverant -> imperceiver", function() {deepEqual( Stem("imperceiverant"), "imperceiver");});
test("imperfect -> imperfect", function() {deepEqual( Stem("imperfect"), "imperfect");});
test("imperfection -> imperfect", function() {deepEqual( Stem("imperfection"), "imperfect");});
test("imperfections -> imperfect", function() {deepEqual( Stem("imperfections"), "imperfect");});
test("imperfectly -> imperfectli", function() {deepEqual( Stem("imperfectly"), "imperfectli");});
test("imperial -> imperi", function() {deepEqual( Stem("imperial"), "imperi");});
test("imperials -> imperi", function() {deepEqual( Stem("imperials"), "imperi");});
test("imperious -> imperi", function() {deepEqual( Stem("imperious"), "imperi");});
test("imperiously -> imperi", function() {deepEqual( Stem("imperiously"), "imperi");});
test("imperiousness -> imperi", function() {deepEqual( Stem("imperiousness"), "imperi");});
test("impertinence -> impertin", function() {deepEqual( Stem("impertinence"), "impertin");});
test("impertinences -> impertin", function() {deepEqual( Stem("impertinences"), "impertin");});
test("impertinency -> impertin", function() {deepEqual( Stem("impertinency"), "impertin");});
test("impertinent -> impertin", function() {deepEqual( Stem("impertinent"), "impertin");});
test("impeticos -> impetico", function() {deepEqual( Stem("impeticos"), "impetico");});
test("impetuosity -> impetuos", function() {deepEqual( Stem("impetuosity"), "impetuos");});
test("impetuous -> impetu", function() {deepEqual( Stem("impetuous"), "impetu");});
test("impetuously -> impetu", function() {deepEqual( Stem("impetuously"), "impetu");});
test("impieties -> impieti", function() {deepEqual( Stem("impieties"), "impieti");});
test("impiety -> impieti", function() {deepEqual( Stem("impiety"), "impieti");});
test("impious -> impiou", function() {deepEqual( Stem("impious"), "impiou");});
test("impiously -> impious", function() {deepEqual( Stem("impiously"), "impious");});
test("implacable -> implac", function() {deepEqual( Stem("implacable"), "implac");});
test("implement -> implement", function() {deepEqual( Stem("implement"), "implement");});
test("implements -> implement", function() {deepEqual( Stem("implements"), "implement");});
test("implicated -> implic", function() {deepEqual( Stem("implicated"), "implic");});
test("implicitly -> implicitli", function() {deepEqual( Stem("implicitly"), "implicitli");});
test("implies -> impli", function() {deepEqual( Stem("implies"), "impli");});
test("implor -> implor", function() {deepEqual( Stem("implor"), "implor");});
test("implorators -> implor", function() {deepEqual( Stem("implorators"), "implor");});
test("implore -> implor", function() {deepEqual( Stem("implore"), "implor");});
test("implored -> implor", function() {deepEqual( Stem("implored"), "implor");});
test("imploring -> implor", function() {deepEqual( Stem("imploring"), "implor");});
test("imploringly -> imploringli", function() {deepEqual( Stem("imploringly"), "imploringli");});
test("impon -> impon", function() {deepEqual( Stem("impon"), "impon");});
test("import -> import", function() {deepEqual( Stem("import"), "import");});
test("importance -> import", function() {deepEqual( Stem("importance"), "import");});
test("importancy -> import", function() {deepEqual( Stem("importancy"), "import");});
test("important -> import", function() {deepEqual( Stem("important"), "import");});
test("importantly -> importantli", function() {deepEqual( Stem("importantly"), "importantli");});
test("imported -> import", function() {deepEqual( Stem("imported"), "import");});
test("importeth -> importeth", function() {deepEqual( Stem("importeth"), "importeth");});
test("importing -> import", function() {deepEqual( Stem("importing"), "import");});
test("importless -> importless", function() {deepEqual( Stem("importless"), "importless");});
test("imports -> import", function() {deepEqual( Stem("imports"), "import");});
test("importun -> importun", function() {deepEqual( Stem("importun"), "importun");});
test("importunacy -> importunaci", function() {deepEqual( Stem("importunacy"), "importunaci");});
test("importunate -> importun", function() {deepEqual( Stem("importunate"), "importun");});
test("importune -> importun", function() {deepEqual( Stem("importune"), "importun");});
test("importunes -> importun", function() {deepEqual( Stem("importunes"), "importun");});
test("importunity -> importun", function() {deepEqual( Stem("importunity"), "importun");});
test("impos -> impo", function() {deepEqual( Stem("impos"), "impo");});
test("impose -> impos", function() {deepEqual( Stem("impose"), "impos");});
test("imposed -> impos", function() {deepEqual( Stem("imposed"), "impos");});
test("imposing -> impos", function() {deepEqual( Stem("imposing"), "impos");});
test("imposition -> imposit", function() {deepEqual( Stem("imposition"), "imposit");});
test("impositions -> imposit", function() {deepEqual( Stem("impositions"), "imposit");});
test("impossibilities -> imposs", function() {deepEqual( Stem("impossibilities"), "imposs");});
test("impossibility -> imposs", function() {deepEqual( Stem("impossibility"), "imposs");});
test("impossible -> imposs", function() {deepEqual( Stem("impossible"), "imposs");});
test("imposter -> impost", function() {deepEqual( Stem("imposter"), "impost");});
test("imposthume -> imposthum", function() {deepEqual( Stem("imposthume"), "imposthum");});
test("impostor -> impostor", function() {deepEqual( Stem("impostor"), "impostor");});
test("impostors -> impostor", function() {deepEqual( Stem("impostors"), "impostor");});
test("impotence -> impot", function() {deepEqual( Stem("impotence"), "impot");});
test("impotent -> impot", function() {deepEqual( Stem("impotent"), "impot");});
test("impounded -> impound", function() {deepEqual( Stem("impounded"), "impound");});
test("impoverish -> impoverish", function() {deepEqual( Stem("impoverish"), "impoverish");});
test("impracticable -> impractic", function() {deepEqual( Stem("impracticable"), "impractic");});
test("imprecations -> imprec", function() {deepEqual( Stem("imprecations"), "imprec");});
test("impregnable -> impregn", function() {deepEqual( Stem("impregnable"), "impregn");});
test("imprese -> impres", function() {deepEqual( Stem("imprese"), "impres");});
test("impress -> impress", function() {deepEqual( Stem("impress"), "impress");});
test("impressed -> impress", function() {deepEqual( Stem("impressed"), "impress");});
test("impressest -> impressest", function() {deepEqual( Stem("impressest"), "impressest");});
test("impression -> impress", function() {deepEqual( Stem("impression"), "impress");});
test("impressions -> impress", function() {deepEqual( Stem("impressions"), "impress");});
test("impressive -> impress", function() {deepEqual( Stem("impressive"), "impress");});
test("impressure -> impressur", function() {deepEqual( Stem("impressure"), "impressur");});
test("imprimendum -> imprimendum", function() {deepEqual( Stem("imprimendum"), "imprimendum");});
test("imprimis -> imprimi", function() {deepEqual( Stem("imprimis"), "imprimi");});
test("imprint -> imprint", function() {deepEqual( Stem("imprint"), "imprint");});
test("imprinted -> imprint", function() {deepEqual( Stem("imprinted"), "imprint");});
test("imprison -> imprison", function() {deepEqual( Stem("imprison"), "imprison");});
test("imprisoned -> imprison", function() {deepEqual( Stem("imprisoned"), "imprison");});
test("imprisoning -> imprison", function() {deepEqual( Stem("imprisoning"), "imprison");});
test("imprisonment -> imprison", function() {deepEqual( Stem("imprisonment"), "imprison");});
test("improbable -> improb", function() {deepEqual( Stem("improbable"), "improb");});
test("improper -> improp", function() {deepEqual( Stem("improper"), "improp");});
test("improve -> improv", function() {deepEqual( Stem("improve"), "improv");});
test("improved -> improv", function() {deepEqual( Stem("improved"), "improv");});
test("improvements -> improv", function() {deepEqual( Stem("improvements"), "improv");});
test("improvidence -> improvid", function() {deepEqual( Stem("improvidence"), "improvid");});
test("improvident -> improvid", function() {deepEqual( Stem("improvident"), "improvid");});
test("imprudence -> imprud", function() {deepEqual( Stem("imprudence"), "imprud");});
test("imprudences -> imprud", function() {deepEqual( Stem("imprudences"), "imprud");});
test("imprudent -> imprud", function() {deepEqual( Stem("imprudent"), "imprud");});
test("impudence -> impud", function() {deepEqual( Stem("impudence"), "impud");});
test("impudency -> impud", function() {deepEqual( Stem("impudency"), "impud");});
test("impudent -> impud", function() {deepEqual( Stem("impudent"), "impud");});
test("impudently -> impud", function() {deepEqual( Stem("impudently"), "impud");});
test("impudique -> impudiqu", function() {deepEqual( Stem("impudique"), "impudiqu");});
test("impugn -> impugn", function() {deepEqual( Stem("impugn"), "impugn");});
test("impugns -> impugn", function() {deepEqual( Stem("impugns"), "impugn");});
test("impulse -> impuls", function() {deepEqual( Stem("impulse"), "impuls");});
test("impure -> impur", function() {deepEqual( Stem("impure"), "impur");});
test("imputation -> imput", function() {deepEqual( Stem("imputation"), "imput");});
test("impute -> imput", function() {deepEqual( Stem("impute"), "imput");});
test("in -> in", function() {deepEqual( Stem("in"), "in");});
test("inaccessible -> inaccess", function() {deepEqual( Stem("inaccessible"), "inaccess");});
test("inaidable -> inaid", function() {deepEqual( Stem("inaidable"), "inaid");});
test("inamorato -> inamorato", function() {deepEqual( Stem("inamorato"), "inamorato");});
test("inarticulate -> inarticul", function() {deepEqual( Stem("inarticulate"), "inarticul");});
test("inarticulately -> inarticul", function() {deepEqual( Stem("inarticulately"), "inarticul");});
test("inattention -> inattent", function() {deepEqual( Stem("inattention"), "inattent");});
test("inaudible -> inaud", function() {deepEqual( Stem("inaudible"), "inaud");});
test("inauspicious -> inauspici", function() {deepEqual( Stem("inauspicious"), "inauspici");});
test("incaged -> incag", function() {deepEqual( Stem("incaged"), "incag");});
test("incantations -> incant", function() {deepEqual( Stem("incantations"), "incant");});
test("incapable -> incap", function() {deepEqual( Stem("incapable"), "incap");});
test("incapacitate -> incapacit", function() {deepEqual( Stem("incapacitate"), "incapacit");});
test("incapacity -> incapac", function() {deepEqual( Stem("incapacity"), "incapac");});
test("incardinate -> incardin", function() {deepEqual( Stem("incardinate"), "incardin");});
test("incarnadine -> incarnadin", function() {deepEqual( Stem("incarnadine"), "incarnadin");});
test("incarnate -> incarn", function() {deepEqual( Stem("incarnate"), "incarn");});
test("incarnation -> incarn", function() {deepEqual( Stem("incarnation"), "incarn");});
test("incens -> incen", function() {deepEqual( Stem("incens"), "incen");});
test("incense -> incens", function() {deepEqual( Stem("incense"), "incens");});
test("incensed -> incens", function() {deepEqual( Stem("incensed"), "incens");});
test("incensement -> incens", function() {deepEqual( Stem("incensement"), "incens");});
test("incenses -> incens", function() {deepEqual( Stem("incenses"), "incens");});
test("incensing -> incens", function() {deepEqual( Stem("incensing"), "incens");});
test("incentive -> incent", function() {deepEqual( Stem("incentive"), "incent");});
test("incertain -> incertain", function() {deepEqual( Stem("incertain"), "incertain");});
test("incertainties -> incertainti", function() {deepEqual( Stem("incertainties"), "incertainti");});
test("incertainty -> incertainti", function() {deepEqual( Stem("incertainty"), "incertainti");});
test("incessant -> incess", function() {deepEqual( Stem("incessant"), "incess");});
test("incessantly -> incessantli", function() {deepEqual( Stem("incessantly"), "incessantli");});
test("incest -> incest", function() {deepEqual( Stem("incest"), "incest");});
test("incestuous -> incestu", function() {deepEqual( Stem("incestuous"), "incestu");});
test("inch -> inch", function() {deepEqual( Stem("inch"), "inch");});
test("incharitable -> incharit", function() {deepEqual( Stem("incharitable"), "incharit");});
test("inches -> inch", function() {deepEqual( Stem("inches"), "inch");});
test("incidency -> incid", function() {deepEqual( Stem("incidency"), "incid");});
test("incident -> incid", function() {deepEqual( Stem("incident"), "incid");});
test("incidents -> incid", function() {deepEqual( Stem("incidents"), "incid");});
test("incision -> incis", function() {deepEqual( Stem("incision"), "incis");});
test("incite -> incit", function() {deepEqual( Stem("incite"), "incit");});
test("incited -> incit", function() {deepEqual( Stem("incited"), "incit");});
test("incites -> incit", function() {deepEqual( Stem("incites"), "incit");});
test("incivil -> incivil", function() {deepEqual( Stem("incivil"), "incivil");});
test("incivility -> incivil", function() {deepEqual( Stem("incivility"), "incivil");});
test("inclin -> inclin", function() {deepEqual( Stem("inclin"), "inclin");});
test("inclinable -> inclin", function() {deepEqual( Stem("inclinable"), "inclin");});
test("inclination -> inclin", function() {deepEqual( Stem("inclination"), "inclin");});
test("incline -> inclin", function() {deepEqual( Stem("incline"), "inclin");});
test("inclined -> inclin", function() {deepEqual( Stem("inclined"), "inclin");});
test("inclines -> inclin", function() {deepEqual( Stem("inclines"), "inclin");});
test("inclining -> inclin", function() {deepEqual( Stem("inclining"), "inclin");});
test("inclips -> inclip", function() {deepEqual( Stem("inclips"), "inclip");});
test("inclosed -> inclos", function() {deepEqual( Stem("inclosed"), "inclos");});
test("inclosure -> inclosur", function() {deepEqual( Stem("inclosure"), "inclosur");});
test("include -> includ", function() {deepEqual( Stem("include"), "includ");});
test("included -> includ", function() {deepEqual( Stem("included"), "includ");});
test("includes -> includ", function() {deepEqual( Stem("includes"), "includ");});
test("including -> includ", function() {deepEqual( Stem("including"), "includ");});
test("inclusive -> inclus", function() {deepEqual( Stem("inclusive"), "inclus");});
test("incoherent -> incoher", function() {deepEqual( Stem("incoherent"), "incoher");});
test("incoherently -> incoher", function() {deepEqual( Stem("incoherently"), "incoher");});
test("income -> incom", function() {deepEqual( Stem("income"), "incom");});
test("incomings -> incom", function() {deepEqual( Stem("incomings"), "incom");});
test("incomparable -> incompar", function() {deepEqual( Stem("incomparable"), "incompar");});
test("incomparably -> incompar", function() {deepEqual( Stem("incomparably"), "incompar");});
test("incompetency -> incompet", function() {deepEqual( Stem("incompetency"), "incompet");});
test("incomplete -> incomplet", function() {deepEqual( Stem("incomplete"), "incomplet");});
test("incomprehensible -> incomprehens", function() {deepEqual( Stem("incomprehensible"), "incomprehens");});
test("incongruous -> incongru", function() {deepEqual( Stem("incongruous"), "incongru");});
test("inconsiderate -> inconsider", function() {deepEqual( Stem("inconsiderate"), "inconsider");});
test("inconstancy -> inconst", function() {deepEqual( Stem("inconstancy"), "inconst");});
test("inconstant -> inconst", function() {deepEqual( Stem("inconstant"), "inconst");});
test("incontinency -> incontin", function() {deepEqual( Stem("incontinency"), "incontin");});
test("incontinent -> incontin", function() {deepEqual( Stem("incontinent"), "incontin");});
test("incontinently -> incontin", function() {deepEqual( Stem("incontinently"), "incontin");});
test("inconvenience -> inconveni", function() {deepEqual( Stem("inconvenience"), "inconveni");});
test("inconvenienced -> inconvenienc", function() {deepEqual( Stem("inconvenienced"), "inconvenienc");});
test("inconveniences -> inconveni", function() {deepEqual( Stem("inconveniences"), "inconveni");});
test("inconvenient -> inconveni", function() {deepEqual( Stem("inconvenient"), "inconveni");});
test("incony -> inconi", function() {deepEqual( Stem("incony"), "inconi");});
test("incorporate -> incorpor", function() {deepEqual( Stem("incorporate"), "incorpor");});
test("incorps -> incorp", function() {deepEqual( Stem("incorps"), "incorp");});
test("incorrect -> incorrect", function() {deepEqual( Stem("incorrect"), "incorrect");});
test("incorrectness -> incorrect", function() {deepEqual( Stem("incorrectness"), "incorrect");});
test("incorrigible -> incorrig", function() {deepEqual( Stem("incorrigible"), "incorrig");});
test("increas -> increa", function() {deepEqual( Stem("increas"), "increa");});
test("increase -> increas", function() {deepEqual( Stem("increase"), "increas");});
test("increased -> increas", function() {deepEqual( Stem("increased"), "increas");});
test("increases -> increas", function() {deepEqual( Stem("increases"), "increas");});
test("increaseth -> increaseth", function() {deepEqual( Stem("increaseth"), "increaseth");});
test("increasing -> increas", function() {deepEqual( Stem("increasing"), "increas");});
test("incredible -> incred", function() {deepEqual( Stem("incredible"), "incred");});
test("incredulity -> incredul", function() {deepEqual( Stem("incredulity"), "incredul");});
test("incredulous -> incredul", function() {deepEqual( Stem("incredulous"), "incredul");});
test("inculcated -> inculc", function() {deepEqual( Stem("inculcated"), "inculc");});
test("incumbent -> incumb", function() {deepEqual( Stem("incumbent"), "incumb");});
test("incumbrances -> incumbr", function() {deepEqual( Stem("incumbrances"), "incumbr");});
test("incur -> incur", function() {deepEqual( Stem("incur"), "incur");});
test("incurable -> incur", function() {deepEqual( Stem("incurable"), "incur");});
test("incurr -> incurr", function() {deepEqual( Stem("incurr"), "incurr");});
test("incurred -> incur", function() {deepEqual( Stem("incurred"), "incur");});
test("incurring -> incur", function() {deepEqual( Stem("incurring"), "incur");});
test("incursions -> incurs", function() {deepEqual( Stem("incursions"), "incurs");});
test("ind -> ind", function() {deepEqual( Stem("ind"), "ind");});
test("inde -> ind", function() {deepEqual( Stem("inde"), "ind");});
test("indebted -> indebt", function() {deepEqual( Stem("indebted"), "indebt");});
test("indecent -> indec", function() {deepEqual( Stem("indecent"), "indec");});
test("indecorous -> indecor", function() {deepEqual( Stem("indecorous"), "indecor");});
test("indeed -> inde", function() {deepEqual( Stem("indeed"), "inde");});
test("indefatigable -> indefatig", function() {deepEqual( Stem("indefatigable"), "indefatig");});
test("indefinite -> indefinit", function() {deepEqual( Stem("indefinite"), "indefinit");});
test("indelible -> indel", function() {deepEqual( Stem("indelible"), "indel");});
test("indent -> indent", function() {deepEqual( Stem("indent"), "indent");});
test("indented -> indent", function() {deepEqual( Stem("indented"), "indent");});
test("indenture -> indentur", function() {deepEqual( Stem("indenture"), "indentur");});
test("indentures -> indentur", function() {deepEqual( Stem("indentures"), "indentur");});
test("independence -> independ", function() {deepEqual( Stem("independence"), "independ");});
test("independent -> independ", function() {deepEqual( Stem("independent"), "independ");});
test("indescribably -> indescrib", function() {deepEqual( Stem("indescribably"), "indescrib");});
test("index -> index", function() {deepEqual( Stem("index"), "index");});
test("indexes -> index", function() {deepEqual( Stem("indexes"), "index");});
test("india -> india", function() {deepEqual( Stem("india"), "india");});
test("indiaman -> indiaman", function() {deepEqual( Stem("indiaman"), "indiaman");});
test("indian -> indian", function() {deepEqual( Stem("indian"), "indian");});
test("indians -> indian", function() {deepEqual( Stem("indians"), "indian");});
test("indicate -> indic", function() {deepEqual( Stem("indicate"), "indic");});
test("indicated -> indic", function() {deepEqual( Stem("indicated"), "indic");});
test("indicative -> indic", function() {deepEqual( Stem("indicative"), "indic");});
test("indict -> indict", function() {deepEqual( Stem("indict"), "indict");});
test("indicted -> indict", function() {deepEqual( Stem("indicted"), "indict");});
test("indictment -> indict", function() {deepEqual( Stem("indictment"), "indict");});
test("indies -> indi", function() {deepEqual( Stem("indies"), "indi");});
test("indifference -> indiffer", function() {deepEqual( Stem("indifference"), "indiffer");});
test("indifferency -> indiffer", function() {deepEqual( Stem("indifferency"), "indiffer");});
test("indifferent -> indiffer", function() {deepEqual( Stem("indifferent"), "indiffer");});
test("indifferently -> indiffer", function() {deepEqual( Stem("indifferently"), "indiffer");});
test("indigent -> indig", function() {deepEqual( Stem("indigent"), "indig");});
test("indigest -> indigest", function() {deepEqual( Stem("indigest"), "indigest");});
test("indigested -> indigest", function() {deepEqual( Stem("indigested"), "indigest");});
test("indign -> indign", function() {deepEqual( Stem("indign"), "indign");});
test("indignant -> indign", function() {deepEqual( Stem("indignant"), "indign");});
test("indignantly -> indignantli", function() {deepEqual( Stem("indignantly"), "indignantli");});
test("indignation -> indign", function() {deepEqual( Stem("indignation"), "indign");});
test("indignations -> indign", function() {deepEqual( Stem("indignations"), "indign");});
test("indigne -> indign", function() {deepEqual( Stem("indigne"), "indign");});
test("indignities -> indign", function() {deepEqual( Stem("indignities"), "indign");});
test("indignity -> indign", function() {deepEqual( Stem("indignity"), "indign");});
test("indirect -> indirect", function() {deepEqual( Stem("indirect"), "indirect");});
test("indirection -> indirect", function() {deepEqual( Stem("indirection"), "indirect");});
test("indirections -> indirect", function() {deepEqual( Stem("indirections"), "indirect");});
test("indirectly -> indirectli", function() {deepEqual( Stem("indirectly"), "indirectli");});
test("indiscreet -> indiscreet", function() {deepEqual( Stem("indiscreet"), "indiscreet");});
test("indiscreetly -> indiscreetli", function() {deepEqual( Stem("indiscreetly"), "indiscreetli");});
test("indiscretion -> indiscret", function() {deepEqual( Stem("indiscretion"), "indiscret");});
test("indispos -> indispo", function() {deepEqual( Stem("indispos"), "indispo");});
test("indisposed -> indispos", function() {deepEqual( Stem("indisposed"), "indispos");});
test("indisposition -> indisposit", function() {deepEqual( Stem("indisposition"), "indisposit");});
test("indisputable -> indisput", function() {deepEqual( Stem("indisputable"), "indisput");});
test("indissoluble -> indissolubl", function() {deepEqual( Stem("indissoluble"), "indissolubl");});
test("indistinct -> indistinct", function() {deepEqual( Stem("indistinct"), "indistinct");});
test("indistinguish -> indistinguish", function() {deepEqual( Stem("indistinguish"), "indistinguish");});
test("indistinguishable -> indistinguish", function() {deepEqual( Stem("indistinguishable"), "indistinguish");});
test("indited -> indit", function() {deepEqual( Stem("indited"), "indit");});
test("individable -> individ", function() {deepEqual( Stem("individable"), "individ");});
test("individual -> individu", function() {deepEqual( Stem("individual"), "individu");});
test("indolence -> indol", function() {deepEqual( Stem("indolence"), "indol");});
test("indolent -> indol", function() {deepEqual( Stem("indolent"), "indol");});
test("indomitable -> indomit", function() {deepEqual( Stem("indomitable"), "indomit");});
test("indrench -> indrench", function() {deepEqual( Stem("indrench"), "indrench");});
test("indu -> indu", function() {deepEqual( Stem("indu"), "indu");});
test("indubitate -> indubit", function() {deepEqual( Stem("indubitate"), "indubit");});
test("induc -> induc", function() {deepEqual( Stem("induc"), "induc");});
test("induce -> induc", function() {deepEqual( Stem("induce"), "induc");});
test("induced -> induc", function() {deepEqual( Stem("induced"), "induc");});
test("inducement -> induc", function() {deepEqual( Stem("inducement"), "induc");});
test("induces -> induc", function() {deepEqual( Stem("induces"), "induc");});
test("inducted -> induct", function() {deepEqual( Stem("inducted"), "induct");});
test("induction -> induct", function() {deepEqual( Stem("induction"), "induct");});
test("inductions -> induct", function() {deepEqual( Stem("inductions"), "induct");});
test("indue -> indu", function() {deepEqual( Stem("indue"), "indu");});
test("indued -> indu", function() {deepEqual( Stem("indued"), "indu");});
test("indues -> indu", function() {deepEqual( Stem("indues"), "indu");});
test("indulge -> indulg", function() {deepEqual( Stem("indulge"), "indulg");});
test("indulged -> indulg", function() {deepEqual( Stem("indulged"), "indulg");});
test("indulgence -> indulg", function() {deepEqual( Stem("indulgence"), "indulg");});
test("indulgences -> indulg", function() {deepEqual( Stem("indulgences"), "indulg");});
test("indulgent -> indulg", function() {deepEqual( Stem("indulgent"), "indulg");});
test("indulgently -> indulg", function() {deepEqual( Stem("indulgently"), "indulg");});
test("indulging -> indulg", function() {deepEqual( Stem("indulging"), "indulg");});
test("indurance -> indur", function() {deepEqual( Stem("indurance"), "indur");});
test("industrious -> industri", function() {deepEqual( Stem("industrious"), "industri");});
test("industriously -> industri", function() {deepEqual( Stem("industriously"), "industri");});
test("industry -> industri", function() {deepEqual( Stem("industry"), "industri");});
test("inebriated -> inebri", function() {deepEqual( Stem("inebriated"), "inebri");});
test("inequality -> inequ", function() {deepEqual( Stem("inequality"), "inequ");});
test("inestimable -> inestim", function() {deepEqual( Stem("inestimable"), "inestim");});
test("inevitable -> inevit", function() {deepEqual( Stem("inevitable"), "inevit");});
test("inevitably -> inevit", function() {deepEqual( Stem("inevitably"), "inevit");});
test("inexecrable -> inexecr", function() {deepEqual( Stem("inexecrable"), "inexecr");});
test("inexorable -> inexor", function() {deepEqual( Stem("inexorable"), "inexor");});
test("inexperienced -> inexperienc", function() {deepEqual( Stem("inexperienced"), "inexperienc");});
test("inexplicable -> inexplic", function() {deepEqual( Stem("inexplicable"), "inexplic");});
test("inexpressible -> inexpress", function() {deepEqual( Stem("inexpressible"), "inexpress");});
test("inexpressibly -> inexpressibli", function() {deepEqual( Stem("inexpressibly"), "inexpressibli");});
test("infallible -> infal", function() {deepEqual( Stem("infallible"), "infal");});
test("infallibly -> infallibli", function() {deepEqual( Stem("infallibly"), "infallibli");});
test("infames -> infam", function() {deepEqual( Stem("infames"), "infam");});
test("infamonize -> infamon", function() {deepEqual( Stem("infamonize"), "infamon");});
test("infamous -> infam", function() {deepEqual( Stem("infamous"), "infam");});
test("infamously -> infam", function() {deepEqual( Stem("infamously"), "infam");});
test("infamy -> infami", function() {deepEqual( Stem("infamy"), "infami");});
test("infancy -> infanc", function() {deepEqual( Stem("infancy"), "infanc");});
test("infant -> infant", function() {deepEqual( Stem("infant"), "infant");});
test("infantine -> infantin", function() {deepEqual( Stem("infantine"), "infantin");});
test("infantry -> infantri", function() {deepEqual( Stem("infantry"), "infantri");});
test("infants -> infant", function() {deepEqual( Stem("infants"), "infant");});
test("infatuated -> infatu", function() {deepEqual( Stem("infatuated"), "infatu");});
test("infatuation -> infatu", function() {deepEqual( Stem("infatuation"), "infatu");});
test("infatyated -> infaty", function() {deepEqual( Stem("infatyated"), "infaty");});
test("infect -> infect", function() {deepEqual( Stem("infect"), "infect");});
test("infected -> infect", function() {deepEqual( Stem("infected"), "infect");});
test("infecting -> infect", function() {deepEqual( Stem("infecting"), "infect");});
test("infection -> infect", function() {deepEqual( Stem("infection"), "infect");});
test("infections -> infect", function() {deepEqual( Stem("infections"), "infect");});
test("infectious -> infecti", function() {deepEqual( Stem("infectious"), "infecti");});
test("infectiously -> infecti", function() {deepEqual( Stem("infectiously"), "infecti");});
test("infects -> infect", function() {deepEqual( Stem("infects"), "infect");});
test("infer -> infer", function() {deepEqual( Stem("infer"), "infer");});
test("inference -> infer", function() {deepEqual( Stem("inference"), "infer");});
test("inferior -> inferior", function() {deepEqual( Stem("inferior"), "inferior");});
test("inferiors -> inferior", function() {deepEqual( Stem("inferiors"), "inferior");});
test("infernal -> infern", function() {deepEqual( Stem("infernal"), "infern");});
test("inferr -> inferr", function() {deepEqual( Stem("inferr"), "inferr");});
test("inferred -> infer", function() {deepEqual( Stem("inferred"), "infer");});
test("inferreth -> inferreth", function() {deepEqual( Stem("inferreth"), "inferreth");});
test("inferring -> infer", function() {deepEqual( Stem("inferring"), "infer");});
test("infest -> infest", function() {deepEqual( Stem("infest"), "infest");});
test("infidel -> infidel", function() {deepEqual( Stem("infidel"), "infidel");});
test("infidels -> infidel", function() {deepEqual( Stem("infidels"), "infidel");});
test("infinite -> infinit", function() {deepEqual( Stem("infinite"), "infinit");});
test("infinitely -> infinit", function() {deepEqual( Stem("infinitely"), "infinit");});
test("infinitive -> infinit", function() {deepEqual( Stem("infinitive"), "infinit");});
test("infinity -> infin", function() {deepEqual( Stem("infinity"), "infin");});
test("infirm -> infirm", function() {deepEqual( Stem("infirm"), "infirm");});
test("infirmities -> infirm", function() {deepEqual( Stem("infirmities"), "infirm");});
test("infirmity -> infirm", function() {deepEqual( Stem("infirmity"), "infirm");});
test("infixed -> infix", function() {deepEqual( Stem("infixed"), "infix");});
test("infixing -> infix", function() {deepEqual( Stem("infixing"), "infix");});
test("inflam -> inflam", function() {deepEqual( Stem("inflam"), "inflam");});
test("inflame -> inflam", function() {deepEqual( Stem("inflame"), "inflam");});
test("inflamed -> inflam", function() {deepEqual( Stem("inflamed"), "inflam");});
test("inflaming -> inflam", function() {deepEqual( Stem("inflaming"), "inflam");});
test("inflammation -> inflamm", function() {deepEqual( Stem("inflammation"), "inflamm");});
test("inflammatory -> inflammatori", function() {deepEqual( Stem("inflammatory"), "inflammatori");});
test("inflection -> inflect", function() {deepEqual( Stem("inflection"), "inflect");});
test("inflict -> inflict", function() {deepEqual( Stem("inflict"), "inflict");});
test("inflicted -> inflict", function() {deepEqual( Stem("inflicted"), "inflict");});
test("infliction -> inflict", function() {deepEqual( Stem("infliction"), "inflict");});
test("influence -> influenc", function() {deepEqual( Stem("influence"), "influenc");});
test("influenced -> influenc", function() {deepEqual( Stem("influenced"), "influenc");});
test("influences -> influenc", function() {deepEqual( Stem("influences"), "influenc");});
test("infold -> infold", function() {deepEqual( Stem("infold"), "infold");});
test("inform -> inform", function() {deepEqual( Stem("inform"), "inform");});
test("informal -> inform", function() {deepEqual( Stem("informal"), "inform");});
test("informant -> inform", function() {deepEqual( Stem("informant"), "inform");});
test("informants -> inform", function() {deepEqual( Stem("informants"), "inform");});
test("information -> inform", function() {deepEqual( Stem("information"), "inform");});
test("informations -> inform", function() {deepEqual( Stem("informations"), "inform");});
test("informed -> inform", function() {deepEqual( Stem("informed"), "inform");});
test("informer -> inform", function() {deepEqual( Stem("informer"), "inform");});
test("informing -> inform", function() {deepEqual( Stem("informing"), "inform");});
test("informs -> inform", function() {deepEqual( Stem("informs"), "inform");});
test("infortunate -> infortun", function() {deepEqual( Stem("infortunate"), "infortun");});
test("infring -> infr", function() {deepEqual( Stem("infring"), "infr");});
test("infringe -> infring", function() {deepEqual( Stem("infringe"), "infring");});
test("infringed -> infring", function() {deepEqual( Stem("infringed"), "infring");});
test("infuriate -> infuri", function() {deepEqual( Stem("infuriate"), "infuri");});
test("infuriated -> infuri", function() {deepEqual( Stem("infuriated"), "infuri");});
test("infus -> infu", function() {deepEqual( Stem("infus"), "infu");});
test("infuse -> infus", function() {deepEqual( Stem("infuse"), "infus");});
test("infused -> infus", function() {deepEqual( Stem("infused"), "infus");});
test("infusing -> infus", function() {deepEqual( Stem("infusing"), "infus");});
test("infusion -> infus", function() {deepEqual( Stem("infusion"), "infus");});
test("ingener -> ingen", function() {deepEqual( Stem("ingener"), "ingen");});
test("ingenious -> ingeni", function() {deepEqual( Stem("ingenious"), "ingeni");});
test("ingeniously -> ingeni", function() {deepEqual( Stem("ingeniously"), "ingeni");});
test("ingens -> ingen", function() {deepEqual( Stem("ingens"), "ingen");});
test("ingenue -> ingenu", function() {deepEqual( Stem("ingenue"), "ingenu");});
test("ingenuity -> ingenu", function() {deepEqual( Stem("ingenuity"), "ingenu");});
test("ingenuous -> ingenu", function() {deepEqual( Stem("ingenuous"), "ingenu");});
test("ingenuousness -> ingenu", function() {deepEqual( Stem("ingenuousness"), "ingenu");});
test("inglorious -> inglori", function() {deepEqual( Stem("inglorious"), "inglori");});
test("ingots -> ingot", function() {deepEqual( Stem("ingots"), "ingot");});
test("ingraffed -> ingraf", function() {deepEqual( Stem("ingraffed"), "ingraf");});
test("ingraft -> ingraft", function() {deepEqual( Stem("ingraft"), "ingraft");});
test("ingrate -> ingrat", function() {deepEqual( Stem("ingrate"), "ingrat");});
test("ingrated -> ingrat", function() {deepEqual( Stem("ingrated"), "ingrat");});
test("ingrateful -> ingrat", function() {deepEqual( Stem("ingrateful"), "ingrat");});
test("ingratiated -> ingrati", function() {deepEqual( Stem("ingratiated"), "ingrati");});
test("ingratitude -> ingratitud", function() {deepEqual( Stem("ingratitude"), "ingratitud");});
test("ingratitudes -> ingratitud", function() {deepEqual( Stem("ingratitudes"), "ingratitud");});
test("ingredient -> ingredi", function() {deepEqual( Stem("ingredient"), "ingredi");});
test("ingredients -> ingredi", function() {deepEqual( Stem("ingredients"), "ingredi");});
test("ingross -> ingross", function() {deepEqual( Stem("ingross"), "ingross");});
test("inhabit -> inhabit", function() {deepEqual( Stem("inhabit"), "inhabit");});
test("inhabitable -> inhabit", function() {deepEqual( Stem("inhabitable"), "inhabit");});
test("inhabitant -> inhabit", function() {deepEqual( Stem("inhabitant"), "inhabit");});
test("inhabitants -> inhabit", function() {deepEqual( Stem("inhabitants"), "inhabit");});
test("inhabited -> inhabit", function() {deepEqual( Stem("inhabited"), "inhabit");});
test("inhabits -> inhabit", function() {deepEqual( Stem("inhabits"), "inhabit");});
test("inhaling -> inhal", function() {deepEqual( Stem("inhaling"), "inhal");});
test("inhearse -> inhears", function() {deepEqual( Stem("inhearse"), "inhears");});
test("inhearsed -> inhears", function() {deepEqual( Stem("inhearsed"), "inhears");});
test("inherent -> inher", function() {deepEqual( Stem("inherent"), "inher");});
test("inherit -> inherit", function() {deepEqual( Stem("inherit"), "inherit");});
test("inheritance -> inherit", function() {deepEqual( Stem("inheritance"), "inherit");});
test("inherited -> inherit", function() {deepEqual( Stem("inherited"), "inherit");});
test("inheriting -> inherit", function() {deepEqual( Stem("inheriting"), "inherit");});
test("inheritor -> inheritor", function() {deepEqual( Stem("inheritor"), "inheritor");});
test("inheritors -> inheritor", function() {deepEqual( Stem("inheritors"), "inheritor");});
test("inheritrix -> inheritrix", function() {deepEqual( Stem("inheritrix"), "inheritrix");});
test("inherits -> inherit", function() {deepEqual( Stem("inherits"), "inherit");});
test("inhibited -> inhibit", function() {deepEqual( Stem("inhibited"), "inhibit");});
test("inhibition -> inhibit", function() {deepEqual( Stem("inhibition"), "inhibit");});
test("inhoop -> inhoop", function() {deepEqual( Stem("inhoop"), "inhoop");});
test("inhuman -> inhuman", function() {deepEqual( Stem("inhuman"), "inhuman");});
test("inimical -> inim", function() {deepEqual( Stem("inimical"), "inim");});
test("iniquities -> iniqu", function() {deepEqual( Stem("iniquities"), "iniqu");});
test("iniquity -> iniqu", function() {deepEqual( Stem("iniquity"), "iniqu");});
test("initials -> initi", function() {deepEqual( Stem("initials"), "initi");});
test("initiate -> initi", function() {deepEqual( Stem("initiate"), "initi");});
test("initiated -> initi", function() {deepEqual( Stem("initiated"), "initi");});
test("injee -> inje", function() {deepEqual( Stem("injee"), "inje");});
test("injointed -> injoint", function() {deepEqual( Stem("injointed"), "injoint");});
test("injunction -> injunct", function() {deepEqual( Stem("injunction"), "injunct");});
test("injunctions -> injunct", function() {deepEqual( Stem("injunctions"), "injunct");});
test("injur -> injur", function() {deepEqual( Stem("injur"), "injur");});
test("injure -> injur", function() {deepEqual( Stem("injure"), "injur");});
test("injured -> injur", function() {deepEqual( Stem("injured"), "injur");});
test("injurer -> injur", function() {deepEqual( Stem("injurer"), "injur");});
test("injuries -> injuri", function() {deepEqual( Stem("injuries"), "injuri");});
test("injurious -> injuri", function() {deepEqual( Stem("injurious"), "injuri");});
test("injury -> injuri", function() {deepEqual( Stem("injury"), "injuri");});
test("injustice -> injustic", function() {deepEqual( Stem("injustice"), "injustic");});
test("ink -> ink", function() {deepEqual( Stem("ink"), "ink");});
test("inkhorn -> inkhorn", function() {deepEqual( Stem("inkhorn"), "inkhorn");});
test("inkle -> inkl", function() {deepEqual( Stem("inkle"), "inkl");});
test("inkles -> inkl", function() {deepEqual( Stem("inkles"), "inkl");});
test("inkling -> inkl", function() {deepEqual( Stem("inkling"), "inkl");});
test("inkstand -> inkstand", function() {deepEqual( Stem("inkstand"), "inkstand");});
test("inky -> inki", function() {deepEqual( Stem("inky"), "inki");});
test("inlaid -> inlaid", function() {deepEqual( Stem("inlaid"), "inlaid");});
test("inland -> inland", function() {deepEqual( Stem("inland"), "inland");});
test("inlay -> inlai", function() {deepEqual( Stem("inlay"), "inlai");});
test("inly -> inli", function() {deepEqual( Stem("inly"), "inli");});
test("inmates -> inmat", function() {deepEqual( Stem("inmates"), "inmat");});
test("inmost -> inmost", function() {deepEqual( Stem("inmost"), "inmost");});
test("inn -> inn", function() {deepEqual( Stem("inn"), "inn");});
test("inner -> inner", function() {deepEqual( Stem("inner"), "inner");});
test("innkeeper -> innkeep", function() {deepEqual( Stem("innkeeper"), "innkeep");});
test("innocence -> innoc", function() {deepEqual( Stem("innocence"), "innoc");});
test("innocency -> innoc", function() {deepEqual( Stem("innocency"), "innoc");});
test("innocent -> innoc", function() {deepEqual( Stem("innocent"), "innoc");});
test("innocently -> innoc", function() {deepEqual( Stem("innocently"), "innoc");});
test("innocents -> innoc", function() {deepEqual( Stem("innocents"), "innoc");});
test("innovation -> innov", function() {deepEqual( Stem("innovation"), "innov");});
test("innovator -> innov", function() {deepEqual( Stem("innovator"), "innov");});
test("inns -> inn", function() {deepEqual( Stem("inns"), "inn");});
test("innuendoes -> innuendo", function() {deepEqual( Stem("innuendoes"), "innuendo");});
test("innumerable -> innumer", function() {deepEqual( Stem("innumerable"), "innumer");});
test("inoculate -> inocul", function() {deepEqual( Stem("inoculate"), "inocul");});
test("inoffensive -> inoffens", function() {deepEqual( Stem("inoffensive"), "inoffens");});
test("inordinate -> inordin", function() {deepEqual( Stem("inordinate"), "inordin");});
test("inprimis -> inprimi", function() {deepEqual( Stem("inprimis"), "inprimi");});
test("inquir -> inquir", function() {deepEqual( Stem("inquir"), "inquir");});
test("inquire -> inquir", function() {deepEqual( Stem("inquire"), "inquir");});
test("inquired -> inquir", function() {deepEqual( Stem("inquired"), "inquir");});
test("inquiries -> inquiri", function() {deepEqual( Stem("inquiries"), "inquiri");});
test("inquiring -> inquir", function() {deepEqual( Stem("inquiring"), "inquir");});
test("inquiry -> inquiri", function() {deepEqual( Stem("inquiry"), "inquiri");});
test("inquisition -> inquisit", function() {deepEqual( Stem("inquisition"), "inquisit");});
test("inquisitive -> inquisit", function() {deepEqual( Stem("inquisitive"), "inquisit");});
test("inroads -> inroad", function() {deepEqual( Stem("inroads"), "inroad");});
test("insane -> insan", function() {deepEqual( Stem("insane"), "insan");});
test("insanie -> insani", function() {deepEqual( Stem("insanie"), "insani");});
test("insanity -> insan", function() {deepEqual( Stem("insanity"), "insan");});
test("insatiable -> insati", function() {deepEqual( Stem("insatiable"), "insati");});
test("insatiate -> insati", function() {deepEqual( Stem("insatiate"), "insati");});
test("insconce -> insconc", function() {deepEqual( Stem("insconce"), "insconc");});
test("inscrib -> inscrib", function() {deepEqual( Stem("inscrib"), "inscrib");});
test("inscribed -> inscrib", function() {deepEqual( Stem("inscribed"), "inscrib");});
test("inscription -> inscript", function() {deepEqual( Stem("inscription"), "inscript");});
test("inscriptions -> inscript", function() {deepEqual( Stem("inscriptions"), "inscript");});
test("inscroll -> inscrol", function() {deepEqual( Stem("inscroll"), "inscrol");});
test("inscrutable -> inscrut", function() {deepEqual( Stem("inscrutable"), "inscrut");});
test("insculp -> insculp", function() {deepEqual( Stem("insculp"), "insculp");});
test("insculpture -> insculptur", function() {deepEqual( Stem("insculpture"), "insculptur");});
test("insensibility -> insens", function() {deepEqual( Stem("insensibility"), "insens");});
test("insensible -> insens", function() {deepEqual( Stem("insensible"), "insens");});
test("inseparable -> insepar", function() {deepEqual( Stem("inseparable"), "insepar");});
test("inseparate -> insepar", function() {deepEqual( Stem("inseparate"), "insepar");});
test("insert -> insert", function() {deepEqual( Stem("insert"), "insert");});
test("inserted -> insert", function() {deepEqual( Stem("inserted"), "insert");});
test("inset -> inset", function() {deepEqual( Stem("inset"), "inset");});
test("inshell -> inshel", function() {deepEqual( Stem("inshell"), "inshel");});
test("inshipp -> inshipp", function() {deepEqual( Stem("inshipp"), "inshipp");});
test("inside -> insid", function() {deepEqual( Stem("inside"), "insid");});
test("insignificant -> insignific", function() {deepEqual( Stem("insignificant"), "insignific");});
test("insinewed -> insinew", function() {deepEqual( Stem("insinewed"), "insinew");});
test("insinuate -> insinu", function() {deepEqual( Stem("insinuate"), "insinu");});
test("insinuateth -> insinuateth", function() {deepEqual( Stem("insinuateth"), "insinuateth");});
test("insinuating -> insinu", function() {deepEqual( Stem("insinuating"), "insinu");});
test("insinuation -> insinu", function() {deepEqual( Stem("insinuation"), "insinu");});
test("insipid -> insipid", function() {deepEqual( Stem("insipid"), "insipid");});
test("insist -> insist", function() {deepEqual( Stem("insist"), "insist");});
test("insisted -> insist", function() {deepEqual( Stem("insisted"), "insist");});
test("insisting -> insist", function() {deepEqual( Stem("insisting"), "insist");});
test("insisture -> insistur", function() {deepEqual( Stem("insisture"), "insistur");});
test("insociable -> insoci", function() {deepEqual( Stem("insociable"), "insoci");});
test("insolence -> insol", function() {deepEqual( Stem("insolence"), "insol");});
test("insolent -> insol", function() {deepEqual( Stem("insolent"), "insol");});
test("insolently -> insol", function() {deepEqual( Stem("insolently"), "insol");});
test("insomuch -> insomuch", function() {deepEqual( Stem("insomuch"), "insomuch");});
test("inspect -> inspect", function() {deepEqual( Stem("inspect"), "inspect");});
test("inspecting -> inspect", function() {deepEqual( Stem("inspecting"), "inspect");});
test("inspection -> inspect", function() {deepEqual( Stem("inspection"), "inspect");});
test("inspir -> inspir", function() {deepEqual( Stem("inspir"), "inspir");});
test("inspiration -> inspir", function() {deepEqual( Stem("inspiration"), "inspir");});
test("inspirations -> inspir", function() {deepEqual( Stem("inspirations"), "inspir");});
test("inspire -> inspir", function() {deepEqual( Stem("inspire"), "inspir");});
test("inspired -> inspir", function() {deepEqual( Stem("inspired"), "inspir");});
test("inspiriting -> inspirit", function() {deepEqual( Stem("inspiriting"), "inspirit");});
test("install -> instal", function() {deepEqual( Stem("install"), "instal");});
test("installed -> instal", function() {deepEqual( Stem("installed"), "instal");});
test("instalment -> instal", function() {deepEqual( Stem("instalment"), "instal");});
test("instance -> instanc", function() {deepEqual( Stem("instance"), "instanc");});
test("instances -> instanc", function() {deepEqual( Stem("instances"), "instanc");});
test("instant -> instant", function() {deepEqual( Stem("instant"), "instant");});
test("instantaneous -> instantan", function() {deepEqual( Stem("instantaneous"), "instantan");});
test("instantly -> instantli", function() {deepEqual( Stem("instantly"), "instantli");});
test("instate -> instat", function() {deepEqual( Stem("instate"), "instat");});
test("instead -> instead", function() {deepEqual( Stem("instead"), "instead");});
test("insteeped -> insteep", function() {deepEqual( Stem("insteeped"), "insteep");});
test("instigate -> instig", function() {deepEqual( Stem("instigate"), "instig");});
test("instigated -> instig", function() {deepEqual( Stem("instigated"), "instig");});
test("instigation -> instig", function() {deepEqual( Stem("instigation"), "instig");});
test("instigations -> instig", function() {deepEqual( Stem("instigations"), "instig");});
test("instigator -> instig", function() {deepEqual( Stem("instigator"), "instig");});
test("instil -> instil", function() {deepEqual( Stem("instil"), "instil");});
test("instinct -> instinct", function() {deepEqual( Stem("instinct"), "instinct");});
test("instinctive -> instinct", function() {deepEqual( Stem("instinctive"), "instinct");});
test("instinctively -> instinct", function() {deepEqual( Stem("instinctively"), "instinct");});
test("institute -> institut", function() {deepEqual( Stem("institute"), "institut");});
test("instituted -> institut", function() {deepEqual( Stem("instituted"), "institut");});
test("institution -> institut", function() {deepEqual( Stem("institution"), "institut");});
test("institutions -> institut", function() {deepEqual( Stem("institutions"), "institut");});
test("instruct -> instruct", function() {deepEqual( Stem("instruct"), "instruct");});
test("instructed -> instruct", function() {deepEqual( Stem("instructed"), "instruct");});
test("instructing -> instruct", function() {deepEqual( Stem("instructing"), "instruct");});
test("instruction -> instruct", function() {deepEqual( Stem("instruction"), "instruct");});
test("instructions -> instruct", function() {deepEqual( Stem("instructions"), "instruct");});
test("instructive -> instruct", function() {deepEqual( Stem("instructive"), "instruct");});
test("instructor -> instructor", function() {deepEqual( Stem("instructor"), "instructor");});
test("instructors -> instructor", function() {deepEqual( Stem("instructors"), "instructor");});
test("instructress -> instructress", function() {deepEqual( Stem("instructress"), "instructress");});
test("instructs -> instruct", function() {deepEqual( Stem("instructs"), "instruct");});
test("instrument -> instrument", function() {deepEqual( Stem("instrument"), "instrument");});
test("instrumental -> instrument", function() {deepEqual( Stem("instrumental"), "instrument");});
test("instruments -> instrument", function() {deepEqual( Stem("instruments"), "instrument");});
test("insubordination -> insubordin", function() {deepEqual( Stem("insubordination"), "insubordin");});
test("insubstantial -> insubstanti", function() {deepEqual( Stem("insubstantial"), "insubstanti");});
test("insufferable -> insuffer", function() {deepEqual( Stem("insufferable"), "insuffer");});
test("insufferably -> insuffer", function() {deepEqual( Stem("insufferably"), "insuffer");});
test("insufficience -> insuffici", function() {deepEqual( Stem("insufficience"), "insuffici");});
test("insufficiency -> insuffici", function() {deepEqual( Stem("insufficiency"), "insuffici");});
test("insufficient -> insuffici", function() {deepEqual( Stem("insufficient"), "insuffici");});
test("insular -> insular", function() {deepEqual( Stem("insular"), "insular");});
test("insult -> insult", function() {deepEqual( Stem("insult"), "insult");});
test("insulted -> insult", function() {deepEqual( Stem("insulted"), "insult");});
test("insulting -> insult", function() {deepEqual( Stem("insulting"), "insult");});
test("insultment -> insult", function() {deepEqual( Stem("insultment"), "insult");});
test("insults -> insult", function() {deepEqual( Stem("insults"), "insult");});
test("insuperable -> insuper", function() {deepEqual( Stem("insuperable"), "insuper");});
test("insupportable -> insupport", function() {deepEqual( Stem("insupportable"), "insupport");});
test("insuppressive -> insuppress", function() {deepEqual( Stem("insuppressive"), "insuppress");});
test("insurance -> insur", function() {deepEqual( Stem("insurance"), "insur");});
test("insure -> insur", function() {deepEqual( Stem("insure"), "insur");});
test("insured -> insur", function() {deepEqual( Stem("insured"), "insur");});
test("insurrection -> insurrect", function() {deepEqual( Stem("insurrection"), "insurrect");});
test("insurrections -> insurrect", function() {deepEqual( Stem("insurrections"), "insurrect");});
test("int -> int", function() {deepEqual( Stem("int"), "int");});
test("integer -> integ", function() {deepEqual( Stem("integer"), "integ");});
test("integritas -> integrita", function() {deepEqual( Stem("integritas"), "integrita");});
test("integrity -> integr", function() {deepEqual( Stem("integrity"), "integr");});
test("intellect -> intellect", function() {deepEqual( Stem("intellect"), "intellect");});
test("intellects -> intellect", function() {deepEqual( Stem("intellects"), "intellect");});
test("intellectual -> intellectu", function() {deepEqual( Stem("intellectual"), "intellectu");});
test("intelligence -> intellig", function() {deepEqual( Stem("intelligence"), "intellig");});
test("intelligencer -> intelligenc", function() {deepEqual( Stem("intelligencer"), "intelligenc");});
test("intelligencing -> intelligenc", function() {deepEqual( Stem("intelligencing"), "intelligenc");});
test("intelligent -> intellig", function() {deepEqual( Stem("intelligent"), "intellig");});
test("intelligis -> intelligi", function() {deepEqual( Stem("intelligis"), "intelligi");});
test("intelligo -> intelligo", function() {deepEqual( Stem("intelligo"), "intelligo");});
test("intemperance -> intemper", function() {deepEqual( Stem("intemperance"), "intemper");});
test("intemperate -> intemper", function() {deepEqual( Stem("intemperate"), "intemper");});
test("intend -> intend", function() {deepEqual( Stem("intend"), "intend");});
test("intended -> intend", function() {deepEqual( Stem("intended"), "intend");});
test("intendeth -> intendeth", function() {deepEqual( Stem("intendeth"), "intendeth");});
test("intending -> intend", function() {deepEqual( Stem("intending"), "intend");});
test("intendment -> intend", function() {deepEqual( Stem("intendment"), "intend");});
test("intends -> intend", function() {deepEqual( Stem("intends"), "intend");});
test("intenible -> inten", function() {deepEqual( Stem("intenible"), "inten");});
test("intense -> intens", function() {deepEqual( Stem("intense"), "intens");});
test("intensely -> intens", function() {deepEqual( Stem("intensely"), "intens");});
test("intent -> intent", function() {deepEqual( Stem("intent"), "intent");});
test("intention -> intent", function() {deepEqual( Stem("intention"), "intent");});
test("intentions -> intent", function() {deepEqual( Stem("intentions"), "intent");});
test("intentively -> intent", function() {deepEqual( Stem("intentively"), "intent");});
test("intents -> intent", function() {deepEqual( Stem("intents"), "intent");});
test("inter -> inter", function() {deepEqual( Stem("inter"), "inter");});
test("intercede -> interced", function() {deepEqual( Stem("intercede"), "interced");});
test("intercept -> intercept", function() {deepEqual( Stem("intercept"), "intercept");});
test("intercepted -> intercept", function() {deepEqual( Stem("intercepted"), "intercept");});
test("intercepter -> intercept", function() {deepEqual( Stem("intercepter"), "intercept");});
test("interception -> intercept", function() {deepEqual( Stem("interception"), "intercept");});
test("intercepts -> intercept", function() {deepEqual( Stem("intercepts"), "intercept");});
test("intercession -> intercess", function() {deepEqual( Stem("intercession"), "intercess");});
test("intercessors -> intercessor", function() {deepEqual( Stem("intercessors"), "intercessor");});
test("interchained -> interchain", function() {deepEqual( Stem("interchained"), "interchain");});
test("interchang -> interchang", function() {deepEqual( Stem("interchang"), "interchang");});
test("interchange -> interchang", function() {deepEqual( Stem("interchange"), "interchang");});
test("interchangeably -> interchang", function() {deepEqual( Stem("interchangeably"), "interchang");});
test("interchangement -> interchang", function() {deepEqual( Stem("interchangement"), "interchang");});
test("interchanging -> interchang", function() {deepEqual( Stem("interchanging"), "interchang");});
test("intercourse -> intercours", function() {deepEqual( Stem("intercourse"), "intercours");});
test("interdiction -> interdict", function() {deepEqual( Stem("interdiction"), "interdict");});
test("interest -> interest", function() {deepEqual( Stem("interest"), "interest");});
test("interested -> interest", function() {deepEqual( Stem("interested"), "interest");});
test("interesting -> interest", function() {deepEqual( Stem("interesting"), "interest");});
test("interests -> interest", function() {deepEqual( Stem("interests"), "interest");});
test("interfere -> interfer", function() {deepEqual( Stem("interfere"), "interfer");});
test("interfered -> interf", function() {deepEqual( Stem("interfered"), "interf");});
test("interferes -> interfer", function() {deepEqual( Stem("interferes"), "interfer");});
test("interim -> interim", function() {deepEqual( Stem("interim"), "interim");});
test("interims -> interim", function() {deepEqual( Stem("interims"), "interim");});
test("interior -> interior", function() {deepEqual( Stem("interior"), "interior");});
test("interjections -> interject", function() {deepEqual( Stem("interjections"), "interject");});
test("interjoin -> interjoin", function() {deepEqual( Stem("interjoin"), "interjoin");});
test("interlocutor -> interlocutor", function() {deepEqual( Stem("interlocutor"), "interlocutor");});
test("interlude -> interlud", function() {deepEqual( Stem("interlude"), "interlud");});
test("interminable -> intermin", function() {deepEqual( Stem("interminable"), "intermin");});
test("intermingle -> intermingl", function() {deepEqual( Stem("intermingle"), "intermingl");});
test("intermingled -> intermingl", function() {deepEqual( Stem("intermingled"), "intermingl");});
test("intermission -> intermiss", function() {deepEqual( Stem("intermission"), "intermiss");});
test("intermissive -> intermiss", function() {deepEqual( Stem("intermissive"), "intermiss");});
test("intermit -> intermit", function() {deepEqual( Stem("intermit"), "intermit");});
test("intermix -> intermix", function() {deepEqual( Stem("intermix"), "intermix");});
test("intermixed -> intermix", function() {deepEqual( Stem("intermixed"), "intermix");});
test("interpose -> interpos", function() {deepEqual( Stem("interpose"), "interpos");});
test("interposed -> interpos", function() {deepEqual( Stem("interposed"), "interpos");});
test("interposer -> interpos", function() {deepEqual( Stem("interposer"), "interpos");});
test("interposes -> interpos", function() {deepEqual( Stem("interposes"), "interpos");});
test("interpret -> interpret", function() {deepEqual( Stem("interpret"), "interpret");});
test("interpretation -> interpret", function() {deepEqual( Stem("interpretation"), "interpret");});
test("interpreted -> interpret", function() {deepEqual( Stem("interpreted"), "interpret");});
test("interpreter -> interpret", function() {deepEqual( Stem("interpreter"), "interpret");});
test("interpreters -> interpret", function() {deepEqual( Stem("interpreters"), "interpret");});
test("interprets -> interpret", function() {deepEqual( Stem("interprets"), "interpret");});
test("interr -> interr", function() {deepEqual( Stem("interr"), "interr");});
test("interred -> inter", function() {deepEqual( Stem("interred"), "inter");});
test("interrogatories -> interrogatori", function() {deepEqual( Stem("interrogatories"), "interrogatori");});
test("interrogatory -> interrogatori", function() {deepEqual( Stem("interrogatory"), "interrogatori");});
test("interrupt -> interrupt", function() {deepEqual( Stem("interrupt"), "interrupt");});
test("interrupted -> interrupt", function() {deepEqual( Stem("interrupted"), "interrupt");});
test("interrupter -> interrupt", function() {deepEqual( Stem("interrupter"), "interrupt");});
test("interruptest -> interruptest", function() {deepEqual( Stem("interruptest"), "interruptest");});
test("interrupting -> interrupt", function() {deepEqual( Stem("interrupting"), "interrupt");});
test("interruption -> interrupt", function() {deepEqual( Stem("interruption"), "interrupt");});
test("interrupts -> interrupt", function() {deepEqual( Stem("interrupts"), "interrupt");});
test("interstices -> interstic", function() {deepEqual( Stem("interstices"), "interstic");});
test("intertissued -> intertissu", function() {deepEqual( Stem("intertissued"), "intertissu");});
test("interval -> interv", function() {deepEqual( Stem("interval"), "interv");});
test("intervallums -> intervallum", function() {deepEqual( Stem("intervallums"), "intervallum");});
test("intervals -> interv", function() {deepEqual( Stem("intervals"), "interv");});
test("intervened -> interven", function() {deepEqual( Stem("intervened"), "interven");});
test("intervention -> intervent", function() {deepEqual( Stem("intervention"), "intervent");});
test("interview -> interview", function() {deepEqual( Stem("interview"), "interview");});
test("interviews -> interview", function() {deepEqual( Stem("interviews"), "interview");});
test("intestate -> intest", function() {deepEqual( Stem("intestate"), "intest");});
test("intestine -> intestin", function() {deepEqual( Stem("intestine"), "intestin");});
test("intil -> intil", function() {deepEqual( Stem("intil"), "intil");});
test("intimacy -> intimaci", function() {deepEqual( Stem("intimacy"), "intimaci");});
test("intimate -> intim", function() {deepEqual( Stem("intimate"), "intim");});
test("intimated -> intim", function() {deepEqual( Stem("intimated"), "intim");});
test("intimately -> intim", function() {deepEqual( Stem("intimately"), "intim");});
test("intimates -> intim", function() {deepEqual( Stem("intimates"), "intim");});
test("intimating -> intim", function() {deepEqual( Stem("intimating"), "intim");});
test("intimation -> intim", function() {deepEqual( Stem("intimation"), "intim");});
test("intitled -> intitl", function() {deepEqual( Stem("intitled"), "intitl");});
test("intituled -> intitul", function() {deepEqual( Stem("intituled"), "intitul");});
test("into -> into", function() {deepEqual( Stem("into"), "into");});
test("intolerable -> intoler", function() {deepEqual( Stem("intolerable"), "intoler");});
test("intolerably -> intoler", function() {deepEqual( Stem("intolerably"), "intoler");});
test("intonation -> inton", function() {deepEqual( Stem("intonation"), "inton");});
test("intoxicated -> intox", function() {deepEqual( Stem("intoxicated"), "intox");});
test("intoxicates -> intox", function() {deepEqual( Stem("intoxicates"), "intox");});
test("intoxication -> intox", function() {deepEqual( Stem("intoxication"), "intox");});
test("intreasured -> intreasur", function() {deepEqual( Stem("intreasured"), "intreasur");});
test("intreat -> intreat", function() {deepEqual( Stem("intreat"), "intreat");});
test("intrench -> intrench", function() {deepEqual( Stem("intrench"), "intrench");});
test("intrenchant -> intrench", function() {deepEqual( Stem("intrenchant"), "intrench");});
test("intrepid -> intrepid", function() {deepEqual( Stem("intrepid"), "intrepid");});
test("intrepidly -> intrepidli", function() {deepEqual( Stem("intrepidly"), "intrepidli");});
test("intricate -> intric", function() {deepEqual( Stem("intricate"), "intric");});
test("intrigue -> intrigu", function() {deepEqual( Stem("intrigue"), "intrigu");});
test("intrigues -> intrigu", function() {deepEqual( Stem("intrigues"), "intrigu");});
test("intrinse -> intrins", function() {deepEqual( Stem("intrinse"), "intrins");});
test("intrinsicate -> intrins", function() {deepEqual( Stem("intrinsicate"), "intrins");});
test("introduce -> introduc", function() {deepEqual( Stem("introduce"), "introduc");});
test("introduced -> introduc", function() {deepEqual( Stem("introduced"), "introduc");});
test("introducing -> introduc", function() {deepEqual( Stem("introducing"), "introduc");});
test("introduction -> introduct", function() {deepEqual( Stem("introduction"), "introduct");});
test("introductions -> introduct", function() {deepEqual( Stem("introductions"), "introduct");});
test("introjuice -> introjuic", function() {deepEqual( Stem("introjuice"), "introjuic");});
test("introjuicing -> introju", function() {deepEqual( Stem("introjuicing"), "introju");});
test("intrude -> intrud", function() {deepEqual( Stem("intrude"), "intrud");});
test("intruder -> intrud", function() {deepEqual( Stem("intruder"), "intrud");});
test("intruding -> intrud", function() {deepEqual( Stem("intruding"), "intrud");});
test("intrusion -> intrus", function() {deepEqual( Stem("intrusion"), "intrus");});
test("intrusted -> intrust", function() {deepEqual( Stem("intrusted"), "intrust");});
test("inundation -> inund", function() {deepEqual( Stem("inundation"), "inund");});
test("inure -> inur", function() {deepEqual( Stem("inure"), "inur");});
test("inurn -> inurn", function() {deepEqual( Stem("inurn"), "inurn");});
test("invade -> invad", function() {deepEqual( Stem("invade"), "invad");});
test("invaded -> invad", function() {deepEqual( Stem("invaded"), "invad");});
test("invades -> invad", function() {deepEqual( Stem("invades"), "invad");});
test("invalid -> invalid", function() {deepEqual( Stem("invalid"), "invalid");});
test("invalided -> invalid", function() {deepEqual( Stem("invalided"), "invalid");});
test("invaluable -> invalu", function() {deepEqual( Stem("invaluable"), "invalu");});
test("invariable -> invari", function() {deepEqual( Stem("invariable"), "invari");});
test("invariably -> invari", function() {deepEqual( Stem("invariably"), "invari");});
test("invasion -> invas", function() {deepEqual( Stem("invasion"), "invas");});
test("invasive -> invas", function() {deepEqual( Stem("invasive"), "invas");});
test("invectively -> invect", function() {deepEqual( Stem("invectively"), "invect");});
test("invectives -> invect", function() {deepEqual( Stem("invectives"), "invect");});
test("inveigh -> inveigh", function() {deepEqual( Stem("inveigh"), "inveigh");});
test("inveigle -> inveigl", function() {deepEqual( Stem("inveigle"), "inveigl");});
test("inveigled -> inveigl", function() {deepEqual( Stem("inveigled"), "inveigl");});
test("invent -> invent", function() {deepEqual( Stem("invent"), "invent");});
test("invented -> invent", function() {deepEqual( Stem("invented"), "invent");});
test("inventing -> invent", function() {deepEqual( Stem("inventing"), "invent");});
test("invention -> invent", function() {deepEqual( Stem("invention"), "invent");});
test("inventions -> invent", function() {deepEqual( Stem("inventions"), "invent");});
test("inventor -> inventor", function() {deepEqual( Stem("inventor"), "inventor");});
test("inventorially -> inventori", function() {deepEqual( Stem("inventorially"), "inventori");});
test("inventoried -> inventori", function() {deepEqual( Stem("inventoried"), "inventori");});
test("inventories -> inventori", function() {deepEqual( Stem("inventories"), "inventori");});
test("inventors -> inventor", function() {deepEqual( Stem("inventors"), "inventor");});
test("inventory -> inventori", function() {deepEqual( Stem("inventory"), "inventori");});
test("inverness -> inver", function() {deepEqual( Stem("inverness"), "inver");});
test("invert -> invert", function() {deepEqual( Stem("invert"), "invert");});
test("invest -> invest", function() {deepEqual( Stem("invest"), "invest");});
test("invested -> invest", function() {deepEqual( Stem("invested"), "invest");});
test("investing -> invest", function() {deepEqual( Stem("investing"), "invest");});
test("investment -> invest", function() {deepEqual( Stem("investment"), "invest");});
test("investments -> invest", function() {deepEqual( Stem("investments"), "invest");});
test("inveterate -> inveter", function() {deepEqual( Stem("inveterate"), "inveter");});
test("invigorated -> invigor", function() {deepEqual( Stem("invigorated"), "invigor");});
test("invigorating -> invigor", function() {deepEqual( Stem("invigorating"), "invigor");});
test("invincible -> invinc", function() {deepEqual( Stem("invincible"), "invinc");});
test("inviolable -> inviol", function() {deepEqual( Stem("inviolable"), "inviol");});
test("invised -> invis", function() {deepEqual( Stem("invised"), "invis");});
test("invisible -> invis", function() {deepEqual( Stem("invisible"), "invis");});
test("invitation -> invit", function() {deepEqual( Stem("invitation"), "invit");});
test("invitations -> invit", function() {deepEqual( Stem("invitations"), "invit");});
test("invite -> invit", function() {deepEqual( Stem("invite"), "invit");});
test("invited -> invit", function() {deepEqual( Stem("invited"), "invit");});
test("invites -> invit", function() {deepEqual( Stem("invites"), "invit");});
test("inviting -> invit", function() {deepEqual( Stem("inviting"), "invit");});
test("invitis -> inviti", function() {deepEqual( Stem("invitis"), "inviti");});
test("invocate -> invoc", function() {deepEqual( Stem("invocate"), "invoc");});
test("invocation -> invoc", function() {deepEqual( Stem("invocation"), "invoc");});
test("invoice -> invoic", function() {deepEqual( Stem("invoice"), "invoic");});
test("invoke -> invok", function() {deepEqual( Stem("invoke"), "invok");});
test("invoked -> invok", function() {deepEqual( Stem("invoked"), "invok");});
test("involuntary -> involuntari", function() {deepEqual( Stem("involuntary"), "involuntari");});
test("involved -> involv", function() {deepEqual( Stem("involved"), "involv");});
test("involves -> involv", function() {deepEqual( Stem("involves"), "involv");});
test("invulnerable -> invulner", function() {deepEqual( Stem("invulnerable"), "invulner");});
test("inward -> inward", function() {deepEqual( Stem("inward"), "inward");});
test("inwardly -> inwardli", function() {deepEqual( Stem("inwardly"), "inwardli");});
test("inwardness -> inward", function() {deepEqual( Stem("inwardness"), "inward");});
test("inwards -> inward", function() {deepEqual( Stem("inwards"), "inward");});
test("ionia -> ionia", function() {deepEqual( Stem("ionia"), "ionia");});
test("ionian -> ionian", function() {deepEqual( Stem("ionian"), "ionian");});
test("iou -> iou", function() {deepEqual( Stem("iou"), "iou");});
test("iphigenia -> iphigenia", function() {deepEqual( Stem("iphigenia"), "iphigenia");});
test("ipse -> ips", function() {deepEqual( Stem("ipse"), "ips");});
test("ipswich -> ipswich", function() {deepEqual( Stem("ipswich"), "ipswich");});
test("ira -> ira", function() {deepEqual( Stem("ira"), "ira");});
test("irae -> ira", function() {deepEqual( Stem("irae"), "ira");});
test("iras -> ira", function() {deepEqual( Stem("iras"), "ira");});
test("ire -> ir", function() {deepEqual( Stem("ire"), "ir");});
test("ireful -> ir", function() {deepEqual( Stem("ireful"), "ir");});
test("ireland -> ireland", function() {deepEqual( Stem("ireland"), "ireland");});
test("iris -> iri", function() {deepEqual( Stem("iris"), "iri");});
test("irish -> irish", function() {deepEqual( Stem("irish"), "irish");});
test("irishman -> irishman", function() {deepEqual( Stem("irishman"), "irishman");});
test("irishmen -> irishmen", function() {deepEqual( Stem("irishmen"), "irishmen");});
test("irishwoman -> irishwoman", function() {deepEqual( Stem("irishwoman"), "irishwoman");});
test("irks -> irk", function() {deepEqual( Stem("irks"), "irk");});
test("irksome -> irksom", function() {deepEqual( Stem("irksome"), "irksom");});
test("iron -> iron", function() {deepEqual( Stem("iron"), "iron");});
test("ironmonger -> ironmong", function() {deepEqual( Stem("ironmonger"), "ironmong");});
test("irons -> iron", function() {deepEqual( Stem("irons"), "iron");});
test("irreconcil -> irreconcil", function() {deepEqual( Stem("irreconcil"), "irreconcil");});
test("irrecoverable -> irrecover", function() {deepEqual( Stem("irrecoverable"), "irrecover");});
test("irregular -> irregular", function() {deepEqual( Stem("irregular"), "irregular");});
test("irregularities -> irregular", function() {deepEqual( Stem("irregularities"), "irregular");});
test("irregularity -> irregular", function() {deepEqual( Stem("irregularity"), "irregular");});
test("irregulars -> irregular", function() {deepEqual( Stem("irregulars"), "irregular");});
test("irregulous -> irregul", function() {deepEqual( Stem("irregulous"), "irregul");});
test("irreligious -> irreligi", function() {deepEqual( Stem("irreligious"), "irreligi");});
test("irremediable -> irremedi", function() {deepEqual( Stem("irremediable"), "irremedi");});
test("irremovable -> irremov", function() {deepEqual( Stem("irremovable"), "irremov");});
test("irreparable -> irrepar", function() {deepEqual( Stem("irreparable"), "irrepar");});
test("irreproachable -> irreproach", function() {deepEqual( Stem("irreproachable"), "irreproach");});
test("irresistible -> irresist", function() {deepEqual( Stem("irresistible"), "irresist");});
test("irresolute -> irresolut", function() {deepEqual( Stem("irresolute"), "irresolut");});
test("irresolutely -> irresolut", function() {deepEqual( Stem("irresolutely"), "irresolut");});
test("irretrievable -> irretriev", function() {deepEqual( Stem("irretrievable"), "irretriev");});
test("irretrievably -> irretriev", function() {deepEqual( Stem("irretrievably"), "irretriev");});
test("irrevocable -> irrevoc", function() {deepEqual( Stem("irrevocable"), "irrevoc");});
test("irritate -> irrit", function() {deepEqual( Stem("irritate"), "irrit");});
test("irritated -> irrit", function() {deepEqual( Stem("irritated"), "irrit");});
test("irritation -> irrit", function() {deepEqual( Stem("irritation"), "irrit");});
test("irruption -> irrupt", function() {deepEqual( Stem("irruption"), "irrupt");});
test("is -> i", function() {deepEqual( Stem("is"), "i");});
test("isaac -> isaac", function() {deepEqual( Stem("isaac"), "isaac");});
test("isabel -> isabel", function() {deepEqual( Stem("isabel"), "isabel");});
test("isabella -> isabella", function() {deepEqual( Stem("isabella"), "isabella");});
test("isbel -> isbel", function() {deepEqual( Stem("isbel"), "isbel");});
test("isbels -> isbel", function() {deepEqual( Stem("isbels"), "isbel");});
test("iscariot -> iscariot", function() {deepEqual( Stem("iscariot"), "iscariot");});
test("ise -> is", function() {deepEqual( Stem("ise"), "is");});
test("ish -> ish", function() {deepEqual( Stem("ish"), "ish");});
test("ishmaelite -> ishmaelit", function() {deepEqual( Stem("ishmaelite"), "ishmaelit");});
test("isidor -> isidor", function() {deepEqual( Stem("isidor"), "isidor");});
test("isidore -> isidor", function() {deepEqual( Stem("isidore"), "isidor");});
test("isis -> isi", function() {deepEqual( Stem("isis"), "isi");});
test("island -> island", function() {deepEqual( Stem("island"), "island");});
test("islander -> island", function() {deepEqual( Stem("islander"), "island");});
test("islanders -> island", function() {deepEqual( Stem("islanders"), "island");});
test("islands -> island", function() {deepEqual( Stem("islands"), "island");});
test("isle -> isl", function() {deepEqual( Stem("isle"), "isl");});
test("isles -> isl", function() {deepEqual( Stem("isles"), "isl");});
test("islington -> islington", function() {deepEqual( Stem("islington"), "islington");});
test("isn -> isn", function() {deepEqual( Stem("isn"), "isn");});
test("isolated -> isol", function() {deepEqual( Stem("isolated"), "isol");});
test("israel -> israel", function() {deepEqual( Stem("israel"), "israel");});
test("israelites -> israelit", function() {deepEqual( Stem("israelites"), "israelit");});
test("issu -> issu", function() {deepEqual( Stem("issu"), "issu");});
test("issue -> issu", function() {deepEqual( Stem("issue"), "issu");});
test("issued -> issu", function() {deepEqual( Stem("issued"), "issu");});
test("issueless -> issueless", function() {deepEqual( Stem("issueless"), "issueless");});
test("issues -> issu", function() {deepEqual( Stem("issues"), "issu");});
test("issuing -> issu", function() {deepEqual( Stem("issuing"), "issu");});
test("ist -> ist", function() {deepEqual( Stem("ist"), "ist");});
test("ista -> ista", function() {deepEqual( Stem("ista"), "ista");});
test("it -> it", function() {deepEqual( Stem("it"), "it");});
test("italian -> italian", function() {deepEqual( Stem("italian"), "italian");});
test("italics -> ital", function() {deepEqual( Stem("italics"), "ital");});
test("italy -> itali", function() {deepEqual( Stem("italy"), "itali");});
test("itch -> itch", function() {deepEqual( Stem("itch"), "itch");});
test("itches -> itch", function() {deepEqual( Stem("itches"), "itch");});
test("itching -> itch", function() {deepEqual( Stem("itching"), "itch");});
test("item -> item", function() {deepEqual( Stem("item"), "item");});
test("items -> item", function() {deepEqual( Stem("items"), "item");});
test("iterabimus -> iterabimu", function() {deepEqual( Stem("iterabimus"), "iterabimu");});
test("iteration -> iter", function() {deepEqual( Stem("iteration"), "iter");});
test("ithaca -> ithaca", function() {deepEqual( Stem("ithaca"), "ithaca");});
test("its -> it", function() {deepEqual( Stem("its"), "it");});
test("itself -> itself", function() {deepEqual( Stem("itself"), "itself");});
test("itshall -> itshal", function() {deepEqual( Stem("itshall"), "itshal");});
test("iv -> iv", function() {deepEqual( Stem("iv"), "iv");});
test("ivory -> ivori", function() {deepEqual( Stem("ivory"), "ivori");});
test("ivy -> ivi", function() {deepEqual( Stem("ivy"), "ivi");});
test("iwis -> iwi", function() {deepEqual( Stem("iwis"), "iwi");});
test("ix -> ix", function() {deepEqual( Stem("ix"), "ix");});
test("j -> j", function() {deepEqual( Stem("j"), "j");});
test("jabbering -> jabber", function() {deepEqual( Stem("jabbering"), "jabber");});
test("jabotiere -> jabotier", function() {deepEqual( Stem("jabotiere"), "jabotier");});
test("jacet -> jacet", function() {deepEqual( Stem("jacet"), "jacet");});
test("jack -> jack", function() {deepEqual( Stem("jack"), "jack");});
test("jackals -> jackal", function() {deepEqual( Stem("jackals"), "jackal");});
test("jackanapes -> jackanap", function() {deepEqual( Stem("jackanapes"), "jackanap");});
test("jackass -> jackass", function() {deepEqual( Stem("jackass"), "jackass");});
test("jacket -> jacket", function() {deepEqual( Stem("jacket"), "jacket");});
test("jacketed -> jacket", function() {deepEqual( Stem("jacketed"), "jacket");});
test("jackets -> jacket", function() {deepEqual( Stem("jackets"), "jacket");});
test("jacks -> jack", function() {deepEqual( Stem("jacks"), "jack");});
test("jacksauce -> jacksauc", function() {deepEqual( Stem("jacksauce"), "jacksauc");});
test("jackslave -> jackslav", function() {deepEqual( Stem("jackslave"), "jackslav");});
test("jacob -> jacob", function() {deepEqual( Stem("jacob"), "jacob");});
test("jade -> jade", function() {deepEqual( Stem("jade"), "jade");});
test("jaded -> jade", function() {deepEqual( Stem("jaded"), "jade");});
test("jades -> jade", function() {deepEqual( Stem("jades"), "jade");});
test("jail -> jail", function() {deepEqual( Stem("jail"), "jail");});
test("jaisey -> jaisei", function() {deepEqual( Stem("jaisey"), "jaisei");});
test("jakes -> jake", function() {deepEqual( Stem("jakes"), "jake");});
test("jam -> jam", function() {deepEqual( Stem("jam"), "jam");});
test("jamaica -> jamaica", function() {deepEqual( Stem("jamaica"), "jamaica");});
test("jamany -> jamani", function() {deepEqual( Stem("jamany"), "jamani");});
test("james -> jame", function() {deepEqual( Stem("james"), "jame");});
test("jams -> jam", function() {deepEqual( Stem("jams"), "jam");});
test("jamy -> jami", function() {deepEqual( Stem("jamy"), "jami");});
test("jane -> jane", function() {deepEqual( Stem("jane"), "jane");});
test("janeiro -> janeiro", function() {deepEqual( Stem("janeiro"), "janeiro");});
test("janey -> janei", function() {deepEqual( Stem("janey"), "janei");});
test("jangled -> jangl", function() {deepEqual( Stem("jangled"), "jangl");});
test("jangling -> jangl", function() {deepEqual( Stem("jangling"), "jangl");});
test("janissary -> janissari", function() {deepEqual( Stem("janissary"), "janissari");});
test("janitor -> janitor", function() {deepEqual( Stem("janitor"), "janitor");});
test("janizaries -> janizari", function() {deepEqual( Stem("janizaries"), "janizari");});
test("january -> januari", function() {deepEqual( Stem("january"), "januari");});
test("janus -> janu", function() {deepEqual( Stem("janus"), "janu");});
test("japan -> japan", function() {deepEqual( Stem("japan"), "japan");});
test("japhet -> japhet", function() {deepEqual( Stem("japhet"), "japhet");});
test("jaquenetta -> jaquenetta", function() {deepEqual( Stem("jaquenetta"), "jaquenetta");});
test("jaques -> jaqu", function() {deepEqual( Stem("jaques"), "jaqu");});
test("jar -> jar", function() {deepEqual( Stem("jar"), "jar");});
test("jargon -> jargon", function() {deepEqual( Stem("jargon"), "jargon");});
test("jarred -> jar", function() {deepEqual( Stem("jarred"), "jar");});
test("jarring -> jar", function() {deepEqual( Stem("jarring"), "jar");});
test("jars -> jar", function() {deepEqual( Stem("jars"), "jar");});
test("jarteer -> jarteer", function() {deepEqual( Stem("jarteer"), "jarteer");});
test("jasey -> jasei", function() {deepEqual( Stem("jasey"), "jasei");});
test("jasons -> jason", function() {deepEqual( Stem("jasons"), "jason");});
test("jaunce -> jaunc", function() {deepEqual( Stem("jaunce"), "jaunc");});
test("jauncing -> jaunc", function() {deepEqual( Stem("jauncing"), "jaunc");});
test("jaunders -> jaunder", function() {deepEqual( Stem("jaunders"), "jaunder");});
test("jaundice -> jaundic", function() {deepEqual( Stem("jaundice"), "jaundic");});
test("jaundies -> jaundi", function() {deepEqual( Stem("jaundies"), "jaundi");});
test("jaunt -> jaunt", function() {deepEqual( Stem("jaunt"), "jaunt");});
test("jaunts -> jaunt", function() {deepEqual( Stem("jaunts"), "jaunt");});
test("jaunty -> jaunti", function() {deepEqual( Stem("jaunty"), "jaunti");});
test("jaw -> jaw", function() {deepEqual( Stem("jaw"), "jaw");});
test("jawbone -> jawbon", function() {deepEqual( Stem("jawbone"), "jawbon");});
test("jaws -> jaw", function() {deepEqual( Stem("jaws"), "jaw");});
test("jay -> jai", function() {deepEqual( Stem("jay"), "jai");});
test("jays -> jai", function() {deepEqual( Stem("jays"), "jai");});
test("jc -> jc", function() {deepEqual( Stem("jc"), "jc");});
test("je -> je", function() {deepEqual( Stem("je"), "je");});
test("jealous -> jealou", function() {deepEqual( Stem("jealous"), "jealou");});
test("jealousies -> jealousi", function() {deepEqual( Stem("jealousies"), "jealousi");});
test("jealousy -> jealousi", function() {deepEqual( Stem("jealousy"), "jealousi");});
test("jeames -> jeam", function() {deepEqual( Stem("jeames"), "jeam");});
test("jean -> jean", function() {deepEqual( Stem("jean"), "jean");});
test("jeannette -> jeannett", function() {deepEqual( Stem("jeannette"), "jeannett");});
test("jeer -> jeer", function() {deepEqual( Stem("jeer"), "jeer");});
test("jeered -> jeer", function() {deepEqual( Stem("jeered"), "jeer");});
test("jeering -> jeer", function() {deepEqual( Stem("jeering"), "jeer");});
test("jeeringly -> jeeringli", function() {deepEqual( Stem("jeeringly"), "jeeringli");});
test("jeers -> jeer", function() {deepEqual( Stem("jeers"), "jeer");});
test("jefferson -> jefferson", function() {deepEqual( Stem("jefferson"), "jefferson");});
test("jehu -> jehu", function() {deepEqual( Stem("jehu"), "jehu");});
test("jellies -> jelli", function() {deepEqual( Stem("jellies"), "jelli");});
test("jelly -> jelli", function() {deepEqual( Stem("jelly"), "jelli");});
test("jemima -> jemima", function() {deepEqual( Stem("jemima"), "jemima");});
test("jemmy -> jemmi", function() {deepEqual( Stem("jemmy"), "jemmi");});
test("jena -> jena", function() {deepEqual( Stem("jena"), "jena");});
test("jenkins -> jenkin", function() {deepEqual( Stem("jenkins"), "jenkin");});
test("jenkinses -> jenkins", function() {deepEqual( Stem("jenkinses"), "jenkins");});
test("jenny -> jenni", function() {deepEqual( Stem("jenny"), "jenni");});
test("jeopardised -> jeopardis", function() {deepEqual( Stem("jeopardised"), "jeopardis");});
test("jeopardy -> jeopardi", function() {deepEqual( Stem("jeopardy"), "jeopardi");});
test("jephtha -> jephtha", function() {deepEqual( Stem("jephtha"), "jephtha");});
test("jephthah -> jephthah", function() {deepEqual( Stem("jephthah"), "jephthah");});
test("jericho -> jericho", function() {deepEqual( Stem("jericho"), "jericho");});
test("jerkin -> jerkin", function() {deepEqual( Stem("jerkin"), "jerkin");});
test("jerkins -> jerkin", function() {deepEqual( Stem("jerkins"), "jerkin");});
test("jerks -> jerk", function() {deepEqual( Stem("jerks"), "jerk");});
test("jeronimy -> jeronimi", function() {deepEqual( Stem("jeronimy"), "jeronimi");});
test("jerusalem -> jerusalem", function() {deepEqual( Stem("jerusalem"), "jerusalem");});
test("jeshu -> jeshu", function() {deepEqual( Stem("jeshu"), "jeshu");});
test("jesses -> jess", function() {deepEqual( Stem("jesses"), "jess");});
test("jessica -> jessica", function() {deepEqual( Stem("jessica"), "jessica");});
test("jest -> jest", function() {deepEqual( Stem("jest"), "jest");});
test("jested -> jest", function() {deepEqual( Stem("jested"), "jest");});
test("jester -> jester", function() {deepEqual( Stem("jester"), "jester");});
test("jesters -> jester", function() {deepEqual( Stem("jesters"), "jester");});
test("jesting -> jest", function() {deepEqual( Stem("jesting"), "jest");});
test("jests -> jest", function() {deepEqual( Stem("jests"), "jest");});
test("jesu -> jesu", function() {deepEqual( Stem("jesu"), "jesu");});
test("jesus -> jesu", function() {deepEqual( Stem("jesus"), "jesu");});
test("jet -> jet", function() {deepEqual( Stem("jet"), "jet");});
test("jets -> jet", function() {deepEqual( Stem("jets"), "jet");});
test("jetty -> jetti", function() {deepEqual( Stem("jetty"), "jetti");});
test("jeune -> jeun", function() {deepEqual( Stem("jeune"), "jeun");});
test("jew -> jew", function() {deepEqual( Stem("jew"), "jew");});
test("jewab -> jewab", function() {deepEqual( Stem("jewab"), "jewab");});
test("jewel -> jewel", function() {deepEqual( Stem("jewel"), "jewel");});
test("jewelled -> jewel", function() {deepEqual( Stem("jewelled"), "jewel");});
test("jeweller -> jewel", function() {deepEqual( Stem("jeweller"), "jewel");});
test("jewellers -> jewel", function() {deepEqual( Stem("jewellers"), "jewel");});
test("jewellery -> jewelleri", function() {deepEqual( Stem("jewellery"), "jewelleri");});
test("jewels -> jewel", function() {deepEqual( Stem("jewels"), "jewel");});
test("jewess -> jewess", function() {deepEqual( Stem("jewess"), "jewess");});
test("jewish -> jewish", function() {deepEqual( Stem("jewish"), "jewish");});
test("jewry -> jewri", function() {deepEqual( Stem("jewry"), "jewri");});
test("jews -> jew", function() {deepEqual( Stem("jews"), "jew");});
test("jezebel -> jezebel", function() {deepEqual( Stem("jezebel"), "jezebel");});
test("jibb -> jibb", function() {deepEqual( Stem("jibb"), "jibb");});
test("jig -> jig", function() {deepEqual( Stem("jig"), "jig");});
test("jigging -> jig", function() {deepEqual( Stem("jigging"), "jig");});
test("jigs -> jig", function() {deepEqual( Stem("jigs"), "jig");});
test("jill -> jill", function() {deepEqual( Stem("jill"), "jill");});
test("jills -> jill", function() {deepEqual( Stem("jills"), "jill");});
test("jilted -> jilt", function() {deepEqual( Stem("jilted"), "jilt");});
test("jilting -> jilt", function() {deepEqual( Stem("jilting"), "jilt");});
test("jim -> jim", function() {deepEqual( Stem("jim"), "jim");});
test("jingling -> jingl", function() {deepEqual( Stem("jingling"), "jingl");});
test("jingo -> jingo", function() {deepEqual( Stem("jingo"), "jingo");});
test("jist -> jist", function() {deepEqual( Stem("jist"), "jist");});
test("joan -> joan", function() {deepEqual( Stem("joan"), "joan");});
test("job -> job", function() {deepEqual( Stem("job"), "job");});
test("jobbed -> job", function() {deepEqual( Stem("jobbed"), "job");});
test("jobber -> jobber", function() {deepEqual( Stem("jobber"), "jobber");});
test("jobbers -> jobber", function() {deepEqual( Stem("jobbers"), "jobber");});
test("jobs -> job", function() {deepEqual( Stem("jobs"), "job");});
test("jockey -> jockei", function() {deepEqual( Stem("jockey"), "jockei");});
test("jockeyed -> jockei", function() {deepEqual( Stem("jockeyed"), "jockei");});
test("jocular -> jocular", function() {deepEqual( Stem("jocular"), "jocular");});
test("jocularly -> jocularli", function() {deepEqual( Stem("jocularly"), "jocularli");});
test("jocund -> jocund", function() {deepEqual( Stem("jocund"), "jocund");});
test("joe -> joe", function() {deepEqual( Stem("joe"), "joe");});
test("jog -> jog", function() {deepEqual( Stem("jog"), "jog");});
test("jogging -> jog", function() {deepEqual( Stem("jogging"), "jog");});
test("johannisberger -> johannisberg", function() {deepEqual( Stem("johannisberger"), "johannisberg");});
test("john -> john", function() {deepEqual( Stem("john"), "john");});
test("johnes -> john", function() {deepEqual( Stem("johnes"), "john");});
test("johns -> john", function() {deepEqual( Stem("johns"), "john");});
test("johnson -> johnson", function() {deepEqual( Stem("johnson"), "johnson");});
test("join -> join", function() {deepEqual( Stem("join"), "join");});
test("joinder -> joinder", function() {deepEqual( Stem("joinder"), "joinder");});
test("joined -> join", function() {deepEqual( Stem("joined"), "join");});
test("joiner -> joiner", function() {deepEqual( Stem("joiner"), "joiner");});
test("joineth -> joineth", function() {deepEqual( Stem("joineth"), "joineth");});
test("joining -> join", function() {deepEqual( Stem("joining"), "join");});
test("joins -> join", function() {deepEqual( Stem("joins"), "join");});
test("joint -> joint", function() {deepEqual( Stem("joint"), "joint");});
test("jointed -> joint", function() {deepEqual( Stem("jointed"), "joint");});
test("jointing -> joint", function() {deepEqual( Stem("jointing"), "joint");});
test("jointly -> jointli", function() {deepEqual( Stem("jointly"), "jointli");});
test("jointress -> jointress", function() {deepEqual( Stem("jointress"), "jointress");});
test("joints -> joint", function() {deepEqual( Stem("joints"), "joint");});
test("jointure -> jointur", function() {deepEqual( Stem("jointure"), "jointur");});
test("joinville -> joinvil", function() {deepEqual( Stem("joinville"), "joinvil");});
test("joke -> joke", function() {deepEqual( Stem("joke"), "joke");});
test("joked -> joke", function() {deepEqual( Stem("joked"), "joke");});
test("joker -> joker", function() {deepEqual( Stem("joker"), "joker");});
test("jokes -> joke", function() {deepEqual( Stem("jokes"), "joke");});
test("joking -> joke", function() {deepEqual( Stem("joking"), "joke");});
test("jollity -> jolliti", function() {deepEqual( Stem("jollity"), "jolliti");});
test("jolly -> jolli", function() {deepEqual( Stem("jolly"), "jolli");});
test("jolt -> jolt", function() {deepEqual( Stem("jolt"), "jolt");});
test("joltheads -> jolthead", function() {deepEqual( Stem("joltheads"), "jolthead");});
test("jones -> jone", function() {deepEqual( Stem("jones"), "jone");});
test("joneses -> jones", function() {deepEqual( Stem("joneses"), "jones");});
test("jordan -> jordan", function() {deepEqual( Stem("jordan"), "jordan");});
test("jos -> jo", function() {deepEqual( Stem("jos"), "jo");});
test("joseph -> joseph", function() {deepEqual( Stem("joseph"), "joseph");});
test("josephing -> joseph", function() {deepEqual( Stem("josephing"), "joseph");});
test("joshua -> joshua", function() {deepEqual( Stem("joshua"), "joshua");});
test("jot -> jot", function() {deepEqual( Stem("jot"), "jot");});
test("joueur -> joueur", function() {deepEqual( Stem("joueur"), "joueur");});
test("jour -> jour", function() {deepEqual( Stem("jour"), "jour");});
test("jourdain -> jourdain", function() {deepEqual( Stem("jourdain"), "jourdain");});
test("journal -> journal", function() {deepEqual( Stem("journal"), "journal");});
test("journals -> journal", function() {deepEqual( Stem("journals"), "journal");});
test("journey -> journei", function() {deepEqual( Stem("journey"), "journei");});
test("journeying -> journei", function() {deepEqual( Stem("journeying"), "journei");});
test("journeyman -> journeyman", function() {deepEqual( Stem("journeyman"), "journeyman");});
test("journeymen -> journeymen", function() {deepEqual( Stem("journeymen"), "journeymen");});
test("journeys -> journei", function() {deepEqual( Stem("journeys"), "journei");});
test("jove -> jove", function() {deepEqual( Stem("jove"), "jove");});
test("jovem -> jovem", function() {deepEqual( Stem("jovem"), "jovem");});
test("jovial -> jovial", function() {deepEqual( Stem("jovial"), "jovial");});
test("joviality -> jovial", function() {deepEqual( Stem("joviality"), "jovial");});
test("jowl -> jowl", function() {deepEqual( Stem("jowl"), "jowl");});
test("jowls -> jowl", function() {deepEqual( Stem("jowls"), "jowl");});
test("joy -> joi", function() {deepEqual( Stem("joy"), "joi");});
test("joyed -> joi", function() {deepEqual( Stem("joyed"), "joi");});
test("joyful -> joy", function() {deepEqual( Stem("joyful"), "joy");});
test("joyfully -> joyfulli", function() {deepEqual( Stem("joyfully"), "joyfulli");});
test("joyless -> joyless", function() {deepEqual( Stem("joyless"), "joyless");});
test("joyous -> joyou", function() {deepEqual( Stem("joyous"), "joyou");});
test("joys -> joi", function() {deepEqual( Stem("joys"), "joi");});
test("juan -> juan", function() {deepEqual( Stem("juan"), "juan");});
test("jubilation -> jubil", function() {deepEqual( Stem("jubilation"), "jubil");});
test("jubilee -> jubile", function() {deepEqual( Stem("jubilee"), "jubile");});
test("jud -> jud", function() {deepEqual( Stem("jud"), "jud");});
test("judah -> judah", function() {deepEqual( Stem("judah"), "judah");});
test("judas -> juda", function() {deepEqual( Stem("judas"), "juda");});
test("judases -> judas", function() {deepEqual( Stem("judases"), "judas");});
test("jude -> jude", function() {deepEqual( Stem("jude"), "jude");});
test("judenstadt -> judenstadt", function() {deepEqual( Stem("judenstadt"), "judenstadt");});
test("judg -> judg", function() {deepEqual( Stem("judg"), "judg");});
test("judge -> judg", function() {deepEqual( Stem("judge"), "judg");});
test("judged -> judg", function() {deepEqual( Stem("judged"), "judg");});
test("judgement -> judgement", function() {deepEqual( Stem("judgement"), "judgement");});
test("judges -> judg", function() {deepEqual( Stem("judges"), "judg");});
test("judgest -> judgest", function() {deepEqual( Stem("judgest"), "judgest");});
test("judging -> judg", function() {deepEqual( Stem("judging"), "judg");});
test("judgment -> judgment", function() {deepEqual( Stem("judgment"), "judgment");});
test("judgments -> judgment", function() {deepEqual( Stem("judgments"), "judgment");});
test("judicious -> judici", function() {deepEqual( Stem("judicious"), "judici");});
test("judiciously -> judici", function() {deepEqual( Stem("judiciously"), "judici");});
test("jug -> jug", function() {deepEqual( Stem("jug"), "jug");});
test("juggle -> juggl", function() {deepEqual( Stem("juggle"), "juggl");});
test("juggled -> juggl", function() {deepEqual( Stem("juggled"), "juggl");});
test("juggler -> juggler", function() {deepEqual( Stem("juggler"), "juggler");});
test("jugglers -> juggler", function() {deepEqual( Stem("jugglers"), "juggler");});
test("juggling -> juggl", function() {deepEqual( Stem("juggling"), "juggl");});
test("jugs -> jug", function() {deepEqual( Stem("jugs"), "jug");});
test("juice -> juic", function() {deepEqual( Stem("juice"), "juic");});
test("juiced -> juic", function() {deepEqual( Stem("juiced"), "juic");});
test("juke -> juke", function() {deepEqual( Stem("juke"), "juke");});
test("jul -> jul", function() {deepEqual( Stem("jul"), "jul");});
test("jule -> jule", function() {deepEqual( Stem("jule"), "jule");});
test("julia -> julia", function() {deepEqual( Stem("julia"), "julia");});
test("juliet -> juliet", function() {deepEqual( Stem("juliet"), "juliet");});
test("julietta -> julietta", function() {deepEqual( Stem("julietta"), "julietta");});
test("julio -> julio", function() {deepEqual( Stem("julio"), "julio");});
test("julius -> juliu", function() {deepEqual( Stem("julius"), "juliu");});
test("july -> juli", function() {deepEqual( Stem("july"), "juli");});
test("jump -> jump", function() {deepEqual( Stem("jump"), "jump");});
test("jumped -> jump", function() {deepEqual( Stem("jumped"), "jump");});
test("jumpeth -> jumpeth", function() {deepEqual( Stem("jumpeth"), "jumpeth");});
test("jumping -> jump", function() {deepEqual( Stem("jumping"), "jump");});
test("jumps -> jump", function() {deepEqual( Stem("jumps"), "jump");});
test("jun -> jun", function() {deepEqual( Stem("jun"), "jun");});
test("juncture -> junctur", function() {deepEqual( Stem("juncture"), "junctur");});
test("june -> june", function() {deepEqual( Stem("june"), "june");});
test("junes -> june", function() {deepEqual( Stem("junes"), "june");});
test("jungle -> jungl", function() {deepEqual( Stem("jungle"), "jungl");});
test("jungly -> jungli", function() {deepEqual( Stem("jungly"), "jungli");});
test("junior -> junior", function() {deepEqual( Stem("junior"), "junior");});
test("juniors -> junior", function() {deepEqual( Stem("juniors"), "junior");});
test("junius -> juniu", function() {deepEqual( Stem("junius"), "juniu");});
test("junket -> junket", function() {deepEqual( Stem("junket"), "junket");});
test("junkets -> junket", function() {deepEqual( Stem("junkets"), "junket");});
test("juno -> juno", function() {deepEqual( Stem("juno"), "juno");});
test("jupiter -> jupit", function() {deepEqual( Stem("jupiter"), "jupit");});
test("jure -> jure", function() {deepEqual( Stem("jure"), "jure");});
test("jurement -> jurement", function() {deepEqual( Stem("jurement"), "jurement");});
test("jurisdiction -> jurisdict", function() {deepEqual( Stem("jurisdiction"), "jurisdict");});
test("juror -> juror", function() {deepEqual( Stem("juror"), "juror");});
test("jurors -> juror", function() {deepEqual( Stem("jurors"), "juror");});
test("jury -> juri", function() {deepEqual( Stem("jury"), "juri");});
test("jurymen -> jurymen", function() {deepEqual( Stem("jurymen"), "jurymen");});
test("just -> just", function() {deepEqual( Stem("just"), "just");});
test("justeius -> justeiu", function() {deepEqual( Stem("justeius"), "justeiu");});
test("justest -> justest", function() {deepEqual( Stem("justest"), "justest");});
test("justice -> justic", function() {deepEqual( Stem("justice"), "justic");});
test("justicer -> justic", function() {deepEqual( Stem("justicer"), "justic");});
test("justicers -> justic", function() {deepEqual( Stem("justicers"), "justic");});
test("justices -> justic", function() {deepEqual( Stem("justices"), "justic");});
test("justifiable -> justifi", function() {deepEqual( Stem("justifiable"), "justifi");});
test("justification -> justif", function() {deepEqual( Stem("justification"), "justif");});
test("justified -> justifi", function() {deepEqual( Stem("justified"), "justifi");});
test("justify -> justifi", function() {deepEqual( Stem("justify"), "justifi");});
test("justle -> justl", function() {deepEqual( Stem("justle"), "justl");});
test("justled -> justl", function() {deepEqual( Stem("justled"), "justl");});
test("justles -> justl", function() {deepEqual( Stem("justles"), "justl");});
test("justling -> justl", function() {deepEqual( Stem("justling"), "justl");});
test("justly -> justli", function() {deepEqual( Stem("justly"), "justli");});
test("justness -> just", function() {deepEqual( Stem("justness"), "just");});
test("justs -> just", function() {deepEqual( Stem("justs"), "just");});
test("jutting -> jut", function() {deepEqual( Stem("jutting"), "jut");});
test("jutty -> jutti", function() {deepEqual( Stem("jutty"), "jutti");});
test("juvenal -> juven", function() {deepEqual( Stem("juvenal"), "juven");});
test("juvenile -> juvenil", function() {deepEqual( Stem("juvenile"), "juvenil");});
test("k -> k", function() {deepEqual( Stem("k"), "k");});
test("kalydor -> kalydor", function() {deepEqual( Stem("kalydor"), "kalydor");});
test("kam -> kam", function() {deepEqual( Stem("kam"), "kam");});
test("kangaroo -> kangaroo", function() {deepEqual( Stem("kangaroo"), "kangaroo");});
test("kartoffeln -> kartoffeln", function() {deepEqual( Stem("kartoffeln"), "kartoffeln");});
test("kate -> kate", function() {deepEqual( Stem("kate"), "kate");});
test("kated -> kate", function() {deepEqual( Stem("kated"), "kate");});
test("kates -> kate", function() {deepEqual( Stem("kates"), "kate");});
test("katharine -> katharin", function() {deepEqual( Stem("katharine"), "katharin");});
test("katherina -> katherina", function() {deepEqual( Stem("katherina"), "katherina");});
test("katherine -> katherin", function() {deepEqual( Stem("katherine"), "katherin");});
test("kattervang -> kattervang", function() {deepEqual( Stem("kattervang"), "kattervang");});
test("kean -> kean", function() {deepEqual( Stem("kean"), "kean");});
test("kecksies -> kecksi", function() {deepEqual( Stem("kecksies"), "kecksi");});
test("keech -> keech", function() {deepEqual( Stem("keech"), "keech");});
test("keel -> keel", function() {deepEqual( Stem("keel"), "keel");});
test("keels -> keel", function() {deepEqual( Stem("keels"), "keel");});
test("keen -> keen", function() {deepEqual( Stem("keen"), "keen");});
test("keenest -> keenest", function() {deepEqual( Stem("keenest"), "keenest");});
test("keenly -> keenli", function() {deepEqual( Stem("keenly"), "keenli");});
test("keenness -> keen", function() {deepEqual( Stem("keenness"), "keen");});
test("keep -> keep", function() {deepEqual( Stem("keep"), "keep");});
test("keepdown -> keepdown", function() {deepEqual( Stem("keepdown"), "keepdown");});
test("keeper -> keeper", function() {deepEqual( Stem("keeper"), "keeper");});
test("keepers -> keeper", function() {deepEqual( Stem("keepers"), "keeper");});
test("keepest -> keepest", function() {deepEqual( Stem("keepest"), "keepest");});
test("keeping -> keep", function() {deepEqual( Stem("keeping"), "keep");});
test("keeps -> keep", function() {deepEqual( Stem("keeps"), "keep");});
test("keepsakes -> keepsak", function() {deepEqual( Stem("keepsakes"), "keepsak");});
test("keiser -> keiser", function() {deepEqual( Stem("keiser"), "keiser");});
test("kemble -> kembl", function() {deepEqual( Stem("kemble"), "kembl");});
test("ken -> ken", function() {deepEqual( Stem("ken"), "ken");});
test("kenal -> kenal", function() {deepEqual( Stem("kenal"), "kenal");});
test("kendal -> kendal", function() {deepEqual( Stem("kendal"), "kendal");});
test("kennel -> kennel", function() {deepEqual( Stem("kennel"), "kennel");});
test("kennels -> kennel", function() {deepEqual( Stem("kennels"), "kennel");});
test("kensington -> kensington", function() {deepEqual( Stem("kensington"), "kensington");});
test("kent -> kent", function() {deepEqual( Stem("kent"), "kent");});
test("kentish -> kentish", function() {deepEqual( Stem("kentish"), "kentish");});
test("kentishman -> kentishman", function() {deepEqual( Stem("kentishman"), "kentishman");});
test("kentishmen -> kentishmen", function() {deepEqual( Stem("kentishmen"), "kentishmen");});
test("kep -> kep", function() {deepEqual( Stem("kep"), "kep");});
test("kept -> kept", function() {deepEqual( Stem("kept"), "kept");});
test("kerchief -> kerchief", function() {deepEqual( Stem("kerchief"), "kerchief");});
test("kerely -> kere", function() {deepEqual( Stem("kerely"), "kere");});
test("kern -> kern", function() {deepEqual( Stem("kern"), "kern");});
test("kernal -> kernal", function() {deepEqual( Stem("kernal"), "kernal");});
test("kernel -> kernel", function() {deepEqual( Stem("kernel"), "kernel");});
test("kernels -> kernel", function() {deepEqual( Stem("kernels"), "kernel");});
test("kerns -> kern", function() {deepEqual( Stem("kerns"), "kern");});
test("kersey -> kersei", function() {deepEqual( Stem("kersey"), "kersei");});
test("ketch -> ketch", function() {deepEqual( Stem("ketch"), "ketch");});
test("kettle -> kettl", function() {deepEqual( Stem("kettle"), "kettl");});
test("kettledrum -> kettledrum", function() {deepEqual( Stem("kettledrum"), "kettledrum");});
test("kettledrums -> kettledrum", function() {deepEqual( Stem("kettledrums"), "kettledrum");});
test("kettles -> kettl", function() {deepEqual( Stem("kettles"), "kettl");});
test("kew -> kew", function() {deepEqual( Stem("kew"), "kew");});
test("key -> kei", function() {deepEqual( Stem("key"), "kei");});
test("keyhole -> keyhol", function() {deepEqual( Stem("keyhole"), "keyhol");});
test("keys -> kei", function() {deepEqual( Stem("keys"), "kei");});
test("kibe -> kibe", function() {deepEqual( Stem("kibe"), "kibe");});
test("kibes -> kibe", function() {deepEqual( Stem("kibes"), "kibe");});
test("kibob -> kibob", function() {deepEqual( Stem("kibob"), "kibob");});
test("kibobjee -> kibobje", function() {deepEqual( Stem("kibobjee"), "kibobje");});
test("kick -> kick", function() {deepEqual( Stem("kick"), "kick");});
test("kicked -> kick", function() {deepEqual( Stem("kicked"), "kick");});
test("kicker -> kicker", function() {deepEqual( Stem("kicker"), "kicker");});
test("kicking -> kick", function() {deepEqual( Stem("kicking"), "kick");});
test("kicklebury -> kickleburi", function() {deepEqual( Stem("kicklebury"), "kickleburi");});
test("kickshaws -> kickshaw", function() {deepEqual( Stem("kickshaws"), "kickshaw");});
test("kickshawses -> kickshaws", function() {deepEqual( Stem("kickshawses"), "kickshaws");});
test("kicky -> kicki", function() {deepEqual( Stem("kicky"), "kicki");});
test("kid -> kid", function() {deepEqual( Stem("kid"), "kid");});
test("kidney -> kidnei", function() {deepEqual( Stem("kidney"), "kidnei");});
test("kidneys -> kidnei", function() {deepEqual( Stem("kidneys"), "kidnei");});
test("kikely -> kike", function() {deepEqual( Stem("kikely"), "kike");});
test("kildare -> kildar", function() {deepEqual( Stem("kildare"), "kildar");});
test("kill -> kill", function() {deepEqual( Stem("kill"), "kill");});
test("killarney -> killarnei", function() {deepEqual( Stem("killarney"), "killarnei");});
test("killed -> kill", function() {deepEqual( Stem("killed"), "kill");});
test("killer -> killer", function() {deepEqual( Stem("killer"), "killer");});
test("killeth -> killeth", function() {deepEqual( Stem("killeth"), "killeth");});
test("killing -> kill", function() {deepEqual( Stem("killing"), "kill");});
test("killingworth -> killingworth", function() {deepEqual( Stem("killingworth"), "killingworth");});
test("kills -> kill", function() {deepEqual( Stem("kills"), "kill");});
test("kiln -> kiln", function() {deepEqual( Stem("kiln"), "kiln");});
test("kimbolton -> kimbolton", function() {deepEqual( Stem("kimbolton"), "kimbolton");});
test("kin -> kin", function() {deepEqual( Stem("kin"), "kin");});
test("kind -> kind", function() {deepEqual( Stem("kind"), "kind");});
test("kinder -> kinder", function() {deepEqual( Stem("kinder"), "kinder");});
test("kindest -> kindest", function() {deepEqual( Stem("kindest"), "kindest");});
test("kindle -> kindl", function() {deepEqual( Stem("kindle"), "kindl");});
test("kindled -> kindl", function() {deepEqual( Stem("kindled"), "kindl");});
test("kindless -> kindless", function() {deepEqual( Stem("kindless"), "kindless");});
test("kindlier -> kindlier", function() {deepEqual( Stem("kindlier"), "kindlier");});
test("kindliest -> kindliest", function() {deepEqual( Stem("kindliest"), "kindliest");});
test("kindling -> kindl", function() {deepEqual( Stem("kindling"), "kindl");});
test("kindly -> kindli", function() {deepEqual( Stem("kindly"), "kindli");});
test("kindness -> kind", function() {deepEqual( Stem("kindness"), "kind");});
test("kindnesses -> kind", function() {deepEqual( Stem("kindnesses"), "kind");});
test("kindred -> kindr", function() {deepEqual( Stem("kindred"), "kindr");});
test("kindreds -> kindr", function() {deepEqual( Stem("kindreds"), "kindr");});
test("kinds -> kind", function() {deepEqual( Stem("kinds"), "kind");});
test("kine -> kine", function() {deepEqual( Stem("kine"), "kine");});
test("king -> king", function() {deepEqual( Stem("king"), "king");});
test("kingdom -> kingdom", function() {deepEqual( Stem("kingdom"), "kingdom");});
test("kingdoms -> kingdom", function() {deepEqual( Stem("kingdoms"), "kingdom");});
test("kingly -> kingli", function() {deepEqual( Stem("kingly"), "kingli");});
test("kings -> king", function() {deepEqual( Stem("kings"), "king");});
test("kingstreet -> kingstreet", function() {deepEqual( Stem("kingstreet"), "kingstreet");});
test("kinred -> kinr", function() {deepEqual( Stem("kinred"), "kinr");});
test("kins -> kin", function() {deepEqual( Stem("kins"), "kin");});
test("kinsfolk -> kinsfolk", function() {deepEqual( Stem("kinsfolk"), "kinsfolk");});
test("kinsman -> kinsman", function() {deepEqual( Stem("kinsman"), "kinsman");});
test("kinsmen -> kinsmen", function() {deepEqual( Stem("kinsmen"), "kinsmen");});
test("kinswoman -> kinswoman", function() {deepEqual( Stem("kinswoman"), "kinswoman");});
test("kinswomen -> kinswomen", function() {deepEqual( Stem("kinswomen"), "kinswomen");});
test("kirk -> kirk", function() {deepEqual( Stem("kirk"), "kirk");});
test("kirsch -> kirsch", function() {deepEqual( Stem("kirsch"), "kirsch");});
test("kirtle -> kirtl", function() {deepEqual( Stem("kirtle"), "kirtl");});
test("kirtles -> kirtl", function() {deepEqual( Stem("kirtles"), "kirtl");});
test("kislar -> kislar", function() {deepEqual( Stem("kislar"), "kislar");});
test("kiss -> kiss", function() {deepEqual( Stem("kiss"), "kiss");});
test("kissed -> kiss", function() {deepEqual( Stem("kissed"), "kiss");});
test("kisses -> kiss", function() {deepEqual( Stem("kisses"), "kiss");});
test("kissing -> kiss", function() {deepEqual( Stem("kissing"), "kiss");});
test("kissingen -> kissingen", function() {deepEqual( Stem("kissingen"), "kissingen");});
test("kit -> kit", function() {deepEqual( Stem("kit"), "kit");});
test("kitchen -> kitchen", function() {deepEqual( Stem("kitchen"), "kitchen");});
test("kitchens -> kitchen", function() {deepEqual( Stem("kitchens"), "kitchen");});
test("kite -> kite", function() {deepEqual( Stem("kite"), "kite");});
test("kitely -> kite", function() {deepEqual( Stem("kitely"), "kite");});
test("kites -> kite", function() {deepEqual( Stem("kites"), "kite");});
test("kitt -> kitt", function() {deepEqual( Stem("kitt"), "kitt");});
test("kitten -> kitten", function() {deepEqual( Stem("kitten"), "kitten");});
test("kitts -> kitt", function() {deepEqual( Stem("kitts"), "kitt");});
test("kj -> kj", function() {deepEqual( Stem("kj"), "kj");});
test("kl -> kl", function() {deepEqual( Stem("kl"), "kl");});
test("klingenspohr -> klingenspohr", function() {deepEqual( Stem("klingenspohr"), "klingenspohr");});
test("klll -> klll", function() {deepEqual( Stem("klll"), "klll");});
test("knack -> knack", function() {deepEqual( Stem("knack"), "knack");});
test("knacks -> knack", function() {deepEqual( Stem("knacks"), "knack");});
test("knapp -> knapp", function() {deepEqual( Stem("knapp"), "knapp");});
test("knapsack -> knapsack", function() {deepEqual( Stem("knapsack"), "knapsack");});
test("knav -> knav", function() {deepEqual( Stem("knav"), "knav");});
test("knave -> knave", function() {deepEqual( Stem("knave"), "knave");});
test("knaveries -> knaveri", function() {deepEqual( Stem("knaveries"), "knaveri");});
test("knavery -> knaveri", function() {deepEqual( Stem("knavery"), "knaveri");});
test("knaves -> knave", function() {deepEqual( Stem("knaves"), "knave");});
test("knavish -> knavish", function() {deepEqual( Stem("knavish"), "knavish");});
test("knead -> knead", function() {deepEqual( Stem("knead"), "knead");});
test("kneaded -> knead", function() {deepEqual( Stem("kneaded"), "knead");});
test("kneading -> knead", function() {deepEqual( Stem("kneading"), "knead");});
test("knee -> knee", function() {deepEqual( Stem("knee"), "knee");});
test("kneel -> kneel", function() {deepEqual( Stem("kneel"), "kneel");});
test("kneeling -> kneel", function() {deepEqual( Stem("kneeling"), "kneel");});
test("kneels -> kneel", function() {deepEqual( Stem("kneels"), "kneel");});
test("knees -> knee", function() {deepEqual( Stem("knees"), "knee");});
test("knell -> knell", function() {deepEqual( Stem("knell"), "knell");});
test("knelled -> knell", function() {deepEqual( Stem("knelled"), "knell");});
test("knelt -> knelt", function() {deepEqual( Stem("knelt"), "knelt");});
test("knew -> knew", function() {deepEqual( Stem("knew"), "knew");});
test("knewest -> knewest", function() {deepEqual( Stem("knewest"), "knewest");});
test("knick -> knick", function() {deepEqual( Stem("knick"), "knick");});
test("knicknacks -> knicknack", function() {deepEqual( Stem("knicknacks"), "knicknack");});
test("knife -> knife", function() {deepEqual( Stem("knife"), "knife");});
test("knight -> knight", function() {deepEqual( Stem("knight"), "knight");});
test("knighted -> knight", function() {deepEqual( Stem("knighted"), "knight");});
test("knighthood -> knighthood", function() {deepEqual( Stem("knighthood"), "knighthood");});
test("knighthoods -> knighthood", function() {deepEqual( Stem("knighthoods"), "knighthood");});
test("knightly -> knightli", function() {deepEqual( Stem("knightly"), "knightli");});
test("knights -> knight", function() {deepEqual( Stem("knights"), "knight");});
test("knightsbridge -> knightsbridg", function() {deepEqual( Stem("knightsbridge"), "knightsbridg");});
test("knit -> knit", function() {deepEqual( Stem("knit"), "knit");});
test("knits -> knit", function() {deepEqual( Stem("knits"), "knit");});
test("knitters -> knitter", function() {deepEqual( Stem("knitters"), "knitter");});
test("knitteth -> knitteth", function() {deepEqual( Stem("knitteth"), "knitteth");});
test("knitting -> knit", function() {deepEqual( Stem("knitting"), "knit");});
test("knives -> knive", function() {deepEqual( Stem("knives"), "knive");});
test("knobs -> knob", function() {deepEqual( Stem("knobs"), "knob");});
test("knock -> knock", function() {deepEqual( Stem("knock"), "knock");});
test("knocked -> knock", function() {deepEqual( Stem("knocked"), "knock");});
test("knocker -> knocker", function() {deepEqual( Stem("knocker"), "knocker");});
test("knocking -> knock", function() {deepEqual( Stem("knocking"), "knock");});
test("knocks -> knock", function() {deepEqual( Stem("knocks"), "knock");});
test("knog -> knog", function() {deepEqual( Stem("knog"), "knog");});
test("knoll -> knoll", function() {deepEqual( Stem("knoll"), "knoll");});
test("knot -> knot", function() {deepEqual( Stem("knot"), "knot");});
test("knots -> knot", function() {deepEqual( Stem("knots"), "knot");});
test("knotted -> knot", function() {deepEqual( Stem("knotted"), "knot");});
test("knotty -> knotti", function() {deepEqual( Stem("knotty"), "knotti");});
test("knout -> knout", function() {deepEqual( Stem("knout"), "knout");});
test("know -> know", function() {deepEqual( Stem("know"), "know");});
test("knower -> knower", function() {deepEqual( Stem("knower"), "knower");});
test("knowest -> knowest", function() {deepEqual( Stem("knowest"), "knowest");});
test("knowing -> know", function() {deepEqual( Stem("knowing"), "know");});
test("knowingest -> knowingest", function() {deepEqual( Stem("knowingest"), "knowingest");});
test("knowingly -> knowingli", function() {deepEqual( Stem("knowingly"), "knowingli");});
test("knowingness -> knowing", function() {deepEqual( Stem("knowingness"), "knowing");});
test("knowings -> know", function() {deepEqual( Stem("knowings"), "know");});
test("knowledge -> knowledg", function() {deepEqual( Stem("knowledge"), "knowledg");});
test("known -> known", function() {deepEqual( Stem("known"), "known");});
test("knows -> know", function() {deepEqual( Stem("knows"), "know");});
test("knuckled -> knuckl", function() {deepEqual( Stem("knuckled"), "knuckl");});
test("knuckles -> knuckl", function() {deepEqual( Stem("knuckles"), "knuckl");});
test("knuckling -> knuckl", function() {deepEqual( Stem("knuckling"), "knuckl");});
test("konigswinter -> konigswint", function() {deepEqual( Stem("konigswinter"), "konigswint");});
test("kunz -> kunz", function() {deepEqual( Stem("kunz"), "kunz");});
test("kyind -> kyind", function() {deepEqual( Stem("kyind"), "kyind");});
test("l -> l", function() {deepEqual( Stem("l"), "l");});
test("la -> la", function() {deepEqual( Stem("la"), "la");});
test("laban -> laban", function() {deepEqual( Stem("laban"), "laban");});
test("label -> label", function() {deepEqual( Stem("label"), "label");});
test("labell -> label", function() {deepEqual( Stem("labell"), "label");});
test("labienus -> labienu", function() {deepEqual( Stem("labienus"), "labienu");});
test("labio -> labio", function() {deepEqual( Stem("labio"), "labio");});
test("labor -> labor", function() {deepEqual( Stem("labor"), "labor");});
test("laboring -> labor", function() {deepEqual( Stem("laboring"), "labor");});
test("laborious -> labori", function() {deepEqual( Stem("laborious"), "labori");});
test("laboriously -> labori", function() {deepEqual( Stem("laboriously"), "labori");});
test("labors -> labor", function() {deepEqual( Stem("labors"), "labor");});
test("labour -> labour", function() {deepEqual( Stem("labour"), "labour");});
test("laboured -> labour", function() {deepEqual( Stem("laboured"), "labour");});
test("labourer -> labour", function() {deepEqual( Stem("labourer"), "labour");});
test("labourers -> labour", function() {deepEqual( Stem("labourers"), "labour");});
test("labouring -> labour", function() {deepEqual( Stem("labouring"), "labour");});
test("labours -> labour", function() {deepEqual( Stem("labours"), "labour");});
test("laboursome -> laboursom", function() {deepEqual( Stem("laboursome"), "laboursom");});
test("labras -> labra", function() {deepEqual( Stem("labras"), "labra");});
test("labyrinth -> labyrinth", function() {deepEqual( Stem("labyrinth"), "labyrinth");});
test("lac -> lac", function() {deepEqual( Stem("lac"), "lac");});
test("lace -> lace", function() {deepEqual( Stem("lace"), "lace");});
test("laced -> lace", function() {deepEqual( Stem("laced"), "lace");});
test("lacedaemon -> lacedaemon", function() {deepEqual( Stem("lacedaemon"), "lacedaemon");});
test("laces -> lace", function() {deepEqual( Stem("laces"), "lace");});
test("lacies -> laci", function() {deepEqual( Stem("lacies"), "laci");});
test("lack -> lack", function() {deepEqual( Stem("lack"), "lack");});
test("lackadaisical -> lackadais", function() {deepEqual( Stem("lackadaisical"), "lackadais");});
test("lackbeard -> lackbeard", function() {deepEqual( Stem("lackbeard"), "lackbeard");});
test("lacked -> lack", function() {deepEqual( Stem("lacked"), "lack");});
test("lackey -> lackei", function() {deepEqual( Stem("lackey"), "lackei");});
test("lackeying -> lackei", function() {deepEqual( Stem("lackeying"), "lackei");});
test("lackeys -> lackei", function() {deepEqual( Stem("lackeys"), "lackei");});
test("lacking -> lack", function() {deepEqual( Stem("lacking"), "lack");});
test("lacks -> lack", function() {deepEqual( Stem("lacks"), "lack");});
test("lacquered -> lacquer", function() {deepEqual( Stem("lacquered"), "lacquer");});
test("lacqueys -> lacquei", function() {deepEqual( Stem("lacqueys"), "lacquei");});
test("lacs -> lac", function() {deepEqual( Stem("lacs"), "lac");});
test("lad -> lad", function() {deepEqual( Stem("lad"), "lad");});
test("ladder -> ladder", function() {deepEqual( Stem("ladder"), "ladder");});
test("ladders -> ladder", function() {deepEqual( Stem("ladders"), "ladder");});
test("lade -> lade", function() {deepEqual( Stem("lade"), "lade");});
test("laden -> laden", function() {deepEqual( Stem("laden"), "laden");});
test("ladies -> ladi", function() {deepEqual( Stem("ladies"), "ladi");});
test("lading -> lade", function() {deepEqual( Stem("lading"), "lade");});
test("ladle -> ladl", function() {deepEqual( Stem("ladle"), "ladl");});
test("lads -> lad", function() {deepEqual( Stem("lads"), "lad");});
test("lady -> ladi", function() {deepEqual( Stem("lady"), "ladi");});
test("ladybird -> ladybird", function() {deepEqual( Stem("ladybird"), "ladybird");});
test("ladylike -> ladylik", function() {deepEqual( Stem("ladylike"), "ladylik");});
test("ladyship -> ladyship", function() {deepEqual( Stem("ladyship"), "ladyship");});
test("ladyships -> ladyship", function() {deepEqual( Stem("ladyships"), "ladyship");});
test("laeken -> laeken", function() {deepEqual( Stem("laeken"), "laeken");});
test("laer -> laer", function() {deepEqual( Stem("laer"), "laer");});
test("laertes -> laert", function() {deepEqual( Stem("laertes"), "laert");});
test("lafeu -> lafeu", function() {deepEqual( Stem("lafeu"), "lafeu");});
test("lafitte -> lafitt", function() {deepEqual( Stem("lafitte"), "lafitt");});
test("lag -> lag", function() {deepEqual( Stem("lag"), "lag");});
test("lagging -> lag", function() {deepEqual( Stem("lagging"), "lag");});
test("lagrime -> lagrim", function() {deepEqual( Stem("lagrime"), "lagrim");});
test("laics -> laic", function() {deepEqual( Stem("laics"), "laic");});
test("laid -> laid", function() {deepEqual( Stem("laid"), "laid");});
test("lain -> lain", function() {deepEqual( Stem("lain"), "lain");});
test("laissez -> laissez", function() {deepEqual( Stem("laissez"), "laissez");});
test("lake -> lake", function() {deepEqual( Stem("lake"), "lake");});
test("lakes -> lake", function() {deepEqual( Stem("lakes"), "lake");});
test("lakin -> lakin", function() {deepEqual( Stem("lakin"), "lakin");});
test("lam -> lam", function() {deepEqual( Stem("lam"), "lam");});
test("lamb -> lamb", function() {deepEqual( Stem("lamb"), "lamb");});
test("lambert -> lambert", function() {deepEqual( Stem("lambert"), "lambert");});
test("lambeth -> lambeth", function() {deepEqual( Stem("lambeth"), "lambeth");});
test("lambkin -> lambkin", function() {deepEqual( Stem("lambkin"), "lambkin");});
test("lambkins -> lambkin", function() {deepEqual( Stem("lambkins"), "lambkin");});
test("lambs -> lamb", function() {deepEqual( Stem("lambs"), "lamb");});
test("lame -> lame", function() {deepEqual( Stem("lame"), "lame");});
test("lamely -> lame", function() {deepEqual( Stem("lamely"), "lame");});
test("lameness -> lame", function() {deepEqual( Stem("lameness"), "lame");});
test("lament -> lament", function() {deepEqual( Stem("lament"), "lament");});
test("lamentable -> lament", function() {deepEqual( Stem("lamentable"), "lament");});
test("lamentably -> lament", function() {deepEqual( Stem("lamentably"), "lament");});
test("lamentation -> lament", function() {deepEqual( Stem("lamentation"), "lament");});
test("lamentations -> lament", function() {deepEqual( Stem("lamentations"), "lament");});
test("lamented -> lament", function() {deepEqual( Stem("lamented"), "lament");});
test("lamenting -> lament", function() {deepEqual( Stem("lamenting"), "lament");});
test("lamentings -> lament", function() {deepEqual( Stem("lamentings"), "lament");});
test("laments -> lament", function() {deepEqual( Stem("laments"), "lament");});
test("lames -> lame", function() {deepEqual( Stem("lames"), "lame");});
test("laming -> lame", function() {deepEqual( Stem("laming"), "lame");});
test("lammas -> lamma", function() {deepEqual( Stem("lammas"), "lamma");});
test("lammastide -> lammastid", function() {deepEqual( Stem("lammastide"), "lammastid");});
test("lamound -> lamound", function() {deepEqual( Stem("lamound"), "lamound");});
test("lamp -> lamp", function() {deepEqual( Stem("lamp"), "lamp");});
test("lampass -> lampass", function() {deepEqual( Stem("lampass"), "lampass");});
test("lampions -> lampion", function() {deepEqual( Stem("lampions"), "lampion");});
test("lamplight -> lamplight", function() {deepEqual( Stem("lamplight"), "lamplight");});
test("lamps -> lamp", function() {deepEqual( Stem("lamps"), "lamp");});
test("lanc -> lanc", function() {deepEqual( Stem("lanc"), "lanc");});
test("lancaster -> lancast", function() {deepEqual( Stem("lancaster"), "lancast");});
test("lance -> lanc", function() {deepEqual( Stem("lance"), "lanc");});
test("lancelot -> lancelot", function() {deepEqual( Stem("lancelot"), "lancelot");});
test("lancer -> lancer", function() {deepEqual( Stem("lancer"), "lancer");});
test("lances -> lanc", function() {deepEqual( Stem("lances"), "lanc");});
test("lanceth -> lanceth", function() {deepEqual( Stem("lanceth"), "lanceth");});
test("lanch -> lanch", function() {deepEqual( Stem("lanch"), "lanch");});
test("land -> land", function() {deepEqual( Stem("land"), "land");});
test("landed -> land", function() {deepEqual( Stem("landed"), "land");});
test("landing -> land", function() {deepEqual( Stem("landing"), "land");});
test("landlady -> landladi", function() {deepEqual( Stem("landlady"), "landladi");});
test("landless -> landless", function() {deepEqual( Stem("landless"), "landless");});
test("landlord -> landlord", function() {deepEqual( Stem("landlord"), "landlord");});
test("landlords -> landlord", function() {deepEqual( Stem("landlords"), "landlord");});
test("landmen -> landmen", function() {deepEqual( Stem("landmen"), "landmen");});
test("lands -> land", function() {deepEqual( Stem("lands"), "land");});
test("landscape -> landscap", function() {deepEqual( Stem("landscape"), "landscap");});
test("lane -> lane", function() {deepEqual( Stem("lane"), "lane");});
test("lanes -> lane", function() {deepEqual( Stem("lanes"), "lane");});
test("langage -> langag", function() {deepEqual( Stem("langage"), "langag");});
test("langley -> langlei", function() {deepEqual( Stem("langley"), "langlei");});
test("langton -> langton", function() {deepEqual( Stem("langton"), "langton");});
test("language -> languag", function() {deepEqual( Stem("language"), "languag");});
test("languageless -> languageless", function() {deepEqual( Stem("languageless"), "languageless");});
test("languages -> languag", function() {deepEqual( Stem("languages"), "languag");});
test("langues -> langu", function() {deepEqual( Stem("langues"), "langu");});
test("languid -> languid", function() {deepEqual( Stem("languid"), "languid");});
test("languidly -> languidli", function() {deepEqual( Stem("languidly"), "languidli");});
test("languish -> languish", function() {deepEqual( Stem("languish"), "languish");});
test("languished -> languish", function() {deepEqual( Stem("languished"), "languish");});
test("languishes -> languish", function() {deepEqual( Stem("languishes"), "languish");});
test("languishing -> languish", function() {deepEqual( Stem("languishing"), "languish");});
test("languishings -> languish", function() {deepEqual( Stem("languishings"), "languish");});
test("languishment -> languish", function() {deepEqual( Stem("languishment"), "languish");});
test("languor -> languor", function() {deepEqual( Stem("languor"), "languor");});
test("lank -> lank", function() {deepEqual( Stem("lank"), "lank");});
test("lanky -> lanki", function() {deepEqual( Stem("lanky"), "lanki");});
test("lantern -> lantern", function() {deepEqual( Stem("lantern"), "lantern");});
test("lanterns -> lantern", function() {deepEqual( Stem("lanterns"), "lantern");});
test("lanthorn -> lanthorn", function() {deepEqual( Stem("lanthorn"), "lanthorn");});
test("lap -> lap", function() {deepEqual( Stem("lap"), "lap");});
test("lapin -> lapin", function() {deepEqual( Stem("lapin"), "lapin");});
test("lapis -> lapi", function() {deepEqual( Stem("lapis"), "lapi");});
test("lapland -> lapland", function() {deepEqual( Stem("lapland"), "lapland");});
test("lapp -> lapp", function() {deepEqual( Stem("lapp"), "lapp");});
test("lappets -> lappet", function() {deepEqual( Stem("lappets"), "lappet");});
test("laps -> lap", function() {deepEqual( Stem("laps"), "lap");});
test("lapse -> laps", function() {deepEqual( Stem("lapse"), "laps");});
test("lapsed -> laps", function() {deepEqual( Stem("lapsed"), "laps");});
test("lapsing -> laps", function() {deepEqual( Stem("lapsing"), "laps");});
test("lapwing -> lapw", function() {deepEqual( Stem("lapwing"), "lapw");});
test("laquais -> laquai", function() {deepEqual( Stem("laquais"), "laquai");});
test("lar -> lar", function() {deepEqual( Stem("lar"), "lar");});
test("larded -> lard", function() {deepEqual( Stem("larded"), "lard");});
test("larder -> larder", function() {deepEqual( Stem("larder"), "larder");});
test("larding -> lard", function() {deepEqual( Stem("larding"), "lard");});
test("lards -> lard", function() {deepEqual( Stem("lards"), "lard");});
test("lares -> lare", function() {deepEqual( Stem("lares"), "lare");});
test("large -> larg", function() {deepEqual( Stem("large"), "larg");});
test("largely -> larg", function() {deepEqual( Stem("largely"), "larg");});
test("largeness -> larg", function() {deepEqual( Stem("largeness"), "larg");});
test("larger -> larger", function() {deepEqual( Stem("larger"), "larger");});
test("largess -> largess", function() {deepEqual( Stem("largess"), "largess");});
test("largest -> largest", function() {deepEqual( Stem("largest"), "largest");});
test("lark -> lark", function() {deepEqual( Stem("lark"), "lark");});
test("larked -> lark", function() {deepEqual( Stem("larked"), "lark");});
test("larking -> lark", function() {deepEqual( Stem("larking"), "lark");});
test("larks -> lark", function() {deepEqual( Stem("larks"), "lark");});
test("larron -> larron", function() {deepEqual( Stem("larron"), "larron");});
test("lartius -> lartiu", function() {deepEqual( Stem("lartius"), "lartiu");});
test("larum -> larum", function() {deepEqual( Stem("larum"), "larum");});
test("larums -> larum", function() {deepEqual( Stem("larums"), "larum");});
test("las -> la", function() {deepEqual( Stem("las"), "la");});
test("lascivious -> lascivi", function() {deepEqual( Stem("lascivious"), "lascivi");});
test("lash -> lash", function() {deepEqual( Stem("lash"), "lash");});
test("lashed -> lash", function() {deepEqual( Stem("lashed"), "lash");});
test("lashing -> lash", function() {deepEqual( Stem("lashing"), "lash");});
test("lass -> lass", function() {deepEqual( Stem("lass"), "lass");});
test("lassata -> lassata", function() {deepEqual( Stem("lassata"), "lassata");});
test("lasses -> lass", function() {deepEqual( Stem("lasses"), "lass");});
test("last -> last", function() {deepEqual( Stem("last"), "last");});
test("lasted -> last", function() {deepEqual( Stem("lasted"), "last");});
test("lasting -> last", function() {deepEqual( Stem("lasting"), "last");});
test("lastly -> lastli", function() {deepEqual( Stem("lastly"), "lastli");});
test("lasts -> last", function() {deepEqual( Stem("lasts"), "last");});
test("latch -> latch", function() {deepEqual( Stem("latch"), "latch");});
test("latches -> latch", function() {deepEqual( Stem("latches"), "latch");});
test("late -> late", function() {deepEqual( Stem("late"), "late");});
test("lated -> late", function() {deepEqual( Stem("lated"), "late");});
test("lately -> late", function() {deepEqual( Stem("lately"), "late");});
test("later -> later", function() {deepEqual( Stem("later"), "later");});
test("latest -> latest", function() {deepEqual( Stem("latest"), "latest");});
test("lath -> lath", function() {deepEqual( Stem("lath"), "lath");});
test("lathe -> lath", function() {deepEqual( Stem("lathe"), "lath");});
test("latimer -> latim", function() {deepEqual( Stem("latimer"), "latim");});
test("latin -> latin", function() {deepEqual( Stem("latin"), "latin");});
test("latten -> latten", function() {deepEqual( Stem("latten"), "latten");});
test("latter -> latter", function() {deepEqual( Stem("latter"), "latter");});
test("lattice -> lattic", function() {deepEqual( Stem("lattice"), "lattic");});
test("latude -> latud", function() {deepEqual( Stem("latude"), "latud");});
test("laud -> laud", function() {deepEqual( Stem("laud"), "laud");});
test("laudable -> laudabl", function() {deepEqual( Stem("laudable"), "laudabl");});
test("laudanum -> laudanum", function() {deepEqual( Stem("laudanum"), "laudanum");});
test("lauded -> laud", function() {deepEqual( Stem("lauded"), "laud");});
test("laudis -> laudi", function() {deepEqual( Stem("laudis"), "laudi");});
test("laugh -> laugh", function() {deepEqual( Stem("laugh"), "laugh");});
test("laughable -> laughabl", function() {deepEqual( Stem("laughable"), "laughabl");});
test("laughed -> laugh", function() {deepEqual( Stem("laughed"), "laugh");});
test("laugher -> laugher", function() {deepEqual( Stem("laugher"), "laugher");});
test("laughest -> laughest", function() {deepEqual( Stem("laughest"), "laughest");});
test("laughing -> laugh", function() {deepEqual( Stem("laughing"), "laugh");});
test("laughingly -> laughingli", function() {deepEqual( Stem("laughingly"), "laughingli");});
test("laughs -> laugh", function() {deepEqual( Stem("laughs"), "laugh");});
test("laughter -> laughter", function() {deepEqual( Stem("laughter"), "laughter");});
test("launce -> launc", function() {deepEqual( Stem("launce"), "launc");});
test("launcelot -> launcelot", function() {deepEqual( Stem("launcelot"), "launcelot");});
test("launces -> launc", function() {deepEqual( Stem("launces"), "launc");});
test("launch -> launch", function() {deepEqual( Stem("launch"), "launch");});
test("launched -> launch", function() {deepEqual( Stem("launched"), "launch");});
test("laund -> laund", function() {deepEqual( Stem("laund"), "laund");});
test("laundress -> laundress", function() {deepEqual( Stem("laundress"), "laundress");});
test("laundry -> laundri", function() {deepEqual( Stem("laundry"), "laundri");});
test("laur -> laur", function() {deepEqual( Stem("laur"), "laur");});
test("laura -> laura", function() {deepEqual( Stem("laura"), "laura");});
test("laurel -> laurel", function() {deepEqual( Stem("laurel"), "laurel");});
test("laurels -> laurel", function() {deepEqual( Stem("laurels"), "laurel");});
test("laurence -> laurenc", function() {deepEqual( Stem("laurence"), "laurenc");});
test("laurentinum -> laurentinum", function() {deepEqual( Stem("laurentinum"), "laurentinum");});
test("laurie -> lauri", function() {deepEqual( Stem("laurie"), "lauri");});
test("laus -> lau", function() {deepEqual( Stem("laus"), "lau");});
test("lausanne -> lausann", function() {deepEqual( Stem("lausanne"), "lausann");});
test("lavache -> lavach", function() {deepEqual( Stem("lavache"), "lavach");});
test("lave -> lave", function() {deepEqual( Stem("lave"), "lave");});
test("lavee -> lave", function() {deepEqual( Stem("lavee"), "lave");});
test("lavender -> lavend", function() {deepEqual( Stem("lavender"), "lavend");});
test("laves -> lave", function() {deepEqual( Stem("laves"), "lave");});
test("lavina -> lavina", function() {deepEqual( Stem("lavina"), "lavina");});
test("lavinia -> lavinia", function() {deepEqual( Stem("lavinia"), "lavinia");});
test("lavish -> lavish", function() {deepEqual( Stem("lavish"), "lavish");});
test("lavished -> lavish", function() {deepEqual( Stem("lavished"), "lavish");});
test("lavishly -> lavishli", function() {deepEqual( Stem("lavishly"), "lavishli");});
test("lavolt -> lavolt", function() {deepEqual( Stem("lavolt"), "lavolt");});
test("lavoltas -> lavolta", function() {deepEqual( Stem("lavoltas"), "lavolta");});
test("law -> law", function() {deepEqual( Stem("law"), "law");});
test("lawful -> law", function() {deepEqual( Stem("lawful"), "law");});
test("lawfully -> lawfulli", function() {deepEqual( Stem("lawfully"), "lawfulli");});
test("lawless -> lawless", function() {deepEqual( Stem("lawless"), "lawless");});
test("lawlessly -> lawlessli", function() {deepEqual( Stem("lawlessly"), "lawlessli");});
test("lawn -> lawn", function() {deepEqual( Stem("lawn"), "lawn");});
test("lawns -> lawn", function() {deepEqual( Stem("lawns"), "lawn");});
test("lawrence -> lawrenc", function() {deepEqual( Stem("lawrence"), "lawrenc");});
test("laws -> law", function() {deepEqual( Stem("laws"), "law");});
test("lawsuit -> lawsuit", function() {deepEqual( Stem("lawsuit"), "lawsuit");});
test("lawsuits -> lawsuit", function() {deepEqual( Stem("lawsuits"), "lawsuit");});
test("lawyer -> lawyer", function() {deepEqual( Stem("lawyer"), "lawyer");});
test("lawyers -> lawyer", function() {deepEqual( Stem("lawyers"), "lawyer");});
test("lay -> lai", function() {deepEqual( Stem("lay"), "lai");});
test("layer -> layer", function() {deepEqual( Stem("layer"), "layer");});
test("layest -> layest", function() {deepEqual( Stem("layest"), "layest");});
test("laying -> lai", function() {deepEqual( Stem("laying"), "lai");});
test("laymen -> laymen", function() {deepEqual( Stem("laymen"), "laymen");});
test("lays -> lai", function() {deepEqual( Stem("lays"), "lai");});
test("lazar -> lazar", function() {deepEqual( Stem("lazar"), "lazar");});
test("lazars -> lazar", function() {deepEqual( Stem("lazars"), "lazar");});
test("lazarus -> lazaru", function() {deepEqual( Stem("lazarus"), "lazaru");});
test("lazily -> lazili", function() {deepEqual( Stem("lazily"), "lazili");});
test("laziness -> lazi", function() {deepEqual( Stem("laziness"), "lazi");});
test("lazy -> lazi", function() {deepEqual( Stem("lazy"), "lazi");});
test("lazzaroni -> lazzaroni", function() {deepEqual( Stem("lazzaroni"), "lazzaroni");});
test("lc -> lc", function() {deepEqual( Stem("lc"), "lc");});
test("ld -> ld", function() {deepEqual( Stem("ld"), "ld");});
test("ldst -> ldst", function() {deepEqual( Stem("ldst"), "ldst");});
test("le -> le", function() {deepEqual( Stem("le"), "le");});
test("lead -> lead", function() {deepEqual( Stem("lead"), "lead");});
test("leaden -> leaden", function() {deepEqual( Stem("leaden"), "leaden");});
test("leadenhall -> leadenhal", function() {deepEqual( Stem("leadenhall"), "leadenhal");});
test("leader -> leader", function() {deepEqual( Stem("leader"), "leader");});
test("leaders -> leader", function() {deepEqual( Stem("leaders"), "leader");});
test("leadest -> leadest", function() {deepEqual( Stem("leadest"), "leadest");});
test("leading -> lead", function() {deepEqual( Stem("leading"), "lead");});
test("leads -> lead", function() {deepEqual( Stem("leads"), "lead");});
test("leaf -> leaf", function() {deepEqual( Stem("leaf"), "leaf");});
test("leafless -> leafless", function() {deepEqual( Stem("leafless"), "leafless");});
test("leagu -> leagu", function() {deepEqual( Stem("leagu"), "leagu");});
test("league -> leagu", function() {deepEqual( Stem("league"), "leagu");});
test("leagued -> leagu", function() {deepEqual( Stem("leagued"), "leagu");});
test("leaguer -> leaguer", function() {deepEqual( Stem("leaguer"), "leaguer");});
test("leagues -> leagu", function() {deepEqual( Stem("leagues"), "leagu");});
test("leah -> leah", function() {deepEqual( Stem("leah"), "leah");});
test("leak -> leak", function() {deepEqual( Stem("leak"), "leak");});
test("leakington -> leakington", function() {deepEqual( Stem("leakington"), "leakington");});
test("leaky -> leaki", function() {deepEqual( Stem("leaky"), "leaki");});
test("lean -> lean", function() {deepEqual( Stem("lean"), "lean");});
test("leander -> leander", function() {deepEqual( Stem("leander"), "leander");});
test("leaned -> lean", function() {deepEqual( Stem("leaned"), "lean");});
test("leaner -> leaner", function() {deepEqual( Stem("leaner"), "leaner");});
test("leaning -> lean", function() {deepEqual( Stem("leaning"), "lean");});
test("leanness -> lean", function() {deepEqual( Stem("leanness"), "lean");});
test("leans -> lean", function() {deepEqual( Stem("leans"), "lean");});
test("leant -> leant", function() {deepEqual( Stem("leant"), "leant");});
test("leap -> leap", function() {deepEqual( Stem("leap"), "leap");});
test("leaped -> leap", function() {deepEqual( Stem("leaped"), "leap");});
test("leaping -> leap", function() {deepEqual( Stem("leaping"), "leap");});
test("leaps -> leap", function() {deepEqual( Stem("leaps"), "leap");});
test("leapt -> leapt", function() {deepEqual( Stem("leapt"), "leapt");});
test("lear -> lear", function() {deepEqual( Stem("lear"), "lear");});
test("learn -> learn", function() {deepEqual( Stem("learn"), "learn");});
test("learned -> learn", function() {deepEqual( Stem("learned"), "learn");});
test("learnedly -> learnedli", function() {deepEqual( Stem("learnedly"), "learnedli");});
test("learning -> learn", function() {deepEqual( Stem("learning"), "learn");});
test("learnings -> learn", function() {deepEqual( Stem("learnings"), "learn");});
test("learns -> learn", function() {deepEqual( Stem("learns"), "learn");});
test("learnt -> learnt", function() {deepEqual( Stem("learnt"), "learnt");});
test("leas -> lea", function() {deepEqual( Stem("leas"), "lea");});
test("lease -> leas", function() {deepEqual( Stem("lease"), "leas");});
test("leases -> leas", function() {deepEqual( Stem("leases"), "leas");});
test("leash -> leash", function() {deepEqual( Stem("leash"), "leash");});
test("leasing -> leas", function() {deepEqual( Stem("leasing"), "leas");});
test("least -> least", function() {deepEqual( Stem("least"), "least");});
test("leather -> leather", function() {deepEqual( Stem("leather"), "leather");});
test("leathern -> leathern", function() {deepEqual( Stem("leathern"), "leathern");});
test("leav -> leav", function() {deepEqual( Stem("leav"), "leav");});
test("leave -> leav", function() {deepEqual( Stem("leave"), "leav");});
test("leaven -> leaven", function() {deepEqual( Stem("leaven"), "leaven");});
test("leavening -> leaven", function() {deepEqual( Stem("leavening"), "leaven");});
test("leaver -> leaver", function() {deepEqual( Stem("leaver"), "leaver");});
test("leaves -> leav", function() {deepEqual( Stem("leaves"), "leav");});
test("leaving -> leav", function() {deepEqual( Stem("leaving"), "leav");});
test("leavy -> leavi", function() {deepEqual( Stem("leavy"), "leavi");});
test("lecher -> lecher", function() {deepEqual( Stem("lecher"), "lecher");});
test("lecherous -> lecher", function() {deepEqual( Stem("lecherous"), "lecher");});
test("lechers -> lecher", function() {deepEqual( Stem("lechers"), "lecher");});
test("lechery -> lecheri", function() {deepEqual( Stem("lechery"), "lecheri");});
test("lecon -> lecon", function() {deepEqual( Stem("lecon"), "lecon");});
test("lecture -> lectur", function() {deepEqual( Stem("lecture"), "lectur");});
test("lectured -> lectur", function() {deepEqual( Stem("lectured"), "lectur");});
test("lectures -> lectur", function() {deepEqual( Stem("lectures"), "lectur");});
test("lecturing -> lectur", function() {deepEqual( Stem("lecturing"), "lectur");});
test("led -> led", function() {deepEqual( Stem("led"), "led");});
test("leda -> leda", function() {deepEqual( Stem("leda"), "leda");});
test("lederlung -> lederlung", function() {deepEqual( Stem("lederlung"), "lederlung");});
test("ledger -> ledger", function() {deepEqual( Stem("ledger"), "ledger");});
test("lee -> lee", function() {deepEqual( Stem("lee"), "lee");});
test("leech -> leech", function() {deepEqual( Stem("leech"), "leech");});
test("leeches -> leech", function() {deepEqual( Stem("leeches"), "leech");});
test("leeds -> leed", function() {deepEqual( Stem("leeds"), "leed");});
test("leek -> leek", function() {deepEqual( Stem("leek"), "leek");});
test("leeks -> leek", function() {deepEqual( Stem("leeks"), "leek");});
test("leer -> leer", function() {deepEqual( Stem("leer"), "leer");});
test("leered -> leer", function() {deepEqual( Stem("leered"), "leer");});
test("leering -> leer", function() {deepEqual( Stem("leering"), "leer");});
test("leers -> leer", function() {deepEqual( Stem("leers"), "leer");});
test("leery -> leeri", function() {deepEqual( Stem("leery"), "leeri");});
test("lees -> lee", function() {deepEqual( Stem("lees"), "lee");});
test("leese -> lees", function() {deepEqual( Stem("leese"), "lees");});
test("leet -> leet", function() {deepEqual( Stem("leet"), "leet");});
test("leeterature -> leeteratur", function() {deepEqual( Stem("leeterature"), "leeteratur");});
test("leets -> leet", function() {deepEqual( Stem("leets"), "leet");});
test("left -> left", function() {deepEqual( Stem("left"), "left");});
test("leg -> leg", function() {deepEqual( Stem("leg"), "leg");});
test("legacies -> legaci", function() {deepEqual( Stem("legacies"), "legaci");});
test("legacy -> legaci", function() {deepEqual( Stem("legacy"), "legaci");});
test("legal -> legal", function() {deepEqual( Stem("legal"), "legal");});
test("legate -> legat", function() {deepEqual( Stem("legate"), "legat");});
test("legatine -> legatin", function() {deepEqual( Stem("legatine"), "legatin");});
test("legation -> legat", function() {deepEqual( Stem("legation"), "legat");});
test("lege -> lege", function() {deepEqual( Stem("lege"), "lege");});
test("legend -> legend", function() {deepEqual( Stem("legend"), "legend");});
test("legends -> legend", function() {deepEqual( Stem("legends"), "legend");});
test("leger -> leger", function() {deepEqual( Stem("leger"), "leger");});
test("legerity -> leger", function() {deepEqual( Stem("legerity"), "leger");});
test("leges -> lege", function() {deepEqual( Stem("leges"), "lege");});
test("legg -> legg", function() {deepEqual( Stem("legg"), "legg");});
test("legged -> leg", function() {deepEqual( Stem("legged"), "leg");});
test("legion -> legion", function() {deepEqual( Stem("legion"), "legion");});
test("legions -> legion", function() {deepEqual( Stem("legions"), "legion");});
test("legislation -> legisl", function() {deepEqual( Stem("legislation"), "legisl");});
test("legislature -> legislatur", function() {deepEqual( Stem("legislature"), "legislatur");});
test("legitimate -> legitim", function() {deepEqual( Stem("legitimate"), "legitim");});
test("legitimation -> legitim", function() {deepEqual( Stem("legitimation"), "legitim");});
test("legs -> leg", function() {deepEqual( Stem("legs"), "leg");});
test("leicester -> leicest", function() {deepEqual( Stem("leicester"), "leicest");});
test("leicestershire -> leicestershir", function() {deepEqual( Stem("leicestershire"), "leicestershir");});
test("leiger -> leiger", function() {deepEqual( Stem("leiger"), "leiger");});
test("leigers -> leiger", function() {deepEqual( Stem("leigers"), "leiger");});
test("leipsic -> leipsic", function() {deepEqual( Stem("leipsic"), "leipsic");});
test("leipzig -> leipzig", function() {deepEqual( Stem("leipzig"), "leipzig");});
test("leisure -> leisur", function() {deepEqual( Stem("leisure"), "leisur");});
test("leisurely -> leisur", function() {deepEqual( Stem("leisurely"), "leisur");});
test("leisures -> leisur", function() {deepEqual( Stem("leisures"), "leisur");});
test("leman -> leman", function() {deepEqual( Stem("leman"), "leman");});
test("lemon -> lemon", function() {deepEqual( Stem("lemon"), "lemon");});
test("lempriere -> lemprier", function() {deepEqual( Stem("lempriere"), "lemprier");});
test("lena -> lena", function() {deepEqual( Stem("lena"), "lena");});
test("lend -> lend", function() {deepEqual( Stem("lend"), "lend");});
test("lender -> lender", function() {deepEqual( Stem("lender"), "lender");});
test("lending -> lend", function() {deepEqual( Stem("lending"), "lend");});
test("lendings -> lend", function() {deepEqual( Stem("lendings"), "lend");});
test("lends -> lend", function() {deepEqual( Stem("lends"), "lend");});
test("length -> length", function() {deepEqual( Stem("length"), "length");});
test("lengthen -> lengthen", function() {deepEqual( Stem("lengthen"), "lengthen");});
test("lengthens -> lengthen", function() {deepEqual( Stem("lengthens"), "lengthen");});
test("lengths -> length", function() {deepEqual( Stem("lengths"), "length");});
test("lenity -> leniti", function() {deepEqual( Stem("lenity"), "leniti");});
test("lennox -> lennox", function() {deepEqual( Stem("lennox"), "lennox");});
test("lent -> lent", function() {deepEqual( Stem("lent"), "lent");});
test("lenten -> lenten", function() {deepEqual( Stem("lenten"), "lenten");});
test("lentus -> lentu", function() {deepEqual( Stem("lentus"), "lentu");});
test("leo -> leo", function() {deepEqual( Stem("leo"), "leo");});
test("leon -> leon", function() {deepEqual( Stem("leon"), "leon");});
test("leonardo -> leonardo", function() {deepEqual( Stem("leonardo"), "leonardo");});
test("leonati -> leonati", function() {deepEqual( Stem("leonati"), "leonati");});
test("leonato -> leonato", function() {deepEqual( Stem("leonato"), "leonato");});
test("leonatus -> leonatu", function() {deepEqual( Stem("leonatus"), "leonatu");});
test("leonora -> leonora", function() {deepEqual( Stem("leonora"), "leonora");});
test("leontes -> leont", function() {deepEqual( Stem("leontes"), "leont");});
test("leopard -> leopard", function() {deepEqual( Stem("leopard"), "leopard");});
test("leopards -> leopard", function() {deepEqual( Stem("leopards"), "leopard");});
test("leper -> leper", function() {deepEqual( Stem("leper"), "leper");});
test("leperous -> leper", function() {deepEqual( Stem("leperous"), "leper");});
test("lepidus -> lepidu", function() {deepEqual( Stem("lepidus"), "lepidu");});
test("leprosy -> leprosi", function() {deepEqual( Stem("leprosy"), "leprosi");});
test("lequel -> lequel", function() {deepEqual( Stem("lequel"), "lequel");});
test("leroy -> leroi", function() {deepEqual( Stem("leroy"), "leroi");});
test("lers -> ler", function() {deepEqual( Stem("lers"), "ler");});
test("les -> le", function() {deepEqual( Stem("les"), "le");});
test("less -> less", function() {deepEqual( Stem("less"), "less");});
test("lessen -> lessen", function() {deepEqual( Stem("lessen"), "lessen");});
test("lessened -> lessen", function() {deepEqual( Stem("lessened"), "lessen");});
test("lessens -> lessen", function() {deepEqual( Stem("lessens"), "lessen");});
test("lesser -> lesser", function() {deepEqual( Stem("lesser"), "lesser");});
test("lesson -> lesson", function() {deepEqual( Stem("lesson"), "lesson");});
test("lessoned -> lesson", function() {deepEqual( Stem("lessoned"), "lesson");});
test("lessons -> lesson", function() {deepEqual( Stem("lessons"), "lesson");});
test("lest -> lest", function() {deepEqual( Stem("lest"), "lest");});
test("lestrake -> lestrak", function() {deepEqual( Stem("lestrake"), "lestrak");});
test("let -> let", function() {deepEqual( Stem("let"), "let");});
test("lethargied -> lethargi", function() {deepEqual( Stem("lethargied"), "lethargi");});
test("lethargies -> lethargi", function() {deepEqual( Stem("lethargies"), "lethargi");});
test("lethargy -> lethargi", function() {deepEqual( Stem("lethargy"), "lethargi");});
test("lethe -> leth", function() {deepEqual( Stem("lethe"), "leth");});
test("letitia -> letitia", function() {deepEqual( Stem("letitia"), "letitia");});
test("lets -> let", function() {deepEqual( Stem("lets"), "let");});
test("lett -> lett", function() {deepEqual( Stem("lett"), "lett");});
test("letter -> letter", function() {deepEqual( Stem("letter"), "letter");});
test("letters -> letter", function() {deepEqual( Stem("letters"), "letter");});
test("letterth -> letterth", function() {deepEqual( Stem("letterth"), "letterth");});
test("letting -> let", function() {deepEqual( Stem("letting"), "let");});
test("lettuce -> lettuc", function() {deepEqual( Stem("lettuce"), "lettuc");});
test("leur -> leur", function() {deepEqual( Stem("leur"), "leur");});
test("levant -> levant", function() {deepEqual( Stem("levant"), "levant");});
test("leve -> leve", function() {deepEqual( Stem("leve"), "leve");});
test("levee -> leve", function() {deepEqual( Stem("levee"), "leve");});
test("level -> level", function() {deepEqual( Stem("level"), "level");});
test("levell -> level", function() {deepEqual( Stem("levell"), "level");});
test("levelled -> level", function() {deepEqual( Stem("levelled"), "level");});
test("levelling -> level", function() {deepEqual( Stem("levelling"), "level");});
test("levels -> level", function() {deepEqual( Stem("levels"), "level");});
test("leven -> leven", function() {deepEqual( Stem("leven"), "leven");});
test("levers -> lever", function() {deepEqual( Stem("levers"), "lever");});
test("leviathan -> leviathan", function() {deepEqual( Stem("leviathan"), "leviathan");});
test("leviathans -> leviathan", function() {deepEqual( Stem("leviathans"), "leviathan");});
test("levied -> levi", function() {deepEqual( Stem("levied"), "levi");});
test("levies -> levi", function() {deepEqual( Stem("levies"), "levi");});
test("levity -> leviti", function() {deepEqual( Stem("levity"), "leviti");});
test("levy -> levi", function() {deepEqual( Stem("levy"), "levi");});
test("levying -> levi", function() {deepEqual( Stem("levying"), "levi");});
test("lewd -> lewd", function() {deepEqual( Stem("lewd"), "lewd");});
test("lewdly -> lewdli", function() {deepEqual( Stem("lewdly"), "lewdli");});
test("lewdness -> lewd", function() {deepEqual( Stem("lewdness"), "lewd");});
test("lewdsters -> lewdster", function() {deepEqual( Stem("lewdsters"), "lewdster");});
test("lewes -> lew", function() {deepEqual( Stem("lewes"), "lew");});
test("lewis -> lewi", function() {deepEqual( Stem("lewis"), "lewi");});
test("lexicographer -> lexicograph", function() {deepEqual( Stem("lexicographer"), "lexicograph");});
test("li -> li", function() {deepEqual( Stem("li"), "li");});
test("liabilities -> liabil", function() {deepEqual( Stem("liabilities"), "liabil");});
test("liable -> liabl", function() {deepEqual( Stem("liable"), "liabl");});
test("liaison -> liaison", function() {deepEqual( Stem("liaison"), "liaison");});
test("liar -> liar", function() {deepEqual( Stem("liar"), "liar");});
test("liars -> liar", function() {deepEqual( Stem("liars"), "liar");});
test("libbard -> libbard", function() {deepEqual( Stem("libbard"), "libbard");});
test("libelling -> libel", function() {deepEqual( Stem("libelling"), "libel");});
test("libels -> libel", function() {deepEqual( Stem("libels"), "libel");});
test("liberal -> liber", function() {deepEqual( Stem("liberal"), "liber");});
test("liberality -> liber", function() {deepEqual( Stem("liberality"), "liber");});
test("liberally -> liber", function() {deepEqual( Stem("liberally"), "liber");});
test("liberated -> liber", function() {deepEqual( Stem("liberated"), "liber");});
test("liberation -> liber", function() {deepEqual( Stem("liberation"), "liber");});
test("liberte -> libert", function() {deepEqual( Stem("liberte"), "libert");});
test("liberties -> liberti", function() {deepEqual( Stem("liberties"), "liberti");});
test("libertine -> libertin", function() {deepEqual( Stem("libertine"), "libertin");});
test("libertines -> libertin", function() {deepEqual( Stem("libertines"), "libertin");});
test("liberty -> liberti", function() {deepEqual( Stem("liberty"), "liberti");});
test("libraries -> librari", function() {deepEqual( Stem("libraries"), "librari");});
test("library -> librari", function() {deepEqual( Stem("library"), "librari");});
test("libya -> libya", function() {deepEqual( Stem("libya"), "libya");});
test("licence -> licenc", function() {deepEqual( Stem("licence"), "licenc");});
test("licens -> licen", function() {deepEqual( Stem("licens"), "licen");});
test("license -> licens", function() {deepEqual( Stem("license"), "licens");});
test("licensed -> licens", function() {deepEqual( Stem("licensed"), "licens");});
test("licentious -> licenti", function() {deepEqual( Stem("licentious"), "licenti");});
test("licentiousness -> licenti", function() {deepEqual( Stem("licentiousness"), "licenti");});
test("lichas -> licha", function() {deepEqual( Stem("lichas"), "licha");});
test("licio -> licio", function() {deepEqual( Stem("licio"), "licio");});
test("lick -> lick", function() {deepEqual( Stem("lick"), "lick");});
test("licked -> lick", function() {deepEqual( Stem("licked"), "lick");});
test("licker -> licker", function() {deepEqual( Stem("licker"), "licker");});
test("licking -> lick", function() {deepEqual( Stem("licking"), "lick");});
test("lictors -> lictor", function() {deepEqual( Stem("lictors"), "lictor");});
test("lid -> lid", function() {deepEqual( Stem("lid"), "lid");});
test("lids -> lid", function() {deepEqual( Stem("lids"), "lid");});
test("lie -> lie", function() {deepEqual( Stem("lie"), "lie");});
test("liebe -> lieb", function() {deepEqual( Stem("liebe"), "lieb");});
test("lied -> li", function() {deepEqual( Stem("lied"), "li");});
test("lief -> lief", function() {deepEqual( Stem("lief"), "lief");});
test("liefest -> liefest", function() {deepEqual( Stem("liefest"), "liefest");});
test("liege -> lieg", function() {deepEqual( Stem("liege"), "lieg");});
test("liegeman -> liegeman", function() {deepEqual( Stem("liegeman"), "liegeman");});
test("liegemen -> liegemen", function() {deepEqual( Stem("liegemen"), "liegemen");});
test("lien -> lien", function() {deepEqual( Stem("lien"), "lien");});
test("lies -> li", function() {deepEqual( Stem("lies"), "li");});
test("liest -> liest", function() {deepEqual( Stem("liest"), "liest");});
test("lieth -> lieth", function() {deepEqual( Stem("lieth"), "lieth");});
test("lieu -> lieu", function() {deepEqual( Stem("lieu"), "lieu");});
test("lieut -> lieut", function() {deepEqual( Stem("lieut"), "lieut");});
test("lieutenant -> lieuten", function() {deepEqual( Stem("lieutenant"), "lieuten");});
test("lieutenantry -> lieutenantri", function() {deepEqual( Stem("lieutenantry"), "lieutenantri");});
test("lieutenants -> lieuten", function() {deepEqual( Stem("lieutenants"), "lieuten");});
test("lieve -> liev", function() {deepEqual( Stem("lieve"), "liev");});
test("life -> life", function() {deepEqual( Stem("life"), "life");});
test("lifeblood -> lifeblood", function() {deepEqual( Stem("lifeblood"), "lifeblood");});
test("lifeless -> lifeless", function() {deepEqual( Stem("lifeless"), "lifeless");});
test("lifelings -> lifel", function() {deepEqual( Stem("lifelings"), "lifel");});
test("lifetime -> lifetim", function() {deepEqual( Stem("lifetime"), "lifetim");});
test("lift -> lift", function() {deepEqual( Stem("lift"), "lift");});
test("lifted -> lift", function() {deepEqual( Stem("lifted"), "lift");});
test("lifter -> lifter", function() {deepEqual( Stem("lifter"), "lifter");});
test("lifteth -> lifteth", function() {deepEqual( Stem("lifteth"), "lifteth");});
test("lifting -> lift", function() {deepEqual( Stem("lifting"), "lift");});
test("lifts -> lift", function() {deepEqual( Stem("lifts"), "lift");});
test("lig -> lig", function() {deepEqual( Stem("lig"), "lig");});
test("ligarius -> ligariu", function() {deepEqual( Stem("ligarius"), "ligariu");});
test("liggens -> liggen", function() {deepEqual( Stem("liggens"), "liggen");});
test("light -> light", function() {deepEqual( Stem("light"), "light");});
test("lighted -> light", function() {deepEqual( Stem("lighted"), "light");});
test("lighten -> lighten", function() {deepEqual( Stem("lighten"), "lighten");});
test("lightened -> lighten", function() {deepEqual( Stem("lightened"), "lighten");});
test("lightens -> lighten", function() {deepEqual( Stem("lightens"), "lighten");});
test("lighter -> lighter", function() {deepEqual( Stem("lighter"), "lighter");});
test("lightest -> lightest", function() {deepEqual( Stem("lightest"), "lightest");});
test("lighting -> light", function() {deepEqual( Stem("lighting"), "light");});
test("lightly -> lightli", function() {deepEqual( Stem("lightly"), "lightli");});
test("lightness -> light", function() {deepEqual( Stem("lightness"), "light");});
test("lightning -> lightn", function() {deepEqual( Stem("lightning"), "lightn");});
test("lightnings -> lightn", function() {deepEqual( Stem("lightnings"), "lightn");});
test("lights -> light", function() {deepEqual( Stem("lights"), "light");});
test("lightsome -> lightsom", function() {deepEqual( Stem("lightsome"), "lightsom");});
test("ligny -> ligni", function() {deepEqual( Stem("ligny"), "ligni");});
test("lii -> lii", function() {deepEqual( Stem("lii"), "lii");});
test("liii -> liii", function() {deepEqual( Stem("liii"), "liii");});
test("lik -> lik", function() {deepEqual( Stem("lik"), "lik");});
test("like -> like", function() {deepEqual( Stem("like"), "like");});
test("liked -> like", function() {deepEqual( Stem("liked"), "like");});
test("likeliest -> likeliest", function() {deepEqual( Stem("likeliest"), "likeliest");});
test("likelihood -> likelihood", function() {deepEqual( Stem("likelihood"), "likelihood");});
test("likelihoods -> likelihood", function() {deepEqual( Stem("likelihoods"), "likelihood");});
test("likely -> like", function() {deepEqual( Stem("likely"), "like");});
test("likeness -> like", function() {deepEqual( Stem("likeness"), "like");});
test("liker -> liker", function() {deepEqual( Stem("liker"), "liker");});
test("likes -> like", function() {deepEqual( Stem("likes"), "like");});
test("likest -> likest", function() {deepEqual( Stem("likest"), "likest");});
test("likewise -> likewis", function() {deepEqual( Stem("likewise"), "likewis");});
test("liking -> like", function() {deepEqual( Stem("liking"), "like");});
test("likings -> like", function() {deepEqual( Stem("likings"), "like");});
test("lilac -> lilac", function() {deepEqual( Stem("lilac"), "lilac");});
test("lilies -> lili", function() {deepEqual( Stem("lilies"), "lili");});
test("lily -> lili", function() {deepEqual( Stem("lily"), "lili");});
test("lim -> lim", function() {deepEqual( Stem("lim"), "lim");});
test("limander -> limand", function() {deepEqual( Stem("limander"), "limand");});
test("limb -> limb", function() {deepEqual( Stem("limb"), "limb");});
test("limbeck -> limbeck", function() {deepEqual( Stem("limbeck"), "limbeck");});
test("limbecks -> limbeck", function() {deepEqual( Stem("limbecks"), "limbeck");});
test("limber -> limber", function() {deepEqual( Stem("limber"), "limber");});
test("limbo -> limbo", function() {deepEqual( Stem("limbo"), "limbo");});
test("limbs -> limb", function() {deepEqual( Stem("limbs"), "limb");});
test("lime -> lime", function() {deepEqual( Stem("lime"), "lime");});
test("limed -> lime", function() {deepEqual( Stem("limed"), "lime");});
test("limehouse -> limehous", function() {deepEqual( Stem("limehouse"), "limehous");});
test("limekilns -> limekiln", function() {deepEqual( Stem("limekilns"), "limekiln");});
test("limes -> lime", function() {deepEqual( Stem("limes"), "lime");});
test("limit -> limit", function() {deepEqual( Stem("limit"), "limit");});
test("limitation -> limit", function() {deepEqual( Stem("limitation"), "limit");});
test("limited -> limit", function() {deepEqual( Stem("limited"), "limit");});
test("limits -> limit", function() {deepEqual( Stem("limits"), "limit");});
test("limn -> limn", function() {deepEqual( Stem("limn"), "limn");});
test("limp -> limp", function() {deepEqual( Stem("limp"), "limp");});
test("limping -> limp", function() {deepEqual( Stem("limping"), "limp");});
test("limps -> limp", function() {deepEqual( Stem("limps"), "limp");});
test("lin -> lin", function() {deepEqual( Stem("lin"), "lin");});
test("lincoln -> lincoln", function() {deepEqual( Stem("lincoln"), "lincoln");});
test("lincolnshire -> lincolnshir", function() {deepEqual( Stem("lincolnshire"), "lincolnshir");});
test("line -> line", function() {deepEqual( Stem("line"), "line");});
test("lineal -> lineal", function() {deepEqual( Stem("lineal"), "lineal");});
test("lineally -> lineal", function() {deepEqual( Stem("lineally"), "lineal");});
test("lineament -> lineament", function() {deepEqual( Stem("lineament"), "lineament");});
test("lineaments -> lineament", function() {deepEqual( Stem("lineaments"), "lineament");});
test("lined -> line", function() {deepEqual( Stem("lined"), "line");});
test("linen -> linen", function() {deepEqual( Stem("linen"), "linen");});
test("linens -> linen", function() {deepEqual( Stem("linens"), "linen");});
test("lines -> line", function() {deepEqual( Stem("lines"), "line");});
test("ling -> ling", function() {deepEqual( Stem("ling"), "ling");});
test("lingare -> lingar", function() {deepEqual( Stem("lingare"), "lingar");});
test("linger -> linger", function() {deepEqual( Stem("linger"), "linger");});
test("lingered -> linger", function() {deepEqual( Stem("lingered"), "linger");});
test("lingering -> linger", function() {deepEqual( Stem("lingering"), "linger");});
test("lingers -> linger", function() {deepEqual( Stem("lingers"), "linger");});
test("linguist -> linguist", function() {deepEqual( Stem("linguist"), "linguist");});
test("lining -> line", function() {deepEqual( Stem("lining"), "line");});
test("link -> link", function() {deepEqual( Stem("link"), "link");});
test("links -> link", function() {deepEqual( Stem("links"), "link");});
test("linning -> lin", function() {deepEqual( Stem("linning"), "lin");});
test("linsey -> linsei", function() {deepEqual( Stem("linsey"), "linsei");});
test("linstock -> linstock", function() {deepEqual( Stem("linstock"), "linstock");});
test("linta -> linta", function() {deepEqual( Stem("linta"), "linta");});
test("linton -> linton", function() {deepEqual( Stem("linton"), "linton");});
test("lion -> lion", function() {deepEqual( Stem("lion"), "lion");});
test("lionel -> lionel", function() {deepEqual( Stem("lionel"), "lionel");});
test("lioness -> lioness", function() {deepEqual( Stem("lioness"), "lioness");});
test("lions -> lion", function() {deepEqual( Stem("lions"), "lion");});
test("lip -> lip", function() {deepEqual( Stem("lip"), "lip");});
test("lipp -> lipp", function() {deepEqual( Stem("lipp"), "lipp");});
test("lips -> lip", function() {deepEqual( Stem("lips"), "lip");});
test("lipsbury -> lipsburi", function() {deepEqual( Stem("lipsbury"), "lipsburi");});
test("liqueurs -> liqueur", function() {deepEqual( Stem("liqueurs"), "liqueur");});
test("liquid -> liquid", function() {deepEqual( Stem("liquid"), "liquid");});
test("liquor -> liquor", function() {deepEqual( Stem("liquor"), "liquor");});
test("liquorish -> liquorish", function() {deepEqual( Stem("liquorish"), "liquorish");});
test("liquors -> liquor", function() {deepEqual( Stem("liquors"), "liquor");});
test("lirra -> lirra", function() {deepEqual( Stem("lirra"), "lirra");});
test("lisbon -> lisbon", function() {deepEqual( Stem("lisbon"), "lisbon");});
test("lish -> lish", function() {deepEqual( Stem("lish"), "lish");});
test("lisp -> lisp", function() {deepEqual( Stem("lisp"), "lisp");});
test("lisped -> lisp", function() {deepEqual( Stem("lisped"), "lisp");});
test("lisping -> lisp", function() {deepEqual( Stem("lisping"), "lisp");});
test("list -> list", function() {deepEqual( Stem("list"), "list");});
test("listen -> listen", function() {deepEqual( Stem("listen"), "listen");});
test("listened -> listen", function() {deepEqual( Stem("listened"), "listen");});
test("listeners -> listen", function() {deepEqual( Stem("listeners"), "listen");});
test("listening -> listen", function() {deepEqual( Stem("listening"), "listen");});
test("listless -> listless", function() {deepEqual( Stem("listless"), "listless");});
test("liston -> liston", function() {deepEqual( Stem("liston"), "liston");});
test("lists -> list", function() {deepEqual( Stem("lists"), "list");});
test("literary -> literari", function() {deepEqual( Stem("literary"), "literari");});
test("literature -> literatur", function() {deepEqual( Stem("literature"), "literatur");});
test("literatured -> literatur", function() {deepEqual( Stem("literatured"), "literatur");});
test("lither -> lither", function() {deepEqual( Stem("lither"), "lither");});
test("litter -> litter", function() {deepEqual( Stem("litter"), "litter");});
test("littered -> litter", function() {deepEqual( Stem("littered"), "litter");});
test("litters -> litter", function() {deepEqual( Stem("litters"), "litter");});
test("littery -> litteri", function() {deepEqual( Stem("littery"), "litteri");});
test("littl -> littl", function() {deepEqual( Stem("littl"), "littl");});
test("little -> littl", function() {deepEqual( Stem("little"), "littl");});
test("littlest -> littlest", function() {deepEqual( Stem("littlest"), "littlest");});
test("liv -> liv", function() {deepEqual( Stem("liv"), "liv");});
test("live -> live", function() {deepEqual( Stem("live"), "live");});
test("lived -> live", function() {deepEqual( Stem("lived"), "live");});
test("livelier -> liveli", function() {deepEqual( Stem("livelier"), "liveli");});
test("livelihood -> livelihood", function() {deepEqual( Stem("livelihood"), "livelihood");});
test("liveliness -> liveli", function() {deepEqual( Stem("liveliness"), "liveli");});
test("livelong -> livelong", function() {deepEqual( Stem("livelong"), "livelong");});
test("lively -> live", function() {deepEqual( Stem("lively"), "live");});
test("liver -> liver", function() {deepEqual( Stem("liver"), "liver");});
test("liveries -> liveri", function() {deepEqual( Stem("liveries"), "liveri");});
test("livermore -> livermor", function() {deepEqual( Stem("livermore"), "livermor");});
test("liverpool -> liverpool", function() {deepEqual( Stem("liverpool"), "liverpool");});
test("livers -> liver", function() {deepEqual( Stem("livers"), "liver");});
test("liverseege -> liverseeg", function() {deepEqual( Stem("liverseege"), "liverseeg");});
test("livery -> liveri", function() {deepEqual( Stem("livery"), "liveri");});
test("lives -> live", function() {deepEqual( Stem("lives"), "live");});
test("livest -> livest", function() {deepEqual( Stem("livest"), "livest");});
test("liveth -> liveth", function() {deepEqual( Stem("liveth"), "liveth");});
test("livia -> livia", function() {deepEqual( Stem("livia"), "livia");});
test("livid -> livid", function() {deepEqual( Stem("livid"), "livid");});
test("living -> live", function() {deepEqual( Stem("living"), "live");});
test("livings -> live", function() {deepEqual( Stem("livings"), "live");});
test("lix -> lix", function() {deepEqual( Stem("lix"), "lix");});
test("lizard -> lizard", function() {deepEqual( Stem("lizard"), "lizard");});
test("lizards -> lizard", function() {deepEqual( Stem("lizards"), "lizard");});
test("ll -> ll", function() {deepEqual( Stem("ll"), "ll");});
test("lll -> lll", function() {deepEqual( Stem("lll"), "lll");});
test("llous -> llou", function() {deepEqual( Stem("llous"), "llou");});
test("lnd -> lnd", function() {deepEqual( Stem("lnd"), "lnd");});
test("lo -> lo", function() {deepEqual( Stem("lo"), "lo");});
test("loa -> loa", function() {deepEqual( Stem("loa"), "loa");});
test("loach -> loach", function() {deepEqual( Stem("loach"), "loach");});
test("load -> load", function() {deepEqual( Stem("load"), "load");});
test("loaded -> load", function() {deepEqual( Stem("loaded"), "load");});
test("loaden -> loaden", function() {deepEqual( Stem("loaden"), "loaden");});
test("loading -> load", function() {deepEqual( Stem("loading"), "load");});
test("loads -> load", function() {deepEqual( Stem("loads"), "load");});
test("loaf -> loaf", function() {deepEqual( Stem("loaf"), "loaf");});
test("loam -> loam", function() {deepEqual( Stem("loam"), "loam");});
test("loan -> loan", function() {deepEqual( Stem("loan"), "loan");});
test("loath -> loath", function() {deepEqual( Stem("loath"), "loath");});
test("loathe -> loath", function() {deepEqual( Stem("loathe"), "loath");});
test("loathed -> loath", function() {deepEqual( Stem("loathed"), "loath");});
test("loather -> loather", function() {deepEqual( Stem("loather"), "loather");});
test("loathes -> loath", function() {deepEqual( Stem("loathes"), "loath");});
test("loathing -> loath", function() {deepEqual( Stem("loathing"), "loath");});
test("loathly -> loathli", function() {deepEqual( Stem("loathly"), "loathli");});
test("loathness -> loath", function() {deepEqual( Stem("loathness"), "loath");});
test("loathsome -> loathsom", function() {deepEqual( Stem("loathsome"), "loathsom");});
test("loathsomeness -> loathsom", function() {deepEqual( Stem("loathsomeness"), "loathsom");});
test("loathsomest -> loathsomest", function() {deepEqual( Stem("loathsomest"), "loathsomest");});
test("loaves -> loav", function() {deepEqual( Stem("loaves"), "loav");});
test("lob -> lob", function() {deepEqual( Stem("lob"), "lob");});
test("lobbies -> lobbi", function() {deepEqual( Stem("lobbies"), "lobbi");});
test("lobby -> lobbi", function() {deepEqual( Stem("lobby"), "lobbi");});
test("lobster -> lobster", function() {deepEqual( Stem("lobster"), "lobster");});
test("lobsters -> lobster", function() {deepEqual( Stem("lobsters"), "lobster");});
test("local -> local", function() {deepEqual( Stem("local"), "local");});
test("locality -> local", function() {deepEqual( Stem("locality"), "local");});
test("locataires -> locatair", function() {deepEqual( Stem("locataires"), "locatair");});
test("located -> locat", function() {deepEqual( Stem("located"), "locat");});
test("lochaber -> lochab", function() {deepEqual( Stem("lochaber"), "lochab");});
test("lock -> lock", function() {deepEqual( Stem("lock"), "lock");});
test("locked -> lock", function() {deepEqual( Stem("locked"), "lock");});
test("locker -> locker", function() {deepEqual( Stem("locker"), "locker");});
test("locket -> locket", function() {deepEqual( Stem("locket"), "locket");});
test("locking -> lock", function() {deepEqual( Stem("locking"), "lock");});
test("lockram -> lockram", function() {deepEqual( Stem("lockram"), "lockram");});
test("locks -> lock", function() {deepEqual( Stem("locks"), "lock");});
test("locomotion -> locomot", function() {deepEqual( Stem("locomotion"), "locomot");});
test("locusts -> locust", function() {deepEqual( Stem("locusts"), "locust");});
test("lode -> lode", function() {deepEqual( Stem("lode"), "lode");});
test("loder -> loder", function() {deepEqual( Stem("loder"), "loder");});
test("lodg -> lodg", function() {deepEqual( Stem("lodg"), "lodg");});
test("lodge -> lodg", function() {deepEqual( Stem("lodge"), "lodg");});
test("lodged -> lodg", function() {deepEqual( Stem("lodged"), "lodg");});
test("lodger -> lodger", function() {deepEqual( Stem("lodger"), "lodger");});
test("lodgers -> lodger", function() {deepEqual( Stem("lodgers"), "lodger");});
test("lodges -> lodg", function() {deepEqual( Stem("lodges"), "lodg");});
test("lodging -> lodg", function() {deepEqual( Stem("lodging"), "lodg");});
test("lodgings -> lodg", function() {deepEqual( Stem("lodgings"), "lodg");});
test("lodgment -> lodgment", function() {deepEqual( Stem("lodgment"), "lodgment");});
test("lodovico -> lodovico", function() {deepEqual( Stem("lodovico"), "lodovico");});
test("lodowick -> lodowick", function() {deepEqual( Stem("lodowick"), "lodowick");});
test("loftier -> loftier", function() {deepEqual( Stem("loftier"), "loftier");});
test("loftiest -> loftiest", function() {deepEqual( Stem("loftiest"), "loftiest");});
test("lofty -> lofti", function() {deepEqual( Stem("lofty"), "lofti");});
test("log -> log", function() {deepEqual( Stem("log"), "log");});
test("logarithms -> logarithm", function() {deepEqual( Stem("logarithms"), "logarithm");});
test("loge -> loge", function() {deepEqual( Stem("loge"), "loge");});
test("logger -> logger", function() {deepEqual( Stem("logger"), "logger");});
test("loggerhead -> loggerhead", function() {deepEqual( Stem("loggerhead"), "loggerhead");});
test("loggerheads -> loggerhead", function() {deepEqual( Stem("loggerheads"), "loggerhead");});
test("loggets -> logget", function() {deepEqual( Stem("loggets"), "logget");});
test("logic -> logic", function() {deepEqual( Stem("logic"), "logic");});
test("logical -> logic", function() {deepEqual( Stem("logical"), "logic");});
test("logically -> logic", function() {deepEqual( Stem("logically"), "logic");});
test("logies -> logi", function() {deepEqual( Stem("logies"), "logi");});
test("logs -> log", function() {deepEqual( Stem("logs"), "log");});
test("logy -> logi", function() {deepEqual( Stem("logy"), "logi");});
test("loif -> loif", function() {deepEqual( Stem("loif"), "loif");});
test("loin -> loin", function() {deepEqual( Stem("loin"), "loin");});
test("loins -> loin", function() {deepEqual( Stem("loins"), "loin");});
test("loiter -> loiter", function() {deepEqual( Stem("loiter"), "loiter");});
test("loitered -> loiter", function() {deepEqual( Stem("loitered"), "loiter");});
test("loiterer -> loiter", function() {deepEqual( Stem("loiterer"), "loiter");});
test("loiterers -> loiter", function() {deepEqual( Stem("loiterers"), "loiter");});
test("loitering -> loiter", function() {deepEqual( Stem("loitering"), "loiter");});
test("loll -> loll", function() {deepEqual( Stem("loll"), "loll");});
test("lolled -> loll", function() {deepEqual( Stem("lolled"), "loll");});
test("lolling -> loll", function() {deepEqual( Stem("lolling"), "loll");});
test("lollipop -> lollipop", function() {deepEqual( Stem("lollipop"), "lollipop");});
test("lollipops -> lollipop", function() {deepEqual( Stem("lollipops"), "lollipop");});
test("lolls -> loll", function() {deepEqual( Stem("lolls"), "loll");});
test("lollypop -> lollypop", function() {deepEqual( Stem("lollypop"), "lollypop");});
test("lombard -> lombard", function() {deepEqual( Stem("lombard"), "lombard");});
test("lombardy -> lombardi", function() {deepEqual( Stem("lombardy"), "lombardi");});
test("london -> london", function() {deepEqual( Stem("london"), "london");});
test("londonderry -> londonderri", function() {deepEqual( Stem("londonderry"), "londonderri");});
test("londoner -> london", function() {deepEqual( Stem("londoner"), "london");});
test("londoners -> london", function() {deepEqual( Stem("londoners"), "london");});
test("lone -> lone", function() {deepEqual( Stem("lone"), "lone");});
test("loneliness -> loneli", function() {deepEqual( Stem("loneliness"), "loneli");});
test("lonely -> lone", function() {deepEqual( Stem("lonely"), "lone");});
test("long -> long", function() {deepEqual( Stem("long"), "long");});
test("longaville -> longavil", function() {deepEqual( Stem("longaville"), "longavil");});
test("longboat -> longboat", function() {deepEqual( Stem("longboat"), "longboat");});
test("longed -> long", function() {deepEqual( Stem("longed"), "long");});
test("longer -> longer", function() {deepEqual( Stem("longer"), "longer");});
test("longest -> longest", function() {deepEqual( Stem("longest"), "longest");});
test("longeth -> longeth", function() {deepEqual( Stem("longeth"), "longeth");});
test("longing -> long", function() {deepEqual( Stem("longing"), "long");});
test("longings -> long", function() {deepEqual( Stem("longings"), "long");});
test("longly -> longli", function() {deepEqual( Stem("longly"), "longli");});
test("longs -> long", function() {deepEqual( Stem("longs"), "long");});
test("longtail -> longtail", function() {deepEqual( Stem("longtail"), "longtail");});
test("longwood -> longwood", function() {deepEqual( Stem("longwood"), "longwood");});
test("loo -> loo", function() {deepEqual( Stem("loo"), "loo");});
test("loof -> loof", function() {deepEqual( Stem("loof"), "loof");});
test("look -> look", function() {deepEqual( Stem("look"), "look");});
test("looked -> look", function() {deepEqual( Stem("looked"), "look");});
test("looker -> looker", function() {deepEqual( Stem("looker"), "looker");});
test("lookers -> looker", function() {deepEqual( Stem("lookers"), "looker");});
test("lookest -> lookest", function() {deepEqual( Stem("lookest"), "lookest");});
test("looking -> look", function() {deepEqual( Stem("looking"), "look");});
test("looks -> look", function() {deepEqual( Stem("looks"), "look");});
test("loon -> loon", function() {deepEqual( Stem("loon"), "loon");});
test("loop -> loop", function() {deepEqual( Stem("loop"), "loop");});
test("loos -> loo", function() {deepEqual( Stem("loos"), "loo");});
test("loose -> loos", function() {deepEqual( Stem("loose"), "loos");});
test("loosed -> loos", function() {deepEqual( Stem("loosed"), "loos");});
test("loosely -> loos", function() {deepEqual( Stem("loosely"), "loos");});
test("loosen -> loosen", function() {deepEqual( Stem("loosen"), "loosen");});
test("loosing -> loos", function() {deepEqual( Stem("loosing"), "loos");});
test("lop -> lop", function() {deepEqual( Stem("lop"), "lop");});
test("lopp -> lopp", function() {deepEqual( Stem("lopp"), "lopp");});
test("lopped -> lop", function() {deepEqual( Stem("lopped"), "lop");});
test("loquitur -> loquitur", function() {deepEqual( Stem("loquitur"), "loquitur");});
test("lor -> lor", function() {deepEqual( Stem("lor"), "lor");});
test("lord -> lord", function() {deepEqual( Stem("lord"), "lord");});
test("lorded -> lord", function() {deepEqual( Stem("lorded"), "lord");});
test("lording -> lord", function() {deepEqual( Stem("lording"), "lord");});
test("lordings -> lord", function() {deepEqual( Stem("lordings"), "lord");});
test("lordliness -> lordli", function() {deepEqual( Stem("lordliness"), "lordli");});
test("lordly -> lordli", function() {deepEqual( Stem("lordly"), "lordli");});
test("lords -> lord", function() {deepEqual( Stem("lords"), "lord");});
test("lordship -> lordship", function() {deepEqual( Stem("lordship"), "lordship");});
test("lordships -> lordship", function() {deepEqual( Stem("lordships"), "lordship");});
test("lorenzo -> lorenzo", function() {deepEqual( Stem("lorenzo"), "lorenzo");});
test("lorgnon -> lorgnon", function() {deepEqual( Stem("lorgnon"), "lorgnon");});
test("lorn -> lorn", function() {deepEqual( Stem("lorn"), "lorn");});
test("lorraine -> lorrain", function() {deepEqual( Stem("lorraine"), "lorrain");});
test("lorship -> lorship", function() {deepEqual( Stem("lorship"), "lorship");});
test("los -> lo", function() {deepEqual( Stem("los"), "lo");});
test("lose -> lose", function() {deepEqual( Stem("lose"), "lose");});
test("loser -> loser", function() {deepEqual( Stem("loser"), "loser");});
test("losers -> loser", function() {deepEqual( Stem("losers"), "loser");});
test("loses -> lose", function() {deepEqual( Stem("loses"), "lose");});
test("losest -> losest", function() {deepEqual( Stem("losest"), "losest");});
test("loseth -> loseth", function() {deepEqual( Stem("loseth"), "loseth");});
test("losing -> lose", function() {deepEqual( Stem("losing"), "lose");});
test("losings -> lose", function() {deepEqual( Stem("losings"), "lose");});
test("loss -> loss", function() {deepEqual( Stem("loss"), "loss");});
test("losses -> loss", function() {deepEqual( Stem("losses"), "loss");});
test("lost -> lost", function() {deepEqual( Stem("lost"), "lost");});
test("lot -> lot", function() {deepEqual( Stem("lot"), "lot");});
test("loth -> loth", function() {deepEqual( Stem("loth"), "loth");});
test("lots -> lot", function() {deepEqual( Stem("lots"), "lot");});
test("lott -> lott", function() {deepEqual( Stem("lott"), "lott");});
test("lottery -> lotteri", function() {deepEqual( Stem("lottery"), "lotteri");});
test("loud -> loud", function() {deepEqual( Stem("loud"), "loud");});
test("louder -> louder", function() {deepEqual( Stem("louder"), "louder");});
test("loudest -> loudest", function() {deepEqual( Stem("loudest"), "loudest");});
test("loudly -> loudli", function() {deepEqual( Stem("loudly"), "loudli");});
test("loudness -> loud", function() {deepEqual( Stem("loudness"), "loud");});
test("louis -> loui", function() {deepEqual( Stem("louis"), "loui");});
test("louisa -> louisa", function() {deepEqual( Stem("louisa"), "louisa");});
test("lounged -> loung", function() {deepEqual( Stem("lounged"), "loung");});
test("loungers -> lounger", function() {deepEqual( Stem("loungers"), "lounger");});
test("lounging -> loung", function() {deepEqual( Stem("lounging"), "loung");});
test("lour -> lour", function() {deepEqual( Stem("lour"), "lour");});
test("loureth -> loureth", function() {deepEqual( Stem("loureth"), "loureth");});
test("louring -> lour", function() {deepEqual( Stem("louring"), "lour");});
test("louse -> lous", function() {deepEqual( Stem("louse"), "lous");});
test("louses -> lous", function() {deepEqual( Stem("louses"), "lous");});
test("lousy -> lousi", function() {deepEqual( Stem("lousy"), "lousi");});
test("lout -> lout", function() {deepEqual( Stem("lout"), "lout");});
test("louted -> lout", function() {deepEqual( Stem("louted"), "lout");});
test("louts -> lout", function() {deepEqual( Stem("louts"), "lout");});
test("louvre -> louvr", function() {deepEqual( Stem("louvre"), "louvr");});
test("lov -> lov", function() {deepEqual( Stem("lov"), "lov");});
test("love -> love", function() {deepEqual( Stem("love"), "love");});
test("loved -> love", function() {deepEqual( Stem("loved"), "love");});
test("lovedst -> lovedst", function() {deepEqual( Stem("lovedst"), "lovedst");});
test("lovel -> lovel", function() {deepEqual( Stem("lovel"), "lovel");});
test("lovelier -> loveli", function() {deepEqual( Stem("lovelier"), "loveli");});
test("loveliness -> loveli", function() {deepEqual( Stem("loveliness"), "loveli");});
test("lovell -> lovel", function() {deepEqual( Stem("lovell"), "lovel");});
test("lovely -> love", function() {deepEqual( Stem("lovely"), "love");});
test("lover -> lover", function() {deepEqual( Stem("lover"), "lover");});
test("lovered -> lover", function() {deepEqual( Stem("lovered"), "lover");});
test("lovers -> lover", function() {deepEqual( Stem("lovers"), "lover");});
test("loves -> love", function() {deepEqual( Stem("loves"), "love");});
test("lovest -> lovest", function() {deepEqual( Stem("lovest"), "lovest");});
test("loveth -> loveth", function() {deepEqual( Stem("loveth"), "loveth");});
test("loving -> love", function() {deepEqual( Stem("loving"), "love");});
test("lovingly -> lovingli", function() {deepEqual( Stem("lovingly"), "lovingli");});
test("low -> low", function() {deepEqual( Stem("low"), "low");});
test("lowe -> low", function() {deepEqual( Stem("lowe"), "low");});
test("lower -> lower", function() {deepEqual( Stem("lower"), "lower");});
test("lowest -> lowest", function() {deepEqual( Stem("lowest"), "lowest");});
test("lowing -> low", function() {deepEqual( Stem("lowing"), "low");});
test("lowliness -> lowli", function() {deepEqual( Stem("lowliness"), "lowli");});
test("lowly -> lowli", function() {deepEqual( Stem("lowly"), "lowli");});
test("lown -> lown", function() {deepEqual( Stem("lown"), "lown");});
test("lowness -> low", function() {deepEqual( Stem("lowness"), "low");});
test("loyal -> loyal", function() {deepEqual( Stem("loyal"), "loyal");});
test("loyalist -> loyalist", function() {deepEqual( Stem("loyalist"), "loyalist");});
test("loyally -> loyal", function() {deepEqual( Stem("loyally"), "loyal");});
test("loyalties -> loyalti", function() {deepEqual( Stem("loyalties"), "loyalti");});
test("loyalty -> loyalti", function() {deepEqual( Stem("loyalty"), "loyalti");});
test("loyola -> loyola", function() {deepEqual( Stem("loyola"), "loyola");});
test("lozel -> lozel", function() {deepEqual( Stem("lozel"), "lozel");});
test("lozenge -> lozeng", function() {deepEqual( Stem("lozenge"), "lozeng");});
test("lozenges -> lozeng", function() {deepEqual( Stem("lozenges"), "lozeng");});
test("lt -> lt", function() {deepEqual( Stem("lt"), "lt");});
test("lubber -> lubber", function() {deepEqual( Stem("lubber"), "lubber");});
test("lubberly -> lubberli", function() {deepEqual( Stem("lubberly"), "lubberli");});
test("luc -> luc", function() {deepEqual( Stem("luc"), "luc");});
test("luccicos -> luccico", function() {deepEqual( Stem("luccicos"), "luccico");});
test("luce -> luce", function() {deepEqual( Stem("luce"), "luce");});
test("lucentio -> lucentio", function() {deepEqual( Stem("lucentio"), "lucentio");});
test("luces -> luce", function() {deepEqual( Stem("luces"), "luce");});
test("lucetta -> lucetta", function() {deepEqual( Stem("lucetta"), "lucetta");});
test("luciana -> luciana", function() {deepEqual( Stem("luciana"), "luciana");});
test("lucianus -> lucianu", function() {deepEqual( Stem("lucianus"), "lucianu");});
test("lucid -> lucid", function() {deepEqual( Stem("lucid"), "lucid");});
test("lucifer -> lucif", function() {deepEqual( Stem("lucifer"), "lucif");});
test("lucifier -> lucifi", function() {deepEqual( Stem("lucifier"), "lucifi");});
test("lucilius -> luciliu", function() {deepEqual( Stem("lucilius"), "luciliu");});
test("lucina -> lucina", function() {deepEqual( Stem("lucina"), "lucina");});
test("lucio -> lucio", function() {deepEqual( Stem("lucio"), "lucio");});
test("lucius -> luciu", function() {deepEqual( Stem("lucius"), "luciu");});
test("luck -> luck", function() {deepEqual( Stem("luck"), "luck");});
test("luckier -> luckier", function() {deepEqual( Stem("luckier"), "luckier");});
test("luckiest -> luckiest", function() {deepEqual( Stem("luckiest"), "luckiest");});
test("luckily -> luckili", function() {deepEqual( Stem("luckily"), "luckili");});
test("luckless -> luckless", function() {deepEqual( Stem("luckless"), "luckless");});
test("lucky -> lucki", function() {deepEqual( Stem("lucky"), "lucki");});
test("lucrative -> lucr", function() {deepEqual( Stem("lucrative"), "lucr");});
test("lucre -> lucr", function() {deepEqual( Stem("lucre"), "lucr");});
test("lucrece -> lucrec", function() {deepEqual( Stem("lucrece"), "lucrec");});
test("lucretia -> lucretia", function() {deepEqual( Stem("lucretia"), "lucretia");});
test("lucullius -> luculliu", function() {deepEqual( Stem("lucullius"), "luculliu");});
test("lucullus -> lucullu", function() {deepEqual( Stem("lucullus"), "lucullu");});
test("lucy -> luci", function() {deepEqual( Stem("lucy"), "luci");});
test("lud -> lud", function() {deepEqual( Stem("lud"), "lud");});
test("ludgate -> ludgat", function() {deepEqual( Stem("ludgate"), "ludgat");});
test("ludicrous -> ludicr", function() {deepEqual( Stem("ludicrous"), "ludicr");});
test("ludlow -> ludlow", function() {deepEqual( Stem("ludlow"), "ludlow");});
test("lug -> lug", function() {deepEqual( Stem("lug"), "lug");});
test("lugg -> lugg", function() {deepEqual( Stem("lugg"), "lugg");});
test("luggage -> luggag", function() {deepEqual( Stem("luggage"), "luggag");});
test("luke -> luke", function() {deepEqual( Stem("luke"), "luke");});
test("lukewarm -> lukewarm", function() {deepEqual( Stem("lukewarm"), "lukewarm");});
test("lull -> lull", function() {deepEqual( Stem("lull"), "lull");});
test("lulla -> lulla", function() {deepEqual( Stem("lulla"), "lulla");});
test("lullaby -> lullabi", function() {deepEqual( Stem("lullaby"), "lullabi");});
test("lulls -> lull", function() {deepEqual( Stem("lulls"), "lull");});
test("lumbago -> lumbago", function() {deepEqual( Stem("lumbago"), "lumbago");});
test("lumber -> lumber", function() {deepEqual( Stem("lumber"), "lumber");});
test("lumbert -> lumbert", function() {deepEqual( Stem("lumbert"), "lumbert");});
test("lump -> lump", function() {deepEqual( Stem("lump"), "lump");});
test("lumpish -> lumpish", function() {deepEqual( Stem("lumpish"), "lumpish");});
test("luna -> luna", function() {deepEqual( Stem("luna"), "luna");});
test("lunacies -> lunaci", function() {deepEqual( Stem("lunacies"), "lunaci");});
test("lunacy -> lunaci", function() {deepEqual( Stem("lunacy"), "lunaci");});
test("lunatic -> lunat", function() {deepEqual( Stem("lunatic"), "lunat");});
test("lunatics -> lunat", function() {deepEqual( Stem("lunatics"), "lunat");});
test("lunch -> lunch", function() {deepEqual( Stem("lunch"), "lunch");});
test("luncheon -> luncheon", function() {deepEqual( Stem("luncheon"), "luncheon");});
test("lunes -> lune", function() {deepEqual( Stem("lunes"), "lune");});
test("lunging -> lung", function() {deepEqual( Stem("lunging"), "lung");});
test("lungs -> lung", function() {deepEqual( Stem("lungs"), "lung");});
test("lupercal -> luperc", function() {deepEqual( Stem("lupercal"), "luperc");});
test("lurch -> lurch", function() {deepEqual( Stem("lurch"), "lurch");});
test("lure -> lure", function() {deepEqual( Stem("lure"), "lure");});
test("lurk -> lurk", function() {deepEqual( Stem("lurk"), "lurk");});
test("lurked -> lurk", function() {deepEqual( Stem("lurked"), "lurk");});
test("lurketh -> lurketh", function() {deepEqual( Stem("lurketh"), "lurketh");});
test("lurking -> lurk", function() {deepEqual( Stem("lurking"), "lurk");});
test("lurks -> lurk", function() {deepEqual( Stem("lurks"), "lurk");});
test("luscious -> lusciou", function() {deepEqual( Stem("luscious"), "lusciou");});
test("lush -> lush", function() {deepEqual( Stem("lush"), "lush");});
test("lust -> lust", function() {deepEqual( Stem("lust"), "lust");});
test("lusted -> lust", function() {deepEqual( Stem("lusted"), "lust");});
test("luster -> luster", function() {deepEqual( Stem("luster"), "luster");});
test("lustful -> lust", function() {deepEqual( Stem("lustful"), "lust");});
test("lustier -> lustier", function() {deepEqual( Stem("lustier"), "lustier");});
test("lustiest -> lustiest", function() {deepEqual( Stem("lustiest"), "lustiest");});
test("lustig -> lustig", function() {deepEqual( Stem("lustig"), "lustig");});
test("lustihood -> lustihood", function() {deepEqual( Stem("lustihood"), "lustihood");});
test("lustily -> lustili", function() {deepEqual( Stem("lustily"), "lustili");});
test("lustre -> lustr", function() {deepEqual( Stem("lustre"), "lustr");});
test("lustrous -> lustrou", function() {deepEqual( Stem("lustrous"), "lustrou");});
test("lusts -> lust", function() {deepEqual( Stem("lusts"), "lust");});
test("lusty -> lusti", function() {deepEqual( Stem("lusty"), "lusti");});
test("lute -> lute", function() {deepEqual( Stem("lute"), "lute");});
test("lutes -> lute", function() {deepEqual( Stem("lutes"), "lute");});
test("lutestring -> lutestr", function() {deepEqual( Stem("lutestring"), "lutestr");});
test("lutheran -> lutheran", function() {deepEqual( Stem("lutheran"), "lutheran");});
test("luxuries -> luxuri", function() {deepEqual( Stem("luxuries"), "luxuri");});
test("luxurious -> luxuri", function() {deepEqual( Stem("luxurious"), "luxuri");});
test("luxuriously -> luxuri", function() {deepEqual( Stem("luxuriously"), "luxuri");});
test("luxury -> luxuri", function() {deepEqual( Stem("luxury"), "luxuri");});
test("lv -> lv", function() {deepEqual( Stem("lv"), "lv");});
test("lvi -> lvi", function() {deepEqual( Stem("lvi"), "lvi");});
test("lvii -> lvii", function() {deepEqual( Stem("lvii"), "lvii");});
test("lviii -> lviii", function() {deepEqual( Stem("lviii"), "lviii");});
test("lx -> lx", function() {deepEqual( Stem("lx"), "lx");});
test("lxi -> lxi", function() {deepEqual( Stem("lxi"), "lxi");});
test("lxii -> lxii", function() {deepEqual( Stem("lxii"), "lxii");});
test("lxiii -> lxiii", function() {deepEqual( Stem("lxiii"), "lxiii");});
test("lxiv -> lxiv", function() {deepEqual( Stem("lxiv"), "lxiv");});
test("lxv -> lxv", function() {deepEqual( Stem("lxv"), "lxv");});
test("lxvi -> lxvi", function() {deepEqual( Stem("lxvi"), "lxvi");});
test("lxvii -> lxvii", function() {deepEqual( Stem("lxvii"), "lxvii");});
test("ly -> ly", function() {deepEqual( Stem("ly"), "ly");});
test("lycaonia -> lycaonia", function() {deepEqual( Stem("lycaonia"), "lycaonia");});
test("lycurguses -> lycurgus", function() {deepEqual( Stem("lycurguses"), "lycurgus");});
test("lydia -> lydia", function() {deepEqual( Stem("lydia"), "lydia");});
test("lye -> lye", function() {deepEqual( Stem("lye"), "lye");});
test("lyen -> lyen", function() {deepEqual( Stem("lyen"), "lyen");});
test("lying -> ly", function() {deepEqual( Stem("lying"), "ly");});
test("lym -> lym", function() {deepEqual( Stem("lym"), "lym");});
test("lymoges -> lymog", function() {deepEqual( Stem("lymoges"), "lymog");});
test("lynn -> lynn", function() {deepEqual( Stem("lynn"), "lynn");});
test("lyons -> lyon", function() {deepEqual( Stem("lyons"), "lyon");});
test("lyrics -> lyric", function() {deepEqual( Stem("lyrics"), "lyric");});
test("lysander -> lysand", function() {deepEqual( Stem("lysander"), "lysand");});
test("m -> m", function() {deepEqual( Stem("m"), "m");});
test("ma -> ma", function() {deepEqual( Stem("ma"), "ma");});
test("maan -> maan", function() {deepEqual( Stem("maan"), "maan");});
test("mab -> mab", function() {deepEqual( Stem("mab"), "mab");});
test("mac -> mac", function() {deepEqual( Stem("mac"), "mac");});
test("macabau -> macabau", function() {deepEqual( Stem("macabau"), "macabau");});
test("macadam -> macadam", function() {deepEqual( Stem("macadam"), "macadam");});
test("macaroons -> macaroon", function() {deepEqual( Stem("macaroons"), "macaroon");});
test("macbeth -> macbeth", function() {deepEqual( Stem("macbeth"), "macbeth");});
test("macbeths -> macbeth", function() {deepEqual( Stem("macbeths"), "macbeth");});
test("maccabaeus -> maccabaeu", function() {deepEqual( Stem("maccabaeus"), "maccabaeu");});
test("macdonwald -> macdonwald", function() {deepEqual( Stem("macdonwald"), "macdonwald");});
test("macduff -> macduff", function() {deepEqual( Stem("macduff"), "macduff");});
test("mace -> mace", function() {deepEqual( Stem("mace"), "mace");});
test("macedon -> macedon", function() {deepEqual( Stem("macedon"), "macedon");});
test("maces -> mace", function() {deepEqual( Stem("maces"), "mace");});
test("machiavel -> machiavel", function() {deepEqual( Stem("machiavel"), "machiavel");});
test("machiavellian -> machiavellian", function() {deepEqual( Stem("machiavellian"), "machiavellian");});
test("machination -> machin", function() {deepEqual( Stem("machination"), "machin");});
test("machinations -> machin", function() {deepEqual( Stem("machinations"), "machin");});
test("machine -> machin", function() {deepEqual( Stem("machine"), "machin");});
test("machines -> machin", function() {deepEqual( Stem("machines"), "machin");});
test("mack -> mack", function() {deepEqual( Stem("mack"), "mack");});
test("macmorris -> macmorri", function() {deepEqual( Stem("macmorris"), "macmorri");});
test("macmurdo -> macmurdo", function() {deepEqual( Stem("macmurdo"), "macmurdo");});
test("macraw -> macraw", function() {deepEqual( Stem("macraw"), "macraw");});
test("mactavish -> mactavish", function() {deepEqual( Stem("mactavish"), "mactavish");});
test("maculate -> macul", function() {deepEqual( Stem("maculate"), "macul");});
test("maculation -> macul", function() {deepEqual( Stem("maculation"), "macul");});
test("macwhirter -> macwhirt", function() {deepEqual( Stem("macwhirter"), "macwhirt");});
test("mad -> mad", function() {deepEqual( Stem("mad"), "mad");});
test("madam -> madam", function() {deepEqual( Stem("madam"), "madam");});
test("madame -> madam", function() {deepEqual( Stem("madame"), "madam");});
test("madams -> madam", function() {deepEqual( Stem("madams"), "madam");});
test("madcap -> madcap", function() {deepEqual( Stem("madcap"), "madcap");});
test("madded -> mad", function() {deepEqual( Stem("madded"), "mad");});
test("maddened -> madden", function() {deepEqual( Stem("maddened"), "madden");});
test("maddening -> madden", function() {deepEqual( Stem("maddening"), "madden");});
test("madding -> mad", function() {deepEqual( Stem("madding"), "mad");});
test("made -> made", function() {deepEqual( Stem("made"), "made");});
test("madeira -> madeira", function() {deepEqual( Stem("madeira"), "madeira");});
test("mademoiselle -> mademoisel", function() {deepEqual( Stem("mademoiselle"), "mademoisel");});
test("madly -> madli", function() {deepEqual( Stem("madly"), "madli");});
test("madman -> madman", function() {deepEqual( Stem("madman"), "madman");});
test("madmen -> madmen", function() {deepEqual( Stem("madmen"), "madmen");});
test("madness -> mad", function() {deepEqual( Stem("madness"), "mad");});
test("madonna -> madonna", function() {deepEqual( Stem("madonna"), "madonna");});
test("madras -> madra", function() {deepEqual( Stem("madras"), "madra");});
test("madrigals -> madrig", function() {deepEqual( Stem("madrigals"), "madrig");});
test("mads -> mad", function() {deepEqual( Stem("mads"), "mad");});
test("maecenas -> maecena", function() {deepEqual( Stem("maecenas"), "maecena");});
test("magasin -> magasin", function() {deepEqual( Stem("magasin"), "magasin");});
test("magazine -> magazin", function() {deepEqual( Stem("magazine"), "magazin");});
test("magenis -> mageni", function() {deepEqual( Stem("magenis"), "mageni");});
test("maggot -> maggot", function() {deepEqual( Stem("maggot"), "maggot");});
test("maggots -> maggot", function() {deepEqual( Stem("maggots"), "maggot");});
test("magic -> magic", function() {deepEqual( Stem("magic"), "magic");});
test("magical -> magic", function() {deepEqual( Stem("magical"), "magic");});
test("magician -> magician", function() {deepEqual( Stem("magician"), "magician");});
test("magistrate -> magistr", function() {deepEqual( Stem("magistrate"), "magistr");});
test("magistrates -> magistr", function() {deepEqual( Stem("magistrates"), "magistr");});
test("magnanimity -> magnanim", function() {deepEqual( Stem("magnanimity"), "magnanim");});
test("magnanimous -> magnanim", function() {deepEqual( Stem("magnanimous"), "magnanim");});
test("magnate -> magnat", function() {deepEqual( Stem("magnate"), "magnat");});
test("magnates -> magnat", function() {deepEqual( Stem("magnates"), "magnat");});
test("magnetism -> magnet", function() {deepEqual( Stem("magnetism"), "magnet");});
test("magni -> magni", function() {deepEqual( Stem("magni"), "magni");});
test("magnifi -> magnifi", function() {deepEqual( Stem("magnifi"), "magnifi");});
test("magnificence -> magnific", function() {deepEqual( Stem("magnificence"), "magnific");});
test("magnificent -> magnific", function() {deepEqual( Stem("magnificent"), "magnific");});
test("magnificently -> magnific", function() {deepEqual( Stem("magnificently"), "magnific");});
test("magnifico -> magnifico", function() {deepEqual( Stem("magnifico"), "magnifico");});
test("magnificoes -> magnifico", function() {deepEqual( Stem("magnificoes"), "magnifico");});
test("magnified -> magnifi", function() {deepEqual( Stem("magnified"), "magnifi");});
test("magnolia -> magnolia", function() {deepEqual( Stem("magnolia"), "magnolia");});
test("magnolias -> magnolia", function() {deepEqual( Stem("magnolias"), "magnolia");});
test("magnus -> magnu", function() {deepEqual( Stem("magnus"), "magnu");});
test("mahogany -> mahogani", function() {deepEqual( Stem("mahogany"), "mahogani");});
test("mahomet -> mahomet", function() {deepEqual( Stem("mahomet"), "mahomet");});
test("mahometan -> mahometan", function() {deepEqual( Stem("mahometan"), "mahometan");});
test("mahout -> mahout", function() {deepEqual( Stem("mahout"), "mahout");});
test("mahu -> mahu", function() {deepEqual( Stem("mahu"), "mahu");});
test("maid -> maid", function() {deepEqual( Stem("maid"), "maid");});
test("maiden -> maiden", function() {deepEqual( Stem("maiden"), "maiden");});
test("maidenhead -> maidenhead", function() {deepEqual( Stem("maidenhead"), "maidenhead");});
test("maidenheads -> maidenhead", function() {deepEqual( Stem("maidenheads"), "maidenhead");});
test("maidenhood -> maidenhood", function() {deepEqual( Stem("maidenhood"), "maidenhood");});
test("maidenhoods -> maidenhood", function() {deepEqual( Stem("maidenhoods"), "maidenhood");});
test("maidenliest -> maidenliest", function() {deepEqual( Stem("maidenliest"), "maidenliest");});
test("maidenly -> maidenli", function() {deepEqual( Stem("maidenly"), "maidenli");});
test("maidens -> maiden", function() {deepEqual( Stem("maidens"), "maiden");});
test("maidhood -> maidhood", function() {deepEqual( Stem("maidhood"), "maidhood");});
test("maids -> maid", function() {deepEqual( Stem("maids"), "maid");});
test("maidservant -> maidserv", function() {deepEqual( Stem("maidservant"), "maidserv");});
test("maidservants -> maidserv", function() {deepEqual( Stem("maidservants"), "maidserv");});
test("mail -> mail", function() {deepEqual( Stem("mail"), "mail");});
test("mailed -> mail", function() {deepEqual( Stem("mailed"), "mail");});
test("mails -> mail", function() {deepEqual( Stem("mails"), "mail");});
test("maim -> maim", function() {deepEqual( Stem("maim"), "maim");});
test("maimed -> maim", function() {deepEqual( Stem("maimed"), "maim");});
test("maims -> maim", function() {deepEqual( Stem("maims"), "maim");});
test("main -> main", function() {deepEqual( Stem("main"), "main");});
test("maincourse -> maincours", function() {deepEqual( Stem("maincourse"), "maincours");});
test("maine -> main", function() {deepEqual( Stem("maine"), "main");});
test("mainly -> mainli", function() {deepEqual( Stem("mainly"), "mainli");});
test("mainmast -> mainmast", function() {deepEqual( Stem("mainmast"), "mainmast");});
test("mains -> main", function() {deepEqual( Stem("mains"), "main");});
test("maintain -> maintain", function() {deepEqual( Stem("maintain"), "maintain");});
test("maintained -> maintain", function() {deepEqual( Stem("maintained"), "maintain");});
test("maintaining -> maintain", function() {deepEqual( Stem("maintaining"), "maintain");});
test("maintains -> maintain", function() {deepEqual( Stem("maintains"), "maintain");});
test("maintenance -> mainten", function() {deepEqual( Stem("maintenance"), "mainten");});
test("maintenon -> maintenon", function() {deepEqual( Stem("maintenon"), "maintenon");});
test("maintenong -> maintenong", function() {deepEqual( Stem("maintenong"), "maintenong");});
test("mais -> mai", function() {deepEqual( Stem("mais"), "mai");});
test("maison -> maison", function() {deepEqual( Stem("maison"), "maison");});
test("maitre -> maitr", function() {deepEqual( Stem("maitre"), "maitr");});
test("majestas -> majesta", function() {deepEqual( Stem("majestas"), "majesta");});
test("majestee -> majeste", function() {deepEqual( Stem("majestee"), "majeste");});
test("majestic -> majest", function() {deepEqual( Stem("majestic"), "majest");});
test("majestical -> majest", function() {deepEqual( Stem("majestical"), "majest");});
test("majestically -> majest", function() {deepEqual( Stem("majestically"), "majest");});
test("majesties -> majesti", function() {deepEqual( Stem("majesties"), "majesti");});
test("majesty -> majesti", function() {deepEqual( Stem("majesty"), "majesti");});
test("major -> major", function() {deepEqual( Stem("major"), "major");});
test("majority -> major", function() {deepEqual( Stem("majority"), "major");});
test("mak -> mak", function() {deepEqual( Stem("mak"), "mak");});
test("make -> make", function() {deepEqual( Stem("make"), "make");});
test("makeless -> makeless", function() {deepEqual( Stem("makeless"), "makeless");});
test("makepeace -> makepeac", function() {deepEqual( Stem("makepeace"), "makepeac");});
test("maker -> maker", function() {deepEqual( Stem("maker"), "maker");});
test("makers -> maker", function() {deepEqual( Stem("makers"), "maker");});
test("makes -> make", function() {deepEqual( Stem("makes"), "make");});
test("makest -> makest", function() {deepEqual( Stem("makest"), "makest");});
test("maketh -> maketh", function() {deepEqual( Stem("maketh"), "maketh");});
test("making -> make", function() {deepEqual( Stem("making"), "make");});
test("makings -> make", function() {deepEqual( Stem("makings"), "make");});
test("mal -> mal", function() {deepEqual( Stem("mal"), "mal");});
test("mala -> mala", function() {deepEqual( Stem("mala"), "mala");});
test("maladies -> maladi", function() {deepEqual( Stem("maladies"), "maladi");});
test("malady -> maladi", function() {deepEqual( Stem("malady"), "maladi");});
test("malapert -> malapert", function() {deepEqual( Stem("malapert"), "malapert");});
test("malaria -> malaria", function() {deepEqual( Stem("malaria"), "malaria");});
test("malbrook -> malbrook", function() {deepEqual( Stem("malbrook"), "malbrook");});
test("malcolm -> malcolm", function() {deepEqual( Stem("malcolm"), "malcolm");});
test("malcontent -> malcont", function() {deepEqual( Stem("malcontent"), "malcont");});
test("malcontents -> malcont", function() {deepEqual( Stem("malcontents"), "malcont");});
test("male -> male", function() {deepEqual( Stem("male"), "male");});
test("maledictions -> maledict", function() {deepEqual( Stem("maledictions"), "maledict");});
test("malefactions -> malefact", function() {deepEqual( Stem("malefactions"), "malefact");});
test("malefactor -> malefactor", function() {deepEqual( Stem("malefactor"), "malefactor");});
test("malefactors -> malefactor", function() {deepEqual( Stem("malefactors"), "malefactor");});
test("males -> male", function() {deepEqual( Stem("males"), "male");});
test("malevolence -> malevol", function() {deepEqual( Stem("malevolence"), "malevol");});
test("malevolent -> malevol", function() {deepEqual( Stem("malevolent"), "malevol");});
test("malhecho -> malhecho", function() {deepEqual( Stem("malhecho"), "malhecho");});
test("malice -> malic", function() {deepEqual( Stem("malice"), "malic");});
test("malicious -> malici", function() {deepEqual( Stem("malicious"), "malici");});
test("maliciously -> malici", function() {deepEqual( Stem("maliciously"), "malici");});
test("malign -> malign", function() {deepEqual( Stem("malign"), "malign");});
test("malignancy -> malign", function() {deepEqual( Stem("malignancy"), "malign");});
test("malignant -> malign", function() {deepEqual( Stem("malignant"), "malign");});
test("malignantly -> malignantli", function() {deepEqual( Stem("malignantly"), "malignantli");});
test("maligned -> malign", function() {deepEqual( Stem("maligned"), "malign");});
test("malines -> malin", function() {deepEqual( Stem("malines"), "malin");});
test("malkin -> malkin", function() {deepEqual( Stem("malkin"), "malkin");});
test("mall -> mall", function() {deepEqual( Stem("mall"), "mall");});
test("mallard -> mallard", function() {deepEqual( Stem("mallard"), "mallard");});
test("mallet -> mallet", function() {deepEqual( Stem("mallet"), "mallet");});
test("mallow -> mallow", function() {deepEqual( Stem("mallow"), "mallow");});
test("mallows -> mallow", function() {deepEqual( Stem("mallows"), "mallow");});
test("malloy -> malloi", function() {deepEqual( Stem("malloy"), "malloi");});
test("malmesbury -> malmesburi", function() {deepEqual( Stem("malmesbury"), "malmesburi");});
test("malmsey -> malmsei", function() {deepEqual( Stem("malmsey"), "malmsei");});
test("malony -> maloni", function() {deepEqual( Stem("malony"), "maloni");});
test("malonys -> maloni", function() {deepEqual( Stem("malonys"), "maloni");});
test("malt -> malt", function() {deepEqual( Stem("malt"), "malt");});
test("maltreat -> maltreat", function() {deepEqual( Stem("maltreat"), "maltreat");});
test("maltworms -> maltworm", function() {deepEqual( Stem("maltworms"), "maltworm");});
test("malvolio -> malvolio", function() {deepEqual( Stem("malvolio"), "malvolio");});
test("mama -> mama", function() {deepEqual( Stem("mama"), "mama");});
test("mamillius -> mamilliu", function() {deepEqual( Stem("mamillius"), "mamilliu");});
test("mamma -> mamma", function() {deepEqual( Stem("mamma"), "mamma");});
test("mammas -> mamma", function() {deepEqual( Stem("mammas"), "mamma");});
test("mammering -> mammer", function() {deepEqual( Stem("mammering"), "mammer");});
test("mammet -> mammet", function() {deepEqual( Stem("mammet"), "mammet");});
test("mammets -> mammet", function() {deepEqual( Stem("mammets"), "mammet");});
test("mammock -> mammock", function() {deepEqual( Stem("mammock"), "mammock");});
test("mammon -> mammon", function() {deepEqual( Stem("mammon"), "mammon");});
test("man -> man", function() {deepEqual( Stem("man"), "man");});
test("manacle -> manacl", function() {deepEqual( Stem("manacle"), "manacl");});
test("manacles -> manacl", function() {deepEqual( Stem("manacles"), "manacl");});
test("manage -> manag", function() {deepEqual( Stem("manage"), "manag");});
test("managed -> manag", function() {deepEqual( Stem("managed"), "manag");});
test("management -> manag", function() {deepEqual( Stem("management"), "manag");});
test("manager -> manag", function() {deepEqual( Stem("manager"), "manag");});
test("managing -> manag", function() {deepEqual( Stem("managing"), "manag");});
test("manakin -> manakin", function() {deepEqual( Stem("manakin"), "manakin");});
test("manasseh -> manasseh", function() {deepEqual( Stem("manasseh"), "manasseh");});
test("manchen -> manchen", function() {deepEqual( Stem("manchen"), "manchen");});
test("manchester -> manchest", function() {deepEqual( Stem("manchester"), "manchest");});
test("manchus -> manchu", function() {deepEqual( Stem("manchus"), "manchu");});
test("mandate -> mandat", function() {deepEqual( Stem("mandate"), "mandat");});
test("mandragora -> mandragora", function() {deepEqual( Stem("mandragora"), "mandragora");});
test("mandrake -> mandrak", function() {deepEqual( Stem("mandrake"), "mandrak");});
test("mandrakes -> mandrak", function() {deepEqual( Stem("mandrakes"), "mandrak");});
test("mane -> mane", function() {deepEqual( Stem("mane"), "mane");});
test("manent -> manent", function() {deepEqual( Stem("manent"), "manent");});
test("manes -> mane", function() {deepEqual( Stem("manes"), "mane");});
test("manet -> manet", function() {deepEqual( Stem("manet"), "manet");});
test("manfully -> manfulli", function() {deepEqual( Stem("manfully"), "manfulli");});
test("mangelwurzel -> mangelwurzel", function() {deepEqual( Stem("mangelwurzel"), "mangelwurzel");});
test("mangle -> mangl", function() {deepEqual( Stem("mangle"), "mangl");});
test("mangled -> mangl", function() {deepEqual( Stem("mangled"), "mangl");});
test("mangles -> mangl", function() {deepEqual( Stem("mangles"), "mangl");});
test("mangling -> mangl", function() {deepEqual( Stem("mangling"), "mangl");});
test("mangnall -> mangnal", function() {deepEqual( Stem("mangnall"), "mangnal");});
test("mango -> mango", function() {deepEqual( Stem("mango"), "mango");});
test("mangoes -> mango", function() {deepEqual( Stem("mangoes"), "mango");});
test("mangy -> mangi", function() {deepEqual( Stem("mangy"), "mangi");});
test("manhood -> manhood", function() {deepEqual( Stem("manhood"), "manhood");});
test("manhoods -> manhood", function() {deepEqual( Stem("manhoods"), "manhood");});
test("mania -> mania", function() {deepEqual( Stem("mania"), "mania");});
test("manifest -> manifest", function() {deepEqual( Stem("manifest"), "manifest");});
test("manifested -> manifest", function() {deepEqual( Stem("manifested"), "manifest");});
test("manifests -> manifest", function() {deepEqual( Stem("manifests"), "manifest");});
test("manifold -> manifold", function() {deepEqual( Stem("manifold"), "manifold");});
test("manifoldly -> manifoldli", function() {deepEqual( Stem("manifoldly"), "manifoldli");});
test("manka -> manka", function() {deepEqual( Stem("manka"), "manka");});
test("mankind -> mankind", function() {deepEqual( Stem("mankind"), "mankind");});
test("manlike -> manlik", function() {deepEqual( Stem("manlike"), "manlik");});
test("manly -> manli", function() {deepEqual( Stem("manly"), "manli");});
test("mann -> mann", function() {deepEqual( Stem("mann"), "mann");});
test("manna -> manna", function() {deepEqual( Stem("manna"), "manna");});
test("manner -> manner", function() {deepEqual( Stem("manner"), "manner");});
test("mannerly -> mannerli", function() {deepEqual( Stem("mannerly"), "mannerli");});
test("manners -> manner", function() {deepEqual( Stem("manners"), "manner");});
test("manningtree -> manningtre", function() {deepEqual( Stem("manningtree"), "manningtre");});
test("mannish -> mannish", function() {deepEqual( Stem("mannish"), "mannish");});
test("manoeuvre -> manoeuvr", function() {deepEqual( Stem("manoeuvre"), "manoeuvr");});
test("manoeuvres -> manoeuvr", function() {deepEqual( Stem("manoeuvres"), "manoeuvr");});
test("manor -> manor", function() {deepEqual( Stem("manor"), "manor");});
test("manors -> manor", function() {deepEqual( Stem("manors"), "manor");});
test("mans -> man", function() {deepEqual( Stem("mans"), "man");});
test("mansion -> mansion", function() {deepEqual( Stem("mansion"), "mansion");});
test("mansionry -> mansionri", function() {deepEqual( Stem("mansionry"), "mansionri");});
test("mansions -> mansion", function() {deepEqual( Stem("mansions"), "mansion");});
test("manslaughter -> manslaught", function() {deepEqual( Stem("manslaughter"), "manslaught");});
test("mantel -> mantel", function() {deepEqual( Stem("mantel"), "mantel");});
test("mantelpiece -> mantelpiec", function() {deepEqual( Stem("mantelpiece"), "mantelpiec");});
test("mantle -> mantl", function() {deepEqual( Stem("mantle"), "mantl");});
test("mantled -> mantl", function() {deepEqual( Stem("mantled"), "mantl");});
test("mantles -> mantl", function() {deepEqual( Stem("mantles"), "mantl");});
test("manton -> manton", function() {deepEqual( Stem("manton"), "manton");});
test("mantrap -> mantrap", function() {deepEqual( Stem("mantrap"), "mantrap");});
test("mantua -> mantua", function() {deepEqual( Stem("mantua"), "mantua");});
test("mantuan -> mantuan", function() {deepEqual( Stem("mantuan"), "mantuan");});
test("manual -> manual", function() {deepEqual( Stem("manual"), "manual");});
test("manufactured -> manufactur", function() {deepEqual( Stem("manufactured"), "manufactur");});
test("manure -> manur", function() {deepEqual( Stem("manure"), "manur");});
test("manured -> manur", function() {deepEqual( Stem("manured"), "manur");});
test("manus -> manu", function() {deepEqual( Stem("manus"), "manu");});
test("many -> mani", function() {deepEqual( Stem("many"), "mani");});
test("map -> map", function() {deepEqual( Stem("map"), "map");});
test("mapp -> mapp", function() {deepEqual( Stem("mapp"), "mapp");});
test("maps -> map", function() {deepEqual( Stem("maps"), "map");});
test("mar -> mar", function() {deepEqual( Stem("mar"), "mar");});
test("marabou -> marab", function() {deepEqual( Stem("marabou"), "marab");});
test("maraschino -> maraschino", function() {deepEqual( Stem("maraschino"), "maraschino");});
test("marauding -> maraud", function() {deepEqual( Stem("marauding"), "maraud");});
test("marble -> marbl", function() {deepEqual( Stem("marble"), "marbl");});
test("marbled -> marbl", function() {deepEqual( Stem("marbled"), "marbl");});
test("marcade -> marcad", function() {deepEqual( Stem("marcade"), "marcad");});
test("marcellus -> marcellu", function() {deepEqual( Stem("marcellus"), "marcellu");});
test("march -> march", function() {deepEqual( Stem("march"), "march");});
test("marche -> march", function() {deepEqual( Stem("marche"), "march");});
test("marched -> march", function() {deepEqual( Stem("marched"), "march");});
test("marches -> march", function() {deepEqual( Stem("marches"), "march");});
test("marchese -> marches", function() {deepEqual( Stem("marchese"), "marches");});
test("marcheth -> marcheth", function() {deepEqual( Stem("marcheth"), "marcheth");});
test("marching -> march", function() {deepEqual( Stem("marching"), "march");});
test("marchioness -> marchio", function() {deepEqual( Stem("marchioness"), "marchio");});
test("marchpane -> marchpan", function() {deepEqual( Stem("marchpane"), "marchpan");});
test("marcians -> marcian", function() {deepEqual( Stem("marcians"), "marcian");});
test("marcius -> marciu", function() {deepEqual( Stem("marcius"), "marciu");});
test("marcus -> marcu", function() {deepEqual( Stem("marcus"), "marcu");});
test("mardian -> mardian", function() {deepEqual( Stem("mardian"), "mardian");});
test("mare -> mare", function() {deepEqual( Stem("mare"), "mare");});
test("marechale -> marechal", function() {deepEqual( Stem("marechale"), "marechal");});
test("marengo -> marengo", function() {deepEqual( Stem("marengo"), "marengo");});
test("mares -> mare", function() {deepEqual( Stem("mares"), "mare");});
test("marg -> marg", function() {deepEqual( Stem("marg"), "marg");});
test("margarelon -> margarelon", function() {deepEqual( Stem("margarelon"), "margarelon");});
test("margaret -> margaret", function() {deepEqual( Stem("margaret"), "margaret");});
test("margaretta -> margaretta", function() {deepEqual( Stem("margaretta"), "margaretta");});
test("margate -> margat", function() {deepEqual( Stem("margate"), "margat");});
test("marge -> marg", function() {deepEqual( Stem("marge"), "marg");});
test("margent -> margent", function() {deepEqual( Stem("margent"), "margent");});
test("margery -> margeri", function() {deepEqual( Stem("margery"), "margeri");});
test("maria -> maria", function() {deepEqual( Stem("maria"), "maria");});
test("marian -> marian", function() {deepEqual( Stem("marian"), "marian");});
test("mariana -> mariana", function() {deepEqual( Stem("mariana"), "mariana");});
test("marianne -> mariann", function() {deepEqual( Stem("marianne"), "mariann");});
test("marie -> mari", function() {deepEqual( Stem("marie"), "mari");});
test("maries -> mari", function() {deepEqual( Stem("maries"), "mari");});
test("marigold -> marigold", function() {deepEqual( Stem("marigold"), "marigold");});
test("marine -> marin", function() {deepEqual( Stem("marine"), "marin");});
test("mariner -> marin", function() {deepEqual( Stem("mariner"), "marin");});
test("mariners -> marin", function() {deepEqual( Stem("mariners"), "marin");});
test("maritime -> maritim", function() {deepEqual( Stem("maritime"), "maritim");});
test("marjoram -> marjoram", function() {deepEqual( Stem("marjoram"), "marjoram");});
test("mark -> mark", function() {deepEqual( Stem("mark"), "mark");});
test("marked -> mark", function() {deepEqual( Stem("marked"), "mark");});
test("marker -> marker", function() {deepEqual( Stem("marker"), "marker");});
test("market -> market", function() {deepEqual( Stem("market"), "market");});
test("marketable -> market", function() {deepEqual( Stem("marketable"), "market");});
test("marketplace -> marketplac", function() {deepEqual( Stem("marketplace"), "marketplac");});
test("markets -> market", function() {deepEqual( Stem("markets"), "market");});
test("marking -> mark", function() {deepEqual( Stem("marking"), "mark");});
test("markman -> markman", function() {deepEqual( Stem("markman"), "markman");});
test("marks -> mark", function() {deepEqual( Stem("marks"), "mark");});
test("marl -> marl", function() {deepEqual( Stem("marl"), "marl");});
test("marle -> marl", function() {deepEqual( Stem("marle"), "marl");});
test("marlow -> marlow", function() {deepEqual( Stem("marlow"), "marlow");});
test("marmalade -> marmalad", function() {deepEqual( Stem("marmalade"), "marmalad");});
test("marmoset -> marmoset", function() {deepEqual( Stem("marmoset"), "marmoset");});
test("marning -> marn", function() {deepEqual( Stem("marning"), "marn");});
test("marquee -> marque", function() {deepEqual( Stem("marquee"), "marque");});
test("marquess -> marquess", function() {deepEqual( Stem("marquess"), "marquess");});
test("marquis -> marqui", function() {deepEqual( Stem("marquis"), "marqui");});
test("marquisate -> marquis", function() {deepEqual( Stem("marquisate"), "marquis");});
test("marquise -> marquis", function() {deepEqual( Stem("marquise"), "marquis");});
test("marquises -> marquis", function() {deepEqual( Stem("marquises"), "marquis");});
test("marr -> marr", function() {deepEqual( Stem("marr"), "marr");});
test("marriage -> marriag", function() {deepEqual( Stem("marriage"), "marriag");});
test("marriageable -> marriag", function() {deepEqual( Stem("marriageable"), "marriag");});
test("marriages -> marriag", function() {deepEqual( Stem("marriages"), "marriag");});
test("married -> marri", function() {deepEqual( Stem("married"), "marri");});
test("marries -> marri", function() {deepEqual( Stem("marries"), "marri");});
test("marring -> mar", function() {deepEqual( Stem("marring"), "mar");});
test("marrow -> marrow", function() {deepEqual( Stem("marrow"), "marrow");});
test("marrowless -> marrowless", function() {deepEqual( Stem("marrowless"), "marrowless");});
test("marrows -> marrow", function() {deepEqual( Stem("marrows"), "marrow");});
test("marry -> marri", function() {deepEqual( Stem("marry"), "marri");});
test("marrying -> marri", function() {deepEqual( Stem("marrying"), "marri");});
test("mars -> mar", function() {deepEqual( Stem("mars"), "mar");});
test("marschall -> marschal", function() {deepEqual( Stem("marschall"), "marschal");});
test("marseilles -> marseil", function() {deepEqual( Stem("marseilles"), "marseil");});
test("marsh -> marsh", function() {deepEqual( Stem("marsh"), "marsh");});
test("marshal -> marshal", function() {deepEqual( Stem("marshal"), "marshal");});
test("marshalled -> marshal", function() {deepEqual( Stem("marshalled"), "marshal");});
test("marshalling -> marshal", function() {deepEqual( Stem("marshalling"), "marshal");});
test("marshalsea -> marshalsea", function() {deepEqual( Stem("marshalsea"), "marshalsea");});
test("marshalship -> marshalship", function() {deepEqual( Stem("marshalship"), "marshalship");});
test("marshy -> marshi", function() {deepEqual( Stem("marshy"), "marshi");});
test("mart -> mart", function() {deepEqual( Stem("mart"), "mart");});
test("marted -> mart", function() {deepEqual( Stem("marted"), "mart");});
test("martem -> martem", function() {deepEqual( Stem("martem"), "martem");});
test("martext -> martext", function() {deepEqual( Stem("martext"), "martext");});
test("martha -> martha", function() {deepEqual( Stem("martha"), "martha");});
test("martial -> martial", function() {deepEqual( Stem("martial"), "martial");});
test("martin -> martin", function() {deepEqual( Stem("martin"), "martin");});
test("martingale -> martingal", function() {deepEqual( Stem("martingale"), "martingal");});
test("martino -> martino", function() {deepEqual( Stem("martino"), "martino");});
test("martius -> martiu", function() {deepEqual( Stem("martius"), "martiu");});
test("martlemas -> martlema", function() {deepEqual( Stem("martlemas"), "martlema");});
test("martlet -> martlet", function() {deepEqual( Stem("martlet"), "martlet");});
test("marts -> mart", function() {deepEqual( Stem("marts"), "mart");});
test("martyr -> martyr", function() {deepEqual( Stem("martyr"), "martyr");});
test("martyrdoms -> martyrdom", function() {deepEqual( Stem("martyrdoms"), "martyrdom");});
test("martyrs -> martyr", function() {deepEqual( Stem("martyrs"), "martyr");});
test("marullus -> marullu", function() {deepEqual( Stem("marullus"), "marullu");});
test("marv -> marv", function() {deepEqual( Stem("marv"), "marv");});
test("marvel -> marvel", function() {deepEqual( Stem("marvel"), "marvel");});
test("marvell -> marvel", function() {deepEqual( Stem("marvell"), "marvel");});
test("marvelled -> marvel", function() {deepEqual( Stem("marvelled"), "marvel");});
test("marvellous -> marvel", function() {deepEqual( Stem("marvellous"), "marvel");});
test("marvellously -> marvel", function() {deepEqual( Stem("marvellously"), "marvel");});
test("marvels -> marvel", function() {deepEqual( Stem("marvels"), "marvel");});
test("mary -> mari", function() {deepEqual( Stem("mary"), "mari");});
test("mas -> ma", function() {deepEqual( Stem("mas"), "ma");});
test("masculine -> masculin", function() {deepEqual( Stem("masculine"), "masculin");});
test("masham -> masham", function() {deepEqual( Stem("masham"), "masham");});
test("mask -> mask", function() {deepEqual( Stem("mask"), "mask");});
test("masked -> mask", function() {deepEqual( Stem("masked"), "mask");});
test("masker -> masker", function() {deepEqual( Stem("masker"), "masker");});
test("maskers -> masker", function() {deepEqual( Stem("maskers"), "masker");});
test("masking -> mask", function() {deepEqual( Stem("masking"), "mask");});
test("masks -> mask", function() {deepEqual( Stem("masks"), "mask");});
test("mason -> mason", function() {deepEqual( Stem("mason"), "mason");});
test("masonry -> masonri", function() {deepEqual( Stem("masonry"), "masonri");});
test("masons -> mason", function() {deepEqual( Stem("masons"), "mason");});
test("masque -> masqu", function() {deepEqual( Stem("masque"), "masqu");});
test("masquers -> masquer", function() {deepEqual( Stem("masquers"), "masquer");});
test("masques -> masqu", function() {deepEqual( Stem("masques"), "masqu");});
test("masquing -> masqu", function() {deepEqual( Stem("masquing"), "masqu");});
test("mass -> mass", function() {deepEqual( Stem("mass"), "mass");});
test("massacre -> massacr", function() {deepEqual( Stem("massacre"), "massacr");});
test("massacres -> massacr", function() {deepEqual( Stem("massacres"), "massacr");});
test("masses -> mass", function() {deepEqual( Stem("masses"), "mass");});
test("massy -> massi", function() {deepEqual( Stem("massy"), "massi");});
test("mast -> mast", function() {deepEqual( Stem("mast"), "mast");});
test("mastcr -> mastcr", function() {deepEqual( Stem("mastcr"), "mastcr");});
test("master -> master", function() {deepEqual( Stem("master"), "master");});
test("masterdom -> masterdom", function() {deepEqual( Stem("masterdom"), "masterdom");});
test("mastered -> master", function() {deepEqual( Stem("mastered"), "master");});
test("masterest -> masterest", function() {deepEqual( Stem("masterest"), "masterest");});
test("masterless -> masterless", function() {deepEqual( Stem("masterless"), "masterless");});
test("masterly -> masterli", function() {deepEqual( Stem("masterly"), "masterli");});
test("masterpiece -> masterpiec", function() {deepEqual( Stem("masterpiece"), "masterpiec");});
test("masters -> master", function() {deepEqual( Stem("masters"), "master");});
test("mastership -> mastership", function() {deepEqual( Stem("mastership"), "mastership");});
test("mastery -> masteri", function() {deepEqual( Stem("mastery"), "masteri");});
test("mastic -> mastic", function() {deepEqual( Stem("mastic"), "mastic");});
test("mastiff -> mastiff", function() {deepEqual( Stem("mastiff"), "mastiff");});
test("mastiffs -> mastiff", function() {deepEqual( Stem("mastiffs"), "mastiff");});
test("masts -> mast", function() {deepEqual( Stem("masts"), "mast");});
test("match -> match", function() {deepEqual( Stem("match"), "match");});
test("matches -> match", function() {deepEqual( Stem("matches"), "match");});
test("matcheth -> matcheth", function() {deepEqual( Stem("matcheth"), "matcheth");});
test("matching -> match", function() {deepEqual( Stem("matching"), "match");});
test("matchless -> matchless", function() {deepEqual( Stem("matchless"), "matchless");});
test("mate -> mate", function() {deepEqual( Stem("mate"), "mate");});
test("mated -> mate", function() {deepEqual( Stem("mated"), "mate");});
test("mater -> mater", function() {deepEqual( Stem("mater"), "mater");});
test("material -> materi", function() {deepEqual( Stem("material"), "materi");});
test("materials -> materi", function() {deepEqual( Stem("materials"), "materi");});
test("maternal -> matern", function() {deepEqual( Stem("maternal"), "matern");});
test("mates -> mate", function() {deepEqual( Stem("mates"), "mate");});
test("mathematics -> mathemat", function() {deepEqual( Stem("mathematics"), "mathemat");});
test("matilda -> matilda", function() {deepEqual( Stem("matilda"), "matilda");});
test("matin -> matin", function() {deepEqual( Stem("matin"), "matin");});
test("matinee -> matine", function() {deepEqual( Stem("matinee"), "matine");});
test("matrimonial -> matrimoni", function() {deepEqual( Stem("matrimonial"), "matrimoni");});
test("matrimony -> matrimoni", function() {deepEqual( Stem("matrimony"), "matrimoni");});
test("matron -> matron", function() {deepEqual( Stem("matron"), "matron");});
test("matrons -> matron", function() {deepEqual( Stem("matrons"), "matron");});
test("matter -> matter", function() {deepEqual( Stem("matter"), "matter");});
test("matters -> matter", function() {deepEqual( Stem("matters"), "matter");});
test("matthew -> matthew", function() {deepEqual( Stem("matthew"), "matthew");});
test("mattock -> mattock", function() {deepEqual( Stem("mattock"), "mattock");});
test("mattress -> mattress", function() {deepEqual( Stem("mattress"), "mattress");});
test("mattresses -> mattress", function() {deepEqual( Stem("mattresses"), "mattress");});
test("mature -> matur", function() {deepEqual( Stem("mature"), "matur");});
test("maturity -> matur", function() {deepEqual( Stem("maturity"), "matur");});
test("maud -> maud", function() {deepEqual( Stem("maud"), "maud");});
test("maudlin -> maudlin", function() {deepEqual( Stem("maudlin"), "maudlin");});
test("maugre -> maugr", function() {deepEqual( Stem("maugre"), "maugr");});
test("maul -> maul", function() {deepEqual( Stem("maul"), "maul");});
test("maund -> maund", function() {deepEqual( Stem("maund"), "maund");});
test("mauri -> mauri", function() {deepEqual( Stem("mauri"), "mauri");});
test("mauritania -> mauritania", function() {deepEqual( Stem("mauritania"), "mauritania");});
test("mauvais -> mauvai", function() {deepEqual( Stem("mauvais"), "mauvai");});
test("mauvaise -> mauvais", function() {deepEqual( Stem("mauvaise"), "mauvais");});
test("maw -> maw", function() {deepEqual( Stem("maw"), "maw");});
test("mawkish -> mawkish", function() {deepEqual( Stem("mawkish"), "mawkish");});
test("maws -> maw", function() {deepEqual( Stem("maws"), "maw");});
test("max -> max", function() {deepEqual( Stem("max"), "max");});
test("maxim -> maxim", function() {deepEqual( Stem("maxim"), "maxim");});
test("may -> mai", function() {deepEqual( Stem("may"), "mai");});
test("mayday -> maydai", function() {deepEqual( Stem("mayday"), "maydai");});
test("mayence -> mayenc", function() {deepEqual( Stem("mayence"), "mayenc");});
test("mayest -> mayest", function() {deepEqual( Stem("mayest"), "mayest");});
test("mayfair -> mayfair", function() {deepEqual( Stem("mayfair"), "mayfair");});
test("mayn -> mayn", function() {deepEqual( Stem("mayn"), "mayn");});
test("mayor -> mayor", function() {deepEqual( Stem("mayor"), "mayor");});
test("maypole -> maypol", function() {deepEqual( Stem("maypole"), "maypol");});
test("mayst -> mayst", function() {deepEqual( Stem("mayst"), "mayst");});
test("maz -> maz", function() {deepEqual( Stem("maz"), "maz");});
test("maze -> maze", function() {deepEqual( Stem("maze"), "maze");});
test("mazed -> maze", function() {deepEqual( Stem("mazed"), "maze");});
test("mazes -> maze", function() {deepEqual( Stem("mazes"), "maze");});
test("mazzard -> mazzard", function() {deepEqual( Stem("mazzard"), "mazzard");});
test("mcmull -> mcmull", function() {deepEqual( Stem("mcmull"), "mcmull");});
test("mcnitre -> mcnitr", function() {deepEqual( Stem("mcnitre"), "mcnitr");});
test("mctavish -> mctavish", function() {deepEqual( Stem("mctavish"), "mctavish");});
test("me -> me", function() {deepEqual( Stem("me"), "me");});
test("meacock -> meacock", function() {deepEqual( Stem("meacock"), "meacock");});
test("mead -> mead", function() {deepEqual( Stem("mead"), "mead");});
test("meadow -> meadow", function() {deepEqual( Stem("meadow"), "meadow");});
test("meadows -> meadow", function() {deepEqual( Stem("meadows"), "meadow");});
test("meads -> mead", function() {deepEqual( Stem("meads"), "mead");});
test("meagre -> meagr", function() {deepEqual( Stem("meagre"), "meagr");});
test("meal -> meal", function() {deepEqual( Stem("meal"), "meal");});
test("meals -> meal", function() {deepEqual( Stem("meals"), "meal");});
test("mealy -> meali", function() {deepEqual( Stem("mealy"), "meali");});
test("mean -> mean", function() {deepEqual( Stem("mean"), "mean");});
test("meandering -> meander", function() {deepEqual( Stem("meandering"), "meander");});
test("meanders -> meander", function() {deepEqual( Stem("meanders"), "meander");});
test("meaner -> meaner", function() {deepEqual( Stem("meaner"), "meaner");});
test("meanest -> meanest", function() {deepEqual( Stem("meanest"), "meanest");});
test("meaneth -> meaneth", function() {deepEqual( Stem("meaneth"), "meaneth");});
test("meaning -> mean", function() {deepEqual( Stem("meaning"), "mean");});
test("meanings -> mean", function() {deepEqual( Stem("meanings"), "mean");});
test("meanly -> meanli", function() {deepEqual( Stem("meanly"), "meanli");});
test("meanness -> mean", function() {deepEqual( Stem("meanness"), "mean");});
test("meannesses -> mean", function() {deepEqual( Stem("meannesses"), "mean");});
test("means -> mean", function() {deepEqual( Stem("means"), "mean");});
test("meant -> meant", function() {deepEqual( Stem("meant"), "meant");});
test("meantime -> meantim", function() {deepEqual( Stem("meantime"), "meantim");});
test("meanwhile -> meanwhil", function() {deepEqual( Stem("meanwhile"), "meanwhil");});
test("measles -> measl", function() {deepEqual( Stem("measles"), "measl");});
test("measur -> measur", function() {deepEqual( Stem("measur"), "measur");});
test("measurable -> measur", function() {deepEqual( Stem("measurable"), "measur");});
test("measure -> measur", function() {deepEqual( Stem("measure"), "measur");});
test("measured -> measur", function() {deepEqual( Stem("measured"), "measur");});
test("measureless -> measureless", function() {deepEqual( Stem("measureless"), "measureless");});
test("measures -> measur", function() {deepEqual( Stem("measures"), "measur");});
test("measuring -> measur", function() {deepEqual( Stem("measuring"), "measur");});
test("meat -> meat", function() {deepEqual( Stem("meat"), "meat");});
test("meats -> meat", function() {deepEqual( Stem("meats"), "meat");});
test("mechanic -> mechan", function() {deepEqual( Stem("mechanic"), "mechan");});
test("mechanical -> mechan", function() {deepEqual( Stem("mechanical"), "mechan");});
test("mechanically -> mechan", function() {deepEqual( Stem("mechanically"), "mechan");});
test("mechanicals -> mechan", function() {deepEqual( Stem("mechanicals"), "mechan");});
test("mechanics -> mechan", function() {deepEqual( Stem("mechanics"), "mechan");});
test("mechante -> mechant", function() {deepEqual( Stem("mechante"), "mechant");});
test("med -> med", function() {deepEqual( Stem("med"), "med");});
test("medal -> medal", function() {deepEqual( Stem("medal"), "medal");});
test("medals -> medal", function() {deepEqual( Stem("medals"), "medal");});
test("meddle -> meddl", function() {deepEqual( Stem("meddle"), "meddl");});
test("meddled -> meddl", function() {deepEqual( Stem("meddled"), "meddl");});
test("meddler -> meddler", function() {deepEqual( Stem("meddler"), "meddler");});
test("meddling -> meddl", function() {deepEqual( Stem("meddling"), "meddl");});
test("mede -> mede", function() {deepEqual( Stem("mede"), "mede");});
test("medea -> medea", function() {deepEqual( Stem("medea"), "medea");});
test("media -> media", function() {deepEqual( Stem("media"), "media");});
test("mediation -> mediat", function() {deepEqual( Stem("mediation"), "mediat");});
test("mediators -> mediat", function() {deepEqual( Stem("mediators"), "mediat");});
test("mediatrix -> mediatrix", function() {deepEqual( Stem("mediatrix"), "mediatrix");});
test("medical -> medic", function() {deepEqual( Stem("medical"), "medic");});
test("medicament -> medica", function() {deepEqual( Stem("medicament"), "medica");});
test("medication -> medic", function() {deepEqual( Stem("medication"), "medic");});
test("medice -> medic", function() {deepEqual( Stem("medice"), "medic");});
test("medicinal -> medicin", function() {deepEqual( Stem("medicinal"), "medicin");});
test("medicine -> medicin", function() {deepEqual( Stem("medicine"), "medicin");});
test("medicines -> medicin", function() {deepEqual( Stem("medicines"), "medicin");});
test("mediocrity -> mediocr", function() {deepEqual( Stem("mediocrity"), "mediocr");});
test("meditate -> medit", function() {deepEqual( Stem("meditate"), "medit");});
test("meditated -> medit", function() {deepEqual( Stem("meditated"), "medit");});
test("meditates -> medit", function() {deepEqual( Stem("meditates"), "medit");});
test("meditating -> medit", function() {deepEqual( Stem("meditating"), "medit");});
test("meditation -> medit", function() {deepEqual( Stem("meditation"), "medit");});
test("meditations -> medit", function() {deepEqual( Stem("meditations"), "medit");});
test("mediterranean -> mediterranean", function() {deepEqual( Stem("mediterranean"), "mediterranean");});
test("mediterraneum -> mediterraneum", function() {deepEqual( Stem("mediterraneum"), "mediterraneum");});
test("medium -> medium", function() {deepEqual( Stem("medium"), "medium");});
test("medlar -> medlar", function() {deepEqual( Stem("medlar"), "medlar");});
test("medlars -> medlar", function() {deepEqual( Stem("medlars"), "medlar");});
test("medley -> medlei", function() {deepEqual( Stem("medley"), "medlei");});
test("medulla -> medulla", function() {deepEqual( Stem("medulla"), "medulla");});
test("medusa -> medusa", function() {deepEqual( Stem("medusa"), "medusa");});
test("meed -> meed", function() {deepEqual( Stem("meed"), "meed");});
test("meeds -> meed", function() {deepEqual( Stem("meeds"), "meed");});
test("meejor -> meejor", function() {deepEqual( Stem("meejor"), "meejor");});
test("meek -> meek", function() {deepEqual( Stem("meek"), "meek");});
test("meekest -> meekest", function() {deepEqual( Stem("meekest"), "meekest");});
test("meekly -> meekli", function() {deepEqual( Stem("meekly"), "meekli");});
test("meekness -> meek", function() {deepEqual( Stem("meekness"), "meek");});
test("meerschaum -> meerschaum", function() {deepEqual( Stem("meerschaum"), "meerschaum");});
test("mees -> mee", function() {deepEqual( Stem("mees"), "mee");});
test("meet -> meet", function() {deepEqual( Stem("meet"), "meet");});
test("meeter -> meeter", function() {deepEqual( Stem("meeter"), "meeter");});
test("meetest -> meetest", function() {deepEqual( Stem("meetest"), "meetest");});
test("meeting -> meet", function() {deepEqual( Stem("meeting"), "meet");});
test("meetings -> meet", function() {deepEqual( Stem("meetings"), "meet");});
test("meetly -> meetli", function() {deepEqual( Stem("meetly"), "meetli");});
test("meetness -> meet", function() {deepEqual( Stem("meetness"), "meet");});
test("meets -> meet", function() {deepEqual( Stem("meets"), "meet");});
test("meg -> meg", function() {deepEqual( Stem("meg"), "meg");});
test("mehercle -> mehercl", function() {deepEqual( Stem("mehercle"), "mehercl");});
test("meilleur -> meilleur", function() {deepEqual( Stem("meilleur"), "meilleur");});
test("mein -> mein", function() {deepEqual( Stem("mein"), "mein");});
test("meiny -> meini", function() {deepEqual( Stem("meiny"), "meini");});
test("meisen -> meisen", function() {deepEqual( Stem("meisen"), "meisen");});
test("mejor -> mejor", function() {deepEqual( Stem("mejor"), "mejor");});
test("melancholies -> melancholi", function() {deepEqual( Stem("melancholies"), "melancholi");});
test("melancholious -> melancholi", function() {deepEqual( Stem("melancholious"), "melancholi");});
test("melancholy -> melancholi", function() {deepEqual( Stem("melancholy"), "melancholi");});
test("melford -> melford", function() {deepEqual( Stem("melford"), "melford");});
test("melia -> melia", function() {deepEqual( Stem("melia"), "melia");});
test("meliboeus -> meliboeu", function() {deepEqual( Stem("meliboeus"), "meliboeu");});
test("mell -> mell", function() {deepEqual( Stem("mell"), "mell");});
test("mellifluous -> melliflu", function() {deepEqual( Stem("mellifluous"), "melliflu");});
test("mellow -> mellow", function() {deepEqual( Stem("mellow"), "mellow");});
test("mellowing -> mellow", function() {deepEqual( Stem("mellowing"), "mellow");});
test("melodies -> melodi", function() {deepEqual( Stem("melodies"), "melodi");});
test("melodious -> melodi", function() {deepEqual( Stem("melodious"), "melodi");});
test("melody -> melodi", function() {deepEqual( Stem("melody"), "melodi");});
test("melt -> melt", function() {deepEqual( Stem("melt"), "melt");});
test("melted -> melt", function() {deepEqual( Stem("melted"), "melt");});
test("melteth -> melteth", function() {deepEqual( Stem("melteth"), "melteth");});
test("melting -> melt", function() {deepEqual( Stem("melting"), "melt");});
test("melts -> melt", function() {deepEqual( Stem("melts"), "melt");});
test("melun -> melun", function() {deepEqual( Stem("melun"), "melun");});
test("member -> member", function() {deepEqual( Stem("member"), "member");});
test("members -> member", function() {deepEqual( Stem("members"), "member");});
test("memento -> memento", function() {deepEqual( Stem("memento"), "memento");});
test("mementoes -> memento", function() {deepEqual( Stem("mementoes"), "memento");});
test("memoir -> memoir", function() {deepEqual( Stem("memoir"), "memoir");});
test("memoirs -> memoir", function() {deepEqual( Stem("memoirs"), "memoir");});
test("memorable -> memor", function() {deepEqual( Stem("memorable"), "memor");});
test("memoranda -> memoranda", function() {deepEqual( Stem("memoranda"), "memoranda");});
test("memorandums -> memorandum", function() {deepEqual( Stem("memorandums"), "memorandum");});
test("memorial -> memori", function() {deepEqual( Stem("memorial"), "memori");});
test("memorials -> memori", function() {deepEqual( Stem("memorials"), "memori");});
test("memories -> memori", function() {deepEqual( Stem("memories"), "memori");});
test("memoriz -> memoriz", function() {deepEqual( Stem("memoriz"), "memoriz");});
test("memorize -> memor", function() {deepEqual( Stem("memorize"), "memor");});
test("memory -> memori", function() {deepEqual( Stem("memory"), "memori");});
test("memphis -> memphi", function() {deepEqual( Stem("memphis"), "memphi");});
test("men -> men", function() {deepEqual( Stem("men"), "men");});
test("menac -> menac", function() {deepEqual( Stem("menac"), "menac");});
test("menace -> menac", function() {deepEqual( Stem("menace"), "menac");});
test("menaced -> menac", function() {deepEqual( Stem("menaced"), "menac");});
test("menaces -> menac", function() {deepEqual( Stem("menaces"), "menac");});
test("menacing -> menac", function() {deepEqual( Stem("menacing"), "menac");});
test("menage -> menag", function() {deepEqual( Stem("menage"), "menag");});
test("menaphon -> menaphon", function() {deepEqual( Stem("menaphon"), "menaphon");});
test("menas -> mena", function() {deepEqual( Stem("menas"), "mena");});
test("mend -> mend", function() {deepEqual( Stem("mend"), "mend");});
test("mended -> mend", function() {deepEqual( Stem("mended"), "mend");});
test("mender -> mender", function() {deepEqual( Stem("mender"), "mender");});
test("mending -> mend", function() {deepEqual( Stem("mending"), "mend");});
test("mends -> mend", function() {deepEqual( Stem("mends"), "mend");});
test("menecrates -> menecr", function() {deepEqual( Stem("menecrates"), "menecr");});
test("menelaus -> menelau", function() {deepEqual( Stem("menelaus"), "menelau");});
test("menenius -> meneniu", function() {deepEqual( Stem("menenius"), "meneniu");});
test("menial -> menial", function() {deepEqual( Stem("menial"), "menial");});
test("mensem -> mensem", function() {deepEqual( Stem("mensem"), "mensem");});
test("mental -> mental", function() {deepEqual( Stem("mental"), "mental");});
test("menteith -> menteith", function() {deepEqual( Stem("menteith"), "menteith");});
test("mention -> mention", function() {deepEqual( Stem("mention"), "mention");});
test("mentioned -> mention", function() {deepEqual( Stem("mentioned"), "mention");});
test("mentioning -> mention", function() {deepEqual( Stem("mentioning"), "mention");});
test("mentions -> mention", function() {deepEqual( Stem("mentions"), "mention");});
test("mentis -> menti", function() {deepEqual( Stem("mentis"), "menti");});
test("menton -> menton", function() {deepEqual( Stem("menton"), "menton");});
test("mephostophilus -> mephostophilu", function() {deepEqual( Stem("mephostophilus"), "mephostophilu");});
test("mer -> mer", function() {deepEqual( Stem("mer"), "mer");});
test("mercatante -> mercatant", function() {deepEqual( Stem("mercatante"), "mercatant");});
test("mercatio -> mercatio", function() {deepEqual( Stem("mercatio"), "mercatio");});
test("mercenaries -> mercenari", function() {deepEqual( Stem("mercenaries"), "mercenari");});
test("mercenary -> mercenari", function() {deepEqual( Stem("mercenary"), "mercenari");});
test("mercer -> mercer", function() {deepEqual( Stem("mercer"), "mercer");});
test("merchandise -> merchandis", function() {deepEqual( Stem("merchandise"), "merchandis");});
test("merchandized -> merchand", function() {deepEqual( Stem("merchandized"), "merchand");});
test("merchant -> merchant", function() {deepEqual( Stem("merchant"), "merchant");});
test("merchants -> merchant", function() {deepEqual( Stem("merchants"), "merchant");});
test("mercies -> merci", function() {deepEqual( Stem("mercies"), "merci");});
test("merciful -> merci", function() {deepEqual( Stem("merciful"), "merci");});
test("mercifully -> mercifulli", function() {deepEqual( Stem("mercifully"), "mercifulli");});
test("merciless -> merciless", function() {deepEqual( Stem("merciless"), "merciless");});
test("mercurial -> mercuri", function() {deepEqual( Stem("mercurial"), "mercuri");});
test("mercuries -> mercuri", function() {deepEqual( Stem("mercuries"), "mercuri");});
test("mercury -> mercuri", function() {deepEqual( Stem("mercury"), "mercuri");});
test("mercutio -> mercutio", function() {deepEqual( Stem("mercutio"), "mercutio");});
test("mercy -> merci", function() {deepEqual( Stem("mercy"), "merci");});
test("mere -> mere", function() {deepEqual( Stem("mere"), "mere");});
test("mered -> mere", function() {deepEqual( Stem("mered"), "mere");});
test("merely -> mere", function() {deepEqual( Stem("merely"), "mere");});
test("merest -> merest", function() {deepEqual( Stem("merest"), "merest");});
test("meridian -> meridian", function() {deepEqual( Stem("meridian"), "meridian");});
test("merit -> merit", function() {deepEqual( Stem("merit"), "merit");});
test("merited -> merit", function() {deepEqual( Stem("merited"), "merit");});
test("meriting -> merit", function() {deepEqual( Stem("meriting"), "merit");});
test("meritorious -> meritori", function() {deepEqual( Stem("meritorious"), "meritori");});
test("merits -> merit", function() {deepEqual( Stem("merits"), "merit");});
test("merlin -> merlin", function() {deepEqual( Stem("merlin"), "merlin");});
test("mermaid -> mermaid", function() {deepEqual( Stem("mermaid"), "mermaid");});
test("mermaids -> mermaid", function() {deepEqual( Stem("mermaids"), "mermaid");});
test("merops -> merop", function() {deepEqual( Stem("merops"), "merop");});
test("merrier -> merrier", function() {deepEqual( Stem("merrier"), "merrier");});
test("merriest -> merriest", function() {deepEqual( Stem("merriest"), "merriest");});
test("merrily -> merrili", function() {deepEqual( Stem("merrily"), "merrili");});
test("merriman -> merriman", function() {deepEqual( Stem("merriman"), "merriman");});
test("merriment -> merriment", function() {deepEqual( Stem("merriment"), "merriment");});
test("merriments -> merriment", function() {deepEqual( Stem("merriments"), "merriment");});
test("merriness -> merri", function() {deepEqual( Stem("merriness"), "merri");});
test("merry -> merri", function() {deepEqual( Stem("merry"), "merri");});
test("merton -> merton", function() {deepEqual( Stem("merton"), "merton");});
test("mervailous -> mervail", function() {deepEqual( Stem("mervailous"), "mervail");});
test("mes -> me", function() {deepEqual( Stem("mes"), "me");});
test("mesalliance -> mesalli", function() {deepEqual( Stem("mesalliance"), "mesalli");});
test("mesdames -> mesdam", function() {deepEqual( Stem("mesdames"), "mesdam");});
test("mesdemoiselles -> mesdemoisel", function() {deepEqual( Stem("mesdemoiselles"), "mesdemoisel");});
test("mesh -> mesh", function() {deepEqual( Stem("mesh"), "mesh");});
test("meshes -> mesh", function() {deepEqual( Stem("meshes"), "mesh");});
test("mesmerism -> mesmer", function() {deepEqual( Stem("mesmerism"), "mesmer");});
test("mesopotamia -> mesopotamia", function() {deepEqual( Stem("mesopotamia"), "mesopotamia");});
test("mesrour -> mesrour", function() {deepEqual( Stem("mesrour"), "mesrour");});
test("mess -> mess", function() {deepEqual( Stem("mess"), "mess");});
test("message -> messag", function() {deepEqual( Stem("message"), "messag");});
test("messages -> messag", function() {deepEqual( Stem("messages"), "messag");});
test("messala -> messala", function() {deepEqual( Stem("messala"), "messala");});
test("messaline -> messalin", function() {deepEqual( Stem("messaline"), "messalin");});
test("messenger -> messeng", function() {deepEqual( Stem("messenger"), "messeng");});
test("messengers -> messeng", function() {deepEqual( Stem("messengers"), "messeng");});
test("messes -> mess", function() {deepEqual( Stem("messes"), "mess");});
test("messieurs -> messieur", function() {deepEqual( Stem("messieurs"), "messieur");});
test("messina -> messina", function() {deepEqual( Stem("messina"), "messina");});
test("messrs -> messr", function() {deepEqual( Stem("messrs"), "messr");});
test("met -> met", function() {deepEqual( Stem("met"), "met");});
test("metal -> metal", function() {deepEqual( Stem("metal"), "metal");});
test("metals -> metal", function() {deepEqual( Stem("metals"), "metal");});
test("metamorphis -> metamorphi", function() {deepEqual( Stem("metamorphis"), "metamorphi");});
test("metamorphoses -> metamorphos", function() {deepEqual( Stem("metamorphoses"), "metamorphos");});
test("metaphor -> metaphor", function() {deepEqual( Stem("metaphor"), "metaphor");});
test("metaphysical -> metaphys", function() {deepEqual( Stem("metaphysical"), "metaphys");});
test("metaphysics -> metaphys", function() {deepEqual( Stem("metaphysics"), "metaphys");});
test("mete -> mete", function() {deepEqual( Stem("mete"), "mete");});
test("metellus -> metellu", function() {deepEqual( Stem("metellus"), "metellu");});
test("meteor -> meteor", function() {deepEqual( Stem("meteor"), "meteor");});
test("meteors -> meteor", function() {deepEqual( Stem("meteors"), "meteor");});
test("meteyard -> meteyard", function() {deepEqual( Stem("meteyard"), "meteyard");});
test("metheglin -> metheglin", function() {deepEqual( Stem("metheglin"), "metheglin");});
test("metheglins -> metheglin", function() {deepEqual( Stem("metheglins"), "metheglin");});
test("methink -> methink", function() {deepEqual( Stem("methink"), "methink");});
test("methinks -> methink", function() {deepEqual( Stem("methinks"), "methink");});
test("method -> method", function() {deepEqual( Stem("method"), "method");});
test("methodist -> methodist", function() {deepEqual( Stem("methodist"), "methodist");});
test("methods -> method", function() {deepEqual( Stem("methods"), "method");});
test("methought -> methought", function() {deepEqual( Stem("methought"), "methought");});
test("methoughts -> methought", function() {deepEqual( Stem("methoughts"), "methought");});
test("methusalem -> methusalem", function() {deepEqual( Stem("methusalem"), "methusalem");});
test("methuselah -> methuselah", function() {deepEqual( Stem("methuselah"), "methuselah");});
test("metre -> metr", function() {deepEqual( Stem("metre"), "metr");});
test("metres -> metr", function() {deepEqual( Stem("metres"), "metr");});
test("metropolis -> metropoli", function() {deepEqual( Stem("metropolis"), "metropoli");});
test("mette -> mett", function() {deepEqual( Stem("mette"), "mett");});
test("metternich -> metternich", function() {deepEqual( Stem("metternich"), "metternich");});
test("mettle -> mettl", function() {deepEqual( Stem("mettle"), "mettl");});
test("mettled -> mettl", function() {deepEqual( Stem("mettled"), "mettl");});
test("meus -> meu", function() {deepEqual( Stem("meus"), "meu");});
test("mew -> mew", function() {deepEqual( Stem("mew"), "mew");});
test("mewed -> mew", function() {deepEqual( Stem("mewed"), "mew");});
test("mewling -> mewl", function() {deepEqual( Stem("mewling"), "mewl");});
test("mews -> mew", function() {deepEqual( Stem("mews"), "mew");});
test("mexico -> mexico", function() {deepEqual( Stem("mexico"), "mexico");});
test("mi -> mi", function() {deepEqual( Stem("mi"), "mi");});
test("mice -> mice", function() {deepEqual( Stem("mice"), "mice");});
test("michael -> michael", function() {deepEqual( Stem("michael"), "michael");});
test("michaelmas -> michaelma", function() {deepEqual( Stem("michaelmas"), "michaelma");});
test("micher -> micher", function() {deepEqual( Stem("micher"), "micher");});
test("miching -> mich", function() {deepEqual( Stem("miching"), "mich");});
test("mick -> mick", function() {deepEqual( Stem("mick"), "mick");});
test("mickle -> mickl", function() {deepEqual( Stem("mickle"), "mickl");});
test("microcosm -> microcosm", function() {deepEqual( Stem("microcosm"), "microcosm");});
test("mid -> mid", function() {deepEqual( Stem("mid"), "mid");});
test("midas -> mida", function() {deepEqual( Stem("midas"), "mida");});
test("middest -> middest", function() {deepEqual( Stem("middest"), "middest");});
test("middle -> middl", function() {deepEqual( Stem("middle"), "middl");});
test("middleham -> middleham", function() {deepEqual( Stem("middleham"), "middleham");});
test("middlesex -> middlesex", function() {deepEqual( Stem("middlesex"), "middlesex");});
test("middling -> middl", function() {deepEqual( Stem("middling"), "middl");});
test("midnight -> midnight", function() {deepEqual( Stem("midnight"), "midnight");});
test("midriff -> midriff", function() {deepEqual( Stem("midriff"), "midriff");});
test("midshipmen -> midshipmen", function() {deepEqual( Stem("midshipmen"), "midshipmen");});
test("midst -> midst", function() {deepEqual( Stem("midst"), "midst");});
test("midsummer -> midsumm", function() {deepEqual( Stem("midsummer"), "midsumm");});
test("midway -> midwai", function() {deepEqual( Stem("midway"), "midwai");});
test("midwife -> midwif", function() {deepEqual( Stem("midwife"), "midwif");});
test("midwives -> midwiv", function() {deepEqual( Stem("midwives"), "midwiv");});
test("mien -> mien", function() {deepEqual( Stem("mien"), "mien");});
test("mienne -> mienn", function() {deepEqual( Stem("mienne"), "mienn");});
test("mieux -> mieux", function() {deepEqual( Stem("mieux"), "mieux");});
test("might -> might", function() {deepEqual( Stem("might"), "might");});
test("mightful -> might", function() {deepEqual( Stem("mightful"), "might");});
test("mightier -> mightier", function() {deepEqual( Stem("mightier"), "mightier");});
test("mightiest -> mightiest", function() {deepEqual( Stem("mightiest"), "mightiest");});
test("mightily -> mightili", function() {deepEqual( Stem("mightily"), "mightili");});
test("mightiness -> mighti", function() {deepEqual( Stem("mightiness"), "mighti");});
test("mightn -> mightn", function() {deepEqual( Stem("mightn"), "mightn");});
test("mightst -> mightst", function() {deepEqual( Stem("mightst"), "mightst");});
test("mighty -> mighti", function() {deepEqual( Stem("mighty"), "mighti");});
test("migrate -> migrat", function() {deepEqual( Stem("migrate"), "migrat");});
test("miladi -> miladi", function() {deepEqual( Stem("miladi"), "miladi");});
test("milan -> milan", function() {deepEqual( Stem("milan"), "milan");});
test("milch -> milch", function() {deepEqual( Stem("milch"), "milch");});
test("mild -> mild", function() {deepEqual( Stem("mild"), "mild");});
test("milder -> milder", function() {deepEqual( Stem("milder"), "milder");});
test("mildest -> mildest", function() {deepEqual( Stem("mildest"), "mildest");});
test("mildew -> mildew", function() {deepEqual( Stem("mildew"), "mildew");});
test("mildews -> mildew", function() {deepEqual( Stem("mildews"), "mildew");});
test("mildly -> mildli", function() {deepEqual( Stem("mildly"), "mildli");});
test("mildness -> mild", function() {deepEqual( Stem("mildness"), "mild");});
test("mile -> mile", function() {deepEqual( Stem("mile"), "mile");});
test("miles -> mile", function() {deepEqual( Stem("miles"), "mile");});
test("milestones -> mileston", function() {deepEqual( Stem("milestones"), "mileston");});
test("milford -> milford", function() {deepEqual( Stem("milford"), "milford");});
test("militair -> militair", function() {deepEqual( Stem("militair"), "militair");});
test("militaire -> militair", function() {deepEqual( Stem("militaire"), "militair");});
test("militarist -> militarist", function() {deepEqual( Stem("militarist"), "militarist");});
test("military -> militari", function() {deepEqual( Stem("military"), "militari");});
test("militia -> militia", function() {deepEqual( Stem("militia"), "militia");});
test("milk -> milk", function() {deepEqual( Stem("milk"), "milk");});
test("milking -> milk", function() {deepEqual( Stem("milking"), "milk");});
test("milkmaid -> milkmaid", function() {deepEqual( Stem("milkmaid"), "milkmaid");});
test("milkman -> milkman", function() {deepEqual( Stem("milkman"), "milkman");});
test("milkmen -> milkmen", function() {deepEqual( Stem("milkmen"), "milkmen");});
test("milks -> milk", function() {deepEqual( Stem("milks"), "milk");});
test("milksop -> milksop", function() {deepEqual( Stem("milksop"), "milksop");});
test("milksops -> milksop", function() {deepEqual( Stem("milksops"), "milksop");});
test("milky -> milki", function() {deepEqual( Stem("milky"), "milki");});
test("mill -> mill", function() {deepEqual( Stem("mill"), "mill");});
test("mille -> mill", function() {deepEqual( Stem("mille"), "mill");});
test("miller -> miller", function() {deepEqual( Stem("miller"), "miller");});
test("milliner -> millin", function() {deepEqual( Stem("milliner"), "millin");});
test("milliners -> millin", function() {deepEqual( Stem("milliners"), "millin");});
test("millinery -> millineri", function() {deepEqual( Stem("millinery"), "millineri");});
test("million -> million", function() {deepEqual( Stem("million"), "million");});
test("millioned -> million", function() {deepEqual( Stem("millioned"), "million");});
test("millions -> million", function() {deepEqual( Stem("millions"), "million");});
test("mills -> mill", function() {deepEqual( Stem("mills"), "mill");});
test("millstones -> millston", function() {deepEqual( Stem("millstones"), "millston");});
test("milo -> milo", function() {deepEqual( Stem("milo"), "milo");});
test("milor -> milor", function() {deepEqual( Stem("milor"), "milor");});
test("mimes -> mime", function() {deepEqual( Stem("mimes"), "mime");});
test("mimic -> mimic", function() {deepEqual( Stem("mimic"), "mimic");});
test("mimicked -> mimick", function() {deepEqual( Stem("mimicked"), "mimick");});
test("mimicking -> mimick", function() {deepEqual( Stem("mimicking"), "mimick");});
test("mimicry -> mimicri", function() {deepEqual( Stem("mimicry"), "mimicri");});
test("minc -> minc", function() {deepEqual( Stem("minc"), "minc");});
test("mince -> minc", function() {deepEqual( Stem("mince"), "minc");});
test("minces -> minc", function() {deepEqual( Stem("minces"), "minc");});
test("mincing -> minc", function() {deepEqual( Stem("mincing"), "minc");});
test("mind -> mind", function() {deepEqual( Stem("mind"), "mind");});
test("minded -> mind", function() {deepEqual( Stem("minded"), "mind");});
test("minden -> minden", function() {deepEqual( Stem("minden"), "minden");});
test("minding -> mind", function() {deepEqual( Stem("minding"), "mind");});
test("mindless -> mindless", function() {deepEqual( Stem("mindless"), "mindless");});
test("minds -> mind", function() {deepEqual( Stem("minds"), "mind");});
test("mine -> mine", function() {deepEqual( Stem("mine"), "mine");});
test("mineral -> miner", function() {deepEqual( Stem("mineral"), "miner");});
test("minerals -> miner", function() {deepEqual( Stem("minerals"), "miner");});
test("minerva -> minerva", function() {deepEqual( Stem("minerva"), "minerva");});
test("mines -> mine", function() {deepEqual( Stem("mines"), "mine");});
test("mingle -> mingl", function() {deepEqual( Stem("mingle"), "mingl");});
test("mingled -> mingl", function() {deepEqual( Stem("mingled"), "mingl");});
test("mingling -> mingl", function() {deepEqual( Stem("mingling"), "mingl");});
test("miniature -> miniatur", function() {deepEqual( Stem("miniature"), "miniatur");});
test("miniatures -> miniatur", function() {deepEqual( Stem("miniatures"), "miniatur");});
test("minikin -> minikin", function() {deepEqual( Stem("minikin"), "minikin");});
test("minim -> minim", function() {deepEqual( Stem("minim"), "minim");});
test("minime -> minim", function() {deepEqual( Stem("minime"), "minim");});
test("minimo -> minimo", function() {deepEqual( Stem("minimo"), "minimo");});
test("minimus -> minimu", function() {deepEqual( Stem("minimus"), "minimu");});
test("mining -> mine", function() {deepEqual( Stem("mining"), "mine");});
test("minion -> minion", function() {deepEqual( Stem("minion"), "minion");});
test("minions -> minion", function() {deepEqual( Stem("minions"), "minion");});
test("minist -> minist", function() {deepEqual( Stem("minist"), "minist");});
test("minister -> minist", function() {deepEqual( Stem("minister"), "minist");});
test("ministered -> minist", function() {deepEqual( Stem("ministered"), "minist");});
test("ministering -> minist", function() {deepEqual( Stem("ministering"), "minist");});
test("ministers -> minist", function() {deepEqual( Stem("ministers"), "minist");});
test("ministration -> ministr", function() {deepEqual( Stem("ministration"), "ministr");});
test("ministre -> ministr", function() {deepEqual( Stem("ministre"), "ministr");});
test("ministry -> ministri", function() {deepEqual( Stem("ministry"), "ministri");});
test("minnow -> minnow", function() {deepEqual( Stem("minnow"), "minnow");});
test("minnows -> minnow", function() {deepEqual( Stem("minnows"), "minnow");});
test("minois -> minoi", function() {deepEqual( Stem("minois"), "minoi");});
test("minola -> minola", function() {deepEqual( Stem("minola"), "minola");});
test("minor -> minor", function() {deepEqual( Stem("minor"), "minor");});
test("minority -> minor", function() {deepEqual( Stem("minority"), "minor");});
test("minos -> mino", function() {deepEqual( Stem("minos"), "mino");});
test("minotaurs -> minotaur", function() {deepEqual( Stem("minotaurs"), "minotaur");});
test("minsthrel -> minsthrel", function() {deepEqual( Stem("minsthrel"), "minsthrel");});
test("minstrel -> minstrel", function() {deepEqual( Stem("minstrel"), "minstrel");});
test("minstrels -> minstrel", function() {deepEqual( Stem("minstrels"), "minstrel");});
test("minstrelsy -> minstrelsi", function() {deepEqual( Stem("minstrelsy"), "minstrelsi");});
test("mint -> mint", function() {deepEqual( Stem("mint"), "mint");});
test("minto -> minto", function() {deepEqual( Stem("minto"), "minto");});
test("mints -> mint", function() {deepEqual( Stem("mints"), "mint");});
test("minuet -> minuet", function() {deepEqual( Stem("minuet"), "minuet");});
test("minuets -> minuet", function() {deepEqual( Stem("minuets"), "minuet");});
test("minute -> minut", function() {deepEqual( Stem("minute"), "minut");});
test("minutely -> minut", function() {deepEqual( Stem("minutely"), "minut");});
test("minuteness -> minut", function() {deepEqual( Stem("minuteness"), "minut");});
test("minutes -> minut", function() {deepEqual( Stem("minutes"), "minut");});
test("minx -> minx", function() {deepEqual( Stem("minx"), "minx");});
test("mio -> mio", function() {deepEqual( Stem("mio"), "mio");});
test("mir -> mir", function() {deepEqual( Stem("mir"), "mir");});
test("mirable -> mirabl", function() {deepEqual( Stem("mirable"), "mirabl");});
test("miracle -> miracl", function() {deepEqual( Stem("miracle"), "miracl");});
test("miracles -> miracl", function() {deepEqual( Stem("miracles"), "miracl");});
test("miraculous -> miracul", function() {deepEqual( Stem("miraculous"), "miracul");});
test("miranda -> miranda", function() {deepEqual( Stem("miranda"), "miranda");});
test("mire -> mire", function() {deepEqual( Stem("mire"), "mire");});
test("mirror -> mirror", function() {deepEqual( Stem("mirror"), "mirror");});
test("mirrors -> mirror", function() {deepEqual( Stem("mirrors"), "mirror");});
test("mirth -> mirth", function() {deepEqual( Stem("mirth"), "mirth");});
test("mirthful -> mirth", function() {deepEqual( Stem("mirthful"), "mirth");});
test("miry -> miri", function() {deepEqual( Stem("miry"), "miri");});
test("mis -> mi", function() {deepEqual( Stem("mis"), "mi");});
test("misadventur -> misadventur", function() {deepEqual( Stem("misadventur"), "misadventur");});
test("misadventure -> misadventur", function() {deepEqual( Stem("misadventure"), "misadventur");});
test("misalliance -> misalli", function() {deepEqual( Stem("misalliance"), "misalli");});
test("misanthrope -> misanthrop", function() {deepEqual( Stem("misanthrope"), "misanthrop");});
test("misanthropes -> misanthrop", function() {deepEqual( Stem("misanthropes"), "misanthrop");});
test("misanthropist -> misanthropist", function() {deepEqual( Stem("misanthropist"), "misanthropist");});
test("misanthropos -> misanthropo", function() {deepEqual( Stem("misanthropos"), "misanthropo");});
test("misapplied -> misappli", function() {deepEqual( Stem("misapplied"), "misappli");});
test("misbecame -> misbecam", function() {deepEqual( Stem("misbecame"), "misbecam");});
test("misbecom -> misbecom", function() {deepEqual( Stem("misbecom"), "misbecom");});
test("misbecome -> misbecom", function() {deepEqual( Stem("misbecome"), "misbecom");});
test("misbegot -> misbegot", function() {deepEqual( Stem("misbegot"), "misbegot");});
test("misbegotten -> misbegotten", function() {deepEqual( Stem("misbegotten"), "misbegotten");});
test("misbeliever -> misbeliev", function() {deepEqual( Stem("misbeliever"), "misbeliev");});
test("misbelieving -> misbeliev", function() {deepEqual( Stem("misbelieving"), "misbeliev");});
test("misbhav -> misbhav", function() {deepEqual( Stem("misbhav"), "misbhav");});
test("miscall -> miscal", function() {deepEqual( Stem("miscall"), "miscal");});
test("miscalled -> miscal", function() {deepEqual( Stem("miscalled"), "miscal");});
test("miscarried -> miscarri", function() {deepEqual( Stem("miscarried"), "miscarri");});
test("miscarries -> miscarri", function() {deepEqual( Stem("miscarries"), "miscarri");});
test("miscarry -> miscarri", function() {deepEqual( Stem("miscarry"), "miscarri");});
test("miscarrying -> miscarri", function() {deepEqual( Stem("miscarrying"), "miscarri");});
test("mischance -> mischanc", function() {deepEqual( Stem("mischance"), "mischanc");});
test("mischances -> mischanc", function() {deepEqual( Stem("mischances"), "mischanc");});
test("mischief -> mischief", function() {deepEqual( Stem("mischief"), "mischief");});
test("mischiefs -> mischief", function() {deepEqual( Stem("mischiefs"), "mischief");});
test("mischievous -> mischiev", function() {deepEqual( Stem("mischievous"), "mischiev");});
test("mischievously -> mischiev", function() {deepEqual( Stem("mischievously"), "mischiev");});
test("misconceived -> misconceiv", function() {deepEqual( Stem("misconceived"), "misconceiv");});
test("misconst -> misconst", function() {deepEqual( Stem("misconst"), "misconst");});
test("misconster -> misconst", function() {deepEqual( Stem("misconster"), "misconst");});
test("misconstruction -> misconstruct", function() {deepEqual( Stem("misconstruction"), "misconstruct");});
test("misconstrued -> misconstru", function() {deepEqual( Stem("misconstrued"), "misconstru");});
test("misconstrues -> misconstru", function() {deepEqual( Stem("misconstrues"), "misconstru");});
test("miscreant -> miscreant", function() {deepEqual( Stem("miscreant"), "miscreant");});
test("miscreate -> miscreat", function() {deepEqual( Stem("miscreate"), "miscreat");});
test("misdeed -> misde", function() {deepEqual( Stem("misdeed"), "misde");});
test("misdeeds -> misde", function() {deepEqual( Stem("misdeeds"), "misde");});
test("misdemean -> misdemean", function() {deepEqual( Stem("misdemean"), "misdemean");});
test("misdemeanours -> misdemeanour", function() {deepEqual( Stem("misdemeanours"), "misdemeanour");});
test("misdoings -> misdo", function() {deepEqual( Stem("misdoings"), "misdo");});
test("misdoubt -> misdoubt", function() {deepEqual( Stem("misdoubt"), "misdoubt");});
test("misdoubteth -> misdoubteth", function() {deepEqual( Stem("misdoubteth"), "misdoubteth");});
test("misdoubts -> misdoubt", function() {deepEqual( Stem("misdoubts"), "misdoubt");});
test("misenum -> misenum", function() {deepEqual( Stem("misenum"), "misenum");});
test("miser -> miser", function() {deepEqual( Stem("miser"), "miser");});
test("miserable -> miser", function() {deepEqual( Stem("miserable"), "miser");});
test("miserably -> miser", function() {deepEqual( Stem("miserably"), "miser");});
test("misericorde -> misericord", function() {deepEqual( Stem("misericorde"), "misericord");});
test("miseries -> miseri", function() {deepEqual( Stem("miseries"), "miseri");});
test("misers -> miser", function() {deepEqual( Stem("misers"), "miser");});
test("misery -> miseri", function() {deepEqual( Stem("misery"), "miseri");});
test("misfortune -> misfortun", function() {deepEqual( Stem("misfortune"), "misfortun");});
test("misfortunes -> misfortun", function() {deepEqual( Stem("misfortunes"), "misfortun");});
test("misgave -> misgav", function() {deepEqual( Stem("misgave"), "misgav");});
test("misgive -> misgiv", function() {deepEqual( Stem("misgive"), "misgiv");});
test("misgives -> misgiv", function() {deepEqual( Stem("misgives"), "misgiv");});
test("misgiving -> misgiv", function() {deepEqual( Stem("misgiving"), "misgiv");});
test("misgivings -> misgiv", function() {deepEqual( Stem("misgivings"), "misgiv");});
test("misgoverned -> misgovern", function() {deepEqual( Stem("misgoverned"), "misgovern");});
test("misgovernment -> misgovern", function() {deepEqual( Stem("misgovernment"), "misgovern");});
test("misgraffed -> misgraf", function() {deepEqual( Stem("misgraffed"), "misgraf");});
test("misguide -> misguid", function() {deepEqual( Stem("misguide"), "misguid");});
test("mishap -> mishap", function() {deepEqual( Stem("mishap"), "mishap");});
test("mishaps -> mishap", function() {deepEqual( Stem("mishaps"), "mishap");});
test("misheard -> misheard", function() {deepEqual( Stem("misheard"), "misheard");});
test("misinterpret -> misinterpret", function() {deepEqual( Stem("misinterpret"), "misinterpret");});
test("mislead -> mislead", function() {deepEqual( Stem("mislead"), "mislead");});
test("misleader -> mislead", function() {deepEqual( Stem("misleader"), "mislead");});
test("misleaders -> mislead", function() {deepEqual( Stem("misleaders"), "mislead");});
test("misleading -> mislead", function() {deepEqual( Stem("misleading"), "mislead");});
test("misled -> misl", function() {deepEqual( Stem("misled"), "misl");});
test("mislike -> mislik", function() {deepEqual( Stem("mislike"), "mislik");});
test("mismanaged -> mismanag", function() {deepEqual( Stem("mismanaged"), "mismanag");});
test("misord -> misord", function() {deepEqual( Stem("misord"), "misord");});
test("misplac -> misplac", function() {deepEqual( Stem("misplac"), "misplac");});
test("misplaced -> misplac", function() {deepEqual( Stem("misplaced"), "misplac");});
test("misplaces -> misplac", function() {deepEqual( Stem("misplaces"), "misplac");});
test("mispris -> mispri", function() {deepEqual( Stem("mispris"), "mispri");});
test("misprised -> mispris", function() {deepEqual( Stem("misprised"), "mispris");});
test("misprision -> mispris", function() {deepEqual( Stem("misprision"), "mispris");});
test("misprizing -> mispriz", function() {deepEqual( Stem("misprizing"), "mispriz");});
test("misproud -> misproud", function() {deepEqual( Stem("misproud"), "misproud");});
test("misquote -> misquot", function() {deepEqual( Stem("misquote"), "misquot");});
test("misreport -> misreport", function() {deepEqual( Stem("misreport"), "misreport");});
test("miss -> miss", function() {deepEqual( Stem("miss"), "miss");});
test("missed -> miss", function() {deepEqual( Stem("missed"), "miss");});
test("misses -> miss", function() {deepEqual( Stem("misses"), "miss");});
test("misshap -> misshap", function() {deepEqual( Stem("misshap"), "misshap");});
test("misshapen -> misshapen", function() {deepEqual( Stem("misshapen"), "misshapen");});
test("missheathed -> missheath", function() {deepEqual( Stem("missheathed"), "missheath");});
test("missing -> miss", function() {deepEqual( Stem("missing"), "miss");});
test("missingly -> missingli", function() {deepEqual( Stem("missingly"), "missingli");});
test("mission -> mission", function() {deepEqual( Stem("mission"), "mission");});
test("missionaries -> missionari", function() {deepEqual( Stem("missionaries"), "missionari");});
test("missionary -> missionari", function() {deepEqual( Stem("missionary"), "missionari");});
test("missions -> mission", function() {deepEqual( Stem("missions"), "mission");});
test("missis -> missi", function() {deepEqual( Stem("missis"), "missi");});
test("missive -> missiv", function() {deepEqual( Stem("missive"), "missiv");});
test("missives -> missiv", function() {deepEqual( Stem("missives"), "missiv");});
test("misspoke -> misspok", function() {deepEqual( Stem("misspoke"), "misspok");});
test("missus -> missu", function() {deepEqual( Stem("missus"), "missu");});
test("mist -> mist", function() {deepEqual( Stem("mist"), "mist");});
test("mista -> mista", function() {deepEqual( Stem("mista"), "mista");});
test("mistak -> mistak", function() {deepEqual( Stem("mistak"), "mistak");});
test("mistake -> mistak", function() {deepEqual( Stem("mistake"), "mistak");});
test("mistaken -> mistaken", function() {deepEqual( Stem("mistaken"), "mistaken");});
test("mistakes -> mistak", function() {deepEqual( Stem("mistakes"), "mistak");});
test("mistaketh -> mistaketh", function() {deepEqual( Stem("mistaketh"), "mistaketh");});
test("mistaking -> mistak", function() {deepEqual( Stem("mistaking"), "mistak");});
test("mistakings -> mistak", function() {deepEqual( Stem("mistakings"), "mistak");});
test("mistemp -> mistemp", function() {deepEqual( Stem("mistemp"), "mistemp");});
test("mistempered -> mistemp", function() {deepEqual( Stem("mistempered"), "mistemp");});
test("misterm -> misterm", function() {deepEqual( Stem("misterm"), "misterm");});
test("mistful -> mist", function() {deepEqual( Stem("mistful"), "mist");});
test("misthink -> misthink", function() {deepEqual( Stem("misthink"), "misthink");});
test("misthought -> misthought", function() {deepEqual( Stem("misthought"), "misthought");});
test("mistletoe -> mistleto", function() {deepEqual( Stem("mistletoe"), "mistleto");});
test("mistook -> mistook", function() {deepEqual( Stem("mistook"), "mistook");});
test("mistreadings -> mistread", function() {deepEqual( Stem("mistreadings"), "mistread");});
test("mistress -> mistress", function() {deepEqual( Stem("mistress"), "mistress");});
test("mistresses -> mistress", function() {deepEqual( Stem("mistresses"), "mistress");});
test("mistresss -> mistresss", function() {deepEqual( Stem("mistresss"), "mistresss");});
test("mistriship -> mistriship", function() {deepEqual( Stem("mistriship"), "mistriship");});
test("mistrust -> mistrust", function() {deepEqual( Stem("mistrust"), "mistrust");});
test("mistrusted -> mistrust", function() {deepEqual( Stem("mistrusted"), "mistrust");});
test("mistrustful -> mistrust", function() {deepEqual( Stem("mistrustful"), "mistrust");});
test("mistrusting -> mistrust", function() {deepEqual( Stem("mistrusting"), "mistrust");});
test("mistrusts -> mistrust", function() {deepEqual( Stem("mistrusts"), "mistrust");});
test("mists -> mist", function() {deepEqual( Stem("mists"), "mist");});
test("misty -> misti", function() {deepEqual( Stem("misty"), "misti");});
test("misus -> misu", function() {deepEqual( Stem("misus"), "misu");});
test("misuse -> misus", function() {deepEqual( Stem("misuse"), "misus");});
test("misused -> misus", function() {deepEqual( Stem("misused"), "misus");});
test("misuses -> misus", function() {deepEqual( Stem("misuses"), "misus");});
test("mite -> mite", function() {deepEqual( Stem("mite"), "mite");});
test("mites -> mite", function() {deepEqual( Stem("mites"), "mite");});
test("mithridates -> mithrid", function() {deepEqual( Stem("mithridates"), "mithrid");});
test("mitigate -> mitig", function() {deepEqual( Stem("mitigate"), "mitig");});
test("mitigated -> mitig", function() {deepEqual( Stem("mitigated"), "mitig");});
test("mitigation -> mitig", function() {deepEqual( Stem("mitigation"), "mitig");});
test("mix -> mix", function() {deepEqual( Stem("mix"), "mix");});
test("mixed -> mix", function() {deepEqual( Stem("mixed"), "mix");});
test("mixing -> mix", function() {deepEqual( Stem("mixing"), "mix");});
test("mixture -> mixtur", function() {deepEqual( Stem("mixture"), "mixtur");});
test("mixtures -> mixtur", function() {deepEqual( Stem("mixtures"), "mixtur");});
test("mm -> mm", function() {deepEqual( Stem("mm"), "mm");});
test("mnd -> mnd", function() {deepEqual( Stem("mnd"), "mnd");});
test("moan -> moan", function() {deepEqual( Stem("moan"), "moan");});
test("moaned -> moan", function() {deepEqual( Stem("moaned"), "moan");});
test("moaning -> moan", function() {deepEqual( Stem("moaning"), "moan");});
test("moans -> moan", function() {deepEqual( Stem("moans"), "moan");});
test("moat -> moat", function() {deepEqual( Stem("moat"), "moat");});
test("moated -> moat", function() {deepEqual( Stem("moated"), "moat");});
test("moats -> moat", function() {deepEqual( Stem("moats"), "moat");});
test("mobled -> mobl", function() {deepEqual( Stem("mobled"), "mobl");});
test("mock -> mock", function() {deepEqual( Stem("mock"), "mock");});
test("mockable -> mockabl", function() {deepEqual( Stem("mockable"), "mockabl");});
test("mocker -> mocker", function() {deepEqual( Stem("mocker"), "mocker");});
test("mockeries -> mockeri", function() {deepEqual( Stem("mockeries"), "mockeri");});
test("mockers -> mocker", function() {deepEqual( Stem("mockers"), "mocker");});
test("mockery -> mockeri", function() {deepEqual( Stem("mockery"), "mockeri");});
test("mocking -> mock", function() {deepEqual( Stem("mocking"), "mock");});
test("mocks -> mock", function() {deepEqual( Stem("mocks"), "mock");});
test("mockvater -> mockvat", function() {deepEqual( Stem("mockvater"), "mockvat");});
test("mockwater -> mockwat", function() {deepEqual( Stem("mockwater"), "mockwat");});
test("mode -> mode", function() {deepEqual( Stem("mode"), "mode");});
test("model -> model", function() {deepEqual( Stem("model"), "model");});
test("models -> model", function() {deepEqual( Stem("models"), "model");});
test("modena -> modena", function() {deepEqual( Stem("modena"), "modena");});
test("moderate -> moder", function() {deepEqual( Stem("moderate"), "moder");});
test("moderately -> moder", function() {deepEqual( Stem("moderately"), "moder");});
test("moderation -> moder", function() {deepEqual( Stem("moderation"), "moder");});
test("modern -> modern", function() {deepEqual( Stem("modern"), "modern");});
test("modes -> mode", function() {deepEqual( Stem("modes"), "mode");});
test("modest -> modest", function() {deepEqual( Stem("modest"), "modest");});
test("modesties -> modesti", function() {deepEqual( Stem("modesties"), "modesti");});
test("modestly -> modestli", function() {deepEqual( Stem("modestly"), "modestli");});
test("modesty -> modesti", function() {deepEqual( Stem("modesty"), "modesti");});
test("modicums -> modicum", function() {deepEqual( Stem("modicums"), "modicum");});
test("modified -> modifi", function() {deepEqual( Stem("modified"), "modifi");});
test("modo -> modo", function() {deepEqual( Stem("modo"), "modo");});
test("module -> modul", function() {deepEqual( Stem("module"), "modul");});
test("moe -> moe", function() {deepEqual( Stem("moe"), "moe");});
test("mogul -> mogul", function() {deepEqual( Stem("mogul"), "mogul");});
test("moi -> moi", function() {deepEqual( Stem("moi"), "moi");});
test("moiety -> moieti", function() {deepEqual( Stem("moiety"), "moieti");});
test("moin -> moin", function() {deepEqual( Stem("moin"), "moin");});
test("moira -> moira", function() {deepEqual( Stem("moira"), "moira");});
test("moist -> moist", function() {deepEqual( Stem("moist"), "moist");});
test("moisten -> moisten", function() {deepEqual( Stem("moisten"), "moisten");});
test("moisture -> moistur", function() {deepEqual( Stem("moisture"), "moistur");});
test("molasses -> molass", function() {deepEqual( Stem("molasses"), "molass");});
test("moldwarp -> moldwarp", function() {deepEqual( Stem("moldwarp"), "moldwarp");});
test("mole -> mole", function() {deepEqual( Stem("mole"), "mole");});
test("molehill -> molehil", function() {deepEqual( Stem("molehill"), "molehil");});
test("moles -> mole", function() {deepEqual( Stem("moles"), "mole");});
test("molest -> molest", function() {deepEqual( Stem("molest"), "molest");});
test("molestation -> molest", function() {deepEqual( Stem("molestation"), "molest");});
test("mollification -> mollif", function() {deepEqual( Stem("mollification"), "mollif");});
test("mollified -> mollifi", function() {deepEqual( Stem("mollified"), "mollifi");});
test("mollify -> mollifi", function() {deepEqual( Stem("mollify"), "mollifi");});
test("mollifying -> mollifi", function() {deepEqual( Stem("mollifying"), "mollifi");});
test("mollis -> molli", function() {deepEqual( Stem("mollis"), "molli");});
test("molloy -> molloi", function() {deepEqual( Stem("molloy"), "molloi");});
test("molloys -> molloi", function() {deepEqual( Stem("molloys"), "molloi");});
test("molly -> molli", function() {deepEqual( Stem("molly"), "molli");});
test("molten -> molten", function() {deepEqual( Stem("molten"), "molten");});
test("molto -> molto", function() {deepEqual( Stem("molto"), "molto");});
test("molyneux -> molyneux", function() {deepEqual( Stem("molyneux"), "molyneux");});
test("mome -> mome", function() {deepEqual( Stem("mome"), "mome");});
test("moment -> moment", function() {deepEqual( Stem("moment"), "moment");});
test("momentarily -> momentarili", function() {deepEqual( Stem("momentarily"), "momentarili");});
test("momentary -> momentari", function() {deepEqual( Stem("momentary"), "momentari");});
test("momentous -> moment", function() {deepEqual( Stem("momentous"), "moment");});
test("moments -> moment", function() {deepEqual( Stem("moments"), "moment");});
test("moming -> mome", function() {deepEqual( Stem("moming"), "mome");});
test("mon -> mon", function() {deepEqual( Stem("mon"), "mon");});
test("monachum -> monachum", function() {deepEqual( Stem("monachum"), "monachum");});
test("monarch -> monarch", function() {deepEqual( Stem("monarch"), "monarch");});
test("monarchies -> monarchi", function() {deepEqual( Stem("monarchies"), "monarchi");});
test("monarchize -> monarch", function() {deepEqual( Stem("monarchize"), "monarch");});
test("monarcho -> monarcho", function() {deepEqual( Stem("monarcho"), "monarcho");});
test("monarchs -> monarch", function() {deepEqual( Stem("monarchs"), "monarch");});
test("monarchy -> monarchi", function() {deepEqual( Stem("monarchy"), "monarchi");});
test("monast -> monast", function() {deepEqual( Stem("monast"), "monast");});
test("monastery -> monasteri", function() {deepEqual( Stem("monastery"), "monasteri");});
test("monastic -> monast", function() {deepEqual( Stem("monastic"), "monast");});
test("monblaisir -> monblaisir", function() {deepEqual( Stem("monblaisir"), "monblaisir");});
test("monday -> mondai", function() {deepEqual( Stem("monday"), "mondai");});
test("monde -> mond", function() {deepEqual( Stem("monde"), "mond");});
test("money -> monei", function() {deepEqual( Stem("money"), "monei");});
test("moneys -> monei", function() {deepEqual( Stem("moneys"), "monei");});
test("mong -> mong", function() {deepEqual( Stem("mong"), "mong");});
test("monger -> monger", function() {deepEqual( Stem("monger"), "monger");});
test("mongers -> monger", function() {deepEqual( Stem("mongers"), "monger");});
test("monging -> mong", function() {deepEqual( Stem("monging"), "mong");});
test("mongrel -> mongrel", function() {deepEqual( Stem("mongrel"), "mongrel");});
test("mongrels -> mongrel", function() {deepEqual( Stem("mongrels"), "mongrel");});
test("mongst -> mongst", function() {deepEqual( Stem("mongst"), "mongst");});
test("monies -> moni", function() {deepEqual( Stem("monies"), "moni");});
test("monk -> monk", function() {deepEqual( Stem("monk"), "monk");});
test("monkey -> monkei", function() {deepEqual( Stem("monkey"), "monkei");});
test("monkeys -> monkei", function() {deepEqual( Stem("monkeys"), "monkei");});
test("monks -> monk", function() {deepEqual( Stem("monks"), "monk");});
test("monmouth -> monmouth", function() {deepEqual( Stem("monmouth"), "monmouth");});
test("monopolising -> monopolis", function() {deepEqual( Stem("monopolising"), "monopolis");});
test("monopoly -> monopoli", function() {deepEqual( Stem("monopoly"), "monopoli");});
test("monotony -> monotoni", function() {deepEqual( Stem("monotony"), "monotoni");});
test("monplaisir -> monplaisir", function() {deepEqual( Stem("monplaisir"), "monplaisir");});
test("mons -> mon", function() {deepEqual( Stem("mons"), "mon");});
test("monseigneur -> monseigneur", function() {deepEqual( Stem("monseigneur"), "monseigneur");});
test("monsieur -> monsieur", function() {deepEqual( Stem("monsieur"), "monsieur");});
test("monsieurs -> monsieur", function() {deepEqual( Stem("monsieurs"), "monsieur");});
test("monsignori -> monsignori", function() {deepEqual( Stem("monsignori"), "monsignori");});
test("monster -> monster", function() {deepEqual( Stem("monster"), "monster");});
test("monsters -> monster", function() {deepEqual( Stem("monsters"), "monster");});
test("monstre -> monstr", function() {deepEqual( Stem("monstre"), "monstr");});
test("monstrous -> monstrou", function() {deepEqual( Stem("monstrous"), "monstrou");});
test("monstrously -> monstrous", function() {deepEqual( Stem("monstrously"), "monstrous");});
test("monstrousness -> monstrous", function() {deepEqual( Stem("monstrousness"), "monstrous");});
test("monstruosity -> monstruos", function() {deepEqual( Stem("monstruosity"), "monstruos");});
test("montacute -> montacut", function() {deepEqual( Stem("montacute"), "montacut");});
test("montage -> montag", function() {deepEqual( Stem("montage"), "montag");});
test("montague -> montagu", function() {deepEqual( Stem("montague"), "montagu");});
test("montagues -> montagu", function() {deepEqual( Stem("montagues"), "montagu");});
test("montano -> montano", function() {deepEqual( Stem("montano"), "montano");});
test("montant -> montant", function() {deepEqual( Stem("montant"), "montant");});
test("montcalm -> montcalm", function() {deepEqual( Stem("montcalm"), "montcalm");});
test("montees -> monte", function() {deepEqual( Stem("montees"), "monte");});
test("montessu -> montessu", function() {deepEqual( Stem("montessu"), "montessu");});
test("montez -> montez", function() {deepEqual( Stem("montez"), "montez");});
test("montferrat -> montferrat", function() {deepEqual( Stem("montferrat"), "montferrat");});
test("montgomery -> montgomeri", function() {deepEqual( Stem("montgomery"), "montgomeri");});
test("month -> month", function() {deepEqual( Stem("month"), "month");});
test("monthly -> monthli", function() {deepEqual( Stem("monthly"), "monthli");});
test("months -> month", function() {deepEqual( Stem("months"), "month");});
test("montjoy -> montjoi", function() {deepEqual( Stem("montjoy"), "montjoi");});
test("montmirail -> montmirail", function() {deepEqual( Stem("montmirail"), "montmirail");});
test("montmorenci -> montmor", function() {deepEqual( Stem("montmorenci"), "montmor");});
test("montmorency -> montmor", function() {deepEqual( Stem("montmorency"), "montmor");});
test("monument -> monument", function() {deepEqual( Stem("monument"), "monument");});
test("monumental -> monument", function() {deepEqual( Stem("monumental"), "monument");});
test("monuments -> monument", function() {deepEqual( Stem("monuments"), "monument");});
test("mood -> mood", function() {deepEqual( Stem("mood"), "mood");});
test("moodily -> moodili", function() {deepEqual( Stem("moodily"), "moodili");});
test("moods -> mood", function() {deepEqual( Stem("moods"), "mood");});
test("moody -> moodi", function() {deepEqual( Stem("moody"), "moodi");});
test("moon -> moon", function() {deepEqual( Stem("moon"), "moon");});
test("moonbeams -> moonbeam", function() {deepEqual( Stem("moonbeams"), "moonbeam");});
test("moonish -> moonish", function() {deepEqual( Stem("moonish"), "moonish");});
test("moonlight -> moonlight", function() {deepEqual( Stem("moonlight"), "moonlight");});
test("moons -> moon", function() {deepEqual( Stem("moons"), "moon");});
test("moonshine -> moonshin", function() {deepEqual( Stem("moonshine"), "moonshin");});
test("moonshines -> moonshin", function() {deepEqual( Stem("moonshines"), "moonshin");});
test("moor -> moor", function() {deepEqual( Stem("moor"), "moor");});
test("moore -> moor", function() {deepEqual( Stem("moore"), "moor");});
test("moorfields -> moorfield", function() {deepEqual( Stem("moorfields"), "moorfield");});
test("moorish -> moorish", function() {deepEqual( Stem("moorish"), "moorish");});
test("moors -> moor", function() {deepEqual( Stem("moors"), "moor");});
test("moorship -> moorship", function() {deepEqual( Stem("moorship"), "moorship");});
test("mop -> mop", function() {deepEqual( Stem("mop"), "mop");});
test("mope -> mope", function() {deepEqual( Stem("mope"), "mope");});
test("moping -> mope", function() {deepEqual( Stem("moping"), "mope");});
test("mopping -> mop", function() {deepEqual( Stem("mopping"), "mop");});
test("mopsa -> mopsa", function() {deepEqual( Stem("mopsa"), "mopsa");});
test("moral -> moral", function() {deepEqual( Stem("moral"), "moral");});
test("moraler -> moral", function() {deepEqual( Stem("moraler"), "moral");});
test("moralising -> moralis", function() {deepEqual( Stem("moralising"), "moralis");});
test("moralist -> moralist", function() {deepEqual( Stem("moralist"), "moralist");});
test("moralists -> moralist", function() {deepEqual( Stem("moralists"), "moralist");});
test("morality -> moral", function() {deepEqual( Stem("morality"), "moral");});
test("moralize -> moral", function() {deepEqual( Stem("moralize"), "moral");});
test("moralizing -> moral", function() {deepEqual( Stem("moralizing"), "moral");});
test("morally -> moral", function() {deepEqual( Stem("morally"), "moral");});
test("morals -> moral", function() {deepEqual( Stem("morals"), "moral");});
test("mordake -> mordak", function() {deepEqual( Stem("mordake"), "mordak");});
test("more -> more", function() {deepEqual( Stem("more"), "more");});
test("moreen -> moreen", function() {deepEqual( Stem("moreen"), "moreen");});
test("moreover -> moreov", function() {deepEqual( Stem("moreover"), "moreov");});
test("mores -> more", function() {deepEqual( Stem("mores"), "more");});
test("morgan -> morgan", function() {deepEqual( Stem("morgan"), "morgan");});
test("mori -> mori", function() {deepEqual( Stem("mori"), "mori");});
test("morisco -> morisco", function() {deepEqual( Stem("morisco"), "morisco");});
test("morn -> morn", function() {deepEqual( Stem("morn"), "morn");});
test("morning -> morn", function() {deepEqual( Stem("morning"), "morn");});
test("mornings -> morn", function() {deepEqual( Stem("mornings"), "morn");});
test("morocco -> morocco", function() {deepEqual( Stem("morocco"), "morocco");});
test("morose -> moros", function() {deepEqual( Stem("morose"), "moros");});
test("morris -> morri", function() {deepEqual( Stem("morris"), "morri");});
test("morrow -> morrow", function() {deepEqual( Stem("morrow"), "morrow");});
test("morrows -> morrow", function() {deepEqual( Stem("morrows"), "morrow");});
test("morsel -> morsel", function() {deepEqual( Stem("morsel"), "morsel");});
test("morsels -> morsel", function() {deepEqual( Stem("morsels"), "morsel");});
test("mort -> mort", function() {deepEqual( Stem("mort"), "mort");});
test("mortal -> mortal", function() {deepEqual( Stem("mortal"), "mortal");});
test("mortality -> mortal", function() {deepEqual( Stem("mortality"), "mortal");});
test("mortally -> mortal", function() {deepEqual( Stem("mortally"), "mortal");});
test("mortals -> mortal", function() {deepEqual( Stem("mortals"), "mortal");});
test("mortar -> mortar", function() {deepEqual( Stem("mortar"), "mortar");});
test("mortgage -> mortgag", function() {deepEqual( Stem("mortgage"), "mortgag");});
test("mortgaged -> mortgag", function() {deepEqual( Stem("mortgaged"), "mortgag");});
test("mortgaging -> mortgag", function() {deepEqual( Stem("mortgaging"), "mortgag");});
test("mortial -> mortial", function() {deepEqual( Stem("mortial"), "mortial");});
test("mortification -> mortif", function() {deepEqual( Stem("mortification"), "mortif");});
test("mortified -> mortifi", function() {deepEqual( Stem("mortified"), "mortifi");});
test("mortifying -> mortifi", function() {deepEqual( Stem("mortifying"), "mortifi");});
test("mortimer -> mortim", function() {deepEqual( Stem("mortimer"), "mortim");});
test("mortimers -> mortim", function() {deepEqual( Stem("mortimers"), "mortim");});
test("mortis -> morti", function() {deepEqual( Stem("mortis"), "morti");});
test("mortise -> mortis", function() {deepEqual( Stem("mortise"), "mortis");});
test("morton -> morton", function() {deepEqual( Stem("morton"), "morton");});
test("mortuary -> mortuari", function() {deepEqual( Stem("mortuary"), "mortuari");});
test("moscow -> moscow", function() {deepEqual( Stem("moscow"), "moscow");});
test("mose -> mose", function() {deepEqual( Stem("mose"), "mose");});
test("moses -> mose", function() {deepEqual( Stem("moses"), "mose");});
test("mosques -> mosqu", function() {deepEqual( Stem("mosques"), "mosqu");});
test("moss -> moss", function() {deepEqual( Stem("moss"), "moss");});
test("mosses -> moss", function() {deepEqual( Stem("mosses"), "moss");});
test("mossgrown -> mossgrown", function() {deepEqual( Stem("mossgrown"), "mossgrown");});
test("most -> most", function() {deepEqual( Stem("most"), "most");});
test("mostly -> mostli", function() {deepEqual( Stem("mostly"), "mostli");});
test("mote -> mote", function() {deepEqual( Stem("mote"), "mote");});
test("moth -> moth", function() {deepEqual( Stem("moth"), "moth");});
test("mother -> mother", function() {deepEqual( Stem("mother"), "mother");});
test("motherly -> motherli", function() {deepEqual( Stem("motherly"), "motherli");});
test("mothers -> mother", function() {deepEqual( Stem("mothers"), "mother");});
test("moths -> moth", function() {deepEqual( Stem("moths"), "moth");});
test("motion -> motion", function() {deepEqual( Stem("motion"), "motion");});
test("motionless -> motionless", function() {deepEqual( Stem("motionless"), "motionless");});
test("motions -> motion", function() {deepEqual( Stem("motions"), "motion");});
test("motive -> motiv", function() {deepEqual( Stem("motive"), "motiv");});
test("motives -> motiv", function() {deepEqual( Stem("motives"), "motiv");});
test("motley -> motlei", function() {deepEqual( Stem("motley"), "motlei");});
test("mots -> mot", function() {deepEqual( Stem("mots"), "mot");});
test("mottled -> mottl", function() {deepEqual( Stem("mottled"), "mottl");});
test("motto -> motto", function() {deepEqual( Stem("motto"), "motto");});
test("mottoes -> motto", function() {deepEqual( Stem("mottoes"), "motto");});
test("mouchoirs -> mouchoir", function() {deepEqual( Stem("mouchoirs"), "mouchoir");});
test("mought -> mought", function() {deepEqual( Stem("mought"), "mought");});
test("mould -> mould", function() {deepEqual( Stem("mould"), "mould");});
test("moulded -> mould", function() {deepEqual( Stem("moulded"), "mould");});
test("mouldeth -> mouldeth", function() {deepEqual( Stem("mouldeth"), "mouldeth");});
test("moulds -> mould", function() {deepEqual( Stem("moulds"), "mould");});
test("mouldy -> mouldi", function() {deepEqual( Stem("mouldy"), "mouldi");});
test("moult -> moult", function() {deepEqual( Stem("moult"), "moult");});
test("moulten -> moulten", function() {deepEqual( Stem("moulten"), "moulten");});
test("mounch -> mounch", function() {deepEqual( Stem("mounch"), "mounch");});
test("mounseur -> mounseur", function() {deepEqual( Stem("mounseur"), "mounseur");});
test("mounsieur -> mounsieur", function() {deepEqual( Stem("mounsieur"), "mounsieur");});
test("mount -> mount", function() {deepEqual( Stem("mount"), "mount");});
test("mountain -> mountain", function() {deepEqual( Stem("mountain"), "mountain");});
test("mountaineer -> mountain", function() {deepEqual( Stem("mountaineer"), "mountain");});
test("mountaineers -> mountain", function() {deepEqual( Stem("mountaineers"), "mountain");});
test("mountainous -> mountain", function() {deepEqual( Stem("mountainous"), "mountain");});
test("mountains -> mountain", function() {deepEqual( Stem("mountains"), "mountain");});
test("mountant -> mountant", function() {deepEqual( Stem("mountant"), "mountant");});
test("mountanto -> mountanto", function() {deepEqual( Stem("mountanto"), "mountanto");});
test("mountebank -> mountebank", function() {deepEqual( Stem("mountebank"), "mountebank");});
test("mountebanks -> mountebank", function() {deepEqual( Stem("mountebanks"), "mountebank");});
test("mounted -> mount", function() {deepEqual( Stem("mounted"), "mount");});
test("mounteth -> mounteth", function() {deepEqual( Stem("mounteth"), "mounteth");});
test("mounting -> mount", function() {deepEqual( Stem("mounting"), "mount");});
test("mounts -> mount", function() {deepEqual( Stem("mounts"), "mount");});
test("mourn -> mourn", function() {deepEqual( Stem("mourn"), "mourn");});
test("mourned -> mourn", function() {deepEqual( Stem("mourned"), "mourn");});
test("mourner -> mourner", function() {deepEqual( Stem("mourner"), "mourner");});
test("mourners -> mourner", function() {deepEqual( Stem("mourners"), "mourner");});
test("mournful -> mourn", function() {deepEqual( Stem("mournful"), "mourn");});
test("mournfully -> mournfulli", function() {deepEqual( Stem("mournfully"), "mournfulli");});
test("mourning -> mourn", function() {deepEqual( Stem("mourning"), "mourn");});
test("mourningly -> mourningli", function() {deepEqual( Stem("mourningly"), "mourningli");});
test("mournings -> mourn", function() {deepEqual( Stem("mournings"), "mourn");});
test("mourns -> mourn", function() {deepEqual( Stem("mourns"), "mourn");});
test("mous -> mou", function() {deepEqual( Stem("mous"), "mou");});
test("mouse -> mous", function() {deepEqual( Stem("mouse"), "mous");});
test("mousetrap -> mousetrap", function() {deepEqual( Stem("mousetrap"), "mousetrap");});
test("mousing -> mous", function() {deepEqual( Stem("mousing"), "mous");});
test("mousquetaires -> mousquetair", function() {deepEqual( Stem("mousquetaires"), "mousquetair");});
test("moustache -> moustach", function() {deepEqual( Stem("moustache"), "moustach");});
test("moustached -> moustach", function() {deepEqual( Stem("moustached"), "moustach");});
test("moustaches -> moustach", function() {deepEqual( Stem("moustaches"), "moustach");});
test("mouth -> mouth", function() {deepEqual( Stem("mouth"), "mouth");});
test("mouthed -> mouth", function() {deepEqual( Stem("mouthed"), "mouth");});
test("mouthfuls -> mouth", function() {deepEqual( Stem("mouthfuls"), "mouth");});
test("mouths -> mouth", function() {deepEqual( Stem("mouths"), "mouth");});
test("mouton -> mouton", function() {deepEqual( Stem("mouton"), "mouton");});
test("moutongonavvy -> moutongonavvi", function() {deepEqual( Stem("moutongonavvy"), "moutongonavvi");});
test("mov -> mov", function() {deepEqual( Stem("mov"), "mov");});
test("movables -> movabl", function() {deepEqual( Stem("movables"), "movabl");});
test("move -> move", function() {deepEqual( Stem("move"), "move");});
test("moveable -> moveabl", function() {deepEqual( Stem("moveable"), "moveabl");});
test("moveables -> moveabl", function() {deepEqual( Stem("moveables"), "moveabl");});
test("moved -> move", function() {deepEqual( Stem("moved"), "move");});
test("movement -> movement", function() {deepEqual( Stem("movement"), "movement");});
test("movements -> movement", function() {deepEqual( Stem("movements"), "movement");});
test("mover -> mover", function() {deepEqual( Stem("mover"), "mover");});
test("movers -> mover", function() {deepEqual( Stem("movers"), "mover");});
test("moves -> move", function() {deepEqual( Stem("moves"), "move");});
test("moveth -> moveth", function() {deepEqual( Stem("moveth"), "moveth");});
test("moving -> move", function() {deepEqual( Stem("moving"), "move");});
test("movingly -> movingli", function() {deepEqual( Stem("movingly"), "movingli");});
test("movousus -> movousu", function() {deepEqual( Stem("movousus"), "movousu");});
test("mow -> mow", function() {deepEqual( Stem("mow"), "mow");});
test("mowbray -> mowbrai", function() {deepEqual( Stem("mowbray"), "mowbrai");});
test("mower -> mower", function() {deepEqual( Stem("mower"), "mower");});
test("mowing -> mow", function() {deepEqual( Stem("mowing"), "mow");});
test("mows -> mow", function() {deepEqual( Stem("mows"), "mow");});
test("moy -> moi", function() {deepEqual( Stem("moy"), "moi");});
test("moys -> moi", function() {deepEqual( Stem("moys"), "moi");});
test("moyses -> moys", function() {deepEqual( Stem("moyses"), "moys");});
test("mozart -> mozart", function() {deepEqual( Stem("mozart"), "mozart");});
test("mr -> mr", function() {deepEqual( Stem("mr"), "mr");});
test("mrs -> mr", function() {deepEqual( Stem("mrs"), "mr");});
test("much -> much", function() {deepEqual( Stem("much"), "much");});
test("muck -> muck", function() {deepEqual( Stem("muck"), "muck");});
test("mud -> mud", function() {deepEqual( Stem("mud"), "mud");});
test("mudbury -> mudburi", function() {deepEqual( Stem("mudbury"), "mudburi");});
test("mudded -> mud", function() {deepEqual( Stem("mudded"), "mud");});
test("muddied -> muddi", function() {deepEqual( Stem("muddied"), "muddi");});
test("muddled -> muddl", function() {deepEqual( Stem("muddled"), "muddl");});
test("muddy -> muddi", function() {deepEqual( Stem("muddy"), "muddi");});
test("muff -> muff", function() {deepEqual( Stem("muff"), "muff");});
test("muffin -> muffin", function() {deepEqual( Stem("muffin"), "muffin");});
test("muffins -> muffin", function() {deepEqual( Stem("muffins"), "muffin");});
test("muffl -> muffl", function() {deepEqual( Stem("muffl"), "muffl");});
test("muffle -> muffl", function() {deepEqual( Stem("muffle"), "muffl");});
test("muffled -> muffl", function() {deepEqual( Stem("muffled"), "muffl");});
test("muffler -> muffler", function() {deepEqual( Stem("muffler"), "muffler");});
test("muffling -> muffl", function() {deepEqual( Stem("muffling"), "muffl");});
test("mug -> mug", function() {deepEqual( Stem("mug"), "mug");});
test("mugger -> mugger", function() {deepEqual( Stem("mugger"), "mugger");});
test("mugs -> mug", function() {deepEqual( Stem("mugs"), "mug");});
test("mulatto -> mulatto", function() {deepEqual( Stem("mulatto"), "mulatto");});
test("mulberries -> mulberri", function() {deepEqual( Stem("mulberries"), "mulberri");});
test("mulberry -> mulberri", function() {deepEqual( Stem("mulberry"), "mulberri");});
test("mule -> mule", function() {deepEqual( Stem("mule"), "mule");});
test("mules -> mule", function() {deepEqual( Stem("mules"), "mule");});
test("muleteers -> mulet", function() {deepEqual( Stem("muleteers"), "mulet");});
test("mulier -> mulier", function() {deepEqual( Stem("mulier"), "mulier");});
test("mulieres -> mulier", function() {deepEqual( Stem("mulieres"), "mulier");});
test("muliteus -> muliteu", function() {deepEqual( Stem("muliteus"), "muliteu");});
test("mull -> mull", function() {deepEqual( Stem("mull"), "mull");});
test("mulligatawney -> mulligatawnei", function() {deepEqual( Stem("mulligatawney"), "mulligatawnei");});
test("mulls -> mull", function() {deepEqual( Stem("mulls"), "mull");});
test("mulmutius -> mulmutiu", function() {deepEqual( Stem("mulmutius"), "mulmutiu");});
test("multifarious -> multifari", function() {deepEqual( Stem("multifarious"), "multifari");});
test("multiplicity -> multipl", function() {deepEqual( Stem("multiplicity"), "multipl");});
test("multiplied -> multipli", function() {deepEqual( Stem("multiplied"), "multipli");});
test("multiplies -> multipli", function() {deepEqual( Stem("multiplies"), "multipli");});
test("multiply -> multipli", function() {deepEqual( Stem("multiply"), "multipli");});
test("multiplying -> multipli", function() {deepEqual( Stem("multiplying"), "multipli");});
test("multipotent -> multipot", function() {deepEqual( Stem("multipotent"), "multipot");});
test("multitude -> multitud", function() {deepEqual( Stem("multitude"), "multitud");});
test("multitudes -> multitud", function() {deepEqual( Stem("multitudes"), "multitud");});
test("multitudinous -> multitudin", function() {deepEqual( Stem("multitudinous"), "multitudin");});
test("mum -> mum", function() {deepEqual( Stem("mum"), "mum");});
test("mumble -> mumbl", function() {deepEqual( Stem("mumble"), "mumbl");});
test("mumbled -> mumbl", function() {deepEqual( Stem("mumbled"), "mumbl");});
test("mumbling -> mumbl", function() {deepEqual( Stem("mumbling"), "mumbl");});
test("mummers -> mummer", function() {deepEqual( Stem("mummers"), "mummer");});
test("mummy -> mummi", function() {deepEqual( Stem("mummy"), "mummi");});
test("mun -> mun", function() {deepEqual( Stem("mun"), "mun");});
test("munch -> munch", function() {deepEqual( Stem("munch"), "munch");});
test("munched -> munch", function() {deepEqual( Stem("munched"), "munch");});
test("munching -> munch", function() {deepEqual( Stem("munching"), "munch");});
test("mungo -> mungo", function() {deepEqual( Stem("mungo"), "mungo");});
test("munich -> munich", function() {deepEqual( Stem("munich"), "munich");});
test("muniments -> muniment", function() {deepEqual( Stem("muniments"), "muniment");});
test("munition -> munit", function() {deepEqual( Stem("munition"), "munit");});
test("munoz -> munoz", function() {deepEqual( Stem("munoz"), "munoz");});
test("murat -> murat", function() {deepEqual( Stem("murat"), "murat");});
test("murd -> murd", function() {deepEqual( Stem("murd"), "murd");});
test("murder -> murder", function() {deepEqual( Stem("murder"), "murder");});
test("murdered -> murder", function() {deepEqual( Stem("murdered"), "murder");});
test("murderer -> murder", function() {deepEqual( Stem("murderer"), "murder");});
test("murderers -> murder", function() {deepEqual( Stem("murderers"), "murder");});
test("murderess -> murderess", function() {deepEqual( Stem("murderess"), "murderess");});
test("murdering -> murder", function() {deepEqual( Stem("murdering"), "murder");});
test("murderous -> murder", function() {deepEqual( Stem("murderous"), "murder");});
test("murders -> murder", function() {deepEqual( Stem("murders"), "murder");});
test("mure -> mure", function() {deepEqual( Stem("mure"), "mure");});
test("muri -> muri", function() {deepEqual( Stem("muri"), "muri");});
test("murk -> murk", function() {deepEqual( Stem("murk"), "murk");});
test("murkiest -> murkiest", function() {deepEqual( Stem("murkiest"), "murkiest");});
test("murky -> murki", function() {deepEqual( Stem("murky"), "murki");});
test("murmur -> murmur", function() {deepEqual( Stem("murmur"), "murmur");});
test("murmurers -> murmur", function() {deepEqual( Stem("murmurers"), "murmur");});
test("murmuring -> murmur", function() {deepEqual( Stem("murmuring"), "murmur");});
test("murrain -> murrain", function() {deepEqual( Stem("murrain"), "murrain");});
test("murray -> murrai", function() {deepEqual( Stem("murray"), "murrai");});
test("murrion -> murrion", function() {deepEqual( Stem("murrion"), "murrion");});
test("murther -> murther", function() {deepEqual( Stem("murther"), "murther");});
test("murtherer -> murther", function() {deepEqual( Stem("murtherer"), "murther");});
test("murtherers -> murther", function() {deepEqual( Stem("murtherers"), "murther");});
test("murthering -> murther", function() {deepEqual( Stem("murthering"), "murther");});
test("murtherous -> murther", function() {deepEqual( Stem("murtherous"), "murther");});
test("murthers -> murther", function() {deepEqual( Stem("murthers"), "murther");});
test("muryan -> muryan", function() {deepEqual( Stem("muryan"), "muryan");});
test("mus -> mu", function() {deepEqual( Stem("mus"), "mu");});
test("muscadel -> muscadel", function() {deepEqual( Stem("muscadel"), "muscadel");});
test("muscle -> muscl", function() {deepEqual( Stem("muscle"), "muscl");});
test("muscovites -> muscovit", function() {deepEqual( Stem("muscovites"), "muscovit");});
test("muscovits -> muscovit", function() {deepEqual( Stem("muscovits"), "muscovit");});
test("muscovy -> muscovi", function() {deepEqual( Stem("muscovy"), "muscovi");});
test("muse -> muse", function() {deepEqual( Stem("muse"), "muse");});
test("mused -> muse", function() {deepEqual( Stem("mused"), "muse");});
test("muses -> muse", function() {deepEqual( Stem("muses"), "muse");});
test("museum -> museum", function() {deepEqual( Stem("museum"), "museum");});
test("mush -> mush", function() {deepEqual( Stem("mush"), "mush");});
test("mushroom -> mushroom", function() {deepEqual( Stem("mushroom"), "mushroom");});
test("mushrooms -> mushroom", function() {deepEqual( Stem("mushrooms"), "mushroom");});
test("music -> music", function() {deepEqual( Stem("music"), "music");});
test("musical -> music", function() {deepEqual( Stem("musical"), "music");});
test("musicale -> musical", function() {deepEqual( Stem("musicale"), "musical");});
test("musician -> musician", function() {deepEqual( Stem("musician"), "musician");});
test("musicians -> musician", function() {deepEqual( Stem("musicians"), "musician");});
test("musics -> music", function() {deepEqual( Stem("musics"), "music");});
test("musing -> muse", function() {deepEqual( Stem("musing"), "muse");});
test("musings -> muse", function() {deepEqual( Stem("musings"), "muse");});
test("musk -> musk", function() {deepEqual( Stem("musk"), "musk");});
test("musket -> musket", function() {deepEqual( Stem("musket"), "musket");});
test("muskets -> musket", function() {deepEqual( Stem("muskets"), "musket");});
test("muskos -> musko", function() {deepEqual( Stem("muskos"), "musko");});
test("muslin -> muslin", function() {deepEqual( Stem("muslin"), "muslin");});
test("muslins -> muslin", function() {deepEqual( Stem("muslins"), "muslin");});
test("musqueteers -> musquet", function() {deepEqual( Stem("musqueteers"), "musquet");});
test("musquito -> musquito", function() {deepEqual( Stem("musquito"), "musquito");});
test("muss -> muss", function() {deepEqual( Stem("muss"), "muss");});
test("mussel -> mussel", function() {deepEqual( Stem("mussel"), "mussel");});
test("mussels -> mussel", function() {deepEqual( Stem("mussels"), "mussel");});
test("must -> must", function() {deepEqual( Stem("must"), "must");});
test("mustachio -> mustachio", function() {deepEqual( Stem("mustachio"), "mustachio");});
test("mustachios -> mustachio", function() {deepEqual( Stem("mustachios"), "mustachio");});
test("mustard -> mustard", function() {deepEqual( Stem("mustard"), "mustard");});
test("mustardseed -> mustardse", function() {deepEqual( Stem("mustardseed"), "mustardse");});
test("muster -> muster", function() {deepEqual( Stem("muster"), "muster");});
test("mustered -> muster", function() {deepEqual( Stem("mustered"), "muster");});
test("mustering -> muster", function() {deepEqual( Stem("mustering"), "muster");});
test("musters -> muster", function() {deepEqual( Stem("musters"), "muster");});
test("mustn -> mustn", function() {deepEqual( Stem("mustn"), "mustn");});
test("musty -> musti", function() {deepEqual( Stem("musty"), "musti");});
test("muswell -> muswel", function() {deepEqual( Stem("muswell"), "muswel");});
test("mutability -> mutabl", function() {deepEqual( Stem("mutability"), "mutabl");});
test("mutable -> mutabl", function() {deepEqual( Stem("mutable"), "mutabl");});
test("mutation -> mutat", function() {deepEqual( Stem("mutation"), "mutat");});
test("mutations -> mutat", function() {deepEqual( Stem("mutations"), "mutat");});
test("mutato -> mutato", function() {deepEqual( Stem("mutato"), "mutato");});
test("mute -> mute", function() {deepEqual( Stem("mute"), "mute");});
test("mutely -> mute", function() {deepEqual( Stem("mutely"), "mute");});
test("muteness -> mute", function() {deepEqual( Stem("muteness"), "mute");});
test("mutes -> mute", function() {deepEqual( Stem("mutes"), "mute");});
test("mutest -> mutest", function() {deepEqual( Stem("mutest"), "mutest");});
test("mutine -> mutin", function() {deepEqual( Stem("mutine"), "mutin");});
test("mutineer -> mutin", function() {deepEqual( Stem("mutineer"), "mutin");});
test("mutineers -> mutin", function() {deepEqual( Stem("mutineers"), "mutin");});
test("mutines -> mutin", function() {deepEqual( Stem("mutines"), "mutin");});
test("mutinies -> mutini", function() {deepEqual( Stem("mutinies"), "mutini");});
test("mutinous -> mutin", function() {deepEqual( Stem("mutinous"), "mutin");});
test("mutiny -> mutini", function() {deepEqual( Stem("mutiny"), "mutini");});
test("mutius -> mutiu", function() {deepEqual( Stem("mutius"), "mutiu");});
test("mutter -> mutter", function() {deepEqual( Stem("mutter"), "mutter");});
test("muttered -> mutter", function() {deepEqual( Stem("muttered"), "mutter");});
test("mutton -> mutton", function() {deepEqual( Stem("mutton"), "mutton");});
test("muttons -> mutton", function() {deepEqual( Stem("muttons"), "mutton");});
test("mutual -> mutual", function() {deepEqual( Stem("mutual"), "mutual");});
test("mutualities -> mutual", function() {deepEqual( Stem("mutualities"), "mutual");});
test("mutually -> mutual", function() {deepEqual( Stem("mutually"), "mutual");});
test("muzzl -> muzzl", function() {deepEqual( Stem("muzzl"), "muzzl");});
test("muzzle -> muzzl", function() {deepEqual( Stem("muzzle"), "muzzl");});
test("muzzled -> muzzl", function() {deepEqual( Stem("muzzled"), "muzzl");});
test("mv -> mv", function() {deepEqual( Stem("mv"), "mv");});
test("mww -> mww", function() {deepEqual( Stem("mww"), "mww");});
test("my -> my", function() {deepEqual( Stem("my"), "my");});
test("mynheers -> mynheer", function() {deepEqual( Stem("mynheers"), "mynheer");});
test("myriads -> myriad", function() {deepEqual( Stem("myriads"), "myriad");});
test("myrmidon -> myrmidon", function() {deepEqual( Stem("myrmidon"), "myrmidon");});
test("myrmidons -> myrmidon", function() {deepEqual( Stem("myrmidons"), "myrmidon");});
test("myrtle -> myrtl", function() {deepEqual( Stem("myrtle"), "myrtl");});
test("myself -> myself", function() {deepEqual( Stem("myself"), "myself");});
test("myst -> myst", function() {deepEqual( Stem("myst"), "myst");});
test("mysteries -> mysteri", function() {deepEqual( Stem("mysteries"), "mysteri");});
test("mysterious -> mysteri", function() {deepEqual( Stem("mysterious"), "mysteri");});
test("mystery -> mysteri", function() {deepEqual( Stem("mystery"), "mysteri");});
test("mystic -> mystic", function() {deepEqual( Stem("mystic"), "mystic");});
test("mystical -> mystic", function() {deepEqual( Stem("mystical"), "mystic");});
test("mystify -> mystifi", function() {deepEqual( Stem("mystify"), "mystifi");});
test("myth -> myth", function() {deepEqual( Stem("myth"), "myth");});
test("n -> n", function() {deepEqual( Stem("n"), "n");});
test("nabbed -> nab", function() {deepEqual( Stem("nabbed"), "nab");});
test("nabob -> nabob", function() {deepEqual( Stem("nabob"), "nabob");});
test("nabobs -> nabob", function() {deepEqual( Stem("nabobs"), "nabob");});
test("nach -> nach", function() {deepEqual( Stem("nach"), "nach");});
test("nag -> nag", function() {deepEqual( Stem("nag"), "nag");});
test("nage -> nage", function() {deepEqual( Stem("nage"), "nage");});
test("nags -> nag", function() {deepEqual( Stem("nags"), "nag");});
test("naiads -> naiad", function() {deepEqual( Stem("naiads"), "naiad");});
test("nail -> nail", function() {deepEqual( Stem("nail"), "nail");});
test("nailed -> nail", function() {deepEqual( Stem("nailed"), "nail");});
test("nails -> nail", function() {deepEqual( Stem("nails"), "nail");});
test("naive -> naiv", function() {deepEqual( Stem("naive"), "naiv");});
test("naivete -> naivet", function() {deepEqual( Stem("naivete"), "naivet");});
test("nak -> nak", function() {deepEqual( Stem("nak"), "nak");});
test("naked -> nake", function() {deepEqual( Stem("naked"), "nake");});
test("nakedness -> naked", function() {deepEqual( Stem("nakedness"), "naked");});
test("nal -> nal", function() {deepEqual( Stem("nal"), "nal");});
test("nam -> nam", function() {deepEqual( Stem("nam"), "nam");});
test("namby -> nambi", function() {deepEqual( Stem("namby"), "nambi");});
test("name -> name", function() {deepEqual( Stem("name"), "name");});
test("named -> name", function() {deepEqual( Stem("named"), "name");});
test("nameless -> nameless", function() {deepEqual( Stem("nameless"), "nameless");});
test("namely -> name", function() {deepEqual( Stem("namely"), "name");});
test("names -> name", function() {deepEqual( Stem("names"), "name");});
test("namest -> namest", function() {deepEqual( Stem("namest"), "namest");});
test("naming -> name", function() {deepEqual( Stem("naming"), "name");});
test("namur -> namur", function() {deepEqual( Stem("namur"), "namur");});
test("nan -> nan", function() {deepEqual( Stem("nan"), "nan");});
test("nance -> nanc", function() {deepEqual( Stem("nance"), "nanc");});
test("nankeen -> nankeen", function() {deepEqual( Stem("nankeen"), "nankeen");});
test("nap -> nap", function() {deepEqual( Stem("nap"), "nap");});
test("nape -> nape", function() {deepEqual( Stem("nape"), "nape");});
test("napes -> nape", function() {deepEqual( Stem("napes"), "nape");});
test("napier -> napier", function() {deepEqual( Stem("napier"), "napier");});
test("napkin -> napkin", function() {deepEqual( Stem("napkin"), "napkin");});
test("napkins -> napkin", function() {deepEqual( Stem("napkins"), "napkin");});
test("naples -> napl", function() {deepEqual( Stem("naples"), "napl");});
test("napless -> napless", function() {deepEqual( Stem("napless"), "napless");});
test("napoleon -> napoleon", function() {deepEqual( Stem("napoleon"), "napoleon");});
test("napoleons -> napoleon", function() {deepEqual( Stem("napoleons"), "napoleon");});
test("napping -> nap", function() {deepEqual( Stem("napping"), "nap");});
test("naps -> nap", function() {deepEqual( Stem("naps"), "nap");});
test("narbon -> narbon", function() {deepEqual( Stem("narbon"), "narbon");});
test("narcissus -> narcissu", function() {deepEqual( Stem("narcissus"), "narcissu");});
test("narghile -> narghil", function() {deepEqual( Stem("narghile"), "narghil");});
test("narines -> narin", function() {deepEqual( Stem("narines"), "narin");});
test("narrated -> narrat", function() {deepEqual( Stem("narrated"), "narrat");});
test("narrating -> narrat", function() {deepEqual( Stem("narrating"), "narrat");});
test("narration -> narrat", function() {deepEqual( Stem("narration"), "narrat");});
test("narrative -> narr", function() {deepEqual( Stem("narrative"), "narr");});
test("narratives -> narr", function() {deepEqual( Stem("narratives"), "narr");});
test("narrow -> narrow", function() {deepEqual( Stem("narrow"), "narrow");});
test("narrowly -> narrowli", function() {deepEqual( Stem("narrowly"), "narrowli");});
test("naso -> naso", function() {deepEqual( Stem("naso"), "naso");});
test("nassau -> nassau", function() {deepEqual( Stem("nassau"), "nassau");});
test("nasty -> nasti", function() {deepEqual( Stem("nasty"), "nasti");});
test("nat -> nat", function() {deepEqual( Stem("nat"), "nat");});
test("nathan -> nathan", function() {deepEqual( Stem("nathan"), "nathan");});
test("nathaniel -> nathaniel", function() {deepEqual( Stem("nathaniel"), "nathaniel");});
test("natifs -> natif", function() {deepEqual( Stem("natifs"), "natif");});
test("nation -> nation", function() {deepEqual( Stem("nation"), "nation");});
test("national -> nation", function() {deepEqual( Stem("national"), "nation");});
test("nations -> nation", function() {deepEqual( Stem("nations"), "nation");});
test("native -> nativ", function() {deepEqual( Stem("native"), "nativ");});
test("natives -> nativ", function() {deepEqual( Stem("natives"), "nativ");});
test("nativity -> nativ", function() {deepEqual( Stem("nativity"), "nativ");});
test("natty -> natti", function() {deepEqual( Stem("natty"), "natti");});
test("natur -> natur", function() {deepEqual( Stem("natur"), "natur");});
test("natural -> natur", function() {deepEqual( Stem("natural"), "natur");});
test("naturalize -> natur", function() {deepEqual( Stem("naturalize"), "natur");});
test("naturally -> natur", function() {deepEqual( Stem("naturally"), "natur");});
test("naturalness -> natur", function() {deepEqual( Stem("naturalness"), "natur");});
test("nature -> natur", function() {deepEqual( Stem("nature"), "natur");});
test("natured -> natur", function() {deepEqual( Stem("natured"), "natur");});
test("naturedly -> naturedli", function() {deepEqual( Stem("naturedly"), "naturedli");});
test("naturel -> naturel", function() {deepEqual( Stem("naturel"), "naturel");});
test("natures -> natur", function() {deepEqual( Stem("natures"), "natur");});
test("natus -> natu", function() {deepEqual( Stem("natus"), "natu");});
test("naught -> naught", function() {deepEqual( Stem("naught"), "naught");});
test("naughtily -> naughtili", function() {deepEqual( Stem("naughtily"), "naughtili");});
test("naughtiness -> naughti", function() {deepEqual( Stem("naughtiness"), "naughti");});
test("naughty -> naughti", function() {deepEqual( Stem("naughty"), "naughti");});
test("nautical -> nautic", function() {deepEqual( Stem("nautical"), "nautic");});
test("navarre -> navarr", function() {deepEqual( Stem("navarre"), "navarr");});
test("nave -> nave", function() {deepEqual( Stem("nave"), "nave");});
test("navel -> navel", function() {deepEqual( Stem("navel"), "navel");});
test("navets -> navet", function() {deepEqual( Stem("navets"), "navet");});
test("navigate -> navig", function() {deepEqual( Stem("navigate"), "navig");});
test("navigation -> navig", function() {deepEqual( Stem("navigation"), "navig");});
test("navy -> navi", function() {deepEqual( Stem("navy"), "navi");});
test("naw -> naw", function() {deepEqual( Stem("naw"), "naw");});
test("nawt -> nawt", function() {deepEqual( Stem("nawt"), "nawt");});
test("nay -> nai", function() {deepEqual( Stem("nay"), "nai");});
test("nayther -> nayther", function() {deepEqual( Stem("nayther"), "nayther");});
test("nayward -> nayward", function() {deepEqual( Stem("nayward"), "nayward");});
test("nayword -> nayword", function() {deepEqual( Stem("nayword"), "nayword");});
test("nazarite -> nazarit", function() {deepEqual( Stem("nazarite"), "nazarit");});
test("ne -> ne", function() {deepEqual( Stem("ne"), "ne");});
test("neaf -> neaf", function() {deepEqual( Stem("neaf"), "neaf");});
test("neamnoins -> neamnoin", function() {deepEqual( Stem("neamnoins"), "neamnoin");});
test("neanmoins -> neanmoin", function() {deepEqual( Stem("neanmoins"), "neanmoin");});
test("neapolitan -> neapolitan", function() {deepEqual( Stem("neapolitan"), "neapolitan");});
test("neapolitans -> neapolitan", function() {deepEqual( Stem("neapolitans"), "neapolitan");});
test("near -> near", function() {deepEqual( Stem("near"), "near");});
test("neared -> near", function() {deepEqual( Stem("neared"), "near");});
test("nearer -> nearer", function() {deepEqual( Stem("nearer"), "nearer");});
test("nearest -> nearest", function() {deepEqual( Stem("nearest"), "nearest");});
test("nearing -> near", function() {deepEqual( Stem("nearing"), "near");});
test("nearly -> nearli", function() {deepEqual( Stem("nearly"), "nearli");});
test("nearness -> near", function() {deepEqual( Stem("nearness"), "near");});
test("neat -> neat", function() {deepEqual( Stem("neat"), "neat");});
test("neatest -> neatest", function() {deepEqual( Stem("neatest"), "neatest");});
test("neatly -> neatli", function() {deepEqual( Stem("neatly"), "neatli");});
test("neatness -> neat", function() {deepEqual( Stem("neatness"), "neat");});
test("neb -> neb", function() {deepEqual( Stem("neb"), "neb");});
test("nebour -> nebour", function() {deepEqual( Stem("nebour"), "nebour");});
test("nebst -> nebst", function() {deepEqual( Stem("nebst"), "nebst");});
test("nebuchadnezzar -> nebuchadnezzar", function() {deepEqual( Stem("nebuchadnezzar"), "nebuchadnezzar");});
test("nec -> nec", function() {deepEqual( Stem("nec"), "nec");});
test("necessaries -> necessari", function() {deepEqual( Stem("necessaries"), "necessari");});
test("necessarily -> necessarili", function() {deepEqual( Stem("necessarily"), "necessarili");});
test("necessary -> necessari", function() {deepEqual( Stem("necessary"), "necessari");});
test("necessitied -> necess", function() {deepEqual( Stem("necessitied"), "necess");});
test("necessities -> necess", function() {deepEqual( Stem("necessities"), "necess");});
test("necessity -> necess", function() {deepEqual( Stem("necessity"), "necess");});
test("neck -> neck", function() {deepEqual( Stem("neck"), "neck");});
test("neckcloth -> neckcloth", function() {deepEqual( Stem("neckcloth"), "neckcloth");});
test("neckcloths -> neckcloth", function() {deepEqual( Stem("neckcloths"), "neckcloth");});
test("necklace -> necklac", function() {deepEqual( Stem("necklace"), "necklac");});
test("necklaces -> necklac", function() {deepEqual( Stem("necklaces"), "necklac");});
test("necks -> neck", function() {deepEqual( Stem("necks"), "neck");});
test("nectar -> nectar", function() {deepEqual( Stem("nectar"), "nectar");});
test("ned -> ned", function() {deepEqual( Stem("ned"), "ned");});
test("nedar -> nedar", function() {deepEqual( Stem("nedar"), "nedar");});
test("nee -> nee", function() {deepEqual( Stem("nee"), "nee");});
test("need -> need", function() {deepEqual( Stem("need"), "need");});
test("needed -> need", function() {deepEqual( Stem("needed"), "need");});
test("needer -> needer", function() {deepEqual( Stem("needer"), "needer");});
test("needful -> need", function() {deepEqual( Stem("needful"), "need");});
test("needfull -> needful", function() {deepEqual( Stem("needfull"), "needful");});
test("needing -> need", function() {deepEqual( Stem("needing"), "need");});
test("needle -> needl", function() {deepEqual( Stem("needle"), "needl");});
test("needles -> needl", function() {deepEqual( Stem("needles"), "needl");});
test("needless -> needless", function() {deepEqual( Stem("needless"), "needless");});
test("needlessly -> needlessli", function() {deepEqual( Stem("needlessly"), "needlessli");});
test("needlework -> needlework", function() {deepEqual( Stem("needlework"), "needlework");});
test("needly -> needli", function() {deepEqual( Stem("needly"), "needli");});
test("needn -> needn", function() {deepEqual( Stem("needn"), "needn");});
test("needs -> need", function() {deepEqual( Stem("needs"), "need");});
test("needy -> needi", function() {deepEqual( Stem("needy"), "needi");});
test("neer -> neer", function() {deepEqual( Stem("neer"), "neer");});
test("neeze -> neez", function() {deepEqual( Stem("neeze"), "neez");});
test("nefas -> nefa", function() {deepEqual( Stem("nefas"), "nefa");});
test("negation -> negat", function() {deepEqual( Stem("negation"), "negat");});
test("negative -> neg", function() {deepEqual( Stem("negative"), "neg");});
test("negatives -> neg", function() {deepEqual( Stem("negatives"), "neg");});
test("neglect -> neglect", function() {deepEqual( Stem("neglect"), "neglect");});
test("neglected -> neglect", function() {deepEqual( Stem("neglected"), "neglect");});
test("neglecting -> neglect", function() {deepEqual( Stem("neglecting"), "neglect");});
test("neglectingly -> neglectingli", function() {deepEqual( Stem("neglectingly"), "neglectingli");});
test("neglection -> neglect", function() {deepEqual( Stem("neglection"), "neglect");});
test("neglects -> neglect", function() {deepEqual( Stem("neglects"), "neglect");});
test("negligence -> neglig", function() {deepEqual( Stem("negligence"), "neglig");});
test("negligent -> neglig", function() {deepEqual( Stem("negligent"), "neglig");});
test("negotiate -> negoti", function() {deepEqual( Stem("negotiate"), "negoti");});
test("negotiation -> negoti", function() {deepEqual( Stem("negotiation"), "negoti");});
test("negotiations -> negoti", function() {deepEqual( Stem("negotiations"), "negoti");});
test("negro -> negro", function() {deepEqual( Stem("negro"), "negro");});
test("negus -> negu", function() {deepEqual( Stem("negus"), "negu");});
test("neigh -> neigh", function() {deepEqual( Stem("neigh"), "neigh");});
test("neighbors -> neighbor", function() {deepEqual( Stem("neighbors"), "neighbor");});
test("neighbour -> neighbour", function() {deepEqual( Stem("neighbour"), "neighbour");});
test("neighbourhood -> neighbourhood", function() {deepEqual( Stem("neighbourhood"), "neighbourhood");});
test("neighbouring -> neighbour", function() {deepEqual( Stem("neighbouring"), "neighbour");});
test("neighbourly -> neighbourli", function() {deepEqual( Stem("neighbourly"), "neighbourli");});
test("neighbours -> neighbour", function() {deepEqual( Stem("neighbours"), "neighbour");});
test("neighing -> neigh", function() {deepEqual( Stem("neighing"), "neigh");});
test("neighs -> neigh", function() {deepEqual( Stem("neighs"), "neigh");});
test("neither -> neither", function() {deepEqual( Stem("neither"), "neither");});
test("nell -> nell", function() {deepEqual( Stem("nell"), "nell");});
test("nelson -> nelson", function() {deepEqual( Stem("nelson"), "nelson");});
test("nemean -> nemean", function() {deepEqual( Stem("nemean"), "nemean");});
test("nemesis -> nemesi", function() {deepEqual( Stem("nemesis"), "nemesi");});
test("neoptolemus -> neoptolemu", function() {deepEqual( Stem("neoptolemus"), "neoptolemu");});
test("nephew -> nephew", function() {deepEqual( Stem("nephew"), "nephew");});
test("nephews -> nephew", function() {deepEqual( Stem("nephews"), "nephew");});
test("neptune -> neptun", function() {deepEqual( Stem("neptune"), "neptun");});
test("ner -> ner", function() {deepEqual( Stem("ner"), "ner");});
test("nereides -> nereid", function() {deepEqual( Stem("nereides"), "nereid");});
test("nerissa -> nerissa", function() {deepEqual( Stem("nerissa"), "nerissa");});
test("nero -> nero", function() {deepEqual( Stem("nero"), "nero");});
test("neroes -> nero", function() {deepEqual( Stem("neroes"), "nero");});
test("ners -> ner", function() {deepEqual( Stem("ners"), "ner");});
test("nerve -> nerv", function() {deepEqual( Stem("nerve"), "nerv");});
test("nerves -> nerv", function() {deepEqual( Stem("nerves"), "nerv");});
test("nervii -> nervii", function() {deepEqual( Stem("nervii"), "nervii");});
test("nervous -> nervou", function() {deepEqual( Stem("nervous"), "nervou");});
test("nervously -> nervous", function() {deepEqual( Stem("nervously"), "nervous");});
test("nervousness -> nervous", function() {deepEqual( Stem("nervousness"), "nervous");});
test("nervy -> nervi", function() {deepEqual( Stem("nervy"), "nervi");});
test("nessus -> nessu", function() {deepEqual( Stem("nessus"), "nessu");});
test("nest -> nest", function() {deepEqual( Stem("nest"), "nest");});
test("nestle -> nestl", function() {deepEqual( Stem("nestle"), "nestl");});
test("nestled -> nestl", function() {deepEqual( Stem("nestled"), "nestl");});
test("nestor -> nestor", function() {deepEqual( Stem("nestor"), "nestor");});
test("nests -> nest", function() {deepEqual( Stem("nests"), "nest");});
test("net -> net", function() {deepEqual( Stem("net"), "net");});
test("nether -> nether", function() {deepEqual( Stem("nether"), "nether");});
test("netherlands -> netherland", function() {deepEqual( Stem("netherlands"), "netherland");});
test("nets -> net", function() {deepEqual( Stem("nets"), "net");});
test("netted -> net", function() {deepEqual( Stem("netted"), "net");});
test("nettle -> nettl", function() {deepEqual( Stem("nettle"), "nettl");});
test("nettled -> nettl", function() {deepEqual( Stem("nettled"), "nettl");});
test("nettles -> nettl", function() {deepEqual( Stem("nettles"), "nettl");});
test("neuter -> neuter", function() {deepEqual( Stem("neuter"), "neuter");});
test("neutral -> neutral", function() {deepEqual( Stem("neutral"), "neutral");});
test("nev -> nev", function() {deepEqual( Stem("nev"), "nev");});
test("nevare -> nevar", function() {deepEqual( Stem("nevare"), "nevar");});
test("never -> never", function() {deepEqual( Stem("never"), "never");});
test("nevertheless -> nevertheless", function() {deepEqual( Stem("nevertheless"), "nevertheless");});
test("nevil -> nevil", function() {deepEqual( Stem("nevil"), "nevil");});
test("nevils -> nevil", function() {deepEqual( Stem("nevils"), "nevil");});
test("new -> new", function() {deepEqual( Stem("new"), "new");});
test("newborn -> newborn", function() {deepEqual( Stem("newborn"), "newborn");});
test("newbright -> newbright", function() {deepEqual( Stem("newbright"), "newbright");});
test("newcomer -> newcom", function() {deepEqual( Stem("newcomer"), "newcom");});
test("newcomers -> newcom", function() {deepEqual( Stem("newcomers"), "newcom");});
test("newer -> newer", function() {deepEqual( Stem("newer"), "newer");});
test("newest -> newest", function() {deepEqual( Stem("newest"), "newest");});
test("newfoundland -> newfoundland", function() {deepEqual( Stem("newfoundland"), "newfoundland");});
test("newgate -> newgat", function() {deepEqual( Stem("newgate"), "newgat");});
test("newly -> newli", function() {deepEqual( Stem("newly"), "newli");});
test("newman -> newman", function() {deepEqual( Stem("newman"), "newman");});
test("newmero -> newmero", function() {deepEqual( Stem("newmero"), "newmero");});
test("newness -> new", function() {deepEqual( Stem("newness"), "new");});
test("news -> new", function() {deepEqual( Stem("news"), "new");});
test("newsman -> newsman", function() {deepEqual( Stem("newsman"), "newsman");});
test("newsmongers -> newsmong", function() {deepEqual( Stem("newsmongers"), "newsmong");});
test("newspaper -> newspap", function() {deepEqual( Stem("newspaper"), "newspap");});
test("newspapers -> newspap", function() {deepEqual( Stem("newspapers"), "newspap");});
test("newt -> newt", function() {deepEqual( Stem("newt"), "newt");});
test("newts -> newt", function() {deepEqual( Stem("newts"), "newt");});
test("next -> next", function() {deepEqual( Stem("next"), "next");});
test("ney -> nei", function() {deepEqual( Stem("ney"), "nei");});
test("niagara -> niagara", function() {deepEqual( Stem("niagara"), "niagara");});
test("nibbling -> nibbl", function() {deepEqual( Stem("nibbling"), "nibbl");});
test("nicanor -> nicanor", function() {deepEqual( Stem("nicanor"), "nicanor");});
test("nice -> nice", function() {deepEqual( Stem("nice"), "nice");});
test("nicely -> nice", function() {deepEqual( Stem("nicely"), "nice");});
test("niceness -> nice", function() {deepEqual( Stem("niceness"), "nice");});
test("nicer -> nicer", function() {deepEqual( Stem("nicer"), "nicer");});
test("nicest -> nicest", function() {deepEqual( Stem("nicest"), "nicest");});
test("nicety -> niceti", function() {deepEqual( Stem("nicety"), "niceti");});
test("niches -> nich", function() {deepEqual( Stem("niches"), "nich");});
test("nicholas -> nichola", function() {deepEqual( Stem("nicholas"), "nichola");});
test("nicht -> nicht", function() {deepEqual( Stem("nicht"), "nicht");});
test("nichts -> nicht", function() {deepEqual( Stem("nichts"), "nicht");});
test("nick -> nick", function() {deepEqual( Stem("nick"), "nick");});
test("nickname -> nicknam", function() {deepEqual( Stem("nickname"), "nicknam");});
test("nicks -> nick", function() {deepEqual( Stem("nicks"), "nick");});
test("niece -> niec", function() {deepEqual( Stem("niece"), "niec");});
test("nieces -> niec", function() {deepEqual( Stem("nieces"), "niec");});
test("niggard -> niggard", function() {deepEqual( Stem("niggard"), "niggard");});
test("niggarding -> niggard", function() {deepEqual( Stem("niggarding"), "niggard");});
test("niggardliness -> niggardli", function() {deepEqual( Stem("niggardliness"), "niggardli");});
test("niggardly -> niggardli", function() {deepEqual( Stem("niggardly"), "niggardli");});
test("nigh -> nigh", function() {deepEqual( Stem("nigh"), "nigh");});
test("night -> night", function() {deepEqual( Stem("night"), "night");});
test("nightcap -> nightcap", function() {deepEqual( Stem("nightcap"), "nightcap");});
test("nightcaps -> nightcap", function() {deepEqual( Stem("nightcaps"), "nightcap");});
test("nighted -> night", function() {deepEqual( Stem("nighted"), "night");});
test("nightfall -> nightfal", function() {deepEqual( Stem("nightfall"), "nightfal");});
test("nightgown -> nightgown", function() {deepEqual( Stem("nightgown"), "nightgown");});
test("nightingale -> nightingal", function() {deepEqual( Stem("nightingale"), "nightingal");});
test("nightingales -> nightingal", function() {deepEqual( Stem("nightingales"), "nightingal");});
test("nightly -> nightli", function() {deepEqual( Stem("nightly"), "nightli");});
test("nightmare -> nightmar", function() {deepEqual( Stem("nightmare"), "nightmar");});
test("nights -> night", function() {deepEqual( Stem("nights"), "night");});
test("nightwork -> nightwork", function() {deepEqual( Stem("nightwork"), "nightwork");});
test("nihil -> nihil", function() {deepEqual( Stem("nihil"), "nihil");});
test("nile -> nile", function() {deepEqual( Stem("nile"), "nile");});
test("nill -> nill", function() {deepEqual( Stem("nill"), "nill");});
test("nilus -> nilu", function() {deepEqual( Stem("nilus"), "nilu");});
test("nimble -> nimbl", function() {deepEqual( Stem("nimble"), "nimbl");});
test("nimbleness -> nimbl", function() {deepEqual( Stem("nimbleness"), "nimbl");});
test("nimbler -> nimbler", function() {deepEqual( Stem("nimbler"), "nimbler");});
test("nimbly -> nimbli", function() {deepEqual( Stem("nimbly"), "nimbli");});
test("nincompoop -> nincompoop", function() {deepEqual( Stem("nincompoop"), "nincompoop");});
test("nine -> nine", function() {deepEqual( Stem("nine"), "nine");});
test("ninepence -> ninep", function() {deepEqual( Stem("ninepence"), "ninep");});
test("nineteen -> nineteen", function() {deepEqual( Stem("nineteen"), "nineteen");});
test("ninety -> nineti", function() {deepEqual( Stem("ninety"), "nineti");});
test("nineveh -> nineveh", function() {deepEqual( Stem("nineveh"), "nineveh");});
test("ning -> ning", function() {deepEqual( Stem("ning"), "ning");});
test("ningly -> ningli", function() {deepEqual( Stem("ningly"), "ningli");});
test("ninny -> ninni", function() {deepEqual( Stem("ninny"), "ninni");});
test("ninth -> ninth", function() {deepEqual( Stem("ninth"), "ninth");});
test("ninus -> ninu", function() {deepEqual( Stem("ninus"), "ninu");});
test("niobe -> niob", function() {deepEqual( Stem("niobe"), "niob");});
test("niobes -> niob", function() {deepEqual( Stem("niobes"), "niob");});
test("nip -> nip", function() {deepEqual( Stem("nip"), "nip");});
test("nipp -> nipp", function() {deepEqual( Stem("nipp"), "nipp");});
test("nipping -> nip", function() {deepEqual( Stem("nipping"), "nip");});
test("nipple -> nippl", function() {deepEqual( Stem("nipple"), "nippl");});
test("nips -> nip", function() {deepEqual( Stem("nips"), "nip");});
test("nit -> nit", function() {deepEqual( Stem("nit"), "nit");});
test("nly -> nly", function() {deepEqual( Stem("nly"), "nly");});
test("nnight -> nnight", function() {deepEqual( Stem("nnight"), "nnight");});
test("nnights -> nnight", function() {deepEqual( Stem("nnights"), "nnight");});
test("no -> no", function() {deepEqual( Stem("no"), "no");});
test("noah -> noah", function() {deepEqual( Stem("noah"), "noah");});
test("nob -> nob", function() {deepEqual( Stem("nob"), "nob");});
test("nobbing -> nob", function() {deepEqual( Stem("nobbing"), "nob");});
test("nobility -> nobil", function() {deepEqual( Stem("nobility"), "nobil");});
test("nobis -> nobi", function() {deepEqual( Stem("nobis"), "nobi");});
test("noble -> nobl", function() {deepEqual( Stem("noble"), "nobl");});
test("nobleman -> nobleman", function() {deepEqual( Stem("nobleman"), "nobleman");});
test("noblemen -> noblemen", function() {deepEqual( Stem("noblemen"), "noblemen");});
test("nobleness -> nobl", function() {deepEqual( Stem("nobleness"), "nobl");});
test("nobler -> nobler", function() {deepEqual( Stem("nobler"), "nobler");});
test("nobles -> nobl", function() {deepEqual( Stem("nobles"), "nobl");});
test("noblesse -> nobless", function() {deepEqual( Stem("noblesse"), "nobless");});
test("noblest -> noblest", function() {deepEqual( Stem("noblest"), "noblest");});
test("noblet -> noblet", function() {deepEqual( Stem("noblet"), "noblet");});
test("nobly -> nobli", function() {deepEqual( Stem("nobly"), "nobli");});
test("nobod -> nobod", function() {deepEqual( Stem("nobod"), "nobod");});
test("nobodies -> nobodi", function() {deepEqual( Stem("nobodies"), "nobodi");});
test("nobody -> nobodi", function() {deepEqual( Stem("nobody"), "nobodi");});
test("nobs -> nob", function() {deepEqual( Stem("nobs"), "nob");});
test("noces -> noce", function() {deepEqual( Stem("noces"), "noce");});
test("nod -> nod", function() {deepEqual( Stem("nod"), "nod");});
test("nodded -> nod", function() {deepEqual( Stem("nodded"), "nod");});
test("nodding -> nod", function() {deepEqual( Stem("nodding"), "nod");});
test("noddle -> noddl", function() {deepEqual( Stem("noddle"), "noddl");});
test("noddles -> noddl", function() {deepEqual( Stem("noddles"), "noddl");});
test("noddy -> noddi", function() {deepEqual( Stem("noddy"), "noddi");});
test("nods -> nod", function() {deepEqual( Stem("nods"), "nod");});
test("noes -> noe", function() {deepEqual( Stem("noes"), "noe");});
test("nointed -> noint", function() {deepEqual( Stem("nointed"), "noint");});
test("noir -> noir", function() {deepEqual( Stem("noir"), "noir");});
test("nois -> noi", function() {deepEqual( Stem("nois"), "noi");});
test("noise -> nois", function() {deepEqual( Stem("noise"), "nois");});
test("noiseless -> noiseless", function() {deepEqual( Stem("noiseless"), "noiseless");});
test("noiselessly -> noiselessli", function() {deepEqual( Stem("noiselessly"), "noiselessli");});
test("noisemaker -> noisemak", function() {deepEqual( Stem("noisemaker"), "noisemak");});
test("noises -> nois", function() {deepEqual( Stem("noises"), "nois");});
test("noisome -> noisom", function() {deepEqual( Stem("noisome"), "noisom");});
test("noisy -> noisi", function() {deepEqual( Stem("noisy"), "noisi");});
test("nole -> nole", function() {deepEqual( Stem("nole"), "nole");});
test("nominal -> nomin", function() {deepEqual( Stem("nominal"), "nomin");});
test("nominate -> nomin", function() {deepEqual( Stem("nominate"), "nomin");});
test("nominated -> nomin", function() {deepEqual( Stem("nominated"), "nomin");});
test("nomination -> nomin", function() {deepEqual( Stem("nomination"), "nomin");});
test("nominations -> nomin", function() {deepEqual( Stem("nominations"), "nomin");});
test("nominativo -> nominativo", function() {deepEqual( Stem("nominativo"), "nominativo");});
test("nomine -> nomin", function() {deepEqual( Stem("nomine"), "nomin");});
test("non -> non", function() {deepEqual( Stem("non"), "non");});
test("nonage -> nonag", function() {deepEqual( Stem("nonage"), "nonag");});
test("nonce -> nonc", function() {deepEqual( Stem("nonce"), "nonc");});
test("nondum -> nondum", function() {deepEqual( Stem("nondum"), "nondum");});
test("none -> none", function() {deepEqual( Stem("none"), "none");});
test("nonino -> nonino", function() {deepEqual( Stem("nonino"), "nonino");});
test("nonnenwerth -> nonnenwerth", function() {deepEqual( Stem("nonnenwerth"), "nonnenwerth");});
test("nonny -> nonni", function() {deepEqual( Stem("nonny"), "nonni");});
test("nonpareil -> nonpareil", function() {deepEqual( Stem("nonpareil"), "nonpareil");});
test("nonsense -> nonsens", function() {deepEqual( Stem("nonsense"), "nonsens");});
test("nonsuits -> nonsuit", function() {deepEqual( Stem("nonsuits"), "nonsuit");});
test("nony -> noni", function() {deepEqual( Stem("nony"), "noni");});
test("noo -> noo", function() {deepEqual( Stem("noo"), "noo");});
test("noodle -> noodl", function() {deepEqual( Stem("noodle"), "noodl");});
test("nook -> nook", function() {deepEqual( Stem("nook"), "nook");});
test("nooks -> nook", function() {deepEqual( Stem("nooks"), "nook");});
test("noon -> noon", function() {deepEqual( Stem("noon"), "noon");});
test("noonday -> noondai", function() {deepEqual( Stem("noonday"), "noondai");});
test("noontide -> noontid", function() {deepEqual( Stem("noontide"), "noontid");});
test("nor -> nor", function() {deepEqual( Stem("nor"), "nor");});
test("norbery -> norberi", function() {deepEqual( Stem("norbery"), "norberi");});
test("norfolk -> norfolk", function() {deepEqual( Stem("norfolk"), "norfolk");});
test("normal -> normal", function() {deepEqual( Stem("normal"), "normal");});
test("norman -> norman", function() {deepEqual( Stem("norman"), "norman");});
test("normandy -> normandi", function() {deepEqual( Stem("normandy"), "normandi");});
test("normans -> norman", function() {deepEqual( Stem("normans"), "norman");});
test("north -> north", function() {deepEqual( Stem("north"), "north");});
test("northampton -> northampton", function() {deepEqual( Stem("northampton"), "northampton");});
test("northamptonshire -> northamptonshir", function() {deepEqual( Stem("northamptonshire"), "northamptonshir");});
test("northerly -> northerli", function() {deepEqual( Stem("northerly"), "northerli");});
test("northern -> northern", function() {deepEqual( Stem("northern"), "northern");});
test("northgate -> northgat", function() {deepEqual( Stem("northgate"), "northgat");});
test("northumberland -> northumberland", function() {deepEqual( Stem("northumberland"), "northumberland");});
test("northumberlands -> northumberland", function() {deepEqual( Stem("northumberlands"), "northumberland");});
test("northward -> northward", function() {deepEqual( Stem("northward"), "northward");});
test("norval -> norval", function() {deepEqual( Stem("norval"), "norval");});
test("norway -> norwai", function() {deepEqual( Stem("norway"), "norwai");});
test("norways -> norwai", function() {deepEqual( Stem("norways"), "norwai");});
test("norwegian -> norwegian", function() {deepEqual( Stem("norwegian"), "norwegian");});
test("norweyan -> norweyan", function() {deepEqual( Stem("norweyan"), "norweyan");});
test("nos -> no", function() {deepEqual( Stem("nos"), "no");});
test("nose -> nose", function() {deepEqual( Stem("nose"), "nose");});
test("nosed -> nose", function() {deepEqual( Stem("nosed"), "nose");});
test("nosegay -> nosegai", function() {deepEqual( Stem("nosegay"), "nosegai");});
test("nosegays -> nosegai", function() {deepEqual( Stem("nosegays"), "nosegai");});
test("noseless -> noseless", function() {deepEqual( Stem("noseless"), "noseless");});
test("noses -> nose", function() {deepEqual( Stem("noses"), "nose");});
test("noster -> noster", function() {deepEqual( Stem("noster"), "noster");});
test("nostra -> nostra", function() {deepEqual( Stem("nostra"), "nostra");});
test("nostril -> nostril", function() {deepEqual( Stem("nostril"), "nostril");});
test("nostrils -> nostril", function() {deepEqual( Stem("nostrils"), "nostril");});
test("not -> not", function() {deepEqual( Stem("not"), "not");});
test("notable -> notabl", function() {deepEqual( Stem("notable"), "notabl");});
test("notably -> notabl", function() {deepEqual( Stem("notably"), "notabl");});
test("notary -> notari", function() {deepEqual( Stem("notary"), "notari");});
test("notch -> notch", function() {deepEqual( Stem("notch"), "notch");});
test("note -> note", function() {deepEqual( Stem("note"), "note");});
test("notebook -> notebook", function() {deepEqual( Stem("notebook"), "notebook");});
test("noted -> note", function() {deepEqual( Stem("noted"), "note");});
test("notedly -> notedli", function() {deepEqual( Stem("notedly"), "notedli");});
test("notes -> note", function() {deepEqual( Stem("notes"), "note");});
test("notest -> notest", function() {deepEqual( Stem("notest"), "notest");});
test("noteworthy -> noteworthi", function() {deepEqual( Stem("noteworthy"), "noteworthi");});
test("nothing -> noth", function() {deepEqual( Stem("nothing"), "noth");});
test("nothings -> noth", function() {deepEqual( Stem("nothings"), "noth");});
test("nothink -> nothink", function() {deepEqual( Stem("nothink"), "nothink");});
test("notice -> notic", function() {deepEqual( Stem("notice"), "notic");});
test("noticed -> notic", function() {deepEqual( Stem("noticed"), "notic");});
test("notify -> notifi", function() {deepEqual( Stem("notify"), "notifi");});
test("notifying -> notifi", function() {deepEqual( Stem("notifying"), "notifi");});
test("noting -> note", function() {deepEqual( Stem("noting"), "note");});
test("notion -> notion", function() {deepEqual( Stem("notion"), "notion");});
test("notions -> notion", function() {deepEqual( Stem("notions"), "notion");});
test("notorious -> notori", function() {deepEqual( Stem("notorious"), "notori");});
test("notoriously -> notori", function() {deepEqual( Stem("notoriously"), "notori");});
test("notre -> notr", function() {deepEqual( Stem("notre"), "notr");});
test("notwithstanding -> notwithstand", function() {deepEqual( Stem("notwithstanding"), "notwithstand");});
test("nought -> nought", function() {deepEqual( Stem("nought"), "nought");});
test("noun -> noun", function() {deepEqual( Stem("noun"), "noun");});
test("nouns -> noun", function() {deepEqual( Stem("nouns"), "noun");});
test("nourish -> nourish", function() {deepEqual( Stem("nourish"), "nourish");});
test("nourished -> nourish", function() {deepEqual( Stem("nourished"), "nourish");});
test("nourisher -> nourish", function() {deepEqual( Stem("nourisher"), "nourish");});
test("nourishes -> nourish", function() {deepEqual( Stem("nourishes"), "nourish");});
test("nourisheth -> nourisheth", function() {deepEqual( Stem("nourisheth"), "nourisheth");});
test("nourishing -> nourish", function() {deepEqual( Stem("nourishing"), "nourish");});
test("nourishment -> nourish", function() {deepEqual( Stem("nourishment"), "nourish");});
test("nous -> nou", function() {deepEqual( Stem("nous"), "nou");});
test("novel -> novel", function() {deepEqual( Stem("novel"), "novel");});
test("novelist -> novelist", function() {deepEqual( Stem("novelist"), "novelist");});
test("novelists -> novelist", function() {deepEqual( Stem("novelists"), "novelist");});
test("novels -> novel", function() {deepEqual( Stem("novels"), "novel");});
test("novelties -> novelti", function() {deepEqual( Stem("novelties"), "novelti");});
test("novelty -> novelti", function() {deepEqual( Stem("novelty"), "novelti");});
test("november -> novemb", function() {deepEqual( Stem("november"), "novemb");});
test("noverbs -> noverb", function() {deepEqual( Stem("noverbs"), "noverb");});
test("novi -> novi", function() {deepEqual( Stem("novi"), "novi");});
test("novice -> novic", function() {deepEqual( Stem("novice"), "novic");});
test("novices -> novic", function() {deepEqual( Stem("novices"), "novic");});
test("novum -> novum", function() {deepEqual( Stem("novum"), "novum");});
test("now -> now", function() {deepEqual( Stem("now"), "now");});
test("nowhere -> nowher", function() {deepEqual( Stem("nowhere"), "nowher");});
test("noyance -> noyanc", function() {deepEqual( Stem("noyance"), "noyanc");});
test("ns -> n", function() {deepEqual( Stem("ns"), "n");});
test("nt -> nt", function() {deepEqual( Stem("nt"), "nt");});
test("nubian -> nubian", function() {deepEqual( Stem("nubian"), "nubian");});
test("nubibus -> nubibu", function() {deepEqual( Stem("nubibus"), "nubibu");});
test("nudge -> nudg", function() {deepEqual( Stem("nudge"), "nudg");});
test("nudging -> nudg", function() {deepEqual( Stem("nudging"), "nudg");});
test("numa -> numa", function() {deepEqual( Stem("numa"), "numa");});
test("numb -> numb", function() {deepEqual( Stem("numb"), "numb");});
test("numbed -> numb", function() {deepEqual( Stem("numbed"), "numb");});
test("number -> number", function() {deepEqual( Stem("number"), "number");});
test("numbered -> number", function() {deepEqual( Stem("numbered"), "number");});
test("numbering -> number", function() {deepEqual( Stem("numbering"), "number");});
test("numberless -> numberless", function() {deepEqual( Stem("numberless"), "numberless");});
test("numbers -> number", function() {deepEqual( Stem("numbers"), "number");});
test("numbness -> numb", function() {deepEqual( Stem("numbness"), "numb");});
test("numerous -> numer", function() {deepEqual( Stem("numerous"), "numer");});
test("nun -> nun", function() {deepEqual( Stem("nun"), "nun");});
test("nunc -> nunc", function() {deepEqual( Stem("nunc"), "nunc");});
test("nuncio -> nuncio", function() {deepEqual( Stem("nuncio"), "nuncio");});
test("nuncle -> nuncl", function() {deepEqual( Stem("nuncle"), "nuncl");});
test("nunnery -> nunneri", function() {deepEqual( Stem("nunnery"), "nunneri");});
test("nuns -> nun", function() {deepEqual( Stem("nuns"), "nun");});
test("nuntius -> nuntiu", function() {deepEqual( Stem("nuntius"), "nuntiu");});
test("nuptial -> nuptial", function() {deepEqual( Stem("nuptial"), "nuptial");});
test("nuptials -> nuptial", function() {deepEqual( Stem("nuptials"), "nuptial");});
test("nurs -> nur", function() {deepEqual( Stem("nurs"), "nur");});
test("nurse -> nurs", function() {deepEqual( Stem("nurse"), "nurs");});
test("nursed -> nurs", function() {deepEqual( Stem("nursed"), "nurs");});
test("nursemaids -> nursemaid", function() {deepEqual( Stem("nursemaids"), "nursemaid");});
test("nurser -> nurser", function() {deepEqual( Stem("nurser"), "nurser");});
test("nursery -> nurseri", function() {deepEqual( Stem("nursery"), "nurseri");});
test("nurses -> nurs", function() {deepEqual( Stem("nurses"), "nurs");});
test("nurseth -> nurseth", function() {deepEqual( Stem("nurseth"), "nurseth");});
test("nursh -> nursh", function() {deepEqual( Stem("nursh"), "nursh");});
test("nursing -> nurs", function() {deepEqual( Stem("nursing"), "nurs");});
test("nurslings -> nursl", function() {deepEqual( Stem("nurslings"), "nursl");});
test("nurtur -> nurtur", function() {deepEqual( Stem("nurtur"), "nurtur");});
test("nurture -> nurtur", function() {deepEqual( Stem("nurture"), "nurtur");});
test("nut -> nut", function() {deepEqual( Stem("nut"), "nut");});
test("nutcrackers -> nutcrack", function() {deepEqual( Stem("nutcrackers"), "nutcrack");});
test("nuthook -> nuthook", function() {deepEqual( Stem("nuthook"), "nuthook");});
test("nutmeg -> nutmeg", function() {deepEqual( Stem("nutmeg"), "nutmeg");});
test("nutmegs -> nutmeg", function() {deepEqual( Stem("nutmegs"), "nutmeg");});
test("nutriment -> nutriment", function() {deepEqual( Stem("nutriment"), "nutriment");});
test("nuts -> nut", function() {deepEqual( Stem("nuts"), "nut");});
test("nutshell -> nutshel", function() {deepEqual( Stem("nutshell"), "nutshel");});
test("ny -> ny", function() {deepEqual( Stem("ny"), "ny");});
test("nym -> nym", function() {deepEqual( Stem("nym"), "nym");});
test("nymph -> nymph", function() {deepEqual( Stem("nymph"), "nymph");});
test("nymphbath -> nymphbath", function() {deepEqual( Stem("nymphbath"), "nymphbath");});
test("nymphs -> nymph", function() {deepEqual( Stem("nymphs"), "nymph");});
test("o -> o", function() {deepEqual( Stem("o"), "o");});
test("oak -> oak", function() {deepEqual( Stem("oak"), "oak");});
test("oaken -> oaken", function() {deepEqual( Stem("oaken"), "oaken");});
test("oaks -> oak", function() {deepEqual( Stem("oaks"), "oak");});
test("oar -> oar", function() {deepEqual( Stem("oar"), "oar");});
test("oared -> oar", function() {deepEqual( Stem("oared"), "oar");});
test("oars -> oar", function() {deepEqual( Stem("oars"), "oar");});
test("oatcake -> oatcak", function() {deepEqual( Stem("oatcake"), "oatcak");});
test("oaten -> oaten", function() {deepEqual( Stem("oaten"), "oaten");});
test("oath -> oath", function() {deepEqual( Stem("oath"), "oath");});
test("oathable -> oathabl", function() {deepEqual( Stem("oathable"), "oathabl");});
test("oaths -> oath", function() {deepEqual( Stem("oaths"), "oath");});
test("oats -> oat", function() {deepEqual( Stem("oats"), "oat");});
test("ob -> ob", function() {deepEqual( Stem("ob"), "ob");});
test("obduracy -> obduraci", function() {deepEqual( Stem("obduracy"), "obduraci");});
test("obdurate -> obdur", function() {deepEqual( Stem("obdurate"), "obdur");});
test("obedience -> obedi", function() {deepEqual( Stem("obedience"), "obedi");});
test("obedient -> obedi", function() {deepEqual( Stem("obedient"), "obedi");});
test("obediently -> obedi", function() {deepEqual( Stem("obediently"), "obedi");});
test("obeisance -> obeis", function() {deepEqual( Stem("obeisance"), "obeis");});
test("oberon -> oberon", function() {deepEqual( Stem("oberon"), "oberon");});
test("obey -> obei", function() {deepEqual( Stem("obey"), "obei");});
test("obeyed -> obei", function() {deepEqual( Stem("obeyed"), "obei");});
test("obeying -> obei", function() {deepEqual( Stem("obeying"), "obei");});
test("obeys -> obei", function() {deepEqual( Stem("obeys"), "obei");});
test("obidicut -> obidicut", function() {deepEqual( Stem("obidicut"), "obidicut");});
test("obits -> obit", function() {deepEqual( Stem("obits"), "obit");});
test("object -> object", function() {deepEqual( Stem("object"), "object");});
test("objected -> object", function() {deepEqual( Stem("objected"), "object");});
test("objection -> object", function() {deepEqual( Stem("objection"), "object");});
test("objectionable -> objection", function() {deepEqual( Stem("objectionable"), "objection");});
test("objections -> object", function() {deepEqual( Stem("objections"), "object");});
test("objects -> object", function() {deepEqual( Stem("objects"), "object");});
test("objet -> objet", function() {deepEqual( Stem("objet"), "objet");});
test("oblation -> oblat", function() {deepEqual( Stem("oblation"), "oblat");});
test("oblations -> oblat", function() {deepEqual( Stem("oblations"), "oblat");});
test("obligation -> oblig", function() {deepEqual( Stem("obligation"), "oblig");});
test("obligations -> oblig", function() {deepEqual( Stem("obligations"), "oblig");});
test("obliged -> oblig", function() {deepEqual( Stem("obliged"), "oblig");});
test("obliges -> oblig", function() {deepEqual( Stem("obliges"), "oblig");});
test("obliging -> oblig", function() {deepEqual( Stem("obliging"), "oblig");});
test("oblique -> obliqu", function() {deepEqual( Stem("oblique"), "obliqu");});
test("obliquity -> obliqu", function() {deepEqual( Stem("obliquity"), "obliqu");});
test("obliterated -> obliter", function() {deepEqual( Stem("obliterated"), "obliter");});
test("oblivion -> oblivion", function() {deepEqual( Stem("oblivion"), "oblivion");});
test("oblivious -> oblivi", function() {deepEqual( Stem("oblivious"), "oblivi");});
test("obloquy -> obloqui", function() {deepEqual( Stem("obloquy"), "obloqui");});
test("obscene -> obscen", function() {deepEqual( Stem("obscene"), "obscen");});
test("obscenely -> obscen", function() {deepEqual( Stem("obscenely"), "obscen");});
test("obscur -> obscur", function() {deepEqual( Stem("obscur"), "obscur");});
test("obscure -> obscur", function() {deepEqual( Stem("obscure"), "obscur");});
test("obscured -> obscur", function() {deepEqual( Stem("obscured"), "obscur");});
test("obscurely -> obscur", function() {deepEqual( Stem("obscurely"), "obscur");});
test("obscures -> obscur", function() {deepEqual( Stem("obscures"), "obscur");});
test("obscuring -> obscur", function() {deepEqual( Stem("obscuring"), "obscur");});
test("obscurity -> obscur", function() {deepEqual( Stem("obscurity"), "obscur");});
test("obsequies -> obsequi", function() {deepEqual( Stem("obsequies"), "obsequi");});
test("obsequious -> obsequi", function() {deepEqual( Stem("obsequious"), "obsequi");});
test("obsequiously -> obsequi", function() {deepEqual( Stem("obsequiously"), "obsequi");});
test("obsequiousness -> obsequi", function() {deepEqual( Stem("obsequiousness"), "obsequi");});
test("observ -> observ", function() {deepEqual( Stem("observ"), "observ");});
test("observance -> observ", function() {deepEqual( Stem("observance"), "observ");});
test("observances -> observ", function() {deepEqual( Stem("observances"), "observ");});
test("observancy -> observ", function() {deepEqual( Stem("observancy"), "observ");});
test("observant -> observ", function() {deepEqual( Stem("observant"), "observ");});
test("observants -> observ", function() {deepEqual( Stem("observants"), "observ");});
test("observation -> observ", function() {deepEqual( Stem("observation"), "observ");});
test("observations -> observ", function() {deepEqual( Stem("observations"), "observ");});
test("observe -> observ", function() {deepEqual( Stem("observe"), "observ");});
test("observed -> observ", function() {deepEqual( Stem("observed"), "observ");});
test("observer -> observ", function() {deepEqual( Stem("observer"), "observ");});
test("observers -> observ", function() {deepEqual( Stem("observers"), "observ");});
test("observing -> observ", function() {deepEqual( Stem("observing"), "observ");});
test("observingly -> observingli", function() {deepEqual( Stem("observingly"), "observingli");});
test("obsque -> obsqu", function() {deepEqual( Stem("obsque"), "obsqu");});
test("obstacle -> obstacl", function() {deepEqual( Stem("obstacle"), "obstacl");});
test("obstacles -> obstacl", function() {deepEqual( Stem("obstacles"), "obstacl");});
test("obstinacy -> obstinaci", function() {deepEqual( Stem("obstinacy"), "obstinaci");});
test("obstinate -> obstin", function() {deepEqual( Stem("obstinate"), "obstin");});
test("obstinately -> obstin", function() {deepEqual( Stem("obstinately"), "obstin");});
test("obstruct -> obstruct", function() {deepEqual( Stem("obstruct"), "obstruct");});
test("obstruction -> obstruct", function() {deepEqual( Stem("obstruction"), "obstruct");});
test("obstructions -> obstruct", function() {deepEqual( Stem("obstructions"), "obstruct");});
test("obtain -> obtain", function() {deepEqual( Stem("obtain"), "obtain");});
test("obtained -> obtain", function() {deepEqual( Stem("obtained"), "obtain");});
test("obtaining -> obtain", function() {deepEqual( Stem("obtaining"), "obtain");});
test("obtuse -> obtus", function() {deepEqual( Stem("obtuse"), "obtus");});
test("occasion -> occas", function() {deepEqual( Stem("occasion"), "occas");});
test("occasional -> occasion", function() {deepEqual( Stem("occasional"), "occasion");});
test("occasionally -> occasion", function() {deepEqual( Stem("occasionally"), "occasion");});
test("occasioned -> occas", function() {deepEqual( Stem("occasioned"), "occas");});
test("occasions -> occas", function() {deepEqual( Stem("occasions"), "occas");});
test("occident -> occid", function() {deepEqual( Stem("occident"), "occid");});
test("occidental -> occident", function() {deepEqual( Stem("occidental"), "occident");});
test("occulted -> occult", function() {deepEqual( Stem("occulted"), "occult");});
test("occupant -> occup", function() {deepEqual( Stem("occupant"), "occup");});
test("occupat -> occupat", function() {deepEqual( Stem("occupat"), "occupat");});
test("occupation -> occup", function() {deepEqual( Stem("occupation"), "occup");});
test("occupations -> occup", function() {deepEqual( Stem("occupations"), "occup");});
test("occupied -> occupi", function() {deepEqual( Stem("occupied"), "occupi");});
test("occupier -> occupi", function() {deepEqual( Stem("occupier"), "occupi");});
test("occupies -> occupi", function() {deepEqual( Stem("occupies"), "occupi");});
test("occupy -> occupi", function() {deepEqual( Stem("occupy"), "occupi");});
test("occupying -> occupi", function() {deepEqual( Stem("occupying"), "occupi");});
test("occur -> occur", function() {deepEqual( Stem("occur"), "occur");});
test("occurred -> occur", function() {deepEqual( Stem("occurred"), "occur");});
test("occurrence -> occurr", function() {deepEqual( Stem("occurrence"), "occurr");});
test("occurrences -> occurr", function() {deepEqual( Stem("occurrences"), "occurr");});
test("occurrents -> occurr", function() {deepEqual( Stem("occurrents"), "occurr");});
test("occurring -> occur", function() {deepEqual( Stem("occurring"), "occur");});
test("occurs -> occur", function() {deepEqual( Stem("occurs"), "occur");});
test("ocean -> ocean", function() {deepEqual( Stem("ocean"), "ocean");});
test("oceans -> ocean", function() {deepEqual( Stem("oceans"), "ocean");});
test("ochterlony -> ochterloni", function() {deepEqual( Stem("ochterlony"), "ochterloni");});
test("octavia -> octavia", function() {deepEqual( Stem("octavia"), "octavia");});
test("octavius -> octaviu", function() {deepEqual( Stem("octavius"), "octaviu");});
test("october -> octob", function() {deepEqual( Stem("october"), "octob");});
test("ocular -> ocular", function() {deepEqual( Stem("ocular"), "ocular");});
test("od -> od", function() {deepEqual( Stem("od"), "od");});
test("odalisques -> odalisqu", function() {deepEqual( Stem("odalisques"), "odalisqu");});
test("odd -> odd", function() {deepEqual( Stem("odd"), "odd");});
test("oddest -> oddest", function() {deepEqual( Stem("oddest"), "oddest");});
test("oddly -> oddli", function() {deepEqual( Stem("oddly"), "oddli");});
test("odds -> odd", function() {deepEqual( Stem("odds"), "odd");});
test("ode -> od", function() {deepEqual( Stem("ode"), "od");});
test("odes -> od", function() {deepEqual( Stem("odes"), "od");});
test("odious -> odiou", function() {deepEqual( Stem("odious"), "odiou");});
test("odoriferous -> odorifer", function() {deepEqual( Stem("odoriferous"), "odorifer");});
test("odorous -> odor", function() {deepEqual( Stem("odorous"), "odor");});
test("odour -> odour", function() {deepEqual( Stem("odour"), "odour");});
test("odours -> odour", function() {deepEqual( Stem("odours"), "odour");});
test("ods -> od", function() {deepEqual( Stem("ods"), "od");});
test("oeil -> oeil", function() {deepEqual( Stem("oeil"), "oeil");});
test("oeillades -> oeillad", function() {deepEqual( Stem("oeillades"), "oeillad");});
test("oes -> oe", function() {deepEqual( Stem("oes"), "oe");});
test("oeuvres -> oeuvr", function() {deepEqual( Stem("oeuvres"), "oeuvr");});
test("of -> of", function() {deepEqual( Stem("of"), "of");});
test("ofephesus -> ofephesu", function() {deepEqual( Stem("ofephesus"), "ofephesu");});
test("off -> off", function() {deepEqual( Stem("off"), "off");});
test("offal -> offal", function() {deepEqual( Stem("offal"), "offal");});
test("offence -> offenc", function() {deepEqual( Stem("offence"), "offenc");});
test("offenceful -> offenc", function() {deepEqual( Stem("offenceful"), "offenc");});
test("offences -> offenc", function() {deepEqual( Stem("offences"), "offenc");});
test("offend -> offend", function() {deepEqual( Stem("offend"), "offend");});
test("offended -> offend", function() {deepEqual( Stem("offended"), "offend");});
test("offendendo -> offendendo", function() {deepEqual( Stem("offendendo"), "offendendo");});
test("offender -> offend", function() {deepEqual( Stem("offender"), "offend");});
test("offenders -> offend", function() {deepEqual( Stem("offenders"), "offend");});
test("offendeth -> offendeth", function() {deepEqual( Stem("offendeth"), "offendeth");});
test("offending -> offend", function() {deepEqual( Stem("offending"), "offend");});
test("offendress -> offendress", function() {deepEqual( Stem("offendress"), "offendress");});
test("offends -> offend", function() {deepEqual( Stem("offends"), "offend");});
test("offense -> offens", function() {deepEqual( Stem("offense"), "offens");});
test("offenseless -> offenseless", function() {deepEqual( Stem("offenseless"), "offenseless");});
test("offenses -> offens", function() {deepEqual( Stem("offenses"), "offens");});
test("offensive -> offens", function() {deepEqual( Stem("offensive"), "offens");});
test("offer -> offer", function() {deepEqual( Stem("offer"), "offer");});
test("offered -> offer", function() {deepEqual( Stem("offered"), "offer");});
test("offering -> offer", function() {deepEqual( Stem("offering"), "offer");});
test("offerings -> offer", function() {deepEqual( Stem("offerings"), "offer");});
test("offers -> offer", function() {deepEqual( Stem("offers"), "offer");});
test("offert -> offert", function() {deepEqual( Stem("offert"), "offert");});
test("offhand -> offhand", function() {deepEqual( Stem("offhand"), "offhand");});
test("offic -> offic", function() {deepEqual( Stem("offic"), "offic");});
test("office -> offic", function() {deepEqual( Stem("office"), "offic");});
test("officed -> offic", function() {deepEqual( Stem("officed"), "offic");});
test("officer -> offic", function() {deepEqual( Stem("officer"), "offic");});
test("officers -> offic", function() {deepEqual( Stem("officers"), "offic");});
test("offices -> offic", function() {deepEqual( Stem("offices"), "offic");});
test("official -> offici", function() {deepEqual( Stem("official"), "offici");});
test("officials -> offici", function() {deepEqual( Stem("officials"), "offici");});
test("officiated -> offici", function() {deepEqual( Stem("officiated"), "offici");});
test("officiating -> offici", function() {deepEqual( Stem("officiating"), "offici");});
test("officious -> offici", function() {deepEqual( Stem("officious"), "offici");});
test("offspring -> offspr", function() {deepEqual( Stem("offspring"), "offspr");});
test("oft -> oft", function() {deepEqual( Stem("oft"), "oft");});
test("often -> often", function() {deepEqual( Stem("often"), "often");});
test("oftener -> often", function() {deepEqual( Stem("oftener"), "often");});
test("oftentimes -> oftentim", function() {deepEqual( Stem("oftentimes"), "oftentim");});
test("ogle -> ogl", function() {deepEqual( Stem("ogle"), "ogl");});
test("ogling -> ogl", function() {deepEqual( Stem("ogling"), "ogl");});
test("ogres -> ogr", function() {deepEqual( Stem("ogres"), "ogr");});
test("oh -> oh", function() {deepEqual( Stem("oh"), "oh");});
test("oho -> oho", function() {deepEqual( Stem("oho"), "oho");});
test("oi -> oi", function() {deepEqual( Stem("oi"), "oi");});
test("oil -> oil", function() {deepEqual( Stem("oil"), "oil");});
test("oiled -> oil", function() {deepEqual( Stem("oiled"), "oil");});
test("oilmen -> oilmen", function() {deepEqual( Stem("oilmen"), "oilmen");});
test("oils -> oil", function() {deepEqual( Stem("oils"), "oil");});
test("oilskin -> oilskin", function() {deepEqual( Stem("oilskin"), "oilskin");});
test("oily -> oili", function() {deepEqual( Stem("oily"), "oili");});
test("old -> old", function() {deepEqual( Stem("old"), "old");});
test("oldcastle -> oldcastl", function() {deepEqual( Stem("oldcastle"), "oldcastl");});
test("olden -> olden", function() {deepEqual( Stem("olden"), "olden");});
test("oldened -> olden", function() {deepEqual( Stem("oldened"), "olden");});
test("older -> older", function() {deepEqual( Stem("older"), "older");});
test("oldest -> oldest", function() {deepEqual( Stem("oldest"), "oldest");});
test("oldish -> oldish", function() {deepEqual( Stem("oldish"), "oldish");});
test("oldness -> old", function() {deepEqual( Stem("oldness"), "old");});
test("olive -> oliv", function() {deepEqual( Stem("olive"), "oliv");});
test("oliver -> oliv", function() {deepEqual( Stem("oliver"), "oliv");});
test("olivers -> oliv", function() {deepEqual( Stem("olivers"), "oliv");});
test("olives -> oliv", function() {deepEqual( Stem("olives"), "oliv");});
test("olivia -> olivia", function() {deepEqual( Stem("olivia"), "olivia");});
test("olympian -> olympian", function() {deepEqual( Stem("olympian"), "olympian");});
test("olympus -> olympu", function() {deepEqual( Stem("olympus"), "olympu");});
test("oman -> oman", function() {deepEqual( Stem("oman"), "oman");});
test("omans -> oman", function() {deepEqual( Stem("omans"), "oman");});
test("ombre -> ombr", function() {deepEqual( Stem("ombre"), "ombr");});
test("omen -> omen", function() {deepEqual( Stem("omen"), "omen");});
test("ominous -> omin", function() {deepEqual( Stem("ominous"), "omin");});
test("omission -> omiss", function() {deepEqual( Stem("omission"), "omiss");});
test("omit -> omit", function() {deepEqual( Stem("omit"), "omit");});
test("omittance -> omitt", function() {deepEqual( Stem("omittance"), "omitt");});
test("omitted -> omit", function() {deepEqual( Stem("omitted"), "omit");});
test("omitting -> omit", function() {deepEqual( Stem("omitting"), "omit");});
test("omne -> omn", function() {deepEqual( Stem("omne"), "omn");});
test("omnes -> omn", function() {deepEqual( Stem("omnes"), "omn");});
test("omnibus -> omnibu", function() {deepEqual( Stem("omnibus"), "omnibu");});
test("omnipotent -> omnipot", function() {deepEqual( Stem("omnipotent"), "omnipot");});
test("omniscience -> omnisci", function() {deepEqual( Stem("omniscience"), "omnisci");});
test("omnium -> omnium", function() {deepEqual( Stem("omnium"), "omnium");});
test("omphale -> omphal", function() {deepEqual( Stem("omphale"), "omphal");});
test("on -> on", function() {deepEqual( Stem("on"), "on");});
test("once -> onc", function() {deepEqual( Stem("once"), "onc");});
test("oncle -> oncl", function() {deepEqual( Stem("oncle"), "oncl");});
test("one -> on", function() {deepEqual( Stem("one"), "on");});
test("onerous -> oner", function() {deepEqual( Stem("onerous"), "oner");});
test("ones -> on", function() {deepEqual( Stem("ones"), "on");});
test("oneyers -> oney", function() {deepEqual( Stem("oneyers"), "oney");});
test("ongles -> ongl", function() {deepEqual( Stem("ongles"), "ongl");});
test("onion -> onion", function() {deepEqual( Stem("onion"), "onion");});
test("onions -> onion", function() {deepEqual( Stem("onions"), "onion");});
test("only -> onli", function() {deepEqual( Stem("only"), "onli");});
test("onset -> onset", function() {deepEqual( Stem("onset"), "onset");});
test("ont -> ont", function() {deepEqual( Stem("ont"), "ont");});
test("onto -> onto", function() {deepEqual( Stem("onto"), "onto");});
test("ontrys -> ontri", function() {deepEqual( Stem("ontrys"), "ontri");});
test("onward -> onward", function() {deepEqual( Stem("onward"), "onward");});
test("onwards -> onward", function() {deepEqual( Stem("onwards"), "onward");});
test("oo -> oo", function() {deepEqual( Stem("oo"), "oo");});
test("ootiful -> ooti", function() {deepEqual( Stem("ootiful"), "ooti");});
test("ooze -> ooz", function() {deepEqual( Stem("ooze"), "ooz");});
test("oozes -> ooz", function() {deepEqual( Stem("oozes"), "ooz");});
test("oozy -> oozi", function() {deepEqual( Stem("oozy"), "oozi");});
test("op -> op", function() {deepEqual( Stem("op"), "op");});
test("opal -> opal", function() {deepEqual( Stem("opal"), "opal");});
test("ope -> op", function() {deepEqual( Stem("ope"), "op");});
test("open -> open", function() {deepEqual( Stem("open"), "open");});
test("opened -> open", function() {deepEqual( Stem("opened"), "open");});
test("opener -> open", function() {deepEqual( Stem("opener"), "open");});
test("opening -> open", function() {deepEqual( Stem("opening"), "open");});
test("openings -> open", function() {deepEqual( Stem("openings"), "open");});
test("openly -> openli", function() {deepEqual( Stem("openly"), "openli");});
test("openness -> open", function() {deepEqual( Stem("openness"), "open");});
test("opens -> open", function() {deepEqual( Stem("opens"), "open");});
test("opera -> opera", function() {deepEqual( Stem("opera"), "opera");});
test("operant -> oper", function() {deepEqual( Stem("operant"), "oper");});
test("operas -> opera", function() {deepEqual( Stem("operas"), "opera");});
test("operate -> oper", function() {deepEqual( Stem("operate"), "oper");});
test("operated -> oper", function() {deepEqual( Stem("operated"), "oper");});
test("operating -> oper", function() {deepEqual( Stem("operating"), "oper");});
test("operation -> oper", function() {deepEqual( Stem("operation"), "oper");});
test("operational -> oper", function() {deepEqual( Stem("operational"), "oper");});
test("operationally -> operation", function() {deepEqual( Stem("operationally"), "operation");});
test("operations -> oper", function() {deepEqual( Stem("operations"), "oper");});
test("operative -> oper", function() {deepEqual( Stem("operative"), "oper");});
test("opes -> op", function() {deepEqual( Stem("opes"), "op");});
test("oph -> oph", function() {deepEqual( Stem("oph"), "oph");});
test("ophalia -> ophalia", function() {deepEqual( Stem("ophalia"), "ophalia");});
test("ophelia -> ophelia", function() {deepEqual( Stem("ophelia"), "ophelia");});
test("ophicleides -> ophicleid", function() {deepEqual( Stem("ophicleides"), "ophicleid");});
test("opining -> opin", function() {deepEqual( Stem("opining"), "opin");});
test("opinion -> opinion", function() {deepEqual( Stem("opinion"), "opinion");});
test("opinions -> opinion", function() {deepEqual( Stem("opinions"), "opinion");});
test("opium -> opium", function() {deepEqual( Stem("opium"), "opium");});
test("oporto -> oporto", function() {deepEqual( Stem("oporto"), "oporto");});
test("opponent -> oppon", function() {deepEqual( Stem("opponent"), "oppon");});
test("opponents -> oppon", function() {deepEqual( Stem("opponents"), "oppon");});
test("opportune -> opportun", function() {deepEqual( Stem("opportune"), "opportun");});
test("opportunely -> opportun", function() {deepEqual( Stem("opportunely"), "opportun");});
test("opportunities -> opportun", function() {deepEqual( Stem("opportunities"), "opportun");});
test("opportunity -> opportun", function() {deepEqual( Stem("opportunity"), "opportun");});
test("oppos -> oppo", function() {deepEqual( Stem("oppos"), "oppo");});
test("oppose -> oppos", function() {deepEqual( Stem("oppose"), "oppos");});
test("opposed -> oppos", function() {deepEqual( Stem("opposed"), "oppos");});
test("opposeless -> opposeless", function() {deepEqual( Stem("opposeless"), "opposeless");});
test("opposer -> oppos", function() {deepEqual( Stem("opposer"), "oppos");});
test("opposers -> oppos", function() {deepEqual( Stem("opposers"), "oppos");});
test("opposes -> oppos", function() {deepEqual( Stem("opposes"), "oppos");});
test("opposing -> oppos", function() {deepEqual( Stem("opposing"), "oppos");});
test("opposite -> opposit", function() {deepEqual( Stem("opposite"), "opposit");});
test("opposites -> opposit", function() {deepEqual( Stem("opposites"), "opposit");});
test("opposition -> opposit", function() {deepEqual( Stem("opposition"), "opposit");});
test("oppositions -> opposit", function() {deepEqual( Stem("oppositions"), "opposit");});
test("oppress -> oppress", function() {deepEqual( Stem("oppress"), "oppress");});
test("oppressed -> oppress", function() {deepEqual( Stem("oppressed"), "oppress");});
test("oppresses -> oppress", function() {deepEqual( Stem("oppresses"), "oppress");});
test("oppresseth -> oppresseth", function() {deepEqual( Stem("oppresseth"), "oppresseth");});
test("oppressing -> oppress", function() {deepEqual( Stem("oppressing"), "oppress");});
test("oppression -> oppress", function() {deepEqual( Stem("oppression"), "oppress");});
test("oppressor -> oppressor", function() {deepEqual( Stem("oppressor"), "oppressor");});
test("opprest -> opprest", function() {deepEqual( Stem("opprest"), "opprest");});
test("opprobriously -> opprobri", function() {deepEqual( Stem("opprobriously"), "opprobri");});
test("oppugnancy -> oppugn", function() {deepEqual( Stem("oppugnancy"), "oppugn");});
test("optimus -> optimu", function() {deepEqual( Stem("optimus"), "optimu");});
test("opulency -> opul", function() {deepEqual( Stem("opulency"), "opul");});
test("opulent -> opul", function() {deepEqual( Stem("opulent"), "opul");});
test("or -> or", function() {deepEqual( Stem("or"), "or");});
test("oracle -> oracl", function() {deepEqual( Stem("oracle"), "oracl");});
test("oracles -> oracl", function() {deepEqual( Stem("oracles"), "oracl");});
test("orange -> orang", function() {deepEqual( Stem("orange"), "orang");});
test("oration -> orat", function() {deepEqual( Stem("oration"), "orat");});
test("orations -> orat", function() {deepEqual( Stem("orations"), "orat");});
test("orator -> orat", function() {deepEqual( Stem("orator"), "orat");});
test("oratorio -> oratorio", function() {deepEqual( Stem("oratorio"), "oratorio");});
test("oratorios -> oratorio", function() {deepEqual( Stem("oratorios"), "oratorio");});
test("orators -> orat", function() {deepEqual( Stem("orators"), "orat");});
test("oratory -> oratori", function() {deepEqual( Stem("oratory"), "oratori");});
test("orb -> orb", function() {deepEqual( Stem("orb"), "orb");});
test("orbed -> orb", function() {deepEqual( Stem("orbed"), "orb");});
test("orbs -> orb", function() {deepEqual( Stem("orbs"), "orb");});
test("orchard -> orchard", function() {deepEqual( Stem("orchard"), "orchard");});
test("orchards -> orchard", function() {deepEqual( Stem("orchards"), "orchard");});
test("orchestra -> orchestra", function() {deepEqual( Stem("orchestra"), "orchestra");});
test("ord -> ord", function() {deepEqual( Stem("ord"), "ord");});
test("ordain -> ordain", function() {deepEqual( Stem("ordain"), "ordain");});
test("ordained -> ordain", function() {deepEqual( Stem("ordained"), "ordain");});
test("ordaining -> ordain", function() {deepEqual( Stem("ordaining"), "ordain");});
test("ordeal -> ordeal", function() {deepEqual( Stem("ordeal"), "ordeal");});
test("order -> order", function() {deepEqual( Stem("order"), "order");});
test("ordered -> order", function() {deepEqual( Stem("ordered"), "order");});
test("ordering -> order", function() {deepEqual( Stem("ordering"), "order");});
test("orderless -> orderless", function() {deepEqual( Stem("orderless"), "orderless");});
test("orderly -> orderli", function() {deepEqual( Stem("orderly"), "orderli");});
test("orders -> order", function() {deepEqual( Stem("orders"), "order");});
test("ordinance -> ordin", function() {deepEqual( Stem("ordinance"), "ordin");});
test("ordinant -> ordin", function() {deepEqual( Stem("ordinant"), "ordin");});
test("ordinaries -> ordinari", function() {deepEqual( Stem("ordinaries"), "ordinari");});
test("ordinarily -> ordinarili", function() {deepEqual( Stem("ordinarily"), "ordinarili");});
test("ordinary -> ordinari", function() {deepEqual( Stem("ordinary"), "ordinari");});
test("ordnance -> ordnanc", function() {deepEqual( Stem("ordnance"), "ordnanc");});
test("ords -> ord", function() {deepEqual( Stem("ords"), "ord");});
test("ordure -> ordur", function() {deepEqual( Stem("ordure"), "ordur");});
test("ore -> or", function() {deepEqual( Stem("ore"), "or");});
test("organ -> organ", function() {deepEqual( Stem("organ"), "organ");});
test("organist -> organist", function() {deepEqual( Stem("organist"), "organist");});
test("organs -> organ", function() {deepEqual( Stem("organs"), "organ");});
test("orgillous -> orgil", function() {deepEqual( Stem("orgillous"), "orgil");});
test("orgy -> orgi", function() {deepEqual( Stem("orgy"), "orgi");});
test("orient -> orient", function() {deepEqual( Stem("orient"), "orient");});
test("oriental -> orient", function() {deepEqual( Stem("oriental"), "orient");});
test("orifex -> orifex", function() {deepEqual( Stem("orifex"), "orifex");});
test("origin -> origin", function() {deepEqual( Stem("origin"), "origin");});
test("original -> origin", function() {deepEqual( Stem("original"), "origin");});
test("originality -> origin", function() {deepEqual( Stem("originality"), "origin");});
test("originally -> origin", function() {deepEqual( Stem("originally"), "origin");});
test("orisons -> orison", function() {deepEqual( Stem("orisons"), "orison");});
test("ork -> ork", function() {deepEqual( Stem("ork"), "ork");});
test("orlando -> orlando", function() {deepEqual( Stem("orlando"), "orlando");});
test("orld -> orld", function() {deepEqual( Stem("orld"), "orld");});
test("orleans -> orlean", function() {deepEqual( Stem("orleans"), "orlean");});
test("ornament -> ornament", function() {deepEqual( Stem("ornament"), "ornament");});
test("ornamental -> ornament", function() {deepEqual( Stem("ornamental"), "ornament");});
test("ornamentation -> ornament", function() {deepEqual( Stem("ornamentation"), "ornament");});
test("ornamented -> ornament", function() {deepEqual( Stem("ornamented"), "ornament");});
test("ornaments -> ornament", function() {deepEqual( Stem("ornaments"), "ornament");});
test("orodes -> orod", function() {deepEqual( Stem("orodes"), "orod");});
test("orphan -> orphan", function() {deepEqual( Stem("orphan"), "orphan");});
test("orphans -> orphan", function() {deepEqual( Stem("orphans"), "orphan");});
test("orpheus -> orpheu", function() {deepEqual( Stem("orpheus"), "orpheu");});
test("orrery -> orreri", function() {deepEqual( Stem("orrery"), "orreri");});
test("orsino -> orsino", function() {deepEqual( Stem("orsino"), "orsino");});
test("orson -> orson", function() {deepEqual( Stem("orson"), "orson");});
test("ort -> ort", function() {deepEqual( Stem("ort"), "ort");});
test("orth -> orth", function() {deepEqual( Stem("orth"), "orth");});
test("orthodox -> orthodox", function() {deepEqual( Stem("orthodox"), "orthodox");});
test("orthography -> orthographi", function() {deepEqual( Stem("orthography"), "orthographi");});
test("orts -> ort", function() {deepEqual( Stem("orts"), "ort");});
test("orville -> orvil", function() {deepEqual( Stem("orville"), "orvil");});
test("os -> o", function() {deepEqual( Stem("os"), "o");});
test("osbaldiston -> osbaldiston", function() {deepEqual( Stem("osbaldiston"), "osbaldiston");});
test("osbin -> osbin", function() {deepEqual( Stem("osbin"), "osbin");});
test("osborne -> osborn", function() {deepEqual( Stem("osborne"), "osborn");});
test("osbornes -> osborn", function() {deepEqual( Stem("osbornes"), "osborn");});
test("oscorbidulchos -> oscorbidulcho", function() {deepEqual( Stem("oscorbidulchos"), "oscorbidulcho");});
test("osier -> osier", function() {deepEqual( Stem("osier"), "osier");});
test("osiers -> osier", function() {deepEqual( Stem("osiers"), "osier");});
test("osnaburgh -> osnaburgh", function() {deepEqual( Stem("osnaburgh"), "osnaburgh");});
test("osprey -> osprei", function() {deepEqual( Stem("osprey"), "osprei");});
test("osr -> osr", function() {deepEqual( Stem("osr"), "osr");});
test("osric -> osric", function() {deepEqual( Stem("osric"), "osric");});
test("ossa -> ossa", function() {deepEqual( Stem("ossa"), "ossa");});
test("osses -> oss", function() {deepEqual( Stem("osses"), "oss");});
test("ost -> ost", function() {deepEqual( Stem("ost"), "ost");});
test("ostend -> ostend", function() {deepEqual( Stem("ostend"), "ostend");});
test("ostent -> ostent", function() {deepEqual( Stem("ostent"), "ostent");});
test("ostentare -> ostentar", function() {deepEqual( Stem("ostentare"), "ostentar");});
test("ostentation -> ostent", function() {deepEqual( Stem("ostentation"), "ostent");});
test("ostentatiously -> ostentati", function() {deepEqual( Stem("ostentatiously"), "ostentati");});
test("ostents -> ostent", function() {deepEqual( Stem("ostents"), "ostent");});
test("ostler -> ostler", function() {deepEqual( Stem("ostler"), "ostler");});
test("ostlers -> ostler", function() {deepEqual( Stem("ostlers"), "ostler");});
test("ostrich -> ostrich", function() {deepEqual( Stem("ostrich"), "ostrich");});
test("osw -> osw", function() {deepEqual( Stem("osw"), "osw");});
test("oswald -> oswald", function() {deepEqual( Stem("oswald"), "oswald");});
test("otel -> otel", function() {deepEqual( Stem("otel"), "otel");});
test("othello -> othello", function() {deepEqual( Stem("othello"), "othello");});
test("other -> other", function() {deepEqual( Stem("other"), "other");});
test("othergates -> otherg", function() {deepEqual( Stem("othergates"), "otherg");});
test("others -> other", function() {deepEqual( Stem("others"), "other");});
test("otherwhere -> otherwher", function() {deepEqual( Stem("otherwhere"), "otherwher");});
test("otherwhiles -> otherwhil", function() {deepEqual( Stem("otherwhiles"), "otherwhil");});
test("otherwise -> otherwis", function() {deepEqual( Stem("otherwise"), "otherwis");});
test("otiosity -> otios", function() {deepEqual( Stem("otiosity"), "otios");});
test("otter -> otter", function() {deepEqual( Stem("otter"), "otter");});
test("ottoman -> ottoman", function() {deepEqual( Stem("ottoman"), "ottoman");});
test("ottomans -> ottoman", function() {deepEqual( Stem("ottomans"), "ottoman");});
test("ottomites -> ottomit", function() {deepEqual( Stem("ottomites"), "ottomit");});
test("oublie -> oubli", function() {deepEqual( Stem("oublie"), "oubli");});
test("ouches -> ouch", function() {deepEqual( Stem("ouches"), "ouch");});
test("ought -> ought", function() {deepEqual( Stem("ought"), "ought");});
test("oui -> oui", function() {deepEqual( Stem("oui"), "oui");});
test("ounce -> ounc", function() {deepEqual( Stem("ounce"), "ounc");});
test("ounces -> ounc", function() {deepEqual( Stem("ounces"), "ounc");});
test("ouphes -> ouph", function() {deepEqual( Stem("ouphes"), "ouph");});
test("our -> our", function() {deepEqual( Stem("our"), "our");});
test("ours -> our", function() {deepEqual( Stem("ours"), "our");});
test("ourself -> ourself", function() {deepEqual( Stem("ourself"), "ourself");});
test("ourselves -> ourselv", function() {deepEqual( Stem("ourselves"), "ourselv");});
test("ouse -> ous", function() {deepEqual( Stem("ouse"), "ous");});
test("ousel -> ousel", function() {deepEqual( Stem("ousel"), "ousel");});
test("oust -> oust", function() {deepEqual( Stem("oust"), "oust");});
test("ousted -> oust", function() {deepEqual( Stem("ousted"), "oust");});
test("out -> out", function() {deepEqual( Stem("out"), "out");});
test("outbids -> outbid", function() {deepEqual( Stem("outbids"), "outbid");});
test("outbrave -> outbrav", function() {deepEqual( Stem("outbrave"), "outbrav");});
test("outbraves -> outbrav", function() {deepEqual( Stem("outbraves"), "outbrav");});
test("outbreak -> outbreak", function() {deepEqual( Stem("outbreak"), "outbreak");});
test("outcast -> outcast", function() {deepEqual( Stem("outcast"), "outcast");});
test("outcries -> outcri", function() {deepEqual( Stem("outcries"), "outcri");});
test("outcry -> outcri", function() {deepEqual( Stem("outcry"), "outcri");});
test("outdar -> outdar", function() {deepEqual( Stem("outdar"), "outdar");});
test("outdare -> outdar", function() {deepEqual( Stem("outdare"), "outdar");});
test("outdares -> outdar", function() {deepEqual( Stem("outdares"), "outdar");});
test("outdone -> outdon", function() {deepEqual( Stem("outdone"), "outdon");});
test("outer -> outer", function() {deepEqual( Stem("outer"), "outer");});
test("outfac -> outfac", function() {deepEqual( Stem("outfac"), "outfac");});
test("outface -> outfac", function() {deepEqual( Stem("outface"), "outfac");});
test("outfaced -> outfac", function() {deepEqual( Stem("outfaced"), "outfac");});
test("outfacing -> outfac", function() {deepEqual( Stem("outfacing"), "outfac");});
test("outfit -> outfit", function() {deepEqual( Stem("outfit"), "outfit");});
test("outfits -> outfit", function() {deepEqual( Stem("outfits"), "outfit");});
test("outfly -> outfli", function() {deepEqual( Stem("outfly"), "outfli");});
test("outfrown -> outfrown", function() {deepEqual( Stem("outfrown"), "outfrown");});
test("outgo -> outgo", function() {deepEqual( Stem("outgo"), "outgo");});
test("outgoes -> outgo", function() {deepEqual( Stem("outgoes"), "outgo");});
test("outgoings -> outgo", function() {deepEqual( Stem("outgoings"), "outgo");});
test("outgrown -> outgrown", function() {deepEqual( Stem("outgrown"), "outgrown");});
test("outhouse -> outhous", function() {deepEqual( Stem("outhouse"), "outhous");});
test("outhouses -> outhous", function() {deepEqual( Stem("outhouses"), "outhous");});
test("outjest -> outjest", function() {deepEqual( Stem("outjest"), "outjest");});
test("outlaw -> outlaw", function() {deepEqual( Stem("outlaw"), "outlaw");});
test("outlawed -> outlaw", function() {deepEqual( Stem("outlawed"), "outlaw");});
test("outlawry -> outlawri", function() {deepEqual( Stem("outlawry"), "outlawri");});
test("outlaws -> outlaw", function() {deepEqual( Stem("outlaws"), "outlaw");});
test("outlay -> outlai", function() {deepEqual( Stem("outlay"), "outlai");});
test("outliv -> outliv", function() {deepEqual( Stem("outliv"), "outliv");});
test("outlive -> outliv", function() {deepEqual( Stem("outlive"), "outliv");});
test("outlives -> outliv", function() {deepEqual( Stem("outlives"), "outliv");});
test("outliving -> outliv", function() {deepEqual( Stem("outliving"), "outliv");});
test("outlook -> outlook", function() {deepEqual( Stem("outlook"), "outlook");});
test("outlustres -> outlustr", function() {deepEqual( Stem("outlustres"), "outlustr");});
test("outlying -> outli", function() {deepEqual( Stem("outlying"), "outli");});
test("outpoured -> outpour", function() {deepEqual( Stem("outpoured"), "outpour");});
test("outpouring -> outpour", function() {deepEqual( Stem("outpouring"), "outpour");});
test("outpourings -> outpour", function() {deepEqual( Stem("outpourings"), "outpour");});
test("outpriz -> outpriz", function() {deepEqual( Stem("outpriz"), "outpriz");});
test("outrage -> outrag", function() {deepEqual( Stem("outrage"), "outrag");});
test("outraged -> outrag", function() {deepEqual( Stem("outraged"), "outrag");});
test("outrageous -> outrag", function() {deepEqual( Stem("outrageous"), "outrag");});
test("outrageously -> outrag", function() {deepEqual( Stem("outrageously"), "outrag");});
test("outrages -> outrag", function() {deepEqual( Stem("outrages"), "outrag");});
test("outran -> outran", function() {deepEqual( Stem("outran"), "outran");});
test("outriders -> outrid", function() {deepEqual( Stem("outriders"), "outrid");});
test("outright -> outright", function() {deepEqual( Stem("outright"), "outright");});
test("outroar -> outroar", function() {deepEqual( Stem("outroar"), "outroar");});
test("outrun -> outrun", function() {deepEqual( Stem("outrun"), "outrun");});
test("outrunning -> outrun", function() {deepEqual( Stem("outrunning"), "outrun");});
test("outruns -> outrun", function() {deepEqual( Stem("outruns"), "outrun");});
test("outscold -> outscold", function() {deepEqual( Stem("outscold"), "outscold");});
test("outscorn -> outscorn", function() {deepEqual( Stem("outscorn"), "outscorn");});
test("outsell -> outsel", function() {deepEqual( Stem("outsell"), "outsel");});
test("outsells -> outsel", function() {deepEqual( Stem("outsells"), "outsel");});
test("outset -> outset", function() {deepEqual( Stem("outset"), "outset");});
test("outshone -> outshon", function() {deepEqual( Stem("outshone"), "outshon");});
test("outside -> outsid", function() {deepEqual( Stem("outside"), "outsid");});
test("outsides -> outsid", function() {deepEqual( Stem("outsides"), "outsid");});
test("outskirts -> outskirt", function() {deepEqual( Stem("outskirts"), "outskirt");});
test("outspeaks -> outspeak", function() {deepEqual( Stem("outspeaks"), "outspeak");});
test("outsport -> outsport", function() {deepEqual( Stem("outsport"), "outsport");});
test("outstanding -> outstand", function() {deepEqual( Stem("outstanding"), "outstand");});
test("outstare -> outstar", function() {deepEqual( Stem("outstare"), "outstar");});
test("outstay -> outstai", function() {deepEqual( Stem("outstay"), "outstai");});
test("outstood -> outstood", function() {deepEqual( Stem("outstood"), "outstood");});
test("outstretch -> outstretch", function() {deepEqual( Stem("outstretch"), "outstretch");});
test("outstretched -> outstretch", function() {deepEqual( Stem("outstretched"), "outstretch");});
test("outstrike -> outstrik", function() {deepEqual( Stem("outstrike"), "outstrik");});
test("outstrip -> outstrip", function() {deepEqual( Stem("outstrip"), "outstrip");});
test("outstripped -> outstrip", function() {deepEqual( Stem("outstripped"), "outstrip");});
test("outswear -> outswear", function() {deepEqual( Stem("outswear"), "outswear");});
test("outvenoms -> outvenom", function() {deepEqual( Stem("outvenoms"), "outvenom");});
test("outward -> outward", function() {deepEqual( Stem("outward"), "outward");});
test("outwardly -> outwardli", function() {deepEqual( Stem("outwardly"), "outwardli");});
test("outwards -> outward", function() {deepEqual( Stem("outwards"), "outward");});
test("outwear -> outwear", function() {deepEqual( Stem("outwear"), "outwear");});
test("outweighs -> outweigh", function() {deepEqual( Stem("outweighs"), "outweigh");});
test("outwent -> outwent", function() {deepEqual( Stem("outwent"), "outwent");});
test("outworks -> outwork", function() {deepEqual( Stem("outworks"), "outwork");});
test("outworn -> outworn", function() {deepEqual( Stem("outworn"), "outworn");});
test("outworths -> outworth", function() {deepEqual( Stem("outworths"), "outworth");});
test("oven -> oven", function() {deepEqual( Stem("oven"), "oven");});
test("over -> over", function() {deepEqual( Stem("over"), "over");});
test("overate -> over", function() {deepEqual( Stem("overate"), "over");});
test("overawe -> overaw", function() {deepEqual( Stem("overawe"), "overaw");});
test("overbear -> overbear", function() {deepEqual( Stem("overbear"), "overbear");});
test("overbearing -> overbear", function() {deepEqual( Stem("overbearing"), "overbear");});
test("overblown -> overblown", function() {deepEqual( Stem("overblown"), "overblown");});
test("overboard -> overboard", function() {deepEqual( Stem("overboard"), "overboard");});
test("overbold -> overbold", function() {deepEqual( Stem("overbold"), "overbold");});
test("overborne -> overborn", function() {deepEqual( Stem("overborne"), "overborn");});
test("overbulk -> overbulk", function() {deepEqual( Stem("overbulk"), "overbulk");});
test("overbuys -> overbui", function() {deepEqual( Stem("overbuys"), "overbui");});
test("overcame -> overcam", function() {deepEqual( Stem("overcame"), "overcam");});
test("overcast -> overcast", function() {deepEqual( Stem("overcast"), "overcast");});
test("overcharg -> overcharg", function() {deepEqual( Stem("overcharg"), "overcharg");});
test("overcharged -> overcharg", function() {deepEqual( Stem("overcharged"), "overcharg");});
test("overcome -> overcom", function() {deepEqual( Stem("overcome"), "overcom");});
test("overcomes -> overcom", function() {deepEqual( Stem("overcomes"), "overcom");});
test("overdone -> overdon", function() {deepEqual( Stem("overdone"), "overdon");});
test("overdrawn -> overdrawn", function() {deepEqual( Stem("overdrawn"), "overdrawn");});
test("overdressed -> overdress", function() {deepEqual( Stem("overdressed"), "overdress");});
test("overdue -> overdu", function() {deepEqual( Stem("overdue"), "overdu");});
test("overearnest -> overearnest", function() {deepEqual( Stem("overearnest"), "overearnest");});
test("overeaten -> overeaten", function() {deepEqual( Stem("overeaten"), "overeaten");});
test("overfar -> overfar", function() {deepEqual( Stem("overfar"), "overfar");});
test("overflow -> overflow", function() {deepEqual( Stem("overflow"), "overflow");});
test("overflowed -> overflow", function() {deepEqual( Stem("overflowed"), "overflow");});
test("overflowing -> overflow", function() {deepEqual( Stem("overflowing"), "overflow");});
test("overflown -> overflown", function() {deepEqual( Stem("overflown"), "overflown");});
test("overglance -> overgl", function() {deepEqual( Stem("overglance"), "overgl");});
test("overgo -> overgo", function() {deepEqual( Stem("overgo"), "overgo");});
test("overgone -> overgon", function() {deepEqual( Stem("overgone"), "overgon");});
test("overgorg -> overgorg", function() {deepEqual( Stem("overgorg"), "overgorg");});
test("overgrown -> overgrown", function() {deepEqual( Stem("overgrown"), "overgrown");});
test("overhauled -> overhaul", function() {deepEqual( Stem("overhauled"), "overhaul");});
test("overhead -> overhead", function() {deepEqual( Stem("overhead"), "overhead");});
test("overhear -> overhear", function() {deepEqual( Stem("overhear"), "overhear");});
test("overheard -> overheard", function() {deepEqual( Stem("overheard"), "overheard");});
test("overhold -> overhold", function() {deepEqual( Stem("overhold"), "overhold");});
test("overjoyed -> overjoi", function() {deepEqual( Stem("overjoyed"), "overjoi");});
test("overkind -> overkind", function() {deepEqual( Stem("overkind"), "overkind");});
test("overland -> overland", function() {deepEqual( Stem("overland"), "overland");});
test("overleather -> overleath", function() {deepEqual( Stem("overleather"), "overleath");});
test("overlive -> overl", function() {deepEqual( Stem("overlive"), "overl");});
test("overlook -> overlook", function() {deepEqual( Stem("overlook"), "overlook");});
test("overlooking -> overlook", function() {deepEqual( Stem("overlooking"), "overlook");});
test("overlooks -> overlook", function() {deepEqual( Stem("overlooks"), "overlook");});
test("overmaster -> overmast", function() {deepEqual( Stem("overmaster"), "overmast");});
test("overmounting -> overmount", function() {deepEqual( Stem("overmounting"), "overmount");});
test("overmuch -> overmuch", function() {deepEqual( Stem("overmuch"), "overmuch");});
test("overpass -> overpass", function() {deepEqual( Stem("overpass"), "overpass");});
test("overpeer -> overp", function() {deepEqual( Stem("overpeer"), "overp");});
test("overpeering -> overp", function() {deepEqual( Stem("overpeering"), "overp");});
test("overplus -> overplu", function() {deepEqual( Stem("overplus"), "overplu");});
test("overpower -> overpow", function() {deepEqual( Stem("overpower"), "overpow");});
test("overpowered -> overpow", function() {deepEqual( Stem("overpowered"), "overpow");});
test("overpowering -> overpow", function() {deepEqual( Stem("overpowering"), "overpow");});
test("overrated -> overr", function() {deepEqual( Stem("overrated"), "overr");});
test("overrul -> overrul", function() {deepEqual( Stem("overrul"), "overrul");});
test("overruled -> overrul", function() {deepEqual( Stem("overruled"), "overrul");});
test("overrun -> overrun", function() {deepEqual( Stem("overrun"), "overrun");});
test("overscutch -> overscutch", function() {deepEqual( Stem("overscutch"), "overscutch");});
test("overseers -> overs", function() {deepEqual( Stem("overseers"), "overs");});
test("overset -> overset", function() {deepEqual( Stem("overset"), "overset");});
test("overshades -> overshad", function() {deepEqual( Stem("overshades"), "overshad");});
test("overshine -> overshin", function() {deepEqual( Stem("overshine"), "overshin");});
test("overshines -> overshin", function() {deepEqual( Stem("overshines"), "overshin");});
test("overshot -> overshot", function() {deepEqual( Stem("overshot"), "overshot");});
test("oversights -> oversight", function() {deepEqual( Stem("oversights"), "oversight");});
test("overspread -> overspread", function() {deepEqual( Stem("overspread"), "overspread");});
test("overstain -> overstain", function() {deepEqual( Stem("overstain"), "overstain");});
test("overstrained -> overstrain", function() {deepEqual( Stem("overstrained"), "overstrain");});
test("overswear -> overswear", function() {deepEqual( Stem("overswear"), "overswear");});
test("overt -> overt", function() {deepEqual( Stem("overt"), "overt");});
test("overta -> overta", function() {deepEqual( Stem("overta"), "overta");});
test("overtake -> overtak", function() {deepEqual( Stem("overtake"), "overtak");});
test("overtaken -> overtaken", function() {deepEqual( Stem("overtaken"), "overtaken");});
test("overtaketh -> overtaketh", function() {deepEqual( Stem("overtaketh"), "overtaketh");});
test("overthrow -> overthrow", function() {deepEqual( Stem("overthrow"), "overthrow");});
test("overthrown -> overthrown", function() {deepEqual( Stem("overthrown"), "overthrown");});
test("overthrows -> overthrow", function() {deepEqual( Stem("overthrows"), "overthrow");});
test("overtook -> overtook", function() {deepEqual( Stem("overtook"), "overtook");});
test("overtopp -> overtopp", function() {deepEqual( Stem("overtopp"), "overtopp");});
test("overture -> overtur", function() {deepEqual( Stem("overture"), "overtur");});
test("overtures -> overtur", function() {deepEqual( Stem("overtures"), "overtur");});
test("overturn -> overturn", function() {deepEqual( Stem("overturn"), "overturn");});
test("overwatch -> overwatch", function() {deepEqual( Stem("overwatch"), "overwatch");});
test("overween -> overween", function() {deepEqual( Stem("overween"), "overween");});
test("overweening -> overween", function() {deepEqual( Stem("overweening"), "overween");});
test("overweigh -> overweigh", function() {deepEqual( Stem("overweigh"), "overweigh");});
test("overwhelm -> overwhelm", function() {deepEqual( Stem("overwhelm"), "overwhelm");});
test("overwhelmed -> overwhelm", function() {deepEqual( Stem("overwhelmed"), "overwhelm");});
test("overwhelming -> overwhelm", function() {deepEqual( Stem("overwhelming"), "overwhelm");});
test("overworn -> overworn", function() {deepEqual( Stem("overworn"), "overworn");});
test("ovid -> ovid", function() {deepEqual( Stem("ovid"), "ovid");});
test("ovidius -> ovidiu", function() {deepEqual( Stem("ovidius"), "ovidiu");});
test("ow -> ow", function() {deepEqual( Stem("ow"), "ow");});
test("owe -> ow", function() {deepEqual( Stem("owe"), "ow");});
test("owed -> ow", function() {deepEqual( Stem("owed"), "ow");});
test("owedst -> owedst", function() {deepEqual( Stem("owedst"), "owedst");});
test("owen -> owen", function() {deepEqual( Stem("owen"), "owen");});
test("owes -> ow", function() {deepEqual( Stem("owes"), "ow");});
test("owest -> owest", function() {deepEqual( Stem("owest"), "owest");});
test("oweth -> oweth", function() {deepEqual( Stem("oweth"), "oweth");});
test("owing -> ow", function() {deepEqual( Stem("owing"), "ow");});
test("owl -> owl", function() {deepEqual( Stem("owl"), "owl");});
test("owls -> owl", function() {deepEqual( Stem("owls"), "owl");});
test("own -> own", function() {deepEqual( Stem("own"), "own");});
test("owned -> own", function() {deepEqual( Stem("owned"), "own");});
test("owner -> owner", function() {deepEqual( Stem("owner"), "owner");});
test("owners -> owner", function() {deepEqual( Stem("owners"), "owner");});
test("owning -> own", function() {deepEqual( Stem("owning"), "own");});
test("owns -> own", function() {deepEqual( Stem("owns"), "own");});
test("owy -> owi", function() {deepEqual( Stem("owy"), "owi");});
test("ox -> ox", function() {deepEqual( Stem("ox"), "ox");});
test("oxen -> oxen", function() {deepEqual( Stem("oxen"), "oxen");});
test("oxford -> oxford", function() {deepEqual( Stem("oxford"), "oxford");});
test("oxfordshire -> oxfordshir", function() {deepEqual( Stem("oxfordshire"), "oxfordshir");});
test("oxlips -> oxlip", function() {deepEqual( Stem("oxlips"), "oxlip");});
test("oxonian -> oxonian", function() {deepEqual( Stem("oxonian"), "oxonian");});
test("oxonians -> oxonian", function() {deepEqual( Stem("oxonians"), "oxonian");});
test("oyes -> oy", function() {deepEqual( Stem("oyes"), "oy");});
test("oyster -> oyster", function() {deepEqual( Stem("oyster"), "oyster");});
test("oysters -> oyster", function() {deepEqual( Stem("oysters"), "oyster");});
test("oystherstown -> oystherstown", function() {deepEqual( Stem("oystherstown"), "oystherstown");});
test("oz -> oz", function() {deepEqual( Stem("oz"), "oz");});
test("p -> p", function() {deepEqual( Stem("p"), "p");});
test("pa -> pa", function() {deepEqual( Stem("pa"), "pa");});
test("pabble -> pabbl", function() {deepEqual( Stem("pabble"), "pabbl");});
test("pabylon -> pabylon", function() {deepEqual( Stem("pabylon"), "pabylon");});
test("pac -> pac", function() {deepEqual( Stem("pac"), "pac");});
test("pace -> pace", function() {deepEqual( Stem("pace"), "pace");});
test("paced -> pace", function() {deepEqual( Stem("paced"), "pace");});
test("paces -> pace", function() {deepEqual( Stem("paces"), "pace");});
test("pacified -> pacifi", function() {deepEqual( Stem("pacified"), "pacifi");});
test("pacify -> pacifi", function() {deepEqual( Stem("pacify"), "pacifi");});
test("pacing -> pace", function() {deepEqual( Stem("pacing"), "pace");});
test("pack -> pack", function() {deepEqual( Stem("pack"), "pack");});
test("package -> packag", function() {deepEqual( Stem("package"), "packag");});
test("packages -> packag", function() {deepEqual( Stem("packages"), "packag");});
test("packed -> pack", function() {deepEqual( Stem("packed"), "pack");});
test("packet -> packet", function() {deepEqual( Stem("packet"), "packet");});
test("packets -> packet", function() {deepEqual( Stem("packets"), "packet");});
test("packhorses -> packhors", function() {deepEqual( Stem("packhorses"), "packhors");});
test("packing -> pack", function() {deepEqual( Stem("packing"), "pack");});
test("packings -> pack", function() {deepEqual( Stem("packings"), "pack");});
test("packs -> pack", function() {deepEqual( Stem("packs"), "pack");});
test("packthread -> packthread", function() {deepEqual( Stem("packthread"), "packthread");});
test("pacorus -> pacoru", function() {deepEqual( Stem("pacorus"), "pacoru");});
test("paction -> paction", function() {deepEqual( Stem("paction"), "paction");});
test("pad -> pad", function() {deepEqual( Stem("pad"), "pad");});
test("padded -> pad", function() {deepEqual( Stem("padded"), "pad");});
test("padding -> pad", function() {deepEqual( Stem("padding"), "pad");});
test("paddington -> paddington", function() {deepEqual( Stem("paddington"), "paddington");});
test("paddle -> paddl", function() {deepEqual( Stem("paddle"), "paddl");});
test("paddling -> paddl", function() {deepEqual( Stem("paddling"), "paddl");});
test("paddock -> paddock", function() {deepEqual( Stem("paddock"), "paddock");});
test("padua -> padua", function() {deepEqual( Stem("padua"), "padua");});
test("pagan -> pagan", function() {deepEqual( Stem("pagan"), "pagan");});
test("pagans -> pagan", function() {deepEqual( Stem("pagans"), "pagan");});
test("page -> page", function() {deepEqual( Stem("page"), "page");});
test("pageant -> pageant", function() {deepEqual( Stem("pageant"), "pageant");});
test("pageants -> pageant", function() {deepEqual( Stem("pageants"), "pageant");});
test("pages -> page", function() {deepEqual( Stem("pages"), "page");});
test("pagoda -> pagoda", function() {deepEqual( Stem("pagoda"), "pagoda");});
test("pagody -> pagodi", function() {deepEqual( Stem("pagody"), "pagodi");});
test("pah -> pah", function() {deepEqual( Stem("pah"), "pah");});
test("paid -> paid", function() {deepEqual( Stem("paid"), "paid");});
test("pail -> pail", function() {deepEqual( Stem("pail"), "pail");});
test("pailfuls -> pail", function() {deepEqual( Stem("pailfuls"), "pail");});
test("pails -> pail", function() {deepEqual( Stem("pails"), "pail");});
test("pain -> pain", function() {deepEqual( Stem("pain"), "pain");});
test("pained -> pain", function() {deepEqual( Stem("pained"), "pain");});
test("painful -> pain", function() {deepEqual( Stem("painful"), "pain");});
test("painfully -> painfulli", function() {deepEqual( Stem("painfully"), "painfulli");});
test("painless -> painless", function() {deepEqual( Stem("painless"), "painless");});
test("pains -> pain", function() {deepEqual( Stem("pains"), "pain");});
test("paint -> paint", function() {deepEqual( Stem("paint"), "paint");});
test("painted -> paint", function() {deepEqual( Stem("painted"), "paint");});
test("painter -> painter", function() {deepEqual( Stem("painter"), "painter");});
test("painters -> painter", function() {deepEqual( Stem("painters"), "painter");});
test("painting -> paint", function() {deepEqual( Stem("painting"), "paint");});
test("paintings -> paint", function() {deepEqual( Stem("paintings"), "paint");});
test("paints -> paint", function() {deepEqual( Stem("paints"), "paint");});
test("pair -> pair", function() {deepEqual( Stem("pair"), "pair");});
test("paired -> pair", function() {deepEqual( Stem("paired"), "pair");});
test("pairs -> pair", function() {deepEqual( Stem("pairs"), "pair");});
test("pajock -> pajock", function() {deepEqual( Stem("pajock"), "pajock");});
test("pal -> pal", function() {deepEqual( Stem("pal"), "pal");});
test("palabras -> palabra", function() {deepEqual( Stem("palabras"), "palabra");});
test("palace -> palac", function() {deepEqual( Stem("palace"), "palac");});
test("palaces -> palac", function() {deepEqual( Stem("palaces"), "palac");});
test("palais -> palai", function() {deepEqual( Stem("palais"), "palai");});
test("palamedes -> palamed", function() {deepEqual( Stem("palamedes"), "palamed");});
test("palanquin -> palanquin", function() {deepEqual( Stem("palanquin"), "palanquin");});
test("palatable -> palat", function() {deepEqual( Stem("palatable"), "palat");});
test("palate -> palat", function() {deepEqual( Stem("palate"), "palat");});
test("palates -> palat", function() {deepEqual( Stem("palates"), "palat");});
test("palatinate -> palatin", function() {deepEqual( Stem("palatinate"), "palatin");});
test("palatine -> palatin", function() {deepEqual( Stem("palatine"), "palatin");});
test("palating -> palat", function() {deepEqual( Stem("palating"), "palat");});
test("pale -> pale", function() {deepEqual( Stem("pale"), "pale");});
test("paled -> pale", function() {deepEqual( Stem("paled"), "pale");});
test("palely -> pale", function() {deepEqual( Stem("palely"), "pale");});
test("paleness -> pale", function() {deepEqual( Stem("paleness"), "pale");});
test("paler -> paler", function() {deepEqual( Stem("paler"), "paler");});
test("palermo -> palermo", function() {deepEqual( Stem("palermo"), "palermo");});
test("pales -> pale", function() {deepEqual( Stem("pales"), "pale");});
test("palestine -> palestin", function() {deepEqual( Stem("palestine"), "palestin");});
test("palfrey -> palfrei", function() {deepEqual( Stem("palfrey"), "palfrei");});
test("palfreys -> palfrei", function() {deepEqual( Stem("palfreys"), "palfrei");});
test("palings -> pale", function() {deepEqual( Stem("palings"), "pale");});
test("palisadoes -> palisado", function() {deepEqual( Stem("palisadoes"), "palisado");});
test("pall -> pall", function() {deepEqual( Stem("pall"), "pall");});
test("pallabris -> pallabri", function() {deepEqual( Stem("pallabris"), "pallabri");});
test("pallas -> palla", function() {deepEqual( Stem("pallas"), "palla");});
test("palled -> pall", function() {deepEqual( Stem("palled"), "pall");});
test("pallets -> pallet", function() {deepEqual( Stem("pallets"), "pallet");});
test("pallid -> pallid", function() {deepEqual( Stem("pallid"), "pallid");});
test("pallor -> pallor", function() {deepEqual( Stem("pallor"), "pallor");});
test("palls -> pall", function() {deepEqual( Stem("palls"), "pall");});
test("palm -> palm", function() {deepEqual( Stem("palm"), "palm");});
test("palmer -> palmer", function() {deepEqual( Stem("palmer"), "palmer");});
test("palmers -> palmer", function() {deepEqual( Stem("palmers"), "palmer");});
test("palms -> palm", function() {deepEqual( Stem("palms"), "palm");});
test("palmy -> palmi", function() {deepEqual( Stem("palmy"), "palmi");});
test("palpable -> palpabl", function() {deepEqual( Stem("palpable"), "palpabl");});
test("palpitated -> palpit", function() {deepEqual( Stem("palpitated"), "palpit");});
test("palpitation -> palpit", function() {deepEqual( Stem("palpitation"), "palpit");});
test("palsied -> palsi", function() {deepEqual( Stem("palsied"), "palsi");});
test("palsies -> palsi", function() {deepEqual( Stem("palsies"), "palsi");});
test("palsy -> palsi", function() {deepEqual( Stem("palsy"), "palsi");});
test("palt -> palt", function() {deepEqual( Stem("palt"), "palt");});
test("palter -> palter", function() {deepEqual( Stem("palter"), "palter");});
test("paltry -> paltri", function() {deepEqual( Stem("paltry"), "paltri");});
test("paly -> pali", function() {deepEqual( Stem("paly"), "pali");});
test("palynological -> palynolog", function() {deepEqual( Stem("palynological"), "palynolog");});
test("palynologically -> palynolog", function() {deepEqual( Stem("palynologically"), "palynolog");});
test("palynologies -> palynologi", function() {deepEqual( Stem("palynologies"), "palynologi");});
test("palynology -> palynologi", function() {deepEqual( Stem("palynology"), "palynologi");});
test("pamby -> pambi", function() {deepEqual( Stem("pamby"), "pambi");});
test("pamp -> pamp", function() {deepEqual( Stem("pamp"), "pamp");});
test("pamper -> pamper", function() {deepEqual( Stem("pamper"), "pamper");});
test("pampered -> pamper", function() {deepEqual( Stem("pampered"), "pamper");});
test("pamphlet -> pamphlet", function() {deepEqual( Stem("pamphlet"), "pamphlet");});
test("pamphlets -> pamphlet", function() {deepEqual( Stem("pamphlets"), "pamphlet");});
test("pan -> pan", function() {deepEqual( Stem("pan"), "pan");});
test("pancackes -> pancack", function() {deepEqual( Stem("pancackes"), "pancack");});
test("pancake -> pancak", function() {deepEqual( Stem("pancake"), "pancak");});
test("pancakes -> pancak", function() {deepEqual( Stem("pancakes"), "pancak");});
test("pancras -> pancra", function() {deepEqual( Stem("pancras"), "pancra");});
test("pandar -> pandar", function() {deepEqual( Stem("pandar"), "pandar");});
test("pandars -> pandar", function() {deepEqual( Stem("pandars"), "pandar");});
test("pandarus -> pandaru", function() {deepEqual( Stem("pandarus"), "pandaru");});
test("pander -> pander", function() {deepEqual( Stem("pander"), "pander");});
test("panderly -> panderli", function() {deepEqual( Stem("panderly"), "panderli");});
test("panders -> pander", function() {deepEqual( Stem("panders"), "pander");});
test("pandulph -> pandulph", function() {deepEqual( Stem("pandulph"), "pandulph");});
test("pane -> pane", function() {deepEqual( Stem("pane"), "pane");});
test("panel -> panel", function() {deepEqual( Stem("panel"), "panel");});
test("panels -> panel", function() {deepEqual( Stem("panels"), "panel");});
test("panes -> pane", function() {deepEqual( Stem("panes"), "pane");});
test("pang -> pang", function() {deepEqual( Stem("pang"), "pang");});
test("panging -> pang", function() {deepEqual( Stem("panging"), "pang");});
test("pangs -> pang", function() {deepEqual( Stem("pangs"), "pang");});
test("panic -> panic", function() {deepEqual( Stem("panic"), "panic");});
test("pannier -> pannier", function() {deepEqual( Stem("pannier"), "pannier");});
test("pannonians -> pannonian", function() {deepEqual( Stem("pannonians"), "pannonian");});
test("panorama -> panorama", function() {deepEqual( Stem("panorama"), "panorama");});
test("pans -> pan", function() {deepEqual( Stem("pans"), "pan");});
test("pansa -> pansa", function() {deepEqual( Stem("pansa"), "pansa");});
test("pansies -> pansi", function() {deepEqual( Stem("pansies"), "pansi");});
test("pant -> pant", function() {deepEqual( Stem("pant"), "pant");});
test("pantaloon -> pantaloon", function() {deepEqual( Stem("pantaloon"), "pantaloon");});
test("pantaloons -> pantaloon", function() {deepEqual( Stem("pantaloons"), "pantaloon");});
test("pantechnicon -> pantechnicon", function() {deepEqual( Stem("pantechnicon"), "pantechnicon");});
test("panted -> pant", function() {deepEqual( Stem("panted"), "pant");});
test("pantheon -> pantheon", function() {deepEqual( Stem("pantheon"), "pantheon");});
test("panther -> panther", function() {deepEqual( Stem("panther"), "panther");});
test("panthino -> panthino", function() {deepEqual( Stem("panthino"), "panthino");});
test("panting -> pant", function() {deepEqual( Stem("panting"), "pant");});
test("pantingly -> pantingli", function() {deepEqual( Stem("pantingly"), "pantingli");});
test("pantler -> pantler", function() {deepEqual( Stem("pantler"), "pantler");});
test("pantomime -> pantomim", function() {deepEqual( Stem("pantomime"), "pantomim");});
test("pantry -> pantri", function() {deepEqual( Stem("pantry"), "pantri");});
test("pants -> pant", function() {deepEqual( Stem("pants"), "pant");});
test("paolo -> paolo", function() {deepEqual( Stem("paolo"), "paolo");});
test("pap -> pap", function() {deepEqual( Stem("pap"), "pap");});
test("papa -> papa", function() {deepEqual( Stem("papa"), "papa");});
test("papageno -> papageno", function() {deepEqual( Stem("papageno"), "papageno");});
test("papal -> papal", function() {deepEqual( Stem("papal"), "papal");});
test("papas -> papa", function() {deepEqual( Stem("papas"), "papa");});
test("paper -> paper", function() {deepEqual( Stem("paper"), "paper");});
test("papers -> paper", function() {deepEqual( Stem("papers"), "paper");});
test("paphlagonia -> paphlagonia", function() {deepEqual( Stem("paphlagonia"), "paphlagonia");});
test("paphos -> papho", function() {deepEqual( Stem("paphos"), "papho");});
test("papillon -> papillon", function() {deepEqual( Stem("papillon"), "papillon");});
test("papillotes -> papillot", function() {deepEqual( Stem("papillotes"), "papillot");});
test("papist -> papist", function() {deepEqual( Stem("papist"), "papist");});
test("papoosh -> papoosh", function() {deepEqual( Stem("papoosh"), "papoosh");});
test("paps -> pap", function() {deepEqual( Stem("paps"), "pap");});
test("par -> par", function() {deepEqual( Stem("par"), "par");});
test("parable -> parabl", function() {deepEqual( Stem("parable"), "parabl");});
test("paracelsus -> paracelsu", function() {deepEqual( Stem("paracelsus"), "paracelsu");});
test("parade -> parad", function() {deepEqual( Stem("parade"), "parad");});
test("paraded -> parad", function() {deepEqual( Stem("paraded"), "parad");});
test("parades -> parad", function() {deepEqual( Stem("parades"), "parad");});
test("paradise -> paradis", function() {deepEqual( Stem("paradise"), "paradis");});
test("paradox -> paradox", function() {deepEqual( Stem("paradox"), "paradox");});
test("paradoxes -> paradox", function() {deepEqual( Stem("paradoxes"), "paradox");});
test("paragon -> paragon", function() {deepEqual( Stem("paragon"), "paragon");});
test("paragons -> paragon", function() {deepEqual( Stem("paragons"), "paragon");});
test("paragraph -> paragraph", function() {deepEqual( Stem("paragraph"), "paragraph");});
test("parallel -> parallel", function() {deepEqual( Stem("parallel"), "parallel");});
test("parallels -> parallel", function() {deepEqual( Stem("parallels"), "parallel");});
test("paramount -> paramount", function() {deepEqual( Stem("paramount"), "paramount");});
test("paramour -> paramour", function() {deepEqual( Stem("paramour"), "paramour");});
test("paramours -> paramour", function() {deepEqual( Stem("paramours"), "paramour");});
test("parapets -> parapet", function() {deepEqual( Stem("parapets"), "parapet");});
test("paraphernalia -> paraphernalia", function() {deepEqual( Stem("paraphernalia"), "paraphernalia");});
test("paraquito -> paraquito", function() {deepEqual( Stem("paraquito"), "paraquito");});
test("parasite -> parasit", function() {deepEqual( Stem("parasite"), "parasit");});
test("parasites -> parasit", function() {deepEqual( Stem("parasites"), "parasit");});
test("parasol -> parasol", function() {deepEqual( Stem("parasol"), "parasol");});
test("parbleu -> parbleu", function() {deepEqual( Stem("parbleu"), "parbleu");});
test("parc -> parc", function() {deepEqual( Stem("parc"), "parc");});
test("parca -> parca", function() {deepEqual( Stem("parca"), "parca");});
test("parcel -> parcel", function() {deepEqual( Stem("parcel"), "parcel");});
test("parcell -> parcel", function() {deepEqual( Stem("parcell"), "parcel");});
test("parcels -> parcel", function() {deepEqual( Stem("parcels"), "parcel");});
test("parch -> parch", function() {deepEqual( Stem("parch"), "parch");});
test("parched -> parch", function() {deepEqual( Stem("parched"), "parch");});
test("parching -> parch", function() {deepEqual( Stem("parching"), "parch");});
test("parchment -> parchment", function() {deepEqual( Stem("parchment"), "parchment");});
test("pard -> pard", function() {deepEqual( Stem("pard"), "pard");});
test("pardon -> pardon", function() {deepEqual( Stem("pardon"), "pardon");});
test("pardona -> pardona", function() {deepEqual( Stem("pardona"), "pardona");});
test("pardonable -> pardon", function() {deepEqual( Stem("pardonable"), "pardon");});
test("pardoned -> pardon", function() {deepEqual( Stem("pardoned"), "pardon");});
test("pardoner -> pardon", function() {deepEqual( Stem("pardoner"), "pardon");});
test("pardoning -> pardon", function() {deepEqual( Stem("pardoning"), "pardon");});
test("pardonne -> pardonn", function() {deepEqual( Stem("pardonne"), "pardonn");});
test("pardonner -> pardonn", function() {deepEqual( Stem("pardonner"), "pardonn");});
test("pardonnez -> pardonnez", function() {deepEqual( Stem("pardonnez"), "pardonnez");});
test("pardons -> pardon", function() {deepEqual( Stem("pardons"), "pardon");});
test("pare -> pare", function() {deepEqual( Stem("pare"), "pare");});
test("pared -> pare", function() {deepEqual( Stem("pared"), "pare");});
test("parel -> parel", function() {deepEqual( Stem("parel"), "parel");});
test("parent -> parent", function() {deepEqual( Stem("parent"), "parent");});
test("parentage -> parentag", function() {deepEqual( Stem("parentage"), "parentag");});
test("parental -> parent", function() {deepEqual( Stem("parental"), "parent");});
test("parenthetic -> parenthet", function() {deepEqual( Stem("parenthetic"), "parenthet");});
test("parents -> parent", function() {deepEqual( Stem("parents"), "parent");});
test("parfect -> parfect", function() {deepEqual( Stem("parfect"), "parfect");});
test("paring -> pare", function() {deepEqual( Stem("paring"), "pare");});
test("parings -> pare", function() {deepEqual( Stem("parings"), "pare");});
test("paris -> pari", function() {deepEqual( Stem("paris"), "pari");});
test("pariser -> paris", function() {deepEqual( Stem("pariser"), "paris");});
test("parish -> parish", function() {deepEqual( Stem("parish"), "parish");});
test("parishioners -> parishion", function() {deepEqual( Stem("parishioners"), "parishion");});
test("parisian -> parisian", function() {deepEqual( Stem("parisian"), "parisian");});
test("parisians -> parisian", function() {deepEqual( Stem("parisians"), "parisian");});
test("parisot -> parisot", function() {deepEqual( Stem("parisot"), "parisot");});
test("paritors -> paritor", function() {deepEqual( Stem("paritors"), "paritor");});
test("park -> park", function() {deepEqual( Stem("park"), "park");});
test("parker -> parker", function() {deepEqual( Stem("parker"), "parker");});
test("parks -> park", function() {deepEqual( Stem("parks"), "park");});
test("parle -> parl", function() {deepEqual( Stem("parle"), "parl");});
test("parler -> parler", function() {deepEqual( Stem("parler"), "parler");});
test("parles -> parl", function() {deepEqual( Stem("parles"), "parl");});
test("parley -> parlei", function() {deepEqual( Stem("parley"), "parlei");});
test("parleys -> parlei", function() {deepEqual( Stem("parleys"), "parlei");});
test("parlez -> parlez", function() {deepEqual( Stem("parlez"), "parlez");});
test("parliament -> parliament", function() {deepEqual( Stem("parliament"), "parliament");});
test("parliamentary -> parliamentari", function() {deepEqual( Stem("parliamentary"), "parliamentari");});
test("parlors -> parlor", function() {deepEqual( Stem("parlors"), "parlor");});
test("parlour -> parlour", function() {deepEqual( Stem("parlour"), "parlour");});
test("parlours -> parlour", function() {deepEqual( Stem("parlours"), "parlour");});
test("parlous -> parlou", function() {deepEqual( Stem("parlous"), "parlou");});
test("parmacity -> parmac", function() {deepEqual( Stem("parmacity"), "parmac");});
test("parole -> parol", function() {deepEqual( Stem("parole"), "parol");});
test("parolles -> parol", function() {deepEqual( Stem("parolles"), "parol");});
test("paroxysm -> paroxysm", function() {deepEqual( Stem("paroxysm"), "paroxysm");});
test("parquet -> parquet", function() {deepEqual( Stem("parquet"), "parquet");});
test("parricide -> parricid", function() {deepEqual( Stem("parricide"), "parricid");});
test("parricides -> parricid", function() {deepEqual( Stem("parricides"), "parricid");});
test("parried -> parri", function() {deepEqual( Stem("parried"), "parri");});
test("parrot -> parrot", function() {deepEqual( Stem("parrot"), "parrot");});
test("parrots -> parrot", function() {deepEqual( Stem("parrots"), "parrot");});
test("parry -> parri", function() {deepEqual( Stem("parry"), "parri");});
test("parsimonious -> parsimoni", function() {deepEqual( Stem("parsimonious"), "parsimoni");});
test("parsimony -> parsimoni", function() {deepEqual( Stem("parsimony"), "parsimoni");});
test("parsley -> parslei", function() {deepEqual( Stem("parsley"), "parslei");});
test("parsnips -> parsnip", function() {deepEqual( Stem("parsnips"), "parsnip");});
test("parson -> parson", function() {deepEqual( Stem("parson"), "parson");});
test("parsonage -> parsonag", function() {deepEqual( Stem("parsonage"), "parsonag");});
test("parsons -> parson", function() {deepEqual( Stem("parsons"), "parson");});
test("part -> part", function() {deepEqual( Stem("part"), "part");});
test("partake -> partak", function() {deepEqual( Stem("partake"), "partak");});
test("partaken -> partaken", function() {deepEqual( Stem("partaken"), "partaken");});
test("partaker -> partak", function() {deepEqual( Stem("partaker"), "partak");});
test("partakers -> partak", function() {deepEqual( Stem("partakers"), "partak");});
test("partaking -> partak", function() {deepEqual( Stem("partaking"), "partak");});
test("parted -> part", function() {deepEqual( Stem("parted"), "part");});
test("parthia -> parthia", function() {deepEqual( Stem("parthia"), "parthia");});
test("parthian -> parthian", function() {deepEqual( Stem("parthian"), "parthian");});
test("parthians -> parthian", function() {deepEqual( Stem("parthians"), "parthian");});
test("parti -> parti", function() {deepEqual( Stem("parti"), "parti");});
test("partial -> partial", function() {deepEqual( Stem("partial"), "partial");});
test("partiality -> partial", function() {deepEqual( Stem("partiality"), "partial");});
test("partialize -> partial", function() {deepEqual( Stem("partialize"), "partial");});
test("partially -> partial", function() {deepEqual( Stem("partially"), "partial");});
test("participate -> particip", function() {deepEqual( Stem("participate"), "particip");});
test("participated -> particip", function() {deepEqual( Stem("participated"), "particip");});
test("participation -> particip", function() {deepEqual( Stem("participation"), "particip");});
test("particle -> particl", function() {deepEqual( Stem("particle"), "particl");});
test("particles -> particl", function() {deepEqual( Stem("particles"), "particl");});
test("particular -> particular", function() {deepEqual( Stem("particular"), "particular");});
test("particularities -> particular", function() {deepEqual( Stem("particularities"), "particular");});
test("particularize -> particular", function() {deepEqual( Stem("particularize"), "particular");});
test("particularly -> particularli", function() {deepEqual( Stem("particularly"), "particularli");});
test("particulars -> particular", function() {deepEqual( Stem("particulars"), "particular");});
test("parties -> parti", function() {deepEqual( Stem("parties"), "parti");});
test("parting -> part", function() {deepEqual( Stem("parting"), "part");});
test("partisan -> partisan", function() {deepEqual( Stem("partisan"), "partisan");});
test("partisans -> partisan", function() {deepEqual( Stem("partisans"), "partisan");});
test("partition -> partit", function() {deepEqual( Stem("partition"), "partit");});
test("partizan -> partizan", function() {deepEqual( Stem("partizan"), "partizan");});
test("partlet -> partlet", function() {deepEqual( Stem("partlet"), "partlet");});
test("partly -> partli", function() {deepEqual( Stem("partly"), "partli");});
test("partner -> partner", function() {deepEqual( Stem("partner"), "partner");});
test("partners -> partner", function() {deepEqual( Stem("partners"), "partner");});
test("partnership -> partnership", function() {deepEqual( Stem("partnership"), "partnership");});
test("partook -> partook", function() {deepEqual( Stem("partook"), "partook");});
test("partridge -> partridg", function() {deepEqual( Stem("partridge"), "partridg");});
test("partridges -> partridg", function() {deepEqual( Stem("partridges"), "partridg");});
test("parts -> part", function() {deepEqual( Stem("parts"), "part");});
test("party -> parti", function() {deepEqual( Stem("party"), "parti");});
test("parvenue -> parvenu", function() {deepEqual( Stem("parvenue"), "parvenu");});
test("parvenus -> parvenu", function() {deepEqual( Stem("parvenus"), "parvenu");});
test("pas -> pa", function() {deepEqual( Stem("pas"), "pa");});
test("pash -> pash", function() {deepEqual( Stem("pash"), "pash");});
test("pasha -> pasha", function() {deepEqual( Stem("pasha"), "pasha");});
test("pashed -> pash", function() {deepEqual( Stem("pashed"), "pash");});
test("pashful -> pash", function() {deepEqual( Stem("pashful"), "pash");});
test("pass -> pass", function() {deepEqual( Stem("pass"), "pass");});
test("passable -> passabl", function() {deepEqual( Stem("passable"), "passabl");});
test("passado -> passado", function() {deepEqual( Stem("passado"), "passado");});
test("passage -> passag", function() {deepEqual( Stem("passage"), "passag");});
test("passages -> passag", function() {deepEqual( Stem("passages"), "passag");});
test("passant -> passant", function() {deepEqual( Stem("passant"), "passant");});
test("passed -> pass", function() {deepEqual( Stem("passed"), "pass");});
test("passenger -> passeng", function() {deepEqual( Stem("passenger"), "passeng");});
test("passengers -> passeng", function() {deepEqual( Stem("passengers"), "passeng");});
test("passers -> passer", function() {deepEqual( Stem("passers"), "passer");});
test("passes -> pass", function() {deepEqual( Stem("passes"), "pass");});
test("passeth -> passeth", function() {deepEqual( Stem("passeth"), "passeth");});
test("passing -> pass", function() {deepEqual( Stem("passing"), "pass");});
test("passio -> passio", function() {deepEqual( Stem("passio"), "passio");});
test("passion -> passion", function() {deepEqual( Stem("passion"), "passion");});
test("passionate -> passion", function() {deepEqual( Stem("passionate"), "passion");});
test("passionately -> passion", function() {deepEqual( Stem("passionately"), "passion");});
test("passioning -> passion", function() {deepEqual( Stem("passioning"), "passion");});
test("passions -> passion", function() {deepEqual( Stem("passions"), "passion");});
test("passive -> passiv", function() {deepEqual( Stem("passive"), "passiv");});
test("passport -> passport", function() {deepEqual( Stem("passport"), "passport");});
test("passy -> passi", function() {deepEqual( Stem("passy"), "passi");});
test("past -> past", function() {deepEqual( Stem("past"), "past");});
test("pasta -> pasta", function() {deepEqual( Stem("pasta"), "pasta");});
test("paste -> past", function() {deepEqual( Stem("paste"), "past");});
test("pasteboard -> pasteboard", function() {deepEqual( Stem("pasteboard"), "pasteboard");});
test("pasted -> past", function() {deepEqual( Stem("pasted"), "past");});
test("pasterns -> pastern", function() {deepEqual( Stem("pasterns"), "pastern");});
test("pasties -> pasti", function() {deepEqual( Stem("pasties"), "pasti");});
test("pastille -> pastil", function() {deepEqual( Stem("pastille"), "pastil");});
test("pastime -> pastim", function() {deepEqual( Stem("pastime"), "pastim");});
test("pastimes -> pastim", function() {deepEqual( Stem("pastimes"), "pastim");});
test("pasting -> past", function() {deepEqual( Stem("pasting"), "past");});
test("pastoral -> pastor", function() {deepEqual( Stem("pastoral"), "pastor");});
test("pastorally -> pastor", function() {deepEqual( Stem("pastorally"), "pastor");});
test("pastorals -> pastor", function() {deepEqual( Stem("pastorals"), "pastor");});
test("pastors -> pastor", function() {deepEqual( Stem("pastors"), "pastor");});
test("pastry -> pastri", function() {deepEqual( Stem("pastry"), "pastri");});
test("pasture -> pastur", function() {deepEqual( Stem("pasture"), "pastur");});
test("pastures -> pastur", function() {deepEqual( Stem("pastures"), "pastur");});
test("pasty -> pasti", function() {deepEqual( Stem("pasty"), "pasti");});
test("pat -> pat", function() {deepEqual( Stem("pat"), "pat");});
test("patay -> patai", function() {deepEqual( Stem("patay"), "patai");});
test("patch -> patch", function() {deepEqual( Stem("patch"), "patch");});
test("patched -> patch", function() {deepEqual( Stem("patched"), "patch");});
test("patchery -> patcheri", function() {deepEqual( Stem("patchery"), "patcheri");});
test("patches -> patch", function() {deepEqual( Stem("patches"), "patch");});
test("pate -> pate", function() {deepEqual( Stem("pate"), "pate");});
test("pated -> pate", function() {deepEqual( Stem("pated"), "pate");});
test("patent -> patent", function() {deepEqual( Stem("patent"), "patent");});
test("patents -> patent", function() {deepEqual( Stem("patents"), "patent");});
test("paternal -> patern", function() {deepEqual( Stem("paternal"), "patern");});
test("paternally -> patern", function() {deepEqual( Stem("paternally"), "patern");});
test("pates -> pate", function() {deepEqual( Stem("pates"), "pate");});
test("path -> path", function() {deepEqual( Stem("path"), "path");});
test("pathetic -> pathet", function() {deepEqual( Stem("pathetic"), "pathet");});
test("pathetical -> pathet", function() {deepEqual( Stem("pathetical"), "pathet");});
test("pathetically -> pathet", function() {deepEqual( Stem("pathetically"), "pathet");});
test("pathos -> patho", function() {deepEqual( Stem("pathos"), "patho");});
test("paths -> path", function() {deepEqual( Stem("paths"), "path");});
test("pathway -> pathwai", function() {deepEqual( Stem("pathway"), "pathwai");});
test("pathways -> pathwai", function() {deepEqual( Stem("pathways"), "pathwai");});
test("patience -> patienc", function() {deepEqual( Stem("patience"), "patienc");});
test("patient -> patient", function() {deepEqual( Stem("patient"), "patient");});
test("patiently -> patient", function() {deepEqual( Stem("patiently"), "patient");});
test("patients -> patient", function() {deepEqual( Stem("patients"), "patient");});
test("patines -> patin", function() {deepEqual( Stem("patines"), "patin");});
test("patria -> patria", function() {deepEqual( Stem("patria"), "patria");});
test("patrician -> patrician", function() {deepEqual( Stem("patrician"), "patrician");});
test("patricians -> patrician", function() {deepEqual( Stem("patricians"), "patrician");});
test("patrick -> patrick", function() {deepEqual( Stem("patrick"), "patrick");});
test("patrimony -> patrimoni", function() {deepEqual( Stem("patrimony"), "patrimoni");});
test("patriotic -> patriot", function() {deepEqual( Stem("patriotic"), "patriot");});
test("patriots -> patriot", function() {deepEqual( Stem("patriots"), "patriot");});
test("patroclus -> patroclu", function() {deepEqual( Stem("patroclus"), "patroclu");});
test("patron -> patron", function() {deepEqual( Stem("patron"), "patron");});
test("patronage -> patronag", function() {deepEqual( Stem("patronage"), "patronag");});
test("patroness -> patro", function() {deepEqual( Stem("patroness"), "patro");});
test("patronesses -> patro", function() {deepEqual( Stem("patronesses"), "patro");});
test("patronise -> patronis", function() {deepEqual( Stem("patronise"), "patronis");});
test("patronised -> patronis", function() {deepEqual( Stem("patronised"), "patronis");});
test("patronising -> patronis", function() {deepEqual( Stem("patronising"), "patronis");});
test("patronize -> patron", function() {deepEqual( Stem("patronize"), "patron");});
test("patronized -> patron", function() {deepEqual( Stem("patronized"), "patron");});
test("patronizes -> patron", function() {deepEqual( Stem("patronizes"), "patron");});
test("patronizing -> patron", function() {deepEqual( Stem("patronizing"), "patron");});
test("patronizingly -> patronizingli", function() {deepEqual( Stem("patronizingly"), "patronizingli");});
test("patrons -> patron", function() {deepEqual( Stem("patrons"), "patron");});
test("patrum -> patrum", function() {deepEqual( Stem("patrum"), "patrum");});
test("patted -> pat", function() {deepEqual( Stem("patted"), "pat");});
test("pattens -> patten", function() {deepEqual( Stem("pattens"), "patten");});
test("patter -> patter", function() {deepEqual( Stem("patter"), "patter");});
test("pattering -> patter", function() {deepEqual( Stem("pattering"), "patter");});
test("pattern -> pattern", function() {deepEqual( Stem("pattern"), "pattern");});
test("patterns -> pattern", function() {deepEqual( Stem("patterns"), "pattern");});
test("patting -> pat", function() {deepEqual( Stem("patting"), "pat");});
test("pattle -> pattl", function() {deepEqual( Stem("pattle"), "pattl");});
test("pauca -> pauca", function() {deepEqual( Stem("pauca"), "pauca");});
test("paucas -> pauca", function() {deepEqual( Stem("paucas"), "pauca");});
test("paul -> paul", function() {deepEqual( Stem("paul"), "paul");});
test("paulina -> paulina", function() {deepEqual( Stem("paulina"), "paulina");});
test("pauline -> paulin", function() {deepEqual( Stem("pauline"), "paulin");});
test("paunch -> paunch", function() {deepEqual( Stem("paunch"), "paunch");});
test("paunches -> paunch", function() {deepEqual( Stem("paunches"), "paunch");});
test("pauper -> pauper", function() {deepEqual( Stem("pauper"), "pauper");});
test("pause -> paus", function() {deepEqual( Stem("pause"), "paus");});
test("paused -> paus", function() {deepEqual( Stem("paused"), "paus");});
test("pauser -> pauser", function() {deepEqual( Stem("pauser"), "pauser");});
test("pauses -> paus", function() {deepEqual( Stem("pauses"), "paus");});
test("pausing -> paus", function() {deepEqual( Stem("pausing"), "paus");});
test("pausingly -> pausingli", function() {deepEqual( Stem("pausingly"), "pausingli");});
test("pauvre -> pauvr", function() {deepEqual( Stem("pauvre"), "pauvr");});
test("pauvres -> pauvr", function() {deepEqual( Stem("pauvres"), "pauvr");});
test("pav -> pav", function() {deepEqual( Stem("pav"), "pav");});
test("paved -> pave", function() {deepEqual( Stem("paved"), "pave");});
test("pavement -> pavement", function() {deepEqual( Stem("pavement"), "pavement");});
test("pavilion -> pavilion", function() {deepEqual( Stem("pavilion"), "pavilion");});
test("pavilions -> pavilion", function() {deepEqual( Stem("pavilions"), "pavilion");});
test("pavin -> pavin", function() {deepEqual( Stem("pavin"), "pavin");});
test("paw -> paw", function() {deepEqual( Stem("paw"), "paw");});
test("pawed -> paw", function() {deepEqual( Stem("pawed"), "paw");});
test("pawing -> paw", function() {deepEqual( Stem("pawing"), "paw");});
test("pawn -> pawn", function() {deepEqual( Stem("pawn"), "pawn");});
test("pawned -> pawn", function() {deepEqual( Stem("pawned"), "pawn");});
test("pawnee -> pawne", function() {deepEqual( Stem("pawnee"), "pawne");});
test("pawns -> pawn", function() {deepEqual( Stem("pawns"), "pawn");});
test("paws -> paw", function() {deepEqual( Stem("paws"), "paw");});
test("pax -> pax", function() {deepEqual( Stem("pax"), "pax");});
test("pay -> pai", function() {deepEqual( Stem("pay"), "pai");});
test("payest -> payest", function() {deepEqual( Stem("payest"), "payest");});
test("paying -> pai", function() {deepEqual( Stem("paying"), "pai");});
test("payment -> payment", function() {deepEqual( Stem("payment"), "payment");});
test("payments -> payment", function() {deepEqual( Stem("payments"), "payment");});
test("payne -> payn", function() {deepEqual( Stem("payne"), "payn");});
test("paynter -> paynter", function() {deepEqual( Stem("paynter"), "paynter");});
test("pays -> pai", function() {deepEqual( Stem("pays"), "pai");});
test("paysan -> paysan", function() {deepEqual( Stem("paysan"), "paysan");});
test("paysans -> paysan", function() {deepEqual( Stem("paysans"), "paysan");});
test("pe -> pe", function() {deepEqual( Stem("pe"), "pe");});
test("pea -> pea", function() {deepEqual( Stem("pea"), "pea");});
test("peace -> peac", function() {deepEqual( Stem("peace"), "peac");});
test("peaceable -> peaceabl", function() {deepEqual( Stem("peaceable"), "peaceabl");});
test("peaceably -> peaceabl", function() {deepEqual( Stem("peaceably"), "peaceabl");});
test("peaceful -> peac", function() {deepEqual( Stem("peaceful"), "peac");});
test("peacefully -> peacefulli", function() {deepEqual( Stem("peacefully"), "peacefulli");});
test("peacemaker -> peacemak", function() {deepEqual( Stem("peacemaker"), "peacemak");});
test("peacemakers -> peacemak", function() {deepEqual( Stem("peacemakers"), "peacemak");});
test("peaces -> peac", function() {deepEqual( Stem("peaces"), "peac");});
test("peach -> peach", function() {deepEqual( Stem("peach"), "peach");});
test("peached -> peach", function() {deepEqual( Stem("peached"), "peach");});
test("peaches -> peach", function() {deepEqual( Stem("peaches"), "peach");});
test("peacock -> peacock", function() {deepEqual( Stem("peacock"), "peacock");});
test("peacocks -> peacock", function() {deepEqual( Stem("peacocks"), "peacock");});
test("peak -> peak", function() {deepEqual( Stem("peak"), "peak");});
test("peaking -> peak", function() {deepEqual( Stem("peaking"), "peak");});
test("peal -> peal", function() {deepEqual( Stem("peal"), "peal");});
test("pealed -> peal", function() {deepEqual( Stem("pealed"), "peal");});
test("peals -> peal", function() {deepEqual( Stem("peals"), "peal");});
test("pear -> pear", function() {deepEqual( Stem("pear"), "pear");});
test("peard -> peard", function() {deepEqual( Stem("peard"), "peard");});
test("pearl -> pearl", function() {deepEqual( Stem("pearl"), "pearl");});
test("pearls -> pearl", function() {deepEqual( Stem("pearls"), "pearl");});
test("pears -> pear", function() {deepEqual( Stem("pears"), "pear");});
test("peas -> pea", function() {deepEqual( Stem("peas"), "pea");});
test("peasant -> peasant", function() {deepEqual( Stem("peasant"), "peasant");});
test("peasantry -> peasantri", function() {deepEqual( Stem("peasantry"), "peasantri");});
test("peasants -> peasant", function() {deepEqual( Stem("peasants"), "peasant");});
test("peascod -> peascod", function() {deepEqual( Stem("peascod"), "peascod");});
test("pease -> peas", function() {deepEqual( Stem("pease"), "peas");});
test("peaseblossom -> peaseblossom", function() {deepEqual( Stem("peaseblossom"), "peaseblossom");});
test("peat -> peat", function() {deepEqual( Stem("peat"), "peat");});
test("peaten -> peaten", function() {deepEqual( Stem("peaten"), "peaten");});
test("peating -> peat", function() {deepEqual( Stem("peating"), "peat");});
test("pebble -> pebbl", function() {deepEqual( Stem("pebble"), "pebbl");});
test("pebbled -> pebbl", function() {deepEqual( Stem("pebbled"), "pebbl");});
test("pebbles -> pebbl", function() {deepEqual( Stem("pebbles"), "pebbl");});
test("peccadilloes -> peccadillo", function() {deepEqual( Stem("peccadilloes"), "peccadillo");});
test("peck -> peck", function() {deepEqual( Stem("peck"), "peck");});
test("pecked -> peck", function() {deepEqual( Stem("pecked"), "peck");});
test("pecking -> peck", function() {deepEqual( Stem("pecking"), "peck");});
test("peckish -> peckish", function() {deepEqual( Stem("peckish"), "peckish");});
test("peckover -> peckov", function() {deepEqual( Stem("peckover"), "peckov");});
test("pecks -> peck", function() {deepEqual( Stem("pecks"), "peck");});
test("peculation -> pecul", function() {deepEqual( Stem("peculation"), "pecul");});
test("peculiar -> peculiar", function() {deepEqual( Stem("peculiar"), "peculiar");});
test("peculiarities -> peculiar", function() {deepEqual( Stem("peculiarities"), "peculiar");});
test("peculiarly -> peculiarli", function() {deepEqual( Stem("peculiarly"), "peculiarli");});
test("pecuniary -> pecuniari", function() {deepEqual( Stem("pecuniary"), "pecuniari");});
test("pecus -> pecu", function() {deepEqual( Stem("pecus"), "pecu");});
test("pedagogue -> pedagogu", function() {deepEqual( Stem("pedagogue"), "pedagogu");});
test("pedant -> pedant", function() {deepEqual( Stem("pedant"), "pedant");});
test("pedantical -> pedant", function() {deepEqual( Stem("pedantical"), "pedant");});
test("pedascule -> pedascul", function() {deepEqual( Stem("pedascule"), "pedascul");});
test("pede -> pede", function() {deepEqual( Stem("pede"), "pede");});
test("pedestal -> pedest", function() {deepEqual( Stem("pedestal"), "pedest");});
test("pedigree -> pedigre", function() {deepEqual( Stem("pedigree"), "pedigre");});
test("pedlar -> pedlar", function() {deepEqual( Stem("pedlar"), "pedlar");});
test("pedlars -> pedlar", function() {deepEqual( Stem("pedlars"), "pedlar");});
test("pedro -> pedro", function() {deepEqual( Stem("pedro"), "pedro");});
test("peds -> ped", function() {deepEqual( Stem("peds"), "ped");});
test("peel -> peel", function() {deepEqual( Stem("peel"), "peel");});
test("peep -> peep", function() {deepEqual( Stem("peep"), "peep");});
test("peeped -> peep", function() {deepEqual( Stem("peeped"), "peep");});
test("peepers -> peeper", function() {deepEqual( Stem("peepers"), "peeper");});
test("peeping -> peep", function() {deepEqual( Stem("peeping"), "peep");});
test("peeps -> peep", function() {deepEqual( Stem("peeps"), "peep");});
test("peer -> peer", function() {deepEqual( Stem("peer"), "peer");});
test("peerage -> peerag", function() {deepEqual( Stem("peerage"), "peerag");});
test("peeresses -> peeress", function() {deepEqual( Stem("peeresses"), "peeress");});
test("peereth -> peereth", function() {deepEqual( Stem("peereth"), "peereth");});
test("peering -> peer", function() {deepEqual( Stem("peering"), "peer");});
test("peerless -> peerless", function() {deepEqual( Stem("peerless"), "peerless");});
test("peers -> peer", function() {deepEqual( Stem("peers"), "peer");});
test("peesel -> peesel", function() {deepEqual( Stem("peesel"), "peesel");});
test("peevish -> peevish", function() {deepEqual( Stem("peevish"), "peevish");});
test("peevishly -> peevishli", function() {deepEqual( Stem("peevishly"), "peevishli");});
test("peflur -> peflur", function() {deepEqual( Stem("peflur"), "peflur");});
test("peg -> peg", function() {deepEqual( Stem("peg"), "peg");});
test("pegasus -> pegasu", function() {deepEqual( Stem("pegasus"), "pegasu");});
test("peggy -> peggi", function() {deepEqual( Stem("peggy"), "peggi");});
test("pegs -> peg", function() {deepEqual( Stem("pegs"), "peg");});
test("peise -> peis", function() {deepEqual( Stem("peise"), "peis");});
test("peised -> peis", function() {deepEqual( Stem("peised"), "peis");});
test("peize -> peiz", function() {deepEqual( Stem("peize"), "peiz");});
test("pekin -> pekin", function() {deepEqual( Stem("pekin"), "pekin");});
test("pelagie -> pelagi", function() {deepEqual( Stem("pelagie"), "pelagi");});
test("pelf -> pelf", function() {deepEqual( Stem("pelf"), "pelf");});
test("pelican -> pelican", function() {deepEqual( Stem("pelican"), "pelican");});
test("pelion -> pelion", function() {deepEqual( Stem("pelion"), "pelion");});
test("pelisse -> peliss", function() {deepEqual( Stem("pelisse"), "peliss");});
test("pelisses -> peliss", function() {deepEqual( Stem("pelisses"), "peliss");});
test("pell -> pell", function() {deepEqual( Stem("pell"), "pell");});
test("pella -> pella", function() {deepEqual( Stem("pella"), "pella");});
test("pelleted -> pellet", function() {deepEqual( Stem("pelleted"), "pellet");});
test("pellite -> pellit", function() {deepEqual( Stem("pellite"), "pellit");});
test("peloponnesus -> peloponnesu", function() {deepEqual( Stem("peloponnesus"), "peloponnesu");});
test("pelt -> pelt", function() {deepEqual( Stem("pelt"), "pelt");});
test("pelting -> pelt", function() {deepEqual( Stem("pelting"), "pelt");});
test("pembroke -> pembrok", function() {deepEqual( Stem("pembroke"), "pembrok");});
test("pen -> pen", function() {deepEqual( Stem("pen"), "pen");});
test("penalties -> penalti", function() {deepEqual( Stem("penalties"), "penalti");});
test("penalty -> penalti", function() {deepEqual( Stem("penalty"), "penalti");});
test("penance -> penanc", function() {deepEqual( Stem("penance"), "penanc");});
test("penances -> penanc", function() {deepEqual( Stem("penances"), "penanc");});
test("pence -> penc", function() {deepEqual( Stem("pence"), "penc");});
test("pencil -> pencil", function() {deepEqual( Stem("pencil"), "pencil");});
test("pencill -> pencil", function() {deepEqual( Stem("pencill"), "pencil");});
test("pencils -> pencil", function() {deepEqual( Stem("pencils"), "pencil");});
test("pendant -> pendant", function() {deepEqual( Stem("pendant"), "pendant");});
test("pendent -> pendent", function() {deepEqual( Stem("pendent"), "pendent");});
test("pending -> pend", function() {deepEqual( Stem("pending"), "pend");});
test("pendragon -> pendragon", function() {deepEqual( Stem("pendragon"), "pendragon");});
test("pendulous -> pendul", function() {deepEqual( Stem("pendulous"), "pendul");});
test("penelope -> penelop", function() {deepEqual( Stem("penelope"), "penelop");});
test("penetrable -> penetr", function() {deepEqual( Stem("penetrable"), "penetr");});
test("penetrate -> penetr", function() {deepEqual( Stem("penetrate"), "penetr");});
test("penetrated -> penetr", function() {deepEqual( Stem("penetrated"), "penetr");});
test("penetrative -> penetr", function() {deepEqual( Stem("penetrative"), "penetr");});
test("peninsula -> peninsula", function() {deepEqual( Stem("peninsula"), "peninsula");});
test("peninsular -> peninsular", function() {deepEqual( Stem("peninsular"), "peninsular");});
test("penitence -> penit", function() {deepEqual( Stem("penitence"), "penit");});
test("penitent -> penit", function() {deepEqual( Stem("penitent"), "penit");});
test("penitential -> penitenti", function() {deepEqual( Stem("penitential"), "penitenti");});
test("penitently -> penit", function() {deepEqual( Stem("penitently"), "penit");});
test("penitents -> penit", function() {deepEqual( Stem("penitents"), "penit");});
test("penker -> penker", function() {deepEqual( Stem("penker"), "penker");});
test("penknife -> penknif", function() {deepEqual( Stem("penknife"), "penknif");});
test("penn -> penn", function() {deepEqual( Stem("penn"), "penn");});
test("penned -> pen", function() {deepEqual( Stem("penned"), "pen");});
test("penniless -> penniless", function() {deepEqual( Stem("penniless"), "penniless");});
test("penning -> pen", function() {deepEqual( Stem("penning"), "pen");});
test("pennons -> pennon", function() {deepEqual( Stem("pennons"), "pennon");});
test("pennorth -> pennorth", function() {deepEqual( Stem("pennorth"), "pennorth");});
test("penny -> penni", function() {deepEqual( Stem("penny"), "penni");});
test("pennyworth -> pennyworth", function() {deepEqual( Stem("pennyworth"), "pennyworth");});
test("pennyworths -> pennyworth", function() {deepEqual( Stem("pennyworths"), "pennyworth");});
test("pens -> pen", function() {deepEqual( Stem("pens"), "pen");});
test("pense -> pens", function() {deepEqual( Stem("pense"), "pens");});
test("pension -> pension", function() {deepEqual( Stem("pension"), "pension");});
test("pensioners -> pension", function() {deepEqual( Stem("pensioners"), "pension");});
test("pensions -> pension", function() {deepEqual( Stem("pensions"), "pension");});
test("pensive -> pensiv", function() {deepEqual( Stem("pensive"), "pensiv");});
test("pensived -> pensiv", function() {deepEqual( Stem("pensived"), "pensiv");});
test("pensively -> pensiv", function() {deepEqual( Stem("pensively"), "pensiv");});
test("pent -> pent", function() {deepEqual( Stem("pent"), "pent");});
test("pentecost -> pentecost", function() {deepEqual( Stem("pentecost"), "pentecost");});
test("penthesilea -> penthesilea", function() {deepEqual( Stem("penthesilea"), "penthesilea");});
test("penthouse -> penthous", function() {deepEqual( Stem("penthouse"), "penthous");});
test("penurious -> penuri", function() {deepEqual( Stem("penurious"), "penuri");});
test("penury -> penuri", function() {deepEqual( Stem("penury"), "penuri");});
test("penwigs -> penwig", function() {deepEqual( Stem("penwigs"), "penwig");});
test("peopl -> peopl", function() {deepEqual( Stem("peopl"), "peopl");});
test("people -> peopl", function() {deepEqual( Stem("people"), "peopl");});
test("peopled -> peopl", function() {deepEqual( Stem("peopled"), "peopl");});
test("peoples -> peopl", function() {deepEqual( Stem("peoples"), "peopl");});
test("pepin -> pepin", function() {deepEqual( Stem("pepin"), "pepin");});
test("pepper -> pepper", function() {deepEqual( Stem("pepper"), "pepper");});
test("peppercorn -> peppercorn", function() {deepEqual( Stem("peppercorn"), "peppercorn");});
test("peppered -> pepper", function() {deepEqual( Stem("peppered"), "pepper");});
test("peppers -> pepper", function() {deepEqual( Stem("peppers"), "pepper");});
test("per -> per", function() {deepEqual( Stem("per"), "per");});
test("peradventure -> peradventur", function() {deepEqual( Stem("peradventure"), "peradventur");});
test("peradventures -> peradventur", function() {deepEqual( Stem("peradventures"), "peradventur");});
test("perceiv -> perceiv", function() {deepEqual( Stem("perceiv"), "perceiv");});
test("perceive -> perceiv", function() {deepEqual( Stem("perceive"), "perceiv");});
test("perceived -> perceiv", function() {deepEqual( Stem("perceived"), "perceiv");});
test("perceives -> perceiv", function() {deepEqual( Stem("perceives"), "perceiv");});
test("perceiveth -> perceiveth", function() {deepEqual( Stem("perceiveth"), "perceiveth");});
test("perceiving -> perceiv", function() {deepEqual( Stem("perceiving"), "perceiv");});
test("perch -> perch", function() {deepEqual( Stem("perch"), "perch");});
test("perchance -> perchanc", function() {deepEqual( Stem("perchance"), "perchanc");});
test("perched -> perch", function() {deepEqual( Stem("perched"), "perch");});
test("percies -> perci", function() {deepEqual( Stem("percies"), "perci");});
test("percussion -> percuss", function() {deepEqual( Stem("percussion"), "percuss");});
test("percy -> perci", function() {deepEqual( Stem("percy"), "perci");});
test("perdie -> perdi", function() {deepEqual( Stem("perdie"), "perdi");});
test("perdita -> perdita", function() {deepEqual( Stem("perdita"), "perdita");});
test("perdition -> perdit", function() {deepEqual( Stem("perdition"), "perdit");});
test("perdonato -> perdonato", function() {deepEqual( Stem("perdonato"), "perdonato");});
test("perdu -> perdu", function() {deepEqual( Stem("perdu"), "perdu");});
test("perdurable -> perdur", function() {deepEqual( Stem("perdurable"), "perdur");});
test("perdurably -> perdur", function() {deepEqual( Stem("perdurably"), "perdur");});
test("perdy -> perdi", function() {deepEqual( Stem("perdy"), "perdi");});
test("pere -> pere", function() {deepEqual( Stem("pere"), "pere");});
test("peregrinate -> peregrin", function() {deepEqual( Stem("peregrinate"), "peregrin");});
test("peregrinations -> peregrin", function() {deepEqual( Stem("peregrinations"), "peregrin");});
test("peremptorily -> peremptorili", function() {deepEqual( Stem("peremptorily"), "peremptorili");});
test("peremptory -> peremptori", function() {deepEqual( Stem("peremptory"), "peremptori");});
test("perennial -> perenni", function() {deepEqual( Stem("perennial"), "perenni");});
test("perennially -> perenni", function() {deepEqual( Stem("perennially"), "perenni");});
test("perfect -> perfect", function() {deepEqual( Stem("perfect"), "perfect");});
test("perfected -> perfect", function() {deepEqual( Stem("perfected"), "perfect");});
test("perfecter -> perfect", function() {deepEqual( Stem("perfecter"), "perfect");});
test("perfectest -> perfectest", function() {deepEqual( Stem("perfectest"), "perfectest");});
test("perfection -> perfect", function() {deepEqual( Stem("perfection"), "perfect");});
test("perfections -> perfect", function() {deepEqual( Stem("perfections"), "perfect");});
test("perfectly -> perfectli", function() {deepEqual( Stem("perfectly"), "perfectli");});
test("perfectness -> perfect", function() {deepEqual( Stem("perfectness"), "perfect");});
test("perfidious -> perfidi", function() {deepEqual( Stem("perfidious"), "perfidi");});
test("perfidiously -> perfidi", function() {deepEqual( Stem("perfidiously"), "perfidi");});
test("perforce -> perforc", function() {deepEqual( Stem("perforce"), "perforc");});
test("perform -> perform", function() {deepEqual( Stem("perform"), "perform");});
test("performance -> perform", function() {deepEqual( Stem("performance"), "perform");});
test("performances -> perform", function() {deepEqual( Stem("performances"), "perform");});
test("performed -> perform", function() {deepEqual( Stem("performed"), "perform");});
test("performer -> perform", function() {deepEqual( Stem("performer"), "perform");});
test("performers -> perform", function() {deepEqual( Stem("performers"), "perform");});
test("performing -> perform", function() {deepEqual( Stem("performing"), "perform");});
test("performs -> perform", function() {deepEqual( Stem("performs"), "perform");});
test("perfum -> perfum", function() {deepEqual( Stem("perfum"), "perfum");});
test("perfume -> perfum", function() {deepEqual( Stem("perfume"), "perfum");});
test("perfumed -> perfum", function() {deepEqual( Stem("perfumed"), "perfum");});
test("perfumer -> perfum", function() {deepEqual( Stem("perfumer"), "perfum");});
test("perfumery -> perfumeri", function() {deepEqual( Stem("perfumery"), "perfumeri");});
test("perfumes -> perfum", function() {deepEqual( Stem("perfumes"), "perfum");});
test("perfuming -> perfum", function() {deepEqual( Stem("perfuming"), "perfum");});
test("perge -> perg", function() {deepEqual( Stem("perge"), "perg");});
test("perhaps -> perhap", function() {deepEqual( Stem("perhaps"), "perhap");});
test("periapts -> periapt", function() {deepEqual( Stem("periapts"), "periapt");});
test("peribanou -> periban", function() {deepEqual( Stem("peribanou"), "periban");});
test("perigord -> perigord", function() {deepEqual( Stem("perigord"), "perigord");});
test("perigort -> perigort", function() {deepEqual( Stem("perigort"), "perigort");});
test("perigouna -> perigouna", function() {deepEqual( Stem("perigouna"), "perigouna");});
test("peril -> peril", function() {deepEqual( Stem("peril"), "peril");});
test("perilled -> peril", function() {deepEqual( Stem("perilled"), "peril");});
test("perilous -> peril", function() {deepEqual( Stem("perilous"), "peril");});
test("perils -> peril", function() {deepEqual( Stem("perils"), "peril");});
test("period -> period", function() {deepEqual( Stem("period"), "period");});
test("periodical -> period", function() {deepEqual( Stem("periodical"), "period");});
test("periodically -> period", function() {deepEqual( Stem("periodically"), "period");});
test("periods -> period", function() {deepEqual( Stem("periods"), "period");});
test("perish -> perish", function() {deepEqual( Stem("perish"), "perish");});
test("perished -> perish", function() {deepEqual( Stem("perished"), "perish");});
test("perishest -> perishest", function() {deepEqual( Stem("perishest"), "perishest");});
test("perisheth -> perisheth", function() {deepEqual( Stem("perisheth"), "perisheth");});
test("perishing -> perish", function() {deepEqual( Stem("perishing"), "perish");});
test("periwig -> periwig", function() {deepEqual( Stem("periwig"), "periwig");});
test("perjur -> perjur", function() {deepEqual( Stem("perjur"), "perjur");});
test("perjure -> perjur", function() {deepEqual( Stem("perjure"), "perjur");});
test("perjured -> perjur", function() {deepEqual( Stem("perjured"), "perjur");});
test("perjuries -> perjuri", function() {deepEqual( Stem("perjuries"), "perjuri");});
test("perjury -> perjuri", function() {deepEqual( Stem("perjury"), "perjuri");});
test("perk -> perk", function() {deepEqual( Stem("perk"), "perk");});
test("perkes -> perk", function() {deepEqual( Stem("perkes"), "perk");});
test("perkins -> perkin", function() {deepEqual( Stem("perkins"), "perkin");});
test("permafoy -> permafoi", function() {deepEqual( Stem("permafoy"), "permafoi");});
test("permanence -> perman", function() {deepEqual( Stem("permanence"), "perman");});
test("permanent -> perman", function() {deepEqual( Stem("permanent"), "perman");});
test("permanently -> perman", function() {deepEqual( Stem("permanently"), "perman");});
test("permission -> permiss", function() {deepEqual( Stem("permission"), "permiss");});
test("permissive -> permiss", function() {deepEqual( Stem("permissive"), "permiss");});
test("permit -> permit", function() {deepEqual( Stem("permit"), "permit");});
test("permitted -> permit", function() {deepEqual( Stem("permitted"), "permit");});
test("permitting -> permit", function() {deepEqual( Stem("permitting"), "permit");});
test("pernicious -> pernici", function() {deepEqual( Stem("pernicious"), "pernici");});
test("perniciously -> pernici", function() {deepEqual( Stem("perniciously"), "pernici");});
test("peroration -> peror", function() {deepEqual( Stem("peroration"), "peror");});
test("perpend -> perpend", function() {deepEqual( Stem("perpend"), "perpend");});
test("perpendicular -> perpendicular", function() {deepEqual( Stem("perpendicular"), "perpendicular");});
test("perpendicularly -> perpendicularli", function() {deepEqual( Stem("perpendicularly"), "perpendicularli");});
test("perpetrated -> perpetr", function() {deepEqual( Stem("perpetrated"), "perpetr");});
test("perpetual -> perpetu", function() {deepEqual( Stem("perpetual"), "perpetu");});
test("perpetually -> perpetu", function() {deepEqual( Stem("perpetually"), "perpetu");});
test("perpetuity -> perpetu", function() {deepEqual( Stem("perpetuity"), "perpetu");});
test("perplex -> perplex", function() {deepEqual( Stem("perplex"), "perplex");});
test("perplexed -> perplex", function() {deepEqual( Stem("perplexed"), "perplex");});
test("perplexities -> perplex", function() {deepEqual( Stem("perplexities"), "perplex");});
test("perplexity -> perplex", function() {deepEqual( Stem("perplexity"), "perplex");});
test("perquisites -> perquisit", function() {deepEqual( Stem("perquisites"), "perquisit");});
test("pers -> per", function() {deepEqual( Stem("pers"), "per");});
test("persecuted -> persecut", function() {deepEqual( Stem("persecuted"), "persecut");});
test("persecution -> persecut", function() {deepEqual( Stem("persecution"), "persecut");});
test("persecutions -> persecut", function() {deepEqual( Stem("persecutions"), "persecut");});
test("persecutor -> persecutor", function() {deepEqual( Stem("persecutor"), "persecutor");});
test("persecutors -> persecutor", function() {deepEqual( Stem("persecutors"), "persecutor");});
test("perseus -> perseu", function() {deepEqual( Stem("perseus"), "perseu");});
test("persever -> persev", function() {deepEqual( Stem("persever"), "persev");});
test("perseverance -> persever", function() {deepEqual( Stem("perseverance"), "persever");});
test("persevering -> persev", function() {deepEqual( Stem("persevering"), "persev");});
test("perseveringly -> perseveringli", function() {deepEqual( Stem("perseveringly"), "perseveringli");});
test("persevers -> persev", function() {deepEqual( Stem("persevers"), "persev");});
test("persia -> persia", function() {deepEqual( Stem("persia"), "persia");});
test("persian -> persian", function() {deepEqual( Stem("persian"), "persian");});
test("persicos -> persico", function() {deepEqual( Stem("persicos"), "persico");});
test("persiffled -> persiffl", function() {deepEqual( Stem("persiffled"), "persiffl");});
test("persist -> persist", function() {deepEqual( Stem("persist"), "persist");});
test("persisted -> persist", function() {deepEqual( Stem("persisted"), "persist");});
test("persistency -> persist", function() {deepEqual( Stem("persistency"), "persist");});
test("persistive -> persist", function() {deepEqual( Stem("persistive"), "persist");});
test("persists -> persist", function() {deepEqual( Stem("persists"), "persist");});
test("person -> person", function() {deepEqual( Stem("person"), "person");});
test("personable -> person", function() {deepEqual( Stem("personable"), "person");});
test("personae -> persona", function() {deepEqual( Stem("personae"), "persona");});
test("personage -> personag", function() {deepEqual( Stem("personage"), "personag");});
test("personages -> personag", function() {deepEqual( Stem("personages"), "personag");});
test("personal -> person", function() {deepEqual( Stem("personal"), "person");});
test("personally -> person", function() {deepEqual( Stem("personally"), "person");});
test("personate -> person", function() {deepEqual( Stem("personate"), "person");});
test("personated -> person", function() {deepEqual( Stem("personated"), "person");});
test("personates -> person", function() {deepEqual( Stem("personates"), "person");});
test("personating -> person", function() {deepEqual( Stem("personating"), "person");});
test("personifications -> personif", function() {deepEqual( Stem("personifications"), "personif");});
test("personify -> personifi", function() {deepEqual( Stem("personify"), "personifi");});
test("persons -> person", function() {deepEqual( Stem("persons"), "person");});
test("perspective -> perspect", function() {deepEqual( Stem("perspective"), "perspect");});
test("perspectively -> perspect", function() {deepEqual( Stem("perspectively"), "perspect");});
test("perspectives -> perspect", function() {deepEqual( Stem("perspectives"), "perspect");});
test("perspicuity -> perspicu", function() {deepEqual( Stem("perspicuity"), "perspicu");});
test("perspicuous -> perspicu", function() {deepEqual( Stem("perspicuous"), "perspicu");});
test("persuade -> persuad", function() {deepEqual( Stem("persuade"), "persuad");});
test("persuaded -> persuad", function() {deepEqual( Stem("persuaded"), "persuad");});
test("persuades -> persuad", function() {deepEqual( Stem("persuades"), "persuad");});
test("persuading -> persuad", function() {deepEqual( Stem("persuading"), "persuad");});
test("persuasion -> persuas", function() {deepEqual( Stem("persuasion"), "persuas");});
test("persuasions -> persuas", function() {deepEqual( Stem("persuasions"), "persuas");});
test("pert -> pert", function() {deepEqual( Stem("pert"), "pert");});
test("pertain -> pertain", function() {deepEqual( Stem("pertain"), "pertain");});
test("pertaining -> pertain", function() {deepEqual( Stem("pertaining"), "pertain");});
test("pertains -> pertain", function() {deepEqual( Stem("pertains"), "pertain");});
test("pertaunt -> pertaunt", function() {deepEqual( Stem("pertaunt"), "pertaunt");});
test("pertinacity -> pertinac", function() {deepEqual( Stem("pertinacity"), "pertinac");});
test("pertinent -> pertin", function() {deepEqual( Stem("pertinent"), "pertin");});
test("pertly -> pertli", function() {deepEqual( Stem("pertly"), "pertli");});
test("perturb -> perturb", function() {deepEqual( Stem("perturb"), "perturb");});
test("perturbation -> perturb", function() {deepEqual( Stem("perturbation"), "perturb");});
test("perturbations -> perturb", function() {deepEqual( Stem("perturbations"), "perturb");});
test("perturbed -> perturb", function() {deepEqual( Stem("perturbed"), "perturb");});
test("perus -> peru", function() {deepEqual( Stem("perus"), "peru");});
test("perusal -> perus", function() {deepEqual( Stem("perusal"), "perus");});
test("peruse -> perus", function() {deepEqual( Stem("peruse"), "perus");});
test("perused -> perus", function() {deepEqual( Stem("perused"), "perus");});
test("perusing -> perus", function() {deepEqual( Stem("perusing"), "perus");});
test("pervaded -> pervad", function() {deepEqual( Stem("pervaded"), "pervad");});
test("pervades -> pervad", function() {deepEqual( Stem("pervades"), "pervad");});
test("perverse -> pervers", function() {deepEqual( Stem("perverse"), "pervers");});
test("perversely -> pervers", function() {deepEqual( Stem("perversely"), "pervers");});
test("perverseness -> pervers", function() {deepEqual( Stem("perverseness"), "pervers");});
test("perversion -> pervers", function() {deepEqual( Stem("perversion"), "pervers");});
test("pervert -> pervert", function() {deepEqual( Stem("pervert"), "pervert");});
test("perverted -> pervert", function() {deepEqual( Stem("perverted"), "pervert");});
test("perverter -> pervert", function() {deepEqual( Stem("perverter"), "pervert");});
test("peseech -> peseech", function() {deepEqual( Stem("peseech"), "peseech");});
test("pest -> pest", function() {deepEqual( Stem("pest"), "pest");});
test("pester -> pester", function() {deepEqual( Stem("pester"), "pester");});
test("pestered -> pester", function() {deepEqual( Stem("pestered"), "pester");});
test("pestiferous -> pestifer", function() {deepEqual( Stem("pestiferous"), "pestifer");});
test("pestilence -> pestil", function() {deepEqual( Stem("pestilence"), "pestil");});
test("pestilent -> pestil", function() {deepEqual( Stem("pestilent"), "pestil");});
test("pestle -> pestl", function() {deepEqual( Stem("pestle"), "pestl");});
test("pestler -> pestler", function() {deepEqual( Stem("pestler"), "pestler");});
test("pet -> pet", function() {deepEqual( Stem("pet"), "pet");});
test("petar -> petar", function() {deepEqual( Stem("petar"), "petar");});
test("peter -> peter", function() {deepEqual( Stem("peter"), "peter");});
test("petersburg -> petersburg", function() {deepEqual( Stem("petersburg"), "petersburg");});
test("peterwaradin -> peterwaradin", function() {deepEqual( Stem("peterwaradin"), "peterwaradin");});
test("petit -> petit", function() {deepEqual( Stem("petit"), "petit");});
test("petite -> petit", function() {deepEqual( Stem("petite"), "petit");});
test("petition -> petit", function() {deepEqual( Stem("petition"), "petit");});
test("petitionary -> petitionari", function() {deepEqual( Stem("petitionary"), "petitionari");});
test("petitioner -> petition", function() {deepEqual( Stem("petitioner"), "petition");});
test("petitioners -> petition", function() {deepEqual( Stem("petitioners"), "petition");});
test("petitions -> petit", function() {deepEqual( Stem("petitions"), "petit");});
test("petits -> petit", function() {deepEqual( Stem("petits"), "petit");});
test("peto -> peto", function() {deepEqual( Stem("peto"), "peto");});
test("petrarch -> petrarch", function() {deepEqual( Stem("petrarch"), "petrarch");});
test("petruchio -> petruchio", function() {deepEqual( Stem("petruchio"), "petruchio");});
test("petter -> petter", function() {deepEqual( Stem("petter"), "petter");});
test("petticoat -> petticoat", function() {deepEqual( Stem("petticoat"), "petticoat");});
test("petticoats -> petticoat", function() {deepEqual( Stem("petticoats"), "petticoat");});
test("pettifogging -> pettifog", function() {deepEqual( Stem("pettifogging"), "pettifog");});
test("pettiness -> petti", function() {deepEqual( Stem("pettiness"), "petti");});
test("pettish -> pettish", function() {deepEqual( Stem("pettish"), "pettish");});
test("pettishness -> pettish", function() {deepEqual( Stem("pettishness"), "pettish");});
test("pettitoes -> pettito", function() {deepEqual( Stem("pettitoes"), "pettito");});
test("petty -> petti", function() {deepEqual( Stem("petty"), "petti");});
test("peu -> peu", function() {deepEqual( Stem("peu"), "peu");});
test("pew -> pew", function() {deepEqual( Stem("pew"), "pew");});
test("pewter -> pewter", function() {deepEqual( Stem("pewter"), "pewter");});
test("pewterer -> pewter", function() {deepEqual( Stem("pewterer"), "pewter");});
test("phaethon -> phaethon", function() {deepEqual( Stem("phaethon"), "phaethon");});
test("phaeton -> phaeton", function() {deepEqual( Stem("phaeton"), "phaeton");});
test("phantasime -> phantasim", function() {deepEqual( Stem("phantasime"), "phantasim");});
test("phantasimes -> phantasim", function() {deepEqual( Stem("phantasimes"), "phantasim");});
test("phantasma -> phantasma", function() {deepEqual( Stem("phantasma"), "phantasma");});
test("pharamond -> pharamond", function() {deepEqual( Stem("pharamond"), "pharamond");});
test("pharaoh -> pharaoh", function() {deepEqual( Stem("pharaoh"), "pharaoh");});
test("pharmacopoeia -> pharmacopoeia", function() {deepEqual( Stem("pharmacopoeia"), "pharmacopoeia");});
test("pharsalia -> pharsalia", function() {deepEqual( Stem("pharsalia"), "pharsalia");});
test("pheasant -> pheasant", function() {deepEqual( Stem("pheasant"), "pheasant");});
test("pheasants -> pheasant", function() {deepEqual( Stem("pheasants"), "pheasant");});
test("pheazar -> pheazar", function() {deepEqual( Stem("pheazar"), "pheazar");});
test("phebe -> phebe", function() {deepEqual( Stem("phebe"), "phebe");});
test("phebes -> phebe", function() {deepEqual( Stem("phebes"), "phebe");});
test("pheebus -> pheebu", function() {deepEqual( Stem("pheebus"), "pheebu");});
test("pheeze -> pheez", function() {deepEqual( Stem("pheeze"), "pheez");});
test("phenomena -> phenomena", function() {deepEqual( Stem("phenomena"), "phenomena");});
test("phenomenon -> phenomenon", function() {deepEqual( Stem("phenomenon"), "phenomenon");});
test("phibbus -> phibbu", function() {deepEqual( Stem("phibbus"), "phibbu");});
test("philadelphos -> philadelpho", function() {deepEqual( Stem("philadelphos"), "philadelpho");});
test("philanthropist -> philanthropist", function() {deepEqual( Stem("philanthropist"), "philanthropist");});
test("philario -> philario", function() {deepEqual( Stem("philario"), "philario");});
test("philarmonus -> philarmonu", function() {deepEqual( Stem("philarmonus"), "philarmonu");});
test("philemon -> philemon", function() {deepEqual( Stem("philemon"), "philemon");});
test("philip -> philip", function() {deepEqual( Stem("philip"), "philip");});
test("philippan -> philippan", function() {deepEqual( Stem("philippan"), "philippan");});
test("philippe -> philipp", function() {deepEqual( Stem("philippe"), "philipp");});
test("philippi -> philippi", function() {deepEqual( Stem("philippi"), "philippi");});
test("philister -> philist", function() {deepEqual( Stem("philister"), "philist");});
test("phillida -> phillida", function() {deepEqual( Stem("phillida"), "phillida");});
test("phillis -> philli", function() {deepEqual( Stem("phillis"), "philli");});
test("philo -> philo", function() {deepEqual( Stem("philo"), "philo");});
test("philological -> philolog", function() {deepEqual( Stem("philological"), "philolog");});
test("philologically -> philolog", function() {deepEqual( Stem("philologically"), "philolog");});
test("philologies -> philologi", function() {deepEqual( Stem("philologies"), "philologi");});
test("philology -> philologi", function() {deepEqual( Stem("philology"), "philologi");});
test("philomel -> philomel", function() {deepEqual( Stem("philomel"), "philomel");});
test("philomela -> philomela", function() {deepEqual( Stem("philomela"), "philomela");});
test("philomele -> philomel", function() {deepEqual( Stem("philomele"), "philomel");});
test("philosopher -> philosoph", function() {deepEqual( Stem("philosopher"), "philosoph");});
test("philosophers -> philosoph", function() {deepEqual( Stem("philosophers"), "philosoph");});
test("philosophic -> philosoph", function() {deepEqual( Stem("philosophic"), "philosoph");});
test("philosophical -> philosoph", function() {deepEqual( Stem("philosophical"), "philosoph");});
test("philosophise -> philosophis", function() {deepEqual( Stem("philosophise"), "philosophis");});
test("philosophy -> philosophi", function() {deepEqual( Stem("philosophy"), "philosophi");});
test("philostrate -> philostr", function() {deepEqual( Stem("philostrate"), "philostr");});
test("philotus -> philotu", function() {deepEqual( Stem("philotus"), "philotu");});
test("phlegmatic -> phlegmat", function() {deepEqual( Stem("phlegmatic"), "phlegmat");});
test("phoebe -> phoeb", function() {deepEqual( Stem("phoebe"), "phoeb");});
test("phoebus -> phoebu", function() {deepEqual( Stem("phoebus"), "phoebu");});
test("phoenicia -> phoenicia", function() {deepEqual( Stem("phoenicia"), "phoenicia");});
test("phoenicians -> phoenician", function() {deepEqual( Stem("phoenicians"), "phoenician");});
test("phoenix -> phoenix", function() {deepEqual( Stem("phoenix"), "phoenix");});
test("phonological -> phonolog", function() {deepEqual( Stem("phonological"), "phonolog");});
test("phonologically -> phonolog", function() {deepEqual( Stem("phonologically"), "phonolog");});
test("phonologies -> phonologi", function() {deepEqual( Stem("phonologies"), "phonologi");});
test("phonology -> phonologi", function() {deepEqual( Stem("phonology"), "phonologi");});
test("phorbus -> phorbu", function() {deepEqual( Stem("phorbus"), "phorbu");});
test("photinus -> photinu", function() {deepEqual( Stem("photinus"), "photinu");});
test("phrase -> phrase", function() {deepEqual( Stem("phrase"), "phrase");});
test("phraseless -> phraseless", function() {deepEqual( Stem("phraseless"), "phraseless");});
test("phrases -> phrase", function() {deepEqual( Stem("phrases"), "phrase");});
test("phrygia -> phrygia", function() {deepEqual( Stem("phrygia"), "phrygia");});
test("phrygian -> phrygian", function() {deepEqual( Stem("phrygian"), "phrygian");});
test("phrynia -> phrynia", function() {deepEqual( Stem("phrynia"), "phrynia");});
test("physic -> physic", function() {deepEqual( Stem("physic"), "physic");});
test("physical -> physic", function() {deepEqual( Stem("physical"), "physic");});
test("physician -> physician", function() {deepEqual( Stem("physician"), "physician");});
test("physicians -> physician", function() {deepEqual( Stem("physicians"), "physician");});
test("physics -> physic", function() {deepEqual( Stem("physics"), "physic");});
test("pia -> pia", function() {deepEqual( Stem("pia"), "pia");});
test("pianist -> pianist", function() {deepEqual( Stem("pianist"), "pianist");});
test("piano -> piano", function() {deepEqual( Stem("piano"), "piano");});
test("pianoforte -> pianofort", function() {deepEqual( Stem("pianoforte"), "pianofort");});
test("pianos -> piano", function() {deepEqual( Stem("pianos"), "piano");});
test("piastres -> piastr", function() {deepEqual( Stem("piastres"), "piastr");});
test("piazza -> piazza", function() {deepEqual( Stem("piazza"), "piazza");});
test("pibble -> pibbl", function() {deepEqual( Stem("pibble"), "pibbl");});
test("pible -> pibl", function() {deepEqual( Stem("pible"), "pibl");});
test("pic -> pic", function() {deepEqual( Stem("pic"), "pic");});
test("picardy -> picardi", function() {deepEqual( Stem("picardy"), "picardi");});
test("piccadilly -> piccadilli", function() {deepEqual( Stem("piccadilly"), "piccadilli");});
test("pice -> pice", function() {deepEqual( Stem("pice"), "pice");});
test("pick -> pick", function() {deepEqual( Stem("pick"), "pick");});
test("pickaxe -> pickax", function() {deepEqual( Stem("pickaxe"), "pickax");});
test("pickaxes -> pickax", function() {deepEqual( Stem("pickaxes"), "pickax");});
test("pickbone -> pickbon", function() {deepEqual( Stem("pickbone"), "pickbon");});
test("picked -> pick", function() {deepEqual( Stem("picked"), "pick");});
test("pickers -> picker", function() {deepEqual( Stem("pickers"), "picker");});
test("picketed -> picket", function() {deepEqual( Stem("picketed"), "picket");});
test("pickford -> pickford", function() {deepEqual( Stem("pickford"), "pickford");});
test("picking -> pick", function() {deepEqual( Stem("picking"), "pick");});
test("pickle -> pickl", function() {deepEqual( Stem("pickle"), "pickl");});
test("pickled -> pickl", function() {deepEqual( Stem("pickled"), "pickl");});
test("pickles -> pickl", function() {deepEqual( Stem("pickles"), "pickl");});
test("picklock -> picklock", function() {deepEqual( Stem("picklock"), "picklock");});
test("pickpurse -> pickpurs", function() {deepEqual( Stem("pickpurse"), "pickpurs");});
test("picks -> pick", function() {deepEqual( Stem("picks"), "pick");});
test("pickt -> pickt", function() {deepEqual( Stem("pickt"), "pickt");});
test("pickthanks -> pickthank", function() {deepEqual( Stem("pickthanks"), "pickthank");});
test("pictur -> pictur", function() {deepEqual( Stem("pictur"), "pictur");});
test("picture -> pictur", function() {deepEqual( Stem("picture"), "pictur");});
test("pictured -> pictur", function() {deepEqual( Stem("pictured"), "pictur");});
test("pictures -> pictur", function() {deepEqual( Stem("pictures"), "pictur");});
test("picturesque -> picturesqu", function() {deepEqual( Stem("picturesque"), "picturesqu");});
test("picturs -> pictur", function() {deepEqual( Stem("picturs"), "pictur");});
test("pid -> pid", function() {deepEqual( Stem("pid"), "pid");});
test("pie -> pie", function() {deepEqual( Stem("pie"), "pie");});
test("piec -> piec", function() {deepEqual( Stem("piec"), "piec");});
test("piece -> piec", function() {deepEqual( Stem("piece"), "piec");});
test("pieces -> piec", function() {deepEqual( Stem("pieces"), "piec");});
test("piecing -> piec", function() {deepEqual( Stem("piecing"), "piec");});
test("pied -> pi", function() {deepEqual( Stem("pied"), "pi");});
test("piedness -> pied", function() {deepEqual( Stem("piedness"), "pied");});
test("pier -> pier", function() {deepEqual( Stem("pier"), "pier");});
test("pierc -> pierc", function() {deepEqual( Stem("pierc"), "pierc");});
test("pierce -> pierc", function() {deepEqual( Stem("pierce"), "pierc");});
test("pierced -> pierc", function() {deepEqual( Stem("pierced"), "pierc");});
test("pierces -> pierc", function() {deepEqual( Stem("pierces"), "pierc");});
test("pierceth -> pierceth", function() {deepEqual( Stem("pierceth"), "pierceth");});
test("piercing -> pierc", function() {deepEqual( Stem("piercing"), "pierc");});
test("piercy -> pierci", function() {deepEqual( Stem("piercy"), "pierci");});
test("piers -> pier", function() {deepEqual( Stem("piers"), "pier");});
test("pies -> pi", function() {deepEqual( Stem("pies"), "pi");});
test("piety -> pieti", function() {deepEqual( Stem("piety"), "pieti");});
test("pig -> pig", function() {deepEqual( Stem("pig"), "pig");});
test("pigault -> pigault", function() {deepEqual( Stem("pigault"), "pigault");});
test("pigeon -> pigeon", function() {deepEqual( Stem("pigeon"), "pigeon");});
test("pigeons -> pigeon", function() {deepEqual( Stem("pigeons"), "pigeon");});
test("pight -> pight", function() {deepEqual( Stem("pight"), "pight");});
test("pigmy -> pigmi", function() {deepEqual( Stem("pigmy"), "pigmi");});
test("pigrogromitus -> pigrogromitu", function() {deepEqual( Stem("pigrogromitus"), "pigrogromitu");});
test("pigs -> pig", function() {deepEqual( Stem("pigs"), "pig");});
test("pigtailed -> pigtail", function() {deepEqual( Stem("pigtailed"), "pigtail");});
test("pike -> pike", function() {deepEqual( Stem("pike"), "pike");});
test("pikes -> pike", function() {deepEqual( Stem("pikes"), "pike");});
test("pil -> pil", function() {deepEqual( Stem("pil"), "pil");});
test("pilate -> pilat", function() {deepEqual( Stem("pilate"), "pilat");});
test("pilates -> pilat", function() {deepEqual( Stem("pilates"), "pilat");});
test("pilau -> pilau", function() {deepEqual( Stem("pilau"), "pilau");});
test("pilaus -> pilau", function() {deepEqual( Stem("pilaus"), "pilau");});
test("pilchers -> pilcher", function() {deepEqual( Stem("pilchers"), "pilcher");});
test("pile -> pile", function() {deepEqual( Stem("pile"), "pile");});
test("piles -> pile", function() {deepEqual( Stem("piles"), "pile");});
test("pilf -> pilf", function() {deepEqual( Stem("pilf"), "pilf");});
test("pilfering -> pilfer", function() {deepEqual( Stem("pilfering"), "pilfer");});
test("pilgrim -> pilgrim", function() {deepEqual( Stem("pilgrim"), "pilgrim");});
test("pilgrimage -> pilgrimag", function() {deepEqual( Stem("pilgrimage"), "pilgrimag");});
test("pilgrims -> pilgrim", function() {deepEqual( Stem("pilgrims"), "pilgrim");});
test("pilkington -> pilkington", function() {deepEqual( Stem("pilkington"), "pilkington");});
test("pill -> pill", function() {deepEqual( Stem("pill"), "pill");});
test("pillage -> pillag", function() {deepEqual( Stem("pillage"), "pillag");});
test("pillagers -> pillag", function() {deepEqual( Stem("pillagers"), "pillag");});
test("pillaging -> pillag", function() {deepEqual( Stem("pillaging"), "pillag");});
test("pillar -> pillar", function() {deepEqual( Stem("pillar"), "pillar");});
test("pillars -> pillar", function() {deepEqual( Stem("pillars"), "pillar");});
test("pillau -> pillau", function() {deepEqual( Stem("pillau"), "pillau");});
test("pillicock -> pillicock", function() {deepEqual( Stem("pillicock"), "pillicock");});
test("pillion -> pillion", function() {deepEqual( Stem("pillion"), "pillion");});
test("pillory -> pillori", function() {deepEqual( Stem("pillory"), "pillori");});
test("pillow -> pillow", function() {deepEqual( Stem("pillow"), "pillow");});
test("pillows -> pillow", function() {deepEqual( Stem("pillows"), "pillow");});
test("pills -> pill", function() {deepEqual( Stem("pills"), "pill");});
test("pilot -> pilot", function() {deepEqual( Stem("pilot"), "pilot");});
test("pilots -> pilot", function() {deepEqual( Stem("pilots"), "pilot");});
test("pimlico -> pimlico", function() {deepEqual( Stem("pimlico"), "pimlico");});
test("pimpernell -> pimpernel", function() {deepEqual( Stem("pimpernell"), "pimpernel");});
test("pimple -> pimpl", function() {deepEqual( Stem("pimple"), "pimpl");});
test("pin -> pin", function() {deepEqual( Stem("pin"), "pin");});
test("pinacles -> pinacl", function() {deepEqual( Stem("pinacles"), "pinacl");});
test("pinafores -> pinafor", function() {deepEqual( Stem("pinafores"), "pinafor");});
test("pinch -> pinch", function() {deepEqual( Stem("pinch"), "pinch");});
test("pinched -> pinch", function() {deepEqual( Stem("pinched"), "pinch");});
test("pincher -> pincher", function() {deepEqual( Stem("pincher"), "pincher");});
test("pinches -> pinch", function() {deepEqual( Stem("pinches"), "pinch");});
test("pinching -> pinch", function() {deepEqual( Stem("pinching"), "pinch");});
test("pincian -> pincian", function() {deepEqual( Stem("pincian"), "pincian");});
test("pincushion -> pincushion", function() {deepEqual( Stem("pincushion"), "pincushion");});
test("pindarus -> pindaru", function() {deepEqual( Stem("pindarus"), "pindaru");});
test("pine -> pine", function() {deepEqual( Stem("pine"), "pine");});
test("pined -> pine", function() {deepEqual( Stem("pined"), "pine");});
test("pineries -> pineri", function() {deepEqual( Stem("pineries"), "pineri");});
test("pines -> pine", function() {deepEqual( Stem("pines"), "pine");});
test("pinfold -> pinfold", function() {deepEqual( Stem("pinfold"), "pinfold");});
test("pining -> pine", function() {deepEqual( Stem("pining"), "pine");});
test("pinion -> pinion", function() {deepEqual( Stem("pinion"), "pinion");});
test("pinioned -> pinion", function() {deepEqual( Stem("pinioned"), "pinion");});
test("pink -> pink", function() {deepEqual( Stem("pink"), "pink");});
test("pinkerton -> pinkerton", function() {deepEqual( Stem("pinkerton"), "pinkerton");});
test("pinn -> pinn", function() {deepEqual( Stem("pinn"), "pinn");});
test("pinnace -> pinnac", function() {deepEqual( Stem("pinnace"), "pinnac");});
test("pinned -> pin", function() {deepEqual( Stem("pinned"), "pin");});
test("pinner -> pinner", function() {deepEqual( Stem("pinner"), "pinner");});
test("pins -> pin", function() {deepEqual( Stem("pins"), "pin");});
test("pinse -> pins", function() {deepEqual( Stem("pinse"), "pins");});
test("pint -> pint", function() {deepEqual( Stem("pint"), "pint");});
test("pintpot -> pintpot", function() {deepEqual( Stem("pintpot"), "pintpot");});
test("pints -> pint", function() {deepEqual( Stem("pints"), "pint");});
test("pioned -> pion", function() {deepEqual( Stem("pioned"), "pion");});
test("pioneers -> pioneer", function() {deepEqual( Stem("pioneers"), "pioneer");});
test("pioner -> pioner", function() {deepEqual( Stem("pioner"), "pioner");});
test("pioners -> pioner", function() {deepEqual( Stem("pioners"), "pioner");});
test("pious -> piou", function() {deepEqual( Stem("pious"), "piou");});
test("piously -> piousli", function() {deepEqual( Stem("piously"), "piousli");});
test("pip -> pip", function() {deepEqual( Stem("pip"), "pip");});
test("pipe -> pipe", function() {deepEqual( Stem("pipe"), "pipe");});
test("piper -> piper", function() {deepEqual( Stem("piper"), "piper");});
test("pipers -> piper", function() {deepEqual( Stem("pipers"), "piper");});
test("pipes -> pipe", function() {deepEqual( Stem("pipes"), "pipe");});
test("piping -> pipe", function() {deepEqual( Stem("piping"), "pipe");});
test("pipkin -> pipkin", function() {deepEqual( Stem("pipkin"), "pipkin");});
test("pippin -> pippin", function() {deepEqual( Stem("pippin"), "pippin");});
test("pippins -> pippin", function() {deepEqual( Stem("pippins"), "pippin");});
test("piquant -> piquant", function() {deepEqual( Stem("piquant"), "piquant");});
test("pique -> piqu", function() {deepEqual( Stem("pique"), "piqu");});
test("piquet -> piquet", function() {deepEqual( Stem("piquet"), "piquet");});
test("pirate -> pirat", function() {deepEqual( Stem("pirate"), "pirat");});
test("pirates -> pirat", function() {deepEqual( Stem("pirates"), "pirat");});
test("piratical -> pirat", function() {deepEqual( Stem("piratical"), "pirat");});
test("pisa -> pisa", function() {deepEqual( Stem("pisa"), "pisa");});
test("pisanio -> pisanio", function() {deepEqual( Stem("pisanio"), "pisanio");});
test("pish -> pish", function() {deepEqual( Stem("pish"), "pish");});
test("pismires -> pismir", function() {deepEqual( Stem("pismires"), "pismir");});
test("piss -> piss", function() {deepEqual( Stem("piss"), "piss");});
test("pissing -> piss", function() {deepEqual( Stem("pissing"), "piss");});
test("pistol -> pistol", function() {deepEqual( Stem("pistol"), "pistol");});
test("pistols -> pistol", function() {deepEqual( Stem("pistols"), "pistol");});
test("pit -> pit", function() {deepEqual( Stem("pit"), "pit");});
test("pitch -> pitch", function() {deepEqual( Stem("pitch"), "pitch");});
test("pitched -> pitch", function() {deepEqual( Stem("pitched"), "pitch");});
test("pitcher -> pitcher", function() {deepEqual( Stem("pitcher"), "pitcher");});
test("pitchers -> pitcher", function() {deepEqual( Stem("pitchers"), "pitcher");});
test("pitchley -> pitchlei", function() {deepEqual( Stem("pitchley"), "pitchlei");});
test("pitchy -> pitchi", function() {deepEqual( Stem("pitchy"), "pitchi");});
test("piteous -> piteou", function() {deepEqual( Stem("piteous"), "piteou");});
test("piteously -> piteous", function() {deepEqual( Stem("piteously"), "piteous");});
test("pitfall -> pitfal", function() {deepEqual( Stem("pitfall"), "pitfal");});
test("pith -> pith", function() {deepEqual( Stem("pith"), "pith");});
test("pithless -> pithless", function() {deepEqual( Stem("pithless"), "pithless");});
test("pithy -> pithi", function() {deepEqual( Stem("pithy"), "pithi");});
test("pitiable -> pitiabl", function() {deepEqual( Stem("pitiable"), "pitiabl");});
test("pitie -> piti", function() {deepEqual( Stem("pitie"), "piti");});
test("pitied -> piti", function() {deepEqual( Stem("pitied"), "piti");});
test("pities -> piti", function() {deepEqual( Stem("pities"), "piti");});
test("pitiful -> piti", function() {deepEqual( Stem("pitiful"), "piti");});
test("pitifully -> pitifulli", function() {deepEqual( Stem("pitifully"), "pitifulli");});
test("pitiless -> pitiless", function() {deepEqual( Stem("pitiless"), "pitiless");});
test("pitilessly -> pitilessli", function() {deepEqual( Stem("pitilessly"), "pitilessli");});
test("pits -> pit", function() {deepEqual( Stem("pits"), "pit");});
test("pitt -> pitt", function() {deepEqual( Stem("pitt"), "pitt");});
test("pittance -> pittanc", function() {deepEqual( Stem("pittance"), "pittanc");});
test("pitted -> pit", function() {deepEqual( Stem("pitted"), "pit");});
test("pittie -> pitti", function() {deepEqual( Stem("pittie"), "pitti");});
test("pittikins -> pittikin", function() {deepEqual( Stem("pittikins"), "pittikin");});
test("pitting -> pit", function() {deepEqual( Stem("pitting"), "pit");});
test("pity -> piti", function() {deepEqual( Stem("pity"), "piti");});
test("pitying -> piti", function() {deepEqual( Stem("pitying"), "piti");});
test("pius -> piu", function() {deepEqual( Stem("pius"), "piu");});
test("plac -> plac", function() {deepEqual( Stem("plac"), "plac");});
test("placable -> placabl", function() {deepEqual( Stem("placable"), "placabl");});
test("placard -> placard", function() {deepEqual( Stem("placard"), "placard");});
test("placarded -> placard", function() {deepEqual( Stem("placarded"), "placard");});
test("place -> place", function() {deepEqual( Stem("place"), "place");});
test("placed -> place", function() {deepEqual( Stem("placed"), "place");});
test("placens -> placen", function() {deepEqual( Stem("placens"), "placen");});
test("placentio -> placentio", function() {deepEqual( Stem("placentio"), "placentio");});
test("places -> place", function() {deepEqual( Stem("places"), "place");});
test("placeth -> placeth", function() {deepEqual( Stem("placeth"), "placeth");});
test("placid -> placid", function() {deepEqual( Stem("placid"), "placid");});
test("placidity -> placid", function() {deepEqual( Stem("placidity"), "placid");});
test("placidly -> placidli", function() {deepEqual( Stem("placidly"), "placidli");});
test("placing -> place", function() {deepEqual( Stem("placing"), "place");});
test("plack -> plack", function() {deepEqual( Stem("plack"), "plack");});
test("placket -> placket", function() {deepEqual( Stem("placket"), "placket");});
test("plackets -> placket", function() {deepEqual( Stem("plackets"), "placket");});
test("plagu -> plagu", function() {deepEqual( Stem("plagu"), "plagu");});
test("plague -> plagu", function() {deepEqual( Stem("plague"), "plagu");});
test("plagued -> plagu", function() {deepEqual( Stem("plagued"), "plagu");});
test("plagues -> plagu", function() {deepEqual( Stem("plagues"), "plagu");});
test("plaguing -> plagu", function() {deepEqual( Stem("plaguing"), "plagu");});
test("plaguy -> plagui", function() {deepEqual( Stem("plaguy"), "plagui");});
test("plain -> plain", function() {deepEqual( Stem("plain"), "plain");});
test("plainer -> plainer", function() {deepEqual( Stem("plainer"), "plainer");});
test("plainest -> plainest", function() {deepEqual( Stem("plainest"), "plainest");});
test("plaining -> plain", function() {deepEqual( Stem("plaining"), "plain");});
test("plainings -> plain", function() {deepEqual( Stem("plainings"), "plain");});
test("plainly -> plainli", function() {deepEqual( Stem("plainly"), "plainli");});
test("plainness -> plain", function() {deepEqual( Stem("plainness"), "plain");});
test("plains -> plain", function() {deepEqual( Stem("plains"), "plain");});
test("plainsong -> plainsong", function() {deepEqual( Stem("plainsong"), "plainsong");});
test("plaintful -> plaint", function() {deepEqual( Stem("plaintful"), "plaint");});
test("plaintiff -> plaintiff", function() {deepEqual( Stem("plaintiff"), "plaintiff");});
test("plaintiffs -> plaintiff", function() {deepEqual( Stem("plaintiffs"), "plaintiff");});
test("plaintive -> plaintiv", function() {deepEqual( Stem("plaintive"), "plaintiv");});
test("plaintively -> plaintiv", function() {deepEqual( Stem("plaintively"), "plaintiv");});
test("plaints -> plaint", function() {deepEqual( Stem("plaints"), "plaint");});
test("plaisir -> plaisir", function() {deepEqual( Stem("plaisir"), "plaisir");});
test("plait -> plait", function() {deepEqual( Stem("plait"), "plait");});
test("plan -> plan", function() {deepEqual( Stem("plan"), "plan");});
test("planched -> planch", function() {deepEqual( Stem("planched"), "planch");});
test("planet -> planet", function() {deepEqual( Stem("planet"), "planet");});
test("planetary -> planetari", function() {deepEqual( Stem("planetary"), "planetari");});
test("planets -> planet", function() {deepEqual( Stem("planets"), "planet");});
test("plank -> plank", function() {deepEqual( Stem("plank"), "plank");});
test("planks -> plank", function() {deepEqual( Stem("planks"), "plank");});
test("planned -> plan", function() {deepEqual( Stem("planned"), "plan");});
test("plans -> plan", function() {deepEqual( Stem("plans"), "plan");});
test("plant -> plant", function() {deepEqual( Stem("plant"), "plant");});
test("plantage -> plantag", function() {deepEqual( Stem("plantage"), "plantag");});
test("plantagenet -> plantagenet", function() {deepEqual( Stem("plantagenet"), "plantagenet");});
test("plantagenets -> plantagenet", function() {deepEqual( Stem("plantagenets"), "plantagenet");});
test("plantain -> plantain", function() {deepEqual( Stem("plantain"), "plantain");});
test("plantation -> plantat", function() {deepEqual( Stem("plantation"), "plantat");});
test("plantations -> plantat", function() {deepEqual( Stem("plantations"), "plantat");});
test("planted -> plant", function() {deepEqual( Stem("planted"), "plant");});
test("planteth -> planteth", function() {deepEqual( Stem("planteth"), "planteth");});
test("planting -> plant", function() {deepEqual( Stem("planting"), "plant");});
test("plants -> plant", function() {deepEqual( Stem("plants"), "plant");});
test("plaque -> plaqu", function() {deepEqual( Stem("plaque"), "plaqu");});
test("plaques -> plaqu", function() {deepEqual( Stem("plaques"), "plaqu");});
test("plash -> plash", function() {deepEqual( Stem("plash"), "plash");});
test("plashy -> plashi", function() {deepEqual( Stem("plashy"), "plashi");});
test("plassy -> plassi", function() {deepEqual( Stem("plassy"), "plassi");});
test("plast -> plast", function() {deepEqual( Stem("plast"), "plast");});
test("plaster -> plaster", function() {deepEqual( Stem("plaster"), "plaster");});
test("plasterer -> plaster", function() {deepEqual( Stem("plasterer"), "plaster");});
test("plat -> plat", function() {deepEqual( Stem("plat"), "plat");});
test("plate -> plate", function() {deepEqual( Stem("plate"), "plate");});
test("plateau -> plateau", function() {deepEqual( Stem("plateau"), "plateau");});
test("plated -> plate", function() {deepEqual( Stem("plated"), "plate");});
test("plates -> plate", function() {deepEqual( Stem("plates"), "plate");});
test("platform -> platform", function() {deepEqual( Stem("platform"), "platform");});
test("platforms -> platform", function() {deepEqual( Stem("platforms"), "platform");});
test("plats -> plat", function() {deepEqual( Stem("plats"), "plat");});
test("platted -> plat", function() {deepEqual( Stem("platted"), "plat");});
test("platz -> platz", function() {deepEqual( Stem("platz"), "platz");});
test("plausible -> plausibl", function() {deepEqual( Stem("plausible"), "plausibl");});
test("plausive -> plausiv", function() {deepEqual( Stem("plausive"), "plausiv");});
test("plautus -> plautu", function() {deepEqual( Stem("plautus"), "plautu");});
test("play -> plai", function() {deepEqual( Stem("play"), "plai");});
test("played -> plai", function() {deepEqual( Stem("played"), "plai");});
test("player -> player", function() {deepEqual( Stem("player"), "player");});
test("players -> player", function() {deepEqual( Stem("players"), "player");});
test("playeth -> playeth", function() {deepEqual( Stem("playeth"), "playeth");});
test("playfellow -> playfellow", function() {deepEqual( Stem("playfellow"), "playfellow");});
test("playfellows -> playfellow", function() {deepEqual( Stem("playfellows"), "playfellow");});
test("playfully -> playfulli", function() {deepEqual( Stem("playfully"), "playfulli");});
test("playground -> playground", function() {deepEqual( Stem("playground"), "playground");});
test("playhouse -> playhous", function() {deepEqual( Stem("playhouse"), "playhous");});
test("playing -> plai", function() {deepEqual( Stem("playing"), "plai");});
test("plays -> plai", function() {deepEqual( Stem("plays"), "plai");});
test("plea -> plea", function() {deepEqual( Stem("plea"), "plea");});
test("pleach -> pleach", function() {deepEqual( Stem("pleach"), "pleach");});
test("pleached -> pleach", function() {deepEqual( Stem("pleached"), "pleach");});
test("plead -> plead", function() {deepEqual( Stem("plead"), "plead");});
test("pleaded -> plead", function() {deepEqual( Stem("pleaded"), "plead");});
test("pleader -> pleader", function() {deepEqual( Stem("pleader"), "pleader");});
test("pleaders -> pleader", function() {deepEqual( Stem("pleaders"), "pleader");});
test("pleading -> plead", function() {deepEqual( Stem("pleading"), "plead");});
test("pleads -> plead", function() {deepEqual( Stem("pleads"), "plead");});
test("pleas -> plea", function() {deepEqual( Stem("pleas"), "plea");});
test("pleasance -> pleasanc", function() {deepEqual( Stem("pleasance"), "pleasanc");});
test("pleasant -> pleasant", function() {deepEqual( Stem("pleasant"), "pleasant");});
test("pleasanter -> pleasant", function() {deepEqual( Stem("pleasanter"), "pleasant");});
test("pleasantest -> pleasantest", function() {deepEqual( Stem("pleasantest"), "pleasantest");});
test("pleasantly -> pleasantli", function() {deepEqual( Stem("pleasantly"), "pleasantli");});
test("pleasantry -> pleasantri", function() {deepEqual( Stem("pleasantry"), "pleasantri");});
test("please -> pleas", function() {deepEqual( Stem("please"), "pleas");});
test("pleased -> pleas", function() {deepEqual( Stem("pleased"), "pleas");});
test("pleaser -> pleaser", function() {deepEqual( Stem("pleaser"), "pleaser");});
test("pleasers -> pleaser", function() {deepEqual( Stem("pleasers"), "pleaser");});
test("pleases -> pleas", function() {deepEqual( Stem("pleases"), "pleas");});
test("pleasest -> pleasest", function() {deepEqual( Stem("pleasest"), "pleasest");});
test("pleaseth -> pleaseth", function() {deepEqual( Stem("pleaseth"), "pleaseth");});
test("pleasing -> pleas", function() {deepEqual( Stem("pleasing"), "pleas");});
test("pleasurable -> pleasur", function() {deepEqual( Stem("pleasurable"), "pleasur");});
test("pleasure -> pleasur", function() {deepEqual( Stem("pleasure"), "pleasur");});
test("pleasures -> pleasur", function() {deepEqual( Stem("pleasures"), "pleasur");});
test("pleasuring -> pleasur", function() {deepEqual( Stem("pleasuring"), "pleasur");});
test("plebeians -> plebeian", function() {deepEqual( Stem("plebeians"), "plebeian");});
test("plebeii -> plebeii", function() {deepEqual( Stem("plebeii"), "plebeii");});
test("plebs -> pleb", function() {deepEqual( Stem("plebs"), "pleb");});
test("pledge -> pledg", function() {deepEqual( Stem("pledge"), "pledg");});
test("pledged -> pledg", function() {deepEqual( Stem("pledged"), "pledg");});
test("pledges -> pledg", function() {deepEqual( Stem("pledges"), "pledg");});
test("pleets -> pleet", function() {deepEqual( Stem("pleets"), "pleet");});
test("pleines -> plein", function() {deepEqual( Stem("pleines"), "plein");});
test("plenipotentiary -> plenipotentiari", function() {deepEqual( Stem("plenipotentiary"), "plenipotentiari");});
test("plenitude -> plenitud", function() {deepEqual( Stem("plenitude"), "plenitud");});
test("plenteous -> plenteou", function() {deepEqual( Stem("plenteous"), "plenteou");});
test("plenteously -> plenteous", function() {deepEqual( Stem("plenteously"), "plenteous");});
test("plenties -> plenti", function() {deepEqual( Stem("plenties"), "plenti");});
test("plentiful -> plenti", function() {deepEqual( Stem("plentiful"), "plenti");});
test("plentifully -> plentifulli", function() {deepEqual( Stem("plentifully"), "plentifulli");});
test("plenty -> plenti", function() {deepEqual( Stem("plenty"), "plenti");});
test("pless -> pless", function() {deepEqual( Stem("pless"), "pless");});
test("plessed -> pless", function() {deepEqual( Stem("plessed"), "pless");});
test("plessing -> pless", function() {deepEqual( Stem("plessing"), "pless");});
test("pliant -> pliant", function() {deepEqual( Stem("pliant"), "pliant");});
test("plied -> pli", function() {deepEqual( Stem("plied"), "pli");});
test("plies -> pli", function() {deepEqual( Stem("plies"), "pli");});
test("plight -> plight", function() {deepEqual( Stem("plight"), "plight");});
test("plighted -> plight", function() {deepEqual( Stem("plighted"), "plight");});
test("plighter -> plighter", function() {deepEqual( Stem("plighter"), "plighter");});
test("plod -> plod", function() {deepEqual( Stem("plod"), "plod");});
test("plodded -> plod", function() {deepEqual( Stem("plodded"), "plod");});
test("plodders -> plodder", function() {deepEqual( Stem("plodders"), "plodder");});
test("plodding -> plod", function() {deepEqual( Stem("plodding"), "plod");});
test("plods -> plod", function() {deepEqual( Stem("plods"), "plod");});
test("ploo -> ploo", function() {deepEqual( Stem("ploo"), "ploo");});
test("plood -> plood", function() {deepEqual( Stem("plood"), "plood");});
test("ploody -> ploodi", function() {deepEqual( Stem("ploody"), "ploodi");});
test("plot -> plot", function() {deepEqual( Stem("plot"), "plot");});
test("plots -> plot", function() {deepEqual( Stem("plots"), "plot");});
test("plotted -> plot", function() {deepEqual( Stem("plotted"), "plot");});
test("plotter -> plotter", function() {deepEqual( Stem("plotter"), "plotter");});
test("plough -> plough", function() {deepEqual( Stem("plough"), "plough");});
test("ploughed -> plough", function() {deepEqual( Stem("ploughed"), "plough");});
test("ploughing -> plough", function() {deepEqual( Stem("ploughing"), "plough");});
test("ploughman -> ploughman", function() {deepEqual( Stem("ploughman"), "ploughman");});
test("ploughmen -> ploughmen", function() {deepEqual( Stem("ploughmen"), "ploughmen");});
test("plovers -> plover", function() {deepEqual( Stem("plovers"), "plover");});
test("plow -> plow", function() {deepEqual( Stem("plow"), "plow");});
test("plows -> plow", function() {deepEqual( Stem("plows"), "plow");});
test("pluck -> pluck", function() {deepEqual( Stem("pluck"), "pluck");});
test("plucked -> pluck", function() {deepEqual( Stem("plucked"), "pluck");});
test("plucker -> plucker", function() {deepEqual( Stem("plucker"), "plucker");});
test("plucking -> pluck", function() {deepEqual( Stem("plucking"), "pluck");});
test("plucks -> pluck", function() {deepEqual( Stem("plucks"), "pluck");});
test("plue -> plue", function() {deepEqual( Stem("plue"), "plue");});
test("plum -> plum", function() {deepEqual( Stem("plum"), "plum");});
test("plume -> plume", function() {deepEqual( Stem("plume"), "plume");});
test("plumed -> plume", function() {deepEqual( Stem("plumed"), "plume");});
test("plumes -> plume", function() {deepEqual( Stem("plumes"), "plume");});
test("plummet -> plummet", function() {deepEqual( Stem("plummet"), "plummet");});
test("plump -> plump", function() {deepEqual( Stem("plump"), "plump");});
test("plumped -> plump", function() {deepEqual( Stem("plumped"), "plump");});
test("plumping -> plump", function() {deepEqual( Stem("plumping"), "plump");});
test("plumpy -> plumpi", function() {deepEqual( Stem("plumpy"), "plumpi");});
test("plums -> plum", function() {deepEqual( Stem("plums"), "plum");});
test("plunder -> plunder", function() {deepEqual( Stem("plunder"), "plunder");});
test("plung -> plung", function() {deepEqual( Stem("plung"), "plung");});
test("plunge -> plung", function() {deepEqual( Stem("plunge"), "plung");});
test("plunged -> plung", function() {deepEqual( Stem("plunged"), "plung");});
test("plunges -> plung", function() {deepEqual( Stem("plunges"), "plung");});
test("plunging -> plung", function() {deepEqual( Stem("plunging"), "plung");});
test("plural -> plural", function() {deepEqual( Stem("plural"), "plural");});
test("plurisy -> plurisi", function() {deepEqual( Stem("plurisy"), "plurisi");});
test("plus -> plu", function() {deepEqual( Stem("plus"), "plu");});
test("plush -> plush", function() {deepEqual( Stem("plush"), "plush");});
test("pluto -> pluto", function() {deepEqual( Stem("pluto"), "pluto");});
test("plutus -> plutu", function() {deepEqual( Stem("plutus"), "plutu");});
test("ply -> ply", function() {deepEqual( Stem("ply"), "ply");});
test("plying -> ply", function() {deepEqual( Stem("plying"), "ply");});
test("po -> po", function() {deepEqual( Stem("po"), "po");});
test("poacher -> poacher", function() {deepEqual( Stem("poacher"), "poacher");});
test("poachers -> poacher", function() {deepEqual( Stem("poachers"), "poacher");});
test("poaching -> poach", function() {deepEqual( Stem("poaching"), "poach");});
test("pocket -> pocket", function() {deepEqual( Stem("pocket"), "pocket");});
test("pocketed -> pocket", function() {deepEqual( Stem("pocketed"), "pocket");});
test("pocketful -> pocket", function() {deepEqual( Stem("pocketful"), "pocket");});
test("pocketing -> pocket", function() {deepEqual( Stem("pocketing"), "pocket");});
test("pockets -> pocket", function() {deepEqual( Stem("pockets"), "pocket");});
test("pocky -> pocki", function() {deepEqual( Stem("pocky"), "pocki");});
test("podder -> podder", function() {deepEqual( Stem("podder"), "podder");});
test("podgers -> podger", function() {deepEqual( Stem("podgers"), "podger");});
test("pody -> podi", function() {deepEqual( Stem("pody"), "podi");});
test("poe -> poe", function() {deepEqual( Stem("poe"), "poe");});
test("poem -> poem", function() {deepEqual( Stem("poem"), "poem");});
test("poems -> poem", function() {deepEqual( Stem("poems"), "poem");});
test("poesy -> poesi", function() {deepEqual( Stem("poesy"), "poesi");});
test("poet -> poet", function() {deepEqual( Stem("poet"), "poet");});
test("poetess -> poetess", function() {deepEqual( Stem("poetess"), "poetess");});
test("poetical -> poetic", function() {deepEqual( Stem("poetical"), "poetic");});
test("poetry -> poetri", function() {deepEqual( Stem("poetry"), "poetri");});
test("poets -> poet", function() {deepEqual( Stem("poets"), "poet");});
test("poictiers -> poictier", function() {deepEqual( Stem("poictiers"), "poictier");});
test("poinards -> poinard", function() {deepEqual( Stem("poinards"), "poinard");});
test("poins -> poin", function() {deepEqual( Stem("poins"), "poin");});
test("point -> point", function() {deepEqual( Stem("point"), "point");});
test("pointblank -> pointblank", function() {deepEqual( Stem("pointblank"), "pointblank");});
test("pointed -> point", function() {deepEqual( Stem("pointed"), "point");});
test("pointedly -> pointedli", function() {deepEqual( Stem("pointedly"), "pointedli");});
test("pointer -> pointer", function() {deepEqual( Stem("pointer"), "pointer");});
test("pointing -> point", function() {deepEqual( Stem("pointing"), "point");});
test("points -> point", function() {deepEqual( Stem("points"), "point");});
test("pois -> poi", function() {deepEqual( Stem("pois"), "poi");});
test("poise -> pois", function() {deepEqual( Stem("poise"), "pois");});
test("poised -> pois", function() {deepEqual( Stem("poised"), "pois");});
test("poising -> pois", function() {deepEqual( Stem("poising"), "pois");});
test("poison -> poison", function() {deepEqual( Stem("poison"), "poison");});
test("poisoned -> poison", function() {deepEqual( Stem("poisoned"), "poison");});
test("poisoner -> poison", function() {deepEqual( Stem("poisoner"), "poison");});
test("poisoning -> poison", function() {deepEqual( Stem("poisoning"), "poison");});
test("poisonous -> poison", function() {deepEqual( Stem("poisonous"), "poison");});
test("poisons -> poison", function() {deepEqual( Stem("poisons"), "poison");});
test("poke -> poke", function() {deepEqual( Stem("poke"), "poke");});
test("poker -> poker", function() {deepEqual( Stem("poker"), "poker");});
test("pokey -> pokei", function() {deepEqual( Stem("pokey"), "pokei");});
test("poking -> poke", function() {deepEqual( Stem("poking"), "poke");});
test("pol -> pol", function() {deepEqual( Stem("pol"), "pol");});
test("polack -> polack", function() {deepEqual( Stem("polack"), "polack");});
test("polacks -> polack", function() {deepEqual( Stem("polacks"), "polack");});
test("poland -> poland", function() {deepEqual( Stem("poland"), "poland");});
test("pold -> pold", function() {deepEqual( Stem("pold"), "pold");});
test("poldoody -> poldoodi", function() {deepEqual( Stem("poldoody"), "poldoodi");});
test("pole -> pole", function() {deepEqual( Stem("pole"), "pole");});
test("poleaxe -> poleax", function() {deepEqual( Stem("poleaxe"), "poleax");});
test("polecat -> polecat", function() {deepEqual( Stem("polecat"), "polecat");});
test("polecats -> polecat", function() {deepEqual( Stem("polecats"), "polecat");});
test("polemon -> polemon", function() {deepEqual( Stem("polemon"), "polemon");});
test("poles -> pole", function() {deepEqual( Stem("poles"), "pole");});
test("poli -> poli", function() {deepEqual( Stem("poli"), "poli");});
test("police -> polic", function() {deepEqual( Stem("police"), "polic");});
test("policeman -> policeman", function() {deepEqual( Stem("policeman"), "policeman");});
test("policemen -> policemen", function() {deepEqual( Stem("policemen"), "policemen");});
test("policies -> polici", function() {deepEqual( Stem("policies"), "polici");});
test("policy -> polici", function() {deepEqual( Stem("policy"), "polici");});
test("polish -> polish", function() {deepEqual( Stem("polish"), "polish");});
test("polished -> polish", function() {deepEqual( Stem("polished"), "polish");});
test("polite -> polit", function() {deepEqual( Stem("polite"), "polit");});
test("politeness -> polit", function() {deepEqual( Stem("politeness"), "polit");});
test("politest -> politest", function() {deepEqual( Stem("politest"), "politest");});
test("politic -> polit", function() {deepEqual( Stem("politic"), "polit");});
test("political -> polit", function() {deepEqual( Stem("political"), "polit");});
test("politician -> politician", function() {deepEqual( Stem("politician"), "politician");});
test("politicians -> politician", function() {deepEqual( Stem("politicians"), "politician");});
test("politicly -> politicli", function() {deepEqual( Stem("politicly"), "politicli");});
test("politics -> polit", function() {deepEqual( Stem("politics"), "polit");});
test("polixenes -> polixen", function() {deepEqual( Stem("polixenes"), "polixen");});
test("poll -> poll", function() {deepEqual( Stem("poll"), "poll");});
test("polluted -> pollut", function() {deepEqual( Stem("polluted"), "pollut");});
test("pollution -> pollut", function() {deepEqual( Stem("pollution"), "pollut");});
test("polly -> polli", function() {deepEqual( Stem("polly"), "polli");});
test("polonaise -> polonais", function() {deepEqual( Stem("polonaise"), "polonais");});
test("polonia -> polonia", function() {deepEqual( Stem("polonia"), "polonia");});
test("polonies -> poloni", function() {deepEqual( Stem("polonies"), "poloni");});
test("polonius -> poloniu", function() {deepEqual( Stem("polonius"), "poloniu");});
test("poltroons -> poltroon", function() {deepEqual( Stem("poltroons"), "poltroon");});
test("polusion -> polus", function() {deepEqual( Stem("polusion"), "polus");});
test("polyandria -> polyandria", function() {deepEqual( Stem("polyandria"), "polyandria");});
test("polydamus -> polydamu", function() {deepEqual( Stem("polydamus"), "polydamu");});
test("polydore -> polydor", function() {deepEqual( Stem("polydore"), "polydor");});
test("polyglot -> polyglot", function() {deepEqual( Stem("polyglot"), "polyglot");});
test("polygynia -> polygynia", function() {deepEqual( Stem("polygynia"), "polygynia");});
test("polyxena -> polyxena", function() {deepEqual( Stem("polyxena"), "polyxena");});
test("pomander -> pomand", function() {deepEqual( Stem("pomander"), "pomand");});
test("pomatums -> pomatum", function() {deepEqual( Stem("pomatums"), "pomatum");});
test("pomaturn -> pomaturn", function() {deepEqual( Stem("pomaturn"), "pomaturn");});
test("pomegranate -> pomegran", function() {deepEqual( Stem("pomegranate"), "pomegran");});
test("pomewater -> pomewat", function() {deepEqual( Stem("pomewater"), "pomewat");});
test("pomfret -> pomfret", function() {deepEqual( Stem("pomfret"), "pomfret");});
test("pomgarnet -> pomgarnet", function() {deepEqual( Stem("pomgarnet"), "pomgarnet");});
test("pommel -> pommel", function() {deepEqual( Stem("pommel"), "pommel");});
test("pommes -> pomm", function() {deepEqual( Stem("pommes"), "pomm");});
test("pomp -> pomp", function() {deepEqual( Stem("pomp"), "pomp");});
test("pompadour -> pompadour", function() {deepEqual( Stem("pompadour"), "pompadour");});
test("pomped -> pomp", function() {deepEqual( Stem("pomped"), "pomp");});
test("pompeii -> pompeii", function() {deepEqual( Stem("pompeii"), "pompeii");});
test("pompeius -> pompeiu", function() {deepEqual( Stem("pompeius"), "pompeiu");});
test("pompey -> pompei", function() {deepEqual( Stem("pompey"), "pompei");});
test("pompili -> pompili", function() {deepEqual( Stem("pompili"), "pompili");});
test("pompion -> pompion", function() {deepEqual( Stem("pompion"), "pompion");});
test("pomposity -> pompos", function() {deepEqual( Stem("pomposity"), "pompos");});
test("pompous -> pompou", function() {deepEqual( Stem("pompous"), "pompou");});
test("pompously -> pompous", function() {deepEqual( Stem("pompously"), "pompous");});
test("pomps -> pomp", function() {deepEqual( Stem("pomps"), "pomp");});
test("pon -> pon", function() {deepEqual( Stem("pon"), "pon");});
test("pond -> pond", function() {deepEqual( Stem("pond"), "pond");});
test("ponder -> ponder", function() {deepEqual( Stem("ponder"), "ponder");});
test("pondered -> ponder", function() {deepEqual( Stem("pondered"), "ponder");});
test("ponderous -> ponder", function() {deepEqual( Stem("ponderous"), "ponder");});
test("ponds -> pond", function() {deepEqual( Stem("ponds"), "pond");});
test("poniard -> poniard", function() {deepEqual( Stem("poniard"), "poniard");});
test("poniards -> poniard", function() {deepEqual( Stem("poniards"), "poniard");});
test("ponies -> poni", function() {deepEqual( Stem("ponies"), "poni");});
test("pont -> pont", function() {deepEqual( Stem("pont"), "pont");});
test("pontic -> pontic", function() {deepEqual( Stem("pontic"), "pontic");});
test("pontifical -> pontif", function() {deepEqual( Stem("pontifical"), "pontif");});
test("ponto -> ponto", function() {deepEqual( Stem("ponto"), "ponto");});
test("ponton -> ponton", function() {deepEqual( Stem("ponton"), "ponton");});
test("pontoons -> pontoon", function() {deepEqual( Stem("pontoons"), "pontoon");});
test("pony -> poni", function() {deepEqual( Stem("pony"), "poni");});
test("poodle -> poodl", function() {deepEqual( Stem("poodle"), "poodl");});
test("pooh -> pooh", function() {deepEqual( Stem("pooh"), "pooh");});
test("poohed -> pooh", function() {deepEqual( Stem("poohed"), "pooh");});
test("pool -> pool", function() {deepEqual( Stem("pool"), "pool");});
test("poole -> pool", function() {deepEqual( Stem("poole"), "pool");});
test("pools -> pool", function() {deepEqual( Stem("pools"), "pool");});
test("poop -> poop", function() {deepEqual( Stem("poop"), "poop");});
test("poor -> poor", function() {deepEqual( Stem("poor"), "poor");});
test("poorer -> poorer", function() {deepEqual( Stem("poorer"), "poorer");});
test("poorest -> poorest", function() {deepEqual( Stem("poorest"), "poorest");});
test("poorly -> poorli", function() {deepEqual( Stem("poorly"), "poorli");});
test("pop -> pop", function() {deepEqual( Stem("pop"), "pop");});
test("pope -> pope", function() {deepEqual( Stem("pope"), "pope");});
test("popedom -> popedom", function() {deepEqual( Stem("popedom"), "popedom");});
test("popes -> pope", function() {deepEqual( Stem("popes"), "pope");});
test("popilius -> popiliu", function() {deepEqual( Stem("popilius"), "popiliu");});
test("popingay -> popingai", function() {deepEqual( Stem("popingay"), "popingai");});
test("popish -> popish", function() {deepEqual( Stem("popish"), "popish");});
test("popp -> popp", function() {deepEqual( Stem("popp"), "popp");});
test("popped -> pop", function() {deepEqual( Stem("popped"), "pop");});
test("popping -> pop", function() {deepEqual( Stem("popping"), "pop");});
test("poppy -> poppi", function() {deepEqual( Stem("poppy"), "poppi");});
test("pops -> pop", function() {deepEqual( Stem("pops"), "pop");});
test("popular -> popular", function() {deepEqual( Stem("popular"), "popular");});
test("popularity -> popular", function() {deepEqual( Stem("popularity"), "popular");});
test("population -> popul", function() {deepEqual( Stem("population"), "popul");});
test("populous -> popul", function() {deepEqual( Stem("populous"), "popul");});
test("porcelain -> porcelain", function() {deepEqual( Stem("porcelain"), "porcelain");});
test("porch -> porch", function() {deepEqual( Stem("porch"), "porch");});
test("porches -> porch", function() {deepEqual( Stem("porches"), "porch");});
test("pore -> pore", function() {deepEqual( Stem("pore"), "pore");});
test("poring -> pore", function() {deepEqual( Stem("poring"), "pore");});
test("pork -> pork", function() {deepEqual( Stem("pork"), "pork");});
test("porker -> porker", function() {deepEqual( Stem("porker"), "porker");});
test("porn -> porn", function() {deepEqual( Stem("porn"), "porn");});
test("porpentine -> porpentin", function() {deepEqual( Stem("porpentine"), "porpentin");});
test("porridge -> porridg", function() {deepEqual( Stem("porridge"), "porridg");});
test("porringer -> porring", function() {deepEqual( Stem("porringer"), "porring");});
test("port -> port", function() {deepEqual( Stem("port"), "port");});
test("portable -> portabl", function() {deepEqual( Stem("portable"), "portabl");});
test("portage -> portag", function() {deepEqual( Stem("portage"), "portag");});
test("portal -> portal", function() {deepEqual( Stem("portal"), "portal");});
test("portals -> portal", function() {deepEqual( Stem("portals"), "portal");});
test("portance -> portanc", function() {deepEqual( Stem("portance"), "portanc");});
test("portansherry -> portansherri", function() {deepEqual( Stem("portansherry"), "portansherri");});
test("portcullis -> portculli", function() {deepEqual( Stem("portcullis"), "portculli");});
test("porte -> port", function() {deepEqual( Stem("porte"), "port");});
test("portend -> portend", function() {deepEqual( Stem("portend"), "portend");});
test("portends -> portend", function() {deepEqual( Stem("portends"), "portend");});
test("portent -> portent", function() {deepEqual( Stem("portent"), "portent");});
test("portentous -> portent", function() {deepEqual( Stem("portentous"), "portent");});
test("portentously -> portent", function() {deepEqual( Stem("portentously"), "portent");});
test("portents -> portent", function() {deepEqual( Stem("portents"), "portent");});
test("porter -> porter", function() {deepEqual( Stem("porter"), "porter");});
test("porters -> porter", function() {deepEqual( Stem("porters"), "porter");});
test("porteus -> porteu", function() {deepEqual( Stem("porteus"), "porteu");});
test("portfolios -> portfolio", function() {deepEqual( Stem("portfolios"), "portfolio");});
test("portholes -> porthol", function() {deepEqual( Stem("portholes"), "porthol");});
test("portia -> portia", function() {deepEqual( Stem("portia"), "portia");});
test("portion -> portion", function() {deepEqual( Stem("portion"), "portion");});
test("portionless -> portionless", function() {deepEqual( Stem("portionless"), "portionless");});
test("portions -> portion", function() {deepEqual( Stem("portions"), "portion");});
test("portland -> portland", function() {deepEqual( Stem("portland"), "portland");});
test("portly -> portli", function() {deepEqual( Stem("portly"), "portli");});
test("portman -> portman", function() {deepEqual( Stem("portman"), "portman");});
test("portmanteau -> portmanteau", function() {deepEqual( Stem("portmanteau"), "portmanteau");});
test("portmanteaus -> portmanteau", function() {deepEqual( Stem("portmanteaus"), "portmanteau");});
test("portotartarossa -> portotartarossa", function() {deepEqual( Stem("portotartarossa"), "portotartarossa");});
test("portrait -> portrait", function() {deepEqual( Stem("portrait"), "portrait");});
test("portraits -> portrait", function() {deepEqual( Stem("portraits"), "portrait");});
test("portraiture -> portraitur", function() {deepEqual( Stem("portraiture"), "portraitur");});
test("portray -> portrai", function() {deepEqual( Stem("portray"), "portrai");});
test("ports -> port", function() {deepEqual( Stem("ports"), "port");});
test("portsea -> portsea", function() {deepEqual( Stem("portsea"), "portsea");});
test("portsmouth -> portsmouth", function() {deepEqual( Stem("portsmouth"), "portsmouth");});
test("portugal -> portug", function() {deepEqual( Stem("portugal"), "portug");});
test("porty -> porti", function() {deepEqual( Stem("porty"), "porti");});
test("pose -> pose", function() {deepEqual( Stem("pose"), "pose");});
test("posied -> posi", function() {deepEqual( Stem("posied"), "posi");});
test("posies -> posi", function() {deepEqual( Stem("posies"), "posi");});
test("position -> posit", function() {deepEqual( Stem("position"), "posit");});
test("positions -> posit", function() {deepEqual( Stem("positions"), "posit");});
test("positive -> posit", function() {deepEqual( Stem("positive"), "posit");});
test("positively -> posit", function() {deepEqual( Stem("positively"), "posit");});
test("posky -> poski", function() {deepEqual( Stem("posky"), "poski");});
test("posse -> poss", function() {deepEqual( Stem("posse"), "poss");});
test("possess -> possess", function() {deepEqual( Stem("possess"), "possess");});
test("possessed -> possess", function() {deepEqual( Stem("possessed"), "possess");});
test("possesses -> possess", function() {deepEqual( Stem("possesses"), "possess");});
test("possesseth -> possesseth", function() {deepEqual( Stem("possesseth"), "possesseth");});
test("possessing -> possess", function() {deepEqual( Stem("possessing"), "possess");});
test("possession -> possess", function() {deepEqual( Stem("possession"), "possess");});
test("possessions -> possess", function() {deepEqual( Stem("possessions"), "possess");});
test("possessor -> possessor", function() {deepEqual( Stem("possessor"), "possessor");});
test("possessors -> possessor", function() {deepEqual( Stem("possessors"), "possessor");});
test("posset -> posset", function() {deepEqual( Stem("posset"), "posset");});
test("possets -> posset", function() {deepEqual( Stem("possets"), "posset");});
test("possibilities -> possibl", function() {deepEqual( Stem("possibilities"), "possibl");});
test("possibility -> possibl", function() {deepEqual( Stem("possibility"), "possibl");});
test("possible -> possibl", function() {deepEqual( Stem("possible"), "possibl");});
test("possibly -> possibli", function() {deepEqual( Stem("possibly"), "possibli");});
test("possitable -> possit", function() {deepEqual( Stem("possitable"), "possit");});
test("post -> post", function() {deepEqual( Stem("post"), "post");});
test("postage -> postag", function() {deepEqual( Stem("postage"), "postag");});
test("poste -> post", function() {deepEqual( Stem("poste"), "post");});
test("posted -> post", function() {deepEqual( Stem("posted"), "post");});
test("posterior -> posterior", function() {deepEqual( Stem("posterior"), "posterior");});
test("posteriors -> posterior", function() {deepEqual( Stem("posteriors"), "posterior");});
test("posterity -> poster", function() {deepEqual( Stem("posterity"), "poster");});
test("postern -> postern", function() {deepEqual( Stem("postern"), "postern");});
test("posterns -> postern", function() {deepEqual( Stem("posterns"), "postern");});
test("posters -> poster", function() {deepEqual( Stem("posters"), "poster");});
test("posthorse -> posthors", function() {deepEqual( Stem("posthorse"), "posthors");});
test("posthorses -> posthors", function() {deepEqual( Stem("posthorses"), "posthors");});
test("posthumous -> posthum", function() {deepEqual( Stem("posthumous"), "posthum");});
test("posthumus -> posthumu", function() {deepEqual( Stem("posthumus"), "posthumu");});
test("postilion -> postilion", function() {deepEqual( Stem("postilion"), "postilion");});
test("postilions -> postilion", function() {deepEqual( Stem("postilions"), "postilion");});
test("posting -> post", function() {deepEqual( Stem("posting"), "post");});
test("postman -> postman", function() {deepEqual( Stem("postman"), "postman");});
test("postmark -> postmark", function() {deepEqual( Stem("postmark"), "postmark");});
test("postmaster -> postmast", function() {deepEqual( Stem("postmaster"), "postmast");});
test("posts -> post", function() {deepEqual( Stem("posts"), "post");});
test("postscript -> postscript", function() {deepEqual( Stem("postscript"), "postscript");});
test("posture -> postur", function() {deepEqual( Stem("posture"), "postur");});
test("postures -> postur", function() {deepEqual( Stem("postures"), "postur");});
test("posy -> posi", function() {deepEqual( Stem("posy"), "posi");});
test("pot -> pot", function() {deepEqual( Stem("pot"), "pot");});
test("potable -> potabl", function() {deepEqual( Stem("potable"), "potabl");});
test("potage -> potag", function() {deepEqual( Stem("potage"), "potag");});
test("potation -> potat", function() {deepEqual( Stem("potation"), "potat");});
test("potations -> potat", function() {deepEqual( Stem("potations"), "potat");});
test("potato -> potato", function() {deepEqual( Stem("potato"), "potato");});
test("potatoes -> potato", function() {deepEqual( Stem("potatoes"), "potato");});
test("potch -> potch", function() {deepEqual( Stem("potch"), "potch");});
test("potency -> potenc", function() {deepEqual( Stem("potency"), "potenc");});
test("potent -> potent", function() {deepEqual( Stem("potent"), "potent");});
test("potentate -> potent", function() {deepEqual( Stem("potentate"), "potent");});
test("potentates -> potent", function() {deepEqual( Stem("potentates"), "potent");});
test("potential -> potenti", function() {deepEqual( Stem("potential"), "potenti");});
test("potently -> potent", function() {deepEqual( Stem("potently"), "potent");});
test("potents -> potent", function() {deepEqual( Stem("potents"), "potent");});
test("pothecary -> pothecari", function() {deepEqual( Stem("pothecary"), "pothecari");});
test("pother -> pother", function() {deepEqual( Stem("pother"), "pother");});
test("potion -> potion", function() {deepEqual( Stem("potion"), "potion");});
test("potions -> potion", function() {deepEqual( Stem("potions"), "potion");});
test("potiphar -> potiphar", function() {deepEqual( Stem("potiphar"), "potiphar");});
test("potpan -> potpan", function() {deepEqual( Stem("potpan"), "potpan");});
test("pots -> pot", function() {deepEqual( Stem("pots"), "pot");});
test("potter -> potter", function() {deepEqual( Stem("potter"), "potter");});
test("potting -> pot", function() {deepEqual( Stem("potting"), "pot");});
test("pottle -> pottl", function() {deepEqual( Stem("pottle"), "pottl");});
test("potzenthal -> potzenth", function() {deepEqual( Stem("potzenthal"), "potzenth");});
test("potztausend -> potztausend", function() {deepEqual( Stem("potztausend"), "potztausend");});
test("pouch -> pouch", function() {deepEqual( Stem("pouch"), "pouch");});
test("poulet -> poulet", function() {deepEqual( Stem("poulet"), "poulet");});
test("poulter -> poulter", function() {deepEqual( Stem("poulter"), "poulter");});
test("poultice -> poultic", function() {deepEqual( Stem("poultice"), "poultic");});
test("poultney -> poultnei", function() {deepEqual( Stem("poultney"), "poultnei");});
test("poultry -> poultri", function() {deepEqual( Stem("poultry"), "poultri");});
test("pounce -> pounc", function() {deepEqual( Stem("pounce"), "pounc");});
test("pouncet -> pouncet", function() {deepEqual( Stem("pouncet"), "pouncet");});
test("pound -> pound", function() {deepEqual( Stem("pound"), "pound");});
test("pounded -> pound", function() {deepEqual( Stem("pounded"), "pound");});
test("pounder -> pounder", function() {deepEqual( Stem("pounder"), "pounder");});
test("pounds -> pound", function() {deepEqual( Stem("pounds"), "pound");});
test("pour -> pour", function() {deepEqual( Stem("pour"), "pour");});
test("poured -> pour", function() {deepEqual( Stem("poured"), "pour");});
test("pourest -> pourest", function() {deepEqual( Stem("pourest"), "pourest");});
test("pouring -> pour", function() {deepEqual( Stem("pouring"), "pour");});
test("pourquoi -> pourquoi", function() {deepEqual( Stem("pourquoi"), "pourquoi");});
test("pours -> pour", function() {deepEqual( Stem("pours"), "pour");});
test("pout -> pout", function() {deepEqual( Stem("pout"), "pout");});
test("poverties -> poverti", function() {deepEqual( Stem("poverties"), "poverti");});
test("poverty -> poverti", function() {deepEqual( Stem("poverty"), "poverti");});
test("pow -> pow", function() {deepEqual( Stem("pow"), "pow");});
test("powd -> powd", function() {deepEqual( Stem("powd"), "powd");});
test("powder -> powder", function() {deepEqual( Stem("powder"), "powder");});
test("powdered -> powder", function() {deepEqual( Stem("powdered"), "powder");});
test("powdering -> powder", function() {deepEqual( Stem("powdering"), "powder");});
test("powders -> powder", function() {deepEqual( Stem("powders"), "powder");});
test("power -> power", function() {deepEqual( Stem("power"), "power");});
test("powerful -> power", function() {deepEqual( Stem("powerful"), "power");});
test("powerfully -> powerfulli", function() {deepEqual( Stem("powerfully"), "powerfulli");});
test("powerless -> powerless", function() {deepEqual( Stem("powerless"), "powerless");});
test("powers -> power", function() {deepEqual( Stem("powers"), "power");});
test("pox -> pox", function() {deepEqual( Stem("pox"), "pox");});
test("poys -> poi", function() {deepEqual( Stem("poys"), "poi");});
test("poysam -> poysam", function() {deepEqual( Stem("poysam"), "poysam");});
test("prabbles -> prabbl", function() {deepEqual( Stem("prabbles"), "prabbl");});
test("practic -> practic", function() {deepEqual( Stem("practic"), "practic");});
test("practical -> practic", function() {deepEqual( Stem("practical"), "practic");});
test("practice -> practic", function() {deepEqual( Stem("practice"), "practic");});
test("practiced -> practic", function() {deepEqual( Stem("practiced"), "practic");});
test("practicer -> practic", function() {deepEqual( Stem("practicer"), "practic");});
test("practices -> practic", function() {deepEqual( Stem("practices"), "practic");});
test("practicing -> practic", function() {deepEqual( Stem("practicing"), "practic");});
test("practis -> practi", function() {deepEqual( Stem("practis"), "practi");});
test("practisants -> practis", function() {deepEqual( Stem("practisants"), "practis");});
test("practise -> practis", function() {deepEqual( Stem("practise"), "practis");});
test("practised -> practis", function() {deepEqual( Stem("practised"), "practis");});
test("practiser -> practis", function() {deepEqual( Stem("practiser"), "practis");});
test("practisers -> practis", function() {deepEqual( Stem("practisers"), "practis");});
test("practises -> practis", function() {deepEqual( Stem("practises"), "practis");});
test("practising -> practis", function() {deepEqual( Stem("practising"), "practis");});
test("practitioner -> practition", function() {deepEqual( Stem("practitioner"), "practition");});
test("practitioners -> practition", function() {deepEqual( Stem("practitioners"), "practition");});
test("praeclarissimus -> praeclarissimu", function() {deepEqual( Stem("praeclarissimus"), "praeclarissimu");});
test("praemunire -> praemunir", function() {deepEqual( Stem("praemunire"), "praemunir");});
test("praesenti -> praesenti", function() {deepEqual( Stem("praesenti"), "praesenti");});
test("praetor -> praetor", function() {deepEqual( Stem("praetor"), "praetor");});
test("praetors -> praetor", function() {deepEqual( Stem("praetors"), "praetor");});
test("pragging -> prag", function() {deepEqual( Stem("pragging"), "prag");});
test("prague -> pragu", function() {deepEqual( Stem("prague"), "pragu");});
test("prain -> prain", function() {deepEqual( Stem("prain"), "prain");});
test("prains -> prain", function() {deepEqual( Stem("prains"), "prain");});
test("prais -> prai", function() {deepEqual( Stem("prais"), "prai");});
test("praise -> prais", function() {deepEqual( Stem("praise"), "prais");});
test("praised -> prais", function() {deepEqual( Stem("praised"), "prais");});
test("praises -> prais", function() {deepEqual( Stem("praises"), "prais");});
test("praisest -> praisest", function() {deepEqual( Stem("praisest"), "praisest");});
test("praiseworthy -> praiseworthi", function() {deepEqual( Stem("praiseworthy"), "praiseworthi");});
test("praising -> prais", function() {deepEqual( Stem("praising"), "prais");});
test("pranced -> pranc", function() {deepEqual( Stem("pranced"), "pranc");});
test("prancing -> pranc", function() {deepEqual( Stem("prancing"), "pranc");});
test("prank -> prank", function() {deepEqual( Stem("prank"), "prank");});
test("pranks -> prank", function() {deepEqual( Stem("pranks"), "prank");});
test("prat -> prat", function() {deepEqual( Stem("prat"), "prat");});
test("prate -> prate", function() {deepEqual( Stem("prate"), "prate");});
test("prated -> prate", function() {deepEqual( Stem("prated"), "prate");});
test("prater -> prater", function() {deepEqual( Stem("prater"), "prater");});
test("prating -> prate", function() {deepEqual( Stem("prating"), "prate");});
test("prattle -> prattl", function() {deepEqual( Stem("prattle"), "prattl");});
test("prattled -> prattl", function() {deepEqual( Stem("prattled"), "prattl");});
test("prattler -> prattler", function() {deepEqual( Stem("prattler"), "prattler");});
test("prattling -> prattl", function() {deepEqual( Stem("prattling"), "prattl");});
test("prave -> prave", function() {deepEqual( Stem("prave"), "prave");});
test("prawls -> prawl", function() {deepEqual( Stem("prawls"), "prawl");});
test("prawns -> prawn", function() {deepEqual( Stem("prawns"), "prawn");});
test("pray -> prai", function() {deepEqual( Stem("pray"), "prai");});
test("prayed -> prai", function() {deepEqual( Stem("prayed"), "prai");});
test("prayer -> prayer", function() {deepEqual( Stem("prayer"), "prayer");});
test("prayers -> prayer", function() {deepEqual( Stem("prayers"), "prayer");});
test("praying -> prai", function() {deepEqual( Stem("praying"), "prai");});
test("prays -> prai", function() {deepEqual( Stem("prays"), "prai");});
test("pre -> pre", function() {deepEqual( Stem("pre"), "pre");});
test("preach -> preach", function() {deepEqual( Stem("preach"), "preach");});
test("preached -> preach", function() {deepEqual( Stem("preached"), "preach");});
test("preacher -> preacher", function() {deepEqual( Stem("preacher"), "preacher");});
test("preachers -> preacher", function() {deepEqual( Stem("preachers"), "preacher");});
test("preaches -> preach", function() {deepEqual( Stem("preaches"), "preach");});
test("preachifying -> preachifi", function() {deepEqual( Stem("preachifying"), "preachifi");});
test("preaching -> preach", function() {deepEqual( Stem("preaching"), "preach");});
test("preachment -> preachment", function() {deepEqual( Stem("preachment"), "preachment");});
test("pread -> pread", function() {deepEqual( Stem("pread"), "pread");});
test("preambulate -> preambul", function() {deepEqual( Stem("preambulate"), "preambul");});
test("precarious -> precari", function() {deepEqual( Stem("precarious"), "precari");});
test("precaution -> precaut", function() {deepEqual( Stem("precaution"), "precaut");});
test("precautions -> precaut", function() {deepEqual( Stem("precautions"), "precaut");});
test("preceded -> preced", function() {deepEqual( Stem("preceded"), "preced");});
test("precedence -> preced", function() {deepEqual( Stem("precedence"), "preced");});
test("precedency -> preced", function() {deepEqual( Stem("precedency"), "preced");});
test("precedent -> preced", function() {deepEqual( Stem("precedent"), "preced");});
test("preceding -> preced", function() {deepEqual( Stem("preceding"), "preced");});
test("precept -> precept", function() {deepEqual( Stem("precept"), "precept");});
test("preceptial -> precepti", function() {deepEqual( Stem("preceptial"), "precepti");});
test("precepts -> precept", function() {deepEqual( Stem("precepts"), "precept");});
test("precinct -> precinct", function() {deepEqual( Stem("precinct"), "precinct");});
test("precincts -> precinct", function() {deepEqual( Stem("precincts"), "precinct");});
test("precious -> preciou", function() {deepEqual( Stem("precious"), "preciou");});
test("preciously -> precious", function() {deepEqual( Stem("preciously"), "precious");});
test("precipice -> precipic", function() {deepEqual( Stem("precipice"), "precipic");});
test("precipitancy -> precipit", function() {deepEqual( Stem("precipitancy"), "precipit");});
test("precipitating -> precipit", function() {deepEqual( Stem("precipitating"), "precipit");});
test("precipitation -> precipit", function() {deepEqual( Stem("precipitation"), "precipit");});
test("precise -> precis", function() {deepEqual( Stem("precise"), "precis");});
test("precisely -> precis", function() {deepEqual( Stem("precisely"), "precis");});
test("preciseness -> precis", function() {deepEqual( Stem("preciseness"), "precis");});
test("precisian -> precisian", function() {deepEqual( Stem("precisian"), "precisian");});
test("precocity -> precoc", function() {deepEqual( Stem("precocity"), "precoc");});
test("precor -> precor", function() {deepEqual( Stem("precor"), "precor");});
test("precurse -> precurs", function() {deepEqual( Stem("precurse"), "precurs");});
test("precursors -> precursor", function() {deepEqual( Stem("precursors"), "precursor");});
test("predeceased -> predeceas", function() {deepEqual( Stem("predeceased"), "predeceas");});
test("predecessor -> predecessor", function() {deepEqual( Stem("predecessor"), "predecessor");});
test("predecessors -> predecessor", function() {deepEqual( Stem("predecessors"), "predecessor");});
test("predestinate -> predestin", function() {deepEqual( Stem("predestinate"), "predestin");});
test("predestined -> predestin", function() {deepEqual( Stem("predestined"), "predestin");});
test("predicament -> predica", function() {deepEqual( Stem("predicament"), "predica");});
test("predict -> predict", function() {deepEqual( Stem("predict"), "predict");});
test("predicted -> predict", function() {deepEqual( Stem("predicted"), "predict");});
test("prediction -> predict", function() {deepEqual( Stem("prediction"), "predict");});
test("predictions -> predict", function() {deepEqual( Stem("predictions"), "predict");});
test("predilection -> predilect", function() {deepEqual( Stem("predilection"), "predilect");});
test("predominance -> predomin", function() {deepEqual( Stem("predominance"), "predomin");});
test("predominant -> predomin", function() {deepEqual( Stem("predominant"), "predomin");});
test("predominate -> predomin", function() {deepEqual( Stem("predominate"), "predomin");});
test("preeches -> preech", function() {deepEqual( Stem("preeches"), "preech");});
test("preeminence -> preemin", function() {deepEqual( Stem("preeminence"), "preemin");});
test("preface -> prefac", function() {deepEqual( Stem("preface"), "prefac");});
test("prefect -> prefect", function() {deepEqual( Stem("prefect"), "prefect");});
test("prefer -> prefer", function() {deepEqual( Stem("prefer"), "prefer");});
test("preference -> prefer", function() {deepEqual( Stem("preference"), "prefer");});
test("preferment -> prefer", function() {deepEqual( Stem("preferment"), "prefer");});
test("preferments -> prefer", function() {deepEqual( Stem("preferments"), "prefer");});
test("preferr -> preferr", function() {deepEqual( Stem("preferr"), "preferr");});
test("preferred -> prefer", function() {deepEqual( Stem("preferred"), "prefer");});
test("preferreth -> preferreth", function() {deepEqual( Stem("preferreth"), "preferreth");});
test("preferring -> prefer", function() {deepEqual( Stem("preferring"), "prefer");});
test("prefers -> prefer", function() {deepEqual( Stem("prefers"), "prefer");});
test("prefiguring -> prefigur", function() {deepEqual( Stem("prefiguring"), "prefigur");});
test("prefix -> prefix", function() {deepEqual( Stem("prefix"), "prefix");});
test("prefixed -> prefix", function() {deepEqual( Stem("prefixed"), "prefix");});
test("preformed -> preform", function() {deepEqual( Stem("preformed"), "preform");});
test("pregnancy -> pregnanc", function() {deepEqual( Stem("pregnancy"), "pregnanc");});
test("pregnant -> pregnant", function() {deepEqual( Stem("pregnant"), "pregnant");});
test("pregnantly -> pregnantli", function() {deepEqual( Stem("pregnantly"), "pregnantli");});
test("prejudicates -> prejud", function() {deepEqual( Stem("prejudicates"), "prejud");});
test("prejudice -> prejudic", function() {deepEqual( Stem("prejudice"), "prejudic");});
test("prejudices -> prejudic", function() {deepEqual( Stem("prejudices"), "prejudic");});
test("prejudicial -> prejudici", function() {deepEqual( Stem("prejudicial"), "prejudici");});
test("prelate -> prelat", function() {deepEqual( Stem("prelate"), "prelat");});
test("prelates -> prelat", function() {deepEqual( Stem("prelates"), "prelat");});
test("preliminaries -> preliminari", function() {deepEqual( Stem("preliminaries"), "preliminari");});
test("preliminary -> preliminari", function() {deepEqual( Stem("preliminary"), "preliminari");});
test("prelude -> prelud", function() {deepEqual( Stem("prelude"), "prelud");});
test("preluding -> prelud", function() {deepEqual( Stem("preluding"), "prelud");});
test("premature -> prematur", function() {deepEqual( Stem("premature"), "prematur");});
test("prematurely -> prematur", function() {deepEqual( Stem("prematurely"), "prematur");});
test("premeditated -> premedit", function() {deepEqual( Stem("premeditated"), "premedit");});
test("premeditation -> premedit", function() {deepEqual( Stem("premeditation"), "premedit");});
test("premier -> premier", function() {deepEqual( Stem("premier"), "premier");});
test("premised -> premis", function() {deepEqual( Stem("premised"), "premis");});
test("premises -> premis", function() {deepEqual( Stem("premises"), "premis");});
test("prenez -> prenez", function() {deepEqual( Stem("prenez"), "prenez");});
test("prenny -> prenni", function() {deepEqual( Stem("prenny"), "prenni");});
test("prenominate -> prenomin", function() {deepEqual( Stem("prenominate"), "prenomin");});
test("prentice -> prentic", function() {deepEqual( Stem("prentice"), "prentic");});
test("prentices -> prentic", function() {deepEqual( Stem("prentices"), "prentic");});
test("preordinance -> preordin", function() {deepEqual( Stem("preordinance"), "preordin");});
test("prepar -> prepar", function() {deepEqual( Stem("prepar"), "prepar");});
test("preparation -> prepar", function() {deepEqual( Stem("preparation"), "prepar");});
test("preparations -> prepar", function() {deepEqual( Stem("preparations"), "prepar");});
test("preparatory -> preparatori", function() {deepEqual( Stem("preparatory"), "preparatori");});
test("prepare -> prepar", function() {deepEqual( Stem("prepare"), "prepar");});
test("prepared -> prepar", function() {deepEqual( Stem("prepared"), "prepar");});
test("preparedly -> preparedli", function() {deepEqual( Stem("preparedly"), "preparedli");});
test("prepares -> prepar", function() {deepEqual( Stem("prepares"), "prepar");});
test("preparing -> prepar", function() {deepEqual( Stem("preparing"), "prepar");});
test("prepossessed -> prepossess", function() {deepEqual( Stem("prepossessed"), "prepossess");});
test("prepost -> prepost", function() {deepEqual( Stem("prepost"), "prepost");});
test("preposterous -> preposter", function() {deepEqual( Stem("preposterous"), "preposter");});
test("preposterously -> preposter", function() {deepEqual( Stem("preposterously"), "preposter");});
test("prerogatifes -> prerogatif", function() {deepEqual( Stem("prerogatifes"), "prerogatif");});
test("prerogative -> prerog", function() {deepEqual( Stem("prerogative"), "prerog");});
test("prerogatived -> prerogativ", function() {deepEqual( Stem("prerogatived"), "prerogativ");});
test("presage -> presag", function() {deepEqual( Stem("presage"), "presag");});
test("presagers -> presag", function() {deepEqual( Stem("presagers"), "presag");});
test("presages -> presag", function() {deepEqual( Stem("presages"), "presag");});
test("presageth -> presageth", function() {deepEqual( Stem("presageth"), "presageth");});
test("presaging -> presag", function() {deepEqual( Stem("presaging"), "presag");});
test("prescience -> prescienc", function() {deepEqual( Stem("prescience"), "prescienc");});
test("prescribe -> prescrib", function() {deepEqual( Stem("prescribe"), "prescrib");});
test("prescribed -> prescrib", function() {deepEqual( Stem("prescribed"), "prescrib");});
test("prescript -> prescript", function() {deepEqual( Stem("prescript"), "prescript");});
test("prescription -> prescript", function() {deepEqual( Stem("prescription"), "prescript");});
test("prescriptions -> prescript", function() {deepEqual( Stem("prescriptions"), "prescript");});
test("prescripts -> prescript", function() {deepEqual( Stem("prescripts"), "prescript");});
test("presence -> presenc", function() {deepEqual( Stem("presence"), "presenc");});
test("presences -> presenc", function() {deepEqual( Stem("presences"), "presenc");});
test("present -> present", function() {deepEqual( Stem("present"), "present");});
test("presentable -> present", function() {deepEqual( Stem("presentable"), "present");});
test("presentation -> present", function() {deepEqual( Stem("presentation"), "present");});
test("presentations -> present", function() {deepEqual( Stem("presentations"), "present");});
test("presented -> present", function() {deepEqual( Stem("presented"), "present");});
test("presenter -> present", function() {deepEqual( Stem("presenter"), "present");});
test("presenters -> present", function() {deepEqual( Stem("presenters"), "present");});
test("presenteth -> presenteth", function() {deepEqual( Stem("presenteth"), "presenteth");});
test("presentiment -> presenti", function() {deepEqual( Stem("presentiment"), "presenti");});
test("presentimental -> presentiment", function() {deepEqual( Stem("presentimental"), "presentiment");});
test("presentiments -> presenti", function() {deepEqual( Stem("presentiments"), "presenti");});
test("presenting -> present", function() {deepEqual( Stem("presenting"), "present");});
test("presently -> present", function() {deepEqual( Stem("presently"), "present");});
test("presentment -> present", function() {deepEqual( Stem("presentment"), "present");});
test("presents -> present", function() {deepEqual( Stem("presents"), "present");});
test("preserv -> preserv", function() {deepEqual( Stem("preserv"), "preserv");});
test("preservation -> preserv", function() {deepEqual( Stem("preservation"), "preserv");});
test("preservative -> preserv", function() {deepEqual( Stem("preservative"), "preserv");});
test("preserve -> preserv", function() {deepEqual( Stem("preserve"), "preserv");});
test("preserved -> preserv", function() {deepEqual( Stem("preserved"), "preserv");});
test("preserver -> preserv", function() {deepEqual( Stem("preserver"), "preserv");});
test("preservers -> preserv", function() {deepEqual( Stem("preservers"), "preserv");});
test("preserves -> preserv", function() {deepEqual( Stem("preserves"), "preserv");});
test("preserving -> preserv", function() {deepEqual( Stem("preserving"), "preserv");});
test("preside -> presid", function() {deepEqual( Stem("preside"), "presid");});
test("presided -> presid", function() {deepEqual( Stem("presided"), "presid");});
test("presidencies -> presid", function() {deepEqual( Stem("presidencies"), "presid");});
test("presidency -> presid", function() {deepEqual( Stem("presidency"), "presid");});
test("president -> presid", function() {deepEqual( Stem("president"), "presid");});
test("presides -> presid", function() {deepEqual( Stem("presides"), "presid");});
test("presiding -> presid", function() {deepEqual( Stem("presiding"), "presid");});
test("press -> press", function() {deepEqual( Stem("press"), "press");});
test("pressed -> press", function() {deepEqual( Stem("pressed"), "press");});
test("presser -> presser", function() {deepEqual( Stem("presser"), "presser");});
test("presses -> press", function() {deepEqual( Stem("presses"), "press");});
test("pressing -> press", function() {deepEqual( Stem("pressing"), "press");});
test("pressure -> pressur", function() {deepEqual( Stem("pressure"), "pressur");});
test("pressures -> pressur", function() {deepEqual( Stem("pressures"), "pressur");});
test("prest -> prest", function() {deepEqual( Stem("prest"), "prest");});
test("prester -> prester", function() {deepEqual( Stem("prester"), "prester");});
test("presume -> presum", function() {deepEqual( Stem("presume"), "presum");});
test("presumes -> presum", function() {deepEqual( Stem("presumes"), "presum");});
test("presuming -> presum", function() {deepEqual( Stem("presuming"), "presum");});
test("presumption -> presumpt", function() {deepEqual( Stem("presumption"), "presumpt");});
test("presumptuous -> presumptu", function() {deepEqual( Stem("presumptuous"), "presumptu");});
test("presuppos -> presuppo", function() {deepEqual( Stem("presuppos"), "presuppo");});
test("pret -> pret", function() {deepEqual( Stem("pret"), "pret");});
test("pretence -> pretenc", function() {deepEqual( Stem("pretence"), "pretenc");});
test("pretences -> pretenc", function() {deepEqual( Stem("pretences"), "pretenc");});
test("pretend -> pretend", function() {deepEqual( Stem("pretend"), "pretend");});
test("pretended -> pretend", function() {deepEqual( Stem("pretended"), "pretend");});
test("pretenders -> pretend", function() {deepEqual( Stem("pretenders"), "pretend");});
test("pretending -> pretend", function() {deepEqual( Stem("pretending"), "pretend");});
test("pretendu -> pretendu", function() {deepEqual( Stem("pretendu"), "pretendu");});
test("pretense -> pretens", function() {deepEqual( Stem("pretense"), "pretens");});
test("pretensions -> pretens", function() {deepEqual( Stem("pretensions"), "pretens");});
test("pretermit -> pretermit", function() {deepEqual( Stem("pretermit"), "pretermit");});
test("preternatural -> preternatur", function() {deepEqual( Stem("preternatural"), "preternatur");});
test("pretext -> pretext", function() {deepEqual( Stem("pretext"), "pretext");});
test("pretia -> pretia", function() {deepEqual( Stem("pretia"), "pretia");});
test("prettier -> prettier", function() {deepEqual( Stem("prettier"), "prettier");});
test("prettiest -> prettiest", function() {deepEqual( Stem("prettiest"), "prettiest");});
test("prettily -> prettili", function() {deepEqual( Stem("prettily"), "prettili");});
test("prettiness -> pretti", function() {deepEqual( Stem("prettiness"), "pretti");});
test("pretty -> pretti", function() {deepEqual( Stem("pretty"), "pretti");});
test("prettyish -> prettyish", function() {deepEqual( Stem("prettyish"), "prettyish");});
test("prevail -> prevail", function() {deepEqual( Stem("prevail"), "prevail");});
test("prevailed -> prevail", function() {deepEqual( Stem("prevailed"), "prevail");});
test("prevaileth -> prevaileth", function() {deepEqual( Stem("prevaileth"), "prevaileth");});
test("prevailing -> prevail", function() {deepEqual( Stem("prevailing"), "prevail");});
test("prevailment -> prevail", function() {deepEqual( Stem("prevailment"), "prevail");});
test("prevails -> prevail", function() {deepEqual( Stem("prevails"), "prevail");});
test("prevenances -> preven", function() {deepEqual( Stem("prevenances"), "preven");});
test("prevent -> prevent", function() {deepEqual( Stem("prevent"), "prevent");});
test("prevented -> prevent", function() {deepEqual( Stem("prevented"), "prevent");});
test("preventing -> prevent", function() {deepEqual( Stem("preventing"), "prevent");});
test("prevention -> prevent", function() {deepEqual( Stem("prevention"), "prevent");});
test("preventions -> prevent", function() {deepEqual( Stem("preventions"), "prevent");});
test("prevents -> prevent", function() {deepEqual( Stem("prevents"), "prevent");});
test("previous -> previou", function() {deepEqual( Stem("previous"), "previou");});
test("previously -> previous", function() {deepEqual( Stem("previously"), "previous");});
test("prey -> prei", function() {deepEqual( Stem("prey"), "prei");});
test("preyful -> prey", function() {deepEqual( Stem("preyful"), "prey");});
test("preying -> prei", function() {deepEqual( Stem("preying"), "prei");});
test("preys -> prei", function() {deepEqual( Stem("preys"), "prei");});
test("priam -> priam", function() {deepEqual( Stem("priam"), "priam");});
test("priami -> priami", function() {deepEqual( Stem("priami"), "priami");});
test("priamus -> priamu", function() {deepEqual( Stem("priamus"), "priamu");});
test("pribbles -> pribbl", function() {deepEqual( Stem("pribbles"), "pribbl");});
test("price -> price", function() {deepEqual( Stem("price"), "price");});
test("priceless -> priceless", function() {deepEqual( Stem("priceless"), "priceless");});
test("prices -> price", function() {deepEqual( Stem("prices"), "price");});
test("prick -> prick", function() {deepEqual( Stem("prick"), "prick");});
test("pricked -> prick", function() {deepEqual( Stem("pricked"), "prick");});
test("pricket -> pricket", function() {deepEqual( Stem("pricket"), "pricket");});
test("pricking -> prick", function() {deepEqual( Stem("pricking"), "prick");});
test("pricks -> prick", function() {deepEqual( Stem("pricks"), "prick");});
test("pricksong -> pricksong", function() {deepEqual( Stem("pricksong"), "pricksong");});
test("pride -> pride", function() {deepEqual( Stem("pride"), "pride");});
test("prides -> pride", function() {deepEqual( Stem("prides"), "pride");});
test("pridge -> pridg", function() {deepEqual( Stem("pridge"), "pridg");});
test("prie -> prie", function() {deepEqual( Stem("prie"), "prie");});
test("pried -> pri", function() {deepEqual( Stem("pried"), "pri");});
test("prief -> prief", function() {deepEqual( Stem("prief"), "prief");});
test("pries -> pri", function() {deepEqual( Stem("pries"), "pri");});
test("priest -> priest", function() {deepEqual( Stem("priest"), "priest");});
test("priesthood -> priesthood", function() {deepEqual( Stem("priesthood"), "priesthood");});
test("priests -> priest", function() {deepEqual( Stem("priests"), "priest");});
test("prig -> prig", function() {deepEqual( Stem("prig"), "prig");});
test("prim -> prim", function() {deepEqual( Stem("prim"), "prim");});
test("primal -> primal", function() {deepEqual( Stem("primal"), "primal");});
test("prime -> prime", function() {deepEqual( Stem("prime"), "prime");});
test("primer -> primer", function() {deepEqual( Stem("primer"), "primer");});
test("primero -> primero", function() {deepEqual( Stem("primero"), "primero");});
test("primest -> primest", function() {deepEqual( Stem("primest"), "primest");});
test("priming -> prime", function() {deepEqual( Stem("priming"), "prime");});
test("primitive -> primit", function() {deepEqual( Stem("primitive"), "primit");});
test("primo -> primo", function() {deepEqual( Stem("primo"), "primo");});
test("primogenity -> primogen", function() {deepEqual( Stem("primogenity"), "primogen");});
test("primrose -> primros", function() {deepEqual( Stem("primrose"), "primros");});
test("primroses -> primros", function() {deepEqual( Stem("primroses"), "primros");});
test("primy -> primi", function() {deepEqual( Stem("primy"), "primi");});
test("prince -> princ", function() {deepEqual( Stem("prince"), "princ");});
test("princely -> princ", function() {deepEqual( Stem("princely"), "princ");});
test("princes -> princ", function() {deepEqual( Stem("princes"), "princ");});
test("princess -> princess", function() {deepEqual( Stem("princess"), "princess");});
test("princesses -> princess", function() {deepEqual( Stem("princesses"), "princess");});
test("principal -> princip", function() {deepEqual( Stem("principal"), "princip");});
test("principalities -> princip", function() {deepEqual( Stem("principalities"), "princip");});
test("principality -> princip", function() {deepEqual( Stem("principality"), "princip");});
test("principals -> princip", function() {deepEqual( Stem("principals"), "princip");});
test("principle -> principl", function() {deepEqual( Stem("principle"), "principl");});
test("principles -> principl", function() {deepEqual( Stem("principles"), "principl");});
test("princox -> princox", function() {deepEqual( Stem("princox"), "princox");});
test("prings -> pring", function() {deepEqual( Stem("prings"), "pring");});
test("print -> print", function() {deepEqual( Stem("print"), "print");});
test("printed -> print", function() {deepEqual( Stem("printed"), "print");});
test("printer -> printer", function() {deepEqual( Stem("printer"), "printer");});
test("printing -> print", function() {deepEqual( Stem("printing"), "print");});
test("printless -> printless", function() {deepEqual( Stem("printless"), "printless");});
test("prints -> print", function() {deepEqual( Stem("prints"), "print");});
test("prioress -> prioress", function() {deepEqual( Stem("prioress"), "prioress");});
test("priories -> priori", function() {deepEqual( Stem("priories"), "priori");});
test("priority -> prioriti", function() {deepEqual( Stem("priority"), "prioriti");});
test("priory -> priori", function() {deepEqual( Stem("priory"), "priori");});
test("priscian -> priscian", function() {deepEqual( Stem("priscian"), "priscian");});
test("prison -> prison", function() {deepEqual( Stem("prison"), "prison");});
test("prisoner -> prison", function() {deepEqual( Stem("prisoner"), "prison");});
test("prisoners -> prison", function() {deepEqual( Stem("prisoners"), "prison");});
test("prisonment -> prison", function() {deepEqual( Stem("prisonment"), "prison");});
test("prisonnier -> prisonni", function() {deepEqual( Stem("prisonnier"), "prisonni");});
test("prisons -> prison", function() {deepEqual( Stem("prisons"), "prison");});
test("pristine -> pristin", function() {deepEqual( Stem("pristine"), "pristin");});
test("prithe -> prith", function() {deepEqual( Stem("prithe"), "prith");});
test("prithee -> prithe", function() {deepEqual( Stem("prithee"), "prithe");});
test("privacy -> privaci", function() {deepEqual( Stem("privacy"), "privaci");});
test("private -> privat", function() {deepEqual( Stem("private"), "privat");});
test("privateer -> privat", function() {deepEqual( Stem("privateer"), "privat");});
test("privately -> privat", function() {deepEqual( Stem("privately"), "privat");});
test("privates -> privat", function() {deepEqual( Stem("privates"), "privat");});
test("privation -> privat", function() {deepEqual( Stem("privation"), "privat");});
test("privations -> privat", function() {deepEqual( Stem("privations"), "privat");});
test("privilage -> privilag", function() {deepEqual( Stem("privilage"), "privilag");});
test("privileg -> privileg", function() {deepEqual( Stem("privileg"), "privileg");});
test("privilege -> privileg", function() {deepEqual( Stem("privilege"), "privileg");});
test("privileged -> privileg", function() {deepEqual( Stem("privileged"), "privileg");});
test("privileges -> privileg", function() {deepEqual( Stem("privileges"), "privileg");});
test("privilegio -> privilegio", function() {deepEqual( Stem("privilegio"), "privilegio");});
test("privily -> privili", function() {deepEqual( Stem("privily"), "privili");});
test("privity -> priviti", function() {deepEqual( Stem("privity"), "priviti");});
test("privy -> privi", function() {deepEqual( Stem("privy"), "privi");});
test("priz -> priz", function() {deepEqual( Stem("priz"), "priz");});
test("prize -> prize", function() {deepEqual( Stem("prize"), "prize");});
test("prized -> prize", function() {deepEqual( Stem("prized"), "prize");});
test("prizer -> prizer", function() {deepEqual( Stem("prizer"), "prizer");});
test("prizes -> prize", function() {deepEqual( Stem("prizes"), "prize");});
test("prizest -> prizest", function() {deepEqual( Stem("prizest"), "prizest");});
test("prizing -> prize", function() {deepEqual( Stem("prizing"), "prize");});
test("pro -> pro", function() {deepEqual( Stem("pro"), "pro");});
test("probabilities -> probabl", function() {deepEqual( Stem("probabilities"), "probabl");});
test("probability -> probabl", function() {deepEqual( Stem("probability"), "probabl");});
test("probable -> probabl", function() {deepEqual( Stem("probable"), "probabl");});
test("probably -> probabl", function() {deepEqual( Stem("probably"), "probabl");});
test("probal -> probal", function() {deepEqual( Stem("probal"), "probal");});
test("probation -> probat", function() {deepEqual( Stem("probation"), "probat");});
test("proceed -> proce", function() {deepEqual( Stem("proceed"), "proce");});
test("proceeded -> proceed", function() {deepEqual( Stem("proceeded"), "proceed");});
test("proceeders -> proceed", function() {deepEqual( Stem("proceeders"), "proceed");});
test("proceeding -> proceed", function() {deepEqual( Stem("proceeding"), "proceed");});
test("proceedings -> proceed", function() {deepEqual( Stem("proceedings"), "proceed");});
test("proceeds -> proce", function() {deepEqual( Stem("proceeds"), "proce");});
test("process -> process", function() {deepEqual( Stem("process"), "process");});
test("procession -> process", function() {deepEqual( Stem("procession"), "process");});
test("proclaim -> proclaim", function() {deepEqual( Stem("proclaim"), "proclaim");});
test("proclaimed -> proclaim", function() {deepEqual( Stem("proclaimed"), "proclaim");});
test("proclaimeth -> proclaimeth", function() {deepEqual( Stem("proclaimeth"), "proclaimeth");});
test("proclaiming -> proclaim", function() {deepEqual( Stem("proclaiming"), "proclaim");});
test("proclaims -> proclaim", function() {deepEqual( Stem("proclaims"), "proclaim");});
test("proclamation -> proclam", function() {deepEqual( Stem("proclamation"), "proclam");});
test("proclamations -> proclam", function() {deepEqual( Stem("proclamations"), "proclam");});
test("proconsul -> proconsul", function() {deepEqual( Stem("proconsul"), "proconsul");});
test("procrastinate -> procrastin", function() {deepEqual( Stem("procrastinate"), "procrastin");});
test("procreant -> procreant", function() {deepEqual( Stem("procreant"), "procreant");});
test("procreants -> procreant", function() {deepEqual( Stem("procreants"), "procreant");});
test("procreation -> procreat", function() {deepEqual( Stem("procreation"), "procreat");});
test("procrus -> procru", function() {deepEqual( Stem("procrus"), "procru");});
test("proctors -> proctor", function() {deepEqual( Stem("proctors"), "proctor");});
test("proculeius -> proculeiu", function() {deepEqual( Stem("proculeius"), "proculeiu");});
test("procur -> procur", function() {deepEqual( Stem("procur"), "procur");});
test("procurator -> procur", function() {deepEqual( Stem("procurator"), "procur");});
test("procure -> procur", function() {deepEqual( Stem("procure"), "procur");});
test("procured -> procur", function() {deepEqual( Stem("procured"), "procur");});
test("procures -> procur", function() {deepEqual( Stem("procures"), "procur");});
test("procuring -> procur", function() {deepEqual( Stem("procuring"), "procur");});
test("prodigal -> prodig", function() {deepEqual( Stem("prodigal"), "prodig");});
test("prodigality -> prodig", function() {deepEqual( Stem("prodigality"), "prodig");});
test("prodigally -> prodig", function() {deepEqual( Stem("prodigally"), "prodig");});
test("prodigals -> prodig", function() {deepEqual( Stem("prodigals"), "prodig");});
test("prodigated -> prodig", function() {deepEqual( Stem("prodigated"), "prodig");});
test("prodigies -> prodigi", function() {deepEqual( Stem("prodigies"), "prodigi");});
test("prodigious -> prodigi", function() {deepEqual( Stem("prodigious"), "prodigi");});
test("prodigiously -> prodigi", function() {deepEqual( Stem("prodigiously"), "prodigi");});
test("prodigy -> prodigi", function() {deepEqual( Stem("prodigy"), "prodigi");});
test("proditor -> proditor", function() {deepEqual( Stem("proditor"), "proditor");});
test("produc -> produc", function() {deepEqual( Stem("produc"), "produc");});
test("produce -> produc", function() {deepEqual( Stem("produce"), "produc");});
test("produced -> produc", function() {deepEqual( Stem("produced"), "produc");});
test("produces -> produc", function() {deepEqual( Stem("produces"), "produc");});
test("producing -> produc", function() {deepEqual( Stem("producing"), "produc");});
test("productive -> product", function() {deepEqual( Stem("productive"), "product");});
test("proface -> profac", function() {deepEqual( Stem("proface"), "profac");});
test("profan -> profan", function() {deepEqual( Stem("profan"), "profan");});
test("profanation -> profan", function() {deepEqual( Stem("profanation"), "profan");});
test("profane -> profan", function() {deepEqual( Stem("profane"), "profan");});
test("profaned -> profan", function() {deepEqual( Stem("profaned"), "profan");});
test("profanely -> profan", function() {deepEqual( Stem("profanely"), "profan");});
test("profaneness -> profan", function() {deepEqual( Stem("profaneness"), "profan");});
test("profaners -> profan", function() {deepEqual( Stem("profaners"), "profan");});
test("profaning -> profan", function() {deepEqual( Stem("profaning"), "profan");});
test("profess -> profess", function() {deepEqual( Stem("profess"), "profess");});
test("professed -> profess", function() {deepEqual( Stem("professed"), "profess");});
test("professes -> profess", function() {deepEqual( Stem("professes"), "profess");});
test("professing -> profess", function() {deepEqual( Stem("professing"), "profess");});
test("profession -> profess", function() {deepEqual( Stem("profession"), "profess");});
test("professional -> profession", function() {deepEqual( Stem("professional"), "profession");});
test("professionally -> profession", function() {deepEqual( Stem("professionally"), "profession");});
test("professions -> profess", function() {deepEqual( Stem("professions"), "profess");});
test("professor -> professor", function() {deepEqual( Stem("professor"), "professor");});
test("professors -> professor", function() {deepEqual( Stem("professors"), "professor");});
test("proffer -> proffer", function() {deepEqual( Stem("proffer"), "proffer");});
test("proffered -> proffer", function() {deepEqual( Stem("proffered"), "proffer");});
test("profferer -> proffer", function() {deepEqual( Stem("profferer"), "proffer");});
test("proffers -> proffer", function() {deepEqual( Stem("proffers"), "proffer");});
test("proficiency -> profici", function() {deepEqual( Stem("proficiency"), "profici");});
test("proficient -> profici", function() {deepEqual( Stem("proficient"), "profici");});
test("proficients -> profici", function() {deepEqual( Stem("proficients"), "profici");});
test("profile -> profil", function() {deepEqual( Stem("profile"), "profil");});
test("profit -> profit", function() {deepEqual( Stem("profit"), "profit");});
test("profitable -> profit", function() {deepEqual( Stem("profitable"), "profit");});
test("profitably -> profit", function() {deepEqual( Stem("profitably"), "profit");});
test("profited -> profit", function() {deepEqual( Stem("profited"), "profit");});
test("profiting -> profit", function() {deepEqual( Stem("profiting"), "profit");});
test("profitless -> profitless", function() {deepEqual( Stem("profitless"), "profitless");});
test("profits -> profit", function() {deepEqual( Stem("profits"), "profit");});
test("profligate -> proflig", function() {deepEqual( Stem("profligate"), "proflig");});
test("profound -> profound", function() {deepEqual( Stem("profound"), "profound");});
test("profoundest -> profoundest", function() {deepEqual( Stem("profoundest"), "profoundest");});
test("profoundly -> profoundli", function() {deepEqual( Stem("profoundly"), "profoundli");});
test("profundity -> profund", function() {deepEqual( Stem("profundity"), "profund");});
test("profuse -> profus", function() {deepEqual( Stem("profuse"), "profus");});
test("profusely -> profus", function() {deepEqual( Stem("profusely"), "profus");});
test("profusion -> profus", function() {deepEqual( Stem("profusion"), "profus");});
test("profusus -> profusu", function() {deepEqual( Stem("profusus"), "profusu");});
test("progenitor -> progenitor", function() {deepEqual( Stem("progenitor"), "progenitor");});
test("progenitors -> progenitor", function() {deepEqual( Stem("progenitors"), "progenitor");});
test("progeny -> progeni", function() {deepEqual( Stem("progeny"), "progeni");});
test("progne -> progn", function() {deepEqual( Stem("progne"), "progn");});
test("prognosticate -> prognost", function() {deepEqual( Stem("prognosticate"), "prognost");});
test("prognostication -> prognost", function() {deepEqual( Stem("prognostication"), "prognost");});
test("progress -> progress", function() {deepEqual( Stem("progress"), "progress");});
test("progresses -> progress", function() {deepEqual( Stem("progresses"), "progress");});
test("progression -> progress", function() {deepEqual( Stem("progression"), "progress");});
test("prohibit -> prohibit", function() {deepEqual( Stem("prohibit"), "prohibit");});
test("prohibition -> prohibit", function() {deepEqual( Stem("prohibition"), "prohibit");});
test("project -> project", function() {deepEqual( Stem("project"), "project");});
test("projection -> project", function() {deepEqual( Stem("projection"), "project");});
test("projects -> project", function() {deepEqual( Stem("projects"), "project");});
test("prolixious -> prolixi", function() {deepEqual( Stem("prolixious"), "prolixi");});
test("prolixity -> prolix", function() {deepEqual( Stem("prolixity"), "prolix");});
test("prologue -> prologu", function() {deepEqual( Stem("prologue"), "prologu");});
test("prologues -> prologu", function() {deepEqual( Stem("prologues"), "prologu");});
test("prolong -> prolong", function() {deepEqual( Stem("prolong"), "prolong");});
test("prolonged -> prolong", function() {deepEqual( Stem("prolonged"), "prolong");});
test("prolongs -> prolong", function() {deepEqual( Stem("prolongs"), "prolong");});
test("promenaders -> promenad", function() {deepEqual( Stem("promenaders"), "promenad");});
test("promethean -> promethean", function() {deepEqual( Stem("promethean"), "promethean");});
test("prometheus -> prometheu", function() {deepEqual( Stem("prometheus"), "prometheu");});
test("promis -> promi", function() {deepEqual( Stem("promis"), "promi");});
test("promise -> promis", function() {deepEqual( Stem("promise"), "promis");});
test("promised -> promis", function() {deepEqual( Stem("promised"), "promis");});
test("promises -> promis", function() {deepEqual( Stem("promises"), "promis");});
test("promiseth -> promiseth", function() {deepEqual( Stem("promiseth"), "promiseth");});
test("promising -> promis", function() {deepEqual( Stem("promising"), "promis");});
test("promissory -> promissori", function() {deepEqual( Stem("promissory"), "promissori");});
test("promontory -> promontori", function() {deepEqual( Stem("promontory"), "promontori");});
test("promoted -> promot", function() {deepEqual( Stem("promoted"), "promot");});
test("promoter -> promot", function() {deepEqual( Stem("promoter"), "promot");});
test("promotion -> promot", function() {deepEqual( Stem("promotion"), "promot");});
test("promotions -> promot", function() {deepEqual( Stem("promotions"), "promot");});
test("prompt -> prompt", function() {deepEqual( Stem("prompt"), "prompt");});
test("prompted -> prompt", function() {deepEqual( Stem("prompted"), "prompt");});
test("promptement -> promptement", function() {deepEqual( Stem("promptement"), "promptement");});
test("prompter -> prompter", function() {deepEqual( Stem("prompter"), "prompter");});
test("prompting -> prompt", function() {deepEqual( Stem("prompting"), "prompt");});
test("promptly -> promptli", function() {deepEqual( Stem("promptly"), "promptli");});
test("prompts -> prompt", function() {deepEqual( Stem("prompts"), "prompt");});
test("prompture -> promptur", function() {deepEqual( Stem("prompture"), "promptur");});
test("promulgate -> promulg", function() {deepEqual( Stem("promulgate"), "promulg");});
test("promulgated -> promulg", function() {deepEqual( Stem("promulgated"), "promulg");});
test("prone -> prone", function() {deepEqual( Stem("prone"), "prone");});
test("prong -> prong", function() {deepEqual( Stem("prong"), "prong");});
test("prononcer -> prononc", function() {deepEqual( Stem("prononcer"), "prononc");});
test("prononcez -> prononcez", function() {deepEqual( Stem("prononcez"), "prononcez");});
test("pronoun -> pronoun", function() {deepEqual( Stem("pronoun"), "pronoun");});
test("pronounc -> pronounc", function() {deepEqual( Stem("pronounc"), "pronounc");});
test("pronounce -> pronounc", function() {deepEqual( Stem("pronounce"), "pronounc");});
test("pronounced -> pronounc", function() {deepEqual( Stem("pronounced"), "pronounc");});
test("pronouncing -> pronounc", function() {deepEqual( Stem("pronouncing"), "pronounc");});
test("pronouns -> pronoun", function() {deepEqual( Stem("pronouns"), "pronoun");});
test("pronunciation -> pronunci", function() {deepEqual( Stem("pronunciation"), "pronunci");});
test("proof -> proof", function() {deepEqual( Stem("proof"), "proof");});
test("proofs -> proof", function() {deepEqual( Stem("proofs"), "proof");});
test("prooshians -> prooshian", function() {deepEqual( Stem("prooshians"), "prooshian");});
test("prop -> prop", function() {deepEqual( Stem("prop"), "prop");});
test("propagate -> propag", function() {deepEqual( Stem("propagate"), "propag");});
test("propagation -> propag", function() {deepEqual( Stem("propagation"), "propag");});
test("propend -> propend", function() {deepEqual( Stem("propend"), "propend");});
test("propension -> propens", function() {deepEqual( Stem("propension"), "propens");});
test("propensities -> propens", function() {deepEqual( Stem("propensities"), "propens");});
test("propensity -> propens", function() {deepEqual( Stem("propensity"), "propens");});
test("proper -> proper", function() {deepEqual( Stem("proper"), "proper");});
test("properer -> proper", function() {deepEqual( Stem("properer"), "proper");});
test("properly -> properli", function() {deepEqual( Stem("properly"), "properli");});
test("propertied -> properti", function() {deepEqual( Stem("propertied"), "properti");});
test("properties -> properti", function() {deepEqual( Stem("properties"), "properti");});
test("property -> properti", function() {deepEqual( Stem("property"), "properti");});
test("prophecies -> propheci", function() {deepEqual( Stem("prophecies"), "propheci");});
test("prophecy -> propheci", function() {deepEqual( Stem("prophecy"), "propheci");});
test("prophesied -> prophesi", function() {deepEqual( Stem("prophesied"), "prophesi");});
test("prophesier -> prophesi", function() {deepEqual( Stem("prophesier"), "prophesi");});
test("prophesy -> prophesi", function() {deepEqual( Stem("prophesy"), "prophesi");});
test("prophesying -> prophesi", function() {deepEqual( Stem("prophesying"), "prophesi");});
test("prophet -> prophet", function() {deepEqual( Stem("prophet"), "prophet");});
test("prophetess -> prophetess", function() {deepEqual( Stem("prophetess"), "prophetess");});
test("prophetic -> prophet", function() {deepEqual( Stem("prophetic"), "prophet");});
test("prophetically -> prophet", function() {deepEqual( Stem("prophetically"), "prophet");});
test("prophets -> prophet", function() {deepEqual( Stem("prophets"), "prophet");});
test("propinquity -> propinqu", function() {deepEqual( Stem("propinquity"), "propinqu");});
test("propontic -> propont", function() {deepEqual( Stem("propontic"), "propont");});
test("proportion -> proport", function() {deepEqual( Stem("proportion"), "proport");});
test("proportionable -> proportion", function() {deepEqual( Stem("proportionable"), "proportion");});
test("proportions -> proport", function() {deepEqual( Stem("proportions"), "proport");});
test("propos -> propo", function() {deepEqual( Stem("propos"), "propo");});
test("proposal -> propos", function() {deepEqual( Stem("proposal"), "propos");});
test("proposals -> propos", function() {deepEqual( Stem("proposals"), "propos");});
test("propose -> propos", function() {deepEqual( Stem("propose"), "propos");});
test("proposed -> propos", function() {deepEqual( Stem("proposed"), "propos");});
test("proposer -> propos", function() {deepEqual( Stem("proposer"), "propos");});
test("proposes -> propos", function() {deepEqual( Stem("proposes"), "propos");});
test("proposing -> propos", function() {deepEqual( Stem("proposing"), "propos");});
test("proposition -> proposit", function() {deepEqual( Stem("proposition"), "proposit");});
test("propositions -> proposit", function() {deepEqual( Stem("propositions"), "proposit");});
test("propounded -> propound", function() {deepEqual( Stem("propounded"), "propound");});
test("propp -> propp", function() {deepEqual( Stem("propp"), "propp");});
test("propre -> propr", function() {deepEqual( Stem("propre"), "propr");});
test("proprietor -> proprietor", function() {deepEqual( Stem("proprietor"), "proprietor");});
test("proprietors -> proprietor", function() {deepEqual( Stem("proprietors"), "proprietor");});
test("proprietress -> proprietress", function() {deepEqual( Stem("proprietress"), "proprietress");});
test("propriety -> proprieti", function() {deepEqual( Stem("propriety"), "proprieti");});
test("props -> prop", function() {deepEqual( Stem("props"), "prop");});
test("propugnation -> propugn", function() {deepEqual( Stem("propugnation"), "propugn");});
test("prorogue -> prorogu", function() {deepEqual( Stem("prorogue"), "prorogu");});
test("prorogued -> prorogu", function() {deepEqual( Stem("prorogued"), "prorogu");});
test("proscription -> proscript", function() {deepEqual( Stem("proscription"), "proscript");});
test("proscriptions -> proscript", function() {deepEqual( Stem("proscriptions"), "proscript");});
test("prose -> prose", function() {deepEqual( Stem("prose"), "prose");});
test("prosecute -> prosecut", function() {deepEqual( Stem("prosecute"), "prosecut");});
test("prosecuting -> prosecut", function() {deepEqual( Stem("prosecuting"), "prosecut");});
test("prosecution -> prosecut", function() {deepEqual( Stem("prosecution"), "prosecut");});
test("proselytes -> proselyt", function() {deepEqual( Stem("proselytes"), "proselyt");});
test("proselytizer -> proselyt", function() {deepEqual( Stem("proselytizer"), "proselyt");});
test("proserpina -> proserpina", function() {deepEqual( Stem("proserpina"), "proserpina");});
test("prosp -> prosp", function() {deepEqual( Stem("prosp"), "prosp");});
test("prospect -> prospect", function() {deepEqual( Stem("prospect"), "prospect");});
test("prospects -> prospect", function() {deepEqual( Stem("prospects"), "prospect");});
test("prospectus -> prospectu", function() {deepEqual( Stem("prospectus"), "prospectu");});
test("prospectuses -> prospectus", function() {deepEqual( Stem("prospectuses"), "prospectus");});
test("prosper -> prosper", function() {deepEqual( Stem("prosper"), "prosper");});
test("prospered -> prosper", function() {deepEqual( Stem("prospered"), "prosper");});
test("prosperity -> prosper", function() {deepEqual( Stem("prosperity"), "prosper");});
test("prospero -> prospero", function() {deepEqual( Stem("prospero"), "prospero");});
test("prosperous -> prosper", function() {deepEqual( Stem("prosperous"), "prosper");});
test("prosperously -> prosper", function() {deepEqual( Stem("prosperously"), "prosper");});
test("prospers -> prosper", function() {deepEqual( Stem("prospers"), "prosper");});
test("prostitute -> prostitut", function() {deepEqual( Stem("prostitute"), "prostitut");});
test("prostrate -> prostrat", function() {deepEqual( Stem("prostrate"), "prostrat");});
test("prostrated -> prostrat", function() {deepEqual( Stem("prostrated"), "prostrat");});
test("prostration -> prostrat", function() {deepEqual( Stem("prostration"), "prostrat");});
test("prosy -> prosi", function() {deepEqual( Stem("prosy"), "prosi");});
test("protect -> protect", function() {deepEqual( Stem("protect"), "protect");});
test("protected -> protect", function() {deepEqual( Stem("protected"), "protect");});
test("protection -> protect", function() {deepEqual( Stem("protection"), "protect");});
test("protector -> protector", function() {deepEqual( Stem("protector"), "protector");});
test("protectors -> protector", function() {deepEqual( Stem("protectors"), "protector");});
test("protectorship -> protectorship", function() {deepEqual( Stem("protectorship"), "protectorship");});
test("protectress -> protectress", function() {deepEqual( Stem("protectress"), "protectress");});
test("protects -> protect", function() {deepEqual( Stem("protects"), "protect");});
test("protege -> proteg", function() {deepEqual( Stem("protege"), "proteg");});
test("protegee -> protege", function() {deepEqual( Stem("protegee"), "protege");});
test("proteges -> proteg", function() {deepEqual( Stem("proteges"), "proteg");});
test("protest -> protest", function() {deepEqual( Stem("protest"), "protest");});
test("protestantism -> protestant", function() {deepEqual( Stem("protestantism"), "protestant");});
test("protestants -> protest", function() {deepEqual( Stem("protestants"), "protest");});
test("protestation -> protest", function() {deepEqual( Stem("protestation"), "protest");});
test("protestations -> protest", function() {deepEqual( Stem("protestations"), "protest");});
test("protested -> protest", function() {deepEqual( Stem("protested"), "protest");});
test("protester -> protest", function() {deepEqual( Stem("protester"), "protest");});
test("protesting -> protest", function() {deepEqual( Stem("protesting"), "protest");});
test("protests -> protest", function() {deepEqual( Stem("protests"), "protest");});
test("proteus -> proteu", function() {deepEqual( Stem("proteus"), "proteu");});
test("protheus -> protheu", function() {deepEqual( Stem("protheus"), "protheu");});
test("protract -> protract", function() {deepEqual( Stem("protract"), "protract");});
test("protractive -> protract", function() {deepEqual( Stem("protractive"), "protract");});
test("protrude -> protrud", function() {deepEqual( Stem("protrude"), "protrud");});
test("protruded -> protrud", function() {deepEqual( Stem("protruded"), "protrud");});
test("proud -> proud", function() {deepEqual( Stem("proud"), "proud");});
test("prouder -> prouder", function() {deepEqual( Stem("prouder"), "prouder");});
test("proudest -> proudest", function() {deepEqual( Stem("proudest"), "proudest");});
test("proudlier -> proudlier", function() {deepEqual( Stem("proudlier"), "proudlier");});
test("proudly -> proudli", function() {deepEqual( Stem("proudly"), "proudli");});
test("prouds -> proud", function() {deepEqual( Stem("prouds"), "proud");});
test("prov -> prov", function() {deepEqual( Stem("prov"), "prov");});
test("provand -> provand", function() {deepEqual( Stem("provand"), "provand");});
test("prove -> prove", function() {deepEqual( Stem("prove"), "prove");});
test("proved -> prove", function() {deepEqual( Stem("proved"), "prove");});
test("provence -> provenc", function() {deepEqual( Stem("provence"), "provenc");});
test("provender -> provend", function() {deepEqual( Stem("provender"), "provend");});
test("proverb -> proverb", function() {deepEqual( Stem("proverb"), "proverb");});
test("proverbially -> proverbi", function() {deepEqual( Stem("proverbially"), "proverbi");});
test("proverbs -> proverb", function() {deepEqual( Stem("proverbs"), "proverb");});
test("proves -> prove", function() {deepEqual( Stem("proves"), "prove");});
test("proveth -> proveth", function() {deepEqual( Stem("proveth"), "proveth");});
test("provide -> provid", function() {deepEqual( Stem("provide"), "provid");});
test("provided -> provid", function() {deepEqual( Stem("provided"), "provid");});
test("providence -> provid", function() {deepEqual( Stem("providence"), "provid");});
test("provident -> provid", function() {deepEqual( Stem("provident"), "provid");});
test("providential -> providenti", function() {deepEqual( Stem("providential"), "providenti");});
test("providentially -> providenti", function() {deepEqual( Stem("providentially"), "providenti");});
test("providently -> provid", function() {deepEqual( Stem("providently"), "provid");});
test("provider -> provid", function() {deepEqual( Stem("provider"), "provid");});
test("provides -> provid", function() {deepEqual( Stem("provides"), "provid");});
test("providing -> provid", function() {deepEqual( Stem("providing"), "provid");});
test("province -> provinc", function() {deepEqual( Stem("province"), "provinc");});
test("provinces -> provinc", function() {deepEqual( Stem("provinces"), "provinc");});
test("provincial -> provinci", function() {deepEqual( Stem("provincial"), "provinci");});
test("proving -> prove", function() {deepEqual( Stem("proving"), "prove");});
test("provision -> provis", function() {deepEqual( Stem("provision"), "provis");});
test("provisions -> provis", function() {deepEqual( Stem("provisions"), "provis");});
test("proviso -> proviso", function() {deepEqual( Stem("proviso"), "proviso");});
test("provocation -> provoc", function() {deepEqual( Stem("provocation"), "provoc");});
test("provok -> provok", function() {deepEqual( Stem("provok"), "provok");});
test("provoke -> provok", function() {deepEqual( Stem("provoke"), "provok");});
test("provoked -> provok", function() {deepEqual( Stem("provoked"), "provok");});
test("provoker -> provok", function() {deepEqual( Stem("provoker"), "provok");});
test("provokes -> provok", function() {deepEqual( Stem("provokes"), "provok");});
test("provoketh -> provoketh", function() {deepEqual( Stem("provoketh"), "provoketh");});
test("provoking -> provok", function() {deepEqual( Stem("provoking"), "provok");});
test("provost -> provost", function() {deepEqual( Stem("provost"), "provost");});
test("prowess -> prowess", function() {deepEqual( Stem("prowess"), "prowess");});
test("prowling -> prowl", function() {deepEqual( Stem("prowling"), "prowl");});
test("proxy -> proxi", function() {deepEqual( Stem("proxy"), "proxi");});
test("prudence -> prudenc", function() {deepEqual( Stem("prudence"), "prudenc");});
test("prudent -> prudent", function() {deepEqual( Stem("prudent"), "prudent");});
test("prudently -> prudent", function() {deepEqual( Stem("prudently"), "prudent");});
test("prun -> prun", function() {deepEqual( Stem("prun"), "prun");});
test("prune -> prune", function() {deepEqual( Stem("prune"), "prune");});
test("prunes -> prune", function() {deepEqual( Stem("prunes"), "prune");});
test("pruning -> prune", function() {deepEqual( Stem("pruning"), "prune");});
test("prussia -> prussia", function() {deepEqual( Stem("prussia"), "prussia");});
test("prussian -> prussian", function() {deepEqual( Stem("prussian"), "prussian");});
test("prussians -> prussian", function() {deepEqual( Stem("prussians"), "prussian");});
test("prussic -> prussic", function() {deepEqual( Stem("prussic"), "prussic");});
test("pry -> pry", function() {deepEqual( Stem("pry"), "pry");});
test("prying -> pry", function() {deepEqual( Stem("prying"), "pry");});
test("psalm -> psalm", function() {deepEqual( Stem("psalm"), "psalm");});
test("psalmist -> psalmist", function() {deepEqual( Stem("psalmist"), "psalmist");});
test("psalmody -> psalmodi", function() {deepEqual( Stem("psalmody"), "psalmodi");});
test("psalms -> psalm", function() {deepEqual( Stem("psalms"), "psalm");});
test("psalteries -> psalteri", function() {deepEqual( Stem("psalteries"), "psalteri");});
test("psha -> psha", function() {deepEqual( Stem("psha"), "psha");});
test("ptolemies -> ptolemi", function() {deepEqual( Stem("ptolemies"), "ptolemi");});
test("ptolemy -> ptolemi", function() {deepEqual( Stem("ptolemy"), "ptolemi");});
test("public -> public", function() {deepEqual( Stem("public"), "public");});
test("publican -> publican", function() {deepEqual( Stem("publican"), "publican");});
test("publication -> public", function() {deepEqual( Stem("publication"), "public");});
test("publicity -> public", function() {deepEqual( Stem("publicity"), "public");});
test("publicly -> publicli", function() {deepEqual( Stem("publicly"), "publicli");});
test("publicola -> publicola", function() {deepEqual( Stem("publicola"), "publicola");});
test("publish -> publish", function() {deepEqual( Stem("publish"), "publish");});
test("published -> publish", function() {deepEqual( Stem("published"), "publish");});
test("publisher -> publish", function() {deepEqual( Stem("publisher"), "publish");});
test("publishing -> publish", function() {deepEqual( Stem("publishing"), "publish");});
test("publius -> publiu", function() {deepEqual( Stem("publius"), "publiu");});
test("pucelle -> pucel", function() {deepEqual( Stem("pucelle"), "pucel");});
test("puck -> puck", function() {deepEqual( Stem("puck"), "puck");});
test("pudder -> pudder", function() {deepEqual( Stem("pudder"), "pudder");});
test("pudding -> pud", function() {deepEqual( Stem("pudding"), "pud");});
test("puddings -> pud", function() {deepEqual( Stem("puddings"), "pud");});
test("puddle -> puddl", function() {deepEqual( Stem("puddle"), "puddl");});
test("puddled -> puddl", function() {deepEqual( Stem("puddled"), "puddl");});
test("pudency -> pudenc", function() {deepEqual( Stem("pudency"), "pudenc");});
test("pudgy -> pudgi", function() {deepEqual( Stem("pudgy"), "pudgi");});
test("puerile -> pueril", function() {deepEqual( Stem("puerile"), "pueril");});
test("pueritia -> pueritia", function() {deepEqual( Stem("pueritia"), "pueritia");});
test("puff -> puff", function() {deepEqual( Stem("puff"), "puff");});
test("puffed -> puf", function() {deepEqual( Stem("puffed"), "puf");});
test("puffing -> puf", function() {deepEqual( Stem("puffing"), "puf");});
test("puffs -> puff", function() {deepEqual( Stem("puffs"), "puff");});
test("puffy -> puffi", function() {deepEqual( Stem("puffy"), "puffi");});
test("pug -> pug", function() {deepEqual( Stem("pug"), "pug");});
test("pugging -> pug", function() {deepEqual( Stem("pugging"), "pug");});
test("pugilistic -> pugilist", function() {deepEqual( Stem("pugilistic"), "pugilist");});
test("puis -> pui", function() {deepEqual( Stem("puis"), "pui");});
test("puisaye -> puisay", function() {deepEqual( Stem("puisaye"), "puisay");});
test("puisne -> puisn", function() {deepEqual( Stem("puisne"), "puisn");});
test("puissance -> puissanc", function() {deepEqual( Stem("puissance"), "puissanc");});
test("puissant -> puissant", function() {deepEqual( Stem("puissant"), "puissant");});
test("puke -> puke", function() {deepEqual( Stem("puke"), "puke");});
test("puking -> puke", function() {deepEqual( Stem("puking"), "puke");});
test("pulcher -> pulcher", function() {deepEqual( Stem("pulcher"), "pulcher");});
test("puling -> pule", function() {deepEqual( Stem("puling"), "pule");});
test("pull -> pull", function() {deepEqual( Stem("pull"), "pull");});
test("pulled -> pull", function() {deepEqual( Stem("pulled"), "pull");});
test("puller -> puller", function() {deepEqual( Stem("puller"), "puller");});
test("pullet -> pullet", function() {deepEqual( Stem("pullet"), "pullet");});
test("pulling -> pull", function() {deepEqual( Stem("pulling"), "pull");});
test("pulls -> pull", function() {deepEqual( Stem("pulls"), "pull");});
test("pulpit -> pulpit", function() {deepEqual( Stem("pulpit"), "pulpit");});
test("pulpiter -> pulpit", function() {deepEqual( Stem("pulpiter"), "pulpit");});
test("pulpits -> pulpit", function() {deepEqual( Stem("pulpits"), "pulpit");});
test("pulsations -> pulsat", function() {deepEqual( Stem("pulsations"), "pulsat");});
test("pulse -> puls", function() {deepEqual( Stem("pulse"), "puls");});
test("pulsidge -> pulsidg", function() {deepEqual( Stem("pulsidge"), "pulsidg");});
test("pump -> pump", function() {deepEqual( Stem("pump"), "pump");});
test("pumped -> pump", function() {deepEqual( Stem("pumped"), "pump");});
test("pumpernickel -> pumpernickel", function() {deepEqual( Stem("pumpernickel"), "pumpernickel");});
test("pumpernickelisch -> pumpernickelisch", function() {deepEqual( Stem("pumpernickelisch"), "pumpernickelisch");});
test("pumping -> pump", function() {deepEqual( Stem("pumping"), "pump");});
test("pumpion -> pumpion", function() {deepEqual( Stem("pumpion"), "pumpion");});
test("pumps -> pump", function() {deepEqual( Stem("pumps"), "pump");});
test("pun -> pun", function() {deepEqual( Stem("pun"), "pun");});
test("punch -> punch", function() {deepEqual( Stem("punch"), "punch");});
test("punched -> punch", function() {deepEqual( Stem("punched"), "punch");});
test("punctual -> punctual", function() {deepEqual( Stem("punctual"), "punctual");});
test("punctuality -> punctual", function() {deepEqual( Stem("punctuality"), "punctual");});
test("punctually -> punctual", function() {deepEqual( Stem("punctually"), "punctual");});
test("pungent -> pungent", function() {deepEqual( Stem("pungent"), "pungent");});
test("punish -> punish", function() {deepEqual( Stem("punish"), "punish");});
test("punished -> punish", function() {deepEqual( Stem("punished"), "punish");});
test("punishes -> punish", function() {deepEqual( Stem("punishes"), "punish");});
test("punishing -> punish", function() {deepEqual( Stem("punishing"), "punish");});
test("punishment -> punish", function() {deepEqual( Stem("punishment"), "punish");});
test("punishments -> punish", function() {deepEqual( Stem("punishments"), "punish");});
test("punjaub -> punjaub", function() {deepEqual( Stem("punjaub"), "punjaub");});
test("punk -> punk", function() {deepEqual( Stem("punk"), "punk");});
test("punkahs -> punkah", function() {deepEqual( Stem("punkahs"), "punkah");});
test("punter -> punter", function() {deepEqual( Stem("punter"), "punter");});
test("punters -> punter", function() {deepEqual( Stem("punters"), "punter");});
test("punto -> punto", function() {deepEqual( Stem("punto"), "punto");});
test("puny -> puni", function() {deepEqual( Stem("puny"), "puni");});
test("pupil -> pupil", function() {deepEqual( Stem("pupil"), "pupil");});
test("pupils -> pupil", function() {deepEqual( Stem("pupils"), "pupil");});
test("puppet -> puppet", function() {deepEqual( Stem("puppet"), "puppet");});
test("puppets -> puppet", function() {deepEqual( Stem("puppets"), "puppet");});
test("puppies -> puppi", function() {deepEqual( Stem("puppies"), "puppi");});
test("puppy -> puppi", function() {deepEqual( Stem("puppy"), "puppi");});
test("pur -> pur", function() {deepEqual( Stem("pur"), "pur");});
test("purblind -> purblind", function() {deepEqual( Stem("purblind"), "purblind");});
test("purchas -> purcha", function() {deepEqual( Stem("purchas"), "purcha");});
test("purchase -> purchas", function() {deepEqual( Stem("purchase"), "purchas");});
test("purchased -> purchas", function() {deepEqual( Stem("purchased"), "purchas");});
test("purchaser -> purchas", function() {deepEqual( Stem("purchaser"), "purchas");});
test("purchasers -> purchas", function() {deepEqual( Stem("purchasers"), "purchas");});
test("purchases -> purchas", function() {deepEqual( Stem("purchases"), "purchas");});
test("purchaseth -> purchaseth", function() {deepEqual( Stem("purchaseth"), "purchaseth");});
test("purchasing -> purchas", function() {deepEqual( Stem("purchasing"), "purchas");});
test("pure -> pure", function() {deepEqual( Stem("pure"), "pure");});
test("purely -> pure", function() {deepEqual( Stem("purely"), "pure");});
test("purer -> purer", function() {deepEqual( Stem("purer"), "purer");});
test("purest -> purest", function() {deepEqual( Stem("purest"), "purest");});
test("purg -> purg", function() {deepEqual( Stem("purg"), "purg");});
test("purgation -> purgat", function() {deepEqual( Stem("purgation"), "purgat");});
test("purgative -> purg", function() {deepEqual( Stem("purgative"), "purg");});
test("purgatory -> purgatori", function() {deepEqual( Stem("purgatory"), "purgatori");});
test("purge -> purg", function() {deepEqual( Stem("purge"), "purg");});
test("purged -> purg", function() {deepEqual( Stem("purged"), "purg");});
test("purgers -> purger", function() {deepEqual( Stem("purgers"), "purger");});
test("purging -> purg", function() {deepEqual( Stem("purging"), "purg");});
test("purifier -> purifi", function() {deepEqual( Stem("purifier"), "purifi");});
test("purifies -> purifi", function() {deepEqual( Stem("purifies"), "purifi");});
test("purifying -> purifi", function() {deepEqual( Stem("purifying"), "purifi");});
test("puritan -> puritan", function() {deepEqual( Stem("puritan"), "puritan");});
test("purity -> puriti", function() {deepEqual( Stem("purity"), "puriti");});
test("purlieus -> purlieu", function() {deepEqual( Stem("purlieus"), "purlieu");});
test("purloin -> purloin", function() {deepEqual( Stem("purloin"), "purloin");});
test("purple -> purpl", function() {deepEqual( Stem("purple"), "purpl");});
test("purpled -> purpl", function() {deepEqual( Stem("purpled"), "purpl");});
test("purples -> purpl", function() {deepEqual( Stem("purples"), "purpl");});
test("purport -> purport", function() {deepEqual( Stem("purport"), "purport");});
test("purpos -> purpo", function() {deepEqual( Stem("purpos"), "purpo");});
test("purpose -> purpos", function() {deepEqual( Stem("purpose"), "purpos");});
test("purposed -> purpos", function() {deepEqual( Stem("purposed"), "purpos");});
test("purposely -> purpos", function() {deepEqual( Stem("purposely"), "purpos");});
test("purposes -> purpos", function() {deepEqual( Stem("purposes"), "purpos");});
test("purposeth -> purposeth", function() {deepEqual( Stem("purposeth"), "purposeth");});
test("purposing -> purpos", function() {deepEqual( Stem("purposing"), "purpos");});
test("purr -> purr", function() {deepEqual( Stem("purr"), "purr");});
test("purs -> pur", function() {deepEqual( Stem("purs"), "pur");});
test("purse -> purs", function() {deepEqual( Stem("purse"), "purs");});
test("pursents -> pursent", function() {deepEqual( Stem("pursents"), "pursent");});
test("purses -> purs", function() {deepEqual( Stem("purses"), "purs");});
test("pursu -> pursu", function() {deepEqual( Stem("pursu"), "pursu");});
test("pursue -> pursu", function() {deepEqual( Stem("pursue"), "pursu");});
test("pursued -> pursu", function() {deepEqual( Stem("pursued"), "pursu");});
test("pursuer -> pursuer", function() {deepEqual( Stem("pursuer"), "pursuer");});
test("pursuers -> pursuer", function() {deepEqual( Stem("pursuers"), "pursuer");});
test("pursues -> pursu", function() {deepEqual( Stem("pursues"), "pursu");});
test("pursuest -> pursuest", function() {deepEqual( Stem("pursuest"), "pursuest");});
test("pursueth -> pursueth", function() {deepEqual( Stem("pursueth"), "pursueth");});
test("pursuing -> pursu", function() {deepEqual( Stem("pursuing"), "pursu");});
test("pursuit -> pursuit", function() {deepEqual( Stem("pursuit"), "pursuit");});
test("pursuits -> pursuit", function() {deepEqual( Stem("pursuits"), "pursuit");});
test("pursuivant -> pursuiv", function() {deepEqual( Stem("pursuivant"), "pursuiv");});
test("pursuivants -> pursuiv", function() {deepEqual( Stem("pursuivants"), "pursuiv");});
test("pursy -> pursi", function() {deepEqual( Stem("pursy"), "pursi");});
test("purus -> puru", function() {deepEqual( Stem("purus"), "puru");});
test("purveyor -> purveyor", function() {deepEqual( Stem("purveyor"), "purveyor");});
test("purveyors -> purveyor", function() {deepEqual( Stem("purveyors"), "purveyor");});
test("push -> push", function() {deepEqual( Stem("push"), "push");});
test("pushed -> push", function() {deepEqual( Stem("pushed"), "push");});
test("pushes -> push", function() {deepEqual( Stem("pushes"), "push");});
test("pushing -> push", function() {deepEqual( Stem("pushing"), "push");});
test("pusillanimity -> pusillanim", function() {deepEqual( Stem("pusillanimity"), "pusillanim");});
test("put -> put", function() {deepEqual( Stem("put"), "put");});
test("putney -> putnei", function() {deepEqual( Stem("putney"), "putnei");});
test("putrefy -> putrefi", function() {deepEqual( Stem("putrefy"), "putrefi");});
test("putrified -> putrifi", function() {deepEqual( Stem("putrified"), "putrifi");});
test("puts -> put", function() {deepEqual( Stem("puts"), "put");});
test("putter -> putter", function() {deepEqual( Stem("putter"), "putter");});
test("putting -> put", function() {deepEqual( Stem("putting"), "put");});
test("puttock -> puttock", function() {deepEqual( Stem("puttock"), "puttock");});
test("puzzel -> puzzel", function() {deepEqual( Stem("puzzel"), "puzzel");});
test("puzzle -> puzzl", function() {deepEqual( Stem("puzzle"), "puzzl");});
test("puzzled -> puzzl", function() {deepEqual( Stem("puzzled"), "puzzl");});
test("puzzles -> puzzl", function() {deepEqual( Stem("puzzles"), "puzzl");});
test("puzzling -> puzzl", function() {deepEqual( Stem("puzzling"), "puzzl");});
test("py -> py", function() {deepEqual( Stem("py"), "py");});
test("pye -> pye", function() {deepEqual( Stem("pye"), "pye");});
test("pygmalion -> pygmalion", function() {deepEqual( Stem("pygmalion"), "pygmalion");});
test("pygmies -> pygmi", function() {deepEqual( Stem("pygmies"), "pygmi");});
test("pygmy -> pygmi", function() {deepEqual( Stem("pygmy"), "pygmi");});
test("pyramid -> pyramid", function() {deepEqual( Stem("pyramid"), "pyramid");});
test("pyramides -> pyramid", function() {deepEqual( Stem("pyramides"), "pyramid");});
test("pyramids -> pyramid", function() {deepEqual( Stem("pyramids"), "pyramid");});
test("pyramis -> pyrami", function() {deepEqual( Stem("pyramis"), "pyrami");});
test("pyramises -> pyramis", function() {deepEqual( Stem("pyramises"), "pyramis");});
test("pyramus -> pyramu", function() {deepEqual( Stem("pyramus"), "pyramu");});
test("pyrenean -> pyrenean", function() {deepEqual( Stem("pyrenean"), "pyrenean");});
test("pyrrhus -> pyrrhu", function() {deepEqual( Stem("pyrrhus"), "pyrrhu");});
test("pythagoras -> pythagora", function() {deepEqual( Stem("pythagoras"), "pythagora");});
test("q -> q", function() {deepEqual( Stem("q"), "q");});
test("qu -> qu", function() {deepEqual( Stem("qu"), "qu");});
test("qua -> qua", function() {deepEqual( Stem("qua"), "qua");});
test("quack -> quack", function() {deepEqual( Stem("quack"), "quack");});
test("quacks -> quack", function() {deepEqual( Stem("quacks"), "quack");});
test("quadrangle -> quadrangl", function() {deepEqual( Stem("quadrangle"), "quadrangl");});
test("quadrant -> quadrant", function() {deepEqual( Stem("quadrant"), "quadrant");});
test("quadrille -> quadril", function() {deepEqual( Stem("quadrille"), "quadril");});
test("quadrilles -> quadril", function() {deepEqual( Stem("quadrilles"), "quadril");});
test("quadroon -> quadroon", function() {deepEqual( Stem("quadroon"), "quadroon");});
test("quae -> quae", function() {deepEqual( Stem("quae"), "quae");});
test("quaff -> quaff", function() {deepEqual( Stem("quaff"), "quaff");});
test("quaffing -> quaf", function() {deepEqual( Stem("quaffing"), "quaf");});
test("quagmire -> quagmir", function() {deepEqual( Stem("quagmire"), "quagmir");});
test("quail -> quail", function() {deepEqual( Stem("quail"), "quail");});
test("quailed -> quail", function() {deepEqual( Stem("quailed"), "quail");});
test("quailing -> quail", function() {deepEqual( Stem("quailing"), "quail");});
test("quails -> quail", function() {deepEqual( Stem("quails"), "quail");});
test("quaint -> quaint", function() {deepEqual( Stem("quaint"), "quaint");});
test("quaintly -> quaintli", function() {deepEqual( Stem("quaintly"), "quaintli");});
test("quak -> quak", function() {deepEqual( Stem("quak"), "quak");});
test("quake -> quak", function() {deepEqual( Stem("quake"), "quak");});
test("quaker -> quaker", function() {deepEqual( Stem("quaker"), "quaker");});
test("quakes -> quak", function() {deepEqual( Stem("quakes"), "quak");});
test("qualification -> qualif", function() {deepEqual( Stem("qualification"), "qualif");});
test("qualifications -> qualif", function() {deepEqual( Stem("qualifications"), "qualif");});
test("qualified -> qualifi", function() {deepEqual( Stem("qualified"), "qualifi");});
test("qualifies -> qualifi", function() {deepEqual( Stem("qualifies"), "qualifi");});
test("qualify -> qualifi", function() {deepEqual( Stem("qualify"), "qualifi");});
test("qualifying -> qualifi", function() {deepEqual( Stem("qualifying"), "qualifi");});
test("qualite -> qualit", function() {deepEqual( Stem("qualite"), "qualit");});
test("qualities -> qualiti", function() {deepEqual( Stem("qualities"), "qualiti");});
test("quality -> qualiti", function() {deepEqual( Stem("quality"), "qualiti");});
test("qualm -> qualm", function() {deepEqual( Stem("qualm"), "qualm");});
test("qualmish -> qualmish", function() {deepEqual( Stem("qualmish"), "qualmish");});
test("quam -> quam", function() {deepEqual( Stem("quam"), "quam");});
test("quand -> quand", function() {deepEqual( Stem("quand"), "quand");});
test("quando -> quando", function() {deepEqual( Stem("quando"), "quando");});
test("quantities -> quantiti", function() {deepEqual( Stem("quantities"), "quantiti");});
test("quantity -> quantiti", function() {deepEqual( Stem("quantity"), "quantiti");});
test("quarante -> quarant", function() {deepEqual( Stem("quarante"), "quarant");});
test("quarantine -> quarantin", function() {deepEqual( Stem("quarantine"), "quarantin");});
test("quare -> quar", function() {deepEqual( Stem("quare"), "quar");});
test("quarl -> quarl", function() {deepEqual( Stem("quarl"), "quarl");});
test("quarrel -> quarrel", function() {deepEqual( Stem("quarrel"), "quarrel");});
test("quarrell -> quarrel", function() {deepEqual( Stem("quarrell"), "quarrel");});
test("quarrelled -> quarrel", function() {deepEqual( Stem("quarrelled"), "quarrel");});
test("quarreller -> quarrel", function() {deepEqual( Stem("quarreller"), "quarrel");});
test("quarrelling -> quarrel", function() {deepEqual( Stem("quarrelling"), "quarrel");});
test("quarrelous -> quarrel", function() {deepEqual( Stem("quarrelous"), "quarrel");});
test("quarrels -> quarrel", function() {deepEqual( Stem("quarrels"), "quarrel");});
test("quarrelsome -> quarrelsom", function() {deepEqual( Stem("quarrelsome"), "quarrelsom");});
test("quarries -> quarri", function() {deepEqual( Stem("quarries"), "quarri");});
test("quarry -> quarri", function() {deepEqual( Stem("quarry"), "quarri");});
test("quart -> quart", function() {deepEqual( Stem("quart"), "quart");});
test("quarter -> quarter", function() {deepEqual( Stem("quarter"), "quarter");});
test("quartered -> quarter", function() {deepEqual( Stem("quartered"), "quarter");});
test("quartering -> quarter", function() {deepEqual( Stem("quartering"), "quarter");});
test("quarterly -> quarterli", function() {deepEqual( Stem("quarterly"), "quarterli");});
test("quarters -> quarter", function() {deepEqual( Stem("quarters"), "quarter");});
test("quarto -> quarto", function() {deepEqual( Stem("quarto"), "quarto");});
test("quarts -> quart", function() {deepEqual( Stem("quarts"), "quart");});
test("quashimaboo -> quashimaboo", function() {deepEqual( Stem("quashimaboo"), "quashimaboo");});
test("quashyboo -> quashyboo", function() {deepEqual( Stem("quashyboo"), "quashyboo");});
test("quashyboos -> quashyboo", function() {deepEqual( Stem("quashyboos"), "quashyboo");});
test("quasi -> quasi", function() {deepEqual( Stem("quasi"), "quasi");});
test("quat -> quat", function() {deepEqual( Stem("quat"), "quat");});
test("quatch -> quatch", function() {deepEqual( Stem("quatch"), "quatch");});
test("quater -> quater", function() {deepEqual( Stem("quater"), "quater");});
test("quatorze -> quatorz", function() {deepEqual( Stem("quatorze"), "quatorz");});
test("quatre -> quatr", function() {deepEqual( Stem("quatre"), "quatr");});
test("quavering -> quaver", function() {deepEqual( Stem("quavering"), "quaver");});
test("quay -> quai", function() {deepEqual( Stem("quay"), "quai");});
test("quays -> quai", function() {deepEqual( Stem("quays"), "quai");});
test("que -> que", function() {deepEqual( Stem("que"), "que");});
test("quean -> quean", function() {deepEqual( Stem("quean"), "quean");});
test("queas -> quea", function() {deepEqual( Stem("queas"), "quea");});
test("queasiness -> queasi", function() {deepEqual( Stem("queasiness"), "queasi");});
test("queasy -> queasi", function() {deepEqual( Stem("queasy"), "queasi");});
test("quebec -> quebec", function() {deepEqual( Stem("quebec"), "quebec");});
test("queen -> queen", function() {deepEqual( Stem("queen"), "queen");});
test("queens -> queen", function() {deepEqual( Stem("queens"), "queen");});
test("queer -> queer", function() {deepEqual( Stem("queer"), "queer");});
test("queerest -> queerest", function() {deepEqual( Stem("queerest"), "queerest");});
test("queerly -> queerli", function() {deepEqual( Stem("queerly"), "queerli");});
test("quel -> quel", function() {deepEqual( Stem("quel"), "quel");});
test("quell -> quell", function() {deepEqual( Stem("quell"), "quell");});
test("quelled -> quell", function() {deepEqual( Stem("quelled"), "quell");});
test("queller -> queller", function() {deepEqual( Stem("queller"), "queller");});
test("quench -> quench", function() {deepEqual( Stem("quench"), "quench");});
test("quenched -> quench", function() {deepEqual( Stem("quenched"), "quench");});
test("quenching -> quench", function() {deepEqual( Stem("quenching"), "quench");});
test("quenchless -> quenchless", function() {deepEqual( Stem("quenchless"), "quenchless");});
test("queries -> queri", function() {deepEqual( Stem("queries"), "queri");});
test("querist -> querist", function() {deepEqual( Stem("querist"), "querist");});
test("quern -> quern", function() {deepEqual( Stem("quern"), "quern");});
test("querulous -> querul", function() {deepEqual( Stem("querulous"), "querul");});
test("querulousness -> querul", function() {deepEqual( Stem("querulousness"), "querul");});
test("quest -> quest", function() {deepEqual( Stem("quest"), "quest");});
test("questant -> questant", function() {deepEqual( Stem("questant"), "questant");});
test("question -> question", function() {deepEqual( Stem("question"), "question");});
test("questionable -> question", function() {deepEqual( Stem("questionable"), "question");});
test("questioned -> question", function() {deepEqual( Stem("questioned"), "question");});
test("questioner -> question", function() {deepEqual( Stem("questioner"), "question");});
test("questioning -> question", function() {deepEqual( Stem("questioning"), "question");});
test("questionless -> questionless", function() {deepEqual( Stem("questionless"), "questionless");});
test("questions -> question", function() {deepEqual( Stem("questions"), "question");});
test("questrists -> questrist", function() {deepEqual( Stem("questrists"), "questrist");});
test("quests -> quest", function() {deepEqual( Stem("quests"), "quest");});
test("queubus -> queubu", function() {deepEqual( Stem("queubus"), "queubu");});
test("qui -> qui", function() {deepEqual( Stem("qui"), "qui");});
test("quiberoon -> quiberoon", function() {deepEqual( Stem("quiberoon"), "quiberoon");});
test("quick -> quick", function() {deepEqual( Stem("quick"), "quick");});
test("quicken -> quicken", function() {deepEqual( Stem("quicken"), "quicken");});
test("quickens -> quicken", function() {deepEqual( Stem("quickens"), "quicken");});
test("quicker -> quicker", function() {deepEqual( Stem("quicker"), "quicker");});
test("quicklier -> quicklier", function() {deepEqual( Stem("quicklier"), "quicklier");});
test("quickly -> quickli", function() {deepEqual( Stem("quickly"), "quickli");});
test("quickness -> quick", function() {deepEqual( Stem("quickness"), "quick");});
test("quicksand -> quicksand", function() {deepEqual( Stem("quicksand"), "quicksand");});
test("quicksands -> quicksand", function() {deepEqual( Stem("quicksands"), "quicksand");});
test("quicksilverr -> quicksilverr", function() {deepEqual( Stem("quicksilverr"), "quicksilverr");});
test("quid -> quid", function() {deepEqual( Stem("quid"), "quid");});
test("quiddities -> quidditi", function() {deepEqual( Stem("quiddities"), "quidditi");});
test("quiddits -> quiddit", function() {deepEqual( Stem("quiddits"), "quiddit");});
test("quier -> quier", function() {deepEqual( Stem("quier"), "quier");});
test("quiet -> quiet", function() {deepEqual( Stem("quiet"), "quiet");});
test("quieter -> quieter", function() {deepEqual( Stem("quieter"), "quieter");});
test("quietest -> quietest", function() {deepEqual( Stem("quietest"), "quietest");});
test("quietly -> quietli", function() {deepEqual( Stem("quietly"), "quietli");});
test("quietness -> quiet", function() {deepEqual( Stem("quietness"), "quiet");});
test("quietude -> quietud", function() {deepEqual( Stem("quietude"), "quietud");});
test("quietus -> quietu", function() {deepEqual( Stem("quietus"), "quietu");});
test("quill -> quill", function() {deepEqual( Stem("quill"), "quill");});
test("quillets -> quillet", function() {deepEqual( Stem("quillets"), "quillet");});
test("quills -> quill", function() {deepEqual( Stem("quills"), "quill");});
test("quilt -> quilt", function() {deepEqual( Stem("quilt"), "quilt");});
test("quinapalus -> quinapalu", function() {deepEqual( Stem("quinapalus"), "quinapalu");});
test("quince -> quinc", function() {deepEqual( Stem("quince"), "quinc");});
test("quinces -> quinc", function() {deepEqual( Stem("quinces"), "quinc");});
test("quintain -> quintain", function() {deepEqual( Stem("quintain"), "quintain");});
test("quintessence -> quintess", function() {deepEqual( Stem("quintessence"), "quintess");});
test("quintin -> quintin", function() {deepEqual( Stem("quintin"), "quintin");});
test("quintus -> quintu", function() {deepEqual( Stem("quintus"), "quintu");});
test("quip -> quip", function() {deepEqual( Stem("quip"), "quip");});
test("quips -> quip", function() {deepEqual( Stem("quips"), "quip");});
test("quire -> quir", function() {deepEqual( Stem("quire"), "quir");});
test("quiring -> quir", function() {deepEqual( Stem("quiring"), "quir");});
test("quirk -> quirk", function() {deepEqual( Stem("quirk"), "quirk");});
test("quirks -> quirk", function() {deepEqual( Stem("quirks"), "quirk");});
test("quis -> qui", function() {deepEqual( Stem("quis"), "qui");});
test("quit -> quit", function() {deepEqual( Stem("quit"), "quit");});
test("quite -> quit", function() {deepEqual( Stem("quite"), "quit");});
test("quits -> quit", function() {deepEqual( Stem("quits"), "quit");});
test("quittance -> quittanc", function() {deepEqual( Stem("quittance"), "quittanc");});
test("quitted -> quit", function() {deepEqual( Stem("quitted"), "quit");});
test("quitting -> quit", function() {deepEqual( Stem("quitting"), "quit");});
test("quiver -> quiver", function() {deepEqual( Stem("quiver"), "quiver");});
test("quivered -> quiver", function() {deepEqual( Stem("quivered"), "quiver");});
test("quivering -> quiver", function() {deepEqual( Stem("quivering"), "quiver");});
test("quivers -> quiver", function() {deepEqual( Stem("quivers"), "quiver");});
test("quiz -> quiz", function() {deepEqual( Stem("quiz"), "quiz");});
test("quizzing -> quizz", function() {deepEqual( Stem("quizzing"), "quizz");});
test("quo -> quo", function() {deepEqual( Stem("quo"), "quo");});
test("quod -> quod", function() {deepEqual( Stem("quod"), "quod");});
test("quoifs -> quoif", function() {deepEqual( Stem("quoifs"), "quoif");});
test("quoint -> quoint", function() {deepEqual( Stem("quoint"), "quoint");});
test("quoit -> quoit", function() {deepEqual( Stem("quoit"), "quoit");});
test("quoits -> quoit", function() {deepEqual( Stem("quoits"), "quoit");});
test("quondam -> quondam", function() {deepEqual( Stem("quondam"), "quondam");});
test("quoniam -> quoniam", function() {deepEqual( Stem("quoniam"), "quoniam");});
test("quotation -> quotat", function() {deepEqual( Stem("quotation"), "quotat");});
test("quotations -> quotat", function() {deepEqual( Stem("quotations"), "quotat");});
test("quote -> quot", function() {deepEqual( Stem("quote"), "quot");});
test("quoted -> quot", function() {deepEqual( Stem("quoted"), "quot");});
test("quotes -> quot", function() {deepEqual( Stem("quotes"), "quot");});
test("quoth -> quoth", function() {deepEqual( Stem("quoth"), "quoth");});
test("quotidian -> quotidian", function() {deepEqual( Stem("quotidian"), "quotidian");});
test("quoting -> quot", function() {deepEqual( Stem("quoting"), "quot");});
test("qvite -> qvite", function() {deepEqual( Stem("qvite"), "qvite");});
test("r -> r", function() {deepEqual( Stem("r"), "r");});
test("rabbit -> rabbit", function() {deepEqual( Stem("rabbit"), "rabbit");});
test("rabbits -> rabbit", function() {deepEqual( Stem("rabbits"), "rabbit");});
test("rabble -> rabbl", function() {deepEqual( Stem("rabble"), "rabbl");});
test("rabblement -> rabblement", function() {deepEqual( Stem("rabblement"), "rabblement");});
test("race -> race", function() {deepEqual( Stem("race"), "race");});
test("races -> race", function() {deepEqual( Stem("races"), "race");});
test("racing -> race", function() {deepEqual( Stem("racing"), "race");});
test("rack -> rack", function() {deepEqual( Stem("rack"), "rack");});
test("rackers -> racker", function() {deepEqual( Stem("rackers"), "racker");});
test("racket -> racket", function() {deepEqual( Stem("racket"), "racket");});
test("rackets -> racket", function() {deepEqual( Stem("rackets"), "racket");});
test("racking -> rack", function() {deepEqual( Stem("racking"), "rack");});
test("racks -> rack", function() {deepEqual( Stem("racks"), "rack");});
test("radiance -> radianc", function() {deepEqual( Stem("radiance"), "radianc");});
test("radiant -> radiant", function() {deepEqual( Stem("radiant"), "radiant");});
test("radical -> radic", function() {deepEqual( Stem("radical"), "radic");});
test("radicals -> radic", function() {deepEqual( Stem("radicals"), "radic");});
test("radish -> radish", function() {deepEqual( Stem("radish"), "radish");});
test("rafe -> rafe", function() {deepEqual( Stem("rafe"), "rafe");});
test("raff -> raff", function() {deepEqual( Stem("raff"), "raff");});
test("raffoles -> raffol", function() {deepEqual( Stem("raffoles"), "raffol");});
test("raffs -> raff", function() {deepEqual( Stem("raffs"), "raff");});
test("raft -> raft", function() {deepEqual( Stem("raft"), "raft");});
test("rag -> rag", function() {deepEqual( Stem("rag"), "rag");});
test("rage -> rage", function() {deepEqual( Stem("rage"), "rage");});
test("raged -> rage", function() {deepEqual( Stem("raged"), "rage");});
test("rages -> rage", function() {deepEqual( Stem("rages"), "rage");});
test("rageth -> rageth", function() {deepEqual( Stem("rageth"), "rageth");});
test("ragg -> ragg", function() {deepEqual( Stem("ragg"), "ragg");});
test("ragged -> rag", function() {deepEqual( Stem("ragged"), "rag");});
test("raggedness -> ragged", function() {deepEqual( Stem("raggedness"), "ragged");});
test("raggles -> raggl", function() {deepEqual( Stem("raggles"), "raggl");});
test("raging -> rage", function() {deepEqual( Stem("raging"), "rage");});
test("ragland -> ragland", function() {deepEqual( Stem("ragland"), "ragland");});
test("ragozine -> ragozin", function() {deepEqual( Stem("ragozine"), "ragozin");});
test("rags -> rag", function() {deepEqual( Stem("rags"), "rag");});
test("rah -> rah", function() {deepEqual( Stem("rah"), "rah");});
test("raikes -> raik", function() {deepEqual( Stem("raikes"), "raik");});
test("rail -> rail", function() {deepEqual( Stem("rail"), "rail");});
test("railed -> rail", function() {deepEqual( Stem("railed"), "rail");});
test("railer -> railer", function() {deepEqual( Stem("railer"), "railer");});
test("railest -> railest", function() {deepEqual( Stem("railest"), "railest");});
test("raileth -> raileth", function() {deepEqual( Stem("raileth"), "raileth");});
test("railing -> rail", function() {deepEqual( Stem("railing"), "rail");});
test("railings -> rail", function() {deepEqual( Stem("railings"), "rail");});
test("railroads -> railroad", function() {deepEqual( Stem("railroads"), "railroad");});
test("rails -> rail", function() {deepEqual( Stem("rails"), "rail");});
test("raiment -> raiment", function() {deepEqual( Stem("raiment"), "raiment");});
test("rain -> rain", function() {deepEqual( Stem("rain"), "rain");});
test("rainbow -> rainbow", function() {deepEqual( Stem("rainbow"), "rainbow");});
test("raine -> rain", function() {deepEqual( Stem("raine"), "rain");});
test("raineth -> raineth", function() {deepEqual( Stem("raineth"), "raineth");});
test("raining -> rain", function() {deepEqual( Stem("raining"), "rain");});
test("rainold -> rainold", function() {deepEqual( Stem("rainold"), "rainold");});
test("rains -> rain", function() {deepEqual( Stem("rains"), "rain");});
test("rainy -> raini", function() {deepEqual( Stem("rainy"), "raini");});
test("rais -> rai", function() {deepEqual( Stem("rais"), "rai");});
test("raise -> rais", function() {deepEqual( Stem("raise"), "rais");});
test("raised -> rais", function() {deepEqual( Stem("raised"), "rais");});
test("raises -> rais", function() {deepEqual( Stem("raises"), "rais");});
test("raising -> rais", function() {deepEqual( Stem("raising"), "rais");});
test("raisins -> raisin", function() {deepEqual( Stem("raisins"), "raisin");});
test("rak -> rak", function() {deepEqual( Stem("rak"), "rak");});
test("rake -> rake", function() {deepEqual( Stem("rake"), "rake");});
test("raked -> rake", function() {deepEqual( Stem("raked"), "rake");});
test("rakers -> raker", function() {deepEqual( Stem("rakers"), "raker");});
test("rakes -> rake", function() {deepEqual( Stem("rakes"), "rake");});
test("ral -> ral", function() {deepEqual( Stem("ral"), "ral");});
test("rald -> rald", function() {deepEqual( Stem("rald"), "rald");});
test("rallied -> ralli", function() {deepEqual( Stem("rallied"), "ralli");});
test("rally -> ralli", function() {deepEqual( Stem("rally"), "ralli");});
test("rallying -> ralli", function() {deepEqual( Stem("rallying"), "ralli");});
test("ralph -> ralph", function() {deepEqual( Stem("ralph"), "ralph");});
test("ram -> ram", function() {deepEqual( Stem("ram"), "ram");});
test("rambling -> rambl", function() {deepEqual( Stem("rambling"), "rambl");});
test("rambures -> rambur", function() {deepEqual( Stem("rambures"), "rambur");});
test("ramchumder -> ramchumd", function() {deepEqual( Stem("ramchumder"), "ramchumd");});
test("ramchunder -> ramchund", function() {deepEqual( Stem("ramchunder"), "ramchund");});
test("ramgunge -> ramgung", function() {deepEqual( Stem("ramgunge"), "ramgung");});
test("ramifications -> ramif", function() {deepEqual( Stem("ramifications"), "ramif");});
test("ramm -> ramm", function() {deepEqual( Stem("ramm"), "ramm");});
test("rampallian -> rampallian", function() {deepEqual( Stem("rampallian"), "rampallian");});
test("rampant -> rampant", function() {deepEqual( Stem("rampant"), "rampant");});
test("ramparts -> rampart", function() {deepEqual( Stem("ramparts"), "rampart");});
test("ramping -> ramp", function() {deepEqual( Stem("ramping"), "ramp");});
test("rampir -> rampir", function() {deepEqual( Stem("rampir"), "rampir");});
test("ramps -> ramp", function() {deepEqual( Stem("ramps"), "ramp");});
test("rams -> ram", function() {deepEqual( Stem("rams"), "ram");});
test("ramsey -> ramsei", function() {deepEqual( Stem("ramsey"), "ramsei");});
test("ramsgate -> ramsgat", function() {deepEqual( Stem("ramsgate"), "ramsgat");});
test("ramshorn -> ramshorn", function() {deepEqual( Stem("ramshorn"), "ramshorn");});
test("ramston -> ramston", function() {deepEqual( Stem("ramston"), "ramston");});
test("ran -> ran", function() {deepEqual( Stem("ran"), "ran");});
test("rance -> ranc", function() {deepEqual( Stem("rance"), "ranc");});
test("rancorous -> rancor", function() {deepEqual( Stem("rancorous"), "rancor");});
test("rancors -> rancor", function() {deepEqual( Stem("rancors"), "rancor");});
test("rancour -> rancour", function() {deepEqual( Stem("rancour"), "rancour");});
test("random -> random", function() {deepEqual( Stem("random"), "random");});
test("rang -> rang", function() {deepEqual( Stem("rang"), "rang");});
test("range -> rang", function() {deepEqual( Stem("range"), "rang");});
test("ranged -> rang", function() {deepEqual( Stem("ranged"), "rang");});
test("rangers -> ranger", function() {deepEqual( Stem("rangers"), "ranger");});
test("ranges -> rang", function() {deepEqual( Stem("ranges"), "rang");});
test("ranging -> rang", function() {deepEqual( Stem("ranging"), "rang");});
test("rank -> rank", function() {deepEqual( Stem("rank"), "rank");});
test("ranker -> ranker", function() {deepEqual( Stem("ranker"), "ranker");});
test("rankest -> rankest", function() {deepEqual( Stem("rankest"), "rankest");});
test("ranking -> rank", function() {deepEqual( Stem("ranking"), "rank");});
test("rankle -> rankl", function() {deepEqual( Stem("rankle"), "rankl");});
test("rankled -> rankl", function() {deepEqual( Stem("rankled"), "rankl");});
test("rankles -> rankl", function() {deepEqual( Stem("rankles"), "rankl");});
test("rankling -> rankl", function() {deepEqual( Stem("rankling"), "rankl");});
test("rankly -> rankli", function() {deepEqual( Stem("rankly"), "rankli");});
test("rankness -> rank", function() {deepEqual( Stem("rankness"), "rank");});
test("ranks -> rank", function() {deepEqual( Stem("ranks"), "rank");});
test("ransack -> ransack", function() {deepEqual( Stem("ransack"), "ransack");});
test("ransacked -> ransack", function() {deepEqual( Stem("ransacked"), "ransack");});
test("ransacking -> ransack", function() {deepEqual( Stem("ransacking"), "ransack");});
test("ransom -> ransom", function() {deepEqual( Stem("ransom"), "ransom");});
test("ransomed -> ransom", function() {deepEqual( Stem("ransomed"), "ransom");});
test("ransoming -> ransom", function() {deepEqual( Stem("ransoming"), "ransom");});
test("ransomless -> ransomless", function() {deepEqual( Stem("ransomless"), "ransomless");});
test("ransoms -> ransom", function() {deepEqual( Stem("ransoms"), "ransom");});
test("rant -> rant", function() {deepEqual( Stem("rant"), "rant");});
test("ranting -> rant", function() {deepEqual( Stem("ranting"), "rant");});
test("rap -> rap", function() {deepEqual( Stem("rap"), "rap");});
test("rapacity -> rapac", function() {deepEqual( Stem("rapacity"), "rapac");});
test("rape -> rape", function() {deepEqual( Stem("rape"), "rape");});
test("rapes -> rape", function() {deepEqual( Stem("rapes"), "rape");});
test("rapid -> rapid", function() {deepEqual( Stem("rapid"), "rapid");});
test("rapidity -> rapid", function() {deepEqual( Stem("rapidity"), "rapid");});
test("rapidly -> rapidli", function() {deepEqual( Stem("rapidly"), "rapidli");});
test("rapier -> rapier", function() {deepEqual( Stem("rapier"), "rapier");});
test("rapiers -> rapier", function() {deepEqual( Stem("rapiers"), "rapier");});
test("rapine -> rapin", function() {deepEqual( Stem("rapine"), "rapin");});
test("raps -> rap", function() {deepEqual( Stem("raps"), "rap");});
test("rapt -> rapt", function() {deepEqual( Stem("rapt"), "rapt");});
test("rapture -> raptur", function() {deepEqual( Stem("rapture"), "raptur");});
test("raptures -> raptur", function() {deepEqual( Stem("raptures"), "raptur");});
test("rar -> rar", function() {deepEqual( Stem("rar"), "rar");});
test("rare -> rare", function() {deepEqual( Stem("rare"), "rare");});
test("rarely -> rare", function() {deepEqual( Stem("rarely"), "rare");});
test("rareness -> rare", function() {deepEqual( Stem("rareness"), "rare");});
test("rarer -> rarer", function() {deepEqual( Stem("rarer"), "rarer");});
test("rarest -> rarest", function() {deepEqual( Stem("rarest"), "rarest");});
test("rarities -> rariti", function() {deepEqual( Stem("rarities"), "rariti");});
test("rarity -> rariti", function() {deepEqual( Stem("rarity"), "rariti");});
test("rascal -> rascal", function() {deepEqual( Stem("rascal"), "rascal");});
test("rascalliest -> rascalliest", function() {deepEqual( Stem("rascalliest"), "rascalliest");});
test("rascally -> rascal", function() {deepEqual( Stem("rascally"), "rascal");});
test("rascals -> rascal", function() {deepEqual( Stem("rascals"), "rascal");});
test("rased -> rase", function() {deepEqual( Stem("rased"), "rase");});
test("rash -> rash", function() {deepEqual( Stem("rash"), "rash");});
test("rasher -> rasher", function() {deepEqual( Stem("rasher"), "rasher");});
test("rashly -> rashli", function() {deepEqual( Stem("rashly"), "rashli");});
test("rashness -> rash", function() {deepEqual( Stem("rashness"), "rash");});
test("raspberry -> raspberri", function() {deepEqual( Stem("raspberry"), "raspberri");});
test("rasy -> rasi", function() {deepEqual( Stem("rasy"), "rasi");});
test("rat -> rat", function() {deepEqual( Stem("rat"), "rat");});
test("ratcatcher -> ratcatch", function() {deepEqual( Stem("ratcatcher"), "ratcatch");});
test("ratcliff -> ratcliff", function() {deepEqual( Stem("ratcliff"), "ratcliff");});
test("rate -> rate", function() {deepEqual( Stem("rate"), "rate");});
test("rated -> rate", function() {deepEqual( Stem("rated"), "rate");});
test("rately -> rate", function() {deepEqual( Stem("rately"), "rate");});
test("rates -> rate", function() {deepEqual( Stem("rates"), "rate");});
test("rather -> rather", function() {deepEqual( Stem("rather"), "rather");});
test("ratherest -> ratherest", function() {deepEqual( Stem("ratherest"), "ratherest");});
test("ratified -> ratifi", function() {deepEqual( Stem("ratified"), "ratifi");});
test("ratifiers -> ratifi", function() {deepEqual( Stem("ratifiers"), "ratifi");});
test("ratify -> ratifi", function() {deepEqual( Stem("ratify"), "ratifi");});
test("rating -> rate", function() {deepEqual( Stem("rating"), "rate");});
test("ration -> ration", function() {deepEqual( Stem("ration"), "ration");});
test("rational -> ration", function() {deepEqual( Stem("rational"), "ration");});
test("rationally -> ration", function() {deepEqual( Stem("rationally"), "ration");});
test("rations -> ration", function() {deepEqual( Stem("rations"), "ration");});
test("ratolorum -> ratolorum", function() {deepEqual( Stem("ratolorum"), "ratolorum");});
test("rats -> rat", function() {deepEqual( Stem("rats"), "rat");});
test("ratsbane -> ratsban", function() {deepEqual( Stem("ratsbane"), "ratsban");});
test("ratted -> rat", function() {deepEqual( Stem("ratted"), "rat");});
test("rattle -> rattl", function() {deepEqual( Stem("rattle"), "rattl");});
test("rattled -> rattl", function() {deepEqual( Stem("rattled"), "rattl");});
test("rattles -> rattl", function() {deepEqual( Stem("rattles"), "rattl");});
test("rattling -> rattl", function() {deepEqual( Stem("rattling"), "rattl");});
test("rature -> ratur", function() {deepEqual( Stem("rature"), "ratur");});
test("raudon -> raudon", function() {deepEqual( Stem("raudon"), "raudon");});
test("raught -> raught", function() {deepEqual( Stem("raught"), "raught");});
test("rav -> rav", function() {deepEqual( Stem("rav"), "rav");});
test("ravaged -> ravag", function() {deepEqual( Stem("ravaged"), "ravag");});
test("ravdonn -> ravdonn", function() {deepEqual( Stem("ravdonn"), "ravdonn");});
test("rave -> rave", function() {deepEqual( Stem("rave"), "rave");});
test("raved -> rave", function() {deepEqual( Stem("raved"), "rave");});
test("ravel -> ravel", function() {deepEqual( Stem("ravel"), "ravel");});
test("raven -> raven", function() {deepEqual( Stem("raven"), "raven");});
test("ravening -> raven", function() {deepEqual( Stem("ravening"), "raven");});
test("ravenous -> raven", function() {deepEqual( Stem("ravenous"), "raven");});
test("ravens -> raven", function() {deepEqual( Stem("ravens"), "raven");});
test("ravenspurgh -> ravenspurgh", function() {deepEqual( Stem("ravenspurgh"), "ravenspurgh");});
test("raves -> rave", function() {deepEqual( Stem("raves"), "rave");});
test("ravin -> ravin", function() {deepEqual( Stem("ravin"), "ravin");});
test("raving -> rave", function() {deepEqual( Stem("raving"), "rave");});
test("ravish -> ravish", function() {deepEqual( Stem("ravish"), "ravish");});
test("ravished -> ravish", function() {deepEqual( Stem("ravished"), "ravish");});
test("ravisher -> ravish", function() {deepEqual( Stem("ravisher"), "ravish");});
test("ravishing -> ravish", function() {deepEqual( Stem("ravishing"), "ravish");});
test("ravishment -> ravish", function() {deepEqual( Stem("ravishment"), "ravish");});
test("ravishments -> ravish", function() {deepEqual( Stem("ravishments"), "ravish");});
test("ravissante -> ravissant", function() {deepEqual( Stem("ravissante"), "ravissant");});
test("ravoli -> ravoli", function() {deepEqual( Stem("ravoli"), "ravoli");});
test("raw -> raw", function() {deepEqual( Stem("raw"), "raw");});
test("rawding -> rawd", function() {deepEqual( Stem("rawding"), "rawd");});
test("rawdon -> rawdon", function() {deepEqual( Stem("rawdon"), "rawdon");});
test("rawdons -> rawdon", function() {deepEqual( Stem("rawdons"), "rawdon");});
test("rawdy -> rawdi", function() {deepEqual( Stem("rawdy"), "rawdi");});
test("rawer -> rawer", function() {deepEqual( Stem("rawer"), "rawer");});
test("rawly -> rawli", function() {deepEqual( Stem("rawly"), "rawli");});
test("rawness -> raw", function() {deepEqual( Stem("rawness"), "raw");});
test("ray -> rai", function() {deepEqual( Stem("ray"), "rai");});
test("rayed -> rai", function() {deepEqual( Stem("rayed"), "rai");});
test("raymond -> raymond", function() {deepEqual( Stem("raymond"), "raymond");});
test("rays -> rai", function() {deepEqual( Stem("rays"), "rai");});
test("raz -> raz", function() {deepEqual( Stem("raz"), "raz");});
test("raze -> raze", function() {deepEqual( Stem("raze"), "raze");});
test("razed -> raze", function() {deepEqual( Stem("razed"), "raze");});
test("razes -> raze", function() {deepEqual( Stem("razes"), "raze");});
test("razeth -> razeth", function() {deepEqual( Stem("razeth"), "razeth");});
test("razing -> raze", function() {deepEqual( Stem("razing"), "raze");});
test("razor -> razor", function() {deepEqual( Stem("razor"), "razor");});
test("razorable -> razor", function() {deepEqual( Stem("razorable"), "razor");});
test("razors -> razor", function() {deepEqual( Stem("razors"), "razor");});
test("razure -> razur", function() {deepEqual( Stem("razure"), "razur");});
test("rd -> rd", function() {deepEqual( Stem("rd"), "rd");});
test("re -> re", function() {deepEqual( Stem("re"), "re");});
test("reach -> reach", function() {deepEqual( Stem("reach"), "reach");});
test("reached -> reach", function() {deepEqual( Stem("reached"), "reach");});
test("reaches -> reach", function() {deepEqual( Stem("reaches"), "reach");});
test("reacheth -> reacheth", function() {deepEqual( Stem("reacheth"), "reacheth");});
test("reaching -> reach", function() {deepEqual( Stem("reaching"), "reach");});
test("read -> read", function() {deepEqual( Stem("read"), "read");});
test("reader -> reader", function() {deepEqual( Stem("reader"), "reader");});
test("readers -> reader", function() {deepEqual( Stem("readers"), "reader");});
test("readiest -> readiest", function() {deepEqual( Stem("readiest"), "readiest");});
test("readily -> readili", function() {deepEqual( Stem("readily"), "readili");});
test("readiness -> readi", function() {deepEqual( Stem("readiness"), "readi");});
test("reading -> read", function() {deepEqual( Stem("reading"), "read");});
test("readins -> readin", function() {deepEqual( Stem("readins"), "readin");});
test("reads -> read", function() {deepEqual( Stem("reads"), "read");});
test("readth -> readth", function() {deepEqual( Stem("readth"), "readth");});
test("ready -> readi", function() {deepEqual( Stem("ready"), "readi");});
test("real -> real", function() {deepEqual( Stem("real"), "real");});
test("reality -> realiti", function() {deepEqual( Stem("reality"), "realiti");});
test("realize -> realiz", function() {deepEqual( Stem("realize"), "realiz");});
test("realized -> realiz", function() {deepEqual( Stem("realized"), "realiz");});
test("really -> realli", function() {deepEqual( Stem("really"), "realli");});
test("realm -> realm", function() {deepEqual( Stem("realm"), "realm");});
test("realms -> realm", function() {deepEqual( Stem("realms"), "realm");});
test("reap -> reap", function() {deepEqual( Stem("reap"), "reap");});
test("reapers -> reaper", function() {deepEqual( Stem("reapers"), "reaper");});
test("reaping -> reap", function() {deepEqual( Stem("reaping"), "reap");});
test("reappearance -> reappear", function() {deepEqual( Stem("reappearance"), "reappear");});
test("reappeared -> reappear", function() {deepEqual( Stem("reappeared"), "reappear");});
test("reaps -> reap", function() {deepEqual( Stem("reaps"), "reap");});
test("rear -> rear", function() {deepEqual( Stem("rear"), "rear");});
test("reared -> rear", function() {deepEqual( Stem("reared"), "rear");});
test("rears -> rear", function() {deepEqual( Stem("rears"), "rear");});
test("rearward -> rearward", function() {deepEqual( Stem("rearward"), "rearward");});
test("reascended -> reascend", function() {deepEqual( Stem("reascended"), "reascend");});
test("reason -> reason", function() {deepEqual( Stem("reason"), "reason");});
test("reasonable -> reason", function() {deepEqual( Stem("reasonable"), "reason");});
test("reasonably -> reason", function() {deepEqual( Stem("reasonably"), "reason");});
test("reasoned -> reason", function() {deepEqual( Stem("reasoned"), "reason");});
test("reasoning -> reason", function() {deepEqual( Stem("reasoning"), "reason");});
test("reasonless -> reasonless", function() {deepEqual( Stem("reasonless"), "reasonless");});
test("reasons -> reason", function() {deepEqual( Stem("reasons"), "reason");});
test("reassumed -> reassum", function() {deepEqual( Stem("reassumed"), "reassum");});
test("reave -> reav", function() {deepEqual( Stem("reave"), "reav");});
test("rebate -> rebat", function() {deepEqual( Stem("rebate"), "rebat");});
test("rebato -> rebato", function() {deepEqual( Stem("rebato"), "rebato");});
test("rebecca -> rebecca", function() {deepEqual( Stem("rebecca"), "rebecca");});
test("rebeck -> rebeck", function() {deepEqual( Stem("rebeck"), "rebeck");});
test("rebecque -> rebecqu", function() {deepEqual( Stem("rebecque"), "rebecqu");});
test("rebel -> rebel", function() {deepEqual( Stem("rebel"), "rebel");});
test("rebell -> rebel", function() {deepEqual( Stem("rebell"), "rebel");});
test("rebelled -> rebel", function() {deepEqual( Stem("rebelled"), "rebel");});
test("rebelling -> rebel", function() {deepEqual( Stem("rebelling"), "rebel");});
test("rebellion -> rebellion", function() {deepEqual( Stem("rebellion"), "rebellion");});
test("rebellious -> rebelli", function() {deepEqual( Stem("rebellious"), "rebelli");});
test("rebels -> rebel", function() {deepEqual( Stem("rebels"), "rebel");});
test("rebound -> rebound", function() {deepEqual( Stem("rebound"), "rebound");});
test("rebuff -> rebuff", function() {deepEqual( Stem("rebuff"), "rebuff");});
test("rebuffed -> rebuf", function() {deepEqual( Stem("rebuffed"), "rebuf");});
test("rebuffing -> rebuf", function() {deepEqual( Stem("rebuffing"), "rebuf");});
test("rebuffs -> rebuff", function() {deepEqual( Stem("rebuffs"), "rebuff");});
test("rebuild -> rebuild", function() {deepEqual( Stem("rebuild"), "rebuild");});
test("rebuk -> rebuk", function() {deepEqual( Stem("rebuk"), "rebuk");});
test("rebuke -> rebuk", function() {deepEqual( Stem("rebuke"), "rebuk");});
test("rebukeable -> rebuk", function() {deepEqual( Stem("rebukeable"), "rebuk");});
test("rebuked -> rebuk", function() {deepEqual( Stem("rebuked"), "rebuk");});
test("rebukes -> rebuk", function() {deepEqual( Stem("rebukes"), "rebuk");});
test("rebuking -> rebuk", function() {deepEqual( Stem("rebuking"), "rebuk");});
test("rebus -> rebu", function() {deepEqual( Stem("rebus"), "rebu");});
test("recall -> recal", function() {deepEqual( Stem("recall"), "recal");});
test("recalled -> recal", function() {deepEqual( Stem("recalled"), "recal");});
test("recant -> recant", function() {deepEqual( Stem("recant"), "recant");});
test("recantation -> recant", function() {deepEqual( Stem("recantation"), "recant");});
test("recanter -> recant", function() {deepEqual( Stem("recanter"), "recant");});
test("recanting -> recant", function() {deepEqual( Stem("recanting"), "recant");});
test("recapitulated -> recapitul", function() {deepEqual( Stem("recapitulated"), "recapitul");});
test("receipt -> receipt", function() {deepEqual( Stem("receipt"), "receipt");});
test("receipted -> receipt", function() {deepEqual( Stem("receipted"), "receipt");});
test("receipts -> receipt", function() {deepEqual( Stem("receipts"), "receipt");});
test("receiv -> receiv", function() {deepEqual( Stem("receiv"), "receiv");});
test("receive -> receiv", function() {deepEqual( Stem("receive"), "receiv");});
test("received -> receiv", function() {deepEqual( Stem("received"), "receiv");});
test("receiver -> receiv", function() {deepEqual( Stem("receiver"), "receiv");});
test("receives -> receiv", function() {deepEqual( Stem("receives"), "receiv");});
test("receivest -> receivest", function() {deepEqual( Stem("receivest"), "receivest");});
test("receiveth -> receiveth", function() {deepEqual( Stem("receiveth"), "receiveth");});
test("receiving -> receiv", function() {deepEqual( Stem("receiving"), "receiv");});
test("receptacle -> receptacl", function() {deepEqual( Stem("receptacle"), "receptacl");});
test("reception -> recept", function() {deepEqual( Stem("reception"), "recept");});
test("recesses -> recess", function() {deepEqual( Stem("recesses"), "recess");});
test("recessit -> recessit", function() {deepEqual( Stem("recessit"), "recessit");});
test("rechate -> rechat", function() {deepEqual( Stem("rechate"), "rechat");});
test("recipient -> recipi", function() {deepEqual( Stem("recipient"), "recipi");});
test("reciprocal -> reciproc", function() {deepEqual( Stem("reciprocal"), "reciproc");});
test("reciprocally -> reciproc", function() {deepEqual( Stem("reciprocally"), "reciproc");});
test("recite -> recit", function() {deepEqual( Stem("recite"), "recit");});
test("recited -> recit", function() {deepEqual( Stem("recited"), "recit");});
test("reciterai -> reciterai", function() {deepEqual( Stem("reciterai"), "reciterai");});
test("reciting -> recit", function() {deepEqual( Stem("reciting"), "recit");});
test("reck -> reck", function() {deepEqual( Stem("reck"), "reck");});
test("recking -> reck", function() {deepEqual( Stem("recking"), "reck");});
test("reckless -> reckless", function() {deepEqual( Stem("reckless"), "reckless");});
test("reckon -> reckon", function() {deepEqual( Stem("reckon"), "reckon");});
test("reckoned -> reckon", function() {deepEqual( Stem("reckoned"), "reckon");});
test("reckoning -> reckon", function() {deepEqual( Stem("reckoning"), "reckon");});
test("reckonings -> reckon", function() {deepEqual( Stem("reckonings"), "reckon");});
test("recks -> reck", function() {deepEqual( Stem("recks"), "reck");});
test("reclaim -> reclaim", function() {deepEqual( Stem("reclaim"), "reclaim");});
test("reclaims -> reclaim", function() {deepEqual( Stem("reclaims"), "reclaim");});
test("reclusive -> reclus", function() {deepEqual( Stem("reclusive"), "reclus");});
test("recognise -> recognis", function() {deepEqual( Stem("recognise"), "recognis");});
test("recognised -> recognis", function() {deepEqual( Stem("recognised"), "recognis");});
test("recognition -> recognit", function() {deepEqual( Stem("recognition"), "recognit");});
test("recognitions -> recognit", function() {deepEqual( Stem("recognitions"), "recognit");});
test("recognizance -> recogniz", function() {deepEqual( Stem("recognizance"), "recogniz");});
test("recognizances -> recogniz", function() {deepEqual( Stem("recognizances"), "recogniz");});
test("recognize -> recogn", function() {deepEqual( Stem("recognize"), "recogn");});
test("recognized -> recogn", function() {deepEqual( Stem("recognized"), "recogn");});
test("recoil -> recoil", function() {deepEqual( Stem("recoil"), "recoil");});
test("recoiling -> recoil", function() {deepEqual( Stem("recoiling"), "recoil");});
test("recollect -> recollect", function() {deepEqual( Stem("recollect"), "recollect");});
test("recollected -> recollect", function() {deepEqual( Stem("recollected"), "recollect");});
test("recollecting -> recollect", function() {deepEqual( Stem("recollecting"), "recollect");});
test("recollection -> recollect", function() {deepEqual( Stem("recollection"), "recollect");});
test("recollections -> recollect", function() {deepEqual( Stem("recollections"), "recollect");});
test("recomforted -> recomfort", function() {deepEqual( Stem("recomforted"), "recomfort");});
test("recomforture -> recomfortur", function() {deepEqual( Stem("recomforture"), "recomfortur");});
test("recommend -> recommend", function() {deepEqual( Stem("recommend"), "recommend");});
test("recommendation -> recommend", function() {deepEqual( Stem("recommendation"), "recommend");});
test("recommended -> recommend", function() {deepEqual( Stem("recommended"), "recommend");});
test("recommending -> recommend", function() {deepEqual( Stem("recommending"), "recommend");});
test("recommends -> recommend", function() {deepEqual( Stem("recommends"), "recommend");});
test("recompens -> recompen", function() {deepEqual( Stem("recompens"), "recompen");});
test("recompense -> recompens", function() {deepEqual( Stem("recompense"), "recompens");});
test("reconcil -> reconcil", function() {deepEqual( Stem("reconcil"), "reconcil");});
test("reconcile -> reconcil", function() {deepEqual( Stem("reconcile"), "reconcil");});
test("reconciled -> reconcil", function() {deepEqual( Stem("reconciled"), "reconcil");});
test("reconcilement -> reconcil", function() {deepEqual( Stem("reconcilement"), "reconcil");});
test("reconciler -> reconcil", function() {deepEqual( Stem("reconciler"), "reconcil");});
test("reconciles -> reconcil", function() {deepEqual( Stem("reconciles"), "reconcil");});
test("reconciliation -> reconcili", function() {deepEqual( Stem("reconciliation"), "reconcili");});
test("reconciling -> reconcil", function() {deepEqual( Stem("reconciling"), "reconcil");});
test("record -> record", function() {deepEqual( Stem("record"), "record");});
test("recordation -> record", function() {deepEqual( Stem("recordation"), "record");});
test("recorded -> record", function() {deepEqual( Stem("recorded"), "record");});
test("recorder -> record", function() {deepEqual( Stem("recorder"), "record");});
test("recorders -> record", function() {deepEqual( Stem("recorders"), "record");});
test("records -> record", function() {deepEqual( Stem("records"), "record");});
test("recount -> recount", function() {deepEqual( Stem("recount"), "recount");});
test("recounted -> recount", function() {deepEqual( Stem("recounted"), "recount");});
test("recounting -> recount", function() {deepEqual( Stem("recounting"), "recount");});
test("recountments -> recount", function() {deepEqual( Stem("recountments"), "recount");});
test("recounts -> recount", function() {deepEqual( Stem("recounts"), "recount");});
test("recourse -> recours", function() {deepEqual( Stem("recourse"), "recours");});
test("recov -> recov", function() {deepEqual( Stem("recov"), "recov");});
test("recover -> recov", function() {deepEqual( Stem("recover"), "recov");});
test("recoverable -> recover", function() {deepEqual( Stem("recoverable"), "recover");});
test("recovered -> recov", function() {deepEqual( Stem("recovered"), "recov");});
test("recoveries -> recoveri", function() {deepEqual( Stem("recoveries"), "recoveri");});
test("recovering -> recov", function() {deepEqual( Stem("recovering"), "recov");});
test("recovers -> recov", function() {deepEqual( Stem("recovers"), "recov");});
test("recovery -> recoveri", function() {deepEqual( Stem("recovery"), "recoveri");});
test("recreant -> recreant", function() {deepEqual( Stem("recreant"), "recreant");});
test("recreants -> recreant", function() {deepEqual( Stem("recreants"), "recreant");});
test("recreate -> recreat", function() {deepEqual( Stem("recreate"), "recreat");});
test("recreation -> recreat", function() {deepEqual( Stem("recreation"), "recreat");});
test("recrossed -> recross", function() {deepEqual( Stem("recrossed"), "recross");});
test("recruit -> recruit", function() {deepEqual( Stem("recruit"), "recruit");});
test("recruiting -> recruit", function() {deepEqual( Stem("recruiting"), "recruit");});
test("recruits -> recruit", function() {deepEqual( Stem("recruits"), "recruit");});
test("rectify -> rectifi", function() {deepEqual( Stem("rectify"), "rectifi");});
test("rector -> rector", function() {deepEqual( Stem("rector"), "rector");});
test("rectoress -> rectoress", function() {deepEqual( Stem("rectoress"), "rectoress");});
test("rectors -> rector", function() {deepEqual( Stem("rectors"), "rector");});
test("rectorship -> rectorship", function() {deepEqual( Stem("rectorship"), "rectorship");});
test("rectory -> rectori", function() {deepEqual( Stem("rectory"), "rectori");});
test("recure -> recur", function() {deepEqual( Stem("recure"), "recur");});
test("recured -> recur", function() {deepEqual( Stem("recured"), "recur");});
test("recurrence -> recurr", function() {deepEqual( Stem("recurrence"), "recurr");});
test("recusancy -> recus", function() {deepEqual( Stem("recusancy"), "recus");});
test("red -> red", function() {deepEqual( Stem("red"), "red");});
test("redbreast -> redbreast", function() {deepEqual( Stem("redbreast"), "redbreast");});
test("redcoats -> redcoat", function() {deepEqual( Stem("redcoats"), "redcoat");});
test("redder -> redder", function() {deepEqual( Stem("redder"), "redder");});
test("reddest -> reddest", function() {deepEqual( Stem("reddest"), "reddest");});
test("rede -> rede", function() {deepEqual( Stem("rede"), "rede");});
test("redecorated -> redecor", function() {deepEqual( Stem("redecorated"), "redecor");});
test("redeem -> redeem", function() {deepEqual( Stem("redeem"), "redeem");});
test("redeemed -> redeem", function() {deepEqual( Stem("redeemed"), "redeem");});
test("redeemer -> redeem", function() {deepEqual( Stem("redeemer"), "redeem");});
test("redeeming -> redeem", function() {deepEqual( Stem("redeeming"), "redeem");});
test("redeems -> redeem", function() {deepEqual( Stem("redeems"), "redeem");});
test("redeliver -> redeliv", function() {deepEqual( Stem("redeliver"), "redeliv");});
test("redemption -> redempt", function() {deepEqual( Stem("redemption"), "redempt");});
test("redhand -> redhand", function() {deepEqual( Stem("redhand"), "redhand");});
test("redime -> redim", function() {deepEqual( Stem("redime"), "redim");});
test("redness -> red", function() {deepEqual( Stem("redness"), "red");});
test("redoubled -> redoubl", function() {deepEqual( Stem("redoubled"), "redoubl");});
test("redoubted -> redoubt", function() {deepEqual( Stem("redoubted"), "redoubt");});
test("redound -> redound", function() {deepEqual( Stem("redound"), "redound");});
test("redoute -> redout", function() {deepEqual( Stem("redoute"), "redout");});
test("redoutes -> redout", function() {deepEqual( Stem("redoutes"), "redout");});
test("redress -> redress", function() {deepEqual( Stem("redress"), "redress");});
test("redressed -> redress", function() {deepEqual( Stem("redressed"), "redress");});
test("redresses -> redress", function() {deepEqual( Stem("redresses"), "redress");});
test("reduce -> reduc", function() {deepEqual( Stem("reduce"), "reduc");});
test("reduced -> reduc", function() {deepEqual( Stem("reduced"), "reduc");});
test("reechy -> reechi", function() {deepEqual( Stem("reechy"), "reechi");});
test("reed -> reed", function() {deepEqual( Stem("reed"), "reed");});
test("reeds -> reed", function() {deepEqual( Stem("reeds"), "reed");});
test("reek -> reek", function() {deepEqual( Stem("reek"), "reek");});
test("reeking -> reek", function() {deepEqual( Stem("reeking"), "reek");});
test("reeks -> reek", function() {deepEqual( Stem("reeks"), "reek");});
test("reeky -> reeki", function() {deepEqual( Stem("reeky"), "reeki");});
test("reel -> reel", function() {deepEqual( Stem("reel"), "reel");});
test("reeled -> reel", function() {deepEqual( Stem("reeled"), "reel");});
test("reeleth -> reeleth", function() {deepEqual( Stem("reeleth"), "reeleth");});
test("reeling -> reel", function() {deepEqual( Stem("reeling"), "reel");});
test("reels -> reel", function() {deepEqual( Stem("reels"), "reel");});
test("refell -> refel", function() {deepEqual( Stem("refell"), "refel");});
test("refer -> refer", function() {deepEqual( Stem("refer"), "refer");});
test("reference -> refer", function() {deepEqual( Stem("reference"), "refer");});
test("referr -> referr", function() {deepEqual( Stem("referr"), "referr");});
test("referred -> refer", function() {deepEqual( Stem("referred"), "refer");});
test("refigured -> refigur", function() {deepEqual( Stem("refigured"), "refigur");});
test("refin -> refin", function() {deepEqual( Stem("refin"), "refin");});
test("refined -> refin", function() {deepEqual( Stem("refined"), "refin");});
test("refinement -> refin", function() {deepEqual( Stem("refinement"), "refin");});
test("reflect -> reflect", function() {deepEqual( Stem("reflect"), "reflect");});
test("reflected -> reflect", function() {deepEqual( Stem("reflected"), "reflect");});
test("reflecting -> reflect", function() {deepEqual( Stem("reflecting"), "reflect");});
test("reflection -> reflect", function() {deepEqual( Stem("reflection"), "reflect");});
test("reflections -> reflect", function() {deepEqual( Stem("reflections"), "reflect");});
test("reflective -> reflect", function() {deepEqual( Stem("reflective"), "reflect");});
test("reflex -> reflex", function() {deepEqual( Stem("reflex"), "reflex");});
test("reform -> reform", function() {deepEqual( Stem("reform"), "reform");});
test("reformation -> reform", function() {deepEqual( Stem("reformation"), "reform");});
test("reformed -> reform", function() {deepEqual( Stem("reformed"), "reform");});
test("refractory -> refractori", function() {deepEqual( Stem("refractory"), "refractori");});
test("refrain -> refrain", function() {deepEqual( Stem("refrain"), "refrain");});
test("refrained -> refrain", function() {deepEqual( Stem("refrained"), "refrain");});
test("refresh -> refresh", function() {deepEqual( Stem("refresh"), "refresh");});
test("refreshed -> refresh", function() {deepEqual( Stem("refreshed"), "refresh");});
test("refreshing -> refresh", function() {deepEqual( Stem("refreshing"), "refresh");});
test("refreshment -> refresh", function() {deepEqual( Stem("refreshment"), "refresh");});
test("refreshments -> refresh", function() {deepEqual( Stem("refreshments"), "refresh");});
test("reft -> reft", function() {deepEqual( Stem("reft"), "reft");});
test("refts -> reft", function() {deepEqual( Stem("refts"), "reft");});
test("refuge -> refug", function() {deepEqual( Stem("refuge"), "refug");});
test("refugee -> refuge", function() {deepEqual( Stem("refugee"), "refuge");});
test("refus -> refu", function() {deepEqual( Stem("refus"), "refu");});
test("refusal -> refus", function() {deepEqual( Stem("refusal"), "refus");});
test("refusant -> refus", function() {deepEqual( Stem("refusant"), "refus");});
test("refuse -> refus", function() {deepEqual( Stem("refuse"), "refus");});
test("refused -> refus", function() {deepEqual( Stem("refused"), "refus");});
test("refuses -> refus", function() {deepEqual( Stem("refuses"), "refus");});
test("refusest -> refusest", function() {deepEqual( Stem("refusest"), "refusest");});
test("refusing -> refus", function() {deepEqual( Stem("refusing"), "refus");});
test("reg -> reg", function() {deepEqual( Stem("reg"), "reg");});
test("regain -> regain", function() {deepEqual( Stem("regain"), "regain");});
test("regained -> regain", function() {deepEqual( Stem("regained"), "regain");});
test("regal -> regal", function() {deepEqual( Stem("regal"), "regal");});
test("regalia -> regalia", function() {deepEqual( Stem("regalia"), "regalia");});
test("regan -> regan", function() {deepEqual( Stem("regan"), "regan");});
test("regard -> regard", function() {deepEqual( Stem("regard"), "regard");});
test("regardance -> regard", function() {deepEqual( Stem("regardance"), "regard");});
test("regarded -> regard", function() {deepEqual( Stem("regarded"), "regard");});
test("regardfully -> regardfulli", function() {deepEqual( Stem("regardfully"), "regardfulli");});
test("regarding -> regard", function() {deepEqual( Stem("regarding"), "regard");});
test("regardless -> regardless", function() {deepEqual( Stem("regardless"), "regardless");});
test("regardons -> regardon", function() {deepEqual( Stem("regardons"), "regardon");});
test("regards -> regard", function() {deepEqual( Stem("regards"), "regard");});
test("regatta -> regatta", function() {deepEqual( Stem("regatta"), "regatta");});
test("regency -> regenc", function() {deepEqual( Stem("regency"), "regenc");});
test("regenerate -> regener", function() {deepEqual( Stem("regenerate"), "regener");});
test("regent -> regent", function() {deepEqual( Stem("regent"), "regent");});
test("regentship -> regentship", function() {deepEqual( Stem("regentship"), "regentship");});
test("regia -> regia", function() {deepEqual( Stem("regia"), "regia");});
test("regimen -> regimen", function() {deepEqual( Stem("regimen"), "regimen");});
test("regiment -> regiment", function() {deepEqual( Stem("regiment"), "regiment");});
test("regimental -> regiment", function() {deepEqual( Stem("regimental"), "regiment");});
test("regiments -> regiment", function() {deepEqual( Stem("regiments"), "regiment");});
test("regina -> regina", function() {deepEqual( Stem("regina"), "regina");});
test("reginald -> reginald", function() {deepEqual( Stem("reginald"), "reginald");});
test("region -> region", function() {deepEqual( Stem("region"), "region");});
test("regions -> region", function() {deepEqual( Stem("regions"), "region");});
test("regist -> regist", function() {deepEqual( Stem("regist"), "regist");});
test("register -> regist", function() {deepEqual( Stem("register"), "regist");});
test("registers -> regist", function() {deepEqual( Stem("registers"), "regist");});
test("reglar -> reglar", function() {deepEqual( Stem("reglar"), "reglar");});
test("reglarly -> reglarli", function() {deepEqual( Stem("reglarly"), "reglarli");});
test("regreet -> regreet", function() {deepEqual( Stem("regreet"), "regreet");});
test("regreets -> regreet", function() {deepEqual( Stem("regreets"), "regreet");});
test("regress -> regress", function() {deepEqual( Stem("regress"), "regress");});
test("regret -> regret", function() {deepEqual( Stem("regret"), "regret");});
test("regrets -> regret", function() {deepEqual( Stem("regrets"), "regret");});
test("regretted -> regret", function() {deepEqual( Stem("regretted"), "regret");});
test("regretting -> regret", function() {deepEqual( Stem("regretting"), "regret");});
test("regt -> regt", function() {deepEqual( Stem("regt"), "regt");});
test("reguerdon -> reguerdon", function() {deepEqual( Stem("reguerdon"), "reguerdon");});
test("regular -> regular", function() {deepEqual( Stem("regular"), "regular");});
test("regularity -> regular", function() {deepEqual( Stem("regularity"), "regular");});
test("regularly -> regularli", function() {deepEqual( Stem("regularly"), "regularli");});
test("regulate -> regul", function() {deepEqual( Stem("regulate"), "regul");});
test("regulated -> regul", function() {deepEqual( Stem("regulated"), "regul");});
test("regulation -> regul", function() {deepEqual( Stem("regulation"), "regul");});
test("regulus -> regulu", function() {deepEqual( Stem("regulus"), "regulu");});
test("rehears -> rehear", function() {deepEqual( Stem("rehears"), "rehear");});
test("rehearsal -> rehears", function() {deepEqual( Stem("rehearsal"), "rehears");});
test("rehearse -> rehears", function() {deepEqual( Stem("rehearse"), "rehears");});
test("rehearsed -> rehears", function() {deepEqual( Stem("rehearsed"), "rehears");});
test("reign -> reign", function() {deepEqual( Stem("reign"), "reign");});
test("reigned -> reign", function() {deepEqual( Stem("reigned"), "reign");});
test("reignier -> reignier", function() {deepEqual( Stem("reignier"), "reignier");});
test("reigning -> reign", function() {deepEqual( Stem("reigning"), "reign");});
test("reigns -> reign", function() {deepEqual( Stem("reigns"), "reign");});
test("rein -> rein", function() {deepEqual( Stem("rein"), "rein");});
test("reine -> rein", function() {deepEqual( Stem("reine"), "rein");});
test("reinforc -> reinforc", function() {deepEqual( Stem("reinforc"), "reinforc");});
test("reinforce -> reinforc", function() {deepEqual( Stem("reinforce"), "reinforc");});
test("reinforcement -> reinforc", function() {deepEqual( Stem("reinforcement"), "reinforc");});
test("reins -> rein", function() {deepEqual( Stem("reins"), "rein");});
test("reinstated -> reinstat", function() {deepEqual( Stem("reinstated"), "reinstat");});
test("reiterate -> reiter", function() {deepEqual( Stem("reiterate"), "reiter");});
test("reject -> reject", function() {deepEqual( Stem("reject"), "reject");});
test("rejected -> reject", function() {deepEqual( Stem("rejected"), "reject");});
test("rejoic -> rejoic", function() {deepEqual( Stem("rejoic"), "rejoic");});
test("rejoice -> rejoic", function() {deepEqual( Stem("rejoice"), "rejoic");});
test("rejoiced -> rejoic", function() {deepEqual( Stem("rejoiced"), "rejoic");});
test("rejoices -> rejoic", function() {deepEqual( Stem("rejoices"), "rejoic");});
test("rejoiceth -> rejoiceth", function() {deepEqual( Stem("rejoiceth"), "rejoiceth");});
test("rejoicing -> rejoic", function() {deepEqual( Stem("rejoicing"), "rejoic");});
test("rejoicingly -> rejoicingli", function() {deepEqual( Stem("rejoicingly"), "rejoicingli");});
test("rejoin -> rejoin", function() {deepEqual( Stem("rejoin"), "rejoin");});
test("rejoindure -> rejoindur", function() {deepEqual( Stem("rejoindure"), "rejoindur");});
test("rejoined -> rejoin", function() {deepEqual( Stem("rejoined"), "rejoin");});
test("rejourn -> rejourn", function() {deepEqual( Stem("rejourn"), "rejourn");});
test("rejuvenescent -> rejuvenesc", function() {deepEqual( Stem("rejuvenescent"), "rejuvenesc");});
test("reklect -> reklect", function() {deepEqual( Stem("reklect"), "reklect");});
test("rel -> rel", function() {deepEqual( Stem("rel"), "rel");});
test("relapse -> relaps", function() {deepEqual( Stem("relapse"), "relaps");});
test("relapsed -> relaps", function() {deepEqual( Stem("relapsed"), "relaps");});
test("relapsing -> relaps", function() {deepEqual( Stem("relapsing"), "relaps");});
test("relate -> relat", function() {deepEqual( Stem("relate"), "relat");});
test("related -> relat", function() {deepEqual( Stem("related"), "relat");});
test("relates -> relat", function() {deepEqual( Stem("relates"), "relat");});
test("relating -> relat", function() {deepEqual( Stem("relating"), "relat");});
test("relation -> relat", function() {deepEqual( Stem("relation"), "relat");});
test("relations -> relat", function() {deepEqual( Stem("relations"), "relat");});
test("relationship -> relationship", function() {deepEqual( Stem("relationship"), "relationship");});
test("relative -> rel", function() {deepEqual( Stem("relative"), "rel");});
test("relatives -> rel", function() {deepEqual( Stem("relatives"), "rel");});
test("releas -> relea", function() {deepEqual( Stem("releas"), "relea");});
test("release -> releas", function() {deepEqual( Stem("release"), "releas");});
test("released -> releas", function() {deepEqual( Stem("released"), "releas");});
test("releasing -> releas", function() {deepEqual( Stem("releasing"), "releas");});
test("relent -> relent", function() {deepEqual( Stem("relent"), "relent");});
test("relented -> relent", function() {deepEqual( Stem("relented"), "relent");});
test("relenting -> relent", function() {deepEqual( Stem("relenting"), "relent");});
test("relentless -> relentless", function() {deepEqual( Stem("relentless"), "relentless");});
test("relents -> relent", function() {deepEqual( Stem("relents"), "relent");});
test("reliances -> relianc", function() {deepEqual( Stem("reliances"), "relianc");});
test("relic -> relic", function() {deepEqual( Stem("relic"), "relic");});
test("relics -> relic", function() {deepEqual( Stem("relics"), "relic");});
test("relief -> relief", function() {deepEqual( Stem("relief"), "relief");});
test("reliev -> reliev", function() {deepEqual( Stem("reliev"), "reliev");});
test("relieve -> reliev", function() {deepEqual( Stem("relieve"), "reliev");});
test("relieved -> reliev", function() {deepEqual( Stem("relieved"), "reliev");});
test("relieves -> reliev", function() {deepEqual( Stem("relieves"), "reliev");});
test("relieving -> reliev", function() {deepEqual( Stem("relieving"), "reliev");});
test("religion -> religion", function() {deepEqual( Stem("religion"), "religion");});
test("religionist -> religionist", function() {deepEqual( Stem("religionist"), "religionist");});
test("religionless -> religionless", function() {deepEqual( Stem("religionless"), "religionless");});
test("religions -> religion", function() {deepEqual( Stem("religions"), "religion");});
test("religious -> religi", function() {deepEqual( Stem("religious"), "religi");});
test("religiously -> religi", function() {deepEqual( Stem("religiously"), "religi");});
test("relinquish -> relinquish", function() {deepEqual( Stem("relinquish"), "relinquish");});
test("reliques -> reliqu", function() {deepEqual( Stem("reliques"), "reliqu");});
test("reliquit -> reliquit", function() {deepEqual( Stem("reliquit"), "reliquit");});
test("relish -> relish", function() {deepEqual( Stem("relish"), "relish");});
test("reluctance -> reluct", function() {deepEqual( Stem("reluctance"), "reluct");});
test("relume -> relum", function() {deepEqual( Stem("relume"), "relum");});
test("rely -> reli", function() {deepEqual( Stem("rely"), "reli");});
test("relying -> reli", function() {deepEqual( Stem("relying"), "reli");});
test("remain -> remain", function() {deepEqual( Stem("remain"), "remain");});
test("remainder -> remaind", function() {deepEqual( Stem("remainder"), "remaind");});
test("remainders -> remaind", function() {deepEqual( Stem("remainders"), "remaind");});
test("remained -> remain", function() {deepEqual( Stem("remained"), "remain");});
test("remaineth -> remaineth", function() {deepEqual( Stem("remaineth"), "remaineth");});
test("remaining -> remain", function() {deepEqual( Stem("remaining"), "remain");});
test("remains -> remain", function() {deepEqual( Stem("remains"), "remain");});
test("remark -> remark", function() {deepEqual( Stem("remark"), "remark");});
test("remarkable -> remark", function() {deepEqual( Stem("remarkable"), "remark");});
test("remarkably -> remark", function() {deepEqual( Stem("remarkably"), "remark");});
test("remarked -> remark", function() {deepEqual( Stem("remarked"), "remark");});
test("remarking -> remark", function() {deepEqual( Stem("remarking"), "remark");});
test("remarks -> remark", function() {deepEqual( Stem("remarks"), "remark");});
test("remediate -> remedi", function() {deepEqual( Stem("remediate"), "remedi");});
test("remedied -> remedi", function() {deepEqual( Stem("remedied"), "remedi");});
test("remedies -> remedi", function() {deepEqual( Stem("remedies"), "remedi");});
test("remedy -> remedi", function() {deepEqual( Stem("remedy"), "remedi");});
test("rememb -> rememb", function() {deepEqual( Stem("rememb"), "rememb");});
test("remember -> rememb", function() {deepEqual( Stem("remember"), "rememb");});
test("remembered -> rememb", function() {deepEqual( Stem("remembered"), "rememb");});
test("remembering -> rememb", function() {deepEqual( Stem("remembering"), "rememb");});
test("remembers -> rememb", function() {deepEqual( Stem("remembers"), "rememb");});
test("remembrance -> remembr", function() {deepEqual( Stem("remembrance"), "remembr");});
test("remembrancer -> remembranc", function() {deepEqual( Stem("remembrancer"), "remembranc");});
test("remembrances -> remembr", function() {deepEqual( Stem("remembrances"), "remembr");});
test("remercimens -> remercimen", function() {deepEqual( Stem("remercimens"), "remercimen");});
test("remind -> remind", function() {deepEqual( Stem("remind"), "remind");});
test("reminded -> remind", function() {deepEqual( Stem("reminded"), "remind");});
test("reminder -> remind", function() {deepEqual( Stem("reminder"), "remind");});
test("reminds -> remind", function() {deepEqual( Stem("reminds"), "remind");});
test("reminiscence -> reminisc", function() {deepEqual( Stem("reminiscence"), "reminisc");});
test("reminiscences -> reminisc", function() {deepEqual( Stem("reminiscences"), "reminisc");});
test("remiss -> remiss", function() {deepEqual( Stem("remiss"), "remiss");});
test("remission -> remiss", function() {deepEqual( Stem("remission"), "remiss");});
test("remissness -> remiss", function() {deepEqual( Stem("remissness"), "remiss");});
test("remit -> remit", function() {deepEqual( Stem("remit"), "remit");});
test("remittances -> remitt", function() {deepEqual( Stem("remittances"), "remitt");});
test("remitted -> remit", function() {deepEqual( Stem("remitted"), "remit");});
test("remnant -> remnant", function() {deepEqual( Stem("remnant"), "remnant");});
test("remnants -> remnant", function() {deepEqual( Stem("remnants"), "remnant");});
test("remonstrance -> remonstr", function() {deepEqual( Stem("remonstrance"), "remonstr");});
test("remonstrances -> remonstr", function() {deepEqual( Stem("remonstrances"), "remonstr");});
test("remonstrate -> remonstr", function() {deepEqual( Stem("remonstrate"), "remonstr");});
test("remonstrated -> remonstr", function() {deepEqual( Stem("remonstrated"), "remonstr");});
test("remorse -> remors", function() {deepEqual( Stem("remorse"), "remors");});
test("remorseful -> remors", function() {deepEqual( Stem("remorseful"), "remors");});
test("remorseless -> remorseless", function() {deepEqual( Stem("remorseless"), "remorseless");});
test("remote -> remot", function() {deepEqual( Stem("remote"), "remot");});
test("remotion -> remot", function() {deepEqual( Stem("remotion"), "remot");});
test("remounted -> remount", function() {deepEqual( Stem("remounted"), "remount");});
test("remov -> remov", function() {deepEqual( Stem("remov"), "remov");});
test("removal -> remov", function() {deepEqual( Stem("removal"), "remov");});
test("remove -> remov", function() {deepEqual( Stem("remove"), "remov");});
test("removed -> remov", function() {deepEqual( Stem("removed"), "remov");});
test("removedness -> removed", function() {deepEqual( Stem("removedness"), "removed");});
test("remover -> remov", function() {deepEqual( Stem("remover"), "remov");});
test("removes -> remov", function() {deepEqual( Stem("removes"), "remov");});
test("removing -> remov", function() {deepEqual( Stem("removing"), "remov");});
test("remunerate -> remuner", function() {deepEqual( Stem("remunerate"), "remuner");});
test("remuneration -> remuner", function() {deepEqual( Stem("remuneration"), "remuner");});
test("rence -> renc", function() {deepEqual( Stem("rence"), "renc");});
test("rencontre -> rencontr", function() {deepEqual( Stem("rencontre"), "rencontr");});
test("rend -> rend", function() {deepEqual( Stem("rend"), "rend");});
test("render -> render", function() {deepEqual( Stem("render"), "render");});
test("rendered -> render", function() {deepEqual( Stem("rendered"), "render");});
test("rendering -> render", function() {deepEqual( Stem("rendering"), "render");});
test("renders -> render", function() {deepEqual( Stem("renders"), "render");});
test("rendezvous -> rendezv", function() {deepEqual( Stem("rendezvous"), "rendezv");});
test("renegado -> renegado", function() {deepEqual( Stem("renegado"), "renegado");});
test("renege -> reneg", function() {deepEqual( Stem("renege"), "reneg");});
test("reneges -> reneg", function() {deepEqual( Stem("reneges"), "reneg");});
test("renew -> renew", function() {deepEqual( Stem("renew"), "renew");});
test("renewed -> renew", function() {deepEqual( Stem("renewed"), "renew");});
test("renewest -> renewest", function() {deepEqual( Stem("renewest"), "renewest");});
test("renewing -> renew", function() {deepEqual( Stem("renewing"), "renew");});
test("renounce -> renounc", function() {deepEqual( Stem("renounce"), "renounc");});
test("renouncement -> renounc", function() {deepEqual( Stem("renouncement"), "renounc");});
test("renouncing -> renounc", function() {deepEqual( Stem("renouncing"), "renounc");});
test("renovation -> renov", function() {deepEqual( Stem("renovation"), "renov");});
test("renowmed -> renowm", function() {deepEqual( Stem("renowmed"), "renowm");});
test("renown -> renown", function() {deepEqual( Stem("renown"), "renown");});
test("renowned -> renown", function() {deepEqual( Stem("renowned"), "renown");});
test("renowner -> renown", function() {deepEqual( Stem("renowner"), "renown");});
test("rent -> rent", function() {deepEqual( Stem("rent"), "rent");});
test("rented -> rent", function() {deepEqual( Stem("rented"), "rent");});
test("rents -> rent", function() {deepEqual( Stem("rents"), "rent");});
test("repaid -> repaid", function() {deepEqual( Stem("repaid"), "repaid");});
test("repair -> repair", function() {deepEqual( Stem("repair"), "repair");});
test("repaired -> repair", function() {deepEqual( Stem("repaired"), "repair");});
test("repairing -> repair", function() {deepEqual( Stem("repairing"), "repair");});
test("repairs -> repair", function() {deepEqual( Stem("repairs"), "repair");});
test("reparation -> repar", function() {deepEqual( Stem("reparation"), "repar");});
test("repass -> repass", function() {deepEqual( Stem("repass"), "repass");});
test("repast -> repast", function() {deepEqual( Stem("repast"), "repast");});
test("repasts -> repast", function() {deepEqual( Stem("repasts"), "repast");});
test("repasture -> repastur", function() {deepEqual( Stem("repasture"), "repastur");});
test("repay -> repai", function() {deepEqual( Stem("repay"), "repai");});
test("repaying -> repai", function() {deepEqual( Stem("repaying"), "repai");});
test("repays -> repai", function() {deepEqual( Stem("repays"), "repai");});
test("repayther -> repayth", function() {deepEqual( Stem("repayther"), "repayth");});
test("repeal -> repeal", function() {deepEqual( Stem("repeal"), "repeal");});
test("repealing -> repeal", function() {deepEqual( Stem("repealing"), "repeal");});
test("repeals -> repeal", function() {deepEqual( Stem("repeals"), "repeal");});
test("repeat -> repeat", function() {deepEqual( Stem("repeat"), "repeat");});
test("repeated -> repeat", function() {deepEqual( Stem("repeated"), "repeat");});
test("repeatedly -> repeatedli", function() {deepEqual( Stem("repeatedly"), "repeatedli");});
test("repeater -> repeat", function() {deepEqual( Stem("repeater"), "repeat");});
test("repeating -> repeat", function() {deepEqual( Stem("repeating"), "repeat");});
test("repeats -> repeat", function() {deepEqual( Stem("repeats"), "repeat");});
test("repel -> repel", function() {deepEqual( Stem("repel"), "repel");});
test("repelling -> repel", function() {deepEqual( Stem("repelling"), "repel");});
test("repent -> repent", function() {deepEqual( Stem("repent"), "repent");});
test("repentance -> repent", function() {deepEqual( Stem("repentance"), "repent");});
test("repentances -> repent", function() {deepEqual( Stem("repentances"), "repent");});
test("repentant -> repent", function() {deepEqual( Stem("repentant"), "repent");});
test("repented -> repent", function() {deepEqual( Stem("repented"), "repent");});
test("repenting -> repent", function() {deepEqual( Stem("repenting"), "repent");});
test("repents -> repent", function() {deepEqual( Stem("repents"), "repent");});
test("repertoire -> repertoir", function() {deepEqual( Stem("repertoire"), "repertoir");});
test("repetition -> repetit", function() {deepEqual( Stem("repetition"), "repetit");});
test("repetitions -> repetit", function() {deepEqual( Stem("repetitions"), "repetit");});
test("repin -> repin", function() {deepEqual( Stem("repin"), "repin");});
test("repine -> repin", function() {deepEqual( Stem("repine"), "repin");});
test("repining -> repin", function() {deepEqual( Stem("repining"), "repin");});
test("replace -> replac", function() {deepEqual( Stem("replace"), "replac");});
test("replaced -> replac", function() {deepEqual( Stem("replaced"), "replac");});
test("replant -> replant", function() {deepEqual( Stem("replant"), "replant");});
test("replenish -> replenish", function() {deepEqual( Stem("replenish"), "replenish");});
test("replenished -> replenish", function() {deepEqual( Stem("replenished"), "replenish");});
test("replenishing -> replenish", function() {deepEqual( Stem("replenishing"), "replenish");});
test("replete -> replet", function() {deepEqual( Stem("replete"), "replet");});
test("replication -> replic", function() {deepEqual( Stem("replication"), "replic");});
test("replied -> repli", function() {deepEqual( Stem("replied"), "repli");});
test("replies -> repli", function() {deepEqual( Stem("replies"), "repli");});
test("repliest -> repliest", function() {deepEqual( Stem("repliest"), "repliest");});
test("reply -> repli", function() {deepEqual( Stem("reply"), "repli");});
test("replying -> repli", function() {deepEqual( Stem("replying"), "repli");});
test("report -> report", function() {deepEqual( Stem("report"), "report");});
test("reported -> report", function() {deepEqual( Stem("reported"), "report");});
test("reporter -> report", function() {deepEqual( Stem("reporter"), "report");});
test("reportest -> reportest", function() {deepEqual( Stem("reportest"), "reportest");});
test("reporting -> report", function() {deepEqual( Stem("reporting"), "report");});
test("reportingly -> reportingli", function() {deepEqual( Stem("reportingly"), "reportingli");});
test("reports -> report", function() {deepEqual( Stem("reports"), "report");});
test("reposal -> repos", function() {deepEqual( Stem("reposal"), "repos");});
test("repose -> repos", function() {deepEqual( Stem("repose"), "repos");});
test("reposed -> repos", function() {deepEqual( Stem("reposed"), "repos");});
test("reposes -> repos", function() {deepEqual( Stem("reposes"), "repos");});
test("reposeth -> reposeth", function() {deepEqual( Stem("reposeth"), "reposeth");});
test("reposing -> repos", function() {deepEqual( Stem("reposing"), "repos");});
test("repository -> repositori", function() {deepEqual( Stem("repository"), "repositori");});
test("repossess -> repossess", function() {deepEqual( Stem("repossess"), "repossess");});
test("reprehend -> reprehend", function() {deepEqual( Stem("reprehend"), "reprehend");});
test("reprehended -> reprehend", function() {deepEqual( Stem("reprehended"), "reprehend");});
test("reprehending -> reprehend", function() {deepEqual( Stem("reprehending"), "reprehend");});
test("represent -> repres", function() {deepEqual( Stem("represent"), "repres");});
test("representations -> represent", function() {deepEqual( Stem("representations"), "represent");});
test("representative -> repres", function() {deepEqual( Stem("representative"), "repres");});
test("representatives -> repres", function() {deepEqual( Stem("representatives"), "repres");});
test("represented -> repres", function() {deepEqual( Stem("represented"), "repres");});
test("representing -> repres", function() {deepEqual( Stem("representing"), "repres");});
test("represents -> repres", function() {deepEqual( Stem("represents"), "repres");});
test("reprieve -> repriev", function() {deepEqual( Stem("reprieve"), "repriev");});
test("reprieves -> repriev", function() {deepEqual( Stem("reprieves"), "repriev");});
test("reprint -> reprint", function() {deepEqual( Stem("reprint"), "reprint");});
test("reprisal -> repris", function() {deepEqual( Stem("reprisal"), "repris");});
test("reproach -> reproach", function() {deepEqual( Stem("reproach"), "reproach");});
test("reproached -> reproach", function() {deepEqual( Stem("reproached"), "reproach");});
test("reproaches -> reproach", function() {deepEqual( Stem("reproaches"), "reproach");});
test("reproachful -> reproach", function() {deepEqual( Stem("reproachful"), "reproach");});
test("reproachfully -> reproachfulli", function() {deepEqual( Stem("reproachfully"), "reproachfulli");});
test("reproaching -> reproach", function() {deepEqual( Stem("reproaching"), "reproach");});
test("reprobate -> reprob", function() {deepEqual( Stem("reprobate"), "reprob");});
test("reprobated -> reprob", function() {deepEqual( Stem("reprobated"), "reprob");});
test("reprobates -> reprob", function() {deepEqual( Stem("reprobates"), "reprob");});
test("reprobation -> reprob", function() {deepEqual( Stem("reprobation"), "reprob");});
test("reproof -> reproof", function() {deepEqual( Stem("reproof"), "reproof");});
test("reprov -> reprov", function() {deepEqual( Stem("reprov"), "reprov");});
test("reprove -> reprov", function() {deepEqual( Stem("reprove"), "reprov");});
test("reproveable -> reprov", function() {deepEqual( Stem("reproveable"), "reprov");});
test("reproves -> reprov", function() {deepEqual( Stem("reproves"), "reprov");});
test("reproving -> reprov", function() {deepEqual( Stem("reproving"), "reprov");});
test("reprovingly -> reprovingli", function() {deepEqual( Stem("reprovingly"), "reprovingli");});
test("republican -> republican", function() {deepEqual( Stem("republican"), "republican");});
test("repudiating -> repudi", function() {deepEqual( Stem("repudiating"), "repudi");});
test("repugn -> repugn", function() {deepEqual( Stem("repugn"), "repugn");});
test("repugnance -> repugn", function() {deepEqual( Stem("repugnance"), "repugn");});
test("repugnancy -> repugn", function() {deepEqual( Stem("repugnancy"), "repugn");});
test("repugnant -> repugn", function() {deepEqual( Stem("repugnant"), "repugn");});
test("repulse -> repuls", function() {deepEqual( Stem("repulse"), "repuls");});
test("repulsed -> repuls", function() {deepEqual( Stem("repulsed"), "repuls");});
test("repulsion -> repuls", function() {deepEqual( Stem("repulsion"), "repuls");});
test("repurchas -> repurcha", function() {deepEqual( Stem("repurchas"), "repurcha");});
test("repurchase -> repurchas", function() {deepEqual( Stem("repurchase"), "repurchas");});
test("repured -> repur", function() {deepEqual( Stem("repured"), "repur");});
test("reputable -> reput", function() {deepEqual( Stem("reputable"), "reput");});
test("reputation -> reput", function() {deepEqual( Stem("reputation"), "reput");});
test("repute -> reput", function() {deepEqual( Stem("repute"), "reput");});
test("reputed -> reput", function() {deepEqual( Stem("reputed"), "reput");});
test("reputeless -> reputeless", function() {deepEqual( Stem("reputeless"), "reputeless");});
test("reputes -> reput", function() {deepEqual( Stem("reputes"), "reput");});
test("reputing -> reput", function() {deepEqual( Stem("reputing"), "reput");});
test("request -> request", function() {deepEqual( Stem("request"), "request");});
test("requested -> request", function() {deepEqual( Stem("requested"), "request");});
test("requesting -> request", function() {deepEqual( Stem("requesting"), "request");});
test("requests -> request", function() {deepEqual( Stem("requests"), "request");});
test("requiem -> requiem", function() {deepEqual( Stem("requiem"), "requiem");});
test("requir -> requir", function() {deepEqual( Stem("requir"), "requir");});
test("require -> requir", function() {deepEqual( Stem("require"), "requir");});
test("required -> requir", function() {deepEqual( Stem("required"), "requir");});
test("requires -> requir", function() {deepEqual( Stem("requires"), "requir");});
test("requireth -> requireth", function() {deepEqual( Stem("requireth"), "requireth");});
test("requiring -> requir", function() {deepEqual( Stem("requiring"), "requir");});
test("requisite -> requisit", function() {deepEqual( Stem("requisite"), "requisit");});
test("requisites -> requisit", function() {deepEqual( Stem("requisites"), "requisit");});
test("requisition -> requisit", function() {deepEqual( Stem("requisition"), "requisit");});
test("requit -> requit", function() {deepEqual( Stem("requit"), "requit");});
test("requital -> requit", function() {deepEqual( Stem("requital"), "requit");});
test("requite -> requit", function() {deepEqual( Stem("requite"), "requit");});
test("requited -> requit", function() {deepEqual( Stem("requited"), "requit");});
test("requites -> requit", function() {deepEqual( Stem("requites"), "requit");});
test("rer -> rer", function() {deepEqual( Stem("rer"), "rer");});
test("rere -> rere", function() {deepEqual( Stem("rere"), "rere");});
test("rers -> rer", function() {deepEqual( Stem("rers"), "rer");});
test("rescu -> rescu", function() {deepEqual( Stem("rescu"), "rescu");});
test("rescue -> rescu", function() {deepEqual( Stem("rescue"), "rescu");});
test("rescued -> rescu", function() {deepEqual( Stem("rescued"), "rescu");});
test("rescues -> rescu", function() {deepEqual( Stem("rescues"), "rescu");});
test("rescuing -> rescu", function() {deepEqual( Stem("rescuing"), "rescu");});
test("researches -> research", function() {deepEqual( Stem("researches"), "research");});
test("resemblance -> resembl", function() {deepEqual( Stem("resemblance"), "resembl");});
test("resemblances -> resembl", function() {deepEqual( Stem("resemblances"), "resembl");});
test("resemble -> resembl", function() {deepEqual( Stem("resemble"), "resembl");});
test("resembled -> resembl", function() {deepEqual( Stem("resembled"), "resembl");});
test("resembles -> resembl", function() {deepEqual( Stem("resembles"), "resembl");});
test("resembleth -> resembleth", function() {deepEqual( Stem("resembleth"), "resembleth");});
test("resembling -> resembl", function() {deepEqual( Stem("resembling"), "resembl");});
test("reserv -> reserv", function() {deepEqual( Stem("reserv"), "reserv");});
test("reservation -> reserv", function() {deepEqual( Stem("reservation"), "reserv");});
test("reserve -> reserv", function() {deepEqual( Stem("reserve"), "reserv");});
test("reserved -> reserv", function() {deepEqual( Stem("reserved"), "reserv");});
test("reserves -> reserv", function() {deepEqual( Stem("reserves"), "reserv");});
test("reside -> resid", function() {deepEqual( Stem("reside"), "resid");});
test("resided -> resid", function() {deepEqual( Stem("resided"), "resid");});
test("residence -> resid", function() {deepEqual( Stem("residence"), "resid");});
test("resident -> resid", function() {deepEqual( Stem("resident"), "resid");});
test("residents -> resid", function() {deepEqual( Stem("residents"), "resid");});
test("residenz -> residenz", function() {deepEqual( Stem("residenz"), "residenz");});
test("resides -> resid", function() {deepEqual( Stem("resides"), "resid");});
test("residing -> resid", function() {deepEqual( Stem("residing"), "resid");});
test("residue -> residu", function() {deepEqual( Stem("residue"), "residu");});
test("resign -> resign", function() {deepEqual( Stem("resign"), "resign");});
test("resignation -> resign", function() {deepEqual( Stem("resignation"), "resign");});
test("resignations -> resign", function() {deepEqual( Stem("resignations"), "resign");});
test("resigned -> resign", function() {deepEqual( Stem("resigned"), "resign");});
test("resigning -> resign", function() {deepEqual( Stem("resigning"), "resign");});
test("resist -> resist", function() {deepEqual( Stem("resist"), "resist");});
test("resistance -> resist", function() {deepEqual( Stem("resistance"), "resist");});
test("resisted -> resist", function() {deepEqual( Stem("resisted"), "resist");});
test("resisting -> resist", function() {deepEqual( Stem("resisting"), "resist");});
test("resists -> resist", function() {deepEqual( Stem("resists"), "resist");});
test("resolute -> resolut", function() {deepEqual( Stem("resolute"), "resolut");});
test("resolutely -> resolut", function() {deepEqual( Stem("resolutely"), "resolut");});
test("resolutes -> resolut", function() {deepEqual( Stem("resolutes"), "resolut");});
test("resolution -> resolut", function() {deepEqual( Stem("resolution"), "resolut");});
test("resolutions -> resolut", function() {deepEqual( Stem("resolutions"), "resolut");});
test("resolv -> resolv", function() {deepEqual( Stem("resolv"), "resolv");});
test("resolve -> resolv", function() {deepEqual( Stem("resolve"), "resolv");});
test("resolved -> resolv", function() {deepEqual( Stem("resolved"), "resolv");});
test("resolvedly -> resolvedli", function() {deepEqual( Stem("resolvedly"), "resolvedli");});
test("resolves -> resolv", function() {deepEqual( Stem("resolves"), "resolv");});
test("resolveth -> resolveth", function() {deepEqual( Stem("resolveth"), "resolveth");});
test("resort -> resort", function() {deepEqual( Stem("resort"), "resort");});
test("resorted -> resort", function() {deepEqual( Stem("resorted"), "resort");});
test("resounding -> resound", function() {deepEqual( Stem("resounding"), "resound");});
test("resounds -> resound", function() {deepEqual( Stem("resounds"), "resound");});
test("resource -> resourc", function() {deepEqual( Stem("resource"), "resourc");});
test("resources -> resourc", function() {deepEqual( Stem("resources"), "resourc");});
test("respeaking -> respeak", function() {deepEqual( Stem("respeaking"), "respeak");});
test("respect -> respect", function() {deepEqual( Stem("respect"), "respect");});
test("respectable -> respect", function() {deepEqual( Stem("respectable"), "respect");});
test("respectably -> respect", function() {deepEqual( Stem("respectably"), "respect");});
test("respected -> respect", function() {deepEqual( Stem("respected"), "respect");});
test("respectful -> respect", function() {deepEqual( Stem("respectful"), "respect");});
test("respectfully -> respectfulli", function() {deepEqual( Stem("respectfully"), "respectfulli");});
test("respecting -> respect", function() {deepEqual( Stem("respecting"), "respect");});
test("respective -> respect", function() {deepEqual( Stem("respective"), "respect");});
test("respectively -> respect", function() {deepEqual( Stem("respectively"), "respect");});
test("respects -> respect", function() {deepEqual( Stem("respects"), "respect");});
test("respice -> respic", function() {deepEqual( Stem("respice"), "respic");});
test("respite -> respit", function() {deepEqual( Stem("respite"), "respit");});
test("respites -> respit", function() {deepEqual( Stem("respites"), "respit");});
test("resplendent -> resplend", function() {deepEqual( Stem("resplendent"), "resplend");});
test("responded -> respond", function() {deepEqual( Stem("responded"), "respond");});
test("response -> respons", function() {deepEqual( Stem("response"), "respons");});
test("responsive -> respons", function() {deepEqual( Stem("responsive"), "respons");});
test("respose -> respos", function() {deepEqual( Stem("respose"), "respos");});
test("ress -> ress", function() {deepEqual( Stem("ress"), "ress");});
test("rest -> rest", function() {deepEqual( Stem("rest"), "rest");});
test("restaurateur -> restaurateur", function() {deepEqual( Stem("restaurateur"), "restaurateur");});
test("restaurateurs -> restaurateur", function() {deepEqual( Stem("restaurateurs"), "restaurateur");});
test("rested -> rest", function() {deepEqual( Stem("rested"), "rest");});
test("resteth -> resteth", function() {deepEqual( Stem("resteth"), "resteth");});
test("restful -> rest", function() {deepEqual( Stem("restful"), "rest");});
test("resting -> rest", function() {deepEqual( Stem("resting"), "rest");});
test("restitution -> restitut", function() {deepEqual( Stem("restitution"), "restitut");});
test("restless -> restless", function() {deepEqual( Stem("restless"), "restless");});
test("restlessly -> restlessli", function() {deepEqual( Stem("restlessly"), "restlessli");});
test("restlessness -> restless", function() {deepEqual( Stem("restlessness"), "restless");});
test("restor -> restor", function() {deepEqual( Stem("restor"), "restor");});
test("restoration -> restor", function() {deepEqual( Stem("restoration"), "restor");});
test("restorative -> restor", function() {deepEqual( Stem("restorative"), "restor");});
test("restore -> restor", function() {deepEqual( Stem("restore"), "restor");});
test("restored -> restor", function() {deepEqual( Stem("restored"), "restor");});
test("restores -> restor", function() {deepEqual( Stem("restores"), "restor");});
test("restoring -> restor", function() {deepEqual( Stem("restoring"), "restor");});
test("restrain -> restrain", function() {deepEqual( Stem("restrain"), "restrain");});
test("restrained -> restrain", function() {deepEqual( Stem("restrained"), "restrain");});
test("restraining -> restrain", function() {deepEqual( Stem("restraining"), "restrain");});
test("restrains -> restrain", function() {deepEqual( Stem("restrains"), "restrain");});
test("restraint -> restraint", function() {deepEqual( Stem("restraint"), "restraint");});
test("rests -> rest", function() {deepEqual( Stem("rests"), "rest");});
test("resty -> resti", function() {deepEqual( Stem("resty"), "resti");});
test("result -> result", function() {deepEqual( Stem("result"), "result");});
test("resulted -> result", function() {deepEqual( Stem("resulted"), "result");});
test("resulting -> result", function() {deepEqual( Stem("resulting"), "result");});
test("results -> result", function() {deepEqual( Stem("results"), "result");});
test("resum -> resum", function() {deepEqual( Stem("resum"), "resum");});
test("resume -> resum", function() {deepEqual( Stem("resume"), "resum");});
test("resumed -> resum", function() {deepEqual( Stem("resumed"), "resum");});
test("resumes -> resum", function() {deepEqual( Stem("resumes"), "resum");});
test("resuming -> resum", function() {deepEqual( Stem("resuming"), "resum");});
test("resurgam -> resurgam", function() {deepEqual( Stem("resurgam"), "resurgam");});
test("resurrections -> resurrect", function() {deepEqual( Stem("resurrections"), "resurrect");});
test("retail -> retail", function() {deepEqual( Stem("retail"), "retail");});
test("retails -> retail", function() {deepEqual( Stem("retails"), "retail");});
test("retain -> retain", function() {deepEqual( Stem("retain"), "retain");});
test("retained -> retain", function() {deepEqual( Stem("retained"), "retain");});
test("retainer -> retain", function() {deepEqual( Stem("retainer"), "retain");});
test("retainers -> retain", function() {deepEqual( Stem("retainers"), "retain");});
test("retaining -> retain", function() {deepEqual( Stem("retaining"), "retain");});
test("retell -> retel", function() {deepEqual( Stem("retell"), "retel");});
test("retention -> retent", function() {deepEqual( Stem("retention"), "retent");});
test("retentive -> retent", function() {deepEqual( Stem("retentive"), "retent");});
test("retenue -> retenu", function() {deepEqual( Stem("retenue"), "retenu");});
test("reticule -> reticul", function() {deepEqual( Stem("reticule"), "reticul");});
test("reticules -> reticul", function() {deepEqual( Stem("reticules"), "reticul");});
test("retinue -> retinu", function() {deepEqual( Stem("retinue"), "retinu");});
test("retir -> retir", function() {deepEqual( Stem("retir"), "retir");});
test("retire -> retir", function() {deepEqual( Stem("retire"), "retir");});
test("retired -> retir", function() {deepEqual( Stem("retired"), "retir");});
test("retirement -> retir", function() {deepEqual( Stem("retirement"), "retir");});
test("retires -> retir", function() {deepEqual( Stem("retires"), "retir");});
test("retiring -> retir", function() {deepEqual( Stem("retiring"), "retir");});
test("retold -> retold", function() {deepEqual( Stem("retold"), "retold");});
test("retort -> retort", function() {deepEqual( Stem("retort"), "retort");});
test("retorts -> retort", function() {deepEqual( Stem("retorts"), "retort");});
test("retour -> retour", function() {deepEqual( Stem("retour"), "retour");});
test("retourne -> retourn", function() {deepEqual( Stem("retourne"), "retourn");});
test("retract -> retract", function() {deepEqual( Stem("retract"), "retract");});
test("retracted -> retract", function() {deepEqual( Stem("retracted"), "retract");});
test("retreat -> retreat", function() {deepEqual( Stem("retreat"), "retreat");});
test("retreated -> retreat", function() {deepEqual( Stem("retreated"), "retreat");});
test("retreating -> retreat", function() {deepEqual( Stem("retreating"), "retreat");});
test("retrench -> retrench", function() {deepEqual( Stem("retrench"), "retrench");});
test("retrenchment -> retrench", function() {deepEqual( Stem("retrenchment"), "retrench");});
test("retrieve -> retriev", function() {deepEqual( Stem("retrieve"), "retriev");});
test("retrograde -> retrograd", function() {deepEqual( Stem("retrograde"), "retrograd");});
test("rets -> ret", function() {deepEqual( Stem("rets"), "ret");});
test("return -> return", function() {deepEqual( Stem("return"), "return");});
test("returned -> return", function() {deepEqual( Stem("returned"), "return");});
test("returnest -> returnest", function() {deepEqual( Stem("returnest"), "returnest");});
test("returneth -> returneth", function() {deepEqual( Stem("returneth"), "returneth");});
test("returning -> return", function() {deepEqual( Stem("returning"), "return");});
test("returns -> return", function() {deepEqual( Stem("returns"), "return");});
test("reunion -> reunion", function() {deepEqual( Stem("reunion"), "reunion");});
test("reunions -> reunion", function() {deepEqual( Stem("reunions"), "reunion");});
test("rev -> rev", function() {deepEqual( Stem("rev"), "rev");});
test("revania -> revania", function() {deepEqual( Stem("revania"), "revania");});
test("reveal -> reveal", function() {deepEqual( Stem("reveal"), "reveal");});
test("revealed -> reveal", function() {deepEqual( Stem("revealed"), "reveal");});
test("reveals -> reveal", function() {deepEqual( Stem("reveals"), "reveal");});
test("revel -> revel", function() {deepEqual( Stem("revel"), "revel");});
test("revelations -> revel", function() {deepEqual( Stem("revelations"), "revel");});
test("reveler -> revel", function() {deepEqual( Stem("reveler"), "revel");});
test("revell -> revel", function() {deepEqual( Stem("revell"), "revel");});
test("revelled -> revel", function() {deepEqual( Stem("revelled"), "revel");});
test("reveller -> revel", function() {deepEqual( Stem("reveller"), "revel");});
test("revellers -> revel", function() {deepEqual( Stem("revellers"), "revel");});
test("revelling -> revel", function() {deepEqual( Stem("revelling"), "revel");});
test("revelry -> revelri", function() {deepEqual( Stem("revelry"), "revelri");});
test("revels -> revel", function() {deepEqual( Stem("revels"), "revel");});
test("reveng -> reveng", function() {deepEqual( Stem("reveng"), "reveng");});
test("revenge -> reveng", function() {deepEqual( Stem("revenge"), "reveng");});
test("revenged -> reveng", function() {deepEqual( Stem("revenged"), "reveng");});
test("revengeful -> reveng", function() {deepEqual( Stem("revengeful"), "reveng");});
test("revengement -> reveng", function() {deepEqual( Stem("revengement"), "reveng");});
test("revenger -> reveng", function() {deepEqual( Stem("revenger"), "reveng");});
test("revengers -> reveng", function() {deepEqual( Stem("revengers"), "reveng");});
test("revenges -> reveng", function() {deepEqual( Stem("revenges"), "reveng");});
test("revenging -> reveng", function() {deepEqual( Stem("revenging"), "reveng");});
test("revengingly -> revengingli", function() {deepEqual( Stem("revengingly"), "revengingli");});
test("revenue -> revenu", function() {deepEqual( Stem("revenue"), "revenu");});
test("revenues -> revenu", function() {deepEqual( Stem("revenues"), "revenu");});
test("reverb -> reverb", function() {deepEqual( Stem("reverb"), "reverb");});
test("reverberate -> reverber", function() {deepEqual( Stem("reverberate"), "reverber");});
test("reverbs -> reverb", function() {deepEqual( Stem("reverbs"), "reverb");});
test("revered -> rever", function() {deepEqual( Stem("revered"), "rever");});
test("reverenc -> reverenc", function() {deepEqual( Stem("reverenc"), "reverenc");});
test("reverence -> rever", function() {deepEqual( Stem("reverence"), "rever");});
test("reverend -> reverend", function() {deepEqual( Stem("reverend"), "reverend");});
test("reverent -> rever", function() {deepEqual( Stem("reverent"), "rever");});
test("reverential -> reverenti", function() {deepEqual( Stem("reverential"), "reverenti");});
test("reverentially -> reverenti", function() {deepEqual( Stem("reverentially"), "reverenti");});
test("reverently -> rever", function() {deepEqual( Stem("reverently"), "rever");});
test("reverie -> reveri", function() {deepEqual( Stem("reverie"), "reveri");});
test("revers -> rever", function() {deepEqual( Stem("revers"), "rever");});
test("reverse -> revers", function() {deepEqual( Stem("reverse"), "revers");});
test("reverses -> revers", function() {deepEqual( Stem("reverses"), "revers");});
test("reversion -> revers", function() {deepEqual( Stem("reversion"), "revers");});
test("reversionary -> reversionari", function() {deepEqual( Stem("reversionary"), "reversionari");});
test("reverted -> revert", function() {deepEqual( Stem("reverted"), "revert");});
test("review -> review", function() {deepEqual( Stem("review"), "review");});
test("reviewed -> review", function() {deepEqual( Stem("reviewed"), "review");});
test("reviewest -> reviewest", function() {deepEqual( Stem("reviewest"), "reviewest");});
test("reviewing -> review", function() {deepEqual( Stem("reviewing"), "review");});
test("revil -> revil", function() {deepEqual( Stem("revil"), "revil");});
test("revile -> revil", function() {deepEqual( Stem("revile"), "revil");});
test("reviles -> revil", function() {deepEqual( Stem("reviles"), "revil");});
test("reviling -> revil", function() {deepEqual( Stem("reviling"), "revil");});
test("revisited -> revisit", function() {deepEqual( Stem("revisited"), "revisit");});
test("revisiting -> revisit", function() {deepEqual( Stem("revisiting"), "revisit");});
test("revisits -> revisit", function() {deepEqual( Stem("revisits"), "revisit");});
test("reviv -> reviv", function() {deepEqual( Stem("reviv"), "reviv");});
test("revive -> reviv", function() {deepEqual( Stem("revive"), "reviv");});
test("revives -> reviv", function() {deepEqual( Stem("revives"), "reviv");});
test("reviving -> reviv", function() {deepEqual( Stem("reviving"), "reviv");});
test("revoir -> revoir", function() {deepEqual( Stem("revoir"), "revoir");});
test("revok -> revok", function() {deepEqual( Stem("revok"), "revok");});
test("revoke -> revok", function() {deepEqual( Stem("revoke"), "revok");});
test("revoked -> revok", function() {deepEqual( Stem("revoked"), "revok");});
test("revokement -> revok", function() {deepEqual( Stem("revokement"), "revok");});
test("revolt -> revolt", function() {deepEqual( Stem("revolt"), "revolt");});
test("revolted -> revolt", function() {deepEqual( Stem("revolted"), "revolt");});
test("revolting -> revolt", function() {deepEqual( Stem("revolting"), "revolt");});
test("revolts -> revolt", function() {deepEqual( Stem("revolts"), "revolt");});
test("revolution -> revolut", function() {deepEqual( Stem("revolution"), "revolut");});
test("revolutionary -> revolutionari", function() {deepEqual( Stem("revolutionary"), "revolutionari");});
test("revolutions -> revolut", function() {deepEqual( Stem("revolutions"), "revolut");});
test("revolve -> revolv", function() {deepEqual( Stem("revolve"), "revolv");});
test("revolving -> revolv", function() {deepEqual( Stem("revolving"), "revolv");});
test("reward -> reward", function() {deepEqual( Stem("reward"), "reward");});
test("rewarded -> reward", function() {deepEqual( Stem("rewarded"), "reward");});
test("rewarder -> reward", function() {deepEqual( Stem("rewarder"), "reward");});
test("rewarding -> reward", function() {deepEqual( Stem("rewarding"), "reward");});
test("rewards -> reward", function() {deepEqual( Stem("rewards"), "reward");});
test("reword -> reword", function() {deepEqual( Stem("reword"), "reword");});
test("reworded -> reword", function() {deepEqual( Stem("reworded"), "reword");});
test("rex -> rex", function() {deepEqual( Stem("rex"), "rex");});
test("rey -> rei", function() {deepEqual( Stem("rey"), "rei");});
test("reynaldo -> reynaldo", function() {deepEqual( Stem("reynaldo"), "reynaldo");});
test("reynolds -> reynold", function() {deepEqual( Stem("reynolds"), "reynold");});
test("rford -> rford", function() {deepEqual( Stem("rford"), "rford");});
test("rful -> rful", function() {deepEqual( Stem("rful"), "rful");});
test("rfull -> rfull", function() {deepEqual( Stem("rfull"), "rfull");});
test("rhapsody -> rhapsodi", function() {deepEqual( Stem("rhapsody"), "rhapsodi");});
test("rheims -> rheim", function() {deepEqual( Stem("rheims"), "rheim");});
test("rhein -> rhein", function() {deepEqual( Stem("rhein"), "rhein");});
test("rhenish -> rhenish", function() {deepEqual( Stem("rhenish"), "rhenish");});
test("rhesus -> rhesu", function() {deepEqual( Stem("rhesus"), "rhesu");});
test("rhetoric -> rhetor", function() {deepEqual( Stem("rhetoric"), "rhetor");});
test("rheum -> rheum", function() {deepEqual( Stem("rheum"), "rheum");});
test("rheumatic -> rheumat", function() {deepEqual( Stem("rheumatic"), "rheumat");});
test("rheumatisms -> rheumat", function() {deepEqual( Stem("rheumatisms"), "rheumat");});
test("rheums -> rheum", function() {deepEqual( Stem("rheums"), "rheum");});
test("rheumy -> rheumi", function() {deepEqual( Stem("rheumy"), "rheumi");});
test("rhine -> rhine", function() {deepEqual( Stem("rhine"), "rhine");});
test("rhineland -> rhineland", function() {deepEqual( Stem("rhineland"), "rhineland");});
test("rhinoceros -> rhinocero", function() {deepEqual( Stem("rhinoceros"), "rhinocero");});
test("rhoda -> rhoda", function() {deepEqual( Stem("rhoda"), "rhoda");});
test("rhodes -> rhode", function() {deepEqual( Stem("rhodes"), "rhode");});
test("rhodope -> rhodop", function() {deepEqual( Stem("rhodope"), "rhodop");});
test("rhubarb -> rhubarb", function() {deepEqual( Stem("rhubarb"), "rhubarb");});
test("rhym -> rhym", function() {deepEqual( Stem("rhym"), "rhym");});
test("rhyme -> rhyme", function() {deepEqual( Stem("rhyme"), "rhyme");});
test("rhymers -> rhymer", function() {deepEqual( Stem("rhymers"), "rhymer");});
test("rhymes -> rhyme", function() {deepEqual( Stem("rhymes"), "rhyme");});
test("rhyming -> rhyme", function() {deepEqual( Stem("rhyming"), "rhyme");});
test("rialto -> rialto", function() {deepEqual( Stem("rialto"), "rialto");});
test("rib -> rib", function() {deepEqual( Stem("rib"), "rib");});
test("ribald -> ribald", function() {deepEqual( Stem("ribald"), "ribald");});
test("ribaldry -> ribaldri", function() {deepEqual( Stem("ribaldry"), "ribaldri");});
test("riband -> riband", function() {deepEqual( Stem("riband"), "riband");});
test("ribands -> riband", function() {deepEqual( Stem("ribands"), "riband");});
test("ribaudred -> ribaudr", function() {deepEqual( Stem("ribaudred"), "ribaudr");});
test("ribb -> ribb", function() {deepEqual( Stem("ribb"), "ribb");});
test("ribbed -> rib", function() {deepEqual( Stem("ribbed"), "rib");});
test("ribbing -> rib", function() {deepEqual( Stem("ribbing"), "rib");});
test("ribbon -> ribbon", function() {deepEqual( Stem("ribbon"), "ribbon");});
test("ribbons -> ribbon", function() {deepEqual( Stem("ribbons"), "ribbon");});
test("ribs -> rib", function() {deepEqual( Stem("ribs"), "rib");});
test("rice -> rice", function() {deepEqual( Stem("rice"), "rice");});
test("rich -> rich", function() {deepEqual( Stem("rich"), "rich");});
test("richard -> richard", function() {deepEqual( Stem("richard"), "richard");});
test("richemont -> richemont", function() {deepEqual( Stem("richemont"), "richemont");});
test("richer -> richer", function() {deepEqual( Stem("richer"), "richer");});
test("riches -> rich", function() {deepEqual( Stem("riches"), "rich");});
test("richest -> richest", function() {deepEqual( Stem("richest"), "richest");});
test("richly -> richli", function() {deepEqual( Stem("richly"), "richli");});
test("richmond -> richmond", function() {deepEqual( Stem("richmond"), "richmond");});
test("richmonds -> richmond", function() {deepEqual( Stem("richmonds"), "richmond");});
test("richness -> rich", function() {deepEqual( Stem("richness"), "rich");});
test("ricketts -> rickett", function() {deepEqual( Stem("ricketts"), "rickett");});
test("rickety -> ricketi", function() {deepEqual( Stem("rickety"), "ricketi");});
test("rid -> rid", function() {deepEqual( Stem("rid"), "rid");});
test("riddance -> riddanc", function() {deepEqual( Stem("riddance"), "riddanc");});
test("ridden -> ridden", function() {deepEqual( Stem("ridden"), "ridden");});
test("ridding -> rid", function() {deepEqual( Stem("ridding"), "rid");});
test("riddle -> riddl", function() {deepEqual( Stem("riddle"), "riddl");});
test("riddled -> riddl", function() {deepEqual( Stem("riddled"), "riddl");});
test("riddles -> riddl", function() {deepEqual( Stem("riddles"), "riddl");});
test("riddling -> riddl", function() {deepEqual( Stem("riddling"), "riddl");});
test("ride -> ride", function() {deepEqual( Stem("ride"), "ride");});
test("rider -> rider", function() {deepEqual( Stem("rider"), "rider");});
test("riders -> rider", function() {deepEqual( Stem("riders"), "rider");});
test("rides -> ride", function() {deepEqual( Stem("rides"), "ride");});
test("ridest -> ridest", function() {deepEqual( Stem("ridest"), "ridest");});
test("rideth -> rideth", function() {deepEqual( Stem("rideth"), "rideth");});
test("ridge -> ridg", function() {deepEqual( Stem("ridge"), "ridg");});
test("ridges -> ridg", function() {deepEqual( Stem("ridges"), "ridg");});
test("ridicule -> ridicul", function() {deepEqual( Stem("ridicule"), "ridicul");});
test("ridiculed -> ridicul", function() {deepEqual( Stem("ridiculed"), "ridicul");});
test("ridiculous -> ridicul", function() {deepEqual( Stem("ridiculous"), "ridicul");});
test("riding -> ride", function() {deepEqual( Stem("riding"), "ride");});
test("rids -> rid", function() {deepEqual( Stem("rids"), "rid");});
test("rien -> rien", function() {deepEqual( Stem("rien"), "rien");});
test("ries -> ri", function() {deepEqual( Stem("ries"), "ri");});
test("rifle -> rifl", function() {deepEqual( Stem("rifle"), "rifl");});
test("rifles -> rifl", function() {deepEqual( Stem("rifles"), "rifl");});
test("rift -> rift", function() {deepEqual( Stem("rift"), "rift");});
test("rifted -> rift", function() {deepEqual( Stem("rifted"), "rift");});
test("rig -> rig", function() {deepEqual( Stem("rig"), "rig");});
test("rigg -> rigg", function() {deepEqual( Stem("rigg"), "rigg");});
test("riggish -> riggish", function() {deepEqual( Stem("riggish"), "riggish");});
test("right -> right", function() {deepEqual( Stem("right"), "right");});
test("righteous -> righteou", function() {deepEqual( Stem("righteous"), "righteou");});
test("righteously -> righteous", function() {deepEqual( Stem("righteously"), "righteous");});
test("rightful -> right", function() {deepEqual( Stem("rightful"), "right");});
test("rightfully -> rightfulli", function() {deepEqual( Stem("rightfully"), "rightfulli");});
test("rightly -> rightli", function() {deepEqual( Stem("rightly"), "rightli");});
test("rights -> right", function() {deepEqual( Stem("rights"), "right");});
test("rigid -> rigid", function() {deepEqual( Stem("rigid"), "rigid");});
test("rigidly -> rigidli", function() {deepEqual( Stem("rigidly"), "rigidli");});
test("rigol -> rigol", function() {deepEqual( Stem("rigol"), "rigol");});
test("rigorous -> rigor", function() {deepEqual( Stem("rigorous"), "rigor");});
test("rigorously -> rigor", function() {deepEqual( Stem("rigorously"), "rigor");});
test("rigour -> rigour", function() {deepEqual( Stem("rigour"), "rigour");});
test("ril -> ril", function() {deepEqual( Stem("ril"), "ril");});
test("rim -> rim", function() {deepEqual( Stem("rim"), "rim");});
test("rin -> rin", function() {deepEqual( Stem("rin"), "rin");});
test("rinaldo -> rinaldo", function() {deepEqual( Stem("rinaldo"), "rinaldo");});
test("rince -> rinc", function() {deepEqual( Stem("rince"), "rinc");});
test("rincer -> rincer", function() {deepEqual( Stem("rincer"), "rincer");});
test("rind -> rind", function() {deepEqual( Stem("rind"), "rind");});
test("ring -> ring", function() {deepEqual( Stem("ring"), "ring");});
test("ringing -> ring", function() {deepEqual( Stem("ringing"), "ring");});
test("ringleader -> ringlead", function() {deepEqual( Stem("ringleader"), "ringlead");});
test("ringlet -> ringlet", function() {deepEqual( Stem("ringlet"), "ringlet");});
test("ringlets -> ringlet", function() {deepEqual( Stem("ringlets"), "ringlet");});
test("rings -> ring", function() {deepEqual( Stem("rings"), "ring");});
test("ringwood -> ringwood", function() {deepEqual( Stem("ringwood"), "ringwood");});
test("rio -> rio", function() {deepEqual( Stem("rio"), "rio");});
test("riot -> riot", function() {deepEqual( Stem("riot"), "riot");});
test("rioter -> rioter", function() {deepEqual( Stem("rioter"), "rioter");});
test("rioting -> riot", function() {deepEqual( Stem("rioting"), "riot");});
test("riotous -> riotou", function() {deepEqual( Stem("riotous"), "riotou");});
test("riots -> riot", function() {deepEqual( Stem("riots"), "riot");});
test("rip -> rip", function() {deepEqual( Stem("rip"), "rip");});
test("ripe -> ripe", function() {deepEqual( Stem("ripe"), "ripe");});
test("ripely -> ripe", function() {deepEqual( Stem("ripely"), "ripe");});
test("ripen -> ripen", function() {deepEqual( Stem("ripen"), "ripen");});
test("ripened -> ripen", function() {deepEqual( Stem("ripened"), "ripen");});
test("ripeness -> ripe", function() {deepEqual( Stem("ripeness"), "ripe");});
test("ripening -> ripen", function() {deepEqual( Stem("ripening"), "ripen");});
test("ripens -> ripen", function() {deepEqual( Stem("ripens"), "ripen");});
test("riper -> riper", function() {deepEqual( Stem("riper"), "riper");});
test("ripest -> ripest", function() {deepEqual( Stem("ripest"), "ripest");});
test("riping -> ripe", function() {deepEqual( Stem("riping"), "ripe");});
test("riposted -> ripost", function() {deepEqual( Stem("riposted"), "ripost");});
test("ripp -> ripp", function() {deepEqual( Stem("ripp"), "ripp");});
test("ripping -> rip", function() {deepEqual( Stem("ripping"), "rip");});
test("ris -> ri", function() {deepEqual( Stem("ris"), "ri");});
test("rise -> rise", function() {deepEqual( Stem("rise"), "rise");});
test("risen -> risen", function() {deepEqual( Stem("risen"), "risen");});
test("rises -> rise", function() {deepEqual( Stem("rises"), "rise");});
test("riseth -> riseth", function() {deepEqual( Stem("riseth"), "riseth");});
test("rish -> rish", function() {deepEqual( Stem("rish"), "rish");});
test("rising -> rise", function() {deepEqual( Stem("rising"), "rise");});
test("risk -> risk", function() {deepEqual( Stem("risk"), "risk");});
test("rite -> rite", function() {deepEqual( Stem("rite"), "rite");});
test("rites -> rite", function() {deepEqual( Stem("rites"), "rite");});
test("rivage -> rivag", function() {deepEqual( Stem("rivage"), "rivag");});
test("rival -> rival", function() {deepEqual( Stem("rival"), "rival");});
test("rivality -> rival", function() {deepEqual( Stem("rivality"), "rival");});
test("rivall -> rival", function() {deepEqual( Stem("rivall"), "rival");});
test("rivalry -> rivalri", function() {deepEqual( Stem("rivalry"), "rivalri");});
test("rivals -> rival", function() {deepEqual( Stem("rivals"), "rival");});
test("rive -> rive", function() {deepEqual( Stem("rive"), "rive");});
test("rived -> rive", function() {deepEqual( Stem("rived"), "rive");});
test("rivelled -> rivel", function() {deepEqual( Stem("rivelled"), "rivel");});
test("river -> river", function() {deepEqual( Stem("river"), "river");});
test("rivers -> river", function() {deepEqual( Stem("rivers"), "river");});
test("rivet -> rivet", function() {deepEqual( Stem("rivet"), "rivet");});
test("riveted -> rivet", function() {deepEqual( Stem("riveted"), "rivet");});
test("rivets -> rivet", function() {deepEqual( Stem("rivets"), "rivet");});
test("rivo -> rivo", function() {deepEqual( Stem("rivo"), "rivo");});
test("rj -> rj", function() {deepEqual( Stem("rj"), "rj");});
test("rless -> rless", function() {deepEqual( Stem("rless"), "rless");});
test("road -> road", function() {deepEqual( Stem("road"), "road");});
test("roads -> road", function() {deepEqual( Stem("roads"), "road");});
test("roadside -> roadsid", function() {deepEqual( Stem("roadside"), "roadsid");});
test("roam -> roam", function() {deepEqual( Stem("roam"), "roam");});
test("roaming -> roam", function() {deepEqual( Stem("roaming"), "roam");});
test("roan -> roan", function() {deepEqual( Stem("roan"), "roan");});
test("roar -> roar", function() {deepEqual( Stem("roar"), "roar");});
test("roared -> roar", function() {deepEqual( Stem("roared"), "roar");});
test("roarers -> roarer", function() {deepEqual( Stem("roarers"), "roarer");});
test("roaring -> roar", function() {deepEqual( Stem("roaring"), "roar");});
test("roars -> roar", function() {deepEqual( Stem("roars"), "roar");});
test("roast -> roast", function() {deepEqual( Stem("roast"), "roast");});
test("roasted -> roast", function() {deepEqual( Stem("roasted"), "roast");});
test("rob -> rob", function() {deepEqual( Stem("rob"), "rob");});
test("roba -> roba", function() {deepEqual( Stem("roba"), "roba");});
test("robas -> roba", function() {deepEqual( Stem("robas"), "roba");});
test("robb -> robb", function() {deepEqual( Stem("robb"), "robb");});
test("robbed -> rob", function() {deepEqual( Stem("robbed"), "rob");});
test("robber -> robber", function() {deepEqual( Stem("robber"), "robber");});
test("robbers -> robber", function() {deepEqual( Stem("robbers"), "robber");});
test("robbery -> robberi", function() {deepEqual( Stem("robbery"), "robberi");});
test("robbing -> rob", function() {deepEqual( Stem("robbing"), "rob");});
test("robe -> robe", function() {deepEqual( Stem("robe"), "robe");});
test("robed -> robe", function() {deepEqual( Stem("robed"), "robe");});
test("robert -> robert", function() {deepEqual( Stem("robert"), "robert");});
test("robes -> robe", function() {deepEqual( Stem("robes"), "robe");});
test("robin -> robin", function() {deepEqual( Stem("robin"), "robin");});
test("robins -> robin", function() {deepEqual( Stem("robins"), "robin");});
test("robinson -> robinson", function() {deepEqual( Stem("robinson"), "robinson");});
test("robs -> rob", function() {deepEqual( Stem("robs"), "rob");});
test("robust -> robust", function() {deepEqual( Stem("robust"), "robust");});
test("robustious -> robusti", function() {deepEqual( Stem("robustious"), "robusti");});
test("roc -> roc", function() {deepEqual( Stem("roc"), "roc");});
test("rochester -> rochest", function() {deepEqual( Stem("rochester"), "rochest");});
test("rochford -> rochford", function() {deepEqual( Stem("rochford"), "rochford");});
test("rock -> rock", function() {deepEqual( Stem("rock"), "rock");});
test("rocked -> rock", function() {deepEqual( Stem("rocked"), "rock");});
test("rocket -> rocket", function() {deepEqual( Stem("rocket"), "rocket");});
test("rocking -> rock", function() {deepEqual( Stem("rocking"), "rock");});
test("rocks -> rock", function() {deepEqual( Stem("rocks"), "rock");});
test("rockwood -> rockwood", function() {deepEqual( Stem("rockwood"), "rockwood");});
test("rocky -> rocki", function() {deepEqual( Stem("rocky"), "rocki");});
test("rod -> rod", function() {deepEqual( Stem("rod"), "rod");});
test("rode -> rode", function() {deepEqual( Stem("rode"), "rode");});
test("roderigo -> roderigo", function() {deepEqual( Stem("roderigo"), "roderigo");});
test("rodgers -> rodger", function() {deepEqual( Stem("rodgers"), "rodger");});
test("rods -> rod", function() {deepEqual( Stem("rods"), "rod");});
test("roe -> roe", function() {deepEqual( Stem("roe"), "roe");});
test("roehampton -> roehampton", function() {deepEqual( Stem("roehampton"), "roehampton");});
test("roes -> roe", function() {deepEqual( Stem("roes"), "roe");});
test("roger -> roger", function() {deepEqual( Stem("roger"), "roger");});
test("rogero -> rogero", function() {deepEqual( Stem("rogero"), "rogero");});
test("rogue -> rogu", function() {deepEqual( Stem("rogue"), "rogu");});
test("rogueries -> rogueri", function() {deepEqual( Stem("rogueries"), "rogueri");});
test("roguery -> rogueri", function() {deepEqual( Stem("roguery"), "rogueri");});
test("rogues -> rogu", function() {deepEqual( Stem("rogues"), "rogu");});
test("roguish -> roguish", function() {deepEqual( Stem("roguish"), "roguish");});
test("roguishly -> roguishli", function() {deepEqual( Stem("roguishly"), "roguishli");});
test("roi -> roi", function() {deepEqual( Stem("roi"), "roi");});
test("roisting -> roist", function() {deepEqual( Stem("roisting"), "roist");});
test("roll -> roll", function() {deepEqual( Stem("roll"), "roll");});
test("rolle -> roll", function() {deepEqual( Stem("rolle"), "roll");});
test("rolled -> roll", function() {deepEqual( Stem("rolled"), "roll");});
test("rolling -> roll", function() {deepEqual( Stem("rolling"), "roll");});
test("rolls -> roll", function() {deepEqual( Stem("rolls"), "roll");});
test("rom -> rom", function() {deepEqual( Stem("rom"), "rom");});
test("romage -> romag", function() {deepEqual( Stem("romage"), "romag");});
test("roman -> roman", function() {deepEqual( Stem("roman"), "roman");});
test("romance -> romanc", function() {deepEqual( Stem("romance"), "romanc");});
test("romancer -> romanc", function() {deepEqual( Stem("romancer"), "romanc");});
test("romances -> romanc", function() {deepEqual( Stem("romances"), "romanc");});
test("romano -> romano", function() {deepEqual( Stem("romano"), "romano");});
test("romanos -> romano", function() {deepEqual( Stem("romanos"), "romano");});
test("romans -> roman", function() {deepEqual( Stem("romans"), "roman");});
test("romantic -> romant", function() {deepEqual( Stem("romantic"), "romant");});
test("romantically -> romant", function() {deepEqual( Stem("romantically"), "romant");});
test("rome -> rome", function() {deepEqual( Stem("rome"), "rome");});
test("romeo -> romeo", function() {deepEqual( Stem("romeo"), "romeo");});
test("romish -> romish", function() {deepEqual( Stem("romish"), "romish");});
test("rondure -> rondur", function() {deepEqual( Stem("rondure"), "rondur");});
test("ronyon -> ronyon", function() {deepEqual( Stem("ronyon"), "ronyon");});
test("ronzi -> ronzi", function() {deepEqual( Stem("ronzi"), "ronzi");});
test("roo -> roo", function() {deepEqual( Stem("roo"), "roo");});
test("rood -> rood", function() {deepEqual( Stem("rood"), "rood");});
test("roof -> roof", function() {deepEqual( Stem("roof"), "roof");});
test("roofs -> roof", function() {deepEqual( Stem("roofs"), "roof");});
test("rook -> rook", function() {deepEqual( Stem("rook"), "rook");});
test("rooks -> rook", function() {deepEqual( Stem("rooks"), "rook");});
test("rooky -> rooki", function() {deepEqual( Stem("rooky"), "rooki");});
test("room -> room", function() {deepEqual( Stem("room"), "room");});
test("rooms -> room", function() {deepEqual( Stem("rooms"), "room");});
test("rooshian -> rooshian", function() {deepEqual( Stem("rooshian"), "rooshian");});
test("rooshians -> rooshian", function() {deepEqual( Stem("rooshians"), "rooshian");});
test("root -> root", function() {deepEqual( Stem("root"), "root");});
test("rooted -> root", function() {deepEqual( Stem("rooted"), "root");});
test("rootedly -> rootedli", function() {deepEqual( Stem("rootedly"), "rootedli");});
test("rooteth -> rooteth", function() {deepEqual( Stem("rooteth"), "rooteth");});
test("rooting -> root", function() {deepEqual( Stem("rooting"), "root");});
test("roots -> root", function() {deepEqual( Stem("roots"), "root");});
test("rope -> rope", function() {deepEqual( Stem("rope"), "rope");});
test("roper -> roper", function() {deepEqual( Stem("roper"), "roper");});
test("ropery -> roperi", function() {deepEqual( Stem("ropery"), "roperi");});
test("ropes -> rope", function() {deepEqual( Stem("ropes"), "rope");});
test("roping -> rope", function() {deepEqual( Stem("roping"), "rope");});
test("ros -> ro", function() {deepEqual( Stem("ros"), "ro");});
test("rosa -> rosa", function() {deepEqual( Stem("rosa"), "rosa");});
test("rosalind -> rosalind", function() {deepEqual( Stem("rosalind"), "rosalind");});
test("rosalinda -> rosalinda", function() {deepEqual( Stem("rosalinda"), "rosalinda");});
test("rosalinde -> rosalind", function() {deepEqual( Stem("rosalinde"), "rosalind");});
test("rosaline -> rosalin", function() {deepEqual( Stem("rosaline"), "rosalin");});
test("rosamond -> rosamond", function() {deepEqual( Stem("rosamond"), "rosamond");});
test("roscius -> rosciu", function() {deepEqual( Stem("roscius"), "rosciu");});
test("rose -> rose", function() {deepEqual( Stem("rose"), "rose");});
test("roseate -> roseat", function() {deepEqual( Stem("roseate"), "roseat");});
test("rosed -> rose", function() {deepEqual( Stem("rosed"), "rose");});
test("rosemary -> rosemari", function() {deepEqual( Stem("rosemary"), "rosemari");});
test("rosencrantz -> rosencrantz", function() {deepEqual( Stem("rosencrantz"), "rosencrantz");});
test("roses -> rose", function() {deepEqual( Stem("roses"), "rose");});
test("rosewood -> rosewood", function() {deepEqual( Stem("rosewood"), "rosewood");});
test("rosina -> rosina", function() {deepEqual( Stem("rosina"), "rosina");});
test("ross -> ross", function() {deepEqual( Stem("ross"), "ross");});
test("rossignol -> rossignol", function() {deepEqual( Stem("rossignol"), "rossignol");});
test("rosy -> rosi", function() {deepEqual( Stem("rosy"), "rosi");});
test("rot -> rot", function() {deepEqual( Stem("rot"), "rot");});
test("rote -> rote", function() {deepEqual( Stem("rote"), "rote");});
test("roted -> rote", function() {deepEqual( Stem("roted"), "rote");});
test("rother -> rother", function() {deepEqual( Stem("rother"), "rother");});
test("rotherham -> rotherham", function() {deepEqual( Stem("rotherham"), "rotherham");});
test("rothschild -> rothschild", function() {deepEqual( Stem("rothschild"), "rothschild");});
test("rots -> rot", function() {deepEqual( Stem("rots"), "rot");});
test("rotted -> rot", function() {deepEqual( Stem("rotted"), "rot");});
test("rotten -> rotten", function() {deepEqual( Stem("rotten"), "rotten");});
test("rottenness -> rotten", function() {deepEqual( Stem("rottenness"), "rotten");});
test("rotterdam -> rotterdam", function() {deepEqual( Stem("rotterdam"), "rotterdam");});
test("rotting -> rot", function() {deepEqual( Stem("rotting"), "rot");});
test("rottingdean -> rottingdean", function() {deepEqual( Stem("rottingdean"), "rottingdean");});
test("rotundity -> rotund", function() {deepEqual( Stem("rotundity"), "rotund");});
test("rouen -> rouen", function() {deepEqual( Stem("rouen"), "rouen");});
test("roues -> roue", function() {deepEqual( Stem("roues"), "roue");});
test("rouge -> roug", function() {deepEqual( Stem("rouge"), "roug");});
test("rouged -> roug", function() {deepEqual( Stem("rouged"), "roug");});
test("rougemont -> rougemont", function() {deepEqual( Stem("rougemont"), "rougemont");});
test("rough -> rough", function() {deepEqual( Stem("rough"), "rough");});
test("rougher -> rougher", function() {deepEqual( Stem("rougher"), "rougher");});
test("roughest -> roughest", function() {deepEqual( Stem("roughest"), "roughest");});
test("roughly -> roughli", function() {deepEqual( Stem("roughly"), "roughli");});
test("roughness -> rough", function() {deepEqual( Stem("roughness"), "rough");});
test("roulette -> roulett", function() {deepEqual( Stem("roulette"), "roulett");});
test("round -> round", function() {deepEqual( Stem("round"), "round");});
test("rounded -> round", function() {deepEqual( Stem("rounded"), "round");});
test("roundel -> roundel", function() {deepEqual( Stem("roundel"), "roundel");});
test("rounder -> rounder", function() {deepEqual( Stem("rounder"), "rounder");});
test("roundest -> roundest", function() {deepEqual( Stem("roundest"), "roundest");});
test("rounding -> round", function() {deepEqual( Stem("rounding"), "round");});
test("roundly -> roundli", function() {deepEqual( Stem("roundly"), "roundli");});
test("rounds -> round", function() {deepEqual( Stem("rounds"), "round");});
test("roundure -> roundur", function() {deepEqual( Stem("roundure"), "roundur");});
test("rous -> rou", function() {deepEqual( Stem("rous"), "rou");});
test("rouse -> rous", function() {deepEqual( Stem("rouse"), "rous");});
test("roused -> rous", function() {deepEqual( Stem("roused"), "rous");});
test("rousillon -> rousillon", function() {deepEqual( Stem("rousillon"), "rousillon");});
test("rously -> rousli", function() {deepEqual( Stem("rously"), "rousli");});
test("rousseau -> rousseau", function() {deepEqual( Stem("rousseau"), "rousseau");});
test("roussi -> roussi", function() {deepEqual( Stem("roussi"), "roussi");});
test("rout -> rout", function() {deepEqual( Stem("rout"), "rout");});
test("route -> rout", function() {deepEqual( Stem("route"), "rout");});
test("routed -> rout", function() {deepEqual( Stem("routed"), "rout");});
test("routine -> routin", function() {deepEqual( Stem("routine"), "routin");});
test("routs -> rout", function() {deepEqual( Stem("routs"), "rout");});
test("rove -> rove", function() {deepEqual( Stem("rove"), "rove");});
test("rover -> rover", function() {deepEqual( Stem("rover"), "rover");});
test("roving -> rove", function() {deepEqual( Stem("roving"), "rove");});
test("row -> row", function() {deepEqual( Stem("row"), "row");});
test("rowdy -> rowdi", function() {deepEqual( Stem("rowdy"), "rowdi");});
test("rowel -> rowel", function() {deepEqual( Stem("rowel"), "rowel");});
test("rowland -> rowland", function() {deepEqual( Stem("rowland"), "rowland");});
test("rowlands -> rowland", function() {deepEqual( Stem("rowlands"), "rowland");});
test("rowls -> rowl", function() {deepEqual( Stem("rowls"), "rowl");});
test("rows -> row", function() {deepEqual( Stem("rows"), "row");});
test("rowson -> rowson", function() {deepEqual( Stem("rowson"), "rowson");});
test("roxby -> roxbi", function() {deepEqual( Stem("roxby"), "roxbi");});
test("roy -> roi", function() {deepEqual( Stem("roy"), "roi");});
test("royal -> royal", function() {deepEqual( Stem("royal"), "royal");});
test("royale -> royal", function() {deepEqual( Stem("royale"), "royal");});
test("royalist -> royalist", function() {deepEqual( Stem("royalist"), "royalist");});
test("royalize -> royal", function() {deepEqual( Stem("royalize"), "royal");});
test("royally -> royal", function() {deepEqual( Stem("royally"), "royal");});
test("royalties -> royalti", function() {deepEqual( Stem("royalties"), "royalti");});
test("royalty -> royalti", function() {deepEqual( Stem("royalty"), "royalti");});
test("roynish -> roynish", function() {deepEqual( Stem("roynish"), "roynish");});
test("rs -> r", function() {deepEqual( Stem("rs"), "r");});
test("rt -> rt", function() {deepEqual( Stem("rt"), "rt");});
test("rub -> rub", function() {deepEqual( Stem("rub"), "rub");});
test("rubb -> rubb", function() {deepEqual( Stem("rubb"), "rubb");});
test("rubbed -> rub", function() {deepEqual( Stem("rubbed"), "rub");});
test("rubber -> rubber", function() {deepEqual( Stem("rubber"), "rubber");});
test("rubbers -> rubber", function() {deepEqual( Stem("rubbers"), "rubber");});
test("rubbing -> rub", function() {deepEqual( Stem("rubbing"), "rub");});
test("rubbish -> rubbish", function() {deepEqual( Stem("rubbish"), "rubbish");});
test("rubies -> rubi", function() {deepEqual( Stem("rubies"), "rubi");});
test("rubious -> rubiou", function() {deepEqual( Stem("rubious"), "rubiou");});
test("rubs -> rub", function() {deepEqual( Stem("rubs"), "rub");});
test("ruby -> rubi", function() {deepEqual( Stem("ruby"), "rubi");});
test("rud -> rud", function() {deepEqual( Stem("rud"), "rud");});
test("rudand -> rudand", function() {deepEqual( Stem("rudand"), "rudand");});
test("rudder -> rudder", function() {deepEqual( Stem("rudder"), "rudder");});
test("ruddiness -> ruddi", function() {deepEqual( Stem("ruddiness"), "ruddi");});
test("ruddock -> ruddock", function() {deepEqual( Stem("ruddock"), "ruddock");});
test("ruddy -> ruddi", function() {deepEqual( Stem("ruddy"), "ruddi");});
test("rude -> rude", function() {deepEqual( Stem("rude"), "rude");});
test("rudely -> rude", function() {deepEqual( Stem("rudely"), "rude");});
test("rudeness -> rude", function() {deepEqual( Stem("rudeness"), "rude");});
test("ruder -> ruder", function() {deepEqual( Stem("ruder"), "ruder");});
test("rudesby -> rudesbi", function() {deepEqual( Stem("rudesby"), "rudesbi");});
test("rudest -> rudest", function() {deepEqual( Stem("rudest"), "rudest");});
test("rudge -> rudg", function() {deepEqual( Stem("rudge"), "rudg");});
test("rudiments -> rudiment", function() {deepEqual( Stem("rudiments"), "rudiment");});
test("rue -> rue", function() {deepEqual( Stem("rue"), "rue");});
test("rued -> ru", function() {deepEqual( Stem("rued"), "ru");});
test("rueful -> rueful", function() {deepEqual( Stem("rueful"), "rueful");});
test("ruefully -> ruefulli", function() {deepEqual( Stem("ruefully"), "ruefulli");});
test("ruff -> ruff", function() {deepEqual( Stem("ruff"), "ruff");});
test("ruffian -> ruffian", function() {deepEqual( Stem("ruffian"), "ruffian");});
test("ruffians -> ruffian", function() {deepEqual( Stem("ruffians"), "ruffian");});
test("ruffle -> ruffl", function() {deepEqual( Stem("ruffle"), "ruffl");});
test("ruffles -> ruffl", function() {deepEqual( Stem("ruffles"), "ruffl");});
test("ruffling -> ruffl", function() {deepEqual( Stem("ruffling"), "ruffl");});
test("ruffs -> ruff", function() {deepEqual( Stem("ruffs"), "ruff");});
test("rug -> rug", function() {deepEqual( Stem("rug"), "rug");});
test("rugby -> rugbi", function() {deepEqual( Stem("rugby"), "rugbi");});
test("rugemount -> rugemount", function() {deepEqual( Stem("rugemount"), "rugemount");});
test("rugged -> rug", function() {deepEqual( Stem("rugged"), "rug");});
test("ruin -> ruin", function() {deepEqual( Stem("ruin"), "ruin");});
test("ruinate -> ruinat", function() {deepEqual( Stem("ruinate"), "ruinat");});
test("ruined -> ruin", function() {deepEqual( Stem("ruined"), "ruin");});
test("ruing -> ru", function() {deepEqual( Stem("ruing"), "ru");});
test("ruining -> ruin", function() {deepEqual( Stem("ruining"), "ruin");});
test("ruinous -> ruinou", function() {deepEqual( Stem("ruinous"), "ruinou");});
test("ruins -> ruin", function() {deepEqual( Stem("ruins"), "ruin");});
test("rul -> rul", function() {deepEqual( Stem("rul"), "rul");});
test("rule -> rule", function() {deepEqual( Stem("rule"), "rule");});
test("ruled -> rule", function() {deepEqual( Stem("ruled"), "rule");});
test("ruler -> ruler", function() {deepEqual( Stem("ruler"), "ruler");});
test("rulers -> ruler", function() {deepEqual( Stem("rulers"), "ruler");});
test("rules -> rule", function() {deepEqual( Stem("rules"), "rule");});
test("ruling -> rule", function() {deepEqual( Stem("ruling"), "rule");});
test("rum -> rum", function() {deepEqual( Stem("rum"), "rum");});
test("rumble -> rumbl", function() {deepEqual( Stem("rumble"), "rumbl");});
test("ruminaies -> ruminai", function() {deepEqual( Stem("ruminaies"), "ruminai");});
test("ruminat -> ruminat", function() {deepEqual( Stem("ruminat"), "ruminat");});
test("ruminate -> rumin", function() {deepEqual( Stem("ruminate"), "rumin");});
test("ruminated -> rumin", function() {deepEqual( Stem("ruminated"), "rumin");});
test("ruminates -> rumin", function() {deepEqual( Stem("ruminates"), "rumin");});
test("rumination -> rumin", function() {deepEqual( Stem("rumination"), "rumin");});
test("rummage -> rummag", function() {deepEqual( Stem("rummage"), "rummag");});
test("rummaging -> rummag", function() {deepEqual( Stem("rummaging"), "rummag");});
test("rumor -> rumor", function() {deepEqual( Stem("rumor"), "rumor");});
test("rumour -> rumour", function() {deepEqual( Stem("rumour"), "rumour");});
test("rumourer -> rumour", function() {deepEqual( Stem("rumourer"), "rumour");});
test("rumours -> rumour", function() {deepEqual( Stem("rumours"), "rumour");});
test("rump -> rump", function() {deepEqual( Stem("rump"), "rump");});
test("run -> run", function() {deepEqual( Stem("run"), "run");});
test("runagate -> runag", function() {deepEqual( Stem("runagate"), "runag");});
test("runagates -> runag", function() {deepEqual( Stem("runagates"), "runag");});
test("runaway -> runawai", function() {deepEqual( Stem("runaway"), "runawai");});
test("runaways -> runawai", function() {deepEqual( Stem("runaways"), "runawai");});
test("rundell -> rundel", function() {deepEqual( Stem("rundell"), "rundel");});
test("rung -> rung", function() {deepEqual( Stem("rung"), "rung");});
test("runn -> runn", function() {deepEqual( Stem("runn"), "runn");});
test("runner -> runner", function() {deepEqual( Stem("runner"), "runner");});
test("runners -> runner", function() {deepEqual( Stem("runners"), "runner");});
test("running -> run", function() {deepEqual( Stem("running"), "run");});
test("runs -> run", function() {deepEqual( Stem("runs"), "run");});
test("rupees -> rupe", function() {deepEqual( Stem("rupees"), "rupe");});
test("rupture -> ruptur", function() {deepEqual( Stem("rupture"), "ruptur");});
test("ruptures -> ruptur", function() {deepEqual( Stem("ruptures"), "ruptur");});
test("rural -> rural", function() {deepEqual( Stem("rural"), "rural");});
test("rush -> rush", function() {deepEqual( Stem("rush"), "rush");});
test("rushed -> rush", function() {deepEqual( Stem("rushed"), "rush");});
test("rushes -> rush", function() {deepEqual( Stem("rushes"), "rush");});
test("rushing -> rush", function() {deepEqual( Stem("rushing"), "rush");});
test("rushlight -> rushlight", function() {deepEqual( Stem("rushlight"), "rushlight");});
test("rushling -> rushl", function() {deepEqual( Stem("rushling"), "rushl");});
test("rushy -> rushi", function() {deepEqual( Stem("rushy"), "rushi");});
test("russell -> russel", function() {deepEqual( Stem("russell"), "russel");});
test("russet -> russet", function() {deepEqual( Stem("russet"), "russet");});
test("russia -> russia", function() {deepEqual( Stem("russia"), "russia");});
test("russian -> russian", function() {deepEqual( Stem("russian"), "russian");});
test("russians -> russian", function() {deepEqual( Stem("russians"), "russian");});
test("rust -> rust", function() {deepEqual( Stem("rust"), "rust");});
test("rusted -> rust", function() {deepEqual( Stem("rusted"), "rust");});
test("rustic -> rustic", function() {deepEqual( Stem("rustic"), "rustic");});
test("rustically -> rustic", function() {deepEqual( Stem("rustically"), "rustic");});
test("rusticated -> rustic", function() {deepEqual( Stem("rusticated"), "rustic");});
test("rustics -> rustic", function() {deepEqual( Stem("rustics"), "rustic");});
test("rustle -> rustl", function() {deepEqual( Stem("rustle"), "rustl");});
test("rustling -> rustl", function() {deepEqual( Stem("rustling"), "rustl");});
test("rusts -> rust", function() {deepEqual( Stem("rusts"), "rust");});
test("rusty -> rusti", function() {deepEqual( Stem("rusty"), "rusti");});
test("rut -> rut", function() {deepEqual( Stem("rut"), "rut");});
test("ruth -> ruth", function() {deepEqual( Stem("ruth"), "ruth");});
test("ruthful -> ruth", function() {deepEqual( Stem("ruthful"), "ruth");});
test("ruthless -> ruthless", function() {deepEqual( Stem("ruthless"), "ruthless");});
test("rutland -> rutland", function() {deepEqual( Stem("rutland"), "rutland");});
test("ruttish -> ruttish", function() {deepEqual( Stem("ruttish"), "ruttish");});
test("ry -> ry", function() {deepEqual( Stem("ry"), "ry");});
test("rye -> rye", function() {deepEqual( Stem("rye"), "rye");});
test("rything -> ryth", function() {deepEqual( Stem("rything"), "ryth");});
test("s -> ", function() {deepEqual( Stem("s"), "");});
test("sa -> sa", function() {deepEqual( Stem("sa"), "sa");});
test("saba -> saba", function() {deepEqual( Stem("saba"), "saba");});
test("sabbath -> sabbath", function() {deepEqual( Stem("sabbath"), "sabbath");});
test("sable -> sabl", function() {deepEqual( Stem("sable"), "sabl");});
test("sables -> sabl", function() {deepEqual( Stem("sables"), "sabl");});
test("sabre -> sabr", function() {deepEqual( Stem("sabre"), "sabr");});
test("sack -> sack", function() {deepEqual( Stem("sack"), "sack");});
test("sackbuts -> sackbut", function() {deepEqual( Stem("sackbuts"), "sackbut");});
test("sackcloth -> sackcloth", function() {deepEqual( Stem("sackcloth"), "sackcloth");});
test("sacked -> sack", function() {deepEqual( Stem("sacked"), "sack");});
test("sackerson -> sackerson", function() {deepEqual( Stem("sackerson"), "sackerson");});
test("sacks -> sack", function() {deepEqual( Stem("sacks"), "sack");});
test("sacrament -> sacrament", function() {deepEqual( Stem("sacrament"), "sacrament");});
test("sacre -> sacr", function() {deepEqual( Stem("sacre"), "sacr");});
test("sacred -> sacr", function() {deepEqual( Stem("sacred"), "sacr");});
test("sacredness -> sacred", function() {deepEqual( Stem("sacredness"), "sacred");});
test("sacrific -> sacrif", function() {deepEqual( Stem("sacrific"), "sacrif");});
test("sacrifice -> sacrific", function() {deepEqual( Stem("sacrifice"), "sacrific");});
test("sacrificed -> sacrif", function() {deepEqual( Stem("sacrificed"), "sacrif");});
test("sacrificers -> sacrific", function() {deepEqual( Stem("sacrificers"), "sacrific");});
test("sacrifices -> sacrific", function() {deepEqual( Stem("sacrifices"), "sacrific");});
test("sacrificial -> sacrifici", function() {deepEqual( Stem("sacrificial"), "sacrifici");});
test("sacrificing -> sacrif", function() {deepEqual( Stem("sacrificing"), "sacrif");});
test("sacrilegious -> sacrilegi", function() {deepEqual( Stem("sacrilegious"), "sacrilegi");});
test("sacring -> sacr", function() {deepEqual( Stem("sacring"), "sacr");});
test("sad -> sad", function() {deepEqual( Stem("sad"), "sad");});
test("sadder -> sadder", function() {deepEqual( Stem("sadder"), "sadder");});
test("saddest -> saddest", function() {deepEqual( Stem("saddest"), "saddest");});
test("saddle -> saddl", function() {deepEqual( Stem("saddle"), "saddl");});
test("saddled -> saddl", function() {deepEqual( Stem("saddled"), "saddl");});
test("saddler -> saddler", function() {deepEqual( Stem("saddler"), "saddler");});
test("saddles -> saddl", function() {deepEqual( Stem("saddles"), "saddl");});
test("sadler -> sadler", function() {deepEqual( Stem("sadler"), "sadler");});
test("sadly -> sadli", function() {deepEqual( Stem("sadly"), "sadli");});
test("sadness -> sad", function() {deepEqual( Stem("sadness"), "sad");});
test("saf -> saf", function() {deepEqual( Stem("saf"), "saf");});
test("safe -> safe", function() {deepEqual( Stem("safe"), "safe");});
test("safeguard -> safeguard", function() {deepEqual( Stem("safeguard"), "safeguard");});
test("safely -> safe", function() {deepEqual( Stem("safely"), "safe");});
test("safer -> safer", function() {deepEqual( Stem("safer"), "safer");});
test("safest -> safest", function() {deepEqual( Stem("safest"), "safest");});
test("safeties -> safeti", function() {deepEqual( Stem("safeties"), "safeti");});
test("safety -> safeti", function() {deepEqual( Stem("safety"), "safeti");});
test("saffron -> saffron", function() {deepEqual( Stem("saffron"), "saffron");});
test("sag -> sag", function() {deepEqual( Stem("sag"), "sag");});
test("sagaciously -> sagaci", function() {deepEqual( Stem("sagaciously"), "sagaci");});
test("sage -> sage", function() {deepEqual( Stem("sage"), "sage");});
test("sagittary -> sagittari", function() {deepEqual( Stem("sagittary"), "sagittari");});
test("sahib -> sahib", function() {deepEqual( Stem("sahib"), "sahib");});
test("said -> said", function() {deepEqual( Stem("said"), "said");});
test("saidst -> saidst", function() {deepEqual( Stem("saidst"), "saidst");});
test("sail -> sail", function() {deepEqual( Stem("sail"), "sail");});
test("sailed -> sail", function() {deepEqual( Stem("sailed"), "sail");});
test("sailing -> sail", function() {deepEqual( Stem("sailing"), "sail");});
test("sailmaker -> sailmak", function() {deepEqual( Stem("sailmaker"), "sailmak");});
test("sailor -> sailor", function() {deepEqual( Stem("sailor"), "sailor");});
test("sailors -> sailor", function() {deepEqual( Stem("sailors"), "sailor");});
test("sails -> sail", function() {deepEqual( Stem("sails"), "sail");});
test("sain -> sain", function() {deepEqual( Stem("sain"), "sain");});
test("saint -> saint", function() {deepEqual( Stem("saint"), "saint");});
test("sainte -> saint", function() {deepEqual( Stem("sainte"), "saint");});
test("sainted -> saint", function() {deepEqual( Stem("sainted"), "saint");});
test("saintlike -> saintlik", function() {deepEqual( Stem("saintlike"), "saintlik");});
test("saints -> saint", function() {deepEqual( Stem("saints"), "saint");});
test("saith -> saith", function() {deepEqual( Stem("saith"), "saith");});
test("sake -> sake", function() {deepEqual( Stem("sake"), "sake");});
test("sakes -> sake", function() {deepEqual( Stem("sakes"), "sake");});
test("sala -> sala", function() {deepEqual( Stem("sala"), "sala");});
test("salaam -> salaam", function() {deepEqual( Stem("salaam"), "salaam");});
test("salad -> salad", function() {deepEqual( Stem("salad"), "salad");});
test("salamanca -> salamanca", function() {deepEqual( Stem("salamanca"), "salamanca");});
test("salamander -> salamand", function() {deepEqual( Stem("salamander"), "salamand");});
test("salary -> salari", function() {deepEqual( Stem("salary"), "salari");});
test("sale -> sale", function() {deepEqual( Stem("sale"), "sale");});
test("salerio -> salerio", function() {deepEqual( Stem("salerio"), "salerio");});
test("salicam -> salicam", function() {deepEqual( Stem("salicam"), "salicam");});
test("salique -> saliqu", function() {deepEqual( Stem("salique"), "saliqu");});
test("salisbury -> salisburi", function() {deepEqual( Stem("salisbury"), "salisburi");});
test("sall -> sall", function() {deepEqual( Stem("sall"), "sall");});
test("sallet -> sallet", function() {deepEqual( Stem("sallet"), "sallet");});
test("sallets -> sallet", function() {deepEqual( Stem("sallets"), "sallet");});
test("sallied -> salli", function() {deepEqual( Stem("sallied"), "salli");});
test("sallies -> salli", function() {deepEqual( Stem("sallies"), "salli");});
test("sallow -> sallow", function() {deepEqual( Stem("sallow"), "sallow");});
test("sallust -> sallust", function() {deepEqual( Stem("sallust"), "sallust");});
test("sally -> salli", function() {deepEqual( Stem("sally"), "salli");});
test("salmi -> salmi", function() {deepEqual( Stem("salmi"), "salmi");});
test("salmon -> salmon", function() {deepEqual( Stem("salmon"), "salmon");});
test("salmons -> salmon", function() {deepEqual( Stem("salmons"), "salmon");});
test("salon -> salon", function() {deepEqual( Stem("salon"), "salon");});
test("salons -> salon", function() {deepEqual( Stem("salons"), "salon");});
test("saloon -> saloon", function() {deepEqual( Stem("saloon"), "saloon");});
test("saloons -> saloon", function() {deepEqual( Stem("saloons"), "saloon");});
test("salt -> salt", function() {deepEqual( Stem("salt"), "salt");});
test("salted -> salt", function() {deepEqual( Stem("salted"), "salt");});
test("salter -> salter", function() {deepEqual( Stem("salter"), "salter");});
test("saltiers -> saltier", function() {deepEqual( Stem("saltiers"), "saltier");});
test("saltire -> saltir", function() {deepEqual( Stem("saltire"), "saltir");});
test("saltness -> salt", function() {deepEqual( Stem("saltness"), "salt");});
test("saltpetre -> saltpetr", function() {deepEqual( Stem("saltpetre"), "saltpetr");});
test("salts -> salt", function() {deepEqual( Stem("salts"), "salt");});
test("salutary -> salutari", function() {deepEqual( Stem("salutary"), "salutari");});
test("salutation -> salut", function() {deepEqual( Stem("salutation"), "salut");});
test("salutations -> salut", function() {deepEqual( Stem("salutations"), "salut");});
test("salute -> salut", function() {deepEqual( Stem("salute"), "salut");});
test("saluted -> salut", function() {deepEqual( Stem("saluted"), "salut");});
test("salutes -> salut", function() {deepEqual( Stem("salutes"), "salut");});
test("saluteth -> saluteth", function() {deepEqual( Stem("saluteth"), "saluteth");});
test("saluting -> salut", function() {deepEqual( Stem("saluting"), "salut");});
test("salv -> salv", function() {deepEqual( Stem("salv"), "salv");});
test("salvation -> salvat", function() {deepEqual( Stem("salvation"), "salvat");});
test("salve -> salv", function() {deepEqual( Stem("salve"), "salv");});
test("salver -> salver", function() {deepEqual( Stem("salver"), "salver");});
test("salvers -> salver", function() {deepEqual( Stem("salvers"), "salver");});
test("salving -> salv", function() {deepEqual( Stem("salving"), "salv");});
test("salvo -> salvo", function() {deepEqual( Stem("salvo"), "salvo");});
test("salvolatile -> salvolatil", function() {deepEqual( Stem("salvolatile"), "salvolatil");});
test("sam -> sam", function() {deepEqual( Stem("sam"), "sam");});
test("sambo -> sambo", function() {deepEqual( Stem("sambo"), "sambo");});
test("sambre -> sambr", function() {deepEqual( Stem("sambre"), "sambr");});
test("same -> same", function() {deepEqual( Stem("same"), "same");});
test("samingo -> samingo", function() {deepEqual( Stem("samingo"), "samingo");});
test("samp -> samp", function() {deepEqual( Stem("samp"), "samp");});
test("sampire -> sampir", function() {deepEqual( Stem("sampire"), "sampir");});
test("sample -> sampl", function() {deepEqual( Stem("sample"), "sampl");});
test("sampler -> sampler", function() {deepEqual( Stem("sampler"), "sampler");});
test("sampson -> sampson", function() {deepEqual( Stem("sampson"), "sampson");});
test("samson -> samson", function() {deepEqual( Stem("samson"), "samson");});
test("samsons -> samson", function() {deepEqual( Stem("samsons"), "samson");});
test("samuel -> samuel", function() {deepEqual( Stem("samuel"), "samuel");});
test("san -> san", function() {deepEqual( Stem("san"), "san");});
test("sancta -> sancta", function() {deepEqual( Stem("sancta"), "sancta");});
test("sanctified -> sanctifi", function() {deepEqual( Stem("sanctified"), "sanctifi");});
test("sanctifies -> sanctifi", function() {deepEqual( Stem("sanctifies"), "sanctifi");});
test("sanctify -> sanctifi", function() {deepEqual( Stem("sanctify"), "sanctifi");});
test("sanctimonies -> sanctimoni", function() {deepEqual( Stem("sanctimonies"), "sanctimoni");});
test("sanctimonious -> sanctimoni", function() {deepEqual( Stem("sanctimonious"), "sanctimoni");});
test("sanctimony -> sanctimoni", function() {deepEqual( Stem("sanctimony"), "sanctimoni");});
test("sanctities -> sanctiti", function() {deepEqual( Stem("sanctities"), "sanctiti");});
test("sanctity -> sanctiti", function() {deepEqual( Stem("sanctity"), "sanctiti");});
test("sanctuarize -> sanctuar", function() {deepEqual( Stem("sanctuarize"), "sanctuar");});
test("sanctuary -> sanctuari", function() {deepEqual( Stem("sanctuary"), "sanctuari");});
test("sand -> sand", function() {deepEqual( Stem("sand"), "sand");});
test("sandal -> sandal", function() {deepEqual( Stem("sandal"), "sandal");});
test("sandbag -> sandbag", function() {deepEqual( Stem("sandbag"), "sandbag");});
test("sanded -> sand", function() {deepEqual( Stem("sanded"), "sand");});
test("sandford -> sandford", function() {deepEqual( Stem("sandford"), "sandford");});
test("sands -> sand", function() {deepEqual( Stem("sands"), "sand");});
test("sandwich -> sandwich", function() {deepEqual( Stem("sandwich"), "sandwich");});
test("sandwiches -> sandwich", function() {deepEqual( Stem("sandwiches"), "sandwich");});
test("sandy -> sandi", function() {deepEqual( Stem("sandy"), "sandi");});
test("sandys -> sandi", function() {deepEqual( Stem("sandys"), "sandi");});
test("sang -> sang", function() {deepEqual( Stem("sang"), "sang");});
test("sanguine -> sanguin", function() {deepEqual( Stem("sanguine"), "sanguin");});
test("sanguis -> sangui", function() {deepEqual( Stem("sanguis"), "sangui");});
test("sangviches -> sangvich", function() {deepEqual( Stem("sangviches"), "sangvich");});
test("sanity -> saniti", function() {deepEqual( Stem("sanity"), "saniti");});
test("sank -> sank", function() {deepEqual( Stem("sank"), "sank");});
test("sans -> san", function() {deepEqual( Stem("sans"), "san");});
test("santrailles -> santrail", function() {deepEqual( Stem("santrailles"), "santrail");});
test("sap -> sap", function() {deepEqual( Stem("sap"), "sap");});
test("sapient -> sapient", function() {deepEqual( Stem("sapient"), "sapient");});
test("sapit -> sapit", function() {deepEqual( Stem("sapit"), "sapit");});
test("sapless -> sapless", function() {deepEqual( Stem("sapless"), "sapless");});
test("sapling -> sapl", function() {deepEqual( Stem("sapling"), "sapl");});
test("sapphire -> sapphir", function() {deepEqual( Stem("sapphire"), "sapphir");});
test("sapphires -> sapphir", function() {deepEqual( Stem("sapphires"), "sapphir");});
test("saqui -> saqui", function() {deepEqual( Stem("saqui"), "saqui");});
test("saracens -> saracen", function() {deepEqual( Stem("saracens"), "saracen");});
test("sarcasm -> sarcasm", function() {deepEqual( Stem("sarcasm"), "sarcasm");});
test("sarcasms -> sarcasm", function() {deepEqual( Stem("sarcasms"), "sarcasm");});
test("sarcastic -> sarcast", function() {deepEqual( Stem("sarcastic"), "sarcast");});
test("sarcastical -> sarcast", function() {deepEqual( Stem("sarcastical"), "sarcast");});
test("sarcastically -> sarcast", function() {deepEqual( Stem("sarcastically"), "sarcast");});
test("sarcenet -> sarcenet", function() {deepEqual( Stem("sarcenet"), "sarcenet");});
test("sard -> sard", function() {deepEqual( Stem("sard"), "sard");});
test("sardians -> sardian", function() {deepEqual( Stem("sardians"), "sardian");});
test("sardinia -> sardinia", function() {deepEqual( Stem("sardinia"), "sardinia");});
test("sardis -> sardi", function() {deepEqual( Stem("sardis"), "sardi");});
test("sardonic -> sardon", function() {deepEqual( Stem("sardonic"), "sardon");});
test("sardonically -> sardon", function() {deepEqual( Stem("sardonically"), "sardon");});
test("sarmons -> sarmon", function() {deepEqual( Stem("sarmons"), "sarmon");});
test("sarum -> sarum", function() {deepEqual( Stem("sarum"), "sarum");});
test("sarve -> sarv", function() {deepEqual( Stem("sarve"), "sarv");});
test("sash -> sash", function() {deepEqual( Stem("sash"), "sash");});
test("sashes -> sash", function() {deepEqual( Stem("sashes"), "sash");});
test("sat -> sat", function() {deepEqual( Stem("sat"), "sat");});
test("satan -> satan", function() {deepEqual( Stem("satan"), "satan");});
test("satchel -> satchel", function() {deepEqual( Stem("satchel"), "satchel");});
test("sate -> sate", function() {deepEqual( Stem("sate"), "sate");});
test("sated -> sate", function() {deepEqual( Stem("sated"), "sate");});
test("satiata -> satiata", function() {deepEqual( Stem("satiata"), "satiata");});
test("satiate -> satiat", function() {deepEqual( Stem("satiate"), "satiat");});
test("satiety -> satieti", function() {deepEqual( Stem("satiety"), "satieti");});
test("satin -> satin", function() {deepEqual( Stem("satin"), "satin");});
test("satire -> satir", function() {deepEqual( Stem("satire"), "satir");});
test("satires -> satir", function() {deepEqual( Stem("satires"), "satir");});
test("satirical -> satir", function() {deepEqual( Stem("satirical"), "satir");});
test("satirizing -> satir", function() {deepEqual( Stem("satirizing"), "satir");});
test("satis -> sati", function() {deepEqual( Stem("satis"), "sati");});
test("satisfaction -> satisfact", function() {deepEqual( Stem("satisfaction"), "satisfact");});
test("satisfactorily -> satisfactorili", function() {deepEqual( Stem("satisfactorily"), "satisfactorili");});
test("satisfactory -> satisfactori", function() {deepEqual( Stem("satisfactory"), "satisfactori");});
test("satisfied -> satisfi", function() {deepEqual( Stem("satisfied"), "satisfi");});
test("satisfies -> satisfi", function() {deepEqual( Stem("satisfies"), "satisfi");});
test("satisfy -> satisfi", function() {deepEqual( Stem("satisfy"), "satisfi");});
test("satisfying -> satisfi", function() {deepEqual( Stem("satisfying"), "satisfi");});
test("satting -> sat", function() {deepEqual( Stem("satting"), "sat");});
test("saturday -> saturdai", function() {deepEqual( Stem("saturday"), "saturdai");});
test("saturdays -> saturdai", function() {deepEqual( Stem("saturdays"), "saturdai");});
test("saturn -> saturn", function() {deepEqual( Stem("saturn"), "saturn");});
test("saturnine -> saturnin", function() {deepEqual( Stem("saturnine"), "saturnin");});
test("saturninus -> saturninu", function() {deepEqual( Stem("saturninus"), "saturninu");});
test("satyr -> satyr", function() {deepEqual( Stem("satyr"), "satyr");});
test("satyrs -> satyr", function() {deepEqual( Stem("satyrs"), "satyr");});
test("sauc -> sauc", function() {deepEqual( Stem("sauc"), "sauc");});
test("sauce -> sauc", function() {deepEqual( Stem("sauce"), "sauc");});
test("sauced -> sauc", function() {deepEqual( Stem("sauced"), "sauc");});
test("saucepan -> saucepan", function() {deepEqual( Stem("saucepan"), "saucepan");});
test("saucer -> saucer", function() {deepEqual( Stem("saucer"), "saucer");});
test("saucers -> saucer", function() {deepEqual( Stem("saucers"), "saucer");});
test("sauces -> sauc", function() {deepEqual( Stem("sauces"), "sauc");});
test("saucily -> saucili", function() {deepEqual( Stem("saucily"), "saucili");});
test("sauciness -> sauci", function() {deepEqual( Stem("sauciness"), "sauci");});
test("saucy -> sauci", function() {deepEqual( Stem("saucy"), "sauci");});
test("sauf -> sauf", function() {deepEqual( Stem("sauf"), "sauf");});
test("saufen -> saufen", function() {deepEqual( Stem("saufen"), "saufen");});
test("saunder -> saunder", function() {deepEqual( Stem("saunder"), "saunder");});
test("saunders -> saunder", function() {deepEqual( Stem("saunders"), "saunder");});
test("sauntering -> saunter", function() {deepEqual( Stem("sauntering"), "saunter");});
test("sausage -> sausag", function() {deepEqual( Stem("sausage"), "sausag");});
test("sausages -> sausag", function() {deepEqual( Stem("sausages"), "sausag");});
test("sauvage -> sauvag", function() {deepEqual( Stem("sauvage"), "sauvag");});
test("sav -> sav", function() {deepEqual( Stem("sav"), "sav");});
test("savage -> savag", function() {deepEqual( Stem("savage"), "savag");});
test("savagely -> savag", function() {deepEqual( Stem("savagely"), "savag");});
test("savageness -> savag", function() {deepEqual( Stem("savageness"), "savag");});
test("savagery -> savageri", function() {deepEqual( Stem("savagery"), "savageri");});
test("savages -> savag", function() {deepEqual( Stem("savages"), "savag");});
test("save -> save", function() {deepEqual( Stem("save"), "save");});
test("saved -> save", function() {deepEqual( Stem("saved"), "save");});
test("saves -> save", function() {deepEqual( Stem("saves"), "save");});
test("saving -> save", function() {deepEqual( Stem("saving"), "save");});
test("savings -> save", function() {deepEqual( Stem("savings"), "save");});
test("saviour -> saviour", function() {deepEqual( Stem("saviour"), "saviour");});
test("savory -> savori", function() {deepEqual( Stem("savory"), "savori");});
test("savour -> savour", function() {deepEqual( Stem("savour"), "savour");});
test("savouring -> savour", function() {deepEqual( Stem("savouring"), "savour");});
test("savours -> savour", function() {deepEqual( Stem("savours"), "savour");});
test("savoury -> savouri", function() {deepEqual( Stem("savoury"), "savouri");});
test("savoy -> savoi", function() {deepEqual( Stem("savoy"), "savoi");});
test("saw -> saw", function() {deepEqual( Stem("saw"), "saw");});
test("sawdust -> sawdust", function() {deepEqual( Stem("sawdust"), "sawdust");});
test("sawed -> saw", function() {deepEqual( Stem("sawed"), "saw");});
test("sawest -> sawest", function() {deepEqual( Stem("sawest"), "sawest");});
test("sawn -> sawn", function() {deepEqual( Stem("sawn"), "sawn");});
test("sawpit -> sawpit", function() {deepEqual( Stem("sawpit"), "sawpit");});
test("saws -> saw", function() {deepEqual( Stem("saws"), "saw");});
test("sawyer -> sawyer", function() {deepEqual( Stem("sawyer"), "sawyer");});
test("saxons -> saxon", function() {deepEqual( Stem("saxons"), "saxon");});
test("saxony -> saxoni", function() {deepEqual( Stem("saxony"), "saxoni");});
test("saxton -> saxton", function() {deepEqual( Stem("saxton"), "saxton");});
test("say -> sai", function() {deepEqual( Stem("say"), "sai");});
test("sayest -> sayest", function() {deepEqual( Stem("sayest"), "sayest");});
test("saying -> sai", function() {deepEqual( Stem("saying"), "sai");});
test("sayings -> sai", function() {deepEqual( Stem("sayings"), "sai");});
test("says -> sai", function() {deepEqual( Stem("says"), "sai");});
test("sayson -> sayson", function() {deepEqual( Stem("sayson"), "sayson");});
test("sayst -> sayst", function() {deepEqual( Stem("sayst"), "sayst");});
test("sblood -> sblood", function() {deepEqual( Stem("sblood"), "sblood");});
test("sborne -> sborn", function() {deepEqual( Stem("sborne"), "sborn");});
test("sc -> sc", function() {deepEqual( Stem("sc"), "sc");});
test("scab -> scab", function() {deepEqual( Stem("scab"), "scab");});
test("scabbard -> scabbard", function() {deepEqual( Stem("scabbard"), "scabbard");});
test("scabbards -> scabbard", function() {deepEqual( Stem("scabbards"), "scabbard");});
test("scabs -> scab", function() {deepEqual( Stem("scabs"), "scab");});
test("scaffold -> scaffold", function() {deepEqual( Stem("scaffold"), "scaffold");});
test("scaffoldage -> scaffoldag", function() {deepEqual( Stem("scaffoldage"), "scaffoldag");});
test("scal -> scal", function() {deepEqual( Stem("scal"), "scal");});
test("scald -> scald", function() {deepEqual( Stem("scald"), "scald");});
test("scalded -> scald", function() {deepEqual( Stem("scalded"), "scald");});
test("scalding -> scald", function() {deepEqual( Stem("scalding"), "scald");});
test("scale -> scale", function() {deepEqual( Stem("scale"), "scale");});
test("scaled -> scale", function() {deepEqual( Stem("scaled"), "scale");});
test("scales -> scale", function() {deepEqual( Stem("scales"), "scale");});
test("scaling -> scale", function() {deepEqual( Stem("scaling"), "scale");});
test("scall -> scall", function() {deepEqual( Stem("scall"), "scall");});
test("scalp -> scalp", function() {deepEqual( Stem("scalp"), "scalp");});
test("scalps -> scalp", function() {deepEqual( Stem("scalps"), "scalp");});
test("scaly -> scali", function() {deepEqual( Stem("scaly"), "scali");});
test("scamble -> scambl", function() {deepEqual( Stem("scamble"), "scambl");});
test("scambling -> scambl", function() {deepEqual( Stem("scambling"), "scambl");});
test("scamels -> scamel", function() {deepEqual( Stem("scamels"), "scamel");});
test("scamp -> scamp", function() {deepEqual( Stem("scamp"), "scamp");});
test("scan -> scan", function() {deepEqual( Stem("scan"), "scan");});
test("scandal -> scandal", function() {deepEqual( Stem("scandal"), "scandal");});
test("scandalised -> scandalis", function() {deepEqual( Stem("scandalised"), "scandalis");});
test("scandaliz -> scandaliz", function() {deepEqual( Stem("scandaliz"), "scandaliz");});
test("scandalous -> scandal", function() {deepEqual( Stem("scandalous"), "scandal");});
test("scandy -> scandi", function() {deepEqual( Stem("scandy"), "scandi");});
test("scann -> scann", function() {deepEqual( Stem("scann"), "scann");});
test("scanning -> scan", function() {deepEqual( Stem("scanning"), "scan");});
test("scant -> scant", function() {deepEqual( Stem("scant"), "scant");});
test("scanted -> scant", function() {deepEqual( Stem("scanted"), "scant");});
test("scanter -> scanter", function() {deepEqual( Stem("scanter"), "scanter");});
test("scanting -> scant", function() {deepEqual( Stem("scanting"), "scant");});
test("scantling -> scantl", function() {deepEqual( Stem("scantling"), "scantl");});
test("scants -> scant", function() {deepEqual( Stem("scants"), "scant");});
test("scanty -> scanti", function() {deepEqual( Stem("scanty"), "scanti");});
test("scap -> scap", function() {deepEqual( Stem("scap"), "scap");});
test("scape -> scape", function() {deepEqual( Stem("scape"), "scape");});
test("scaped -> scape", function() {deepEqual( Stem("scaped"), "scape");});
test("scapegrace -> scapegrac", function() {deepEqual( Stem("scapegrace"), "scapegrac");});
test("scapes -> scape", function() {deepEqual( Stem("scapes"), "scape");});
test("scapeth -> scapeth", function() {deepEqual( Stem("scapeth"), "scapeth");});
test("scar -> scar", function() {deepEqual( Stem("scar"), "scar");});
test("scarce -> scarc", function() {deepEqual( Stem("scarce"), "scarc");});
test("scarcely -> scarc", function() {deepEqual( Stem("scarcely"), "scarc");});
test("scarcity -> scarciti", function() {deepEqual( Stem("scarcity"), "scarciti");});
test("scare -> scare", function() {deepEqual( Stem("scare"), "scare");});
test("scarecrow -> scarecrow", function() {deepEqual( Stem("scarecrow"), "scarecrow");});
test("scarecrows -> scarecrow", function() {deepEqual( Stem("scarecrows"), "scarecrow");});
test("scared -> scare", function() {deepEqual( Stem("scared"), "scare");});
test("scarf -> scarf", function() {deepEqual( Stem("scarf"), "scarf");});
test("scarfed -> scarf", function() {deepEqual( Stem("scarfed"), "scarf");});
test("scarfs -> scarf", function() {deepEqual( Stem("scarfs"), "scarf");});
test("scaring -> scare", function() {deepEqual( Stem("scaring"), "scare");});
test("scarlet -> scarlet", function() {deepEqual( Stem("scarlet"), "scarlet");});
test("scarr -> scarr", function() {deepEqual( Stem("scarr"), "scarr");});
test("scarre -> scarr", function() {deepEqual( Stem("scarre"), "scarr");});
test("scars -> scar", function() {deepEqual( Stem("scars"), "scar");});
test("scarum -> scarum", function() {deepEqual( Stem("scarum"), "scarum");});
test("scarus -> scaru", function() {deepEqual( Stem("scarus"), "scaru");});
test("scath -> scath", function() {deepEqual( Stem("scath"), "scath");});
test("scathe -> scath", function() {deepEqual( Stem("scathe"), "scath");});
test("scathful -> scath", function() {deepEqual( Stem("scathful"), "scath");});
test("scatt -> scatt", function() {deepEqual( Stem("scatt"), "scatt");});
test("scatter -> scatter", function() {deepEqual( Stem("scatter"), "scatter");});
test("scattered -> scatter", function() {deepEqual( Stem("scattered"), "scatter");});
test("scattering -> scatter", function() {deepEqual( Stem("scattering"), "scatter");});
test("scatters -> scatter", function() {deepEqual( Stem("scatters"), "scatter");});
test("scelera -> scelera", function() {deepEqual( Stem("scelera"), "scelera");});
test("scelerisque -> scelerisqu", function() {deepEqual( Stem("scelerisque"), "scelerisqu");});
test("scene -> scene", function() {deepEqual( Stem("scene"), "scene");});
test("scenery -> sceneri", function() {deepEqual( Stem("scenery"), "sceneri");});
test("scenes -> scene", function() {deepEqual( Stem("scenes"), "scene");});
test("scent -> scent", function() {deepEqual( Stem("scent"), "scent");});
test("scented -> scent", function() {deepEqual( Stem("scented"), "scent");});
test("scept -> scept", function() {deepEqual( Stem("scept"), "scept");});
test("scepter -> scepter", function() {deepEqual( Stem("scepter"), "scepter");});
test("sceptical -> sceptic", function() {deepEqual( Stem("sceptical"), "sceptic");});
test("sceptre -> sceptr", function() {deepEqual( Stem("sceptre"), "sceptr");});
test("sceptred -> sceptr", function() {deepEqual( Stem("sceptred"), "sceptr");});
test("sceptres -> sceptr", function() {deepEqual( Stem("sceptres"), "sceptr");});
test("schapzuger -> schapzug", function() {deepEqual( Stem("schapzuger"), "schapzug");});
test("schedule -> schedul", function() {deepEqual( Stem("schedule"), "schedul");});
test("schedules -> schedul", function() {deepEqual( Stem("schedules"), "schedul");});
test("scheme -> scheme", function() {deepEqual( Stem("scheme"), "scheme");});
test("schemer -> schemer", function() {deepEqual( Stem("schemer"), "schemer");});
test("schemes -> scheme", function() {deepEqual( Stem("schemes"), "scheme");});
test("scheming -> scheme", function() {deepEqual( Stem("scheming"), "scheme");});
test("schimmels -> schimmel", function() {deepEqual( Stem("schimmels"), "schimmel");});
test("schinken -> schinken", function() {deepEqual( Stem("schinken"), "schinken");});
test("schlacht -> schlacht", function() {deepEqual( Stem("schlacht"), "schlacht");});
test("schlafrock -> schlafrock", function() {deepEqual( Stem("schlafrock"), "schlafrock");});
test("schlippenschloppen -> schlippenschloppen", function() {deepEqual( Stem("schlippenschloppen"), "schlippenschloppen");});
test("schloss -> schloss", function() {deepEqual( Stem("schloss"), "schloss");});
test("schlossberg -> schlossberg", function() {deepEqual( Stem("schlossberg"), "schlossberg");});
test("schlusselback -> schlusselback", function() {deepEqual( Stem("schlusselback"), "schlusselback");});
test("schnurrbart -> schnurrbart", function() {deepEqual( Stem("schnurrbart"), "schnurrbart");});
test("scholar -> scholar", function() {deepEqual( Stem("scholar"), "scholar");});
test("scholarly -> scholarli", function() {deepEqual( Stem("scholarly"), "scholarli");});
test("scholars -> scholar", function() {deepEqual( Stem("scholars"), "scholar");});
test("scholarships -> scholarship", function() {deepEqual( Stem("scholarships"), "scholarship");});
test("scholastic -> scholast", function() {deepEqual( Stem("scholastic"), "scholast");});
test("school -> school", function() {deepEqual( Stem("school"), "school");});
test("schoolboy -> schoolboi", function() {deepEqual( Stem("schoolboy"), "schoolboi");});
test("schoolboys -> schoolboi", function() {deepEqual( Stem("schoolboys"), "schoolboi");});
test("schoolfellow -> schoolfellow", function() {deepEqual( Stem("schoolfellow"), "schoolfellow");});
test("schoolfellows -> schoolfellow", function() {deepEqual( Stem("schoolfellows"), "schoolfellow");});
test("schoolgirl -> schoolgirl", function() {deepEqual( Stem("schoolgirl"), "schoolgirl");});
test("schooling -> school", function() {deepEqual( Stem("schooling"), "school");});
test("schoolmaster -> schoolmast", function() {deepEqual( Stem("schoolmaster"), "schoolmast");});
test("schoolmasters -> schoolmast", function() {deepEqual( Stem("schoolmasters"), "schoolmast");});
test("schoolmistress -> schoolmistress", function() {deepEqual( Stem("schoolmistress"), "schoolmistress");});
test("schoolmistresses -> schoolmistress", function() {deepEqual( Stem("schoolmistresses"), "schoolmistress");});
test("schoolroom -> schoolroom", function() {deepEqual( Stem("schoolroom"), "schoolroom");});
test("schools -> school", function() {deepEqual( Stem("schools"), "school");});
test("schoppenhausen -> schoppenhausen", function() {deepEqual( Stem("schoppenhausen"), "schoppenhausen");});
test("schrecklich -> schrecklich", function() {deepEqual( Stem("schrecklich"), "schrecklich");});
test("schroeder -> schroeder", function() {deepEqual( Stem("schroeder"), "schroeder");});
test("schwager -> schwager", function() {deepEqual( Stem("schwager"), "schwager");});
test("schwartzenberg -> schwartzenberg", function() {deepEqual( Stem("schwartzenberg"), "schwartzenberg");});
test("schwendler -> schwendler", function() {deepEqual( Stem("schwendler"), "schwendler");});
test("sciatica -> sciatica", function() {deepEqual( Stem("sciatica"), "sciatica");});
test("sciaticas -> sciatica", function() {deepEqual( Stem("sciaticas"), "sciatica");});
test("science -> scienc", function() {deepEqual( Stem("science"), "scienc");});
test("sciences -> scienc", function() {deepEqual( Stem("sciences"), "scienc");});
test("scientific -> scientif", function() {deepEqual( Stem("scientific"), "scientif");});
test("scimitar -> scimitar", function() {deepEqual( Stem("scimitar"), "scimitar");});
test("scimitars -> scimitar", function() {deepEqual( Stem("scimitars"), "scimitar");});
test("scion -> scion", function() {deepEqual( Stem("scion"), "scion");});
test("scions -> scion", function() {deepEqual( Stem("scions"), "scion");});
test("scissors -> scissor", function() {deepEqual( Stem("scissors"), "scissor");});
test("scoff -> scoff", function() {deepEqual( Stem("scoff"), "scoff");});
test("scoffer -> scoffer", function() {deepEqual( Stem("scoffer"), "scoffer");});
test("scoffing -> scof", function() {deepEqual( Stem("scoffing"), "scof");});
test("scoffs -> scoff", function() {deepEqual( Stem("scoffs"), "scoff");});
test("scoggin -> scoggin", function() {deepEqual( Stem("scoggin"), "scoggin");});
test("scold -> scold", function() {deepEqual( Stem("scold"), "scold");});
test("scolded -> scold", function() {deepEqual( Stem("scolded"), "scold");});
test("scolding -> scold", function() {deepEqual( Stem("scolding"), "scold");});
test("scolds -> scold", function() {deepEqual( Stem("scolds"), "scold");});
test("scollop -> scollop", function() {deepEqual( Stem("scollop"), "scollop");});
test("sconce -> sconc", function() {deepEqual( Stem("sconce"), "sconc");});
test("sconces -> sconc", function() {deepEqual( Stem("sconces"), "sconc");});
test("scone -> scone", function() {deepEqual( Stem("scone"), "scone");});
test("scope -> scope", function() {deepEqual( Stem("scope"), "scope");});
test("scopes -> scope", function() {deepEqual( Stem("scopes"), "scope");});
test("scorch -> scorch", function() {deepEqual( Stem("scorch"), "scorch");});
test("scorched -> scorch", function() {deepEqual( Stem("scorched"), "scorch");});
test("scorches -> scorch", function() {deepEqual( Stem("scorches"), "scorch");});
test("score -> score", function() {deepEqual( Stem("score"), "score");});
test("scored -> score", function() {deepEqual( Stem("scored"), "score");});
test("scores -> score", function() {deepEqual( Stem("scores"), "score");});
test("scoring -> score", function() {deepEqual( Stem("scoring"), "score");});
test("scorn -> scorn", function() {deepEqual( Stem("scorn"), "scorn");});
test("scorned -> scorn", function() {deepEqual( Stem("scorned"), "scorn");});
test("scornful -> scorn", function() {deepEqual( Stem("scornful"), "scorn");});
test("scornfully -> scornfulli", function() {deepEqual( Stem("scornfully"), "scornfulli");});
test("scorning -> scorn", function() {deepEqual( Stem("scorning"), "scorn");});
test("scorns -> scorn", function() {deepEqual( Stem("scorns"), "scorn");});
test("scorpion -> scorpion", function() {deepEqual( Stem("scorpion"), "scorpion");});
test("scorpions -> scorpion", function() {deepEqual( Stem("scorpions"), "scorpion");});
test("scot -> scot", function() {deepEqual( Stem("scot"), "scot");});
test("scotch -> scotch", function() {deepEqual( Stem("scotch"), "scotch");});
test("scotches -> scotch", function() {deepEqual( Stem("scotches"), "scotch");});
test("scotchmen -> scotchmen", function() {deepEqual( Stem("scotchmen"), "scotchmen");});
test("scotland -> scotland", function() {deepEqual( Stem("scotland"), "scotland");});
test("scots -> scot", function() {deepEqual( Stem("scots"), "scot");});
test("scott -> scott", function() {deepEqual( Stem("scott"), "scott");});
test("scottish -> scottish", function() {deepEqual( Stem("scottish"), "scottish");});
test("scoundrel -> scoundrel", function() {deepEqual( Stem("scoundrel"), "scoundrel");});
test("scoundrels -> scoundrel", function() {deepEqual( Stem("scoundrels"), "scoundrel");});
test("scour -> scour", function() {deepEqual( Stem("scour"), "scour");});
test("scoured -> scour", function() {deepEqual( Stem("scoured"), "scour");});
test("scourg -> scourg", function() {deepEqual( Stem("scourg"), "scourg");});
test("scourge -> scourg", function() {deepEqual( Stem("scourge"), "scourg");});
test("scouring -> scour", function() {deepEqual( Stem("scouring"), "scour");});
test("scout -> scout", function() {deepEqual( Stem("scout"), "scout");});
test("scouted -> scout", function() {deepEqual( Stem("scouted"), "scout");});
test("scouts -> scout", function() {deepEqual( Stem("scouts"), "scout");});
test("scowl -> scowl", function() {deepEqual( Stem("scowl"), "scowl");});
test("scowled -> scowl", function() {deepEqual( Stem("scowled"), "scowl");});
test("scowling -> scowl", function() {deepEqual( Stem("scowling"), "scowl");});
test("scraggy -> scraggi", function() {deepEqual( Stem("scraggy"), "scraggi");});
test("scrambled -> scrambl", function() {deepEqual( Stem("scrambled"), "scrambl");});
test("scrap -> scrap", function() {deepEqual( Stem("scrap"), "scrap");});
test("scrape -> scrape", function() {deepEqual( Stem("scrape"), "scrape");});
test("scraped -> scrape", function() {deepEqual( Stem("scraped"), "scrape");});
test("scrapes -> scrape", function() {deepEqual( Stem("scrapes"), "scrape");});
test("scraping -> scrape", function() {deepEqual( Stem("scraping"), "scrape");});
test("scraps -> scrap", function() {deepEqual( Stem("scraps"), "scrap");});
test("scratch -> scratch", function() {deepEqual( Stem("scratch"), "scratch");});
test("scratched -> scratch", function() {deepEqual( Stem("scratched"), "scratch");});
test("scratches -> scratch", function() {deepEqual( Stem("scratches"), "scratch");});
test("scratching -> scratch", function() {deepEqual( Stem("scratching"), "scratch");});
test("scratchleys -> scratchlei", function() {deepEqual( Stem("scratchleys"), "scratchlei");});
test("scrawled -> scrawl", function() {deepEqual( Stem("scrawled"), "scrawl");});
test("scrawls -> scrawl", function() {deepEqual( Stem("scrawls"), "scrawl");});
test("scream -> scream", function() {deepEqual( Stem("scream"), "scream");});
test("screamed -> scream", function() {deepEqual( Stem("screamed"), "scream");});
test("screaming -> scream", function() {deepEqual( Stem("screaming"), "scream");});
test("screams -> scream", function() {deepEqual( Stem("screams"), "scream");});
test("screech -> screech", function() {deepEqual( Stem("screech"), "screech");});
test("screeching -> screech", function() {deepEqual( Stem("screeching"), "screech");});
test("screen -> screen", function() {deepEqual( Stem("screen"), "screen");});
test("screened -> screen", function() {deepEqual( Stem("screened"), "screen");});
test("screens -> screen", function() {deepEqual( Stem("screens"), "screen");});
test("screw -> screw", function() {deepEqual( Stem("screw"), "screw");});
test("screwed -> screw", function() {deepEqual( Stem("screwed"), "screw");});
test("screws -> screw", function() {deepEqual( Stem("screws"), "screw");});
test("scribbl -> scribbl", function() {deepEqual( Stem("scribbl"), "scribbl");});
test("scribbled -> scribbl", function() {deepEqual( Stem("scribbled"), "scribbl");});
test("scribbling -> scribbl", function() {deepEqual( Stem("scribbling"), "scribbl");});
test("scribe -> scribe", function() {deepEqual( Stem("scribe"), "scribe");});
test("scribes -> scribe", function() {deepEqual( Stem("scribes"), "scribe");});
test("scrimers -> scrimer", function() {deepEqual( Stem("scrimers"), "scrimer");});
test("scrip -> scrip", function() {deepEqual( Stem("scrip"), "scrip");});
test("scrippage -> scrippag", function() {deepEqual( Stem("scrippage"), "scrippag");});
test("scripture -> scriptur", function() {deepEqual( Stem("scripture"), "scriptur");});
test("scriptures -> scriptur", function() {deepEqual( Stem("scriptures"), "scriptur");});
test("scrivener -> scriven", function() {deepEqual( Stem("scrivener"), "scriven");});
test("scroggins -> scroggin", function() {deepEqual( Stem("scroggins"), "scroggin");});
test("scroll -> scroll", function() {deepEqual( Stem("scroll"), "scroll");});
test("scrolls -> scroll", function() {deepEqual( Stem("scrolls"), "scroll");});
test("scroop -> scroop", function() {deepEqual( Stem("scroop"), "scroop");});
test("scrowl -> scrowl", function() {deepEqual( Stem("scrowl"), "scrowl");});
test("scroyles -> scroyl", function() {deepEqual( Stem("scroyles"), "scroyl");});
test("scrubbed -> scrub", function() {deepEqual( Stem("scrubbed"), "scrub");});
test("scruple -> scrupl", function() {deepEqual( Stem("scruple"), "scrupl");});
test("scruples -> scrupl", function() {deepEqual( Stem("scruples"), "scrupl");});
test("scrupulous -> scrupul", function() {deepEqual( Stem("scrupulous"), "scrupul");});
test("scudi -> scudi", function() {deepEqual( Stem("scudi"), "scudi");});
test("scuffles -> scuffl", function() {deepEqual( Stem("scuffles"), "scuffl");});
test("scuffling -> scuffl", function() {deepEqual( Stem("scuffling"), "scuffl");});
test("scullery -> sculleri", function() {deepEqual( Stem("scullery"), "sculleri");});
test("scullion -> scullion", function() {deepEqual( Stem("scullion"), "scullion");});
test("sculls -> scull", function() {deepEqual( Stem("sculls"), "scull");});
test("scully -> sculli", function() {deepEqual( Stem("scully"), "sculli");});
test("sculptors -> sculptor", function() {deepEqual( Stem("sculptors"), "sculptor");});
test("sculpture -> sculptur", function() {deepEqual( Stem("sculpture"), "sculptur");});
test("scum -> scum", function() {deepEqual( Stem("scum"), "scum");});
test("scurril -> scurril", function() {deepEqual( Stem("scurril"), "scurril");});
test("scurrility -> scurril", function() {deepEqual( Stem("scurrility"), "scurril");});
test("scurrilous -> scurril", function() {deepEqual( Stem("scurrilous"), "scurril");});
test("scurrying -> scurri", function() {deepEqual( Stem("scurrying"), "scurri");});
test("scurvy -> scurvi", function() {deepEqual( Stem("scurvy"), "scurvi");});
test("scuse -> scuse", function() {deepEqual( Stem("scuse"), "scuse");});
test("scut -> scut", function() {deepEqual( Stem("scut"), "scut");});
test("scutcheon -> scutcheon", function() {deepEqual( Stem("scutcheon"), "scutcheon");});
test("scutcheons -> scutcheon", function() {deepEqual( Stem("scutcheons"), "scutcheon");});
test("scuttle -> scuttl", function() {deepEqual( Stem("scuttle"), "scuttl");});
test("scylla -> scylla", function() {deepEqual( Stem("scylla"), "scylla");});
test("scythe -> scyth", function() {deepEqual( Stem("scythe"), "scyth");});
test("scythed -> scyth", function() {deepEqual( Stem("scythed"), "scyth");});
test("scythia -> scythia", function() {deepEqual( Stem("scythia"), "scythia");});
test("scythian -> scythian", function() {deepEqual( Stem("scythian"), "scythian");});
test("sdeath -> sdeath", function() {deepEqual( Stem("sdeath"), "sdeath");});
test("se -> se", function() {deepEqual( Stem("se"), "se");});
test("sea -> sea", function() {deepEqual( Stem("sea"), "sea");});
test("seacoal -> seacoal", function() {deepEqual( Stem("seacoal"), "seacoal");});
test("seafaring -> seafar", function() {deepEqual( Stem("seafaring"), "seafar");});
test("seal -> seal", function() {deepEqual( Stem("seal"), "seal");});
test("sealed -> seal", function() {deepEqual( Stem("sealed"), "seal");});
test("sealing -> seal", function() {deepEqual( Stem("sealing"), "seal");});
test("seals -> seal", function() {deepEqual( Stem("seals"), "seal");});
test("sealskin -> sealskin", function() {deepEqual( Stem("sealskin"), "sealskin");});
test("seam -> seam", function() {deepEqual( Stem("seam"), "seam");});
test("seamen -> seamen", function() {deepEqual( Stem("seamen"), "seamen");});
test("seams -> seam", function() {deepEqual( Stem("seams"), "seam");});
test("seamy -> seami", function() {deepEqual( Stem("seamy"), "seami");});
test("seaport -> seaport", function() {deepEqual( Stem("seaport"), "seaport");});
test("sear -> sear", function() {deepEqual( Stem("sear"), "sear");});
test("searce -> searc", function() {deepEqual( Stem("searce"), "searc");});
test("search -> search", function() {deepEqual( Stem("search"), "search");});
test("searchers -> searcher", function() {deepEqual( Stem("searchers"), "searcher");});
test("searches -> search", function() {deepEqual( Stem("searches"), "search");});
test("searcheth -> searcheth", function() {deepEqual( Stem("searcheth"), "searcheth");});
test("searching -> search", function() {deepEqual( Stem("searching"), "search");});
test("seared -> sear", function() {deepEqual( Stem("seared"), "sear");});
test("seas -> sea", function() {deepEqual( Stem("seas"), "sea");});
test("seasick -> seasick", function() {deepEqual( Stem("seasick"), "seasick");});
test("seaside -> seasid", function() {deepEqual( Stem("seaside"), "seasid");});
test("season -> season", function() {deepEqual( Stem("season"), "season");});
test("seasonable -> season", function() {deepEqual( Stem("seasonable"), "season");});
test("seasoned -> season", function() {deepEqual( Stem("seasoned"), "season");});
test("seasons -> season", function() {deepEqual( Stem("seasons"), "season");});
test("seat -> seat", function() {deepEqual( Stem("seat"), "seat");});
test("seated -> seat", function() {deepEqual( Stem("seated"), "seat");});
test("seating -> seat", function() {deepEqual( Stem("seating"), "seat");});
test("seats -> seat", function() {deepEqual( Stem("seats"), "seat");});
test("seawards -> seaward", function() {deepEqual( Stem("seawards"), "seaward");});
test("sebastian -> sebastian", function() {deepEqual( Stem("sebastian"), "sebastian");});
test("secede -> seced", function() {deepEqual( Stem("secede"), "seced");});
test("seceded -> seced", function() {deepEqual( Stem("seceded"), "seced");});
test("sech -> sech", function() {deepEqual( Stem("sech"), "sech");});
test("secluded -> seclud", function() {deepEqual( Stem("secluded"), "seclud");});
test("seclusion -> seclus", function() {deepEqual( Stem("seclusion"), "seclus");});
test("second -> second", function() {deepEqual( Stem("second"), "second");});
test("secondarily -> secondarili", function() {deepEqual( Stem("secondarily"), "secondarili");});
test("secondary -> secondari", function() {deepEqual( Stem("secondary"), "secondari");});
test("seconded -> second", function() {deepEqual( Stem("seconded"), "second");});
test("secondly -> secondli", function() {deepEqual( Stem("secondly"), "secondli");});
test("seconds -> second", function() {deepEqual( Stem("seconds"), "second");});
test("secrecy -> secreci", function() {deepEqual( Stem("secrecy"), "secreci");});
test("secret -> secret", function() {deepEqual( Stem("secret"), "secret");});
test("secretaire -> secretair", function() {deepEqual( Stem("secretaire"), "secretair");});
test("secretaries -> secretari", function() {deepEqual( Stem("secretaries"), "secretari");});
test("secretary -> secretari", function() {deepEqual( Stem("secretary"), "secretari");});
test("secreted -> secret", function() {deepEqual( Stem("secreted"), "secret");});
test("secreting -> secret", function() {deepEqual( Stem("secreting"), "secret");});
test("secretly -> secretli", function() {deepEqual( Stem("secretly"), "secretli");});
test("secrets -> secret", function() {deepEqual( Stem("secrets"), "secret");});
test("sect -> sect", function() {deepEqual( Stem("sect"), "sect");});
test("sectary -> sectari", function() {deepEqual( Stem("sectary"), "sectari");});
test("sects -> sect", function() {deepEqual( Stem("sects"), "sect");});
test("secundo -> secundo", function() {deepEqual( Stem("secundo"), "secundo");});
test("secure -> secur", function() {deepEqual( Stem("secure"), "secur");});
test("secured -> secur", function() {deepEqual( Stem("secured"), "secur");});
test("securely -> secur", function() {deepEqual( Stem("securely"), "secur");});
test("securing -> secur", function() {deepEqual( Stem("securing"), "secur");});
test("securities -> secur", function() {deepEqual( Stem("securities"), "secur");});
test("security -> secur", function() {deepEqual( Stem("security"), "secur");});
test("sed -> sed", function() {deepEqual( Stem("sed"), "sed");});
test("sedan -> sedan", function() {deepEqual( Stem("sedan"), "sedan");});
test("seddons -> seddon", function() {deepEqual( Stem("seddons"), "seddon");});
test("sedg -> sedg", function() {deepEqual( Stem("sedg"), "sedg");});
test("sedge -> sedg", function() {deepEqual( Stem("sedge"), "sedg");});
test("sedges -> sedg", function() {deepEqual( Stem("sedges"), "sedg");});
test("sedgy -> sedgi", function() {deepEqual( Stem("sedgy"), "sedgi");});
test("sediment -> sediment", function() {deepEqual( Stem("sediment"), "sediment");});
test("sedition -> sedit", function() {deepEqual( Stem("sedition"), "sedit");});
test("seditious -> sediti", function() {deepEqual( Stem("seditious"), "sediti");});
test("sedley -> sedlei", function() {deepEqual( Stem("sedley"), "sedlei");});
test("sedleys -> sedlei", function() {deepEqual( Stem("sedleys"), "sedlei");});
test("seduc -> seduc", function() {deepEqual( Stem("seduc"), "seduc");});
test("seduce -> seduc", function() {deepEqual( Stem("seduce"), "seduc");});
test("seduced -> seduc", function() {deepEqual( Stem("seduced"), "seduc");});
test("seducer -> seduc", function() {deepEqual( Stem("seducer"), "seduc");});
test("seducing -> seduc", function() {deepEqual( Stem("seducing"), "seduc");});
test("seduction -> seduct", function() {deepEqual( Stem("seduction"), "seduct");});
test("sedulity -> sedul", function() {deepEqual( Stem("sedulity"), "sedul");});
test("sedulously -> sedul", function() {deepEqual( Stem("sedulously"), "sedul");});
test("see -> see", function() {deepEqual( Stem("see"), "see");});
test("seed -> seed", function() {deepEqual( Stem("seed"), "seed");});
test("seeded -> seed", function() {deepEqual( Stem("seeded"), "seed");});
test("seedness -> seed", function() {deepEqual( Stem("seedness"), "seed");});
test("seeds -> seed", function() {deepEqual( Stem("seeds"), "seed");});
test("seedsman -> seedsman", function() {deepEqual( Stem("seedsman"), "seedsman");});
test("seein -> seein", function() {deepEqual( Stem("seein"), "seein");});
test("seeing -> see", function() {deepEqual( Stem("seeing"), "see");});
test("seek -> seek", function() {deepEqual( Stem("seek"), "seek");});
test("seeking -> seek", function() {deepEqual( Stem("seeking"), "seek");});
test("seeks -> seek", function() {deepEqual( Stem("seeks"), "seek");});
test("seel -> seel", function() {deepEqual( Stem("seel"), "seel");});
test("seeling -> seel", function() {deepEqual( Stem("seeling"), "seel");});
test("seely -> seeli", function() {deepEqual( Stem("seely"), "seeli");});
test("seem -> seem", function() {deepEqual( Stem("seem"), "seem");});
test("seemed -> seem", function() {deepEqual( Stem("seemed"), "seem");});
test("seemers -> seemer", function() {deepEqual( Stem("seemers"), "seemer");});
test("seemest -> seemest", function() {deepEqual( Stem("seemest"), "seemest");});
test("seemeth -> seemeth", function() {deepEqual( Stem("seemeth"), "seemeth");});
test("seeming -> seem", function() {deepEqual( Stem("seeming"), "seem");});
test("seemingly -> seemingli", function() {deepEqual( Stem("seemingly"), "seemingli");});
test("seemly -> seemli", function() {deepEqual( Stem("seemly"), "seemli");});
test("seems -> seem", function() {deepEqual( Stem("seems"), "seem");});
test("seen -> seen", function() {deepEqual( Stem("seen"), "seen");});
test("seer -> seer", function() {deepEqual( Stem("seer"), "seer");});
test("sees -> see", function() {deepEqual( Stem("sees"), "see");});
test("seese -> sees", function() {deepEqual( Stem("seese"), "sees");});
test("seest -> seest", function() {deepEqual( Stem("seest"), "seest");});
test("seethe -> seeth", function() {deepEqual( Stem("seethe"), "seeth");});
test("seethes -> seeth", function() {deepEqual( Stem("seethes"), "seeth");});
test("seething -> seeth", function() {deepEqual( Stem("seething"), "seeth");});
test("seeting -> seet", function() {deepEqual( Stem("seeting"), "seet");});
test("segaw -> segaw", function() {deepEqual( Stem("segaw"), "segaw");});
test("segregation -> segreg", function() {deepEqual( Stem("segregation"), "segreg");});
test("sehnsucht -> sehnsucht", function() {deepEqual( Stem("sehnsucht"), "sehnsucht");});
test("seigneur -> seigneur", function() {deepEqual( Stem("seigneur"), "seigneur");});
test("seigneurs -> seigneur", function() {deepEqual( Stem("seigneurs"), "seigneur");});
test("seiz -> seiz", function() {deepEqual( Stem("seiz"), "seiz");});
test("seize -> seiz", function() {deepEqual( Stem("seize"), "seiz");});
test("seized -> seiz", function() {deepEqual( Stem("seized"), "seiz");});
test("seizes -> seiz", function() {deepEqual( Stem("seizes"), "seiz");});
test("seizeth -> seizeth", function() {deepEqual( Stem("seizeth"), "seizeth");});
test("seizing -> seiz", function() {deepEqual( Stem("seizing"), "seiz");});
test("seizure -> seizur", function() {deepEqual( Stem("seizure"), "seizur");});
test("seld -> seld", function() {deepEqual( Stem("seld"), "seld");});
test("seldom -> seldom", function() {deepEqual( Stem("seldom"), "seldom");});
test("select -> select", function() {deepEqual( Stem("select"), "select");});
test("selected -> select", function() {deepEqual( Stem("selected"), "select");});
test("selecting -> select", function() {deepEqual( Stem("selecting"), "select");});
test("selection -> select", function() {deepEqual( Stem("selection"), "select");});
test("seleucus -> seleucu", function() {deepEqual( Stem("seleucus"), "seleucu");});
test("self -> self", function() {deepEqual( Stem("self"), "self");});
test("selfish -> selfish", function() {deepEqual( Stem("selfish"), "selfish");});
test("selfishly -> selfishli", function() {deepEqual( Stem("selfishly"), "selfishli");});
test("selfishness -> selfish", function() {deepEqual( Stem("selfishness"), "selfish");});
test("selfsame -> selfsam", function() {deepEqual( Stem("selfsame"), "selfsam");});
test("sell -> sell", function() {deepEqual( Stem("sell"), "sell");});
test("seller -> seller", function() {deepEqual( Stem("seller"), "seller");});
test("selleries -> selleri", function() {deepEqual( Stem("selleries"), "selleri");});
test("sellers -> seller", function() {deepEqual( Stem("sellers"), "seller");});
test("selling -> sell", function() {deepEqual( Stem("selling"), "sell");});
test("sells -> sell", function() {deepEqual( Stem("sells"), "sell");});
test("selves -> selv", function() {deepEqual( Stem("selves"), "selv");});
test("semblable -> semblabl", function() {deepEqual( Stem("semblable"), "semblabl");});
test("semblably -> semblabl", function() {deepEqual( Stem("semblably"), "semblabl");});
test("semblance -> semblanc", function() {deepEqual( Stem("semblance"), "semblanc");});
test("semblances -> semblanc", function() {deepEqual( Stem("semblances"), "semblanc");});
test("semblative -> sembl", function() {deepEqual( Stem("semblative"), "sembl");});
test("semele -> semel", function() {deepEqual( Stem("semele"), "semel");});
test("semi -> semi", function() {deepEqual( Stem("semi"), "semi");});
test("semicircle -> semicircl", function() {deepEqual( Stem("semicircle"), "semicircl");});
test("seminary -> seminari", function() {deepEqual( Stem("seminary"), "seminari");});
test("semiramis -> semirami", function() {deepEqual( Stem("semiramis"), "semirami");});
test("semper -> semper", function() {deepEqual( Stem("semper"), "semper");});
test("sempronius -> semproniu", function() {deepEqual( Stem("sempronius"), "semproniu");});
test("senate -> senat", function() {deepEqual( Stem("senate"), "senat");});
test("senator -> senat", function() {deepEqual( Stem("senator"), "senat");});
test("senators -> senat", function() {deepEqual( Stem("senators"), "senat");});
test("send -> send", function() {deepEqual( Stem("send"), "send");});
test("sender -> sender", function() {deepEqual( Stem("sender"), "sender");});
test("sendeth -> sendeth", function() {deepEqual( Stem("sendeth"), "sendeth");});
test("sending -> send", function() {deepEqual( Stem("sending"), "send");});
test("sends -> send", function() {deepEqual( Stem("sends"), "send");});
test("seneca -> seneca", function() {deepEqual( Stem("seneca"), "seneca");});
test("senile -> senil", function() {deepEqual( Stem("senile"), "senil");});
test("senior -> senior", function() {deepEqual( Stem("senior"), "senior");});
test("seniority -> senior", function() {deepEqual( Stem("seniority"), "senior");});
test("seniory -> seniori", function() {deepEqual( Stem("seniory"), "seniori");});
test("senis -> seni", function() {deepEqual( Stem("senis"), "seni");});
test("sennet -> sennet", function() {deepEqual( Stem("sennet"), "sennet");});
test("senoys -> senoi", function() {deepEqual( Stem("senoys"), "senoi");});
test("sensation -> sensat", function() {deepEqual( Stem("sensation"), "sensat");});
test("sensations -> sensat", function() {deepEqual( Stem("sensations"), "sensat");});
test("sense -> sens", function() {deepEqual( Stem("sense"), "sens");});
test("senseless -> senseless", function() {deepEqual( Stem("senseless"), "senseless");});
test("senses -> sens", function() {deepEqual( Stem("senses"), "sens");});
test("sensibilities -> sensibl", function() {deepEqual( Stem("sensibilities"), "sensibl");});
test("sensibility -> sensibl", function() {deepEqual( Stem("sensibility"), "sensibl");});
test("sensible -> sensibl", function() {deepEqual( Stem("sensible"), "sensibl");});
test("sensibly -> sensibli", function() {deepEqual( Stem("sensibly"), "sensibli");});
test("sensitive -> sensit", function() {deepEqual( Stem("sensitive"), "sensit");});
test("sensual -> sensual", function() {deepEqual( Stem("sensual"), "sensual");});
test("sensuality -> sensual", function() {deepEqual( Stem("sensuality"), "sensual");});
test("sent -> sent", function() {deepEqual( Stem("sent"), "sent");});
test("sentenc -> sentenc", function() {deepEqual( Stem("sentenc"), "sentenc");});
test("sentence -> sentenc", function() {deepEqual( Stem("sentence"), "sentenc");});
test("sentences -> sentenc", function() {deepEqual( Stem("sentences"), "sentenc");});
test("sententious -> sententi", function() {deepEqual( Stem("sententious"), "sententi");});
test("sentiment -> sentiment", function() {deepEqual( Stem("sentiment"), "sentiment");});
test("sentimental -> sentiment", function() {deepEqual( Stem("sentimental"), "sentiment");});
test("sentimentalists -> sentimentalist", function() {deepEqual( Stem("sentimentalists"), "sentimentalist");});
test("sentimentality -> sentiment", function() {deepEqual( Stem("sentimentality"), "sentiment");});
test("sentimentally -> sentiment", function() {deepEqual( Stem("sentimentally"), "sentiment");});
test("sentiments -> sentiment", function() {deepEqual( Stem("sentiments"), "sentiment");});
test("sentinel -> sentinel", function() {deepEqual( Stem("sentinel"), "sentinel");});
test("sentinels -> sentinel", function() {deepEqual( Stem("sentinels"), "sentinel");});
test("sentoit -> sentoit", function() {deepEqual( Stem("sentoit"), "sentoit");});
test("sentries -> sentri", function() {deepEqual( Stem("sentries"), "sentri");});
test("sentry -> sentri", function() {deepEqual( Stem("sentry"), "sentri");});
test("separable -> separ", function() {deepEqual( Stem("separable"), "separ");});
test("separate -> separ", function() {deepEqual( Stem("separate"), "separ");});
test("separated -> separ", function() {deepEqual( Stem("separated"), "separ");});
test("separates -> separ", function() {deepEqual( Stem("separates"), "separ");});
test("separation -> separ", function() {deepEqual( Stem("separation"), "separ");});
test("september -> septemb", function() {deepEqual( Stem("september"), "septemb");});
test("septentrion -> septentrion", function() {deepEqual( Stem("septentrion"), "septentrion");});
test("sepulchral -> sepulchr", function() {deepEqual( Stem("sepulchral"), "sepulchr");});
test("sepulchre -> sepulchr", function() {deepEqual( Stem("sepulchre"), "sepulchr");});
test("sepulchres -> sepulchr", function() {deepEqual( Stem("sepulchres"), "sepulchr");});
test("sepulchring -> sepulchr", function() {deepEqual( Stem("sepulchring"), "sepulchr");});
test("sequel -> sequel", function() {deepEqual( Stem("sequel"), "sequel");});
test("sequence -> sequenc", function() {deepEqual( Stem("sequence"), "sequenc");});
test("sequent -> sequent", function() {deepEqual( Stem("sequent"), "sequent");});
test("sequest -> sequest", function() {deepEqual( Stem("sequest"), "sequest");});
test("sequester -> sequest", function() {deepEqual( Stem("sequester"), "sequest");});
test("sequestered -> sequest", function() {deepEqual( Stem("sequestered"), "sequest");});
test("sequestration -> sequestr", function() {deepEqual( Stem("sequestration"), "sequestr");});
test("sere -> sere", function() {deepEqual( Stem("sere"), "sere");});
test("serene -> seren", function() {deepEqual( Stem("serene"), "seren");});
test("serenely -> seren", function() {deepEqual( Stem("serenely"), "seren");});
test("serenis -> sereni", function() {deepEqual( Stem("serenis"), "sereni");});
test("serenities -> seren", function() {deepEqual( Stem("serenities"), "seren");});
test("serge -> serg", function() {deepEqual( Stem("serge"), "serg");});
test("sergeant -> sergeant", function() {deepEqual( Stem("sergeant"), "sergeant");});
test("sergeants -> sergeant", function() {deepEqual( Stem("sergeants"), "sergeant");});
test("series -> seri", function() {deepEqual( Stem("series"), "seri");});
test("serious -> seriou", function() {deepEqual( Stem("serious"), "seriou");});
test("seriously -> serious", function() {deepEqual( Stem("seriously"), "serious");});
test("sermon -> sermon", function() {deepEqual( Stem("sermon"), "sermon");});
test("sermonised -> sermonis", function() {deepEqual( Stem("sermonised"), "sermonis");});
test("sermonising -> sermonis", function() {deepEqual( Stem("sermonising"), "sermonis");});
test("sermons -> sermon", function() {deepEqual( Stem("sermons"), "sermon");});
test("serpent -> serpent", function() {deepEqual( Stem("serpent"), "serpent");});
test("serpentine -> serpentin", function() {deepEqual( Stem("serpentine"), "serpentin");});
test("serpents -> serpent", function() {deepEqual( Stem("serpents"), "serpent");});
test("serpigo -> serpigo", function() {deepEqual( Stem("serpigo"), "serpigo");});
test("serred -> ser", function() {deepEqual( Stem("serred"), "ser");});
test("serv -> serv", function() {deepEqual( Stem("serv"), "serv");});
test("servant -> servant", function() {deepEqual( Stem("servant"), "servant");});
test("servanted -> servant", function() {deepEqual( Stem("servanted"), "servant");});
test("servants -> servant", function() {deepEqual( Stem("servants"), "servant");});
test("serve -> serv", function() {deepEqual( Stem("serve"), "serv");});
test("served -> serv", function() {deepEqual( Stem("served"), "serv");});
test("server -> server", function() {deepEqual( Stem("server"), "server");});
test("serves -> serv", function() {deepEqual( Stem("serves"), "serv");});
test("serveth -> serveth", function() {deepEqual( Stem("serveth"), "serveth");});
test("service -> servic", function() {deepEqual( Stem("service"), "servic");});
test("serviceable -> servic", function() {deepEqual( Stem("serviceable"), "servic");});
test("services -> servic", function() {deepEqual( Stem("services"), "servic");});
test("servile -> servil", function() {deepEqual( Stem("servile"), "servil");});
test("servility -> servil", function() {deepEqual( Stem("servility"), "servil");});
test("servilius -> serviliu", function() {deepEqual( Stem("servilius"), "serviliu");});
test("serving -> serv", function() {deepEqual( Stem("serving"), "serv");});
test("servingman -> servingman", function() {deepEqual( Stem("servingman"), "servingman");});
test("servingmen -> servingmen", function() {deepEqual( Stem("servingmen"), "servingmen");});
test("serviteur -> serviteur", function() {deepEqual( Stem("serviteur"), "serviteur");});
test("servitor -> servitor", function() {deepEqual( Stem("servitor"), "servitor");});
test("servitors -> servitor", function() {deepEqual( Stem("servitors"), "servitor");});
test("servitude -> servitud", function() {deepEqual( Stem("servitude"), "servitud");});
test("servt -> servt", function() {deepEqual( Stem("servt"), "servt");});
test("sessa -> sessa", function() {deepEqual( Stem("sessa"), "sessa");});
test("session -> session", function() {deepEqual( Stem("session"), "session");});
test("sessions -> session", function() {deepEqual( Stem("sessions"), "session");});
test("sestos -> sesto", function() {deepEqual( Stem("sestos"), "sesto");});
test("set -> set", function() {deepEqual( Stem("set"), "set");});
test("setebos -> setebo", function() {deepEqual( Stem("setebos"), "setebo");});
test("sets -> set", function() {deepEqual( Stem("sets"), "set");});
test("setter -> setter", function() {deepEqual( Stem("setter"), "setter");});
test("settin -> settin", function() {deepEqual( Stem("settin"), "settin");});
test("setting -> set", function() {deepEqual( Stem("setting"), "set");});
test("settle -> settl", function() {deepEqual( Stem("settle"), "settl");});
test("settled -> settl", function() {deepEqual( Stem("settled"), "settl");});
test("settlement -> settlement", function() {deepEqual( Stem("settlement"), "settlement");});
test("settlest -> settlest", function() {deepEqual( Stem("settlest"), "settlest");});
test("settling -> settl", function() {deepEqual( Stem("settling"), "settl");});
test("sev -> sev", function() {deepEqual( Stem("sev"), "sev");});
test("seven -> seven", function() {deepEqual( Stem("seven"), "seven");});
test("sevenfold -> sevenfold", function() {deepEqual( Stem("sevenfold"), "sevenfold");});
test("sevennight -> sevennight", function() {deepEqual( Stem("sevennight"), "sevennight");});
test("sevenpence -> sevenp", function() {deepEqual( Stem("sevenpence"), "sevenp");});
test("sevens -> seven", function() {deepEqual( Stem("sevens"), "seven");});
test("seventeen -> seventeen", function() {deepEqual( Stem("seventeen"), "seventeen");});
test("seventeenth -> seventeenth", function() {deepEqual( Stem("seventeenth"), "seventeenth");});
test("seventh -> seventh", function() {deepEqual( Stem("seventh"), "seventh");});
test("seventy -> seventi", function() {deepEqual( Stem("seventy"), "seventi");});
test("sever -> sever", function() {deepEqual( Stem("sever"), "sever");});
test("several -> sever", function() {deepEqual( Stem("several"), "sever");});
test("severally -> sever", function() {deepEqual( Stem("severally"), "sever");});
test("severals -> sever", function() {deepEqual( Stem("severals"), "sever");});
test("severance -> sever", function() {deepEqual( Stem("severance"), "sever");});
test("severe -> sever", function() {deepEqual( Stem("severe"), "sever");});
test("severed -> sever", function() {deepEqual( Stem("severed"), "sever");});
test("severely -> sever", function() {deepEqual( Stem("severely"), "sever");});
test("severer -> sever", function() {deepEqual( Stem("severer"), "sever");});
test("severest -> severest", function() {deepEqual( Stem("severest"), "severest");});
test("severing -> sever", function() {deepEqual( Stem("severing"), "sever");});
test("severities -> sever", function() {deepEqual( Stem("severities"), "sever");});
test("severity -> sever", function() {deepEqual( Stem("severity"), "sever");});
test("severn -> severn", function() {deepEqual( Stem("severn"), "severn");});
test("severs -> sever", function() {deepEqual( Stem("severs"), "sever");});
test("sew -> sew", function() {deepEqual( Stem("sew"), "sew");});
test("seward -> seward", function() {deepEqual( Stem("seward"), "seward");});
test("sewed -> sew", function() {deepEqual( Stem("sewed"), "sew");});
test("sewer -> sewer", function() {deepEqual( Stem("sewer"), "sewer");});
test("sewing -> sew", function() {deepEqual( Stem("sewing"), "sew");});
test("sewn -> sewn", function() {deepEqual( Stem("sewn"), "sewn");});
test("sex -> sex", function() {deepEqual( Stem("sex"), "sex");});
test("sexes -> sex", function() {deepEqual( Stem("sexes"), "sex");});
test("sexton -> sexton", function() {deepEqual( Stem("sexton"), "sexton");});
test("sextus -> sextu", function() {deepEqual( Stem("sextus"), "sextu");});
test("seymour -> seymour", function() {deepEqual( Stem("seymour"), "seymour");});
test("seyton -> seyton", function() {deepEqual( Stem("seyton"), "seyton");});
test("sfoot -> sfoot", function() {deepEqual( Stem("sfoot"), "sfoot");});
test("sford -> sford", function() {deepEqual( Stem("sford"), "sford");});
test("sh -> sh", function() {deepEqual( Stem("sh"), "sh");});
test("sha -> sha", function() {deepEqual( Stem("sha"), "sha");});
test("shabbiest -> shabbiest", function() {deepEqual( Stem("shabbiest"), "shabbiest");});
test("shabby -> shabbi", function() {deepEqual( Stem("shabby"), "shabbi");});
test("shackle -> shackl", function() {deepEqual( Stem("shackle"), "shackl");});
test("shackles -> shackl", function() {deepEqual( Stem("shackles"), "shackl");});
test("shade -> shade", function() {deepEqual( Stem("shade"), "shade");});
test("shaded -> shade", function() {deepEqual( Stem("shaded"), "shade");});
test("shades -> shade", function() {deepEqual( Stem("shades"), "shade");});
test("shadow -> shadow", function() {deepEqual( Stem("shadow"), "shadow");});
test("shadowed -> shadow", function() {deepEqual( Stem("shadowed"), "shadow");});
test("shadowing -> shadow", function() {deepEqual( Stem("shadowing"), "shadow");});
test("shadows -> shadow", function() {deepEqual( Stem("shadows"), "shadow");});
test("shadowy -> shadowi", function() {deepEqual( Stem("shadowy"), "shadowi");});
test("shady -> shadi", function() {deepEqual( Stem("shady"), "shadi");});
test("shafalus -> shafalu", function() {deepEqual( Stem("shafalus"), "shafalu");});
test("shaft -> shaft", function() {deepEqual( Stem("shaft"), "shaft");});
test("shafton -> shafton", function() {deepEqual( Stem("shafton"), "shafton");});
test("shafts -> shaft", function() {deepEqual( Stem("shafts"), "shaft");});
test("shag -> shag", function() {deepEqual( Stem("shag"), "shag");});
test("shaggy -> shaggi", function() {deepEqual( Stem("shaggy"), "shaggi");});
test("shak -> shak", function() {deepEqual( Stem("shak"), "shak");});
test("shake -> shake", function() {deepEqual( Stem("shake"), "shake");});
test("shaked -> shake", function() {deepEqual( Stem("shaked"), "shake");});
test("shaken -> shaken", function() {deepEqual( Stem("shaken"), "shaken");});
test("shakes -> shake", function() {deepEqual( Stem("shakes"), "shake");});
test("shakespeare -> shakespear", function() {deepEqual( Stem("shakespeare"), "shakespear");});
test("shaking -> shake", function() {deepEqual( Stem("shaking"), "shake");});
test("shaky -> shaki", function() {deepEqual( Stem("shaky"), "shaki");});
test("shales -> shale", function() {deepEqual( Stem("shales"), "shale");});
test("shall -> shall", function() {deepEqual( Stem("shall"), "shall");});
test("shallenge -> shalleng", function() {deepEqual( Stem("shallenge"), "shalleng");});
test("shallow -> shallow", function() {deepEqual( Stem("shallow"), "shallow");});
test("shallowest -> shallowest", function() {deepEqual( Stem("shallowest"), "shallowest");});
test("shallowly -> shallowli", function() {deepEqual( Stem("shallowly"), "shallowli");});
test("shallows -> shallow", function() {deepEqual( Stem("shallows"), "shallow");});
test("shalt -> shalt", function() {deepEqual( Stem("shalt"), "shalt");});
test("sham -> sham", function() {deepEqual( Stem("sham"), "sham");});
test("shambles -> shambl", function() {deepEqual( Stem("shambles"), "shambl");});
test("shame -> shame", function() {deepEqual( Stem("shame"), "shame");});
test("shamed -> shame", function() {deepEqual( Stem("shamed"), "shame");});
test("shamefacedness -> shamefaced", function() {deepEqual( Stem("shamefacedness"), "shamefaced");});
test("shameful -> shame", function() {deepEqual( Stem("shameful"), "shame");});
test("shamefully -> shamefulli", function() {deepEqual( Stem("shamefully"), "shamefulli");});
test("shameless -> shameless", function() {deepEqual( Stem("shameless"), "shameless");});
test("shames -> shame", function() {deepEqual( Stem("shames"), "shame");});
test("shamest -> shamest", function() {deepEqual( Stem("shamest"), "shamest");});
test("shaming -> shame", function() {deepEqual( Stem("shaming"), "shame");});
test("shampooing -> shampoo", function() {deepEqual( Stem("shampooing"), "shampoo");});
test("shan -> shan", function() {deepEqual( Stem("shan"), "shan");});
test("shank -> shank", function() {deepEqual( Stem("shank"), "shank");});
test("shanked -> shank", function() {deepEqual( Stem("shanked"), "shank");});
test("shanks -> shank", function() {deepEqual( Stem("shanks"), "shank");});
test("shannon -> shannon", function() {deepEqual( Stem("shannon"), "shannon");});
test("shap -> shap", function() {deepEqual( Stem("shap"), "shap");});
test("shape -> shape", function() {deepEqual( Stem("shape"), "shape");});
test("shaped -> shape", function() {deepEqual( Stem("shaped"), "shape");});
test("shapeless -> shapeless", function() {deepEqual( Stem("shapeless"), "shapeless");});
test("shapen -> shapen", function() {deepEqual( Stem("shapen"), "shapen");});
test("shapes -> shape", function() {deepEqual( Stem("shapes"), "shape");});
test("shaping -> shape", function() {deepEqual( Stem("shaping"), "shape");});
test("shar -> shar", function() {deepEqual( Stem("shar"), "shar");});
test("shard -> shard", function() {deepEqual( Stem("shard"), "shard");});
test("sharded -> shard", function() {deepEqual( Stem("sharded"), "shard");});
test("shards -> shard", function() {deepEqual( Stem("shards"), "shard");});
test("share -> share", function() {deepEqual( Stem("share"), "share");});
test("shared -> share", function() {deepEqual( Stem("shared"), "share");});
test("sharers -> sharer", function() {deepEqual( Stem("sharers"), "sharer");});
test("shares -> share", function() {deepEqual( Stem("shares"), "share");});
test("sharing -> share", function() {deepEqual( Stem("sharing"), "share");});
test("shark -> shark", function() {deepEqual( Stem("shark"), "shark");});
test("sharp -> sharp", function() {deepEqual( Stem("sharp"), "sharp");});
test("sharpe -> sharp", function() {deepEqual( Stem("sharpe"), "sharp");});
test("sharpen -> sharpen", function() {deepEqual( Stem("sharpen"), "sharpen");});
test("sharpened -> sharpen", function() {deepEqual( Stem("sharpened"), "sharpen");});
test("sharpens -> sharpen", function() {deepEqual( Stem("sharpens"), "sharpen");});
test("sharper -> sharper", function() {deepEqual( Stem("sharper"), "sharper");});
test("sharpest -> sharpest", function() {deepEqual( Stem("sharpest"), "sharpest");});
test("sharply -> sharpli", function() {deepEqual( Stem("sharply"), "sharpli");});
test("sharpness -> sharp", function() {deepEqual( Stem("sharpness"), "sharp");});
test("sharps -> sharp", function() {deepEqual( Stem("sharps"), "sharp");});
test("shatter -> shatter", function() {deepEqual( Stem("shatter"), "shatter");});
test("shattered -> shatter", function() {deepEqual( Stem("shattered"), "shatter");});
test("shav -> shav", function() {deepEqual( Stem("shav"), "shav");});
test("shave -> shave", function() {deepEqual( Stem("shave"), "shave");});
test("shaved -> shave", function() {deepEqual( Stem("shaved"), "shave");});
test("shaven -> shaven", function() {deepEqual( Stem("shaven"), "shaven");});
test("shaving -> shave", function() {deepEqual( Stem("shaving"), "shave");});
test("shaw -> shaw", function() {deepEqual( Stem("shaw"), "shaw");});
test("shawl -> shawl", function() {deepEqual( Stem("shawl"), "shawl");});
test("shawled -> shawl", function() {deepEqual( Stem("shawled"), "shawl");});
test("shawling -> shawl", function() {deepEqual( Stem("shawling"), "shawl");});
test("shawls -> shawl", function() {deepEqual( Stem("shawls"), "shawl");});
test("shawn -> shawn", function() {deepEqual( Stem("shawn"), "shawn");});
test("she -> she", function() {deepEqual( Stem("she"), "she");});
test("sheaf -> sheaf", function() {deepEqual( Stem("sheaf"), "sheaf");});
test("sheal -> sheal", function() {deepEqual( Stem("sheal"), "sheal");});
test("sheamfully -> sheamfulli", function() {deepEqual( Stem("sheamfully"), "sheamfulli");});
test("shear -> shear", function() {deepEqual( Stem("shear"), "shear");});
test("shearers -> shearer", function() {deepEqual( Stem("shearers"), "shearer");});
test("shearing -> shear", function() {deepEqual( Stem("shearing"), "shear");});
test("shearman -> shearman", function() {deepEqual( Stem("shearman"), "shearman");});
test("shears -> shear", function() {deepEqual( Stem("shears"), "shear");});
test("sheath -> sheath", function() {deepEqual( Stem("sheath"), "sheath");});
test("sheathe -> sheath", function() {deepEqual( Stem("sheathe"), "sheath");});
test("sheathed -> sheath", function() {deepEqual( Stem("sheathed"), "sheath");});
test("sheathes -> sheath", function() {deepEqual( Stem("sheathes"), "sheath");});
test("sheathing -> sheath", function() {deepEqual( Stem("sheathing"), "sheath");});
test("sheaved -> sheav", function() {deepEqual( Stem("sheaved"), "sheav");});
test("sheaves -> sheav", function() {deepEqual( Stem("sheaves"), "sheav");});
test("sheba -> sheba", function() {deepEqual( Stem("sheba"), "sheba");});
test("shed -> shed", function() {deepEqual( Stem("shed"), "shed");});
test("shedding -> shed", function() {deepEqual( Stem("shedding"), "shed");});
test("sheds -> shed", function() {deepEqual( Stem("sheds"), "shed");});
test("sheen -> sheen", function() {deepEqual( Stem("sheen"), "sheen");});
test("sheep -> sheep", function() {deepEqual( Stem("sheep"), "sheep");});
test("sheepcote -> sheepcot", function() {deepEqual( Stem("sheepcote"), "sheepcot");});
test("sheepcotes -> sheepcot", function() {deepEqual( Stem("sheepcotes"), "sheepcot");});
test("sheeps -> sheep", function() {deepEqual( Stem("sheeps"), "sheep");});
test("sheepshanks -> sheepshank", function() {deepEqual( Stem("sheepshanks"), "sheepshank");});
test("sheepskins -> sheepskin", function() {deepEqual( Stem("sheepskins"), "sheepskin");});
test("sheer -> sheer", function() {deepEqual( Stem("sheer"), "sheer");});
test("sheet -> sheet", function() {deepEqual( Stem("sheet"), "sheet");});
test("sheeted -> sheet", function() {deepEqual( Stem("sheeted"), "sheet");});
test("sheets -> sheet", function() {deepEqual( Stem("sheets"), "sheet");});
test("sheffield -> sheffield", function() {deepEqual( Stem("sheffield"), "sheffield");});
test("shelf -> shelf", function() {deepEqual( Stem("shelf"), "shelf");});
test("shell -> shell", function() {deepEqual( Stem("shell"), "shell");});
test("shells -> shell", function() {deepEqual( Stem("shells"), "shell");});
test("shelt -> shelt", function() {deepEqual( Stem("shelt"), "shelt");});
test("shelter -> shelter", function() {deepEqual( Stem("shelter"), "shelter");});
test("sheltered -> shelter", function() {deepEqual( Stem("sheltered"), "shelter");});
test("shelters -> shelter", function() {deepEqual( Stem("shelters"), "shelter");});
test("shelves -> shelv", function() {deepEqual( Stem("shelves"), "shelv");});
test("shelving -> shelv", function() {deepEqual( Stem("shelving"), "shelv");});
test("shelvy -> shelvi", function() {deepEqual( Stem("shelvy"), "shelvi");});
test("sheneral -> shener", function() {deepEqual( Stem("sheneral"), "shener");});
test("shent -> shent", function() {deepEqual( Stem("shent"), "shent");});
test("shepherd -> shepherd", function() {deepEqual( Stem("shepherd"), "shepherd");});
test("shepherdes -> shepherd", function() {deepEqual( Stem("shepherdes"), "shepherd");});
test("shepherdess -> shepherdess", function() {deepEqual( Stem("shepherdess"), "shepherdess");});
test("shepherdesses -> shepherdess", function() {deepEqual( Stem("shepherdesses"), "shepherdess");});
test("shepherds -> shepherd", function() {deepEqual( Stem("shepherds"), "shepherd");});
test("sheppard -> sheppard", function() {deepEqual( Stem("sheppard"), "sheppard");});
test("sher -> sher", function() {deepEqual( Stem("sher"), "sher");});
test("sheridan -> sheridan", function() {deepEqual( Stem("sheridan"), "sheridan");});
test("sheriff -> sheriff", function() {deepEqual( Stem("sheriff"), "sheriff");});
test("sheriffs -> sheriff", function() {deepEqual( Stem("sheriffs"), "sheriff");});
test("sherries -> sherri", function() {deepEqual( Stem("sherries"), "sherri");});
test("sherris -> sherri", function() {deepEqual( Stem("sherris"), "sherri");});
test("sherry -> sherri", function() {deepEqual( Stem("sherry"), "sherri");});
test("shes -> she", function() {deepEqual( Stem("shes"), "she");});
test("shetland -> shetland", function() {deepEqual( Stem("shetland"), "shetland");});
test("sheweth -> sheweth", function() {deepEqual( Stem("sheweth"), "sheweth");});
test("shield -> shield", function() {deepEqual( Stem("shield"), "shield");});
test("shielded -> shield", function() {deepEqual( Stem("shielded"), "shield");});
test("shielding -> shield", function() {deepEqual( Stem("shielding"), "shield");});
test("shields -> shield", function() {deepEqual( Stem("shields"), "shield");});
test("shift -> shift", function() {deepEqual( Stem("shift"), "shift");});
test("shifted -> shift", function() {deepEqual( Stem("shifted"), "shift");});
test("shifting -> shift", function() {deepEqual( Stem("shifting"), "shift");});
test("shifts -> shift", function() {deepEqual( Stem("shifts"), "shift");});
test("shilling -> shill", function() {deepEqual( Stem("shilling"), "shill");});
test("shillings -> shill", function() {deepEqual( Stem("shillings"), "shill");});
test("shin -> shin", function() {deepEqual( Stem("shin"), "shin");});
test("shine -> shine", function() {deepEqual( Stem("shine"), "shine");});
test("shines -> shine", function() {deepEqual( Stem("shines"), "shine");});
test("shineth -> shineth", function() {deepEqual( Stem("shineth"), "shineth");});
test("shingles -> shingl", function() {deepEqual( Stem("shingles"), "shingl");});
test("shining -> shine", function() {deepEqual( Stem("shining"), "shine");});
test("shins -> shin", function() {deepEqual( Stem("shins"), "shin");});
test("shinty -> shinti", function() {deepEqual( Stem("shinty"), "shinti");});
test("shiny -> shini", function() {deepEqual( Stem("shiny"), "shini");});
test("ship -> ship", function() {deepEqual( Stem("ship"), "ship");});
test("shipboard -> shipboard", function() {deepEqual( Stem("shipboard"), "shipboard");});
test("shipman -> shipman", function() {deepEqual( Stem("shipman"), "shipman");});
test("shipmaster -> shipmast", function() {deepEqual( Stem("shipmaster"), "shipmast");});
test("shipmen -> shipmen", function() {deepEqual( Stem("shipmen"), "shipmen");});
test("shipp -> shipp", function() {deepEqual( Stem("shipp"), "shipp");});
test("shipped -> ship", function() {deepEqual( Stem("shipped"), "ship");});
test("shipping -> ship", function() {deepEqual( Stem("shipping"), "ship");});
test("ships -> ship", function() {deepEqual( Stem("ships"), "ship");});
test("shipt -> shipt", function() {deepEqual( Stem("shipt"), "shipt");});
test("shipwreck -> shipwreck", function() {deepEqual( Stem("shipwreck"), "shipwreck");});
test("shipwrecked -> shipwreck", function() {deepEqual( Stem("shipwrecked"), "shipwreck");});
test("shipwrecking -> shipwreck", function() {deepEqual( Stem("shipwrecking"), "shipwreck");});
test("shipwright -> shipwright", function() {deepEqual( Stem("shipwright"), "shipwright");});
test("shipwrights -> shipwright", function() {deepEqual( Stem("shipwrights"), "shipwright");});
test("shire -> shire", function() {deepEqual( Stem("shire"), "shire");});
test("shirking -> shirk", function() {deepEqual( Stem("shirking"), "shirk");});
test("shirley -> shirlei", function() {deepEqual( Stem("shirley"), "shirlei");});
test("shirt -> shirt", function() {deepEqual( Stem("shirt"), "shirt");});
test("shirts -> shirt", function() {deepEqual( Stem("shirts"), "shirt");});
test("shive -> shive", function() {deepEqual( Stem("shive"), "shive");});
test("shiver -> shiver", function() {deepEqual( Stem("shiver"), "shiver");});
test("shivered -> shiver", function() {deepEqual( Stem("shivered"), "shiver");});
test("shivering -> shiver", function() {deepEqual( Stem("shivering"), "shiver");});
test("shivers -> shiver", function() {deepEqual( Stem("shivers"), "shiver");});
test("shoal -> shoal", function() {deepEqual( Stem("shoal"), "shoal");});
test("shoals -> shoal", function() {deepEqual( Stem("shoals"), "shoal");});
test("shock -> shock", function() {deepEqual( Stem("shock"), "shock");});
test("shocked -> shock", function() {deepEqual( Stem("shocked"), "shock");});
test("shocking -> shock", function() {deepEqual( Stem("shocking"), "shock");});
test("shockingly -> shockingli", function() {deepEqual( Stem("shockingly"), "shockingli");});
test("shocks -> shock", function() {deepEqual( Stem("shocks"), "shock");});
test("shod -> shod", function() {deepEqual( Stem("shod"), "shod");});
test("shoe -> shoe", function() {deepEqual( Stem("shoe"), "shoe");});
test("shoeing -> shoe", function() {deepEqual( Stem("shoeing"), "shoe");});
test("shoemaker -> shoemak", function() {deepEqual( Stem("shoemaker"), "shoemak");});
test("shoes -> shoe", function() {deepEqual( Stem("shoes"), "shoe");});
test("shog -> shog", function() {deepEqual( Stem("shog"), "shog");});
test("shone -> shone", function() {deepEqual( Stem("shone"), "shone");});
test("shook -> shook", function() {deepEqual( Stem("shook"), "shook");});
test("shoon -> shoon", function() {deepEqual( Stem("shoon"), "shoon");});
test("shoot -> shoot", function() {deepEqual( Stem("shoot"), "shoot");});
test("shooter -> shooter", function() {deepEqual( Stem("shooter"), "shooter");});
test("shootie -> shooti", function() {deepEqual( Stem("shootie"), "shooti");});
test("shooting -> shoot", function() {deepEqual( Stem("shooting"), "shoot");});
test("shoots -> shoot", function() {deepEqual( Stem("shoots"), "shoot");});
test("shop -> shop", function() {deepEqual( Stem("shop"), "shop");});
test("shopboy -> shopboi", function() {deepEqual( Stem("shopboy"), "shopboi");});
test("shopfolks -> shopfolk", function() {deepEqual( Stem("shopfolks"), "shopfolk");});
test("shopkeepers -> shopkeep", function() {deepEqual( Stem("shopkeepers"), "shopkeep");});
test("shopmen -> shopmen", function() {deepEqual( Stem("shopmen"), "shopmen");});
test("shopping -> shop", function() {deepEqual( Stem("shopping"), "shop");});
test("shops -> shop", function() {deepEqual( Stem("shops"), "shop");});
test("shore -> shore", function() {deepEqual( Stem("shore"), "shore");});
test("shores -> shore", function() {deepEqual( Stem("shores"), "shore");});
test("shorn -> shorn", function() {deepEqual( Stem("shorn"), "shorn");});
test("short -> short", function() {deepEqual( Stem("short"), "short");});
test("shortcake -> shortcak", function() {deepEqual( Stem("shortcake"), "shortcak");});
test("shorten -> shorten", function() {deepEqual( Stem("shorten"), "shorten");});
test("shortened -> shorten", function() {deepEqual( Stem("shortened"), "shorten");});
test("shortens -> shorten", function() {deepEqual( Stem("shortens"), "shorten");});
test("shorter -> shorter", function() {deepEqual( Stem("shorter"), "shorter");});
test("shortly -> shortli", function() {deepEqual( Stem("shortly"), "shortli");});
test("shortness -> short", function() {deepEqual( Stem("shortness"), "short");});
test("shot -> shot", function() {deepEqual( Stem("shot"), "shot");});
test("shots -> shot", function() {deepEqual( Stem("shots"), "shot");});
test("shotten -> shotten", function() {deepEqual( Stem("shotten"), "shotten");});
test("shoughs -> shough", function() {deepEqual( Stem("shoughs"), "shough");});
test("should -> should", function() {deepEqual( Stem("should"), "should");});
test("shoulder -> shoulder", function() {deepEqual( Stem("shoulder"), "shoulder");});
test("shouldered -> shoulder", function() {deepEqual( Stem("shouldered"), "shoulder");});
test("shouldering -> shoulder", function() {deepEqual( Stem("shouldering"), "shoulder");});
test("shoulders -> shoulder", function() {deepEqual( Stem("shoulders"), "shoulder");});
test("shouldn -> shouldn", function() {deepEqual( Stem("shouldn"), "shouldn");});
test("shouldst -> shouldst", function() {deepEqual( Stem("shouldst"), "shouldst");});
test("shout -> shout", function() {deepEqual( Stem("shout"), "shout");});
test("shouted -> shout", function() {deepEqual( Stem("shouted"), "shout");});
test("shouting -> shout", function() {deepEqual( Stem("shouting"), "shout");});
test("shouts -> shout", function() {deepEqual( Stem("shouts"), "shout");});
test("shov -> shov", function() {deepEqual( Stem("shov"), "shov");});
test("shove -> shove", function() {deepEqual( Stem("shove"), "shove");});
test("shovel -> shovel", function() {deepEqual( Stem("shovel"), "shovel");});
test("shovels -> shovel", function() {deepEqual( Stem("shovels"), "shovel");});
test("show -> show", function() {deepEqual( Stem("show"), "show");});
test("showed -> show", function() {deepEqual( Stem("showed"), "show");});
test("shower -> shower", function() {deepEqual( Stem("shower"), "shower");});
test("showered -> shower", function() {deepEqual( Stem("showered"), "shower");});
test("showers -> shower", function() {deepEqual( Stem("showers"), "shower");});
test("showest -> showest", function() {deepEqual( Stem("showest"), "showest");});
test("showing -> show", function() {deepEqual( Stem("showing"), "show");});
test("shown -> shown", function() {deepEqual( Stem("shown"), "shown");});
test("shows -> show", function() {deepEqual( Stem("shows"), "show");});
test("showy -> showi", function() {deepEqual( Stem("showy"), "showi");});
test("shrank -> shrank", function() {deepEqual( Stem("shrank"), "shrank");});
test("shred -> shred", function() {deepEqual( Stem("shred"), "shred");});
test("shreds -> shred", function() {deepEqual( Stem("shreds"), "shred");});
test("shrew -> shrew", function() {deepEqual( Stem("shrew"), "shrew");});
test("shrewd -> shrewd", function() {deepEqual( Stem("shrewd"), "shrewd");});
test("shrewdly -> shrewdli", function() {deepEqual( Stem("shrewdly"), "shrewdli");});
test("shrewdness -> shrewd", function() {deepEqual( Stem("shrewdness"), "shrewd");});
test("shrewish -> shrewish", function() {deepEqual( Stem("shrewish"), "shrewish");});
test("shrewishly -> shrewishli", function() {deepEqual( Stem("shrewishly"), "shrewishli");});
test("shrewishness -> shrewish", function() {deepEqual( Stem("shrewishness"), "shrewish");});
test("shrews -> shrew", function() {deepEqual( Stem("shrews"), "shrew");});
test("shrewsbury -> shrewsburi", function() {deepEqual( Stem("shrewsbury"), "shrewsburi");});
test("shriek -> shriek", function() {deepEqual( Stem("shriek"), "shriek");});
test("shrieked -> shriek", function() {deepEqual( Stem("shrieked"), "shriek");});
test("shrieking -> shriek", function() {deepEqual( Stem("shrieking"), "shriek");});
test("shrieks -> shriek", function() {deepEqual( Stem("shrieks"), "shriek");});
test("shrieve -> shriev", function() {deepEqual( Stem("shrieve"), "shriev");});
test("shrift -> shrift", function() {deepEqual( Stem("shrift"), "shrift");});
test("shrill -> shrill", function() {deepEqual( Stem("shrill"), "shrill");});
test("shriller -> shriller", function() {deepEqual( Stem("shriller"), "shriller");});
test("shrills -> shrill", function() {deepEqual( Stem("shrills"), "shrill");});
test("shrilly -> shrilli", function() {deepEqual( Stem("shrilly"), "shrilli");});
test("shrimp -> shrimp", function() {deepEqual( Stem("shrimp"), "shrimp");});
test("shrine -> shrine", function() {deepEqual( Stem("shrine"), "shrine");});
test("shrink -> shrink", function() {deepEqual( Stem("shrink"), "shrink");});
test("shrinking -> shrink", function() {deepEqual( Stem("shrinking"), "shrink");});
test("shrinks -> shrink", function() {deepEqual( Stem("shrinks"), "shrink");});
test("shriv -> shriv", function() {deepEqual( Stem("shriv"), "shriv");});
test("shrive -> shrive", function() {deepEqual( Stem("shrive"), "shrive");});
test("shrivelled -> shrivel", function() {deepEqual( Stem("shrivelled"), "shrivel");});
test("shriver -> shriver", function() {deepEqual( Stem("shriver"), "shriver");});
test("shrives -> shrive", function() {deepEqual( Stem("shrives"), "shrive");});
test("shriving -> shrive", function() {deepEqual( Stem("shriving"), "shrive");});
test("shropshire -> shropshir", function() {deepEqual( Stem("shropshire"), "shropshir");});
test("shroud -> shroud", function() {deepEqual( Stem("shroud"), "shroud");});
test("shrouded -> shroud", function() {deepEqual( Stem("shrouded"), "shroud");});
test("shrouding -> shroud", function() {deepEqual( Stem("shrouding"), "shroud");});
test("shrouds -> shroud", function() {deepEqual( Stem("shrouds"), "shroud");});
test("shrove -> shrove", function() {deepEqual( Stem("shrove"), "shrove");});
test("shrow -> shrow", function() {deepEqual( Stem("shrow"), "shrow");});
test("shrows -> shrow", function() {deepEqual( Stem("shrows"), "shrow");});
test("shrub -> shrub", function() {deepEqual( Stem("shrub"), "shrub");});
test("shrubberies -> shrubberi", function() {deepEqual( Stem("shrubberies"), "shrubberi");});
test("shrubs -> shrub", function() {deepEqual( Stem("shrubs"), "shrub");});
test("shrug -> shrug", function() {deepEqual( Stem("shrug"), "shrug");});
test("shrugs -> shrug", function() {deepEqual( Stem("shrugs"), "shrug");});
test("shrunk -> shrunk", function() {deepEqual( Stem("shrunk"), "shrunk");});
test("shshshsh -> shshshsh", function() {deepEqual( Stem("shshshsh"), "shshshsh");});
test("shudd -> shudd", function() {deepEqual( Stem("shudd"), "shudd");});
test("shuddered -> shudder", function() {deepEqual( Stem("shuddered"), "shudder");});
test("shuddering -> shudder", function() {deepEqual( Stem("shuddering"), "shudder");});
test("shudders -> shudder", function() {deepEqual( Stem("shudders"), "shudder");});
test("shuffl -> shuffl", function() {deepEqual( Stem("shuffl"), "shuffl");});
test("shuffle -> shuffl", function() {deepEqual( Stem("shuffle"), "shuffl");});
test("shuffled -> shuffl", function() {deepEqual( Stem("shuffled"), "shuffl");});
test("shuffling -> shuffl", function() {deepEqual( Stem("shuffling"), "shuffl");});
test("shun -> shun", function() {deepEqual( Stem("shun"), "shun");});
test("shunless -> shunless", function() {deepEqual( Stem("shunless"), "shunless");});
test("shunn -> shunn", function() {deepEqual( Stem("shunn"), "shunn");});
test("shunned -> shun", function() {deepEqual( Stem("shunned"), "shun");});
test("shunning -> shun", function() {deepEqual( Stem("shunning"), "shun");});
test("shuns -> shun", function() {deepEqual( Stem("shuns"), "shun");});
test("shut -> shut", function() {deepEqual( Stem("shut"), "shut");});
test("shuts -> shut", function() {deepEqual( Stem("shuts"), "shut");});
test("shutters -> shutter", function() {deepEqual( Stem("shutters"), "shutter");});
test("shutting -> shut", function() {deepEqual( Stem("shutting"), "shut");});
test("shuttle -> shuttl", function() {deepEqual( Stem("shuttle"), "shuttl");});
test("shy -> shy", function() {deepEqual( Stem("shy"), "shy");});
test("shylock -> shylock", function() {deepEqual( Stem("shylock"), "shylock");});
test("shyness -> shyness", function() {deepEqual( Stem("shyness"), "shyness");});
test("si -> si", function() {deepEqual( Stem("si"), "si");});
test("siberia -> siberia", function() {deepEqual( Stem("siberia"), "siberia");});
test("sibilant -> sibil", function() {deepEqual( Stem("sibilant"), "sibil");});
test("sibyl -> sibyl", function() {deepEqual( Stem("sibyl"), "sibyl");});
test("sibylla -> sibylla", function() {deepEqual( Stem("sibylla"), "sibylla");});
test("sibyls -> sibyl", function() {deepEqual( Stem("sibyls"), "sibyl");});
test("sicil -> sicil", function() {deepEqual( Stem("sicil"), "sicil");});
test("sicilia -> sicilia", function() {deepEqual( Stem("sicilia"), "sicilia");});
test("sicilian -> sicilian", function() {deepEqual( Stem("sicilian"), "sicilian");});
test("sicilius -> siciliu", function() {deepEqual( Stem("sicilius"), "siciliu");});
test("sicils -> sicil", function() {deepEqual( Stem("sicils"), "sicil");});
test("sicily -> sicili", function() {deepEqual( Stem("sicily"), "sicili");});
test("sicinius -> siciniu", function() {deepEqual( Stem("sicinius"), "siciniu");});
test("sick -> sick", function() {deepEqual( Stem("sick"), "sick");});
test("sicken -> sicken", function() {deepEqual( Stem("sicken"), "sicken");});
test("sickening -> sicken", function() {deepEqual( Stem("sickening"), "sicken");});
test("sickens -> sicken", function() {deepEqual( Stem("sickens"), "sicken");});
test("sicker -> sicker", function() {deepEqual( Stem("sicker"), "sicker");});
test("sickle -> sickl", function() {deepEqual( Stem("sickle"), "sickl");});
test("sicklemen -> sicklemen", function() {deepEqual( Stem("sicklemen"), "sicklemen");});
test("sicklied -> sickli", function() {deepEqual( Stem("sicklied"), "sickli");});
test("sickliness -> sickli", function() {deepEqual( Stem("sickliness"), "sickli");});
test("sickly -> sickli", function() {deepEqual( Stem("sickly"), "sickli");});
test("sickness -> sick", function() {deepEqual( Stem("sickness"), "sick");});
test("sicles -> sicl", function() {deepEqual( Stem("sicles"), "sicl");});
test("sicyon -> sicyon", function() {deepEqual( Stem("sicyon"), "sicyon");});
test("siddons -> siddon", function() {deepEqual( Stem("siddons"), "siddon");});
test("side -> side", function() {deepEqual( Stem("side"), "side");});
test("sideboard -> sideboard", function() {deepEqual( Stem("sideboard"), "sideboard");});
test("sideboards -> sideboard", function() {deepEqual( Stem("sideboards"), "sideboard");});
test("sided -> side", function() {deepEqual( Stem("sided"), "side");});
test("sides -> side", function() {deepEqual( Stem("sides"), "side");});
test("siege -> sieg", function() {deepEqual( Stem("siege"), "sieg");});
test("sieges -> sieg", function() {deepEqual( Stem("sieges"), "sieg");});
test("sienna -> sienna", function() {deepEqual( Stem("sienna"), "sienna");});
test("sies -> si", function() {deepEqual( Stem("sies"), "si");});
test("sieve -> siev", function() {deepEqual( Stem("sieve"), "siev");});
test("sift -> sift", function() {deepEqual( Stem("sift"), "sift");});
test("sifted -> sift", function() {deepEqual( Stem("sifted"), "sift");});
test("sigeia -> sigeia", function() {deepEqual( Stem("sigeia"), "sigeia");});
test("sigh -> sigh", function() {deepEqual( Stem("sigh"), "sigh");});
test("sighed -> sigh", function() {deepEqual( Stem("sighed"), "sigh");});
test("sighing -> sigh", function() {deepEqual( Stem("sighing"), "sigh");});
test("sighs -> sigh", function() {deepEqual( Stem("sighs"), "sigh");});
test("sight -> sight", function() {deepEqual( Stem("sight"), "sight");});
test("sighted -> sight", function() {deepEqual( Stem("sighted"), "sight");});
test("sightless -> sightless", function() {deepEqual( Stem("sightless"), "sightless");});
test("sightly -> sightli", function() {deepEqual( Stem("sightly"), "sightli");});
test("sights -> sight", function() {deepEqual( Stem("sights"), "sight");});
test("sign -> sign", function() {deepEqual( Stem("sign"), "sign");});
test("signal -> signal", function() {deepEqual( Stem("signal"), "signal");});
test("signalised -> signalis", function() {deepEqual( Stem("signalised"), "signalis");});
test("signature -> signatur", function() {deepEqual( Stem("signature"), "signatur");});
test("signed -> sign", function() {deepEqual( Stem("signed"), "sign");});
test("signet -> signet", function() {deepEqual( Stem("signet"), "signet");});
test("signieur -> signieur", function() {deepEqual( Stem("signieur"), "signieur");});
test("significant -> signific", function() {deepEqual( Stem("significant"), "signific");});
test("significants -> signific", function() {deepEqual( Stem("significants"), "signific");});
test("signified -> signifi", function() {deepEqual( Stem("signified"), "signifi");});
test("signifies -> signifi", function() {deepEqual( Stem("signifies"), "signifi");});
test("signify -> signifi", function() {deepEqual( Stem("signify"), "signifi");});
test("signifying -> signifi", function() {deepEqual( Stem("signifying"), "signifi");});
test("signior -> signior", function() {deepEqual( Stem("signior"), "signior");});
test("signiories -> signiori", function() {deepEqual( Stem("signiories"), "signiori");});
test("signiors -> signior", function() {deepEqual( Stem("signiors"), "signior");});
test("signiory -> signiori", function() {deepEqual( Stem("signiory"), "signiori");});
test("signor -> signor", function() {deepEqual( Stem("signor"), "signor");});
test("signories -> signori", function() {deepEqual( Stem("signories"), "signori");});
test("signs -> sign", function() {deepEqual( Stem("signs"), "sign");});
test("signum -> signum", function() {deepEqual( Stem("signum"), "signum");});
test("silas -> sila", function() {deepEqual( Stem("silas"), "sila");});
test("silenc -> silenc", function() {deepEqual( Stem("silenc"), "silenc");});
test("silence -> silenc", function() {deepEqual( Stem("silence"), "silenc");});
test("silenced -> silenc", function() {deepEqual( Stem("silenced"), "silenc");});
test("silencing -> silenc", function() {deepEqual( Stem("silencing"), "silenc");});
test("silent -> silent", function() {deepEqual( Stem("silent"), "silent");});
test("silently -> silent", function() {deepEqual( Stem("silently"), "silent");});
test("silenus -> silenu", function() {deepEqual( Stem("silenus"), "silenu");});
test("silhouette -> silhouett", function() {deepEqual( Stem("silhouette"), "silhouett");});
test("silius -> siliu", function() {deepEqual( Stem("silius"), "siliu");});
test("silk -> silk", function() {deepEqual( Stem("silk"), "silk");});
test("silken -> silken", function() {deepEqual( Stem("silken"), "silken");});
test("silkman -> silkman", function() {deepEqual( Stem("silkman"), "silkman");});
test("silks -> silk", function() {deepEqual( Stem("silks"), "silk");});
test("sillery -> silleri", function() {deepEqual( Stem("sillery"), "silleri");});
test("silliest -> silliest", function() {deepEqual( Stem("silliest"), "silliest");});
test("silliness -> silli", function() {deepEqual( Stem("silliness"), "silli");});
test("silling -> sill", function() {deepEqual( Stem("silling"), "sill");});
test("silly -> silli", function() {deepEqual( Stem("silly"), "silli");});
test("silva -> silva", function() {deepEqual( Stem("silva"), "silva");});
test("silver -> silver", function() {deepEqual( Stem("silver"), "silver");});
test("silvered -> silver", function() {deepEqual( Stem("silvered"), "silver");});
test("silverly -> silverli", function() {deepEqual( Stem("silverly"), "silverli");});
test("silvia -> silvia", function() {deepEqual( Stem("silvia"), "silvia");});
test("silvius -> silviu", function() {deepEqual( Stem("silvius"), "silviu");});
test("sima -> sima", function() {deepEqual( Stem("sima"), "sima");});
test("simeon -> simeon", function() {deepEqual( Stem("simeon"), "simeon");});
test("similar -> similar", function() {deepEqual( Stem("similar"), "similar");});
test("similarly -> similarli", function() {deepEqual( Stem("similarly"), "similarli");});
test("simile -> simil", function() {deepEqual( Stem("simile"), "simil");});
test("similes -> simil", function() {deepEqual( Stem("similes"), "simil");});
test("siminary -> siminari", function() {deepEqual( Stem("siminary"), "siminari");});
test("simmering -> simmer", function() {deepEqual( Stem("simmering"), "simmer");});
test("simois -> simoi", function() {deepEqual( Stem("simois"), "simoi");});
test("simon -> simon", function() {deepEqual( Stem("simon"), "simon");});
test("simony -> simoni", function() {deepEqual( Stem("simony"), "simoni");});
test("simp -> simp", function() {deepEqual( Stem("simp"), "simp");});
test("simpcox -> simpcox", function() {deepEqual( Stem("simpcox"), "simpcox");});
test("simper -> simper", function() {deepEqual( Stem("simper"), "simper");});
test("simpered -> simper", function() {deepEqual( Stem("simpered"), "simper");});
test("simpering -> simper", function() {deepEqual( Stem("simpering"), "simper");});
test("simple -> simpl", function() {deepEqual( Stem("simple"), "simpl");});
test("simpleness -> simpl", function() {deepEqual( Stem("simpleness"), "simpl");});
test("simpler -> simpler", function() {deepEqual( Stem("simpler"), "simpler");});
test("simples -> simpl", function() {deepEqual( Stem("simples"), "simpl");});
test("simplest -> simplest", function() {deepEqual( Stem("simplest"), "simplest");});
test("simpleton -> simpleton", function() {deepEqual( Stem("simpleton"), "simpleton");});
test("simplicity -> simplic", function() {deepEqual( Stem("simplicity"), "simplic");});
test("simply -> simpli", function() {deepEqual( Stem("simply"), "simpli");});
test("simpson -> simpson", function() {deepEqual( Stem("simpson"), "simpson");});
test("simular -> simular", function() {deepEqual( Stem("simular"), "simular");});
test("simulation -> simul", function() {deepEqual( Stem("simulation"), "simul");});
test("sin -> sin", function() {deepEqual( Stem("sin"), "sin");});
test("since -> sinc", function() {deepEqual( Stem("since"), "sinc");});
test("sincere -> sincer", function() {deepEqual( Stem("sincere"), "sincer");});
test("sincerely -> sincer", function() {deepEqual( Stem("sincerely"), "sincer");});
test("sincerest -> sincerest", function() {deepEqual( Stem("sincerest"), "sincerest");});
test("sincerity -> sincer", function() {deepEqual( Stem("sincerity"), "sincer");});
test("sindbad -> sindbad", function() {deepEqual( Stem("sindbad"), "sindbad");});
test("sinecure -> sinecur", function() {deepEqual( Stem("sinecure"), "sinecur");});
test("sinel -> sinel", function() {deepEqual( Stem("sinel"), "sinel");});
test("sinew -> sinew", function() {deepEqual( Stem("sinew"), "sinew");});
test("sinewed -> sinew", function() {deepEqual( Stem("sinewed"), "sinew");});
test("sinews -> sinew", function() {deepEqual( Stem("sinews"), "sinew");});
test("sinewy -> sinewi", function() {deepEqual( Stem("sinewy"), "sinewi");});
test("sinful -> sin", function() {deepEqual( Stem("sinful"), "sin");});
test("sinfully -> sinfulli", function() {deepEqual( Stem("sinfully"), "sinfulli");});
test("sing -> sing", function() {deepEqual( Stem("sing"), "sing");});
test("singe -> sing", function() {deepEqual( Stem("singe"), "sing");});
test("singeing -> sing", function() {deepEqual( Stem("singeing"), "sing");});
test("singen -> singen", function() {deepEqual( Stem("singen"), "singen");});
test("singer -> singer", function() {deepEqual( Stem("singer"), "singer");});
test("singers -> singer", function() {deepEqual( Stem("singers"), "singer");});
test("singes -> sing", function() {deepEqual( Stem("singes"), "sing");});
test("singeth -> singeth", function() {deepEqual( Stem("singeth"), "singeth");});
test("singing -> sing", function() {deepEqual( Stem("singing"), "sing");});
test("single -> singl", function() {deepEqual( Stem("single"), "singl");});
test("singled -> singl", function() {deepEqual( Stem("singled"), "singl");});
test("singleness -> singl", function() {deepEqual( Stem("singleness"), "singl");});
test("singly -> singli", function() {deepEqual( Stem("singly"), "singli");});
test("sings -> sing", function() {deepEqual( Stem("sings"), "sing");});
test("singular -> singular", function() {deepEqual( Stem("singular"), "singular");});
test("singulariter -> singularit", function() {deepEqual( Stem("singulariter"), "singularit");});
test("singularities -> singular", function() {deepEqual( Stem("singularities"), "singular");});
test("singularity -> singular", function() {deepEqual( Stem("singularity"), "singular");});
test("singularly -> singularli", function() {deepEqual( Stem("singularly"), "singularli");});
test("singuled -> singul", function() {deepEqual( Stem("singuled"), "singul");});
test("sinister -> sinist", function() {deepEqual( Stem("sinister"), "sinist");});
test("sink -> sink", function() {deepEqual( Stem("sink"), "sink");});
test("sinking -> sink", function() {deepEqual( Stem("sinking"), "sink");});
test("sinks -> sink", function() {deepEqual( Stem("sinks"), "sink");});
test("sinn -> sinn", function() {deepEqual( Stem("sinn"), "sinn");});
test("sinned -> sin", function() {deepEqual( Stem("sinned"), "sin");});
test("sinner -> sinner", function() {deepEqual( Stem("sinner"), "sinner");});
test("sinners -> sinner", function() {deepEqual( Stem("sinners"), "sinner");});
test("sinning -> sin", function() {deepEqual( Stem("sinning"), "sin");});
test("sinon -> sinon", function() {deepEqual( Stem("sinon"), "sinon");});
test("sins -> sin", function() {deepEqual( Stem("sins"), "sin");});
test("sip -> sip", function() {deepEqual( Stem("sip"), "sip");});
test("sipped -> sip", function() {deepEqual( Stem("sipped"), "sip");});
test("sipping -> sip", function() {deepEqual( Stem("sipping"), "sip");});
test("sir -> sir", function() {deepEqual( Stem("sir"), "sir");});
test("sire -> sire", function() {deepEqual( Stem("sire"), "sire");});
test("siren -> siren", function() {deepEqual( Stem("siren"), "siren");});
test("sirloin -> sirloin", function() {deepEqual( Stem("sirloin"), "sirloin");});
test("sirrah -> sirrah", function() {deepEqual( Stem("sirrah"), "sirrah");});
test("sirs -> sir", function() {deepEqual( Stem("sirs"), "sir");});
test("sist -> sist", function() {deepEqual( Stem("sist"), "sist");});
test("sister -> sister", function() {deepEqual( Stem("sister"), "sister");});
test("sisterhood -> sisterhood", function() {deepEqual( Stem("sisterhood"), "sisterhood");});
test("sisterly -> sisterli", function() {deepEqual( Stem("sisterly"), "sisterli");});
test("sisters -> sister", function() {deepEqual( Stem("sisters"), "sister");});
test("sit -> sit", function() {deepEqual( Stem("sit"), "sit");});
test("site -> site", function() {deepEqual( Stem("site"), "site");});
test("sith -> sith", function() {deepEqual( Stem("sith"), "sith");});
test("sithence -> sithenc", function() {deepEqual( Stem("sithence"), "sithenc");});
test("sits -> sit", function() {deepEqual( Stem("sits"), "sit");});
test("sitting -> sit", function() {deepEqual( Stem("sitting"), "sit");});
test("situate -> situat", function() {deepEqual( Stem("situate"), "situat");});
test("situated -> situat", function() {deepEqual( Stem("situated"), "situat");});
test("situation -> situat", function() {deepEqual( Stem("situation"), "situat");});
test("situations -> situat", function() {deepEqual( Stem("situations"), "situat");});
test("siward -> siward", function() {deepEqual( Stem("siward"), "siward");});
test("six -> six", function() {deepEqual( Stem("six"), "six");});
test("sixes -> six", function() {deepEqual( Stem("sixes"), "six");});
test("sixpence -> sixpenc", function() {deepEqual( Stem("sixpence"), "sixpenc");});
test("sixpences -> sixpenc", function() {deepEqual( Stem("sixpences"), "sixpenc");});
test("sixpenny -> sixpenni", function() {deepEqual( Stem("sixpenny"), "sixpenni");});
test("sixteen -> sixteen", function() {deepEqual( Stem("sixteen"), "sixteen");});
test("sixth -> sixth", function() {deepEqual( Stem("sixth"), "sixth");});
test("sixty -> sixti", function() {deepEqual( Stem("sixty"), "sixti");});
test("siz -> siz", function() {deepEqual( Stem("siz"), "siz");});
test("size -> size", function() {deepEqual( Stem("size"), "size");});
test("sized -> size", function() {deepEqual( Stem("sized"), "size");});
test("sizes -> size", function() {deepEqual( Stem("sizes"), "size");});
test("sizzle -> sizzl", function() {deepEqual( Stem("sizzle"), "sizzl");});
test("skains -> skain", function() {deepEqual( Stem("skains"), "skain");});
test("skamble -> skambl", function() {deepEqual( Stem("skamble"), "skambl");});
test("skating -> skate", function() {deepEqual( Stem("skating"), "skate");});
test("skein -> skein", function() {deepEqual( Stem("skein"), "skein");});
test("skeleton -> skeleton", function() {deepEqual( Stem("skeleton"), "skeleton");});
test("skeletons -> skeleton", function() {deepEqual( Stem("skeletons"), "skeleton");});
test("skelter -> skelter", function() {deepEqual( Stem("skelter"), "skelter");});
test("sketch -> sketch", function() {deepEqual( Stem("sketch"), "sketch");});
test("sketched -> sketch", function() {deepEqual( Stem("sketched"), "sketch");});
test("sketches -> sketch", function() {deepEqual( Stem("sketches"), "sketch");});
test("sketching -> sketch", function() {deepEqual( Stem("sketching"), "sketch");});
test("skies -> ski", function() {deepEqual( Stem("skies"), "ski");});
test("skilful -> skil", function() {deepEqual( Stem("skilful"), "skil");});
test("skilfully -> skilfulli", function() {deepEqual( Stem("skilfully"), "skilfulli");});
test("skill -> skill", function() {deepEqual( Stem("skill"), "skill");});
test("skilless -> skilless", function() {deepEqual( Stem("skilless"), "skilless");});
test("skillet -> skillet", function() {deepEqual( Stem("skillet"), "skillet");});
test("skillful -> skill", function() {deepEqual( Stem("skillful"), "skill");});
test("skills -> skill", function() {deepEqual( Stem("skills"), "skill");});
test("skim -> skim", function() {deepEqual( Stem("skim"), "skim");});
test("skimble -> skimbl", function() {deepEqual( Stem("skimble"), "skimbl");});
test("skin -> skin", function() {deepEqual( Stem("skin"), "skin");});
test("skinker -> skinker", function() {deepEqual( Stem("skinker"), "skinker");});
test("skinny -> skinni", function() {deepEqual( Stem("skinny"), "skinni");});
test("skins -> skin", function() {deepEqual( Stem("skins"), "skin");});
test("skip -> skip", function() {deepEqual( Stem("skip"), "skip");});
test("skipp -> skipp", function() {deepEqual( Stem("skipp"), "skipp");});
test("skipped -> skip", function() {deepEqual( Stem("skipped"), "skip");});
test("skipper -> skipper", function() {deepEqual( Stem("skipper"), "skipper");});
test("skipping -> skip", function() {deepEqual( Stem("skipping"), "skip");});
test("skirmish -> skirmish", function() {deepEqual( Stem("skirmish"), "skirmish");});
test("skirmishes -> skirmish", function() {deepEqual( Stem("skirmishes"), "skirmish");});
test("skirr -> skirr", function() {deepEqual( Stem("skirr"), "skirr");});
test("skirt -> skirt", function() {deepEqual( Stem("skirt"), "skirt");});
test("skirted -> skirt", function() {deepEqual( Stem("skirted"), "skirt");});
test("skirts -> skirt", function() {deepEqual( Stem("skirts"), "skirt");});
test("skittish -> skittish", function() {deepEqual( Stem("skittish"), "skittish");});
test("skulking -> skulk", function() {deepEqual( Stem("skulking"), "skulk");});
test("skull -> skull", function() {deepEqual( Stem("skull"), "skull");});
test("skulls -> skull", function() {deepEqual( Stem("skulls"), "skull");});
test("sky -> sky", function() {deepEqual( Stem("sky"), "sky");});
test("skyey -> skyei", function() {deepEqual( Stem("skyey"), "skyei");});
test("skyish -> skyish", function() {deepEqual( Stem("skyish"), "skyish");});
test("skyward -> skyward", function() {deepEqual( Stem("skyward"), "skyward");});
test("skywards -> skyward", function() {deepEqual( Stem("skywards"), "skyward");});
test("slab -> slab", function() {deepEqual( Stem("slab"), "slab");});
test("slack -> slack", function() {deepEqual( Stem("slack"), "slack");});
test("slackened -> slacken", function() {deepEqual( Stem("slackened"), "slacken");});
test("slackly -> slackli", function() {deepEqual( Stem("slackly"), "slackli");});
test("slackness -> slack", function() {deepEqual( Stem("slackness"), "slack");});
test("slain -> slain", function() {deepEqual( Stem("slain"), "slain");});
test("slake -> slake", function() {deepEqual( Stem("slake"), "slake");});
test("slammed -> slam", function() {deepEqual( Stem("slammed"), "slam");});
test("slamming -> slam", function() {deepEqual( Stem("slamming"), "slam");});
test("sland -> sland", function() {deepEqual( Stem("sland"), "sland");});
test("slander -> slander", function() {deepEqual( Stem("slander"), "slander");});
test("slandered -> slander", function() {deepEqual( Stem("slandered"), "slander");});
test("slanderer -> slander", function() {deepEqual( Stem("slanderer"), "slander");});
test("slanderers -> slander", function() {deepEqual( Stem("slanderers"), "slander");});
test("slandering -> slander", function() {deepEqual( Stem("slandering"), "slander");});
test("slanderous -> slander", function() {deepEqual( Stem("slanderous"), "slander");});
test("slanders -> slander", function() {deepEqual( Stem("slanders"), "slander");});
test("slandthering -> slandther", function() {deepEqual( Stem("slandthering"), "slandther");});
test("slang -> slang", function() {deepEqual( Stem("slang"), "slang");});
test("slap -> slap", function() {deepEqual( Stem("slap"), "slap");});
test("slapped -> slap", function() {deepEqual( Stem("slapped"), "slap");});
test("slapping -> slap", function() {deepEqual( Stem("slapping"), "slap");});
test("slash -> slash", function() {deepEqual( Stem("slash"), "slash");});
test("slatternly -> slatternli", function() {deepEqual( Stem("slatternly"), "slatternli");});
test("slaught -> slaught", function() {deepEqual( Stem("slaught"), "slaught");});
test("slaughter -> slaughter", function() {deepEqual( Stem("slaughter"), "slaughter");});
test("slaughtered -> slaughter", function() {deepEqual( Stem("slaughtered"), "slaughter");});
test("slaughterer -> slaughter", function() {deepEqual( Stem("slaughterer"), "slaughter");});
test("slaughterman -> slaughterman", function() {deepEqual( Stem("slaughterman"), "slaughterman");});
test("slaughtermen -> slaughtermen", function() {deepEqual( Stem("slaughtermen"), "slaughtermen");});
test("slaughterous -> slaughter", function() {deepEqual( Stem("slaughterous"), "slaughter");});
test("slaughters -> slaughter", function() {deepEqual( Stem("slaughters"), "slaughter");});
test("slave -> slave", function() {deepEqual( Stem("slave"), "slave");});
test("slaved -> slave", function() {deepEqual( Stem("slaved"), "slave");});
test("slaver -> slaver", function() {deepEqual( Stem("slaver"), "slaver");});
test("slavery -> slaveri", function() {deepEqual( Stem("slavery"), "slaveri");});
test("slaves -> slave", function() {deepEqual( Stem("slaves"), "slave");});
test("slavish -> slavish", function() {deepEqual( Stem("slavish"), "slavish");});
test("slavishness -> slavish", function() {deepEqual( Stem("slavishness"), "slavish");});
test("slay -> slai", function() {deepEqual( Stem("slay"), "slai");});
test("slayeth -> slayeth", function() {deepEqual( Stem("slayeth"), "slayeth");});
test("slaying -> slai", function() {deepEqual( Stem("slaying"), "slai");});
test("slays -> slai", function() {deepEqual( Stem("slays"), "slai");});
test("sleave -> sleav", function() {deepEqual( Stem("sleave"), "sleav");});
test("sledded -> sled", function() {deepEqual( Stem("sledded"), "sled");});
test("sleek -> sleek", function() {deepEqual( Stem("sleek"), "sleek");});
test("sleekly -> sleekli", function() {deepEqual( Stem("sleekly"), "sleekli");});
test("sleep -> sleep", function() {deepEqual( Stem("sleep"), "sleep");});
test("sleeper -> sleeper", function() {deepEqual( Stem("sleeper"), "sleeper");});
test("sleepers -> sleeper", function() {deepEqual( Stem("sleepers"), "sleeper");});
test("sleepest -> sleepest", function() {deepEqual( Stem("sleepest"), "sleepest");});
test("sleeping -> sleep", function() {deepEqual( Stem("sleeping"), "sleep");});
test("sleepless -> sleepless", function() {deepEqual( Stem("sleepless"), "sleepless");});
test("sleeps -> sleep", function() {deepEqual( Stem("sleeps"), "sleep");});
test("sleepy -> sleepi", function() {deepEqual( Stem("sleepy"), "sleepi");});
test("sleeve -> sleev", function() {deepEqual( Stem("sleeve"), "sleev");});
test("sleeves -> sleev", function() {deepEqual( Stem("sleeves"), "sleev");});
test("sleid -> sleid", function() {deepEqual( Stem("sleid"), "sleid");});
test("sleided -> sleid", function() {deepEqual( Stem("sleided"), "sleid");});
test("sleight -> sleight", function() {deepEqual( Stem("sleight"), "sleight");});
test("sleights -> sleight", function() {deepEqual( Stem("sleights"), "sleight");});
test("slender -> slender", function() {deepEqual( Stem("slender"), "slender");});
test("slenderer -> slender", function() {deepEqual( Stem("slenderer"), "slender");});
test("slenderly -> slenderli", function() {deepEqual( Stem("slenderly"), "slenderli");});
test("slenderness -> slender", function() {deepEqual( Stem("slenderness"), "slender");});
test("slep -> slep", function() {deepEqual( Stem("slep"), "slep");});
test("slept -> slept", function() {deepEqual( Stem("slept"), "slept");});
test("slew -> slew", function() {deepEqual( Stem("slew"), "slew");});
test("slewest -> slewest", function() {deepEqual( Stem("slewest"), "slewest");});
test("slice -> slice", function() {deepEqual( Stem("slice"), "slice");});
test("slices -> slice", function() {deepEqual( Stem("slices"), "slice");});
test("slicing -> slice", function() {deepEqual( Stem("slicing"), "slice");});
test("slid -> slid", function() {deepEqual( Stem("slid"), "slid");});
test("slide -> slide", function() {deepEqual( Stem("slide"), "slide");});
test("slides -> slide", function() {deepEqual( Stem("slides"), "slide");});
test("sliding -> slide", function() {deepEqual( Stem("sliding"), "slide");});
test("slight -> slight", function() {deepEqual( Stem("slight"), "slight");});
test("slighted -> slight", function() {deepEqual( Stem("slighted"), "slight");});
test("slightest -> slightest", function() {deepEqual( Stem("slightest"), "slightest");});
test("slightingly -> slightingli", function() {deepEqual( Stem("slightingly"), "slightingli");});
test("slightly -> slightli", function() {deepEqual( Stem("slightly"), "slightli");});
test("slightness -> slight", function() {deepEqual( Stem("slightness"), "slight");});
test("slights -> slight", function() {deepEqual( Stem("slights"), "slight");});
test("slily -> slili", function() {deepEqual( Stem("slily"), "slili");});
test("slim -> slim", function() {deepEqual( Stem("slim"), "slim");});
test("slime -> slime", function() {deepEqual( Stem("slime"), "slime");});
test("slimness -> slim", function() {deepEqual( Stem("slimness"), "slim");});
test("slimy -> slimi", function() {deepEqual( Stem("slimy"), "slimi");});
test("sling -> sling", function() {deepEqual( Stem("sling"), "sling");});
test("slings -> sling", function() {deepEqual( Stem("slings"), "sling");});
test("slingstone -> slingston", function() {deepEqual( Stem("slingstone"), "slingston");});
test("slink -> slink", function() {deepEqual( Stem("slink"), "slink");});
test("slinking -> slink", function() {deepEqual( Stem("slinking"), "slink");});
test("slip -> slip", function() {deepEqual( Stem("slip"), "slip");});
test("slipp -> slipp", function() {deepEqual( Stem("slipp"), "slipp");});
test("slipped -> slip", function() {deepEqual( Stem("slipped"), "slip");});
test("slipper -> slipper", function() {deepEqual( Stem("slipper"), "slipper");});
test("slippers -> slipper", function() {deepEqual( Stem("slippers"), "slipper");});
test("slippery -> slipperi", function() {deepEqual( Stem("slippery"), "slipperi");});
test("slips -> slip", function() {deepEqual( Stem("slips"), "slip");});
test("slipshod -> slipshod", function() {deepEqual( Stem("slipshod"), "slipshod");});
test("slipt -> slipt", function() {deepEqual( Stem("slipt"), "slipt");});
test("slish -> slish", function() {deepEqual( Stem("slish"), "slish");});
test("slit -> slit", function() {deepEqual( Stem("slit"), "slit");});
test("sliver -> sliver", function() {deepEqual( Stem("sliver"), "sliver");});
test("slobb -> slobb", function() {deepEqual( Stem("slobb"), "slobb");});
test("slomber -> slomber", function() {deepEqual( Stem("slomber"), "slomber");});
test("slop -> slop", function() {deepEqual( Stem("slop"), "slop");});
test("slope -> slope", function() {deepEqual( Stem("slope"), "slope");});
test("slopes -> slope", function() {deepEqual( Stem("slopes"), "slope");});
test("sloppy -> sloppi", function() {deepEqual( Stem("sloppy"), "sloppi");});
test("slops -> slop", function() {deepEqual( Stem("slops"), "slop");});
test("sloth -> sloth", function() {deepEqual( Stem("sloth"), "sloth");});
test("slothful -> sloth", function() {deepEqual( Stem("slothful"), "sloth");});
test("slouched -> slouch", function() {deepEqual( Stem("slouched"), "slouch");});
test("slough -> slough", function() {deepEqual( Stem("slough"), "slough");});
test("slovenly -> slovenli", function() {deepEqual( Stem("slovenly"), "slovenli");});
test("slovenry -> slovenri", function() {deepEqual( Stem("slovenry"), "slovenri");});
test("slow -> slow", function() {deepEqual( Stem("slow"), "slow");});
test("slowbore -> slowbor", function() {deepEqual( Stem("slowbore"), "slowbor");});
test("slower -> slower", function() {deepEqual( Stem("slower"), "slower");});
test("slowly -> slowli", function() {deepEqual( Stem("slowly"), "slowli");});
test("slowness -> slow", function() {deepEqual( Stem("slowness"), "slow");});
test("slubber -> slubber", function() {deepEqual( Stem("slubber"), "slubber");});
test("slug -> slug", function() {deepEqual( Stem("slug"), "slug");});
test("sluggard -> sluggard", function() {deepEqual( Stem("sluggard"), "sluggard");});
test("sluggardiz -> sluggardiz", function() {deepEqual( Stem("sluggardiz"), "sluggardiz");});
test("sluggish -> sluggish", function() {deepEqual( Stem("sluggish"), "sluggish");});
test("sluggishness -> sluggish", function() {deepEqual( Stem("sluggishness"), "sluggish");});
test("sluic -> sluic", function() {deepEqual( Stem("sluic"), "sluic");});
test("slumb -> slumb", function() {deepEqual( Stem("slumb"), "slumb");});
test("slumber -> slumber", function() {deepEqual( Stem("slumber"), "slumber");});
test("slumbering -> slumber", function() {deepEqual( Stem("slumbering"), "slumber");});
test("slumbers -> slumber", function() {deepEqual( Stem("slumbers"), "slumber");});
test("slumbery -> slumberi", function() {deepEqual( Stem("slumbery"), "slumberi");});
test("slunk -> slunk", function() {deepEqual( Stem("slunk"), "slunk");});
test("slut -> slut", function() {deepEqual( Stem("slut"), "slut");});
test("sluts -> slut", function() {deepEqual( Stem("sluts"), "slut");});
test("sluttery -> slutteri", function() {deepEqual( Stem("sluttery"), "slutteri");});
test("sluttish -> sluttish", function() {deepEqual( Stem("sluttish"), "sluttish");});
test("sluttishness -> sluttish", function() {deepEqual( Stem("sluttishness"), "sluttish");});
test("sly -> sly", function() {deepEqual( Stem("sly"), "sly");});
test("slys -> sly", function() {deepEqual( Stem("slys"), "sly");});
test("smack -> smack", function() {deepEqual( Stem("smack"), "smack");});
test("smacked -> smack", function() {deepEqual( Stem("smacked"), "smack");});
test("smacking -> smack", function() {deepEqual( Stem("smacking"), "smack");});
test("smacks -> smack", function() {deepEqual( Stem("smacks"), "smack");});
test("small -> small", function() {deepEqual( Stem("small"), "small");});
test("smaller -> smaller", function() {deepEqual( Stem("smaller"), "smaller");});
test("smallest -> smallest", function() {deepEqual( Stem("smallest"), "smallest");});
test("smallness -> small", function() {deepEqual( Stem("smallness"), "small");});
test("smallpox -> smallpox", function() {deepEqual( Stem("smallpox"), "smallpox");});
test("smalls -> small", function() {deepEqual( Stem("smalls"), "small");});
test("smalus -> smalu", function() {deepEqual( Stem("smalus"), "smalu");});
test("smart -> smart", function() {deepEqual( Stem("smart"), "smart");});
test("smartest -> smartest", function() {deepEqual( Stem("smartest"), "smartest");});
test("smarting -> smart", function() {deepEqual( Stem("smarting"), "smart");});
test("smartly -> smartli", function() {deepEqual( Stem("smartly"), "smartli");});
test("smashed -> smash", function() {deepEqual( Stem("smashed"), "smash");});
test("smatch -> smatch", function() {deepEqual( Stem("smatch"), "smatch");});
test("smatter -> smatter", function() {deepEqual( Stem("smatter"), "smatter");});
test("smear -> smear", function() {deepEqual( Stem("smear"), "smear");});
test("smee -> smee", function() {deepEqual( Stem("smee"), "smee");});
test("smell -> smell", function() {deepEqual( Stem("smell"), "smell");});
test("smelling -> smell", function() {deepEqual( Stem("smelling"), "smell");});
test("smells -> smell", function() {deepEqual( Stem("smells"), "smell");});
test("smelt -> smelt", function() {deepEqual( Stem("smelt"), "smelt");});
test("smil -> smil", function() {deepEqual( Stem("smil"), "smil");});
test("smile -> smile", function() {deepEqual( Stem("smile"), "smile");});
test("smiled -> smile", function() {deepEqual( Stem("smiled"), "smile");});
test("smiles -> smile", function() {deepEqual( Stem("smiles"), "smile");});
test("smilest -> smilest", function() {deepEqual( Stem("smilest"), "smilest");});
test("smilets -> smilet", function() {deepEqual( Stem("smilets"), "smilet");});
test("smiling -> smile", function() {deepEqual( Stem("smiling"), "smile");});
test("smilingly -> smilingli", function() {deepEqual( Stem("smilingly"), "smilingli");});
test("smirch -> smirch", function() {deepEqual( Stem("smirch"), "smirch");});
test("smirched -> smirch", function() {deepEqual( Stem("smirched"), "smirch");});
test("smirk -> smirk", function() {deepEqual( Stem("smirk"), "smirk");});
test("smirked -> smirk", function() {deepEqual( Stem("smirked"), "smirk");});
test("smirking -> smirk", function() {deepEqual( Stem("smirking"), "smirk");});
test("smit -> smit", function() {deepEqual( Stem("smit"), "smit");});
test("smite -> smite", function() {deepEqual( Stem("smite"), "smite");});
test("smites -> smite", function() {deepEqual( Stem("smites"), "smite");});
test("smith -> smith", function() {deepEqual( Stem("smith"), "smith");});
test("smithfield -> smithfield", function() {deepEqual( Stem("smithfield"), "smithfield");});
test("smiths -> smith", function() {deepEqual( Stem("smiths"), "smith");});
test("smitten -> smitten", function() {deepEqual( Stem("smitten"), "smitten");});
test("smoaking -> smoak", function() {deepEqual( Stem("smoaking"), "smoak");});
test("smock -> smock", function() {deepEqual( Stem("smock"), "smock");});
test("smocks -> smock", function() {deepEqual( Stem("smocks"), "smock");});
test("smok -> smok", function() {deepEqual( Stem("smok"), "smok");});
test("smoke -> smoke", function() {deepEqual( Stem("smoke"), "smoke");});
test("smoked -> smoke", function() {deepEqual( Stem("smoked"), "smoke");});
test("smokes -> smoke", function() {deepEqual( Stem("smokes"), "smoke");});
test("smoking -> smoke", function() {deepEqual( Stem("smoking"), "smoke");});
test("smoky -> smoki", function() {deepEqual( Stem("smoky"), "smoki");});
test("smollett -> smollett", function() {deepEqual( Stem("smollett"), "smollett");});
test("smooth -> smooth", function() {deepEqual( Stem("smooth"), "smooth");});
test("smoothed -> smooth", function() {deepEqual( Stem("smoothed"), "smooth");});
test("smoothing -> smooth", function() {deepEqual( Stem("smoothing"), "smooth");});
test("smoothly -> smoothli", function() {deepEqual( Stem("smoothly"), "smoothli");});
test("smoothness -> smooth", function() {deepEqual( Stem("smoothness"), "smooth");});
test("smooths -> smooth", function() {deepEqual( Stem("smooths"), "smooth");});
test("smote -> smote", function() {deepEqual( Stem("smote"), "smote");});
test("smoth -> smoth", function() {deepEqual( Stem("smoth"), "smoth");});
test("smother -> smother", function() {deepEqual( Stem("smother"), "smother");});
test("smothered -> smother", function() {deepEqual( Stem("smothered"), "smother");});
test("smothering -> smother", function() {deepEqual( Stem("smothering"), "smother");});
test("smug -> smug", function() {deepEqual( Stem("smug"), "smug");});
test("smuggled -> smuggl", function() {deepEqual( Stem("smuggled"), "smuggl");});
test("smuggling -> smuggl", function() {deepEqual( Stem("smuggling"), "smuggl");});
test("smugly -> smugli", function() {deepEqual( Stem("smugly"), "smugli");});
test("smulkin -> smulkin", function() {deepEqual( Stem("smulkin"), "smulkin");});
test("smutch -> smutch", function() {deepEqual( Stem("smutch"), "smutch");});
test("snack -> snack", function() {deepEqual( Stem("snack"), "snack");});
test("snaffle -> snaffl", function() {deepEqual( Stem("snaffle"), "snaffl");});
test("snaffler -> snaffler", function() {deepEqual( Stem("snaffler"), "snaffler");});
test("snail -> snail", function() {deepEqual( Stem("snail"), "snail");});
test("snailby -> snailbi", function() {deepEqual( Stem("snailby"), "snailbi");});
test("snails -> snail", function() {deepEqual( Stem("snails"), "snail");});
test("snaily -> snaili", function() {deepEqual( Stem("snaily"), "snaili");});
test("snake -> snake", function() {deepEqual( Stem("snake"), "snake");});
test("snakes -> snake", function() {deepEqual( Stem("snakes"), "snake");});
test("snaky -> snaki", function() {deepEqual( Stem("snaky"), "snaki");});
test("snap -> snap", function() {deepEqual( Stem("snap"), "snap");});
test("snapp -> snapp", function() {deepEqual( Stem("snapp"), "snapp");});
test("snapped -> snap", function() {deepEqual( Stem("snapped"), "snap");});
test("snapper -> snapper", function() {deepEqual( Stem("snapper"), "snapper");});
test("snapping -> snap", function() {deepEqual( Stem("snapping"), "snap");});
test("snapt -> snapt", function() {deepEqual( Stem("snapt"), "snapt");});
test("snar -> snar", function() {deepEqual( Stem("snar"), "snar");});
test("snare -> snare", function() {deepEqual( Stem("snare"), "snare");});
test("snares -> snare", function() {deepEqual( Stem("snares"), "snare");});
test("snarl -> snarl", function() {deepEqual( Stem("snarl"), "snarl");});
test("snarled -> snarl", function() {deepEqual( Stem("snarled"), "snarl");});
test("snarleth -> snarleth", function() {deepEqual( Stem("snarleth"), "snarleth");});
test("snarling -> snarl", function() {deepEqual( Stem("snarling"), "snarl");});
test("snatch -> snatch", function() {deepEqual( Stem("snatch"), "snatch");});
test("snatchers -> snatcher", function() {deepEqual( Stem("snatchers"), "snatcher");});
test("snatches -> snatch", function() {deepEqual( Stem("snatches"), "snatch");});
test("snatching -> snatch", function() {deepEqual( Stem("snatching"), "snatch");});
test("sneak -> sneak", function() {deepEqual( Stem("sneak"), "sneak");});
test("sneaked -> sneak", function() {deepEqual( Stem("sneaked"), "sneak");});
test("sneaking -> sneak", function() {deepEqual( Stem("sneaking"), "sneak");});
test("sneap -> sneap", function() {deepEqual( Stem("sneap"), "sneap");});
test("sneaping -> sneap", function() {deepEqual( Stem("sneaping"), "sneap");});
test("sneck -> sneck", function() {deepEqual( Stem("sneck"), "sneck");});
test("sneer -> sneer", function() {deepEqual( Stem("sneer"), "sneer");});
test("sneered -> sneer", function() {deepEqual( Stem("sneered"), "sneer");});
test("sneering -> sneer", function() {deepEqual( Stem("sneering"), "sneer");});
test("sniffin -> sniffin", function() {deepEqual( Stem("sniffin"), "sniffin");});
test("sniffling -> sniffl", function() {deepEqual( Stem("sniffling"), "sniffl");});
test("snip -> snip", function() {deepEqual( Stem("snip"), "snip");});
test("snipe -> snipe", function() {deepEqual( Stem("snipe"), "snipe");});
test("snipes -> snipe", function() {deepEqual( Stem("snipes"), "snipe");});
test("snipping -> snip", function() {deepEqual( Stem("snipping"), "snip");});
test("snipt -> snipt", function() {deepEqual( Stem("snipt"), "snipt");});
test("sniveller -> snivel", function() {deepEqual( Stem("sniveller"), "snivel");});
test("snivelling -> snivel", function() {deepEqual( Stem("snivelling"), "snivel");});
test("snob -> snob", function() {deepEqual( Stem("snob"), "snob");});
test("snoozed -> snooz", function() {deepEqual( Stem("snoozed"), "snooz");});
test("snore -> snore", function() {deepEqual( Stem("snore"), "snore");});
test("snored -> snore", function() {deepEqual( Stem("snored"), "snore");});
test("snores -> snore", function() {deepEqual( Stem("snores"), "snore");});
test("snoring -> snore", function() {deepEqual( Stem("snoring"), "snore");});
test("snorting -> snort", function() {deepEqual( Stem("snorting"), "snort");});
test("snout -> snout", function() {deepEqual( Stem("snout"), "snout");});
test("snow -> snow", function() {deepEqual( Stem("snow"), "snow");});
test("snowballs -> snowbal", function() {deepEqual( Stem("snowballs"), "snowbal");});
test("snowed -> snow", function() {deepEqual( Stem("snowed"), "snow");});
test("snowy -> snowi", function() {deepEqual( Stem("snowy"), "snowi");});
test("snub -> snub", function() {deepEqual( Stem("snub"), "snub");});
test("snuff -> snuff", function() {deepEqual( Stem("snuff"), "snuff");});
test("snuffle -> snuffl", function() {deepEqual( Stem("snuffle"), "snuffl");});
test("snuffled -> snuffl", function() {deepEqual( Stem("snuffled"), "snuffl");});
test("snuffs -> snuff", function() {deepEqual( Stem("snuffs"), "snuff");});
test("snuffy -> snuffi", function() {deepEqual( Stem("snuffy"), "snuffi");});
test("snug -> snug", function() {deepEqual( Stem("snug"), "snug");});
test("so -> so", function() {deepEqual( Stem("so"), "so");});
test("soak -> soak", function() {deepEqual( Stem("soak"), "soak");});
test("soaking -> soak", function() {deepEqual( Stem("soaking"), "soak");});
test("soaks -> soak", function() {deepEqual( Stem("soaks"), "soak");});
test("soames -> soam", function() {deepEqual( Stem("soames"), "soam");});
test("soap -> soap", function() {deepEqual( Stem("soap"), "soap");});
test("soar -> soar", function() {deepEqual( Stem("soar"), "soar");});
test("soared -> soar", function() {deepEqual( Stem("soared"), "soar");});
test("soaring -> soar", function() {deepEqual( Stem("soaring"), "soar");});
test("soars -> soar", function() {deepEqual( Stem("soars"), "soar");});
test("sob -> sob", function() {deepEqual( Stem("sob"), "sob");});
test("sobbed -> sob", function() {deepEqual( Stem("sobbed"), "sob");});
test("sobbing -> sob", function() {deepEqual( Stem("sobbing"), "sob");});
test("sober -> sober", function() {deepEqual( Stem("sober"), "sober");});
test("soberer -> sober", function() {deepEqual( Stem("soberer"), "sober");});
test("soberly -> soberli", function() {deepEqual( Stem("soberly"), "soberli");});
test("sobieski -> sobieski", function() {deepEqual( Stem("sobieski"), "sobieski");});
test("sobriety -> sobrieti", function() {deepEqual( Stem("sobriety"), "sobrieti");});
test("sobs -> sob", function() {deepEqual( Stem("sobs"), "sob");});
test("sociable -> sociabl", function() {deepEqual( Stem("sociable"), "sociabl");});
test("social -> social", function() {deepEqual( Stem("social"), "social");});
test("societies -> societi", function() {deepEqual( Stem("societies"), "societi");});
test("society -> societi", function() {deepEqual( Stem("society"), "societi");});
test("socks -> sock", function() {deepEqual( Stem("socks"), "sock");});
test("socrates -> socrat", function() {deepEqual( Stem("socrates"), "socrat");});
test("sod -> sod", function() {deepEqual( Stem("sod"), "sod");});
test("soda -> soda", function() {deepEqual( Stem("soda"), "soda");});
test("sodden -> sodden", function() {deepEqual( Stem("sodden"), "sodden");});
test("soe -> soe", function() {deepEqual( Stem("soe"), "soe");});
test("soever -> soever", function() {deepEqual( Stem("soever"), "soever");});
test("sofa -> sofa", function() {deepEqual( Stem("sofa"), "sofa");});
test("soft -> soft", function() {deepEqual( Stem("soft"), "soft");});
test("soften -> soften", function() {deepEqual( Stem("soften"), "soften");});
test("softened -> soften", function() {deepEqual( Stem("softened"), "soften");});
test("softening -> soften", function() {deepEqual( Stem("softening"), "soften");});
test("softens -> soften", function() {deepEqual( Stem("softens"), "soften");});
test("softer -> softer", function() {deepEqual( Stem("softer"), "softer");});
test("softest -> softest", function() {deepEqual( Stem("softest"), "softest");});
test("softly -> softli", function() {deepEqual( Stem("softly"), "softli");});
test("softness -> soft", function() {deepEqual( Stem("softness"), "soft");});
test("sofy -> sofi", function() {deepEqual( Stem("sofy"), "sofi");});
test("soho -> soho", function() {deepEqual( Stem("soho"), "soho");});
test("soil -> soil", function() {deepEqual( Stem("soil"), "soil");});
test("soiled -> soil", function() {deepEqual( Stem("soiled"), "soil");});
test("soilure -> soilur", function() {deepEqual( Stem("soilure"), "soilur");});
test("soiree -> soire", function() {deepEqual( Stem("soiree"), "soire");});
test("soit -> soit", function() {deepEqual( Stem("soit"), "soit");});
test("sojourn -> sojourn", function() {deepEqual( Stem("sojourn"), "sojourn");});
test("sojourners -> sojourn", function() {deepEqual( Stem("sojourners"), "sojourn");});
test("sol -> sol", function() {deepEqual( Stem("sol"), "sol");});
test("sola -> sola", function() {deepEqual( Stem("sola"), "sola");});
test("solace -> solac", function() {deepEqual( Stem("solace"), "solac");});
test("solaced -> solac", function() {deepEqual( Stem("solaced"), "solac");});
test("solanio -> solanio", function() {deepEqual( Stem("solanio"), "solanio");});
test("sold -> sold", function() {deepEqual( Stem("sold"), "sold");});
test("soldat -> soldat", function() {deepEqual( Stem("soldat"), "soldat");});
test("solder -> solder", function() {deepEqual( Stem("solder"), "solder");});
test("soldest -> soldest", function() {deepEqual( Stem("soldest"), "soldest");});
test("soldier -> soldier", function() {deepEqual( Stem("soldier"), "soldier");});
test("soldierlike -> soldierlik", function() {deepEqual( Stem("soldierlike"), "soldierlik");});
test("soldierly -> soldierli", function() {deepEqual( Stem("soldierly"), "soldierli");});
test("soldiers -> soldier", function() {deepEqual( Stem("soldiers"), "soldier");});
test("soldiership -> soldiership", function() {deepEqual( Stem("soldiership"), "soldiership");});
test("soldiery -> soldieri", function() {deepEqual( Stem("soldiery"), "soldieri");});
test("sole -> sole", function() {deepEqual( Stem("sole"), "sole");});
test("solely -> sole", function() {deepEqual( Stem("solely"), "sole");});
test("solem -> solem", function() {deepEqual( Stem("solem"), "solem");});
test("solemn -> solemn", function() {deepEqual( Stem("solemn"), "solemn");});
test("solemness -> solem", function() {deepEqual( Stem("solemness"), "solem");});
test("solemnities -> solemn", function() {deepEqual( Stem("solemnities"), "solemn");});
test("solemnity -> solemn", function() {deepEqual( Stem("solemnity"), "solemn");});
test("solemniz -> solemniz", function() {deepEqual( Stem("solemniz"), "solemniz");});
test("solemnize -> solemn", function() {deepEqual( Stem("solemnize"), "solemn");});
test("solemnized -> solemn", function() {deepEqual( Stem("solemnized"), "solemn");});
test("solemnly -> solemnli", function() {deepEqual( Stem("solemnly"), "solemnli");});
test("soles -> sole", function() {deepEqual( Stem("soles"), "sole");});
test("solicit -> solicit", function() {deepEqual( Stem("solicit"), "solicit");});
test("solicitation -> solicit", function() {deepEqual( Stem("solicitation"), "solicit");});
test("solicited -> solicit", function() {deepEqual( Stem("solicited"), "solicit");});
test("soliciting -> solicit", function() {deepEqual( Stem("soliciting"), "solicit");});
test("solicitings -> solicit", function() {deepEqual( Stem("solicitings"), "solicit");});
test("solicitor -> solicitor", function() {deepEqual( Stem("solicitor"), "solicitor");});
test("solicitors -> solicitor", function() {deepEqual( Stem("solicitors"), "solicitor");});
test("solicits -> solicit", function() {deepEqual( Stem("solicits"), "solicit");});
test("solicitude -> solicitud", function() {deepEqual( Stem("solicitude"), "solicitud");});
test("solid -> solid", function() {deepEqual( Stem("solid"), "solid");});
test("solidares -> solidar", function() {deepEqual( Stem("solidares"), "solidar");});
test("solidity -> solid", function() {deepEqual( Stem("solidity"), "solid");});
test("solinus -> solinu", function() {deepEqual( Stem("solinus"), "solinu");});
test("solitary -> solitari", function() {deepEqual( Stem("solitary"), "solitari");});
test("solitude -> solitud", function() {deepEqual( Stem("solitude"), "solitud");});
test("solomon -> solomon", function() {deepEqual( Stem("solomon"), "solomon");});
test("solon -> solon", function() {deepEqual( Stem("solon"), "solon");});
test("solum -> solum", function() {deepEqual( Stem("solum"), "solum");});
test("solus -> solu", function() {deepEqual( Stem("solus"), "solu");});
test("solyman -> solyman", function() {deepEqual( Stem("solyman"), "solyman");});
test("sombre -> sombr", function() {deepEqual( Stem("sombre"), "sombr");});
test("some -> some", function() {deepEqual( Stem("some"), "some");});
test("somebody -> somebodi", function() {deepEqual( Stem("somebody"), "somebodi");});
test("somehow -> somehow", function() {deepEqual( Stem("somehow"), "somehow");});
test("someone -> someon", function() {deepEqual( Stem("someone"), "someon");});
test("somers -> somer", function() {deepEqual( Stem("somers"), "somer");});
test("somerset -> somerset", function() {deepEqual( Stem("somerset"), "somerset");});
test("somersetshire -> somersetshir", function() {deepEqual( Stem("somersetshire"), "somersetshir");});
test("somerville -> somervil", function() {deepEqual( Stem("somerville"), "somervil");});
test("something -> someth", function() {deepEqual( Stem("something"), "someth");});
test("somethink -> somethink", function() {deepEqual( Stem("somethink"), "somethink");});
test("sometime -> sometim", function() {deepEqual( Stem("sometime"), "sometim");});
test("sometimes -> sometim", function() {deepEqual( Stem("sometimes"), "sometim");});
test("somever -> somev", function() {deepEqual( Stem("somever"), "somev");});
test("somewhat -> somewhat", function() {deepEqual( Stem("somewhat"), "somewhat");});
test("somewhere -> somewher", function() {deepEqual( Stem("somewhere"), "somewher");});
test("somewhither -> somewhith", function() {deepEqual( Stem("somewhither"), "somewhith");});
test("somme -> somm", function() {deepEqual( Stem("somme"), "somm");});
test("son -> son", function() {deepEqual( Stem("son"), "son");});
test("sonance -> sonanc", function() {deepEqual( Stem("sonance"), "sonanc");});
test("sonata -> sonata", function() {deepEqual( Stem("sonata"), "sonata");});
test("sonatas -> sonata", function() {deepEqual( Stem("sonatas"), "sonata");});
test("song -> song", function() {deepEqual( Stem("song"), "song");});
test("songs -> song", function() {deepEqual( Stem("songs"), "song");});
test("songsters -> songster", function() {deepEqual( Stem("songsters"), "songster");});
test("sonnambula -> sonnambula", function() {deepEqual( Stem("sonnambula"), "sonnambula");});
test("sonnet -> sonnet", function() {deepEqual( Stem("sonnet"), "sonnet");});
test("sonneting -> sonnet", function() {deepEqual( Stem("sonneting"), "sonnet");});
test("sonnets -> sonnet", function() {deepEqual( Stem("sonnets"), "sonnet");});
test("sonorous -> sonor", function() {deepEqual( Stem("sonorous"), "sonor");});
test("sons -> son", function() {deepEqual( Stem("sons"), "son");});
test("sont -> sont", function() {deepEqual( Stem("sont"), "sont");});
test("sonties -> sonti", function() {deepEqual( Stem("sonties"), "sonti");});
test("soon -> soon", function() {deepEqual( Stem("soon"), "soon");});
test("sooner -> sooner", function() {deepEqual( Stem("sooner"), "sooner");});
test("soonest -> soonest", function() {deepEqual( Stem("soonest"), "soonest");});
test("sooth -> sooth", function() {deepEqual( Stem("sooth"), "sooth");});
test("soothe -> sooth", function() {deepEqual( Stem("soothe"), "sooth");});
test("soothed -> sooth", function() {deepEqual( Stem("soothed"), "sooth");});
test("soothers -> soother", function() {deepEqual( Stem("soothers"), "soother");});
test("soothing -> sooth", function() {deepEqual( Stem("soothing"), "sooth");});
test("soothingly -> soothingli", function() {deepEqual( Stem("soothingly"), "soothingli");});
test("soothsay -> soothsai", function() {deepEqual( Stem("soothsay"), "soothsai");});
test("soothsayer -> soothsay", function() {deepEqual( Stem("soothsayer"), "soothsay");});
test("sooty -> sooti", function() {deepEqual( Stem("sooty"), "sooti");});
test("sop -> sop", function() {deepEqual( Stem("sop"), "sop");});
test("sophia -> sophia", function() {deepEqual( Stem("sophia"), "sophia");});
test("sophister -> sophist", function() {deepEqual( Stem("sophister"), "sophist");});
test("sophisticated -> sophist", function() {deepEqual( Stem("sophisticated"), "sophist");});
test("sophy -> sophi", function() {deepEqual( Stem("sophy"), "sophi");});
test("sops -> sop", function() {deepEqual( Stem("sops"), "sop");});
test("sor -> sor", function() {deepEqual( Stem("sor"), "sor");});
test("sorcerer -> sorcer", function() {deepEqual( Stem("sorcerer"), "sorcer");});
test("sorcerers -> sorcer", function() {deepEqual( Stem("sorcerers"), "sorcer");});
test("sorceress -> sorceress", function() {deepEqual( Stem("sorceress"), "sorceress");});
test("sorceries -> sorceri", function() {deepEqual( Stem("sorceries"), "sorceri");});
test("sorcery -> sorceri", function() {deepEqual( Stem("sorcery"), "sorceri");});
test("sordid -> sordid", function() {deepEqual( Stem("sordid"), "sordid");});
test("sore -> sore", function() {deepEqual( Stem("sore"), "sore");});
test("sorel -> sorel", function() {deepEqual( Stem("sorel"), "sorel");});
test("sorely -> sore", function() {deepEqual( Stem("sorely"), "sore");});
test("sorer -> sorer", function() {deepEqual( Stem("sorer"), "sorer");});
test("sores -> sore", function() {deepEqual( Stem("sores"), "sore");});
test("sorrier -> sorrier", function() {deepEqual( Stem("sorrier"), "sorrier");});
test("sorriest -> sorriest", function() {deepEqual( Stem("sorriest"), "sorriest");});
test("sorrow -> sorrow", function() {deepEqual( Stem("sorrow"), "sorrow");});
test("sorrowed -> sorrow", function() {deepEqual( Stem("sorrowed"), "sorrow");});
test("sorrowest -> sorrowest", function() {deepEqual( Stem("sorrowest"), "sorrowest");});
test("sorrowful -> sorrow", function() {deepEqual( Stem("sorrowful"), "sorrow");});
test("sorrowfully -> sorrowfulli", function() {deepEqual( Stem("sorrowfully"), "sorrowfulli");});
test("sorrowing -> sorrow", function() {deepEqual( Stem("sorrowing"), "sorrow");});
test("sorrows -> sorrow", function() {deepEqual( Stem("sorrows"), "sorrow");});
test("sorry -> sorri", function() {deepEqual( Stem("sorry"), "sorri");});
test("sort -> sort", function() {deepEqual( Stem("sort"), "sort");});
test("sortance -> sortanc", function() {deepEqual( Stem("sortance"), "sortanc");});
test("sorted -> sort", function() {deepEqual( Stem("sorted"), "sort");});
test("sorting -> sort", function() {deepEqual( Stem("sorting"), "sort");});
test("sorts -> sort", function() {deepEqual( Stem("sorts"), "sort");});
test("sospiri -> sospiri", function() {deepEqual( Stem("sospiri"), "sospiri");});
test("sossius -> sossiu", function() {deepEqual( Stem("sossius"), "sossiu");});
test("sot -> sot", function() {deepEqual( Stem("sot"), "sot");});
test("soto -> soto", function() {deepEqual( Stem("soto"), "soto");});
test("sots -> sot", function() {deepEqual( Stem("sots"), "sot");});
test("sottish -> sottish", function() {deepEqual( Stem("sottish"), "sottish");});
test("soud -> soud", function() {deepEqual( Stem("soud"), "soud");});
test("sought -> sought", function() {deepEqual( Stem("sought"), "sought");});
test("soul -> soul", function() {deepEqual( Stem("soul"), "soul");});
test("sould -> sould", function() {deepEqual( Stem("sould"), "sould");});
test("souled -> soul", function() {deepEqual( Stem("souled"), "soul");});
test("soulless -> soulless", function() {deepEqual( Stem("soulless"), "soulless");});
test("souls -> soul", function() {deepEqual( Stem("souls"), "soul");});
test("sound -> sound", function() {deepEqual( Stem("sound"), "sound");});
test("sounded -> sound", function() {deepEqual( Stem("sounded"), "sound");});
test("sounder -> sounder", function() {deepEqual( Stem("sounder"), "sounder");});
test("soundest -> soundest", function() {deepEqual( Stem("soundest"), "soundest");});
test("sounding -> sound", function() {deepEqual( Stem("sounding"), "sound");});
test("soundless -> soundless", function() {deepEqual( Stem("soundless"), "soundless");});
test("soundly -> soundli", function() {deepEqual( Stem("soundly"), "soundli");});
test("soundness -> sound", function() {deepEqual( Stem("soundness"), "sound");});
test("soundpost -> soundpost", function() {deepEqual( Stem("soundpost"), "soundpost");});
test("sounds -> sound", function() {deepEqual( Stem("sounds"), "sound");});
test("soup -> soup", function() {deepEqual( Stem("soup"), "soup");});
test("sour -> sour", function() {deepEqual( Stem("sour"), "sour");});
test("source -> sourc", function() {deepEqual( Stem("source"), "sourc");});
test("sources -> sourc", function() {deepEqual( Stem("sources"), "sourc");});
test("soured -> sour", function() {deepEqual( Stem("soured"), "sour");});
test("sourest -> sourest", function() {deepEqual( Stem("sourest"), "sourest");});
test("sourly -> sourli", function() {deepEqual( Stem("sourly"), "sourli");});
test("sournois -> sournoi", function() {deepEqual( Stem("sournois"), "sournoi");});
test("sours -> sour", function() {deepEqual( Stem("sours"), "sour");});
test("sous -> sou", function() {deepEqual( Stem("sous"), "sou");});
test("souse -> sous", function() {deepEqual( Stem("souse"), "sous");});
test("south -> south", function() {deepEqual( Stem("south"), "south");});
test("southam -> southam", function() {deepEqual( Stem("southam"), "southam");});
test("southampton -> southampton", function() {deepEqual( Stem("southampton"), "southampton");});
test("southdown -> southdown", function() {deepEqual( Stem("southdown"), "southdown");});
test("southdowns -> southdown", function() {deepEqual( Stem("southdowns"), "southdown");});
test("southerly -> southerli", function() {deepEqual( Stem("southerly"), "southerli");});
test("southern -> southern", function() {deepEqual( Stem("southern"), "southern");});
test("southward -> southward", function() {deepEqual( Stem("southward"), "southward");});
test("southwark -> southwark", function() {deepEqual( Stem("southwark"), "southwark");});
test("southwell -> southwel", function() {deepEqual( Stem("southwell"), "southwel");});
test("souviendrai -> souviendrai", function() {deepEqual( Stem("souviendrai"), "souviendrai");});
test("sov -> sov", function() {deepEqual( Stem("sov"), "sov");});
test("sovereign -> sovereign", function() {deepEqual( Stem("sovereign"), "sovereign");});
test("sovereignest -> sovereignest", function() {deepEqual( Stem("sovereignest"), "sovereignest");});
test("sovereignly -> sovereignli", function() {deepEqual( Stem("sovereignly"), "sovereignli");});
test("sovereigns -> sovereign", function() {deepEqual( Stem("sovereigns"), "sovereign");});
test("sovereignty -> sovereignti", function() {deepEqual( Stem("sovereignty"), "sovereignti");});
test("sovereignvours -> sovereignvour", function() {deepEqual( Stem("sovereignvours"), "sovereignvour");});
test("sow -> sow", function() {deepEqual( Stem("sow"), "sow");});
test("sowing -> sow", function() {deepEqual( Stem("sowing"), "sow");});
test("sowl -> sowl", function() {deepEqual( Stem("sowl"), "sowl");});
test("sown -> sown", function() {deepEqual( Stem("sown"), "sown");});
test("sowster -> sowster", function() {deepEqual( Stem("sowster"), "sowster");});
test("sowter -> sowter", function() {deepEqual( Stem("sowter"), "sowter");});
test("soyer -> soyer", function() {deepEqual( Stem("soyer"), "soyer");});
test("space -> space", function() {deepEqual( Stem("space"), "space");});
test("spaces -> space", function() {deepEqual( Stem("spaces"), "space");});
test("spacious -> spaciou", function() {deepEqual( Stem("spacious"), "spaciou");});
test("spade -> spade", function() {deepEqual( Stem("spade"), "spade");});
test("spades -> spade", function() {deepEqual( Stem("spades"), "spade");});
test("spain -> spain", function() {deepEqual( Stem("spain"), "spain");});
test("spak -> spak", function() {deepEqual( Stem("spak"), "spak");});
test("spake -> spake", function() {deepEqual( Stem("spake"), "spake");});
test("spakest -> spakest", function() {deepEqual( Stem("spakest"), "spakest");});
test("span -> span", function() {deepEqual( Stem("span"), "span");});
test("spangle -> spangl", function() {deepEqual( Stem("spangle"), "spangl");});
test("spangled -> spangl", function() {deepEqual( Stem("spangled"), "spangl");});
test("spangles -> spangl", function() {deepEqual( Stem("spangles"), "spangl");});
test("spaniard -> spaniard", function() {deepEqual( Stem("spaniard"), "spaniard");});
test("spaniards -> spaniard", function() {deepEqual( Stem("spaniards"), "spaniard");});
test("spaniel -> spaniel", function() {deepEqual( Stem("spaniel"), "spaniel");});
test("spaniels -> spaniel", function() {deepEqual( Stem("spaniels"), "spaniel");});
test("spanil -> spanil", function() {deepEqual( Stem("spanil"), "spanil");});
test("spanish -> spanish", function() {deepEqual( Stem("spanish"), "spanish");});
test("spann -> spann", function() {deepEqual( Stem("spann"), "spann");});
test("spans -> span", function() {deepEqual( Stem("spans"), "span");});
test("spar -> spar", function() {deepEqual( Stem("spar"), "spar");});
test("spare -> spare", function() {deepEqual( Stem("spare"), "spare");});
test("spared -> spare", function() {deepEqual( Stem("spared"), "spare");});
test("spares -> spare", function() {deepEqual( Stem("spares"), "spare");});
test("sparing -> spare", function() {deepEqual( Stem("sparing"), "spare");});
test("sparingly -> sparingli", function() {deepEqual( Stem("sparingly"), "sparingli");});
test("spark -> spark", function() {deepEqual( Stem("spark"), "spark");});
test("sparkle -> sparkl", function() {deepEqual( Stem("sparkle"), "sparkl");});
test("sparkled -> sparkl", function() {deepEqual( Stem("sparkled"), "sparkl");});
test("sparkles -> sparkl", function() {deepEqual( Stem("sparkles"), "sparkl");});
test("sparkling -> sparkl", function() {deepEqual( Stem("sparkling"), "sparkl");});
test("sparks -> spark", function() {deepEqual( Stem("sparks"), "spark");});
test("sparrow -> sparrow", function() {deepEqual( Stem("sparrow"), "sparrow");});
test("sparrows -> sparrow", function() {deepEqual( Stem("sparrows"), "sparrow");});
test("sparta -> sparta", function() {deepEqual( Stem("sparta"), "sparta");});
test("spartan -> spartan", function() {deepEqual( Stem("spartan"), "spartan");});
test("spatter -> spatter", function() {deepEqual( Stem("spatter"), "spatter");});
test("spatterdash -> spatterdash", function() {deepEqual( Stem("spatterdash"), "spatterdash");});
test("spavin -> spavin", function() {deepEqual( Stem("spavin"), "spavin");});
test("spavins -> spavin", function() {deepEqual( Stem("spavins"), "spavin");});
test("spawn -> spawn", function() {deepEqual( Stem("spawn"), "spawn");});
test("speak -> speak", function() {deepEqual( Stem("speak"), "speak");});
test("speaker -> speaker", function() {deepEqual( Stem("speaker"), "speaker");});
test("speakers -> speaker", function() {deepEqual( Stem("speakers"), "speaker");});
test("speakest -> speakest", function() {deepEqual( Stem("speakest"), "speakest");});
test("speaketh -> speaketh", function() {deepEqual( Stem("speaketh"), "speaketh");});
test("speaking -> speak", function() {deepEqual( Stem("speaking"), "speak");});
test("speaks -> speak", function() {deepEqual( Stem("speaks"), "speak");});
test("spear -> spear", function() {deepEqual( Stem("spear"), "spear");});
test("speared -> spear", function() {deepEqual( Stem("speared"), "spear");});
test("speargrass -> speargrass", function() {deepEqual( Stem("speargrass"), "speargrass");});
test("spears -> spear", function() {deepEqual( Stem("spears"), "spear");});
test("spec -> spec", function() {deepEqual( Stem("spec"), "spec");});
test("special -> special", function() {deepEqual( Stem("special"), "special");});
test("specialities -> special", function() {deepEqual( Stem("specialities"), "special");});
test("specially -> special", function() {deepEqual( Stem("specially"), "special");});
test("specialties -> specialti", function() {deepEqual( Stem("specialties"), "specialti");});
test("specialty -> specialti", function() {deepEqual( Stem("specialty"), "specialti");});
test("species -> speci", function() {deepEqual( Stem("species"), "speci");});
test("specific -> specif", function() {deepEqual( Stem("specific"), "specif");});
test("specified -> specifi", function() {deepEqual( Stem("specified"), "specifi");});
test("specify -> specifi", function() {deepEqual( Stem("specify"), "specifi");});
test("specimen -> specimen", function() {deepEqual( Stem("specimen"), "specimen");});
test("specimens -> specimen", function() {deepEqual( Stem("specimens"), "specimen");});
test("speciously -> specious", function() {deepEqual( Stem("speciously"), "specious");});
test("speckled -> speckl", function() {deepEqual( Stem("speckled"), "speckl");});
test("speckling -> speckl", function() {deepEqual( Stem("speckling"), "speckl");});
test("spectacle -> spectacl", function() {deepEqual( Stem("spectacle"), "spectacl");});
test("spectacled -> spectacl", function() {deepEqual( Stem("spectacled"), "spectacl");});
test("spectacles -> spectacl", function() {deepEqual( Stem("spectacles"), "spectacl");});
test("spectators -> spectat", function() {deepEqual( Stem("spectators"), "spectat");});
test("spectatorship -> spectatorship", function() {deepEqual( Stem("spectatorship"), "spectatorship");});
test("speculate -> specul", function() {deepEqual( Stem("speculate"), "specul");});
test("speculated -> specul", function() {deepEqual( Stem("speculated"), "specul");});
test("speculating -> specul", function() {deepEqual( Stem("speculating"), "specul");});
test("speculation -> specul", function() {deepEqual( Stem("speculation"), "specul");});
test("speculations -> specul", function() {deepEqual( Stem("speculations"), "specul");});
test("speculative -> specul", function() {deepEqual( Stem("speculative"), "specul");});
test("speculator -> specul", function() {deepEqual( Stem("speculator"), "specul");});
test("sped -> sped", function() {deepEqual( Stem("sped"), "sped");});
test("speech -> speech", function() {deepEqual( Stem("speech"), "speech");});
test("speeches -> speech", function() {deepEqual( Stem("speeches"), "speech");});
test("speechifying -> speechifi", function() {deepEqual( Stem("speechifying"), "speechifi");});
test("speechless -> speechless", function() {deepEqual( Stem("speechless"), "speechless");});
test("speechlessly -> speechlessli", function() {deepEqual( Stem("speechlessly"), "speechlessli");});
test("speed -> speed", function() {deepEqual( Stem("speed"), "speed");});
test("speeded -> speed", function() {deepEqual( Stem("speeded"), "speed");});
test("speedier -> speedier", function() {deepEqual( Stem("speedier"), "speedier");});
test("speediest -> speediest", function() {deepEqual( Stem("speediest"), "speediest");});
test("speedily -> speedili", function() {deepEqual( Stem("speedily"), "speedili");});
test("speediness -> speedi", function() {deepEqual( Stem("speediness"), "speedi");});
test("speeding -> speed", function() {deepEqual( Stem("speeding"), "speed");});
test("speeds -> speed", function() {deepEqual( Stem("speeds"), "speed");});
test("speedy -> speedi", function() {deepEqual( Stem("speedy"), "speedi");});
test("speens -> speen", function() {deepEqual( Stem("speens"), "speen");});
test("spell -> spell", function() {deepEqual( Stem("spell"), "spell");});
test("spelling -> spell", function() {deepEqual( Stem("spelling"), "spell");});
test("spells -> spell", function() {deepEqual( Stem("spells"), "spell");});
test("spelt -> spelt", function() {deepEqual( Stem("spelt"), "spelt");});
test("spencer -> spencer", function() {deepEqual( Stem("spencer"), "spencer");});
test("spend -> spend", function() {deepEqual( Stem("spend"), "spend");});
test("spendest -> spendest", function() {deepEqual( Stem("spendest"), "spendest");});
test("spending -> spend", function() {deepEqual( Stem("spending"), "spend");});
test("spends -> spend", function() {deepEqual( Stem("spends"), "spend");});
test("spendthrift -> spendthrift", function() {deepEqual( Stem("spendthrift"), "spendthrift");});
test("spenser -> spenser", function() {deepEqual( Stem("spenser"), "spenser");});
test("spent -> spent", function() {deepEqual( Stem("spent"), "spent");});
test("sperato -> sperato", function() {deepEqual( Stem("sperato"), "sperato");});
test("sperm -> sperm", function() {deepEqual( Stem("sperm"), "sperm");});
test("spero -> spero", function() {deepEqual( Stem("spero"), "spero");});
test("sperr -> sperr", function() {deepEqual( Stem("sperr"), "sperr");});
test("spher -> spher", function() {deepEqual( Stem("spher"), "spher");});
test("sphere -> sphere", function() {deepEqual( Stem("sphere"), "sphere");});
test("sphered -> sphere", function() {deepEqual( Stem("sphered"), "sphere");});
test("spheres -> sphere", function() {deepEqual( Stem("spheres"), "sphere");});
test("spherical -> spheric", function() {deepEqual( Stem("spherical"), "spheric");});
test("sphery -> spheri", function() {deepEqual( Stem("sphery"), "spheri");});
test("sphinx -> sphinx", function() {deepEqual( Stem("sphinx"), "sphinx");});
test("spice -> spice", function() {deepEqual( Stem("spice"), "spice");});
test("spiced -> spice", function() {deepEqual( Stem("spiced"), "spice");});
test("spicery -> spiceri", function() {deepEqual( Stem("spicery"), "spiceri");});
test("spices -> spice", function() {deepEqual( Stem("spices"), "spice");});
test("spicy -> spici", function() {deepEqual( Stem("spicy"), "spici");});
test("spider -> spider", function() {deepEqual( Stem("spider"), "spider");});
test("spiders -> spider", function() {deepEqual( Stem("spiders"), "spider");});
test("spied -> spi", function() {deepEqual( Stem("spied"), "spi");});
test("spies -> spi", function() {deepEqual( Stem("spies"), "spi");});
test("spieth -> spieth", function() {deepEqual( Stem("spieth"), "spieth");});
test("spiggot -> spiggot", function() {deepEqual( Stem("spiggot"), "spiggot");});
test("spightfully -> spightfulli", function() {deepEqual( Stem("spightfully"), "spightfulli");});
test("spigot -> spigot", function() {deepEqual( Stem("spigot"), "spigot");});
test("spill -> spill", function() {deepEqual( Stem("spill"), "spill");});
test("spilling -> spill", function() {deepEqual( Stem("spilling"), "spill");});
test("spills -> spill", function() {deepEqual( Stem("spills"), "spill");});
test("spilt -> spilt", function() {deepEqual( Stem("spilt"), "spilt");});
test("spilth -> spilth", function() {deepEqual( Stem("spilth"), "spilth");});
test("spin -> spin", function() {deepEqual( Stem("spin"), "spin");});
test("spindle -> spindl", function() {deepEqual( Stem("spindle"), "spindl");});
test("spinets -> spinet", function() {deepEqual( Stem("spinets"), "spinet");});
test("spinii -> spinii", function() {deepEqual( Stem("spinii"), "spinii");});
test("spinners -> spinner", function() {deepEqual( Stem("spinners"), "spinner");});
test("spinney -> spinnei", function() {deepEqual( Stem("spinney"), "spinnei");});
test("spinning -> spin", function() {deepEqual( Stem("spinning"), "spin");});
test("spinster -> spinster", function() {deepEqual( Stem("spinster"), "spinster");});
test("spinsters -> spinster", function() {deepEqual( Stem("spinsters"), "spinster");});
test("spire -> spire", function() {deepEqual( Stem("spire"), "spire");});
test("spires -> spire", function() {deepEqual( Stem("spires"), "spire");});
test("spirit -> spirit", function() {deepEqual( Stem("spirit"), "spirit");});
test("spirited -> spirit", function() {deepEqual( Stem("spirited"), "spirit");});
test("spiritless -> spiritless", function() {deepEqual( Stem("spiritless"), "spiritless");});
test("spirits -> spirit", function() {deepEqual( Stem("spirits"), "spirit");});
test("spiritual -> spiritu", function() {deepEqual( Stem("spiritual"), "spiritu");});
test("spiritualty -> spiritualti", function() {deepEqual( Stem("spiritualty"), "spiritualti");});
test("spirituelle -> spirituel", function() {deepEqual( Stem("spirituelle"), "spirituel");});
test("spirt -> spirt", function() {deepEqual( Stem("spirt"), "spirt");});
test("spit -> spit", function() {deepEqual( Stem("spit"), "spit");});
test("spital -> spital", function() {deepEqual( Stem("spital"), "spital");});
test("spite -> spite", function() {deepEqual( Stem("spite"), "spite");});
test("spited -> spite", function() {deepEqual( Stem("spited"), "spite");});
test("spiteful -> spite", function() {deepEqual( Stem("spiteful"), "spite");});
test("spites -> spite", function() {deepEqual( Stem("spites"), "spite");});
test("spits -> spit", function() {deepEqual( Stem("spits"), "spit");});
test("spitted -> spit", function() {deepEqual( Stem("spitted"), "spit");});
test("spitting -> spit", function() {deepEqual( Stem("spitting"), "spit");});
test("spittoons -> spittoon", function() {deepEqual( Stem("spittoons"), "spittoon");});
test("splashed -> splash", function() {deepEqual( Stem("splashed"), "splash");});
test("splashing -> splash", function() {deepEqual( Stem("splashing"), "splash");});
test("splay -> splai", function() {deepEqual( Stem("splay"), "splai");});
test("spleen -> spleen", function() {deepEqual( Stem("spleen"), "spleen");});
test("spleenful -> spleen", function() {deepEqual( Stem("spleenful"), "spleen");});
test("spleens -> spleen", function() {deepEqual( Stem("spleens"), "spleen");});
test("spleeny -> spleeni", function() {deepEqual( Stem("spleeny"), "spleeni");});
test("splendid -> splendid", function() {deepEqual( Stem("splendid"), "splendid");});
test("splendidly -> splendidli", function() {deepEqual( Stem("splendidly"), "splendidli");});
test("splendour -> splendour", function() {deepEqual( Stem("splendour"), "splendour");});
test("splendours -> splendour", function() {deepEqual( Stem("splendours"), "splendour");});
test("splenitive -> splenit", function() {deepEqual( Stem("splenitive"), "splenit");});
test("splinter -> splinter", function() {deepEqual( Stem("splinter"), "splinter");});
test("splinters -> splinter", function() {deepEqual( Stem("splinters"), "splinter");});
test("split -> split", function() {deepEqual( Stem("split"), "split");});
test("splits -> split", function() {deepEqual( Stem("splits"), "split");});
test("splitted -> split", function() {deepEqual( Stem("splitted"), "split");});
test("splitting -> split", function() {deepEqual( Stem("splitting"), "split");});
test("spoff -> spoff", function() {deepEqual( Stem("spoff"), "spoff");});
test("spoil -> spoil", function() {deepEqual( Stem("spoil"), "spoil");});
test("spoiled -> spoil", function() {deepEqual( Stem("spoiled"), "spoil");});
test("spoils -> spoil", function() {deepEqual( Stem("spoils"), "spoil");});
test("spok -> spok", function() {deepEqual( Stem("spok"), "spok");});
test("spoke -> spoke", function() {deepEqual( Stem("spoke"), "spoke");});
test("spoken -> spoken", function() {deepEqual( Stem("spoken"), "spoken");});
test("spokes -> spoke", function() {deepEqual( Stem("spokes"), "spoke");});
test("spokesman -> spokesman", function() {deepEqual( Stem("spokesman"), "spokesman");});
test("sponge -> spong", function() {deepEqual( Stem("sponge"), "spong");});
test("spongy -> spongi", function() {deepEqual( Stem("spongy"), "spongi");});
test("sponsor -> sponsor", function() {deepEqual( Stem("sponsor"), "sponsor");});
test("spontaneously -> spontan", function() {deepEqual( Stem("spontaneously"), "spontan");});
test("spoon -> spoon", function() {deepEqual( Stem("spoon"), "spoon");});
test("spooney -> spoonei", function() {deepEqual( Stem("spooney"), "spoonei");});
test("spoons -> spoon", function() {deepEqual( Stem("spoons"), "spoon");});
test("sport -> sport", function() {deepEqual( Stem("sport"), "sport");});
test("sported -> sport", function() {deepEqual( Stem("sported"), "sport");});
test("sportful -> sport", function() {deepEqual( Stem("sportful"), "sport");});
test("sporting -> sport", function() {deepEqual( Stem("sporting"), "sport");});
test("sportive -> sportiv", function() {deepEqual( Stem("sportive"), "sportiv");});
test("sports -> sport", function() {deepEqual( Stem("sports"), "sport");});
test("sportsmanlike -> sportsmanlik", function() {deepEqual( Stem("sportsmanlike"), "sportsmanlik");});
test("spot -> spot", function() {deepEqual( Stem("spot"), "spot");});
test("spotless -> spotless", function() {deepEqual( Stem("spotless"), "spotless");});
test("spots -> spot", function() {deepEqual( Stem("spots"), "spot");});
test("spotted -> spot", function() {deepEqual( Stem("spotted"), "spot");});
test("spousal -> spousal", function() {deepEqual( Stem("spousal"), "spousal");});
test("spouse -> spous", function() {deepEqual( Stem("spouse"), "spous");});
test("spout -> spout", function() {deepEqual( Stem("spout"), "spout");});
test("spouting -> spout", function() {deepEqual( Stem("spouting"), "spout");});
test("spouts -> spout", function() {deepEqual( Stem("spouts"), "spout");});
test("sprag -> sprag", function() {deepEqual( Stem("sprag"), "sprag");});
test("sprang -> sprang", function() {deepEqual( Stem("sprang"), "sprang");});
test("sprat -> sprat", function() {deepEqual( Stem("sprat"), "sprat");});
test("sprawl -> sprawl", function() {deepEqual( Stem("sprawl"), "sprawl");});
test("sprawling -> sprawl", function() {deepEqual( Stem("sprawling"), "sprawl");});
test("spray -> sprai", function() {deepEqual( Stem("spray"), "sprai");});
test("sprays -> sprai", function() {deepEqual( Stem("sprays"), "sprai");});
test("spread -> spread", function() {deepEqual( Stem("spread"), "spread");});
test("spreading -> spread", function() {deepEqual( Stem("spreading"), "spread");});
test("spreads -> spread", function() {deepEqual( Stem("spreads"), "spread");});
test("sprig -> sprig", function() {deepEqual( Stem("sprig"), "sprig");});
test("sprigged -> sprig", function() {deepEqual( Stem("sprigged"), "sprig");});
test("sprighted -> spright", function() {deepEqual( Stem("sprighted"), "spright");});
test("sprightful -> spright", function() {deepEqual( Stem("sprightful"), "spright");});
test("sprightliness -> sprightli", function() {deepEqual( Stem("sprightliness"), "sprightli");});
test("sprightly -> sprightli", function() {deepEqual( Stem("sprightly"), "sprightli");});
test("sprigs -> sprig", function() {deepEqual( Stem("sprigs"), "sprig");});
test("spring -> spring", function() {deepEqual( Stem("spring"), "spring");});
test("springbock -> springbock", function() {deepEqual( Stem("springbock"), "springbock");});
test("springe -> spring", function() {deepEqual( Stem("springe"), "spring");});
test("springes -> spring", function() {deepEqual( Stem("springes"), "spring");});
test("springeth -> springeth", function() {deepEqual( Stem("springeth"), "springeth");});
test("springhalt -> springhalt", function() {deepEqual( Stem("springhalt"), "springhalt");});
test("springing -> spring", function() {deepEqual( Stem("springing"), "spring");});
test("springs -> spring", function() {deepEqual( Stem("springs"), "spring");});
test("springtime -> springtim", function() {deepEqual( Stem("springtime"), "springtim");});
test("sprinkle -> sprinkl", function() {deepEqual( Stem("sprinkle"), "sprinkl");});
test("sprinkled -> sprinkl", function() {deepEqual( Stem("sprinkled"), "sprinkl");});
test("sprinkles -> sprinkl", function() {deepEqual( Stem("sprinkles"), "sprinkl");});
test("sprite -> sprite", function() {deepEqual( Stem("sprite"), "sprite");});
test("sprited -> sprite", function() {deepEqual( Stem("sprited"), "sprite");});
test("spritely -> sprite", function() {deepEqual( Stem("spritely"), "sprite");});
test("sprites -> sprite", function() {deepEqual( Stem("sprites"), "sprite");});
test("spriting -> sprite", function() {deepEqual( Stem("spriting"), "sprite");});
test("sprout -> sprout", function() {deepEqual( Stem("sprout"), "sprout");});
test("spruce -> spruce", function() {deepEqual( Stem("spruce"), "spruce");});
test("sprung -> sprung", function() {deepEqual( Stem("sprung"), "sprung");});
test("spud -> spud", function() {deepEqual( Stem("spud"), "spud");});
test("spun -> spun", function() {deepEqual( Stem("spun"), "spun");});
test("spunging -> spung", function() {deepEqual( Stem("spunging"), "spung");});
test("spur -> spur", function() {deepEqual( Stem("spur"), "spur");});
test("spurio -> spurio", function() {deepEqual( Stem("spurio"), "spurio");});
test("spurn -> spurn", function() {deepEqual( Stem("spurn"), "spurn");});
test("spurned -> spurn", function() {deepEqual( Stem("spurned"), "spurn");});
test("spurns -> spurn", function() {deepEqual( Stem("spurns"), "spurn");});
test("spurr -> spurr", function() {deepEqual( Stem("spurr"), "spurr");});
test("spurrer -> spurrer", function() {deepEqual( Stem("spurrer"), "spurrer");});
test("spurring -> spur", function() {deepEqual( Stem("spurring"), "spur");});
test("spurs -> spur", function() {deepEqual( Stem("spurs"), "spur");});
test("sputter -> sputter", function() {deepEqual( Stem("sputter"), "sputter");});
test("sputtering -> sputter", function() {deepEqual( Stem("sputtering"), "sputter");});
test("spy -> spy", function() {deepEqual( Stem("spy"), "spy");});
test("spying -> spy", function() {deepEqual( Stem("spying"), "spy");});
test("squabble -> squabbl", function() {deepEqual( Stem("squabble"), "squabbl");});
test("squadron -> squadron", function() {deepEqual( Stem("squadron"), "squadron");});
test("squadrons -> squadron", function() {deepEqual( Stem("squadrons"), "squadron");});
test("squads -> squad", function() {deepEqual( Stem("squads"), "squad");});
test("squalled -> squall", function() {deepEqual( Stem("squalled"), "squall");});
test("squalling -> squall", function() {deepEqual( Stem("squalling"), "squall");});
test("squand -> squand", function() {deepEqual( Stem("squand"), "squand");});
test("squar -> squar", function() {deepEqual( Stem("squar"), "squar");});
test("square -> squar", function() {deepEqual( Stem("square"), "squar");});
test("squared -> squar", function() {deepEqual( Stem("squared"), "squar");});
test("squarer -> squarer", function() {deepEqual( Stem("squarer"), "squarer");});
test("squares -> squar", function() {deepEqual( Stem("squares"), "squar");});
test("squaretoes -> squareto", function() {deepEqual( Stem("squaretoes"), "squareto");});
test("squaring -> squar", function() {deepEqual( Stem("squaring"), "squar");});
test("squash -> squash", function() {deepEqual( Stem("squash"), "squash");});
test("squashmore -> squashmor", function() {deepEqual( Stem("squashmore"), "squashmor");});
test("squeak -> squeak", function() {deepEqual( Stem("squeak"), "squeak");});
test("squeaked -> squeak", function() {deepEqual( Stem("squeaked"), "squeak");});
test("squeaking -> squeak", function() {deepEqual( Stem("squeaking"), "squeak");});
test("squeal -> squeal", function() {deepEqual( Stem("squeal"), "squeal");});
test("squealing -> squeal", function() {deepEqual( Stem("squealing"), "squeal");});
test("squeamish -> squeamish", function() {deepEqual( Stem("squeamish"), "squeamish");});
test("squeams -> squeam", function() {deepEqual( Stem("squeams"), "squeam");});
test("squeer -> squeer", function() {deepEqual( Stem("squeer"), "squeer");});
test("squeeze -> squeez", function() {deepEqual( Stem("squeeze"), "squeez");});
test("squeezed -> squeez", function() {deepEqual( Stem("squeezed"), "squeez");});
test("squeezes -> squeez", function() {deepEqual( Stem("squeezes"), "squeez");});
test("squeezing -> squeez", function() {deepEqual( Stem("squeezing"), "squeez");});
test("squele -> squel", function() {deepEqual( Stem("squele"), "squel");});
test("squier -> squier", function() {deepEqual( Stem("squier"), "squier");});
test("squills -> squill", function() {deepEqual( Stem("squills"), "squill");});
test("squints -> squint", function() {deepEqual( Stem("squints"), "squint");});
test("squiny -> squini", function() {deepEqual( Stem("squiny"), "squini");});
test("squire -> squir", function() {deepEqual( Stem("squire"), "squir");});
test("squires -> squir", function() {deepEqual( Stem("squires"), "squir");});
test("squirrel -> squirrel", function() {deepEqual( Stem("squirrel"), "squirrel");});
test("st -> st", function() {deepEqual( Stem("st"), "st");});
test("stab -> stab", function() {deepEqual( Stem("stab"), "stab");});
test("stabb -> stabb", function() {deepEqual( Stem("stabb"), "stabb");});
test("stabbed -> stab", function() {deepEqual( Stem("stabbed"), "stab");});
test("stabbing -> stab", function() {deepEqual( Stem("stabbing"), "stab");});
test("stable -> stabl", function() {deepEqual( Stem("stable"), "stabl");});
test("stablemen -> stablemen", function() {deepEqual( Stem("stablemen"), "stablemen");});
test("stableness -> stabl", function() {deepEqual( Stem("stableness"), "stabl");});
test("stables -> stabl", function() {deepEqual( Stem("stables"), "stabl");});
test("stablish -> stablish", function() {deepEqual( Stem("stablish"), "stablish");});
test("stablishment -> stablish", function() {deepEqual( Stem("stablishment"), "stablish");});
test("stabs -> stab", function() {deepEqual( Stem("stabs"), "stab");});
test("stacks -> stack", function() {deepEqual( Stem("stacks"), "stack");});
test("stadthaus -> stadthau", function() {deepEqual( Stem("stadthaus"), "stadthau");});
test("staff -> staff", function() {deepEqual( Stem("staff"), "staff");});
test("stafford -> stafford", function() {deepEqual( Stem("stafford"), "stafford");});
test("staffords -> stafford", function() {deepEqual( Stem("staffords"), "stafford");});
test("staffordshire -> staffordshir", function() {deepEqual( Stem("staffordshire"), "staffordshir");});
test("stag -> stag", function() {deepEqual( Stem("stag"), "stag");});
test("stage -> stage", function() {deepEqual( Stem("stage"), "stage");});
test("stages -> stage", function() {deepEqual( Stem("stages"), "stage");});
test("stagger -> stagger", function() {deepEqual( Stem("stagger"), "stagger");});
test("staggered -> stagger", function() {deepEqual( Stem("staggered"), "stagger");});
test("staggering -> stagger", function() {deepEqual( Stem("staggering"), "stagger");});
test("staggers -> stagger", function() {deepEqual( Stem("staggers"), "stagger");});
test("stags -> stag", function() {deepEqual( Stem("stags"), "stag");});
test("staid -> staid", function() {deepEqual( Stem("staid"), "staid");});
test("staider -> staider", function() {deepEqual( Stem("staider"), "staider");});
test("stain -> stain", function() {deepEqual( Stem("stain"), "stain");});
test("stained -> stain", function() {deepEqual( Stem("stained"), "stain");});
test("staines -> stain", function() {deepEqual( Stem("staines"), "stain");});
test("staineth -> staineth", function() {deepEqual( Stem("staineth"), "staineth");});
test("staining -> stain", function() {deepEqual( Stem("staining"), "stain");});
test("stainless -> stainless", function() {deepEqual( Stem("stainless"), "stainless");});
test("stains -> stain", function() {deepEqual( Stem("stains"), "stain");});
test("stair -> stair", function() {deepEqual( Stem("stair"), "stair");});
test("staircase -> staircas", function() {deepEqual( Stem("staircase"), "staircas");});
test("staircases -> staircas", function() {deepEqual( Stem("staircases"), "staircas");});
test("stairs -> stair", function() {deepEqual( Stem("stairs"), "stair");});
test("stake -> stake", function() {deepEqual( Stem("stake"), "stake");});
test("staked -> stake", function() {deepEqual( Stem("staked"), "stake");});
test("stakes -> stake", function() {deepEqual( Stem("stakes"), "stake");});
test("stale -> stale", function() {deepEqual( Stem("stale"), "stale");});
test("staled -> stale", function() {deepEqual( Stem("staled"), "stale");});
test("stalk -> stalk", function() {deepEqual( Stem("stalk"), "stalk");});
test("stalked -> stalk", function() {deepEqual( Stem("stalked"), "stalk");});
test("stalking -> stalk", function() {deepEqual( Stem("stalking"), "stalk");});
test("stalks -> stalk", function() {deepEqual( Stem("stalks"), "stalk");});
test("stall -> stall", function() {deepEqual( Stem("stall"), "stall");});
test("stalled -> stall", function() {deepEqual( Stem("stalled"), "stall");});
test("stalling -> stall", function() {deepEqual( Stem("stalling"), "stall");});
test("stalls -> stall", function() {deepEqual( Stem("stalls"), "stall");});
test("stalwart -> stalwart", function() {deepEqual( Stem("stalwart"), "stalwart");});
test("stamford -> stamford", function() {deepEqual( Stem("stamford"), "stamford");});
test("stammer -> stammer", function() {deepEqual( Stem("stammer"), "stammer");});
test("stammered -> stammer", function() {deepEqual( Stem("stammered"), "stammer");});
test("stammering -> stammer", function() {deepEqual( Stem("stammering"), "stammer");});
test("stamp -> stamp", function() {deepEqual( Stem("stamp"), "stamp");});
test("stamped -> stamp", function() {deepEqual( Stem("stamped"), "stamp");});
test("stamping -> stamp", function() {deepEqual( Stem("stamping"), "stamp");});
test("stamps -> stamp", function() {deepEqual( Stem("stamps"), "stamp");});
test("stances -> stanc", function() {deepEqual( Stem("stances"), "stanc");});
test("stanch -> stanch", function() {deepEqual( Stem("stanch"), "stanch");});
test("stanchless -> stanchless", function() {deepEqual( Stem("stanchless"), "stanchless");});
test("stand -> stand", function() {deepEqual( Stem("stand"), "stand");});
test("standard -> standard", function() {deepEqual( Stem("standard"), "standard");});
test("standards -> standard", function() {deepEqual( Stem("standards"), "standard");});
test("stander -> stander", function() {deepEqual( Stem("stander"), "stander");});
test("standers -> stander", function() {deepEqual( Stem("standers"), "stander");});
test("standest -> standest", function() {deepEqual( Stem("standest"), "standest");});
test("standeth -> standeth", function() {deepEqual( Stem("standeth"), "standeth");});
test("standing -> stand", function() {deepEqual( Stem("standing"), "stand");});
test("stands -> stand", function() {deepEqual( Stem("stands"), "stand");});
test("stanhope -> stanhop", function() {deepEqual( Stem("stanhope"), "stanhop");});
test("staniel -> staniel", function() {deepEqual( Stem("staniel"), "staniel");});
test("stanley -> stanlei", function() {deepEqual( Stem("stanley"), "stanlei");});
test("stanza -> stanza", function() {deepEqual( Stem("stanza"), "stanza");});
test("stanzas -> stanza", function() {deepEqual( Stem("stanzas"), "stanza");});
test("stanze -> stanz", function() {deepEqual( Stem("stanze"), "stanz");});
test("stanzo -> stanzo", function() {deepEqual( Stem("stanzo"), "stanzo");});
test("stanzos -> stanzo", function() {deepEqual( Stem("stanzos"), "stanzo");});
test("staple -> stapl", function() {deepEqual( Stem("staple"), "stapl");});
test("staples -> stapl", function() {deepEqual( Stem("staples"), "stapl");});
test("star -> star", function() {deepEqual( Stem("star"), "star");});
test("starch -> starch", function() {deepEqual( Stem("starch"), "starch");});
test("starched -> starch", function() {deepEqual( Stem("starched"), "starch");});
test("stare -> stare", function() {deepEqual( Stem("stare"), "stare");});
test("stared -> stare", function() {deepEqual( Stem("stared"), "stare");});
test("stares -> stare", function() {deepEqual( Stem("stares"), "stare");});
test("staring -> stare", function() {deepEqual( Stem("staring"), "stare");});
test("starings -> stare", function() {deepEqual( Stem("starings"), "stare");});
test("stark -> stark", function() {deepEqual( Stem("stark"), "stark");});
test("starkly -> starkli", function() {deepEqual( Stem("starkly"), "starkli");});
test("starlight -> starlight", function() {deepEqual( Stem("starlight"), "starlight");});
test("starling -> starl", function() {deepEqual( Stem("starling"), "starl");});
test("starr -> starr", function() {deepEqual( Stem("starr"), "starr");});
test("starry -> starri", function() {deepEqual( Stem("starry"), "starri");});
test("stars -> star", function() {deepEqual( Stem("stars"), "star");});
test("start -> start", function() {deepEqual( Stem("start"), "start");});
test("started -> start", function() {deepEqual( Stem("started"), "start");});
test("starting -> start", function() {deepEqual( Stem("starting"), "start");});
test("startingly -> startingli", function() {deepEqual( Stem("startingly"), "startingli");});
test("startle -> startl", function() {deepEqual( Stem("startle"), "startl");});
test("startled -> startl", function() {deepEqual( Stem("startled"), "startl");});
test("startles -> startl", function() {deepEqual( Stem("startles"), "startl");});
test("startling -> startl", function() {deepEqual( Stem("startling"), "startl");});
test("starts -> start", function() {deepEqual( Stem("starts"), "start");});
test("starv -> starv", function() {deepEqual( Stem("starv"), "starv");});
test("starvation -> starvat", function() {deepEqual( Stem("starvation"), "starvat");});
test("starve -> starv", function() {deepEqual( Stem("starve"), "starv");});
test("starved -> starv", function() {deepEqual( Stem("starved"), "starv");});
test("starvelackey -> starvelackei", function() {deepEqual( Stem("starvelackey"), "starvelackei");});
test("starveling -> starvel", function() {deepEqual( Stem("starveling"), "starvel");});
test("starveth -> starveth", function() {deepEqual( Stem("starveth"), "starveth");});
test("starving -> starv", function() {deepEqual( Stem("starving"), "starv");});
test("state -> state", function() {deepEqual( Stem("state"), "state");});
test("stated -> state", function() {deepEqual( Stem("stated"), "state");});
test("statelier -> stateli", function() {deepEqual( Stem("statelier"), "stateli");});
test("stately -> state", function() {deepEqual( Stem("stately"), "state");});
test("statement -> statement", function() {deepEqual( Stem("statement"), "statement");});
test("statements -> statement", function() {deepEqual( Stem("statements"), "statement");});
test("states -> state", function() {deepEqual( Stem("states"), "state");});
test("statesman -> statesman", function() {deepEqual( Stem("statesman"), "statesman");});
test("statesmanlike -> statesmanlik", function() {deepEqual( Stem("statesmanlike"), "statesmanlik");});
test("statesmen -> statesmen", function() {deepEqual( Stem("statesmen"), "statesmen");});
test("statilius -> statiliu", function() {deepEqual( Stem("statilius"), "statiliu");});
test("stating -> state", function() {deepEqual( Stem("stating"), "state");});
test("station -> station", function() {deepEqual( Stem("station"), "station");});
test("stationary -> stationari", function() {deepEqual( Stem("stationary"), "stationari");});
test("stationed -> station", function() {deepEqual( Stem("stationed"), "station");});
test("stationer -> station", function() {deepEqual( Stem("stationer"), "station");});
test("statist -> statist", function() {deepEqual( Stem("statist"), "statist");});
test("statists -> statist", function() {deepEqual( Stem("statists"), "statist");});
test("statuaries -> statuari", function() {deepEqual( Stem("statuaries"), "statuari");});
test("statue -> statu", function() {deepEqual( Stem("statue"), "statu");});
test("statues -> statu", function() {deepEqual( Stem("statues"), "statu");});
test("stature -> statur", function() {deepEqual( Stem("stature"), "statur");});
test("statures -> statur", function() {deepEqual( Stem("statures"), "statur");});
test("statute -> statut", function() {deepEqual( Stem("statute"), "statut");});
test("statutes -> statut", function() {deepEqual( Stem("statutes"), "statut");});
test("staunch -> staunch", function() {deepEqual( Stem("staunch"), "staunch");});
test("stave -> stave", function() {deepEqual( Stem("stave"), "stave");});
test("staves -> stave", function() {deepEqual( Stem("staves"), "stave");});
test("stay -> stai", function() {deepEqual( Stem("stay"), "stai");});
test("stayed -> stai", function() {deepEqual( Stem("stayed"), "stai");});
test("stayest -> stayest", function() {deepEqual( Stem("stayest"), "stayest");});
test("staying -> stai", function() {deepEqual( Stem("staying"), "stai");});
test("stays -> stai", function() {deepEqual( Stem("stays"), "stai");});
test("stayt -> stayt", function() {deepEqual( Stem("stayt"), "stayt");});
test("ste -> ste", function() {deepEqual( Stem("ste"), "ste");});
test("stead -> stead", function() {deepEqual( Stem("stead"), "stead");});
test("steaded -> stead", function() {deepEqual( Stem("steaded"), "stead");});
test("steadfast -> steadfast", function() {deepEqual( Stem("steadfast"), "steadfast");});
test("steadfastly -> steadfastli", function() {deepEqual( Stem("steadfastly"), "steadfastli");});
test("steadier -> steadier", function() {deepEqual( Stem("steadier"), "steadier");});
test("steadily -> steadili", function() {deepEqual( Stem("steadily"), "steadili");});
test("steadiness -> steadi", function() {deepEqual( Stem("steadiness"), "steadi");});
test("steads -> stead", function() {deepEqual( Stem("steads"), "stead");});
test("steal -> steal", function() {deepEqual( Stem("steal"), "steal");});
test("stealer -> stealer", function() {deepEqual( Stem("stealer"), "stealer");});
test("stealers -> stealer", function() {deepEqual( Stem("stealers"), "stealer");});
test("stealing -> steal", function() {deepEqual( Stem("stealing"), "steal");});
test("steals -> steal", function() {deepEqual( Stem("steals"), "steal");});
test("stealth -> stealth", function() {deepEqual( Stem("stealth"), "stealth");});
test("stealthily -> stealthili", function() {deepEqual( Stem("stealthily"), "stealthili");});
test("stealthy -> stealthi", function() {deepEqual( Stem("stealthy"), "stealthi");});
test("steam -> steam", function() {deepEqual( Stem("steam"), "steam");});
test("steamboat -> steamboat", function() {deepEqual( Stem("steamboat"), "steamboat");});
test("steamer -> steamer", function() {deepEqual( Stem("steamer"), "steamer");});
test("steamers -> steamer", function() {deepEqual( Stem("steamers"), "steamer");});
test("steaming -> steam", function() {deepEqual( Stem("steaming"), "steam");});
test("stearing -> stear", function() {deepEqual( Stem("stearing"), "stear");});
test("steed -> steed", function() {deepEqual( Stem("steed"), "steed");});
test("steeds -> steed", function() {deepEqual( Stem("steeds"), "steed");});
test("steel -> steel", function() {deepEqual( Stem("steel"), "steel");});
test("steeled -> steel", function() {deepEqual( Stem("steeled"), "steel");});
test("steely -> steeli", function() {deepEqual( Stem("steely"), "steeli");});
test("steep -> steep", function() {deepEqual( Stem("steep"), "steep");});
test("steeped -> steep", function() {deepEqual( Stem("steeped"), "steep");});
test("steeple -> steepl", function() {deepEqual( Stem("steeple"), "steepl");});
test("steeplechase -> steeplechas", function() {deepEqual( Stem("steeplechase"), "steeplechas");});
test("steeples -> steepl", function() {deepEqual( Stem("steeples"), "steepl");});
test("steeps -> steep", function() {deepEqual( Stem("steeps"), "steep");});
test("steepy -> steepi", function() {deepEqual( Stem("steepy"), "steepi");});
test("steer -> steer", function() {deepEqual( Stem("steer"), "steer");});
test("steerage -> steerag", function() {deepEqual( Stem("steerage"), "steerag");});
test("steering -> steer", function() {deepEqual( Stem("steering"), "steer");});
test("steers -> steer", function() {deepEqual( Stem("steers"), "steer");});
test("steersman -> steersman", function() {deepEqual( Stem("steersman"), "steersman");});
test("stelled -> stell", function() {deepEqual( Stem("stelled"), "stell");});
test("stem -> stem", function() {deepEqual( Stem("stem"), "stem");});
test("stemming -> stem", function() {deepEqual( Stem("stemming"), "stem");});
test("stench -> stench", function() {deepEqual( Stem("stench"), "stench");});
test("step -> step", function() {deepEqual( Stem("step"), "step");});
test("stepdame -> stepdam", function() {deepEqual( Stem("stepdame"), "stepdam");});
test("stephano -> stephano", function() {deepEqual( Stem("stephano"), "stephano");});
test("stephen -> stephen", function() {deepEqual( Stem("stephen"), "stephen");});
test("stephens -> stephen", function() {deepEqual( Stem("stephens"), "stephen");});
test("stepmothers -> stepmoth", function() {deepEqual( Stem("stepmothers"), "stepmoth");});
test("stepp -> stepp", function() {deepEqual( Stem("stepp"), "stepp");});
test("stepped -> step", function() {deepEqual( Stem("stepped"), "step");});
test("stepping -> step", function() {deepEqual( Stem("stepping"), "step");});
test("steps -> step", function() {deepEqual( Stem("steps"), "step");});
test("stepson -> stepson", function() {deepEqual( Stem("stepson"), "stepson");});
test("stept -> stept", function() {deepEqual( Stem("stept"), "stept");});
test("sterile -> steril", function() {deepEqual( Stem("sterile"), "steril");});
test("sterility -> steril", function() {deepEqual( Stem("sterility"), "steril");});
test("sterling -> sterl", function() {deepEqual( Stem("sterling"), "sterl");});
test("stern -> stern", function() {deepEqual( Stem("stern"), "stern");});
test("sternage -> sternag", function() {deepEqual( Stem("sternage"), "sternag");});
test("sterner -> sterner", function() {deepEqual( Stem("sterner"), "sterner");});
test("sternest -> sternest", function() {deepEqual( Stem("sternest"), "sternest");});
test("sternly -> sternli", function() {deepEqual( Stem("sternly"), "sternli");});
test("sternness -> stern", function() {deepEqual( Stem("sternness"), "stern");});
test("steterat -> steterat", function() {deepEqual( Stem("steterat"), "steterat");});
test("stew -> stew", function() {deepEqual( Stem("stew"), "stew");});
test("steward -> steward", function() {deepEqual( Stem("steward"), "steward");});
test("stewards -> steward", function() {deepEqual( Stem("stewards"), "steward");});
test("stewardship -> stewardship", function() {deepEqual( Stem("stewardship"), "stewardship");});
test("stewed -> stew", function() {deepEqual( Stem("stewed"), "stew");});
test("stews -> stew", function() {deepEqual( Stem("stews"), "stew");});
test("steyne -> steyn", function() {deepEqual( Stem("steyne"), "steyn");});
test("steynes -> steyn", function() {deepEqual( Stem("steynes"), "steyn");});
test("stick -> stick", function() {deepEqual( Stem("stick"), "stick");});
test("sticking -> stick", function() {deepEqual( Stem("sticking"), "stick");});
test("stickler -> stickler", function() {deepEqual( Stem("stickler"), "stickler");});
test("sticks -> stick", function() {deepEqual( Stem("sticks"), "stick");});
test("stiff -> stiff", function() {deepEqual( Stem("stiff"), "stiff");});
test("stiffen -> stiffen", function() {deepEqual( Stem("stiffen"), "stiffen");});
test("stiffly -> stiffli", function() {deepEqual( Stem("stiffly"), "stiffli");});
test("stifle -> stifl", function() {deepEqual( Stem("stifle"), "stifl");});
test("stifled -> stifl", function() {deepEqual( Stem("stifled"), "stifl");});
test("stifles -> stifl", function() {deepEqual( Stem("stifles"), "stifl");});
test("stigmatic -> stigmat", function() {deepEqual( Stem("stigmatic"), "stigmat");});
test("stigmatical -> stigmat", function() {deepEqual( Stem("stigmatical"), "stigmat");});
test("stile -> stile", function() {deepEqual( Stem("stile"), "stile");});
test("stilettos -> stiletto", function() {deepEqual( Stem("stilettos"), "stiletto");});
test("still -> still", function() {deepEqual( Stem("still"), "still");});
test("stillbrook -> stillbrook", function() {deepEqual( Stem("stillbrook"), "stillbrook");});
test("stiller -> stiller", function() {deepEqual( Stem("stiller"), "stiller");});
test("stillest -> stillest", function() {deepEqual( Stem("stillest"), "stillest");});
test("stillness -> still", function() {deepEqual( Stem("stillness"), "still");});
test("stilly -> stilli", function() {deepEqual( Stem("stilly"), "stilli");});
test("stilton -> stilton", function() {deepEqual( Stem("stilton"), "stilton");});
test("stilts -> stilt", function() {deepEqual( Stem("stilts"), "stilt");});
test("stimulus -> stimulu", function() {deepEqual( Stem("stimulus"), "stimulu");});
test("sting -> sting", function() {deepEqual( Stem("sting"), "sting");});
test("stinging -> sting", function() {deepEqual( Stem("stinging"), "sting");});
test("stingless -> stingless", function() {deepEqual( Stem("stingless"), "stingless");});
test("stings -> sting", function() {deepEqual( Stem("stings"), "sting");});
test("stingy -> stingi", function() {deepEqual( Stem("stingy"), "stingi");});
test("stink -> stink", function() {deepEqual( Stem("stink"), "stink");});
test("stinking -> stink", function() {deepEqual( Stem("stinking"), "stink");});
test("stinkingly -> stinkingli", function() {deepEqual( Stem("stinkingly"), "stinkingli");});
test("stinks -> stink", function() {deepEqual( Stem("stinks"), "stink");});
test("stint -> stint", function() {deepEqual( Stem("stint"), "stint");});
test("stinted -> stint", function() {deepEqual( Stem("stinted"), "stint");});
test("stints -> stint", function() {deepEqual( Stem("stints"), "stint");});
test("stipt -> stipt", function() {deepEqual( Stem("stipt"), "stipt");});
test("stipulated -> stipul", function() {deepEqual( Stem("stipulated"), "stipul");});
test("stir -> stir", function() {deepEqual( Stem("stir"), "stir");});
test("stirr -> stirr", function() {deepEqual( Stem("stirr"), "stirr");});
test("stirred -> stir", function() {deepEqual( Stem("stirred"), "stir");});
test("stirrer -> stirrer", function() {deepEqual( Stem("stirrer"), "stirrer");});
test("stirrers -> stirrer", function() {deepEqual( Stem("stirrers"), "stirrer");});
test("stirreth -> stirreth", function() {deepEqual( Stem("stirreth"), "stirreth");});
test("stirring -> stir", function() {deepEqual( Stem("stirring"), "stir");});
test("stirrup -> stirrup", function() {deepEqual( Stem("stirrup"), "stirrup");});
test("stirrups -> stirrup", function() {deepEqual( Stem("stirrups"), "stirrup");});
test("stirs -> stir", function() {deepEqual( Stem("stirs"), "stir");});
test("stitched -> stitch", function() {deepEqual( Stem("stitched"), "stitch");});
test("stitchery -> stitcheri", function() {deepEqual( Stem("stitchery"), "stitcheri");});
test("stitches -> stitch", function() {deepEqual( Stem("stitches"), "stitch");});
test("stitching -> stitch", function() {deepEqual( Stem("stitching"), "stitch");});
test("stithied -> stithi", function() {deepEqual( Stem("stithied"), "stithi");});
test("stithy -> stithi", function() {deepEqual( Stem("stithy"), "stithi");});
test("stoccadoes -> stoccado", function() {deepEqual( Stem("stoccadoes"), "stoccado");});
test("stoccata -> stoccata", function() {deepEqual( Stem("stoccata"), "stoccata");});
test("stock -> stock", function() {deepEqual( Stem("stock"), "stock");});
test("stockbroker -> stockbrok", function() {deepEqual( Stem("stockbroker"), "stockbrok");});
test("stockbrokers -> stockbrok", function() {deepEqual( Stem("stockbrokers"), "stockbrok");});
test("stockens -> stocken", function() {deepEqual( Stem("stockens"), "stocken");});
test("stockfish -> stockfish", function() {deepEqual( Stem("stockfish"), "stockfish");});
test("stockholders -> stockhold", function() {deepEqual( Stem("stockholders"), "stockhold");});
test("stocking -> stock", function() {deepEqual( Stem("stocking"), "stock");});
test("stockings -> stock", function() {deepEqual( Stem("stockings"), "stock");});
test("stockish -> stockish", function() {deepEqual( Stem("stockish"), "stockish");});
test("stocks -> stock", function() {deepEqual( Stem("stocks"), "stock");});
test("stog -> stog", function() {deepEqual( Stem("stog"), "stog");});
test("stogs -> stog", function() {deepEqual( Stem("stogs"), "stog");});
test("stoics -> stoic", function() {deepEqual( Stem("stoics"), "stoic");});
test("stokes -> stoke", function() {deepEqual( Stem("stokes"), "stoke");});
test("stokesly -> stokesli", function() {deepEqual( Stem("stokesly"), "stokesli");});
test("stol -> stol", function() {deepEqual( Stem("stol"), "stol");});
test("stole -> stole", function() {deepEqual( Stem("stole"), "stole");});
test("stolen -> stolen", function() {deepEqual( Stem("stolen"), "stolen");});
test("stolest -> stolest", function() {deepEqual( Stem("stolest"), "stolest");});
test("stomach -> stomach", function() {deepEqual( Stem("stomach"), "stomach");});
test("stomachers -> stomach", function() {deepEqual( Stem("stomachers"), "stomach");});
test("stomaching -> stomach", function() {deepEqual( Stem("stomaching"), "stomach");});
test("stomachs -> stomach", function() {deepEqual( Stem("stomachs"), "stomach");});
test("ston -> ston", function() {deepEqual( Stem("ston"), "ston");});
test("stone -> stone", function() {deepEqual( Stem("stone"), "stone");});
test("stonecutter -> stonecutt", function() {deepEqual( Stem("stonecutter"), "stonecutt");});
test("stones -> stone", function() {deepEqual( Stem("stones"), "stone");});
test("stonish -> stonish", function() {deepEqual( Stem("stonish"), "stonish");});
test("stony -> stoni", function() {deepEqual( Stem("stony"), "stoni");});
test("stood -> stood", function() {deepEqual( Stem("stood"), "stood");});
test("stool -> stool", function() {deepEqual( Stem("stool"), "stool");});
test("stools -> stool", function() {deepEqual( Stem("stools"), "stool");});
test("stoop -> stoop", function() {deepEqual( Stem("stoop"), "stoop");});
test("stooped -> stoop", function() {deepEqual( Stem("stooped"), "stoop");});
test("stoopid -> stoopid", function() {deepEqual( Stem("stoopid"), "stoopid");});
test("stooping -> stoop", function() {deepEqual( Stem("stooping"), "stoop");});
test("stoops -> stoop", function() {deepEqual( Stem("stoops"), "stoop");});
test("stop -> stop", function() {deepEqual( Stem("stop"), "stop");});
test("stope -> stope", function() {deepEqual( Stem("stope"), "stope");});
test("stopp -> stopp", function() {deepEqual( Stem("stopp"), "stopp");});
test("stoppage -> stoppag", function() {deepEqual( Stem("stoppage"), "stoppag");});
test("stopped -> stop", function() {deepEqual( Stem("stopped"), "stop");});
test("stopping -> stop", function() {deepEqual( Stem("stopping"), "stop");});
test("stops -> stop", function() {deepEqual( Stem("stops"), "stop");});
test("stor -> stor", function() {deepEqual( Stem("stor"), "stor");});
test("store -> store", function() {deepEqual( Stem("store"), "store");});
test("storehouse -> storehous", function() {deepEqual( Stem("storehouse"), "storehous");});
test("storehouses -> storehous", function() {deepEqual( Stem("storehouses"), "storehous");});
test("stores -> store", function() {deepEqual( Stem("stores"), "store");});
test("stories -> stori", function() {deepEqual( Stem("stories"), "stori");});
test("storm -> storm", function() {deepEqual( Stem("storm"), "storm");});
test("stormed -> storm", function() {deepEqual( Stem("stormed"), "storm");});
test("storming -> storm", function() {deepEqual( Stem("storming"), "storm");});
test("storms -> storm", function() {deepEqual( Stem("storms"), "storm");});
test("stormy -> stormi", function() {deepEqual( Stem("stormy"), "stormi");});
test("story -> stori", function() {deepEqual( Stem("story"), "stori");});
test("stothard -> stothard", function() {deepEqual( Stem("stothard"), "stothard");});
test("stoup -> stoup", function() {deepEqual( Stem("stoup"), "stoup");});
test("stoups -> stoup", function() {deepEqual( Stem("stoups"), "stoup");});
test("stout -> stout", function() {deepEqual( Stem("stout"), "stout");});
test("stouter -> stouter", function() {deepEqual( Stem("stouter"), "stouter");});
test("stoutly -> stoutli", function() {deepEqual( Stem("stoutly"), "stoutli");});
test("stoutness -> stout", function() {deepEqual( Stem("stoutness"), "stout");});
test("stover -> stover", function() {deepEqual( Stem("stover"), "stover");});
test("stow -> stow", function() {deepEqual( Stem("stow"), "stow");});
test("stowage -> stowag", function() {deepEqual( Stem("stowage"), "stowag");});
test("stowed -> stow", function() {deepEqual( Stem("stowed"), "stow");});
test("strachino -> strachino", function() {deepEqual( Stem("strachino"), "strachino");});
test("strachy -> strachi", function() {deepEqual( Stem("strachy"), "strachi");});
test("straggle -> straggl", function() {deepEqual( Stem("straggle"), "straggl");});
test("stragglers -> straggler", function() {deepEqual( Stem("stragglers"), "straggler");});
test("straggling -> straggl", function() {deepEqual( Stem("straggling"), "straggl");});
test("straight -> straight", function() {deepEqual( Stem("straight"), "straight");});
test("straightest -> straightest", function() {deepEqual( Stem("straightest"), "straightest");});
test("straightforward -> straightforward", function() {deepEqual( Stem("straightforward"), "straightforward");});
test("straightway -> straightwai", function() {deepEqual( Stem("straightway"), "straightwai");});
test("strain -> strain", function() {deepEqual( Stem("strain"), "strain");});
test("strained -> strain", function() {deepEqual( Stem("strained"), "strain");});
test("straining -> strain", function() {deepEqual( Stem("straining"), "strain");});
test("strains -> strain", function() {deepEqual( Stem("strains"), "strain");});
test("strait -> strait", function() {deepEqual( Stem("strait"), "strait");});
test("straited -> strait", function() {deepEqual( Stem("straited"), "strait");});
test("straitened -> straiten", function() {deepEqual( Stem("straitened"), "straiten");});
test("straiter -> straiter", function() {deepEqual( Stem("straiter"), "straiter");});
test("straitly -> straitli", function() {deepEqual( Stem("straitly"), "straitli");});
test("straitness -> strait", function() {deepEqual( Stem("straitness"), "strait");});
test("straits -> strait", function() {deepEqual( Stem("straits"), "strait");});
test("strand -> strand", function() {deepEqual( Stem("strand"), "strand");});
test("stranded -> strand", function() {deepEqual( Stem("stranded"), "strand");});
test("strange -> strang", function() {deepEqual( Stem("strange"), "strang");});
test("strangely -> strang", function() {deepEqual( Stem("strangely"), "strang");});
test("strangeness -> strang", function() {deepEqual( Stem("strangeness"), "strang");});
test("stranger -> stranger", function() {deepEqual( Stem("stranger"), "stranger");});
test("strangers -> stranger", function() {deepEqual( Stem("strangers"), "stranger");});
test("strangest -> strangest", function() {deepEqual( Stem("strangest"), "strangest");});
test("strangle -> strangl", function() {deepEqual( Stem("strangle"), "strangl");});
test("strangled -> strangl", function() {deepEqual( Stem("strangled"), "strangl");});
test("strangler -> strangler", function() {deepEqual( Stem("strangler"), "strangler");});
test("strangles -> strangl", function() {deepEqual( Stem("strangles"), "strangl");});
test("strangling -> strangl", function() {deepEqual( Stem("strangling"), "strangl");});
test("strappado -> strappado", function() {deepEqual( Stem("strappado"), "strappado");});
test("strapped -> strap", function() {deepEqual( Stem("strapped"), "strap");});
test("straps -> strap", function() {deepEqual( Stem("straps"), "strap");});
test("strasburg -> strasburg", function() {deepEqual( Stem("strasburg"), "strasburg");});
test("stratagem -> stratagem", function() {deepEqual( Stem("stratagem"), "stratagem");});
test("stratagems -> stratagem", function() {deepEqual( Stem("stratagems"), "stratagem");});
test("stratford -> stratford", function() {deepEqual( Stem("stratford"), "stratford");});
test("strato -> strato", function() {deepEqual( Stem("strato"), "strato");});
test("straw -> straw", function() {deepEqual( Stem("straw"), "straw");});
test("strawberries -> strawberri", function() {deepEqual( Stem("strawberries"), "strawberri");});
test("strawberry -> strawberri", function() {deepEqual( Stem("strawberry"), "strawberri");});
test("straws -> straw", function() {deepEqual( Stem("straws"), "straw");});
test("strawy -> strawi", function() {deepEqual( Stem("strawy"), "strawi");});
test("stray -> strai", function() {deepEqual( Stem("stray"), "strai");});
test("straying -> strai", function() {deepEqual( Stem("straying"), "strai");});
test("strays -> strai", function() {deepEqual( Stem("strays"), "strai");});
test("streak -> streak", function() {deepEqual( Stem("streak"), "streak");});
test("streaked -> streak", function() {deepEqual( Stem("streaked"), "streak");});
test("streaks -> streak", function() {deepEqual( Stem("streaks"), "streak");});
test("streaky -> streaki", function() {deepEqual( Stem("streaky"), "streaki");});
test("stream -> stream", function() {deepEqual( Stem("stream"), "stream");});
test("streamed -> stream", function() {deepEqual( Stem("streamed"), "stream");});
test("streamers -> streamer", function() {deepEqual( Stem("streamers"), "streamer");});
test("streaming -> stream", function() {deepEqual( Stem("streaming"), "stream");});
test("streams -> stream", function() {deepEqual( Stem("streams"), "stream");});
test("streching -> strech", function() {deepEqual( Stem("streching"), "strech");});
test("streeled -> streel", function() {deepEqual( Stem("streeled"), "streel");});
test("street -> street", function() {deepEqual( Stem("street"), "street");});
test("streets -> street", function() {deepEqual( Stem("streets"), "street");});
test("strength -> strength", function() {deepEqual( Stem("strength"), "strength");});
test("strengthen -> strengthen", function() {deepEqual( Stem("strengthen"), "strengthen");});
test("strengthened -> strengthen", function() {deepEqual( Stem("strengthened"), "strengthen");});
test("strengthless -> strengthless", function() {deepEqual( Stem("strengthless"), "strengthless");});
test("strengths -> strength", function() {deepEqual( Stem("strengths"), "strength");});
test("strepitus -> strepitu", function() {deepEqual( Stem("strepitus"), "strepitu");});
test("stretch -> stretch", function() {deepEqual( Stem("stretch"), "stretch");});
test("stretched -> stretch", function() {deepEqual( Stem("stretched"), "stretch");});
test("stretches -> stretch", function() {deepEqual( Stem("stretches"), "stretch");});
test("stretching -> stretch", function() {deepEqual( Stem("stretching"), "stretch");});
test("strew -> strew", function() {deepEqual( Stem("strew"), "strew");});
test("strewing -> strew", function() {deepEqual( Stem("strewing"), "strew");});
test("strewings -> strew", function() {deepEqual( Stem("strewings"), "strew");});
test("strewments -> strewment", function() {deepEqual( Stem("strewments"), "strewment");});
test("stricken -> stricken", function() {deepEqual( Stem("stricken"), "stricken");});
test("strict -> strict", function() {deepEqual( Stem("strict"), "strict");});
test("stricter -> stricter", function() {deepEqual( Stem("stricter"), "stricter");});
test("strictest -> strictest", function() {deepEqual( Stem("strictest"), "strictest");});
test("strictly -> strictli", function() {deepEqual( Stem("strictly"), "strictli");});
test("stricture -> strictur", function() {deepEqual( Stem("stricture"), "strictur");});
test("stride -> stride", function() {deepEqual( Stem("stride"), "stride");});
test("strident -> strident", function() {deepEqual( Stem("strident"), "strident");});
test("strides -> stride", function() {deepEqual( Stem("strides"), "stride");});
test("striding -> stride", function() {deepEqual( Stem("striding"), "stride");});
test("strife -> strife", function() {deepEqual( Stem("strife"), "strife");});
test("strifes -> strife", function() {deepEqual( Stem("strifes"), "strife");});
test("strik -> strik", function() {deepEqual( Stem("strik"), "strik");});
test("strike -> strike", function() {deepEqual( Stem("strike"), "strike");});
test("strikers -> striker", function() {deepEqual( Stem("strikers"), "striker");});
test("strikes -> strike", function() {deepEqual( Stem("strikes"), "strike");});
test("strikest -> strikest", function() {deepEqual( Stem("strikest"), "strikest");});
test("striking -> strike", function() {deepEqual( Stem("striking"), "strike");});
test("string -> string", function() {deepEqual( Stem("string"), "string");});
test("stringless -> stringless", function() {deepEqual( Stem("stringless"), "stringless");});
test("strings -> string", function() {deepEqual( Stem("strings"), "string");});
test("strip -> strip", function() {deepEqual( Stem("strip"), "strip");});
test("striped -> stripe", function() {deepEqual( Stem("striped"), "stripe");});
test("stripes -> stripe", function() {deepEqual( Stem("stripes"), "stripe");});
test("stripling -> stripl", function() {deepEqual( Stem("stripling"), "stripl");});
test("striplings -> stripl", function() {deepEqual( Stem("striplings"), "stripl");});
test("stripp -> stripp", function() {deepEqual( Stem("stripp"), "stripp");});
test("stripped -> strip", function() {deepEqual( Stem("stripped"), "strip");});
test("stripping -> strip", function() {deepEqual( Stem("stripping"), "strip");});
test("striv -> striv", function() {deepEqual( Stem("striv"), "striv");});
test("strive -> strive", function() {deepEqual( Stem("strive"), "strive");});
test("striven -> striven", function() {deepEqual( Stem("striven"), "striven");});
test("strives -> strive", function() {deepEqual( Stem("strives"), "strive");});
test("striving -> strive", function() {deepEqual( Stem("striving"), "strive");});
test("strode -> strode", function() {deepEqual( Stem("strode"), "strode");});
test("strok -> strok", function() {deepEqual( Stem("strok"), "strok");});
test("stroke -> stroke", function() {deepEqual( Stem("stroke"), "stroke");});
test("strokes -> stroke", function() {deepEqual( Stem("strokes"), "stroke");});
test("stroll -> stroll", function() {deepEqual( Stem("stroll"), "stroll");});
test("strolled -> stroll", function() {deepEqual( Stem("strolled"), "stroll");});
test("strolls -> stroll", function() {deepEqual( Stem("strolls"), "stroll");});
test("strond -> strond", function() {deepEqual( Stem("strond"), "strond");});
test("stronds -> strond", function() {deepEqual( Stem("stronds"), "strond");});
test("strong -> strong", function() {deepEqual( Stem("strong"), "strong");});
test("strongbow -> strongbow", function() {deepEqual( Stem("strongbow"), "strongbow");});
test("stronger -> stronger", function() {deepEqual( Stem("stronger"), "stronger");});
test("strongest -> strongest", function() {deepEqual( Stem("strongest"), "strongest");});
test("strongly -> strongli", function() {deepEqual( Stem("strongly"), "strongli");});
test("strooke -> strook", function() {deepEqual( Stem("strooke"), "strook");});
test("strossers -> strosser", function() {deepEqual( Stem("strossers"), "strosser");});
test("strove -> strove", function() {deepEqual( Stem("strove"), "strove");});
test("strown -> strown", function() {deepEqual( Stem("strown"), "strown");});
test("stroy -> stroi", function() {deepEqual( Stem("stroy"), "stroi");});
test("struck -> struck", function() {deepEqual( Stem("struck"), "struck");});
test("strucken -> strucken", function() {deepEqual( Stem("strucken"), "strucken");});
test("struggle -> struggl", function() {deepEqual( Stem("struggle"), "struggl");});
test("struggled -> struggl", function() {deepEqual( Stem("struggled"), "struggl");});
test("struggles -> struggl", function() {deepEqual( Stem("struggles"), "struggl");});
test("struggling -> struggl", function() {deepEqual( Stem("struggling"), "struggl");});
test("strumpet -> strumpet", function() {deepEqual( Stem("strumpet"), "strumpet");});
test("strumpeted -> strumpet", function() {deepEqual( Stem("strumpeted"), "strumpet");});
test("strumpets -> strumpet", function() {deepEqual( Stem("strumpets"), "strumpet");});
test("strumpff -> strumpff", function() {deepEqual( Stem("strumpff"), "strumpff");});
test("strung -> strung", function() {deepEqual( Stem("strung"), "strung");});
test("strut -> strut", function() {deepEqual( Stem("strut"), "strut");});
test("struts -> strut", function() {deepEqual( Stem("struts"), "strut");});
test("strutted -> strut", function() {deepEqual( Stem("strutted"), "strut");});
test("strutting -> strut", function() {deepEqual( Stem("strutting"), "strut");});
test("stuart -> stuart", function() {deepEqual( Stem("stuart"), "stuart");});
test("stubble -> stubbl", function() {deepEqual( Stem("stubble"), "stubbl");});
test("stubborn -> stubborn", function() {deepEqual( Stem("stubborn"), "stubborn");});
test("stubbornest -> stubbornest", function() {deepEqual( Stem("stubbornest"), "stubbornest");});
test("stubbornly -> stubbornli", function() {deepEqual( Stem("stubbornly"), "stubbornli");});
test("stubbornness -> stubborn", function() {deepEqual( Stem("stubbornness"), "stubborn");});
test("stucco -> stucco", function() {deepEqual( Stem("stucco"), "stucco");});
test("stuck -> stuck", function() {deepEqual( Stem("stuck"), "stuck");});
test("studded -> stud", function() {deepEqual( Stem("studded"), "stud");});
test("student -> student", function() {deepEqual( Stem("student"), "student");});
test("students -> student", function() {deepEqual( Stem("students"), "student");});
test("studied -> studi", function() {deepEqual( Stem("studied"), "studi");});
test("studies -> studi", function() {deepEqual( Stem("studies"), "studi");});
test("studio -> studio", function() {deepEqual( Stem("studio"), "studio");});
test("studios -> studio", function() {deepEqual( Stem("studios"), "studio");});
test("studious -> studiou", function() {deepEqual( Stem("studious"), "studiou");});
test("studiously -> studious", function() {deepEqual( Stem("studiously"), "studious");});
test("studs -> stud", function() {deepEqual( Stem("studs"), "stud");});
test("study -> studi", function() {deepEqual( Stem("study"), "studi");});
test("studying -> studi", function() {deepEqual( Stem("studying"), "studi");});
test("stuff -> stuff", function() {deepEqual( Stem("stuff"), "stuff");});
test("stuffing -> stuf", function() {deepEqual( Stem("stuffing"), "stuf");});
test("stuffs -> stuff", function() {deepEqual( Stem("stuffs"), "stuff");});
test("stumble -> stumbl", function() {deepEqual( Stem("stumble"), "stumbl");});
test("stumbled -> stumbl", function() {deepEqual( Stem("stumbled"), "stumbl");});
test("stumbles -> stumbl", function() {deepEqual( Stem("stumbles"), "stumbl");});
test("stumblest -> stumblest", function() {deepEqual( Stem("stumblest"), "stumblest");});
test("stumbling -> stumbl", function() {deepEqual( Stem("stumbling"), "stumbl");});
test("stump -> stump", function() {deepEqual( Stem("stump"), "stump");});
test("stumps -> stump", function() {deepEqual( Stem("stumps"), "stump");});
test("stumpy -> stumpi", function() {deepEqual( Stem("stumpy"), "stumpi");});
test("stung -> stung", function() {deepEqual( Stem("stung"), "stung");});
test("stunned -> stun", function() {deepEqual( Stem("stunned"), "stun");});
test("stunnington -> stunnington", function() {deepEqual( Stem("stunnington"), "stunnington");});
test("stunted -> stunt", function() {deepEqual( Stem("stunted"), "stunt");});
test("stupefied -> stupefi", function() {deepEqual( Stem("stupefied"), "stupefi");});
test("stupefy -> stupefi", function() {deepEqual( Stem("stupefy"), "stupefi");});
test("stupendously -> stupend", function() {deepEqual( Stem("stupendously"), "stupend");});
test("stupid -> stupid", function() {deepEqual( Stem("stupid"), "stupid");});
test("stupidest -> stupidest", function() {deepEqual( Stem("stupidest"), "stupidest");});
test("stupidity -> stupid", function() {deepEqual( Stem("stupidity"), "stupid");});
test("stupified -> stupifi", function() {deepEqual( Stem("stupified"), "stupifi");});
test("stupor -> stupor", function() {deepEqual( Stem("stupor"), "stupor");});
test("stuprum -> stuprum", function() {deepEqual( Stem("stuprum"), "stuprum");});
test("sturdy -> sturdi", function() {deepEqual( Stem("sturdy"), "sturdi");});
test("sturm -> sturm", function() {deepEqual( Stem("sturm"), "sturm");});
test("stuttering -> stutter", function() {deepEqual( Stem("stuttering"), "stutter");});
test("sty -> sty", function() {deepEqual( Stem("sty"), "sty");});
test("styga -> styga", function() {deepEqual( Stem("styga"), "styga");});
test("stygian -> stygian", function() {deepEqual( Stem("stygian"), "stygian");});
test("styl -> styl", function() {deepEqual( Stem("styl"), "styl");});
test("style -> style", function() {deepEqual( Stem("style"), "style");});
test("styled -> style", function() {deepEqual( Stem("styled"), "style");});
test("styles -> style", function() {deepEqual( Stem("styles"), "style");});
test("styx -> styx", function() {deepEqual( Stem("styx"), "styx");});
test("su -> su", function() {deepEqual( Stem("su"), "su");});
test("suavity -> suaviti", function() {deepEqual( Stem("suavity"), "suaviti");});
test("sub -> sub", function() {deepEqual( Stem("sub"), "sub");});
test("subalterns -> subaltern", function() {deepEqual( Stem("subalterns"), "subaltern");});
test("subcontracted -> subcontract", function() {deepEqual( Stem("subcontracted"), "subcontract");});
test("subdu -> subdu", function() {deepEqual( Stem("subdu"), "subdu");});
test("subdue -> subdu", function() {deepEqual( Stem("subdue"), "subdu");});
test("subdued -> subdu", function() {deepEqual( Stem("subdued"), "subdu");});
test("subduements -> subduement", function() {deepEqual( Stem("subduements"), "subduement");});
test("subdues -> subdu", function() {deepEqual( Stem("subdues"), "subdu");});
test("subduing -> subdu", function() {deepEqual( Stem("subduing"), "subdu");});
test("subject -> subject", function() {deepEqual( Stem("subject"), "subject");});
test("subjected -> subject", function() {deepEqual( Stem("subjected"), "subject");});
test("subjection -> subject", function() {deepEqual( Stem("subjection"), "subject");});
test("subjects -> subject", function() {deepEqual( Stem("subjects"), "subject");});
test("subjugate -> subjug", function() {deepEqual( Stem("subjugate"), "subjug");});
test("subjugated -> subjug", function() {deepEqual( Stem("subjugated"), "subjug");});
test("submerg -> submerg", function() {deepEqual( Stem("submerg"), "submerg");});
test("submission -> submiss", function() {deepEqual( Stem("submission"), "submiss");});
test("submissive -> submiss", function() {deepEqual( Stem("submissive"), "submiss");});
test("submissively -> submiss", function() {deepEqual( Stem("submissively"), "submiss");});
test("submit -> submit", function() {deepEqual( Stem("submit"), "submit");});
test("submits -> submit", function() {deepEqual( Stem("submits"), "submit");});
test("submitted -> submit", function() {deepEqual( Stem("submitted"), "submit");});
test("submitting -> submit", function() {deepEqual( Stem("submitting"), "submit");});
test("subordinate -> subordin", function() {deepEqual( Stem("subordinate"), "subordin");});
test("suborn -> suborn", function() {deepEqual( Stem("suborn"), "suborn");});
test("subornation -> suborn", function() {deepEqual( Stem("subornation"), "suborn");});
test("suborned -> suborn", function() {deepEqual( Stem("suborned"), "suborn");});
test("subscrib -> subscrib", function() {deepEqual( Stem("subscrib"), "subscrib");});
test("subscribe -> subscrib", function() {deepEqual( Stem("subscribe"), "subscrib");});
test("subscribed -> subscrib", function() {deepEqual( Stem("subscribed"), "subscrib");});
test("subscriber -> subscrib", function() {deepEqual( Stem("subscriber"), "subscrib");});
test("subscribers -> subscrib", function() {deepEqual( Stem("subscribers"), "subscrib");});
test("subscribes -> subscrib", function() {deepEqual( Stem("subscribes"), "subscrib");});
test("subscription -> subscript", function() {deepEqual( Stem("subscription"), "subscript");});
test("subsequent -> subsequ", function() {deepEqual( Stem("subsequent"), "subsequ");});
test("subsequently -> subsequ", function() {deepEqual( Stem("subsequently"), "subsequ");});
test("subsided -> subsid", function() {deepEqual( Stem("subsided"), "subsid");});
test("subsides -> subsid", function() {deepEqual( Stem("subsides"), "subsid");});
test("subsidies -> subsidi", function() {deepEqual( Stem("subsidies"), "subsidi");});
test("subsidy -> subsidi", function() {deepEqual( Stem("subsidy"), "subsidi");});
test("subsist -> subsist", function() {deepEqual( Stem("subsist"), "subsist");});
test("subsisted -> subsist", function() {deepEqual( Stem("subsisted"), "subsist");});
test("subsisting -> subsist", function() {deepEqual( Stem("subsisting"), "subsist");});
test("subsists -> subsist", function() {deepEqual( Stem("subsists"), "subsist");});
test("subsoiling -> subsoil", function() {deepEqual( Stem("subsoiling"), "subsoil");});
test("substance -> substanc", function() {deepEqual( Stem("substance"), "substanc");});
test("substances -> substanc", function() {deepEqual( Stem("substances"), "substanc");});
test("substantial -> substanti", function() {deepEqual( Stem("substantial"), "substanti");});
test("substitute -> substitut", function() {deepEqual( Stem("substitute"), "substitut");});
test("substituted -> substitut", function() {deepEqual( Stem("substituted"), "substitut");});
test("substitutes -> substitut", function() {deepEqual( Stem("substitutes"), "substitut");});
test("substitution -> substitut", function() {deepEqual( Stem("substitution"), "substitut");});
test("subterranean -> subterranean", function() {deepEqual( Stem("subterranean"), "subterranean");});
test("subtile -> subtil", function() {deepEqual( Stem("subtile"), "subtil");});
test("subtilly -> subtilli", function() {deepEqual( Stem("subtilly"), "subtilli");});
test("subtle -> subtl", function() {deepEqual( Stem("subtle"), "subtl");});
test("subtleties -> subtleti", function() {deepEqual( Stem("subtleties"), "subtleti");});
test("subtlety -> subtleti", function() {deepEqual( Stem("subtlety"), "subtleti");});
test("subtly -> subtli", function() {deepEqual( Stem("subtly"), "subtli");});
test("subtractors -> subtractor", function() {deepEqual( Stem("subtractors"), "subtractor");});
test("suburb -> suburb", function() {deepEqual( Stem("suburb"), "suburb");});
test("suburban -> suburban", function() {deepEqual( Stem("suburban"), "suburban");});
test("suburbs -> suburb", function() {deepEqual( Stem("suburbs"), "suburb");});
test("subversion -> subvers", function() {deepEqual( Stem("subversion"), "subvers");});
test("subverts -> subvert", function() {deepEqual( Stem("subverts"), "subvert");});
test("succedant -> succed", function() {deepEqual( Stem("succedant"), "succed");});
test("succeed -> succe", function() {deepEqual( Stem("succeed"), "succe");});
test("succeeded -> succeed", function() {deepEqual( Stem("succeeded"), "succeed");});
test("succeeders -> succeed", function() {deepEqual( Stem("succeeders"), "succeed");});
test("succeeding -> succeed", function() {deepEqual( Stem("succeeding"), "succeed");});
test("succeeds -> succe", function() {deepEqual( Stem("succeeds"), "succe");});
test("success -> success", function() {deepEqual( Stem("success"), "success");});
test("successantly -> successantli", function() {deepEqual( Stem("successantly"), "successantli");});
test("successes -> success", function() {deepEqual( Stem("successes"), "success");});
test("successful -> success", function() {deepEqual( Stem("successful"), "success");});
test("successfully -> successfulli", function() {deepEqual( Stem("successfully"), "successfulli");});
test("succession -> success", function() {deepEqual( Stem("succession"), "success");});
test("successive -> success", function() {deepEqual( Stem("successive"), "success");});
test("successively -> success", function() {deepEqual( Stem("successively"), "success");});
test("successor -> successor", function() {deepEqual( Stem("successor"), "successor");});
test("successors -> successor", function() {deepEqual( Stem("successors"), "successor");});
test("succour -> succour", function() {deepEqual( Stem("succour"), "succour");});
test("succours -> succour", function() {deepEqual( Stem("succours"), "succour");});
test("succumbed -> succumb", function() {deepEqual( Stem("succumbed"), "succumb");});
test("such -> such", function() {deepEqual( Stem("such"), "such");});
test("suck -> suck", function() {deepEqual( Stem("suck"), "suck");});
test("sucked -> suck", function() {deepEqual( Stem("sucked"), "suck");});
test("sucker -> sucker", function() {deepEqual( Stem("sucker"), "sucker");});
test("suckers -> sucker", function() {deepEqual( Stem("suckers"), "sucker");});
test("sucking -> suck", function() {deepEqual( Stem("sucking"), "suck");});
test("suckle -> suckl", function() {deepEqual( Stem("suckle"), "suckl");});
test("suckling -> suckl", function() {deepEqual( Stem("suckling"), "suckl");});
test("sucks -> suck", function() {deepEqual( Stem("sucks"), "suck");});
test("sudden -> sudden", function() {deepEqual( Stem("sudden"), "sudden");});
test("suddenly -> suddenli", function() {deepEqual( Stem("suddenly"), "suddenli");});
test("sue -> sue", function() {deepEqual( Stem("sue"), "sue");});
test("sued -> su", function() {deepEqual( Stem("sued"), "su");});
test("suerly -> suerli", function() {deepEqual( Stem("suerly"), "suerli");});
test("sues -> sue", function() {deepEqual( Stem("sues"), "sue");});
test("sueth -> sueth", function() {deepEqual( Stem("sueth"), "sueth");});
test("suff -> suff", function() {deepEqual( Stem("suff"), "suff");});
test("suffer -> suffer", function() {deepEqual( Stem("suffer"), "suffer");});
test("sufferance -> suffer", function() {deepEqual( Stem("sufferance"), "suffer");});
test("sufferances -> suffer", function() {deepEqual( Stem("sufferances"), "suffer");});
test("suffered -> suffer", function() {deepEqual( Stem("suffered"), "suffer");});
test("sufferer -> suffer", function() {deepEqual( Stem("sufferer"), "suffer");});
test("suffering -> suffer", function() {deepEqual( Stem("suffering"), "suffer");});
test("sufferings -> suffer", function() {deepEqual( Stem("sufferings"), "suffer");});
test("suffers -> suffer", function() {deepEqual( Stem("suffers"), "suffer");});
test("suffic -> suffic", function() {deepEqual( Stem("suffic"), "suffic");});
test("suffice -> suffic", function() {deepEqual( Stem("suffice"), "suffic");});
test("sufficed -> suffic", function() {deepEqual( Stem("sufficed"), "suffic");});
test("suffices -> suffic", function() {deepEqual( Stem("suffices"), "suffic");});
test("sufficeth -> sufficeth", function() {deepEqual( Stem("sufficeth"), "sufficeth");});
test("sufficiency -> suffici", function() {deepEqual( Stem("sufficiency"), "suffici");});
test("sufficient -> suffici", function() {deepEqual( Stem("sufficient"), "suffici");});
test("sufficiently -> suffici", function() {deepEqual( Stem("sufficiently"), "suffici");});
test("sufficing -> suffic", function() {deepEqual( Stem("sufficing"), "suffic");});
test("sufficit -> sufficit", function() {deepEqual( Stem("sufficit"), "sufficit");});
test("suffigance -> suffig", function() {deepEqual( Stem("suffigance"), "suffig");});
test("suffocate -> suffoc", function() {deepEqual( Stem("suffocate"), "suffoc");});
test("suffocated -> suffoc", function() {deepEqual( Stem("suffocated"), "suffoc");});
test("suffocating -> suffoc", function() {deepEqual( Stem("suffocating"), "suffoc");});
test("suffocation -> suffoc", function() {deepEqual( Stem("suffocation"), "suffoc");});
test("suffolk -> suffolk", function() {deepEqual( Stem("suffolk"), "suffolk");});
test("suffrage -> suffrag", function() {deepEqual( Stem("suffrage"), "suffrag");});
test("suffrages -> suffrag", function() {deepEqual( Stem("suffrages"), "suffrag");});
test("sug -> sug", function() {deepEqual( Stem("sug"), "sug");});
test("sugar -> sugar", function() {deepEqual( Stem("sugar"), "sugar");});
test("sugarcane -> sugarcan", function() {deepEqual( Stem("sugarcane"), "sugarcan");});
test("sugarplums -> sugarplum", function() {deepEqual( Stem("sugarplums"), "sugarplum");});
test("sugars -> sugar", function() {deepEqual( Stem("sugars"), "sugar");});
test("sugarsop -> sugarsop", function() {deepEqual( Stem("sugarsop"), "sugarsop");});
test("suggest -> suggest", function() {deepEqual( Stem("suggest"), "suggest");});
test("suggested -> suggest", function() {deepEqual( Stem("suggested"), "suggest");});
test("suggesting -> suggest", function() {deepEqual( Stem("suggesting"), "suggest");});
test("suggestion -> suggest", function() {deepEqual( Stem("suggestion"), "suggest");});
test("suggestions -> suggest", function() {deepEqual( Stem("suggestions"), "suggest");});
test("suggestive -> suggest", function() {deepEqual( Stem("suggestive"), "suggest");});
test("suggests -> suggest", function() {deepEqual( Stem("suggests"), "suggest");});
test("sui -> sui", function() {deepEqual( Stem("sui"), "sui");});
test("suicide -> suicid", function() {deepEqual( Stem("suicide"), "suicid");});
test("suis -> sui", function() {deepEqual( Stem("suis"), "sui");});
test("suit -> suit", function() {deepEqual( Stem("suit"), "suit");});
test("suitable -> suitabl", function() {deepEqual( Stem("suitable"), "suitabl");});
test("suite -> suit", function() {deepEqual( Stem("suite"), "suit");});
test("suited -> suit", function() {deepEqual( Stem("suited"), "suit");});
test("suiting -> suit", function() {deepEqual( Stem("suiting"), "suit");});
test("suitor -> suitor", function() {deepEqual( Stem("suitor"), "suitor");});
test("suitors -> suitor", function() {deepEqual( Stem("suitors"), "suitor");});
test("suits -> suit", function() {deepEqual( Stem("suits"), "suit");});
test("suivez -> suivez", function() {deepEqual( Stem("suivez"), "suivez");});
test("sulkily -> sulkili", function() {deepEqual( Stem("sulkily"), "sulkili");});
test("sulky -> sulki", function() {deepEqual( Stem("sulky"), "sulki");});
test("sullen -> sullen", function() {deepEqual( Stem("sullen"), "sullen");});
test("sullens -> sullen", function() {deepEqual( Stem("sullens"), "sullen");});
test("sullied -> sulli", function() {deepEqual( Stem("sullied"), "sulli");});
test("sullies -> sulli", function() {deepEqual( Stem("sullies"), "sulli");});
test("sully -> sulli", function() {deepEqual( Stem("sully"), "sulli");});
test("sulph -> sulph", function() {deepEqual( Stem("sulph"), "sulph");});
test("sulpherous -> sulpher", function() {deepEqual( Stem("sulpherous"), "sulpher");});
test("sulphur -> sulphur", function() {deepEqual( Stem("sulphur"), "sulphur");});
test("sulphurous -> sulphur", function() {deepEqual( Stem("sulphurous"), "sulphur");});
test("sultan -> sultan", function() {deepEqual( Stem("sultan"), "sultan");});
test("sultanas -> sultana", function() {deepEqual( Stem("sultanas"), "sultana");});
test("sultans -> sultan", function() {deepEqual( Stem("sultans"), "sultan");});
test("sultry -> sultri", function() {deepEqual( Stem("sultry"), "sultri");});
test("sum -> sum", function() {deepEqual( Stem("sum"), "sum");});
test("sumless -> sumless", function() {deepEqual( Stem("sumless"), "sumless");});
test("summ -> summ", function() {deepEqual( Stem("summ"), "summ");});
test("summa -> summa", function() {deepEqual( Stem("summa"), "summa");});
test("summarily -> summarili", function() {deepEqual( Stem("summarily"), "summarili");});
test("summary -> summari", function() {deepEqual( Stem("summary"), "summari");});
test("summer -> summer", function() {deepEqual( Stem("summer"), "summer");});
test("summers -> summer", function() {deepEqual( Stem("summers"), "summer");});
test("summit -> summit", function() {deepEqual( Stem("summit"), "summit");});
test("summon -> summon", function() {deepEqual( Stem("summon"), "summon");});
test("summoned -> summon", function() {deepEqual( Stem("summoned"), "summon");});
test("summoners -> summon", function() {deepEqual( Stem("summoners"), "summon");});
test("summons -> summon", function() {deepEqual( Stem("summons"), "summon");});
test("sumpter -> sumpter", function() {deepEqual( Stem("sumpter"), "sumpter");});
test("sumptuosity -> sumptuos", function() {deepEqual( Stem("sumptuosity"), "sumptuos");});
test("sumptuous -> sumptuou", function() {deepEqual( Stem("sumptuous"), "sumptuou");});
test("sumptuously -> sumptuous", function() {deepEqual( Stem("sumptuously"), "sumptuous");});
test("sums -> sum", function() {deepEqual( Stem("sums"), "sum");});
test("sun -> sun", function() {deepEqual( Stem("sun"), "sun");});
test("sunbeam -> sunbeam", function() {deepEqual( Stem("sunbeam"), "sunbeam");});
test("sunbeams -> sunbeam", function() {deepEqual( Stem("sunbeams"), "sunbeam");});
test("sunburning -> sunburn", function() {deepEqual( Stem("sunburning"), "sunburn");});
test("sunburnt -> sunburnt", function() {deepEqual( Stem("sunburnt"), "sunburnt");});
test("sund -> sund", function() {deepEqual( Stem("sund"), "sund");});
test("sunday -> sundai", function() {deepEqual( Stem("sunday"), "sundai");});
test("sundays -> sundai", function() {deepEqual( Stem("sundays"), "sundai");});
test("sunder -> sunder", function() {deepEqual( Stem("sunder"), "sunder");});
test("sunders -> sunder", function() {deepEqual( Stem("sunders"), "sunder");});
test("sundry -> sundri", function() {deepEqual( Stem("sundry"), "sundri");});
test("sunflower -> sunflow", function() {deepEqual( Stem("sunflower"), "sunflow");});
test("sung -> sung", function() {deepEqual( Stem("sung"), "sung");});
test("sunk -> sunk", function() {deepEqual( Stem("sunk"), "sunk");});
test("sunken -> sunken", function() {deepEqual( Stem("sunken"), "sunken");});
test("sunned -> sun", function() {deepEqual( Stem("sunned"), "sun");});
test("sunning -> sun", function() {deepEqual( Stem("sunning"), "sun");});
test("sunny -> sunni", function() {deepEqual( Stem("sunny"), "sunni");});
test("sunrise -> sunris", function() {deepEqual( Stem("sunrise"), "sunris");});
test("sunrising -> sunris", function() {deepEqual( Stem("sunrising"), "sunris");});
test("suns -> sun", function() {deepEqual( Stem("suns"), "sun");});
test("sunset -> sunset", function() {deepEqual( Stem("sunset"), "sunset");});
test("sunshine -> sunshin", function() {deepEqual( Stem("sunshine"), "sunshin");});
test("sunshiny -> sunshini", function() {deepEqual( Stem("sunshiny"), "sunshini");});
test("sup -> sup", function() {deepEqual( Stem("sup"), "sup");});
test("super -> super", function() {deepEqual( Stem("super"), "super");});
test("superabundant -> superabund", function() {deepEqual( Stem("superabundant"), "superabund");});
test("superb -> superb", function() {deepEqual( Stem("superb"), "superb");});
test("supercilious -> supercili", function() {deepEqual( Stem("supercilious"), "supercili");});
test("superciliously -> supercili", function() {deepEqual( Stem("superciliously"), "supercili");});
test("superficial -> superfici", function() {deepEqual( Stem("superficial"), "superfici");});
test("superficially -> superfici", function() {deepEqual( Stem("superficially"), "superfici");});
test("superfluity -> superflu", function() {deepEqual( Stem("superfluity"), "superflu");});
test("superfluous -> superflu", function() {deepEqual( Stem("superfluous"), "superflu");});
test("superfluously -> superflu", function() {deepEqual( Stem("superfluously"), "superflu");});
test("superflux -> superflux", function() {deepEqual( Stem("superflux"), "superflux");});
test("superintend -> superintend", function() {deepEqual( Stem("superintend"), "superintend");});
test("superintended -> superintend", function() {deepEqual( Stem("superintended"), "superintend");});
test("superintendence -> superintend", function() {deepEqual( Stem("superintendence"), "superintend");});
test("superintending -> superintend", function() {deepEqual( Stem("superintending"), "superintend");});
test("superior -> superior", function() {deepEqual( Stem("superior"), "superior");});
test("superiority -> superior", function() {deepEqual( Stem("superiority"), "superior");});
test("superiors -> superior", function() {deepEqual( Stem("superiors"), "superior");});
test("supernal -> supern", function() {deepEqual( Stem("supernal"), "supern");});
test("supernatural -> supernatur", function() {deepEqual( Stem("supernatural"), "supernatur");});
test("superpraise -> superprais", function() {deepEqual( Stem("superpraise"), "superprais");});
test("superscript -> superscript", function() {deepEqual( Stem("superscript"), "superscript");});
test("superscription -> superscript", function() {deepEqual( Stem("superscription"), "superscript");});
test("superscriptions -> superscript", function() {deepEqual( Stem("superscriptions"), "superscript");});
test("supersede -> supersed", function() {deepEqual( Stem("supersede"), "supersed");});
test("superseded -> supersed", function() {deepEqual( Stem("superseded"), "supersed");});
test("superserviceable -> superservic", function() {deepEqual( Stem("superserviceable"), "superservic");});
test("superstition -> superstit", function() {deepEqual( Stem("superstition"), "superstit");});
test("superstitious -> superstiti", function() {deepEqual( Stem("superstitious"), "superstiti");});
test("superstitiously -> superstiti", function() {deepEqual( Stem("superstitiously"), "superstiti");});
test("supersubtle -> supersubtl", function() {deepEqual( Stem("supersubtle"), "supersubtl");});
test("supervened -> superven", function() {deepEqual( Stem("supervened"), "superven");});
test("supervise -> supervis", function() {deepEqual( Stem("supervise"), "supervis");});
test("supervisor -> supervisor", function() {deepEqual( Stem("supervisor"), "supervisor");});
test("supp -> supp", function() {deepEqual( Stem("supp"), "supp");});
test("supped -> sup", function() {deepEqual( Stem("supped"), "sup");});
test("supper -> supper", function() {deepEqual( Stem("supper"), "supper");});
test("suppers -> supper", function() {deepEqual( Stem("suppers"), "supper");});
test("suppertime -> suppertim", function() {deepEqual( Stem("suppertime"), "suppertim");});
test("supping -> sup", function() {deepEqual( Stem("supping"), "sup");});
test("supplant -> supplant", function() {deepEqual( Stem("supplant"), "supplant");});
test("supple -> suppl", function() {deepEqual( Stem("supple"), "suppl");});
test("suppler -> suppler", function() {deepEqual( Stem("suppler"), "suppler");});
test("suppliance -> supplianc", function() {deepEqual( Stem("suppliance"), "supplianc");});
test("suppliant -> suppliant", function() {deepEqual( Stem("suppliant"), "suppliant");});
test("suppliants -> suppliant", function() {deepEqual( Stem("suppliants"), "suppliant");});
test("supplicant -> supplic", function() {deepEqual( Stem("supplicant"), "supplic");});
test("supplication -> supplic", function() {deepEqual( Stem("supplication"), "supplic");});
test("supplications -> supplic", function() {deepEqual( Stem("supplications"), "supplic");});
test("supplie -> suppli", function() {deepEqual( Stem("supplie"), "suppli");});
test("supplied -> suppli", function() {deepEqual( Stem("supplied"), "suppli");});
test("supplies -> suppli", function() {deepEqual( Stem("supplies"), "suppli");});
test("suppliest -> suppliest", function() {deepEqual( Stem("suppliest"), "suppliest");});
test("supply -> suppli", function() {deepEqual( Stem("supply"), "suppli");});
test("supplyant -> supplyant", function() {deepEqual( Stem("supplyant"), "supplyant");});
test("supplying -> suppli", function() {deepEqual( Stem("supplying"), "suppli");});
test("supplyment -> supplyment", function() {deepEqual( Stem("supplyment"), "supplyment");});
test("support -> support", function() {deepEqual( Stem("support"), "support");});
test("supportable -> support", function() {deepEqual( Stem("supportable"), "support");});
test("supportance -> support", function() {deepEqual( Stem("supportance"), "support");});
test("supported -> support", function() {deepEqual( Stem("supported"), "support");});
test("supporter -> support", function() {deepEqual( Stem("supporter"), "support");});
test("supporters -> support", function() {deepEqual( Stem("supporters"), "support");});
test("supporting -> support", function() {deepEqual( Stem("supporting"), "support");});
test("supportor -> supportor", function() {deepEqual( Stem("supportor"), "supportor");});
test("supports -> support", function() {deepEqual( Stem("supports"), "support");});
test("suppos -> suppo", function() {deepEqual( Stem("suppos"), "suppo");});
test("supposal -> suppos", function() {deepEqual( Stem("supposal"), "suppos");});
test("suppose -> suppos", function() {deepEqual( Stem("suppose"), "suppos");});
test("supposed -> suppos", function() {deepEqual( Stem("supposed"), "suppos");});
test("supposes -> suppos", function() {deepEqual( Stem("supposes"), "suppos");});
test("supposest -> supposest", function() {deepEqual( Stem("supposest"), "supposest");});
test("supposing -> suppos", function() {deepEqual( Stem("supposing"), "suppos");});
test("supposition -> supposit", function() {deepEqual( Stem("supposition"), "supposit");});
test("suppress -> suppress", function() {deepEqual( Stem("suppress"), "suppress");});
test("suppressed -> suppress", function() {deepEqual( Stem("suppressed"), "suppress");});
test("suppresseth -> suppresseth", function() {deepEqual( Stem("suppresseth"), "suppresseth");});
test("supremacy -> supremaci", function() {deepEqual( Stem("supremacy"), "supremaci");});
test("supreme -> suprem", function() {deepEqual( Stem("supreme"), "suprem");});
test("supremely -> suprem", function() {deepEqual( Stem("supremely"), "suprem");});
test("sups -> sup", function() {deepEqual( Stem("sups"), "sup");});
test("sur -> sur", function() {deepEqual( Stem("sur"), "sur");});
test("surance -> suranc", function() {deepEqual( Stem("surance"), "suranc");});
test("surcease -> surceas", function() {deepEqual( Stem("surcease"), "surceas");});
test("surd -> surd", function() {deepEqual( Stem("surd"), "surd");});
test("sure -> sure", function() {deepEqual( Stem("sure"), "sure");});
test("surecard -> surecard", function() {deepEqual( Stem("surecard"), "surecard");});
test("surely -> sure", function() {deepEqual( Stem("surely"), "sure");});
test("surer -> surer", function() {deepEqual( Stem("surer"), "surer");});
test("surest -> surest", function() {deepEqual( Stem("surest"), "surest");});
test("sureties -> sureti", function() {deepEqual( Stem("sureties"), "sureti");});
test("surety -> sureti", function() {deepEqual( Stem("surety"), "sureti");});
test("surfeit -> surfeit", function() {deepEqual( Stem("surfeit"), "surfeit");});
test("surfeited -> surfeit", function() {deepEqual( Stem("surfeited"), "surfeit");});
test("surfeiter -> surfeit", function() {deepEqual( Stem("surfeiter"), "surfeit");});
test("surfeiting -> surfeit", function() {deepEqual( Stem("surfeiting"), "surfeit");});
test("surfeits -> surfeit", function() {deepEqual( Stem("surfeits"), "surfeit");});
test("surge -> surg", function() {deepEqual( Stem("surge"), "surg");});
test("surgeon -> surgeon", function() {deepEqual( Stem("surgeon"), "surgeon");});
test("surgeons -> surgeon", function() {deepEqual( Stem("surgeons"), "surgeon");});
test("surgere -> surger", function() {deepEqual( Stem("surgere"), "surger");});
test("surgery -> surgeri", function() {deepEqual( Stem("surgery"), "surgeri");});
test("surges -> surg", function() {deepEqual( Stem("surges"), "surg");});
test("surlily -> surlili", function() {deepEqual( Stem("surlily"), "surlili");});
test("surly -> surli", function() {deepEqual( Stem("surly"), "surli");});
test("surmis -> surmi", function() {deepEqual( Stem("surmis"), "surmi");});
test("surmise -> surmis", function() {deepEqual( Stem("surmise"), "surmis");});
test("surmised -> surmis", function() {deepEqual( Stem("surmised"), "surmis");});
test("surmises -> surmis", function() {deepEqual( Stem("surmises"), "surmis");});
test("surmount -> surmount", function() {deepEqual( Stem("surmount"), "surmount");});
test("surmounted -> surmount", function() {deepEqual( Stem("surmounted"), "surmount");});
test("surmounts -> surmount", function() {deepEqual( Stem("surmounts"), "surmount");});
test("surnam -> surnam", function() {deepEqual( Stem("surnam"), "surnam");});
test("surname -> surnam", function() {deepEqual( Stem("surname"), "surnam");});
test("surnamed -> surnam", function() {deepEqual( Stem("surnamed"), "surnam");});
test("surpass -> surpass", function() {deepEqual( Stem("surpass"), "surpass");});
test("surpassed -> surpass", function() {deepEqual( Stem("surpassed"), "surpass");});
test("surpasseth -> surpasseth", function() {deepEqual( Stem("surpasseth"), "surpasseth");});
test("surpassing -> surpass", function() {deepEqual( Stem("surpassing"), "surpass");});
test("surplice -> surplic", function() {deepEqual( Stem("surplice"), "surplic");});
test("surplus -> surplu", function() {deepEqual( Stem("surplus"), "surplu");});
test("surpris -> surpri", function() {deepEqual( Stem("surpris"), "surpri");});
test("surprise -> surpris", function() {deepEqual( Stem("surprise"), "surpris");});
test("surprised -> surpris", function() {deepEqual( Stem("surprised"), "surpris");});
test("surprises -> surpris", function() {deepEqual( Stem("surprises"), "surpris");});
test("surprising -> surpris", function() {deepEqual( Stem("surprising"), "surpris");});
test("surrender -> surrend", function() {deepEqual( Stem("surrender"), "surrend");});
test("surrendered -> surrend", function() {deepEqual( Stem("surrendered"), "surrend");});
test("surreptitious -> surreptiti", function() {deepEqual( Stem("surreptitious"), "surreptiti");});
test("surreptitiously -> surreptiti", function() {deepEqual( Stem("surreptitiously"), "surreptiti");});
test("surrey -> surrei", function() {deepEqual( Stem("surrey"), "surrei");});
test("surreys -> surrei", function() {deepEqual( Stem("surreys"), "surrei");});
test("surrounded -> surround", function() {deepEqual( Stem("surrounded"), "surround");});
test("surrounding -> surround", function() {deepEqual( Stem("surrounding"), "surround");});
test("survey -> survei", function() {deepEqual( Stem("survey"), "survei");});
test("surveyed -> survei", function() {deepEqual( Stem("surveyed"), "survei");});
test("surveyest -> surveyest", function() {deepEqual( Stem("surveyest"), "surveyest");});
test("surveying -> survei", function() {deepEqual( Stem("surveying"), "survei");});
test("surveyor -> surveyor", function() {deepEqual( Stem("surveyor"), "surveyor");});
test("surveyors -> surveyor", function() {deepEqual( Stem("surveyors"), "surveyor");});
test("surveys -> survei", function() {deepEqual( Stem("surveys"), "survei");});
test("survive -> surviv", function() {deepEqual( Stem("survive"), "surviv");});
test("survived -> surviv", function() {deepEqual( Stem("survived"), "surviv");});
test("survives -> surviv", function() {deepEqual( Stem("survives"), "surviv");});
test("survivor -> survivor", function() {deepEqual( Stem("survivor"), "survivor");});
test("survivors -> survivor", function() {deepEqual( Stem("survivors"), "survivor");});
test("susan -> susan", function() {deepEqual( Stem("susan"), "susan");});
test("suspect -> suspect", function() {deepEqual( Stem("suspect"), "suspect");});
test("suspected -> suspect", function() {deepEqual( Stem("suspected"), "suspect");});
test("suspecting -> suspect", function() {deepEqual( Stem("suspecting"), "suspect");});
test("suspects -> suspect", function() {deepEqual( Stem("suspects"), "suspect");});
test("suspend -> suspend", function() {deepEqual( Stem("suspend"), "suspend");});
test("suspended -> suspend", function() {deepEqual( Stem("suspended"), "suspend");});
test("suspense -> suspens", function() {deepEqual( Stem("suspense"), "suspens");});
test("suspicion -> suspicion", function() {deepEqual( Stem("suspicion"), "suspicion");});
test("suspicions -> suspicion", function() {deepEqual( Stem("suspicions"), "suspicion");});
test("suspicious -> suspici", function() {deepEqual( Stem("suspicious"), "suspici");});
test("suspiration -> suspir", function() {deepEqual( Stem("suspiration"), "suspir");});
test("suspire -> suspir", function() {deepEqual( Stem("suspire"), "suspir");});
test("sussex -> sussex", function() {deepEqual( Stem("sussex"), "sussex");});
test("sust -> sust", function() {deepEqual( Stem("sust"), "sust");});
test("sustain -> sustain", function() {deepEqual( Stem("sustain"), "sustain");});
test("sustained -> sustain", function() {deepEqual( Stem("sustained"), "sustain");});
test("sustaining -> sustain", function() {deepEqual( Stem("sustaining"), "sustain");});
test("sutler -> sutler", function() {deepEqual( Stem("sutler"), "sutler");});
test("sutton -> sutton", function() {deepEqual( Stem("sutton"), "sutton");});
test("suum -> suum", function() {deepEqual( Stem("suum"), "suum");});
test("swabber -> swabber", function() {deepEqual( Stem("swabber"), "swabber");});
test("swaddling -> swaddl", function() {deepEqual( Stem("swaddling"), "swaddl");});
test("swag -> swag", function() {deepEqual( Stem("swag"), "swag");});
test("swagg -> swagg", function() {deepEqual( Stem("swagg"), "swagg");});
test("swagger -> swagger", function() {deepEqual( Stem("swagger"), "swagger");});
test("swaggered -> swagger", function() {deepEqual( Stem("swaggered"), "swagger");});
test("swaggerer -> swagger", function() {deepEqual( Stem("swaggerer"), "swagger");});
test("swaggerers -> swagger", function() {deepEqual( Stem("swaggerers"), "swagger");});
test("swaggering -> swagger", function() {deepEqual( Stem("swaggering"), "swagger");});
test("swain -> swain", function() {deepEqual( Stem("swain"), "swain");});
test("swains -> swain", function() {deepEqual( Stem("swains"), "swain");});
test("swallow -> swallow", function() {deepEqual( Stem("swallow"), "swallow");});
test("swallowed -> swallow", function() {deepEqual( Stem("swallowed"), "swallow");});
test("swallowing -> swallow", function() {deepEqual( Stem("swallowing"), "swallow");});
test("swallows -> swallow", function() {deepEqual( Stem("swallows"), "swallow");});
test("swam -> swam", function() {deepEqual( Stem("swam"), "swam");});
test("swamp -> swamp", function() {deepEqual( Stem("swamp"), "swamp");});
test("swampton -> swampton", function() {deepEqual( Stem("swampton"), "swampton");});
test("swan -> swan", function() {deepEqual( Stem("swan"), "swan");});
test("swankey -> swankei", function() {deepEqual( Stem("swankey"), "swankei");});
test("swans -> swan", function() {deepEqual( Stem("swans"), "swan");});
test("sward -> sward", function() {deepEqual( Stem("sward"), "sward");});
test("sware -> sware", function() {deepEqual( Stem("sware"), "sware");});
test("swarm -> swarm", function() {deepEqual( Stem("swarm"), "swarm");});
test("swarmed -> swarm", function() {deepEqual( Stem("swarmed"), "swarm");});
test("swarming -> swarm", function() {deepEqual( Stem("swarming"), "swarm");});
test("swarms -> swarm", function() {deepEqual( Stem("swarms"), "swarm");});
test("swarreys -> swarrei", function() {deepEqual( Stem("swarreys"), "swarrei");});
test("swart -> swart", function() {deepEqual( Stem("swart"), "swart");});
test("swarth -> swarth", function() {deepEqual( Stem("swarth"), "swarth");});
test("swarths -> swarth", function() {deepEqual( Stem("swarths"), "swarth");});
test("swarthy -> swarthi", function() {deepEqual( Stem("swarthy"), "swarthi");});
test("swartz -> swartz", function() {deepEqual( Stem("swartz"), "swartz");});
test("swashers -> swasher", function() {deepEqual( Stem("swashers"), "swasher");});
test("swashing -> swash", function() {deepEqual( Stem("swashing"), "swash");});
test("swath -> swath", function() {deepEqual( Stem("swath"), "swath");});
test("swathing -> swath", function() {deepEqual( Stem("swathing"), "swath");});
test("swathling -> swathl", function() {deepEqual( Stem("swathling"), "swathl");});
test("sway -> swai", function() {deepEqual( Stem("sway"), "swai");});
test("swaying -> swai", function() {deepEqual( Stem("swaying"), "swai");});
test("sways -> swai", function() {deepEqual( Stem("sways"), "swai");});
test("swear -> swear", function() {deepEqual( Stem("swear"), "swear");});
test("swearer -> swearer", function() {deepEqual( Stem("swearer"), "swearer");});
test("swearers -> swearer", function() {deepEqual( Stem("swearers"), "swearer");});
test("swearest -> swearest", function() {deepEqual( Stem("swearest"), "swearest");});
test("swearing -> swear", function() {deepEqual( Stem("swearing"), "swear");});
test("swearings -> swear", function() {deepEqual( Stem("swearings"), "swear");});
test("swears -> swear", function() {deepEqual( Stem("swears"), "swear");});
test("sweat -> sweat", function() {deepEqual( Stem("sweat"), "sweat");});
test("sweaten -> sweaten", function() {deepEqual( Stem("sweaten"), "sweaten");});
test("sweating -> sweat", function() {deepEqual( Stem("sweating"), "sweat");});
test("sweats -> sweat", function() {deepEqual( Stem("sweats"), "sweat");});
test("sweaty -> sweati", function() {deepEqual( Stem("sweaty"), "sweati");});
test("sweep -> sweep", function() {deepEqual( Stem("sweep"), "sweep");});
test("sweeper -> sweeper", function() {deepEqual( Stem("sweeper"), "sweeper");});
test("sweeperess -> sweeperess", function() {deepEqual( Stem("sweeperess"), "sweeperess");});
test("sweepers -> sweeper", function() {deepEqual( Stem("sweepers"), "sweeper");});
test("sweeps -> sweep", function() {deepEqual( Stem("sweeps"), "sweep");});
test("sweet -> sweet", function() {deepEqual( Stem("sweet"), "sweet");});
test("sweetbreads -> sweetbread", function() {deepEqual( Stem("sweetbreads"), "sweetbread");});
test("sweeten -> sweeten", function() {deepEqual( Stem("sweeten"), "sweeten");});
test("sweetened -> sweeten", function() {deepEqual( Stem("sweetened"), "sweeten");});
test("sweetens -> sweeten", function() {deepEqual( Stem("sweetens"), "sweeten");});
test("sweeter -> sweeter", function() {deepEqual( Stem("sweeter"), "sweeter");});
test("sweetest -> sweetest", function() {deepEqual( Stem("sweetest"), "sweetest");});
test("sweetheart -> sweetheart", function() {deepEqual( Stem("sweetheart"), "sweetheart");});
test("sweeting -> sweet", function() {deepEqual( Stem("sweeting"), "sweet");});
test("sweetly -> sweetli", function() {deepEqual( Stem("sweetly"), "sweetli");});
test("sweetmeats -> sweetmeat", function() {deepEqual( Stem("sweetmeats"), "sweetmeat");});
test("sweetness -> sweet", function() {deepEqual( Stem("sweetness"), "sweet");});
test("sweets -> sweet", function() {deepEqual( Stem("sweets"), "sweet");});
test("sweevy -> sweevi", function() {deepEqual( Stem("sweevy"), "sweevi");});
test("swell -> swell", function() {deepEqual( Stem("swell"), "swell");});
test("swelled -> swell", function() {deepEqual( Stem("swelled"), "swell");});
test("swelling -> swell", function() {deepEqual( Stem("swelling"), "swell");});
test("swellings -> swell", function() {deepEqual( Stem("swellings"), "swell");});
test("swells -> swell", function() {deepEqual( Stem("swells"), "swell");});
test("swelter -> swelter", function() {deepEqual( Stem("swelter"), "swelter");});
test("sweno -> sweno", function() {deepEqual( Stem("sweno"), "sweno");});
test("swept -> swept", function() {deepEqual( Stem("swept"), "swept");});
test("swerve -> swerv", function() {deepEqual( Stem("swerve"), "swerv");});
test("swerver -> swerver", function() {deepEqual( Stem("swerver"), "swerver");});
test("swerving -> swerv", function() {deepEqual( Stem("swerving"), "swerv");});
test("swift -> swift", function() {deepEqual( Stem("swift"), "swift");});
test("swifter -> swifter", function() {deepEqual( Stem("swifter"), "swifter");});
test("swiftest -> swiftest", function() {deepEqual( Stem("swiftest"), "swiftest");});
test("swiftly -> swiftli", function() {deepEqual( Stem("swiftly"), "swiftli");});
test("swiftness -> swift", function() {deepEqual( Stem("swiftness"), "swift");});
test("swill -> swill", function() {deepEqual( Stem("swill"), "swill");});
test("swills -> swill", function() {deepEqual( Stem("swills"), "swill");});
test("swim -> swim", function() {deepEqual( Stem("swim"), "swim");});
test("swimmer -> swimmer", function() {deepEqual( Stem("swimmer"), "swimmer");});
test("swimmers -> swimmer", function() {deepEqual( Stem("swimmers"), "swimmer");});
test("swimming -> swim", function() {deepEqual( Stem("swimming"), "swim");});
test("swims -> swim", function() {deepEqual( Stem("swims"), "swim");});
test("swindle -> swindl", function() {deepEqual( Stem("swindle"), "swindl");});
test("swindled -> swindl", function() {deepEqual( Stem("swindled"), "swindl");});
test("swindler -> swindler", function() {deepEqual( Stem("swindler"), "swindler");});
test("swindlers -> swindler", function() {deepEqual( Stem("swindlers"), "swindler");});
test("swindling -> swindl", function() {deepEqual( Stem("swindling"), "swindl");});
test("swine -> swine", function() {deepEqual( Stem("swine"), "swine");});
test("swineherds -> swineherd", function() {deepEqual( Stem("swineherds"), "swineherd");});
test("swing -> swing", function() {deepEqual( Stem("swing"), "swing");});
test("swinge -> swing", function() {deepEqual( Stem("swinge"), "swing");});
test("swinging -> swing", function() {deepEqual( Stem("swinging"), "swing");});
test("swinish -> swinish", function() {deepEqual( Stem("swinish"), "swinish");});
test("swinstead -> swinstead", function() {deepEqual( Stem("swinstead"), "swinstead");});
test("swishtail -> swishtail", function() {deepEqual( Stem("swishtail"), "swishtail");});
test("switches -> switch", function() {deepEqual( Stem("switches"), "switch");});
test("swits -> swit", function() {deepEqual( Stem("swits"), "swit");});
test("switzerland -> switzerland", function() {deepEqual( Stem("switzerland"), "switzerland");});
test("switzers -> switzer", function() {deepEqual( Stem("switzers"), "switzer");});
test("swol -> swol", function() {deepEqual( Stem("swol"), "swol");});
test("swoll -> swoll", function() {deepEqual( Stem("swoll"), "swoll");});
test("swollen -> swollen", function() {deepEqual( Stem("swollen"), "swollen");});
test("swoln -> swoln", function() {deepEqual( Stem("swoln"), "swoln");});
test("swoon -> swoon", function() {deepEqual( Stem("swoon"), "swoon");});
test("swooned -> swoon", function() {deepEqual( Stem("swooned"), "swoon");});
test("swooning -> swoon", function() {deepEqual( Stem("swooning"), "swoon");});
test("swoons -> swoon", function() {deepEqual( Stem("swoons"), "swoon");});
test("swoop -> swoop", function() {deepEqual( Stem("swoop"), "swoop");});
test("swoopstake -> swoopstak", function() {deepEqual( Stem("swoopstake"), "swoopstak");});
test("swor -> swor", function() {deepEqual( Stem("swor"), "swor");});
test("sword -> sword", function() {deepEqual( Stem("sword"), "sword");});
test("sworder -> sworder", function() {deepEqual( Stem("sworder"), "sworder");});
test("swords -> sword", function() {deepEqual( Stem("swords"), "sword");});
test("swore -> swore", function() {deepEqual( Stem("swore"), "swore");});
test("sworn -> sworn", function() {deepEqual( Stem("sworn"), "sworn");});
test("swounded -> swound", function() {deepEqual( Stem("swounded"), "swound");});
test("swounds -> swound", function() {deepEqual( Stem("swounds"), "swound");});
test("swum -> swum", function() {deepEqual( Stem("swum"), "swum");});
test("swung -> swung", function() {deepEqual( Stem("swung"), "swung");});
test("sy -> sy", function() {deepEqual( Stem("sy"), "sy");});
test("sycamore -> sycamor", function() {deepEqual( Stem("sycamore"), "sycamor");});
test("sycophant -> sycoph", function() {deepEqual( Stem("sycophant"), "sycoph");});
test("sycophantic -> sycophant", function() {deepEqual( Stem("sycophantic"), "sycophant");});
test("sycorax -> sycorax", function() {deepEqual( Stem("sycorax"), "sycorax");});
test("sylla -> sylla", function() {deepEqual( Stem("sylla"), "sylla");});
test("syllable -> syllabl", function() {deepEqual( Stem("syllable"), "syllabl");});
test("syllables -> syllabl", function() {deepEqual( Stem("syllables"), "syllabl");});
test("syllogism -> syllog", function() {deepEqual( Stem("syllogism"), "syllog");});
test("symbols -> symbol", function() {deepEqual( Stem("symbols"), "symbol");});
test("symmetrical -> symmetr", function() {deepEqual( Stem("symmetrical"), "symmetr");});
test("symmetry -> symmetri", function() {deepEqual( Stem("symmetry"), "symmetri");});
test("sympathetic -> sympathet", function() {deepEqual( Stem("sympathetic"), "sympathet");});
test("sympathies -> sympathi", function() {deepEqual( Stem("sympathies"), "sympathi");});
test("sympathise -> sympathis", function() {deepEqual( Stem("sympathise"), "sympathis");});
test("sympathised -> sympathis", function() {deepEqual( Stem("sympathised"), "sympathis");});
test("sympathiz -> sympathiz", function() {deepEqual( Stem("sympathiz"), "sympathiz");});
test("sympathize -> sympath", function() {deepEqual( Stem("sympathize"), "sympath");});
test("sympathized -> sympath", function() {deepEqual( Stem("sympathized"), "sympath");});
test("sympathizing -> sympath", function() {deepEqual( Stem("sympathizing"), "sympath");});
test("sympathy -> sympathi", function() {deepEqual( Stem("sympathy"), "sympathi");});
test("symphony -> symphoni", function() {deepEqual( Stem("symphony"), "symphoni");});
test("symptom -> symptom", function() {deepEqual( Stem("symptom"), "symptom");});
test("symptoms -> symptom", function() {deepEqual( Stem("symptoms"), "symptom");});
test("synagogue -> synagogu", function() {deepEqual( Stem("synagogue"), "synagogu");});
test("synod -> synod", function() {deepEqual( Stem("synod"), "synod");});
test("synods -> synod", function() {deepEqual( Stem("synods"), "synod");});
test("syntax -> syntax", function() {deepEqual( Stem("syntax"), "syntax");});
test("syracuse -> syracus", function() {deepEqual( Stem("syracuse"), "syracus");});
test("syracusian -> syracusian", function() {deepEqual( Stem("syracusian"), "syracusian");});
test("syracusians -> syracusian", function() {deepEqual( Stem("syracusians"), "syracusian");});
test("syria -> syria", function() {deepEqual( Stem("syria"), "syria");});
test("syriac -> syriac", function() {deepEqual( Stem("syriac"), "syriac");});
test("syrups -> syrup", function() {deepEqual( Stem("syrups"), "syrup");});
test("system -> system", function() {deepEqual( Stem("system"), "system");});
test("t -> t", function() {deepEqual( Stem("t"), "t");});
test("ta -> ta", function() {deepEqual( Stem("ta"), "ta");});
test("taber -> taber", function() {deepEqual( Stem("taber"), "taber");});
test("table -> tabl", function() {deepEqual( Stem("table"), "tabl");});
test("tableau -> tableau", function() {deepEqual( Stem("tableau"), "tableau");});
test("tabled -> tabl", function() {deepEqual( Stem("tabled"), "tabl");});
test("tables -> tabl", function() {deepEqual( Stem("tables"), "tabl");});
test("tablet -> tablet", function() {deepEqual( Stem("tablet"), "tablet");});
test("tably -> tabli", function() {deepEqual( Stem("tably"), "tabli");});
test("tabor -> tabor", function() {deepEqual( Stem("tabor"), "tabor");});
test("taborer -> tabor", function() {deepEqual( Stem("taborer"), "tabor");});
test("tabors -> tabor", function() {deepEqual( Stem("tabors"), "tabor");});
test("tabourines -> tabourin", function() {deepEqual( Stem("tabourines"), "tabourin");});
test("tacit -> tacit", function() {deepEqual( Stem("tacit"), "tacit");});
test("taciturnity -> taciturn", function() {deepEqual( Stem("taciturnity"), "taciturn");});
test("tack -> tack", function() {deepEqual( Stem("tack"), "tack");});
test("tackle -> tackl", function() {deepEqual( Stem("tackle"), "tackl");});
test("tackled -> tackl", function() {deepEqual( Stem("tackled"), "tackl");});
test("tackles -> tackl", function() {deepEqual( Stem("tackles"), "tackl");});
test("tackling -> tackl", function() {deepEqual( Stem("tackling"), "tackl");});
test("tacklings -> tackl", function() {deepEqual( Stem("tacklings"), "tackl");});
test("tactician -> tactician", function() {deepEqual( Stem("tactician"), "tactician");});
test("tacticians -> tactician", function() {deepEqual( Stem("tacticians"), "tactician");});
test("taddle -> taddl", function() {deepEqual( Stem("taddle"), "taddl");});
test("tadmor -> tadmor", function() {deepEqual( Stem("tadmor"), "tadmor");});
test("tadpole -> tadpol", function() {deepEqual( Stem("tadpole"), "tadpol");});
test("taffeta -> taffeta", function() {deepEqual( Stem("taffeta"), "taffeta");});
test("taffety -> taffeti", function() {deepEqual( Stem("taffety"), "taffeti");});
test("tag -> tag", function() {deepEqual( Stem("tag"), "tag");});
test("tage -> tage", function() {deepEqual( Stem("tage"), "tage");});
test("taglioni -> taglioni", function() {deepEqual( Stem("taglioni"), "taglioni");});
test("tagrag -> tagrag", function() {deepEqual( Stem("tagrag"), "tagrag");});
test("tags -> tag", function() {deepEqual( Stem("tags"), "tag");});
test("tah -> tah", function() {deepEqual( Stem("tah"), "tah");});
test("tail -> tail", function() {deepEqual( Stem("tail"), "tail");});
test("tailed -> tail", function() {deepEqual( Stem("tailed"), "tail");});
test("tailor -> tailor", function() {deepEqual( Stem("tailor"), "tailor");});
test("tailors -> tailor", function() {deepEqual( Stem("tailors"), "tailor");});
test("tails -> tail", function() {deepEqual( Stem("tails"), "tail");});
test("taint -> taint", function() {deepEqual( Stem("taint"), "taint");});
test("tainted -> taint", function() {deepEqual( Stem("tainted"), "taint");});
test("tainting -> taint", function() {deepEqual( Stem("tainting"), "taint");});
test("taints -> taint", function() {deepEqual( Stem("taints"), "taint");});
test("tainture -> taintur", function() {deepEqual( Stem("tainture"), "taintur");});
test("tajy -> taji", function() {deepEqual( Stem("tajy"), "taji");});
test("tak -> tak", function() {deepEqual( Stem("tak"), "tak");});
test("take -> take", function() {deepEqual( Stem("take"), "take");});
test("taken -> taken", function() {deepEqual( Stem("taken"), "taken");});
test("taker -> taker", function() {deepEqual( Stem("taker"), "taker");});
test("takes -> take", function() {deepEqual( Stem("takes"), "take");});
test("takest -> takest", function() {deepEqual( Stem("takest"), "takest");});
test("taketh -> taketh", function() {deepEqual( Stem("taketh"), "taketh");});
test("taking -> take", function() {deepEqual( Stem("taking"), "take");});
test("tal -> tal", function() {deepEqual( Stem("tal"), "tal");});
test("talavera -> talavera", function() {deepEqual( Stem("talavera"), "talavera");});
test("talbot -> talbot", function() {deepEqual( Stem("talbot"), "talbot");});
test("talbotites -> talbotit", function() {deepEqual( Stem("talbotites"), "talbotit");});
test("talbots -> talbot", function() {deepEqual( Stem("talbots"), "talbot");});
test("talboys -> talboi", function() {deepEqual( Stem("talboys"), "talboi");});
test("tale -> tale", function() {deepEqual( Stem("tale"), "tale");});
test("talebearing -> talebear", function() {deepEqual( Stem("talebearing"), "talebear");});
test("talent -> talent", function() {deepEqual( Stem("talent"), "talent");});
test("talents -> talent", function() {deepEqual( Stem("talents"), "talent");});
test("taleporter -> taleport", function() {deepEqual( Stem("taleporter"), "taleport");});
test("tales -> tale", function() {deepEqual( Stem("tales"), "tale");});
test("talk -> talk", function() {deepEqual( Stem("talk"), "talk");});
test("talkative -> talk", function() {deepEqual( Stem("talkative"), "talk");});
test("talked -> talk", function() {deepEqual( Stem("talked"), "talk");});
test("talker -> talker", function() {deepEqual( Stem("talker"), "talker");});
test("talkers -> talker", function() {deepEqual( Stem("talkers"), "talker");});
test("talkest -> talkest", function() {deepEqual( Stem("talkest"), "talkest");});
test("talking -> talk", function() {deepEqual( Stem("talking"), "talk");});
test("talks -> talk", function() {deepEqual( Stem("talks"), "talk");});
test("tall -> tall", function() {deepEqual( Stem("tall"), "tall");});
test("taller -> taller", function() {deepEqual( Stem("taller"), "taller");});
test("tallest -> tallest", function() {deepEqual( Stem("tallest"), "tallest");});
test("talleyrand -> talleyrand", function() {deepEqual( Stem("talleyrand"), "talleyrand");});
test("tallies -> talli", function() {deepEqual( Stem("tallies"), "talli");});
test("tallow -> tallow", function() {deepEqual( Stem("tallow"), "tallow");});
test("tally -> talli", function() {deepEqual( Stem("tally"), "talli");});
test("talonrouge -> talonroug", function() {deepEqual( Stem("talonrouge"), "talonroug");});
test("talons -> talon", function() {deepEqual( Stem("talons"), "talon");});
test("tam -> tam", function() {deepEqual( Stem("tam"), "tam");});
test("tamarinds -> tamarind", function() {deepEqual( Stem("tamarinds"), "tamarind");});
test("tambourines -> tambourin", function() {deepEqual( Stem("tambourines"), "tambourin");});
test("tame -> tame", function() {deepEqual( Stem("tame"), "tame");});
test("tamed -> tame", function() {deepEqual( Stem("tamed"), "tame");});
test("tamely -> tame", function() {deepEqual( Stem("tamely"), "tame");});
test("tameness -> tame", function() {deepEqual( Stem("tameness"), "tame");});
test("tamer -> tamer", function() {deepEqual( Stem("tamer"), "tamer");});
test("tames -> tame", function() {deepEqual( Stem("tames"), "tame");});
test("taming -> tame", function() {deepEqual( Stem("taming"), "tame");});
test("tamora -> tamora", function() {deepEqual( Stem("tamora"), "tamora");});
test("tamworth -> tamworth", function() {deepEqual( Stem("tamworth"), "tamworth");});
test("tan -> tan", function() {deepEqual( Stem("tan"), "tan");});
test("tandyman -> tandyman", function() {deepEqual( Stem("tandyman"), "tandyman");});
test("tang -> tang", function() {deepEqual( Stem("tang"), "tang");});
test("tangle -> tangl", function() {deepEqual( Stem("tangle"), "tangl");});
test("tangled -> tangl", function() {deepEqual( Stem("tangled"), "tangl");});
test("tank -> tank", function() {deepEqual( Stem("tank"), "tank");});
test("tankard -> tankard", function() {deepEqual( Stem("tankard"), "tankard");});
test("tanlings -> tanl", function() {deepEqual( Stem("tanlings"), "tanl");});
test("tann -> tann", function() {deepEqual( Stem("tann"), "tann");});
test("tanned -> tan", function() {deepEqual( Stem("tanned"), "tan");});
test("tanner -> tanner", function() {deepEqual( Stem("tanner"), "tanner");});
test("tanquam -> tanquam", function() {deepEqual( Stem("tanquam"), "tanquam");});
test("tanta -> tanta", function() {deepEqual( Stem("tanta"), "tanta");});
test("tantaene -> tantaen", function() {deepEqual( Stem("tantaene"), "tantaen");});
test("tantalizing -> tantal", function() {deepEqual( Stem("tantalizing"), "tantal");});
test("tante -> tant", function() {deepEqual( Stem("tante"), "tant");});
test("tap -> tap", function() {deepEqual( Stem("tap"), "tap");});
test("tape -> tape", function() {deepEqual( Stem("tape"), "tape");});
test("taper -> taper", function() {deepEqual( Stem("taper"), "taper");});
test("tapers -> taper", function() {deepEqual( Stem("tapers"), "taper");});
test("tapes -> tape", function() {deepEqual( Stem("tapes"), "tape");});
test("tapestries -> tapestri", function() {deepEqual( Stem("tapestries"), "tapestri");});
test("tapestry -> tapestri", function() {deepEqual( Stem("tapestry"), "tapestri");});
test("tapeworm -> tapeworm", function() {deepEqual( Stem("tapeworm"), "tapeworm");});
test("taphouse -> taphous", function() {deepEqual( Stem("taphouse"), "taphous");});
test("tapioca -> tapioca", function() {deepEqual( Stem("tapioca"), "tapioca");});
test("tapp -> tapp", function() {deepEqual( Stem("tapp"), "tapp");});
test("tapped -> tap", function() {deepEqual( Stem("tapped"), "tap");});
test("tapping -> tap", function() {deepEqual( Stem("tapping"), "tap");});
test("tapster -> tapster", function() {deepEqual( Stem("tapster"), "tapster");});
test("tapsters -> tapster", function() {deepEqual( Stem("tapsters"), "tapster");});
test("tar -> tar", function() {deepEqual( Stem("tar"), "tar");});
test("tarboosh -> tarboosh", function() {deepEqual( Stem("tarboosh"), "tarboosh");});
test("tardied -> tardi", function() {deepEqual( Stem("tardied"), "tardi");});
test("tardily -> tardili", function() {deepEqual( Stem("tardily"), "tardili");});
test("tardiness -> tardi", function() {deepEqual( Stem("tardiness"), "tardi");});
test("tardy -> tardi", function() {deepEqual( Stem("tardy"), "tardi");});
test("tarentum -> tarentum", function() {deepEqual( Stem("tarentum"), "tarentum");});
test("targe -> targ", function() {deepEqual( Stem("targe"), "targ");});
test("targes -> targ", function() {deepEqual( Stem("targes"), "targ");});
test("target -> target", function() {deepEqual( Stem("target"), "target");});
test("targets -> target", function() {deepEqual( Stem("targets"), "target");});
test("tarnish -> tarnish", function() {deepEqual( Stem("tarnish"), "tarnish");});
test("tarpeian -> tarpeian", function() {deepEqual( Stem("tarpeian"), "tarpeian");});
test("tarquin -> tarquin", function() {deepEqual( Stem("tarquin"), "tarquin");});
test("tarquins -> tarquin", function() {deepEqual( Stem("tarquins"), "tarquin");});
test("tarr -> tarr", function() {deepEqual( Stem("tarr"), "tarr");});
test("tarre -> tarr", function() {deepEqual( Stem("tarre"), "tarr");});
test("tarriance -> tarrianc", function() {deepEqual( Stem("tarriance"), "tarrianc");});
test("tarried -> tarri", function() {deepEqual( Stem("tarried"), "tarri");});
test("tarries -> tarri", function() {deepEqual( Stem("tarries"), "tarri");});
test("tarry -> tarri", function() {deepEqual( Stem("tarry"), "tarri");});
test("tarrying -> tarri", function() {deepEqual( Stem("tarrying"), "tarri");});
test("tars -> tar", function() {deepEqual( Stem("tars"), "tar");});
test("tart -> tart", function() {deepEqual( Stem("tart"), "tart");});
test("tartan -> tartan", function() {deepEqual( Stem("tartan"), "tartan");});
test("tartans -> tartan", function() {deepEqual( Stem("tartans"), "tartan");});
test("tartar -> tartar", function() {deepEqual( Stem("tartar"), "tartar");});
test("tartars -> tartar", function() {deepEqual( Stem("tartars"), "tartar");});
test("tartines -> tartin", function() {deepEqual( Stem("tartines"), "tartin");});
test("tartly -> tartli", function() {deepEqual( Stem("tartly"), "tartli");});
test("tartness -> tart", function() {deepEqual( Stem("tartness"), "tart");});
test("tarts -> tart", function() {deepEqual( Stem("tarts"), "tart");});
test("task -> task", function() {deepEqual( Stem("task"), "task");});
test("tasker -> tasker", function() {deepEqual( Stem("tasker"), "tasker");});
test("tasking -> task", function() {deepEqual( Stem("tasking"), "task");});
test("tasks -> task", function() {deepEqual( Stem("tasks"), "task");});
test("tassel -> tassel", function() {deepEqual( Stem("tassel"), "tassel");});
test("tassels -> tassel", function() {deepEqual( Stem("tassels"), "tassel");});
test("taste -> tast", function() {deepEqual( Stem("taste"), "tast");});
test("tasted -> tast", function() {deepEqual( Stem("tasted"), "tast");});
test("tastes -> tast", function() {deepEqual( Stem("tastes"), "tast");});
test("tasting -> tast", function() {deepEqual( Stem("tasting"), "tast");});
test("tatt -> tatt", function() {deepEqual( Stem("tatt"), "tatt");});
test("tatter -> tatter", function() {deepEqual( Stem("tatter"), "tatter");});
test("tattered -> tatter", function() {deepEqual( Stem("tattered"), "tatter");});
test("tatters -> tatter", function() {deepEqual( Stem("tatters"), "tatter");});
test("tatties -> tatti", function() {deepEqual( Stem("tatties"), "tatti");});
test("tattle -> tattl", function() {deepEqual( Stem("tattle"), "tattl");});
test("tattled -> tattl", function() {deepEqual( Stem("tattled"), "tattl");});
test("tattling -> tattl", function() {deepEqual( Stem("tattling"), "tattl");});
test("tattlings -> tattl", function() {deepEqual( Stem("tattlings"), "tattl");});
test("tattoo -> tattoo", function() {deepEqual( Stem("tattoo"), "tattoo");});
test("tattooed -> tattoo", function() {deepEqual( Stem("tattooed"), "tattoo");});
test("taught -> taught", function() {deepEqual( Stem("taught"), "taught");});
test("taunt -> taunt", function() {deepEqual( Stem("taunt"), "taunt");});
test("taunted -> taunt", function() {deepEqual( Stem("taunted"), "taunt");});
test("taunting -> taunt", function() {deepEqual( Stem("taunting"), "taunt");});
test("tauntingly -> tauntingli", function() {deepEqual( Stem("tauntingly"), "tauntingli");});
test("taunts -> taunt", function() {deepEqual( Stem("taunts"), "taunt");});
test("taurus -> tauru", function() {deepEqual( Stem("taurus"), "tauru");});
test("tavern -> tavern", function() {deepEqual( Stem("tavern"), "tavern");});
test("taverns -> tavern", function() {deepEqual( Stem("taverns"), "tavern");});
test("tavish -> tavish", function() {deepEqual( Stem("tavish"), "tavish");});
test("tavy -> tavi", function() {deepEqual( Stem("tavy"), "tavi");});
test("tawdry -> tawdri", function() {deepEqual( Stem("tawdry"), "tawdri");});
test("tawny -> tawni", function() {deepEqual( Stem("tawny"), "tawni");});
test("tax -> tax", function() {deepEqual( Stem("tax"), "tax");});
test("taxation -> taxat", function() {deepEqual( Stem("taxation"), "taxat");});
test("taxations -> taxat", function() {deepEqual( Stem("taxations"), "taxat");});
test("taxed -> tax", function() {deepEqual( Stem("taxed"), "tax");});
test("taxes -> tax", function() {deepEqual( Stem("taxes"), "tax");});
test("taxing -> tax", function() {deepEqual( Stem("taxing"), "tax");});
test("tay -> tai", function() {deepEqual( Stem("tay"), "tai");});
test("taykettles -> taykettl", function() {deepEqual( Stem("taykettles"), "taykettl");});
test("tc -> tc", function() {deepEqual( Stem("tc"), "tc");});
test("te -> te", function() {deepEqual( Stem("te"), "te");});
test("tea -> tea", function() {deepEqual( Stem("tea"), "tea");});
test("teach -> teach", function() {deepEqual( Stem("teach"), "teach");});
test("teacher -> teacher", function() {deepEqual( Stem("teacher"), "teacher");});
test("teachers -> teacher", function() {deepEqual( Stem("teachers"), "teacher");});
test("teaches -> teach", function() {deepEqual( Stem("teaches"), "teach");});
test("teachest -> teachest", function() {deepEqual( Stem("teachest"), "teachest");});
test("teacheth -> teacheth", function() {deepEqual( Stem("teacheth"), "teacheth");});
test("teaching -> teach", function() {deepEqual( Stem("teaching"), "teach");});
test("team -> team", function() {deepEqual( Stem("team"), "team");});
test("teapot -> teapot", function() {deepEqual( Stem("teapot"), "teapot");});
test("teapots -> teapot", function() {deepEqual( Stem("teapots"), "teapot");});
test("tear -> tear", function() {deepEqual( Stem("tear"), "tear");});
test("tearful -> tear", function() {deepEqual( Stem("tearful"), "tear");});
test("tearing -> tear", function() {deepEqual( Stem("tearing"), "tear");});
test("tears -> tear", function() {deepEqual( Stem("tears"), "tear");});
test("tearsheet -> tearsheet", function() {deepEqual( Stem("tearsheet"), "tearsheet");});
test("teaspoonful -> teaspoon", function() {deepEqual( Stem("teaspoonful"), "teaspoon");});
test("teat -> teat", function() {deepEqual( Stem("teat"), "teat");});
test("ted -> ted", function() {deepEqual( Stem("ted"), "ted");});
test("tedious -> tediou", function() {deepEqual( Stem("tedious"), "tediou");});
test("tediously -> tedious", function() {deepEqual( Stem("tediously"), "tedious");});
test("tediousness -> tedious", function() {deepEqual( Stem("tediousness"), "tedious");});
test("tedium -> tedium", function() {deepEqual( Stem("tedium"), "tedium");});
test("teem -> teem", function() {deepEqual( Stem("teem"), "teem");});
test("teeming -> teem", function() {deepEqual( Stem("teeming"), "teem");});
test("teems -> teem", function() {deepEqual( Stem("teems"), "teem");});
test("teen -> teen", function() {deepEqual( Stem("teen"), "teen");});
test("teens -> teen", function() {deepEqual( Stem("teens"), "teen");});
test("teeth -> teeth", function() {deepEqual( Stem("teeth"), "teeth");});
test("teething -> teeth", function() {deepEqual( Stem("teething"), "teeth");});
test("teipsum -> teipsum", function() {deepEqual( Stem("teipsum"), "teipsum");});
test("telamon -> telamon", function() {deepEqual( Stem("telamon"), "telamon");});
test("telamonius -> telamoniu", function() {deepEqual( Stem("telamonius"), "telamoniu");});
test("telegraph -> telegraph", function() {deepEqual( Stem("telegraph"), "telegraph");});
test("telegraphed -> telegraph", function() {deepEqual( Stem("telegraphed"), "telegraph");});
test("telegraphic -> telegraph", function() {deepEqual( Stem("telegraphic"), "telegraph");});
test("telemaque -> telemaqu", function() {deepEqual( Stem("telemaque"), "telemaqu");});
test("telescope -> telescop", function() {deepEqual( Stem("telescope"), "telescop");});
test("tell -> tell", function() {deepEqual( Stem("tell"), "tell");});
test("teller -> teller", function() {deepEqual( Stem("teller"), "teller");});
test("telling -> tell", function() {deepEqual( Stem("telling"), "tell");});
test("tells -> tell", function() {deepEqual( Stem("tells"), "tell");});
test("tellus -> tellu", function() {deepEqual( Stem("tellus"), "tellu");});
test("temp -> temp", function() {deepEqual( Stem("temp"), "temp");});
test("temper -> temper", function() {deepEqual( Stem("temper"), "temper");});
test("temperality -> temper", function() {deepEqual( Stem("temperality"), "temper");});
test("temperament -> tempera", function() {deepEqual( Stem("temperament"), "tempera");});
test("temperance -> temper", function() {deepEqual( Stem("temperance"), "temper");});
test("temperate -> temper", function() {deepEqual( Stem("temperate"), "temper");});
test("temperately -> temper", function() {deepEqual( Stem("temperately"), "temper");});
test("tempered -> temper", function() {deepEqual( Stem("tempered"), "temper");});
test("tempers -> temper", function() {deepEqual( Stem("tempers"), "temper");});
test("tempest -> tempest", function() {deepEqual( Stem("tempest"), "tempest");});
test("tempests -> tempest", function() {deepEqual( Stem("tempests"), "tempest");});
test("tempestuous -> tempestu", function() {deepEqual( Stem("tempestuous"), "tempestu");});
test("temple -> templ", function() {deepEqual( Stem("temple"), "templ");});
test("temples -> templ", function() {deepEqual( Stem("temples"), "templ");});
test("temporal -> tempor", function() {deepEqual( Stem("temporal"), "tempor");});
test("temporarily -> temporarili", function() {deepEqual( Stem("temporarily"), "temporarili");});
test("temporary -> temporari", function() {deepEqual( Stem("temporary"), "temporari");});
test("temporise -> temporis", function() {deepEqual( Stem("temporise"), "temporis");});
test("temporised -> temporis", function() {deepEqual( Stem("temporised"), "temporis");});
test("temporiz -> temporiz", function() {deepEqual( Stem("temporiz"), "temporiz");});
test("temporize -> tempor", function() {deepEqual( Stem("temporize"), "tempor");});
test("temporizer -> tempor", function() {deepEqual( Stem("temporizer"), "tempor");});
test("temps -> temp", function() {deepEqual( Stem("temps"), "temp");});
test("tempt -> tempt", function() {deepEqual( Stem("tempt"), "tempt");});
test("temptation -> temptat", function() {deepEqual( Stem("temptation"), "temptat");});
test("temptations -> temptat", function() {deepEqual( Stem("temptations"), "temptat");});
test("tempted -> tempt", function() {deepEqual( Stem("tempted"), "tempt");});
test("tempter -> tempter", function() {deepEqual( Stem("tempter"), "tempter");});
test("tempters -> tempter", function() {deepEqual( Stem("tempters"), "tempter");});
test("tempteth -> tempteth", function() {deepEqual( Stem("tempteth"), "tempteth");});
test("tempting -> tempt", function() {deepEqual( Stem("tempting"), "tempt");});
test("tempts -> tempt", function() {deepEqual( Stem("tempts"), "tempt");});
test("ten -> ten", function() {deepEqual( Stem("ten"), "ten");});
test("tenable -> tenabl", function() {deepEqual( Stem("tenable"), "tenabl");});
test("tenant -> tenant", function() {deepEqual( Stem("tenant"), "tenant");});
test("tenanted -> tenant", function() {deepEqual( Stem("tenanted"), "tenant");});
test("tenantius -> tenantiu", function() {deepEqual( Stem("tenantius"), "tenantiu");});
test("tenantless -> tenantless", function() {deepEqual( Stem("tenantless"), "tenantless");});
test("tenantry -> tenantri", function() {deepEqual( Stem("tenantry"), "tenantri");});
test("tenants -> tenant", function() {deepEqual( Stem("tenants"), "tenant");});
test("tench -> tench", function() {deepEqual( Stem("tench"), "tench");});
test("tend -> tend", function() {deepEqual( Stem("tend"), "tend");});
test("tendance -> tendanc", function() {deepEqual( Stem("tendance"), "tendanc");});
test("tended -> tend", function() {deepEqual( Stem("tended"), "tend");});
test("tendencies -> tendenc", function() {deepEqual( Stem("tendencies"), "tendenc");});
test("tendency -> tendenc", function() {deepEqual( Stem("tendency"), "tendenc");});
test("tender -> tender", function() {deepEqual( Stem("tender"), "tender");});
test("tendered -> tender", function() {deepEqual( Stem("tendered"), "tender");});
test("tenderest -> tenderest", function() {deepEqual( Stem("tenderest"), "tenderest");});
test("tenderly -> tenderli", function() {deepEqual( Stem("tenderly"), "tenderli");});
test("tenderness -> tender", function() {deepEqual( Stem("tenderness"), "tender");});
test("tenders -> tender", function() {deepEqual( Stem("tenders"), "tender");});
test("tending -> tend", function() {deepEqual( Stem("tending"), "tend");});
test("tendre -> tendr", function() {deepEqual( Stem("tendre"), "tendr");});
test("tends -> tend", function() {deepEqual( Stem("tends"), "tend");});
test("tenedos -> tenedo", function() {deepEqual( Stem("tenedos"), "tenedo");});
test("tenement -> tenement", function() {deepEqual( Stem("tenement"), "tenement");});
test("tenements -> tenement", function() {deepEqual( Stem("tenements"), "tenement");});
test("tenez -> tenez", function() {deepEqual( Stem("tenez"), "tenez");});
test("tenfold -> tenfold", function() {deepEqual( Stem("tenfold"), "tenfold");});
test("tennis -> tenni", function() {deepEqual( Stem("tennis"), "tenni");});
test("tenor -> tenor", function() {deepEqual( Stem("tenor"), "tenor");});
test("tenour -> tenour", function() {deepEqual( Stem("tenour"), "tenour");});
test("tenours -> tenour", function() {deepEqual( Stem("tenours"), "tenour");});
test("tens -> ten", function() {deepEqual( Stem("tens"), "ten");});
test("tent -> tent", function() {deepEqual( Stem("tent"), "tent");});
test("tented -> tent", function() {deepEqual( Stem("tented"), "tent");});
test("tenth -> tenth", function() {deepEqual( Stem("tenth"), "tenth");});
test("tenths -> tenth", function() {deepEqual( Stem("tenths"), "tenth");});
test("tents -> tent", function() {deepEqual( Stem("tents"), "tent");});
test("tenure -> tenur", function() {deepEqual( Stem("tenure"), "tenur");});
test("tenures -> tenur", function() {deepEqual( Stem("tenures"), "tenur");});
test("teoplitz -> teoplitz", function() {deepEqual( Stem("teoplitz"), "teoplitz");});
test("tercel -> tercel", function() {deepEqual( Stem("tercel"), "tercel");});
test("tereus -> tereu", function() {deepEqual( Stem("tereus"), "tereu");});
test("tergiversation -> tergivers", function() {deepEqual( Stem("tergiversation"), "tergivers");});
test("term -> term", function() {deepEqual( Stem("term"), "term");});
test("termagant -> termag", function() {deepEqual( Stem("termagant"), "termag");});
test("termed -> term", function() {deepEqual( Stem("termed"), "term");});
test("termination -> termin", function() {deepEqual( Stem("termination"), "termin");});
test("terminations -> termin", function() {deepEqual( Stem("terminations"), "termin");});
test("termless -> termless", function() {deepEqual( Stem("termless"), "termless");});
test("terms -> term", function() {deepEqual( Stem("terms"), "term");});
test("terra -> terra", function() {deepEqual( Stem("terra"), "terra");});
test("terrace -> terrac", function() {deepEqual( Stem("terrace"), "terrac");});
test("terraces -> terrac", function() {deepEqual( Stem("terraces"), "terrac");});
test("terram -> terram", function() {deepEqual( Stem("terram"), "terram");});
test("terras -> terra", function() {deepEqual( Stem("terras"), "terra");});
test("terre -> terr", function() {deepEqual( Stem("terre"), "terr");});
test("terrene -> terren", function() {deepEqual( Stem("terrene"), "terren");});
test("terrestrial -> terrestri", function() {deepEqual( Stem("terrestrial"), "terrestri");});
test("terrible -> terribl", function() {deepEqual( Stem("terrible"), "terribl");});
test("terribly -> terribli", function() {deepEqual( Stem("terribly"), "terribli");});
test("terrier -> terrier", function() {deepEqual( Stem("terrier"), "terrier");});
test("terrific -> terrif", function() {deepEqual( Stem("terrific"), "terrif");});
test("terrified -> terrifi", function() {deepEqual( Stem("terrified"), "terrifi");});
test("territories -> territori", function() {deepEqual( Stem("territories"), "territori");});
test("territory -> territori", function() {deepEqual( Stem("territory"), "territori");});
test("terror -> terror", function() {deepEqual( Stem("terror"), "terror");});
test("terrors -> terror", function() {deepEqual( Stem("terrors"), "terror");});
test("tertian -> tertian", function() {deepEqual( Stem("tertian"), "tertian");});
test("tertio -> tertio", function() {deepEqual( Stem("tertio"), "tertio");});
test("test -> test", function() {deepEqual( Stem("test"), "test");});
test("testament -> testament", function() {deepEqual( Stem("testament"), "testament");});
test("testator -> testat", function() {deepEqual( Stem("testator"), "testat");});
test("tested -> test", function() {deepEqual( Stem("tested"), "test");});
test("tester -> tester", function() {deepEqual( Stem("tester"), "tester");});
test("testern -> testern", function() {deepEqual( Stem("testern"), "testern");});
test("testify -> testifi", function() {deepEqual( Stem("testify"), "testifi");});
test("testimonials -> testimoni", function() {deepEqual( Stem("testimonials"), "testimoni");});
test("testimonied -> testimoni", function() {deepEqual( Stem("testimonied"), "testimoni");});
test("testimonies -> testimoni", function() {deepEqual( Stem("testimonies"), "testimoni");});
test("testimony -> testimoni", function() {deepEqual( Stem("testimony"), "testimoni");});
test("testiness -> testi", function() {deepEqual( Stem("testiness"), "testi");});
test("testril -> testril", function() {deepEqual( Stem("testril"), "testril");});
test("testy -> testi", function() {deepEqual( Stem("testy"), "testi");});
test("tetchy -> tetchi", function() {deepEqual( Stem("tetchy"), "tetchi");});
test("tete -> tete", function() {deepEqual( Stem("tete"), "tete");});
test("tether -> tether", function() {deepEqual( Stem("tether"), "tether");});
test("tetrameter -> tetramet", function() {deepEqual( Stem("tetrameter"), "tetramet");});
test("tetter -> tetter", function() {deepEqual( Stem("tetter"), "tetter");});
test("tevil -> tevil", function() {deepEqual( Stem("tevil"), "tevil");});
test("tewksbury -> tewksburi", function() {deepEqual( Stem("tewksbury"), "tewksburi");});
test("text -> text", function() {deepEqual( Stem("text"), "text");});
test("texture -> textur", function() {deepEqual( Stem("texture"), "textur");});
test("tgv -> tgv", function() {deepEqual( Stem("tgv"), "tgv");});
test("th -> th", function() {deepEqual( Stem("th"), "th");});
test("thackeray -> thackerai", function() {deepEqual( Stem("thackeray"), "thackerai");});
test("thaes -> thae", function() {deepEqual( Stem("thaes"), "thae");});
test("thames -> thame", function() {deepEqual( Stem("thames"), "thame");});
test("than -> than", function() {deepEqual( Stem("than"), "than");});
test("thane -> thane", function() {deepEqual( Stem("thane"), "thane");});
test("thanes -> thane", function() {deepEqual( Stem("thanes"), "thane");});
test("thank -> thank", function() {deepEqual( Stem("thank"), "thank");});
test("thanked -> thank", function() {deepEqual( Stem("thanked"), "thank");});
test("thankful -> thank", function() {deepEqual( Stem("thankful"), "thank");});
test("thankfully -> thankfulli", function() {deepEqual( Stem("thankfully"), "thankfulli");});
test("thankfulness -> thank", function() {deepEqual( Stem("thankfulness"), "thank");});
test("thanking -> thank", function() {deepEqual( Stem("thanking"), "thank");});
test("thankings -> thank", function() {deepEqual( Stem("thankings"), "thank");});
test("thankless -> thankless", function() {deepEqual( Stem("thankless"), "thankless");});
test("thanks -> thank", function() {deepEqual( Stem("thanks"), "thank");});
test("thanksgiving -> thanksgiv", function() {deepEqual( Stem("thanksgiving"), "thanksgiv");});
test("thasos -> thaso", function() {deepEqual( Stem("thasos"), "thaso");});
test("that -> that", function() {deepEqual( Stem("that"), "that");});
test("thatch -> thatch", function() {deepEqual( Stem("thatch"), "thatch");});
test("thavies -> thavi", function() {deepEqual( Stem("thavies"), "thavi");});
test("thaw -> thaw", function() {deepEqual( Stem("thaw"), "thaw");});
test("thawing -> thaw", function() {deepEqual( Stem("thawing"), "thaw");});
test("thaws -> thaw", function() {deepEqual( Stem("thaws"), "thaw");});
test("the -> the", function() {deepEqual( Stem("the"), "the");});
test("theatre -> theatr", function() {deepEqual( Stem("theatre"), "theatr");});
test("theatres -> theatr", function() {deepEqual( Stem("theatres"), "theatr");});
test("theatrical -> theatric", function() {deepEqual( Stem("theatrical"), "theatric");});
test("theban -> theban", function() {deepEqual( Stem("theban"), "theban");});
test("thebes -> thebe", function() {deepEqual( Stem("thebes"), "thebe");});
test("thee -> thee", function() {deepEqual( Stem("thee"), "thee");});
test("theft -> theft", function() {deepEqual( Stem("theft"), "theft");});
test("thefts -> theft", function() {deepEqual( Stem("thefts"), "theft");});
test("thein -> thein", function() {deepEqual( Stem("thein"), "thein");});
test("their -> their", function() {deepEqual( Stem("their"), "their");});
test("theirs -> their", function() {deepEqual( Stem("theirs"), "their");});
test("theise -> theis", function() {deepEqual( Stem("theise"), "theis");});
test("them -> them", function() {deepEqual( Stem("them"), "them");});
test("theme -> theme", function() {deepEqual( Stem("theme"), "theme");});
test("themes -> theme", function() {deepEqual( Stem("themes"), "theme");});
test("themselves -> themselv", function() {deepEqual( Stem("themselves"), "themselv");});
test("then -> then", function() {deepEqual( Stem("then"), "then");});
test("thence -> thenc", function() {deepEqual( Stem("thence"), "thenc");});
test("thenceforth -> thenceforth", function() {deepEqual( Stem("thenceforth"), "thenceforth");});
test("theologian -> theologian", function() {deepEqual( Stem("theologian"), "theologian");});
test("theological -> theolog", function() {deepEqual( Stem("theological"), "theolog");});
test("theologically -> theolog", function() {deepEqual( Stem("theologically"), "theolog");});
test("theologies -> theologi", function() {deepEqual( Stem("theologies"), "theologi");});
test("theology -> theologi", function() {deepEqual( Stem("theology"), "theologi");});
test("theoric -> theoric", function() {deepEqual( Stem("theoric"), "theoric");});
test("there -> there", function() {deepEqual( Stem("there"), "there");});
test("thereabout -> thereabout", function() {deepEqual( Stem("thereabout"), "thereabout");});
test("thereabouts -> thereabout", function() {deepEqual( Stem("thereabouts"), "thereabout");});
test("thereafter -> thereaft", function() {deepEqual( Stem("thereafter"), "thereaft");});
test("thereat -> thereat", function() {deepEqual( Stem("thereat"), "thereat");});
test("thereby -> therebi", function() {deepEqual( Stem("thereby"), "therebi");});
test("therefor -> therefor", function() {deepEqual( Stem("therefor"), "therefor");});
test("therefore -> therefor", function() {deepEqual( Stem("therefore"), "therefor");});
test("therefrom -> therefrom", function() {deepEqual( Stem("therefrom"), "therefrom");});
test("therein -> therein", function() {deepEqual( Stem("therein"), "therein");});
test("thereof -> thereof", function() {deepEqual( Stem("thereof"), "thereof");});
test("thereon -> thereon", function() {deepEqual( Stem("thereon"), "thereon");});
test("thereto -> thereto", function() {deepEqual( Stem("thereto"), "thereto");});
test("thereunto -> thereunto", function() {deepEqual( Stem("thereunto"), "thereunto");});
test("thereupon -> thereupon", function() {deepEqual( Stem("thereupon"), "thereupon");});
test("therewith -> therewith", function() {deepEqual( Stem("therewith"), "therewith");});
test("therewithal -> therewith", function() {deepEqual( Stem("therewithal"), "therewith");});
test("thersites -> thersit", function() {deepEqual( Stem("thersites"), "thersit");});
test("these -> these", function() {deepEqual( Stem("these"), "these");});
test("theseus -> theseu", function() {deepEqual( Stem("theseus"), "theseu");});
test("thessalian -> thessalian", function() {deepEqual( Stem("thessalian"), "thessalian");});
test("thessaly -> thessali", function() {deepEqual( Stem("thessaly"), "thessali");});
test("thetis -> theti", function() {deepEqual( Stem("thetis"), "theti");});
test("thews -> thew", function() {deepEqual( Stem("thews"), "thew");});
test("they -> thei", function() {deepEqual( Stem("they"), "thei");});
test("thick -> thick", function() {deepEqual( Stem("thick"), "thick");});
test("thicken -> thicken", function() {deepEqual( Stem("thicken"), "thicken");});
test("thickens -> thicken", function() {deepEqual( Stem("thickens"), "thicken");});
test("thicker -> thicker", function() {deepEqual( Stem("thicker"), "thicker");});
test("thickest -> thickest", function() {deepEqual( Stem("thickest"), "thickest");});
test("thicket -> thicket", function() {deepEqual( Stem("thicket"), "thicket");});
test("thickskin -> thickskin", function() {deepEqual( Stem("thickskin"), "thickskin");});
test("thief -> thief", function() {deepEqual( Stem("thief"), "thief");});
test("thievery -> thieveri", function() {deepEqual( Stem("thievery"), "thieveri");});
test("thieves -> thiev", function() {deepEqual( Stem("thieves"), "thiev");});
test("thievish -> thievish", function() {deepEqual( Stem("thievish"), "thievish");});
test("thigh -> thigh", function() {deepEqual( Stem("thigh"), "thigh");});
test("thighs -> thigh", function() {deepEqual( Stem("thighs"), "thigh");});
test("thimble -> thimbl", function() {deepEqual( Stem("thimble"), "thimbl");});
test("thimbleful -> thimbl", function() {deepEqual( Stem("thimbleful"), "thimbl");});
test("thimbles -> thimbl", function() {deepEqual( Stem("thimbles"), "thimbl");});
test("thin -> thin", function() {deepEqual( Stem("thin"), "thin");});
test("thine -> thine", function() {deepEqual( Stem("thine"), "thine");});
test("thing -> thing", function() {deepEqual( Stem("thing"), "thing");});
test("things -> thing", function() {deepEqual( Stem("things"), "thing");});
test("think -> think", function() {deepEqual( Stem("think"), "think");});
test("thinker -> thinker", function() {deepEqual( Stem("thinker"), "thinker");});
test("thinkest -> thinkest", function() {deepEqual( Stem("thinkest"), "thinkest");});
test("thinkin -> thinkin", function() {deepEqual( Stem("thinkin"), "thinkin");});
test("thinking -> think", function() {deepEqual( Stem("thinking"), "think");});
test("thinkings -> think", function() {deepEqual( Stem("thinkings"), "think");});
test("thinks -> think", function() {deepEqual( Stem("thinks"), "think");});
test("thinkst -> thinkst", function() {deepEqual( Stem("thinkst"), "thinkst");});
test("thinly -> thinli", function() {deepEqual( Stem("thinly"), "thinli");});
test("thinner -> thinner", function() {deepEqual( Stem("thinner"), "thinner");});
test("thinnest -> thinnest", function() {deepEqual( Stem("thinnest"), "thinnest");});
test("third -> third", function() {deepEqual( Stem("third"), "third");});
test("thirdly -> thirdli", function() {deepEqual( Stem("thirdly"), "thirdli");});
test("thirds -> third", function() {deepEqual( Stem("thirds"), "third");});
test("thirst -> thirst", function() {deepEqual( Stem("thirst"), "thirst");});
test("thirsting -> thirst", function() {deepEqual( Stem("thirsting"), "thirst");});
test("thirsts -> thirst", function() {deepEqual( Stem("thirsts"), "thirst");});
test("thirsty -> thirsti", function() {deepEqual( Stem("thirsty"), "thirsti");});
test("thirteen -> thirteen", function() {deepEqual( Stem("thirteen"), "thirteen");});
test("thirteenth -> thirteenth", function() {deepEqual( Stem("thirteenth"), "thirteenth");});
test("thirties -> thirti", function() {deepEqual( Stem("thirties"), "thirti");});
test("thirtieth -> thirtieth", function() {deepEqual( Stem("thirtieth"), "thirtieth");});
test("thirty -> thirti", function() {deepEqual( Stem("thirty"), "thirti");});
test("this -> thi", function() {deepEqual( Stem("this"), "thi");});
test("thisby -> thisbi", function() {deepEqual( Stem("thisby"), "thisbi");});
test("thisne -> thisn", function() {deepEqual( Stem("thisne"), "thisn");});
test("thistle -> thistl", function() {deepEqual( Stem("thistle"), "thistl");});
test("thistles -> thistl", function() {deepEqual( Stem("thistles"), "thistl");});
test("thistlewood -> thistlewood", function() {deepEqual( Stem("thistlewood"), "thistlewood");});
test("thither -> thither", function() {deepEqual( Stem("thither"), "thither");});
test("thitherward -> thitherward", function() {deepEqual( Stem("thitherward"), "thitherward");});
test("thmash -> thmash", function() {deepEqual( Stem("thmash"), "thmash");});
test("tho -> tho", function() {deepEqual( Stem("tho"), "tho");});
test("thoas -> thoa", function() {deepEqual( Stem("thoas"), "thoa");});
test("thomas -> thoma", function() {deepEqual( Stem("thomas"), "thoma");});
test("thompson -> thompson", function() {deepEqual( Stem("thompson"), "thompson");});
test("thomson -> thomson", function() {deepEqual( Stem("thomson"), "thomson");});
test("thong -> thong", function() {deepEqual( Stem("thong"), "thong");});
test("thongs -> thong", function() {deepEqual( Stem("thongs"), "thong");});
test("thorn -> thorn", function() {deepEqual( Stem("thorn"), "thorn");});
test("thorns -> thorn", function() {deepEqual( Stem("thorns"), "thorn");});
test("thorny -> thorni", function() {deepEqual( Stem("thorny"), "thorni");});
test("thorough -> thorough", function() {deepEqual( Stem("thorough"), "thorough");});
test("thoroughbred -> thoroughbr", function() {deepEqual( Stem("thoroughbred"), "thoroughbr");});
test("thoroughfare -> thoroughfar", function() {deepEqual( Stem("thoroughfare"), "thoroughfar");});
test("thoroughly -> thoroughli", function() {deepEqual( Stem("thoroughly"), "thoroughli");});
test("those -> those", function() {deepEqual( Stem("those"), "those");});
test("thou -> thou", function() {deepEqual( Stem("thou"), "thou");});
test("though -> though", function() {deepEqual( Stem("though"), "though");});
test("thought -> thought", function() {deepEqual( Stem("thought"), "thought");});
test("thoughtful -> thought", function() {deepEqual( Stem("thoughtful"), "thought");});
test("thoughts -> thought", function() {deepEqual( Stem("thoughts"), "thought");});
test("thousand -> thousand", function() {deepEqual( Stem("thousand"), "thousand");});
test("thousands -> thousand", function() {deepEqual( Stem("thousands"), "thousand");});
test("thracian -> thracian", function() {deepEqual( Stem("thracian"), "thracian");});
test("thraldom -> thraldom", function() {deepEqual( Stem("thraldom"), "thraldom");});
test("thrall -> thrall", function() {deepEqual( Stem("thrall"), "thrall");});
test("thralled -> thrall", function() {deepEqual( Stem("thralled"), "thrall");});
test("thralls -> thrall", function() {deepEqual( Stem("thralls"), "thrall");});
test("thrash -> thrash", function() {deepEqual( Stem("thrash"), "thrash");});
test("thrashed -> thrash", function() {deepEqual( Stem("thrashed"), "thrash");});
test("thrashing -> thrash", function() {deepEqual( Stem("thrashing"), "thrash");});
test("thrasonical -> thrason", function() {deepEqual( Stem("thrasonical"), "thrason");});
test("thread -> thread", function() {deepEqual( Stem("thread"), "thread");});
test("threadbare -> threadbar", function() {deepEqual( Stem("threadbare"), "threadbar");});
test("threaded -> thread", function() {deepEqual( Stem("threaded"), "thread");});
test("threaden -> threaden", function() {deepEqual( Stem("threaden"), "threaden");});
test("threading -> thread", function() {deepEqual( Stem("threading"), "thread");});
test("threadneedle -> threadneedl", function() {deepEqual( Stem("threadneedle"), "threadneedl");});
test("threat -> threat", function() {deepEqual( Stem("threat"), "threat");});
test("threaten -> threaten", function() {deepEqual( Stem("threaten"), "threaten");});
test("threatened -> threaten", function() {deepEqual( Stem("threatened"), "threaten");});
test("threatening -> threaten", function() {deepEqual( Stem("threatening"), "threaten");});
test("threatens -> threaten", function() {deepEqual( Stem("threatens"), "threaten");});
test("threatest -> threatest", function() {deepEqual( Stem("threatest"), "threatest");});
test("threats -> threat", function() {deepEqual( Stem("threats"), "threat");});
test("three -> three", function() {deepEqual( Stem("three"), "three");});
test("threefold -> threefold", function() {deepEqual( Stem("threefold"), "threefold");});
test("threepence -> threepenc", function() {deepEqual( Stem("threepence"), "threepenc");});
test("threepile -> threepil", function() {deepEqual( Stem("threepile"), "threepil");});
test("threes -> three", function() {deepEqual( Stem("threes"), "three");});
test("threescore -> threescor", function() {deepEqual( Stem("threescore"), "threescor");});
test("thresher -> thresher", function() {deepEqual( Stem("thresher"), "thresher");});
test("threshold -> threshold", function() {deepEqual( Stem("threshold"), "threshold");});
test("threw -> threw", function() {deepEqual( Stem("threw"), "threw");});
test("thrice -> thrice", function() {deepEqual( Stem("thrice"), "thrice");});
test("thrift -> thrift", function() {deepEqual( Stem("thrift"), "thrift");});
test("thriftless -> thriftless", function() {deepEqual( Stem("thriftless"), "thriftless");});
test("thrifts -> thrift", function() {deepEqual( Stem("thrifts"), "thrift");});
test("thrifty -> thrifti", function() {deepEqual( Stem("thrifty"), "thrifti");});
test("thrill -> thrill", function() {deepEqual( Stem("thrill"), "thrill");});
test("thrilled -> thrill", function() {deepEqual( Stem("thrilled"), "thrill");});
test("thrilling -> thrill", function() {deepEqual( Stem("thrilling"), "thrill");});
test("thrills -> thrill", function() {deepEqual( Stem("thrills"), "thrill");});
test("thrive -> thrive", function() {deepEqual( Stem("thrive"), "thrive");});
test("thrived -> thrive", function() {deepEqual( Stem("thrived"), "thrive");});
test("thrivers -> thriver", function() {deepEqual( Stem("thrivers"), "thriver");});
test("thrives -> thrive", function() {deepEqual( Stem("thrives"), "thrive");});
test("thriving -> thrive", function() {deepEqual( Stem("thriving"), "thrive");});
test("throat -> throat", function() {deepEqual( Stem("throat"), "throat");});
test("throats -> throat", function() {deepEqual( Stem("throats"), "throat");});
test("throb -> throb", function() {deepEqual( Stem("throb"), "throb");});
test("throbbing -> throb", function() {deepEqual( Stem("throbbing"), "throb");});
test("throbs -> throb", function() {deepEqual( Stem("throbs"), "throb");});
test("throca -> throca", function() {deepEqual( Stem("throca"), "throca");});
test("throe -> throe", function() {deepEqual( Stem("throe"), "throe");});
test("throes -> throe", function() {deepEqual( Stem("throes"), "throe");});
test("thromuldo -> thromuldo", function() {deepEqual( Stem("thromuldo"), "thromuldo");});
test("thron -> thron", function() {deepEqual( Stem("thron"), "thron");});
test("throne -> throne", function() {deepEqual( Stem("throne"), "throne");});
test("throned -> throne", function() {deepEqual( Stem("throned"), "throne");});
test("thrones -> throne", function() {deepEqual( Stem("thrones"), "throne");});
test("throng -> throng", function() {deepEqual( Stem("throng"), "throng");});
test("thronged -> throng", function() {deepEqual( Stem("thronged"), "throng");});
test("thronging -> throng", function() {deepEqual( Stem("thronging"), "throng");});
test("throngs -> throng", function() {deepEqual( Stem("throngs"), "throng");});
test("throstle -> throstl", function() {deepEqual( Stem("throstle"), "throstl");});
test("throttle -> throttl", function() {deepEqual( Stem("throttle"), "throttl");});
test("through -> through", function() {deepEqual( Stem("through"), "through");});
test("throughfare -> throughfar", function() {deepEqual( Stem("throughfare"), "throughfar");});
test("throughfares -> throughfar", function() {deepEqual( Stem("throughfares"), "throughfar");});
test("throughly -> throughli", function() {deepEqual( Stem("throughly"), "throughli");});
test("throughout -> throughout", function() {deepEqual( Stem("throughout"), "throughout");});
test("throw -> throw", function() {deepEqual( Stem("throw"), "throw");});
test("thrower -> thrower", function() {deepEqual( Stem("thrower"), "thrower");});
test("throwest -> throwest", function() {deepEqual( Stem("throwest"), "throwest");});
test("throwing -> throw", function() {deepEqual( Stem("throwing"), "throw");});
test("thrown -> thrown", function() {deepEqual( Stem("thrown"), "thrown");});
test("throws -> throw", function() {deepEqual( Stem("throws"), "throw");});
test("thrum -> thrum", function() {deepEqual( Stem("thrum"), "thrum");});
test("thrumm -> thrumm", function() {deepEqual( Stem("thrumm"), "thrumm");});
test("thrummed -> thrum", function() {deepEqual( Stem("thrummed"), "thrum");});
test("thrumming -> thrum", function() {deepEqual( Stem("thrumming"), "thrum");});
test("thrump -> thrump", function() {deepEqual( Stem("thrump"), "thrump");});
test("thrush -> thrush", function() {deepEqual( Stem("thrush"), "thrush");});
test("thrust -> thrust", function() {deepEqual( Stem("thrust"), "thrust");});
test("thrusteth -> thrusteth", function() {deepEqual( Stem("thrusteth"), "thrusteth");});
test("thrusting -> thrust", function() {deepEqual( Stem("thrusting"), "thrust");});
test("thrusts -> thrust", function() {deepEqual( Stem("thrusts"), "thrust");});
test("thumb -> thumb", function() {deepEqual( Stem("thumb"), "thumb");});
test("thumbs -> thumb", function() {deepEqual( Stem("thumbs"), "thumb");});
test("thump -> thump", function() {deepEqual( Stem("thump"), "thump");});
test("thumping -> thump", function() {deepEqual( Stem("thumping"), "thump");});
test("thumps -> thump", function() {deepEqual( Stem("thumps"), "thump");});
test("thund -> thund", function() {deepEqual( Stem("thund"), "thund");});
test("thunder -> thunder", function() {deepEqual( Stem("thunder"), "thunder");});
test("thunderbolt -> thunderbolt", function() {deepEqual( Stem("thunderbolt"), "thunderbolt");});
test("thunderbolts -> thunderbolt", function() {deepEqual( Stem("thunderbolts"), "thunderbolt");});
test("thundered -> thunder", function() {deepEqual( Stem("thundered"), "thunder");});
test("thunderer -> thunder", function() {deepEqual( Stem("thunderer"), "thunder");});
test("thundering -> thunder", function() {deepEqual( Stem("thundering"), "thunder");});
test("thunders -> thunder", function() {deepEqual( Stem("thunders"), "thunder");});
test("thunderstone -> thunderston", function() {deepEqual( Stem("thunderstone"), "thunderston");});
test("thunderstroke -> thunderstrok", function() {deepEqual( Stem("thunderstroke"), "thunderstrok");});
test("thurifer -> thurif", function() {deepEqual( Stem("thurifer"), "thurif");});
test("thurio -> thurio", function() {deepEqual( Stem("thurio"), "thurio");});
test("thursday -> thursdai", function() {deepEqual( Stem("thursday"), "thursdai");});
test("thursdays -> thursdai", function() {deepEqual( Stem("thursdays"), "thursdai");});
test("thurtell -> thurtel", function() {deepEqual( Stem("thurtell"), "thurtel");});
test("thus -> thu", function() {deepEqual( Stem("thus"), "thu");});
test("thwack -> thwack", function() {deepEqual( Stem("thwack"), "thwack");});
test("thwart -> thwart", function() {deepEqual( Stem("thwart"), "thwart");});
test("thwarted -> thwart", function() {deepEqual( Stem("thwarted"), "thwart");});
test("thwarting -> thwart", function() {deepEqual( Stem("thwarting"), "thwart");});
test("thwartings -> thwart", function() {deepEqual( Stem("thwartings"), "thwart");});
test("thy -> thy", function() {deepEqual( Stem("thy"), "thy");});
test("thyme -> thyme", function() {deepEqual( Stem("thyme"), "thyme");});
test("thymus -> thymu", function() {deepEqual( Stem("thymus"), "thymu");});
test("thyreus -> thyreu", function() {deepEqual( Stem("thyreus"), "thyreu");});
test("thyself -> thyself", function() {deepEqual( Stem("thyself"), "thyself");});
test("ti -> ti", function() {deepEqual( Stem("ti"), "ti");});
test("tib -> tib", function() {deepEqual( Stem("tib"), "tib");});
test("tiber -> tiber", function() {deepEqual( Stem("tiber"), "tiber");});
test("tiberio -> tiberio", function() {deepEqual( Stem("tiberio"), "tiberio");});
test("tibey -> tibei", function() {deepEqual( Stem("tibey"), "tibei");});
test("ticed -> tice", function() {deepEqual( Stem("ticed"), "tice");});
test("tick -> tick", function() {deepEqual( Stem("tick"), "tick");});
test("ticked -> tick", function() {deepEqual( Stem("ticked"), "tick");});
test("ticker -> ticker", function() {deepEqual( Stem("ticker"), "ticker");});
test("tickers -> ticker", function() {deepEqual( Stem("tickers"), "ticker");});
test("ticket -> ticket", function() {deepEqual( Stem("ticket"), "ticket");});
test("tickets -> ticket", function() {deepEqual( Stem("tickets"), "ticket");});
test("ticking -> tick", function() {deepEqual( Stem("ticking"), "tick");});
test("tickl -> tickl", function() {deepEqual( Stem("tickl"), "tickl");});
test("tickle -> tickl", function() {deepEqual( Stem("tickle"), "tickl");});
test("tickled -> tickl", function() {deepEqual( Stem("tickled"), "tickl");});
test("tickles -> tickl", function() {deepEqual( Stem("tickles"), "tickl");});
test("tickleus -> tickleu", function() {deepEqual( Stem("tickleus"), "tickleu");});
test("tickling -> tickl", function() {deepEqual( Stem("tickling"), "tickl");});
test("ticklish -> ticklish", function() {deepEqual( Stem("ticklish"), "ticklish");});
test("ticktock -> ticktock", function() {deepEqual( Stem("ticktock"), "ticktock");});
test("tiddle -> tiddl", function() {deepEqual( Stem("tiddle"), "tiddl");});
test("tide -> tide", function() {deepEqual( Stem("tide"), "tide");});
test("tides -> tide", function() {deepEqual( Stem("tides"), "tide");});
test("tidings -> tide", function() {deepEqual( Stem("tidings"), "tide");});
test("tidy -> tidi", function() {deepEqual( Stem("tidy"), "tidi");});
test("tie -> tie", function() {deepEqual( Stem("tie"), "tie");});
test("tied -> ti", function() {deepEqual( Stem("tied"), "ti");});
test("tier -> tier", function() {deepEqual( Stem("tier"), "tier");});
test("ties -> ti", function() {deepEqual( Stem("ties"), "ti");});
test("tiff -> tiff", function() {deepEqual( Stem("tiff"), "tiff");});
test("tiffin -> tiffin", function() {deepEqual( Stem("tiffin"), "tiffin");});
test("tiffins -> tiffin", function() {deepEqual( Stem("tiffins"), "tiffin");});
test("tiger -> tiger", function() {deepEqual( Stem("tiger"), "tiger");});
test("tigers -> tiger", function() {deepEqual( Stem("tigers"), "tiger");});
test("tight -> tight", function() {deepEqual( Stem("tight"), "tight");});
test("tightest -> tightest", function() {deepEqual( Stem("tightest"), "tightest");});
test("tightly -> tightli", function() {deepEqual( Stem("tightly"), "tightli");});
test("tights -> tight", function() {deepEqual( Stem("tights"), "tight");});
test("tighty -> tighti", function() {deepEqual( Stem("tighty"), "tighti");});
test("tike -> tike", function() {deepEqual( Stem("tike"), "tike");});
test("til -> til", function() {deepEqual( Stem("til"), "til");});
test("tilbury -> tilburi", function() {deepEqual( Stem("tilbury"), "tilburi");});
test("tile -> tile", function() {deepEqual( Stem("tile"), "tile");});
test("tiler -> tiler", function() {deepEqual( Stem("tiler"), "tiler");});
test("till -> till", function() {deepEqual( Stem("till"), "till");});
test("tillage -> tillag", function() {deepEqual( Stem("tillage"), "tillag");});
test("tilly -> tilli", function() {deepEqual( Stem("tilly"), "tilli");});
test("tilt -> tilt", function() {deepEqual( Stem("tilt"), "tilt");});
test("tilted -> tilt", function() {deepEqual( Stem("tilted"), "tilt");});
test("tilter -> tilter", function() {deepEqual( Stem("tilter"), "tilter");});
test("tilth -> tilth", function() {deepEqual( Stem("tilth"), "tilth");});
test("tilting -> tilt", function() {deepEqual( Stem("tilting"), "tilt");});
test("tilts -> tilt", function() {deepEqual( Stem("tilts"), "tilt");});
test("tiltyard -> tiltyard", function() {deepEqual( Stem("tiltyard"), "tiltyard");});
test("tim -> tim", function() {deepEqual( Stem("tim"), "tim");});
test("timandra -> timandra", function() {deepEqual( Stem("timandra"), "timandra");});
test("timber -> timber", function() {deepEqual( Stem("timber"), "timber");});
test("timbuctoo -> timbuctoo", function() {deepEqual( Stem("timbuctoo"), "timbuctoo");});
test("time -> time", function() {deepEqual( Stem("time"), "time");});
test("timeless -> timeless", function() {deepEqual( Stem("timeless"), "timeless");});
test("timelier -> timeli", function() {deepEqual( Stem("timelier"), "timeli");});
test("timely -> time", function() {deepEqual( Stem("timely"), "time");});
test("times -> time", function() {deepEqual( Stem("times"), "time");});
test("timid -> timid", function() {deepEqual( Stem("timid"), "timid");});
test("timidity -> timid", function() {deepEqual( Stem("timidity"), "timid");});
test("timidly -> timidli", function() {deepEqual( Stem("timidly"), "timidli");});
test("timon -> timon", function() {deepEqual( Stem("timon"), "timon");});
test("timor -> timor", function() {deepEqual( Stem("timor"), "timor");});
test("timorous -> timor", function() {deepEqual( Stem("timorous"), "timor");});
test("timorously -> timor", function() {deepEqual( Stem("timorously"), "timor");});
test("tin -> tin", function() {deepEqual( Stem("tin"), "tin");});
test("tinct -> tinct", function() {deepEqual( Stem("tinct"), "tinct");});
test("tincture -> tinctur", function() {deepEqual( Stem("tincture"), "tinctur");});
test("tinctures -> tinctur", function() {deepEqual( Stem("tinctures"), "tinctur");});
test("tinder -> tinder", function() {deepEqual( Stem("tinder"), "tinder");});
test("tingle -> tingl", function() {deepEqual( Stem("tingle"), "tingl");});
test("tingled -> tingl", function() {deepEqual( Stem("tingled"), "tingl");});
test("tingling -> tingl", function() {deepEqual( Stem("tingling"), "tingl");});
test("tink -> tink", function() {deepEqual( Stem("tink"), "tink");});
test("tinker -> tinker", function() {deepEqual( Stem("tinker"), "tinker");});
test("tinkers -> tinker", function() {deepEqual( Stem("tinkers"), "tinker");});
test("tinkling -> tinkl", function() {deepEqual( Stem("tinkling"), "tinkl");});
test("tinsel -> tinsel", function() {deepEqual( Stem("tinsel"), "tinsel");});
test("tinselled -> tinsel", function() {deepEqual( Stem("tinselled"), "tinsel");});
test("tinted -> tint", function() {deepEqual( Stem("tinted"), "tint");});
test("tinteniac -> tinteniac", function() {deepEqual( Stem("tinteniac"), "tinteniac");});
test("tiny -> tini", function() {deepEqual( Stem("tiny"), "tini");});
test("tip -> tip", function() {deepEqual( Stem("tip"), "tip");});
test("tipp -> tipp", function() {deepEqual( Stem("tipp"), "tipp");});
test("tipped -> tip", function() {deepEqual( Stem("tipped"), "tip");});
test("tippet -> tippet", function() {deepEqual( Stem("tippet"), "tippet");});
test("tippling -> tippl", function() {deepEqual( Stem("tippling"), "tippl");});
test("tips -> tip", function() {deepEqual( Stem("tips"), "tip");});
test("tipsify -> tipsifi", function() {deepEqual( Stem("tipsify"), "tipsifi");});
test("tipsy -> tipsi", function() {deepEqual( Stem("tipsy"), "tipsi");});
test("tiptoe -> tipto", function() {deepEqual( Stem("tiptoe"), "tipto");});
test("tiptoff -> tiptoff", function() {deepEqual( Stem("tiptoff"), "tiptoff");});
test("tir -> tir", function() {deepEqual( Stem("tir"), "tir");});
test("tire -> tire", function() {deepEqual( Stem("tire"), "tire");});
test("tired -> tire", function() {deepEqual( Stem("tired"), "tire");});
test("tires -> tire", function() {deepEqual( Stem("tires"), "tire");});
test("tirest -> tirest", function() {deepEqual( Stem("tirest"), "tirest");});
test("tiring -> tire", function() {deepEqual( Stem("tiring"), "tire");});
test("tirra -> tirra", function() {deepEqual( Stem("tirra"), "tirra");});
test("tirrits -> tirrit", function() {deepEqual( Stem("tirrits"), "tirrit");});
test("tis -> ti", function() {deepEqual( Stem("tis"), "ti");});
test("tish -> tish", function() {deepEqual( Stem("tish"), "tish");});
test("tisick -> tisick", function() {deepEqual( Stem("tisick"), "tisick");});
test("tissue -> tissu", function() {deepEqual( Stem("tissue"), "tissu");});
test("titan -> titan", function() {deepEqual( Stem("titan"), "titan");});
test("titania -> titania", function() {deepEqual( Stem("titania"), "titania");});
test("tithe -> tith", function() {deepEqual( Stem("tithe"), "tith");});
test("tithed -> tith", function() {deepEqual( Stem("tithed"), "tith");});
test("tithes -> tith", function() {deepEqual( Stem("tithes"), "tith");});
test("tithing -> tith", function() {deepEqual( Stem("tithing"), "tith");});
test("titinius -> titiniu", function() {deepEqual( Stem("titinius"), "titiniu");});
test("title -> titl", function() {deepEqual( Stem("title"), "titl");});
test("titled -> titl", function() {deepEqual( Stem("titled"), "titl");});
test("titleless -> titleless", function() {deepEqual( Stem("titleless"), "titleless");});
test("titles -> titl", function() {deepEqual( Stem("titles"), "titl");});
test("tittle -> tittl", function() {deepEqual( Stem("tittle"), "tittl");});
test("tittles -> tittl", function() {deepEqual( Stem("tittles"), "tittl");});
test("titular -> titular", function() {deepEqual( Stem("titular"), "titular");});
test("titularly -> titularli", function() {deepEqual( Stem("titularly"), "titularli");});
test("titus -> titu", function() {deepEqual( Stem("titus"), "titu");});
test("tn -> tn", function() {deepEqual( Stem("tn"), "tn");});
test("to -> to", function() {deepEqual( Stem("to"), "to");});
test("toad -> toad", function() {deepEqual( Stem("toad"), "toad");});
test("toadies -> toadi", function() {deepEqual( Stem("toadies"), "toadi");});
test("toads -> toad", function() {deepEqual( Stem("toads"), "toad");});
test("toadstool -> toadstool", function() {deepEqual( Stem("toadstool"), "toadstool");});
test("toady -> toadi", function() {deepEqual( Stem("toady"), "toadi");});
test("toast -> toast", function() {deepEqual( Stem("toast"), "toast");});
test("toasted -> toast", function() {deepEqual( Stem("toasted"), "toast");});
test("toaster -> toaster", function() {deepEqual( Stem("toaster"), "toaster");});
test("toasting -> toast", function() {deepEqual( Stem("toasting"), "toast");});
test("toasts -> toast", function() {deepEqual( Stem("toasts"), "toast");});
test("toaze -> toaz", function() {deepEqual( Stem("toaze"), "toaz");});
test("tobacco -> tobacco", function() {deepEqual( Stem("tobacco"), "tobacco");});
test("toby -> tobi", function() {deepEqual( Stem("toby"), "tobi");});
test("tock -> tock", function() {deepEqual( Stem("tock"), "tock");});
test("tod -> tod", function() {deepEqual( Stem("tod"), "tod");});
test("today -> todai", function() {deepEqual( Stem("today"), "todai");});
test("todd -> todd", function() {deepEqual( Stem("todd"), "todd");});
test("todds -> todd", function() {deepEqual( Stem("todds"), "todd");});
test("toddy -> toddi", function() {deepEqual( Stem("toddy"), "toddi");});
test("todpole -> todpol", function() {deepEqual( Stem("todpole"), "todpol");});
test("tods -> tod", function() {deepEqual( Stem("tods"), "tod");});
test("toe -> toe", function() {deepEqual( Stem("toe"), "toe");});
test("toes -> toe", function() {deepEqual( Stem("toes"), "toe");});
test("toffee -> toffe", function() {deepEqual( Stem("toffee"), "toffe");});
test("toffy -> toffi", function() {deepEqual( Stem("toffy"), "toffi");});
test("tofore -> tofor", function() {deepEqual( Stem("tofore"), "tofor");});
test("toge -> toge", function() {deepEqual( Stem("toge"), "toge");});
test("toged -> toge", function() {deepEqual( Stem("toged"), "toge");});
test("together -> togeth", function() {deepEqual( Stem("together"), "togeth");});
test("toil -> toil", function() {deepEqual( Stem("toil"), "toil");});
test("toiled -> toil", function() {deepEqual( Stem("toiled"), "toil");});
test("toilet -> toilet", function() {deepEqual( Stem("toilet"), "toilet");});
test("toilette -> toilett", function() {deepEqual( Stem("toilette"), "toilett");});
test("toilettes -> toilett", function() {deepEqual( Stem("toilettes"), "toilett");});
test("toiling -> toil", function() {deepEqual( Stem("toiling"), "toil");});
test("toils -> toil", function() {deepEqual( Stem("toils"), "toil");});
test("toilsome -> toilsom", function() {deepEqual( Stem("toilsome"), "toilsom");});
test("token -> token", function() {deepEqual( Stem("token"), "token");});
test("tokens -> token", function() {deepEqual( Stem("tokens"), "token");});
test("told -> told", function() {deepEqual( Stem("told"), "told");});
test("toledo -> toledo", function() {deepEqual( Stem("toledo"), "toledo");});
test("tolerable -> toler", function() {deepEqual( Stem("tolerable"), "toler");});
test("tolerably -> toler", function() {deepEqual( Stem("tolerably"), "toler");});
test("toll -> toll", function() {deepEqual( Stem("toll"), "toll");});
test("tolled -> toll", function() {deepEqual( Stem("tolled"), "toll");});
test("tolling -> toll", function() {deepEqual( Stem("tolling"), "toll");});
test("tolly -> tolli", function() {deepEqual( Stem("tolly"), "tolli");});
test("tom -> tom", function() {deepEqual( Stem("tom"), "tom");});
test("tomb -> tomb", function() {deepEqual( Stem("tomb"), "tomb");});
test("tombe -> tomb", function() {deepEqual( Stem("tombe"), "tomb");});
test("tombed -> tomb", function() {deepEqual( Stem("tombed"), "tomb");});
test("tombless -> tombless", function() {deepEqual( Stem("tombless"), "tombless");});
test("tomboys -> tomboi", function() {deepEqual( Stem("tomboys"), "tomboi");});
test("tombs -> tomb", function() {deepEqual( Stem("tombs"), "tomb");});
test("tombstone -> tombston", function() {deepEqual( Stem("tombstone"), "tombston");});
test("tomeavesian -> tomeavesian", function() {deepEqual( Stem("tomeavesian"), "tomeavesian");});
test("tomkins -> tomkin", function() {deepEqual( Stem("tomkins"), "tomkin");});
test("tommy -> tommi", function() {deepEqual( Stem("tommy"), "tommi");});
test("tomorrow -> tomorrow", function() {deepEqual( Stem("tomorrow"), "tomorrow");});
test("tomyris -> tomyri", function() {deepEqual( Stem("tomyris"), "tomyri");});
test("ton -> ton", function() {deepEqual( Stem("ton"), "ton");});
test("tone -> tone", function() {deepEqual( Stem("tone"), "tone");});
test("toned -> tone", function() {deepEqual( Stem("toned"), "tone");});
test("tones -> tone", function() {deepEqual( Stem("tones"), "tone");});
test("tongs -> tong", function() {deepEqual( Stem("tongs"), "tong");});
test("tongu -> tongu", function() {deepEqual( Stem("tongu"), "tongu");});
test("tongue -> tongu", function() {deepEqual( Stem("tongue"), "tongu");});
test("tongued -> tongu", function() {deepEqual( Stem("tongued"), "tongu");});
test("tongueless -> tongueless", function() {deepEqual( Stem("tongueless"), "tongueless");});
test("tongues -> tongu", function() {deepEqual( Stem("tongues"), "tongu");});
test("tonight -> tonight", function() {deepEqual( Stem("tonight"), "tonight");});
test("too -> too", function() {deepEqual( Stem("too"), "too");});
test("tooce -> tooc", function() {deepEqual( Stem("tooce"), "tooc");});
test("took -> took", function() {deepEqual( Stem("took"), "took");});
test("tool -> tool", function() {deepEqual( Stem("tool"), "tool");});
test("tools -> tool", function() {deepEqual( Stem("tools"), "tool");});
test("tooth -> tooth", function() {deepEqual( Stem("tooth"), "tooth");});
test("toothache -> toothach", function() {deepEqual( Stem("toothache"), "toothach");});
test("toothless -> toothless", function() {deepEqual( Stem("toothless"), "toothless");});
test("toothpick -> toothpick", function() {deepEqual( Stem("toothpick"), "toothpick");});
test("toothpicker -> toothpick", function() {deepEqual( Stem("toothpicker"), "toothpick");});
test("tooting -> toot", function() {deepEqual( Stem("tooting"), "toot");});
test("top -> top", function() {deepEqual( Stem("top"), "top");});
test("topas -> topa", function() {deepEqual( Stem("topas"), "topa");});
test("topful -> top", function() {deepEqual( Stem("topful"), "top");});
test("topgallant -> topgal", function() {deepEqual( Stem("topgallant"), "topgal");});
test("topic -> topic", function() {deepEqual( Stem("topic"), "topic");});
test("topics -> topic", function() {deepEqual( Stem("topics"), "topic");});
test("topless -> topless", function() {deepEqual( Stem("topless"), "topless");});
test("toplitz -> toplitz", function() {deepEqual( Stem("toplitz"), "toplitz");});
test("topmast -> topmast", function() {deepEqual( Stem("topmast"), "topmast");});
test("topp -> topp", function() {deepEqual( Stem("topp"), "topp");});
test("topping -> top", function() {deepEqual( Stem("topping"), "top");});
test("topple -> toppl", function() {deepEqual( Stem("topple"), "toppl");});
test("topples -> toppl", function() {deepEqual( Stem("topples"), "toppl");});
test("tops -> top", function() {deepEqual( Stem("tops"), "top");});
test("topsail -> topsail", function() {deepEqual( Stem("topsail"), "topsail");});
test("topsy -> topsi", function() {deepEqual( Stem("topsy"), "topsi");});
test("toque -> toqu", function() {deepEqual( Stem("toque"), "toqu");});
test("torch -> torch", function() {deepEqual( Stem("torch"), "torch");});
test("torchbearer -> torchbear", function() {deepEqual( Stem("torchbearer"), "torchbear");});
test("torchbearers -> torchbear", function() {deepEqual( Stem("torchbearers"), "torchbear");});
test("torcher -> torcher", function() {deepEqual( Stem("torcher"), "torcher");});
test("torches -> torch", function() {deepEqual( Stem("torches"), "torch");});
test("torchlight -> torchlight", function() {deepEqual( Stem("torchlight"), "torchlight");});
test("tore -> tore", function() {deepEqual( Stem("tore"), "tore");});
test("torment -> torment", function() {deepEqual( Stem("torment"), "torment");});
test("tormenta -> tormenta", function() {deepEqual( Stem("tormenta"), "tormenta");});
test("tormente -> torment", function() {deepEqual( Stem("tormente"), "torment");});
test("tormented -> torment", function() {deepEqual( Stem("tormented"), "torment");});
test("tormenting -> torment", function() {deepEqual( Stem("tormenting"), "torment");});
test("tormentors -> tormentor", function() {deepEqual( Stem("tormentors"), "tormentor");});
test("torments -> torment", function() {deepEqual( Stem("torments"), "torment");});
test("torn -> torn", function() {deepEqual( Stem("torn"), "torn");});
test("torpid -> torpid", function() {deepEqual( Stem("torpid"), "torpid");});
test("torrent -> torrent", function() {deepEqual( Stem("torrent"), "torrent");});
test("tortive -> tortiv", function() {deepEqual( Stem("tortive"), "tortiv");});
test("tortoise -> tortois", function() {deepEqual( Stem("tortoise"), "tortois");});
test("tortur -> tortur", function() {deepEqual( Stem("tortur"), "tortur");});
test("torture -> tortur", function() {deepEqual( Stem("torture"), "tortur");});
test("tortured -> tortur", function() {deepEqual( Stem("tortured"), "tortur");});
test("torturer -> tortur", function() {deepEqual( Stem("torturer"), "tortur");});
test("torturers -> tortur", function() {deepEqual( Stem("torturers"), "tortur");});
test("tortures -> tortur", function() {deepEqual( Stem("tortures"), "tortur");});
test("torturest -> torturest", function() {deepEqual( Stem("torturest"), "torturest");});
test("torturing -> tortur", function() {deepEqual( Stem("torturing"), "tortur");});
test("tory -> tori", function() {deepEqual( Stem("tory"), "tori");});
test("toryne -> toryn", function() {deepEqual( Stem("toryne"), "toryn");});
test("toss -> toss", function() {deepEqual( Stem("toss"), "toss");});
test("tossed -> toss", function() {deepEqual( Stem("tossed"), "toss");});
test("tosseth -> tosseth", function() {deepEqual( Stem("tosseth"), "tosseth");});
test("tossing -> toss", function() {deepEqual( Stem("tossing"), "toss");});
test("tosti -> tosti", function() {deepEqual( Stem("tosti"), "tosti");});
test("tot -> tot", function() {deepEqual( Stem("tot"), "tot");});
test("total -> total", function() {deepEqual( Stem("total"), "total");});
test("totally -> total", function() {deepEqual( Stem("totally"), "total");});
test("tott -> tott", function() {deepEqual( Stem("tott"), "tott");});
test("tottered -> totter", function() {deepEqual( Stem("tottered"), "totter");});
test("tottering -> totter", function() {deepEqual( Stem("tottering"), "totter");});
test("totters -> totter", function() {deepEqual( Stem("totters"), "totter");});
test("tou -> tou", function() {deepEqual( Stem("tou"), "tou");});
test("touch -> touch", function() {deepEqual( Stem("touch"), "touch");});
test("touched -> touch", function() {deepEqual( Stem("touched"), "touch");});
test("touches -> touch", function() {deepEqual( Stem("touches"), "touch");});
test("toucheth -> toucheth", function() {deepEqual( Stem("toucheth"), "toucheth");});
test("touching -> touch", function() {deepEqual( Stem("touching"), "touch");});
test("touchstone -> touchston", function() {deepEqual( Stem("touchstone"), "touchston");});
test("tough -> tough", function() {deepEqual( Stem("tough"), "tough");});
test("tougher -> tougher", function() {deepEqual( Stem("tougher"), "tougher");});
test("toughness -> tough", function() {deepEqual( Stem("toughness"), "tough");});
test("toupee -> toupe", function() {deepEqual( Stem("toupee"), "toupe");});
test("tour -> tour", function() {deepEqual( Stem("tour"), "tour");});
test("touraine -> tourain", function() {deepEqual( Stem("touraine"), "tourain");});
test("tourists -> tourist", function() {deepEqual( Stem("tourists"), "tourist");});
test("tournament -> tournament", function() {deepEqual( Stem("tournament"), "tournament");});
test("tournaments -> tournament", function() {deepEqual( Stem("tournaments"), "tournament");});
test("tours -> tour", function() {deepEqual( Stem("tours"), "tour");});
test("tous -> tou", function() {deepEqual( Stem("tous"), "tou");});
test("tout -> tout", function() {deepEqual( Stem("tout"), "tout");});
test("toute -> tout", function() {deepEqual( Stem("toute"), "tout");});
test("touze -> touz", function() {deepEqual( Stem("touze"), "touz");});
test("tow -> tow", function() {deepEqual( Stem("tow"), "tow");});
test("toward -> toward", function() {deepEqual( Stem("toward"), "toward");});
test("towardly -> towardli", function() {deepEqual( Stem("towardly"), "towardli");});
test("towards -> toward", function() {deepEqual( Stem("towards"), "toward");});
test("tower -> tower", function() {deepEqual( Stem("tower"), "tower");});
test("towering -> tower", function() {deepEqual( Stem("towering"), "tower");});
test("towers -> tower", function() {deepEqual( Stem("towers"), "tower");});
test("town -> town", function() {deepEqual( Stem("town"), "town");});
test("towns -> town", function() {deepEqual( Stem("towns"), "town");});
test("township -> township", function() {deepEqual( Stem("township"), "township");});
test("townsman -> townsman", function() {deepEqual( Stem("townsman"), "townsman");});
test("townsmen -> townsmen", function() {deepEqual( Stem("townsmen"), "townsmen");});
test("towton -> towton", function() {deepEqual( Stem("towton"), "towton");});
test("towzer -> towzer", function() {deepEqual( Stem("towzer"), "towzer");});
test("toxophilite -> toxophilit", function() {deepEqual( Stem("toxophilite"), "toxophilit");});
test("toy -> toi", function() {deepEqual( Stem("toy"), "toi");});
test("toys -> toi", function() {deepEqual( Stem("toys"), "toi");});
test("tozer -> tozer", function() {deepEqual( Stem("tozer"), "tozer");});
test("trace -> trace", function() {deepEqual( Stem("trace"), "trace");});
test("traced -> trace", function() {deepEqual( Stem("traced"), "trace");});
test("traces -> trace", function() {deepEqual( Stem("traces"), "trace");});
test("track -> track", function() {deepEqual( Stem("track"), "track");});
test("tract -> tract", function() {deepEqual( Stem("tract"), "tract");});
test("tractable -> tractabl", function() {deepEqual( Stem("tractable"), "tractabl");});
test("tracts -> tract", function() {deepEqual( Stem("tracts"), "tract");});
test("trade -> trade", function() {deepEqual( Stem("trade"), "trade");});
test("traded -> trade", function() {deepEqual( Stem("traded"), "trade");});
test("traders -> trader", function() {deepEqual( Stem("traders"), "trader");});
test("trades -> trade", function() {deepEqual( Stem("trades"), "trade");});
test("tradesman -> tradesman", function() {deepEqual( Stem("tradesman"), "tradesman");});
test("tradesmen -> tradesmen", function() {deepEqual( Stem("tradesmen"), "tradesmen");});
test("trading -> trade", function() {deepEqual( Stem("trading"), "trade");});
test("tradition -> tradit", function() {deepEqual( Stem("tradition"), "tradit");});
test("traditional -> tradit", function() {deepEqual( Stem("traditional"), "tradit");});
test("traditionally -> tradition", function() {deepEqual( Stem("traditionally"), "tradition");});
test("traditions -> tradit", function() {deepEqual( Stem("traditions"), "tradit");});
test("traduc -> traduc", function() {deepEqual( Stem("traduc"), "traduc");});
test("traduced -> traduc", function() {deepEqual( Stem("traduced"), "traduc");});
test("traducement -> traduc", function() {deepEqual( Stem("traducement"), "traduc");});
test("trafalgar -> trafalgar", function() {deepEqual( Stem("trafalgar"), "trafalgar");});
test("traffic -> traffic", function() {deepEqual( Stem("traffic"), "traffic");});
test("traffickers -> traffick", function() {deepEqual( Stem("traffickers"), "traffick");});
test("traffics -> traffic", function() {deepEqual( Stem("traffics"), "traffic");});
test("tragedian -> tragedian", function() {deepEqual( Stem("tragedian"), "tragedian");});
test("tragedians -> tragedian", function() {deepEqual( Stem("tragedians"), "tragedian");});
test("tragedies -> tragedi", function() {deepEqual( Stem("tragedies"), "tragedi");});
test("tragedy -> tragedi", function() {deepEqual( Stem("tragedy"), "tragedi");});
test("tragic -> tragic", function() {deepEqual( Stem("tragic"), "tragic");});
test("tragical -> tragic", function() {deepEqual( Stem("tragical"), "tragic");});
test("trail -> trail", function() {deepEqual( Stem("trail"), "trail");});
test("trailing -> trail", function() {deepEqual( Stem("trailing"), "trail");});
test("train -> train", function() {deepEqual( Stem("train"), "train");});
test("trained -> train", function() {deepEqual( Stem("trained"), "train");});
test("training -> train", function() {deepEqual( Stem("training"), "train");});
test("trains -> train", function() {deepEqual( Stem("trains"), "train");});
test("trait -> trait", function() {deepEqual( Stem("trait"), "trait");});
test("traitor -> traitor", function() {deepEqual( Stem("traitor"), "traitor");});
test("traitorly -> traitorli", function() {deepEqual( Stem("traitorly"), "traitorli");});
test("traitorous -> traitor", function() {deepEqual( Stem("traitorous"), "traitor");});
test("traitorously -> traitor", function() {deepEqual( Stem("traitorously"), "traitor");});
test("traitors -> traitor", function() {deepEqual( Stem("traitors"), "traitor");});
test("traitress -> traitress", function() {deepEqual( Stem("traitress"), "traitress");});
test("traject -> traject", function() {deepEqual( Stem("traject"), "traject");});
test("trammel -> trammel", function() {deepEqual( Stem("trammel"), "trammel");});
test("trample -> trampl", function() {deepEqual( Stem("trample"), "trampl");});
test("trampled -> trampl", function() {deepEqual( Stem("trampled"), "trampl");});
test("trampling -> trampl", function() {deepEqual( Stem("trampling"), "trampl");});
test("tranc -> tranc", function() {deepEqual( Stem("tranc"), "tranc");});
test("trance -> tranc", function() {deepEqual( Stem("trance"), "tranc");});
test("tranio -> tranio", function() {deepEqual( Stem("tranio"), "tranio");});
test("tranquil -> tranquil", function() {deepEqual( Stem("tranquil"), "tranquil");});
test("tranquille -> tranquil", function() {deepEqual( Stem("tranquille"), "tranquil");});
test("tranquillity -> tranquil", function() {deepEqual( Stem("tranquillity"), "tranquil");});
test("transact -> transact", function() {deepEqual( Stem("transact"), "transact");});
test("transacted -> transact", function() {deepEqual( Stem("transacted"), "transact");});
test("transaction -> transact", function() {deepEqual( Stem("transaction"), "transact");});
test("transactions -> transact", function() {deepEqual( Stem("transactions"), "transact");});
test("transcendence -> transcend", function() {deepEqual( Stem("transcendence"), "transcend");});
test("transcends -> transcend", function() {deepEqual( Stem("transcends"), "transcend");});
test("transcribed -> transcrib", function() {deepEqual( Stem("transcribed"), "transcrib");});
test("transfer -> transfer", function() {deepEqual( Stem("transfer"), "transfer");});
test("transferred -> transfer", function() {deepEqual( Stem("transferred"), "transfer");});
test("transfigur -> transfigur", function() {deepEqual( Stem("transfigur"), "transfigur");});
test("transfix -> transfix", function() {deepEqual( Stem("transfix"), "transfix");});
test("transform -> transform", function() {deepEqual( Stem("transform"), "transform");});
test("transformation -> transform", function() {deepEqual( Stem("transformation"), "transform");});
test("transformations -> transform", function() {deepEqual( Stem("transformations"), "transform");});
test("transformed -> transform", function() {deepEqual( Stem("transformed"), "transform");});
test("transgress -> transgress", function() {deepEqual( Stem("transgress"), "transgress");});
test("transgresses -> transgress", function() {deepEqual( Stem("transgresses"), "transgress");});
test("transgressing -> transgress", function() {deepEqual( Stem("transgressing"), "transgress");});
test("transgression -> transgress", function() {deepEqual( Stem("transgression"), "transgress");});
test("transitory -> transitori", function() {deepEqual( Stem("transitory"), "transitori");});
test("translate -> translat", function() {deepEqual( Stem("translate"), "translat");});
test("translated -> translat", function() {deepEqual( Stem("translated"), "translat");});
test("translates -> translat", function() {deepEqual( Stem("translates"), "translat");});
test("translation -> translat", function() {deepEqual( Stem("translation"), "translat");});
test("transmigrates -> transmigr", function() {deepEqual( Stem("transmigrates"), "transmigr");});
test("transmutation -> transmut", function() {deepEqual( Stem("transmutation"), "transmut");});
test("transmuted -> transmut", function() {deepEqual( Stem("transmuted"), "transmut");});
test("transparency -> transpar", function() {deepEqual( Stem("transparency"), "transpar");});
test("transparent -> transpar", function() {deepEqual( Stem("transparent"), "transpar");});
test("transport -> transport", function() {deepEqual( Stem("transport"), "transport");});
test("transportance -> transport", function() {deepEqual( Stem("transportance"), "transport");});
test("transported -> transport", function() {deepEqual( Stem("transported"), "transport");});
test("transporting -> transport", function() {deepEqual( Stem("transporting"), "transport");});
test("transports -> transport", function() {deepEqual( Stem("transports"), "transport");});
test("transpose -> transpos", function() {deepEqual( Stem("transpose"), "transpos");});
test("transshape -> transshap", function() {deepEqual( Stem("transshape"), "transshap");});
test("trap -> trap", function() {deepEqual( Stem("trap"), "trap");});
test("trapp -> trapp", function() {deepEqual( Stem("trapp"), "trapp");});
test("trappings -> trap", function() {deepEqual( Stem("trappings"), "trap");});
test("traps -> trap", function() {deepEqual( Stem("traps"), "trap");});
test("trash -> trash", function() {deepEqual( Stem("trash"), "trash");});
test("travail -> travail", function() {deepEqual( Stem("travail"), "travail");});
test("travails -> travail", function() {deepEqual( Stem("travails"), "travail");});
test("travel -> travel", function() {deepEqual( Stem("travel"), "travel");});
test("traveler -> travel", function() {deepEqual( Stem("traveler"), "travel");});
test("traveling -> travel", function() {deepEqual( Stem("traveling"), "travel");});
test("travell -> travel", function() {deepEqual( Stem("travell"), "travel");});
test("travelled -> travel", function() {deepEqual( Stem("travelled"), "travel");});
test("traveller -> travel", function() {deepEqual( Stem("traveller"), "travel");});
test("travellers -> travel", function() {deepEqual( Stem("travellers"), "travel");});
test("travellest -> travellest", function() {deepEqual( Stem("travellest"), "travellest");});
test("travelling -> travel", function() {deepEqual( Stem("travelling"), "travel");});
test("travels -> travel", function() {deepEqual( Stem("travels"), "travel");});
test("travers -> traver", function() {deepEqual( Stem("travers"), "traver");});
test("traverse -> travers", function() {deepEqual( Stem("traverse"), "travers");});
test("traversee -> traverse", function() {deepEqual( Stem("traversee"), "traverse");});
test("tray -> trai", function() {deepEqual( Stem("tray"), "trai");});
test("trays -> trai", function() {deepEqual( Stem("trays"), "trai");});
test("treacherous -> treacher", function() {deepEqual( Stem("treacherous"), "treacher");});
test("treacherously -> treacher", function() {deepEqual( Stem("treacherously"), "treacher");});
test("treachers -> treacher", function() {deepEqual( Stem("treachers"), "treacher");});
test("treachery -> treacheri", function() {deepEqual( Stem("treachery"), "treacheri");});
test("tread -> tread", function() {deepEqual( Stem("tread"), "tread");});
test("treading -> tread", function() {deepEqual( Stem("treading"), "tread");});
test("treads -> tread", function() {deepEqual( Stem("treads"), "tread");});
test("treason -> treason", function() {deepEqual( Stem("treason"), "treason");});
test("treasonable -> treason", function() {deepEqual( Stem("treasonable"), "treason");});
test("treasonous -> treason", function() {deepEqual( Stem("treasonous"), "treason");});
test("treasons -> treason", function() {deepEqual( Stem("treasons"), "treason");});
test("treasure -> treasur", function() {deepEqual( Stem("treasure"), "treasur");});
test("treasured -> treasur", function() {deepEqual( Stem("treasured"), "treasur");});
test("treasurer -> treasur", function() {deepEqual( Stem("treasurer"), "treasur");});
test("treasures -> treasur", function() {deepEqual( Stem("treasures"), "treasur");});
test("treasuries -> treasuri", function() {deepEqual( Stem("treasuries"), "treasuri");});
test("treasury -> treasuri", function() {deepEqual( Stem("treasury"), "treasuri");});
test("treat -> treat", function() {deepEqual( Stem("treat"), "treat");});
test("treated -> treat", function() {deepEqual( Stem("treated"), "treat");});
test("treaties -> treati", function() {deepEqual( Stem("treaties"), "treati");});
test("treating -> treat", function() {deepEqual( Stem("treating"), "treat");});
test("treatise -> treatis", function() {deepEqual( Stem("treatise"), "treatis");});
test("treatment -> treatment", function() {deepEqual( Stem("treatment"), "treatment");});
test("treats -> treat", function() {deepEqual( Stem("treats"), "treat");});
test("treaty -> treati", function() {deepEqual( Stem("treaty"), "treati");});
test("treble -> trebl", function() {deepEqual( Stem("treble"), "trebl");});
test("trebled -> trebl", function() {deepEqual( Stem("trebled"), "trebl");});
test("trebles -> trebl", function() {deepEqual( Stem("trebles"), "trebl");});
test("trebonius -> treboniu", function() {deepEqual( Stem("trebonius"), "treboniu");});
test("tree -> tree", function() {deepEqual( Stem("tree"), "tree");});
test("trees -> tree", function() {deepEqual( Stem("trees"), "tree");});
test("trellis -> trelli", function() {deepEqual( Stem("trellis"), "trelli");});
test("tremble -> trembl", function() {deepEqual( Stem("tremble"), "trembl");});
test("trembled -> trembl", function() {deepEqual( Stem("trembled"), "trembl");});
test("trembles -> trembl", function() {deepEqual( Stem("trembles"), "trembl");});
test("tremblest -> tremblest", function() {deepEqual( Stem("tremblest"), "tremblest");});
test("trembling -> trembl", function() {deepEqual( Stem("trembling"), "trembl");});
test("tremblingly -> tremblingli", function() {deepEqual( Stem("tremblingly"), "tremblingli");});
test("tremendous -> tremend", function() {deepEqual( Stem("tremendous"), "tremend");});
test("tremens -> tremen", function() {deepEqual( Stem("tremens"), "tremen");});
test("tremor -> tremor", function() {deepEqual( Stem("tremor"), "tremor");});
test("trempling -> trempl", function() {deepEqual( Stem("trempling"), "trempl");});
test("tremulous -> tremul", function() {deepEqual( Stem("tremulous"), "tremul");});
test("tremulously -> tremul", function() {deepEqual( Stem("tremulously"), "tremul");});
test("trench -> trench", function() {deepEqual( Stem("trench"), "trench");});
test("trenchant -> trenchant", function() {deepEqual( Stem("trenchant"), "trenchant");});
test("trenched -> trench", function() {deepEqual( Stem("trenched"), "trench");});
test("trencher -> trencher", function() {deepEqual( Stem("trencher"), "trencher");});
test("trenchering -> trencher", function() {deepEqual( Stem("trenchering"), "trencher");});
test("trencherman -> trencherman", function() {deepEqual( Stem("trencherman"), "trencherman");});
test("trenchers -> trencher", function() {deepEqual( Stem("trenchers"), "trencher");});
test("trenches -> trench", function() {deepEqual( Stem("trenches"), "trench");});
test("trenching -> trench", function() {deepEqual( Stem("trenching"), "trench");});
test("trenck -> trenck", function() {deepEqual( Stem("trenck"), "trenck");});
test("trent -> trent", function() {deepEqual( Stem("trent"), "trent");});
test("trente -> trent", function() {deepEqual( Stem("trente"), "trent");});
test("tres -> tre", function() {deepEqual( Stem("tres"), "tre");});
test("trespass -> trespass", function() {deepEqual( Stem("trespass"), "trespass");});
test("trespasses -> trespass", function() {deepEqual( Stem("trespasses"), "trespass");});
test("tressel -> tressel", function() {deepEqual( Stem("tressel"), "tressel");});
test("tresses -> tress", function() {deepEqual( Stem("tresses"), "tress");});
test("treys -> trei", function() {deepEqual( Stem("treys"), "trei");});
test("trial -> trial", function() {deepEqual( Stem("trial"), "trial");});
test("trials -> trial", function() {deepEqual( Stem("trials"), "trial");});
test("triangular -> triangular", function() {deepEqual( Stem("triangular"), "triangular");});
test("trib -> trib", function() {deepEqual( Stem("trib"), "trib");});
test("tribe -> tribe", function() {deepEqual( Stem("tribe"), "tribe");});
test("tribes -> tribe", function() {deepEqual( Stem("tribes"), "tribe");});
test("tribulation -> tribul", function() {deepEqual( Stem("tribulation"), "tribul");});
test("tribunal -> tribun", function() {deepEqual( Stem("tribunal"), "tribun");});
test("tribune -> tribun", function() {deepEqual( Stem("tribune"), "tribun");});
test("tribunes -> tribun", function() {deepEqual( Stem("tribunes"), "tribun");});
test("tributaries -> tributari", function() {deepEqual( Stem("tributaries"), "tributari");});
test("tributary -> tributari", function() {deepEqual( Stem("tributary"), "tributari");});
test("tribute -> tribut", function() {deepEqual( Stem("tribute"), "tribut");});
test("tributes -> tribut", function() {deepEqual( Stem("tributes"), "tribut");});
test("trice -> trice", function() {deepEqual( Stem("trice"), "trice");});
test("trick -> trick", function() {deepEqual( Stem("trick"), "trick");});
test("tricking -> trick", function() {deepEqual( Stem("tricking"), "trick");});
test("trickled -> trickl", function() {deepEqual( Stem("trickled"), "trickl");});
test("trickling -> trickl", function() {deepEqual( Stem("trickling"), "trickl");});
test("tricks -> trick", function() {deepEqual( Stem("tricks"), "trick");});
test("tricksy -> tricksi", function() {deepEqual( Stem("tricksy"), "tricksi");});
test("tricoloured -> tricolour", function() {deepEqual( Stem("tricoloured"), "tricolour");});
test("trictrac -> trictrac", function() {deepEqual( Stem("trictrac"), "trictrac");});
test("trident -> trident", function() {deepEqual( Stem("trident"), "trident");});
test("tried -> tri", function() {deepEqual( Stem("tried"), "tri");});
test("trier -> trier", function() {deepEqual( Stem("trier"), "trier");});
test("tries -> tri", function() {deepEqual( Stem("tries"), "tri");});
test("trifle -> trifl", function() {deepEqual( Stem("trifle"), "trifl");});
test("trifled -> trifl", function() {deepEqual( Stem("trifled"), "trifl");});
test("trifler -> trifler", function() {deepEqual( Stem("trifler"), "trifler");});
test("trifles -> trifl", function() {deepEqual( Stem("trifles"), "trifl");});
test("trifling -> trifl", function() {deepEqual( Stem("trifling"), "trifl");});
test("trigon -> trigon", function() {deepEqual( Stem("trigon"), "trigon");});
test("trill -> trill", function() {deepEqual( Stem("trill"), "trill");});
test("trilling -> trill", function() {deepEqual( Stem("trilling"), "trill");});
test("trills -> trill", function() {deepEqual( Stem("trills"), "trill");});
test("trim -> trim", function() {deepEqual( Stem("trim"), "trim");});
test("trimeter -> trimet", function() {deepEqual( Stem("trimeter"), "trimet");});
test("trimly -> trimli", function() {deepEqual( Stem("trimly"), "trimli");});
test("trimm -> trimm", function() {deepEqual( Stem("trimm"), "trimm");});
test("trimmed -> trim", function() {deepEqual( Stem("trimmed"), "trim");});
test("trimming -> trim", function() {deepEqual( Stem("trimming"), "trim");});
test("trimmings -> trim", function() {deepEqual( Stem("trimmings"), "trim");});
test("trims -> trim", function() {deepEqual( Stem("trims"), "trim");});
test("trinculo -> trinculo", function() {deepEqual( Stem("trinculo"), "trinculo");});
test("trinculos -> trinculo", function() {deepEqual( Stem("trinculos"), "trinculo");});
test("trinity -> triniti", function() {deepEqual( Stem("trinity"), "triniti");});
test("trinket -> trinket", function() {deepEqual( Stem("trinket"), "trinket");});
test("trinkets -> trinket", function() {deepEqual( Stem("trinkets"), "trinket");});
test("trip -> trip", function() {deepEqual( Stem("trip"), "trip");});
test("tripartite -> tripartit", function() {deepEqual( Stem("tripartite"), "tripartit");});
test("tripe -> tripe", function() {deepEqual( Stem("tripe"), "tripe");});
test("triple -> tripl", function() {deepEqual( Stem("triple"), "tripl");});
test("triplex -> triplex", function() {deepEqual( Stem("triplex"), "triplex");});
test("tripoli -> tripoli", function() {deepEqual( Stem("tripoli"), "tripoli");});
test("tripolis -> tripoli", function() {deepEqual( Stem("tripolis"), "tripoli");});
test("tripp -> tripp", function() {deepEqual( Stem("tripp"), "tripp");});
test("tripped -> trip", function() {deepEqual( Stem("tripped"), "trip");});
test("tripping -> trip", function() {deepEqual( Stem("tripping"), "trip");});
test("trippingly -> trippingli", function() {deepEqual( Stem("trippingly"), "trippingli");});
test("trips -> trip", function() {deepEqual( Stem("trips"), "trip");});
test("triste -> trist", function() {deepEqual( Stem("triste"), "trist");});
test("tristful -> trist", function() {deepEqual( Stem("tristful"), "trist");});
test("trite -> trite", function() {deepEqual( Stem("trite"), "trite");});
test("triton -> triton", function() {deepEqual( Stem("triton"), "triton");});
test("tritons -> triton", function() {deepEqual( Stem("tritons"), "triton");});
test("triumph -> triumph", function() {deepEqual( Stem("triumph"), "triumph");});
test("triumphal -> triumphal", function() {deepEqual( Stem("triumphal"), "triumphal");});
test("triumphant -> triumphant", function() {deepEqual( Stem("triumphant"), "triumphant");});
test("triumphantly -> triumphantli", function() {deepEqual( Stem("triumphantly"), "triumphantli");});
test("triumphed -> triumph", function() {deepEqual( Stem("triumphed"), "triumph");});
test("triumpher -> triumpher", function() {deepEqual( Stem("triumpher"), "triumpher");});
test("triumphers -> triumpher", function() {deepEqual( Stem("triumphers"), "triumpher");});
test("triumphing -> triumph", function() {deepEqual( Stem("triumphing"), "triumph");});
test("triumphs -> triumph", function() {deepEqual( Stem("triumphs"), "triumph");});
test("triumvir -> triumvir", function() {deepEqual( Stem("triumvir"), "triumvir");});
test("triumvirate -> triumvir", function() {deepEqual( Stem("triumvirate"), "triumvir");});
test("triumvirs -> triumvir", function() {deepEqual( Stem("triumvirs"), "triumvir");});
test("triumviry -> triumviri", function() {deepEqual( Stem("triumviry"), "triumviri");});
test("trivial -> trivial", function() {deepEqual( Stem("trivial"), "trivial");});
test("troat -> troat", function() {deepEqual( Stem("troat"), "troat");});
test("trod -> trod", function() {deepEqual( Stem("trod"), "trod");});
test("trodden -> trodden", function() {deepEqual( Stem("trodden"), "trodden");});
test("troiant -> troiant", function() {deepEqual( Stem("troiant"), "troiant");});
test("troien -> troien", function() {deepEqual( Stem("troien"), "troien");});
test("troilus -> troilu", function() {deepEqual( Stem("troilus"), "troilu");});
test("troiluses -> troilus", function() {deepEqual( Stem("troiluses"), "troilus");});
test("trojan -> trojan", function() {deepEqual( Stem("trojan"), "trojan");});
test("trojans -> trojan", function() {deepEqual( Stem("trojans"), "trojan");});
test("troll -> troll", function() {deepEqual( Stem("troll"), "troll");});
test("trombones -> trombon", function() {deepEqual( Stem("trombones"), "trombon");});
test("tromperies -> tromperi", function() {deepEqual( Stem("tromperies"), "tromperi");});
test("trompet -> trompet", function() {deepEqual( Stem("trompet"), "trompet");});
test("troop -> troop", function() {deepEqual( Stem("troop"), "troop");});
test("trooped -> troop", function() {deepEqual( Stem("trooped"), "troop");});
test("troopers -> trooper", function() {deepEqual( Stem("troopers"), "trooper");});
test("trooping -> troop", function() {deepEqual( Stem("trooping"), "troop");});
test("troops -> troop", function() {deepEqual( Stem("troops"), "troop");});
test("trop -> trop", function() {deepEqual( Stem("trop"), "trop");});
test("trophies -> trophi", function() {deepEqual( Stem("trophies"), "trophi");});
test("trophonius -> trophoniu", function() {deepEqual( Stem("trophonius"), "trophoniu");});
test("trophy -> trophi", function() {deepEqual( Stem("trophy"), "trophi");});
test("tropical -> tropic", function() {deepEqual( Stem("tropical"), "tropic");});
test("tropically -> tropic", function() {deepEqual( Stem("tropically"), "tropic");});
test("trot -> trot", function() {deepEqual( Stem("trot"), "trot");});
test("troth -> troth", function() {deepEqual( Stem("troth"), "troth");});
test("trothed -> troth", function() {deepEqual( Stem("trothed"), "troth");});
test("troths -> troth", function() {deepEqual( Stem("troths"), "troth");});
test("trots -> trot", function() {deepEqual( Stem("trots"), "trot");});
test("trottant -> trottant", function() {deepEqual( Stem("trottant"), "trottant");});
test("trotted -> trot", function() {deepEqual( Stem("trotted"), "trot");});
test("trotter -> trotter", function() {deepEqual( Stem("trotter"), "trotter");});
test("trottermore -> trottermor", function() {deepEqual( Stem("trottermore"), "trottermor");});
test("trotting -> trot", function() {deepEqual( Stem("trotting"), "trot");});
test("trouble -> troubl", function() {deepEqual( Stem("trouble"), "troubl");});
test("troubled -> troubl", function() {deepEqual( Stem("troubled"), "troubl");});
test("troubler -> troubler", function() {deepEqual( Stem("troubler"), "troubler");});
test("troubles -> troubl", function() {deepEqual( Stem("troubles"), "troubl");});
test("troublesome -> troublesom", function() {deepEqual( Stem("troublesome"), "troublesom");});
test("troublest -> troublest", function() {deepEqual( Stem("troublest"), "troublest");});
test("troubling -> troubl", function() {deepEqual( Stem("troubling"), "troubl");});
test("troublous -> troublou", function() {deepEqual( Stem("troublous"), "troublou");});
test("trough -> trough", function() {deepEqual( Stem("trough"), "trough");});
test("trounce -> trounc", function() {deepEqual( Stem("trounce"), "trounc");});
test("trousers -> trouser", function() {deepEqual( Stem("trousers"), "trouser");});
test("trousseau -> trousseau", function() {deepEqual( Stem("trousseau"), "trousseau");});
test("trout -> trout", function() {deepEqual( Stem("trout"), "trout");});
test("trouts -> trout", function() {deepEqual( Stem("trouts"), "trout");});
test("trouvaille -> trouvail", function() {deepEqual( Stem("trouvaille"), "trouvail");});
test("trovato -> trovato", function() {deepEqual( Stem("trovato"), "trovato");});
test("trow -> trow", function() {deepEqual( Stem("trow"), "trow");});
test("trowel -> trowel", function() {deepEqual( Stem("trowel"), "trowel");});
test("trowest -> trowest", function() {deepEqual( Stem("trowest"), "trowest");});
test("trowsers -> trowser", function() {deepEqual( Stem("trowsers"), "trowser");});
test("troy -> troi", function() {deepEqual( Stem("troy"), "troi");});
test("troyan -> troyan", function() {deepEqual( Stem("troyan"), "troyan");});
test("troyans -> troyan", function() {deepEqual( Stem("troyans"), "troyan");});
test("truant -> truant", function() {deepEqual( Stem("truant"), "truant");});
test("truce -> truce", function() {deepEqual( Stem("truce"), "truce");});
test("truckle -> truckl", function() {deepEqual( Stem("truckle"), "truckl");});
test("trudge -> trudg", function() {deepEqual( Stem("trudge"), "trudg");});
test("trudged -> trudg", function() {deepEqual( Stem("trudged"), "trudg");});
test("true -> true", function() {deepEqual( Stem("true"), "true");});
test("trueborn -> trueborn", function() {deepEqual( Stem("trueborn"), "trueborn");});
test("truepenny -> truepenni", function() {deepEqual( Stem("truepenny"), "truepenni");});
test("truer -> truer", function() {deepEqual( Stem("truer"), "truer");});
test("truest -> truest", function() {deepEqual( Stem("truest"), "truest");});
test("truffigny -> truffigni", function() {deepEqual( Stem("truffigny"), "truffigni");});
test("truie -> truie", function() {deepEqual( Stem("truie"), "truie");});
test("trull -> trull", function() {deepEqual( Stem("trull"), "trull");});
test("trulls -> trull", function() {deepEqual( Stem("trulls"), "trull");});
test("truly -> truli", function() {deepEqual( Stem("truly"), "truli");});
test("trump -> trump", function() {deepEqual( Stem("trump"), "trump");});
test("trumper -> trumper", function() {deepEqual( Stem("trumper"), "trumper");});
test("trumperies -> trumperi", function() {deepEqual( Stem("trumperies"), "trumperi");});
test("trumpery -> trumperi", function() {deepEqual( Stem("trumpery"), "trumperi");});
test("trumpet -> trumpet", function() {deepEqual( Stem("trumpet"), "trumpet");});
test("trumpeter -> trumpet", function() {deepEqual( Stem("trumpeter"), "trumpet");});
test("trumpeters -> trumpet", function() {deepEqual( Stem("trumpeters"), "trumpet");});
test("trumpets -> trumpet", function() {deepEqual( Stem("trumpets"), "trumpet");});
test("trumps -> trump", function() {deepEqual( Stem("trumps"), "trump");});
test("truncheon -> truncheon", function() {deepEqual( Stem("truncheon"), "truncheon");});
test("truncheoners -> truncheon", function() {deepEqual( Stem("truncheoners"), "truncheon");});
test("trundle -> trundl", function() {deepEqual( Stem("trundle"), "trundl");});
test("trunk -> trunk", function() {deepEqual( Stem("trunk"), "trunk");});
test("trunks -> trunk", function() {deepEqual( Stem("trunks"), "trunk");});
test("trust -> trust", function() {deepEqual( Stem("trust"), "trust");});
test("trusted -> trust", function() {deepEqual( Stem("trusted"), "trust");});
test("trustee -> truste", function() {deepEqual( Stem("trustee"), "truste");});
test("trustees -> truste", function() {deepEqual( Stem("trustees"), "truste");});
test("truster -> truster", function() {deepEqual( Stem("truster"), "truster");});
test("trusters -> truster", function() {deepEqual( Stem("trusters"), "truster");});
test("trustful -> trust", function() {deepEqual( Stem("trustful"), "trust");});
test("trusting -> trust", function() {deepEqual( Stem("trusting"), "trust");});
test("trusts -> trust", function() {deepEqual( Stem("trusts"), "trust");});
test("trusty -> trusti", function() {deepEqual( Stem("trusty"), "trusti");});
test("truth -> truth", function() {deepEqual( Stem("truth"), "truth");});
test("truths -> truth", function() {deepEqual( Stem("truths"), "truth");});
test("try -> try", function() {deepEqual( Stem("try"), "try");});
test("trying -> try", function() {deepEqual( Stem("trying"), "try");});
test("ts -> t", function() {deepEqual( Stem("ts"), "t");});
test("tu -> tu", function() {deepEqual( Stem("tu"), "tu");});
test("tuae -> tuae", function() {deepEqual( Stem("tuae"), "tuae");});
test("tub -> tub", function() {deepEqual( Stem("tub"), "tub");});
test("tubal -> tubal", function() {deepEqual( Stem("tubal"), "tubal");});
test("tubs -> tub", function() {deepEqual( Stem("tubs"), "tub");});
test("tuck -> tuck", function() {deepEqual( Stem("tuck"), "tuck");});
test("tucked -> tuck", function() {deepEqual( Stem("tucked"), "tuck");});
test("tucker -> tucker", function() {deepEqual( Stem("tucker"), "tucker");});
test("tucket -> tucket", function() {deepEqual( Stem("tucket"), "tucket");});
test("tuesday -> tuesdai", function() {deepEqual( Stem("tuesday"), "tuesdai");});
test("tuffin -> tuffin", function() {deepEqual( Stem("tuffin"), "tuffin");});
test("tuft -> tuft", function() {deepEqual( Stem("tuft"), "tuft");});
test("tufto -> tufto", function() {deepEqual( Stem("tufto"), "tufto");});
test("tufts -> tuft", function() {deepEqual( Stem("tufts"), "tuft");});
test("tug -> tug", function() {deepEqual( Stem("tug"), "tug");});
test("tugg -> tugg", function() {deepEqual( Stem("tugg"), "tugg");});
test("tugging -> tug", function() {deepEqual( Stem("tugging"), "tug");});
test("tuileries -> tuileri", function() {deepEqual( Stem("tuileries"), "tuileri");});
test("tuition -> tuition", function() {deepEqual( Stem("tuition"), "tuition");});
test("tullus -> tullu", function() {deepEqual( Stem("tullus"), "tullu");});
test("tully -> tulli", function() {deepEqual( Stem("tully"), "tulli");});
test("tumble -> tumbl", function() {deepEqual( Stem("tumble"), "tumbl");});
test("tumbled -> tumbl", function() {deepEqual( Stem("tumbled"), "tumbl");});
test("tumbler -> tumbler", function() {deepEqual( Stem("tumbler"), "tumbler");});
test("tumblers -> tumbler", function() {deepEqual( Stem("tumblers"), "tumbler");});
test("tumbles -> tumbl", function() {deepEqual( Stem("tumbles"), "tumbl");});
test("tumbling -> tumbl", function() {deepEqual( Stem("tumbling"), "tumbl");});
test("tumult -> tumult", function() {deepEqual( Stem("tumult"), "tumult");});
test("tumultuous -> tumultu", function() {deepEqual( Stem("tumultuous"), "tumultu");});
test("tumultuously -> tumultu", function() {deepEqual( Stem("tumultuously"), "tumultu");});
test("tun -> tun", function() {deepEqual( Stem("tun"), "tun");});
test("tune -> tune", function() {deepEqual( Stem("tune"), "tune");});
test("tuneable -> tuneabl", function() {deepEqual( Stem("tuneable"), "tuneabl");});
test("tuned -> tune", function() {deepEqual( Stem("tuned"), "tune");});
test("tuneless -> tuneless", function() {deepEqual( Stem("tuneless"), "tuneless");});
test("tuners -> tuner", function() {deepEqual( Stem("tuners"), "tuner");});
test("tunes -> tune", function() {deepEqual( Stem("tunes"), "tune");});
test("tunic -> tunic", function() {deepEqual( Stem("tunic"), "tunic");});
test("tunis -> tuni", function() {deepEqual( Stem("tunis"), "tuni");});
test("tuns -> tun", function() {deepEqual( Stem("tuns"), "tun");});
test("tupping -> tup", function() {deepEqual( Stem("tupping"), "tup");});
test("turban -> turban", function() {deepEqual( Stem("turban"), "turban");});
test("turbans -> turban", function() {deepEqual( Stem("turbans"), "turban");});
test("turbid -> turbid", function() {deepEqual( Stem("turbid"), "turbid");});
test("turbot -> turbot", function() {deepEqual( Stem("turbot"), "turbot");});
test("turbulence -> turbul", function() {deepEqual( Stem("turbulence"), "turbul");});
test("turbulent -> turbul", function() {deepEqual( Stem("turbulent"), "turbul");});
test("turd -> turd", function() {deepEqual( Stem("turd"), "turd");});
test("tureen -> tureen", function() {deepEqual( Stem("tureen"), "tureen");});
test("turf -> turf", function() {deepEqual( Stem("turf"), "turf");});
test("turfy -> turfi", function() {deepEqual( Stem("turfy"), "turfi");});
test("turk -> turk", function() {deepEqual( Stem("turk"), "turk");});
test("turkey -> turkei", function() {deepEqual( Stem("turkey"), "turkei");});
test("turkeys -> turkei", function() {deepEqual( Stem("turkeys"), "turkei");});
test("turkish -> turkish", function() {deepEqual( Stem("turkish"), "turkish");});
test("turks -> turk", function() {deepEqual( Stem("turks"), "turk");});
test("turlygod -> turlygod", function() {deepEqual( Stem("turlygod"), "turlygod");});
test("turmoil -> turmoil", function() {deepEqual( Stem("turmoil"), "turmoil");});
test("turmoiled -> turmoil", function() {deepEqual( Stem("turmoiled"), "turmoil");});
test("turn -> turn", function() {deepEqual( Stem("turn"), "turn");});
test("turnbull -> turnbul", function() {deepEqual( Stem("turnbull"), "turnbul");});
test("turncoat -> turncoat", function() {deepEqual( Stem("turncoat"), "turncoat");});
test("turncoats -> turncoat", function() {deepEqual( Stem("turncoats"), "turncoat");});
test("turned -> turn", function() {deepEqual( Stem("turned"), "turn");});
test("turner -> turner", function() {deepEqual( Stem("turner"), "turner");});
test("turneth -> turneth", function() {deepEqual( Stem("turneth"), "turneth");});
test("turnhamgreen -> turnhamgreen", function() {deepEqual( Stem("turnhamgreen"), "turnhamgreen");});
test("turning -> turn", function() {deepEqual( Stem("turning"), "turn");});
test("turnip -> turnip", function() {deepEqual( Stem("turnip"), "turnip");});
test("turnips -> turnip", function() {deepEqual( Stem("turnips"), "turnip");});
test("turnpike -> turnpik", function() {deepEqual( Stem("turnpike"), "turnpik");});
test("turns -> turn", function() {deepEqual( Stem("turns"), "turn");});
test("turph -> turph", function() {deepEqual( Stem("turph"), "turph");});
test("turpitude -> turpitud", function() {deepEqual( Stem("turpitude"), "turpitud");});
test("turquoise -> turquois", function() {deepEqual( Stem("turquoise"), "turquois");});
test("turquoises -> turquois", function() {deepEqual( Stem("turquoises"), "turquois");});
test("turret -> turret", function() {deepEqual( Stem("turret"), "turret");});
test("turrets -> turret", function() {deepEqual( Stem("turrets"), "turret");});
test("turtle -> turtl", function() {deepEqual( Stem("turtle"), "turtl");});
test("turtles -> turtl", function() {deepEqual( Stem("turtles"), "turtl");});
test("turvy -> turvi", function() {deepEqual( Stem("turvy"), "turvi");});
test("tuscan -> tuscan", function() {deepEqual( Stem("tuscan"), "tuscan");});
test("tush -> tush", function() {deepEqual( Stem("tush"), "tush");});
test("tussle -> tussl", function() {deepEqual( Stem("tussle"), "tussl");});
test("tut -> tut", function() {deepEqual( Stem("tut"), "tut");});
test("tutbury -> tutburi", function() {deepEqual( Stem("tutbury"), "tutburi");});
test("tutor -> tutor", function() {deepEqual( Stem("tutor"), "tutor");});
test("tutored -> tutor", function() {deepEqual( Stem("tutored"), "tutor");});
test("tutoress -> tutoress", function() {deepEqual( Stem("tutoress"), "tutoress");});
test("tutors -> tutor", function() {deepEqual( Stem("tutors"), "tutor");});
test("tutto -> tutto", function() {deepEqual( Stem("tutto"), "tutto");});
test("tvice -> tvice", function() {deepEqual( Stem("tvice"), "tvice");});
test("twaddling -> twaddl", function() {deepEqual( Stem("twaddling"), "twaddl");});
test("twain -> twain", function() {deepEqual( Stem("twain"), "twain");});
test("twang -> twang", function() {deepEqual( Stem("twang"), "twang");});
test("twanging -> twang", function() {deepEqual( Stem("twanging"), "twang");});
test("twangling -> twangl", function() {deepEqual( Stem("twangling"), "twangl");});
test("twas -> twa", function() {deepEqual( Stem("twas"), "twa");});
test("tway -> twai", function() {deepEqual( Stem("tway"), "twai");});
test("tweaks -> tweak", function() {deepEqual( Stem("tweaks"), "tweak");});
test("tween -> tween", function() {deepEqual( Stem("tween"), "tween");});
test("twelfth -> twelfth", function() {deepEqual( Stem("twelfth"), "twelfth");});
test("twelve -> twelv", function() {deepEqual( Stem("twelve"), "twelv");});
test("twelvemonth -> twelvemonth", function() {deepEqual( Stem("twelvemonth"), "twelvemonth");});
test("twenties -> twenti", function() {deepEqual( Stem("twenties"), "twenti");});
test("twentieth -> twentieth", function() {deepEqual( Stem("twentieth"), "twentieth");});
test("twenty -> twenti", function() {deepEqual( Stem("twenty"), "twenti");});
test("twere -> twere", function() {deepEqual( Stem("twere"), "twere");});
test("twice -> twice", function() {deepEqual( Stem("twice"), "twice");});
test("twiddle -> twiddl", function() {deepEqual( Stem("twiddle"), "twiddl");});
test("twiddler -> twiddler", function() {deepEqual( Stem("twiddler"), "twiddler");});
test("twiddling -> twiddl", function() {deepEqual( Stem("twiddling"), "twiddl");});
test("twig -> twig", function() {deepEqual( Stem("twig"), "twig");});
test("twiggen -> twiggen", function() {deepEqual( Stem("twiggen"), "twiggen");});
test("twigs -> twig", function() {deepEqual( Stem("twigs"), "twig");});
test("twilight -> twilight", function() {deepEqual( Stem("twilight"), "twilight");});
test("twill -> twill", function() {deepEqual( Stem("twill"), "twill");});
test("twilled -> twill", function() {deepEqual( Stem("twilled"), "twill");});
test("twin -> twin", function() {deepEqual( Stem("twin"), "twin");});
test("twine -> twine", function() {deepEqual( Stem("twine"), "twine");});
test("twined -> twine", function() {deepEqual( Stem("twined"), "twine");});
test("twinge -> twing", function() {deepEqual( Stem("twinge"), "twing");});
test("twink -> twink", function() {deepEqual( Stem("twink"), "twink");});
test("twinkle -> twinkl", function() {deepEqual( Stem("twinkle"), "twinkl");});
test("twinkled -> twinkl", function() {deepEqual( Stem("twinkled"), "twinkl");});
test("twinkling -> twinkl", function() {deepEqual( Stem("twinkling"), "twinkl");});
test("twinn -> twinn", function() {deepEqual( Stem("twinn"), "twinn");});
test("twins -> twin", function() {deepEqual( Stem("twins"), "twin");});
test("twire -> twire", function() {deepEqual( Stem("twire"), "twire");});
test("twirl -> twirl", function() {deepEqual( Stem("twirl"), "twirl");});
test("twirled -> twirl", function() {deepEqual( Stem("twirled"), "twirl");});
test("twirling -> twirl", function() {deepEqual( Stem("twirling"), "twirl");});
test("twist -> twist", function() {deepEqual( Stem("twist"), "twist");});
test("twisted -> twist", function() {deepEqual( Stem("twisted"), "twist");});
test("twists -> twist", function() {deepEqual( Stem("twists"), "twist");});
test("twit -> twit", function() {deepEqual( Stem("twit"), "twit");});
test("twitch -> twitch", function() {deepEqual( Stem("twitch"), "twitch");});
test("twitched -> twitch", function() {deepEqual( Stem("twitched"), "twitch");});
test("twitching -> twitch", function() {deepEqual( Stem("twitching"), "twitch");});
test("twitchings -> twitch", function() {deepEqual( Stem("twitchings"), "twitch");});
test("twits -> twit", function() {deepEqual( Stem("twits"), "twit");});
test("twitting -> twit", function() {deepEqual( Stem("twitting"), "twit");});
test("twixt -> twixt", function() {deepEqual( Stem("twixt"), "twixt");});
test("two -> two", function() {deepEqual( Stem("two"), "two");});
test("twofold -> twofold", function() {deepEqual( Stem("twofold"), "twofold");});
test("twopence -> twopenc", function() {deepEqual( Stem("twopence"), "twopenc");});
test("twopences -> twopenc", function() {deepEqual( Stem("twopences"), "twopenc");});
test("twopenny -> twopenni", function() {deepEqual( Stem("twopenny"), "twopenni");});
test("twos -> two", function() {deepEqual( Stem("twos"), "two");});
test("twould -> twould", function() {deepEqual( Stem("twould"), "twould");});
test("tyb -> tyb", function() {deepEqual( Stem("tyb"), "tyb");});
test("tybalt -> tybalt", function() {deepEqual( Stem("tybalt"), "tybalt");});
test("tybalts -> tybalt", function() {deepEqual( Stem("tybalts"), "tybalt");});
test("tyburn -> tyburn", function() {deepEqual( Stem("tyburn"), "tyburn");});
test("tyburnia -> tyburnia", function() {deepEqual( Stem("tyburnia"), "tyburnia");});
test("tyburnians -> tyburnian", function() {deepEqual( Stem("tyburnians"), "tyburnian");});
test("tye -> tye", function() {deepEqual( Stem("tye"), "tye");});
test("tying -> ty", function() {deepEqual( Stem("tying"), "ty");});
test("tyke -> tyke", function() {deepEqual( Stem("tyke"), "tyke");});
test("tymbria -> tymbria", function() {deepEqual( Stem("tymbria"), "tymbria");});
test("type -> type", function() {deepEqual( Stem("type"), "type");});
test("types -> type", function() {deepEqual( Stem("types"), "type");});
test("typhon -> typhon", function() {deepEqual( Stem("typhon"), "typhon");});
test("tyrannical -> tyrann", function() {deepEqual( Stem("tyrannical"), "tyrann");});
test("tyrannically -> tyrann", function() {deepEqual( Stem("tyrannically"), "tyrann");});
test("tyrannising -> tyrannis", function() {deepEqual( Stem("tyrannising"), "tyrannis");});
test("tyrannize -> tyrann", function() {deepEqual( Stem("tyrannize"), "tyrann");});
test("tyrannized -> tyrann", function() {deepEqual( Stem("tyrannized"), "tyrann");});
test("tyrannizing -> tyrann", function() {deepEqual( Stem("tyrannizing"), "tyrann");});
test("tyrannous -> tyrann", function() {deepEqual( Stem("tyrannous"), "tyrann");});
test("tyranny -> tyranni", function() {deepEqual( Stem("tyranny"), "tyranni");});
test("tyrant -> tyrant", function() {deepEqual( Stem("tyrant"), "tyrant");});
test("tyrants -> tyrant", function() {deepEqual( Stem("tyrants"), "tyrant");});
test("tyrian -> tyrian", function() {deepEqual( Stem("tyrian"), "tyrian");});
test("tyrolese -> tyroles", function() {deepEqual( Stem("tyrolese"), "tyroles");});
test("tyrrel -> tyrrel", function() {deepEqual( Stem("tyrrel"), "tyrrel");});
test("u -> u", function() {deepEqual( Stem("u"), "u");});
test("ubique -> ubiqu", function() {deepEqual( Stem("ubique"), "ubiqu");});
test("udders -> udder", function() {deepEqual( Stem("udders"), "udder");});
test("udge -> udg", function() {deepEqual( Stem("udge"), "udg");});
test("udolpho -> udolpho", function() {deepEqual( Stem("udolpho"), "udolpho");});
test("uds -> ud", function() {deepEqual( Stem("uds"), "ud");});
test("uglier -> uglier", function() {deepEqual( Stem("uglier"), "uglier");});
test("ugliest -> ugliest", function() {deepEqual( Stem("ugliest"), "ugliest");});
test("ugly -> ugli", function() {deepEqual( Stem("ugly"), "ugli");});
test("ulcer -> ulcer", function() {deepEqual( Stem("ulcer"), "ulcer");});
test("ulcerous -> ulcer", function() {deepEqual( Stem("ulcerous"), "ulcer");});
test("ultimate -> ultim", function() {deepEqual( Stem("ultimate"), "ultim");});
test("ultimately -> ultim", function() {deepEqual( Stem("ultimately"), "ultim");});
test("ultra -> ultra", function() {deepEqual( Stem("ultra"), "ultra");});
test("ulysses -> ulyss", function() {deepEqual( Stem("ulysses"), "ulyss");});
test("um -> um", function() {deepEqual( Stem("um"), "um");});
test("umber -> umber", function() {deepEqual( Stem("umber"), "umber");});
test("umbra -> umbra", function() {deepEqual( Stem("umbra"), "umbra");});
test("umbrage -> umbrag", function() {deepEqual( Stem("umbrage"), "umbrag");});
test("umbrella -> umbrella", function() {deepEqual( Stem("umbrella"), "umbrella");});
test("umfrevile -> umfrevil", function() {deepEqual( Stem("umfrevile"), "umfrevil");});
test("ummerapoora -> ummerapoora", function() {deepEqual( Stem("ummerapoora"), "ummerapoora");});
test("umpire -> umpir", function() {deepEqual( Stem("umpire"), "umpir");});
test("umpires -> umpir", function() {deepEqual( Stem("umpires"), "umpir");});
test("un -> un", function() {deepEqual( Stem("un"), "un");});
test("unable -> unabl", function() {deepEqual( Stem("unable"), "unabl");});
test("unaccommodated -> unaccommod", function() {deepEqual( Stem("unaccommodated"), "unaccommod");});
test("unaccompanied -> unaccompani", function() {deepEqual( Stem("unaccompanied"), "unaccompani");});
test("unaccountable -> unaccount", function() {deepEqual( Stem("unaccountable"), "unaccount");});
test("unaccustom -> unaccustom", function() {deepEqual( Stem("unaccustom"), "unaccustom");});
test("unaching -> unach", function() {deepEqual( Stem("unaching"), "unach");});
test("unacquainted -> unacquaint", function() {deepEqual( Stem("unacquainted"), "unacquaint");});
test("unactive -> unact", function() {deepEqual( Stem("unactive"), "unact");});
test("unadulterated -> unadulter", function() {deepEqual( Stem("unadulterated"), "unadulter");});
test("unadvis -> unadvi", function() {deepEqual( Stem("unadvis"), "unadvi");});
test("unadvisable -> unadvis", function() {deepEqual( Stem("unadvisable"), "unadvis");});
test("unadvised -> unadvis", function() {deepEqual( Stem("unadvised"), "unadvis");});
test("unadvisedly -> unadvisedli", function() {deepEqual( Stem("unadvisedly"), "unadvisedli");});
test("unaffected -> unaffect", function() {deepEqual( Stem("unaffected"), "unaffect");});
test("unaffectedly -> unaffectedli", function() {deepEqual( Stem("unaffectedly"), "unaffectedli");});
test("unagreeable -> unagre", function() {deepEqual( Stem("unagreeable"), "unagre");});
test("unanel -> unanel", function() {deepEqual( Stem("unanel"), "unanel");});
test("unanimous -> unanim", function() {deepEqual( Stem("unanimous"), "unanim");});
test("unanimously -> unanim", function() {deepEqual( Stem("unanimously"), "unanim");});
test("unanswer -> unansw", function() {deepEqual( Stem("unanswer"), "unansw");});
test("unappeas -> unappea", function() {deepEqual( Stem("unappeas"), "unappea");});
test("unapproachable -> unapproach", function() {deepEqual( Stem("unapproachable"), "unapproach");});
test("unapproved -> unapprov", function() {deepEqual( Stem("unapproved"), "unapprov");});
test("unapt -> unapt", function() {deepEqual( Stem("unapt"), "unapt");});
test("unaptness -> unapt", function() {deepEqual( Stem("unaptness"), "unapt");});
test("unarm -> unarm", function() {deepEqual( Stem("unarm"), "unarm");});
test("unarmed -> unarm", function() {deepEqual( Stem("unarmed"), "unarm");});
test("unarms -> unarm", function() {deepEqual( Stem("unarms"), "unarm");});
test("unassail -> unassail", function() {deepEqual( Stem("unassail"), "unassail");});
test("unassailable -> unassail", function() {deepEqual( Stem("unassailable"), "unassail");});
test("unassuming -> unassum", function() {deepEqual( Stem("unassuming"), "unassum");});
test("unattached -> unattach", function() {deepEqual( Stem("unattached"), "unattach");});
test("unattainable -> unattain", function() {deepEqual( Stem("unattainable"), "unattain");});
test("unattainted -> unattaint", function() {deepEqual( Stem("unattainted"), "unattaint");});
test("unattempted -> unattempt", function() {deepEqual( Stem("unattempted"), "unattempt");});
test("unattended -> unattend", function() {deepEqual( Stem("unattended"), "unattend");});
test("unauspicious -> unauspici", function() {deepEqual( Stem("unauspicious"), "unauspici");});
test("unauthorized -> unauthor", function() {deepEqual( Stem("unauthorized"), "unauthor");});
test("unavailing -> unavail", function() {deepEqual( Stem("unavailing"), "unavail");});
test("unavoided -> unavoid", function() {deepEqual( Stem("unavoided"), "unavoid");});
test("unaware -> unawar", function() {deepEqual( Stem("unaware"), "unawar");});
test("unawares -> unawar", function() {deepEqual( Stem("unawares"), "unawar");});
test("unback -> unback", function() {deepEqual( Stem("unback"), "unback");});
test("unbak -> unbak", function() {deepEqual( Stem("unbak"), "unbak");});
test("unbanded -> unband", function() {deepEqual( Stem("unbanded"), "unband");});
test("unbar -> unbar", function() {deepEqual( Stem("unbar"), "unbar");});
test("unbarb -> unbarb", function() {deepEqual( Stem("unbarb"), "unbarb");});
test("unbarred -> unbar", function() {deepEqual( Stem("unbarred"), "unbar");});
test("unbashful -> unbash", function() {deepEqual( Stem("unbashful"), "unbash");});
test("unbated -> unbat", function() {deepEqual( Stem("unbated"), "unbat");});
test("unbatter -> unbatt", function() {deepEqual( Stem("unbatter"), "unbatt");});
test("unbearable -> unbear", function() {deepEqual( Stem("unbearable"), "unbear");});
test("unbecoming -> unbecom", function() {deepEqual( Stem("unbecoming"), "unbecom");});
test("unbefitting -> unbefit", function() {deepEqual( Stem("unbefitting"), "unbefit");});
test("unbegot -> unbegot", function() {deepEqual( Stem("unbegot"), "unbegot");});
test("unbegotten -> unbegotten", function() {deepEqual( Stem("unbegotten"), "unbegotten");});
test("unbelieved -> unbeliev", function() {deepEqual( Stem("unbelieved"), "unbeliev");});
test("unbend -> unbend", function() {deepEqual( Stem("unbend"), "unbend");});
test("unbent -> unbent", function() {deepEqual( Stem("unbent"), "unbent");});
test("unbewail -> unbewail", function() {deepEqual( Stem("unbewail"), "unbewail");});
test("unbid -> unbid", function() {deepEqual( Stem("unbid"), "unbid");});
test("unbidden -> unbidden", function() {deepEqual( Stem("unbidden"), "unbidden");});
test("unbind -> unbind", function() {deepEqual( Stem("unbind"), "unbind");});
test("unbinds -> unbind", function() {deepEqual( Stem("unbinds"), "unbind");});
test("unbitted -> unbit", function() {deepEqual( Stem("unbitted"), "unbit");});
test("unbless -> unbless", function() {deepEqual( Stem("unbless"), "unbless");});
test("unblest -> unblest", function() {deepEqual( Stem("unblest"), "unblest");});
test("unbloodied -> unbloodi", function() {deepEqual( Stem("unbloodied"), "unbloodi");});
test("unblown -> unblown", function() {deepEqual( Stem("unblown"), "unblown");});
test("unbodied -> unbodi", function() {deepEqual( Stem("unbodied"), "unbodi");});
test("unbolt -> unbolt", function() {deepEqual( Stem("unbolt"), "unbolt");});
test("unbolted -> unbolt", function() {deepEqual( Stem("unbolted"), "unbolt");});
test("unbonneted -> unbonnet", function() {deepEqual( Stem("unbonneted"), "unbonnet");});
test("unbookish -> unbookish", function() {deepEqual( Stem("unbookish"), "unbookish");});
test("unborn -> unborn", function() {deepEqual( Stem("unborn"), "unborn");});
test("unbosom -> unbosom", function() {deepEqual( Stem("unbosom"), "unbosom");});
test("unbound -> unbound", function() {deepEqual( Stem("unbound"), "unbound");});
test("unbounded -> unbound", function() {deepEqual( Stem("unbounded"), "unbound");});
test("unbow -> unbow", function() {deepEqual( Stem("unbow"), "unbow");});
test("unbowed -> unbow", function() {deepEqual( Stem("unbowed"), "unbow");});
test("unbrac -> unbrac", function() {deepEqual( Stem("unbrac"), "unbrac");});
test("unbraced -> unbrac", function() {deepEqual( Stem("unbraced"), "unbrac");});
test("unbraided -> unbraid", function() {deepEqual( Stem("unbraided"), "unbraid");});
test("unbreathed -> unbreath", function() {deepEqual( Stem("unbreathed"), "unbreath");});
test("unbred -> unbr", function() {deepEqual( Stem("unbred"), "unbr");});
test("unbreech -> unbreech", function() {deepEqual( Stem("unbreech"), "unbreech");});
test("unbridled -> unbridl", function() {deepEqual( Stem("unbridled"), "unbridl");});
test("unbroke -> unbrok", function() {deepEqual( Stem("unbroke"), "unbrok");});
test("unbruis -> unbrui", function() {deepEqual( Stem("unbruis"), "unbrui");});
test("unbruised -> unbruis", function() {deepEqual( Stem("unbruised"), "unbruis");});
test("unbuckle -> unbuckl", function() {deepEqual( Stem("unbuckle"), "unbuckl");});
test("unbuckles -> unbuckl", function() {deepEqual( Stem("unbuckles"), "unbuckl");});
test("unbuckling -> unbuckl", function() {deepEqual( Stem("unbuckling"), "unbuckl");});
test("unbuild -> unbuild", function() {deepEqual( Stem("unbuild"), "unbuild");});
test("unburden -> unburden", function() {deepEqual( Stem("unburden"), "unburden");});
test("unburdens -> unburden", function() {deepEqual( Stem("unburdens"), "unburden");});
test("unburied -> unburi", function() {deepEqual( Stem("unburied"), "unburi");});
test("unburnt -> unburnt", function() {deepEqual( Stem("unburnt"), "unburnt");});
test("unburthen -> unburthen", function() {deepEqual( Stem("unburthen"), "unburthen");});
test("unbutton -> unbutton", function() {deepEqual( Stem("unbutton"), "unbutton");});
test("unbuttoning -> unbutton", function() {deepEqual( Stem("unbuttoning"), "unbutton");});
test("uncalled -> uncal", function() {deepEqual( Stem("uncalled"), "uncal");});
test("uncapable -> uncap", function() {deepEqual( Stem("uncapable"), "uncap");});
test("uncape -> uncap", function() {deepEqual( Stem("uncape"), "uncap");});
test("uncase -> uncas", function() {deepEqual( Stem("uncase"), "uncas");});
test("uncasing -> uncas", function() {deepEqual( Stem("uncasing"), "uncas");});
test("uncaught -> uncaught", function() {deepEqual( Stem("uncaught"), "uncaught");});
test("unceasingly -> unceasingli", function() {deepEqual( Stem("unceasingly"), "unceasingli");});
test("unceremonious -> unceremoni", function() {deepEqual( Stem("unceremonious"), "unceremoni");});
test("uncertain -> uncertain", function() {deepEqual( Stem("uncertain"), "uncertain");});
test("uncertainty -> uncertainti", function() {deepEqual( Stem("uncertainty"), "uncertainti");});
test("unchain -> unchain", function() {deepEqual( Stem("unchain"), "unchain");});
test("unchanging -> unchang", function() {deepEqual( Stem("unchanging"), "unchang");});
test("uncharge -> uncharg", function() {deepEqual( Stem("uncharge"), "uncharg");});
test("uncharged -> uncharg", function() {deepEqual( Stem("uncharged"), "uncharg");});
test("uncharitable -> uncharit", function() {deepEqual( Stem("uncharitable"), "uncharit");});
test("uncharitably -> uncharit", function() {deepEqual( Stem("uncharitably"), "uncharit");});
test("unchary -> unchari", function() {deepEqual( Stem("unchary"), "unchari");});
test("unchaste -> unchast", function() {deepEqual( Stem("unchaste"), "unchast");});
test("uncheck -> uncheck", function() {deepEqual( Stem("uncheck"), "uncheck");});
test("unchilded -> unchild", function() {deepEqual( Stem("unchilded"), "unchild");});
test("uncivil -> uncivil", function() {deepEqual( Stem("uncivil"), "uncivil");});
test("unclaim -> unclaim", function() {deepEqual( Stem("unclaim"), "unclaim");});
test("unclasp -> unclasp", function() {deepEqual( Stem("unclasp"), "unclasp");});
test("uncle -> uncl", function() {deepEqual( Stem("uncle"), "uncl");});
test("unclean -> unclean", function() {deepEqual( Stem("unclean"), "unclean");});
test("uncleanliness -> uncleanli", function() {deepEqual( Stem("uncleanliness"), "uncleanli");});
test("uncleanly -> uncleanli", function() {deepEqual( Stem("uncleanly"), "uncleanli");});
test("uncleanness -> unclean", function() {deepEqual( Stem("uncleanness"), "unclean");});
test("unclerical -> uncler", function() {deepEqual( Stem("unclerical"), "uncler");});
test("uncles -> uncl", function() {deepEqual( Stem("uncles"), "uncl");});
test("unclew -> unclew", function() {deepEqual( Stem("unclew"), "unclew");});
test("unclog -> unclog", function() {deepEqual( Stem("unclog"), "unclog");});
test("uncoined -> uncoin", function() {deepEqual( Stem("uncoined"), "uncoin");});
test("uncolted -> uncolt", function() {deepEqual( Stem("uncolted"), "uncolt");});
test("uncomeliness -> uncomeli", function() {deepEqual( Stem("uncomeliness"), "uncomeli");});
test("uncomfortable -> uncomfort", function() {deepEqual( Stem("uncomfortable"), "uncomfort");});
test("uncommon -> uncommon", function() {deepEqual( Stem("uncommon"), "uncommon");});
test("uncommonly -> uncommonli", function() {deepEqual( Stem("uncommonly"), "uncommonli");});
test("uncompassionate -> uncompassion", function() {deepEqual( Stem("uncompassionate"), "uncompassion");});
test("uncomplaining -> uncomplain", function() {deepEqual( Stem("uncomplaining"), "uncomplain");});
test("uncomplainingly -> uncomplainingli", function() {deepEqual( Stem("uncomplainingly"), "uncomplainingli");});
test("uncomprehensive -> uncomprehens", function() {deepEqual( Stem("uncomprehensive"), "uncomprehens");});
test("unconcerned -> unconcern", function() {deepEqual( Stem("unconcerned"), "unconcern");});
test("unconditional -> uncondit", function() {deepEqual( Stem("unconditional"), "uncondit");});
test("unconfinable -> unconfin", function() {deepEqual( Stem("unconfinable"), "unconfin");});
test("unconfirm -> unconfirm", function() {deepEqual( Stem("unconfirm"), "unconfirm");});
test("unconfirmed -> unconfirm", function() {deepEqual( Stem("unconfirmed"), "unconfirm");});
test("unconquer -> unconqu", function() {deepEqual( Stem("unconquer"), "unconqu");});
test("unconquered -> unconqu", function() {deepEqual( Stem("unconquered"), "unconqu");});
test("unconscious -> unconsci", function() {deepEqual( Stem("unconscious"), "unconsci");});
test("unconsciously -> unconsci", function() {deepEqual( Stem("unconsciously"), "unconsci");});
test("unconsecrated -> unconsecr", function() {deepEqual( Stem("unconsecrated"), "unconsecr");});
test("unconsidered -> unconsid", function() {deepEqual( Stem("unconsidered"), "unconsid");});
test("unconstant -> unconst", function() {deepEqual( Stem("unconstant"), "unconst");});
test("unconstrain -> unconstrain", function() {deepEqual( Stem("unconstrain"), "unconstrain");});
test("unconstrained -> unconstrain", function() {deepEqual( Stem("unconstrained"), "unconstrain");});
test("unconstrainedly -> unconstrainedli", function() {deepEqual( Stem("unconstrainedly"), "unconstrainedli");});
test("uncontemn -> uncontemn", function() {deepEqual( Stem("uncontemn"), "uncontemn");});
test("uncontroll -> uncontrol", function() {deepEqual( Stem("uncontroll"), "uncontrol");});
test("uncontrollable -> uncontrol", function() {deepEqual( Stem("uncontrollable"), "uncontrol");});
test("uncorked -> uncork", function() {deepEqual( Stem("uncorked"), "uncork");});
test("uncorrected -> uncorrect", function() {deepEqual( Stem("uncorrected"), "uncorrect");});
test("uncountable -> uncount", function() {deepEqual( Stem("uncountable"), "uncount");});
test("uncounted -> uncount", function() {deepEqual( Stem("uncounted"), "uncount");});
test("uncouple -> uncoupl", function() {deepEqual( Stem("uncouple"), "uncoupl");});
test("uncourteous -> uncourt", function() {deepEqual( Stem("uncourteous"), "uncourt");});
test("uncouth -> uncouth", function() {deepEqual( Stem("uncouth"), "uncouth");});
test("uncover -> uncov", function() {deepEqual( Stem("uncover"), "uncov");});
test("uncovered -> uncov", function() {deepEqual( Stem("uncovered"), "uncov");});
test("uncropped -> uncrop", function() {deepEqual( Stem("uncropped"), "uncrop");});
test("uncross -> uncross", function() {deepEqual( Stem("uncross"), "uncross");});
test("uncrown -> uncrown", function() {deepEqual( Stem("uncrown"), "uncrown");});
test("unction -> unction", function() {deepEqual( Stem("unction"), "unction");});
test("unctuous -> unctuou", function() {deepEqual( Stem("unctuous"), "unctuou");});
test("uncuckolded -> uncuckold", function() {deepEqual( Stem("uncuckolded"), "uncuckold");});
test("uncurable -> uncur", function() {deepEqual( Stem("uncurable"), "uncur");});
test("uncurbable -> uncurb", function() {deepEqual( Stem("uncurbable"), "uncurb");});
test("uncurbed -> uncurb", function() {deepEqual( Stem("uncurbed"), "uncurb");});
test("uncurled -> uncurl", function() {deepEqual( Stem("uncurled"), "uncurl");});
test("uncurls -> uncurl", function() {deepEqual( Stem("uncurls"), "uncurl");});
test("uncurrent -> uncurr", function() {deepEqual( Stem("uncurrent"), "uncurr");});
test("uncurse -> uncurs", function() {deepEqual( Stem("uncurse"), "uncurs");});
test("und -> und", function() {deepEqual( Stem("und"), "und");});
test("undaunted -> undaunt", function() {deepEqual( Stem("undaunted"), "undaunt");});
test("undeaf -> undeaf", function() {deepEqual( Stem("undeaf"), "undeaf");});
test("undeceiving -> undeceiv", function() {deepEqual( Stem("undeceiving"), "undeceiv");});
test("undecided -> undecid", function() {deepEqual( Stem("undecided"), "undecid");});
test("undeck -> undeck", function() {deepEqual( Stem("undeck"), "undeck");});
test("undeeded -> undeed", function() {deepEqual( Stem("undeeded"), "undeed");});
test("under -> under", function() {deepEqual( Stem("under"), "under");});
test("underbearing -> underbear", function() {deepEqual( Stem("underbearing"), "underbear");});
test("underborne -> underborn", function() {deepEqual( Stem("underborne"), "underborn");});
test("undercrest -> undercrest", function() {deepEqual( Stem("undercrest"), "undercrest");});
test("underfeeding -> underfeed", function() {deepEqual( Stem("underfeeding"), "underfeed");});
test("underfoot -> underfoot", function() {deepEqual( Stem("underfoot"), "underfoot");});
test("undergo -> undergo", function() {deepEqual( Stem("undergo"), "undergo");});
test("undergoes -> undergo", function() {deepEqual( Stem("undergoes"), "undergo");});
test("undergoing -> undergo", function() {deepEqual( Stem("undergoing"), "undergo");});
test("undergone -> undergon", function() {deepEqual( Stem("undergone"), "undergon");});
test("underground -> underground", function() {deepEqual( Stem("underground"), "underground");});
test("underhand -> underhand", function() {deepEqual( Stem("underhand"), "underhand");});
test("underhung -> underhung", function() {deepEqual( Stem("underhung"), "underhung");});
test("underlined -> underlin", function() {deepEqual( Stem("underlined"), "underlin");});
test("underling -> underl", function() {deepEqual( Stem("underling"), "underl");});
test("underlings -> underl", function() {deepEqual( Stem("underlings"), "underl");});
test("underlip -> underlip", function() {deepEqual( Stem("underlip"), "underlip");});
test("undermine -> undermin", function() {deepEqual( Stem("undermine"), "undermin");});
test("underminers -> undermin", function() {deepEqual( Stem("underminers"), "undermin");});
test("underneath -> underneath", function() {deepEqual( Stem("underneath"), "underneath");});
test("underprizing -> underpr", function() {deepEqual( Stem("underprizing"), "underpr");});
test("underprop -> underprop", function() {deepEqual( Stem("underprop"), "underprop");});
test("understand -> understand", function() {deepEqual( Stem("understand"), "understand");});
test("understandeth -> understandeth", function() {deepEqual( Stem("understandeth"), "understandeth");});
test("understanding -> understand", function() {deepEqual( Stem("understanding"), "understand");});
test("understandings -> understand", function() {deepEqual( Stem("understandings"), "understand");});
test("understands -> understand", function() {deepEqual( Stem("understands"), "understand");});
test("understood -> understood", function() {deepEqual( Stem("understood"), "understood");});
test("underta -> underta", function() {deepEqual( Stem("underta"), "underta");});
test("undertake -> undertak", function() {deepEqual( Stem("undertake"), "undertak");});
test("undertakeing -> undertak", function() {deepEqual( Stem("undertakeing"), "undertak");});
test("undertaken -> undertaken", function() {deepEqual( Stem("undertaken"), "undertaken");});
test("undertaker -> undertak", function() {deepEqual( Stem("undertaker"), "undertak");});
test("undertakes -> undertak", function() {deepEqual( Stem("undertakes"), "undertak");});
test("undertaking -> undertak", function() {deepEqual( Stem("undertaking"), "undertak");});
test("undertakings -> undertak", function() {deepEqual( Stem("undertakings"), "undertak");});
test("undertook -> undertook", function() {deepEqual( Stem("undertook"), "undertook");});
test("undervalu -> undervalu", function() {deepEqual( Stem("undervalu"), "undervalu");});
test("undervalued -> undervalu", function() {deepEqual( Stem("undervalued"), "undervalu");});
test("underwent -> underw", function() {deepEqual( Stem("underwent"), "underw");});
test("underwrit -> underwrit", function() {deepEqual( Stem("underwrit"), "underwrit");});
test("underwrite -> underwrit", function() {deepEqual( Stem("underwrite"), "underwrit");});
test("undescried -> undescri", function() {deepEqual( Stem("undescried"), "undescri");});
test("undeserved -> undeserv", function() {deepEqual( Stem("undeserved"), "undeserv");});
test("undeserver -> undeserv", function() {deepEqual( Stem("undeserver"), "undeserv");});
test("undeservers -> undeserv", function() {deepEqual( Stem("undeservers"), "undeserv");});
test("undeserving -> undeserv", function() {deepEqual( Stem("undeserving"), "undeserv");});
test("undetermin -> undetermin", function() {deepEqual( Stem("undetermin"), "undetermin");});
test("undeviating -> undevi", function() {deepEqual( Stem("undeviating"), "undevi");});
test("undexterously -> undexter", function() {deepEqual( Stem("undexterously"), "undexter");});
test("undid -> undid", function() {deepEqual( Stem("undid"), "undid");});
test("undiminished -> undiminish", function() {deepEqual( Stem("undiminished"), "undiminish");});
test("undinted -> undint", function() {deepEqual( Stem("undinted"), "undint");});
test("undiscernible -> undiscern", function() {deepEqual( Stem("undiscernible"), "undiscern");});
test("undiscover -> undiscov", function() {deepEqual( Stem("undiscover"), "undiscov");});
test("undisguised -> undisguis", function() {deepEqual( Stem("undisguised"), "undisguis");});
test("undishonoured -> undishonour", function() {deepEqual( Stem("undishonoured"), "undishonour");});
test("undismayed -> undismai", function() {deepEqual( Stem("undismayed"), "undismai");});
test("undispos -> undispo", function() {deepEqual( Stem("undispos"), "undispo");});
test("undisputed -> undisput", function() {deepEqual( Stem("undisputed"), "undisput");});
test("undistinguishable -> undistinguish", function() {deepEqual( Stem("undistinguishable"), "undistinguish");});
test("undistinguished -> undistinguish", function() {deepEqual( Stem("undistinguished"), "undistinguish");});
test("undisturbed -> undisturb", function() {deepEqual( Stem("undisturbed"), "undisturb");});
test("undividable -> undivid", function() {deepEqual( Stem("undividable"), "undivid");});
test("undivided -> undivid", function() {deepEqual( Stem("undivided"), "undivid");});
test("undivulged -> undivulg", function() {deepEqual( Stem("undivulged"), "undivulg");});
test("undo -> undo", function() {deepEqual( Stem("undo"), "undo");});
test("undoes -> undo", function() {deepEqual( Stem("undoes"), "undo");});
test("undoing -> undo", function() {deepEqual( Stem("undoing"), "undo");});
test("undone -> undon", function() {deepEqual( Stem("undone"), "undon");});
test("undoubted -> undoubt", function() {deepEqual( Stem("undoubted"), "undoubt");});
test("undoubtedly -> undoubtedli", function() {deepEqual( Stem("undoubtedly"), "undoubtedli");});
test("undream -> undream", function() {deepEqual( Stem("undream"), "undream");});
test("undred -> undr", function() {deepEqual( Stem("undred"), "undr");});
test("undress -> undress", function() {deepEqual( Stem("undress"), "undress");});
test("undressed -> undress", function() {deepEqual( Stem("undressed"), "undress");});
test("undrown -> undrown", function() {deepEqual( Stem("undrown"), "undrown");});
test("undue -> undu", function() {deepEqual( Stem("undue"), "undu");});
test("undulating -> undul", function() {deepEqual( Stem("undulating"), "undul");});
test("unduteous -> undut", function() {deepEqual( Stem("unduteous"), "undut");});
test("undutiful -> unduti", function() {deepEqual( Stem("undutiful"), "unduti");});
test("undutifully -> undutifulli", function() {deepEqual( Stem("undutifully"), "undutifulli");});
test("undutifulness -> unduti", function() {deepEqual( Stem("undutifulness"), "unduti");});
test("une -> un", function() {deepEqual( Stem("une"), "un");});
test("uneared -> unear", function() {deepEqual( Stem("uneared"), "unear");});
test("unearned -> unearn", function() {deepEqual( Stem("unearned"), "unearn");});
test("unearthly -> unearthli", function() {deepEqual( Stem("unearthly"), "unearthli");});
test("uneasily -> uneasili", function() {deepEqual( Stem("uneasily"), "uneasili");});
test("uneasines -> uneasin", function() {deepEqual( Stem("uneasines"), "uneasin");});
test("uneasiness -> uneasi", function() {deepEqual( Stem("uneasiness"), "uneasi");});
test("uneasy -> uneasi", function() {deepEqual( Stem("uneasy"), "uneasi");});
test("uneath -> uneath", function() {deepEqual( Stem("uneath"), "uneath");});
test("uneducated -> uneduc", function() {deepEqual( Stem("uneducated"), "uneduc");});
test("uneffectual -> uneffectu", function() {deepEqual( Stem("uneffectual"), "uneffectu");});
test("unelected -> unelect", function() {deepEqual( Stem("unelected"), "unelect");});
test("unencumbered -> unencumb", function() {deepEqual( Stem("unencumbered"), "unencumb");});
test("unendurable -> unendur", function() {deepEqual( Stem("unendurable"), "unendur");});
test("unequal -> unequ", function() {deepEqual( Stem("unequal"), "unequ");});
test("uneven -> uneven", function() {deepEqual( Stem("uneven"), "uneven");});
test("unexamin -> unexamin", function() {deepEqual( Stem("unexamin"), "unexamin");});
test("unexecuted -> unexecut", function() {deepEqual( Stem("unexecuted"), "unexecut");});
test("unexpected -> unexpect", function() {deepEqual( Stem("unexpected"), "unexpect");});
test("unexpectedly -> unexpectedli", function() {deepEqual( Stem("unexpectedly"), "unexpectedli");});
test("unexperienc -> unexperienc", function() {deepEqual( Stem("unexperienc"), "unexperienc");});
test("unexperient -> unexperi", function() {deepEqual( Stem("unexperient"), "unexperi");});
test("unexpressive -> unexpress", function() {deepEqual( Stem("unexpressive"), "unexpress");});
test("unfair -> unfair", function() {deepEqual( Stem("unfair"), "unfair");});
test("unfaithful -> unfaith", function() {deepEqual( Stem("unfaithful"), "unfaith");});
test("unfaithfulness -> unfaith", function() {deepEqual( Stem("unfaithfulness"), "unfaith");});
test("unfallible -> unfal", function() {deepEqual( Stem("unfallible"), "unfal");});
test("unfam -> unfam", function() {deepEqual( Stem("unfam"), "unfam");});
test("unfashionable -> unfashion", function() {deepEqual( Stem("unfashionable"), "unfashion");});
test("unfasten -> unfasten", function() {deepEqual( Stem("unfasten"), "unfasten");});
test("unfather -> unfath", function() {deepEqual( Stem("unfather"), "unfath");});
test("unfathered -> unfath", function() {deepEqual( Stem("unfathered"), "unfath");});
test("unfathomable -> unfathom", function() {deepEqual( Stem("unfathomable"), "unfathom");});
test("unfavourable -> unfavour", function() {deepEqual( Stem("unfavourable"), "unfavour");});
test("unfed -> unf", function() {deepEqual( Stem("unfed"), "unf");});
test("unfeed -> unfe", function() {deepEqual( Stem("unfeed"), "unfe");});
test("unfeeling -> unfeel", function() {deepEqual( Stem("unfeeling"), "unfeel");});
test("unfeigned -> unfeign", function() {deepEqual( Stem("unfeigned"), "unfeign");});
test("unfeignedly -> unfeignedli", function() {deepEqual( Stem("unfeignedly"), "unfeignedli");});
test("unfellowed -> unfellow", function() {deepEqual( Stem("unfellowed"), "unfellow");});
test("unfelt -> unfelt", function() {deepEqual( Stem("unfelt"), "unfelt");});
test("unfenced -> unfenc", function() {deepEqual( Stem("unfenced"), "unfenc");});
test("unfilial -> unfili", function() {deepEqual( Stem("unfilial"), "unfili");});
test("unfill -> unfil", function() {deepEqual( Stem("unfill"), "unfil");});
test("unfinish -> unfinish", function() {deepEqual( Stem("unfinish"), "unfinish");});
test("unfirm -> unfirm", function() {deepEqual( Stem("unfirm"), "unfirm");});
test("unfit -> unfit", function() {deepEqual( Stem("unfit"), "unfit");});
test("unfitness -> unfit", function() {deepEqual( Stem("unfitness"), "unfit");});
test("unfix -> unfix", function() {deepEqual( Stem("unfix"), "unfix");});
test("unfledg -> unfledg", function() {deepEqual( Stem("unfledg"), "unfledg");});
test("unfold -> unfold", function() {deepEqual( Stem("unfold"), "unfold");});
test("unfolded -> unfold", function() {deepEqual( Stem("unfolded"), "unfold");});
test("unfoldeth -> unfoldeth", function() {deepEqual( Stem("unfoldeth"), "unfoldeth");});
test("unfolding -> unfold", function() {deepEqual( Stem("unfolding"), "unfold");});
test("unfolds -> unfold", function() {deepEqual( Stem("unfolds"), "unfold");});
test("unfool -> unfool", function() {deepEqual( Stem("unfool"), "unfool");});
test("unforc -> unforc", function() {deepEqual( Stem("unforc"), "unforc");});
test("unforced -> unforc", function() {deepEqual( Stem("unforced"), "unforc");});
test("unforfeited -> unforfeit", function() {deepEqual( Stem("unforfeited"), "unforfeit");});
test("unforgiven -> unforgiven", function() {deepEqual( Stem("unforgiven"), "unforgiven");});
test("unfortified -> unfortifi", function() {deepEqual( Stem("unfortified"), "unfortifi");});
test("unfortunate -> unfortun", function() {deepEqual( Stem("unfortunate"), "unfortun");});
test("unfortunates -> unfortun", function() {deepEqual( Stem("unfortunates"), "unfortun");});
test("unfought -> unfought", function() {deepEqual( Stem("unfought"), "unfought");});
test("unfounded -> unfound", function() {deepEqual( Stem("unfounded"), "unfound");});
test("unfrequented -> unfrequ", function() {deepEqual( Stem("unfrequented"), "unfrequ");});
test("unfrequently -> unfrequ", function() {deepEqual( Stem("unfrequently"), "unfrequ");});
test("unfriended -> unfriend", function() {deepEqual( Stem("unfriended"), "unfriend");});
test("unfriendly -> unfriendli", function() {deepEqual( Stem("unfriendly"), "unfriendli");});
test("unfurnish -> unfurnish", function() {deepEqual( Stem("unfurnish"), "unfurnish");});
test("unfurnished -> unfurnish", function() {deepEqual( Stem("unfurnished"), "unfurnish");});
test("ungain -> ungain", function() {deepEqual( Stem("ungain"), "ungain");});
test("ungainly -> ungainli", function() {deepEqual( Stem("ungainly"), "ungainli");});
test("ungalled -> ungal", function() {deepEqual( Stem("ungalled"), "ungal");});
test("ungart -> ungart", function() {deepEqual( Stem("ungart"), "ungart");});
test("ungarter -> ungart", function() {deepEqual( Stem("ungarter"), "ungart");});
test("ungenitur -> ungenitur", function() {deepEqual( Stem("ungenitur"), "ungenitur");});
test("ungenteel -> ungenteel", function() {deepEqual( Stem("ungenteel"), "ungenteel");});
test("ungentle -> ungentl", function() {deepEqual( Stem("ungentle"), "ungentl");});
test("ungentlemanlike -> ungentlemanlik", function() {deepEqual( Stem("ungentlemanlike"), "ungentlemanlik");});
test("ungentleness -> ungentl", function() {deepEqual( Stem("ungentleness"), "ungentl");});
test("ungently -> ungent", function() {deepEqual( Stem("ungently"), "ungent");});
test("ungird -> ungird", function() {deepEqual( Stem("ungird"), "ungird");});
test("ungodly -> ungodli", function() {deepEqual( Stem("ungodly"), "ungodli");});
test("ungor -> ungor", function() {deepEqual( Stem("ungor"), "ungor");});
test("ungot -> ungot", function() {deepEqual( Stem("ungot"), "ungot");});
test("ungotten -> ungotten", function() {deepEqual( Stem("ungotten"), "ungotten");});
test("ungovern -> ungovern", function() {deepEqual( Stem("ungovern"), "ungovern");});
test("ungracious -> ungraci", function() {deepEqual( Stem("ungracious"), "ungraci");});
test("ungrammatical -> ungrammat", function() {deepEqual( Stem("ungrammatical"), "ungrammat");});
test("ungrateful -> ungrat", function() {deepEqual( Stem("ungrateful"), "ungrat");});
test("ungratefully -> ungratefulli", function() {deepEqual( Stem("ungratefully"), "ungratefulli");});
test("ungravely -> ungrav", function() {deepEqual( Stem("ungravely"), "ungrav");});
test("ungrown -> ungrown", function() {deepEqual( Stem("ungrown"), "ungrown");});
test("unguarded -> unguard", function() {deepEqual( Stem("unguarded"), "unguard");});
test("unguem -> unguem", function() {deepEqual( Stem("unguem"), "unguem");});
test("unguided -> unguid", function() {deepEqual( Stem("unguided"), "unguid");});
test("unhack -> unhack", function() {deepEqual( Stem("unhack"), "unhack");});
test("unhair -> unhair", function() {deepEqual( Stem("unhair"), "unhair");});
test("unhallow -> unhallow", function() {deepEqual( Stem("unhallow"), "unhallow");});
test("unhallowed -> unhallow", function() {deepEqual( Stem("unhallowed"), "unhallow");});
test("unhand -> unhand", function() {deepEqual( Stem("unhand"), "unhand");});
test("unhandled -> unhandl", function() {deepEqual( Stem("unhandled"), "unhandl");});
test("unhandsome -> unhandsom", function() {deepEqual( Stem("unhandsome"), "unhandsom");});
test("unhang -> unhang", function() {deepEqual( Stem("unhang"), "unhang");});
test("unhanged -> unhang", function() {deepEqual( Stem("unhanged"), "unhang");});
test("unhap -> unhap", function() {deepEqual( Stem("unhap"), "unhap");});
test("unhappied -> unhappi", function() {deepEqual( Stem("unhappied"), "unhappi");});
test("unhappily -> unhappili", function() {deepEqual( Stem("unhappily"), "unhappili");});
test("unhappiness -> unhappi", function() {deepEqual( Stem("unhappiness"), "unhappi");});
test("unhappy -> unhappi", function() {deepEqual( Stem("unhappy"), "unhappi");});
test("unhardened -> unharden", function() {deepEqual( Stem("unhardened"), "unharden");});
test("unharm -> unharm", function() {deepEqual( Stem("unharm"), "unharm");});
test("unhatch -> unhatch", function() {deepEqual( Stem("unhatch"), "unhatch");});
test("unheard -> unheard", function() {deepEqual( Stem("unheard"), "unheard");});
test("unhearts -> unheart", function() {deepEqual( Stem("unhearts"), "unheart");});
test("unheedful -> unheed", function() {deepEqual( Stem("unheedful"), "unheed");});
test("unheedfully -> unheedfulli", function() {deepEqual( Stem("unheedfully"), "unheedfulli");});
test("unheedy -> unheedi", function() {deepEqual( Stem("unheedy"), "unheedi");});
test("unhelpful -> unhelp", function() {deepEqual( Stem("unhelpful"), "unhelp");});
test("unhidden -> unhidden", function() {deepEqual( Stem("unhidden"), "unhidden");});
test("unholy -> unholi", function() {deepEqual( Stem("unholy"), "unholi");});
test("unhop -> unhop", function() {deepEqual( Stem("unhop"), "unhop");});
test("unhopefullest -> unhopefullest", function() {deepEqual( Stem("unhopefullest"), "unhopefullest");});
test("unhorse -> unhors", function() {deepEqual( Stem("unhorse"), "unhors");});
test("unhospitable -> unhospit", function() {deepEqual( Stem("unhospitable"), "unhospit");});
test("unhous -> unhou", function() {deepEqual( Stem("unhous"), "unhou");});
test("unhoused -> unhous", function() {deepEqual( Stem("unhoused"), "unhous");});
test("unhurt -> unhurt", function() {deepEqual( Stem("unhurt"), "unhurt");});
test("unhurtful -> unhurt", function() {deepEqual( Stem("unhurtful"), "unhurt");});
test("unicorn -> unicorn", function() {deepEqual( Stem("unicorn"), "unicorn");});
test("unicorns -> unicorn", function() {deepEqual( Stem("unicorns"), "unicorn");});
test("uniform -> uniform", function() {deepEqual( Stem("uniform"), "uniform");});
test("uniforms -> uniform", function() {deepEqual( Stem("uniforms"), "uniform");});
test("unimproved -> unimprov", function() {deepEqual( Stem("unimproved"), "unimprov");});
test("uninhabitable -> uninhabit", function() {deepEqual( Stem("uninhabitable"), "uninhabit");});
test("uninhabited -> uninhabit", function() {deepEqual( Stem("uninhabited"), "uninhabit");});
test("uninitiated -> uniniti", function() {deepEqual( Stem("uninitiated"), "uniniti");});
test("uninquisitive -> uninquisit", function() {deepEqual( Stem("uninquisitive"), "uninquisit");});
test("unintelligent -> unintellig", function() {deepEqual( Stem("unintelligent"), "unintellig");});
test("unintelligible -> unintellig", function() {deepEqual( Stem("unintelligible"), "unintellig");});
test("uninteresting -> uninterest", function() {deepEqual( Stem("uninteresting"), "uninterest");});
test("uninterrupted -> uninterrupt", function() {deepEqual( Stem("uninterrupted"), "uninterrupt");});
test("union -> union", function() {deepEqual( Stem("union"), "union");});
test("unions -> union", function() {deepEqual( Stem("unions"), "union");});
test("unite -> unit", function() {deepEqual( Stem("unite"), "unit");});
test("united -> unit", function() {deepEqual( Stem("united"), "unit");});
test("uniting -> unit", function() {deepEqual( Stem("uniting"), "unit");});
test("unity -> uniti", function() {deepEqual( Stem("unity"), "uniti");});
test("universal -> univers", function() {deepEqual( Stem("universal"), "univers");});
test("universally -> univers", function() {deepEqual( Stem("universally"), "univers");});
test("universe -> univers", function() {deepEqual( Stem("universe"), "univers");});
test("universities -> univers", function() {deepEqual( Stem("universities"), "univers");});
test("university -> univers", function() {deepEqual( Stem("university"), "univers");});
test("unjointed -> unjoint", function() {deepEqual( Stem("unjointed"), "unjoint");});
test("unjust -> unjust", function() {deepEqual( Stem("unjust"), "unjust");});
test("unjustice -> unjustic", function() {deepEqual( Stem("unjustice"), "unjustic");});
test("unjustifiable -> unjustifi", function() {deepEqual( Stem("unjustifiable"), "unjustifi");});
test("unjustly -> unjustli", function() {deepEqual( Stem("unjustly"), "unjustli");});
test("unkennel -> unkennel", function() {deepEqual( Stem("unkennel"), "unkennel");});
test("unkept -> unkept", function() {deepEqual( Stem("unkept"), "unkept");});
test("unkind -> unkind", function() {deepEqual( Stem("unkind"), "unkind");});
test("unkindest -> unkindest", function() {deepEqual( Stem("unkindest"), "unkindest");});
test("unkindly -> unkindli", function() {deepEqual( Stem("unkindly"), "unkindli");});
test("unkindness -> unkind", function() {deepEqual( Stem("unkindness"), "unkind");});
test("unking -> unk", function() {deepEqual( Stem("unking"), "unk");});
test("unkinglike -> unkinglik", function() {deepEqual( Stem("unkinglike"), "unkinglik");});
test("unkiss -> unkiss", function() {deepEqual( Stem("unkiss"), "unkiss");});
test("unknit -> unknit", function() {deepEqual( Stem("unknit"), "unknit");});
test("unknowing -> unknow", function() {deepEqual( Stem("unknowing"), "unknow");});
test("unknown -> unknown", function() {deepEqual( Stem("unknown"), "unknown");});
test("unlace -> unlac", function() {deepEqual( Stem("unlace"), "unlac");});
test("unlaid -> unlaid", function() {deepEqual( Stem("unlaid"), "unlaid");});
test("unlawful -> unlaw", function() {deepEqual( Stem("unlawful"), "unlaw");});
test("unlawfully -> unlawfulli", function() {deepEqual( Stem("unlawfully"), "unlawfulli");});
test("unlearn -> unlearn", function() {deepEqual( Stem("unlearn"), "unlearn");});
test("unlearned -> unlearn", function() {deepEqual( Stem("unlearned"), "unlearn");});
test("unless -> unless", function() {deepEqual( Stem("unless"), "unless");});
test("unlesson -> unlesson", function() {deepEqual( Stem("unlesson"), "unlesson");});
test("unletter -> unlett", function() {deepEqual( Stem("unletter"), "unlett");});
test("unlettered -> unlett", function() {deepEqual( Stem("unlettered"), "unlett");});
test("unlick -> unlick", function() {deepEqual( Stem("unlick"), "unlick");});
test("unlike -> unlik", function() {deepEqual( Stem("unlike"), "unlik");});
test("unlikely -> unlik", function() {deepEqual( Stem("unlikely"), "unlik");});
test("unlimited -> unlimit", function() {deepEqual( Stem("unlimited"), "unlimit");});
test("unlineal -> unlin", function() {deepEqual( Stem("unlineal"), "unlin");});
test("unlink -> unlink", function() {deepEqual( Stem("unlink"), "unlink");});
test("unload -> unload", function() {deepEqual( Stem("unload"), "unload");});
test("unloaded -> unload", function() {deepEqual( Stem("unloaded"), "unload");});
test("unloading -> unload", function() {deepEqual( Stem("unloading"), "unload");});
test("unloads -> unload", function() {deepEqual( Stem("unloads"), "unload");});
test("unlock -> unlock", function() {deepEqual( Stem("unlock"), "unlock");});
test("unlocked -> unlock", function() {deepEqual( Stem("unlocked"), "unlock");});
test("unlocks -> unlock", function() {deepEqual( Stem("unlocks"), "unlock");});
test("unlook -> unlook", function() {deepEqual( Stem("unlook"), "unlook");});
test("unlooked -> unlook", function() {deepEqual( Stem("unlooked"), "unlook");});
test("unloos -> unloo", function() {deepEqual( Stem("unloos"), "unloo");});
test("unloose -> unloos", function() {deepEqual( Stem("unloose"), "unloos");});
test("unloosed -> unloos", function() {deepEqual( Stem("unloosed"), "unloos");});
test("unlov -> unlov", function() {deepEqual( Stem("unlov"), "unlov");});
test("unloving -> unlov", function() {deepEqual( Stem("unloving"), "unlov");});
test("unluckily -> unluckili", function() {deepEqual( Stem("unluckily"), "unluckili");});
test("unlucky -> unlucki", function() {deepEqual( Stem("unlucky"), "unlucki");});
test("unmade -> unmad", function() {deepEqual( Stem("unmade"), "unmad");});
test("unmake -> unmak", function() {deepEqual( Stem("unmake"), "unmak");});
test("unmanly -> unmanli", function() {deepEqual( Stem("unmanly"), "unmanli");});
test("unmann -> unmann", function() {deepEqual( Stem("unmann"), "unmann");});
test("unmanned -> unman", function() {deepEqual( Stem("unmanned"), "unman");});
test("unmanner -> unmann", function() {deepEqual( Stem("unmanner"), "unmann");});
test("unmannerd -> unmannerd", function() {deepEqual( Stem("unmannerd"), "unmannerd");});
test("unmannerly -> unmannerli", function() {deepEqual( Stem("unmannerly"), "unmannerli");});
test("unmarried -> unmarri", function() {deepEqual( Stem("unmarried"), "unmarri");});
test("unmask -> unmask", function() {deepEqual( Stem("unmask"), "unmask");});
test("unmasked -> unmask", function() {deepEqual( Stem("unmasked"), "unmask");});
test("unmasking -> unmask", function() {deepEqual( Stem("unmasking"), "unmask");});
test("unmasks -> unmask", function() {deepEqual( Stem("unmasks"), "unmask");});
test("unmast -> unmast", function() {deepEqual( Stem("unmast"), "unmast");});
test("unmatch -> unmatch", function() {deepEqual( Stem("unmatch"), "unmatch");});
test("unmatchable -> unmatch", function() {deepEqual( Stem("unmatchable"), "unmatch");});
test("unmatched -> unmatch", function() {deepEqual( Stem("unmatched"), "unmatch");});
test("unmeasurable -> unmeasur", function() {deepEqual( Stem("unmeasurable"), "unmeasur");});
test("unmeet -> unmeet", function() {deepEqual( Stem("unmeet"), "unmeet");});
test("unmellowed -> unmellow", function() {deepEqual( Stem("unmellowed"), "unmellow");});
test("unmerciful -> unmerci", function() {deepEqual( Stem("unmerciful"), "unmerci");});
test("unmercifully -> unmercifulli", function() {deepEqual( Stem("unmercifully"), "unmercifulli");});
test("unmeritable -> unmerit", function() {deepEqual( Stem("unmeritable"), "unmerit");});
test("unmeriting -> unmerit", function() {deepEqual( Stem("unmeriting"), "unmerit");});
test("unminded -> unmind", function() {deepEqual( Stem("unminded"), "unmind");});
test("unmindfull -> unmindful", function() {deepEqual( Stem("unmindfull"), "unmindful");});
test("unmingled -> unmingl", function() {deepEqual( Stem("unmingled"), "unmingl");});
test("unmistakably -> unmistak", function() {deepEqual( Stem("unmistakably"), "unmistak");});
test("unmitigable -> unmitig", function() {deepEqual( Stem("unmitigable"), "unmitig");});
test("unmitigated -> unmitig", function() {deepEqual( Stem("unmitigated"), "unmitig");});
test("unmix -> unmix", function() {deepEqual( Stem("unmix"), "unmix");});
test("unmoan -> unmoan", function() {deepEqual( Stem("unmoan"), "unmoan");});
test("unmolested -> unmolest", function() {deepEqual( Stem("unmolested"), "unmolest");});
test("unmov -> unmov", function() {deepEqual( Stem("unmov"), "unmov");});
test("unmoved -> unmov", function() {deepEqual( Stem("unmoved"), "unmov");});
test("unmoving -> unmov", function() {deepEqual( Stem("unmoving"), "unmov");});
test("unmuffles -> unmuffl", function() {deepEqual( Stem("unmuffles"), "unmuffl");});
test("unmuffling -> unmuffl", function() {deepEqual( Stem("unmuffling"), "unmuffl");});
test("unmusical -> unmus", function() {deepEqual( Stem("unmusical"), "unmus");});
test("unmuzzle -> unmuzzl", function() {deepEqual( Stem("unmuzzle"), "unmuzzl");});
test("unmuzzled -> unmuzzl", function() {deepEqual( Stem("unmuzzled"), "unmuzzl");});
test("unnatural -> unnatur", function() {deepEqual( Stem("unnatural"), "unnatur");});
test("unnaturally -> unnatur", function() {deepEqual( Stem("unnaturally"), "unnatur");});
test("unnaturalness -> unnatur", function() {deepEqual( Stem("unnaturalness"), "unnatur");});
test("unnecessarily -> unnecessarili", function() {deepEqual( Stem("unnecessarily"), "unnecessarili");});
test("unnecessary -> unnecessari", function() {deepEqual( Stem("unnecessary"), "unnecessari");});
test("unneighbourly -> unneighbourli", function() {deepEqual( Stem("unneighbourly"), "unneighbourli");});
test("unnerved -> unnerv", function() {deepEqual( Stem("unnerved"), "unnerv");});
test("unnoble -> unnobl", function() {deepEqual( Stem("unnoble"), "unnobl");});
test("unnoted -> unnot", function() {deepEqual( Stem("unnoted"), "unnot");});
test("unnoticed -> unnot", function() {deepEqual( Stem("unnoticed"), "unnot");});
test("unnumb -> unnumb", function() {deepEqual( Stem("unnumb"), "unnumb");});
test("unnumber -> unnumb", function() {deepEqual( Stem("unnumber"), "unnumb");});
test("unobserved -> unobserv", function() {deepEqual( Stem("unobserved"), "unobserv");});
test("unoccupied -> unoccupi", function() {deepEqual( Stem("unoccupied"), "unoccupi");});
test("unoffending -> unoffend", function() {deepEqual( Stem("unoffending"), "unoffend");});
test("unopened -> unopen", function() {deepEqual( Stem("unopened"), "unopen");});
test("unowed -> unow", function() {deepEqual( Stem("unowed"), "unow");});
test("unpack -> unpack", function() {deepEqual( Stem("unpack"), "unpack");});
test("unpaid -> unpaid", function() {deepEqual( Stem("unpaid"), "unpaid");});
test("unparagon -> unparagon", function() {deepEqual( Stem("unparagon"), "unparagon");});
test("unparallel -> unparallel", function() {deepEqual( Stem("unparallel"), "unparallel");});
test("unparalleled -> unparallel", function() {deepEqual( Stem("unparalleled"), "unparallel");});
test("unpartial -> unparti", function() {deepEqual( Stem("unpartial"), "unparti");});
test("unpath -> unpath", function() {deepEqual( Stem("unpath"), "unpath");});
test("unpaved -> unpav", function() {deepEqual( Stem("unpaved"), "unpav");});
test("unpay -> unpai", function() {deepEqual( Stem("unpay"), "unpai");});
test("unpeaceable -> unpeac", function() {deepEqual( Stem("unpeaceable"), "unpeac");});
test("unpeg -> unpeg", function() {deepEqual( Stem("unpeg"), "unpeg");});
test("unpeople -> unpeopl", function() {deepEqual( Stem("unpeople"), "unpeopl");});
test("unpeopled -> unpeopl", function() {deepEqual( Stem("unpeopled"), "unpeopl");});
test("unperfect -> unperfect", function() {deepEqual( Stem("unperfect"), "unperfect");});
test("unperfectness -> unperfect", function() {deepEqual( Stem("unperfectness"), "unperfect");});
test("unpick -> unpick", function() {deepEqual( Stem("unpick"), "unpick");});
test("unpin -> unpin", function() {deepEqual( Stem("unpin"), "unpin");});
test("unpink -> unpink", function() {deepEqual( Stem("unpink"), "unpink");});
test("unpitied -> unpiti", function() {deepEqual( Stem("unpitied"), "unpiti");});
test("unpitifully -> unpitifulli", function() {deepEqual( Stem("unpitifully"), "unpitifulli");});
test("unplagu -> unplagu", function() {deepEqual( Stem("unplagu"), "unplagu");});
test("unplausive -> unplaus", function() {deepEqual( Stem("unplausive"), "unplaus");});
test("unpleas -> unplea", function() {deepEqual( Stem("unpleas"), "unplea");});
test("unpleasant -> unpleas", function() {deepEqual( Stem("unpleasant"), "unpleas");});
test("unpleasing -> unpleas", function() {deepEqual( Stem("unpleasing"), "unpleas");});
test("unpolicied -> unpolici", function() {deepEqual( Stem("unpolicied"), "unpolici");});
test("unpolish -> unpolish", function() {deepEqual( Stem("unpolish"), "unpolish");});
test("unpolished -> unpolish", function() {deepEqual( Stem("unpolished"), "unpolish");});
test("unpolluted -> unpollut", function() {deepEqual( Stem("unpolluted"), "unpollut");});
test("unpossess -> unpossess", function() {deepEqual( Stem("unpossess"), "unpossess");});
test("unpossessing -> unpossess", function() {deepEqual( Stem("unpossessing"), "unpossess");});
test("unpossible -> unposs", function() {deepEqual( Stem("unpossible"), "unposs");});
test("unpractis -> unpracti", function() {deepEqual( Stem("unpractis"), "unpracti");});
test("unpregnant -> unpregn", function() {deepEqual( Stem("unpregnant"), "unpregn");});
test("unpremeditated -> unpremedit", function() {deepEqual( Stem("unpremeditated"), "unpremedit");});
test("unprepar -> unprepar", function() {deepEqual( Stem("unprepar"), "unprepar");});
test("unprepared -> unprepar", function() {deepEqual( Stem("unprepared"), "unprepar");});
test("unprepossessing -> unprepossess", function() {deepEqual( Stem("unprepossessing"), "unprepossess");});
test("unpress -> unpress", function() {deepEqual( Stem("unpress"), "unpress");});
test("unpretending -> unpretend", function() {deepEqual( Stem("unpretending"), "unpretend");});
test("unprevailing -> unprevail", function() {deepEqual( Stem("unprevailing"), "unprevail");});
test("unprevented -> unprev", function() {deepEqual( Stem("unprevented"), "unprev");});
test("unprincipled -> unprincipl", function() {deepEqual( Stem("unprincipled"), "unprincipl");});
test("unpriz -> unpriz", function() {deepEqual( Stem("unpriz"), "unpriz");});
test("unprizable -> unpriz", function() {deepEqual( Stem("unprizable"), "unpriz");});
test("unprofitable -> unprofit", function() {deepEqual( Stem("unprofitable"), "unprofit");});
test("unprofited -> unprofit", function() {deepEqual( Stem("unprofited"), "unprofit");});
test("unproper -> unprop", function() {deepEqual( Stem("unproper"), "unprop");});
test("unproperly -> unproperli", function() {deepEqual( Stem("unproperly"), "unproperli");});
test("unproportion -> unproport", function() {deepEqual( Stem("unproportion"), "unproport");});
test("unprosperous -> unprosper", function() {deepEqual( Stem("unprosperous"), "unprosper");});
test("unprosperously -> unprosper", function() {deepEqual( Stem("unprosperously"), "unprosper");});
test("unprotected -> unprotect", function() {deepEqual( Stem("unprotected"), "unprotect");});
test("unprovide -> unprovid", function() {deepEqual( Stem("unprovide"), "unprovid");});
test("unprovided -> unprovid", function() {deepEqual( Stem("unprovided"), "unprovid");});
test("unprovident -> unprovid", function() {deepEqual( Stem("unprovident"), "unprovid");});
test("unprovokes -> unprovok", function() {deepEqual( Stem("unprovokes"), "unprovok");});
test("unprun -> unprun", function() {deepEqual( Stem("unprun"), "unprun");});
test("unpruned -> unprun", function() {deepEqual( Stem("unpruned"), "unprun");});
test("unpublish -> unpublish", function() {deepEqual( Stem("unpublish"), "unpublish");});
test("unpurged -> unpurg", function() {deepEqual( Stem("unpurged"), "unpurg");});
test("unpurpos -> unpurpo", function() {deepEqual( Stem("unpurpos"), "unpurpo");});
test("unqualitied -> unqual", function() {deepEqual( Stem("unqualitied"), "unqual");});
test("unqueen -> unqueen", function() {deepEqual( Stem("unqueen"), "unqueen");});
test("unquestion -> unquest", function() {deepEqual( Stem("unquestion"), "unquest");});
test("unquestionable -> unquestion", function() {deepEqual( Stem("unquestionable"), "unquestion");});
test("unquestioned -> unquest", function() {deepEqual( Stem("unquestioned"), "unquest");});
test("unquiet -> unquiet", function() {deepEqual( Stem("unquiet"), "unquiet");});
test("unquietly -> unquietli", function() {deepEqual( Stem("unquietly"), "unquietli");});
test("unquietness -> unquiet", function() {deepEqual( Stem("unquietness"), "unquiet");});
test("unraised -> unrais", function() {deepEqual( Stem("unraised"), "unrais");});
test("unrak -> unrak", function() {deepEqual( Stem("unrak"), "unrak");});
test("unravel -> unravel", function() {deepEqual( Stem("unravel"), "unravel");});
test("unread -> unread", function() {deepEqual( Stem("unread"), "unread");});
test("unready -> unreadi", function() {deepEqual( Stem("unready"), "unreadi");});
test("unreal -> unreal", function() {deepEqual( Stem("unreal"), "unreal");});
test("unreasonable -> unreason", function() {deepEqual( Stem("unreasonable"), "unreason");});
test("unreasonably -> unreason", function() {deepEqual( Stem("unreasonably"), "unreason");});
test("unreclaimed -> unreclaim", function() {deepEqual( Stem("unreclaimed"), "unreclaim");});
test("unreconciled -> unreconcil", function() {deepEqual( Stem("unreconciled"), "unreconcil");});
test("unreconciliable -> unreconcili", function() {deepEqual( Stem("unreconciliable"), "unreconcili");});
test("unrecounted -> unrecount", function() {deepEqual( Stem("unrecounted"), "unrecount");});
test("unrecuring -> unrecur", function() {deepEqual( Stem("unrecuring"), "unrecur");});
test("unregarded -> unregard", function() {deepEqual( Stem("unregarded"), "unregard");});
test("unregist -> unregist", function() {deepEqual( Stem("unregist"), "unregist");});
test("unrelenting -> unrel", function() {deepEqual( Stem("unrelenting"), "unrel");});
test("unremarked -> unremark", function() {deepEqual( Stem("unremarked"), "unremark");});
test("unremovable -> unremov", function() {deepEqual( Stem("unremovable"), "unremov");});
test("unremovably -> unremov", function() {deepEqual( Stem("unremovably"), "unremov");});
test("unrepining -> unrepin", function() {deepEqual( Stem("unrepining"), "unrepin");});
test("unreprievable -> unrepriev", function() {deepEqual( Stem("unreprievable"), "unrepriev");});
test("unrequited -> unrequit", function() {deepEqual( Stem("unrequited"), "unrequit");});
test("unreserved -> unreserv", function() {deepEqual( Stem("unreserved"), "unreserv");});
test("unreservedly -> unreservedli", function() {deepEqual( Stem("unreservedly"), "unreservedli");});
test("unresolv -> unresolv", function() {deepEqual( Stem("unresolv"), "unresolv");});
test("unrespected -> unrespect", function() {deepEqual( Stem("unrespected"), "unrespect");});
test("unrespective -> unrespect", function() {deepEqual( Stem("unrespective"), "unrespect");});
test("unrest -> unrest", function() {deepEqual( Stem("unrest"), "unrest");});
test("unrestor -> unrestor", function() {deepEqual( Stem("unrestor"), "unrestor");});
test("unrestrained -> unrestrain", function() {deepEqual( Stem("unrestrained"), "unrestrain");});
test("unrevealed -> unrev", function() {deepEqual( Stem("unrevealed"), "unrev");});
test("unreveng -> unreveng", function() {deepEqual( Stem("unreveng"), "unreveng");});
test("unreverend -> unreverend", function() {deepEqual( Stem("unreverend"), "unreverend");});
test("unreverent -> unrever", function() {deepEqual( Stem("unreverent"), "unrever");});
test("unrevers -> unrev", function() {deepEqual( Stem("unrevers"), "unrev");});
test("unrewarded -> unreward", function() {deepEqual( Stem("unrewarded"), "unreward");});
test("unrighteous -> unright", function() {deepEqual( Stem("unrighteous"), "unright");});
test("unrighteousness -> unright", function() {deepEqual( Stem("unrighteousness"), "unright");});
test("unrightful -> unright", function() {deepEqual( Stem("unrightful"), "unright");});
test("unripe -> unrip", function() {deepEqual( Stem("unripe"), "unrip");});
test("unripp -> unripp", function() {deepEqual( Stem("unripp"), "unripp");});
test("unrivall -> unrival", function() {deepEqual( Stem("unrivall"), "unrival");});
test("unroll -> unrol", function() {deepEqual( Stem("unroll"), "unrol");});
test("unromantic -> unromant", function() {deepEqual( Stem("unromantic"), "unromant");});
test("unroof -> unroof", function() {deepEqual( Stem("unroof"), "unroof");});
test("unroosted -> unroost", function() {deepEqual( Stem("unroosted"), "unroost");});
test("unroot -> unroot", function() {deepEqual( Stem("unroot"), "unroot");});
test("unrough -> unrough", function() {deepEqual( Stem("unrough"), "unrough");});
test("unruly -> unruli", function() {deepEqual( Stem("unruly"), "unruli");});
test("unsafe -> unsaf", function() {deepEqual( Stem("unsafe"), "unsaf");});
test("unsaid -> unsaid", function() {deepEqual( Stem("unsaid"), "unsaid");});
test("unsaluted -> unsalut", function() {deepEqual( Stem("unsaluted"), "unsalut");});
test("unsanctified -> unsanctifi", function() {deepEqual( Stem("unsanctified"), "unsanctifi");});
test("unsatisfactory -> unsatisfactori", function() {deepEqual( Stem("unsatisfactory"), "unsatisfactori");});
test("unsatisfied -> unsatisfi", function() {deepEqual( Stem("unsatisfied"), "unsatisfi");});
test("unsavoury -> unsavouri", function() {deepEqual( Stem("unsavoury"), "unsavouri");});
test("unsay -> unsai", function() {deepEqual( Stem("unsay"), "unsai");});
test("unscalable -> unscal", function() {deepEqual( Stem("unscalable"), "unscal");});
test("unscann -> unscann", function() {deepEqual( Stem("unscann"), "unscann");});
test("unscared -> unscar", function() {deepEqual( Stem("unscared"), "unscar");});
test("unscarr -> unscarr", function() {deepEqual( Stem("unscarr"), "unscarr");});
test("unschool -> unschool", function() {deepEqual( Stem("unschool"), "unschool");});
test("unscorch -> unscorch", function() {deepEqual( Stem("unscorch"), "unscorch");});
test("unscour -> unscour", function() {deepEqual( Stem("unscour"), "unscour");});
test("unscratch -> unscratch", function() {deepEqual( Stem("unscratch"), "unscratch");});
test("unscrupulous -> unscrupul", function() {deepEqual( Stem("unscrupulous"), "unscrupul");});
test("unseal -> unseal", function() {deepEqual( Stem("unseal"), "unseal");});
test("unseam -> unseam", function() {deepEqual( Stem("unseam"), "unseam");});
test("unsearch -> unsearch", function() {deepEqual( Stem("unsearch"), "unsearch");});
test("unseason -> unseason", function() {deepEqual( Stem("unseason"), "unseason");});
test("unseasonable -> unseason", function() {deepEqual( Stem("unseasonable"), "unseason");});
test("unseasonably -> unseason", function() {deepEqual( Stem("unseasonably"), "unseason");});
test("unseasoned -> unseason", function() {deepEqual( Stem("unseasoned"), "unseason");});
test("unseconded -> unsecond", function() {deepEqual( Stem("unseconded"), "unsecond");});
test("unsecret -> unsecret", function() {deepEqual( Stem("unsecret"), "unsecret");});
test("unseduc -> unseduc", function() {deepEqual( Stem("unseduc"), "unseduc");});
test("unseeing -> unse", function() {deepEqual( Stem("unseeing"), "unse");});
test("unseeming -> unseem", function() {deepEqual( Stem("unseeming"), "unseem");});
test("unseemly -> unseemli", function() {deepEqual( Stem("unseemly"), "unseemli");});
test("unseen -> unseen", function() {deepEqual( Stem("unseen"), "unseen");});
test("unseminar -> unseminar", function() {deepEqual( Stem("unseminar"), "unseminar");});
test("unseparable -> unsepar", function() {deepEqual( Stem("unseparable"), "unsepar");});
test("unserviceable -> unservic", function() {deepEqual( Stem("unserviceable"), "unservic");});
test("unset -> unset", function() {deepEqual( Stem("unset"), "unset");});
test("unsettle -> unsettl", function() {deepEqual( Stem("unsettle"), "unsettl");});
test("unsettled -> unsettl", function() {deepEqual( Stem("unsettled"), "unsettl");});
test("unsever -> unsev", function() {deepEqual( Stem("unsever"), "unsev");});
test("unsewed -> unsew", function() {deepEqual( Stem("unsewed"), "unsew");});
test("unsex -> unsex", function() {deepEqual( Stem("unsex"), "unsex");});
test("unshak -> unshak", function() {deepEqual( Stem("unshak"), "unshak");});
test("unshaked -> unshak", function() {deepEqual( Stem("unshaked"), "unshak");});
test("unshaken -> unshaken", function() {deepEqual( Stem("unshaken"), "unshaken");});
test("unshaped -> unshap", function() {deepEqual( Stem("unshaped"), "unshap");});
test("unshapes -> unshap", function() {deepEqual( Stem("unshapes"), "unshap");});
test("unsheath -> unsheath", function() {deepEqual( Stem("unsheath"), "unsheath");});
test("unsheathe -> unsheath", function() {deepEqual( Stem("unsheathe"), "unsheath");});
test("unshorn -> unshorn", function() {deepEqual( Stem("unshorn"), "unshorn");});
test("unshout -> unshout", function() {deepEqual( Stem("unshout"), "unshout");});
test("unshown -> unshown", function() {deepEqual( Stem("unshown"), "unshown");});
test("unshrinking -> unshrink", function() {deepEqual( Stem("unshrinking"), "unshrink");});
test("unshrubb -> unshrubb", function() {deepEqual( Stem("unshrubb"), "unshrubb");});
test("unshunn -> unshunn", function() {deepEqual( Stem("unshunn"), "unshunn");});
test("unshunnable -> unshunn", function() {deepEqual( Stem("unshunnable"), "unshunn");});
test("unsifted -> unsift", function() {deepEqual( Stem("unsifted"), "unsift");});
test("unsightly -> unsightli", function() {deepEqual( Stem("unsightly"), "unsightli");});
test("unsinew -> unsinew", function() {deepEqual( Stem("unsinew"), "unsinew");});
test("unsisting -> unsist", function() {deepEqual( Stem("unsisting"), "unsist");});
test("unskilful -> unskil", function() {deepEqual( Stem("unskilful"), "unskil");});
test("unskilfully -> unskilfulli", function() {deepEqual( Stem("unskilfully"), "unskilfulli");});
test("unskillful -> unskil", function() {deepEqual( Stem("unskillful"), "unskil");});
test("unslipping -> unslip", function() {deepEqual( Stem("unslipping"), "unslip");});
test("unsmirched -> unsmirch", function() {deepEqual( Stem("unsmirched"), "unsmirch");});
test("unsoil -> unsoil", function() {deepEqual( Stem("unsoil"), "unsoil");});
test("unsolicited -> unsolicit", function() {deepEqual( Stem("unsolicited"), "unsolicit");});
test("unsophisticated -> unsophist", function() {deepEqual( Stem("unsophisticated"), "unsophist");});
test("unsorted -> unsort", function() {deepEqual( Stem("unsorted"), "unsort");});
test("unsought -> unsought", function() {deepEqual( Stem("unsought"), "unsought");});
test("unsound -> unsound", function() {deepEqual( Stem("unsound"), "unsound");});
test("unsounded -> unsound", function() {deepEqual( Stem("unsounded"), "unsound");});
test("unsparingly -> unsparingli", function() {deepEqual( Stem("unsparingly"), "unsparingli");});
test("unspeak -> unspeak", function() {deepEqual( Stem("unspeak"), "unspeak");});
test("unspeakable -> unspeak", function() {deepEqual( Stem("unspeakable"), "unspeak");});
test("unspeaking -> unspeak", function() {deepEqual( Stem("unspeaking"), "unspeak");});
test("unsphere -> unspher", function() {deepEqual( Stem("unsphere"), "unspher");});
test("unspoke -> unspok", function() {deepEqual( Stem("unspoke"), "unspok");});
test("unspoken -> unspoken", function() {deepEqual( Stem("unspoken"), "unspoken");});
test("unspotted -> unspot", function() {deepEqual( Stem("unspotted"), "unspot");});
test("unsquar -> unsquar", function() {deepEqual( Stem("unsquar"), "unsquar");});
test("unstable -> unstabl", function() {deepEqual( Stem("unstable"), "unstabl");});
test("unstaid -> unstaid", function() {deepEqual( Stem("unstaid"), "unstaid");});
test("unstain -> unstain", function() {deepEqual( Stem("unstain"), "unstain");});
test("unstained -> unstain", function() {deepEqual( Stem("unstained"), "unstain");});
test("unstanched -> unstanch", function() {deepEqual( Stem("unstanched"), "unstanch");});
test("unstate -> unstat", function() {deepEqual( Stem("unstate"), "unstat");});
test("unsteadfast -> unsteadfast", function() {deepEqual( Stem("unsteadfast"), "unsteadfast");});
test("unsteady -> unsteadi", function() {deepEqual( Stem("unsteady"), "unsteadi");});
test("unstooping -> unstoop", function() {deepEqual( Stem("unstooping"), "unstoop");});
test("unstringed -> unstring", function() {deepEqual( Stem("unstringed"), "unstring");});
test("unstuff -> unstuff", function() {deepEqual( Stem("unstuff"), "unstuff");});
test("unsubstantial -> unsubstanti", function() {deepEqual( Stem("unsubstantial"), "unsubstanti");});
test("unsuccessful -> unsuccess", function() {deepEqual( Stem("unsuccessful"), "unsuccess");});
test("unsuitable -> unsuit", function() {deepEqual( Stem("unsuitable"), "unsuit");});
test("unsuiting -> unsuit", function() {deepEqual( Stem("unsuiting"), "unsuit");});
test("unsullied -> unsulli", function() {deepEqual( Stem("unsullied"), "unsulli");});
test("unsunn -> unsunn", function() {deepEqual( Stem("unsunn"), "unsunn");});
test("unsupported -> unsupport", function() {deepEqual( Stem("unsupported"), "unsupport");});
test("unsur -> unsur", function() {deepEqual( Stem("unsur"), "unsur");});
test("unsure -> unsur", function() {deepEqual( Stem("unsure"), "unsur");});
test("unsurpassable -> unsurpass", function() {deepEqual( Stem("unsurpassable"), "unsurpass");});
test("unsuspected -> unsuspect", function() {deepEqual( Stem("unsuspected"), "unsuspect");});
test("unsuspicious -> unsuspici", function() {deepEqual( Stem("unsuspicious"), "unsuspici");});
test("unsuspiciously -> unsuspici", function() {deepEqual( Stem("unsuspiciously"), "unsuspici");});
test("unsway -> unswai", function() {deepEqual( Stem("unsway"), "unswai");});
test("unswayable -> unsway", function() {deepEqual( Stem("unswayable"), "unsway");});
test("unswayed -> unswai", function() {deepEqual( Stem("unswayed"), "unswai");});
test("unswear -> unswear", function() {deepEqual( Stem("unswear"), "unswear");});
test("unswept -> unswept", function() {deepEqual( Stem("unswept"), "unswept");});
test("unsworn -> unsworn", function() {deepEqual( Stem("unsworn"), "unsworn");});
test("untainted -> untaint", function() {deepEqual( Stem("untainted"), "untaint");});
test("untalk -> untalk", function() {deepEqual( Stem("untalk"), "untalk");});
test("untangle -> untangl", function() {deepEqual( Stem("untangle"), "untangl");});
test("untangled -> untangl", function() {deepEqual( Stem("untangled"), "untangl");});
test("untasted -> untast", function() {deepEqual( Stem("untasted"), "untast");});
test("untaught -> untaught", function() {deepEqual( Stem("untaught"), "untaught");});
test("untempering -> untemp", function() {deepEqual( Stem("untempering"), "untemp");});
test("untender -> untend", function() {deepEqual( Stem("untender"), "untend");});
test("untent -> untent", function() {deepEqual( Stem("untent"), "untent");});
test("untented -> untent", function() {deepEqual( Stem("untented"), "untent");});
test("unthankful -> unthank", function() {deepEqual( Stem("unthankful"), "unthank");});
test("unthankfulness -> unthank", function() {deepEqual( Stem("unthankfulness"), "unthank");});
test("unthink -> unthink", function() {deepEqual( Stem("unthink"), "unthink");});
test("unthought -> unthought", function() {deepEqual( Stem("unthought"), "unthought");});
test("unthread -> unthread", function() {deepEqual( Stem("unthread"), "unthread");});
test("unthrift -> unthrift", function() {deepEqual( Stem("unthrift"), "unthrift");});
test("unthrifts -> unthrift", function() {deepEqual( Stem("unthrifts"), "unthrift");});
test("unthrifty -> unthrifti", function() {deepEqual( Stem("unthrifty"), "unthrifti");});
test("untie -> unti", function() {deepEqual( Stem("untie"), "unti");});
test("untied -> unti", function() {deepEqual( Stem("untied"), "unti");});
test("until -> until", function() {deepEqual( Stem("until"), "until");});
test("untimber -> untimb", function() {deepEqual( Stem("untimber"), "untimb");});
test("untimely -> untim", function() {deepEqual( Stem("untimely"), "untim");});
test("untir -> untir", function() {deepEqual( Stem("untir"), "untir");});
test("untirable -> untir", function() {deepEqual( Stem("untirable"), "untir");});
test("untired -> untir", function() {deepEqual( Stem("untired"), "untir");});
test("untiring -> untir", function() {deepEqual( Stem("untiring"), "untir");});
test("untitled -> untitl", function() {deepEqual( Stem("untitled"), "untitl");});
test("unto -> unto", function() {deepEqual( Stem("unto"), "unto");});
test("untold -> untold", function() {deepEqual( Stem("untold"), "untold");});
test("untouch -> untouch", function() {deepEqual( Stem("untouch"), "untouch");});
test("untouched -> untouch", function() {deepEqual( Stem("untouched"), "untouch");});
test("untoward -> untoward", function() {deepEqual( Stem("untoward"), "untoward");});
test("untowardly -> untowardli", function() {deepEqual( Stem("untowardly"), "untowardli");});
test("untraded -> untrad", function() {deepEqual( Stem("untraded"), "untrad");});
test("untrain -> untrain", function() {deepEqual( Stem("untrain"), "untrain");});
test("untrained -> untrain", function() {deepEqual( Stem("untrained"), "untrain");});
test("untread -> untread", function() {deepEqual( Stem("untread"), "untread");});
test("untreasur -> untreasur", function() {deepEqual( Stem("untreasur"), "untreasur");});
test("untried -> untri", function() {deepEqual( Stem("untried"), "untri");});
test("untrimmed -> untrim", function() {deepEqual( Stem("untrimmed"), "untrim");});
test("untrod -> untrod", function() {deepEqual( Stem("untrod"), "untrod");});
test("untrodden -> untrodden", function() {deepEqual( Stem("untrodden"), "untrodden");});
test("untroubled -> untroubl", function() {deepEqual( Stem("untroubled"), "untroubl");});
test("untrue -> untru", function() {deepEqual( Stem("untrue"), "untru");});
test("untrussing -> untruss", function() {deepEqual( Stem("untrussing"), "untruss");});
test("untruth -> untruth", function() {deepEqual( Stem("untruth"), "untruth");});
test("untruths -> untruth", function() {deepEqual( Stem("untruths"), "untruth");});
test("untucked -> untuck", function() {deepEqual( Stem("untucked"), "untuck");});
test("untun -> untun", function() {deepEqual( Stem("untun"), "untun");});
test("untune -> untun", function() {deepEqual( Stem("untune"), "untun");});
test("untuneable -> untun", function() {deepEqual( Stem("untuneable"), "untun");});
test("untutor -> untutor", function() {deepEqual( Stem("untutor"), "untutor");});
test("untutored -> untutor", function() {deepEqual( Stem("untutored"), "untutor");});
test("untwine -> untwin", function() {deepEqual( Stem("untwine"), "untwin");});
test("untying -> unti", function() {deepEqual( Stem("untying"), "unti");});
test("unurg -> unurg", function() {deepEqual( Stem("unurg"), "unurg");});
test("unus -> unu", function() {deepEqual( Stem("unus"), "unu");});
test("unused -> unus", function() {deepEqual( Stem("unused"), "unus");});
test("unusual -> unusu", function() {deepEqual( Stem("unusual"), "unusu");});
test("unusually -> unusu", function() {deepEqual( Stem("unusually"), "unusu");});
test("unutterable -> unutter", function() {deepEqual( Stem("unutterable"), "unutter");});
test("unvalued -> unvalu", function() {deepEqual( Stem("unvalued"), "unvalu");});
test("unvanquish -> unvanquish", function() {deepEqual( Stem("unvanquish"), "unvanquish");});
test("unvarnish -> unvarnish", function() {deepEqual( Stem("unvarnish"), "unvarnish");});
test("unveil -> unveil", function() {deepEqual( Stem("unveil"), "unveil");});
test("unveiling -> unveil", function() {deepEqual( Stem("unveiling"), "unveil");});
test("unvenerable -> unvener", function() {deepEqual( Stem("unvenerable"), "unvener");});
test("unvex -> unvex", function() {deepEqual( Stem("unvex"), "unvex");});
test("unviolated -> unviol", function() {deepEqual( Stem("unviolated"), "unviol");});
test("unvirtuous -> unvirtu", function() {deepEqual( Stem("unvirtuous"), "unvirtu");});
test("unvisited -> unvisit", function() {deepEqual( Stem("unvisited"), "unvisit");});
test("unvulnerable -> unvulner", function() {deepEqual( Stem("unvulnerable"), "unvulner");});
test("unwares -> unwar", function() {deepEqual( Stem("unwares"), "unwar");});
test("unwarily -> unwarili", function() {deepEqual( Stem("unwarily"), "unwarili");});
test("unwash -> unwash", function() {deepEqual( Stem("unwash"), "unwash");});
test("unwatch -> unwatch", function() {deepEqual( Stem("unwatch"), "unwatch");});
test("unwearied -> unweari", function() {deepEqual( Stem("unwearied"), "unweari");});
test("unwed -> unw", function() {deepEqual( Stem("unwed"), "unw");});
test("unwedgeable -> unwedg", function() {deepEqual( Stem("unwedgeable"), "unwedg");});
test("unweeded -> unweed", function() {deepEqual( Stem("unweeded"), "unweed");});
test("unweighed -> unweigh", function() {deepEqual( Stem("unweighed"), "unweigh");});
test("unweighing -> unweigh", function() {deepEqual( Stem("unweighing"), "unweigh");});
test("unwelcome -> unwelcom", function() {deepEqual( Stem("unwelcome"), "unwelcom");});
test("unwell -> unwel", function() {deepEqual( Stem("unwell"), "unwel");});
test("unwept -> unwept", function() {deepEqual( Stem("unwept"), "unwept");});
test("unwhipp -> unwhipp", function() {deepEqual( Stem("unwhipp"), "unwhipp");});
test("unwholesome -> unwholesom", function() {deepEqual( Stem("unwholesome"), "unwholesom");});
test("unwieldily -> unwieldili", function() {deepEqual( Stem("unwieldily"), "unwieldili");});
test("unwieldy -> unwieldi", function() {deepEqual( Stem("unwieldy"), "unwieldi");});
test("unwilling -> unwil", function() {deepEqual( Stem("unwilling"), "unwil");});
test("unwillingly -> unwillingli", function() {deepEqual( Stem("unwillingly"), "unwillingli");});
test("unwillingness -> unwilling", function() {deepEqual( Stem("unwillingness"), "unwilling");});
test("unwind -> unwind", function() {deepEqual( Stem("unwind"), "unwind");});
test("unwinding -> unwind", function() {deepEqual( Stem("unwinding"), "unwind");});
test("unwiped -> unwip", function() {deepEqual( Stem("unwiped"), "unwip");});
test("unwise -> unwis", function() {deepEqual( Stem("unwise"), "unwis");});
test("unwisely -> unwis", function() {deepEqual( Stem("unwisely"), "unwis");});
test("unwish -> unwish", function() {deepEqual( Stem("unwish"), "unwish");});
test("unwished -> unwish", function() {deepEqual( Stem("unwished"), "unwish");});
test("unwitted -> unwit", function() {deepEqual( Stem("unwitted"), "unwit");});
test("unwittingly -> unwittingli", function() {deepEqual( Stem("unwittingly"), "unwittingli");});
test("unwonted -> unwont", function() {deepEqual( Stem("unwonted"), "unwont");});
test("unwooed -> unwoo", function() {deepEqual( Stem("unwooed"), "unwoo");});
test("unworthier -> unworthi", function() {deepEqual( Stem("unworthier"), "unworthi");});
test("unworthiest -> unworthiest", function() {deepEqual( Stem("unworthiest"), "unworthiest");});
test("unworthily -> unworthili", function() {deepEqual( Stem("unworthily"), "unworthili");});
test("unworthiness -> unworthi", function() {deepEqual( Stem("unworthiness"), "unworthi");});
test("unworthy -> unworthi", function() {deepEqual( Stem("unworthy"), "unworthi");});
test("unwounded -> unwound", function() {deepEqual( Stem("unwounded"), "unwound");});
test("unwrung -> unwrung", function() {deepEqual( Stem("unwrung"), "unwrung");});
test("unyielding -> unyield", function() {deepEqual( Stem("unyielding"), "unyield");});
test("unyok -> unyok", function() {deepEqual( Stem("unyok"), "unyok");});
test("unyoke -> unyok", function() {deepEqual( Stem("unyoke"), "unyok");});
test("up -> up", function() {deepEqual( Stem("up"), "up");});
test("upbraid -> upbraid", function() {deepEqual( Stem("upbraid"), "upbraid");});
test("upbraided -> upbraid", function() {deepEqual( Stem("upbraided"), "upbraid");});
test("upbraidings -> upbraid", function() {deepEqual( Stem("upbraidings"), "upbraid");});
test("upbraids -> upbraid", function() {deepEqual( Stem("upbraids"), "upbraid");});
test("uphoarded -> uphoard", function() {deepEqual( Stem("uphoarded"), "uphoard");});
test("uphold -> uphold", function() {deepEqual( Stem("uphold"), "uphold");});
test("upholdeth -> upholdeth", function() {deepEqual( Stem("upholdeth"), "upholdeth");});
test("upholding -> uphold", function() {deepEqual( Stem("upholding"), "uphold");});
test("upholds -> uphold", function() {deepEqual( Stem("upholds"), "uphold");});
test("uplift -> uplift", function() {deepEqual( Stem("uplift"), "uplift");});
test("uplifted -> uplift", function() {deepEqual( Stem("uplifted"), "uplift");});
test("upmost -> upmost", function() {deepEqual( Stem("upmost"), "upmost");});
test("upon -> upon", function() {deepEqual( Stem("upon"), "upon");});
test("upper -> upper", function() {deepEqual( Stem("upper"), "upper");});
test("uppermost -> uppermost", function() {deepEqual( Stem("uppermost"), "uppermost");});
test("uprear -> uprear", function() {deepEqual( Stem("uprear"), "uprear");});
test("upreared -> uprear", function() {deepEqual( Stem("upreared"), "uprear");});
test("upright -> upright", function() {deepEqual( Stem("upright"), "upright");});
test("uprighteously -> upright", function() {deepEqual( Stem("uprighteously"), "upright");});
test("uprightness -> upright", function() {deepEqual( Stem("uprightness"), "upright");});
test("uprise -> upris", function() {deepEqual( Stem("uprise"), "upris");});
test("uprising -> upris", function() {deepEqual( Stem("uprising"), "upris");});
test("uproar -> uproar", function() {deepEqual( Stem("uproar"), "uproar");});
test("uproars -> uproar", function() {deepEqual( Stem("uproars"), "uproar");});
test("uprous -> uprou", function() {deepEqual( Stem("uprous"), "uprou");});
test("uproused -> uprous", function() {deepEqual( Stem("uproused"), "uprous");});
test("upset -> upset", function() {deepEqual( Stem("upset"), "upset");});
test("upsetting -> upset", function() {deepEqual( Stem("upsetting"), "upset");});
test("upshoot -> upshoot", function() {deepEqual( Stem("upshoot"), "upshoot");});
test("upshot -> upshot", function() {deepEqual( Stem("upshot"), "upshot");});
test("upside -> upsid", function() {deepEqual( Stem("upside"), "upsid");});
test("upspring -> upspr", function() {deepEqual( Stem("upspring"), "upspr");});
test("upstairs -> upstair", function() {deepEqual( Stem("upstairs"), "upstair");});
test("upstart -> upstart", function() {deepEqual( Stem("upstart"), "upstart");});
test("upturned -> upturn", function() {deepEqual( Stem("upturned"), "upturn");});
test("upward -> upward", function() {deepEqual( Stem("upward"), "upward");});
test("upwards -> upward", function() {deepEqual( Stem("upwards"), "upward");});
test("urbanity -> urban", function() {deepEqual( Stem("urbanity"), "urban");});
test("urchin -> urchin", function() {deepEqual( Stem("urchin"), "urchin");});
test("urchinfield -> urchinfield", function() {deepEqual( Stem("urchinfield"), "urchinfield");});
test("urchins -> urchin", function() {deepEqual( Stem("urchins"), "urchin");});
test("urg -> urg", function() {deepEqual( Stem("urg"), "urg");});
test("urge -> urg", function() {deepEqual( Stem("urge"), "urg");});
test("urged -> urg", function() {deepEqual( Stem("urged"), "urg");});
test("urgent -> urgent", function() {deepEqual( Stem("urgent"), "urgent");});
test("urges -> urg", function() {deepEqual( Stem("urges"), "urg");});
test("urgest -> urgest", function() {deepEqual( Stem("urgest"), "urgest");});
test("urging -> urg", function() {deepEqual( Stem("urging"), "urg");});
test("urinal -> urin", function() {deepEqual( Stem("urinal"), "urin");});
test("urinals -> urin", function() {deepEqual( Stem("urinals"), "urin");});
test("urine -> urin", function() {deepEqual( Stem("urine"), "urin");});
test("urn -> urn", function() {deepEqual( Stem("urn"), "urn");});
test("urns -> urn", function() {deepEqual( Stem("urns"), "urn");});
test("urs -> ur", function() {deepEqual( Stem("urs"), "ur");});
test("ursa -> ursa", function() {deepEqual( Stem("ursa"), "ursa");});
test("ursley -> urslei", function() {deepEqual( Stem("ursley"), "urslei");});
test("ursula -> ursula", function() {deepEqual( Stem("ursula"), "ursula");});
test("urswick -> urswick", function() {deepEqual( Stem("urswick"), "urswick");});
test("us -> u", function() {deepEqual( Stem("us"), "u");});
test("usage -> usag", function() {deepEqual( Stem("usage"), "usag");});
test("usages -> usag", function() {deepEqual( Stem("usages"), "usag");});
test("usance -> usanc", function() {deepEqual( Stem("usance"), "usanc");});
test("usances -> usanc", function() {deepEqual( Stem("usances"), "usanc");});
test("use -> us", function() {deepEqual( Stem("use"), "us");});
test("used -> us", function() {deepEqual( Stem("used"), "us");});
test("useful -> us", function() {deepEqual( Stem("useful"), "us");});
test("useless -> useless", function() {deepEqual( Stem("useless"), "useless");});
test("user -> user", function() {deepEqual( Stem("user"), "user");});
test("uses -> us", function() {deepEqual( Stem("uses"), "us");});
test("usest -> usest", function() {deepEqual( Stem("usest"), "usest");});
test("useth -> useth", function() {deepEqual( Stem("useth"), "useth");});
test("usher -> usher", function() {deepEqual( Stem("usher"), "usher");});
test("ushered -> usher", function() {deepEqual( Stem("ushered"), "usher");});
test("ushering -> usher", function() {deepEqual( Stem("ushering"), "usher");});
test("ushers -> usher", function() {deepEqual( Stem("ushers"), "usher");});
test("using -> us", function() {deepEqual( Stem("using"), "us");});
test("usual -> usual", function() {deepEqual( Stem("usual"), "usual");});
test("usually -> usual", function() {deepEqual( Stem("usually"), "usual");});
test("usurer -> usur", function() {deepEqual( Stem("usurer"), "usur");});
test("usurers -> usur", function() {deepEqual( Stem("usurers"), "usur");});
test("usuries -> usuri", function() {deepEqual( Stem("usuries"), "usuri");});
test("usuring -> usur", function() {deepEqual( Stem("usuring"), "usur");});
test("usurp -> usurp", function() {deepEqual( Stem("usurp"), "usurp");});
test("usurpation -> usurp", function() {deepEqual( Stem("usurpation"), "usurp");});
test("usurped -> usurp", function() {deepEqual( Stem("usurped"), "usurp");});
test("usurper -> usurp", function() {deepEqual( Stem("usurper"), "usurp");});
test("usurpers -> usurp", function() {deepEqual( Stem("usurpers"), "usurp");});
test("usurping -> usurp", function() {deepEqual( Stem("usurping"), "usurp");});
test("usurpingly -> usurpingli", function() {deepEqual( Stem("usurpingly"), "usurpingli");});
test("usurps -> usurp", function() {deepEqual( Stem("usurps"), "usurp");});
test("usury -> usuri", function() {deepEqual( Stem("usury"), "usuri");});
test("ut -> ut", function() {deepEqual( Stem("ut"), "ut");});
test("utensil -> utensil", function() {deepEqual( Stem("utensil"), "utensil");});
test("utensils -> utensil", function() {deepEqual( Stem("utensils"), "utensil");});
test("uthers -> uther", function() {deepEqual( Stem("uthers"), "uther");});
test("utility -> util", function() {deepEqual( Stem("utility"), "util");});
test("utmost -> utmost", function() {deepEqual( Stem("utmost"), "utmost");});
test("utt -> utt", function() {deepEqual( Stem("utt"), "utt");});
test("utter -> utter", function() {deepEqual( Stem("utter"), "utter");});
test("utterance -> utter", function() {deepEqual( Stem("utterance"), "utter");});
test("uttered -> utter", function() {deepEqual( Stem("uttered"), "utter");});
test("uttereth -> uttereth", function() {deepEqual( Stem("uttereth"), "uttereth");});
test("uttering -> utter", function() {deepEqual( Stem("uttering"), "utter");});
test("utterly -> utterli", function() {deepEqual( Stem("utterly"), "utterli");});
test("uttermost -> uttermost", function() {deepEqual( Stem("uttermost"), "uttermost");});
test("utters -> utter", function() {deepEqual( Stem("utters"), "utter");});
test("uxbridge -> uxbridg", function() {deepEqual( Stem("uxbridge"), "uxbridg");});
test("uxor -> uxor", function() {deepEqual( Stem("uxor"), "uxor");});
test("uy -> ui", function() {deepEqual( Stem("uy"), "ui");});
test("v -> v", function() {deepEqual( Stem("v"), "v");});
test("va -> va", function() {deepEqual( Stem("va"), "va");});
test("vacancy -> vacanc", function() {deepEqual( Stem("vacancy"), "vacanc");});
test("vacant -> vacant", function() {deepEqual( Stem("vacant"), "vacant");});
test("vacated -> vacat", function() {deepEqual( Stem("vacated"), "vacat");});
test("vacation -> vacat", function() {deepEqual( Stem("vacation"), "vacat");});
test("vacations -> vacat", function() {deepEqual( Stem("vacations"), "vacat");});
test("vacillation -> vacil", function() {deepEqual( Stem("vacillation"), "vacil");});
test("vacuity -> vacuiti", function() {deepEqual( Stem("vacuity"), "vacuiti");});
test("vade -> vade", function() {deepEqual( Stem("vade"), "vade");});
test("vagabond -> vagabond", function() {deepEqual( Stem("vagabond"), "vagabond");});
test("vagabonds -> vagabond", function() {deepEqual( Stem("vagabonds"), "vagabond");});
test("vagram -> vagram", function() {deepEqual( Stem("vagram"), "vagram");});
test("vagrom -> vagrom", function() {deepEqual( Stem("vagrom"), "vagrom");});
test("vague -> vagu", function() {deepEqual( Stem("vague"), "vagu");});
test("vaguely -> vagu", function() {deepEqual( Stem("vaguely"), "vagu");});
test("vail -> vail", function() {deepEqual( Stem("vail"), "vail");});
test("vailed -> vail", function() {deepEqual( Stem("vailed"), "vail");});
test("vailing -> vail", function() {deepEqual( Stem("vailing"), "vail");});
test("vaillant -> vaillant", function() {deepEqual( Stem("vaillant"), "vaillant");});
test("vain -> vain", function() {deepEqual( Stem("vain"), "vain");});
test("vainer -> vainer", function() {deepEqual( Stem("vainer"), "vainer");});
test("vainglory -> vainglori", function() {deepEqual( Stem("vainglory"), "vainglori");});
test("vainly -> vainli", function() {deepEqual( Stem("vainly"), "vainli");});
test("vainness -> vain", function() {deepEqual( Stem("vainness"), "vain");});
test("vainqueur -> vainqueur", function() {deepEqual( Stem("vainqueur"), "vainqueur");});
test("vair -> vair", function() {deepEqual( Stem("vair"), "vair");});
test("vais -> vai", function() {deepEqual( Stem("vais"), "vai");});
test("valanc -> valanc", function() {deepEqual( Stem("valanc"), "valanc");});
test("valance -> valanc", function() {deepEqual( Stem("valance"), "valanc");});
test("vale -> vale", function() {deepEqual( Stem("vale"), "vale");});
test("valence -> valenc", function() {deepEqual( Stem("valence"), "valenc");});
test("valenciennes -> valencienn", function() {deepEqual( Stem("valenciennes"), "valencienn");});
test("valentine -> valentin", function() {deepEqual( Stem("valentine"), "valentin");});
test("valentinus -> valentinu", function() {deepEqual( Stem("valentinus"), "valentinu");});
test("valentio -> valentio", function() {deepEqual( Stem("valentio"), "valentio");});
test("valeria -> valeria", function() {deepEqual( Stem("valeria"), "valeria");});
test("valerius -> valeriu", function() {deepEqual( Stem("valerius"), "valeriu");});
test("vales -> vale", function() {deepEqual( Stem("vales"), "vale");});
test("valet -> valet", function() {deepEqual( Stem("valet"), "valet");});
test("valets -> valet", function() {deepEqual( Stem("valets"), "valet");});
test("valiant -> valiant", function() {deepEqual( Stem("valiant"), "valiant");});
test("valiantly -> valiantli", function() {deepEqual( Stem("valiantly"), "valiantli");});
test("valiantness -> valiant", function() {deepEqual( Stem("valiantness"), "valiant");});
test("validity -> valid", function() {deepEqual( Stem("validity"), "valid");});
test("valise -> valis", function() {deepEqual( Stem("valise"), "valis");});
test("vallant -> vallant", function() {deepEqual( Stem("vallant"), "vallant");});
test("valley -> vallei", function() {deepEqual( Stem("valley"), "vallei");});
test("valleys -> vallei", function() {deepEqual( Stem("valleys"), "vallei");});
test("vally -> valli", function() {deepEqual( Stem("vally"), "valli");});
test("valor -> valor", function() {deepEqual( Stem("valor"), "valor");});
test("valorous -> valor", function() {deepEqual( Stem("valorous"), "valor");});
test("valorously -> valor", function() {deepEqual( Stem("valorously"), "valor");});
test("valour -> valour", function() {deepEqual( Stem("valour"), "valour");});
test("valu -> valu", function() {deepEqual( Stem("valu"), "valu");});
test("valuable -> valuabl", function() {deepEqual( Stem("valuable"), "valuabl");});
test("valuables -> valuabl", function() {deepEqual( Stem("valuables"), "valuabl");});
test("valuation -> valuat", function() {deepEqual( Stem("valuation"), "valuat");});
test("value -> valu", function() {deepEqual( Stem("value"), "valu");});
test("valued -> valu", function() {deepEqual( Stem("valued"), "valu");});
test("valueless -> valueless", function() {deepEqual( Stem("valueless"), "valueless");});
test("values -> valu", function() {deepEqual( Stem("values"), "valu");});
test("valuing -> valu", function() {deepEqual( Stem("valuing"), "valu");});
test("valyble -> valybl", function() {deepEqual( Stem("valyble"), "valybl");});
test("vamous -> vamou", function() {deepEqual( Stem("vamous"), "vamou");});
test("van -> van", function() {deepEqual( Stem("van"), "van");});
test("vandykes -> vandyk", function() {deepEqual( Stem("vandykes"), "vandyk");});
test("vane -> vane", function() {deepEqual( Stem("vane"), "vane");});
test("vanish -> vanish", function() {deepEqual( Stem("vanish"), "vanish");});
test("vanished -> vanish", function() {deepEqual( Stem("vanished"), "vanish");});
test("vanishes -> vanish", function() {deepEqual( Stem("vanishes"), "vanish");});
test("vanishest -> vanishest", function() {deepEqual( Stem("vanishest"), "vanishest");});
test("vanishing -> vanish", function() {deepEqual( Stem("vanishing"), "vanish");});
test("vanitas -> vanita", function() {deepEqual( Stem("vanitas"), "vanita");});
test("vanitatum -> vanitatum", function() {deepEqual( Stem("vanitatum"), "vanitatum");});
test("vanities -> vaniti", function() {deepEqual( Stem("vanities"), "vaniti");});
test("vanity -> vaniti", function() {deepEqual( Stem("vanity"), "vaniti");});
test("vanquish -> vanquish", function() {deepEqual( Stem("vanquish"), "vanquish");});
test("vanquished -> vanquish", function() {deepEqual( Stem("vanquished"), "vanquish");});
test("vanquisher -> vanquish", function() {deepEqual( Stem("vanquisher"), "vanquish");});
test("vanquishest -> vanquishest", function() {deepEqual( Stem("vanquishest"), "vanquishest");});
test("vanquisheth -> vanquisheth", function() {deepEqual( Stem("vanquisheth"), "vanquisheth");});
test("vans -> van", function() {deepEqual( Stem("vans"), "van");});
test("vant -> vant", function() {deepEqual( Stem("vant"), "vant");});
test("vantage -> vantag", function() {deepEqual( Stem("vantage"), "vantag");});
test("vantages -> vantag", function() {deepEqual( Stem("vantages"), "vantag");});
test("vantbrace -> vantbrac", function() {deepEqual( Stem("vantbrace"), "vantbrac");});
test("vapians -> vapian", function() {deepEqual( Stem("vapians"), "vapian");});
test("vapor -> vapor", function() {deepEqual( Stem("vapor"), "vapor");});
test("vaporous -> vapor", function() {deepEqual( Stem("vaporous"), "vapor");});
test("vapour -> vapour", function() {deepEqual( Stem("vapour"), "vapour");});
test("vapours -> vapour", function() {deepEqual( Stem("vapours"), "vapour");});
test("vara -> vara", function() {deepEqual( Stem("vara"), "vara");});
test("variable -> variabl", function() {deepEqual( Stem("variable"), "variabl");});
test("variance -> varianc", function() {deepEqual( Stem("variance"), "varianc");});
test("variation -> variat", function() {deepEqual( Stem("variation"), "variat");});
test("variations -> variat", function() {deepEqual( Stem("variations"), "variat");});
test("varied -> vari", function() {deepEqual( Stem("varied"), "vari");});
test("variegated -> varieg", function() {deepEqual( Stem("variegated"), "varieg");});
test("varies -> vari", function() {deepEqual( Stem("varies"), "vari");});
test("variest -> variest", function() {deepEqual( Stem("variest"), "variest");});
test("variety -> varieti", function() {deepEqual( Stem("variety"), "varieti");});
test("varinas -> varina", function() {deepEqual( Stem("varinas"), "varina");});
test("various -> variou", function() {deepEqual( Stem("various"), "variou");});
test("varld -> varld", function() {deepEqual( Stem("varld"), "varld");});
test("varlet -> varlet", function() {deepEqual( Stem("varlet"), "varlet");});
test("varletry -> varletri", function() {deepEqual( Stem("varletry"), "varletri");});
test("varlets -> varlet", function() {deepEqual( Stem("varlets"), "varlet");});
test("varletto -> varletto", function() {deepEqual( Stem("varletto"), "varletto");});
test("varnish -> varnish", function() {deepEqual( Stem("varnish"), "varnish");});
test("varnished -> varnish", function() {deepEqual( Stem("varnished"), "varnish");});
test("varrius -> varriu", function() {deepEqual( Stem("varrius"), "varriu");});
test("varro -> varro", function() {deepEqual( Stem("varro"), "varro");});
test("vary -> vari", function() {deepEqual( Stem("vary"), "vari");});
test("varying -> vari", function() {deepEqual( Stem("varying"), "vari");});
test("vassal -> vassal", function() {deepEqual( Stem("vassal"), "vassal");});
test("vassalage -> vassalag", function() {deepEqual( Stem("vassalage"), "vassalag");});
test("vassals -> vassal", function() {deepEqual( Stem("vassals"), "vassal");});
test("vast -> vast", function() {deepEqual( Stem("vast"), "vast");});
test("vastidity -> vastid", function() {deepEqual( Stem("vastidity"), "vastid");});
test("vastly -> vastli", function() {deepEqual( Stem("vastly"), "vastli");});
test("vastness -> vast", function() {deepEqual( Stem("vastness"), "vast");});
test("vasty -> vasti", function() {deepEqual( Stem("vasty"), "vasti");});
test("vat -> vat", function() {deepEqual( Stem("vat"), "vat");});
test("vater -> vater", function() {deepEqual( Stem("vater"), "vater");});
test("vaudemont -> vaudemont", function() {deepEqual( Stem("vaudemont"), "vaudemont");});
test("vaughan -> vaughan", function() {deepEqual( Stem("vaughan"), "vaughan");});
test("vault -> vault", function() {deepEqual( Stem("vault"), "vault");});
test("vaultages -> vaultag", function() {deepEqual( Stem("vaultages"), "vaultag");});
test("vaulted -> vault", function() {deepEqual( Stem("vaulted"), "vault");});
test("vaulters -> vaulter", function() {deepEqual( Stem("vaulters"), "vaulter");});
test("vaulting -> vault", function() {deepEqual( Stem("vaulting"), "vault");});
test("vaults -> vault", function() {deepEqual( Stem("vaults"), "vault");});
test("vaulty -> vaulti", function() {deepEqual( Stem("vaulty"), "vaulti");});
test("vaumond -> vaumond", function() {deepEqual( Stem("vaumond"), "vaumond");});
test("vaunt -> vaunt", function() {deepEqual( Stem("vaunt"), "vaunt");});
test("vaunted -> vaunt", function() {deepEqual( Stem("vaunted"), "vaunt");});
test("vaunter -> vaunter", function() {deepEqual( Stem("vaunter"), "vaunter");});
test("vaunting -> vaunt", function() {deepEqual( Stem("vaunting"), "vaunt");});
test("vauntingly -> vauntingli", function() {deepEqual( Stem("vauntingly"), "vauntingli");});
test("vaunts -> vaunt", function() {deepEqual( Stem("vaunts"), "vaunt");});
test("vauvado -> vauvado", function() {deepEqual( Stem("vauvado"), "vauvado");});
test("vaux -> vaux", function() {deepEqual( Stem("vaux"), "vaux");});
test("vauxhall -> vauxhal", function() {deepEqual( Stem("vauxhall"), "vauxhal");});
test("vaward -> vaward", function() {deepEqual( Stem("vaward"), "vaward");});
test("ve -> ve", function() {deepEqual( Stem("ve"), "ve");});
test("veal -> veal", function() {deepEqual( Stem("veal"), "veal");});
test("vede -> vede", function() {deepEqual( Stem("vede"), "vede");});
test("vedrai -> vedrai", function() {deepEqual( Stem("vedrai"), "vedrai");});
test("vegetable -> veget", function() {deepEqual( Stem("vegetable"), "veget");});
test("vegetables -> veget", function() {deepEqual( Stem("vegetables"), "veget");});
test("vehemence -> vehem", function() {deepEqual( Stem("vehemence"), "vehem");});
test("vehemency -> vehem", function() {deepEqual( Stem("vehemency"), "vehem");});
test("vehement -> vehement", function() {deepEqual( Stem("vehement"), "vehement");});
test("vehemently -> vehement", function() {deepEqual( Stem("vehemently"), "vehement");});
test("vehicle -> vehicl", function() {deepEqual( Stem("vehicle"), "vehicl");});
test("vehicles -> vehicl", function() {deepEqual( Stem("vehicles"), "vehicl");});
test("vehmgericht -> vehmgericht", function() {deepEqual( Stem("vehmgericht"), "vehmgericht");});
test("vehor -> vehor", function() {deepEqual( Stem("vehor"), "vehor");});
test("veil -> veil", function() {deepEqual( Stem("veil"), "veil");});
test("veiled -> veil", function() {deepEqual( Stem("veiled"), "veil");});
test("veiling -> veil", function() {deepEqual( Stem("veiling"), "veil");});
test("veils -> veil", function() {deepEqual( Stem("veils"), "veil");});
test("vein -> vein", function() {deepEqual( Stem("vein"), "vein");});
test("veins -> vein", function() {deepEqual( Stem("veins"), "vein");});
test("vell -> vell", function() {deepEqual( Stem("vell"), "vell");});
test("velure -> velur", function() {deepEqual( Stem("velure"), "velur");});
test("velutus -> velutu", function() {deepEqual( Stem("velutus"), "velutu");});
test("velvet -> velvet", function() {deepEqual( Stem("velvet"), "velvet");});
test("velvets -> velvet", function() {deepEqual( Stem("velvets"), "velvet");});
test("vend -> vend", function() {deepEqual( Stem("vend"), "vend");});
test("vendible -> vendibl", function() {deepEqual( Stem("vendible"), "vendibl");});
test("vending -> vend", function() {deepEqual( Stem("vending"), "vend");});
test("venerable -> vener", function() {deepEqual( Stem("venerable"), "vener");});
test("venerated -> vener", function() {deepEqual( Stem("venerated"), "vener");});
test("veneration -> vener", function() {deepEqual( Stem("veneration"), "vener");});
test("venereal -> vener", function() {deepEqual( Stem("venereal"), "vener");});
test("venetia -> venetia", function() {deepEqual( Stem("venetia"), "venetia");});
test("venetian -> venetian", function() {deepEqual( Stem("venetian"), "venetian");});
test("venetians -> venetian", function() {deepEqual( Stem("venetians"), "venetian");});
test("veneys -> venei", function() {deepEqual( Stem("veneys"), "venei");});
test("venge -> veng", function() {deepEqual( Stem("venge"), "veng");});
test("vengeance -> vengeanc", function() {deepEqual( Stem("vengeance"), "vengeanc");});
test("vengeances -> vengeanc", function() {deepEqual( Stem("vengeances"), "vengeanc");});
test("vengeful -> veng", function() {deepEqual( Stem("vengeful"), "veng");});
test("veni -> veni", function() {deepEqual( Stem("veni"), "veni");});
test("venial -> venial", function() {deepEqual( Stem("venial"), "venial");});
test("venice -> venic", function() {deepEqual( Stem("venice"), "venic");});
test("venison -> venison", function() {deepEqual( Stem("venison"), "venison");});
test("venit -> venit", function() {deepEqual( Stem("venit"), "venit");});
test("venny -> venni", function() {deepEqual( Stem("venny"), "venni");});
test("venom -> venom", function() {deepEqual( Stem("venom"), "venom");});
test("venomous -> venom", function() {deepEqual( Stem("venomous"), "venom");});
test("venomously -> venom", function() {deepEqual( Stem("venomously"), "venom");});
test("vent -> vent", function() {deepEqual( Stem("vent"), "vent");});
test("ventages -> ventag", function() {deepEqual( Stem("ventages"), "ventag");});
test("vented -> vent", function() {deepEqual( Stem("vented"), "vent");});
test("ventidius -> ventidiu", function() {deepEqual( Stem("ventidius"), "ventidiu");});
test("ventre -> ventr", function() {deepEqual( Stem("ventre"), "ventr");});
test("ventricle -> ventricl", function() {deepEqual( Stem("ventricle"), "ventricl");});
test("vents -> vent", function() {deepEqual( Stem("vents"), "vent");});
test("ventur -> ventur", function() {deepEqual( Stem("ventur"), "ventur");});
test("venture -> ventur", function() {deepEqual( Stem("venture"), "ventur");});
test("ventured -> ventur", function() {deepEqual( Stem("ventured"), "ventur");});
test("ventures -> ventur", function() {deepEqual( Stem("ventures"), "ventur");});
test("venturing -> ventur", function() {deepEqual( Stem("venturing"), "ventur");});
test("venturous -> ventur", function() {deepEqual( Stem("venturous"), "ventur");});
test("venue -> venu", function() {deepEqual( Stem("venue"), "venu");});
test("venus -> venu", function() {deepEqual( Stem("venus"), "venu");});
test("venuto -> venuto", function() {deepEqual( Stem("venuto"), "venuto");});
test("ver -> ver", function() {deepEqual( Stem("ver"), "ver");});
test("veracious -> veraci", function() {deepEqual( Stem("veracious"), "veraci");});
test("veraciously -> veraci", function() {deepEqual( Stem("veraciously"), "veraci");});
test("verandas -> veranda", function() {deepEqual( Stem("verandas"), "veranda");});
test("verb -> verb", function() {deepEqual( Stem("verb"), "verb");});
test("verba -> verba", function() {deepEqual( Stem("verba"), "verba");});
test("verbal -> verbal", function() {deepEqual( Stem("verbal"), "verbal");});
test("verbatim -> verbatim", function() {deepEqual( Stem("verbatim"), "verbatim");});
test("verbosity -> verbos", function() {deepEqual( Stem("verbosity"), "verbos");});
test("verdict -> verdict", function() {deepEqual( Stem("verdict"), "verdict");});
test("verdun -> verdun", function() {deepEqual( Stem("verdun"), "verdun");});
test("verdure -> verdur", function() {deepEqual( Stem("verdure"), "verdur");});
test("vere -> vere", function() {deepEqual( Stem("vere"), "vere");});
test("verefore -> verefor", function() {deepEqual( Stem("verefore"), "verefor");});
test("verg -> verg", function() {deepEqual( Stem("verg"), "verg");});
test("verge -> verg", function() {deepEqual( Stem("verge"), "verg");});
test("vergers -> verger", function() {deepEqual( Stem("vergers"), "verger");});
test("verges -> verg", function() {deepEqual( Stem("verges"), "verg");});
test("verier -> verier", function() {deepEqual( Stem("verier"), "verier");});
test("veriest -> veriest", function() {deepEqual( Stem("veriest"), "veriest");});
test("verified -> verifi", function() {deepEqual( Stem("verified"), "verifi");});
test("verify -> verifi", function() {deepEqual( Stem("verify"), "verifi");});
test("verily -> verili", function() {deepEqual( Stem("verily"), "verili");});
test("veritable -> verit", function() {deepEqual( Stem("veritable"), "verit");});
test("veritas -> verita", function() {deepEqual( Stem("veritas"), "verita");});
test("verite -> verit", function() {deepEqual( Stem("verite"), "verit");});
test("verities -> veriti", function() {deepEqual( Stem("verities"), "veriti");});
test("verity -> veriti", function() {deepEqual( Stem("verity"), "veriti");});
test("vermilion -> vermilion", function() {deepEqual( Stem("vermilion"), "vermilion");});
test("vermin -> vermin", function() {deepEqual( Stem("vermin"), "vermin");});
test("vernon -> vernon", function() {deepEqual( Stem("vernon"), "vernon");});
test("verona -> verona", function() {deepEqual( Stem("verona"), "verona");});
test("veronesa -> veronesa", function() {deepEqual( Stem("veronesa"), "veronesa");});
test("versa -> versa", function() {deepEqual( Stem("versa"), "versa");});
test("versailles -> versail", function() {deepEqual( Stem("versailles"), "versail");});
test("versal -> versal", function() {deepEqual( Stem("versal"), "versal");});
test("verse -> vers", function() {deepEqual( Stem("verse"), "vers");});
test("versed -> vers", function() {deepEqual( Stem("versed"), "vers");});
test("verses -> vers", function() {deepEqual( Stem("verses"), "vers");});
test("versing -> vers", function() {deepEqual( Stem("versing"), "vers");});
test("version -> version", function() {deepEqual( Stem("version"), "version");});
test("versus -> versu", function() {deepEqual( Stem("versus"), "versu");});
test("vert -> vert", function() {deepEqual( Stem("vert"), "vert");});
test("verte -> vert", function() {deepEqual( Stem("verte"), "vert");});
test("vertu -> vertu", function() {deepEqual( Stem("vertu"), "vertu");});
test("very -> veri", function() {deepEqual( Stem("very"), "veri");});
test("vesper -> vesper", function() {deepEqual( Stem("vesper"), "vesper");});
test("vessel -> vessel", function() {deepEqual( Stem("vessel"), "vessel");});
test("vessels -> vessel", function() {deepEqual( Stem("vessels"), "vessel");});
test("vestal -> vestal", function() {deepEqual( Stem("vestal"), "vestal");});
test("vestals -> vestal", function() {deepEqual( Stem("vestals"), "vestal");});
test("vestments -> vestment", function() {deepEqual( Stem("vestments"), "vestment");});
test("vestris -> vestri", function() {deepEqual( Stem("vestris"), "vestri");});
test("vestry -> vestri", function() {deepEqual( Stem("vestry"), "vestri");});
test("vests -> vest", function() {deepEqual( Stem("vests"), "vest");});
test("vesture -> vestur", function() {deepEqual( Stem("vesture"), "vestur");});
test("vesuvius -> vesuviu", function() {deepEqual( Stem("vesuvius"), "vesuviu");});
test("vetch -> vetch", function() {deepEqual( Stem("vetch"), "vetch");});
test("vetches -> vetch", function() {deepEqual( Stem("vetches"), "vetch");});
test("veteran -> veteran", function() {deepEqual( Stem("veteran"), "veteran");});
test("veterans -> veteran", function() {deepEqual( Stem("veterans"), "veteran");});
test("veto -> veto", function() {deepEqual( Stem("veto"), "veto");});
test("veux -> veux", function() {deepEqual( Stem("veux"), "veux");});
test("vex -> vex", function() {deepEqual( Stem("vex"), "vex");});
test("vexation -> vexat", function() {deepEqual( Stem("vexation"), "vexat");});
test("vexations -> vexat", function() {deepEqual( Stem("vexations"), "vexat");});
test("vexed -> vex", function() {deepEqual( Stem("vexed"), "vex");});
test("vexes -> vex", function() {deepEqual( Stem("vexes"), "vex");});
test("vexest -> vexest", function() {deepEqual( Stem("vexest"), "vexest");});
test("vexeth -> vexeth", function() {deepEqual( Stem("vexeth"), "vexeth");});
test("vexing -> vex", function() {deepEqual( Stem("vexing"), "vex");});
test("vi -> vi", function() {deepEqual( Stem("vi"), "vi");});
test("via -> via", function() {deepEqual( Stem("via"), "via");});
test("vial -> vial", function() {deepEqual( Stem("vial"), "vial");});
test("vials -> vial", function() {deepEqual( Stem("vials"), "vial");});
test("viand -> viand", function() {deepEqual( Stem("viand"), "viand");});
test("viands -> viand", function() {deepEqual( Stem("viands"), "viand");});
test("vic -> vic", function() {deepEqual( Stem("vic"), "vic");});
test("vicar -> vicar", function() {deepEqual( Stem("vicar"), "vicar");});
test("vice -> vice", function() {deepEqual( Stem("vice"), "vice");});
test("vicegerent -> viceger", function() {deepEqual( Stem("vicegerent"), "viceger");});
test("vicentio -> vicentio", function() {deepEqual( Stem("vicentio"), "vicentio");});
test("viceroy -> viceroi", function() {deepEqual( Stem("viceroy"), "viceroi");});
test("viceroys -> viceroi", function() {deepEqual( Stem("viceroys"), "viceroi");});
test("vices -> vice", function() {deepEqual( Stem("vices"), "vice");});
test("vici -> vici", function() {deepEqual( Stem("vici"), "vici");});
test("vicious -> viciou", function() {deepEqual( Stem("vicious"), "viciou");});
test("viciousness -> vicious", function() {deepEqual( Stem("viciousness"), "vicious");});
test("vict -> vict", function() {deepEqual( Stem("vict"), "vict");});
test("victim -> victim", function() {deepEqual( Stem("victim"), "victim");});
test("victimised -> victimis", function() {deepEqual( Stem("victimised"), "victimis");});
test("victimized -> victim", function() {deepEqual( Stem("victimized"), "victim");});
test("victimizer -> victim", function() {deepEqual( Stem("victimizer"), "victim");});
test("victims -> victim", function() {deepEqual( Stem("victims"), "victim");});
test("victor -> victor", function() {deepEqual( Stem("victor"), "victor");});
test("victoress -> victoress", function() {deepEqual( Stem("victoress"), "victoress");});
test("victories -> victori", function() {deepEqual( Stem("victories"), "victori");});
test("victorious -> victori", function() {deepEqual( Stem("victorious"), "victori");});
test("victors -> victor", function() {deepEqual( Stem("victors"), "victor");});
test("victory -> victori", function() {deepEqual( Stem("victory"), "victori");});
test("victual -> victual", function() {deepEqual( Stem("victual"), "victual");});
test("victuall -> victual", function() {deepEqual( Stem("victuall"), "victual");});
test("victuals -> victual", function() {deepEqual( Stem("victuals"), "victual");});
test("vid -> vid", function() {deepEqual( Stem("vid"), "vid");});
test("videlicet -> videlicet", function() {deepEqual( Stem("videlicet"), "videlicet");});
test("video -> video", function() {deepEqual( Stem("video"), "video");});
test("vides -> vide", function() {deepEqual( Stem("vides"), "vide");});
test("videsne -> videsn", function() {deepEqual( Stem("videsne"), "videsn");});
test("vidi -> vidi", function() {deepEqual( Stem("vidi"), "vidi");});
test("vie -> vie", function() {deepEqual( Stem("vie"), "vie");});
test("vied -> vi", function() {deepEqual( Stem("vied"), "vi");});
test("vienna -> vienna", function() {deepEqual( Stem("vienna"), "vienna");});
test("viens -> vien", function() {deepEqual( Stem("viens"), "vien");});
test("view -> view", function() {deepEqual( Stem("view"), "view");});
test("viewed -> view", function() {deepEqual( Stem("viewed"), "view");});
test("viewest -> viewest", function() {deepEqual( Stem("viewest"), "viewest");});
test("vieweth -> vieweth", function() {deepEqual( Stem("vieweth"), "vieweth");});
test("viewing -> view", function() {deepEqual( Stem("viewing"), "view");});
test("viewless -> viewless", function() {deepEqual( Stem("viewless"), "viewless");});
test("views -> view", function() {deepEqual( Stem("views"), "view");});
test("vigil -> vigil", function() {deepEqual( Stem("vigil"), "vigil");});
test("vigilance -> vigil", function() {deepEqual( Stem("vigilance"), "vigil");});
test("vigilant -> vigil", function() {deepEqual( Stem("vigilant"), "vigil");});
test("vigitant -> vigit", function() {deepEqual( Stem("vigitant"), "vigit");});
test("vigorous -> vigor", function() {deepEqual( Stem("vigorous"), "vigor");});
test("vigorously -> vigor", function() {deepEqual( Stem("vigorously"), "vigor");});
test("vigour -> vigour", function() {deepEqual( Stem("vigour"), "vigour");});
test("vii -> vii", function() {deepEqual( Stem("vii"), "vii");});
test("viii -> viii", function() {deepEqual( Stem("viii"), "viii");});
test("vile -> vile", function() {deepEqual( Stem("vile"), "vile");});
test("vilely -> vile", function() {deepEqual( Stem("vilely"), "vile");});
test("vileness -> vile", function() {deepEqual( Stem("vileness"), "vile");});
test("viler -> viler", function() {deepEqual( Stem("viler"), "viler");});
test("vilest -> vilest", function() {deepEqual( Stem("vilest"), "vilest");});
test("vilipending -> vilipend", function() {deepEqual( Stem("vilipending"), "vilipend");});
test("vill -> vill", function() {deepEqual( Stem("vill"), "vill");});
test("villa -> villa", function() {deepEqual( Stem("villa"), "villa");});
test("village -> villag", function() {deepEqual( Stem("village"), "villag");});
test("villager -> villag", function() {deepEqual( Stem("villager"), "villag");});
test("villagery -> villageri", function() {deepEqual( Stem("villagery"), "villageri");});
test("villages -> villag", function() {deepEqual( Stem("villages"), "villag");});
test("villain -> villain", function() {deepEqual( Stem("villain"), "villain");});
test("villainies -> villaini", function() {deepEqual( Stem("villainies"), "villaini");});
test("villainous -> villain", function() {deepEqual( Stem("villainous"), "villain");});
test("villainously -> villain", function() {deepEqual( Stem("villainously"), "villain");});
test("villains -> villain", function() {deepEqual( Stem("villains"), "villain");});
test("villainy -> villaini", function() {deepEqual( Stem("villainy"), "villaini");});
test("villanies -> villani", function() {deepEqual( Stem("villanies"), "villani");});
test("villanous -> villan", function() {deepEqual( Stem("villanous"), "villan");});
test("villany -> villani", function() {deepEqual( Stem("villany"), "villani");});
test("villas -> villa", function() {deepEqual( Stem("villas"), "villa");});
test("ville -> vill", function() {deepEqual( Stem("ville"), "vill");});
test("villiago -> villiago", function() {deepEqual( Stem("villiago"), "villiago");});
test("villian -> villian", function() {deepEqual( Stem("villian"), "villian");});
test("villianda -> villianda", function() {deepEqual( Stem("villianda"), "villianda");});
test("villians -> villian", function() {deepEqual( Stem("villians"), "villian");});
test("vin -> vin", function() {deepEqual( Stem("vin"), "vin");});
test("vinaigre -> vinaigr", function() {deepEqual( Stem("vinaigre"), "vinaigr");});
test("vincent -> vincent", function() {deepEqual( Stem("vincent"), "vincent");});
test("vincentio -> vincentio", function() {deepEqual( Stem("vincentio"), "vincentio");});
test("vincere -> vincer", function() {deepEqual( Stem("vincere"), "vincer");});
test("vindicative -> vindic", function() {deepEqual( Stem("vindicative"), "vindic");});
test("vine -> vine", function() {deepEqual( Stem("vine"), "vine");});
test("vinegar -> vinegar", function() {deepEqual( Stem("vinegar"), "vinegar");});
test("vines -> vine", function() {deepEqual( Stem("vines"), "vine");});
test("vineyard -> vineyard", function() {deepEqual( Stem("vineyard"), "vineyard");});
test("vineyards -> vineyard", function() {deepEqual( Stem("vineyards"), "vineyard");});
test("vinger -> vinger", function() {deepEqual( Stem("vinger"), "vinger");});
test("vino -> vino", function() {deepEqual( Stem("vino"), "vino");});
test("vinous -> vinou", function() {deepEqual( Stem("vinous"), "vinou");});
test("vint -> vint", function() {deepEqual( Stem("vint"), "vint");});
test("vintage -> vintag", function() {deepEqual( Stem("vintage"), "vintag");});
test("vintner -> vintner", function() {deepEqual( Stem("vintner"), "vintner");});
test("viol -> viol", function() {deepEqual( Stem("viol"), "viol");});
test("viola -> viola", function() {deepEqual( Stem("viola"), "viola");});
test("violate -> violat", function() {deepEqual( Stem("violate"), "violat");});
test("violated -> violat", function() {deepEqual( Stem("violated"), "violat");});
test("violates -> violat", function() {deepEqual( Stem("violates"), "violat");});
test("violation -> violat", function() {deepEqual( Stem("violation"), "violat");});
test("violator -> violat", function() {deepEqual( Stem("violator"), "violat");});
test("violence -> violenc", function() {deepEqual( Stem("violence"), "violenc");});
test("violent -> violent", function() {deepEqual( Stem("violent"), "violent");});
test("violenta -> violenta", function() {deepEqual( Stem("violenta"), "violenta");});
test("violenteth -> violenteth", function() {deepEqual( Stem("violenteth"), "violenteth");});
test("violently -> violent", function() {deepEqual( Stem("violently"), "violent");});
test("violet -> violet", function() {deepEqual( Stem("violet"), "violet");});
test("violets -> violet", function() {deepEqual( Stem("violets"), "violet");});
test("viper -> viper", function() {deepEqual( Stem("viper"), "viper");});
test("vipere -> viper", function() {deepEqual( Stem("vipere"), "viper");});
test("viperous -> viper", function() {deepEqual( Stem("viperous"), "viper");});
test("vipers -> viper", function() {deepEqual( Stem("vipers"), "viper");});
test("vir -> vir", function() {deepEqual( Stem("vir"), "vir");});
test("virago -> virago", function() {deepEqual( Stem("virago"), "virago");});
test("virgilia -> virgilia", function() {deepEqual( Stem("virgilia"), "virgilia");});
test("virgin -> virgin", function() {deepEqual( Stem("virgin"), "virgin");});
test("virginal -> virgin", function() {deepEqual( Stem("virginal"), "virgin");});
test("virginalling -> virginal", function() {deepEqual( Stem("virginalling"), "virginal");});
test("virginity -> virgin", function() {deepEqual( Stem("virginity"), "virgin");});
test("virginius -> virginiu", function() {deepEqual( Stem("virginius"), "virginiu");});
test("virgins -> virgin", function() {deepEqual( Stem("virgins"), "virgin");});
test("virgo -> virgo", function() {deepEqual( Stem("virgo"), "virgo");});
test("virile -> viril", function() {deepEqual( Stem("virile"), "viril");});
test("virorum -> virorum", function() {deepEqual( Stem("virorum"), "virorum");});
test("virtue -> virtu", function() {deepEqual( Stem("virtue"), "virtu");});
test("virtues -> virtu", function() {deepEqual( Stem("virtues"), "virtu");});
test("virtuous -> virtuou", function() {deepEqual( Stem("virtuous"), "virtuou");});
test("virtuously -> virtuous", function() {deepEqual( Stem("virtuously"), "virtuous");});
test("visag -> visag", function() {deepEqual( Stem("visag"), "visag");});
test("visage -> visag", function() {deepEqual( Stem("visage"), "visag");});
test("visages -> visag", function() {deepEqual( Stem("visages"), "visag");});
test("visard -> visard", function() {deepEqual( Stem("visard"), "visard");});
test("viscount -> viscount", function() {deepEqual( Stem("viscount"), "viscount");});
test("vish -> vish", function() {deepEqual( Stem("vish"), "vish");});
test("visible -> visibl", function() {deepEqual( Stem("visible"), "visibl");});
test("visibly -> visibli", function() {deepEqual( Stem("visibly"), "visibli");});
test("vision -> vision", function() {deepEqual( Stem("vision"), "vision");});
test("visions -> vision", function() {deepEqual( Stem("visions"), "vision");});
test("visit -> visit", function() {deepEqual( Stem("visit"), "visit");});
test("visitation -> visit", function() {deepEqual( Stem("visitation"), "visit");});
test("visitations -> visit", function() {deepEqual( Stem("visitations"), "visit");});
test("visite -> visit", function() {deepEqual( Stem("visite"), "visit");});
test("visited -> visit", function() {deepEqual( Stem("visited"), "visit");});
test("visiting -> visit", function() {deepEqual( Stem("visiting"), "visit");});
test("visitings -> visit", function() {deepEqual( Stem("visitings"), "visit");});
test("visitor -> visitor", function() {deepEqual( Stem("visitor"), "visitor");});
test("visitors -> visitor", function() {deepEqual( Stem("visitors"), "visitor");});
test("visits -> visit", function() {deepEqual( Stem("visits"), "visit");});
test("visor -> visor", function() {deepEqual( Stem("visor"), "visor");});
test("vit -> vit", function() {deepEqual( Stem("vit"), "vit");});
test("vita -> vita", function() {deepEqual( Stem("vita"), "vita");});
test("vitae -> vita", function() {deepEqual( Stem("vitae"), "vita");});
test("vital -> vital", function() {deepEqual( Stem("vital"), "vital");});
test("vite -> vite", function() {deepEqual( Stem("vite"), "vite");});
test("vitement -> vitement", function() {deepEqual( Stem("vitement"), "vitement");});
test("vitruvio -> vitruvio", function() {deepEqual( Stem("vitruvio"), "vitruvio");});
test("vittoria -> vittoria", function() {deepEqual( Stem("vittoria"), "vittoria");});
test("vitx -> vitx", function() {deepEqual( Stem("vitx"), "vitx");});
test("viva -> viva", function() {deepEqual( Stem("viva"), "viva");});
test("vivacity -> vivac", function() {deepEqual( Stem("vivacity"), "vivac");});
test("vivan -> vivan", function() {deepEqual( Stem("vivan"), "vivan");});
test("vivandiere -> vivandier", function() {deepEqual( Stem("vivandiere"), "vivandier");});
test("vivant -> vivant", function() {deepEqual( Stem("vivant"), "vivant");});
test("vivants -> vivant", function() {deepEqual( Stem("vivants"), "vivant");});
test("vive -> vive", function() {deepEqual( Stem("vive"), "vive");});
test("vivid -> vivid", function() {deepEqual( Stem("vivid"), "vivid");});
test("vivified -> vivifi", function() {deepEqual( Stem("vivified"), "vivifi");});
test("vixen -> vixen", function() {deepEqual( Stem("vixen"), "vixen");});
test("vixens -> vixen", function() {deepEqual( Stem("vixens"), "vixen");});
test("viz -> viz", function() {deepEqual( Stem("viz"), "viz");});
test("vizaments -> vizament", function() {deepEqual( Stem("vizaments"), "vizament");});
test("vizard -> vizard", function() {deepEqual( Stem("vizard"), "vizard");});
test("vizarded -> vizard", function() {deepEqual( Stem("vizarded"), "vizard");});
test("vizards -> vizard", function() {deepEqual( Stem("vizards"), "vizard");});
test("vizier -> vizier", function() {deepEqual( Stem("vizier"), "vizier");});
test("vizor -> vizor", function() {deepEqual( Stem("vizor"), "vizor");});
test("vlouting -> vlout", function() {deepEqual( Stem("vlouting"), "vlout");});
test("vocabulary -> vocabulari", function() {deepEqual( Stem("vocabulary"), "vocabulari");});
test("vocal -> vocal", function() {deepEqual( Stem("vocal"), "vocal");});
test("vocation -> vocat", function() {deepEqual( Stem("vocation"), "vocat");});
test("vocativo -> vocativo", function() {deepEqual( Stem("vocativo"), "vocativo");});
test("vocatur -> vocatur", function() {deepEqual( Stem("vocatur"), "vocatur");});
test("voce -> voce", function() {deepEqual( Stem("voce"), "voce");});
test("vogue -> vogu", function() {deepEqual( Stem("vogue"), "vogu");});
test("voic -> voic", function() {deepEqual( Stem("voic"), "voic");});
test("voice -> voic", function() {deepEqual( Stem("voice"), "voic");});
test("voices -> voic", function() {deepEqual( Stem("voices"), "voic");});
test("void -> void", function() {deepEqual( Stem("void"), "void");});
test("voided -> void", function() {deepEqual( Stem("voided"), "void");});
test("voiding -> void", function() {deepEqual( Stem("voiding"), "void");});
test("voiture -> voitur", function() {deepEqual( Stem("voiture"), "voitur");});
test("voke -> voke", function() {deepEqual( Stem("voke"), "voke");});
test("volable -> volabl", function() {deepEqual( Stem("volable"), "volabl");});
test("volant -> volant", function() {deepEqual( Stem("volant"), "volant");});
test("vole -> vole", function() {deepEqual( Stem("vole"), "vole");});
test("volivorco -> volivorco", function() {deepEqual( Stem("volivorco"), "volivorco");});
test("volley -> vollei", function() {deepEqual( Stem("volley"), "vollei");});
test("volquessen -> volquessen", function() {deepEqual( Stem("volquessen"), "volquessen");});
test("volsce -> volsc", function() {deepEqual( Stem("volsce"), "volsc");});
test("volsces -> volsc", function() {deepEqual( Stem("volsces"), "volsc");});
test("volscian -> volscian", function() {deepEqual( Stem("volscian"), "volscian");});
test("volscians -> volscian", function() {deepEqual( Stem("volscians"), "volscian");});
test("volt -> volt", function() {deepEqual( Stem("volt"), "volt");});
test("voltaire -> voltair", function() {deepEqual( Stem("voltaire"), "voltair");});
test("voltemand -> voltemand", function() {deepEqual( Stem("voltemand"), "voltemand");});
test("volubility -> volubl", function() {deepEqual( Stem("volubility"), "volubl");});
test("voluble -> volubl", function() {deepEqual( Stem("voluble"), "volubl");});
test("volubly -> volubli", function() {deepEqual( Stem("volubly"), "volubli");});
test("volume -> volum", function() {deepEqual( Stem("volume"), "volum");});
test("volumes -> volum", function() {deepEqual( Stem("volumes"), "volum");});
test("voluminous -> volumin", function() {deepEqual( Stem("voluminous"), "volumin");});
test("volumnia -> volumnia", function() {deepEqual( Stem("volumnia"), "volumnia");});
test("volumnius -> volumniu", function() {deepEqual( Stem("volumnius"), "volumniu");});
test("voluntaries -> voluntari", function() {deepEqual( Stem("voluntaries"), "voluntari");});
test("voluntary -> voluntari", function() {deepEqual( Stem("voluntary"), "voluntari");});
test("volunteered -> volunt", function() {deepEqual( Stem("volunteered"), "volunt");});
test("volunteering -> volunt", function() {deepEqual( Stem("volunteering"), "volunt");});
test("voluptuary -> voluptuari", function() {deepEqual( Stem("voluptuary"), "voluptuari");});
test("voluptuously -> voluptu", function() {deepEqual( Stem("voluptuously"), "voluptu");});
test("voluptuousness -> voluptu", function() {deepEqual( Stem("voluptuousness"), "voluptu");});
test("vomissement -> vomiss", function() {deepEqual( Stem("vomissement"), "vomiss");});
test("vomit -> vomit", function() {deepEqual( Stem("vomit"), "vomit");});
test("vomits -> vomit", function() {deepEqual( Stem("vomits"), "vomit");});
test("von -> von", function() {deepEqual( Stem("von"), "von");});
test("voo -> voo", function() {deepEqual( Stem("voo"), "voo");});
test("vor -> vor", function() {deepEqual( Stem("vor"), "vor");});
test("vore -> vore", function() {deepEqual( Stem("vore"), "vore");});
test("vortnight -> vortnight", function() {deepEqual( Stem("vortnight"), "vortnight");});
test("vortune -> vortun", function() {deepEqual( Stem("vortune"), "vortun");});
test("vot -> vot", function() {deepEqual( Stem("vot"), "vot");});
test("votaries -> votari", function() {deepEqual( Stem("votaries"), "votari");});
test("votarist -> votarist", function() {deepEqual( Stem("votarist"), "votarist");});
test("votarists -> votarist", function() {deepEqual( Stem("votarists"), "votarist");});
test("votary -> votari", function() {deepEqual( Stem("votary"), "votari");});
test("vote -> vote", function() {deepEqual( Stem("vote"), "vote");});
test("voted -> vote", function() {deepEqual( Stem("voted"), "vote");});
test("votes -> vote", function() {deepEqual( Stem("votes"), "vote");});
test("votre -> votr", function() {deepEqual( Stem("votre"), "votr");});
test("vouch -> vouch", function() {deepEqual( Stem("vouch"), "vouch");});
test("voucher -> voucher", function() {deepEqual( Stem("voucher"), "voucher");});
test("vouchers -> voucher", function() {deepEqual( Stem("vouchers"), "voucher");});
test("vouches -> vouch", function() {deepEqual( Stem("vouches"), "vouch");});
test("vouching -> vouch", function() {deepEqual( Stem("vouching"), "vouch");});
test("vouchsaf -> vouchsaf", function() {deepEqual( Stem("vouchsaf"), "vouchsaf");});
test("vouchsafe -> vouchsaf", function() {deepEqual( Stem("vouchsafe"), "vouchsaf");});
test("vouchsafed -> vouchsaf", function() {deepEqual( Stem("vouchsafed"), "vouchsaf");});
test("vouchsafes -> vouchsaf", function() {deepEqual( Stem("vouchsafes"), "vouchsaf");});
test("vouchsafing -> vouchsaf", function() {deepEqual( Stem("vouchsafing"), "vouchsaf");});
test("voudrais -> voudrai", function() {deepEqual( Stem("voudrais"), "voudrai");});
test("voulez -> voulez", function() {deepEqual( Stem("voulez"), "voulez");});
test("vour -> vour", function() {deepEqual( Stem("vour"), "vour");});
test("vous -> vou", function() {deepEqual( Stem("vous"), "vou");});
test("voutsafe -> voutsaf", function() {deepEqual( Stem("voutsafe"), "voutsaf");});
test("vow -> vow", function() {deepEqual( Stem("vow"), "vow");});
test("vowed -> vow", function() {deepEqual( Stem("vowed"), "vow");});
test("vowel -> vowel", function() {deepEqual( Stem("vowel"), "vowel");});
test("vowels -> vowel", function() {deepEqual( Stem("vowels"), "vowel");});
test("vowing -> vow", function() {deepEqual( Stem("vowing"), "vow");});
test("vows -> vow", function() {deepEqual( Stem("vows"), "vow");});
test("vox -> vox", function() {deepEqual( Stem("vox"), "vox");});
test("voyage -> voyag", function() {deepEqual( Stem("voyage"), "voyag");});
test("voyagers -> voyag", function() {deepEqual( Stem("voyagers"), "voyag");});
test("voyages -> voyag", function() {deepEqual( Stem("voyages"), "voyag");});
test("vraiment -> vraiment", function() {deepEqual( Stem("vraiment"), "vraiment");});
test("vriend -> vriend", function() {deepEqual( Stem("vriend"), "vriend");});
test("vu -> vu", function() {deepEqual( Stem("vu"), "vu");});
test("vulcan -> vulcan", function() {deepEqual( Stem("vulcan"), "vulcan");});
test("vulgar -> vulgar", function() {deepEqual( Stem("vulgar"), "vulgar");});
test("vulgarest -> vulgarest", function() {deepEqual( Stem("vulgarest"), "vulgarest");});
test("vulgarians -> vulgarian", function() {deepEqual( Stem("vulgarians"), "vulgarian");});
test("vulgarised -> vulgaris", function() {deepEqual( Stem("vulgarised"), "vulgaris");});
test("vulgarities -> vulgar", function() {deepEqual( Stem("vulgarities"), "vulgar");});
test("vulgarity -> vulgar", function() {deepEqual( Stem("vulgarity"), "vulgar");});
test("vulgarly -> vulgarli", function() {deepEqual( Stem("vulgarly"), "vulgarli");});
test("vulgars -> vulgar", function() {deepEqual( Stem("vulgars"), "vulgar");});
test("vulgo -> vulgo", function() {deepEqual( Stem("vulgo"), "vulgo");});
test("vulnerable -> vulner", function() {deepEqual( Stem("vulnerable"), "vulner");});
test("vulture -> vultur", function() {deepEqual( Stem("vulture"), "vultur");});
test("vultures -> vultur", function() {deepEqual( Stem("vultures"), "vultur");});
test("vun -> vun", function() {deepEqual( Stem("vun"), "vun");});
test("vuneral -> vuner", function() {deepEqual( Stem("vuneral"), "vuner");});
test("vurther -> vurther", function() {deepEqual( Stem("vurther"), "vurther");});
test("w -> w", function() {deepEqual( Stem("w"), "w");});
test("wad -> wad", function() {deepEqual( Stem("wad"), "wad");});
test("wadded -> wad", function() {deepEqual( Stem("wadded"), "wad");});
test("wadding -> wad", function() {deepEqual( Stem("wadding"), "wad");});
test("waddled -> waddl", function() {deepEqual( Stem("waddled"), "waddl");});
test("wade -> wade", function() {deepEqual( Stem("wade"), "wade");});
test("waded -> wade", function() {deepEqual( Stem("waded"), "wade");});
test("wafer -> wafer", function() {deepEqual( Stem("wafer"), "wafer");});
test("wafers -> wafer", function() {deepEqual( Stem("wafers"), "wafer");});
test("waft -> waft", function() {deepEqual( Stem("waft"), "waft");});
test("waftage -> waftag", function() {deepEqual( Stem("waftage"), "waftag");});
test("wafting -> waft", function() {deepEqual( Stem("wafting"), "waft");});
test("wafts -> waft", function() {deepEqual( Stem("wafts"), "waft");});
test("wag -> wag", function() {deepEqual( Stem("wag"), "wag");});
test("wage -> wage", function() {deepEqual( Stem("wage"), "wage");});
test("wager -> wager", function() {deepEqual( Stem("wager"), "wager");});
test("wagers -> wager", function() {deepEqual( Stem("wagers"), "wager");});
test("wages -> wage", function() {deepEqual( Stem("wages"), "wage");});
test("wagg -> wagg", function() {deepEqual( Stem("wagg"), "wagg");});
test("wagging -> wag", function() {deepEqual( Stem("wagging"), "wag");});
test("waggish -> waggish", function() {deepEqual( Stem("waggish"), "waggish");});
test("waggling -> waggl", function() {deepEqual( Stem("waggling"), "waggl");});
test("waggon -> waggon", function() {deepEqual( Stem("waggon"), "waggon");});
test("waggoner -> waggon", function() {deepEqual( Stem("waggoner"), "waggon");});
test("waggoners -> waggon", function() {deepEqual( Stem("waggoners"), "waggon");});
test("wagon -> wagon", function() {deepEqual( Stem("wagon"), "wagon");});
test("wagoner -> wagon", function() {deepEqual( Stem("wagoner"), "wagon");});
test("wagons -> wagon", function() {deepEqual( Stem("wagons"), "wagon");});
test("wagram -> wagram", function() {deepEqual( Stem("wagram"), "wagram");});
test("wags -> wag", function() {deepEqual( Stem("wags"), "wag");});
test("wagstaff -> wagstaff", function() {deepEqual( Stem("wagstaff"), "wagstaff");});
test("wagtail -> wagtail", function() {deepEqual( Stem("wagtail"), "wagtail");});
test("wahlverwandtschaften -> wahlverwandtschaften", function() {deepEqual( Stem("wahlverwandtschaften"), "wahlverwandtschaften");});
test("wail -> wail", function() {deepEqual( Stem("wail"), "wail");});
test("wailful -> wail", function() {deepEqual( Stem("wailful"), "wail");});
test("wailing -> wail", function() {deepEqual( Stem("wailing"), "wail");});
test("wails -> wail", function() {deepEqual( Stem("wails"), "wail");});
test("wain -> wain", function() {deepEqual( Stem("wain"), "wain");});
test("wainropes -> wainrop", function() {deepEqual( Stem("wainropes"), "wainrop");});
test("wainscot -> wainscot", function() {deepEqual( Stem("wainscot"), "wainscot");});
test("waist -> waist", function() {deepEqual( Stem("waist"), "waist");});
test("waistband -> waistband", function() {deepEqual( Stem("waistband"), "waistband");});
test("waistcoat -> waistcoat", function() {deepEqual( Stem("waistcoat"), "waistcoat");});
test("waistcoats -> waistcoat", function() {deepEqual( Stem("waistcoats"), "waistcoat");});
test("waisted -> waist", function() {deepEqual( Stem("waisted"), "waist");});
test("waists -> waist", function() {deepEqual( Stem("waists"), "waist");});
test("wait -> wait", function() {deepEqual( Stem("wait"), "wait");});
test("waited -> wait", function() {deepEqual( Stem("waited"), "wait");});
test("waiter -> waiter", function() {deepEqual( Stem("waiter"), "waiter");});
test("waiters -> waiter", function() {deepEqual( Stem("waiters"), "waiter");});
test("waiteth -> waiteth", function() {deepEqual( Stem("waiteth"), "waiteth");});
test("waiting -> wait", function() {deepEqual( Stem("waiting"), "wait");});
test("waits -> wait", function() {deepEqual( Stem("waits"), "wait");});
test("waives -> waiv", function() {deepEqual( Stem("waives"), "waiv");});
test("wak -> wak", function() {deepEqual( Stem("wak"), "wak");});
test("wake -> wake", function() {deepEqual( Stem("wake"), "wake");});
test("waked -> wake", function() {deepEqual( Stem("waked"), "wake");});
test("wakefield -> wakefield", function() {deepEqual( Stem("wakefield"), "wakefield");});
test("wakeful -> wake", function() {deepEqual( Stem("wakeful"), "wake");});
test("wakefulness -> wake", function() {deepEqual( Stem("wakefulness"), "wake");});
test("waken -> waken", function() {deepEqual( Stem("waken"), "waken");});
test("wakened -> waken", function() {deepEqual( Stem("wakened"), "waken");});
test("wakens -> waken", function() {deepEqual( Stem("wakens"), "waken");});
test("wakes -> wake", function() {deepEqual( Stem("wakes"), "wake");});
test("wakest -> wakest", function() {deepEqual( Stem("wakest"), "wakest");});
test("waking -> wake", function() {deepEqual( Stem("waking"), "wake");});
test("walcheren -> walcheren", function() {deepEqual( Stem("walcheren"), "walcheren");});
test("wales -> wale", function() {deepEqual( Stem("wales"), "wale");});
test("walk -> walk", function() {deepEqual( Stem("walk"), "walk");});
test("walked -> walk", function() {deepEqual( Stem("walked"), "walk");});
test("walker -> walker", function() {deepEqual( Stem("walker"), "walker");});
test("walking -> walk", function() {deepEqual( Stem("walking"), "walk");});
test("walks -> walk", function() {deepEqual( Stem("walks"), "walk");});
test("wall -> wall", function() {deepEqual( Stem("wall"), "wall");});
test("wallachia -> wallachia", function() {deepEqual( Stem("wallachia"), "wallachia");});
test("walled -> wall", function() {deepEqual( Stem("walled"), "wall");});
test("wallenstein -> wallenstein", function() {deepEqual( Stem("wallenstein"), "wallenstein");});
test("wallet -> wallet", function() {deepEqual( Stem("wallet"), "wallet");});
test("wallets -> wallet", function() {deepEqual( Stem("wallets"), "wallet");});
test("wallon -> wallon", function() {deepEqual( Stem("wallon"), "wallon");});
test("walloon -> walloon", function() {deepEqual( Stem("walloon"), "walloon");});
test("wallow -> wallow", function() {deepEqual( Stem("wallow"), "wallow");});
test("walls -> wall", function() {deepEqual( Stem("walls"), "wall");});
test("walnut -> walnut", function() {deepEqual( Stem("walnut"), "walnut");});
test("walpole -> walpol", function() {deepEqual( Stem("walpole"), "walpol");});
test("walter -> walter", function() {deepEqual( Stem("walter"), "walter");});
test("waltz -> waltz", function() {deepEqual( Stem("waltz"), "waltz");});
test("waltzers -> waltzer", function() {deepEqual( Stem("waltzers"), "waltzer");});
test("waltzes -> waltz", function() {deepEqual( Stem("waltzes"), "waltz");});
test("waltzing -> waltz", function() {deepEqual( Stem("waltzing"), "waltz");});
test("wan -> wan", function() {deepEqual( Stem("wan"), "wan");});
test("wand -> wand", function() {deepEqual( Stem("wand"), "wand");});
test("wander -> wander", function() {deepEqual( Stem("wander"), "wander");});
test("wandered -> wander", function() {deepEqual( Stem("wandered"), "wander");});
test("wanderer -> wander", function() {deepEqual( Stem("wanderer"), "wander");});
test("wanderers -> wander", function() {deepEqual( Stem("wanderers"), "wander");});
test("wandering -> wander", function() {deepEqual( Stem("wandering"), "wander");});
test("wanders -> wander", function() {deepEqual( Stem("wanders"), "wander");});
test("wands -> wand", function() {deepEqual( Stem("wands"), "wand");});
test("wandsworth -> wandsworth", function() {deepEqual( Stem("wandsworth"), "wandsworth");});
test("wane -> wane", function() {deepEqual( Stem("wane"), "wane");});
test("waned -> wane", function() {deepEqual( Stem("waned"), "wane");});
test("wanes -> wane", function() {deepEqual( Stem("wanes"), "wane");});
test("waning -> wane", function() {deepEqual( Stem("waning"), "wane");});
test("wanly -> wanli", function() {deepEqual( Stem("wanly"), "wanli");});
test("wann -> wann", function() {deepEqual( Stem("wann"), "wann");});
test("want -> want", function() {deepEqual( Stem("want"), "want");});
test("wanted -> want", function() {deepEqual( Stem("wanted"), "want");});
test("wanteth -> wanteth", function() {deepEqual( Stem("wanteth"), "wanteth");});
test("wanting -> want", function() {deepEqual( Stem("wanting"), "want");});
test("wanton -> wanton", function() {deepEqual( Stem("wanton"), "wanton");});
test("wantonly -> wantonli", function() {deepEqual( Stem("wantonly"), "wantonli");});
test("wantonness -> wanton", function() {deepEqual( Stem("wantonness"), "wanton");});
test("wantons -> wanton", function() {deepEqual( Stem("wantons"), "wanton");});
test("wants -> want", function() {deepEqual( Stem("wants"), "want");});
test("wappen -> wappen", function() {deepEqual( Stem("wappen"), "wappen");});
test("wapping -> wap", function() {deepEqual( Stem("wapping"), "wap");});
test("wapshot -> wapshot", function() {deepEqual( Stem("wapshot"), "wapshot");});
test("wapshots -> wapshot", function() {deepEqual( Stem("wapshots"), "wapshot");});
test("war -> war", function() {deepEqual( Stem("war"), "war");});
test("warble -> warbl", function() {deepEqual( Stem("warble"), "warbl");});
test("warbled -> warbl", function() {deepEqual( Stem("warbled"), "warbl");});
test("warblers -> warbler", function() {deepEqual( Stem("warblers"), "warbler");});
test("warbling -> warbl", function() {deepEqual( Stem("warbling"), "warbl");});
test("ward -> ward", function() {deepEqual( Stem("ward"), "ward");});
test("warded -> ward", function() {deepEqual( Stem("warded"), "ward");});
test("warden -> warden", function() {deepEqual( Stem("warden"), "warden");});
test("warder -> warder", function() {deepEqual( Stem("warder"), "warder");});
test("warders -> warder", function() {deepEqual( Stem("warders"), "warder");});
test("wardrobe -> wardrob", function() {deepEqual( Stem("wardrobe"), "wardrob");});
test("wardrobes -> wardrob", function() {deepEqual( Stem("wardrobes"), "wardrob");});
test("wardrop -> wardrop", function() {deepEqual( Stem("wardrop"), "wardrop");});
test("wards -> ward", function() {deepEqual( Stem("wards"), "ward");});
test("ware -> ware", function() {deepEqual( Stem("ware"), "ware");});
test("wares -> ware", function() {deepEqual( Stem("wares"), "ware");});
test("warily -> warili", function() {deepEqual( Stem("warily"), "warili");});
test("warkworth -> warkworth", function() {deepEqual( Stem("warkworth"), "warkworth");});
test("warlike -> warlik", function() {deepEqual( Stem("warlike"), "warlik");});
test("warm -> warm", function() {deepEqual( Stem("warm"), "warm");});
test("warmed -> warm", function() {deepEqual( Stem("warmed"), "warm");});
test("warmer -> warmer", function() {deepEqual( Stem("warmer"), "warmer");});
test("warmest -> warmest", function() {deepEqual( Stem("warmest"), "warmest");});
test("warming -> warm", function() {deepEqual( Stem("warming"), "warm");});
test("warmingpan -> warmingpan", function() {deepEqual( Stem("warmingpan"), "warmingpan");});
test("warmly -> warmli", function() {deepEqual( Stem("warmly"), "warmli");});
test("warms -> warm", function() {deepEqual( Stem("warms"), "warm");});
test("warmth -> warmth", function() {deepEqual( Stem("warmth"), "warmth");});
test("warn -> warn", function() {deepEqual( Stem("warn"), "warn");});
test("warned -> warn", function() {deepEqual( Stem("warned"), "warn");});
test("warning -> warn", function() {deepEqual( Stem("warning"), "warn");});
test("warnings -> warn", function() {deepEqual( Stem("warnings"), "warn");});
test("warns -> warn", function() {deepEqual( Stem("warns"), "warn");});
test("warp -> warp", function() {deepEqual( Stem("warp"), "warp");});
test("warped -> warp", function() {deepEqual( Stem("warped"), "warp");});
test("warr -> warr", function() {deepEqual( Stem("warr"), "warr");});
test("warrant -> warrant", function() {deepEqual( Stem("warrant"), "warrant");});
test("warranted -> warrant", function() {deepEqual( Stem("warranted"), "warrant");});
test("warranteth -> warranteth", function() {deepEqual( Stem("warranteth"), "warranteth");});
test("warrantise -> warrantis", function() {deepEqual( Stem("warrantise"), "warrantis");});
test("warrantize -> warrant", function() {deepEqual( Stem("warrantize"), "warrant");});
test("warrants -> warrant", function() {deepEqual( Stem("warrants"), "warrant");});
test("warranty -> warranti", function() {deepEqual( Stem("warranty"), "warranti");});
test("warren -> warren", function() {deepEqual( Stem("warren"), "warren");});
test("warrener -> warren", function() {deepEqual( Stem("warrener"), "warren");});
test("warring -> war", function() {deepEqual( Stem("warring"), "war");});
test("warrior -> warrior", function() {deepEqual( Stem("warrior"), "warrior");});
test("warriors -> warrior", function() {deepEqual( Stem("warriors"), "warrior");});
test("wars -> war", function() {deepEqual( Stem("wars"), "war");});
test("wart -> wart", function() {deepEqual( Stem("wart"), "wart");});
test("warwick -> warwick", function() {deepEqual( Stem("warwick"), "warwick");});
test("warwickshire -> warwickshir", function() {deepEqual( Stem("warwickshire"), "warwickshir");});
test("wary -> wari", function() {deepEqual( Stem("wary"), "wari");});
test("was -> wa", function() {deepEqual( Stem("was"), "wa");});
test("wash -> wash", function() {deepEqual( Stem("wash"), "wash");});
test("washed -> wash", function() {deepEqual( Stem("washed"), "wash");});
test("washer -> washer", function() {deepEqual( Stem("washer"), "washer");});
test("washerwoman -> washerwoman", function() {deepEqual( Stem("washerwoman"), "washerwoman");});
test("washes -> wash", function() {deepEqual( Stem("washes"), "wash");});
test("washford -> washford", function() {deepEqual( Stem("washford"), "washford");});
test("washing -> wash", function() {deepEqual( Stem("washing"), "wash");});
test("washington -> washington", function() {deepEqual( Stem("washington"), "washington");});
test("wasn -> wasn", function() {deepEqual( Stem("wasn"), "wasn");});
test("wasp -> wasp", function() {deepEqual( Stem("wasp"), "wasp");});
test("waspish -> waspish", function() {deepEqual( Stem("waspish"), "waspish");});
test("wasps -> wasp", function() {deepEqual( Stem("wasps"), "wasp");});
test("wassail -> wassail", function() {deepEqual( Stem("wassail"), "wassail");});
test("wassails -> wassail", function() {deepEqual( Stem("wassails"), "wassail");});
test("wast -> wast", function() {deepEqual( Stem("wast"), "wast");});
test("waste -> wast", function() {deepEqual( Stem("waste"), "wast");});
test("wasted -> wast", function() {deepEqual( Stem("wasted"), "wast");});
test("wasteful -> wast", function() {deepEqual( Stem("wasteful"), "wast");});
test("wasters -> waster", function() {deepEqual( Stem("wasters"), "waster");});
test("wastes -> wast", function() {deepEqual( Stem("wastes"), "wast");});
test("wasting -> wast", function() {deepEqual( Stem("wasting"), "wast");});
test("wat -> wat", function() {deepEqual( Stem("wat"), "wat");});
test("watch -> watch", function() {deepEqual( Stem("watch"), "watch");});
test("watchdog -> watchdog", function() {deepEqual( Stem("watchdog"), "watchdog");});
test("watched -> watch", function() {deepEqual( Stem("watched"), "watch");});
test("watchers -> watcher", function() {deepEqual( Stem("watchers"), "watcher");});
test("watches -> watch", function() {deepEqual( Stem("watches"), "watch");});
test("watchful -> watch", function() {deepEqual( Stem("watchful"), "watch");});
test("watchfulness -> watch", function() {deepEqual( Stem("watchfulness"), "watch");});
test("watching -> watch", function() {deepEqual( Stem("watching"), "watch");});
test("watchings -> watch", function() {deepEqual( Stem("watchings"), "watch");});
test("watchman -> watchman", function() {deepEqual( Stem("watchman"), "watchman");});
test("watchmen -> watchmen", function() {deepEqual( Stem("watchmen"), "watchmen");});
test("watchword -> watchword", function() {deepEqual( Stem("watchword"), "watchword");});
test("water -> water", function() {deepEqual( Stem("water"), "water");});
test("waterdrops -> waterdrop", function() {deepEqual( Stem("waterdrops"), "waterdrop");});
test("watered -> water", function() {deepEqual( Stem("watered"), "water");});
test("waterfly -> waterfli", function() {deepEqual( Stem("waterfly"), "waterfli");});
test("waterford -> waterford", function() {deepEqual( Stem("waterford"), "waterford");});
test("watering -> water", function() {deepEqual( Stem("watering"), "water");});
test("waterish -> waterish", function() {deepEqual( Stem("waterish"), "waterish");});
test("waterline -> waterlin", function() {deepEqual( Stem("waterline"), "waterlin");});
test("waterloo -> waterloo", function() {deepEqual( Stem("waterloo"), "waterloo");});
test("waterpots -> waterpot", function() {deepEqual( Stem("waterpots"), "waterpot");});
test("waterrugs -> waterrug", function() {deepEqual( Stem("waterrugs"), "waterrug");});
test("waters -> water", function() {deepEqual( Stem("waters"), "water");});
test("watertight -> watertight", function() {deepEqual( Stem("watertight"), "watertight");});
test("waterton -> waterton", function() {deepEqual( Stem("waterton"), "waterton");});
test("waterworks -> waterwork", function() {deepEqual( Stem("waterworks"), "waterwork");});
test("watery -> wateri", function() {deepEqual( Stem("watery"), "wateri");});
test("wathers -> wather", function() {deepEqual( Stem("wathers"), "wather");});
test("wattier -> wattier", function() {deepEqual( Stem("wattier"), "wattier");});
test("wav -> wav", function() {deepEqual( Stem("wav"), "wav");});
test("wave -> wave", function() {deepEqual( Stem("wave"), "wave");});
test("waved -> wave", function() {deepEqual( Stem("waved"), "wave");});
test("waver -> waver", function() {deepEqual( Stem("waver"), "waver");});
test("waverer -> waver", function() {deepEqual( Stem("waverer"), "waver");});
test("wavering -> waver", function() {deepEqual( Stem("wavering"), "waver");});
test("waves -> wave", function() {deepEqual( Stem("waves"), "wave");});
test("waving -> wave", function() {deepEqual( Stem("waving"), "wave");});
test("waw -> waw", function() {deepEqual( Stem("waw"), "waw");});
test("wawl -> wawl", function() {deepEqual( Stem("wawl"), "wawl");});
test("wawn -> wawn", function() {deepEqual( Stem("wawn"), "wawn");});
test("wawnt -> wawnt", function() {deepEqual( Stem("wawnt"), "wawnt");});
test("waws -> waw", function() {deepEqual( Stem("waws"), "waw");});
test("wax -> wax", function() {deepEqual( Stem("wax"), "wax");});
test("waxed -> wax", function() {deepEqual( Stem("waxed"), "wax");});
test("waxen -> waxen", function() {deepEqual( Stem("waxen"), "waxen");});
test("waxes -> wax", function() {deepEqual( Stem("waxes"), "wax");});
test("waxing -> wax", function() {deepEqual( Stem("waxing"), "wax");});
test("waxy -> waxi", function() {deepEqual( Stem("waxy"), "waxi");});
test("way -> wai", function() {deepEqual( Stem("way"), "wai");});
test("waylaid -> waylaid", function() {deepEqual( Stem("waylaid"), "waylaid");});
test("waylay -> waylai", function() {deepEqual( Stem("waylay"), "waylai");});
test("ways -> wai", function() {deepEqual( Stem("ways"), "wai");});
test("wayte -> wayt", function() {deepEqual( Stem("wayte"), "wayt");});
test("wayward -> wayward", function() {deepEqual( Stem("wayward"), "wayward");});
test("waywarder -> wayward", function() {deepEqual( Stem("waywarder"), "wayward");});
test("waywardness -> wayward", function() {deepEqual( Stem("waywardness"), "wayward");});
test("we -> we", function() {deepEqual( Stem("we"), "we");});
test("weak -> weak", function() {deepEqual( Stem("weak"), "weak");});
test("weaken -> weaken", function() {deepEqual( Stem("weaken"), "weaken");});
test("weakens -> weaken", function() {deepEqual( Stem("weakens"), "weaken");});
test("weaker -> weaker", function() {deepEqual( Stem("weaker"), "weaker");});
test("weakest -> weakest", function() {deepEqual( Stem("weakest"), "weakest");});
test("weakling -> weakl", function() {deepEqual( Stem("weakling"), "weakl");});
test("weakly -> weakli", function() {deepEqual( Stem("weakly"), "weakli");});
test("weakness -> weak", function() {deepEqual( Stem("weakness"), "weak");});
test("weaknesses -> weak", function() {deepEqual( Stem("weaknesses"), "weak");});
test("weal -> weal", function() {deepEqual( Stem("weal"), "weal");});
test("wealsmen -> wealsmen", function() {deepEqual( Stem("wealsmen"), "wealsmen");});
test("wealth -> wealth", function() {deepEqual( Stem("wealth"), "wealth");});
test("wealthiest -> wealthiest", function() {deepEqual( Stem("wealthiest"), "wealthiest");});
test("wealthily -> wealthili", function() {deepEqual( Stem("wealthily"), "wealthili");});
test("wealthy -> wealthi", function() {deepEqual( Stem("wealthy"), "wealthi");});
test("wealtlly -> wealtlli", function() {deepEqual( Stem("wealtlly"), "wealtlli");});
test("wean -> wean", function() {deepEqual( Stem("wean"), "wean");});
test("weaned -> wean", function() {deepEqual( Stem("weaned"), "wean");});
test("weaning -> wean", function() {deepEqual( Stem("weaning"), "wean");});
test("weapon -> weapon", function() {deepEqual( Stem("weapon"), "weapon");});
test("weapons -> weapon", function() {deepEqual( Stem("weapons"), "weapon");});
test("wear -> wear", function() {deepEqual( Stem("wear"), "wear");});
test("wearer -> wearer", function() {deepEqual( Stem("wearer"), "wearer");});
test("wearers -> wearer", function() {deepEqual( Stem("wearers"), "wearer");});
test("wearied -> weari", function() {deepEqual( Stem("wearied"), "weari");});
test("wearies -> weari", function() {deepEqual( Stem("wearies"), "weari");});
test("weariest -> weariest", function() {deepEqual( Stem("weariest"), "weariest");});
test("wearily -> wearili", function() {deepEqual( Stem("wearily"), "wearili");});
test("weariness -> weari", function() {deepEqual( Stem("weariness"), "weari");});
test("wearing -> wear", function() {deepEqual( Stem("wearing"), "wear");});
test("wearisome -> wearisom", function() {deepEqual( Stem("wearisome"), "wearisom");});
test("wears -> wear", function() {deepEqual( Stem("wears"), "wear");});
test("weary -> weari", function() {deepEqual( Stem("weary"), "weari");});
test("weasel -> weasel", function() {deepEqual( Stem("weasel"), "weasel");});
test("weather -> weather", function() {deepEqual( Stem("weather"), "weather");});
test("weathercock -> weathercock", function() {deepEqual( Stem("weathercock"), "weathercock");});
test("weathered -> weather", function() {deepEqual( Stem("weathered"), "weather");});
test("weathers -> weather", function() {deepEqual( Stem("weathers"), "weather");});
test("weav -> weav", function() {deepEqual( Stem("weav"), "weav");});
test("weave -> weav", function() {deepEqual( Stem("weave"), "weav");});
test("weaver -> weaver", function() {deepEqual( Stem("weaver"), "weaver");});
test("weavers -> weaver", function() {deepEqual( Stem("weavers"), "weaver");});
test("weaves -> weav", function() {deepEqual( Stem("weaves"), "weav");});
test("weaving -> weav", function() {deepEqual( Stem("weaving"), "weav");});
test("web -> web", function() {deepEqual( Stem("web"), "web");});
test("weber -> weber", function() {deepEqual( Stem("weber"), "weber");});
test("wed -> wed", function() {deepEqual( Stem("wed"), "wed");});
test("wedded -> wed", function() {deepEqual( Stem("wedded"), "wed");});
test("wedding -> wed", function() {deepEqual( Stem("wedding"), "wed");});
test("weddings -> wed", function() {deepEqual( Stem("weddings"), "wed");});
test("wedg -> wedg", function() {deepEqual( Stem("wedg"), "wedg");});
test("wedged -> wedg", function() {deepEqual( Stem("wedged"), "wedg");});
test("wedges -> wedg", function() {deepEqual( Stem("wedges"), "wedg");});
test("wedlock -> wedlock", function() {deepEqual( Stem("wedlock"), "wedlock");});
test("wednesday -> wednesdai", function() {deepEqual( Stem("wednesday"), "wednesdai");});
test("wednesdays -> wednesdai", function() {deepEqual( Stem("wednesdays"), "wednesdai");});
test("weed -> weed", function() {deepEqual( Stem("weed"), "weed");});
test("weeded -> weed", function() {deepEqual( Stem("weeded"), "weed");});
test("weeder -> weeder", function() {deepEqual( Stem("weeder"), "weeder");});
test("weeding -> weed", function() {deepEqual( Stem("weeding"), "weed");});
test("weeds -> weed", function() {deepEqual( Stem("weeds"), "weed");});
test("weedy -> weedi", function() {deepEqual( Stem("weedy"), "weedi");});
test("week -> week", function() {deepEqual( Stem("week"), "week");});
test("weekdays -> weekdai", function() {deepEqual( Stem("weekdays"), "weekdai");});
test("weeke -> week", function() {deepEqual( Stem("weeke"), "week");});
test("weekly -> weekli", function() {deepEqual( Stem("weekly"), "weekli");});
test("weeks -> week", function() {deepEqual( Stem("weeks"), "week");});
test("ween -> ween", function() {deepEqual( Stem("ween"), "ween");});
test("weening -> ween", function() {deepEqual( Stem("weening"), "ween");});
test("weep -> weep", function() {deepEqual( Stem("weep"), "weep");});
test("weeper -> weeper", function() {deepEqual( Stem("weeper"), "weeper");});
test("weeping -> weep", function() {deepEqual( Stem("weeping"), "weep");});
test("weepingly -> weepingli", function() {deepEqual( Stem("weepingly"), "weepingli");});
test("weepings -> weep", function() {deepEqual( Stem("weepings"), "weep");});
test("weeps -> weep", function() {deepEqual( Stem("weeps"), "weep");});
test("weet -> weet", function() {deepEqual( Stem("weet"), "weet");});
test("weigh -> weigh", function() {deepEqual( Stem("weigh"), "weigh");});
test("weighed -> weigh", function() {deepEqual( Stem("weighed"), "weigh");});
test("weighing -> weigh", function() {deepEqual( Stem("weighing"), "weigh");});
test("weighs -> weigh", function() {deepEqual( Stem("weighs"), "weigh");});
test("weight -> weight", function() {deepEqual( Stem("weight"), "weight");});
test("weightier -> weightier", function() {deepEqual( Stem("weightier"), "weightier");});
test("weightless -> weightless", function() {deepEqual( Stem("weightless"), "weightless");});
test("weights -> weight", function() {deepEqual( Stem("weights"), "weight");});
test("weighty -> weighti", function() {deepEqual( Stem("weighty"), "weighti");});
test("weird -> weird", function() {deepEqual( Stem("weird"), "weird");});
test("welcom -> welcom", function() {deepEqual( Stem("welcom"), "welcom");});
test("welcome -> welcom", function() {deepEqual( Stem("welcome"), "welcom");});
test("welcomed -> welcom", function() {deepEqual( Stem("welcomed"), "welcom");});
test("welcomer -> welcom", function() {deepEqual( Stem("welcomer"), "welcom");});
test("welcomes -> welcom", function() {deepEqual( Stem("welcomes"), "welcom");});
test("welcomest -> welcomest", function() {deepEqual( Stem("welcomest"), "welcomest");});
test("welfare -> welfar", function() {deepEqual( Stem("welfare"), "welfar");});
test("welkin -> welkin", function() {deepEqual( Stem("welkin"), "welkin");});
test("well -> well", function() {deepEqual( Stem("well"), "well");});
test("weller -> weller", function() {deepEqual( Stem("weller"), "weller");});
test("wellesleys -> welleslei", function() {deepEqual( Stem("wellesleys"), "welleslei");});
test("wellington -> wellington", function() {deepEqual( Stem("wellington"), "wellington");});
test("wellingtons -> wellington", function() {deepEqual( Stem("wellingtons"), "wellington");});
test("wells -> well", function() {deepEqual( Stem("wells"), "well");});
test("welsh -> welsh", function() {deepEqual( Stem("welsh"), "welsh");});
test("welshman -> welshman", function() {deepEqual( Stem("welshman"), "welshman");});
test("welshmen -> welshmen", function() {deepEqual( Stem("welshmen"), "welshmen");});
test("welshwomen -> welshwomen", function() {deepEqual( Stem("welshwomen"), "welshwomen");});
test("wench -> wench", function() {deepEqual( Stem("wench"), "wench");});
test("wenches -> wench", function() {deepEqual( Stem("wenches"), "wench");});
test("wenching -> wench", function() {deepEqual( Stem("wenching"), "wench");});
test("wend -> wend", function() {deepEqual( Stem("wend"), "wend");});
test("wenham -> wenham", function() {deepEqual( Stem("wenham"), "wenham");});
test("went -> went", function() {deepEqual( Stem("went"), "went");});
test("wept -> wept", function() {deepEqual( Stem("wept"), "wept");});
test("weraday -> weradai", function() {deepEqual( Stem("weraday"), "weradai");});
test("were -> were", function() {deepEqual( Stem("were"), "were");});
test("weren -> weren", function() {deepEqual( Stem("weren"), "weren");});
test("wert -> wert", function() {deepEqual( Stem("wert"), "wert");});
test("werther -> werther", function() {deepEqual( Stem("werther"), "werther");});
test("wesleyan -> wesleyan", function() {deepEqual( Stem("wesleyan"), "wesleyan");});
test("west -> west", function() {deepEqual( Stem("west"), "west");});
test("western -> western", function() {deepEqual( Stem("western"), "western");});
test("westminster -> westminst", function() {deepEqual( Stem("westminster"), "westminst");});
test("westmoreland -> westmoreland", function() {deepEqual( Stem("westmoreland"), "westmoreland");});
test("westward -> westward", function() {deepEqual( Stem("westward"), "westward");});
test("westwards -> westward", function() {deepEqual( Stem("westwards"), "westward");});
test("wet -> wet", function() {deepEqual( Stem("wet"), "wet");});
test("wether -> wether", function() {deepEqual( Stem("wether"), "wether");});
test("wetting -> wet", function() {deepEqual( Stem("wetting"), "wet");});
test("wezand -> wezand", function() {deepEqual( Stem("wezand"), "wezand");});
test("whale -> whale", function() {deepEqual( Stem("whale"), "whale");});
test("whales -> whale", function() {deepEqual( Stem("whales"), "whale");});
test("wharf -> wharf", function() {deepEqual( Stem("wharf"), "wharf");});
test("wharfs -> wharf", function() {deepEqual( Stem("wharfs"), "wharf");});
test("what -> what", function() {deepEqual( Stem("what"), "what");});
test("whatdyecallem -> whatdyecallem", function() {deepEqual( Stem("whatdyecallem"), "whatdyecallem");});
test("whatdyecallum -> whatdyecallum", function() {deepEqual( Stem("whatdyecallum"), "whatdyecallum");});
test("whate -> whate", function() {deepEqual( Stem("whate"), "whate");});
test("whatever -> whatev", function() {deepEqual( Stem("whatever"), "whatev");});
test("whatsoe -> whatso", function() {deepEqual( Stem("whatsoe"), "whatso");});
test("whatsoever -> whatsoev", function() {deepEqual( Stem("whatsoever"), "whatsoev");});
test("whatsome -> whatsom", function() {deepEqual( Stem("whatsome"), "whatsom");});
test("whe -> whe", function() {deepEqual( Stem("whe"), "whe");});
test("wheat -> wheat", function() {deepEqual( Stem("wheat"), "wheat");});
test("wheaten -> wheaten", function() {deepEqual( Stem("wheaten"), "wheaten");});
test("wheedle -> wheedl", function() {deepEqual( Stem("wheedle"), "wheedl");});
test("wheedled -> wheedl", function() {deepEqual( Stem("wheedled"), "wheedl");});
test("wheel -> wheel", function() {deepEqual( Stem("wheel"), "wheel");});
test("wheeled -> wheel", function() {deepEqual( Stem("wheeled"), "wheel");});
test("wheeling -> wheel", function() {deepEqual( Stem("wheeling"), "wheel");});
test("wheels -> wheel", function() {deepEqual( Stem("wheels"), "wheel");});
test("wheer -> wheer", function() {deepEqual( Stem("wheer"), "wheer");});
test("wheeson -> wheeson", function() {deepEqual( Stem("wheeson"), "wheeson");});
test("wheezed -> wheez", function() {deepEqual( Stem("wheezed"), "wheez");});
test("wheezing -> wheez", function() {deepEqual( Stem("wheezing"), "wheez");});
test("wheezy -> wheezi", function() {deepEqual( Stem("wheezy"), "wheezi");});
test("whelk -> whelk", function() {deepEqual( Stem("whelk"), "whelk");});
test("whelks -> whelk", function() {deepEqual( Stem("whelks"), "whelk");});
test("whelm -> whelm", function() {deepEqual( Stem("whelm"), "whelm");});
test("whelp -> whelp", function() {deepEqual( Stem("whelp"), "whelp");});
test("whelped -> whelp", function() {deepEqual( Stem("whelped"), "whelp");});
test("whelps -> whelp", function() {deepEqual( Stem("whelps"), "whelp");});
test("when -> when", function() {deepEqual( Stem("when"), "when");});
test("whenas -> whena", function() {deepEqual( Stem("whenas"), "whena");});
test("whence -> whenc", function() {deepEqual( Stem("whence"), "whenc");});
test("whencesoever -> whencesoev", function() {deepEqual( Stem("whencesoever"), "whencesoev");});
test("whene -> whene", function() {deepEqual( Stem("whene"), "whene");});
test("whenever -> whenev", function() {deepEqual( Stem("whenever"), "whenev");});
test("whensoever -> whensoev", function() {deepEqual( Stem("whensoever"), "whensoev");});
test("where -> where", function() {deepEqual( Stem("where"), "where");});
test("whereabout -> whereabout", function() {deepEqual( Stem("whereabout"), "whereabout");});
test("whereas -> wherea", function() {deepEqual( Stem("whereas"), "wherea");});
test("whereat -> whereat", function() {deepEqual( Stem("whereat"), "whereat");});
test("whereby -> wherebi", function() {deepEqual( Stem("whereby"), "wherebi");});
test("wherefore -> wherefor", function() {deepEqual( Stem("wherefore"), "wherefor");});
test("wherein -> wherein", function() {deepEqual( Stem("wherein"), "wherein");});
test("whereinto -> whereinto", function() {deepEqual( Stem("whereinto"), "whereinto");});
test("whereof -> whereof", function() {deepEqual( Stem("whereof"), "whereof");});
test("whereon -> whereon", function() {deepEqual( Stem("whereon"), "whereon");});
test("whereout -> whereout", function() {deepEqual( Stem("whereout"), "whereout");});
test("whereso -> whereso", function() {deepEqual( Stem("whereso"), "whereso");});
test("wheresoe -> whereso", function() {deepEqual( Stem("wheresoe"), "whereso");});
test("wheresoever -> wheresoev", function() {deepEqual( Stem("wheresoever"), "wheresoev");});
test("wheresome -> wheresom", function() {deepEqual( Stem("wheresome"), "wheresom");});
test("whereto -> whereto", function() {deepEqual( Stem("whereto"), "whereto");});
test("whereuntil -> whereuntil", function() {deepEqual( Stem("whereuntil"), "whereuntil");});
test("whereunto -> whereunto", function() {deepEqual( Stem("whereunto"), "whereunto");});
test("whereupon -> whereupon", function() {deepEqual( Stem("whereupon"), "whereupon");});
test("wherever -> wherev", function() {deepEqual( Stem("wherever"), "wherev");});
test("wherewith -> wherewith", function() {deepEqual( Stem("wherewith"), "wherewith");});
test("wherewithal -> wherewith", function() {deepEqual( Stem("wherewithal"), "wherewith");});
test("wherry -> wherri", function() {deepEqual( Stem("wherry"), "wherri");});
test("whet -> whet", function() {deepEqual( Stem("whet"), "whet");});
test("whether -> whether", function() {deepEqual( Stem("whether"), "whether");});
test("whetstone -> whetston", function() {deepEqual( Stem("whetstone"), "whetston");});
test("whetted -> whet", function() {deepEqual( Stem("whetted"), "whet");});
test("whew -> whew", function() {deepEqual( Stem("whew"), "whew");});
test("whey -> whei", function() {deepEqual( Stem("whey"), "whei");});
test("which -> which", function() {deepEqual( Stem("which"), "which");});
test("whiff -> whiff", function() {deepEqual( Stem("whiff"), "whiff");});
test("whiffler -> whiffler", function() {deepEqual( Stem("whiffler"), "whiffler");});
test("whig -> whig", function() {deepEqual( Stem("whig"), "whig");});
test("while -> while", function() {deepEqual( Stem("while"), "while");});
test("whiles -> while", function() {deepEqual( Stem("whiles"), "while");});
test("whilst -> whilst", function() {deepEqual( Stem("whilst"), "whilst");});
test("whimper -> whimper", function() {deepEqual( Stem("whimper"), "whimper");});
test("whimpered -> whimper", function() {deepEqual( Stem("whimpered"), "whimper");});
test("whimpering -> whimper", function() {deepEqual( Stem("whimpering"), "whimper");});
test("whin -> whin", function() {deepEqual( Stem("whin"), "whin");});
test("whine -> whine", function() {deepEqual( Stem("whine"), "whine");});
test("whined -> whine", function() {deepEqual( Stem("whined"), "whine");});
test("whinid -> whinid", function() {deepEqual( Stem("whinid"), "whinid");});
test("whining -> whine", function() {deepEqual( Stem("whining"), "whine");});
test("whip -> whip", function() {deepEqual( Stem("whip"), "whip");});
test("whipp -> whipp", function() {deepEqual( Stem("whipp"), "whipp");});
test("whipped -> whip", function() {deepEqual( Stem("whipped"), "whip");});
test("whipper -> whipper", function() {deepEqual( Stem("whipper"), "whipper");});
test("whippers -> whipper", function() {deepEqual( Stem("whippers"), "whipper");});
test("whipping -> whip", function() {deepEqual( Stem("whipping"), "whip");});
test("whippings -> whip", function() {deepEqual( Stem("whippings"), "whip");});
test("whips -> whip", function() {deepEqual( Stem("whips"), "whip");});
test("whipster -> whipster", function() {deepEqual( Stem("whipster"), "whipster");});
test("whipstock -> whipstock", function() {deepEqual( Stem("whipstock"), "whipstock");});
test("whipt -> whipt", function() {deepEqual( Stem("whipt"), "whipt");});
test("whirl -> whirl", function() {deepEqual( Stem("whirl"), "whirl");});
test("whirled -> whirl", function() {deepEqual( Stem("whirled"), "whirl");});
test("whirligig -> whirligig", function() {deepEqual( Stem("whirligig"), "whirligig");});
test("whirling -> whirl", function() {deepEqual( Stem("whirling"), "whirl");});
test("whirlpool -> whirlpool", function() {deepEqual( Stem("whirlpool"), "whirlpool");});
test("whirls -> whirl", function() {deepEqual( Stem("whirls"), "whirl");});
test("whirlwind -> whirlwind", function() {deepEqual( Stem("whirlwind"), "whirlwind");});
test("whirlwinds -> whirlwind", function() {deepEqual( Stem("whirlwinds"), "whirlwind");});
test("whirring -> whir", function() {deepEqual( Stem("whirring"), "whir");});
test("whisk -> whisk", function() {deepEqual( Stem("whisk"), "whisk");});
test("whisked -> whisk", function() {deepEqual( Stem("whisked"), "whisk");});
test("whisker -> whisker", function() {deepEqual( Stem("whisker"), "whisker");});
test("whiskered -> whisker", function() {deepEqual( Stem("whiskered"), "whisker");});
test("whiskers -> whisker", function() {deepEqual( Stem("whiskers"), "whisker");});
test("whisky -> whiski", function() {deepEqual( Stem("whisky"), "whiski");});
test("whisp -> whisp", function() {deepEqual( Stem("whisp"), "whisp");});
test("whisper -> whisper", function() {deepEqual( Stem("whisper"), "whisper");});
test("whispered -> whisper", function() {deepEqual( Stem("whispered"), "whisper");});
test("whispering -> whisper", function() {deepEqual( Stem("whispering"), "whisper");});
test("whisperings -> whisper", function() {deepEqual( Stem("whisperings"), "whisper");});
test("whispers -> whisper", function() {deepEqual( Stem("whispers"), "whisper");});
test("whist -> whist", function() {deepEqual( Stem("whist"), "whist");});
test("whistle -> whistl", function() {deepEqual( Stem("whistle"), "whistl");});
test("whistles -> whistl", function() {deepEqual( Stem("whistles"), "whistl");});
test("whistling -> whistl", function() {deepEqual( Stem("whistling"), "whistl");});
test("whit -> whit", function() {deepEqual( Stem("whit"), "whit");});
test("white -> white", function() {deepEqual( Stem("white"), "white");});
test("whitefriars -> whitefriar", function() {deepEqual( Stem("whitefriars"), "whitefriar");});
test("whitehall -> whitehal", function() {deepEqual( Stem("whitehall"), "whitehal");});
test("whitely -> white", function() {deepEqual( Stem("whitely"), "white");});
test("whiteness -> white", function() {deepEqual( Stem("whiteness"), "white");});
test("whiter -> whiter", function() {deepEqual( Stem("whiter"), "whiter");});
test("whites -> white", function() {deepEqual( Stem("whites"), "white");});
test("whitest -> whitest", function() {deepEqual( Stem("whitest"), "whitest");});
test("whitewashed -> whitewash", function() {deepEqual( Stem("whitewashed"), "whitewash");});
test("whitey -> whitei", function() {deepEqual( Stem("whitey"), "whitei");});
test("whither -> whither", function() {deepEqual( Stem("whither"), "whither");});
test("whiting -> white", function() {deepEqual( Stem("whiting"), "white");});
test("whitmore -> whitmor", function() {deepEqual( Stem("whitmore"), "whitmor");});
test("whitsters -> whitster", function() {deepEqual( Stem("whitsters"), "whitster");});
test("whitsun -> whitsun", function() {deepEqual( Stem("whitsun"), "whitsun");});
test("whittle -> whittl", function() {deepEqual( Stem("whittle"), "whittl");});
test("whity -> whiti", function() {deepEqual( Stem("whity"), "whiti");});
test("whizzing -> whizz", function() {deepEqual( Stem("whizzing"), "whizz");});
test("who -> who", function() {deepEqual( Stem("who"), "who");});
test("whoa -> whoa", function() {deepEqual( Stem("whoa"), "whoa");});
test("whoe -> whoe", function() {deepEqual( Stem("whoe"), "whoe");});
test("whoever -> whoever", function() {deepEqual( Stem("whoever"), "whoever");});
test("whole -> whole", function() {deepEqual( Stem("whole"), "whole");});
test("wholesom -> wholesom", function() {deepEqual( Stem("wholesom"), "wholesom");});
test("wholesome -> wholesom", function() {deepEqual( Stem("wholesome"), "wholesom");});
test("wholly -> wholli", function() {deepEqual( Stem("wholly"), "wholli");});
test("whom -> whom", function() {deepEqual( Stem("whom"), "whom");});
test("whoobub -> whoobub", function() {deepEqual( Stem("whoobub"), "whoobub");});
test("whoop -> whoop", function() {deepEqual( Stem("whoop"), "whoop");});
test("whooping -> whoop", function() {deepEqual( Stem("whooping"), "whoop");});
test("whop -> whop", function() {deepEqual( Stem("whop"), "whop");});
test("whopped -> whop", function() {deepEqual( Stem("whopped"), "whop");});
test("whor -> whor", function() {deepEqual( Stem("whor"), "whor");});
test("whore -> whore", function() {deepEqual( Stem("whore"), "whore");});
test("whoremaster -> whoremast", function() {deepEqual( Stem("whoremaster"), "whoremast");});
test("whoremasterly -> whoremasterli", function() {deepEqual( Stem("whoremasterly"), "whoremasterli");});
test("whoremonger -> whoremong", function() {deepEqual( Stem("whoremonger"), "whoremong");});
test("whores -> whore", function() {deepEqual( Stem("whores"), "whore");});
test("whoreson -> whoreson", function() {deepEqual( Stem("whoreson"), "whoreson");});
test("whoresons -> whoreson", function() {deepEqual( Stem("whoresons"), "whoreson");});
test("whoring -> whore", function() {deepEqual( Stem("whoring"), "whore");});
test("whorish -> whorish", function() {deepEqual( Stem("whorish"), "whorish");});
test("whose -> whose", function() {deepEqual( Stem("whose"), "whose");});
test("whoso -> whoso", function() {deepEqual( Stem("whoso"), "whoso");});
test("whosoe -> whoso", function() {deepEqual( Stem("whosoe"), "whoso");});
test("whosoever -> whosoev", function() {deepEqual( Stem("whosoever"), "whosoev");});
test("why -> why", function() {deepEqual( Stem("why"), "why");});
test("whyou -> whyou", function() {deepEqual( Stem("whyou"), "whyou");});
test("wi -> wi", function() {deepEqual( Stem("wi"), "wi");});
test("wick -> wick", function() {deepEqual( Stem("wick"), "wick");});
test("wicked -> wick", function() {deepEqual( Stem("wicked"), "wick");});
test("wickeder -> wicked", function() {deepEqual( Stem("wickeder"), "wicked");});
test("wickedest -> wickedest", function() {deepEqual( Stem("wickedest"), "wickedest");});
test("wickedly -> wickedli", function() {deepEqual( Stem("wickedly"), "wickedli");});
test("wickednes -> wickedn", function() {deepEqual( Stem("wickednes"), "wickedn");});
test("wickedness -> wicked", function() {deepEqual( Stem("wickedness"), "wicked");});
test("wicker -> wicker", function() {deepEqual( Stem("wicker"), "wicker");});
test("wicket -> wicket", function() {deepEqual( Stem("wicket"), "wicket");});
test("wicky -> wicki", function() {deepEqual( Stem("wicky"), "wicki");});
test("wid -> wid", function() {deepEqual( Stem("wid"), "wid");});
test("wide -> wide", function() {deepEqual( Stem("wide"), "wide");});
test("widely -> wide", function() {deepEqual( Stem("widely"), "wide");});
test("widens -> widen", function() {deepEqual( Stem("widens"), "widen");});
test("wider -> wider", function() {deepEqual( Stem("wider"), "wider");});
test("widest -> widest", function() {deepEqual( Stem("widest"), "widest");});
test("widg -> widg", function() {deepEqual( Stem("widg"), "widg");});
test("widow -> widow", function() {deepEqual( Stem("widow"), "widow");});
test("widowed -> widow", function() {deepEqual( Stem("widowed"), "widow");});
test("widower -> widow", function() {deepEqual( Stem("widower"), "widow");});
test("widowhood -> widowhood", function() {deepEqual( Stem("widowhood"), "widowhood");});
test("widows -> widow", function() {deepEqual( Stem("widows"), "widow");});
test("wield -> wield", function() {deepEqual( Stem("wield"), "wield");});
test("wielding -> wield", function() {deepEqual( Stem("wielding"), "wield");});
test("wiesbaden -> wiesbaden", function() {deepEqual( Stem("wiesbaden"), "wiesbaden");});
test("wife -> wife", function() {deepEqual( Stem("wife"), "wife");});
test("wig -> wig", function() {deepEqual( Stem("wig"), "wig");});
test("wight -> wight", function() {deepEqual( Stem("wight"), "wight");});
test("wights -> wight", function() {deepEqual( Stem("wights"), "wight");});
test("wigs -> wig", function() {deepEqual( Stem("wigs"), "wig");});
test("wilberforce -> wilberforc", function() {deepEqual( Stem("wilberforce"), "wilberforc");});
test("wild -> wild", function() {deepEqual( Stem("wild"), "wild");});
test("wildbad -> wildbad", function() {deepEqual( Stem("wildbad"), "wildbad");});
test("wildcats -> wildcat", function() {deepEqual( Stem("wildcats"), "wildcat");});
test("wilder -> wilder", function() {deepEqual( Stem("wilder"), "wilder");});
test("wilderness -> wilder", function() {deepEqual( Stem("wilderness"), "wilder");});
test("wildest -> wildest", function() {deepEqual( Stem("wildest"), "wildest");});
test("wildfire -> wildfir", function() {deepEqual( Stem("wildfire"), "wildfir");});
test("wildly -> wildli", function() {deepEqual( Stem("wildly"), "wildli");});
test("wildness -> wild", function() {deepEqual( Stem("wildness"), "wild");});
test("wilds -> wild", function() {deepEqual( Stem("wilds"), "wild");});
test("wiles -> wile", function() {deepEqual( Stem("wiles"), "wile");});
test("wilful -> wil", function() {deepEqual( Stem("wilful"), "wil");});
test("wilfull -> wilful", function() {deepEqual( Stem("wilfull"), "wilful");});
test("wilfully -> wilfulli", function() {deepEqual( Stem("wilfully"), "wilfulli");});
test("wilfulnes -> wilfuln", function() {deepEqual( Stem("wilfulnes"), "wilfuln");});
test("wilfulness -> wil", function() {deepEqual( Stem("wilfulness"), "wil");});
test("will -> will", function() {deepEqual( Stem("will"), "will");});
test("willed -> will", function() {deepEqual( Stem("willed"), "will");});
test("willers -> willer", function() {deepEqual( Stem("willers"), "willer");});
test("willeth -> willeth", function() {deepEqual( Stem("willeth"), "willeth");});
test("william -> william", function() {deepEqual( Stem("william"), "william");});
test("williams -> william", function() {deepEqual( Stem("williams"), "william");});
test("willing -> will", function() {deepEqual( Stem("willing"), "will");});
test("willingly -> willingli", function() {deepEqual( Stem("willingly"), "willingli");});
test("willingness -> willing", function() {deepEqual( Stem("willingness"), "willing");});
test("willis -> willi", function() {deepEqual( Stem("willis"), "willi");});
test("willoughby -> willoughbi", function() {deepEqual( Stem("willoughby"), "willoughbi");});
test("willow -> willow", function() {deepEqual( Stem("willow"), "willow");});
test("wills -> will", function() {deepEqual( Stem("wills"), "will");});
test("wilt -> wilt", function() {deepEqual( Stem("wilt"), "wilt");});
test("wiltshire -> wiltshir", function() {deepEqual( Stem("wiltshire"), "wiltshir");});
test("wily -> wili", function() {deepEqual( Stem("wily"), "wili");});
test("wimbledon -> wimbledon", function() {deepEqual( Stem("wimbledon"), "wimbledon");});
test("wimpled -> wimpl", function() {deepEqual( Stem("wimpled"), "wimpl");});
test("win -> win", function() {deepEqual( Stem("win"), "win");});
test("wince -> winc", function() {deepEqual( Stem("wince"), "winc");});
test("winch -> winch", function() {deepEqual( Stem("winch"), "winch");});
test("winchester -> winchest", function() {deepEqual( Stem("winchester"), "winchest");});
test("wincot -> wincot", function() {deepEqual( Stem("wincot"), "wincot");});
test("wind -> wind", function() {deepEqual( Stem("wind"), "wind");});
test("winded -> wind", function() {deepEqual( Stem("winded"), "wind");});
test("windgalls -> windgal", function() {deepEqual( Stem("windgalls"), "windgal");});
test("winding -> wind", function() {deepEqual( Stem("winding"), "wind");});
test("windlass -> windlass", function() {deepEqual( Stem("windlass"), "windlass");});
test("windlasses -> windlass", function() {deepEqual( Stem("windlasses"), "windlass");});
test("windmill -> windmil", function() {deepEqual( Stem("windmill"), "windmil");});
test("window -> window", function() {deepEqual( Stem("window"), "window");});
test("windows -> window", function() {deepEqual( Stem("windows"), "window");});
test("windpipe -> windpip", function() {deepEqual( Stem("windpipe"), "windpip");});
test("winds -> wind", function() {deepEqual( Stem("winds"), "wind");});
test("windsor -> windsor", function() {deepEqual( Stem("windsor"), "windsor");});
test("windy -> windi", function() {deepEqual( Stem("windy"), "windi");});
test("wine -> wine", function() {deepEqual( Stem("wine"), "wine");});
test("wines -> wine", function() {deepEqual( Stem("wines"), "wine");});
test("wing -> wing", function() {deepEqual( Stem("wing"), "wing");});
test("winged -> wing", function() {deepEqual( Stem("winged"), "wing");});
test("wingfield -> wingfield", function() {deepEqual( Stem("wingfield"), "wingfield");});
test("wingham -> wingham", function() {deepEqual( Stem("wingham"), "wingham");});
test("wings -> wing", function() {deepEqual( Stem("wings"), "wing");});
test("wink -> wink", function() {deepEqual( Stem("wink"), "wink");});
test("winked -> wink", function() {deepEqual( Stem("winked"), "wink");});
test("winking -> wink", function() {deepEqual( Stem("winking"), "wink");});
test("winks -> wink", function() {deepEqual( Stem("winks"), "wink");});
test("winkworth -> winkworth", function() {deepEqual( Stem("winkworth"), "winkworth");});
test("winner -> winner", function() {deepEqual( Stem("winner"), "winner");});
test("winners -> winner", function() {deepEqual( Stem("winners"), "winner");});
test("winning -> win", function() {deepEqual( Stem("winning"), "win");});
test("winnings -> win", function() {deepEqual( Stem("winnings"), "win");});
test("winnow -> winnow", function() {deepEqual( Stem("winnow"), "winnow");});
test("winnowed -> winnow", function() {deepEqual( Stem("winnowed"), "winnow");});
test("winnows -> winnow", function() {deepEqual( Stem("winnows"), "winnow");});
test("wins -> win", function() {deepEqual( Stem("wins"), "win");});
test("winter -> winter", function() {deepEqual( Stem("winter"), "winter");});
test("winterly -> winterli", function() {deepEqual( Stem("winterly"), "winterli");});
test("winters -> winter", function() {deepEqual( Stem("winters"), "winter");});
test("wip -> wip", function() {deepEqual( Stem("wip"), "wip");});
test("wipe -> wipe", function() {deepEqual( Stem("wipe"), "wipe");});
test("wiped -> wipe", function() {deepEqual( Stem("wiped"), "wipe");});
test("wipes -> wipe", function() {deepEqual( Stem("wipes"), "wipe");});
test("wiping -> wipe", function() {deepEqual( Stem("wiping"), "wipe");});
test("wire -> wire", function() {deepEqual( Stem("wire"), "wire");});
test("wires -> wire", function() {deepEqual( Stem("wires"), "wire");});
test("wirt -> wirt", function() {deepEqual( Stem("wirt"), "wirt");});
test("wiry -> wiri", function() {deepEqual( Stem("wiry"), "wiri");});
test("wisdom -> wisdom", function() {deepEqual( Stem("wisdom"), "wisdom");});
test("wisdoms -> wisdom", function() {deepEqual( Stem("wisdoms"), "wisdom");});
test("wise -> wise", function() {deepEqual( Stem("wise"), "wise");});
test("wiselier -> wiseli", function() {deepEqual( Stem("wiselier"), "wiseli");});
test("wisely -> wise", function() {deepEqual( Stem("wisely"), "wise");});
test("wiser -> wiser", function() {deepEqual( Stem("wiser"), "wiser");});
test("wisest -> wisest", function() {deepEqual( Stem("wisest"), "wisest");});
test("wish -> wish", function() {deepEqual( Stem("wish"), "wish");});
test("wished -> wish", function() {deepEqual( Stem("wished"), "wish");});
test("wisher -> wisher", function() {deepEqual( Stem("wisher"), "wisher");});
test("wishers -> wisher", function() {deepEqual( Stem("wishers"), "wisher");});
test("wishes -> wish", function() {deepEqual( Stem("wishes"), "wish");});
test("wishest -> wishest", function() {deepEqual( Stem("wishest"), "wishest");});
test("wisheth -> wisheth", function() {deepEqual( Stem("wisheth"), "wisheth");});
test("wishful -> wish", function() {deepEqual( Stem("wishful"), "wish");});
test("wishing -> wish", function() {deepEqual( Stem("wishing"), "wish");});
test("wishtly -> wishtli", function() {deepEqual( Stem("wishtly"), "wishtli");});
test("wisp -> wisp", function() {deepEqual( Stem("wisp"), "wisp");});
test("wisps -> wisp", function() {deepEqual( Stem("wisps"), "wisp");});
test("wist -> wist", function() {deepEqual( Stem("wist"), "wist");});
test("wistful -> wist", function() {deepEqual( Stem("wistful"), "wist");});
test("wistfully -> wistfulli", function() {deepEqual( Stem("wistfully"), "wistfulli");});
test("wit -> wit", function() {deepEqual( Stem("wit"), "wit");});
test("witb -> witb", function() {deepEqual( Stem("witb"), "witb");});
test("witch -> witch", function() {deepEqual( Stem("witch"), "witch");});
test("witchcraft -> witchcraft", function() {deepEqual( Stem("witchcraft"), "witchcraft");});
test("witches -> witch", function() {deepEqual( Stem("witches"), "witch");});
test("witching -> witch", function() {deepEqual( Stem("witching"), "witch");});
test("with -> with", function() {deepEqual( Stem("with"), "with");});
test("withal -> withal", function() {deepEqual( Stem("withal"), "withal");});
test("withdraw -> withdraw", function() {deepEqual( Stem("withdraw"), "withdraw");});
test("withdrawing -> withdraw", function() {deepEqual( Stem("withdrawing"), "withdraw");});
test("withdrawn -> withdrawn", function() {deepEqual( Stem("withdrawn"), "withdrawn");});
test("withdrew -> withdrew", function() {deepEqual( Stem("withdrew"), "withdrew");});
test("wither -> wither", function() {deepEqual( Stem("wither"), "wither");});
test("withered -> wither", function() {deepEqual( Stem("withered"), "wither");});
test("withering -> wither", function() {deepEqual( Stem("withering"), "wither");});
test("withers -> wither", function() {deepEqual( Stem("withers"), "wither");});
test("withheld -> withheld", function() {deepEqual( Stem("withheld"), "withheld");});
test("withhold -> withhold", function() {deepEqual( Stem("withhold"), "withhold");});
test("withholds -> withhold", function() {deepEqual( Stem("withholds"), "withhold");});
test("within -> within", function() {deepEqual( Stem("within"), "within");});
test("withold -> withold", function() {deepEqual( Stem("withold"), "withold");});
test("without -> without", function() {deepEqual( Stem("without"), "without");});
test("withstand -> withstand", function() {deepEqual( Stem("withstand"), "withstand");});
test("withstanding -> withstand", function() {deepEqual( Stem("withstanding"), "withstand");});
test("withstood -> withstood", function() {deepEqual( Stem("withstood"), "withstood");});
test("witless -> witless", function() {deepEqual( Stem("witless"), "witless");});
test("witness -> wit", function() {deepEqual( Stem("witness"), "wit");});
test("witnessed -> wit", function() {deepEqual( Stem("witnessed"), "wit");});
test("witnesses -> wit", function() {deepEqual( Stem("witnesses"), "wit");});
test("witnesseth -> witnesseth", function() {deepEqual( Stem("witnesseth"), "witnesseth");});
test("witnessing -> wit", function() {deepEqual( Stem("witnessing"), "wit");});
test("wits -> wit", function() {deepEqual( Stem("wits"), "wit");});
test("witted -> wit", function() {deepEqual( Stem("witted"), "wit");});
test("wittenberg -> wittenberg", function() {deepEqual( Stem("wittenberg"), "wittenberg");});
test("wittgenstein -> wittgenstein", function() {deepEqual( Stem("wittgenstein"), "wittgenstein");});
test("wittiest -> wittiest", function() {deepEqual( Stem("wittiest"), "wittiest");});
test("wittily -> wittili", function() {deepEqual( Stem("wittily"), "wittili");});
test("witting -> wit", function() {deepEqual( Stem("witting"), "wit");});
test("wittingly -> wittingli", function() {deepEqual( Stem("wittingly"), "wittingli");});
test("wittol -> wittol", function() {deepEqual( Stem("wittol"), "wittol");});
test("wittolly -> wittolli", function() {deepEqual( Stem("wittolly"), "wittolli");});
test("witty -> witti", function() {deepEqual( Stem("witty"), "witti");});
test("wiv -> wiv", function() {deepEqual( Stem("wiv"), "wiv");});
test("wive -> wive", function() {deepEqual( Stem("wive"), "wive");});
test("wived -> wive", function() {deepEqual( Stem("wived"), "wive");});
test("wives -> wive", function() {deepEqual( Stem("wives"), "wive");});
test("wiving -> wive", function() {deepEqual( Stem("wiving"), "wive");});
test("wizard -> wizard", function() {deepEqual( Stem("wizard"), "wizard");});
test("wizards -> wizard", function() {deepEqual( Stem("wizards"), "wizard");});
test("wm -> wm", function() {deepEqual( Stem("wm"), "wm");});
test("wo -> wo", function() {deepEqual( Stem("wo"), "wo");});
test("woe -> woe", function() {deepEqual( Stem("woe"), "woe");});
test("woeful -> woeful", function() {deepEqual( Stem("woeful"), "woeful");});
test("woefull -> woeful", function() {deepEqual( Stem("woefull"), "woeful");});
test("woefullest -> woefullest", function() {deepEqual( Stem("woefullest"), "woefullest");});
test("woefully -> woefulli", function() {deepEqual( Stem("woefully"), "woefulli");});
test("woes -> woe", function() {deepEqual( Stem("woes"), "woe");});
test("woful -> woful", function() {deepEqual( Stem("woful"), "woful");});
test("woke -> woke", function() {deepEqual( Stem("woke"), "woke");});
test("wolf -> wolf", function() {deepEqual( Stem("wolf"), "wolf");});
test("wolfe -> wolf", function() {deepEqual( Stem("wolfe"), "wolf");});
test("wolfish -> wolfish", function() {deepEqual( Stem("wolfish"), "wolfish");});
test("wollah -> wollah", function() {deepEqual( Stem("wollah"), "wollah");});
test("wolsey -> wolsei", function() {deepEqual( Stem("wolsey"), "wolsei");});
test("wolves -> wolv", function() {deepEqual( Stem("wolves"), "wolv");});
test("wolvish -> wolvish", function() {deepEqual( Stem("wolvish"), "wolvish");});
test("woman -> woman", function() {deepEqual( Stem("woman"), "woman");});
test("womanhood -> womanhood", function() {deepEqual( Stem("womanhood"), "womanhood");});
test("womanish -> womanish", function() {deepEqual( Stem("womanish"), "womanish");});
test("womankind -> womankind", function() {deepEqual( Stem("womankind"), "womankind");});
test("womanly -> womanli", function() {deepEqual( Stem("womanly"), "womanli");});
test("womb -> womb", function() {deepEqual( Stem("womb"), "womb");});
test("wombs -> womb", function() {deepEqual( Stem("wombs"), "womb");});
test("womby -> wombi", function() {deepEqual( Stem("womby"), "wombi");});
test("women -> women", function() {deepEqual( Stem("women"), "women");});
test("won -> won", function() {deepEqual( Stem("won"), "won");});
test("woncot -> woncot", function() {deepEqual( Stem("woncot"), "woncot");});
test("wond -> wond", function() {deepEqual( Stem("wond"), "wond");});
test("wonder -> wonder", function() {deepEqual( Stem("wonder"), "wonder");});
test("wondered -> wonder", function() {deepEqual( Stem("wondered"), "wonder");});
test("wonderful -> wonder", function() {deepEqual( Stem("wonderful"), "wonder");});
test("wonderfully -> wonderfulli", function() {deepEqual( Stem("wonderfully"), "wonderfulli");});
test("wondering -> wonder", function() {deepEqual( Stem("wondering"), "wonder");});
test("wonders -> wonder", function() {deepEqual( Stem("wonders"), "wonder");});
test("wondrous -> wondrou", function() {deepEqual( Stem("wondrous"), "wondrou");});
test("wondrously -> wondrous", function() {deepEqual( Stem("wondrously"), "wondrous");});
test("wont -> wont", function() {deepEqual( Stem("wont"), "wont");});
test("wonted -> wont", function() {deepEqual( Stem("wonted"), "wont");});
test("woo -> woo", function() {deepEqual( Stem("woo"), "woo");});
test("wood -> wood", function() {deepEqual( Stem("wood"), "wood");});
test("woodbine -> woodbin", function() {deepEqual( Stem("woodbine"), "woodbin");});
test("woodcock -> woodcock", function() {deepEqual( Stem("woodcock"), "woodcock");});
test("woodcocks -> woodcock", function() {deepEqual( Stem("woodcocks"), "woodcock");});
test("wooden -> wooden", function() {deepEqual( Stem("wooden"), "wooden");});
test("woodland -> woodland", function() {deepEqual( Stem("woodland"), "woodland");});
test("woodman -> woodman", function() {deepEqual( Stem("woodman"), "woodman");});
test("woodmonger -> woodmong", function() {deepEqual( Stem("woodmonger"), "woodmong");});
test("woods -> wood", function() {deepEqual( Stem("woods"), "wood");});
test("woodstock -> woodstock", function() {deepEqual( Stem("woodstock"), "woodstock");});
test("woodville -> woodvil", function() {deepEqual( Stem("woodville"), "woodvil");});
test("wooed -> woo", function() {deepEqual( Stem("wooed"), "woo");});
test("wooer -> wooer", function() {deepEqual( Stem("wooer"), "wooer");});
test("wooers -> wooer", function() {deepEqual( Stem("wooers"), "wooer");});
test("wooes -> wooe", function() {deepEqual( Stem("wooes"), "wooe");});
test("woof -> woof", function() {deepEqual( Stem("woof"), "woof");});
test("wooing -> woo", function() {deepEqual( Stem("wooing"), "woo");});
test("wooingly -> wooingli", function() {deepEqual( Stem("wooingly"), "wooingli");});
test("wool -> wool", function() {deepEqual( Stem("wool"), "wool");});
test("woollen -> woollen", function() {deepEqual( Stem("woollen"), "woollen");});
test("woolly -> woolli", function() {deepEqual( Stem("woolly"), "woolli");});
test("woolsack -> woolsack", function() {deepEqual( Stem("woolsack"), "woolsack");});
test("woolsey -> woolsei", function() {deepEqual( Stem("woolsey"), "woolsei");});
test("woolward -> woolward", function() {deepEqual( Stem("woolward"), "woolward");});
test("woolwich -> woolwich", function() {deepEqual( Stem("woolwich"), "woolwich");});
test("wooly -> wooli", function() {deepEqual( Stem("wooly"), "wooli");});
test("woos -> woo", function() {deepEqual( Stem("woos"), "woo");});
test("wor -> wor", function() {deepEqual( Stem("wor"), "wor");});
test("worcester -> worcest", function() {deepEqual( Stem("worcester"), "worcest");});
test("word -> word", function() {deepEqual( Stem("word"), "word");});
test("words -> word", function() {deepEqual( Stem("words"), "word");});
test("wore -> wore", function() {deepEqual( Stem("wore"), "wore");});
test("worins -> worin", function() {deepEqual( Stem("worins"), "worin");});
test("work -> work", function() {deepEqual( Stem("work"), "work");});
test("workbags -> workbag", function() {deepEqual( Stem("workbags"), "workbag");});
test("worked -> work", function() {deepEqual( Stem("worked"), "work");});
test("workers -> worker", function() {deepEqual( Stem("workers"), "worker");});
test("workhouse -> workhous", function() {deepEqual( Stem("workhouse"), "workhous");});
test("working -> work", function() {deepEqual( Stem("working"), "work");});
test("workings -> work", function() {deepEqual( Stem("workings"), "work");});
test("workman -> workman", function() {deepEqual( Stem("workman"), "workman");});
test("workmanly -> workmanli", function() {deepEqual( Stem("workmanly"), "workmanli");});
test("workmanship -> workmanship", function() {deepEqual( Stem("workmanship"), "workmanship");});
test("workmen -> workmen", function() {deepEqual( Stem("workmen"), "workmen");});
test("works -> work", function() {deepEqual( Stem("works"), "work");});
test("worky -> worki", function() {deepEqual( Stem("worky"), "worki");});
test("world -> world", function() {deepEqual( Stem("world"), "world");});
test("worldliness -> worldli", function() {deepEqual( Stem("worldliness"), "worldli");});
test("worldling -> worldl", function() {deepEqual( Stem("worldling"), "worldl");});
test("worldlings -> worldl", function() {deepEqual( Stem("worldlings"), "worldl");});
test("worldly -> worldli", function() {deepEqual( Stem("worldly"), "worldli");});
test("worlds -> world", function() {deepEqual( Stem("worlds"), "world");});
test("worm -> worm", function() {deepEqual( Stem("worm"), "worm");});
test("worms -> worm", function() {deepEqual( Stem("worms"), "worm");});
test("wormwood -> wormwood", function() {deepEqual( Stem("wormwood"), "wormwood");});
test("wormy -> wormi", function() {deepEqual( Stem("wormy"), "wormi");});
test("worn -> worn", function() {deepEqual( Stem("worn"), "worn");});
test("worret -> worret", function() {deepEqual( Stem("worret"), "worret");});
test("worried -> worri", function() {deepEqual( Stem("worried"), "worri");});
test("worries -> worri", function() {deepEqual( Stem("worries"), "worri");});
test("worry -> worri", function() {deepEqual( Stem("worry"), "worri");});
test("worrying -> worri", function() {deepEqual( Stem("worrying"), "worri");});
test("worse -> wors", function() {deepEqual( Stem("worse"), "wors");});
test("worser -> worser", function() {deepEqual( Stem("worser"), "worser");});
test("worship -> worship", function() {deepEqual( Stem("worship"), "worship");});
test("worshipful -> worship", function() {deepEqual( Stem("worshipful"), "worship");});
test("worshipfully -> worshipfulli", function() {deepEqual( Stem("worshipfully"), "worshipfulli");});
test("worshipp -> worshipp", function() {deepEqual( Stem("worshipp"), "worshipp");});
test("worshipped -> worship", function() {deepEqual( Stem("worshipped"), "worship");});
test("worshipper -> worshipp", function() {deepEqual( Stem("worshipper"), "worshipp");});
test("worshippers -> worshipp", function() {deepEqual( Stem("worshippers"), "worshipp");});
test("worshippest -> worshippest", function() {deepEqual( Stem("worshippest"), "worshippest");});
test("worshipping -> worship", function() {deepEqual( Stem("worshipping"), "worship");});
test("worships -> worship", function() {deepEqual( Stem("worships"), "worship");});
test("worst -> worst", function() {deepEqual( Stem("worst"), "worst");});
test("worsted -> worst", function() {deepEqual( Stem("worsted"), "worst");});
test("wort -> wort", function() {deepEqual( Stem("wort"), "wort");});
test("worth -> worth", function() {deepEqual( Stem("worth"), "worth");});
test("worthied -> worthi", function() {deepEqual( Stem("worthied"), "worthi");});
test("worthier -> worthier", function() {deepEqual( Stem("worthier"), "worthier");});
test("worthies -> worthi", function() {deepEqual( Stem("worthies"), "worthi");});
test("worthiest -> worthiest", function() {deepEqual( Stem("worthiest"), "worthiest");});
test("worthily -> worthili", function() {deepEqual( Stem("worthily"), "worthili");});
test("worthiness -> worthi", function() {deepEqual( Stem("worthiness"), "worthi");});
test("worthing -> worth", function() {deepEqual( Stem("worthing"), "worth");});
test("worthless -> worthless", function() {deepEqual( Stem("worthless"), "worthless");});
test("worthlessness -> worthless", function() {deepEqual( Stem("worthlessness"), "worthless");});
test("worths -> worth", function() {deepEqual( Stem("worths"), "worth");});
test("worthy -> worthi", function() {deepEqual( Stem("worthy"), "worthi");});
test("worts -> wort", function() {deepEqual( Stem("worts"), "wort");});
test("wot -> wot", function() {deepEqual( Stem("wot"), "wot");});
test("wots -> wot", function() {deepEqual( Stem("wots"), "wot");});
test("wotting -> wot", function() {deepEqual( Stem("wotting"), "wot");});
test("wouid -> wouid", function() {deepEqual( Stem("wouid"), "wouid");});
test("would -> would", function() {deepEqual( Stem("would"), "would");});
test("wouldest -> wouldest", function() {deepEqual( Stem("wouldest"), "wouldest");});
test("wouldn -> wouldn", function() {deepEqual( Stem("wouldn"), "wouldn");});
test("wouldst -> wouldst", function() {deepEqual( Stem("wouldst"), "wouldst");});
test("wound -> wound", function() {deepEqual( Stem("wound"), "wound");});
test("wounded -> wound", function() {deepEqual( Stem("wounded"), "wound");});
test("wounding -> wound", function() {deepEqual( Stem("wounding"), "wound");});
test("woundings -> wound", function() {deepEqual( Stem("woundings"), "wound");});
test("woundless -> woundless", function() {deepEqual( Stem("woundless"), "woundless");});
test("wounds -> wound", function() {deepEqual( Stem("wounds"), "wound");});
test("wouns -> woun", function() {deepEqual( Stem("wouns"), "woun");});
test("woven -> woven", function() {deepEqual( Stem("woven"), "woven");});
test("wow -> wow", function() {deepEqual( Stem("wow"), "wow");});
test("wrack -> wrack", function() {deepEqual( Stem("wrack"), "wrack");});
test("wrackful -> wrack", function() {deepEqual( Stem("wrackful"), "wrack");});
test("wrangle -> wrangl", function() {deepEqual( Stem("wrangle"), "wrangl");});
test("wrangler -> wrangler", function() {deepEqual( Stem("wrangler"), "wrangler");});
test("wranglers -> wrangler", function() {deepEqual( Stem("wranglers"), "wrangler");});
test("wrangling -> wrangl", function() {deepEqual( Stem("wrangling"), "wrangl");});
test("wrap -> wrap", function() {deepEqual( Stem("wrap"), "wrap");});
test("wrapp -> wrapp", function() {deepEqual( Stem("wrapp"), "wrapp");});
test("wrapped -> wrap", function() {deepEqual( Stem("wrapped"), "wrap");});
test("wrappers -> wrapper", function() {deepEqual( Stem("wrappers"), "wrapper");});
test("wraps -> wrap", function() {deepEqual( Stem("wraps"), "wrap");});
test("wrapt -> wrapt", function() {deepEqual( Stem("wrapt"), "wrapt");});
test("wrath -> wrath", function() {deepEqual( Stem("wrath"), "wrath");});
test("wrathful -> wrath", function() {deepEqual( Stem("wrathful"), "wrath");});
test("wrathfully -> wrathfulli", function() {deepEqual( Stem("wrathfully"), "wrathfulli");});
test("wraths -> wrath", function() {deepEqual( Stem("wraths"), "wrath");});
test("wreak -> wreak", function() {deepEqual( Stem("wreak"), "wreak");});
test("wreakful -> wreak", function() {deepEqual( Stem("wreakful"), "wreak");});
test("wreaks -> wreak", function() {deepEqual( Stem("wreaks"), "wreak");});
test("wreath -> wreath", function() {deepEqual( Stem("wreath"), "wreath");});
test("wreathed -> wreath", function() {deepEqual( Stem("wreathed"), "wreath");});
test("wreathen -> wreathen", function() {deepEqual( Stem("wreathen"), "wreathen");});
test("wreaths -> wreath", function() {deepEqual( Stem("wreaths"), "wreath");});
test("wreck -> wreck", function() {deepEqual( Stem("wreck"), "wreck");});
test("wrecked -> wreck", function() {deepEqual( Stem("wrecked"), "wreck");});
test("wrecks -> wreck", function() {deepEqual( Stem("wrecks"), "wreck");});
test("wren -> wren", function() {deepEqual( Stem("wren"), "wren");});
test("wrench -> wrench", function() {deepEqual( Stem("wrench"), "wrench");});
test("wrenched -> wrench", function() {deepEqual( Stem("wrenched"), "wrench");});
test("wrenching -> wrench", function() {deepEqual( Stem("wrenching"), "wrench");});
test("wrens -> wren", function() {deepEqual( Stem("wrens"), "wren");});
test("wrest -> wrest", function() {deepEqual( Stem("wrest"), "wrest");});
test("wrested -> wrest", function() {deepEqual( Stem("wrested"), "wrest");});
test("wresting -> wrest", function() {deepEqual( Stem("wresting"), "wrest");});
test("wrestle -> wrestl", function() {deepEqual( Stem("wrestle"), "wrestl");});
test("wrestled -> wrestl", function() {deepEqual( Stem("wrestled"), "wrestl");});
test("wrestler -> wrestler", function() {deepEqual( Stem("wrestler"), "wrestler");});
test("wrestlers -> wrestler", function() {deepEqual( Stem("wrestlers"), "wrestler");});
test("wrestling -> wrestl", function() {deepEqual( Stem("wrestling"), "wrestl");});
test("wretch -> wretch", function() {deepEqual( Stem("wretch"), "wretch");});
test("wretchcd -> wretchcd", function() {deepEqual( Stem("wretchcd"), "wretchcd");});
test("wretched -> wretch", function() {deepEqual( Stem("wretched"), "wretch");});
test("wretchedness -> wretched", function() {deepEqual( Stem("wretchedness"), "wretched");});
test("wretches -> wretch", function() {deepEqual( Stem("wretches"), "wretch");});
test("wring -> wring", function() {deepEqual( Stem("wring"), "wring");});
test("wringer -> wringer", function() {deepEqual( Stem("wringer"), "wringer");});
test("wringing -> wring", function() {deepEqual( Stem("wringing"), "wring");});
test("wrings -> wring", function() {deepEqual( Stem("wrings"), "wring");});
test("wrinkle -> wrinkl", function() {deepEqual( Stem("wrinkle"), "wrinkl");});
test("wrinkled -> wrinkl", function() {deepEqual( Stem("wrinkled"), "wrinkl");});
test("wrinkles -> wrinkl", function() {deepEqual( Stem("wrinkles"), "wrinkl");});
test("wrist -> wrist", function() {deepEqual( Stem("wrist"), "wrist");});
test("wrists -> wrist", function() {deepEqual( Stem("wrists"), "wrist");});
test("writ -> writ", function() {deepEqual( Stem("writ"), "writ");});
test("write -> write", function() {deepEqual( Stem("write"), "write");});
test("writer -> writer", function() {deepEqual( Stem("writer"), "writer");});
test("writers -> writer", function() {deepEqual( Stem("writers"), "writer");});
test("writes -> write", function() {deepEqual( Stem("writes"), "write");});
test("writhed -> writh", function() {deepEqual( Stem("writhed"), "writh");});
test("writhes -> writh", function() {deepEqual( Stem("writhes"), "writh");});
test("writhing -> writh", function() {deepEqual( Stem("writhing"), "writh");});
test("writhled -> writhl", function() {deepEqual( Stem("writhled"), "writhl");});
test("writing -> write", function() {deepEqual( Stem("writing"), "write");});
test("writings -> write", function() {deepEqual( Stem("writings"), "write");});
test("writs -> writ", function() {deepEqual( Stem("writs"), "writ");});
test("written -> written", function() {deepEqual( Stem("written"), "written");});
test("wrong -> wrong", function() {deepEqual( Stem("wrong"), "wrong");});
test("wronged -> wrong", function() {deepEqual( Stem("wronged"), "wrong");});
test("wronger -> wronger", function() {deepEqual( Stem("wronger"), "wronger");});
test("wrongful -> wrong", function() {deepEqual( Stem("wrongful"), "wrong");});
test("wrongfully -> wrongfulli", function() {deepEqual( Stem("wrongfully"), "wrongfulli");});
test("wronging -> wrong", function() {deepEqual( Stem("wronging"), "wrong");});
test("wrongly -> wrongli", function() {deepEqual( Stem("wrongly"), "wrongli");});
test("wrongs -> wrong", function() {deepEqual( Stem("wrongs"), "wrong");});
test("wronk -> wronk", function() {deepEqual( Stem("wronk"), "wronk");});
test("wrote -> wrote", function() {deepEqual( Stem("wrote"), "wrote");});
test("wroth -> wroth", function() {deepEqual( Stem("wroth"), "wroth");});
test("wrought -> wrought", function() {deepEqual( Stem("wrought"), "wrought");});
test("wroughton -> wroughton", function() {deepEqual( Stem("wroughton"), "wroughton");});
test("wrung -> wrung", function() {deepEqual( Stem("wrung"), "wrung");});
test("wry -> wry", function() {deepEqual( Stem("wry"), "wry");});
test("wrying -> wry", function() {deepEqual( Stem("wrying"), "wry");});
test("wt -> wt", function() {deepEqual( Stem("wt"), "wt");});
test("wul -> wul", function() {deepEqual( Stem("wul"), "wul");});
test("wuss -> wuss", function() {deepEqual( Stem("wuss"), "wuss");});
test("wye -> wye", function() {deepEqual( Stem("wye"), "wye");});
test("x -> x", function() {deepEqual( Stem("x"), "x");});
test("xanthippe -> xanthipp", function() {deepEqual( Stem("xanthippe"), "xanthipp");});
test("xi -> xi", function() {deepEqual( Stem("xi"), "xi");});
test("xii -> xii", function() {deepEqual( Stem("xii"), "xii");});
test("xiii -> xiii", function() {deepEqual( Stem("xiii"), "xiii");});
test("xiv -> xiv", function() {deepEqual( Stem("xiv"), "xiv");});
test("xix -> xix", function() {deepEqual( Stem("xix"), "xix");});
test("xl -> xl", function() {deepEqual( Stem("xl"), "xl");});
test("xli -> xli", function() {deepEqual( Stem("xli"), "xli");});
test("xlii -> xlii", function() {deepEqual( Stem("xlii"), "xlii");});
test("xliii -> xliii", function() {deepEqual( Stem("xliii"), "xliii");});
test("xliv -> xliv", function() {deepEqual( Stem("xliv"), "xliv");});
test("xlix -> xlix", function() {deepEqual( Stem("xlix"), "xlix");});
test("xlv -> xlv", function() {deepEqual( Stem("xlv"), "xlv");});
test("xlvi -> xlvi", function() {deepEqual( Stem("xlvi"), "xlvi");});
test("xlvii -> xlvii", function() {deepEqual( Stem("xlvii"), "xlvii");});
test("xlviii -> xlviii", function() {deepEqual( Stem("xlviii"), "xlviii");});
test("xv -> xv", function() {deepEqual( Stem("xv"), "xv");});
test("xvi -> xvi", function() {deepEqual( Stem("xvi"), "xvi");});
test("xvii -> xvii", function() {deepEqual( Stem("xvii"), "xvii");});
test("xviii -> xviii", function() {deepEqual( Stem("xviii"), "xviii");});
test("xx -> xx", function() {deepEqual( Stem("xx"), "xx");});
test("xxi -> xxi", function() {deepEqual( Stem("xxi"), "xxi");});
test("xxii -> xxii", function() {deepEqual( Stem("xxii"), "xxii");});
test("xxiii -> xxiii", function() {deepEqual( Stem("xxiii"), "xxiii");});
test("xxiv -> xxiv", function() {deepEqual( Stem("xxiv"), "xxiv");});
test("xxix -> xxix", function() {deepEqual( Stem("xxix"), "xxix");});
test("xxv -> xxv", function() {deepEqual( Stem("xxv"), "xxv");});
test("xxvi -> xxvi", function() {deepEqual( Stem("xxvi"), "xxvi");});
test("xxvii -> xxvii", function() {deepEqual( Stem("xxvii"), "xxvii");});
test("xxx -> xxx", function() {deepEqual( Stem("xxx"), "xxx");});
test("xxxi -> xxxi", function() {deepEqual( Stem("xxxi"), "xxxi");});
test("xxxii -> xxxii", function() {deepEqual( Stem("xxxii"), "xxxii");});
test("xxxiii -> xxxiii", function() {deepEqual( Stem("xxxiii"), "xxxiii");});
test("xxxiv -> xxxiv", function() {deepEqual( Stem("xxxiv"), "xxxiv");});
test("xxxix -> xxxix", function() {deepEqual( Stem("xxxix"), "xxxix");});
test("xxxv -> xxxv", function() {deepEqual( Stem("xxxv"), "xxxv");});
test("xxxvi -> xxxvi", function() {deepEqual( Stem("xxxvi"), "xxxvi");});
test("xxxvii -> xxxvii", function() {deepEqual( Stem("xxxvii"), "xxxvii");});
test("xxxviii -> xxxviii", function() {deepEqual( Stem("xxxviii"), "xxxviii");});
test("y -> y", function() {deepEqual( Stem("y"), "y");});
test("yachting -> yacht", function() {deepEqual( Stem("yachting"), "yacht");});
test("yakmaks -> yakmak", function() {deepEqual( Stem("yakmaks"), "yakmak");});
test("yankee -> yanke", function() {deepEqual( Stem("yankee"), "yanke");});
test("yard -> yard", function() {deepEqual( Stem("yard"), "yard");});
test("yards -> yard", function() {deepEqual( Stem("yards"), "yard");});
test("yare -> yare", function() {deepEqual( Stem("yare"), "yare");});
test("yarely -> yare", function() {deepEqual( Stem("yarely"), "yare");});
test("yarn -> yarn", function() {deepEqual( Stem("yarn"), "yarn");});
test("yataghans -> yataghan", function() {deepEqual( Stem("yataghans"), "yataghan");});
test("yaughan -> yaughan", function() {deepEqual( Stem("yaughan"), "yaughan");});
test("yaw -> yaw", function() {deepEqual( Stem("yaw"), "yaw");});
test("yawn -> yawn", function() {deepEqual( Stem("yawn"), "yawn");});
test("yawned -> yawn", function() {deepEqual( Stem("yawned"), "yawn");});
test("yawning -> yawn", function() {deepEqual( Stem("yawning"), "yawn");});
test("yawns -> yawn", function() {deepEqual( Stem("yawns"), "yawn");});
test("ycleped -> yclepe", function() {deepEqual( Stem("ycleped"), "yclepe");});
test("ycliped -> yclipe", function() {deepEqual( Stem("ycliped"), "yclipe");});
test("ye -> ye", function() {deepEqual( Stem("ye"), "ye");});
test("yea -> yea", function() {deepEqual( Stem("yea"), "yea");});
test("yead -> yead", function() {deepEqual( Stem("yead"), "yead");});
test("year -> year", function() {deepEqual( Stem("year"), "year");});
test("yearly -> yearli", function() {deepEqual( Stem("yearly"), "yearli");});
test("yearn -> yearn", function() {deepEqual( Stem("yearn"), "yearn");});
test("yearning -> yearn", function() {deepEqual( Stem("yearning"), "yearn");});
test("yearns -> yearn", function() {deepEqual( Stem("yearns"), "yearn");});
test("years -> year", function() {deepEqual( Stem("years"), "year");});
test("yeas -> yea", function() {deepEqual( Stem("yeas"), "yea");});
test("yeast -> yeast", function() {deepEqual( Stem("yeast"), "yeast");});
test("yedward -> yedward", function() {deepEqual( Stem("yedward"), "yedward");});
test("yeer -> yeer", function() {deepEqual( Stem("yeer"), "yeer");});
test("yees -> yee", function() {deepEqual( Stem("yees"), "yee");});
test("yell -> yell", function() {deepEqual( Stem("yell"), "yell");});
test("yelled -> yell", function() {deepEqual( Stem("yelled"), "yell");});
test("yelling -> yell", function() {deepEqual( Stem("yelling"), "yell");});
test("yellow -> yellow", function() {deepEqual( Stem("yellow"), "yellow");});
test("yellowed -> yellow", function() {deepEqual( Stem("yellowed"), "yellow");});
test("yellowing -> yellow", function() {deepEqual( Stem("yellowing"), "yellow");});
test("yellowjack -> yellowjack", function() {deepEqual( Stem("yellowjack"), "yellowjack");});
test("yellowness -> yellow", function() {deepEqual( Stem("yellowness"), "yellow");});
test("yellows -> yellow", function() {deepEqual( Stem("yellows"), "yellow");});
test("yells -> yell", function() {deepEqual( Stem("yells"), "yell");});
test("yelping -> yelp", function() {deepEqual( Stem("yelping"), "yelp");});
test("yeoman -> yeoman", function() {deepEqual( Stem("yeoman"), "yeoman");});
test("yeomanry -> yeomanri", function() {deepEqual( Stem("yeomanry"), "yeomanri");});
test("yeomen -> yeomen", function() {deepEqual( Stem("yeomen"), "yeomen");});
test("yerk -> yerk", function() {deepEqual( Stem("yerk"), "yerk");});
test("yes -> ye", function() {deepEqual( Stem("yes"), "ye");});
test("yesterday -> yesterdai", function() {deepEqual( Stem("yesterday"), "yesterdai");});
test("yesterdays -> yesterdai", function() {deepEqual( Stem("yesterdays"), "yesterdai");});
test("yesternight -> yesternight", function() {deepEqual( Stem("yesternight"), "yesternight");});
test("yesty -> yesti", function() {deepEqual( Stem("yesty"), "yesti");});
test("yet -> yet", function() {deepEqual( Stem("yet"), "yet");});
test("yew -> yew", function() {deepEqual( Stem("yew"), "yew");});
test("yicld -> yicld", function() {deepEqual( Stem("yicld"), "yicld");});
test("yield -> yield", function() {deepEqual( Stem("yield"), "yield");});
test("yielded -> yield", function() {deepEqual( Stem("yielded"), "yield");});
test("yielder -> yielder", function() {deepEqual( Stem("yielder"), "yielder");});
test("yielders -> yielder", function() {deepEqual( Stem("yielders"), "yielder");});
test("yielding -> yield", function() {deepEqual( Stem("yielding"), "yield");});
test("yields -> yield", function() {deepEqual( Stem("yields"), "yield");});
test("yok -> yok", function() {deepEqual( Stem("yok"), "yok");});
test("yoke -> yoke", function() {deepEqual( Stem("yoke"), "yoke");});
test("yoked -> yoke", function() {deepEqual( Stem("yoked"), "yoke");});
test("yokefellow -> yokefellow", function() {deepEqual( Stem("yokefellow"), "yokefellow");});
test("yokels -> yokel", function() {deepEqual( Stem("yokels"), "yokel");});
test("yokes -> yoke", function() {deepEqual( Stem("yokes"), "yoke");});
test("yoketh -> yoketh", function() {deepEqual( Stem("yoketh"), "yoketh");});
test("yon -> yon", function() {deepEqual( Stem("yon"), "yon");});
test("yond -> yond", function() {deepEqual( Stem("yond"), "yond");});
test("yonder -> yonder", function() {deepEqual( Stem("yonder"), "yonder");});
test("yongrey -> yongrei", function() {deepEqual( Stem("yongrey"), "yongrei");});
test("yoops -> yoop", function() {deepEqual( Stem("yoops"), "yoop");});
test("yore -> yore", function() {deepEqual( Stem("yore"), "yore");});
test("yorick -> yorick", function() {deepEqual( Stem("yorick"), "yorick");});
test("york -> york", function() {deepEqual( Stem("york"), "york");});
test("yorkists -> yorkist", function() {deepEqual( Stem("yorkists"), "yorkist");});
test("yorks -> york", function() {deepEqual( Stem("yorks"), "york");});
test("yorkshire -> yorkshir", function() {deepEqual( Stem("yorkshire"), "yorkshir");});
test("you -> you", function() {deepEqual( Stem("you"), "you");});
test("young -> young", function() {deepEqual( Stem("young"), "young");});
test("younger -> younger", function() {deepEqual( Stem("younger"), "younger");});
test("youngest -> youngest", function() {deepEqual( Stem("youngest"), "youngest");});
test("youngling -> youngl", function() {deepEqual( Stem("youngling"), "youngl");});
test("younglings -> youngl", function() {deepEqual( Stem("younglings"), "youngl");});
test("youngly -> youngli", function() {deepEqual( Stem("youngly"), "youngli");});
test("youngster -> youngster", function() {deepEqual( Stem("youngster"), "youngster");});
test("youngsters -> youngster", function() {deepEqual( Stem("youngsters"), "youngster");});
test("younker -> younker", function() {deepEqual( Stem("younker"), "younker");});
test("younkers -> younker", function() {deepEqual( Stem("younkers"), "younker");});
test("your -> your", function() {deepEqual( Stem("your"), "your");});
test("yours -> your", function() {deepEqual( Stem("yours"), "your");});
test("yourself -> yourself", function() {deepEqual( Stem("yourself"), "yourself");});
test("yourselves -> yourselv", function() {deepEqual( Stem("yourselves"), "yourselv");});
test("youth -> youth", function() {deepEqual( Stem("youth"), "youth");});
test("youthful -> youth", function() {deepEqual( Stem("youthful"), "youth");});
test("youths -> youth", function() {deepEqual( Stem("youths"), "youth");});
test("youtli -> youtli", function() {deepEqual( Stem("youtli"), "youtli");});
test("zanies -> zani", function() {deepEqual( Stem("zanies"), "zani");});
test("zany -> zani", function() {deepEqual( Stem("zany"), "zani");});
test("zatusfy -> zatusfi", function() {deepEqual( Stem("zatusfy"), "zatusfi");});
test("zeal -> zeal", function() {deepEqual( Stem("zeal"), "zeal");});
test("zealous -> zealou", function() {deepEqual( Stem("zealous"), "zealou");});
test("zeals -> zeal", function() {deepEqual( Stem("zeals"), "zeal");});
test("zed -> zed", function() {deepEqual( Stem("zed"), "zed");});
test("zee -> zee", function() {deepEqual( Stem("zee"), "zee");});
test("zenanas -> zenana", function() {deepEqual( Stem("zenanas"), "zenana");});
test("zenelophon -> zenelophon", function() {deepEqual( Stem("zenelophon"), "zenelophon");});
test("zenith -> zenith", function() {deepEqual( Stem("zenith"), "zenith");});
test("zephyrs -> zephyr", function() {deepEqual( Stem("zephyrs"), "zephyr");});
test("zermons -> zermon", function() {deepEqual( Stem("zermons"), "zermon");});
test("zero -> zero", function() {deepEqual( Stem("zero"), "zero");});
test("zest -> zest", function() {deepEqual( Stem("zest"), "zest");});
test("zettlement -> zettlement", function() {deepEqual( Stem("zettlement"), "zettlement");});
test("zir -> zir", function() {deepEqual( Stem("zir"), "zir");});
test("zo -> zo", function() {deepEqual( Stem("zo"), "zo");});
test("zodiac -> zodiac", function() {deepEqual( Stem("zodiac"), "zodiac");});
test("zodiacs -> zodiac", function() {deepEqual( Stem("zodiacs"), "zodiac");});
test("zoggy -> zoggi", function() {deepEqual( Stem("zoggy"), "zoggi");});
test("zone -> zone", function() {deepEqual( Stem("zone"), "zone");});
test("zounds -> zound", function() {deepEqual( Stem("zounds"), "zound");});
test("zuleikah -> zuleikah", function() {deepEqual( Stem("zuleikah"), "zuleikah");});
test("zwagger -> zwagger", function() {deepEqual( Stem("zwagger"), "zwagger");});
test("zwieback -> zwieback", function() {deepEqual( Stem("zwieback"), "zwieback");});

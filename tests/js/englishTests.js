QUnit.config.hidepassed = true;
var Stem = snowballFactory.newStemmer('english').stem;
test("' -> '", function() {deepEqual( Stem("'"), "'");});
test("'' -> ''", function() {deepEqual( Stem("''"), "''");});
test("'a -> 'a", function() {deepEqual( Stem("'a"), "'a");});
test("'s -> 's", function() {deepEqual( Stem("'s"), "'s");});
test("'aa -> aa", function() {deepEqual( Stem("'aa"), "aa");});
test("'as -> as", function() {deepEqual( Stem("'as"), "as");});
test("''' -> '", function() {deepEqual( Stem("'''"), "'");});
test("'a' -> a", function() {deepEqual( Stem("'a'"), "a");});
test("'s' -> s", function() {deepEqual( Stem("'s'"), "s");});
test("'aa' -> aa", function() {deepEqual( Stem("'aa'"), "aa");});
test("'as' -> as", function() {deepEqual( Stem("'as'"), "as");});
test("a -> a", function() {deepEqual( Stem("a"), "a");});
test("a' -> a'", function() {deepEqual( Stem("a'"), "a'");});
test("a'' -> a'", function() {deepEqual( Stem("a''"), "a'");});
test("aa' -> aa", function() {deepEqual( Stem("aa'"), "aa");});
test("aback -> aback", function() {deepEqual( Stem("aback"), "aback");});
test("abandon -> abandon", function() {deepEqual( Stem("abandon"), "abandon");});
test("abandoned -> abandon", function() {deepEqual( Stem("abandoned"), "abandon");});
test("abandoning -> abandon", function() {deepEqual( Stem("abandoning"), "abandon");});
test("abandonment -> abandon", function() {deepEqual( Stem("abandonment"), "abandon");});
test("abandons -> abandon", function() {deepEqual( Stem("abandons"), "abandon");});
test("abasement -> abas", function() {deepEqual( Stem("abasement"), "abas");});
test("abashed -> abash", function() {deepEqual( Stem("abashed"), "abash");});
test("abate -> abat", function() {deepEqual( Stem("abate"), "abat");});
test("abated -> abat", function() {deepEqual( Stem("abated"), "abat");});
test("abbey -> abbey", function() {deepEqual( Stem("abbey"), "abbey");});
test("abbott -> abbott", function() {deepEqual( Stem("abbott"), "abbott");});
test("abbreviation -> abbrevi", function() {deepEqual( Stem("abbreviation"), "abbrevi");});
test("abdicate -> abdic", function() {deepEqual( Stem("abdicate"), "abdic");});
test("abdicating -> abdic", function() {deepEqual( Stem("abdicating"), "abdic");});
test("abdomen -> abdomen", function() {deepEqual( Stem("abdomen"), "abdomen");});
test("abdominal -> abdomin", function() {deepEqual( Stem("abdominal"), "abdomin");});
test("abe -> abe", function() {deepEqual( Stem("abe"), "abe");});
test("abear -> abear", function() {deepEqual( Stem("abear"), "abear");});
test("abed -> abe", function() {deepEqual( Stem("abed"), "abe");});
test("abel -> abel", function() {deepEqual( Stem("abel"), "abel");});
test("aberration -> aberr", function() {deepEqual( Stem("aberration"), "aberr");});
test("abershaw -> abershaw", function() {deepEqual( Stem("abershaw"), "abershaw");});
test("abet -> abet", function() {deepEqual( Stem("abet"), "abet");});
test("abettor -> abettor", function() {deepEqual( Stem("abettor"), "abettor");});
test("abeyance -> abey", function() {deepEqual( Stem("abeyance"), "abey");});
test("abhorred -> abhor", function() {deepEqual( Stem("abhorred"), "abhor");});
test("abhorrence -> abhorr", function() {deepEqual( Stem("abhorrence"), "abhorr");});
test("abhorring -> abhor", function() {deepEqual( Stem("abhorring"), "abhor");});
test("abide -> abid", function() {deepEqual( Stem("abide"), "abid");});
test("abiding -> abid", function() {deepEqual( Stem("abiding"), "abid");});
test("abilities -> abil", function() {deepEqual( Stem("abilities"), "abil");});
test("ability -> abil", function() {deepEqual( Stem("ability"), "abil");});
test("abimee -> abime", function() {deepEqual( Stem("abimee"), "abime");});
test("abingdon -> abingdon", function() {deepEqual( Stem("abingdon"), "abingdon");});
test("abipones -> abipon", function() {deepEqual( Stem("abipones"), "abipon");});
test("abject -> abject", function() {deepEqual( Stem("abject"), "abject");});
test("abjectly -> abject", function() {deepEqual( Stem("abjectly"), "abject");});
test("abjectness -> abject", function() {deepEqual( Stem("abjectness"), "abject");});
test("abjure -> abjur", function() {deepEqual( Stem("abjure"), "abjur");});
test("abjured -> abjur", function() {deepEqual( Stem("abjured"), "abjur");});
test("abl -> abl", function() {deepEqual( Stem("abl"), "abl");});
test("able -> abl", function() {deepEqual( Stem("able"), "abl");});
test("ablutions -> ablut", function() {deepEqual( Stem("ablutions"), "ablut");});
test("abnegation -> abneg", function() {deepEqual( Stem("abnegation"), "abneg");});
test("abnormal -> abnorm", function() {deepEqual( Stem("abnormal"), "abnorm");});
test("abnormality -> abnorm", function() {deepEqual( Stem("abnormality"), "abnorm");});
test("abnormally -> abnorm", function() {deepEqual( Stem("abnormally"), "abnorm");});
test("aboard -> aboard", function() {deepEqual( Stem("aboard"), "aboard");});
test("abode -> abod", function() {deepEqual( Stem("abode"), "abod");});
test("abodes -> abod", function() {deepEqual( Stem("abodes"), "abod");});
test("abolish -> abolish", function() {deepEqual( Stem("abolish"), "abolish");});
test("abolished -> abolish", function() {deepEqual( Stem("abolished"), "abolish");});
test("abolishing -> abolish", function() {deepEqual( Stem("abolishing"), "abolish");});
test("abolition -> abolit", function() {deepEqual( Stem("abolition"), "abolit");});
test("abominable -> abomin", function() {deepEqual( Stem("abominable"), "abomin");});
test("abominably -> abomin", function() {deepEqual( Stem("abominably"), "abomin");});
test("abominated -> abomin", function() {deepEqual( Stem("abominated"), "abomin");});
test("abomination -> abomin", function() {deepEqual( Stem("abomination"), "abomin");});
test("aboot -> aboot", function() {deepEqual( Stem("aboot"), "aboot");});
test("aboriginal -> aborigin", function() {deepEqual( Stem("aboriginal"), "aborigin");});
test("aboriginally -> aborigin", function() {deepEqual( Stem("aboriginally"), "aborigin");});
test("aborigines -> aborigin", function() {deepEqual( Stem("aborigines"), "aborigin");});
test("abortion -> abort", function() {deepEqual( Stem("abortion"), "abort");});
test("abortions -> abort", function() {deepEqual( Stem("abortions"), "abort");});
test("abortive -> abort", function() {deepEqual( Stem("abortive"), "abort");});
test("abound -> abound", function() {deepEqual( Stem("abound"), "abound");});
test("abounded -> abound", function() {deepEqual( Stem("abounded"), "abound");});
test("abounding -> abound", function() {deepEqual( Stem("abounding"), "abound");});
test("abounds -> abound", function() {deepEqual( Stem("abounds"), "abound");});
test("about -> about", function() {deepEqual( Stem("about"), "about");});
test("above -> abov", function() {deepEqual( Stem("above"), "abov");});
test("aboveboard -> aboveboard", function() {deepEqual( Stem("aboveboard"), "aboveboard");});
test("abraham -> abraham", function() {deepEqual( Stem("abraham"), "abraham");});
test("abreast -> abreast", function() {deepEqual( Stem("abreast"), "abreast");});
test("abridge -> abridg", function() {deepEqual( Stem("abridge"), "abridg");});
test("abridged -> abridg", function() {deepEqual( Stem("abridged"), "abridg");});
test("abroad -> abroad", function() {deepEqual( Stem("abroad"), "abroad");});
test("abrogated -> abrog", function() {deepEqual( Stem("abrogated"), "abrog");});
test("abrolhos -> abrolho", function() {deepEqual( Stem("abrolhos"), "abrolho");});
test("abrupt -> abrupt", function() {deepEqual( Stem("abrupt"), "abrupt");});
test("abruptly -> abrupt", function() {deepEqual( Stem("abruptly"), "abrupt");});
test("abruptness -> abrupt", function() {deepEqual( Stem("abruptness"), "abrupt");});
test("abscess -> abscess", function() {deepEqual( Stem("abscess"), "abscess");});
test("absence -> absenc", function() {deepEqual( Stem("absence"), "absenc");});
test("absent -> absent", function() {deepEqual( Stem("absent"), "absent");});
test("absenting -> absent", function() {deepEqual( Stem("absenting"), "absent");});
test("absolute -> absolut", function() {deepEqual( Stem("absolute"), "absolut");});
test("absolutely -> absolut", function() {deepEqual( Stem("absolutely"), "absolut");});
test("absolve -> absolv", function() {deepEqual( Stem("absolve"), "absolv");});
test("absolved -> absolv", function() {deepEqual( Stem("absolved"), "absolv");});
test("absorb -> absorb", function() {deepEqual( Stem("absorb"), "absorb");});
test("absorbed -> absorb", function() {deepEqual( Stem("absorbed"), "absorb");});
test("absorbent -> absorb", function() {deepEqual( Stem("absorbent"), "absorb");});
test("absorbing -> absorb", function() {deepEqual( Stem("absorbing"), "absorb");});
test("absorbs -> absorb", function() {deepEqual( Stem("absorbs"), "absorb");});
test("absorption -> absorpt", function() {deepEqual( Stem("absorption"), "absorpt");});
test("abstain -> abstain", function() {deepEqual( Stem("abstain"), "abstain");});
test("abstained -> abstain", function() {deepEqual( Stem("abstained"), "abstain");});
test("abstaining -> abstain", function() {deepEqual( Stem("abstaining"), "abstain");});
test("abstinence -> abstin", function() {deepEqual( Stem("abstinence"), "abstin");});
test("abstract -> abstract", function() {deepEqual( Stem("abstract"), "abstract");});
test("abstracted -> abstract", function() {deepEqual( Stem("abstracted"), "abstract");});
test("abstractedly -> abstract", function() {deepEqual( Stem("abstractedly"), "abstract");});
test("abstraction -> abstract", function() {deepEqual( Stem("abstraction"), "abstract");});
test("abstracts -> abstract", function() {deepEqual( Stem("abstracts"), "abstract");});
test("abstruse -> abstrus", function() {deepEqual( Stem("abstruse"), "abstrus");});
test("absurd -> absurd", function() {deepEqual( Stem("absurd"), "absurd");});
test("absurdities -> absurd", function() {deepEqual( Stem("absurdities"), "absurd");});
test("absurdity -> absurd", function() {deepEqual( Stem("absurdity"), "absurd");});
test("absurdly -> absurd", function() {deepEqual( Stem("absurdly"), "absurd");});
test("abt -> abt", function() {deepEqual( Stem("abt"), "abt");});
test("abundance -> abund", function() {deepEqual( Stem("abundance"), "abund");});
test("abundant -> abund", function() {deepEqual( Stem("abundant"), "abund");});
test("abundantly -> abund", function() {deepEqual( Stem("abundantly"), "abund");});
test("abuse -> abus", function() {deepEqual( Stem("abuse"), "abus");});
test("abused -> abus", function() {deepEqual( Stem("abused"), "abus");});
test("abuses -> abus", function() {deepEqual( Stem("abuses"), "abus");});
test("abusing -> abus", function() {deepEqual( Stem("abusing"), "abus");});
test("abusive -> abus", function() {deepEqual( Stem("abusive"), "abus");});
test("abut -> abut", function() {deepEqual( Stem("abut"), "abut");});
test("abuts -> abut", function() {deepEqual( Stem("abuts"), "abut");});
test("abutting -> abut", function() {deepEqual( Stem("abutting"), "abut");});
test("abyss -> abyss", function() {deepEqual( Stem("abyss"), "abyss");});
test("abysses -> abyss", function() {deepEqual( Stem("abysses"), "abyss");});
test("abyssinia -> abyssinia", function() {deepEqual( Stem("abyssinia"), "abyssinia");});
test("ac -> ac", function() {deepEqual( Stem("ac"), "ac");});
test("acacia -> acacia", function() {deepEqual( Stem("acacia"), "acacia");});
test("acacias -> acacia", function() {deepEqual( Stem("acacias"), "acacia");});
test("academy -> academi", function() {deepEqual( Stem("academy"), "academi");});
test("acalypha -> acalypha", function() {deepEqual( Stem("acalypha"), "acalypha");});
test("acapulco -> acapulco", function() {deepEqual( Stem("acapulco"), "acapulco");});
test("accede -> acced", function() {deepEqual( Stem("accede"), "acced");});
test("acceded -> acced", function() {deepEqual( Stem("acceded"), "acced");});
test("accedes -> acced", function() {deepEqual( Stem("accedes"), "acced");});
test("accelerate -> acceler", function() {deepEqual( Stem("accelerate"), "acceler");});
test("accelerated -> acceler", function() {deepEqual( Stem("accelerated"), "acceler");});
test("accent -> accent", function() {deepEqual( Stem("accent"), "accent");});
test("accents -> accent", function() {deepEqual( Stem("accents"), "accent");});
test("accept -> accept", function() {deepEqual( Stem("accept"), "accept");});
test("acceptable -> accept", function() {deepEqual( Stem("acceptable"), "accept");});
test("acceptance -> accept", function() {deepEqual( Stem("acceptance"), "accept");});
test("acceptances -> accept", function() {deepEqual( Stem("acceptances"), "accept");});
test("acceptation -> accept", function() {deepEqual( Stem("acceptation"), "accept");});
test("accepted -> accept", function() {deepEqual( Stem("accepted"), "accept");});
test("accepting -> accept", function() {deepEqual( Stem("accepting"), "accept");});
test("accepts -> accept", function() {deepEqual( Stem("accepts"), "accept");});
test("access -> access", function() {deepEqual( Stem("access"), "access");});
test("accessible -> access", function() {deepEqual( Stem("accessible"), "access");});
test("accession -> access", function() {deepEqual( Stem("accession"), "access");});
test("accessories -> accessori", function() {deepEqual( Stem("accessories"), "accessori");});
test("accessory -> accessori", function() {deepEqual( Stem("accessory"), "accessori");});
test("accident -> accid", function() {deepEqual( Stem("accident"), "accid");});
test("accidental -> accident", function() {deepEqual( Stem("accidental"), "accident");});
test("accidentally -> accident", function() {deepEqual( Stem("accidentally"), "accident");});
test("accidents -> accid", function() {deepEqual( Stem("accidents"), "accid");});
test("acclamations -> acclam", function() {deepEqual( Stem("acclamations"), "acclam");});
test("acclivity -> accliv", function() {deepEqual( Stem("acclivity"), "accliv");});
test("accommodate -> accommod", function() {deepEqual( Stem("accommodate"), "accommod");});
test("accommodated -> accommod", function() {deepEqual( Stem("accommodated"), "accommod");});
test("accommodating -> accommod", function() {deepEqual( Stem("accommodating"), "accommod");});
test("accommodation -> accommod", function() {deepEqual( Stem("accommodation"), "accommod");});
test("accommodations -> accommod", function() {deepEqual( Stem("accommodations"), "accommod");});
test("accompanied -> accompani", function() {deepEqual( Stem("accompanied"), "accompani");});
test("accompanies -> accompani", function() {deepEqual( Stem("accompanies"), "accompani");});
test("accompaniment -> accompani", function() {deepEqual( Stem("accompaniment"), "accompani");});
test("accompaniments -> accompani", function() {deepEqual( Stem("accompaniments"), "accompani");});
test("accompany -> accompani", function() {deepEqual( Stem("accompany"), "accompani");});
test("accompanying -> accompani", function() {deepEqual( Stem("accompanying"), "accompani");});
test("accomplice -> accomplic", function() {deepEqual( Stem("accomplice"), "accomplic");});
test("accomplices -> accomplic", function() {deepEqual( Stem("accomplices"), "accomplic");});
test("accomplish -> accomplish", function() {deepEqual( Stem("accomplish"), "accomplish");});
test("accomplished -> accomplish", function() {deepEqual( Stem("accomplished"), "accomplish");});
test("accomplishes -> accomplish", function() {deepEqual( Stem("accomplishes"), "accomplish");});
test("accomplishing -> accomplish", function() {deepEqual( Stem("accomplishing"), "accomplish");});
test("accomplishment -> accomplish", function() {deepEqual( Stem("accomplishment"), "accomplish");});
test("accomplishments -> accomplish", function() {deepEqual( Stem("accomplishments"), "accomplish");});
test("accord -> accord", function() {deepEqual( Stem("accord"), "accord");});
test("accordance -> accord", function() {deepEqual( Stem("accordance"), "accord");});
test("accorded -> accord", function() {deepEqual( Stem("accorded"), "accord");});
test("according -> accord", function() {deepEqual( Stem("according"), "accord");});
test("accordingly -> accord", function() {deepEqual( Stem("accordingly"), "accord");});
test("accosted -> accost", function() {deepEqual( Stem("accosted"), "accost");});
test("accosting -> accost", function() {deepEqual( Stem("accosting"), "accost");});
test("accoun -> accoun", function() {deepEqual( Stem("accoun"), "accoun");});
test("account -> account", function() {deepEqual( Stem("account"), "account");});
test("accountabilities -> account", function() {deepEqual( Stem("accountabilities"), "account");});
test("accountability -> account", function() {deepEqual( Stem("accountability"), "account");});
test("accountable -> account", function() {deepEqual( Stem("accountable"), "account");});
test("accountant -> account", function() {deepEqual( Stem("accountant"), "account");});
test("accounted -> account", function() {deepEqual( Stem("accounted"), "account");});
test("accounting -> account", function() {deepEqual( Stem("accounting"), "account");});
test("accounts -> account", function() {deepEqual( Stem("accounts"), "account");});
test("accoutred -> accoutr", function() {deepEqual( Stem("accoutred"), "accoutr");});
test("accoutrements -> accoutr", function() {deepEqual( Stem("accoutrements"), "accoutr");});
test("accredited -> accredit", function() {deepEqual( Stem("accredited"), "accredit");});
test("accrue -> accru", function() {deepEqual( Stem("accrue"), "accru");});
test("accrued -> accru", function() {deepEqual( Stem("accrued"), "accru");});
test("accruing -> accru", function() {deepEqual( Stem("accruing"), "accru");});
test("accumulate -> accumul", function() {deepEqual( Stem("accumulate"), "accumul");});
test("accumulated -> accumul", function() {deepEqual( Stem("accumulated"), "accumul");});
test("accumulating -> accumul", function() {deepEqual( Stem("accumulating"), "accumul");});
test("accumulation -> accumul", function() {deepEqual( Stem("accumulation"), "accumul");});
test("accumulations -> accumul", function() {deepEqual( Stem("accumulations"), "accumul");});
test("accuracy -> accuraci", function() {deepEqual( Stem("accuracy"), "accuraci");});
test("accurate -> accur", function() {deepEqual( Stem("accurate"), "accur");});
test("accurately -> accur", function() {deepEqual( Stem("accurately"), "accur");});
test("accursed -> accurs", function() {deepEqual( Stem("accursed"), "accurs");});
test("accusation -> accus", function() {deepEqual( Stem("accusation"), "accus");});
test("accusations -> accus", function() {deepEqual( Stem("accusations"), "accus");});
test("accuse -> accus", function() {deepEqual( Stem("accuse"), "accus");});
test("accused -> accus", function() {deepEqual( Stem("accused"), "accus");});
test("accuser -> accus", function() {deepEqual( Stem("accuser"), "accus");});
test("accusers -> accus", function() {deepEqual( Stem("accusers"), "accus");});
test("accuses -> accus", function() {deepEqual( Stem("accuses"), "accus");});
test("accusing -> accus", function() {deepEqual( Stem("accusing"), "accus");});
test("accustom -> accustom", function() {deepEqual( Stem("accustom"), "accustom");});
test("accustomed -> accustom", function() {deepEqual( Stem("accustomed"), "accustom");});
test("accustoming -> accustom", function() {deepEqual( Stem("accustoming"), "accustom");});
test("ace -> ace", function() {deepEqual( Stem("ace"), "ace");});
test("acerbity -> acerb", function() {deepEqual( Stem("acerbity"), "acerb");});
test("aces -> ace", function() {deepEqual( Stem("aces"), "ace");});
test("ach -> ach", function() {deepEqual( Stem("ach"), "ach");});
test("ache -> ach", function() {deepEqual( Stem("ache"), "ach");});
test("ached -> ach", function() {deepEqual( Stem("ached"), "ach");});
test("aches -> ach", function() {deepEqual( Stem("aches"), "ach");});
test("achieve -> achiev", function() {deepEqual( Stem("achieve"), "achiev");});
test("achieved -> achiev", function() {deepEqual( Stem("achieved"), "achiev");});
test("achievement -> achiev", function() {deepEqual( Stem("achievement"), "achiev");});
test("achievements -> achiev", function() {deepEqual( Stem("achievements"), "achiev");});
test("achieves -> achiev", function() {deepEqual( Stem("achieves"), "achiev");});
test("achieving -> achiev", function() {deepEqual( Stem("achieving"), "achiev");});
test("achilles -> achill", function() {deepEqual( Stem("achilles"), "achill");});
test("aching -> ach", function() {deepEqual( Stem("aching"), "ach");});
test("acid -> acid", function() {deepEqual( Stem("acid"), "acid");});
test("acids -> acid", function() {deepEqual( Stem("acids"), "acid");});
test("ack -> ack", function() {deepEqual( Stem("ack"), "ack");});
test("ackney -> ackney", function() {deepEqual( Stem("ackney"), "ackney");});
test("acknowledge -> acknowledg", function() {deepEqual( Stem("acknowledge"), "acknowledg");});
test("acknowledged -> acknowledg", function() {deepEqual( Stem("acknowledged"), "acknowledg");});
test("acknowledgement -> acknowledg", function() {deepEqual( Stem("acknowledgement"), "acknowledg");});
test("acknowledges -> acknowledg", function() {deepEqual( Stem("acknowledges"), "acknowledg");});
test("acknowledging -> acknowledg", function() {deepEqual( Stem("acknowledging"), "acknowledg");});
test("acknowledgment -> acknowledg", function() {deepEqual( Stem("acknowledgment"), "acknowledg");});
test("acknowledgments -> acknowledg", function() {deepEqual( Stem("acknowledgments"), "acknowledg");});
test("aconcagua -> aconcagua", function() {deepEqual( Stem("aconcagua"), "aconcagua");});
test("acorn -> acorn", function() {deepEqual( Stem("acorn"), "acorn");});
test("acquaint -> acquaint", function() {deepEqual( Stem("acquaint"), "acquaint");});
test("acquaintance -> acquaint", function() {deepEqual( Stem("acquaintance"), "acquaint");});
test("acquaintances -> acquaint", function() {deepEqual( Stem("acquaintances"), "acquaint");});
test("acquainted -> acquaint", function() {deepEqual( Stem("acquainted"), "acquaint");});
test("acquainting -> acquaint", function() {deepEqual( Stem("acquainting"), "acquaint");});
test("acquaints -> acquaint", function() {deepEqual( Stem("acquaints"), "acquaint");});
test("acquiesce -> acquiesc", function() {deepEqual( Stem("acquiesce"), "acquiesc");});
test("acquiesced -> acquiesc", function() {deepEqual( Stem("acquiesced"), "acquiesc");});
test("acquiescence -> acquiesc", function() {deepEqual( Stem("acquiescence"), "acquiesc");});
test("acquiescent -> acquiesc", function() {deepEqual( Stem("acquiescent"), "acquiesc");});
test("acquiesces -> acquiesc", function() {deepEqual( Stem("acquiesces"), "acquiesc");});
test("acquiescing -> acquiesc", function() {deepEqual( Stem("acquiescing"), "acquiesc");});
test("acquire -> acquir", function() {deepEqual( Stem("acquire"), "acquir");});
test("acquired -> acquir", function() {deepEqual( Stem("acquired"), "acquir");});
test("acquirement -> acquir", function() {deepEqual( Stem("acquirement"), "acquir");});
test("acquirements -> acquir", function() {deepEqual( Stem("acquirements"), "acquir");});
test("acquires -> acquir", function() {deepEqual( Stem("acquires"), "acquir");});
test("acquiring -> acquir", function() {deepEqual( Stem("acquiring"), "acquir");});
test("acquisition -> acquisit", function() {deepEqual( Stem("acquisition"), "acquisit");});
test("acquit -> acquit", function() {deepEqual( Stem("acquit"), "acquit");});
test("acquittal -> acquitt", function() {deepEqual( Stem("acquittal"), "acquitt");});
test("acquitted -> acquit", function() {deepEqual( Stem("acquitted"), "acquit");});
test("acqulred -> acqulr", function() {deepEqual( Stem("acqulred"), "acqulr");});
test("acre -> acr", function() {deepEqual( Stem("acre"), "acr");});
test("acres -> acr", function() {deepEqual( Stem("acres"), "acr");});
test("acrid -> acrid", function() {deepEqual( Stem("acrid"), "acrid");});
test("acrimonious -> acrimoni", function() {deepEqual( Stem("acrimonious"), "acrimoni");});
test("acrimoniously -> acrimoni", function() {deepEqual( Stem("acrimoniously"), "acrimoni");});
test("across -> across", function() {deepEqual( Stem("across"), "across");});
test("acrydium -> acrydium", function() {deepEqual( Stem("acrydium"), "acrydium");});
test("act -> act", function() {deepEqual( Stem("act"), "act");});
test("acted -> act", function() {deepEqual( Stem("acted"), "act");});
test("acting -> act", function() {deepEqual( Stem("acting"), "act");});
test("actinia -> actinia", function() {deepEqual( Stem("actinia"), "actinia");});
test("action -> action", function() {deepEqual( Stem("action"), "action");});
test("actions -> action", function() {deepEqual( Stem("actions"), "action");});
test("active -> activ", function() {deepEqual( Stem("active"), "activ");});
test("actively -> activ", function() {deepEqual( Stem("actively"), "activ");});
test("activity -> activ", function() {deepEqual( Stem("activity"), "activ");});
test("actor -> actor", function() {deepEqual( Stem("actor"), "actor");});
test("actors -> actor", function() {deepEqual( Stem("actors"), "actor");});
test("actress -> actress", function() {deepEqual( Stem("actress"), "actress");});
test("actresses -> actress", function() {deepEqual( Stem("actresses"), "actress");});
test("acts -> act", function() {deepEqual( Stem("acts"), "act");});
test("actual -> actual", function() {deepEqual( Stem("actual"), "actual");});
test("actuality -> actual", function() {deepEqual( Stem("actuality"), "actual");});
test("actually -> actual", function() {deepEqual( Stem("actually"), "actual");});
test("actuate -> actuat", function() {deepEqual( Stem("actuate"), "actuat");});
test("actuated -> actuat", function() {deepEqual( Stem("actuated"), "actuat");});
test("actuating -> actuat", function() {deepEqual( Stem("actuating"), "actuat");});
test("acumen -> acumen", function() {deepEqual( Stem("acumen"), "acumen");});
test("acunha -> acunha", function() {deepEqual( Stem("acunha"), "acunha");});
test("acut -> acut", function() {deepEqual( Stem("acut"), "acut");});
test("acute -> acut", function() {deepEqual( Stem("acute"), "acut");});
test("acutely -> acut", function() {deepEqual( Stem("acutely"), "acut");});
test("acuteness -> acut", function() {deepEqual( Stem("acuteness"), "acut");});
test("acuter -> acut", function() {deepEqual( Stem("acuter"), "acut");});
test("ad -> ad", function() {deepEqual( Stem("ad"), "ad");});
test("ada -> ada", function() {deepEqual( Stem("ada"), "ada");});
test("adage -> adag", function() {deepEqual( Stem("adage"), "adag");});
test("adages -> adag", function() {deepEqual( Stem("adages"), "adag");});
test("adam -> adam", function() {deepEqual( Stem("adam"), "adam");});
test("adamant -> adam", function() {deepEqual( Stem("adamant"), "adam");});
test("adams -> adam", function() {deepEqual( Stem("adams"), "adam");});
test("adapt -> adapt", function() {deepEqual( Stem("adapt"), "adapt");});
test("adaptability -> adapt", function() {deepEqual( Stem("adaptability"), "adapt");});
test("adaptable -> adapt", function() {deepEqual( Stem("adaptable"), "adapt");});
test("adaptation -> adapt", function() {deepEqual( Stem("adaptation"), "adapt");});
test("adapted -> adapt", function() {deepEqual( Stem("adapted"), "adapt");});
test("adapter -> adapt", function() {deepEqual( Stem("adapter"), "adapt");});
test("adapting -> adapt", function() {deepEqual( Stem("adapting"), "adapt");});
test("adapts -> adapt", function() {deepEqual( Stem("adapts"), "adapt");});
test("adas -> ada", function() {deepEqual( Stem("adas"), "ada");});
test("add -> add", function() {deepEqual( Stem("add"), "add");});
test("added -> ad", function() {deepEqual( Stem("added"), "ad");});
test("adder -> adder", function() {deepEqual( Stem("adder"), "adder");});
test("addicted -> addict", function() {deepEqual( Stem("addicted"), "addict");});
test("adding -> ad", function() {deepEqual( Stem("adding"), "ad");});
test("addition -> addit", function() {deepEqual( Stem("addition"), "addit");});
test("additional -> addit", function() {deepEqual( Stem("additional"), "addit");});
test("additionally -> addit", function() {deepEqual( Stem("additionally"), "addit");});
test("additions -> addit", function() {deepEqual( Stem("additions"), "addit");});
test("addled -> addl", function() {deepEqual( Stem("addled"), "addl");});
test("address -> address", function() {deepEqual( Stem("address"), "address");});
test("addressed -> address", function() {deepEqual( Stem("addressed"), "address");});
test("addresses -> address", function() {deepEqual( Stem("addresses"), "address");});
test("addressing -> address", function() {deepEqual( Stem("addressing"), "address");});
test("adds -> add", function() {deepEqual( Stem("adds"), "add");});
test("adduced -> adduc", function() {deepEqual( Stem("adduced"), "adduc");});
test("adducing -> adduc", function() {deepEqual( Stem("adducing"), "adduc");});
test("adequate -> adequ", function() {deepEqual( Stem("adequate"), "adequ");});
test("adhere -> adher", function() {deepEqual( Stem("adhere"), "adher");});
test("adhered -> adher", function() {deepEqual( Stem("adhered"), "adher");});
test("adherence -> adher", function() {deepEqual( Stem("adherence"), "adher");});
test("adherent -> adher", function() {deepEqual( Stem("adherent"), "adher");});
test("adherents -> adher", function() {deepEqual( Stem("adherents"), "adher");});
test("adheres -> adher", function() {deepEqual( Stem("adheres"), "adher");});
test("adhering -> adher", function() {deepEqual( Stem("adhering"), "adher");});
test("adhesive -> adhes", function() {deepEqual( Stem("adhesive"), "adhes");});
test("adieu -> adieu", function() {deepEqual( Stem("adieu"), "adieu");});
test("adieux -> adieux", function() {deepEqual( Stem("adieux"), "adieux");});
test("adimonia -> adimonia", function() {deepEqual( Stem("adimonia"), "adimonia");});
test("adios -> adio", function() {deepEqual( Stem("adios"), "adio");});
test("adjacent -> adjac", function() {deepEqual( Stem("adjacent"), "adjac");});
test("adjective -> adject", function() {deepEqual( Stem("adjective"), "adject");});
test("adjoined -> adjoin", function() {deepEqual( Stem("adjoined"), "adjoin");});
test("adjoining -> adjoin", function() {deepEqual( Stem("adjoining"), "adjoin");});
test("adjourned -> adjourn", function() {deepEqual( Stem("adjourned"), "adjourn");});
test("adjournment -> adjourn", function() {deepEqual( Stem("adjournment"), "adjourn");});
test("adjuration -> adjur", function() {deepEqual( Stem("adjuration"), "adjur");});
test("adjurations -> adjur", function() {deepEqual( Stem("adjurations"), "adjur");});
test("adjured -> adjur", function() {deepEqual( Stem("adjured"), "adjur");});
test("adjuring -> adjur", function() {deepEqual( Stem("adjuring"), "adjur");});
test("adjust -> adjust", function() {deepEqual( Stem("adjust"), "adjust");});
test("adjusted -> adjust", function() {deepEqual( Stem("adjusted"), "adjust");});
test("adjusting -> adjust", function() {deepEqual( Stem("adjusting"), "adjust");});
test("adjustment -> adjust", function() {deepEqual( Stem("adjustment"), "adjust");});
test("adjusts -> adjust", function() {deepEqual( Stem("adjusts"), "adjust");});
test("adjutant -> adjut", function() {deepEqual( Stem("adjutant"), "adjut");});
test("administer -> administ", function() {deepEqual( Stem("administer"), "administ");});
test("administered -> administ", function() {deepEqual( Stem("administered"), "administ");});
test("administering -> administ", function() {deepEqual( Stem("administering"), "administ");});
test("administration -> administr", function() {deepEqual( Stem("administration"), "administr");});
test("administrative -> administr", function() {deepEqual( Stem("administrative"), "administr");});
test("administrator -> administr", function() {deepEqual( Stem("administrator"), "administr");});
test("administrators -> administr", function() {deepEqual( Stem("administrators"), "administr");});
test("admirable -> admir", function() {deepEqual( Stem("admirable"), "admir");});
test("admirably -> admir", function() {deepEqual( Stem("admirably"), "admir");});
test("admiral -> admir", function() {deepEqual( Stem("admiral"), "admir");});
test("admiralty -> admiralti", function() {deepEqual( Stem("admiralty"), "admiralti");});
test("admiration -> admir", function() {deepEqual( Stem("admiration"), "admir");});
test("admire -> admir", function() {deepEqual( Stem("admire"), "admir");});
test("admired -> admir", function() {deepEqual( Stem("admired"), "admir");});
test("admirer -> admir", function() {deepEqual( Stem("admirer"), "admir");});
test("admirers -> admir", function() {deepEqual( Stem("admirers"), "admir");});
test("admires -> admir", function() {deepEqual( Stem("admires"), "admir");});
test("admiring -> admir", function() {deepEqual( Stem("admiring"), "admir");});
test("admiringly -> admir", function() {deepEqual( Stem("admiringly"), "admir");});
test("admission -> admiss", function() {deepEqual( Stem("admission"), "admiss");});
test("admissions -> admiss", function() {deepEqual( Stem("admissions"), "admiss");});
test("admit -> admit", function() {deepEqual( Stem("admit"), "admit");});
test("admits -> admit", function() {deepEqual( Stem("admits"), "admit");});
test("admittance -> admitt", function() {deepEqual( Stem("admittance"), "admitt");});
test("admitted -> admit", function() {deepEqual( Stem("admitted"), "admit");});
test("admitting -> admit", function() {deepEqual( Stem("admitting"), "admit");});
test("admixture -> admixtur", function() {deepEqual( Stem("admixture"), "admixtur");});
test("admonished -> admonish", function() {deepEqual( Stem("admonished"), "admonish");});
test("admonishes -> admonish", function() {deepEqual( Stem("admonishes"), "admonish");});
test("admonishing -> admonish", function() {deepEqual( Stem("admonishing"), "admonish");});
test("admonition -> admonit", function() {deepEqual( Stem("admonition"), "admonit");});
test("admonitions -> admonit", function() {deepEqual( Stem("admonitions"), "admonit");});
test("admonitory -> admonitori", function() {deepEqual( Stem("admonitory"), "admonitori");});
test("adn -> adn", function() {deepEqual( Stem("adn"), "adn");});
test("ado -> ado", function() {deepEqual( Stem("ado"), "ado");});
test("adopt -> adopt", function() {deepEqual( Stem("adopt"), "adopt");});
test("adopted -> adopt", function() {deepEqual( Stem("adopted"), "adopt");});
test("adopting -> adopt", function() {deepEqual( Stem("adopting"), "adopt");});
test("adoption -> adopt", function() {deepEqual( Stem("adoption"), "adopt");});
test("adoration -> ador", function() {deepEqual( Stem("adoration"), "ador");});
test("adorations -> ador", function() {deepEqual( Stem("adorations"), "ador");});
test("adore -> ador", function() {deepEqual( Stem("adore"), "ador");});
test("adored -> ador", function() {deepEqual( Stem("adored"), "ador");});
test("adores -> ador", function() {deepEqual( Stem("adores"), "ador");});
test("adoring -> ador", function() {deepEqual( Stem("adoring"), "ador");});
test("adorned -> adorn", function() {deepEqual( Stem("adorned"), "adorn");});
test("adorning -> adorn", function() {deepEqual( Stem("adorning"), "adorn");});
test("adornment -> adorn", function() {deepEqual( Stem("adornment"), "adorn");});
test("adornments -> adorn", function() {deepEqual( Stem("adornments"), "adorn");});
test("adorns -> adorn", function() {deepEqual( Stem("adorns"), "adorn");});
test("adrianople -> adrianopl", function() {deepEqual( Stem("adrianople"), "adrianopl");});
test("adrift -> adrift", function() {deepEqual( Stem("adrift"), "adrift");});
test("adroit -> adroit", function() {deepEqual( Stem("adroit"), "adroit");});
test("adulation -> adul", function() {deepEqual( Stem("adulation"), "adul");});
test("adulatory -> adulatori", function() {deepEqual( Stem("adulatory"), "adulatori");});
test("adult -> adult", function() {deepEqual( Stem("adult"), "adult");});
test("adultery -> adulteri", function() {deepEqual( Stem("adultery"), "adulteri");});
test("advance -> advanc", function() {deepEqual( Stem("advance"), "advanc");});
test("advanced -> advanc", function() {deepEqual( Stem("advanced"), "advanc");});
test("advancement -> advanc", function() {deepEqual( Stem("advancement"), "advanc");});
test("advances -> advanc", function() {deepEqual( Stem("advances"), "advanc");});
test("advancing -> advanc", function() {deepEqual( Stem("advancing"), "advanc");});
test("advantage -> advantag", function() {deepEqual( Stem("advantage"), "advantag");});
test("advantageous -> advantag", function() {deepEqual( Stem("advantageous"), "advantag");});
test("advantageously -> advantag", function() {deepEqual( Stem("advantageously"), "advantag");});
test("advantages -> advantag", function() {deepEqual( Stem("advantages"), "advantag");});
test("advent -> advent", function() {deepEqual( Stem("advent"), "advent");});
test("adventure -> adventur", function() {deepEqual( Stem("adventure"), "adventur");});
test("adventurer -> adventur", function() {deepEqual( Stem("adventurer"), "adventur");});
test("adventurers -> adventur", function() {deepEqual( Stem("adventurers"), "adventur");});
test("adventures -> adventur", function() {deepEqual( Stem("adventures"), "adventur");});
test("adventuresses -> adventuress", function() {deepEqual( Stem("adventuresses"), "adventuress");});
test("adventurous -> adventur", function() {deepEqual( Stem("adventurous"), "adventur");});
test("adventurously -> adventur", function() {deepEqual( Stem("adventurously"), "adventur");});
test("adversaries -> adversari", function() {deepEqual( Stem("adversaries"), "adversari");});
test("adversary -> adversari", function() {deepEqual( Stem("adversary"), "adversari");});
test("adverse -> advers", function() {deepEqual( Stem("adverse"), "advers");});
test("adversity -> advers", function() {deepEqual( Stem("adversity"), "advers");});
test("advert -> advert", function() {deepEqual( Stem("advert"), "advert");});
test("adverted -> advert", function() {deepEqual( Stem("adverted"), "advert");});
test("adverting -> advert", function() {deepEqual( Stem("adverting"), "advert");});
test("advertise -> advertis", function() {deepEqual( Stem("advertise"), "advertis");});
test("advertised -> advertis", function() {deepEqual( Stem("advertised"), "advertis");});
test("advertisement -> advertis", function() {deepEqual( Stem("advertisement"), "advertis");});
test("advertisements -> advertis", function() {deepEqual( Stem("advertisements"), "advertis");});
test("advertiser -> advertis", function() {deepEqual( Stem("advertiser"), "advertis");});
test("advertising -> advertis", function() {deepEqual( Stem("advertising"), "advertis");});
test("advice -> advic", function() {deepEqual( Stem("advice"), "advic");});
test("advisability -> advis", function() {deepEqual( Stem("advisability"), "advis");});
test("advisable -> advis", function() {deepEqual( Stem("advisable"), "advis");});
test("advise -> advis", function() {deepEqual( Stem("advise"), "advis");});
test("advised -> advis", function() {deepEqual( Stem("advised"), "advis");});
test("advisedly -> advis", function() {deepEqual( Stem("advisedly"), "advis");});
test("adviser -> advis", function() {deepEqual( Stem("adviser"), "advis");});
test("advises -> advis", function() {deepEqual( Stem("advises"), "advis");});
test("advising -> advis", function() {deepEqual( Stem("advising"), "advis");});
test("advocacy -> advocaci", function() {deepEqual( Stem("advocacy"), "advocaci");});
test("advocate -> advoc", function() {deepEqual( Stem("advocate"), "advoc");});
test("advocated -> advoc", function() {deepEqual( Stem("advocated"), "advoc");});
test("advocating -> advoc", function() {deepEqual( Stem("advocating"), "advoc");});
test("adwiser -> adwis", function() {deepEqual( Stem("adwiser"), "adwis");});
test("aeqam -> aeqam", function() {deepEqual( Stem("aeqam"), "aeqam");});
test("aerial -> aerial", function() {deepEqual( Stem("aerial"), "aerial");});
test("aeriform -> aeriform", function() {deepEqual( Stem("aeriform"), "aeriform");});
test("aeronaut -> aeronaut", function() {deepEqual( Stem("aeronaut"), "aeronaut");});
test("aeronautics -> aeronaut", function() {deepEqual( Stem("aeronautics"), "aeronaut");});
test("aery -> aeri", function() {deepEqual( Stem("aery"), "aeri");});
test("aeschylus -> aeschylus", function() {deepEqual( Stem("aeschylus"), "aeschylus");});
test("aesop -> aesop", function() {deepEqual( Stem("aesop"), "aesop");});
test("aesthetic -> aesthet", function() {deepEqual( Stem("aesthetic"), "aesthet");});
test("aesthetically -> aesthet", function() {deepEqual( Stem("aesthetically"), "aesthet");});
test("aesthetics -> aesthet", function() {deepEqual( Stem("aesthetics"), "aesthet");});
test("aestivation -> aestiv", function() {deepEqual( Stem("aestivation"), "aestiv");});
test("afanasy -> afanasi", function() {deepEqual( Stem("afanasy"), "afanasi");});
test("afanasyvitch -> afanasyvitch", function() {deepEqual( Stem("afanasyvitch"), "afanasyvitch");});
test("afar -> afar", function() {deepEqual( Stem("afar"), "afar");});
test("afeard -> afeard", function() {deepEqual( Stem("afeard"), "afeard");});
test("afeared -> afear", function() {deepEqual( Stem("afeared"), "afear");});
test("afer -> afer", function() {deepEqual( Stem("afer"), "afer");});
test("affability -> affabl", function() {deepEqual( Stem("affability"), "affabl");});
test("affable -> affabl", function() {deepEqual( Stem("affable"), "affabl");});
test("affably -> affabl", function() {deepEqual( Stem("affably"), "affabl");});
test("affair -> affair", function() {deepEqual( Stem("affair"), "affair");});
test("affairs -> affair", function() {deepEqual( Stem("affairs"), "affair");});
test("affect -> affect", function() {deepEqual( Stem("affect"), "affect");});
test("affectation -> affect", function() {deepEqual( Stem("affectation"), "affect");});
test("affected -> affect", function() {deepEqual( Stem("affected"), "affect");});
test("affectedly -> affect", function() {deepEqual( Stem("affectedly"), "affect");});
test("affecting -> affect", function() {deepEqual( Stem("affecting"), "affect");});
test("affection -> affect", function() {deepEqual( Stem("affection"), "affect");});
test("affectionate -> affection", function() {deepEqual( Stem("affectionate"), "affection");});
test("affectionately -> affection", function() {deepEqual( Stem("affectionately"), "affection");});
test("affections -> affect", function() {deepEqual( Stem("affections"), "affect");});
test("affects -> affect", function() {deepEqual( Stem("affects"), "affect");});
test("afferdavid -> afferdavid", function() {deepEqual( Stem("afferdavid"), "afferdavid");});
test("affidavit -> affidavit", function() {deepEqual( Stem("affidavit"), "affidavit");});
test("affidavits -> affidavit", function() {deepEqual( Stem("affidavits"), "affidavit");});
test("affinity -> affin", function() {deepEqual( Stem("affinity"), "affin");});
test("affirm -> affirm", function() {deepEqual( Stem("affirm"), "affirm");});
test("affirmative -> affirm", function() {deepEqual( Stem("affirmative"), "affirm");});
test("affirmed -> affirm", function() {deepEqual( Stem("affirmed"), "affirm");});
test("affirms -> affirm", function() {deepEqual( Stem("affirms"), "affirm");});
test("afflict -> afflict", function() {deepEqual( Stem("afflict"), "afflict");});
test("afflicted -> afflict", function() {deepEqual( Stem("afflicted"), "afflict");});
test("afflicting -> afflict", function() {deepEqual( Stem("afflicting"), "afflict");});
test("affliction -> afflict", function() {deepEqual( Stem("affliction"), "afflict");});
test("afflictions -> afflict", function() {deepEqual( Stem("afflictions"), "afflict");});
test("affluence -> affluenc", function() {deepEqual( Stem("affluence"), "affluenc");});
test("affluent -> affluent", function() {deepEqual( Stem("affluent"), "affluent");});
test("afford -> afford", function() {deepEqual( Stem("afford"), "afford");});
test("afforded -> afford", function() {deepEqual( Stem("afforded"), "afford");});
test("affording -> afford", function() {deepEqual( Stem("affording"), "afford");});
test("affords -> afford", function() {deepEqual( Stem("affords"), "afford");});
test("affright -> affright", function() {deepEqual( Stem("affright"), "affright");});
test("affrighted -> affright", function() {deepEqual( Stem("affrighted"), "affright");});
test("affront -> affront", function() {deepEqual( Stem("affront"), "affront");});
test("affronted -> affront", function() {deepEqual( Stem("affronted"), "affront");});
test("afield -> afield", function() {deepEqual( Stem("afield"), "afield");});
test("aflicto -> aflicto", function() {deepEqual( Stem("aflicto"), "aflicto");});
test("afloat -> afloat", function() {deepEqual( Stem("afloat"), "afloat");});
test("afoot -> afoot", function() {deepEqual( Stem("afoot"), "afoot");});
test("afore -> afor", function() {deepEqual( Stem("afore"), "afor");});
test("aforementioned -> aforement", function() {deepEqual( Stem("aforementioned"), "aforement");});
test("aforesaid -> aforesaid", function() {deepEqual( Stem("aforesaid"), "aforesaid");});
test("afraid -> afraid", function() {deepEqual( Stem("afraid"), "afraid");});
test("afresh -> afresh", function() {deepEqual( Stem("afresh"), "afresh");});
test("africa -> africa", function() {deepEqual( Stem("africa"), "africa");});
test("african -> african", function() {deepEqual( Stem("african"), "african");});
test("afrique -> afriqu", function() {deepEqual( Stem("afrique"), "afriqu");});
test("afrosinya -> afrosinya", function() {deepEqual( Stem("afrosinya"), "afrosinya");});
test("afsd -> afsd", function() {deepEqual( Stem("afsd"), "afsd");});
test("aft -> aft", function() {deepEqual( Stem("aft"), "aft");});
test("after -> after", function() {deepEqual( Stem("after"), "after");});
test("afternoon -> afternoon", function() {deepEqual( Stem("afternoon"), "afternoon");});
test("afternoons -> afternoon", function() {deepEqual( Stem("afternoons"), "afternoon");});
test("afterthought -> afterthought", function() {deepEqual( Stem("afterthought"), "afterthought");});
test("afterwards -> afterward", function() {deepEqual( Stem("afterwards"), "afterward");});
test("agai -> agai", function() {deepEqual( Stem("agai"), "agai");});
test("again -> again", function() {deepEqual( Stem("again"), "again");});
test("against -> against", function() {deepEqual( Stem("against"), "against");});
test("agate -> agat", function() {deepEqual( Stem("agate"), "agat");});
test("agave -> agav", function() {deepEqual( Stem("agave"), "agav");});
test("agaves -> agav", function() {deepEqual( Stem("agaves"), "agav");});
test("age -> age", function() {deepEqual( Stem("age"), "age");});
test("agean -> agean", function() {deepEqual( Stem("agean"), "agean");});
test("aged -> age", function() {deepEqual( Stem("aged"), "age");});
test("agency -> agenc", function() {deepEqual( Stem("agency"), "agenc");});
test("agent -> agent", function() {deepEqual( Stem("agent"), "agent");});
test("agents -> agent", function() {deepEqual( Stem("agents"), "agent");});
test("agers -> ager", function() {deepEqual( Stem("agers"), "ager");});
test("ages -> age", function() {deepEqual( Stem("ages"), "age");});
test("aggeravating -> aggerav", function() {deepEqual( Stem("aggeravating"), "aggerav");});
test("agglomeration -> agglomer", function() {deepEqual( Stem("agglomeration"), "agglomer");});
test("agglutinated -> agglutin", function() {deepEqual( Stem("agglutinated"), "agglutin");});
test("aggrandizement -> aggrandiz", function() {deepEqual( Stem("aggrandizement"), "aggrandiz");});
test("aggravate -> aggrav", function() {deepEqual( Stem("aggravate"), "aggrav");});
test("aggravated -> aggrav", function() {deepEqual( Stem("aggravated"), "aggrav");});
test("aggravates -> aggrav", function() {deepEqual( Stem("aggravates"), "aggrav");});
test("aggravating -> aggrav", function() {deepEqual( Stem("aggravating"), "aggrav");});
test("aggravation -> aggrav", function() {deepEqual( Stem("aggravation"), "aggrav");});
test("aggravations -> aggrav", function() {deepEqual( Stem("aggravations"), "aggrav");});
test("aggregate -> aggreg", function() {deepEqual( Stem("aggregate"), "aggreg");});
test("aggregated -> aggreg", function() {deepEqual( Stem("aggregated"), "aggreg");});
test("aggression -> aggress", function() {deepEqual( Stem("aggression"), "aggress");});
test("aggressor -> aggressor", function() {deepEqual( Stem("aggressor"), "aggressor");});
test("aggrieved -> aggriev", function() {deepEqual( Stem("aggrieved"), "aggriev");});
test("aghast -> aghast", function() {deepEqual( Stem("aghast"), "aghast");});
test("agility -> agil", function() {deepEqual( Stem("agility"), "agil");});
test("agin -> agin", function() {deepEqual( Stem("agin"), "agin");});
test("agitate -> agit", function() {deepEqual( Stem("agitate"), "agit");});
test("agitated -> agit", function() {deepEqual( Stem("agitated"), "agit");});
test("agitating -> agit", function() {deepEqual( Stem("agitating"), "agit");});
test("agitation -> agit", function() {deepEqual( Stem("agitation"), "agit");});
test("agitators -> agit", function() {deepEqual( Stem("agitators"), "agit");});
test("aglow -> aglow", function() {deepEqual( Stem("aglow"), "aglow");});
test("agnes -> agn", function() {deepEqual( Stem("agnes"), "agn");});
test("ago -> ago", function() {deepEqual( Stem("ago"), "ago");});
test("agonies -> agoni", function() {deepEqual( Stem("agonies"), "agoni");});
test("agonised -> agonis", function() {deepEqual( Stem("agonised"), "agonis");});
test("agonising -> agonis", function() {deepEqual( Stem("agonising"), "agonis");});
test("agonisingly -> agonis", function() {deepEqual( Stem("agonisingly"), "agonis");});
test("agonizing -> agon", function() {deepEqual( Stem("agonizing"), "agon");});
test("agony -> agoni", function() {deepEqual( Stem("agony"), "agoni");});
test("agouti -> agouti", function() {deepEqual( Stem("agouti"), "agouti");});
test("agoutis -> agouti", function() {deepEqual( Stem("agoutis"), "agouti");});
test("agrarian -> agrarian", function() {deepEqual( Stem("agrarian"), "agrarian");});
test("agree -> agre", function() {deepEqual( Stem("agree"), "agre");});
test("agreeable -> agreeabl", function() {deepEqual( Stem("agreeable"), "agreeabl");});
test("agreeably -> agreeabl", function() {deepEqual( Stem("agreeably"), "agreeabl");});
test("agreed -> agre", function() {deepEqual( Stem("agreed"), "agre");});
test("agreeing -> agre", function() {deepEqual( Stem("agreeing"), "agre");});
test("agreement -> agreement", function() {deepEqual( Stem("agreement"), "agreement");});
test("agrees -> agre", function() {deepEqual( Stem("agrees"), "agre");});
test("agricult -> agricult", function() {deepEqual( Stem("agricult"), "agricult");});
test("agricultural -> agricultur", function() {deepEqual( Stem("agricultural"), "agricultur");});
test("agriculture -> agricultur", function() {deepEqual( Stem("agriculture"), "agricultur");});
test("agriculturists -> agriculturist", function() {deepEqual( Stem("agriculturists"), "agriculturist");});
test("aground -> aground", function() {deepEqual( Stem("aground"), "aground");});
test("agua -> agua", function() {deepEqual( Stem("agua"), "agua");});
test("ague -> agu", function() {deepEqual( Stem("ague"), "agu");});
test("agueros -> aguero", function() {deepEqual( Stem("agueros"), "aguero");});
test("ah -> ah", function() {deepEqual( Stem("ah"), "ah");});
test("aha -> aha", function() {deepEqual( Stem("aha"), "aha");});
test("ahead -> ahead", function() {deepEqual( Stem("ahead"), "ahead");});
test("ai -> ai", function() {deepEqual( Stem("ai"), "ai");});
test("aid -> aid", function() {deepEqual( Stem("aid"), "aid");});
test("aided -> aid", function() {deepEqual( Stem("aided"), "aid");});
test("aider -> aider", function() {deepEqual( Stem("aider"), "aider");});
test("aiding -> aid", function() {deepEqual( Stem("aiding"), "aid");});
test("aids -> aid", function() {deepEqual( Stem("aids"), "aid");});
test("aie -> aie", function() {deepEqual( Stem("aie"), "aie");});
test("ailing -> ail", function() {deepEqual( Stem("ailing"), "ail");});
test("ailment -> ailment", function() {deepEqual( Stem("ailment"), "ailment");});
test("ailments -> ailment", function() {deepEqual( Stem("ailments"), "ailment");});
test("ails -> ail", function() {deepEqual( Stem("ails"), "ail");});
test("aim -> aim", function() {deepEqual( Stem("aim"), "aim");});
test("aimed -> aim", function() {deepEqual( Stem("aimed"), "aim");});
test("aiming -> aim", function() {deepEqual( Stem("aiming"), "aim");});
test("aimless -> aimless", function() {deepEqual( Stem("aimless"), "aimless");});
test("aimlessly -> aimless", function() {deepEqual( Stem("aimlessly"), "aimless");});
test("aims -> aim", function() {deepEqual( Stem("aims"), "aim");});
test("ain -> ain", function() {deepEqual( Stem("ain"), "ain");});
test("air -> air", function() {deepEqual( Stem("air"), "air");});
test("aired -> air", function() {deepEqual( Stem("aired"), "air");});
test("airily -> airili", function() {deepEqual( Stem("airily"), "airili");});
test("airing -> air", function() {deepEqual( Stem("airing"), "air");});
test("airlessness -> airless", function() {deepEqual( Stem("airlessness"), "airless");});
test("airnest -> airnest", function() {deepEqual( Stem("airnest"), "airnest");});
test("airs -> air", function() {deepEqual( Stem("airs"), "air");});
test("airy -> airi", function() {deepEqual( Stem("airy"), "airi");});
test("aisle -> aisl", function() {deepEqual( Stem("aisle"), "aisl");});
test("aits -> ait", function() {deepEqual( Stem("aits"), "ait");});
test("ajar -> ajar", function() {deepEqual( Stem("ajar"), "ajar");});
test("ajax -> ajax", function() {deepEqual( Stem("ajax"), "ajax");});
test("akad -> akad", function() {deepEqual( Stem("akad"), "akad");});
test("ake -> ake", function() {deepEqual( Stem("ake"), "ake");});
test("akeady -> akeadi", function() {deepEqual( Stem("akeady"), "akeadi");});
test("akimbo -> akimbo", function() {deepEqual( Stem("akimbo"), "akimbo");});
test("akin -> akin", function() {deepEqual( Stem("akin"), "akin");});
test("al -> al", function() {deepEqual( Stem("al"), "al");});
test("alabaster -> alabast", function() {deepEqual( Stem("alabaster"), "alabast");});
test("alacrity -> alacr", function() {deepEqual( Stem("alacrity"), "alacr");});
test("alameda -> alameda", function() {deepEqual( Stem("alameda"), "alameda");});
test("alarm -> alarm", function() {deepEqual( Stem("alarm"), "alarm");});
test("alarmed -> alarm", function() {deepEqual( Stem("alarmed"), "alarm");});
test("alarming -> alarm", function() {deepEqual( Stem("alarming"), "alarm");});
test("alarmingly -> alarm", function() {deepEqual( Stem("alarmingly"), "alarm");});
test("alarms -> alarm", function() {deepEqual( Stem("alarms"), "alarm");});
test("alas -> ala", function() {deepEqual( Stem("alas"), "ala");});
test("alba -> alba", function() {deepEqual( Stem("alba"), "alba");});
test("albania -> albania", function() {deepEqual( Stem("albania"), "albania");});
test("albanians -> albanian", function() {deepEqual( Stem("albanians"), "albanian");});
test("albans -> alban", function() {deepEqual( Stem("albans"), "alban");});
test("albatross -> albatross", function() {deepEqual( Stem("albatross"), "albatross");});
test("albeit -> albeit", function() {deepEqual( Stem("albeit"), "albeit");});
test("albemarle -> albemarl", function() {deepEqual( Stem("albemarle"), "albemarl");});
test("albert -> albert", function() {deepEqual( Stem("albert"), "albert");});
test("albertine -> albertin", function() {deepEqual( Stem("albertine"), "albertin");});
test("albiceps -> albicep", function() {deepEqual( Stem("albiceps"), "albicep");});
test("albicollis -> albicolli", function() {deepEqual( Stem("albicollis"), "albicolli");});
test("albicores -> albicor", function() {deepEqual( Stem("albicores"), "albicor");});
test("albino -> albino", function() {deepEqual( Stem("albino"), "albino");});
test("albion -> albion", function() {deepEqual( Stem("albion"), "albion");});
test("album -> album", function() {deepEqual( Stem("album"), "album");});
test("albuminous -> albumin", function() {deepEqual( Stem("albuminous"), "albumin");});
test("albury -> alburi", function() {deepEqual( Stem("albury"), "alburi");});
test("alcicornis -> alcicorni", function() {deepEqual( Stem("alcicornis"), "alcicorni");});
test("alcide -> alcid", function() {deepEqual( Stem("alcide"), "alcid");});
test("alcohol -> alcohol", function() {deepEqual( Stem("alcohol"), "alcohol");});
test("alder -> alder", function() {deepEqual( Stem("alder"), "alder");});
test("alderman -> alderman", function() {deepEqual( Stem("alderman"), "alderman");});
test("aldershot -> aldershot", function() {deepEqual( Stem("aldershot"), "aldershot");});
test("aldgate -> aldgat", function() {deepEqual( Stem("aldgate"), "aldgat");});
test("ale -> ale", function() {deepEqual( Stem("ale"), "ale");});
test("alehouse -> alehous", function() {deepEqual( Stem("alehouse"), "alehous");});
test("alehouses -> alehous", function() {deepEqual( Stem("alehouses"), "alehous");});
test("aleide -> aleid", function() {deepEqual( Stem("aleide"), "aleid");});
test("alerce -> alerc", function() {deepEqual( Stem("alerce"), "alerc");});
test("alert -> alert", function() {deepEqual( Stem("alert"), "alert");});
test("alexander -> alexand", function() {deepEqual( Stem("alexander"), "alexand");});
test("alexandr -> alexandr", function() {deepEqual( Stem("alexandr"), "alexandr");});
test("alexandrovna -> alexandrovna", function() {deepEqual( Stem("alexandrovna"), "alexandrovna");});
test("alexey -> alexey", function() {deepEqual( Stem("alexey"), "alexey");});
test("alfalfa -> alfalfa", function() {deepEqual( Stem("alfalfa"), "alfalfa");});
test("alfonso -> alfonso", function() {deepEqual( Stem("alfonso"), "alfonso");});
test("alford -> alford", function() {deepEqual( Stem("alford"), "alford");});
test("alfred -> alfr", function() {deepEqual( Stem("alfred"), "alfr");});
test("algarroba -> algarroba", function() {deepEqual( Stem("algarroba"), "algarroba");});
test("algebra -> algebra", function() {deepEqual( Stem("algebra"), "algebra");});
test("alice -> alic", function() {deepEqual( Stem("alice"), "alic");});
test("alienated -> alien", function() {deepEqual( Stem("alienated"), "alien");});
test("alight -> alight", function() {deepEqual( Stem("alight"), "alight");});
test("alighted -> alight", function() {deepEqual( Stem("alighted"), "alight");});
test("alighting -> alight", function() {deepEqual( Stem("alighting"), "alight");});
test("alights -> alight", function() {deepEqual( Stem("alights"), "alight");});
test("alike -> alik", function() {deepEqual( Stem("alike"), "alik");});
test("alive -> aliv", function() {deepEqual( Stem("alive"), "aliv");});
test("all -> all", function() {deepEqual( Stem("all"), "all");});
test("allah -> allah", function() {deepEqual( Stem("allah"), "allah");});
test("allan -> allan", function() {deepEqual( Stem("allan"), "allan");});
test("allay -> allay", function() {deepEqual( Stem("allay"), "allay");});
test("allayed -> allay", function() {deepEqual( Stem("allayed"), "allay");});
test("allays -> allay", function() {deepEqual( Stem("allays"), "allay");});
test("allegation -> alleg", function() {deepEqual( Stem("allegation"), "alleg");});
test("allegations -> alleg", function() {deepEqual( Stem("allegations"), "alleg");});
test("alleged -> alleg", function() {deepEqual( Stem("alleged"), "alleg");});
test("allegiance -> allegi", function() {deepEqual( Stem("allegiance"), "allegi");});
test("alleging -> alleg", function() {deepEqual( Stem("alleging"), "alleg");});
test("allegorical -> allegor", function() {deepEqual( Stem("allegorical"), "allegor");});
test("allegories -> allegori", function() {deepEqual( Stem("allegories"), "allegori");});
test("allegory -> allegori", function() {deepEqual( Stem("allegory"), "allegori");});
test("allenby -> allenbi", function() {deepEqual( Stem("allenby"), "allenbi");});
test("aller -> aller", function() {deepEqual( Stem("aller"), "aller");});
test("alleviate -> allevi", function() {deepEqual( Stem("alleviate"), "allevi");});
test("alleviated -> allevi", function() {deepEqual( Stem("alleviated"), "allevi");});
test("alley -> alley", function() {deepEqual( Stem("alley"), "alley");});
test("alleys -> alley", function() {deepEqual( Stem("alleys"), "alley");});
test("alliance -> allianc", function() {deepEqual( Stem("alliance"), "allianc");});
test("alliances -> allianc", function() {deepEqual( Stem("alliances"), "allianc");});
test("allied -> alli", function() {deepEqual( Stem("allied"), "alli");});
test("allies -> alli", function() {deepEqual( Stem("allies"), "alli");});
test("alligators -> allig", function() {deepEqual( Stem("alligators"), "allig");});
test("allotted -> allot", function() {deepEqual( Stem("allotted"), "allot");});
test("allotting -> allot", function() {deepEqual( Stem("allotting"), "allot");});
test("allow -> allow", function() {deepEqual( Stem("allow"), "allow");});
test("allowable -> allow", function() {deepEqual( Stem("allowable"), "allow");});
test("allowance -> allow", function() {deepEqual( Stem("allowance"), "allow");});
test("allowances -> allow", function() {deepEqual( Stem("allowances"), "allow");});
test("allowed -> allow", function() {deepEqual( Stem("allowed"), "allow");});
test("allowing -> allow", function() {deepEqual( Stem("allowing"), "allow");});
test("allows -> allow", function() {deepEqual( Stem("allows"), "allow");});
test("alloyed -> alloy", function() {deepEqual( Stem("alloyed"), "alloy");});
test("allude -> allud", function() {deepEqual( Stem("allude"), "allud");});
test("alluded -> allud", function() {deepEqual( Stem("alluded"), "allud");});
test("alludes -> allud", function() {deepEqual( Stem("alludes"), "allud");});
test("alluding -> allud", function() {deepEqual( Stem("alluding"), "allud");});
test("allure -> allur", function() {deepEqual( Stem("allure"), "allur");});
test("allured -> allur", function() {deepEqual( Stem("allured"), "allur");});
test("allurement -> allur", function() {deepEqual( Stem("allurement"), "allur");});
test("allurements -> allur", function() {deepEqual( Stem("allurements"), "allur");});
test("alluring -> allur", function() {deepEqual( Stem("alluring"), "allur");});
test("allus -> allus", function() {deepEqual( Stem("allus"), "allus");});
test("allusion -> allus", function() {deepEqual( Stem("allusion"), "allus");});
test("allusions -> allus", function() {deepEqual( Stem("allusions"), "allus");});
test("alluvial -> alluvi", function() {deepEqual( Stem("alluvial"), "alluvi");});
test("alluvium -> alluvium", function() {deepEqual( Stem("alluvium"), "alluvium");});
test("ally -> alli", function() {deepEqual( Stem("ally"), "alli");});
test("alma -> alma", function() {deepEqual( Stem("alma"), "alma");});
test("almac -> almac", function() {deepEqual( Stem("almac"), "almac");});
test("almanac -> almanac", function() {deepEqual( Stem("almanac"), "almanac");});
test("almanacs -> almanac", function() {deepEqual( Stem("almanacs"), "almanac");});
test("almighty -> almighti", function() {deepEqual( Stem("almighty"), "almighti");});
test("almos -> almo", function() {deepEqual( Stem("almos"), "almo");});
test("almost -> almost", function() {deepEqual( Stem("almost"), "almost");});
test("alms -> alm", function() {deepEqual( Stem("alms"), "alm");});
test("almshouses -> almshous", function() {deepEqual( Stem("almshouses"), "almshous");});
test("aloe -> alo", function() {deepEqual( Stem("aloe"), "alo");});
test("aloft -> aloft", function() {deepEqual( Stem("aloft"), "aloft");});
test("alone -> alon", function() {deepEqual( Stem("alone"), "alon");});
test("along -> along", function() {deepEqual( Stem("along"), "along");});
test("alongside -> alongsid", function() {deepEqual( Stem("alongside"), "alongsid");});
test("aloof -> aloof", function() {deepEqual( Stem("aloof"), "aloof");});
test("aloud -> aloud", function() {deepEqual( Stem("aloud"), "aloud");});
test("alphabet -> alphabet", function() {deepEqual( Stem("alphabet"), "alphabet");});
test("alphabets -> alphabet", function() {deepEqual( Stem("alphabets"), "alphabet");});
test("alphonse -> alphons", function() {deepEqual( Stem("alphonse"), "alphons");});
test("alpine -> alpin", function() {deepEqual( Stem("alpine"), "alpin");});
test("alps -> alp", function() {deepEqual( Stem("alps"), "alp");});
test("already -> alreadi", function() {deepEqual( Stem("already"), "alreadi");});
test("also -> also", function() {deepEqual( Stem("also"), "also");});
test("alta -> alta", function() {deepEqual( Stem("alta"), "alta");});
test("altar -> altar", function() {deepEqual( Stem("altar"), "altar");});
test("altars -> altar", function() {deepEqual( Stem("altars"), "altar");});
test("alter -> alter", function() {deepEqual( Stem("alter"), "alter");});
test("alteration -> alter", function() {deepEqual( Stem("alteration"), "alter");});
test("alterations -> alter", function() {deepEqual( Stem("alterations"), "alter");});
test("altercation -> alterc", function() {deepEqual( Stem("altercation"), "alterc");});
test("altered -> alter", function() {deepEqual( Stem("altered"), "alter");});
test("altering -> alter", function() {deepEqual( Stem("altering"), "alter");});
test("alternate -> altern", function() {deepEqual( Stem("alternate"), "altern");});
test("alternately -> altern", function() {deepEqual( Stem("alternately"), "altern");});
test("alternating -> altern", function() {deepEqual( Stem("alternating"), "altern");});
test("alternation -> altern", function() {deepEqual( Stem("alternation"), "altern");});
test("alternations -> altern", function() {deepEqual( Stem("alternations"), "altern");});
test("alternative -> altern", function() {deepEqual( Stem("alternative"), "altern");});
test("alternatives -> altern", function() {deepEqual( Stem("alternatives"), "altern");});
test("alters -> alter", function() {deepEqual( Stem("alters"), "alter");});
test("althoug -> althoug", function() {deepEqual( Stem("althoug"), "althoug");});
test("although -> although", function() {deepEqual( Stem("although"), "although");});
test("altisidora -> altisidora", function() {deepEqual( Stem("altisidora"), "altisidora");});
test("altitude -> altitud", function() {deepEqual( Stem("altitude"), "altitud");});
test("alto -> alto", function() {deepEqual( Stem("alto"), "alto");});
test("altogether -> altogeth", function() {deepEqual( Stem("altogether"), "altogeth");});
test("alured -> alur", function() {deepEqual( Stem("alured"), "alur");});
test("alway -> alway", function() {deepEqual( Stem("alway"), "alway");});
test("always -> alway", function() {deepEqual( Stem("always"), "alway");});
test("alyona -> alyona", function() {deepEqual( Stem("alyona"), "alyona");});
test("alyoshka -> alyoshka", function() {deepEqual( Stem("alyoshka"), "alyoshka");});
test("am -> am", function() {deepEqual( Stem("am"), "am");});
test("ama -> ama", function() {deepEqual( Stem("ama"), "ama");});
test("amalgamate -> amalgam", function() {deepEqual( Stem("amalgamate"), "amalgam");});
test("amalgamated -> amalgam", function() {deepEqual( Stem("amalgamated"), "amalgam");});
test("amalgamation -> amalgam", function() {deepEqual( Stem("amalgamation"), "amalgam");});
test("amalia -> amalia", function() {deepEqual( Stem("amalia"), "amalia");});
test("amancaes -> amanca", function() {deepEqual( Stem("amancaes"), "amanca");});
test("amang -> amang", function() {deepEqual( Stem("amang"), "amang");});
test("amanuensis -> amanuensi", function() {deepEqual( Stem("amanuensis"), "amanuensi");});
test("amarga -> amarga", function() {deepEqual( Stem("amarga"), "amarga");});
test("amass -> amass", function() {deepEqual( Stem("amass"), "amass");});
test("amassed -> amass", function() {deepEqual( Stem("amassed"), "amass");});
test("amassing -> amass", function() {deepEqual( Stem("amassing"), "amass");});
test("amateur -> amateur", function() {deepEqual( Stem("amateur"), "amateur");});
test("amaze -> amaz", function() {deepEqual( Stem("amaze"), "amaz");});
test("amazed -> amaz", function() {deepEqual( Stem("amazed"), "amaz");});
test("amazedly -> amaz", function() {deepEqual( Stem("amazedly"), "amaz");});
test("amazement -> amaz", function() {deepEqual( Stem("amazement"), "amaz");});
test("amazes -> amaz", function() {deepEqual( Stem("amazes"), "amaz");});
test("amazing -> amaz", function() {deepEqual( Stem("amazing"), "amaz");});
test("amazingly -> amaz", function() {deepEqual( Stem("amazingly"), "amaz");});
test("ambassadors -> ambassador", function() {deepEqual( Stem("ambassadors"), "ambassador");});
test("ambassadress -> ambassadress", function() {deepEqual( Stem("ambassadress"), "ambassadress");});
test("amber -> amber", function() {deepEqual( Stem("amber"), "amber");});
test("ambient -> ambient", function() {deepEqual( Stem("ambient"), "ambient");});
test("ambiguous -> ambigu", function() {deepEqual( Stem("ambiguous"), "ambigu");});
test("ambition -> ambit", function() {deepEqual( Stem("ambition"), "ambit");});
test("ambitious -> ambiti", function() {deepEqual( Stem("ambitious"), "ambiti");});
test("amble -> ambl", function() {deepEqual( Stem("amble"), "ambl");});
test("ambling -> ambl", function() {deepEqual( Stem("ambling"), "ambl");});
test("amblyrhynchus -> amblyrhynchus", function() {deepEqual( Stem("amblyrhynchus"), "amblyrhynchus");});
test("ambox -> ambox", function() {deepEqual( Stem("ambox"), "ambox");});
test("ambuscade -> ambuscad", function() {deepEqual( Stem("ambuscade"), "ambuscad");});
test("ambush -> ambush", function() {deepEqual( Stem("ambush"), "ambush");});
test("amd -> amd", function() {deepEqual( Stem("amd"), "amd");});
test("amelioration -> amelior", function() {deepEqual( Stem("amelioration"), "amelior");});
test("amen -> amen", function() {deepEqual( Stem("amen"), "amen");});
test("amenable -> amen", function() {deepEqual( Stem("amenable"), "amen");});
test("amend -> amend", function() {deepEqual( Stem("amend"), "amend");});
test("amended -> amend", function() {deepEqual( Stem("amended"), "amend");});
test("amendment -> amend", function() {deepEqual( Stem("amendment"), "amend");});
test("amendments -> amend", function() {deepEqual( Stem("amendments"), "amend");});
test("amends -> amend", function() {deepEqual( Stem("amends"), "amend");});
test("america -> america", function() {deepEqual( Stem("america"), "america");});
test("american -> american", function() {deepEqual( Stem("american"), "american");});
test("americana -> americana", function() {deepEqual( Stem("americana"), "americana");});
test("americans -> american", function() {deepEqual( Stem("americans"), "american");});
test("americas -> america", function() {deepEqual( Stem("americas"), "america");});
test("amerique -> ameriqu", function() {deepEqual( Stem("amerique"), "ameriqu");});
test("amethysts -> amethyst", function() {deepEqual( Stem("amethysts"), "amethyst");});
test("ami -> ami", function() {deepEqual( Stem("ami"), "ami");});
test("amiabilities -> amiabl", function() {deepEqual( Stem("amiabilities"), "amiabl");});
test("amiability -> amiabl", function() {deepEqual( Stem("amiability"), "amiabl");});
test("amiable -> amiabl", function() {deepEqual( Stem("amiable"), "amiabl");});
test("amiably -> amiabl", function() {deepEqual( Stem("amiably"), "amiabl");});
test("amicability -> amic", function() {deepEqual( Stem("amicability"), "amic");});
test("amicable -> amic", function() {deepEqual( Stem("amicable"), "amic");});
test("amicably -> amic", function() {deepEqual( Stem("amicably"), "amic");});
test("amid -> amid", function() {deepEqual( Stem("amid"), "amid");});
test("amidst -> amidst", function() {deepEqual( Stem("amidst"), "amidst");});
test("amiss -> amiss", function() {deepEqual( Stem("amiss"), "amiss");});
test("amity -> amiti", function() {deepEqual( Stem("amity"), "amiti");});
test("ammunition -> ammunit", function() {deepEqual( Stem("ammunition"), "ammunit");});
test("amn -> amn", function() {deepEqual( Stem("amn"), "amn");});
test("amoncelees -> amoncele", function() {deepEqual( Stem("amoncelees"), "amoncele");});
test("among -> among", function() {deepEqual( Stem("among"), "among");});
test("amongst -> amongst", function() {deepEqual( Stem("amongst"), "amongst");});
test("amorites -> amorit", function() {deepEqual( Stem("amorites"), "amorit");});
test("amorous -> amor", function() {deepEqual( Stem("amorous"), "amor");});
test("amost -> amost", function() {deepEqual( Stem("amost"), "amost");});
test("amount -> amount", function() {deepEqual( Stem("amount"), "amount");});
test("amounted -> amount", function() {deepEqual( Stem("amounted"), "amount");});
test("amounting -> amount", function() {deepEqual( Stem("amounting"), "amount");});
test("amounts -> amount", function() {deepEqual( Stem("amounts"), "amount");});
test("amphibious -> amphibi", function() {deepEqual( Stem("amphibious"), "amphibi");});
test("amphitheatre -> amphitheatr", function() {deepEqual( Stem("amphitheatre"), "amphitheatr");});
test("amphitheatrical -> amphitheatr", function() {deepEqual( Stem("amphitheatrical"), "amphitheatr");});
test("ample -> ampl", function() {deepEqual( Stem("ample"), "ampl");});
test("amply -> ampli", function() {deepEqual( Stem("amply"), "ampli");});
test("ampullariae -> ampullaria", function() {deepEqual( Stem("ampullariae"), "ampullaria");});
test("amputated -> amput", function() {deepEqual( Stem("amputated"), "amput");});
test("amputation -> amput", function() {deepEqual( Stem("amputation"), "amput");});
test("amuse -> amus", function() {deepEqual( Stem("amuse"), "amus");});
test("amused -> amus", function() {deepEqual( Stem("amused"), "amus");});
test("amusement -> amus", function() {deepEqual( Stem("amusement"), "amus");});
test("amusements -> amus", function() {deepEqual( Stem("amusements"), "amus");});
test("amuses -> amus", function() {deepEqual( Stem("amuses"), "amus");});
test("amusing -> amus", function() {deepEqual( Stem("amusing"), "amus");});
test("an -> an", function() {deepEqual( Stem("an"), "an");});
test("ana -> ana", function() {deepEqual( Stem("ana"), "ana");});
test("anadeers -> anad", function() {deepEqual( Stem("anadeers"), "anad");});
test("anaemic -> anaem", function() {deepEqual( Stem("anaemic"), "anaem");});
test("analogies -> analog", function() {deepEqual( Stem("analogies"), "analog");});
test("analogous -> analog", function() {deepEqual( Stem("analogous"), "analog");});
test("analogue -> analogu", function() {deepEqual( Stem("analogue"), "analogu");});
test("analogy -> analog", function() {deepEqual( Stem("analogy"), "analog");});
test("analyse -> analys", function() {deepEqual( Stem("analyse"), "analys");});
test("analysed -> analys", function() {deepEqual( Stem("analysed"), "analys");});
test("analysing -> analys", function() {deepEqual( Stem("analysing"), "analys");});
test("analysis -> analysi", function() {deepEqual( Stem("analysis"), "analysi");});
test("analyze -> analyz", function() {deepEqual( Stem("analyze"), "analyz");});
test("analyzed -> analyz", function() {deepEqual( Stem("analyzed"), "analyz");});
test("anarchy -> anarchi", function() {deepEqual( Stem("anarchy"), "anarchi");});
test("anas -> ana", function() {deepEqual( Stem("anas"), "ana");});
test("anastasia -> anastasia", function() {deepEqual( Stem("anastasia"), "anastasia");});
test("anat -> anat", function() {deepEqual( Stem("anat"), "anat");});
test("anathematising -> anathematis", function() {deepEqual( Stem("anathematising"), "anathematis");});
test("anathematizing -> anathemat", function() {deepEqual( Stem("anathematizing"), "anathemat");});
test("anatolia -> anatolia", function() {deepEqual( Stem("anatolia"), "anatolia");});
test("anatomical -> anatom", function() {deepEqual( Stem("anatomical"), "anatom");});
test("anatomists -> anatomist", function() {deepEqual( Stem("anatomists"), "anatomist");});
test("anatomy -> anatomi", function() {deepEqual( Stem("anatomy"), "anatomi");});
test("ancestor -> ancestor", function() {deepEqual( Stem("ancestor"), "ancestor");});
test("ancestors -> ancestor", function() {deepEqual( Stem("ancestors"), "ancestor");});
test("ancestral -> ancestr", function() {deepEqual( Stem("ancestral"), "ancestr");});
test("ancestress -> ancestress", function() {deepEqual( Stem("ancestress"), "ancestress");});
test("ancestry -> ancestri", function() {deepEqual( Stem("ancestry"), "ancestri");});
test("anchor -> anchor", function() {deepEqual( Stem("anchor"), "anchor");});
test("anchorage -> anchorag", function() {deepEqual( Stem("anchorage"), "anchorag");});
test("anchored -> anchor", function() {deepEqual( Stem("anchored"), "anchor");});
test("anchoring -> anchor", function() {deepEqual( Stem("anchoring"), "anchor");});
test("anchors -> anchor", function() {deepEqual( Stem("anchors"), "anchor");});
test("anchovies -> anchovi", function() {deepEqual( Stem("anchovies"), "anchovi");});
test("ancient -> ancient", function() {deepEqual( Stem("ancient"), "ancient");});
test("anciently -> ancient", function() {deepEqual( Stem("anciently"), "ancient");});
test("ancients -> ancient", function() {deepEqual( Stem("ancients"), "ancient");});
test("and -> and", function() {deepEqual( Stem("and"), "and");});
test("andalusia -> andalusia", function() {deepEqual( Stem("andalusia"), "andalusia");});
test("ande -> and", function() {deepEqual( Stem("ande"), "and");});
test("andes -> andes", function() {deepEqual( Stem("andes"), "andes");});
test("andle -> andl", function() {deepEqual( Stem("andle"), "andl");});
test("andled -> andl", function() {deepEqual( Stem("andled"), "andl");});
test("andrew -> andrew", function() {deepEqual( Stem("andrew"), "andrew");});
test("andrews -> andrew", function() {deepEqual( Stem("andrews"), "andrew");});
test("andrey -> andrey", function() {deepEqual( Stem("andrey"), "andrey");});
test("anecdote -> anecdot", function() {deepEqual( Stem("anecdote"), "anecdot");});
test("anecdotes -> anecdot", function() {deepEqual( Stem("anecdotes"), "anecdot");});
test("anemone -> anemon", function() {deepEqual( Stem("anemone"), "anemon");});
test("anew -> anew", function() {deepEqual( Stem("anew"), "anew");});
test("angel -> angel", function() {deepEqual( Stem("angel"), "angel");});
test("angela -> angela", function() {deepEqual( Stem("angela"), "angela");});
test("angelic -> angel", function() {deepEqual( Stem("angelic"), "angel");});
test("angelica -> angelica", function() {deepEqual( Stem("angelica"), "angelica");});
test("angels -> angel", function() {deepEqual( Stem("angels"), "angel");});
test("anger -> anger", function() {deepEqual( Stem("anger"), "anger");});
test("angered -> anger", function() {deepEqual( Stem("angered"), "anger");});
test("angerless -> angerless", function() {deepEqual( Stem("angerless"), "angerless");});
test("angers -> anger", function() {deepEqual( Stem("angers"), "anger");});
test("angle -> angl", function() {deepEqual( Stem("angle"), "angl");});
test("angler -> angler", function() {deepEqual( Stem("angler"), "angler");});
test("angles -> angl", function() {deepEqual( Stem("angles"), "angl");});
test("anglican -> anglican", function() {deepEqual( Stem("anglican"), "anglican");});
test("anglicanism -> anglican", function() {deepEqual( Stem("anglicanism"), "anglican");});
test("anglified -> anglifi", function() {deepEqual( Stem("anglified"), "anglifi");});
test("angriest -> angriest", function() {deepEqual( Stem("angriest"), "angriest");});
test("angrily -> angrili", function() {deepEqual( Stem("angrily"), "angrili");});
test("angry -> angri", function() {deepEqual( Stem("angry"), "angri");});
test("anguish -> anguish", function() {deepEqual( Stem("anguish"), "anguish");});
test("angula -> angula", function() {deepEqual( Stem("angula"), "angula");});
test("angular -> angular", function() {deepEqual( Stem("angular"), "angular");});
test("anima -> anima", function() {deepEqual( Stem("anima"), "anima");});
test("animadvert -> animadvert", function() {deepEqual( Stem("animadvert"), "animadvert");});
test("animal -> anim", function() {deepEqual( Stem("animal"), "anim");});
test("animalcula -> animalcula", function() {deepEqual( Stem("animalcula"), "animalcula");});
test("animalcule -> animalcul", function() {deepEqual( Stem("animalcule"), "animalcul");});
test("animalized -> anim", function() {deepEqual( Stem("animalized"), "anim");});
test("animals -> anim", function() {deepEqual( Stem("animals"), "anim");});
test("animas -> anima", function() {deepEqual( Stem("animas"), "anima");});
test("animate -> anim", function() {deepEqual( Stem("animate"), "anim");});
test("animated -> anim", function() {deepEqual( Stem("animated"), "anim");});
test("animates -> anim", function() {deepEqual( Stem("animates"), "anim");});
test("animating -> anim", function() {deepEqual( Stem("animating"), "anim");});
test("animation -> anim", function() {deepEqual( Stem("animation"), "anim");});
test("animosity -> animos", function() {deepEqual( Stem("animosity"), "animos");});
test("aniska -> aniska", function() {deepEqual( Stem("aniska"), "aniska");});
test("ankle -> ankl", function() {deepEqual( Stem("ankle"), "ankl");});
test("ankles -> ankl", function() {deepEqual( Stem("ankles"), "ankl");});
test("ann -> ann", function() {deepEqual( Stem("ann"), "ann");});
test("anna -> anna", function() {deepEqual( Stem("anna"), "anna");});
test("annal -> annal", function() {deepEqual( Stem("annal"), "annal");});
test("annales -> annal", function() {deepEqual( Stem("annales"), "annal");});
test("annals -> annal", function() {deepEqual( Stem("annals"), "annal");});
test("anne -> ann", function() {deepEqual( Stem("anne"), "ann");});
test("annelidous -> annelid", function() {deepEqual( Stem("annelidous"), "annelid");});
test("annette -> annett", function() {deepEqual( Stem("annette"), "annett");});
test("annewum -> annewum", function() {deepEqual( Stem("annewum"), "annewum");});
test("annexed -> annex", function() {deepEqual( Stem("annexed"), "annex");});
test("annie -> anni", function() {deepEqual( Stem("annie"), "anni");});
test("annihilate -> annihil", function() {deepEqual( Stem("annihilate"), "annihil");});
test("annihilated -> annihil", function() {deepEqual( Stem("annihilated"), "annihil");});
test("annihilation -> annihil", function() {deepEqual( Stem("annihilation"), "annihil");});
test("anniversaries -> anniversari", function() {deepEqual( Stem("anniversaries"), "anniversari");});
test("anniversary -> anniversari", function() {deepEqual( Stem("anniversary"), "anniversari");});
test("annoucing -> annouc", function() {deepEqual( Stem("annoucing"), "annouc");});
test("announce -> announc", function() {deepEqual( Stem("announce"), "announc");});
test("announced -> announc", function() {deepEqual( Stem("announced"), "announc");});
test("announcement -> announc", function() {deepEqual( Stem("announcement"), "announc");});
test("announcements -> announc", function() {deepEqual( Stem("announcements"), "announc");});
test("announces -> announc", function() {deepEqual( Stem("announces"), "announc");});
test("announcing -> announc", function() {deepEqual( Stem("announcing"), "announc");});
test("annoy -> annoy", function() {deepEqual( Stem("annoy"), "annoy");});
test("annoyance -> annoy", function() {deepEqual( Stem("annoyance"), "annoy");});
test("annoyances -> annoy", function() {deepEqual( Stem("annoyances"), "annoy");});
test("annoyed -> annoy", function() {deepEqual( Stem("annoyed"), "annoy");});
test("annoying -> annoy", function() {deepEqual( Stem("annoying"), "annoy");});
test("annoys -> annoy", function() {deepEqual( Stem("annoys"), "annoy");});
test("annual -> annual", function() {deepEqual( Stem("annual"), "annual");});
test("annually -> annual", function() {deepEqual( Stem("annually"), "annual");});
test("annuals -> annual", function() {deepEqual( Stem("annuals"), "annual");});
test("annuelle -> annuell", function() {deepEqual( Stem("annuelle"), "annuell");});
test("annuity -> annuiti", function() {deepEqual( Stem("annuity"), "annuiti");});
test("annul -> annul", function() {deepEqual( Stem("annul"), "annul");});
test("annum -> annum", function() {deepEqual( Stem("annum"), "annum");});
test("anomalies -> anomali", function() {deepEqual( Stem("anomalies"), "anomali");});
test("anomalous -> anomal", function() {deepEqual( Stem("anomalous"), "anomal");});
test("anomaly -> anomali", function() {deepEqual( Stem("anomaly"), "anomali");});
test("anon -> anon", function() {deepEqual( Stem("anon"), "anon");});
test("anonymous -> anonym", function() {deepEqual( Stem("anonymous"), "anonym");});
test("anoother -> anooth", function() {deepEqual( Stem("anoother"), "anooth");});
test("another -> anoth", function() {deepEqual( Stem("another"), "anoth");});
test("anson -> anson", function() {deepEqual( Stem("anson"), "anson");});
test("anstice -> anstic", function() {deepEqual( Stem("anstice"), "anstic");});
test("answer -> answer", function() {deepEqual( Stem("answer"), "answer");});
test("answerable -> answer", function() {deepEqual( Stem("answerable"), "answer");});
test("answered -> answer", function() {deepEqual( Stem("answered"), "answer");});
test("answering -> answer", function() {deepEqual( Stem("answering"), "answer");});
test("answers -> answer", function() {deepEqual( Stem("answers"), "answer");});
test("ant -> ant", function() {deepEqual( Stem("ant"), "ant");});
test("antagonism -> antagon", function() {deepEqual( Stem("antagonism"), "antagon");});
test("antagonist -> antagonist", function() {deepEqual( Stem("antagonist"), "antagonist");});
test("antagonistic -> antagonist", function() {deepEqual( Stem("antagonistic"), "antagonist");});
test("antarctic -> antarct", function() {deepEqual( Stem("antarctic"), "antarct");});
test("antarctica -> antarctica", function() {deepEqual( Stem("antarctica"), "antarctica");});
test("antarcticus -> antarcticus", function() {deepEqual( Stem("antarcticus"), "antarcticus");});
test("anteater -> anteat", function() {deepEqual( Stem("anteater"), "anteat");});
test("antecedent -> anteced", function() {deepEqual( Stem("antecedent"), "anteced");});
test("antecedents -> anteced", function() {deepEqual( Stem("antecedents"), "anteced");});
test("antechamber -> antechamb", function() {deepEqual( Stem("antechamber"), "antechamb");});
test("antechambers -> antechamb", function() {deepEqual( Stem("antechambers"), "antechamb");});
test("antediluvian -> antediluvian", function() {deepEqual( Stem("antediluvian"), "antediluvian");});
test("antelope -> antelop", function() {deepEqual( Stem("antelope"), "antelop");});
test("antelopes -> antelop", function() {deepEqual( Stem("antelopes"), "antelop");});
test("antennae -> antenna", function() {deepEqual( Stem("antennae"), "antenna");});
test("antennatus -> antennatus", function() {deepEqual( Stem("antennatus"), "antennatus");});
test("anterior -> anterior", function() {deepEqual( Stem("anterior"), "anterior");});
test("anthem -> anthem", function() {deepEqual( Stem("anthem"), "anthem");});
test("anthony -> anthoni", function() {deepEqual( Stem("anthony"), "anthoni");});
test("anthus -> anthus", function() {deepEqual( Stem("anthus"), "anthus");});
test("anti -> anti", function() {deepEqual( Stem("anti"), "anti");});
test("anticipate -> anticip", function() {deepEqual( Stem("anticipate"), "anticip");});
test("anticipated -> anticip", function() {deepEqual( Stem("anticipated"), "anticip");});
test("anticipates -> anticip", function() {deepEqual( Stem("anticipates"), "anticip");});
test("anticipating -> anticip", function() {deepEqual( Stem("anticipating"), "anticip");});
test("anticipation -> anticip", function() {deepEqual( Stem("anticipation"), "anticip");});
test("anticipations -> anticip", function() {deepEqual( Stem("anticipations"), "anticip");});
test("anticipative -> anticip", function() {deepEqual( Stem("anticipative"), "anticip");});
test("antics -> antic", function() {deepEqual( Stem("antics"), "antic");});
test("antilles -> antill", function() {deepEqual( Stem("antilles"), "antill");});
test("antipodean -> antipodean", function() {deepEqual( Stem("antipodean"), "antipodean");});
test("antipodes -> antipod", function() {deepEqual( Stem("antipodes"), "antipod");});
test("antiquarian -> antiquarian", function() {deepEqual( Stem("antiquarian"), "antiquarian");});
test("antiquaries -> antiquari", function() {deepEqual( Stem("antiquaries"), "antiquari");});
test("antiquated -> antiqu", function() {deepEqual( Stem("antiquated"), "antiqu");});
test("antiques -> antiqu", function() {deepEqual( Stem("antiques"), "antiqu");});
test("antiquities -> antiqu", function() {deepEqual( Stem("antiquities"), "antiqu");});
test("antiquity -> antiqu", function() {deepEqual( Stem("antiquity"), "antiqu");});
test("antlers -> antler", function() {deepEqual( Stem("antlers"), "antler");});
test("antonio -> antonio", function() {deepEqual( Stem("antonio"), "antonio");});
test("antony -> antoni", function() {deepEqual( Stem("antony"), "antoni");});
test("antrum -> antrum", function() {deepEqual( Stem("antrum"), "antrum");});
test("ants -> ant", function() {deepEqual( Stem("ants"), "ant");});
test("antuco -> antuco", function() {deepEqual( Stem("antuco"), "antuco");});
test("anxieties -> anxieti", function() {deepEqual( Stem("anxieties"), "anxieti");});
test("anxiety -> anxieti", function() {deepEqual( Stem("anxiety"), "anxieti");});
test("anxious -> anxious", function() {deepEqual( Stem("anxious"), "anxious");});
test("anxiously -> anxious", function() {deepEqual( Stem("anxiously"), "anxious");});
test("any -> ani", function() {deepEqual( Stem("any"), "ani");});
test("anybody -> anybodi", function() {deepEqual( Stem("anybody"), "anybodi");});
test("anyhow -> anyhow", function() {deepEqual( Stem("anyhow"), "anyhow");});
test("anymore -> anymor", function() {deepEqual( Stem("anymore"), "anymor");});
test("anyone -> anyon", function() {deepEqual( Stem("anyone"), "anyon");});
test("anything -> anyth", function() {deepEqual( Stem("anything"), "anyth");});
test("anythink -> anythink", function() {deepEqual( Stem("anythink"), "anythink");});
test("anyvays -> anyvay", function() {deepEqual( Stem("anyvays"), "anyvay");});
test("anyway -> anyway", function() {deepEqual( Stem("anyway"), "anyway");});
test("anyways -> anyway", function() {deepEqual( Stem("anyways"), "anyway");});
test("anywhere -> anywher", function() {deepEqual( Stem("anywhere"), "anywher");});
test("anywheres -> anywher", function() {deepEqual( Stem("anywheres"), "anywher");});
test("ap -> ap", function() {deepEqual( Stem("ap"), "ap");});
test("apace -> apac", function() {deepEqual( Stem("apace"), "apac");});
test("apar -> apar", function() {deepEqual( Stem("apar"), "apar");});
test("apart -> apart", function() {deepEqual( Stem("apart"), "apart");});
test("apartment -> apart", function() {deepEqual( Stem("apartment"), "apart");});
test("apartments -> apart", function() {deepEqual( Stem("apartments"), "apart");});
test("apate -> apat", function() {deepEqual( Stem("apate"), "apat");});
test("apathy -> apathi", function() {deepEqual( Stem("apathy"), "apathi");});
test("ape -> ape", function() {deepEqual( Stem("ape"), "ape");});
test("apennines -> apennin", function() {deepEqual( Stem("apennines"), "apennin");});
test("aperient -> aperi", function() {deepEqual( Stem("aperient"), "aperi");});
test("aperture -> apertur", function() {deepEqual( Stem("aperture"), "apertur");});
test("apertures -> apertur", function() {deepEqual( Stem("apertures"), "apertur");});
test("apex -> apex", function() {deepEqual( Stem("apex"), "apex");});
test("aphodius -> aphodius", function() {deepEqual( Stem("aphodius"), "aphodius");});
test("apiece -> apiec", function() {deepEqual( Stem("apiece"), "apiec");});
test("apire -> apir", function() {deepEqual( Stem("apire"), "apir");});
test("apires -> apir", function() {deepEqual( Stem("apires"), "apir");});
test("aplysia -> aplysia", function() {deepEqual( Stem("aplysia"), "aplysia");});
test("apollinaris -> apollinari", function() {deepEqual( Stem("apollinaris"), "apollinari");});
test("apollo -> apollo", function() {deepEqual( Stem("apollo"), "apollo");});
test("apologetic -> apologet", function() {deepEqual( Stem("apologetic"), "apologet");});
test("apologetically -> apologet", function() {deepEqual( Stem("apologetically"), "apologet");});
test("apologies -> apolog", function() {deepEqual( Stem("apologies"), "apolog");});
test("apologise -> apologis", function() {deepEqual( Stem("apologise"), "apologis");});
test("apologised -> apologis", function() {deepEqual( Stem("apologised"), "apologis");});
test("apologising -> apologis", function() {deepEqual( Stem("apologising"), "apologis");});
test("apologists -> apologist", function() {deepEqual( Stem("apologists"), "apologist");});
test("apologize -> apolog", function() {deepEqual( Stem("apologize"), "apolog");});
test("apologized -> apolog", function() {deepEqual( Stem("apologized"), "apolog");});
test("apologizes -> apolog", function() {deepEqual( Stem("apologizes"), "apolog");});
test("apologizing -> apolog", function() {deepEqual( Stem("apologizing"), "apolog");});
test("apology -> apolog", function() {deepEqual( Stem("apology"), "apolog");});
test("apoplectic -> apoplect", function() {deepEqual( Stem("apoplectic"), "apoplect");});
test("apoplexy -> apoplexi", function() {deepEqual( Stem("apoplexy"), "apoplexi");});
test("apostle -> apostl", function() {deepEqual( Stem("apostle"), "apostl");});
test("apostles -> apostl", function() {deepEqual( Stem("apostles"), "apostl");});
test("apostolica -> apostolica", function() {deepEqual( Stem("apostolica"), "apostolica");});
test("apostrophe -> apostroph", function() {deepEqual( Stem("apostrophe"), "apostroph");});
test("apostrophised -> apostrophis", function() {deepEqual( Stem("apostrophised"), "apostrophis");});
test("apostrophized -> apostroph", function() {deepEqual( Stem("apostrophized"), "apostroph");});
test("apostrophizing -> apostroph", function() {deepEqual( Stem("apostrophizing"), "apostroph");});
test("apothecaries -> apothecari", function() {deepEqual( Stem("apothecaries"), "apothecari");});
test("apothecary -> apothecari", function() {deepEqual( Stem("apothecary"), "apothecari");});
test("appalled -> appal", function() {deepEqual( Stem("appalled"), "appal");});
test("appalling -> appal", function() {deepEqual( Stem("appalling"), "appal");});
test("appallingly -> appal", function() {deepEqual( Stem("appallingly"), "appal");});
test("appanage -> appanag", function() {deepEqual( Stem("appanage"), "appanag");});
test("apparatus -> apparatus", function() {deepEqual( Stem("apparatus"), "apparatus");});
test("apparel -> apparel", function() {deepEqual( Stem("apparel"), "apparel");});
test("apparent -> appar", function() {deepEqual( Stem("apparent"), "appar");});
test("apparently -> appar", function() {deepEqual( Stem("apparently"), "appar");});
test("apparition -> apparit", function() {deepEqual( Stem("apparition"), "apparit");});
test("apparitions -> apparit", function() {deepEqual( Stem("apparitions"), "apparit");});
test("appea -> appea", function() {deepEqual( Stem("appea"), "appea");});
test("appeal -> appeal", function() {deepEqual( Stem("appeal"), "appeal");});
test("appealed -> appeal", function() {deepEqual( Stem("appealed"), "appeal");});
test("appealing -> appeal", function() {deepEqual( Stem("appealing"), "appeal");});
test("appealingly -> appeal", function() {deepEqual( Stem("appealingly"), "appeal");});
test("appeals -> appeal", function() {deepEqual( Stem("appeals"), "appeal");});
test("appear -> appear", function() {deepEqual( Stem("appear"), "appear");});
test("appearance -> appear", function() {deepEqual( Stem("appearance"), "appear");});
test("appearances -> appear", function() {deepEqual( Stem("appearances"), "appear");});
test("appeared -> appear", function() {deepEqual( Stem("appeared"), "appear");});
test("appearing -> appear", function() {deepEqual( Stem("appearing"), "appear");});
test("appears -> appear", function() {deepEqual( Stem("appears"), "appear");});
test("appease -> appeas", function() {deepEqual( Stem("appease"), "appeas");});
test("appeased -> appeas", function() {deepEqual( Stem("appeased"), "appeas");});
test("appellation -> appel", function() {deepEqual( Stem("appellation"), "appel");});
test("append -> append", function() {deepEqual( Stem("append"), "append");});
test("appendage -> appendag", function() {deepEqual( Stem("appendage"), "appendag");});
test("appendages -> appendag", function() {deepEqual( Stem("appendages"), "appendag");});
test("appended -> append", function() {deepEqual( Stem("appended"), "append");});
test("appendix -> appendix", function() {deepEqual( Stem("appendix"), "appendix");});
test("appertained -> appertain", function() {deepEqual( Stem("appertained"), "appertain");});
test("appertaining -> appertain", function() {deepEqual( Stem("appertaining"), "appertain");});
test("apperton -> apperton", function() {deepEqual( Stem("apperton"), "apperton");});
test("appetite -> appetit", function() {deepEqual( Stem("appetite"), "appetit");});
test("appetites -> appetit", function() {deepEqual( Stem("appetites"), "appetit");});
test("appiness -> appi", function() {deepEqual( Stem("appiness"), "appi");});
test("applauded -> applaud", function() {deepEqual( Stem("applauded"), "applaud");});
test("applauding -> applaud", function() {deepEqual( Stem("applauding"), "applaud");});
test("applause -> applaus", function() {deepEqual( Stem("applause"), "applaus");});
test("apple -> appl", function() {deepEqual( Stem("apple"), "appl");});
test("apples -> appl", function() {deepEqual( Stem("apples"), "appl");});
test("appliances -> applianc", function() {deepEqual( Stem("appliances"), "applianc");});
test("applicable -> applic", function() {deepEqual( Stem("applicable"), "applic");});
test("applicant -> applic", function() {deepEqual( Stem("applicant"), "applic");});
test("application -> applic", function() {deepEqual( Stem("application"), "applic");});
test("applications -> applic", function() {deepEqual( Stem("applications"), "applic");});
test("applied -> appli", function() {deepEqual( Stem("applied"), "appli");});
test("applies -> appli", function() {deepEqual( Stem("applies"), "appli");});
test("apply -> appli", function() {deepEqual( Stem("apply"), "appli");});
test("applying -> appli", function() {deepEqual( Stem("applying"), "appli");});
test("appoint -> appoint", function() {deepEqual( Stem("appoint"), "appoint");});
test("appointed -> appoint", function() {deepEqual( Stem("appointed"), "appoint");});
test("appointment -> appoint", function() {deepEqual( Stem("appointment"), "appoint");});
test("appointments -> appoint", function() {deepEqual( Stem("appointments"), "appoint");});
test("appoints -> appoint", function() {deepEqual( Stem("appoints"), "appoint");});
test("apportioned -> apport", function() {deepEqual( Stem("apportioned"), "apport");});
test("appreciable -> appreci", function() {deepEqual( Stem("appreciable"), "appreci");});
test("appreciate -> appreci", function() {deepEqual( Stem("appreciate"), "appreci");});
test("appreciated -> appreci", function() {deepEqual( Stem("appreciated"), "appreci");});
test("appreciates -> appreci", function() {deepEqual( Stem("appreciates"), "appreci");});
test("appreciating -> appreci", function() {deepEqual( Stem("appreciating"), "appreci");});
test("appreciation -> appreci", function() {deepEqual( Stem("appreciation"), "appreci");});
test("apprehend -> apprehend", function() {deepEqual( Stem("apprehend"), "apprehend");});
test("apprehended -> apprehend", function() {deepEqual( Stem("apprehended"), "apprehend");});
test("apprehending -> apprehend", function() {deepEqual( Stem("apprehending"), "apprehend");});
test("apprehension -> apprehens", function() {deepEqual( Stem("apprehension"), "apprehens");});
test("apprehensions -> apprehens", function() {deepEqual( Stem("apprehensions"), "apprehens");});
test("apprehensive -> apprehens", function() {deepEqual( Stem("apprehensive"), "apprehens");});
test("apprentice -> apprentic", function() {deepEqual( Stem("apprentice"), "apprentic");});
test("apprenticed -> apprent", function() {deepEqual( Stem("apprenticed"), "apprent");});
test("apprentices -> apprentic", function() {deepEqual( Stem("apprentices"), "apprentic");});
test("apprenticeship -> apprenticeship", function() {deepEqual( Stem("apprenticeship"), "apprenticeship");});
test("apprise -> appris", function() {deepEqual( Stem("apprise"), "appris");});
test("apprised -> appris", function() {deepEqual( Stem("apprised"), "appris");});
test("apprising -> appris", function() {deepEqual( Stem("apprising"), "appris");});
test("approach -> approach", function() {deepEqual( Stem("approach"), "approach");});
test("approached -> approach", function() {deepEqual( Stem("approached"), "approach");});
test("approaches -> approach", function() {deepEqual( Stem("approaches"), "approach");});
test("approachin -> approachin", function() {deepEqual( Stem("approachin"), "approachin");});
test("approaching -> approach", function() {deepEqual( Stem("approaching"), "approach");});
test("approbation -> approb", function() {deepEqual( Stem("approbation"), "approb");});
test("appropriate -> appropri", function() {deepEqual( Stem("appropriate"), "appropri");});
test("appropriated -> appropri", function() {deepEqual( Stem("appropriated"), "appropri");});
test("appropriately -> appropri", function() {deepEqual( Stem("appropriately"), "appropri");});
test("appropriateness -> appropri", function() {deepEqual( Stem("appropriateness"), "appropri");});
test("appropriating -> appropri", function() {deepEqual( Stem("appropriating"), "appropri");});
test("appropriation -> appropri", function() {deepEqual( Stem("appropriation"), "appropri");});
test("approval -> approv", function() {deepEqual( Stem("approval"), "approv");});
test("approve -> approv", function() {deepEqual( Stem("approve"), "approv");});
test("approved -> approv", function() {deepEqual( Stem("approved"), "approv");});
test("approves -> approv", function() {deepEqual( Stem("approves"), "approv");});
test("approving -> approv", function() {deepEqual( Stem("approving"), "approv");});
test("approvingly -> approv", function() {deepEqual( Stem("approvingly"), "approv");});
test("approximate -> approxim", function() {deepEqual( Stem("approximate"), "approxim");});
test("approximately -> approxim", function() {deepEqual( Stem("approximately"), "approxim");});
test("appurtenance -> appurten", function() {deepEqual( Stem("appurtenance"), "appurten");});
test("appurtenances -> appurten", function() {deepEqual( Stem("appurtenances"), "appurten");});
test("apricots -> apricot", function() {deepEqual( Stem("apricots"), "apricot");});
test("april -> april", function() {deepEqual( Stem("april"), "april");});
test("apron -> apron", function() {deepEqual( Stem("apron"), "apron");});
test("aprons -> apron", function() {deepEqual( Stem("aprons"), "apron");});
test("apropos -> apropo", function() {deepEqual( Stem("apropos"), "apropo");});
test("apt -> apt", function() {deepEqual( Stem("apt"), "apt");});
test("aptenodytes -> aptenodyt", function() {deepEqual( Stem("aptenodytes"), "aptenodyt");});
test("apteryz -> apteryz", function() {deepEqual( Stem("apteryz"), "apteryz");});
test("aptitude -> aptitud", function() {deepEqual( Stem("aptitude"), "aptitud");});
test("aptly -> apt", function() {deepEqual( Stem("aptly"), "apt");});
test("aptness -> apt", function() {deepEqual( Stem("aptness"), "apt");});
test("aptnesses -> apt", function() {deepEqual( Stem("aptnesses"), "apt");});
test("aquatic -> aquat", function() {deepEqual( Stem("aquatic"), "aquat");});
test("aqueous -> aqueous", function() {deepEqual( Stem("aqueous"), "aqueous");});
test("aqui -> aqui", function() {deepEqual( Stem("aqui"), "aqui");});
test("aquiline -> aquilin", function() {deepEqual( Stem("aquiline"), "aquilin");});
test("aquilines -> aquilin", function() {deepEqual( Stem("aquilines"), "aquilin");});
test("aquinas -> aquina", function() {deepEqual( Stem("aquinas"), "aquina");});
test("ar -> ar", function() {deepEqual( Stem("ar"), "ar");});
test("arab -> arab", function() {deepEqual( Stem("arab"), "arab");});
test("arabian -> arabian", function() {deepEqual( Stem("arabian"), "arabian");});
test("arabic -> arab", function() {deepEqual( Stem("arabic"), "arab");});
test("arachnidae -> arachnida", function() {deepEqual( Stem("arachnidae"), "arachnida");});
test("arago -> arago", function() {deepEqual( Stem("arago"), "arago");});
test("araucanians -> araucanian", function() {deepEqual( Stem("araucanians"), "araucanian");});
test("araucarian -> araucarian", function() {deepEqual( Stem("araucarian"), "araucarian");});
test("arauco -> arauco", function() {deepEqual( Stem("arauco"), "arauco");});
test("arbiter -> arbit", function() {deepEqual( Stem("arbiter"), "arbit");});
test("arbitrarily -> arbitrarili", function() {deepEqual( Stem("arbitrarily"), "arbitrarili");});
test("arbitrary -> arbitrari", function() {deepEqual( Stem("arbitrary"), "arbitrari");});
test("arborescent -> arboresc", function() {deepEqual( Stem("arborescent"), "arboresc");});
test("arbour -> arbour", function() {deepEqual( Stem("arbour"), "arbour");});
test("arbours -> arbour", function() {deepEqual( Stem("arbours"), "arbour");});
test("arbutus -> arbutus", function() {deepEqual( Stem("arbutus"), "arbutus");});
test("arcade -> arcad", function() {deepEqual( Stem("arcade"), "arcad");});
test("arcades -> arcad", function() {deepEqual( Stem("arcades"), "arcad");});
test("arcadia -> arcadia", function() {deepEqual( Stem("arcadia"), "arcadia");});
test("arch -> arch", function() {deepEqual( Stem("arch"), "arch");});
test("archaeologists -> archaeologist", function() {deepEqual( Stem("archaeologists"), "archaeologist");});
test("archbishop -> archbishop", function() {deepEqual( Stem("archbishop"), "archbishop");});
test("archducal -> archduc", function() {deepEqual( Stem("archducal"), "archduc");});
test("arched -> arch", function() {deepEqual( Stem("arched"), "arch");});
test("archer -> archer", function() {deepEqual( Stem("archer"), "archer");});
test("archery -> archeri", function() {deepEqual( Stem("archery"), "archeri");});
test("arches -> arch", function() {deepEqual( Stem("arches"), "arch");});
test("archest -> archest", function() {deepEqual( Stem("archest"), "archest");});
test("archipelago -> archipelago", function() {deepEqual( Stem("archipelago"), "archipelago");});
test("archipelagoes -> archipelago", function() {deepEqual( Stem("archipelagoes"), "archipelago");});
test("architect -> architect", function() {deepEqual( Stem("architect"), "architect");});
test("architects -> architect", function() {deepEqual( Stem("architects"), "architect");});
test("architectural -> architectur", function() {deepEqual( Stem("architectural"), "architectur");});
test("architecture -> architectur", function() {deepEqual( Stem("architecture"), "architectur");});
test("archly -> arch", function() {deepEqual( Stem("archly"), "arch");});
test("archness -> arch", function() {deepEqual( Stem("archness"), "arch");});
test("archway -> archway", function() {deepEqual( Stem("archway"), "archway");});
test("archways -> archway", function() {deepEqual( Stem("archways"), "archway");});
test("arctic -> arctic", function() {deepEqual( Stem("arctic"), "arctic");});
test("ard -> ard", function() {deepEqual( Stem("ard"), "ard");});
test("ardent -> ardent", function() {deepEqual( Stem("ardent"), "ardent");});
test("ardently -> ardent", function() {deepEqual( Stem("ardently"), "ardent");});
test("ardness -> ard", function() {deepEqual( Stem("ardness"), "ard");});
test("ardour -> ardour", function() {deepEqual( Stem("ardour"), "ardour");});
test("ards -> ard", function() {deepEqual( Stem("ards"), "ard");});
test("arduous -> arduous", function() {deepEqual( Stem("arduous"), "arduous");});
test("are -> are", function() {deepEqual( Stem("are"), "are");});
test("area -> area", function() {deepEqual( Stem("area"), "area");});
test("aready -> areadi", function() {deepEqual( Stem("aready"), "areadi");});
test("areas -> area", function() {deepEqual( Stem("areas"), "area");});
test("areco -> areco", function() {deepEqual( Stem("areco"), "areco");});
test("aren -> aren", function() {deepEqual( Stem("aren"), "aren");});
test("arena -> arena", function() {deepEqual( Stem("arena"), "arena");});
test("arenales -> arenal", function() {deepEqual( Stem("arenales"), "arenal");});
test("arequipa -> arequipa", function() {deepEqual( Stem("arequipa"), "arequipa");});
test("arethusa -> arethusa", function() {deepEqual( Stem("arethusa"), "arethusa");});
test("argillaceo -> argillaceo", function() {deepEqual( Stem("argillaceo"), "argillaceo");});
test("argillaceous -> argillac", function() {deepEqual( Stem("argillaceous"), "argillac");});
test("argue -> argu", function() {deepEqual( Stem("argue"), "argu");});
test("argued -> argu", function() {deepEqual( Stem("argued"), "argu");});
test("argues -> argu", function() {deepEqual( Stem("argues"), "argu");});
test("arguing -> argu", function() {deepEqual( Stem("arguing"), "argu");});
test("argument -> argument", function() {deepEqual( Stem("argument"), "argument");});
test("argumentative -> argument", function() {deepEqual( Stem("argumentative"), "argument");});
test("arguments -> argument", function() {deepEqual( Stem("arguments"), "argument");});
test("argus -> argus", function() {deepEqual( Stem("argus"), "argus");});
test("argyroneta -> argyroneta", function() {deepEqual( Stem("argyroneta"), "argyroneta");});
test("ari -> ari", function() {deepEqual( Stem("ari"), "ari");});
test("arica -> arica", function() {deepEqual( Stem("arica"), "arica");});
test("arid -> arid", function() {deepEqual( Stem("arid"), "arid");});
test("aridity -> arid", function() {deepEqual( Stem("aridity"), "arid");});
test("ariel -> ariel", function() {deepEqual( Stem("ariel"), "ariel");});
test("aright -> aright", function() {deepEqual( Stem("aright"), "aright");});
test("arise -> aris", function() {deepEqual( Stem("arise"), "aris");});
test("arisen -> arisen", function() {deepEqual( Stem("arisen"), "arisen");});
test("arises -> aris", function() {deepEqual( Stem("arises"), "aris");});
test("arising -> aris", function() {deepEqual( Stem("arising"), "aris");});
test("aristides -> aristid", function() {deepEqual( Stem("aristides"), "aristid");});
test("aristocracy -> aristocraci", function() {deepEqual( Stem("aristocracy"), "aristocraci");});
test("aristocrat -> aristocrat", function() {deepEqual( Stem("aristocrat"), "aristocrat");});
test("aristocratic -> aristocrat", function() {deepEqual( Stem("aristocratic"), "aristocrat");});
test("aristocrats -> aristocrat", function() {deepEqual( Stem("aristocrats"), "aristocrat");});
test("arithmetic -> arithmet", function() {deepEqual( Stem("arithmetic"), "arithmet");});
test("arithmetical -> arithmet", function() {deepEqual( Stem("arithmetical"), "arithmet");});
test("arithmeticians -> arithmetician", function() {deepEqual( Stem("arithmeticians"), "arithmetician");});
test("ark -> ark", function() {deepEqual( Stem("ark"), "ark");});
test("arkady -> arkadi", function() {deepEqual( Stem("arkady"), "arkadi");});
test("arm -> arm", function() {deepEqual( Stem("arm"), "arm");});
test("armadillo -> armadillo", function() {deepEqual( Stem("armadillo"), "armadillo");});
test("armadilloes -> armadillo", function() {deepEqual( Stem("armadilloes"), "armadillo");});
test("armadillos -> armadillo", function() {deepEqual( Stem("armadillos"), "armadillo");});
test("armado -> armado", function() {deepEqual( Stem("armado"), "armado");});
test("armaments -> armament", function() {deepEqual( Stem("armaments"), "armament");});
test("armchair -> armchair", function() {deepEqual( Stem("armchair"), "armchair");});
test("armchairs -> armchair", function() {deepEqual( Stem("armchairs"), "armchair");});
test("armed -> arm", function() {deepEqual( Stem("armed"), "arm");});
test("armful -> arm", function() {deepEqual( Stem("armful"), "arm");});
test("armhole -> armhol", function() {deepEqual( Stem("armhole"), "armhol");});
test("armies -> armi", function() {deepEqual( Stem("armies"), "armi");});
test("arming -> arm", function() {deepEqual( Stem("arming"), "arm");});
test("armorial -> armori", function() {deepEqual( Stem("armorial"), "armori");});
test("armour -> armour", function() {deepEqual( Stem("armour"), "armour");});
test("armourer -> armour", function() {deepEqual( Stem("armourer"), "armour");});
test("arms -> arm", function() {deepEqual( Stem("arms"), "arm");});
test("armstrong -> armstrong", function() {deepEqual( Stem("armstrong"), "armstrong");});
test("army -> armi", function() {deepEqual( Stem("army"), "armi");});
test("arn -> arn", function() {deepEqual( Stem("arn"), "arn");});
test("arnold -> arnold", function() {deepEqual( Stem("arnold"), "arnold");});
test("arnong -> arnong", function() {deepEqual( Stem("arnong"), "arnong");});
test("aromatic -> aromat", function() {deepEqual( Stem("aromatic"), "aromat");});
test("arose -> aros", function() {deepEqual( Stem("arose"), "aros");});
test("around -> around", function() {deepEqual( Stem("around"), "around");});
test("arouse -> arous", function() {deepEqual( Stem("arouse"), "arous");});
test("aroused -> arous", function() {deepEqual( Stem("aroused"), "arous");});
test("arqueros -> arquero", function() {deepEqual( Stem("arqueros"), "arquero");});
test("arragonite -> arragonit", function() {deepEqual( Stem("arragonite"), "arragonit");});
test("arrange -> arrang", function() {deepEqual( Stem("arrange"), "arrang");});
test("arranged -> arrang", function() {deepEqual( Stem("arranged"), "arrang");});
test("arrangement -> arrang", function() {deepEqual( Stem("arrangement"), "arrang");});
test("arrangements -> arrang", function() {deepEqual( Stem("arrangements"), "arrang");});
test("arranges -> arrang", function() {deepEqual( Stem("arranges"), "arrang");});
test("arranging -> arrang", function() {deepEqual( Stem("arranging"), "arrang");});
test("arrant -> arrant", function() {deepEqual( Stem("arrant"), "arrant");});
test("array -> array", function() {deepEqual( Stem("array"), "array");});
test("arrayed -> array", function() {deepEqual( Stem("arrayed"), "array");});
test("arraying -> array", function() {deepEqual( Stem("arraying"), "array");});
test("arrear -> arrear", function() {deepEqual( Stem("arrear"), "arrear");});
test("arrears -> arrear", function() {deepEqual( Stem("arrears"), "arrear");});
test("arrecife -> arrecif", function() {deepEqual( Stem("arrecife"), "arrecif");});
test("arrest -> arrest", function() {deepEqual( Stem("arrest"), "arrest");});
test("arrested -> arrest", function() {deepEqual( Stem("arrested"), "arrest");});
test("arresting -> arrest", function() {deepEqual( Stem("arresting"), "arrest");});
test("arriero -> arriero", function() {deepEqual( Stem("arriero"), "arriero");});
test("arrival -> arriv", function() {deepEqual( Stem("arrival"), "arriv");});
test("arrivals -> arriv", function() {deepEqual( Stem("arrivals"), "arriv");});
test("arrive -> arriv", function() {deepEqual( Stem("arrive"), "arriv");});
test("arrived -> arriv", function() {deepEqual( Stem("arrived"), "arriv");});
test("arrives -> arriv", function() {deepEqual( Stem("arrives"), "arriv");});
test("arriving -> arriv", function() {deepEqual( Stem("arriving"), "arriv");});
test("arrngd -> arrngd", function() {deepEqual( Stem("arrngd"), "arrngd");});
test("arrogance -> arrog", function() {deepEqual( Stem("arrogance"), "arrog");});
test("arrogant -> arrog", function() {deepEqual( Stem("arrogant"), "arrog");});
test("arrow -> arrow", function() {deepEqual( Stem("arrow"), "arrow");});
test("arrowing -> arrow", function() {deepEqual( Stem("arrowing"), "arrow");});
test("arrows -> arrow", function() {deepEqual( Stem("arrows"), "arrow");});
test("arroyo -> arroyo", function() {deepEqual( Stem("arroyo"), "arroyo");});
test("arson -> arson", function() {deepEqual( Stem("arson"), "arson");});
test("art -> art", function() {deepEqual( Stem("art"), "art");});
test("arter -> arter", function() {deepEqual( Stem("arter"), "arter");});
test("artevelde -> arteveld", function() {deepEqual( Stem("artevelde"), "arteveld");});
test("artful -> art", function() {deepEqual( Stem("artful"), "art");});
test("artfully -> art", function() {deepEqual( Stem("artfully"), "art");});
test("artfulness -> art", function() {deepEqual( Stem("artfulness"), "art");});
test("arthur -> arthur", function() {deepEqual( Stem("arthur"), "arthur");});
test("arthurs -> arthur", function() {deepEqual( Stem("arthurs"), "arthur");});
test("artichoke -> artichok", function() {deepEqual( Stem("artichoke"), "artichok");});
test("artichokes -> artichok", function() {deepEqual( Stem("artichokes"), "artichok");});
test("article -> articl", function() {deepEqual( Stem("article"), "articl");});
test("articled -> articl", function() {deepEqual( Stem("articled"), "articl");});
test("articles -> articl", function() {deepEqual( Stem("articles"), "articl");});
test("articulate -> articul", function() {deepEqual( Stem("articulate"), "articul");});
test("articulated -> articul", function() {deepEqual( Stem("articulated"), "articul");});
test("articulately -> articul", function() {deepEqual( Stem("articulately"), "articul");});
test("articulating -> articul", function() {deepEqual( Stem("articulating"), "articul");});
test("artifice -> artific", function() {deepEqual( Stem("artifice"), "artific");});
test("artifices -> artific", function() {deepEqual( Stem("artifices"), "artific");});
test("artificial -> artifici", function() {deepEqual( Stem("artificial"), "artifici");});
test("artificially -> artifici", function() {deepEqual( Stem("artificially"), "artifici");});
test("artillery -> artilleri", function() {deepEqual( Stem("artillery"), "artilleri");});
test("artilleryman -> artilleryman", function() {deepEqual( Stem("artilleryman"), "artilleryman");});
test("artisan -> artisan", function() {deepEqual( Stem("artisan"), "artisan");});
test("artist -> artist", function() {deepEqual( Stem("artist"), "artist");});
test("artistic -> artist", function() {deepEqual( Stem("artistic"), "artist");});
test("artistical -> artist", function() {deepEqual( Stem("artistical"), "artist");});
test("artistically -> artist", function() {deepEqual( Stem("artistically"), "artist");});
test("artists -> artist", function() {deepEqual( Stem("artists"), "artist");});
test("artless -> artless", function() {deepEqual( Stem("artless"), "artless");});
test("artlessness -> artless", function() {deepEqual( Stem("artlessness"), "artless");});
test("arts -> art", function() {deepEqual( Stem("arts"), "art");});
test("arum -> arum", function() {deepEqual( Stem("arum"), "arum");});
test("as -> as", function() {deepEqual( Stem("as"), "as");});
test("ascal -> ascal", function() {deepEqual( Stem("ascal"), "ascal");});
test("ascend -> ascend", function() {deepEqual( Stem("ascend"), "ascend");});
test("ascendancy -> ascend", function() {deepEqual( Stem("ascendancy"), "ascend");});
test("ascendant -> ascend", function() {deepEqual( Stem("ascendant"), "ascend");});
test("ascended -> ascend", function() {deepEqual( Stem("ascended"), "ascend");});
test("ascendency -> ascend", function() {deepEqual( Stem("ascendency"), "ascend");});
test("ascending -> ascend", function() {deepEqual( Stem("ascending"), "ascend");});
test("ascends -> ascend", function() {deepEqual( Stem("ascends"), "ascend");});
test("ascension -> ascens", function() {deepEqual( Stem("ascension"), "ascens");});
test("ascent -> ascent", function() {deepEqual( Stem("ascent"), "ascent");});
test("ascertain -> ascertain", function() {deepEqual( Stem("ascertain"), "ascertain");});
test("ascertained -> ascertain", function() {deepEqual( Stem("ascertained"), "ascertain");});
test("ascertaining -> ascertain", function() {deepEqual( Stem("ascertaining"), "ascertain");});
test("ascetic -> ascet", function() {deepEqual( Stem("ascetic"), "ascet");});
test("ascidiae -> ascidia", function() {deepEqual( Stem("ascidiae"), "ascidia");});
test("ascribable -> ascrib", function() {deepEqual( Stem("ascribable"), "ascrib");});
test("ascribe -> ascrib", function() {deepEqual( Stem("ascribe"), "ascrib");});
test("ascribed -> ascrib", function() {deepEqual( Stem("ascribed"), "ascrib");});
test("ascribes -> ascrib", function() {deepEqual( Stem("ascribes"), "ascrib");});
test("ash -> ash", function() {deepEqual( Stem("ash"), "ash");});
test("ashamed -> asham", function() {deepEqual( Stem("ashamed"), "asham");});
test("asheamed -> asheam", function() {deepEqual( Stem("asheamed"), "asheam");});
test("ashes -> ash", function() {deepEqual( Stem("ashes"), "ash");});
test("ashore -> ashor", function() {deepEqual( Stem("ashore"), "ashor");});
test("ashy -> ashi", function() {deepEqual( Stem("ashy"), "ashi");});
test("asia -> asia", function() {deepEqual( Stem("asia"), "asia");});
test("asiat -> asiat", function() {deepEqual( Stem("asiat"), "asiat");});
test("asiatic -> asiat", function() {deepEqual( Stem("asiatic"), "asiat");});
test("asiatiques -> asiatiqu", function() {deepEqual( Stem("asiatiques"), "asiatiqu");});
test("aside -> asid", function() {deepEqual( Stem("aside"), "asid");});
test("ask -> ask", function() {deepEqual( Stem("ask"), "ask");});
test("askance -> askanc", function() {deepEqual( Stem("askance"), "askanc");});
test("askant -> askant", function() {deepEqual( Stem("askant"), "askant");});
test("asked -> ask", function() {deepEqual( Stem("asked"), "ask");});
test("askew -> askew", function() {deepEqual( Stem("askew"), "askew");});
test("asking -> ask", function() {deepEqual( Stem("asking"), "ask");});
test("askmg -> askmg", function() {deepEqual( Stem("askmg"), "askmg");});
test("asks -> ask", function() {deepEqual( Stem("asks"), "ask");});
test("aslant -> aslant", function() {deepEqual( Stem("aslant"), "aslant");});
test("asleep -> asleep", function() {deepEqual( Stem("asleep"), "asleep");});
test("asparagus -> asparagus", function() {deepEqual( Stem("asparagus"), "asparagus");});
test("aspect -> aspect", function() {deepEqual( Stem("aspect"), "aspect");});
test("aspects -> aspect", function() {deepEqual( Stem("aspects"), "aspect");});
test("aspen -> aspen", function() {deepEqual( Stem("aspen"), "aspen");});
test("asperity -> asper", function() {deepEqual( Stem("asperity"), "asper");});
test("asphalax -> asphalax", function() {deepEqual( Stem("asphalax"), "asphalax");});
test("aspirant -> aspir", function() {deepEqual( Stem("aspirant"), "aspir");});
test("aspirants -> aspir", function() {deepEqual( Stem("aspirants"), "aspir");});
test("aspirate -> aspir", function() {deepEqual( Stem("aspirate"), "aspir");});
test("aspirated -> aspir", function() {deepEqual( Stem("aspirated"), "aspir");});
test("aspiration -> aspir", function() {deepEqual( Stem("aspiration"), "aspir");});
test("aspirations -> aspir", function() {deepEqual( Stem("aspirations"), "aspir");});
test("aspire -> aspir", function() {deepEqual( Stem("aspire"), "aspir");});
test("aspired -> aspir", function() {deepEqual( Stem("aspired"), "aspir");});
test("aspires -> aspir", function() {deepEqual( Stem("aspires"), "aspir");});
test("aspiring -> aspir", function() {deepEqual( Stem("aspiring"), "aspir");});
test("ass -> ass", function() {deepEqual( Stem("ass"), "ass");});
test("assailant -> assail", function() {deepEqual( Stem("assailant"), "assail");});
test("assassin -> assassin", function() {deepEqual( Stem("assassin"), "assassin");});
test("assassinating -> assassin", function() {deepEqual( Stem("assassinating"), "assassin");});
test("assault -> assault", function() {deepEqual( Stem("assault"), "assault");});
test("assaulted -> assault", function() {deepEqual( Stem("assaulted"), "assault");});
test("assaults -> assault", function() {deepEqual( Stem("assaults"), "assault");});
test("assay -> assay", function() {deepEqual( Stem("assay"), "assay");});
test("assayer -> assay", function() {deepEqual( Stem("assayer"), "assay");});
test("assemblage -> assemblag", function() {deepEqual( Stem("assemblage"), "assemblag");});
test("assemble -> assembl", function() {deepEqual( Stem("assemble"), "assembl");});
test("assembled -> assembl", function() {deepEqual( Stem("assembled"), "assembl");});
test("assembles -> assembl", function() {deepEqual( Stem("assembles"), "assembl");});
test("assemblies -> assembl", function() {deepEqual( Stem("assemblies"), "assembl");});
test("assembling -> assembl", function() {deepEqual( Stem("assembling"), "assembl");});
test("assembly -> assembl", function() {deepEqual( Stem("assembly"), "assembl");});
test("assent -> assent", function() {deepEqual( Stem("assent"), "assent");});
test("assented -> assent", function() {deepEqual( Stem("assented"), "assent");});
test("assenting -> assent", function() {deepEqual( Stem("assenting"), "assent");});
test("assents -> assent", function() {deepEqual( Stem("assents"), "assent");});
test("assert -> assert", function() {deepEqual( Stem("assert"), "assert");});
test("asserted -> assert", function() {deepEqual( Stem("asserted"), "assert");});
test("asserting -> assert", function() {deepEqual( Stem("asserting"), "assert");});
test("assertion -> assert", function() {deepEqual( Stem("assertion"), "assert");});
test("assertions -> assert", function() {deepEqual( Stem("assertions"), "assert");});
test("asserts -> assert", function() {deepEqual( Stem("asserts"), "assert");});
test("asses -> ass", function() {deepEqual( Stem("asses"), "ass");});
test("assessor -> assessor", function() {deepEqual( Stem("assessor"), "assessor");});
test("asset -> asset", function() {deepEqual( Stem("asset"), "asset");});
test("assets -> asset", function() {deepEqual( Stem("assets"), "asset");});
test("asseverations -> assever", function() {deepEqual( Stem("asseverations"), "assever");});
test("assez -> assez", function() {deepEqual( Stem("assez"), "assez");});
test("assiduity -> assidu", function() {deepEqual( Stem("assiduity"), "assidu");});
test("assiduous -> assidu", function() {deepEqual( Stem("assiduous"), "assidu");});
test("assiduously -> assidu", function() {deepEqual( Stem("assiduously"), "assidu");});
test("assign -> assign", function() {deepEqual( Stem("assign"), "assign");});
test("assignable -> assign", function() {deepEqual( Stem("assignable"), "assign");});
test("assigned -> assign", function() {deepEqual( Stem("assigned"), "assign");});
test("assignment -> assign", function() {deepEqual( Stem("assignment"), "assign");});
test("assigns -> assign", function() {deepEqual( Stem("assigns"), "assign");});
test("assimilation -> assimil", function() {deepEqual( Stem("assimilation"), "assimil");});
test("assist -> assist", function() {deepEqual( Stem("assist"), "assist");});
test("assistance -> assist", function() {deepEqual( Stem("assistance"), "assist");});
test("assistant -> assist", function() {deepEqual( Stem("assistant"), "assist");});
test("assistants -> assist", function() {deepEqual( Stem("assistants"), "assist");});
test("assisted -> assist", function() {deepEqual( Stem("assisted"), "assist");});
test("assisting -> assist", function() {deepEqual( Stem("assisting"), "assist");});
test("assists -> assist", function() {deepEqual( Stem("assists"), "assist");});
test("assize -> assiz", function() {deepEqual( Stem("assize"), "assiz");});
test("assizes -> assiz", function() {deepEqual( Stem("assizes"), "assiz");});
test("assoc -> assoc", function() {deepEqual( Stem("assoc"), "assoc");});
test("associate -> associ", function() {deepEqual( Stem("associate"), "associ");});
test("associated -> associ", function() {deepEqual( Stem("associated"), "associ");});
test("associates -> associ", function() {deepEqual( Stem("associates"), "associ");});
test("associating -> associ", function() {deepEqual( Stem("associating"), "associ");});
test("association -> associ", function() {deepEqual( Stem("association"), "associ");});
test("associations -> associ", function() {deepEqual( Stem("associations"), "associ");});
test("assoiled -> assoil", function() {deepEqual( Stem("assoiled"), "assoil");});
test("assort -> assort", function() {deepEqual( Stem("assort"), "assort");});
test("assorted -> assort", function() {deepEqual( Stem("assorted"), "assort");});
test("assortment -> assort", function() {deepEqual( Stem("assortment"), "assort");});
test("assume -> assum", function() {deepEqual( Stem("assume"), "assum");});
test("assumed -> assum", function() {deepEqual( Stem("assumed"), "assum");});
test("assumes -> assum", function() {deepEqual( Stem("assumes"), "assum");});
test("assuming -> assum", function() {deepEqual( Stem("assuming"), "assum");});
test("assumption -> assumpt", function() {deepEqual( Stem("assumption"), "assumpt");});
test("assumptions -> assumpt", function() {deepEqual( Stem("assumptions"), "assumpt");});
test("assurance -> assur", function() {deepEqual( Stem("assurance"), "assur");});
test("assurances -> assur", function() {deepEqual( Stem("assurances"), "assur");});
test("assure -> assur", function() {deepEqual( Stem("assure"), "assur");});
test("assured -> assur", function() {deepEqual( Stem("assured"), "assur");});
test("assuredly -> assur", function() {deepEqual( Stem("assuredly"), "assur");});
test("assures -> assur", function() {deepEqual( Stem("assures"), "assur");});
test("assuring -> assur", function() {deepEqual( Stem("assuring"), "assur");});
test("astelia -> astelia", function() {deepEqual( Stem("astelia"), "astelia");});
test("astern -> astern", function() {deepEqual( Stem("astern"), "astern");});
test("asthma -> asthma", function() {deepEqual( Stem("asthma"), "asthma");});
test("astir -> astir", function() {deepEqual( Stem("astir"), "astir");});
test("astley -> astley", function() {deepEqual( Stem("astley"), "astley");});
test("astonish -> astonish", function() {deepEqual( Stem("astonish"), "astonish");});
test("astonished -> astonish", function() {deepEqual( Stem("astonished"), "astonish");});
test("astonishes -> astonish", function() {deepEqual( Stem("astonishes"), "astonish");});
test("astonishinent -> astonishin", function() {deepEqual( Stem("astonishinent"), "astonishin");});
test("astonishing -> astonish", function() {deepEqual( Stem("astonishing"), "astonish");});
test("astonishingly -> astonish", function() {deepEqual( Stem("astonishingly"), "astonish");});
test("astonishment -> astonish", function() {deepEqual( Stem("astonishment"), "astonish");});
test("astounded -> astound", function() {deepEqual( Stem("astounded"), "astound");});
test("astounding -> astound", function() {deepEqual( Stem("astounding"), "astound");});
test("astray -> astray", function() {deepEqual( Stem("astray"), "astray");});
test("astride -> astrid", function() {deepEqual( Stem("astride"), "astrid");});
test("astringent -> astring", function() {deepEqual( Stem("astringent"), "astring");});
test("astrolabe -> astrolab", function() {deepEqual( Stem("astrolabe"), "astrolab");});
test("astronomical -> astronom", function() {deepEqual( Stem("astronomical"), "astronom");});
test("astronomy -> astronomi", function() {deepEqual( Stem("astronomy"), "astronomi");});
test("astute -> astut", function() {deepEqual( Stem("astute"), "astut");});
test("asunder -> asund", function() {deepEqual( Stem("asunder"), "asund");});
test("asylum -> asylum", function() {deepEqual( Stem("asylum"), "asylum");});
test("asylums -> asylum", function() {deepEqual( Stem("asylums"), "asylum");});
test("at -> at", function() {deepEqual( Stem("at"), "at");});
test("atacama -> atacama", function() {deepEqual( Stem("atacama"), "atacama");});
test("ate -> ate", function() {deepEqual( Stem("ate"), "ate");});
test("ated -> ate", function() {deepEqual( Stem("ated"), "ate");});
test("atheists -> atheist", function() {deepEqual( Stem("atheists"), "atheist");});
test("athenaeum -> athenaeum", function() {deepEqual( Stem("athenaeum"), "athenaeum");});
test("athene -> athen", function() {deepEqual( Stem("athene"), "athen");});
test("athenian -> athenian", function() {deepEqual( Stem("athenian"), "athenian");});
test("athletic -> athlet", function() {deepEqual( Stem("athletic"), "athlet");});
test("athos -> atho", function() {deepEqual( Stem("athos"), "atho");});
test("athwart -> athwart", function() {deepEqual( Stem("athwart"), "athwart");});
test("atlantic -> atlant", function() {deepEqual( Stem("atlantic"), "atlant");});
test("atmosphere -> atmospher", function() {deepEqual( Stem("atmosphere"), "atmospher");});
test("atmospheric -> atmospher", function() {deepEqual( Stem("atmospheric"), "atmospher");});
test("atoll -> atol", function() {deepEqual( Stem("atoll"), "atol");});
test("atollons -> atollon", function() {deepEqual( Stem("atollons"), "atollon");});
test("atolls -> atol", function() {deepEqual( Stem("atolls"), "atol");});
test("atom -> atom", function() {deepEqual( Stem("atom"), "atom");});
test("atoms -> atom", function() {deepEqual( Stem("atoms"), "atom");});
test("atone -> aton", function() {deepEqual( Stem("atone"), "aton");});
test("atonement -> aton", function() {deepEqual( Stem("atonement"), "aton");});
test("atra -> atra", function() {deepEqual( Stem("atra"), "atra");});
test("atratus -> atratus", function() {deepEqual( Stem("atratus"), "atratus");});
test("atrocious -> atroci", function() {deepEqual( Stem("atrocious"), "atroci");});
test("atrocities -> atroc", function() {deepEqual( Stem("atrocities"), "atroc");});
test("attach -> attach", function() {deepEqual( Stem("attach"), "attach");});
test("attache -> attach", function() {deepEqual( Stem("attache"), "attach");});
test("attached -> attach", function() {deepEqual( Stem("attached"), "attach");});
test("attaches -> attach", function() {deepEqual( Stem("attaches"), "attach");});
test("attaching -> attach", function() {deepEqual( Stem("attaching"), "attach");});
test("attachment -> attach", function() {deepEqual( Stem("attachment"), "attach");});
test("attachments -> attach", function() {deepEqual( Stem("attachments"), "attach");});
test("attack -> attack", function() {deepEqual( Stem("attack"), "attack");});
test("attacked -> attack", function() {deepEqual( Stem("attacked"), "attack");});
test("attacking -> attack", function() {deepEqual( Stem("attacking"), "attack");});
test("attacks -> attack", function() {deepEqual( Stem("attacks"), "attack");});
test("attagis -> attagi", function() {deepEqual( Stem("attagis"), "attagi");});
test("attain -> attain", function() {deepEqual( Stem("attain"), "attain");});
test("attainable -> attain", function() {deepEqual( Stem("attainable"), "attain");});
test("attained -> attain", function() {deepEqual( Stem("attained"), "attain");});
test("attaining -> attain", function() {deepEqual( Stem("attaining"), "attain");});
test("attainment -> attain", function() {deepEqual( Stem("attainment"), "attain");});
test("attainments -> attain", function() {deepEqual( Stem("attainments"), "attain");});
test("attains -> attain", function() {deepEqual( Stem("attains"), "attain");});
test("attempt -> attempt", function() {deepEqual( Stem("attempt"), "attempt");});
test("attempted -> attempt", function() {deepEqual( Stem("attempted"), "attempt");});
test("attempting -> attempt", function() {deepEqual( Stem("attempting"), "attempt");});
test("attempts -> attempt", function() {deepEqual( Stem("attempts"), "attempt");});
test("attend -> attend", function() {deepEqual( Stem("attend"), "attend");});
test("attendance -> attend", function() {deepEqual( Stem("attendance"), "attend");});
test("attendances -> attend", function() {deepEqual( Stem("attendances"), "attend");});
test("attendant -> attend", function() {deepEqual( Stem("attendant"), "attend");});
test("attendants -> attend", function() {deepEqual( Stem("attendants"), "attend");});
test("attended -> attend", function() {deepEqual( Stem("attended"), "attend");});
test("attending -> attend", function() {deepEqual( Stem("attending"), "attend");});
test("attends -> attend", function() {deepEqual( Stem("attends"), "attend");});
test("attention -> attent", function() {deepEqual( Stem("attention"), "attent");});
test("attentions -> attent", function() {deepEqual( Stem("attentions"), "attent");});
test("attentive -> attent", function() {deepEqual( Stem("attentive"), "attent");});
test("attentively -> attent", function() {deepEqual( Stem("attentively"), "attent");});
test("attenuated -> attenu", function() {deepEqual( Stem("attenuated"), "attenu");});
test("attest -> attest", function() {deepEqual( Stem("attest"), "attest");});
test("attested -> attest", function() {deepEqual( Stem("attested"), "attest");});
test("attesting -> attest", function() {deepEqual( Stem("attesting"), "attest");});
test("attic -> attic", function() {deepEqual( Stem("attic"), "attic");});
test("attics -> attic", function() {deepEqual( Stem("attics"), "attic");});
test("attire -> attir", function() {deepEqual( Stem("attire"), "attir");});
test("attired -> attir", function() {deepEqual( Stem("attired"), "attir");});
test("attitude -> attitud", function() {deepEqual( Stem("attitude"), "attitud");});
test("attitudes -> attitud", function() {deepEqual( Stem("attitudes"), "attitud");});
test("attorney -> attorney", function() {deepEqual( Stem("attorney"), "attorney");});
test("attorneys -> attorney", function() {deepEqual( Stem("attorneys"), "attorney");});
test("attract -> attract", function() {deepEqual( Stem("attract"), "attract");});
test("attracted -> attract", function() {deepEqual( Stem("attracted"), "attract");});
test("attracting -> attract", function() {deepEqual( Stem("attracting"), "attract");});
test("attraction -> attract", function() {deepEqual( Stem("attraction"), "attract");});
test("attractions -> attract", function() {deepEqual( Stem("attractions"), "attract");});
test("attractive -> attract", function() {deepEqual( Stem("attractive"), "attract");});
test("attracts -> attract", function() {deepEqual( Stem("attracts"), "attract");});
test("attrapped -> attrap", function() {deepEqual( Stem("attrapped"), "attrap");});
test("attributable -> attribut", function() {deepEqual( Stem("attributable"), "attribut");});
test("attribute -> attribut", function() {deepEqual( Stem("attribute"), "attribut");});
test("attributed -> attribut", function() {deepEqual( Stem("attributed"), "attribut");});
test("attributes -> attribut", function() {deepEqual( Stem("attributes"), "attribut");});
test("attrition -> attrit", function() {deepEqual( Stem("attrition"), "attrit");});
test("atwater -> atwat", function() {deepEqual( Stem("atwater"), "atwat");});
test("au -> au", function() {deepEqual( Stem("au"), "au");});
test("auckland -> auckland", function() {deepEqual( Stem("auckland"), "auckland");});
test("auction -> auction", function() {deepEqual( Stem("auction"), "auction");});
test("aud -> aud", function() {deepEqual( Stem("aud"), "aud");});
test("audacious -> audaci", function() {deepEqual( Stem("audacious"), "audaci");});
test("audaciously -> audaci", function() {deepEqual( Stem("audaciously"), "audaci");});
test("audacity -> audac", function() {deepEqual( Stem("audacity"), "audac");});
test("audible -> audibl", function() {deepEqual( Stem("audible"), "audibl");});
test("audibly -> audibl", function() {deepEqual( Stem("audibly"), "audibl");});
test("audience -> audienc", function() {deepEqual( Stem("audience"), "audienc");});
test("audiences -> audienc", function() {deepEqual( Stem("audiences"), "audienc");});
test("auditor -> auditor", function() {deepEqual( Stem("auditor"), "auditor");});
test("auditors -> auditor", function() {deepEqual( Stem("auditors"), "auditor");});
test("audubon -> audubon", function() {deepEqual( Stem("audubon"), "audubon");});
test("aug -> aug", function() {deepEqual( Stem("aug"), "aug");});
test("augean -> augean", function() {deepEqual( Stem("augean"), "augean");});
test("augen -> augen", function() {deepEqual( Stem("augen"), "augen");});
test("aught -> aught", function() {deepEqual( Stem("aught"), "aught");});
test("augment -> augment", function() {deepEqual( Stem("augment"), "augment");});
test("augmentation -> augment", function() {deepEqual( Stem("augmentation"), "augment");});
test("augmented -> augment", function() {deepEqual( Stem("augmented"), "augment");});
test("augmenting -> augment", function() {deepEqual( Stem("augmenting"), "augment");});
test("augments -> augment", function() {deepEqual( Stem("augments"), "augment");});
test("augur -> augur", function() {deepEqual( Stem("augur"), "augur");});
test("augured -> augur", function() {deepEqual( Stem("augured"), "augur");});
test("auguries -> auguri", function() {deepEqual( Stem("auguries"), "auguri");});
test("augurs -> augur", function() {deepEqual( Stem("augurs"), "augur");});
test("august -> august", function() {deepEqual( Stem("august"), "august");});
test("augusta -> augusta", function() {deepEqual( Stem("augusta"), "augusta");});
test("auguste -> august", function() {deepEqual( Stem("auguste"), "august");});
test("augustus -> augustus", function() {deepEqual( Stem("augustus"), "augustus");});
test("auk -> auk", function() {deepEqual( Stem("auk"), "auk");});
test("auks -> auk", function() {deepEqual( Stem("auks"), "auk");});
test("auld -> auld", function() {deepEqual( Stem("auld"), "auld");});
test("aunt -> aunt", function() {deepEqual( Stem("aunt"), "aunt");});
test("aunts -> aunt", function() {deepEqual( Stem("aunts"), "aunt");});
test("aura -> aura", function() {deepEqual( Stem("aura"), "aura");});
test("aureole -> aureol", function() {deepEqual( Stem("aureole"), "aureol");});
test("auriferous -> aurifer", function() {deepEqual( Stem("auriferous"), "aurifer");});
test("aus -> aus", function() {deepEqual( Stem("aus"), "aus");});
test("auspices -> auspic", function() {deepEqual( Stem("auspices"), "auspic");});
test("auspicious -> auspici", function() {deepEqual( Stem("auspicious"), "auspici");});
test("austell -> austel", function() {deepEqual( Stem("austell"), "austel");});
test("austere -> auster", function() {deepEqual( Stem("austere"), "auster");});
test("austerity -> auster", function() {deepEqual( Stem("austerity"), "auster");});
test("australes -> austral", function() {deepEqual( Stem("australes"), "austral");});
test("australey -> australey", function() {deepEqual( Stem("australey"), "australey");});
test("australia -> australia", function() {deepEqual( Stem("australia"), "australia");});
test("australian -> australian", function() {deepEqual( Stem("australian"), "australian");});
test("australians -> australian", function() {deepEqual( Stem("australians"), "australian");});
test("austrian -> austrian", function() {deepEqual( Stem("austrian"), "austrian");});
test("authentic -> authent", function() {deepEqual( Stem("authentic"), "authent");});
test("authentically -> authent", function() {deepEqual( Stem("authentically"), "authent");});
test("authenticated -> authent", function() {deepEqual( Stem("authenticated"), "authent");});
test("authenticity -> authent", function() {deepEqual( Stem("authenticity"), "authent");});
test("author -> author", function() {deepEqual( Stem("author"), "author");});
test("authoress -> authoress", function() {deepEqual( Stem("authoress"), "authoress");});
test("authoritative -> authorit", function() {deepEqual( Stem("authoritative"), "authorit");});
test("authoritatively -> authorit", function() {deepEqual( Stem("authoritatively"), "authorit");});
test("authorities -> author", function() {deepEqual( Stem("authorities"), "author");});
test("authority -> author", function() {deepEqual( Stem("authority"), "author");});
test("authorized -> author", function() {deepEqual( Stem("authorized"), "author");});
test("authors -> author", function() {deepEqual( Stem("authors"), "author");});
test("authorship -> authorship", function() {deepEqual( Stem("authorship"), "authorship");});
test("autobiographies -> autobiographi", function() {deepEqual( Stem("autobiographies"), "autobiographi");});
test("autocratic -> autocrat", function() {deepEqual( Stem("autocratic"), "autocrat");});
test("autograph -> autograph", function() {deepEqual( Stem("autograph"), "autograph");});
test("autographs -> autograph", function() {deepEqual( Stem("autographs"), "autograph");});
test("automaton -> automaton", function() {deepEqual( Stem("automaton"), "automaton");});
test("autour -> autour", function() {deepEqual( Stem("autour"), "autour");});
test("autre -> autr", function() {deepEqual( Stem("autre"), "autr");});
test("autres -> autr", function() {deepEqual( Stem("autres"), "autr");});
test("autumn -> autumn", function() {deepEqual( Stem("autumn"), "autumn");});
test("autumnal -> autumn", function() {deepEqual( Stem("autumnal"), "autumn");});
test("auvergne -> auvergn", function() {deepEqual( Stem("auvergne"), "auvergn");});
test("aux -> aux", function() {deepEqual( Stem("aux"), "aux");});
test("auxiliaries -> auxiliari", function() {deepEqual( Stem("auxiliaries"), "auxiliari");});
test("auxiliary -> auxiliari", function() {deepEqual( Stem("auxiliary"), "auxiliari");});
test("ava -> ava", function() {deepEqual( Stem("ava"), "ava");});
test("avail -> avail", function() {deepEqual( Stem("avail"), "avail");});
test("available -> avail", function() {deepEqual( Stem("available"), "avail");});
test("availed -> avail", function() {deepEqual( Stem("availed"), "avail");});
test("availing -> avail", function() {deepEqual( Stem("availing"), "avail");});
test("avails -> avail", function() {deepEqual( Stem("avails"), "avail");});
test("avarice -> avaric", function() {deepEqual( Stem("avarice"), "avaric");});
test("avaricious -> avarici", function() {deepEqual( Stem("avaricious"), "avarici");});
test("avatar -> avatar", function() {deepEqual( Stem("avatar"), "avatar");});
test("avatars -> avatar", function() {deepEqual( Stem("avatars"), "avatar");});
test("avaunt -> avaunt", function() {deepEqual( Stem("avaunt"), "avaunt");});
test("avdotya -> avdotya", function() {deepEqual( Stem("avdotya"), "avdotya");});
test("ave -> ave", function() {deepEqual( Stem("ave"), "ave");});
test("avenge -> aveng", function() {deepEqual( Stem("avenge"), "aveng");});
test("avenger -> aveng", function() {deepEqual( Stem("avenger"), "aveng");});
test("avenges -> aveng", function() {deepEqual( Stem("avenges"), "aveng");});
test("avenging -> aveng", function() {deepEqual( Stem("avenging"), "aveng");});
test("avenue -> avenu", function() {deepEqual( Stem("avenue"), "avenu");});
test("avenues -> avenu", function() {deepEqual( Stem("avenues"), "avenu");});
test("average -> averag", function() {deepEqual( Stem("average"), "averag");});
test("averaging -> averag", function() {deepEqual( Stem("averaging"), "averag");});
test("averred -> aver", function() {deepEqual( Stem("averred"), "aver");});
test("averring -> aver", function() {deepEqual( Stem("averring"), "aver");});
test("avers -> aver", function() {deepEqual( Stem("avers"), "aver");});
test("averse -> avers", function() {deepEqual( Stem("averse"), "avers");});
test("aversion -> avers", function() {deepEqual( Stem("aversion"), "avers");});
test("aversions -> avers", function() {deepEqual( Stem("aversions"), "avers");});
test("avert -> avert", function() {deepEqual( Stem("avert"), "avert");});
test("averted -> avert", function() {deepEqual( Stem("averted"), "avert");});
test("averting -> avert", function() {deepEqual( Stem("averting"), "avert");});
test("avestruz -> avestruz", function() {deepEqual( Stem("avestruz"), "avestruz");});
test("aviary -> aviari", function() {deepEqual( Stem("aviary"), "aviari");});
test("avicularia -> avicularia", function() {deepEqual( Stem("avicularia"), "avicularia");});
test("avidity -> avid", function() {deepEqual( Stem("avidity"), "avid");});
test("avignon -> avignon", function() {deepEqual( Stem("avignon"), "avignon");});
test("avocations -> avoc", function() {deepEqual( Stem("avocations"), "avoc");});
test("avoid -> avoid", function() {deepEqual( Stem("avoid"), "avoid");});
test("avoidable -> avoid", function() {deepEqual( Stem("avoidable"), "avoid");});
test("avoidance -> avoid", function() {deepEqual( Stem("avoidance"), "avoid");});
test("avoided -> avoid", function() {deepEqual( Stem("avoided"), "avoid");});
test("avoiding -> avoid", function() {deepEqual( Stem("avoiding"), "avoid");});
test("avoids -> avoid", function() {deepEqual( Stem("avoids"), "avoid");});
test("avoient -> avoient", function() {deepEqual( Stem("avoient"), "avoient");});
test("avons -> avon", function() {deepEqual( Stem("avons"), "avon");});
test("avow -> avow", function() {deepEqual( Stem("avow"), "avow");});
test("avowal -> avow", function() {deepEqual( Stem("avowal"), "avow");});
test("avowed -> avow", function() {deepEqual( Stem("avowed"), "avow");});
test("avowedly -> avow", function() {deepEqual( Stem("avowedly"), "avow");});
test("avowing -> avow", function() {deepEqual( Stem("avowing"), "avow");});
test("awa -> awa", function() {deepEqual( Stem("awa"), "awa");});
test("await -> await", function() {deepEqual( Stem("await"), "await");});
test("awaited -> await", function() {deepEqual( Stem("awaited"), "await");});
test("awaiting -> await", function() {deepEqual( Stem("awaiting"), "await");});
test("awaits -> await", function() {deepEqual( Stem("awaits"), "await");});
test("awake -> awak", function() {deepEqual( Stem("awake"), "awak");});
test("awaken -> awaken", function() {deepEqual( Stem("awaken"), "awaken");});
test("awakened -> awaken", function() {deepEqual( Stem("awakened"), "awaken");});
test("awakening -> awaken", function() {deepEqual( Stem("awakening"), "awaken");});
test("awakens -> awaken", function() {deepEqual( Stem("awakens"), "awaken");});
test("awakes -> awak", function() {deepEqual( Stem("awakes"), "awak");});
test("awaking -> awak", function() {deepEqual( Stem("awaking"), "awak");});
test("aware -> awar", function() {deepEqual( Stem("aware"), "awar");});
test("away -> away", function() {deepEqual( Stem("away"), "away");});
test("awe -> awe", function() {deepEqual( Stem("awe"), "awe");});
test("awed -> awe", function() {deepEqual( Stem("awed"), "awe");});
test("awful -> aw", function() {deepEqual( Stem("awful"), "aw");});
test("awfullest -> awfullest", function() {deepEqual( Stem("awfullest"), "awfullest");});
test("awfully -> aw", function() {deepEqual( Stem("awfully"), "aw");});
test("awhile -> awhil", function() {deepEqual( Stem("awhile"), "awhil");});
test("awhiles -> awhil", function() {deepEqual( Stem("awhiles"), "awhil");});
test("awkward -> awkward", function() {deepEqual( Stem("awkward"), "awkward");});
test("awkwardly -> awkward", function() {deepEqual( Stem("awkwardly"), "awkward");});
test("awkwardness -> awkward", function() {deepEqual( Stem("awkwardness"), "awkward");});
test("awl -> awl", function() {deepEqual( Stem("awl"), "awl");});
test("awoided -> awoid", function() {deepEqual( Stem("awoided"), "awoid");});
test("awoke -> awok", function() {deepEqual( Stem("awoke"), "awok");});
test("awry -> awri", function() {deepEqual( Stem("awry"), "awri");});
test("axe -> axe", function() {deepEqual( Stem("axe"), "axe");});
test("axes -> axe", function() {deepEqual( Stem("axes"), "axe");});
test("axiom -> axiom", function() {deepEqual( Stem("axiom"), "axiom");});
test("axis -> axi", function() {deepEqual( Stem("axis"), "axi");});
test("axles -> axl", function() {deepEqual( Stem("axles"), "axl");});
test("ay -> ay", function() {deepEqual( Stem("ay"), "ay");});
test("ayant -> ayant", function() {deepEqual( Stem("ayant"), "ayant");});
test("aye -> aye", function() {deepEqual( Stem("aye"), "aye");});
test("ayres -> ayr", function() {deepEqual( Stem("ayres"), "ayr");});
test("azalea -> azalea", function() {deepEqual( Stem("azalea"), "azalea");});
test("azara -> azara", function() {deepEqual( Stem("azara"), "azara");});
test("azarae -> azara", function() {deepEqual( Stem("azarae"), "azara");});
test("azingly -> aze", function() {deepEqual( Stem("azingly"), "aze");});
test("azores -> azor", function() {deepEqual( Stem("azores"), "azor");});
test("azucar -> azucar", function() {deepEqual( Stem("azucar"), "azucar");});
test("azure -> azur", function() {deepEqual( Stem("azure"), "azur");});
test("b -> b", function() {deepEqual( Stem("b"), "b");});
test("ba -> ba", function() {deepEqual( Stem("ba"), "ba");});
test("babble -> babbl", function() {deepEqual( Stem("babble"), "babbl");});
test("babbled -> babbl", function() {deepEqual( Stem("babbled"), "babbl");});
test("babbling -> babbl", function() {deepEqual( Stem("babbling"), "babbl");});
test("babby -> babbi", function() {deepEqual( Stem("babby"), "babbi");});
test("babe -> babe", function() {deepEqual( Stem("babe"), "babe");});
test("babel -> babel", function() {deepEqual( Stem("babel"), "babel");});
test("babes -> babe", function() {deepEqual( Stem("babes"), "babe");});
test("babies -> babi", function() {deepEqual( Stem("babies"), "babi");});
test("baboon -> baboon", function() {deepEqual( Stem("baboon"), "baboon");});
test("babushkin -> babushkin", function() {deepEqual( Stem("babushkin"), "babushkin");});
test("baby -> babi", function() {deepEqual( Stem("baby"), "babi");});
test("babylon -> babylon", function() {deepEqual( Stem("babylon"), "babylon");});
test("bac -> bac", function() {deepEqual( Stem("bac"), "bac");});
test("bacchus -> bacchus", function() {deepEqual( Stem("bacchus"), "bacchus");});
test("bachapins -> bachapin", function() {deepEqual( Stem("bachapins"), "bachapin");});
test("bachelor -> bachelor", function() {deepEqual( Stem("bachelor"), "bachelor");});
test("bachelorship -> bachelorship", function() {deepEqual( Stem("bachelorship"), "bachelorship");});
test("bachman -> bachman", function() {deepEqual( Stem("bachman"), "bachman");});
test("back -> back", function() {deepEqual( Stem("back"), "back");});
test("backbone -> backbon", function() {deepEqual( Stem("backbone"), "backbon");});
test("backed -> back", function() {deepEqual( Stem("backed"), "back");});
test("backer -> backer", function() {deepEqual( Stem("backer"), "backer");});
test("backers -> backer", function() {deepEqual( Stem("backers"), "backer");});
test("backgammon -> backgammon", function() {deepEqual( Stem("backgammon"), "backgammon");});
test("background -> background", function() {deepEqual( Stem("background"), "background");});
test("backing -> back", function() {deepEqual( Stem("backing"), "back");});
test("backs -> back", function() {deepEqual( Stem("backs"), "back");});
test("backsheesh -> backsheesh", function() {deepEqual( Stem("backsheesh"), "backsheesh");});
test("backslidings -> backslid", function() {deepEqual( Stem("backslidings"), "backslid");});
test("backward -> backward", function() {deepEqual( Stem("backward"), "backward");});
test("backwardness -> backward", function() {deepEqual( Stem("backwardness"), "backward");});
test("backwards -> backward", function() {deepEqual( Stem("backwards"), "backward");});
test("backyard -> backyard", function() {deepEqual( Stem("backyard"), "backyard");});
test("bacon -> bacon", function() {deepEqual( Stem("bacon"), "bacon");});
test("bad -> bad", function() {deepEqual( Stem("bad"), "bad");});
test("bade -> bade", function() {deepEqual( Stem("bade"), "bade");});
test("baden -> baden", function() {deepEqual( Stem("baden"), "baden");});
test("badge -> badg", function() {deepEqual( Stem("badge"), "badg");});
test("badger -> badger", function() {deepEqual( Stem("badger"), "badger");});
test("badgered -> badger", function() {deepEqual( Stem("badgered"), "badger");});
test("badges -> badg", function() {deepEqual( Stem("badges"), "badg");});
test("badinage -> badinag", function() {deepEqual( Stem("badinage"), "badinag");});
test("badly -> bad", function() {deepEqual( Stem("badly"), "bad");});
test("badness -> bad", function() {deepEqual( Stem("badness"), "bad");});
test("baffled -> baffl", function() {deepEqual( Stem("baffled"), "baffl");});
test("bag -> bag", function() {deepEqual( Stem("bag"), "bag");});
test("bagatelle -> bagatell", function() {deepEqual( Stem("bagatelle"), "bagatell");});
test("baggage -> baggag", function() {deepEqual( Stem("baggage"), "baggag");});
test("bagnet -> bagnet", function() {deepEqual( Stem("bagnet"), "bagnet");});
test("bagnets -> bagnet", function() {deepEqual( Stem("bagnets"), "bagnet");});
test("bags -> bag", function() {deepEqual( Stem("bags"), "bag");});
test("baguet -> baguet", function() {deepEqual( Stem("baguet"), "baguet");});
test("bah -> bah", function() {deepEqual( Stem("bah"), "bah");});
test("bahama -> bahama", function() {deepEqual( Stem("bahama"), "bahama");});
test("bahia -> bahia", function() {deepEqual( Stem("bahia"), "bahia");});
test("bail -> bail", function() {deepEqual( Stem("bail"), "bail");});
test("bailed -> bail", function() {deepEqual( Stem("bailed"), "bail");});
test("bailey -> bailey", function() {deepEqual( Stem("bailey"), "bailey");});
test("bailiff -> bailiff", function() {deepEqual( Stem("bailiff"), "bailiff");});
test("baillie -> bailli", function() {deepEqual( Stem("baillie"), "bailli");});
test("bairn -> bairn", function() {deepEqual( Stem("bairn"), "bairn");});
test("bairns -> bairn", function() {deepEqual( Stem("bairns"), "bairn");});
test("bait -> bait", function() {deepEqual( Stem("bait"), "bait");});
test("baited -> bait", function() {deepEqual( Stem("baited"), "bait");});
test("baize -> baiz", function() {deepEqual( Stem("baize"), "baiz");});
test("bajada -> bajada", function() {deepEqual( Stem("bajada"), "bajada");});
test("bakaleyev -> bakaleyev", function() {deepEqual( Stem("bakaleyev"), "bakaleyev");});
test("baked -> bake", function() {deepEqual( Stem("baked"), "bake");});
test("baker -> baker", function() {deepEqual( Stem("baker"), "baker");});
test("bakers -> baker", function() {deepEqual( Stem("bakers"), "baker");});
test("baking -> bake", function() {deepEqual( Stem("baking"), "bake");});
test("balalaika -> balalaika", function() {deepEqual( Stem("balalaika"), "balalaika");});
test("balance -> balanc", function() {deepEqual( Stem("balance"), "balanc");});
test("balanced -> balanc", function() {deepEqual( Stem("balanced"), "balanc");});
test("balancing -> balanc", function() {deepEqual( Stem("balancing"), "balanc");});
test("balandra -> balandra", function() {deepEqual( Stem("balandra"), "balandra");});
test("balbi -> balbi", function() {deepEqual( Stem("balbi"), "balbi");});
test("balcarce -> balcarc", function() {deepEqual( Stem("balcarce"), "balcarc");});
test("balci -> balci", function() {deepEqual( Stem("balci"), "balci");});
test("balconies -> balconi", function() {deepEqual( Stem("balconies"), "balconi");});
test("balcony -> balconi", function() {deepEqual( Stem("balcony"), "balconi");});
test("bald -> bald", function() {deepEqual( Stem("bald"), "bald");});
test("bale -> bale", function() {deepEqual( Stem("bale"), "bale");});
test("baleful -> bale", function() {deepEqual( Stem("baleful"), "bale");});
test("bales -> bale", function() {deepEqual( Stem("bales"), "bale");});
test("balked -> balk", function() {deepEqual( Stem("balked"), "balk");});
test("balking -> balk", function() {deepEqual( Stem("balking"), "balk");});
test("balks -> balk", function() {deepEqual( Stem("balks"), "balk");});
test("ball -> ball", function() {deepEqual( Stem("ball"), "ball");});
test("ballad -> ballad", function() {deepEqual( Stem("ballad"), "ballad");});
test("ballast -> ballast", function() {deepEqual( Stem("ballast"), "ballast");});
test("balled -> ball", function() {deepEqual( Stem("balled"), "ball");});
test("ballenagh -> ballenagh", function() {deepEqual( Stem("ballenagh"), "ballenagh");});
test("ballenar -> ballenar", function() {deepEqual( Stem("ballenar"), "ballenar");});
test("ballet -> ballet", function() {deepEqual( Stem("ballet"), "ballet");});
test("balloon -> balloon", function() {deepEqual( Stem("balloon"), "balloon");});
test("balloons -> balloon", function() {deepEqual( Stem("balloons"), "balloon");});
test("ballot -> ballot", function() {deepEqual( Stem("ballot"), "ballot");});
test("balls -> ball", function() {deepEqual( Stem("balls"), "ball");});
test("balm -> balm", function() {deepEqual( Stem("balm"), "balm");});
test("balmy -> balmi", function() {deepEqual( Stem("balmy"), "balmi");});
test("balsam -> balsam", function() {deepEqual( Stem("balsam"), "balsam");});
test("balusters -> balust", function() {deepEqual( Stem("balusters"), "balust");});
test("balustrade -> balustrad", function() {deepEqual( Stem("balustrade"), "balustrad");});
test("balustrades -> balustrad", function() {deepEqual( Stem("balustrades"), "balustrad");});
test("bamboo -> bamboo", function() {deepEqual( Stem("bamboo"), "bamboo");});
test("bamboos -> bamboo", function() {deepEqual( Stem("bamboos"), "bamboo");});
test("bamford -> bamford", function() {deepEqual( Stem("bamford"), "bamford");});
test("banana -> banana", function() {deepEqual( Stem("banana"), "banana");});
test("bananas -> banana", function() {deepEqual( Stem("bananas"), "banana");});
test("banc -> banc", function() {deepEqual( Stem("banc"), "banc");});
test("band -> band", function() {deepEqual( Stem("band"), "band");});
test("banda -> banda", function() {deepEqual( Stem("banda"), "banda");});
test("bandage -> bandag", function() {deepEqual( Stem("bandage"), "bandag");});
test("bandages -> bandag", function() {deepEqual( Stem("bandages"), "bandag");});
test("bandbox -> bandbox", function() {deepEqual( Stem("bandbox"), "bandbox");});
test("bandboxes -> bandbox", function() {deepEqual( Stem("bandboxes"), "bandbox");});
test("bandied -> bandi", function() {deepEqual( Stem("bandied"), "bandi");});
test("bandit -> bandit", function() {deepEqual( Stem("bandit"), "bandit");});
test("banditti -> banditti", function() {deepEqual( Stem("banditti"), "banditti");});
test("bandmaster -> bandmast", function() {deepEqual( Stem("bandmaster"), "bandmast");});
test("bands -> band", function() {deepEqual( Stem("bands"), "band");});
test("bandy -> bandi", function() {deepEqual( Stem("bandy"), "bandi");});
test("bandying -> bandi", function() {deepEqual( Stem("bandying"), "bandi");});
test("bane -> bane", function() {deepEqual( Stem("bane"), "bane");});
test("baneful -> bane", function() {deepEqual( Stem("baneful"), "bane");});
test("bang -> bang", function() {deepEqual( Stem("bang"), "bang");});
test("banged -> bang", function() {deepEqual( Stem("banged"), "bang");});
test("banging -> bang", function() {deepEqual( Stem("banging"), "bang");});
test("banish -> banish", function() {deepEqual( Stem("banish"), "banish");});
test("banishe -> banish", function() {deepEqual( Stem("banishe"), "banish");});
test("banished -> banish", function() {deepEqual( Stem("banished"), "banish");});
test("banishes -> banish", function() {deepEqual( Stem("banishes"), "banish");});
test("banishing -> banish", function() {deepEqual( Stem("banishing"), "banish");});
test("banishment -> banish", function() {deepEqual( Stem("banishment"), "banish");});
test("banisters -> banist", function() {deepEqual( Stem("banisters"), "banist");});
test("bank -> bank", function() {deepEqual( Stem("bank"), "bank");});
test("banked -> bank", function() {deepEqual( Stem("banked"), "bank");});
test("banker -> banker", function() {deepEqual( Stem("banker"), "banker");});
test("bankers -> banker", function() {deepEqual( Stem("bankers"), "banker");});
test("banking -> bank", function() {deepEqual( Stem("banking"), "bank");});
test("banknotes -> banknot", function() {deepEqual( Stem("banknotes"), "banknot");});
test("bankrupt -> bankrupt", function() {deepEqual( Stem("bankrupt"), "bankrupt");});
test("bankruptcies -> bankruptci", function() {deepEqual( Stem("bankruptcies"), "bankruptci");});
test("bankruptcy -> bankruptci", function() {deepEqual( Stem("bankruptcy"), "bankruptci");});
test("bankrupts -> bankrupt", function() {deepEqual( Stem("bankrupts"), "bankrupt");});
test("banks -> bank", function() {deepEqual( Stem("banks"), "bank");});
test("banner -> banner", function() {deepEqual( Stem("banner"), "banner");});
test("banners -> banner", function() {deepEqual( Stem("banners"), "banner");});
test("banns -> bann", function() {deepEqual( Stem("banns"), "bann");});
test("banquet -> banquet", function() {deepEqual( Stem("banquet"), "banquet");});
test("banqueting -> banquet", function() {deepEqual( Stem("banqueting"), "banquet");});
test("banquetings -> banquet", function() {deepEqual( Stem("banquetings"), "banquet");});
test("banquets -> banquet", function() {deepEqual( Stem("banquets"), "banquet");});
test("banshee -> banshe", function() {deepEqual( Stem("banshee"), "banshe");});
test("bantam -> bantam", function() {deepEqual( Stem("bantam"), "bantam");});
test("banter -> banter", function() {deepEqual( Stem("banter"), "banter");});
test("bantering -> banter", function() {deepEqual( Stem("bantering"), "banter");});
test("banters -> banter", function() {deepEqual( Stem("banters"), "banter");});
test("baptism -> baptism", function() {deepEqual( Stem("baptism"), "baptism");});
test("baptismal -> baptism", function() {deepEqual( Stem("baptismal"), "baptism");});
test("baptistery -> baptisteri", function() {deepEqual( Stem("baptistery"), "baptisteri");});
test("baptized -> baptiz", function() {deepEqual( Stem("baptized"), "baptiz");});
test("baptizing -> baptiz", function() {deepEqual( Stem("baptizing"), "baptiz");});
test("bar -> bar", function() {deepEqual( Stem("bar"), "bar");});
test("barbare -> barbar", function() {deepEqual( Stem("barbare"), "barbar");});
test("barbarian -> barbarian", function() {deepEqual( Stem("barbarian"), "barbarian");});
test("barbarians -> barbarian", function() {deepEqual( Stem("barbarians"), "barbarian");});
test("barbarism -> barbar", function() {deepEqual( Stem("barbarism"), "barbar");});
test("barbarous -> barbar", function() {deepEqual( Stem("barbarous"), "barbar");});
test("barbary -> barbari", function() {deepEqual( Stem("barbary"), "barbari");});
test("barbauld -> barbauld", function() {deepEqual( Stem("barbauld"), "barbauld");});
test("barbecued -> barbecu", function() {deepEqual( Stem("barbecued"), "barbecu");});
test("barber -> barber", function() {deepEqual( Stem("barber"), "barber");});
test("barbs -> barb", function() {deepEqual( Stem("barbs"), "barb");});
test("barbuda -> barbuda", function() {deepEqual( Stem("barbuda"), "barbuda");});
test("barcaroles -> barcarol", function() {deepEqual( Stem("barcaroles"), "barcarol");});
test("bard -> bard", function() {deepEqual( Stem("bard"), "bard");});
test("bare -> bare", function() {deepEqual( Stem("bare"), "bare");});
test("bared -> bare", function() {deepEqual( Stem("bared"), "bare");});
test("barefaced -> barefac", function() {deepEqual( Stem("barefaced"), "barefac");});
test("barefoot -> barefoot", function() {deepEqual( Stem("barefoot"), "barefoot");});
test("barefooted -> barefoot", function() {deepEqual( Stem("barefooted"), "barefoot");});
test("bareheaded -> barehead", function() {deepEqual( Stem("bareheaded"), "barehead");});
test("barely -> bare", function() {deepEqual( Stem("barely"), "bare");});
test("barest -> barest", function() {deepEqual( Stem("barest"), "barest");});
test("bargain -> bargain", function() {deepEqual( Stem("bargain"), "bargain");});
test("bargained -> bargain", function() {deepEqual( Stem("bargained"), "bargain");});
test("bargaining -> bargain", function() {deepEqual( Stem("bargaining"), "bargain");});
test("bargains -> bargain", function() {deepEqual( Stem("bargains"), "bargain");});
test("barge -> barg", function() {deepEqual( Stem("barge"), "barg");});
test("barges -> barg", function() {deepEqual( Stem("barges"), "barg");});
test("baring -> bare", function() {deepEqual( Stem("baring"), "bare");});
test("bark -> bark", function() {deepEqual( Stem("bark"), "bark");});
test("barker -> barker", function() {deepEqual( Stem("barker"), "barker");});
test("barking -> bark", function() {deepEqual( Stem("barking"), "bark");});
test("barks -> bark", function() {deepEqual( Stem("barks"), "bark");});
test("barley -> barley", function() {deepEqual( Stem("barley"), "barley");});
test("barmaid -> barmaid", function() {deepEqual( Stem("barmaid"), "barmaid");});
test("barmherzige -> barmherzig", function() {deepEqual( Stem("barmherzige"), "barmherzig");});
test("barn -> barn", function() {deepEqual( Stem("barn"), "barn");});
test("barnacles -> barnacl", function() {deepEqual( Stem("barnacles"), "barnacl");});
test("barnard -> barnard", function() {deepEqual( Stem("barnard"), "barnard");});
test("barnet -> barnet", function() {deepEqual( Stem("barnet"), "barnet");});
test("barnevelts -> barnevelt", function() {deepEqual( Stem("barnevelts"), "barnevelt");});
test("barnton -> barnton", function() {deepEqual( Stem("barnton"), "barnton");});
test("barometer -> baromet", function() {deepEqual( Stem("barometer"), "baromet");});
test("baron -> baron", function() {deepEqual( Stem("baron"), "baron");});
test("baroness -> baro", function() {deepEqual( Stem("baroness"), "baro");});
test("baronesses -> baro", function() {deepEqual( Stem("baronesses"), "baro");});
test("baronet -> baronet", function() {deepEqual( Stem("baronet"), "baronet");});
test("baronetcy -> baronetci", function() {deepEqual( Stem("baronetcy"), "baronetci");});
test("baronets -> baronet", function() {deepEqual( Stem("baronets"), "baronet");});
test("baronial -> baroni", function() {deepEqual( Stem("baronial"), "baroni");});
test("barons -> baron", function() {deepEqual( Stem("barons"), "baron");});
test("barouche -> barouch", function() {deepEqual( Stem("barouche"), "barouch");});
test("barrack -> barrack", function() {deepEqual( Stem("barrack"), "barrack");});
test("barracks -> barrack", function() {deepEqual( Stem("barracks"), "barrack");});
test("barre -> barr", function() {deepEqual( Stem("barre"), "barr");});
test("barred -> bar", function() {deepEqual( Stem("barred"), "bar");});
test("barrel -> barrel", function() {deepEqual( Stem("barrel"), "barrel");});
test("barrels -> barrel", function() {deepEqual( Stem("barrels"), "barrel");});
test("barren -> barren", function() {deepEqual( Stem("barren"), "barren");});
test("barrenness -> barren", function() {deepEqual( Stem("barrenness"), "barren");});
test("barrett -> barrett", function() {deepEqual( Stem("barrett"), "barrett");});
test("barricade -> barricad", function() {deepEqual( Stem("barricade"), "barricad");});
test("barricaded -> barricad", function() {deepEqual( Stem("barricaded"), "barricad");});
test("barrier -> barrier", function() {deepEqual( Stem("barrier"), "barrier");});
test("barriers -> barrier", function() {deepEqual( Stem("barriers"), "barrier");});
test("barrington -> barrington", function() {deepEqual( Stem("barrington"), "barrington");});
test("barrister -> barrist", function() {deepEqual( Stem("barrister"), "barrist");});
test("barristers -> barrist", function() {deepEqual( Stem("barristers"), "barrist");});
test("barrows -> barrow", function() {deepEqual( Stem("barrows"), "barrow");});
test("bars -> bar", function() {deepEqual( Stem("bars"), "bar");});
test("bart -> bart", function() {deepEqual( Stem("bart"), "bart");});
test("barter -> barter", function() {deepEqual( Stem("barter"), "barter");});
test("bartholomew -> bartholomew", function() {deepEqual( Stem("bartholomew"), "bartholomew");});
test("barton -> barton", function() {deepEqual( Stem("barton"), "barton");});
test("bas -> bas", function() {deepEqual( Stem("bas"), "bas");});
test("basa -> basa", function() {deepEqual( Stem("basa"), "basa");});
test("basal -> basal", function() {deepEqual( Stem("basal"), "basal");});
test("basalt -> basalt", function() {deepEqual( Stem("basalt"), "basalt");});
test("basalti -> basalti", function() {deepEqual( Stem("basalti"), "basalti");});
test("basaltic -> basalt", function() {deepEqual( Stem("basaltic"), "basalt");});
test("base -> base", function() {deepEqual( Stem("base"), "base");});
test("based -> base", function() {deepEqual( Stem("based"), "base");});
test("basely -> base", function() {deepEqual( Stem("basely"), "base");});
test("basement -> basement", function() {deepEqual( Stem("basement"), "basement");});
test("basements -> basement", function() {deepEqual( Stem("basements"), "basement");});
test("baseness -> base", function() {deepEqual( Stem("baseness"), "base");});
test("baser -> baser", function() {deepEqual( Stem("baser"), "baser");});
test("bases -> base", function() {deepEqual( Stem("bases"), "base");});
test("basest -> basest", function() {deepEqual( Stem("basest"), "basest");});
test("bashful -> bash", function() {deepEqual( Stem("bashful"), "bash");});
test("bashfully -> bash", function() {deepEqual( Stem("bashfully"), "bash");});
test("bashfulness -> bash", function() {deepEqual( Stem("bashfulness"), "bash");});
test("basilisk -> basilisk", function() {deepEqual( Stem("basilisk"), "basilisk");});
test("basin -> basin", function() {deepEqual( Stem("basin"), "basin");});
test("basins -> basin", function() {deepEqual( Stem("basins"), "basin");});
test("basis -> basi", function() {deepEqual( Stem("basis"), "basi");});
test("bask -> bask", function() {deepEqual( Stem("bask"), "bask");});
test("basked -> bask", function() {deepEqual( Stem("basked"), "bask");});
test("basket -> basket", function() {deepEqual( Stem("basket"), "basket");});
test("basketful -> basket", function() {deepEqual( Stem("basketful"), "basket");});
test("baskets -> basket", function() {deepEqual( Stem("baskets"), "basket");});
test("basking -> bask", function() {deepEqual( Stem("basking"), "bask");});
test("basks -> bask", function() {deepEqual( Stem("basks"), "bask");});
test("basque -> basqu", function() {deepEqual( Stem("basque"), "basqu");});
test("bass -> bass", function() {deepEqual( Stem("bass"), "bass");});
test("bassoon -> bassoon", function() {deepEqual( Stem("bassoon"), "bassoon");});
test("bastard -> bastard", function() {deepEqual( Stem("bastard"), "bastard");});
test("bat -> bat", function() {deepEqual( Stem("bat"), "bat");});
test("batch -> batch", function() {deepEqual( Stem("batch"), "batch");});
test("bate -> bate", function() {deepEqual( Stem("bate"), "bate");});
test("bath -> bath", function() {deepEqual( Stem("bath"), "bath");});
test("bathe -> bath", function() {deepEqual( Stem("bathe"), "bath");});
test("bathed -> bath", function() {deepEqual( Stem("bathed"), "bath");});
test("bathers -> bather", function() {deepEqual( Stem("bathers"), "bather");});
test("bathes -> bath", function() {deepEqual( Stem("bathes"), "bath");});
test("bathing -> bath", function() {deepEqual( Stem("bathing"), "bath");});
test("baths -> bath", function() {deepEqual( Stem("baths"), "bath");});
test("bathurst -> bathurst", function() {deepEqual( Stem("bathurst"), "bathurst");});
test("batrachian -> batrachian", function() {deepEqual( Stem("batrachian"), "batrachian");});
test("bats -> bat", function() {deepEqual( Stem("bats"), "bat");});
test("battalion -> battalion", function() {deepEqual( Stem("battalion"), "battalion");});
test("batter -> batter", function() {deepEqual( Stem("batter"), "batter");});
test("battered -> batter", function() {deepEqual( Stem("battered"), "batter");});
test("battering -> batter", function() {deepEqual( Stem("battering"), "batter");});
test("battery -> batteri", function() {deepEqual( Stem("battery"), "batteri");});
test("battle -> battl", function() {deepEqual( Stem("battle"), "battl");});
test("battled -> battl", function() {deepEqual( Stem("battled"), "battl");});
test("battlefield -> battlefield", function() {deepEqual( Stem("battlefield"), "battlefield");});
test("battlements -> battlement", function() {deepEqual( Stem("battlements"), "battlement");});
test("battles -> battl", function() {deepEqual( Stem("battles"), "battl");});
test("bauble -> baubl", function() {deepEqual( Stem("bauble"), "baubl");});
test("baubles -> baubl", function() {deepEqual( Stem("baubles"), "baubl");});
test("baudi -> baudi", function() {deepEqual( Stem("baudi"), "baudi");});
test("bawl -> bawl", function() {deepEqual( Stem("bawl"), "bawl");});
test("bawled -> bawl", function() {deepEqual( Stem("bawled"), "bawl");});
test("bawling -> bawl", function() {deepEqual( Stem("bawling"), "bawl");});
test("bawls -> bawl", function() {deepEqual( Stem("bawls"), "bawl");});
test("bay -> bay", function() {deepEqual( Stem("bay"), "bay");});
test("bayard -> bayard", function() {deepEqual( Stem("bayard"), "bayard");});
test("bayham -> bayham", function() {deepEqual( Stem("bayham"), "bayham");});
test("baying -> bay", function() {deepEqual( Stem("baying"), "bay");});
test("baynoe -> bayno", function() {deepEqual( Stem("baynoe"), "bayno");});
test("bayonet -> bayonet", function() {deepEqual( Stem("bayonet"), "bayonet");});
test("bays -> bay", function() {deepEqual( Stem("bays"), "bay");});
test("bazaar -> bazaar", function() {deepEqual( Stem("bazaar"), "bazaar");});
test("be -> be", function() {deepEqual( Stem("be"), "be");});
test("bea -> bea", function() {deepEqual( Stem("bea"), "bea");});
test("beach -> beach", function() {deepEqual( Stem("beach"), "beach");});
test("beaches -> beach", function() {deepEqual( Stem("beaches"), "beach");});
test("beachheads -> beachhead", function() {deepEqual( Stem("beachheads"), "beachhead");});
test("beacon -> beacon", function() {deepEqual( Stem("beacon"), "beacon");});
test("beacons -> beacon", function() {deepEqual( Stem("beacons"), "beacon");});
test("bead -> bead", function() {deepEqual( Stem("bead"), "bead");});
test("beaded -> bead", function() {deepEqual( Stem("beaded"), "bead");});
test("beadle -> beadl", function() {deepEqual( Stem("beadle"), "beadl");});
test("beadles -> beadl", function() {deepEqual( Stem("beadles"), "beadl");});
test("beads -> bead", function() {deepEqual( Stem("beads"), "bead");});
test("beagle -> beagl", function() {deepEqual( Stem("beagle"), "beagl");});
test("beak -> beak", function() {deepEqual( Stem("beak"), "beak");});
test("beaks -> beak", function() {deepEqual( Stem("beaks"), "beak");});
test("beam -> beam", function() {deepEqual( Stem("beam"), "beam");});
test("beamed -> beam", function() {deepEqual( Stem("beamed"), "beam");});
test("beaming -> beam", function() {deepEqual( Stem("beaming"), "beam");});
test("beamingly -> beam", function() {deepEqual( Stem("beamingly"), "beam");});
test("beams -> beam", function() {deepEqual( Stem("beams"), "beam");});
test("bean -> bean", function() {deepEqual( Stem("bean"), "bean");});
test("beans -> bean", function() {deepEqual( Stem("beans"), "bean");});
test("bear -> bear", function() {deepEqual( Stem("bear"), "bear");});
test("beard -> beard", function() {deepEqual( Stem("beard"), "beard");});
test("bearded -> beard", function() {deepEqual( Stem("bearded"), "beard");});
test("beardless -> beardless", function() {deepEqual( Stem("beardless"), "beardless");});
test("beards -> beard", function() {deepEqual( Stem("beards"), "beard");});
test("bearer -> bearer", function() {deepEqual( Stem("bearer"), "bearer");});
test("bearers -> bearer", function() {deepEqual( Stem("bearers"), "bearer");});
test("bearing -> bear", function() {deepEqual( Stem("bearing"), "bear");});
test("bearings -> bear", function() {deepEqual( Stem("bearings"), "bear");});
test("bearish -> bearish", function() {deepEqual( Stem("bearish"), "bearish");});
test("bears -> bear", function() {deepEqual( Stem("bears"), "bear");});
test("beast -> beast", function() {deepEqual( Stem("beast"), "beast");});
test("beastliness -> beastli", function() {deepEqual( Stem("beastliness"), "beastli");});
test("beastly -> beast", function() {deepEqual( Stem("beastly"), "beast");});
test("beasts -> beast", function() {deepEqual( Stem("beasts"), "beast");});
test("beat -> beat", function() {deepEqual( Stem("beat"), "beat");});
test("beaten -> beaten", function() {deepEqual( Stem("beaten"), "beaten");});
test("beaters -> beater", function() {deepEqual( Stem("beaters"), "beater");});
test("beating -> beat", function() {deepEqual( Stem("beating"), "beat");});
test("beatings -> beat", function() {deepEqual( Stem("beatings"), "beat");});
test("beats -> beat", function() {deepEqual( Stem("beats"), "beat");});
test("beatson -> beatson", function() {deepEqual( Stem("beatson"), "beatson");});
test("beatten -> beatten", function() {deepEqual( Stem("beatten"), "beatten");});
test("beau -> beau", function() {deepEqual( Stem("beau"), "beau");});
test("beauchamp -> beauchamp", function() {deepEqual( Stem("beauchamp"), "beauchamp");});
test("beaufort -> beaufort", function() {deepEqual( Stem("beaufort"), "beaufort");});
test("beauteous -> beauteous", function() {deepEqual( Stem("beauteous"), "beauteous");});
test("beauties -> beauti", function() {deepEqual( Stem("beauties"), "beauti");});
test("beautiful -> beauti", function() {deepEqual( Stem("beautiful"), "beauti");});
test("beautifullest -> beautifullest", function() {deepEqual( Stem("beautifullest"), "beautifullest");});
test("beautifully -> beauti", function() {deepEqual( Stem("beautifully"), "beauti");});
test("beauty -> beauti", function() {deepEqual( Stem("beauty"), "beauti");});
test("beaux -> beaux", function() {deepEqual( Stem("beaux"), "beaux");});
test("beaver -> beaver", function() {deepEqual( Stem("beaver"), "beaver");});
test("becalmed -> becalm", function() {deepEqual( Stem("becalmed"), "becalm");});
test("became -> becam", function() {deepEqual( Stem("became"), "becam");});
test("because -> becaus", function() {deepEqual( Stem("because"), "becaus");});
test("beck -> beck", function() {deepEqual( Stem("beck"), "beck");});
test("beckon -> beckon", function() {deepEqual( Stem("beckon"), "beckon");});
test("beckoned -> beckon", function() {deepEqual( Stem("beckoned"), "beckon");});
test("beckoning -> beckon", function() {deepEqual( Stem("beckoning"), "beckon");});
test("beckons -> beckon", function() {deepEqual( Stem("beckons"), "beckon");});
test("become -> becom", function() {deepEqual( Stem("become"), "becom");});
test("becomes -> becom", function() {deepEqual( Stem("becomes"), "becom");});
test("becoming -> becom", function() {deepEqual( Stem("becoming"), "becom");});
test("bed -> bed", function() {deepEqual( Stem("bed"), "bed");});
test("bedabbled -> bedabbl", function() {deepEqual( Stem("bedabbled"), "bedabbl");});
test("bedaubed -> bedaub", function() {deepEqual( Stem("bedaubed"), "bedaub");});
test("bedchamber -> bedchamb", function() {deepEqual( Stem("bedchamber"), "bedchamb");});
test("bedchambers -> bedchamb", function() {deepEqual( Stem("bedchambers"), "bedchamb");});
test("bedclothes -> bedcloth", function() {deepEqual( Stem("bedclothes"), "bedcloth");});
test("bedding -> bed", function() {deepEqual( Stem("bedding"), "bed");});
test("bedecked -> bedeck", function() {deepEqual( Stem("bedecked"), "bedeck");});
test("bedecks -> bedeck", function() {deepEqual( Stem("bedecks"), "bedeck");});
test("bedevilment -> bedevil", function() {deepEqual( Stem("bedevilment"), "bedevil");});
test("bedfellows -> bedfellow", function() {deepEqual( Stem("bedfellows"), "bedfellow");});
test("bedlam -> bedlam", function() {deepEqual( Stem("bedlam"), "bedlam");});
test("bedridden -> bedridden", function() {deepEqual( Stem("bedridden"), "bedridden");});
test("bedroom -> bedroom", function() {deepEqual( Stem("bedroom"), "bedroom");});
test("bedrooms -> bedroom", function() {deepEqual( Stem("bedrooms"), "bedroom");});
test("beds -> bed", function() {deepEqual( Stem("beds"), "bed");});
test("bedside -> bedsid", function() {deepEqual( Stem("bedside"), "bedsid");});
test("bedstead -> bedstead", function() {deepEqual( Stem("bedstead"), "bedstead");});
test("bedsteads -> bedstead", function() {deepEqual( Stem("bedsteads"), "bedstead");});
test("bedtime -> bedtim", function() {deepEqual( Stem("bedtime"), "bedtim");});
test("bee -> bee", function() {deepEqual( Stem("bee"), "bee");});
test("beech -> beech", function() {deepEqual( Stem("beech"), "beech");});
test("beechey -> beechey", function() {deepEqual( Stem("beechey"), "beechey");});
test("beef -> beef", function() {deepEqual( Stem("beef"), "beef");});
test("beefsteak -> beefsteak", function() {deepEqual( Stem("beefsteak"), "beefsteak");});
test("beehive -> beehiv", function() {deepEqual( Stem("beehive"), "beehiv");});
test("been -> been", function() {deepEqual( Stem("been"), "been");});
test("beer -> beer", function() {deepEqual( Stem("beer"), "beer");});
test("bees -> bee", function() {deepEqual( Stem("bees"), "bee");});
test("beeswax -> beeswax", function() {deepEqual( Stem("beeswax"), "beeswax");});
test("beeswaxes -> beeswax", function() {deepEqual( Stem("beeswaxes"), "beeswax");});
test("beetle -> beetl", function() {deepEqual( Stem("beetle"), "beetl");});
test("beetles -> beetl", function() {deepEqual( Stem("beetles"), "beetl");});
test("befall -> befal", function() {deepEqual( Stem("befall"), "befal");});
test("befallen -> befallen", function() {deepEqual( Stem("befallen"), "befallen");});
test("befell -> befel", function() {deepEqual( Stem("befell"), "befel");});
test("befillaire -> befillair", function() {deepEqual( Stem("befillaire"), "befillair");});
test("befit -> befit", function() {deepEqual( Stem("befit"), "befit");});
test("befits -> befit", function() {deepEqual( Stem("befits"), "befit");});
test("befitting -> befit", function() {deepEqual( Stem("befitting"), "befit");});
test("befogged -> befog", function() {deepEqual( Stem("befogged"), "befog");});
test("before -> befor", function() {deepEqual( Stem("before"), "befor");});
test("beforehand -> beforehand", function() {deepEqual( Stem("beforehand"), "beforehand");});
test("befriend -> befriend", function() {deepEqual( Stem("befriend"), "befriend");});
test("befriended -> befriend", function() {deepEqual( Stem("befriended"), "befriend");});
test("befriending -> befriend", function() {deepEqual( Stem("befriending"), "befriend");});
test("beg -> beg", function() {deepEqual( Stem("beg"), "beg");});
test("bega -> bega", function() {deepEqual( Stem("bega"), "bega");});
test("began -> began", function() {deepEqual( Stem("began"), "began");});
test("begat -> begat", function() {deepEqual( Stem("begat"), "begat");});
test("beget -> beget", function() {deepEqual( Stem("beget"), "beget");});
test("beggar -> beggar", function() {deepEqual( Stem("beggar"), "beggar");});
test("beggared -> beggar", function() {deepEqual( Stem("beggared"), "beggar");});
test("beggarly -> beggar", function() {deepEqual( Stem("beggarly"), "beggar");});
test("beggars -> beggar", function() {deepEqual( Stem("beggars"), "beggar");});
test("beggary -> beggari", function() {deepEqual( Stem("beggary"), "beggari");});
test("begged -> beg", function() {deepEqual( Stem("begged"), "beg");});
test("begging -> beg", function() {deepEqual( Stem("begging"), "beg");});
test("begin -> begin", function() {deepEqual( Stem("begin"), "begin");});
test("beginning -> begin", function() {deepEqual( Stem("beginning"), "begin");});
test("beginnings -> begin", function() {deepEqual( Stem("beginnings"), "begin");});
test("begins -> begin", function() {deepEqual( Stem("begins"), "begin");});
test("begludship -> begludship", function() {deepEqual( Stem("begludship"), "begludship");});
test("begone -> begon", function() {deepEqual( Stem("begone"), "begon");});
test("begotten -> begotten", function() {deepEqual( Stem("begotten"), "begotten");});
test("begrimed -> begrim", function() {deepEqual( Stem("begrimed"), "begrim");});
test("begrimes -> begrim", function() {deepEqual( Stem("begrimes"), "begrim");});
test("begrudge -> begrudg", function() {deepEqual( Stem("begrudge"), "begrudg");});
test("begrudged -> begrudg", function() {deepEqual( Stem("begrudged"), "begrudg");});
test("begs -> beg", function() {deepEqual( Stem("begs"), "beg");});
test("beguile -> beguil", function() {deepEqual( Stem("beguile"), "beguil");});
test("beguiled -> beguil", function() {deepEqual( Stem("beguiled"), "beguil");});
test("begun -> begun", function() {deepEqual( Stem("begun"), "begun");});
test("behalf -> behalf", function() {deepEqual( Stem("behalf"), "behalf");});
test("behave -> behav", function() {deepEqual( Stem("behave"), "behav");});
test("behaved -> behav", function() {deepEqual( Stem("behaved"), "behav");});
test("behaves -> behav", function() {deepEqual( Stem("behaves"), "behav");});
test("behaving -> behav", function() {deepEqual( Stem("behaving"), "behav");});
test("behavior -> behavior", function() {deepEqual( Stem("behavior"), "behavior");});
test("behaviour -> behaviour", function() {deepEqual( Stem("behaviour"), "behaviour");});
test("beheaded -> behead", function() {deepEqual( Stem("beheaded"), "behead");});
test("beheld -> beheld", function() {deepEqual( Stem("beheld"), "beheld");});
test("behest -> behest", function() {deepEqual( Stem("behest"), "behest");});
test("behests -> behest", function() {deepEqual( Stem("behests"), "behest");});
test("behind -> behind", function() {deepEqual( Stem("behind"), "behind");});
test("behindhand -> behindhand", function() {deepEqual( Stem("behindhand"), "behindhand");});
test("behold -> behold", function() {deepEqual( Stem("behold"), "behold");});
test("beholden -> beholden", function() {deepEqual( Stem("beholden"), "beholden");});
test("beholder -> behold", function() {deepEqual( Stem("beholder"), "behold");});
test("beholders -> behold", function() {deepEqual( Stem("beholders"), "behold");});
test("beholding -> behold", function() {deepEqual( Stem("beholding"), "behold");});
test("beholds -> behold", function() {deepEqual( Stem("beholds"), "behold");});
test("behoof -> behoof", function() {deepEqual( Stem("behoof"), "behoof");});
test("behoved -> behov", function() {deepEqual( Stem("behoved"), "behov");});
test("behoves -> behov", function() {deepEqual( Stem("behoves"), "behov");});
test("behring -> behr", function() {deepEqual( Stem("behring"), "behr");});
test("being -> be", function() {deepEqual( Stem("being"), "be");});
test("beings -> be", function() {deepEqual( Stem("beings"), "be");});
test("beknown -> beknown", function() {deepEqual( Stem("beknown"), "beknown");});
test("belated -> belat", function() {deepEqual( Stem("belated"), "belat");});
test("belauded -> belaud", function() {deepEqual( Stem("belauded"), "belaud");});
test("beldame -> beldam", function() {deepEqual( Stem("beldame"), "beldam");});
test("belfry -> belfri", function() {deepEqual( Stem("belfry"), "belfri");});
test("belgrave -> belgrav", function() {deepEqual( Stem("belgrave"), "belgrav");});
test("belgravia -> belgravia", function() {deepEqual( Stem("belgravia"), "belgravia");});
test("belgravian -> belgravian", function() {deepEqual( Stem("belgravian"), "belgravian");});
test("belie -> beli", function() {deepEqual( Stem("belie"), "beli");});
test("belied -> beli", function() {deepEqual( Stem("belied"), "beli");});
test("belief -> belief", function() {deepEqual( Stem("belief"), "belief");});
test("beliefs -> belief", function() {deepEqual( Stem("beliefs"), "belief");});
test("believe -> believ", function() {deepEqual( Stem("believe"), "believ");});
test("believed -> believ", function() {deepEqual( Stem("believed"), "believ");});
test("believer -> believ", function() {deepEqual( Stem("believer"), "believ");});
test("believers -> believ", function() {deepEqual( Stem("believers"), "believ");});
test("believes -> believ", function() {deepEqual( Stem("believes"), "believ");});
test("believest -> believest", function() {deepEqual( Stem("believest"), "believest");});
test("believeth -> believeth", function() {deepEqual( Stem("believeth"), "believeth");});
test("believing -> believ", function() {deepEqual( Stem("believing"), "believ");});
test("bell -> bell", function() {deepEqual( Stem("bell"), "bell");});
test("bellavista -> bellavista", function() {deepEqual( Stem("bellavista"), "bellavista");});
test("belle -> bell", function() {deepEqual( Stem("belle"), "bell");});
test("belled -> bell", function() {deepEqual( Stem("belled"), "bell");});
test("bellies -> belli", function() {deepEqual( Stem("bellies"), "belli");});
test("belligerents -> belliger", function() {deepEqual( Stem("belligerents"), "belliger");});
test("belling -> bell", function() {deepEqual( Stem("belling"), "bell");});
test("bellmen -> bellmen", function() {deepEqual( Stem("bellmen"), "bellmen");});
test("bellow -> bellow", function() {deepEqual( Stem("bellow"), "bellow");});
test("bellower -> bellow", function() {deepEqual( Stem("bellower"), "bellow");});
test("bellowing -> bellow", function() {deepEqual( Stem("bellowing"), "bellow");});
test("bellows -> bellow", function() {deepEqual( Stem("bellows"), "bellow");});
test("bells -> bell", function() {deepEqual( Stem("bells"), "bell");});
test("belly -> belli", function() {deepEqual( Stem("belly"), "belli");});
test("belong -> belong", function() {deepEqual( Stem("belong"), "belong");});
test("belonged -> belong", function() {deepEqual( Stem("belonged"), "belong");});
test("belonging -> belong", function() {deepEqual( Stem("belonging"), "belong");});
test("belongings -> belong", function() {deepEqual( Stem("belongings"), "belong");});
test("belongs -> belong", function() {deepEqual( Stem("belongs"), "belong");});
test("beloved -> belov", function() {deepEqual( Stem("beloved"), "belov");});
test("below -> below", function() {deepEqual( Stem("below"), "below");});
test("belt -> belt", function() {deepEqual( Stem("belt"), "belt");});
test("belts -> belt", function() {deepEqual( Stem("belts"), "belt");});
test("belvawney -> belvawney", function() {deepEqual( Stem("belvawney"), "belvawney");});
test("belvedere -> belveder", function() {deepEqual( Stem("belvedere"), "belveder");});
test("bemoaned -> bemoan", function() {deepEqual( Stem("bemoaned"), "bemoan");});
test("ben -> ben", function() {deepEqual( Stem("ben"), "ben");});
test("bench -> bench", function() {deepEqual( Stem("bench"), "bench");});
test("bencher -> bencher", function() {deepEqual( Stem("bencher"), "bencher");});
test("benchers -> bencher", function() {deepEqual( Stem("benchers"), "bencher");});
test("benches -> bench", function() {deepEqual( Stem("benches"), "bench");});
test("benchuca -> benchuca", function() {deepEqual( Stem("benchuca"), "benchuca");});
test("bend -> bend", function() {deepEqual( Stem("bend"), "bend");});
test("bended -> bend", function() {deepEqual( Stem("bended"), "bend");});
test("bending -> bend", function() {deepEqual( Stem("bending"), "bend");});
test("bends -> bend", function() {deepEqual( Stem("bends"), "bend");});
test("beneath -> beneath", function() {deepEqual( Stem("beneath"), "beneath");});
test("benedict -> benedict", function() {deepEqual( Stem("benedict"), "benedict");});
test("benediction -> benedict", function() {deepEqual( Stem("benediction"), "benedict");});
test("benefactor -> benefactor", function() {deepEqual( Stem("benefactor"), "benefactor");});
test("benefactors -> benefactor", function() {deepEqual( Stem("benefactors"), "benefactor");});
test("beneficent -> benefic", function() {deepEqual( Stem("beneficent"), "benefic");});
test("beneficently -> benefic", function() {deepEqual( Stem("beneficently"), "benefic");});
test("beneficial -> benefici", function() {deepEqual( Stem("beneficial"), "benefici");});
test("benefit -> benefit", function() {deepEqual( Stem("benefit"), "benefit");});
test("benefited -> benefit", function() {deepEqual( Stem("benefited"), "benefit");});
test("benefiting -> benefit", function() {deepEqual( Stem("benefiting"), "benefit");});
test("benefits -> benefit", function() {deepEqual( Stem("benefits"), "benefit");});
test("benet -> benet", function() {deepEqual( Stem("benet"), "benet");});
test("benevolence -> benevol", function() {deepEqual( Stem("benevolence"), "benevol");});
test("benevolent -> benevol", function() {deepEqual( Stem("benevolent"), "benevol");});
test("bengal -> bengal", function() {deepEqual( Stem("bengal"), "bengal");});
test("benguela -> benguela", function() {deepEqual( Stem("benguela"), "benguela");});
test("benighted -> benight", function() {deepEqual( Stem("benighted"), "benight");});
test("benign -> benign", function() {deepEqual( Stem("benign"), "benign");});
test("benignant -> benign", function() {deepEqual( Stem("benignant"), "benign");});
test("benignantly -> benign", function() {deepEqual( Stem("benignantly"), "benign");});
test("benignity -> benign", function() {deepEqual( Stem("benignity"), "benign");});
test("benignly -> benign", function() {deepEqual( Stem("benignly"), "benign");});
test("benito -> benito", function() {deepEqual( Stem("benito"), "benito");});
test("bennet -> bennet", function() {deepEqual( Stem("bennet"), "bennet");});
test("bennett -> bennett", function() {deepEqual( Stem("bennett"), "bennett");});
test("benson -> benson", function() {deepEqual( Stem("benson"), "benson");});
test("bent -> bent", function() {deepEqual( Stem("bent"), "bent");});
test("benumbed -> benumb", function() {deepEqual( Stem("benumbed"), "benumb");});
test("bequeath -> bequeath", function() {deepEqual( Stem("bequeath"), "bequeath");});
test("bequeathed -> bequeath", function() {deepEqual( Stem("bequeathed"), "bequeath");});
test("bequeathing -> bequeath", function() {deepEqual( Stem("bequeathing"), "bequeath");});
test("bequest -> bequest", function() {deepEqual( Stem("bequest"), "bequest");});
test("berardi -> berardi", function() {deepEqual( Stem("berardi"), "berardi");});
test("bereaved -> bereav", function() {deepEqual( Stem("bereaved"), "bereav");});
test("bereft -> bereft", function() {deepEqual( Stem("bereft"), "bereft");});
test("berg -> berg", function() {deepEqual( Stem("berg"), "berg");});
test("berkele -> berkel", function() {deepEqual( Stem("berkele"), "berkel");});
test("berkeley -> berkeley", function() {deepEqual( Stem("berkeley"), "berkeley");});
test("berlin -> berlin", function() {deepEqual( Stem("berlin"), "berlin");});
test("bermudas -> bermuda", function() {deepEqual( Stem("bermudas"), "bermuda");});
test("bernantio -> bernantio", function() {deepEqual( Stem("bernantio"), "bernantio");});
test("beroe -> bero", function() {deepEqual( Stem("beroe"), "bero");});
test("berquelo -> berquelo", function() {deepEqual( Stem("berquelo"), "berquelo");});
test("berrid -> berrid", function() {deepEqual( Stem("berrid"), "berrid");});
test("berried -> berri", function() {deepEqual( Stem("berried"), "berri");});
test("berries -> berri", function() {deepEqual( Stem("berries"), "berri");});
test("berrin -> berrin", function() {deepEqual( Stem("berrin"), "berrin");});
test("berry -> berri", function() {deepEqual( Stem("berry"), "berri");});
test("berryin -> berryin", function() {deepEqual( Stem("berryin"), "berryin");});
test("berteroii -> berteroii", function() {deepEqual( Stem("berteroii"), "berteroii");});
test("berth -> berth", function() {deepEqual( Stem("berth"), "berth");});
test("berthelot -> berthelot", function() {deepEqual( Stem("berthelot"), "berthelot");});
test("bertram -> bertram", function() {deepEqual( Stem("bertram"), "bertram");});
test("beryl -> beryl", function() {deepEqual( Stem("beryl"), "beryl");});
test("berzelius -> berzelius", function() {deepEqual( Stem("berzelius"), "berzelius");});
test("beseech -> beseech", function() {deepEqual( Stem("beseech"), "beseech");});
test("beseeches -> beseech", function() {deepEqual( Stem("beseeches"), "beseech");});
test("beseeching -> beseech", function() {deepEqual( Stem("beseeching"), "beseech");});
test("beseechingly -> beseech", function() {deepEqual( Stem("beseechingly"), "beseech");});
test("beseeltes -> beseelt", function() {deepEqual( Stem("beseeltes"), "beseelt");});
test("beseems -> beseem", function() {deepEqual( Stem("beseems"), "beseem");});
test("beset -> beset", function() {deepEqual( Stem("beset"), "beset");});
test("besetting -> beset", function() {deepEqual( Stem("besetting"), "beset");});
test("beside -> besid", function() {deepEqual( Stem("beside"), "besid");});
test("besides -> besid", function() {deepEqual( Stem("besides"), "besid");});
test("besieged -> besieg", function() {deepEqual( Stem("besieged"), "besieg");});
test("besmeared -> besmear", function() {deepEqual( Stem("besmeared"), "besmear");});
test("besought -> besought", function() {deepEqual( Stem("besought"), "besought");});
test("bespattered -> bespatt", function() {deepEqual( Stem("bespattered"), "bespatt");});
test("bespeak -> bespeak", function() {deepEqual( Stem("bespeak"), "bespeak");});
test("bespeaking -> bespeak", function() {deepEqual( Stem("bespeaking"), "bespeak");});
test("bespeaks -> bespeak", function() {deepEqual( Stem("bespeaks"), "bespeak");});
test("bespeckled -> bespeckl", function() {deepEqual( Stem("bespeckled"), "bespeckl");});
test("bespoke -> bespok", function() {deepEqual( Stem("bespoke"), "bespok");});
test("besprinkled -> besprinkl", function() {deepEqual( Stem("besprinkled"), "besprinkl");});
test("best -> best", function() {deepEqual( Stem("best"), "best");});
test("bestest -> bestest", function() {deepEqual( Stem("bestest"), "bestest");});
test("bestir -> bestir", function() {deepEqual( Stem("bestir"), "bestir");});
test("bestow -> bestow", function() {deepEqual( Stem("bestow"), "bestow");});
test("bestowal -> bestow", function() {deepEqual( Stem("bestowal"), "bestow");});
test("bestowed -> bestow", function() {deepEqual( Stem("bestowed"), "bestow");});
test("bestowing -> bestow", function() {deepEqual( Stem("bestowing"), "bestow");});
test("bestows -> bestow", function() {deepEqual( Stem("bestows"), "bestow");});
test("bet -> bet", function() {deepEqual( Stem("bet"), "bet");});
test("betake -> betak", function() {deepEqual( Stem("betake"), "betak");});
test("betaken -> betaken", function() {deepEqual( Stem("betaken"), "betaken");});
test("bethany -> bethani", function() {deepEqual( Stem("bethany"), "bethani");});
test("bethel -> bethel", function() {deepEqual( Stem("bethel"), "bethel");});
test("bethlehem -> bethlehem", function() {deepEqual( Stem("bethlehem"), "bethlehem");});
test("bethought -> bethought", function() {deepEqual( Stem("bethought"), "bethought");});
test("betimes -> betim", function() {deepEqual( Stem("betimes"), "betim");});
test("betokened -> betoken", function() {deepEqual( Stem("betokened"), "betoken");});
test("betokening -> betoken", function() {deepEqual( Stem("betokening"), "betoken");});
test("betook -> betook", function() {deepEqual( Stem("betook"), "betook");});
test("betray -> betray", function() {deepEqual( Stem("betray"), "betray");});
test("betrayal -> betray", function() {deepEqual( Stem("betrayal"), "betray");});
test("betrayed -> betray", function() {deepEqual( Stem("betrayed"), "betray");});
test("betraying -> betray", function() {deepEqual( Stem("betraying"), "betray");});
test("betrays -> betray", function() {deepEqual( Stem("betrays"), "betray");});
test("betrothed -> betroth", function() {deepEqual( Stem("betrothed"), "betroth");});
test("bets -> bet", function() {deepEqual( Stem("bets"), "bet");});
test("better -> better", function() {deepEqual( Stem("better"), "better");});
test("betters -> better", function() {deepEqual( Stem("betters"), "better");});
test("betther -> betther", function() {deepEqual( Stem("betther"), "betther");});
test("betting -> bet", function() {deepEqual( Stem("betting"), "bet");});
test("betty -> betti", function() {deepEqual( Stem("betty"), "betti");});
test("betuloides -> betuloid", function() {deepEqual( Stem("betuloides"), "betuloid");});
test("betwee -> betwe", function() {deepEqual( Stem("betwee"), "betwe");});
test("between -> between", function() {deepEqual( Stem("between"), "between");});
test("betwixt -> betwixt", function() {deepEqual( Stem("betwixt"), "betwixt");});
test("beudant -> beudant", function() {deepEqual( Stem("beudant"), "beudant");});
test("bevan -> bevan", function() {deepEqual( Stem("bevan"), "bevan");});
test("beverage -> beverag", function() {deepEqual( Stem("beverage"), "beverag");});
test("beverley -> beverley", function() {deepEqual( Stem("beverley"), "beverley");});
test("bewail -> bewail", function() {deepEqual( Stem("bewail"), "bewail");});
test("bewailed -> bewail", function() {deepEqual( Stem("bewailed"), "bewail");});
test("bewailing -> bewail", function() {deepEqual( Stem("bewailing"), "bewail");});
test("beware -> bewar", function() {deepEqual( Stem("beware"), "bewar");});
test("bewilder -> bewild", function() {deepEqual( Stem("bewilder"), "bewild");});
test("bewildered -> bewild", function() {deepEqual( Stem("bewildered"), "bewild");});
test("bewildering -> bewild", function() {deepEqual( Stem("bewildering"), "bewild");});
test("bewilderment -> bewilder", function() {deepEqual( Stem("bewilderment"), "bewilder");});
test("bewitched -> bewitch", function() {deepEqual( Stem("bewitched"), "bewitch");});
test("bewitching -> bewitch", function() {deepEqual( Stem("bewitching"), "bewitch");});
test("beyond -> beyond", function() {deepEqual( Stem("beyond"), "beyond");});
test("bezants -> bezant", function() {deepEqual( Stem("bezants"), "bezant");});
test("bezzemelny -> bezzemelni", function() {deepEqual( Stem("bezzemelny"), "bezzemelni");});
test("bianchini -> bianchini", function() {deepEqual( Stem("bianchini"), "bianchini");});
test("bias -> bias", function() {deepEqual( Stem("bias"), "bias");});
test("bible -> bibl", function() {deepEqual( Stem("bible"), "bibl");});
test("bibo -> bibo", function() {deepEqual( Stem("bibo"), "bibo");});
test("bibron -> bibron", function() {deepEqual( Stem("bibron"), "bibron");});
test("bid -> bid", function() {deepEqual( Stem("bid"), "bid");});
test("biddable -> biddabl", function() {deepEqual( Stem("biddable"), "biddabl");});
test("bidden -> bidden", function() {deepEqual( Stem("bidden"), "bidden");});
test("bidder -> bidder", function() {deepEqual( Stem("bidder"), "bidder");});
test("bidding -> bid", function() {deepEqual( Stem("bidding"), "bid");});
test("biddy -> biddi", function() {deepEqual( Stem("biddy"), "biddi");});
test("bide -> bide", function() {deepEqual( Stem("bide"), "bide");});
test("biding -> bide", function() {deepEqual( Stem("biding"), "bide");});
test("bids -> bid", function() {deepEqual( Stem("bids"), "bid");});
test("bien -> bien", function() {deepEqual( Stem("bien"), "bien");});
test("biffin -> biffin", function() {deepEqual( Stem("biffin"), "biffin");});
test("bifurcating -> bifurc", function() {deepEqual( Stem("bifurcating"), "bifurc");});
test("bifurcation -> bifurc", function() {deepEqual( Stem("bifurcation"), "bifurc");});
test("big -> big", function() {deepEqual( Stem("big"), "big");});
test("bigamy -> bigami", function() {deepEqual( Stem("bigamy"), "bigami");});
test("bigger -> bigger", function() {deepEqual( Stem("bigger"), "bigger");});
test("biggest -> biggest", function() {deepEqual( Stem("biggest"), "biggest");});
test("bigness -> big", function() {deepEqual( Stem("bigness"), "big");});
test("bigoted -> bigot", function() {deepEqual( Stem("bigoted"), "bigot");});
test("bigotry -> bigotri", function() {deepEqual( Stem("bigotry"), "bigotri");});
test("bile -> bile", function() {deepEqual( Stem("bile"), "bile");});
test("bileing -> bile", function() {deepEqual( Stem("bileing"), "bile");});
test("bilious -> bilious", function() {deepEqual( Stem("bilious"), "bilious");});
test("bill -> bill", function() {deepEqual( Stem("bill"), "bill");});
test("billed -> bill", function() {deepEqual( Stem("billed"), "bill");});
test("billet -> billet", function() {deepEqual( Stem("billet"), "billet");});
test("billeted -> billet", function() {deepEqual( Stem("billeted"), "billet");});
test("billiard -> billiard", function() {deepEqual( Stem("billiard"), "billiard");});
test("billiards -> billiard", function() {deepEqual( Stem("billiards"), "billiard");});
test("billing -> bill", function() {deepEqual( Stem("billing"), "bill");});
test("billows -> billow", function() {deepEqual( Stem("billows"), "billow");});
test("bills -> bill", function() {deepEqual( Stem("bills"), "bill");});
test("bin -> bin", function() {deepEqual( Stem("bin"), "bin");});
test("bind -> bind", function() {deepEqual( Stem("bind"), "bind");});
test("binding -> bind", function() {deepEqual( Stem("binding"), "bind");});
test("bindings -> bind", function() {deepEqual( Stem("bindings"), "bind");});
test("bindloes -> bindlo", function() {deepEqual( Stem("bindloes"), "bindlo");});
test("binds -> bind", function() {deepEqual( Stem("binds"), "bind");});
test("bingley -> bingley", function() {deepEqual( Stem("bingley"), "bingley");});
test("binn -> binn", function() {deepEqual( Stem("binn"), "binn");});
test("biographical -> biograph", function() {deepEqual( Stem("biographical"), "biograph");});
test("biography -> biographi", function() {deepEqual( Stem("biography"), "biographi");});
test("bios -> bio", function() {deepEqual( Stem("bios"), "bio");});
test("biped -> bipe", function() {deepEqual( Stem("biped"), "bipe");});
test("birch -> birch", function() {deepEqual( Stem("birch"), "birch");});
test("bird -> bird", function() {deepEqual( Stem("bird"), "bird");});
test("birdcage -> birdcag", function() {deepEqual( Stem("birdcage"), "birdcag");});
test("birds -> bird", function() {deepEqual( Stem("birds"), "bird");});
test("birgos -> birgo", function() {deepEqual( Stem("birgos"), "birgo");});
test("birmingham -> birmingham", function() {deepEqual( Stem("birmingham"), "birmingham");});
test("birth -> birth", function() {deepEqual( Stem("birth"), "birth");});
test("birthday -> birthday", function() {deepEqual( Stem("birthday"), "birthday");});
test("birthdays -> birthday", function() {deepEqual( Stem("birthdays"), "birthday");});
test("birthplace -> birthplac", function() {deepEqual( Stem("birthplace"), "birthplac");});
test("birthright -> birthright", function() {deepEqual( Stem("birthright"), "birthright");});
test("births -> birth", function() {deepEqual( Stem("births"), "birth");});
test("biscuit -> biscuit", function() {deepEqual( Stem("biscuit"), "biscuit");});
test("biscuits -> biscuit", function() {deepEqual( Stem("biscuits"), "biscuit");});
test("bisecting -> bisect", function() {deepEqual( Stem("bisecting"), "bisect");});
test("bisection -> bisect", function() {deepEqual( Stem("bisection"), "bisect");});
test("bishop -> bishop", function() {deepEqual( Stem("bishop"), "bishop");});
test("bishopgate -> bishopg", function() {deepEqual( Stem("bishopgate"), "bishopg");});
test("bishopric -> bishopr", function() {deepEqual( Stem("bishopric"), "bishopr");});
test("bishops -> bishop", function() {deepEqual( Stem("bishops"), "bishop");});
test("bishopsgate -> bishopsg", function() {deepEqual( Stem("bishopsgate"), "bishopsg");});
test("bismarcks -> bismarck", function() {deepEqual( Stem("bismarcks"), "bismarck");});
test("bisness -> bis", function() {deepEqual( Stem("bisness"), "bis");});
test("bit -> bit", function() {deepEqual( Stem("bit"), "bit");});
test("bitch -> bitch", function() {deepEqual( Stem("bitch"), "bitch");});
test("bite -> bite", function() {deepEqual( Stem("bite"), "bite");});
test("bites -> bite", function() {deepEqual( Stem("bites"), "bite");});
test("biting -> bite", function() {deepEqual( Stem("biting"), "bite");});
test("bits -> bit", function() {deepEqual( Stem("bits"), "bit");});
test("bitted -> bit", function() {deepEqual( Stem("bitted"), "bit");});
test("bitten -> bitten", function() {deepEqual( Stem("bitten"), "bitten");});
test("bitter -> bitter", function() {deepEqual( Stem("bitter"), "bitter");});
test("bitterer -> bitter", function() {deepEqual( Stem("bitterer"), "bitter");});
test("bitterest -> bitterest", function() {deepEqual( Stem("bitterest"), "bitterest");});
test("bitterly -> bitter", function() {deepEqual( Stem("bitterly"), "bitter");});
test("bitterness -> bitter", function() {deepEqual( Stem("bitterness"), "bitter");});
test("bivalves -> bivalv", function() {deepEqual( Stem("bivalves"), "bivalv");});
test("bivouac -> bivouac", function() {deepEqual( Stem("bivouac"), "bivouac");});
test("bivouacked -> bivouack", function() {deepEqual( Stem("bivouacked"), "bivouack");});
test("bivouacking -> bivouack", function() {deepEqual( Stem("bivouacking"), "bivouack");});
test("bizcacha -> bizcacha", function() {deepEqual( Stem("bizcacha"), "bizcacha");});
test("bizcachas -> bizcacha", function() {deepEqual( Stem("bizcachas"), "bizcacha");});
test("blab -> blab", function() {deepEqual( Stem("blab"), "blab");});
test("black -> black", function() {deepEqual( Stem("black"), "black");});
test("blackamoor -> blackamoor", function() {deepEqual( Stem("blackamoor"), "blackamoor");});
test("blackberries -> blackberri", function() {deepEqual( Stem("blackberries"), "blackberri");});
test("blackberry -> blackberri", function() {deepEqual( Stem("blackberry"), "blackberri");});
test("blackbird -> blackbird", function() {deepEqual( Stem("blackbird"), "blackbird");});
test("blacken -> blacken", function() {deepEqual( Stem("blacken"), "blacken");});
test("blackened -> blacken", function() {deepEqual( Stem("blackened"), "blacken");});
test("blackens -> blacken", function() {deepEqual( Stem("blackens"), "blacken");});
test("blacker -> blacker", function() {deepEqual( Stem("blacker"), "blacker");});
test("blackest -> blackest", function() {deepEqual( Stem("blackest"), "blackest");});
test("blackfriars -> blackfriar", function() {deepEqual( Stem("blackfriars"), "blackfriar");});
test("blackguard -> blackguard", function() {deepEqual( Stem("blackguard"), "blackguard");});
test("blackguardly -> blackguard", function() {deepEqual( Stem("blackguardly"), "blackguard");});
test("blackguards -> blackguard", function() {deepEqual( Stem("blackguards"), "blackguard");});
test("blackhaired -> blackhair", function() {deepEqual( Stem("blackhaired"), "blackhair");});
test("blackheath -> blackheath", function() {deepEqual( Stem("blackheath"), "blackheath");});
test("blacking -> black", function() {deepEqual( Stem("blacking"), "black");});
test("blackish -> blackish", function() {deepEqual( Stem("blackish"), "blackish");});
test("blacklead -> blacklead", function() {deepEqual( Stem("blacklead"), "blacklead");});
test("blackleg -> blackleg", function() {deepEqual( Stem("blackleg"), "blackleg");});
test("blacks -> black", function() {deepEqual( Stem("blacks"), "black");});
test("blacksmith -> blacksmith", function() {deepEqual( Stem("blacksmith"), "blacksmith");});
test("blacksmiths -> blacksmith", function() {deepEqual( Stem("blacksmiths"), "blacksmith");});
test("blackstone -> blackston", function() {deepEqual( Stem("blackstone"), "blackston");});
test("blackwall -> blackwal", function() {deepEqual( Stem("blackwall"), "blackwal");});
test("bladder -> bladder", function() {deepEqual( Stem("bladder"), "bladder");});
test("bladders -> bladder", function() {deepEqual( Stem("bladders"), "bladder");});
test("blade -> blade", function() {deepEqual( Stem("blade"), "blade");});
test("bladed -> blade", function() {deepEqual( Stem("bladed"), "blade");});
test("blades -> blade", function() {deepEqual( Stem("blades"), "blade");});
test("blain -> blain", function() {deepEqual( Stem("blain"), "blain");});
test("blamable -> blamabl", function() {deepEqual( Stem("blamable"), "blamabl");});
test("blame -> blame", function() {deepEqual( Stem("blame"), "blame");});
test("blameable -> blameabl", function() {deepEqual( Stem("blameable"), "blameabl");});
test("blamed -> blame", function() {deepEqual( Stem("blamed"), "blame");});
test("blameless -> blameless", function() {deepEqual( Stem("blameless"), "blameless");});
test("blamelessness -> blameless", function() {deepEqual( Stem("blamelessness"), "blameless");});
test("blames -> blame", function() {deepEqual( Stem("blames"), "blame");});
test("blaming -> blame", function() {deepEqual( Stem("blaming"), "blame");});
test("blanc -> blanc", function() {deepEqual( Stem("blanc"), "blanc");});
test("blanca -> blanca", function() {deepEqual( Stem("blanca"), "blanca");});
test("blanche -> blanch", function() {deepEqual( Stem("blanche"), "blanch");});
test("blanched -> blanch", function() {deepEqual( Stem("blanched"), "blanch");});
test("blanco -> blanco", function() {deepEqual( Stem("blanco"), "blanco");});
test("bland -> bland", function() {deepEqual( Stem("bland"), "bland");});
test("blandest -> blandest", function() {deepEqual( Stem("blandest"), "blandest");});
test("blandishments -> blandish", function() {deepEqual( Stem("blandishments"), "blandish");});
test("blandly -> bland", function() {deepEqual( Stem("blandly"), "bland");});
test("blank -> blank", function() {deepEqual( Stem("blank"), "blank");});
test("blanket -> blanket", function() {deepEqual( Stem("blanket"), "blanket");});
test("blankets -> blanket", function() {deepEqual( Stem("blankets"), "blanket");});
test("blankly -> blank", function() {deepEqual( Stem("blankly"), "blank");});
test("blankness -> blank", function() {deepEqual( Stem("blankness"), "blank");});
test("blanks -> blank", function() {deepEqual( Stem("blanks"), "blank");});
test("blas -> blas", function() {deepEqual( Stem("blas"), "blas");});
test("blasphemer -> blasphem", function() {deepEqual( Stem("blasphemer"), "blasphem");});
test("blasphemy -> blasphemi", function() {deepEqual( Stem("blasphemy"), "blasphemi");});
test("blast -> blast", function() {deepEqual( Stem("blast"), "blast");});
test("blasted -> blast", function() {deepEqual( Stem("blasted"), "blast");});
test("blasts -> blast", function() {deepEqual( Stem("blasts"), "blast");});
test("blatta -> blatta", function() {deepEqual( Stem("blatta"), "blatta");});
test("blaze -> blaze", function() {deepEqual( Stem("blaze"), "blaze");});
test("blazing -> blaze", function() {deepEqual( Stem("blazing"), "blaze");});
test("blazoned -> blazon", function() {deepEqual( Stem("blazoned"), "blazon");});
test("bleached -> bleach", function() {deepEqual( Stem("bleached"), "bleach");});
test("bleak -> bleak", function() {deepEqual( Stem("bleak"), "bleak");});
test("bleakness -> bleak", function() {deepEqual( Stem("bleakness"), "bleak");});
test("blear -> blear", function() {deepEqual( Stem("blear"), "blear");});
test("bleared -> blear", function() {deepEqual( Stem("bleared"), "blear");});
test("bled -> bled", function() {deepEqual( Stem("bled"), "bled");});
test("bleed -> bleed", function() {deepEqual( Stem("bleed"), "bleed");});
test("bleeding -> bleed", function() {deepEqual( Stem("bleeding"), "bleed");});
test("blemish -> blemish", function() {deepEqual( Stem("blemish"), "blemish");});
test("blemishes -> blemish", function() {deepEqual( Stem("blemishes"), "blemish");});
test("blench -> blench", function() {deepEqual( Stem("blench"), "blench");});
test("blended -> blend", function() {deepEqual( Stem("blended"), "blend");});
test("blending -> blend", function() {deepEqual( Stem("blending"), "blend");});
test("blends -> blend", function() {deepEqual( Stem("blends"), "blend");});
test("bless -> bless", function() {deepEqual( Stem("bless"), "bless");});
test("blessed -> bless", function() {deepEqual( Stem("blessed"), "bless");});
test("blessedness -> blessed", function() {deepEqual( Stem("blessedness"), "blessed");});
test("blesses -> bless", function() {deepEqual( Stem("blesses"), "bless");});
test("blessing -> bless", function() {deepEqual( Stem("blessing"), "bless");});
test("blessings -> bless", function() {deepEqual( Stem("blessings"), "bless");});
test("blest -> blest", function() {deepEqual( Stem("blest"), "blest");});
test("blew -> blew", function() {deepEqual( Stem("blew"), "blew");});
test("blight -> blight", function() {deepEqual( Stem("blight"), "blight");});
test("blighted -> blight", function() {deepEqual( Stem("blighted"), "blight");});
test("blighting -> blight", function() {deepEqual( Stem("blighting"), "blight");});
test("blights -> blight", function() {deepEqual( Stem("blights"), "blight");});
test("blind -> blind", function() {deepEqual( Stem("blind"), "blind");});
test("blinded -> blind", function() {deepEqual( Stem("blinded"), "blind");});
test("blinder -> blinder", function() {deepEqual( Stem("blinder"), "blinder");});
test("blindfolding -> blindfold", function() {deepEqual( Stem("blindfolding"), "blindfold");});
test("blinding -> blind", function() {deepEqual( Stem("blinding"), "blind");});
test("blindly -> blind", function() {deepEqual( Stem("blindly"), "blind");});
test("blindness -> blind", function() {deepEqual( Stem("blindness"), "blind");});
test("blindnesses -> blind", function() {deepEqual( Stem("blindnesses"), "blind");});
test("blinds -> blind", function() {deepEqual( Stem("blinds"), "blind");});
test("blink -> blink", function() {deepEqual( Stem("blink"), "blink");});
test("blinkers -> blinker", function() {deepEqual( Stem("blinkers"), "blinker");});
test("blinking -> blink", function() {deepEqual( Stem("blinking"), "blink");});
test("blinks -> blink", function() {deepEqual( Stem("blinks"), "blink");});
test("bliss -> bliss", function() {deepEqual( Stem("bliss"), "bliss");});
test("blissful -> bliss", function() {deepEqual( Stem("blissful"), "bliss");});
test("blister -> blister", function() {deepEqual( Stem("blister"), "blister");});
test("blistered -> blister", function() {deepEqual( Stem("blistered"), "blister");});
test("blistering -> blister", function() {deepEqual( Stem("blistering"), "blister");});
test("blithe -> blith", function() {deepEqual( Stem("blithe"), "blith");});
test("blitheness -> blith", function() {deepEqual( Stem("blitheness"), "blith");});
test("blo -> blo", function() {deepEqual( Stem("blo"), "blo");});
test("bloated -> bloat", function() {deepEqual( Stem("bloated"), "bloat");});
test("block -> block", function() {deepEqual( Stem("block"), "block");});
test("blockade -> blockad", function() {deepEqual( Stem("blockade"), "blockad");});
test("blockaded -> blockad", function() {deepEqual( Stem("blockaded"), "blockad");});
test("blocked -> block", function() {deepEqual( Stem("blocked"), "block");});
test("blockhead -> blockhead", function() {deepEqual( Stem("blockhead"), "blockhead");});
test("blockheads -> blockhead", function() {deepEqual( Stem("blockheads"), "blockhead");});
test("blocking -> block", function() {deepEqual( Stem("blocking"), "block");});
test("blocks -> block", function() {deepEqual( Stem("blocks"), "block");});
test("blockson -> blockson", function() {deepEqual( Stem("blockson"), "blockson");});
test("blood -> blood", function() {deepEqual( Stem("blood"), "blood");});
test("blooded -> blood", function() {deepEqual( Stem("blooded"), "blood");});
test("bloodhound -> bloodhound", function() {deepEqual( Stem("bloodhound"), "bloodhound");});
test("bloodless -> bloodless", function() {deepEqual( Stem("bloodless"), "bloodless");});
test("bloodlessness -> bloodless", function() {deepEqual( Stem("bloodlessness"), "bloodless");});
test("bloods -> blood", function() {deepEqual( Stem("bloods"), "blood");});
test("bloodshed -> bloodsh", function() {deepEqual( Stem("bloodshed"), "bloodsh");});
test("bloodshot -> bloodshot", function() {deepEqual( Stem("bloodshot"), "bloodshot");});
test("bloodthirsty -> bloodthirsti", function() {deepEqual( Stem("bloodthirsty"), "bloodthirsti");});
test("bloody -> bloodi", function() {deepEqual( Stem("bloody"), "bloodi");});
test("bloom -> bloom", function() {deepEqual( Stem("bloom"), "bloom");});
test("bloometh -> bloometh", function() {deepEqual( Stem("bloometh"), "bloometh");});
test("blooming -> bloom", function() {deepEqual( Stem("blooming"), "bloom");});
test("bloomsbury -> bloomsburi", function() {deepEqual( Stem("bloomsbury"), "bloomsburi");});
test("blossom -> blossom", function() {deepEqual( Stem("blossom"), "blossom");});
test("blossomed -> blossom", function() {deepEqual( Stem("blossomed"), "blossom");});
test("blossoming -> blossom", function() {deepEqual( Stem("blossoming"), "blossom");});
test("blossoms -> blossom", function() {deepEqual( Stem("blossoms"), "blossom");});
test("blot -> blot", function() {deepEqual( Stem("blot"), "blot");});
test("blotches -> blotch", function() {deepEqual( Stem("blotches"), "blotch");});
test("blotchy -> blotchi", function() {deepEqual( Stem("blotchy"), "blotchi");});
test("blots -> blot", function() {deepEqual( Stem("blots"), "blot");});
test("blotted -> blot", function() {deepEqual( Stem("blotted"), "blot");});
test("blotting -> blot", function() {deepEqual( Stem("blotting"), "blot");});
test("blow -> blow", function() {deepEqual( Stem("blow"), "blow");});
test("blowed -> blow", function() {deepEqual( Stem("blowed"), "blow");});
test("blower -> blower", function() {deepEqual( Stem("blower"), "blower");});
test("blowers -> blower", function() {deepEqual( Stem("blowers"), "blower");});
test("blowing -> blow", function() {deepEqual( Stem("blowing"), "blow");});
test("blown -> blown", function() {deepEqual( Stem("blown"), "blown");});
test("blowpipe -> blowpip", function() {deepEqual( Stem("blowpipe"), "blowpip");});
test("blows -> blow", function() {deepEqual( Stem("blows"), "blow");});
test("blubber -> blubber", function() {deepEqual( Stem("blubber"), "blubber");});
test("blubbered -> blubber", function() {deepEqual( Stem("blubbered"), "blubber");});
test("bludgeon -> bludgeon", function() {deepEqual( Stem("bludgeon"), "bludgeon");});
test("bludgeons -> bludgeon", function() {deepEqual( Stem("bludgeons"), "bludgeon");});
test("blue -> blue", function() {deepEqual( Stem("blue"), "blue");});
test("bluebells -> bluebel", function() {deepEqual( Stem("bluebells"), "bluebel");});
test("blues -> blue", function() {deepEqual( Stem("blues"), "blue");});
test("bluff -> bluff", function() {deepEqual( Stem("bluff"), "bluff");});
test("bluffy -> bluffi", function() {deepEqual( Stem("bluffy"), "bluffi");});
test("bluid -> bluid", function() {deepEqual( Stem("bluid"), "bluid");});
test("bluish -> bluish", function() {deepEqual( Stem("bluish"), "bluish");});
test("blulfy -> blulfi", function() {deepEqual( Stem("blulfy"), "blulfi");});
test("blunder -> blunder", function() {deepEqual( Stem("blunder"), "blunder");});
test("blunderbore -> blunderbor", function() {deepEqual( Stem("blunderbore"), "blunderbor");});
test("blunderbus -> blunderbus", function() {deepEqual( Stem("blunderbus"), "blunderbus");});
test("blunderbuss -> blunderbuss", function() {deepEqual( Stem("blunderbuss"), "blunderbuss");});
test("blundered -> blunder", function() {deepEqual( Stem("blundered"), "blunder");});
test("blundering -> blunder", function() {deepEqual( Stem("blundering"), "blunder");});
test("blunders -> blunder", function() {deepEqual( Stem("blunders"), "blunder");});
test("blunt -> blunt", function() {deepEqual( Stem("blunt"), "blunt");});
test("blunted -> blunt", function() {deepEqual( Stem("blunted"), "blunt");});
test("bluntly -> blunt", function() {deepEqual( Stem("bluntly"), "blunt");});
test("bluntness -> blunt", function() {deepEqual( Stem("bluntness"), "blunt");});
test("blur -> blur", function() {deepEqual( Stem("blur"), "blur");});
test("blurs -> blur", function() {deepEqual( Stem("blurs"), "blur");});
test("blurt -> blurt", function() {deepEqual( Stem("blurt"), "blurt");});
test("blurted -> blurt", function() {deepEqual( Stem("blurted"), "blurt");});
test("blurting -> blurt", function() {deepEqual( Stem("blurting"), "blurt");});
test("blurts -> blurt", function() {deepEqual( Stem("blurts"), "blurt");});
test("blush -> blush", function() {deepEqual( Stem("blush"), "blush");});
test("blushed -> blush", function() {deepEqual( Stem("blushed"), "blush");});
test("blushes -> blush", function() {deepEqual( Stem("blushes"), "blush");});
test("blushing -> blush", function() {deepEqual( Stem("blushing"), "blush");});
test("blushingly -> blush", function() {deepEqual( Stem("blushingly"), "blush");});
test("bluster -> bluster", function() {deepEqual( Stem("bluster"), "bluster");});
test("blusterers -> bluster", function() {deepEqual( Stem("blusterers"), "bluster");});
test("blustering -> bluster", function() {deepEqual( Stem("blustering"), "bluster");});
test("bo -> bo", function() {deepEqual( Stem("bo"), "bo");});
test("boa -> boa", function() {deepEqual( Stem("boa"), "boa");});
test("boan -> boan", function() {deepEqual( Stem("boan"), "boan");});
test("boans -> boan", function() {deepEqual( Stem("boans"), "boan");});
test("boar -> boar", function() {deepEqual( Stem("boar"), "boar");});
test("board -> board", function() {deepEqual( Stem("board"), "board");});
test("boarded -> board", function() {deepEqual( Stem("boarded"), "board");});
test("boarder -> boarder", function() {deepEqual( Stem("boarder"), "boarder");});
test("boarders -> boarder", function() {deepEqual( Stem("boarders"), "boarder");});
test("boarding -> board", function() {deepEqual( Stem("boarding"), "board");});
test("boards -> board", function() {deepEqual( Stem("boards"), "board");});
test("boars -> boar", function() {deepEqual( Stem("boars"), "boar");});
test("boas -> boa", function() {deepEqual( Stem("boas"), "boa");});
test("boast -> boast", function() {deepEqual( Stem("boast"), "boast");});
test("boasted -> boast", function() {deepEqual( Stem("boasted"), "boast");});
test("boastful -> boast", function() {deepEqual( Stem("boastful"), "boast");});
test("boastfully -> boast", function() {deepEqual( Stem("boastfully"), "boast");});
test("boastfulness -> boast", function() {deepEqual( Stem("boastfulness"), "boast");});
test("boasting -> boast", function() {deepEqual( Stem("boasting"), "boast");});
test("boasts -> boast", function() {deepEqual( Stem("boasts"), "boast");});
test("boat -> boat", function() {deepEqual( Stem("boat"), "boat");});
test("boating -> boat", function() {deepEqual( Stem("boating"), "boat");});
test("boats -> boat", function() {deepEqual( Stem("boats"), "boat");});
test("bob -> bob", function() {deepEqual( Stem("bob"), "bob");});
test("bobbed -> bob", function() {deepEqual( Stem("bobbed"), "bob");});
test("bobbing -> bob", function() {deepEqual( Stem("bobbing"), "bob");});
test("bobbish -> bobbish", function() {deepEqual( Stem("bobbish"), "bobbish");});
test("bobs -> bob", function() {deepEqual( Stem("bobs"), "bob");});
test("bobster -> bobster", function() {deepEqual( Stem("bobster"), "bobster");});
test("bod -> bod", function() {deepEqual( Stem("bod"), "bod");});
test("boddy -> boddi", function() {deepEqual( Stem("boddy"), "boddi");});
test("bodice -> bodic", function() {deepEqual( Stem("bodice"), "bodic");});
test("bodied -> bodi", function() {deepEqual( Stem("bodied"), "bodi");});
test("bodies -> bodi", function() {deepEqual( Stem("bodies"), "bodi");});
test("bodilessness -> bodiless", function() {deepEqual( Stem("bodilessness"), "bodiless");});
test("bodily -> bodili", function() {deepEqual( Stem("bodily"), "bodili");});
test("boding -> bode", function() {deepEqual( Stem("boding"), "bode");});
test("bodkins -> bodkin", function() {deepEqual( Stem("bodkins"), "bodkin");});
test("body -> bodi", function() {deepEqual( Stem("body"), "bodi");});
test("boer -> boer", function() {deepEqual( Stem("boer"), "boer");});
test("boffin -> boffin", function() {deepEqual( Stem("boffin"), "boffin");});
test("boffinites -> boffinit", function() {deepEqual( Stem("boffinites"), "boffinit");});
test("bog -> bog", function() {deepEqual( Stem("bog"), "bog");});
test("bogg -> bogg", function() {deepEqual( Stem("bogg"), "bogg");});
test("bogsby -> bogsbi", function() {deepEqual( Stem("bogsby"), "bogsbi");});
test("boguey -> boguey", function() {deepEqual( Stem("boguey"), "boguey");});
test("bohemianism -> bohemian", function() {deepEqual( Stem("bohemianism"), "bohemian");});
test("bohemond -> bohemond", function() {deepEqual( Stem("bohemond"), "bohemond");});
test("boil -> boil", function() {deepEqual( Stem("boil"), "boil");});
test("boiled -> boil", function() {deepEqual( Stem("boiled"), "boil");});
test("boiler -> boiler", function() {deepEqual( Stem("boiler"), "boiler");});
test("boilers -> boiler", function() {deepEqual( Stem("boilers"), "boiler");});
test("boiling -> boil", function() {deepEqual( Stem("boiling"), "boil");});
test("boils -> boil", function() {deepEqual( Stem("boils"), "boil");});
test("bois -> boi", function() {deepEqual( Stem("bois"), "boi");});
test("boisterous -> boister", function() {deepEqual( Stem("boisterous"), "boister");});
test("boisterously -> boister", function() {deepEqual( Stem("boisterously"), "boister");});
test("bolabola -> bolabola", function() {deepEqual( Stem("bolabola"), "bolabola");});
test("bolas -> bola", function() {deepEqual( Stem("bolas"), "bola");});
test("bold -> bold", function() {deepEqual( Stem("bold"), "bold");});
test("bolder -> bolder", function() {deepEqual( Stem("bolder"), "bolder");});
test("boldest -> boldest", function() {deepEqual( Stem("boldest"), "boldest");});
test("boldly -> bold", function() {deepEqual( Stem("boldly"), "bold");});
test("boldness -> bold", function() {deepEqual( Stem("boldness"), "bold");});
test("bole -> bole", function() {deepEqual( Stem("bole"), "bole");});
test("boles -> bole", function() {deepEqual( Stem("boles"), "bole");});
test("bolivia -> bolivia", function() {deepEqual( Stem("bolivia"), "bolivia");});
test("bolivian -> bolivian", function() {deepEqual( Stem("bolivian"), "bolivian");});
test("bolster -> bolster", function() {deepEqual( Stem("bolster"), "bolster");});
test("bolt -> bolt", function() {deepEqual( Stem("bolt"), "bolt");});
test("bolted -> bolt", function() {deepEqual( Stem("bolted"), "bolt");});
test("bolter -> bolter", function() {deepEqual( Stem("bolter"), "bolter");});
test("bolting -> bolt", function() {deepEqual( Stem("bolting"), "bolt");});
test("bolts -> bolt", function() {deepEqual( Stem("bolts"), "bolt");});
test("bomb -> bomb", function() {deepEqual( Stem("bomb"), "bomb");});
test("bombarding -> bombard", function() {deepEqual( Stem("bombarding"), "bombard");});
test("bombs -> bomb", function() {deepEqual( Stem("bombs"), "bomb");});
test("bon -> bon", function() {deepEqual( Stem("bon"), "bon");});
test("bona -> bona", function() {deepEqual( Stem("bona"), "bona");});
test("bond -> bond", function() {deepEqual( Stem("bond"), "bond");});
test("bondage -> bondag", function() {deepEqual( Stem("bondage"), "bondag");});
test("bonds -> bond", function() {deepEqual( Stem("bonds"), "bond");});
test("bone -> bone", function() {deepEqual( Stem("bone"), "bone");});
test("boned -> bone", function() {deepEqual( Stem("boned"), "bone");});
test("bones -> bone", function() {deepEqual( Stem("bones"), "bone");});
test("bonfires -> bonfir", function() {deepEqual( Stem("bonfires"), "bonfir");});
test("bonitos -> bonito", function() {deepEqual( Stem("bonitos"), "bonito");});
test("bonjour -> bonjour", function() {deepEqual( Stem("bonjour"), "bonjour");});
test("bonn -> bonn", function() {deepEqual( Stem("bonn"), "bonn");});
test("bonne -> bonn", function() {deepEqual( Stem("bonne"), "bonn");});
test("bonnet -> bonnet", function() {deepEqual( Stem("bonnet"), "bonnet");});
test("bonnets -> bonnet", function() {deepEqual( Stem("bonnets"), "bonnet");});
test("bonney -> bonney", function() {deepEqual( Stem("bonney"), "bonney");});
test("bonny -> bonni", function() {deepEqual( Stem("bonny"), "bonni");});
test("bonpland -> bonpland", function() {deepEqual( Stem("bonpland"), "bonpland");});
test("bons -> bon", function() {deepEqual( Stem("bons"), "bon");});
test("bony -> boni", function() {deepEqual( Stem("bony"), "boni");});
test("booby -> boobi", function() {deepEqual( Stem("booby"), "boobi");});
test("boodle -> boodl", function() {deepEqual( Stem("boodle"), "boodl");});
test("boody -> boodi", function() {deepEqual( Stem("boody"), "boodi");});
test("book -> book", function() {deepEqual( Stem("book"), "book");});
test("bookcase -> bookcas", function() {deepEqual( Stem("bookcase"), "bookcas");});
test("booked -> book", function() {deepEqual( Stem("booked"), "book");});
test("booker -> booker", function() {deepEqual( Stem("booker"), "booker");});
test("booking -> book", function() {deepEqual( Stem("booking"), "book");});
test("bookish -> bookish", function() {deepEqual( Stem("bookish"), "bookish");});
test("books -> book", function() {deepEqual( Stem("books"), "book");});
test("bookseller -> booksel", function() {deepEqual( Stem("bookseller"), "booksel");});
test("booksellers -> booksel", function() {deepEqual( Stem("booksellers"), "booksel");});
test("bookstall -> bookstal", function() {deepEqual( Stem("bookstall"), "bookstal");});
test("bookworms -> bookworm", function() {deepEqual( Stem("bookworms"), "bookworm");});
test("boom -> boom", function() {deepEqual( Stem("boom"), "boom");});
test("boomerang -> boomerang", function() {deepEqual( Stem("boomerang"), "boomerang");});
test("boon -> boon", function() {deepEqual( Stem("boon"), "boon");});
test("boorioboola -> boorioboola", function() {deepEqual( Stem("boorioboola"), "boorioboola");});
test("boorly -> boor", function() {deepEqual( Stem("boorly"), "boor");});
test("boost -> boost", function() {deepEqual( Stem("boost"), "boost");});
test("boot -> boot", function() {deepEqual( Stem("boot"), "boot");});
test("booth -> booth", function() {deepEqual( Stem("booth"), "booth");});
test("booths -> booth", function() {deepEqual( Stem("booths"), "booth");});
test("boots -> boot", function() {deepEqual( Stem("boots"), "boot");});
test("bootuns -> bootun", function() {deepEqual( Stem("bootuns"), "bootun");});
test("booty -> booti", function() {deepEqual( Stem("booty"), "booti");});
test("boozed -> booz", function() {deepEqual( Stem("boozed"), "booz");});
test("boozums -> boozum", function() {deepEqual( Stem("boozums"), "boozum");});
test("bor -> bor", function() {deepEqual( Stem("bor"), "bor");});
test("bord -> bord", function() {deepEqual( Stem("bord"), "bord");});
test("border -> border", function() {deepEqual( Stem("border"), "border");});
test("bordered -> border", function() {deepEqual( Stem("bordered"), "border");});
test("bordering -> border", function() {deepEqual( Stem("bordering"), "border");});
test("borders -> border", function() {deepEqual( Stem("borders"), "border");});
test("bore -> bore", function() {deepEqual( Stem("bore"), "bore");});
test("boreali -> boreali", function() {deepEqual( Stem("boreali"), "boreali");});
test("boreas -> borea", function() {deepEqual( Stem("boreas"), "borea");});
test("bored -> bore", function() {deepEqual( Stem("bored"), "bore");});
test("boredom -> boredom", function() {deepEqual( Stem("boredom"), "boredom");});
test("bores -> bore", function() {deepEqual( Stem("bores"), "bore");});
test("boring -> bore", function() {deepEqual( Stem("boring"), "bore");});
test("born -> born", function() {deepEqual( Stem("born"), "born");});
test("borne -> born", function() {deepEqual( Stem("borne"), "born");});
test("borneo -> borneo", function() {deepEqual( Stem("borneo"), "borneo");});
test("borough -> borough", function() {deepEqual( Stem("borough"), "borough");});
test("boroughbridge -> boroughbridg", function() {deepEqual( Stem("boroughbridge"), "boroughbridg");});
test("boroughmongering -> boroughmong", function() {deepEqual( Stem("boroughmongering"), "boroughmong");});
test("boroughs -> borough", function() {deepEqual( Stem("boroughs"), "borough");});
test("borreria -> borreria", function() {deepEqual( Stem("borreria"), "borreria");});
test("borrioboola -> borrioboola", function() {deepEqual( Stem("borrioboola"), "borrioboola");});
test("borrioboolan -> borrioboolan", function() {deepEqual( Stem("borrioboolan"), "borrioboolan");});
test("borriohoola -> borriohoola", function() {deepEqual( Stem("borriohoola"), "borriohoola");});
test("borrow -> borrow", function() {deepEqual( Stem("borrow"), "borrow");});
test("borrowed -> borrow", function() {deepEqual( Stem("borrowed"), "borrow");});
test("borrower -> borrow", function() {deepEqual( Stem("borrower"), "borrow");});
test("borrowers -> borrow", function() {deepEqual( Stem("borrowers"), "borrow");});
test("borrowing -> borrow", function() {deepEqual( Stem("borrowing"), "borrow");});
test("borrows -> borrow", function() {deepEqual( Stem("borrows"), "borrow");});
test("borum -> borum", function() {deepEqual( Stem("borum"), "borum");});
test("bory -> bori", function() {deepEqual( Stem("bory"), "bori");});
test("bos -> bos", function() {deepEqual( Stem("bos"), "bos");});
test("bosh -> bosh", function() {deepEqual( Stem("bosh"), "bosh");});
test("bosom -> bosom", function() {deepEqual( Stem("bosom"), "bosom");});
test("bosomer -> bosom", function() {deepEqual( Stem("bosomer"), "bosom");});
test("bosoms -> bosom", function() {deepEqual( Stem("bosoms"), "bosom");});
test("bosses -> boss", function() {deepEqual( Stem("bosses"), "boss");});
test("boston -> boston", function() {deepEqual( Stem("boston"), "boston");});
test("bot -> bot", function() {deepEqual( Stem("bot"), "bot");});
test("botanic -> botan", function() {deepEqual( Stem("botanic"), "botan");});
test("botanical -> botan", function() {deepEqual( Stem("botanical"), "botan");});
test("botanist -> botanist", function() {deepEqual( Stem("botanist"), "botanist");});
test("botanists -> botanist", function() {deepEqual( Stem("botanists"), "botanist");});
test("botanizing -> botan", function() {deepEqual( Stem("botanizing"), "botan");});
test("botany -> botani", function() {deepEqual( Stem("botany"), "botani");});
test("both -> both", function() {deepEqual( Stem("both"), "both");});
test("bother -> bother", function() {deepEqual( Stem("bother"), "bother");});
test("botheration -> bother", function() {deepEqual( Stem("botheration"), "bother");});
test("bothered -> bother", function() {deepEqual( Stem("bothered"), "bother");});
test("bothering -> bother", function() {deepEqual( Stem("bothering"), "bother");});
test("botofogo -> botofogo", function() {deepEqual( Stem("botofogo"), "botofogo");});
test("bott -> bott", function() {deepEqual( Stem("bott"), "bott");});
test("bottin -> bottin", function() {deepEqual( Stem("bottin"), "bottin");});
test("bottinney -> bottinney", function() {deepEqual( Stem("bottinney"), "bottinney");});
test("bottle -> bottl", function() {deepEqual( Stem("bottle"), "bottl");});
test("bottled -> bottl", function() {deepEqual( Stem("bottled"), "bottl");});
test("bottles -> bottl", function() {deepEqual( Stem("bottles"), "bottl");});
test("bottom -> bottom", function() {deepEqual( Stem("bottom"), "bottom");});
test("bottomed -> bottom", function() {deepEqual( Stem("bottomed"), "bottom");});
test("bottomless -> bottomless", function() {deepEqual( Stem("bottomless"), "bottomless");});
test("bottoms -> bottom", function() {deepEqual( Stem("bottoms"), "bottom");});
test("boudoir -> boudoir", function() {deepEqual( Stem("boudoir"), "boudoir");});
test("bougainville -> bougainvill", function() {deepEqual( Stem("bougainville"), "bougainvill");});
test("boughs -> bough", function() {deepEqual( Stem("boughs"), "bough");});
test("bought -> bought", function() {deepEqual( Stem("bought"), "bought");});
test("boulder -> boulder", function() {deepEqual( Stem("boulder"), "boulder");});
test("boulders -> boulder", function() {deepEqual( Stem("boulders"), "boulder");});
test("boulevard -> boulevard", function() {deepEqual( Stem("boulevard"), "boulevard");});
test("bouleversees -> bouleverse", function() {deepEqual( Stem("bouleversees"), "bouleverse");});
test("boulogne -> boulogn", function() {deepEqual( Stem("boulogne"), "boulogn");});
test("boulong -> boulong", function() {deepEqual( Stem("boulong"), "boulong");});
test("bounced -> bounc", function() {deepEqual( Stem("bounced"), "bounc");});
test("bouncing -> bounc", function() {deepEqual( Stem("bouncing"), "bounc");});
test("bound -> bound", function() {deepEqual( Stem("bound"), "bound");});
test("boundaries -> boundari", function() {deepEqual( Stem("boundaries"), "boundari");});
test("boundary -> boundari", function() {deepEqual( Stem("boundary"), "boundari");});
test("bounde -> bound", function() {deepEqual( Stem("bounde"), "bound");});
test("bounded -> bound", function() {deepEqual( Stem("bounded"), "bound");});
test("bounden -> bounden", function() {deepEqual( Stem("bounden"), "bounden");});
test("bounding -> bound", function() {deepEqual( Stem("bounding"), "bound");});
test("boundless -> boundless", function() {deepEqual( Stem("boundless"), "boundless");});
test("bounds -> bound", function() {deepEqual( Stem("bounds"), "bound");});
test("boung -> boung", function() {deepEqual( Stem("boung"), "boung");});
test("boungites -> boungit", function() {deepEqual( Stem("boungites"), "boungit");});
test("bountiful -> bounti", function() {deepEqual( Stem("bountiful"), "bounti");});
test("bounty -> bounti", function() {deepEqual( Stem("bounty"), "bounti");});
test("bouquet -> bouquet", function() {deepEqual( Stem("bouquet"), "bouquet");});
test("bouquets -> bouquet", function() {deepEqual( Stem("bouquets"), "bouquet");});
test("bourbon -> bourbon", function() {deepEqual( Stem("bourbon"), "bourbon");});
test("bourgeois -> bourgeoi", function() {deepEqual( Stem("bourgeois"), "bourgeoi");});
test("bourne -> bourn", function() {deepEqual( Stem("bourne"), "bourn");});
test("bout -> bout", function() {deepEqual( Stem("bout"), "bout");});
test("bow -> bow", function() {deepEqual( Stem("bow"), "bow");});
test("bowed -> bow", function() {deepEqual( Stem("bowed"), "bow");});
test("bowels -> bowel", function() {deepEqual( Stem("bowels"), "bowel");});
test("bower -> bower", function() {deepEqual( Stem("bower"), "bower");});
test("bowered -> bower", function() {deepEqual( Stem("bowered"), "bower");});
test("bowers -> bower", function() {deepEqual( Stem("bowers"), "bower");});
test("bowery -> boweri", function() {deepEqual( Stem("bowery"), "boweri");});
test("bowing -> bow", function() {deepEqual( Stem("bowing"), "bow");});
test("bowl -> bowl", function() {deepEqual( Stem("bowl"), "bowl");});
test("bowled -> bowl", function() {deepEqual( Stem("bowled"), "bowl");});
test("bowling -> bowl", function() {deepEqual( Stem("bowling"), "bowl");});
test("bowls -> bowl", function() {deepEqual( Stem("bowls"), "bowl");});
test("bows -> bow", function() {deepEqual( Stem("bows"), "bow");});
test("box -> box", function() {deepEqual( Stem("box"), "box");});
test("boxed -> box", function() {deepEqual( Stem("boxed"), "box");});
test("boxes -> box", function() {deepEqual( Stem("boxes"), "box");});
test("boxing -> box", function() {deepEqual( Stem("boxing"), "box");});
test("boy -> boy", function() {deepEqual( Stem("boy"), "boy");});
test("boyhood -> boyhood", function() {deepEqual( Stem("boyhood"), "boyhood");});
test("boyish -> boyish", function() {deepEqual( Stem("boyish"), "boyish");});
test("boys -> boy", function() {deepEqual( Stem("boys"), "boy");});
test("boytborn -> boytborn", function() {deepEqual( Stem("boytborn"), "boytborn");});
test("boythorn -> boythorn", function() {deepEqual( Stem("boythorn"), "boythorn");});
test("brabantio -> brabantio", function() {deepEqual( Stem("brabantio"), "brabantio");});
test("brace -> brace", function() {deepEqual( Stem("brace"), "brace");});
test("braced -> brace", function() {deepEqual( Stem("braced"), "brace");});
test("bracelet -> bracelet", function() {deepEqual( Stem("bracelet"), "bracelet");});
test("bracelets -> bracelet", function() {deepEqual( Stem("bracelets"), "bracelet");});
test("braces -> brace", function() {deepEqual( Stem("braces"), "brace");});
test("brachelytra -> brachelytra", function() {deepEqual( Stem("brachelytra"), "brachelytra");});
test("brachiotis -> brachioti", function() {deepEqual( Stem("brachiotis"), "brachioti");});
test("brachyptera -> brachyptera", function() {deepEqual( Stem("brachyptera"), "brachyptera");});
test("bracing -> brace", function() {deepEqual( Stem("bracing"), "brace");});
test("brackish -> brackish", function() {deepEqual( Stem("brackish"), "brackish");});
test("bradshaw -> bradshaw", function() {deepEqual( Stem("bradshaw"), "bradshaw");});
test("brag -> brag", function() {deepEqual( Stem("brag"), "brag");});
test("braggadocio -> braggadocio", function() {deepEqual( Stem("braggadocio"), "braggadocio");});
test("braggart -> braggart", function() {deepEqual( Stem("braggart"), "braggart");});
test("bragging -> brag", function() {deepEqual( Stem("bragging"), "brag");});
test("braid -> braid", function() {deepEqual( Stem("braid"), "braid");});
test("braided -> braid", function() {deepEqual( Stem("braided"), "braid");});
test("braids -> braid", function() {deepEqual( Stem("braids"), "braid");});
test("brain -> brain", function() {deepEqual( Stem("brain"), "brain");});
test("brained -> brain", function() {deepEqual( Stem("brained"), "brain");});
test("brainless -> brainless", function() {deepEqual( Stem("brainless"), "brainless");});
test("brains -> brain", function() {deepEqual( Stem("brains"), "brain");});
test("brak -> brak", function() {deepEqual( Stem("brak"), "brak");});
test("brake -> brake", function() {deepEqual( Stem("brake"), "brake");});
test("brakes -> brake", function() {deepEqual( Stem("brakes"), "brake");});
test("bramador -> bramador", function() {deepEqual( Stem("bramador"), "bramador");});
test("brambles -> brambl", function() {deepEqual( Stem("brambles"), "brambl");});
test("bran -> bran", function() {deepEqual( Stem("bran"), "bran");});
test("branc -> branc", function() {deepEqual( Stem("branc"), "branc");});
test("branch -> branch", function() {deepEqual( Stem("branch"), "branch");});
test("branched -> branch", function() {deepEqual( Stem("branched"), "branch");});
test("branches -> branch", function() {deepEqual( Stem("branches"), "branch");});
test("branchiae -> branchia", function() {deepEqual( Stem("branchiae"), "branchia");});
test("branchial -> branchial", function() {deepEqual( Stem("branchial"), "branchial");});
test("branching -> branch", function() {deepEqual( Stem("branching"), "branch");});
test("brand -> brand", function() {deepEqual( Stem("brand"), "brand");});
test("branded -> brand", function() {deepEqual( Stem("branded"), "brand");});
test("branding -> brand", function() {deepEqual( Stem("branding"), "brand");});
test("brandished -> brandish", function() {deepEqual( Stem("brandished"), "brandish");});
test("brandishing -> brandish", function() {deepEqual( Stem("brandishing"), "brandish");});
test("brandon -> brandon", function() {deepEqual( Stem("brandon"), "brandon");});
test("brandons -> brandon", function() {deepEqual( Stem("brandons"), "brandon");});
test("brandy -> brandi", function() {deepEqual( Stem("brandy"), "brandi");});
test("brash -> brash", function() {deepEqual( Stem("brash"), "brash");});
test("brasiliensis -> brasiliensi", function() {deepEqual( Stem("brasiliensis"), "brasiliensi");});
test("brass -> brass", function() {deepEqual( Stem("brass"), "brass");});
test("brasses -> brass", function() {deepEqual( Stem("brasses"), "brass");});
test("brat -> brat", function() {deepEqual( Stem("brat"), "brat");});
test("brats -> brat", function() {deepEqual( Stem("brats"), "brat");});
test("bravado -> bravado", function() {deepEqual( Stem("bravado"), "bravado");});
test("bravard -> bravard", function() {deepEqual( Stem("bravard"), "bravard");});
test("bravassa -> bravassa", function() {deepEqual( Stem("bravassa"), "bravassa");});
test("brave -> brave", function() {deepEqual( Stem("brave"), "brave");});
test("braved -> brave", function() {deepEqual( Stem("braved"), "brave");});
test("bravely -> brave", function() {deepEqual( Stem("bravely"), "brave");});
test("bravery -> braveri", function() {deepEqual( Stem("bravery"), "braveri");});
test("bravest -> bravest", function() {deepEqual( Stem("bravest"), "bravest");});
test("braving -> brave", function() {deepEqual( Stem("braving"), "brave");});
test("bravo -> bravo", function() {deepEqual( Stem("bravo"), "bravo");});
test("brawl -> brawl", function() {deepEqual( Stem("brawl"), "brawl");});
test("brawler -> brawler", function() {deepEqual( Stem("brawler"), "brawler");});
test("brawling -> brawl", function() {deepEqual( Stem("brawling"), "brawl");});
test("brawny -> brawni", function() {deepEqual( Stem("brawny"), "brawni");});
test("braxon -> braxon", function() {deepEqual( Stem("braxon"), "braxon");});
test("bray -> bray", function() {deepEqual( Stem("bray"), "bray");});
test("braying -> bray", function() {deepEqual( Stem("braying"), "bray");});
test("brazen -> brazen", function() {deepEqual( Stem("brazen"), "brazen");});
test("brazened -> brazen", function() {deepEqual( Stem("brazened"), "brazen");});
test("brazil -> brazil", function() {deepEqual( Stem("brazil"), "brazil");});
test("brazilian -> brazilian", function() {deepEqual( Stem("brazilian"), "brazilian");});
test("brazilians -> brazilian", function() {deepEqual( Stem("brazilians"), "brazilian");});
test("brazils -> brazil", function() {deepEqual( Stem("brazils"), "brazil");});
test("breach -> breach", function() {deepEqual( Stem("breach"), "breach");});
test("breached -> breach", function() {deepEqual( Stem("breached"), "breach");});
test("breaches -> breach", function() {deepEqual( Stem("breaches"), "breach");});
test("bread -> bread", function() {deepEqual( Stem("bread"), "bread");});
test("breads -> bread", function() {deepEqual( Stem("breads"), "bread");});
test("breadth -> breadth", function() {deepEqual( Stem("breadth"), "breadth");});
test("break -> break", function() {deepEqual( Stem("break"), "break");});
test("breaker -> breaker", function() {deepEqual( Stem("breaker"), "breaker");});
test("breakers -> breaker", function() {deepEqual( Stem("breakers"), "breaker");});
test("breakfast -> breakfast", function() {deepEqual( Stem("breakfast"), "breakfast");});
test("breakfasted -> breakfast", function() {deepEqual( Stem("breakfasted"), "breakfast");});
test("breakfasting -> breakfast", function() {deepEqual( Stem("breakfasting"), "breakfast");});
test("breakfasts -> breakfast", function() {deepEqual( Stem("breakfasts"), "breakfast");});
test("breakin -> breakin", function() {deepEqual( Stem("breakin"), "breakin");});
test("breaking -> break", function() {deepEqual( Stem("breaking"), "break");});
test("breaks -> break", function() {deepEqual( Stem("breaks"), "break");});
test("breakwater -> breakwat", function() {deepEqual( Stem("breakwater"), "breakwat");});
test("breakwaters -> breakwat", function() {deepEqual( Stem("breakwaters"), "breakwat");});
test("breast -> breast", function() {deepEqual( Stem("breast"), "breast");});
test("breasted -> breast", function() {deepEqual( Stem("breasted"), "breast");});
test("breasts -> breast", function() {deepEqual( Stem("breasts"), "breast");});
test("breastwork -> breastwork", function() {deepEqual( Stem("breastwork"), "breastwork");});
test("breath -> breath", function() {deepEqual( Stem("breath"), "breath");});
test("breathe -> breath", function() {deepEqual( Stem("breathe"), "breath");});
test("breathed -> breath", function() {deepEqual( Stem("breathed"), "breath");});
test("breathes -> breath", function() {deepEqual( Stem("breathes"), "breath");});
test("breathing -> breath", function() {deepEqual( Stem("breathing"), "breath");});
test("breathings -> breath", function() {deepEqual( Stem("breathings"), "breath");});
test("breathless -> breathless", function() {deepEqual( Stem("breathless"), "breathless");});
test("breathlessly -> breathless", function() {deepEqual( Stem("breathlessly"), "breathless");});
test("breathlessness -> breathless", function() {deepEqual( Stem("breathlessness"), "breathless");});
test("breaths -> breath", function() {deepEqual( Stem("breaths"), "breath");});
test("breccia -> breccia", function() {deepEqual( Stem("breccia"), "breccia");});
test("bred -> bred", function() {deepEqual( Stem("bred"), "bred");});
test("bree -> bree", function() {deepEqual( Stem("bree"), "bree");});
test("breeches -> breech", function() {deepEqual( Stem("breeches"), "breech");});
test("breed -> breed", function() {deepEqual( Stem("breed"), "breed");});
test("breeder -> breeder", function() {deepEqual( Stem("breeder"), "breeder");});
test("breeding -> breed", function() {deepEqual( Stem("breeding"), "breed");});
test("breeds -> breed", function() {deepEqual( Stem("breeds"), "breed");});
test("breeze -> breez", function() {deepEqual( Stem("breeze"), "breez");});
test("breezes -> breez", function() {deepEqual( Stem("breezes"), "breez");});
test("breezy -> breezi", function() {deepEqual( Stem("breezy"), "breezi");});
test("brethren -> brethren", function() {deepEqual( Stem("brethren"), "brethren");});
test("brevity -> breviti", function() {deepEqual( Stem("brevity"), "breviti");});
test("brew -> brew", function() {deepEqual( Stem("brew"), "brew");});
test("brewed -> brew", function() {deepEqual( Stem("brewed"), "brew");});
test("brewer -> brewer", function() {deepEqual( Stem("brewer"), "brewer");});
test("brewers -> brewer", function() {deepEqual( Stem("brewers"), "brewer");});
test("brewery -> breweri", function() {deepEqual( Stem("brewery"), "breweri");});
test("brewing -> brew", function() {deepEqual( Stem("brewing"), "brew");});
test("brewster -> brewster", function() {deepEqual( Stem("brewster"), "brewster");});
test("bribe -> bribe", function() {deepEqual( Stem("bribe"), "bribe");});
test("bribed -> bribe", function() {deepEqual( Stem("bribed"), "bribe");});
test("bribery -> briberi", function() {deepEqual( Stem("bribery"), "briberi");});
test("bribes -> bribe", function() {deepEqual( Stem("bribes"), "bribe");});
test("bribing -> bribe", function() {deepEqual( Stem("bribing"), "bribe");});
test("brick -> brick", function() {deepEqual( Stem("brick"), "brick");});
test("bricked -> brick", function() {deepEqual( Stem("bricked"), "brick");});
test("bricklayers -> bricklay", function() {deepEqual( Stem("bricklayers"), "bricklay");});
test("brickmaker -> brickmak", function() {deepEqual( Stem("brickmaker"), "brickmak");});
test("brickmakers -> brickmak", function() {deepEqual( Stem("brickmakers"), "brickmak");});
test("bricks -> brick", function() {deepEqual( Stem("bricks"), "brick");});
test("brickwork -> brickwork", function() {deepEqual( Stem("brickwork"), "brickwork");});
test("bridal -> bridal", function() {deepEqual( Stem("bridal"), "bridal");});
test("bride -> bride", function() {deepEqual( Stem("bride"), "bride");});
test("bridegroom -> bridegroom", function() {deepEqual( Stem("bridegroom"), "bridegroom");});
test("bridesmaid -> bridesmaid", function() {deepEqual( Stem("bridesmaid"), "bridesmaid");});
test("bridesmaids -> bridesmaid", function() {deepEqual( Stem("bridesmaids"), "bridesmaid");});
test("bridge -> bridg", function() {deepEqual( Stem("bridge"), "bridg");});
test("bridged -> bridg", function() {deepEqual( Stem("bridged"), "bridg");});
test("bridges -> bridg", function() {deepEqual( Stem("bridges"), "bridg");});
test("bridle -> bridl", function() {deepEqual( Stem("bridle"), "bridl");});
test("bridling -> bridl", function() {deepEqual( Stem("bridling"), "bridl");});
test("brief -> brief", function() {deepEqual( Stem("brief"), "brief");});
test("briefly -> briefli", function() {deepEqual( Stem("briefly"), "briefli");});
test("briefs -> brief", function() {deepEqual( Stem("briefs"), "brief");});
test("brier -> brier", function() {deepEqual( Stem("brier"), "brier");});
test("briers -> brier", function() {deepEqual( Stem("briers"), "brier");});
test("brig -> brig", function() {deepEqual( Stem("brig"), "brig");});
test("brigade -> brigad", function() {deepEqual( Stem("brigade"), "brigad");});
test("brigand -> brigand", function() {deepEqual( Stem("brigand"), "brigand");});
test("brigands -> brigand", function() {deepEqual( Stem("brigands"), "brigand");});
test("bright -> bright", function() {deepEqual( Stem("bright"), "bright");});
test("brighten -> brighten", function() {deepEqual( Stem("brighten"), "brighten");});
test("brightened -> brighten", function() {deepEqual( Stem("brightened"), "brighten");});
test("brightening -> brighten", function() {deepEqual( Stem("brightening"), "brighten");});
test("brightens -> brighten", function() {deepEqual( Stem("brightens"), "brighten");});
test("brighter -> brighter", function() {deepEqual( Stem("brighter"), "brighter");});
test("brightest -> brightest", function() {deepEqual( Stem("brightest"), "brightest");});
test("brightly -> bright", function() {deepEqual( Stem("brightly"), "bright");});
test("brightness -> bright", function() {deepEqual( Stem("brightness"), "bright");});
test("brighton -> brighton", function() {deepEqual( Stem("brighton"), "brighton");});
test("brigs -> brig", function() {deepEqual( Stem("brigs"), "brig");});
test("brilliance -> brillianc", function() {deepEqual( Stem("brilliance"), "brillianc");});
test("brilliancy -> brillianc", function() {deepEqual( Stem("brilliancy"), "brillianc");});
test("brilliant -> brilliant", function() {deepEqual( Stem("brilliant"), "brilliant");});
test("brilliantly -> brilliant", function() {deepEqual( Stem("brilliantly"), "brilliant");});
test("brim -> brim", function() {deepEqual( Stem("brim"), "brim");});
test("brimful -> brim", function() {deepEqual( Stem("brimful"), "brim");});
test("brimless -> brimless", function() {deepEqual( Stem("brimless"), "brimless");});
test("brimmed -> brim", function() {deepEqual( Stem("brimmed"), "brim");});
test("brimming -> brim", function() {deepEqual( Stem("brimming"), "brim");});
test("brimmy -> brimmi", function() {deepEqual( Stem("brimmy"), "brimmi");});
test("brims -> brim", function() {deepEqual( Stem("brims"), "brim");});
test("brimstone -> brimston", function() {deepEqual( Stem("brimstone"), "brimston");});
test("brindle -> brindl", function() {deepEqual( Stem("brindle"), "brindl");});
test("brine -> brine", function() {deepEqual( Stem("brine"), "brine");});
test("bring -> bring", function() {deepEqual( Stem("bring"), "bring");});
test("bringing -> bring", function() {deepEqual( Stem("bringing"), "bring");});
test("brings -> bring", function() {deepEqual( Stem("brings"), "bring");});
test("brink -> brink", function() {deepEqual( Stem("brink"), "brink");});
test("briny -> brini", function() {deepEqual( Stem("briny"), "brini");});
test("brisk -> brisk", function() {deepEqual( Stem("brisk"), "brisk");});
test("brisker -> brisker", function() {deepEqual( Stem("brisker"), "brisker");});
test("briskly -> brisk", function() {deepEqual( Stem("briskly"), "brisk");});
test("briskness -> brisk", function() {deepEqual( Stem("briskness"), "brisk");});
test("bristle -> bristl", function() {deepEqual( Stem("bristle"), "bristl");});
test("bristled -> bristl", function() {deepEqual( Stem("bristled"), "bristl");});
test("bristles -> bristl", function() {deepEqual( Stem("bristles"), "bristl");});
test("bristly -> brist", function() {deepEqual( Stem("bristly"), "brist");});
test("bristol -> bristol", function() {deepEqual( Stem("bristol"), "bristol");});
test("brit -> brit", function() {deepEqual( Stem("brit"), "brit");});
test("britain -> britain", function() {deepEqual( Stem("britain"), "britain");});
test("britannia -> britannia", function() {deepEqual( Stem("britannia"), "britannia");});
test("british -> british", function() {deepEqual( Stem("british"), "british");});
test("briton -> briton", function() {deepEqual( Stem("briton"), "briton");});
test("brittann -> brittann", function() {deepEqual( Stem("brittann"), "brittann");});
test("brittle -> brittl", function() {deepEqual( Stem("brittle"), "brittl");});
test("broach -> broach", function() {deepEqual( Stem("broach"), "broach");});
test("broached -> broach", function() {deepEqual( Stem("broached"), "broach");});
test("broad -> broad", function() {deepEqual( Stem("broad"), "broad");});
test("broadcast -> broadcast", function() {deepEqual( Stem("broadcast"), "broadcast");});
test("broadened -> broaden", function() {deepEqual( Stem("broadened"), "broaden");});
test("broader -> broader", function() {deepEqual( Stem("broader"), "broader");});
test("broadly -> broad", function() {deepEqual( Stem("broadly"), "broad");});
test("broadside -> broadsid", function() {deepEqual( Stem("broadside"), "broadsid");});
test("broadsides -> broadsid", function() {deepEqual( Stem("broadsides"), "broadsid");});
test("broadsword -> broadsword", function() {deepEqual( Stem("broadsword"), "broadsword");});
test("broadwise -> broadwis", function() {deepEqual( Stem("broadwise"), "broadwis");});
test("brocade -> brocad", function() {deepEqual( Stem("brocade"), "brocad");});
test("brochure -> brochur", function() {deepEqual( Stem("brochure"), "brochur");});
test("brock -> brock", function() {deepEqual( Stem("brock"), "brock");});
test("brogden -> brogden", function() {deepEqual( Stem("brogden"), "brogden");});
test("broide -> broid", function() {deepEqual( Stem("broide"), "broid");});
test("broiled -> broil", function() {deepEqual( Stem("broiled"), "broil");});
test("broiling -> broil", function() {deepEqual( Stem("broiling"), "broil");});
test("broke -> broke", function() {deepEqual( Stem("broke"), "broke");});
test("broken -> broken", function() {deepEqual( Stem("broken"), "broken");});
test("brokenly -> broken", function() {deepEqual( Stem("brokenly"), "broken");});
test("broker -> broker", function() {deepEqual( Stem("broker"), "broker");});
test("brokers -> broker", function() {deepEqual( Stem("brokers"), "broker");});
test("brokken -> brokken", function() {deepEqual( Stem("brokken"), "brokken");});
test("bromelia -> bromelia", function() {deepEqual( Stem("bromelia"), "bromelia");});
test("bromley -> bromley", function() {deepEqual( Stem("bromley"), "bromley");});
test("brompton -> brompton", function() {deepEqual( Stem("brompton"), "brompton");});
test("bronchial -> bronchial", function() {deepEqual( Stem("bronchial"), "bronchial");});
test("bronchitis -> bronchiti", function() {deepEqual( Stem("bronchitis"), "bronchiti");});
test("bronze -> bronz", function() {deepEqual( Stem("bronze"), "bronz");});
test("bronzed -> bronz", function() {deepEqual( Stem("bronzed"), "bronz");});
test("broo -> broo", function() {deepEqual( Stem("broo"), "broo");});
test("brooch -> brooch", function() {deepEqual( Stem("brooch"), "brooch");});
test("brood -> brood", function() {deepEqual( Stem("brood"), "brood");});
test("brooded -> brood", function() {deepEqual( Stem("brooded"), "brood");});
test("brooding -> brood", function() {deepEqual( Stem("brooding"), "brood");});
test("broodingly -> brood", function() {deepEqual( Stem("broodingly"), "brood");});
test("brook -> brook", function() {deepEqual( Stem("brook"), "brook");});
test("brooker -> brooker", function() {deepEqual( Stem("brooker"), "brooker");});
test("brooks -> brook", function() {deepEqual( Stem("brooks"), "brook");});
test("broom -> broom", function() {deepEqual( Stem("broom"), "broom");});
test("brooms -> broom", function() {deepEqual( Stem("brooms"), "broom");});
test("broomstick -> broomstick", function() {deepEqual( Stem("broomstick"), "broomstick");});
test("brooses -> broos", function() {deepEqual( Stem("brooses"), "broos");});
test("broth -> broth", function() {deepEqual( Stem("broth"), "broth");});
test("brother -> brother", function() {deepEqual( Stem("brother"), "brother");});
test("brotherhood -> brotherhood", function() {deepEqual( Stem("brotherhood"), "brotherhood");});
test("brotherly -> brother", function() {deepEqual( Stem("brotherly"), "brother");});
test("brothers -> brother", function() {deepEqual( Stem("brothers"), "brother");});
test("brougham -> brougham", function() {deepEqual( Stem("brougham"), "brougham");});
test("brought -> brought", function() {deepEqual( Stem("brought"), "brought");});
test("broune -> broun", function() {deepEqual( Stem("broune"), "broun");});
test("brout -> brout", function() {deepEqual( Stem("brout"), "brout");});
test("brow -> brow", function() {deepEqual( Stem("brow"), "brow");});
test("browdie -> browdi", function() {deepEqual( Stem("browdie"), "browdi");});
test("browdies -> browdi", function() {deepEqual( Stem("browdies"), "browdi");});
test("brown -> brown", function() {deepEqual( Stem("brown"), "brown");});
test("browndock -> browndock", function() {deepEqual( Stem("browndock"), "browndock");});
test("browne -> brown", function() {deepEqual( Stem("browne"), "brown");});
test("browner -> browner", function() {deepEqual( Stem("browner"), "browner");});
test("browning -> brown", function() {deepEqual( Stem("browning"), "brown");});
test("brownish -> brownish", function() {deepEqual( Stem("brownish"), "brownish");});
test("browns -> brown", function() {deepEqual( Stem("browns"), "brown");});
test("brows -> brow", function() {deepEqual( Stem("brows"), "brow");});
test("browsed -> brows", function() {deepEqual( Stem("browsed"), "brows");});
test("browsing -> brows", function() {deepEqual( Stem("browsing"), "brows");});
test("bruce -> bruce", function() {deepEqual( Stem("bruce"), "bruce");});
test("bruise -> bruis", function() {deepEqual( Stem("bruise"), "bruis");});
test("bruised -> bruis", function() {deepEqual( Stem("bruised"), "bruis");});
test("bruises -> bruis", function() {deepEqual( Stem("bruises"), "bruis");});
test("bruising -> bruis", function() {deepEqual( Stem("bruising"), "bruis");});
test("brun -> brun", function() {deepEqual( Stem("brun"), "brun");});
test("brunswick -> brunswick", function() {deepEqual( Stem("brunswick"), "brunswick");});
test("brunt -> brunt", function() {deepEqual( Stem("brunt"), "brunt");});
test("brush -> brush", function() {deepEqual( Stem("brush"), "brush");});
test("brushed -> brush", function() {deepEqual( Stem("brushed"), "brush");});
test("brushes -> brush", function() {deepEqual( Stem("brushes"), "brush");});
test("brushing -> brush", function() {deepEqual( Stem("brushing"), "brush");});
test("brushwood -> brushwood", function() {deepEqual( Stem("brushwood"), "brushwood");});
test("brusque -> brusqu", function() {deepEqual( Stem("brusque"), "brusqu");});
test("brussels -> brussel", function() {deepEqual( Stem("brussels"), "brussel");});
test("brutal -> brutal", function() {deepEqual( Stem("brutal"), "brutal");});
test("brutality -> brutal", function() {deepEqual( Stem("brutality"), "brutal");});
test("brutally -> brutal", function() {deepEqual( Stem("brutally"), "brutal");});
test("brute -> brute", function() {deepEqual( Stem("brute"), "brute");});
test("brutes -> brute", function() {deepEqual( Stem("brutes"), "brute");});
test("brutish -> brutish", function() {deepEqual( Stem("brutish"), "brutish");});
test("bryanstone -> bryanston", function() {deepEqual( Stem("bryanstone"), "bryanston");});
test("bu -> bu", function() {deepEqual( Stem("bu"), "bu");});
test("bubble -> bubbl", function() {deepEqual( Stem("bubble"), "bubbl");});
test("bubbles -> bubbl", function() {deepEqual( Stem("bubbles"), "bubbl");});
test("bubblin -> bubblin", function() {deepEqual( Stem("bubblin"), "bubblin");});
test("bubbling -> bubbl", function() {deepEqual( Stem("bubbling"), "bubbl");});
test("bucaniers -> bucani", function() {deepEqual( Stem("bucaniers"), "bucani");});
test("buccaneering -> buccan", function() {deepEqual( Stem("buccaneering"), "buccan");});
test("buccaneers -> buccan", function() {deepEqual( Stem("buccaneers"), "buccan");});
test("buch -> buch", function() {deepEqual( Stem("buch"), "buch");});
test("buck -> buck", function() {deepEqual( Stem("buck"), "buck");});
test("bucket -> bucket", function() {deepEqual( Stem("bucket"), "bucket");});
test("bucketful -> bucket", function() {deepEqual( Stem("bucketful"), "bucket");});
test("buckets -> bucket", function() {deepEqual( Stem("buckets"), "bucket");});
test("buckingham -> buckingham", function() {deepEqual( Stem("buckingham"), "buckingham");});
test("buckland -> buckland", function() {deepEqual( Stem("buckland"), "buckland");});
test("buckle -> buckl", function() {deepEqual( Stem("buckle"), "buckl");});
test("buckler -> buckler", function() {deepEqual( Stem("buckler"), "buckler");});
test("buckles -> buckl", function() {deepEqual( Stem("buckles"), "buckl");});
test("buckram -> buckram", function() {deepEqual( Stem("buckram"), "buckram");});
test("buckskins -> buckskin", function() {deepEqual( Stem("buckskins"), "buckskin");});
test("bud -> bud", function() {deepEqual( Stem("bud"), "bud");});
test("budded -> bud", function() {deepEqual( Stem("budded"), "bud");});
test("budding -> bud", function() {deepEqual( Stem("budding"), "bud");});
test("budge -> budg", function() {deepEqual( Stem("budge"), "budg");});
test("budget -> budget", function() {deepEqual( Stem("budget"), "budget");});
test("budgets -> budget", function() {deepEqual( Stem("budgets"), "budget");});
test("buds -> bud", function() {deepEqual( Stem("buds"), "bud");});
test("buena -> buena", function() {deepEqual( Stem("buena"), "buena");});
test("buenos -> bueno", function() {deepEqual( Stem("buenos"), "bueno");});
test("buey -> buey", function() {deepEqual( Stem("buey"), "buey");});
test("buff -> buff", function() {deepEqual( Stem("buff"), "buff");});
test("buffer -> buffer", function() {deepEqual( Stem("buffer"), "buffer");});
test("buffet -> buffet", function() {deepEqual( Stem("buffet"), "buffet");});
test("buffeting -> buffet", function() {deepEqual( Stem("buffeting"), "buffet");});
test("buffetings -> buffet", function() {deepEqual( Stem("buffetings"), "buffet");});
test("buffets -> buffet", function() {deepEqual( Stem("buffets"), "buffet");});
test("buffon -> buffon", function() {deepEqual( Stem("buffon"), "buffon");});
test("buffoon -> buffoon", function() {deepEqual( Stem("buffoon"), "buffoon");});
test("buffoonery -> buffooneri", function() {deepEqual( Stem("buffoonery"), "buffooneri");});
test("buffoons -> buffoon", function() {deepEqual( Stem("buffoons"), "buffoon");});
test("buffy -> buffi", function() {deepEqual( Stem("buffy"), "buffi");});
test("bug -> bug", function() {deepEqual( Stem("bug"), "bug");});
test("bugged -> bug", function() {deepEqual( Stem("bugged"), "bug");});
test("bugle -> bugl", function() {deepEqual( Stem("bugle"), "bugl");});
test("bugs -> bug", function() {deepEqual( Stem("bugs"), "bug");});
test("buil -> buil", function() {deepEqual( Stem("buil"), "buil");});
test("build -> build", function() {deepEqual( Stem("build"), "build");});
test("builder -> builder", function() {deepEqual( Stem("builder"), "builder");});
test("buildin -> buildin", function() {deepEqual( Stem("buildin"), "buildin");});
test("building -> build", function() {deepEqual( Stem("building"), "build");});
test("buildings -> build", function() {deepEqual( Stem("buildings"), "build");});
test("builds -> build", function() {deepEqual( Stem("builds"), "build");});
test("built -> built", function() {deepEqual( Stem("built"), "built");});
test("bulbous -> bulbous", function() {deepEqual( Stem("bulbous"), "bulbous");});
test("bulgaria -> bulgaria", function() {deepEqual( Stem("bulgaria"), "bulgaria");});
test("bulged -> bulg", function() {deepEqual( Stem("bulged"), "bulg");});
test("bulimus -> bulimus", function() {deepEqual( Stem("bulimus"), "bulimus");});
test("bulk -> bulk", function() {deepEqual( Stem("bulk"), "bulk");});
test("bulkeley -> bulkeley", function() {deepEqual( Stem("bulkeley"), "bulkeley");});
test("bulky -> bulki", function() {deepEqual( Stem("bulky"), "bulki");});
test("bull -> bull", function() {deepEqual( Stem("bull"), "bull");});
test("bulldog -> bulldog", function() {deepEqual( Stem("bulldog"), "bulldog");});
test("bullen -> bullen", function() {deepEqual( Stem("bullen"), "bullen");});
test("bullet -> bullet", function() {deepEqual( Stem("bullet"), "bullet");});
test("bulletin -> bulletin", function() {deepEqual( Stem("bulletin"), "bulletin");});
test("bulletins -> bulletin", function() {deepEqual( Stem("bulletins"), "bulletin");});
test("bullets -> bullet", function() {deepEqual( Stem("bullets"), "bullet");});
test("bullfinch -> bullfinch", function() {deepEqual( Stem("bullfinch"), "bullfinch");});
test("bullied -> bulli", function() {deepEqual( Stem("bullied"), "bulli");});
test("bullies -> bulli", function() {deepEqual( Stem("bullies"), "bulli");});
test("bullion -> bullion", function() {deepEqual( Stem("bullion"), "bullion");});
test("bullock -> bullock", function() {deepEqual( Stem("bullock"), "bullock");});
test("bullocks -> bullock", function() {deepEqual( Stem("bullocks"), "bullock");});
test("bulls -> bull", function() {deepEqual( Stem("bulls"), "bull");});
test("bully -> bulli", function() {deepEqual( Stem("bully"), "bulli");});
test("bullying -> bulli", function() {deepEqual( Stem("bullying"), "bulli");});
test("bulph -> bulph", function() {deepEqual( Stem("bulph"), "bulph");});
test("bulwarks -> bulwark", function() {deepEqual( Stem("bulwarks"), "bulwark");});
test("bump -> bump", function() {deepEqual( Stem("bump"), "bump");});
test("bumped -> bump", function() {deepEqual( Stem("bumped"), "bump");});
test("bumper -> bumper", function() {deepEqual( Stem("bumper"), "bumper");});
test("bumpers -> bumper", function() {deepEqual( Stem("bumpers"), "bumper");});
test("bumping -> bump", function() {deepEqual( Stem("bumping"), "bump");});
test("bun -> bun", function() {deepEqual( Stem("bun"), "bun");});
test("bunch -> bunch", function() {deepEqual( Stem("bunch"), "bunch");});
test("bunches -> bunch", function() {deepEqual( Stem("bunches"), "bunch");});
test("buncombe -> buncomb", function() {deepEqual( Stem("buncombe"), "buncomb");});
test("bundle -> bundl", function() {deepEqual( Stem("bundle"), "bundl");});
test("bundled -> bundl", function() {deepEqual( Stem("bundled"), "bundl");});
test("bundles -> bundl", function() {deepEqual( Stem("bundles"), "bundl");});
test("bung -> bung", function() {deepEqual( Stem("bung"), "bung");});
test("bungay -> bungay", function() {deepEqual( Stem("bungay"), "bungay");});
test("bungays -> bungay", function() {deepEqual( Stem("bungays"), "bungay");});
test("bungle -> bungl", function() {deepEqual( Stem("bungle"), "bungl");});
test("bungling -> bungl", function() {deepEqual( Stem("bungling"), "bungl");});
test("buns -> bun", function() {deepEqual( Stem("buns"), "bun");});
test("bunting -> bunt", function() {deepEqual( Stem("bunting"), "bunt");});
test("buoy -> buoy", function() {deepEqual( Stem("buoy"), "buoy");});
test("buoyancy -> buoyanc", function() {deepEqual( Stem("buoyancy"), "buoyanc");});
test("buoyant -> buoyant", function() {deepEqual( Stem("buoyant"), "buoyant");});
test("buoyantly -> buoyant", function() {deepEqual( Stem("buoyantly"), "buoyant");});
test("buoyed -> buoy", function() {deepEqual( Stem("buoyed"), "buoy");});
test("burchell -> burchel", function() {deepEqual( Stem("burchell"), "burchel");});
test("burchess -> burchess", function() {deepEqual( Stem("burchess"), "burchess");});
test("burden -> burden", function() {deepEqual( Stem("burden"), "burden");});
test("burdened -> burden", function() {deepEqual( Stem("burdened"), "burden");});
test("burdening -> burden", function() {deepEqual( Stem("burdening"), "burden");});
test("burdens -> burden", function() {deepEqual( Stem("burdens"), "burden");});
test("burdensome -> burdensom", function() {deepEqual( Stem("burdensome"), "burdensom");});
test("bureau -> bureau", function() {deepEqual( Stem("bureau"), "bureau");});
test("burglars -> burglar", function() {deepEqual( Stem("burglars"), "burglar");});
test("burgomaster -> burgomast", function() {deepEqual( Stem("burgomaster"), "burgomast");});
test("burgomeister -> burgomeist", function() {deepEqual( Stem("burgomeister"), "burgomeist");});
test("burial -> burial", function() {deepEqual( Stem("burial"), "burial");});
test("buried -> buri", function() {deepEqual( Stem("buried"), "buri");});
test("buries -> buri", function() {deepEqual( Stem("buries"), "buri");});
test("burlesque -> burlesqu", function() {deepEqual( Stem("burlesque"), "burlesqu");});
test("burlinghammer -> burlinghamm", function() {deepEqual( Stem("burlinghammer"), "burlinghamm");});
test("burly -> bur", function() {deepEqual( Stem("burly"), "bur");});
test("burn -> burn", function() {deepEqual( Stem("burn"), "burn");});
test("burned -> burn", function() {deepEqual( Stem("burned"), "burn");});
test("burnet -> burnet", function() {deepEqual( Stem("burnet"), "burnet");});
test("burning -> burn", function() {deepEqual( Stem("burning"), "burn");});
test("burnings -> burn", function() {deepEqual( Stem("burnings"), "burn");});
test("burnished -> burnish", function() {deepEqual( Stem("burnished"), "burnish");});
test("burnous -> burnous", function() {deepEqual( Stem("burnous"), "burnous");});
test("burns -> burn", function() {deepEqual( Stem("burns"), "burn");});
test("burnt -> burnt", function() {deepEqual( Stem("burnt"), "burnt");});
test("burrow -> burrow", function() {deepEqual( Stem("burrow"), "burrow");});
test("burrowed -> burrow", function() {deepEqual( Stem("burrowed"), "burrow");});
test("burrowing -> burrow", function() {deepEqual( Stem("burrowing"), "burrow");});
test("burrowings -> burrow", function() {deepEqual( Stem("burrowings"), "burrow");});
test("burrows -> burrow", function() {deepEqual( Stem("burrows"), "burrow");});
test("burst -> burst", function() {deepEqual( Stem("burst"), "burst");});
test("bursting -> burst", function() {deepEqual( Stem("bursting"), "burst");});
test("bursts -> burst", function() {deepEqual( Stem("bursts"), "burst");});
test("burthen -> burthen", function() {deepEqual( Stem("burthen"), "burthen");});
test("burton -> burton", function() {deepEqual( Stem("burton"), "burton");});
test("bury -> buri", function() {deepEqual( Stem("bury"), "buri");});
test("burying -> buri", function() {deepEqual( Stem("burying"), "buri");});
test("bus -> bus", function() {deepEqual( Stem("bus"), "bus");});
test("bush -> bush", function() {deepEqual( Stem("bush"), "bush");});
test("bushby -> bushbi", function() {deepEqual( Stem("bushby"), "bushbi");});
test("bushe -> bush", function() {deepEqual( Stem("bushe"), "bush");});
test("bushel -> bushel", function() {deepEqual( Stem("bushel"), "bushel");});
test("bushels -> bushel", function() {deepEqual( Stem("bushels"), "bushel");});
test("bushes -> bush", function() {deepEqual( Stem("bushes"), "bush");});
test("bushy -> bushi", function() {deepEqual( Stem("bushy"), "bushi");});
test("busied -> busi", function() {deepEqual( Stem("busied"), "busi");});
test("busier -> busier", function() {deepEqual( Stem("busier"), "busier");});
test("busies -> busi", function() {deepEqual( Stem("busies"), "busi");});
test("busily -> busili", function() {deepEqual( Stem("busily"), "busili");});
test("business -> busi", function() {deepEqual( Stem("business"), "busi");});
test("businesslike -> businesslik", function() {deepEqual( Stem("businesslike"), "businesslik");});
test("buskin -> buskin", function() {deepEqual( Stem("buskin"), "buskin");});
test("bust -> bust", function() {deepEqual( Stem("bust"), "bust");});
test("busted -> bust", function() {deepEqual( Stem("busted"), "bust");});
test("bustle -> bustl", function() {deepEqual( Stem("bustle"), "bustl");});
test("bustled -> bustl", function() {deepEqual( Stem("bustled"), "bustl");});
test("bustling -> bustl", function() {deepEqual( Stem("bustling"), "bustl");});
test("busts -> bust", function() {deepEqual( Stem("busts"), "bust");});
test("busy -> busi", function() {deepEqual( Stem("busy"), "busi");});
test("busybody -> busybodi", function() {deepEqual( Stem("busybody"), "busybodi");});
test("busying -> busi", function() {deepEqual( Stem("busying"), "busi");});
test("but -> but", function() {deepEqual( Stem("but"), "but");});
test("butcher -> butcher", function() {deepEqual( Stem("butcher"), "butcher");});
test("butchered -> butcher", function() {deepEqual( Stem("butchered"), "butcher");});
test("butchers -> butcher", function() {deepEqual( Stem("butchers"), "butcher");});
test("butler -> butler", function() {deepEqual( Stem("butler"), "butler");});
test("buts -> but", function() {deepEqual( Stem("buts"), "but");});
test("butt -> butt", function() {deepEqual( Stem("butt"), "butt");});
test("butter -> butter", function() {deepEqual( Stem("butter"), "butter");});
test("buttered -> butter", function() {deepEqual( Stem("buttered"), "butter");});
test("butterflies -> butterfli", function() {deepEqual( Stem("butterflies"), "butterfli");});
test("butterfly -> butterfli", function() {deepEqual( Stem("butterfly"), "butterfli");});
test("butterman -> butterman", function() {deepEqual( Stem("butterman"), "butterman");});
test("butther -> butther", function() {deepEqual( Stem("butther"), "butther");});
test("butting -> but", function() {deepEqual( Stem("butting"), "but");});
test("button -> button", function() {deepEqual( Stem("button"), "button");});
test("buttoned -> button", function() {deepEqual( Stem("buttoned"), "button");});
test("buttonhole -> buttonhol", function() {deepEqual( Stem("buttonhole"), "buttonhol");});
test("buttoning -> button", function() {deepEqual( Stem("buttoning"), "button");});
test("buttons -> button", function() {deepEqual( Stem("buttons"), "button");});
test("buttresses -> buttress", function() {deepEqual( Stem("buttresses"), "buttress");});
test("butts -> butt", function() {deepEqual( Stem("butts"), "butt");});
test("buxom -> buxom", function() {deepEqual( Stem("buxom"), "buxom");});
test("buy -> buy", function() {deepEqual( Stem("buy"), "buy");});
test("buyers -> buyer", function() {deepEqual( Stem("buyers"), "buyer");});
test("buying -> buy", function() {deepEqual( Stem("buying"), "buy");});
test("buyings -> buy", function() {deepEqual( Stem("buyings"), "buy");});
test("buys -> buy", function() {deepEqual( Stem("buys"), "buy");});
test("buzz -> buzz", function() {deepEqual( Stem("buzz"), "buzz");});
test("buzzard -> buzzard", function() {deepEqual( Stem("buzzard"), "buzzard");});
test("buzzed -> buzz", function() {deepEqual( Stem("buzzed"), "buzz");});
test("buzzing -> buzz", function() {deepEqual( Stem("buzzing"), "buzz");});
test("bwoken -> bwoken", function() {deepEqual( Stem("bwoken"), "bwoken");});
test("by -> by", function() {deepEqual( Stem("by"), "by");});
test("bye -> bye", function() {deepEqual( Stem("bye"), "bye");});
test("byelinsky -> byelinski", function() {deepEqual( Stem("byelinsky"), "byelinski");});
test("bygone -> bygon", function() {deepEqual( Stem("bygone"), "bygon");});
test("bygones -> bygon", function() {deepEqual( Stem("bygones"), "bygon");});
test("bynoe -> byno", function() {deepEqual( Stem("bynoe"), "byno");});
test("byron -> byron", function() {deepEqual( Stem("byron"), "byron");});
test("bystanders -> bystand", function() {deepEqual( Stem("bystanders"), "bystand");});
test("byways -> byway", function() {deepEqual( Stem("byways"), "byway");});
test("byzantine -> byzantin", function() {deepEqual( Stem("byzantine"), "byzantin");});
test("c -> c", function() {deepEqual( Stem("c"), "c");});
test("ca -> ca", function() {deepEqual( Stem("ca"), "ca");});
test("cab -> cab", function() {deepEqual( Stem("cab"), "cab");});
test("cabalistic -> cabalist", function() {deepEqual( Stem("cabalistic"), "cabalist");});
test("caballed -> cabal", function() {deepEqual( Stem("caballed"), "cabal");});
test("cabals -> cabal", function() {deepEqual( Stem("cabals"), "cabal");});
test("cabbage -> cabbag", function() {deepEqual( Stem("cabbage"), "cabbag");});
test("cabbages -> cabbag", function() {deepEqual( Stem("cabbages"), "cabbag");});
test("cabbery -> cabberi", function() {deepEqual( Stem("cabbery"), "cabberi");});
test("cabeza -> cabeza", function() {deepEqual( Stem("cabeza"), "cabeza");});
test("cabin -> cabin", function() {deepEqual( Stem("cabin"), "cabin");});
test("cabinet -> cabinet", function() {deepEqual( Stem("cabinet"), "cabinet");});
test("cabinets -> cabinet", function() {deepEqual( Stem("cabinets"), "cabinet");});
test("cabins -> cabin", function() {deepEqual( Stem("cabins"), "cabin");});
test("cable -> cabl", function() {deepEqual( Stem("cable"), "cabl");});
test("cables -> cabl", function() {deepEqual( Stem("cables"), "cabl");});
test("cabman -> cabman", function() {deepEqual( Stem("cabman"), "cabman");});
test("cabooses -> caboos", function() {deepEqual( Stem("cabooses"), "caboos");});
test("cabriolet -> cabriolet", function() {deepEqual( Stem("cabriolet"), "cabriolet");});
test("cabriolets -> cabriolet", function() {deepEqual( Stem("cabriolets"), "cabriolet");});
test("cabs -> cab", function() {deepEqual( Stem("cabs"), "cab");});
test("cachapual -> cachapu", function() {deepEqual( Stem("cachapual"), "cachapu");});
test("cacique -> caciqu", function() {deepEqual( Stem("cacique"), "caciqu");});
test("caciques -> caciqu", function() {deepEqual( Stem("caciques"), "caciqu");});
test("cackle -> cackl", function() {deepEqual( Stem("cackle"), "cackl");});
test("cackled -> cackl", function() {deepEqual( Stem("cackled"), "cackl");});
test("cacti -> cacti", function() {deepEqual( Stem("cacti"), "cacti");});
test("cactornis -> cactorni", function() {deepEqual( Stem("cactornis"), "cactorni");});
test("cactus -> cactus", function() {deepEqual( Stem("cactus"), "cactus");});
test("cactuses -> cactus", function() {deepEqual( Stem("cactuses"), "cactus");});
test("cad -> cad", function() {deepEqual( Stem("cad"), "cad");});
test("cadaverous -> cadaver", function() {deepEqual( Stem("cadaverous"), "cadaver");});
test("caddy -> caddi", function() {deepEqual( Stem("caddy"), "caddi");});
test("cadesses -> cadess", function() {deepEqual( Stem("cadesses"), "cadess");});
test("cadet -> cadet", function() {deepEqual( Stem("cadet"), "cadet");});
test("cadets -> cadet", function() {deepEqual( Stem("cadets"), "cadet");});
test("cadogan -> cadogan", function() {deepEqual( Stem("cadogan"), "cadogan");});
test("cads -> cad", function() {deepEqual( Stem("cads"), "cad");});
test("caesar -> caesar", function() {deepEqual( Stem("caesar"), "caesar");});
test("cafe -> cafe", function() {deepEqual( Stem("cafe"), "cafe");});
test("caffer -> caffer", function() {deepEqual( Stem("caffer"), "caffer");});
test("caffre -> caffr", function() {deepEqual( Stem("caffre"), "caffr");});
test("caffres -> caffr", function() {deepEqual( Stem("caffres"), "caffr");});
test("cage -> cage", function() {deepEqual( Stem("cage"), "cage");});
test("caged -> cage", function() {deepEqual( Stem("caged"), "cage");});
test("cages -> cage", function() {deepEqual( Stem("cages"), "cage");});
test("cajoled -> cajol", function() {deepEqual( Stem("cajoled"), "cajol");});
test("cajoling -> cajol", function() {deepEqual( Stem("cajoling"), "cajol");});
test("cake -> cake", function() {deepEqual( Stem("cake"), "cake");});
test("cakes -> cake", function() {deepEqual( Stem("cakes"), "cake");});
test("calabria -> calabria", function() {deepEqual( Stem("calabria"), "calabria");});
test("calais -> calai", function() {deepEqual( Stem("calais"), "calai");});
test("calamities -> calam", function() {deepEqual( Stem("calamities"), "calam");});
test("calamitous -> calamit", function() {deepEqual( Stem("calamitous"), "calamit");});
test("calamity -> calam", function() {deepEqual( Stem("calamity"), "calam");});
test("calandria -> calandria", function() {deepEqual( Stem("calandria"), "calandria");});
test("calcareo -> calcareo", function() {deepEqual( Stem("calcareo"), "calcareo");});
test("calcareous -> calcar", function() {deepEqual( Stem("calcareous"), "calcar");});
test("calculate -> calcul", function() {deepEqual( Stem("calculate"), "calcul");});
test("calculated -> calcul", function() {deepEqual( Stem("calculated"), "calcul");});
test("calculates -> calcul", function() {deepEqual( Stem("calculates"), "calcul");});
test("calculating -> calcul", function() {deepEqual( Stem("calculating"), "calcul");});
test("calculation -> calcul", function() {deepEqual( Stem("calculation"), "calcul");});
test("calculations -> calcul", function() {deepEqual( Stem("calculations"), "calcul");});
test("calculus -> calculus", function() {deepEqual( Stem("calculus"), "calculus");});
test("caldcleugh -> caldcleugh", function() {deepEqual( Stem("caldcleugh"), "caldcleugh");});
test("caldeleugh -> caldeleugh", function() {deepEqual( Stem("caldeleugh"), "caldeleugh");});
test("caldrons -> caldron", function() {deepEqual( Stem("caldrons"), "caldron");});
test("caledonia -> caledonia", function() {deepEqual( Stem("caledonia"), "caledonia");});
test("caledonian -> caledonian", function() {deepEqual( Stem("caledonian"), "caledonian");});
test("calendar -> calendar", function() {deepEqual( Stem("calendar"), "calendar");});
test("calendars -> calendar", function() {deepEqual( Stem("calendars"), "calendar");});
test("calf -> calf", function() {deepEqual( Stem("calf"), "calf");});
test("calibre -> calibr", function() {deepEqual( Stem("calibre"), "calibr");});
test("calico -> calico", function() {deepEqual( Stem("calico"), "calico");});
test("california -> california", function() {deepEqual( Stem("california"), "california");});
test("call -> call", function() {deepEqual( Stem("call"), "call");});
test("callao -> callao", function() {deepEqual( Stem("callao"), "callao");});
test("calle -> call", function() {deepEqual( Stem("calle"), "call");});
test("called -> call", function() {deepEqual( Stem("called"), "call");});
test("callems -> callem", function() {deepEqual( Stem("callems"), "callem");});
test("calling -> call", function() {deepEqual( Stem("calling"), "call");});
test("callings -> call", function() {deepEqual( Stem("callings"), "call");});
test("callous -> callous", function() {deepEqual( Stem("callous"), "callous");});
test("callousness -> callous", function() {deepEqual( Stem("callousness"), "callous");});
test("calls -> call", function() {deepEqual( Stem("calls"), "call");});
test("calm -> calm", function() {deepEqual( Stem("calm"), "calm");});
test("calmed -> calm", function() {deepEqual( Stem("calmed"), "calm");});
test("calmer -> calmer", function() {deepEqual( Stem("calmer"), "calmer");});
test("calmest -> calmest", function() {deepEqual( Stem("calmest"), "calmest");});
test("calming -> calm", function() {deepEqual( Stem("calming"), "calm");});
test("calmly -> calm", function() {deepEqual( Stem("calmly"), "calm");});
test("calmness -> calm", function() {deepEqual( Stem("calmness"), "calm");});
test("calms -> calm", function() {deepEqual( Stem("calms"), "calm");});
test("caln -> caln", function() {deepEqual( Stem("caln"), "caln");});
test("calodera -> calodera", function() {deepEqual( Stem("calodera"), "calodera");});
test("calomel -> calomel", function() {deepEqual( Stem("calomel"), "calomel");});
test("calosoma -> calosoma", function() {deepEqual( Stem("calosoma"), "calosoma");});
test("calumniated -> calumni", function() {deepEqual( Stem("calumniated"), "calumni");});
test("calumnies -> calumni", function() {deepEqual( Stem("calumnies"), "calumni");});
test("calumniously -> calumni", function() {deepEqual( Stem("calumniously"), "calumni");});
test("calumny -> calumni", function() {deepEqual( Stem("calumny"), "calumni");});
test("calve -> calv", function() {deepEqual( Stem("calve"), "calv");});
test("calves -> calv", function() {deepEqual( Stem("calves"), "calv");});
test("camarhynchus -> camarhynchus", function() {deepEqual( Stem("camarhynchus"), "camarhynchus");});
test("camberwell -> camberwel", function() {deepEqual( Stem("camberwell"), "camberwel");});
test("cambric -> cambric", function() {deepEqual( Stem("cambric"), "cambric");});
test("cambridge -> cambridg", function() {deepEqual( Stem("cambridge"), "cambridg");});
test("cambridgeshire -> cambridgeshir", function() {deepEqual( Stem("cambridgeshire"), "cambridgeshir");});
test("came -> came", function() {deepEqual( Stem("came"), "came");});
test("camel -> camel", function() {deepEqual( Stem("camel"), "camel");});
test("camels -> camel", function() {deepEqual( Stem("camels"), "camel");});
test("camlet -> camlet", function() {deepEqual( Stem("camlet"), "camlet");});
test("camp -> camp", function() {deepEqual( Stem("camp"), "camp");});
test("campaign -> campaign", function() {deepEqual( Stem("campaign"), "campaign");});
test("campana -> campana", function() {deepEqual( Stem("campana"), "campana");});
test("campany -> campani", function() {deepEqual( Stem("campany"), "campani");});
test("campestris -> campestri", function() {deepEqual( Stem("campestris"), "campestri");});
test("camphor -> camphor", function() {deepEqual( Stem("camphor"), "camphor");});
test("campo -> campo", function() {deepEqual( Stem("campo"), "campo");});
test("campos -> campo", function() {deepEqual( Stem("campos"), "campo");});
test("can -> can", function() {deepEqual( Stem("can"), "can");});
test("canada -> canada", function() {deepEqual( Stem("canada"), "canada");});
test("canal -> canal", function() {deepEqual( Stem("canal"), "canal");});
test("canals -> canal", function() {deepEqual( Stem("canals"), "canal");});
test("canaries -> canari", function() {deepEqual( Stem("canaries"), "canari");});
test("canary -> canari", function() {deepEqual( Stem("canary"), "canari");});
test("cancan -> cancan", function() {deepEqual( Stem("cancan"), "cancan");});
test("cancellaria -> cancellaria", function() {deepEqual( Stem("cancellaria"), "cancellaria");});
test("cancelled -> cancel", function() {deepEqual( Stem("cancelled"), "cancel");});
test("cancelling -> cancel", function() {deepEqual( Stem("cancelling"), "cancel");});
test("cancer -> cancer", function() {deepEqual( Stem("cancer"), "cancer");});
test("candid -> candid", function() {deepEqual( Stem("candid"), "candid");});
test("candidate -> candid", function() {deepEqual( Stem("candidate"), "candid");});
test("candidates -> candid", function() {deepEqual( Stem("candidates"), "candid");});
test("candidateship -> candidateship", function() {deepEqual( Stem("candidateship"), "candidateship");});
test("candidature -> candidatur", function() {deepEqual( Stem("candidature"), "candidatur");});
test("candidly -> candid", function() {deepEqual( Stem("candidly"), "candid");});
test("candle -> candl", function() {deepEqual( Stem("candle"), "candl");});
test("candlelight -> candlelight", function() {deepEqual( Stem("candlelight"), "candlelight");});
test("candles -> candl", function() {deepEqual( Stem("candles"), "candl");});
test("candlestick -> candlestick", function() {deepEqual( Stem("candlestick"), "candlestick");});
test("candlesticks -> candlestick", function() {deepEqual( Stem("candlesticks"), "candlestick");});
test("candour -> candour", function() {deepEqual( Stem("candour"), "candour");});
test("cane -> cane", function() {deepEqual( Stem("cane"), "cane");});
test("caned -> cane", function() {deepEqual( Stem("caned"), "cane");});
test("canelones -> canelon", function() {deepEqual( Stem("canelones"), "canelon");});
test("canes -> cane", function() {deepEqual( Stem("canes"), "cane");});
test("cangrejales -> cangrejal", function() {deepEqual( Stem("cangrejales"), "cangrejal");});
test("canis -> cani", function() {deepEqual( Stem("canis"), "cani");});
test("canister -> canist", function() {deepEqual( Stem("canister"), "canist");});
test("cannibal -> cannib", function() {deepEqual( Stem("cannibal"), "cannib");});
test("cannibalism -> cannib", function() {deepEqual( Stem("cannibalism"), "cannib");});
test("cannibals -> cannib", function() {deepEqual( Stem("cannibals"), "cannib");});
test("canning -> canning", function() {deepEqual( Stem("canning"), "canning");});
test("canno -> canno", function() {deepEqual( Stem("canno"), "canno");});
test("cannon -> cannon", function() {deepEqual( Stem("cannon"), "cannon");});
test("cannons -> cannon", function() {deepEqual( Stem("cannons"), "cannon");});
test("cannot -> cannot", function() {deepEqual( Stem("cannot"), "cannot");});
test("canoe -> cano", function() {deepEqual( Stem("canoe"), "cano");});
test("canoes -> cano", function() {deepEqual( Stem("canoes"), "cano");});
test("canons -> canon", function() {deepEqual( Stem("canons"), "canon");});
test("canopy -> canopi", function() {deepEqual( Stem("canopy"), "canopi");});
test("cant -> cant", function() {deepEqual( Stem("cant"), "cant");});
test("cantal -> cantal", function() {deepEqual( Stem("cantal"), "cantal");});
test("canter -> canter", function() {deepEqual( Stem("canter"), "canter");});
test("canterbury -> canterburi", function() {deepEqual( Stem("canterbury"), "canterburi");});
test("cantered -> canter", function() {deepEqual( Stem("cantered"), "canter");});
test("canting -> cant", function() {deepEqual( Stem("canting"), "cant");});
test("cantrip -> cantrip", function() {deepEqual( Stem("cantrip"), "cantrip");});
test("cantrips -> cantrip", function() {deepEqual( Stem("cantrips"), "cantrip");});
test("canvas -> canva", function() {deepEqual( Stem("canvas"), "canva");});
test("canvass -> canvass", function() {deepEqual( Stem("canvass"), "canvass");});
test("canvassed -> canvass", function() {deepEqual( Stem("canvassed"), "canvass");});
test("canvassing -> canvass", function() {deepEqual( Stem("canvassing"), "canvass");});
test("cap -> cap", function() {deepEqual( Stem("cap"), "cap");});
test("capabilities -> capabl", function() {deepEqual( Stem("capabilities"), "capabl");});
test("capability -> capabl", function() {deepEqual( Stem("capability"), "capabl");});
test("capable -> capabl", function() {deepEqual( Stem("capable"), "capabl");});
test("capacious -> capaci", function() {deepEqual( Stem("capacious"), "capaci");});
test("capacities -> capac", function() {deepEqual( Stem("capacities"), "capac");});
test("capacity -> capac", function() {deepEqual( Stem("capacity"), "capac");});
test("cape -> cape", function() {deepEqual( Stem("cape"), "cape");});
test("capella -> capella", function() {deepEqual( Stem("capella"), "capella");});
test("capers -> caper", function() {deepEqual( Stem("capers"), "caper");});
test("capita -> capita", function() {deepEqual( Stem("capita"), "capita");});
test("capital -> capit", function() {deepEqual( Stem("capital"), "capit");});
test("capitalist -> capitalist", function() {deepEqual( Stem("capitalist"), "capitalist");});
test("capitalists -> capitalist", function() {deepEqual( Stem("capitalists"), "capitalist");});
test("capitally -> capit", function() {deepEqual( Stem("capitally"), "capit");});
test("capitals -> capit", function() {deepEqual( Stem("capitals"), "capit");});
test("capitol -> capitol", function() {deepEqual( Stem("capitol"), "capitol");});
test("capitulate -> capitul", function() {deepEqual( Stem("capitulate"), "capitul");});
test("capped -> cap", function() {deepEqual( Stem("capped"), "cap");});
test("capping -> cap", function() {deepEqual( Stem("capping"), "cap");});
test("caprice -> capric", function() {deepEqual( Stem("caprice"), "capric");});
test("caprices -> capric", function() {deepEqual( Stem("caprices"), "capric");});
test("capricious -> caprici", function() {deepEqual( Stem("capricious"), "caprici");});
test("capriciously -> caprici", function() {deepEqual( Stem("capriciously"), "caprici");});
test("capricorn -> capricorn", function() {deepEqual( Stem("capricorn"), "capricorn");});
test("caps -> cap", function() {deepEqual( Stem("caps"), "cap");});
test("capsicum -> capsicum", function() {deepEqual( Stem("capsicum"), "capsicum");});
test("capstans -> capstan", function() {deepEqual( Stem("capstans"), "capstan");});
test("capsule -> capsul", function() {deepEqual( Stem("capsule"), "capsul");});
test("capt -> capt", function() {deepEqual( Stem("capt"), "capt");});
test("captain -> captain", function() {deepEqual( Stem("captain"), "captain");});
test("captains -> captain", function() {deepEqual( Stem("captains"), "captain");});
test("captious -> captious", function() {deepEqual( Stem("captious"), "captious");});
test("captivate -> captiv", function() {deepEqual( Stem("captivate"), "captiv");});
test("captivated -> captiv", function() {deepEqual( Stem("captivated"), "captiv");});
test("captivater -> captivat", function() {deepEqual( Stem("captivater"), "captivat");});
test("captivating -> captiv", function() {deepEqual( Stem("captivating"), "captiv");});
test("captivator -> captiv", function() {deepEqual( Stem("captivator"), "captiv");});
test("captive -> captiv", function() {deepEqual( Stem("captive"), "captiv");});
test("captives -> captiv", function() {deepEqual( Stem("captives"), "captiv");});
test("captivity -> captiv", function() {deepEqual( Stem("captivity"), "captiv");});
test("capture -> captur", function() {deepEqual( Stem("capture"), "captur");});
test("captured -> captur", function() {deepEqual( Stem("captured"), "captur");});
test("capybara -> capybara", function() {deepEqual( Stem("capybara"), "capybara");});
test("capybaras -> capybara", function() {deepEqual( Stem("capybaras"), "capybara");});
test("carabidae -> carabida", function() {deepEqual( Stem("carabidae"), "carabida");});
test("caracara -> caracara", function() {deepEqual( Stem("caracara"), "caracara");});
test("caracaras -> caracara", function() {deepEqual( Stem("caracaras"), "caracara");});
test("caracter -> caract", function() {deepEqual( Stem("caracter"), "caract");});
test("caravan -> caravan", function() {deepEqual( Stem("caravan"), "caravan");});
test("caravansary -> caravansari", function() {deepEqual( Stem("caravansary"), "caravansari");});
test("caravanserai -> caravanserai", function() {deepEqual( Stem("caravanserai"), "caravanserai");});
test("caravels -> caravel", function() {deepEqual( Stem("caravels"), "caravel");});
test("carbine -> carbin", function() {deepEqual( Stem("carbine"), "carbin");});
test("carbonaceous -> carbonac", function() {deepEqual( Stem("carbonaceous"), "carbonac");});
test("carbonate -> carbon", function() {deepEqual( Stem("carbonate"), "carbon");});
test("carboniferous -> carbonifer", function() {deepEqual( Stem("carboniferous"), "carbonifer");});
test("carboy -> carboy", function() {deepEqual( Stem("carboy"), "carboy");});
test("carbury -> carburi", function() {deepEqual( Stem("carbury"), "carburi");});
test("carcase -> carcas", function() {deepEqual( Stem("carcase"), "carcas");});
test("carcass -> carcass", function() {deepEqual( Stem("carcass"), "carcass");});
test("carcasses -> carcass", function() {deepEqual( Stem("carcasses"), "carcass");});
test("card -> card", function() {deepEqual( Stem("card"), "card");});
test("cardinal -> cardin", function() {deepEqual( Stem("cardinal"), "cardin");});
test("cardoon -> cardoon", function() {deepEqual( Stem("cardoon"), "cardoon");});
test("cards -> card", function() {deepEqual( Stem("cards"), "card");});
test("cardui -> cardui", function() {deepEqual( Stem("cardui"), "cardui");});
test("cardunculus -> cardunculus", function() {deepEqual( Stem("cardunculus"), "cardunculus");});
test("care -> care", function() {deepEqual( Stem("care"), "care");});
test("cared -> care", function() {deepEqual( Stem("cared"), "care");});
test("career -> career", function() {deepEqual( Stem("career"), "career");});
test("careers -> career", function() {deepEqual( Stem("careers"), "career");});
test("careful -> care", function() {deepEqual( Stem("careful"), "care");});
test("carefully -> care", function() {deepEqual( Stem("carefully"), "care");});
test("carefulness -> care", function() {deepEqual( Stem("carefulness"), "care");});
test("careless -> careless", function() {deepEqual( Stem("careless"), "careless");});
test("carelessly -> careless", function() {deepEqual( Stem("carelessly"), "careless");});
test("carelessness -> careless", function() {deepEqual( Stem("carelessness"), "careless");});
test("cares -> care", function() {deepEqual( Stem("cares"), "care");});
test("caress -> caress", function() {deepEqual( Stem("caress"), "caress");});
test("caressed -> caress", function() {deepEqual( Stem("caressed"), "caress");});
test("caresses -> caress", function() {deepEqual( Stem("caresses"), "caress");});
test("caressing -> caress", function() {deepEqual( Stem("caressing"), "caress");});
test("caressingly -> caress", function() {deepEqual( Stem("caressingly"), "caress");});
test("careworn -> careworn", function() {deepEqual( Stem("careworn"), "careworn");});
test("cargo -> cargo", function() {deepEqual( Stem("cargo"), "cargo");});
test("cargoes -> cargo", function() {deepEqual( Stem("cargoes"), "cargo");});
test("caricature -> caricatur", function() {deepEqual( Stem("caricature"), "caricatur");});
test("caricatures -> caricatur", function() {deepEqual( Stem("caricatures"), "caricatur");});
test("caring -> care", function() {deepEqual( Stem("caring"), "care");});
test("carizal -> cariz", function() {deepEqual( Stem("carizal"), "cariz");});
test("carking -> cark", function() {deepEqual( Stem("carking"), "cark");});
test("carlos -> carlo", function() {deepEqual( Stem("carlos"), "carlo");});
test("carlton -> carlton", function() {deepEqual( Stem("carlton"), "carlton");});
test("carmen -> carmen", function() {deepEqual( Stem("carmen"), "carmen");});
test("carmichael -> carmichael", function() {deepEqual( Stem("carmichael"), "carmichael");});
test("carmine -> carmin", function() {deepEqual( Stem("carmine"), "carmin");});
test("carnage -> carnag", function() {deepEqual( Stem("carnage"), "carnag");});
test("carnation -> carnat", function() {deepEqual( Stem("carnation"), "carnat");});
test("carne -> carn", function() {deepEqual( Stem("carne"), "carn");});
test("carnegie -> carnegi", function() {deepEqual( Stem("carnegie"), "carnegi");});
test("carnivorous -> carnivor", function() {deepEqual( Stem("carnivorous"), "carnivor");});
test("caroline -> carolin", function() {deepEqual( Stem("caroline"), "carolin");});
test("carolling -> carol", function() {deepEqual( Stem("carolling"), "carol");});
test("carp -> carp", function() {deepEqual( Stem("carp"), "carp");});
test("carpacho -> carpacho", function() {deepEqual( Stem("carpacho"), "carpacho");});
test("carpenter -> carpent", function() {deepEqual( Stem("carpenter"), "carpent");});
test("carpenters -> carpent", function() {deepEqual( Stem("carpenters"), "carpent");});
test("carpet -> carpet", function() {deepEqual( Stem("carpet"), "carpet");});
test("carpeted -> carpet", function() {deepEqual( Stem("carpeted"), "carpet");});
test("carpeting -> carpet", function() {deepEqual( Stem("carpeting"), "carpet");});
test("carpetless -> carpetless", function() {deepEqual( Stem("carpetless"), "carpetless");});
test("carpets -> carpet", function() {deepEqual( Stem("carpets"), "carpet");});
test("carping -> carp", function() {deepEqual( Stem("carping"), "carp");});
test("carrancha -> carrancha", function() {deepEqual( Stem("carrancha"), "carrancha");});
test("carranchas -> carrancha", function() {deepEqual( Stem("carranchas"), "carrancha");});
test("carriage -> carriag", function() {deepEqual( Stem("carriage"), "carriag");});
test("carriages -> carriag", function() {deepEqual( Stem("carriages"), "carriag");});
test("carrie -> carri", function() {deepEqual( Stem("carrie"), "carri");});
test("carried -> carri", function() {deepEqual( Stem("carried"), "carri");});
test("carrier -> carrier", function() {deepEqual( Stem("carrier"), "carrier");});
test("carries -> carri", function() {deepEqual( Stem("carries"), "carri");});
test("carrion -> carrion", function() {deepEqual( Stem("carrion"), "carrion");});
test("carrot -> carrot", function() {deepEqual( Stem("carrot"), "carrot");});
test("carrots -> carrot", function() {deepEqual( Stem("carrots"), "carrot");});
test("carry -> carri", function() {deepEqual( Stem("carry"), "carri");});
test("carrying -> carri", function() {deepEqual( Stem("carrying"), "carri");});
test("carse -> cars", function() {deepEqual( Stem("carse"), "cars");});
test("carstone -> carston", function() {deepEqual( Stem("carstone"), "carston");});
test("cart -> cart", function() {deepEqual( Stem("cart"), "cart");});
test("carte -> cart", function() {deepEqual( Stem("carte"), "cart");});
test("cartel -> cartel", function() {deepEqual( Stem("cartel"), "cartel");});
test("carthagena -> carthagena", function() {deepEqual( Stem("carthagena"), "carthagena");});
test("cartload -> cartload", function() {deepEqual( Stem("cartload"), "cartload");});
test("cartloads -> cartload", function() {deepEqual( Stem("cartloads"), "cartload");});
test("cartridge -> cartridg", function() {deepEqual( Stem("cartridge"), "cartridg");});
test("cartridges -> cartridg", function() {deepEqual( Stem("cartridges"), "cartridg");});
test("carts -> cart", function() {deepEqual( Stem("carts"), "cart");});
test("carve -> carv", function() {deepEqual( Stem("carve"), "carv");});
test("carved -> carv", function() {deepEqual( Stem("carved"), "carv");});
test("carving -> carv", function() {deepEqual( Stem("carving"), "carv");});
test("carvings -> carv", function() {deepEqual( Stem("carvings"), "carv");});
test("casara -> casara", function() {deepEqual( Stem("casara"), "casara");});
test("casarita -> casarita", function() {deepEqual( Stem("casarita"), "casarita");});
test("cascade -> cascad", function() {deepEqual( Stem("cascade"), "cascad");});
test("cascades -> cascad", function() {deepEqual( Stem("cascades"), "cascad");});
test("case -> case", function() {deepEqual( Stem("case"), "case");});
test("casement -> casement", function() {deepEqual( Stem("casement"), "casement");});
test("casements -> casement", function() {deepEqual( Stem("casements"), "casement");});
test("cases -> case", function() {deepEqual( Stem("cases"), "case");});
test("cash -> cash", function() {deepEqual( Stem("cash"), "cash");});
test("cashmere -> cashmer", function() {deepEqual( Stem("cashmere"), "cashmer");});
test("cashup -> cashup", function() {deepEqual( Stem("cashup"), "cashup");});
test("cask -> cask", function() {deepEqual( Stem("cask"), "cask");});
test("casket -> casket", function() {deepEqual( Stem("casket"), "casket");});
test("caskets -> casket", function() {deepEqual( Stem("caskets"), "casket");});
test("casks -> cask", function() {deepEqual( Stem("casks"), "cask");});
test("casma -> casma", function() {deepEqual( Stem("casma"), "casma");});
test("caspian -> caspian", function() {deepEqual( Stem("caspian"), "caspian");});
test("cassada -> cassada", function() {deepEqual( Stem("cassada"), "cassada");});
test("cassio -> cassio", function() {deepEqual( Stem("cassio"), "cassio");});
test("cast -> cast", function() {deepEqual( Stem("cast"), "cast");});
test("castanet -> castanet", function() {deepEqual( Stem("castanet"), "castanet");});
test("castaway -> castaway", function() {deepEqual( Stem("castaway"), "castaway");});
test("caste -> cast", function() {deepEqual( Stem("caste"), "cast");});
test("castigate -> castig", function() {deepEqual( Stem("castigate"), "castig");});
test("castigation -> castig", function() {deepEqual( Stem("castigation"), "castig");});
test("casting -> cast", function() {deepEqual( Stem("casting"), "cast");});
test("castle -> castl", function() {deepEqual( Stem("castle"), "castl");});
test("castles -> castl", function() {deepEqual( Stem("castles"), "castl");});
test("castor -> castor", function() {deepEqual( Stem("castor"), "castor");});
test("castrated -> castrat", function() {deepEqual( Stem("castrated"), "castrat");});
test("castro -> castro", function() {deepEqual( Stem("castro"), "castro");});
test("casts -> cast", function() {deepEqual( Stem("casts"), "cast");});
test("casual -> casual", function() {deepEqual( Stem("casual"), "casual");});
test("casually -> casual", function() {deepEqual( Stem("casually"), "casual");});
test("casualties -> casualti", function() {deepEqual( Stem("casualties"), "casualti");});
test("casuarina -> casuarina", function() {deepEqual( Stem("casuarina"), "casuarina");});
test("casucha -> casucha", function() {deepEqual( Stem("casucha"), "casucha");});
test("casuchas -> casucha", function() {deepEqual( Stem("casuchas"), "casucha");});
test("casuistry -> casuistri", function() {deepEqual( Stem("casuistry"), "casuistri");});
test("casuists -> casuist", function() {deepEqual( Stem("casuists"), "casuist");});
test("cat -> cat", function() {deepEqual( Stem("cat"), "cat");});
test("catacomb -> catacomb", function() {deepEqual( Stem("catacomb"), "catacomb");});
test("cataleptic -> catalept", function() {deepEqual( Stem("cataleptic"), "catalept");});
test("catalogue -> catalogu", function() {deepEqual( Stem("catalogue"), "catalogu");});
test("catalogued -> catalogu", function() {deepEqual( Stem("catalogued"), "catalogu");});
test("catalonian -> catalonian", function() {deepEqual( Stem("catalonian"), "catalonian");});
test("catamaran -> catamaran", function() {deepEqual( Stem("catamaran"), "catamaran");});
test("cataract -> cataract", function() {deepEqual( Stem("cataract"), "cataract");});
test("cataracts -> cataract", function() {deepEqual( Stem("cataracts"), "cataract");});
test("catastrophe -> catastroph", function() {deepEqual( Stem("catastrophe"), "catastroph");});
test("catastrophes -> catastroph", function() {deepEqual( Stem("catastrophes"), "catastroph");});
test("catch -> catch", function() {deepEqual( Stem("catch"), "catch");});
test("catched -> catch", function() {deepEqual( Stem("catched"), "catch");});
test("catchers -> catcher", function() {deepEqual( Stem("catchers"), "catcher");});
test("catches -> catch", function() {deepEqual( Stem("catches"), "catch");});
test("catching -> catch", function() {deepEqual( Stem("catching"), "catch");});
test("catchings -> catch", function() {deepEqual( Stem("catchings"), "catch");});
test("catechism -> catech", function() {deepEqual( Stem("catechism"), "catech");});
test("categories -> categori", function() {deepEqual( Stem("categories"), "categori");});
test("category -> categori", function() {deepEqual( Stem("category"), "categori");});
test("caterpillar -> caterpillar", function() {deepEqual( Stem("caterpillar"), "caterpillar");});
test("caterpillars -> caterpillar", function() {deepEqual( Stem("caterpillars"), "caterpillar");});
test("catgut -> catgut", function() {deepEqual( Stem("catgut"), "catgut");});
test("cathartes -> cathart", function() {deepEqual( Stem("cathartes"), "cathart");});
test("cathedral -> cathedr", function() {deepEqual( Stem("cathedral"), "cathedr");});
test("cathedrals -> cathedr", function() {deepEqual( Stem("cathedrals"), "cathedr");});
test("catherine -> catherin", function() {deepEqual( Stem("catherine"), "catherin");});
test("catholic -> cathol", function() {deepEqual( Stem("catholic"), "cathol");});
test("catholics -> cathol", function() {deepEqual( Stem("catholics"), "cathol");});
test("cats -> cat", function() {deepEqual( Stem("cats"), "cat");});
test("cattle -> cattl", function() {deepEqual( Stem("cattle"), "cattl");});
test("caucahue -> caucahu", function() {deepEqual( Stem("caucahue"), "caucahu");});
test("caught -> caught", function() {deepEqual( Stem("caught"), "caught");});
test("cauldron -> cauldron", function() {deepEqual( Stem("cauldron"), "cauldron");});
test("cauliflowers -> cauliflow", function() {deepEqual( Stem("cauliflowers"), "cauliflow");});
test("cauquenes -> cauquen", function() {deepEqual( Stem("cauquenes"), "cauquen");});
test("caus -> caus", function() {deepEqual( Stem("caus"), "caus");});
test("cause -> caus", function() {deepEqual( Stem("cause"), "caus");});
test("caused -> caus", function() {deepEqual( Stem("caused"), "caus");});
test("causeless -> causeless", function() {deepEqual( Stem("causeless"), "causeless");});
test("causes -> caus", function() {deepEqual( Stem("causes"), "caus");});
test("causing -> caus", function() {deepEqual( Stem("causing"), "caus");});
test("caustic -> caustic", function() {deepEqual( Stem("caustic"), "caustic");});
test("caution -> caution", function() {deepEqual( Stem("caution"), "caution");});
test("cautioned -> caution", function() {deepEqual( Stem("cautioned"), "caution");});
test("cautioning -> caution", function() {deepEqual( Stem("cautioning"), "caution");});
test("cautions -> caution", function() {deepEqual( Stem("cautions"), "caution");});
test("cautious -> cautious", function() {deepEqual( Stem("cautious"), "cautious");});
test("cautiously -> cautious", function() {deepEqual( Stem("cautiously"), "cautious");});
test("cavalry -> cavalri", function() {deepEqual( Stem("cavalry"), "cavalri");});
test("cave -> cave", function() {deepEqual( Stem("cave"), "cave");});
test("caveat -> caveat", function() {deepEqual( Stem("caveat"), "caveat");});
test("cavendish -> cavendish", function() {deepEqual( Stem("cavendish"), "cavendish");});
test("cavern -> cavern", function() {deepEqual( Stem("cavern"), "cavern");});
test("cavernous -> cavern", function() {deepEqual( Stem("cavernous"), "cavern");});
test("caverns -> cavern", function() {deepEqual( Stem("caverns"), "cavern");});
test("caves -> cave", function() {deepEqual( Stem("caves"), "cave");});
test("cavia -> cavia", function() {deepEqual( Stem("cavia"), "cavia");});
test("cavies -> cavi", function() {deepEqual( Stem("cavies"), "cavi");});
test("cavil -> cavil", function() {deepEqual( Stem("cavil"), "cavil");});
test("cavillers -> cavil", function() {deepEqual( Stem("cavillers"), "cavil");});
test("cavities -> caviti", function() {deepEqual( Stem("cavities"), "caviti");});
test("cavity -> caviti", function() {deepEqual( Stem("cavity"), "caviti");});
test("cavy -> cavi", function() {deepEqual( Stem("cavy"), "cavi");});
test("caw -> caw", function() {deepEqual( Stem("caw"), "caw");});
test("cawa -> cawa", function() {deepEqual( Stem("cawa"), "cawa");});
test("cawing -> caw", function() {deepEqual( Stem("cawing"), "caw");});
test("cayanus -> cayanus", function() {deepEqual( Stem("cayanus"), "cayanus");});
test("cayenne -> cayenn", function() {deepEqual( Stem("cayenne"), "cayenn");});
test("caylen -> caylen", function() {deepEqual( Stem("caylen"), "caylen");});
test("cease -> ceas", function() {deepEqual( Stem("cease"), "ceas");});
test("ceased -> ceas", function() {deepEqual( Stem("ceased"), "ceas");});
test("ceaseless -> ceaseless", function() {deepEqual( Stem("ceaseless"), "ceaseless");});
test("ceaselessly -> ceaseless", function() {deepEqual( Stem("ceaselessly"), "ceaseless");});
test("ceases -> ceas", function() {deepEqual( Stem("ceases"), "ceas");});
test("ceasing -> ceas", function() {deepEqual( Stem("ceasing"), "ceas");});
test("cebrionidae -> cebrionida", function() {deepEqual( Stem("cebrionidae"), "cebrionida");});
test("cecilia -> cecilia", function() {deepEqual( Stem("cecilia"), "cecilia");});
test("cedar -> cedar", function() {deepEqual( Stem("cedar"), "cedar");});
test("cedars -> cedar", function() {deepEqual( Stem("cedars"), "cedar");});
test("ceedingly -> ceed", function() {deepEqual( Stem("ceedingly"), "ceed");});
test("ceiling -> ceil", function() {deepEqual( Stem("ceiling"), "ceil");});
test("ceilings -> ceil", function() {deepEqual( Stem("ceilings"), "ceil");});
test("ceillhg -> ceillhg", function() {deepEqual( Stem("ceillhg"), "ceillhg");});
test("cel -> cel", function() {deepEqual( Stem("cel"), "cel");});
test("celebes -> celeb", function() {deepEqual( Stem("celebes"), "celeb");});
test("celebrate -> celebr", function() {deepEqual( Stem("celebrate"), "celebr");});
test("celebrated -> celebr", function() {deepEqual( Stem("celebrated"), "celebr");});
test("celebration -> celebr", function() {deepEqual( Stem("celebration"), "celebr");});
test("celebrity -> celebr", function() {deepEqual( Stem("celebrity"), "celebr");});
test("celery -> celeri", function() {deepEqual( Stem("celery"), "celeri");});
test("celestial -> celesti", function() {deepEqual( Stem("celestial"), "celesti");});
test("cell -> cell", function() {deepEqual( Stem("cell"), "cell");});
test("cellar -> cellar", function() {deepEqual( Stem("cellar"), "cellar");});
test("cellarage -> cellarag", function() {deepEqual( Stem("cellarage"), "cellarag");});
test("cellaria -> cellaria", function() {deepEqual( Stem("cellaria"), "cellaria");});
test("cellars -> cellar", function() {deepEqual( Stem("cellars"), "cellar");});
test("cells -> cell", function() {deepEqual( Stem("cells"), "cell");});
test("cellular -> cellular", function() {deepEqual( Stem("cellular"), "cellular");});
test("cement -> cement", function() {deepEqual( Stem("cement"), "cement");});
test("cemented -> cement", function() {deepEqual( Stem("cemented"), "cement");});
test("cementing -> cement", function() {deepEqual( Stem("cementing"), "cement");});
test("cemetery -> cemeteri", function() {deepEqual( Stem("cemetery"), "cemeteri");});
test("cenotherae -> cenothera", function() {deepEqual( Stem("cenotherae"), "cenothera");});
test("censorious -> censori", function() {deepEqual( Stem("censorious"), "censori");});
test("censorship -> censorship", function() {deepEqual( Stem("censorship"), "censorship");});
test("censure -> censur", function() {deepEqual( Stem("censure"), "censur");});
test("censured -> censur", function() {deepEqual( Stem("censured"), "censur");});
test("censures -> censur", function() {deepEqual( Stem("censures"), "censur");});
test("censuring -> censur", function() {deepEqual( Stem("censuring"), "censur");});
test("census -> census", function() {deepEqual( Stem("census"), "census");});
test("cent -> cent", function() {deepEqual( Stem("cent"), "cent");});
test("centaurs -> centaur", function() {deepEqual( Stem("centaurs"), "centaur");});
test("centered -> center", function() {deepEqual( Stem("centered"), "center");});
test("centra -> centra", function() {deepEqual( Stem("centra"), "centra");});
test("central -> central", function() {deepEqual( Stem("central"), "central");});
test("centre -> centr", function() {deepEqual( Stem("centre"), "centr");});
test("centred -> centr", function() {deepEqual( Stem("centred"), "centr");});
test("centres -> centr", function() {deepEqual( Stem("centres"), "centr");});
test("centrifugal -> centrifug", function() {deepEqual( Stem("centrifugal"), "centrifug");});
test("centring -> centr", function() {deepEqual( Stem("centring"), "centr");});
test("cents -> cent", function() {deepEqual( Stem("cents"), "cent");});
test("centuries -> centuri", function() {deepEqual( Stem("centuries"), "centuri");});
test("century -> centuri", function() {deepEqual( Stem("century"), "centuri");});
test("cependent -> cepend", function() {deepEqual( Stem("cependent"), "cepend");});
test("cephalopoda -> cephalopoda", function() {deepEqual( Stem("cephalopoda"), "cephalopoda");});
test("cereal -> cereal", function() {deepEqual( Stem("cereal"), "cereal");});
test("ceremonial -> ceremoni", function() {deepEqual( Stem("ceremonial"), "ceremoni");});
test("ceremonies -> ceremoni", function() {deepEqual( Stem("ceremonies"), "ceremoni");});
test("ceremonious -> ceremoni", function() {deepEqual( Stem("ceremonious"), "ceremoni");});
test("ceremoniously -> ceremoni", function() {deepEqual( Stem("ceremoniously"), "ceremoni");});
test("ceremony -> ceremoni", function() {deepEqual( Stem("ceremony"), "ceremoni");});
test("cerro -> cerro", function() {deepEqual( Stem("cerro"), "cerro");});
test("certain -> certain", function() {deepEqual( Stem("certain"), "certain");});
test("certainl -> certainl", function() {deepEqual( Stem("certainl"), "certainl");});
test("certainly -> certain", function() {deepEqual( Stem("certainly"), "certain");});
test("certainties -> certainti", function() {deepEqual( Stem("certainties"), "certainti");});
test("certainty -> certainti", function() {deepEqual( Stem("certainty"), "certainti");});
test("certhia -> certhia", function() {deepEqual( Stem("certhia"), "certhia");});
test("certhidea -> certhidea", function() {deepEqual( Stem("certhidea"), "certhidea");});
test("certificate -> certif", function() {deepEqual( Stem("certificate"), "certif");});
test("certificates -> certif", function() {deepEqual( Stem("certificates"), "certif");});
test("certified -> certifi", function() {deepEqual( Stem("certified"), "certifi");});
test("certifiket -> certifiket", function() {deepEqual( Stem("certifiket"), "certifiket");});
test("certify -> certifi", function() {deepEqual( Stem("certify"), "certifi");});
test("certifying -> certifi", function() {deepEqual( Stem("certifying"), "certifi");});
test("cervicem -> cervicem", function() {deepEqual( Stem("cervicem"), "cervicem");});
test("cervus -> cervus", function() {deepEqual( Stem("cervus"), "cervus");});
test("ceryle -> ceryl", function() {deepEqual( Stem("ceryle"), "ceryl");});
test("ces -> ces", function() {deepEqual( Stem("ces"), "ces");});
test("cesenate -> cesen", function() {deepEqual( Stem("cesenate"), "cesen");});
test("cessation -> cessat", function() {deepEqual( Stem("cessation"), "cessat");});
test("cesspool -> cesspool", function() {deepEqual( Stem("cesspool"), "cesspool");});
test("cesspools -> cesspool", function() {deepEqual( Stem("cesspools"), "cesspool");});
test("cetaceous -> cetac", function() {deepEqual( Stem("cetaceous"), "cetac");});
test("cetera -> cetera", function() {deepEqual( Stem("cetera"), "cetera");});
test("ceteras -> cetera", function() {deepEqual( Stem("ceteras"), "cetera");});
test("cetrer -> cetrer", function() {deepEqual( Stem("cetrer"), "cetrer");});
test("chacao -> chacao", function() {deepEqual( Stem("chacao"), "chacao");});
test("chacun -> chacun", function() {deepEqual( Stem("chacun"), "chacun");});
test("chadband -> chadband", function() {deepEqual( Stem("chadband"), "chadband");});
test("chadbands -> chadband", function() {deepEqual( Stem("chadbands"), "chadband");});
test("chafe -> chafe", function() {deepEqual( Stem("chafe"), "chafe");});
test("chafed -> chafe", function() {deepEqual( Stem("chafed"), "chafe");});
test("chafes -> chafe", function() {deepEqual( Stem("chafes"), "chafe");});
test("chaff -> chaff", function() {deepEqual( Stem("chaff"), "chaff");});
test("chaffers -> chaffer", function() {deepEqual( Stem("chaffers"), "chaffer");});
test("chaffinch -> chaffinch", function() {deepEqual( Stem("chaffinch"), "chaffinch");});
test("chafing -> chafe", function() {deepEqual( Stem("chafing"), "chafe");});
test("chagos -> chago", function() {deepEqual( Stem("chagos"), "chago");});
test("chagrin -> chagrin", function() {deepEqual( Stem("chagrin"), "chagrin");});
test("chai -> chai", function() {deepEqual( Stem("chai"), "chai");});
test("chain -> chain", function() {deepEqual( Stem("chain"), "chain");});
test("chained -> chain", function() {deepEqual( Stem("chained"), "chain");});
test("chains -> chain", function() {deepEqual( Stem("chains"), "chain");});
test("chair -> chair", function() {deepEqual( Stem("chair"), "chair");});
test("chairing -> chair", function() {deepEqual( Stem("chairing"), "chair");});
test("chairman -> chairman", function() {deepEqual( Stem("chairman"), "chairman");});
test("chairs -> chair", function() {deepEqual( Stem("chairs"), "chair");});
test("chaise -> chais", function() {deepEqual( Stem("chaise"), "chais");});
test("chalk -> chalk", function() {deepEqual( Stem("chalk"), "chalk");});
test("chalked -> chalk", function() {deepEqual( Stem("chalked"), "chalk");});
test("chalking -> chalk", function() {deepEqual( Stem("chalking"), "chalk");});
test("challenge -> challeng", function() {deepEqual( Stem("challenge"), "challeng");});
test("challenged -> challeng", function() {deepEqual( Stem("challenged"), "challeng");});
test("challenger -> challeng", function() {deepEqual( Stem("challenger"), "challeng");});
test("challenging -> challeng", function() {deepEqual( Stem("challenging"), "challeng");});
test("chalr -> chalr", function() {deepEqual( Stem("chalr"), "chalr");});
test("chama -> chama", function() {deepEqual( Stem("chama"), "chama");});
test("chamber -> chamber", function() {deepEqual( Stem("chamber"), "chamber");});
test("chamberlain -> chamberlain", function() {deepEqual( Stem("chamberlain"), "chamberlain");});
test("chambers -> chamber", function() {deepEqual( Stem("chambers"), "chamber");});
test("chambre -> chambr", function() {deepEqual( Stem("chambre"), "chambr");});
test("chameleon -> chameleon", function() {deepEqual( Stem("chameleon"), "chameleon");});
test("chamisso -> chamisso", function() {deepEqual( Stem("chamisso"), "chamisso");});
test("chamois -> chamoi", function() {deepEqual( Stem("chamois"), "chamoi");});
test("champagne -> champagn", function() {deepEqual( Stem("champagne"), "champagn");});
test("champion -> champion", function() {deepEqual( Stem("champion"), "champion");});
test("champions -> champion", function() {deepEqual( Stem("champions"), "champion");});
test("chance -> chanc", function() {deepEqual( Stem("chance"), "chanc");});
test("chanced -> chanc", function() {deepEqual( Stem("chanced"), "chanc");});
test("chancellor -> chancellor", function() {deepEqual( Stem("chancellor"), "chancellor");});
test("chancellors -> chancellor", function() {deepEqual( Stem("chancellors"), "chancellor");});
test("chancelor -> chancelor", function() {deepEqual( Stem("chancelor"), "chancelor");});
test("chancery -> chanceri", function() {deepEqual( Stem("chancery"), "chanceri");});
test("chances -> chanc", function() {deepEqual( Stem("chances"), "chanc");});
test("chancing -> chanc", function() {deepEqual( Stem("chancing"), "chanc");});
test("chandelier -> chandeli", function() {deepEqual( Stem("chandelier"), "chandeli");});
test("chandeliers -> chandeli", function() {deepEqual( Stem("chandeliers"), "chandeli");});
test("chandler -> chandler", function() {deepEqual( Stem("chandler"), "chandler");});
test("chaneral -> chaner", function() {deepEqual( Stem("chaneral"), "chaner");});
test("change -> chang", function() {deepEqual( Stem("change"), "chang");});
test("changeable -> changeabl", function() {deepEqual( Stem("changeable"), "changeabl");});
test("changed -> chang", function() {deepEqual( Stem("changed"), "chang");});
test("changeling -> changel", function() {deepEqual( Stem("changeling"), "changel");});
test("changes -> chang", function() {deepEqual( Stem("changes"), "chang");});
test("changing -> chang", function() {deepEqual( Stem("changing"), "chang");});
test("channel -> channel", function() {deepEqual( Stem("channel"), "channel");});
test("channels -> channel", function() {deepEqual( Stem("channels"), "channel");});
test("chantant -> chantant", function() {deepEqual( Stem("chantant"), "chantant");});
test("chanted -> chant", function() {deepEqual( Stem("chanted"), "chant");});
test("chanting -> chant", function() {deepEqual( Stem("chanting"), "chant");});
test("chants -> chant", function() {deepEqual( Stem("chants"), "chant");});
test("chanuncillo -> chanuncillo", function() {deepEqual( Stem("chanuncillo"), "chanuncillo");});
test("chaos -> chao", function() {deepEqual( Stem("chaos"), "chao");});
test("chaotic -> chaotic", function() {deepEqual( Stem("chaotic"), "chaotic");});
test("chap -> chap", function() {deepEqual( Stem("chap"), "chap");});
test("chapel -> chapel", function() {deepEqual( Stem("chapel"), "chapel");});
test("chapels -> chapel", function() {deepEqual( Stem("chapels"), "chapel");});
test("chaperon -> chaperon", function() {deepEqual( Stem("chaperon"), "chaperon");});
test("chaperone -> chaperon", function() {deepEqual( Stem("chaperone"), "chaperon");});
test("chaperons -> chaperon", function() {deepEqual( Stem("chaperons"), "chaperon");});
test("chaplain -> chaplain", function() {deepEqual( Stem("chaplain"), "chaplain");});
test("chaps -> chap", function() {deepEqual( Stem("chaps"), "chap");});
test("chapter -> chapter", function() {deepEqual( Stem("chapter"), "chapter");});
test("chapters -> chapter", function() {deepEqual( Stem("chapters"), "chapter");});
test("chaquaio -> chaquaio", function() {deepEqual( Stem("chaquaio"), "chaquaio");});
test("character -> charact", function() {deepEqual( Stem("character"), "charact");});
test("characteristic -> characterist", function() {deepEqual( Stem("characteristic"), "characterist");});
test("characteristically -> characterist", function() {deepEqual( Stem("characteristically"), "characterist");});
test("characteristics -> characterist", function() {deepEqual( Stem("characteristics"), "characterist");});
test("characterize -> character", function() {deepEqual( Stem("characterize"), "character");});
test("characterized -> character", function() {deepEqual( Stem("characterized"), "character");});
test("characterizes -> character", function() {deepEqual( Stem("characterizes"), "character");});
test("characterizing -> character", function() {deepEqual( Stem("characterizing"), "character");});
test("characters -> charact", function() {deepEqual( Stem("characters"), "charact");});
test("charade -> charad", function() {deepEqual( Stem("charade"), "charad");});
test("charcoal -> charcoal", function() {deepEqual( Stem("charcoal"), "charcoal");});
test("charcoaled -> charcoal", function() {deepEqual( Stem("charcoaled"), "charcoal");});
test("charge -> charg", function() {deepEqual( Stem("charge"), "charg");});
test("chargeable -> chargeabl", function() {deepEqual( Stem("chargeable"), "chargeabl");});
test("charged -> charg", function() {deepEqual( Stem("charged"), "charg");});
test("chargers -> charger", function() {deepEqual( Stem("chargers"), "charger");});
test("charges -> charg", function() {deepEqual( Stem("charges"), "charg");});
test("charging -> charg", function() {deepEqual( Stem("charging"), "charg");});
test("chariey -> chariey", function() {deepEqual( Stem("chariey"), "chariey");});
test("charing -> chare", function() {deepEqual( Stem("charing"), "chare");});
test("chariot -> chariot", function() {deepEqual( Stem("chariot"), "chariot");});
test("chariots -> chariot", function() {deepEqual( Stem("chariots"), "chariot");});
test("charitable -> charit", function() {deepEqual( Stem("charitable"), "charit");});
test("charitably -> charit", function() {deepEqual( Stem("charitably"), "charit");});
test("charities -> chariti", function() {deepEqual( Stem("charities"), "chariti");});
test("charity -> chariti", function() {deepEqual( Stem("charity"), "chariti");});
test("charlatanism -> charlatan", function() {deepEqual( Stem("charlatanism"), "charlatan");});
test("charles -> charl", function() {deepEqual( Stem("charles"), "charl");});
test("charley -> charley", function() {deepEqual( Stem("charley"), "charley");});
test("charlie -> charli", function() {deepEqual( Stem("charlie"), "charli");});
test("charlotte -> charlott", function() {deepEqual( Stem("charlotte"), "charlott");});
test("charm -> charm", function() {deepEqual( Stem("charm"), "charm");});
test("charmed -> charm", function() {deepEqual( Stem("charmed"), "charm");});
test("charmer -> charmer", function() {deepEqual( Stem("charmer"), "charmer");});
test("charmers -> charmer", function() {deepEqual( Stem("charmers"), "charmer");});
test("charming -> charm", function() {deepEqual( Stem("charming"), "charm");});
test("charmingly -> charm", function() {deepEqual( Stem("charmingly"), "charm");});
test("charms -> charm", function() {deepEqual( Stem("charms"), "charm");});
test("charnel -> charnel", function() {deepEqual( Stem("charnel"), "charnel");});
test("charon -> charon", function() {deepEqual( Stem("charon"), "charon");});
test("charqui -> charqui", function() {deepEqual( Stem("charqui"), "charqui");});
test("charred -> char", function() {deepEqual( Stem("charred"), "char");});
test("chart -> chart", function() {deepEqual( Stem("chart"), "chart");});
test("chartered -> charter", function() {deepEqual( Stem("chartered"), "charter");});
test("chartism -> chartism", function() {deepEqual( Stem("chartism"), "chartism");});
test("chartist -> chartist", function() {deepEqual( Stem("chartist"), "chartist");});
test("charts -> chart", function() {deepEqual( Stem("charts"), "chart");});
test("charwoman -> charwoman", function() {deepEqual( Stem("charwoman"), "charwoman");});
test("chary -> chari", function() {deepEqual( Stem("chary"), "chari");});
test("chase -> chase", function() {deepEqual( Stem("chase"), "chase");});
test("chased -> chase", function() {deepEqual( Stem("chased"), "chase");});
test("chases -> chase", function() {deepEqual( Stem("chases"), "chase");});
test("chasing -> chase", function() {deepEqual( Stem("chasing"), "chase");});
test("chasm -> chasm", function() {deepEqual( Stem("chasm"), "chasm");});
test("chasms -> chasm", function() {deepEqual( Stem("chasms"), "chasm");});
test("chaste -> chast", function() {deepEqual( Stem("chaste"), "chast");});
test("chastened -> chasten", function() {deepEqual( Stem("chastened"), "chasten");});
test("chastening -> chasten", function() {deepEqual( Stem("chastening"), "chasten");});
test("chastise -> chastis", function() {deepEqual( Stem("chastise"), "chastis");});
test("chastisement -> chastis", function() {deepEqual( Stem("chastisement"), "chastis");});
test("chastity -> chastiti", function() {deepEqual( Stem("chastity"), "chastiti");});
test("chat -> chat", function() {deepEqual( Stem("chat"), "chat");});
test("chateau -> chateau", function() {deepEqual( Stem("chateau"), "chateau");});
test("chatham -> chatham", function() {deepEqual( Stem("chatham"), "chatham");});
test("chatted -> chat", function() {deepEqual( Stem("chatted"), "chat");});
test("chattels -> chattel", function() {deepEqual( Stem("chattels"), "chattel");});
test("chatter -> chatter", function() {deepEqual( Stem("chatter"), "chatter");});
test("chatterbox -> chatterbox", function() {deepEqual( Stem("chatterbox"), "chatterbox");});
test("chattered -> chatter", function() {deepEqual( Stem("chattered"), "chatter");});
test("chatterer -> chatter", function() {deepEqual( Stem("chatterer"), "chatter");});
test("chattering -> chatter", function() {deepEqual( Stem("chattering"), "chatter");});
test("chatters -> chatter", function() {deepEqual( Stem("chatters"), "chatter");});
test("chatting -> chat", function() {deepEqual( Stem("chatting"), "chat");});
test("chatty -> chatti", function() {deepEqual( Stem("chatty"), "chatti");});
test("chaunt -> chaunt", function() {deepEqual( Stem("chaunt"), "chaunt");});
test("cheap -> cheap", function() {deepEqual( Stem("cheap"), "cheap");});
test("cheaper -> cheaper", function() {deepEqual( Stem("cheaper"), "cheaper");});
test("cheapest -> cheapest", function() {deepEqual( Stem("cheapest"), "cheapest");});
test("cheaply -> cheapli", function() {deepEqual( Stem("cheaply"), "cheapli");});
test("cheapside -> cheapsid", function() {deepEqual( Stem("cheapside"), "cheapsid");});
test("cheat -> cheat", function() {deepEqual( Stem("cheat"), "cheat");});
test("cheated -> cheat", function() {deepEqual( Stem("cheated"), "cheat");});
test("cheating -> cheat", function() {deepEqual( Stem("cheating"), "cheat");});
test("cheats -> cheat", function() {deepEqual( Stem("cheats"), "cheat");});
test("chec -> chec", function() {deepEqual( Stem("chec"), "chec");});
test("check -> check", function() {deepEqual( Stem("check"), "check");});
test("checked -> check", function() {deepEqual( Stem("checked"), "check");});
test("checking -> check", function() {deepEqual( Stem("checking"), "check");});
test("checks -> check", function() {deepEqual( Stem("checks"), "check");});
test("cheek -> cheek", function() {deepEqual( Stem("cheek"), "cheek");});
test("cheeked -> cheek", function() {deepEqual( Stem("cheeked"), "cheek");});
test("cheeks -> cheek", function() {deepEqual( Stem("cheeks"), "cheek");});
test("cheer -> cheer", function() {deepEqual( Stem("cheer"), "cheer");});
test("cheered -> cheer", function() {deepEqual( Stem("cheered"), "cheer");});
test("cheerful -> cheer", function() {deepEqual( Stem("cheerful"), "cheer");});
test("cheerfully -> cheer", function() {deepEqual( Stem("cheerfully"), "cheer");});
test("cheerfulness -> cheer", function() {deepEqual( Stem("cheerfulness"), "cheer");});
test("cheerily -> cheerili", function() {deepEqual( Stem("cheerily"), "cheerili");});
test("cheeriness -> cheeri", function() {deepEqual( Stem("cheeriness"), "cheeri");});
test("cheering -> cheer", function() {deepEqual( Stem("cheering"), "cheer");});
test("cheerless -> cheerless", function() {deepEqual( Stem("cheerless"), "cheerless");});
test("cheers -> cheer", function() {deepEqual( Stem("cheers"), "cheer");});
test("cheery -> cheeri", function() {deepEqual( Stem("cheery"), "cheeri");});
test("cheeryble -> cheerybl", function() {deepEqual( Stem("cheeryble"), "cheerybl");});
test("cheerybles -> cheerybl", function() {deepEqual( Stem("cheerybles"), "cheerybl");});
test("cheese -> chees", function() {deepEqual( Stem("cheese"), "chees");});
test("cheeseming -> cheesem", function() {deepEqual( Stem("cheeseming"), "cheesem");});
test("chefs -> chef", function() {deepEqual( Stem("chefs"), "chef");});
test("chelsea -> chelsea", function() {deepEqual( Stem("chelsea"), "chelsea");});
test("cheltenham -> cheltenham", function() {deepEqual( Stem("cheltenham"), "cheltenham");});
test("chem -> chem", function() {deepEqual( Stem("chem"), "chem");});
test("chemical -> chemic", function() {deepEqual( Stem("chemical"), "chemic");});
test("chemins -> chemin", function() {deepEqual( Stem("chemins"), "chemin");});
test("chemise -> chemis", function() {deepEqual( Stem("chemise"), "chemis");});
test("chemist -> chemist", function() {deepEqual( Stem("chemist"), "chemist");});
test("chemistry -> chemistri", function() {deepEqual( Stem("chemistry"), "chemistri");});
test("chemists -> chemist", function() {deepEqual( Stem("chemists"), "chemist");});
test("chenille -> chenill", function() {deepEqual( Stem("chenille"), "chenill");});
test("chepones -> chepon", function() {deepEqual( Stem("chepones"), "chepon");});
test("cheque -> chequ", function() {deepEqual( Stem("cheque"), "chequ");});
test("chequered -> chequer", function() {deepEqual( Stem("chequered"), "chequer");});
test("cheques -> chequ", function() {deepEqual( Stem("cheques"), "chequ");});
test("cher -> cher", function() {deepEqual( Stem("cher"), "cher");});
test("chere -> chere", function() {deepEqual( Stem("chere"), "chere");});
test("cherish -> cherish", function() {deepEqual( Stem("cherish"), "cherish");});
test("cherished -> cherish", function() {deepEqual( Stem("cherished"), "cherish");});
test("cherishes -> cherish", function() {deepEqual( Stem("cherishes"), "cherish");});
test("cherishing -> cherish", function() {deepEqual( Stem("cherishing"), "cherish");});
test("cherizette -> cherizett", function() {deepEqual( Stem("cherizette"), "cherizett");});
test("cherries -> cherri", function() {deepEqual( Stem("cherries"), "cherri");});
test("cherry -> cherri", function() {deepEqual( Stem("cherry"), "cherri");});
test("cherryble -> cherrybl", function() {deepEqual( Stem("cherryble"), "cherrybl");});
test("cherrybles -> cherrybl", function() {deepEqual( Stem("cherrybles"), "cherrybl");});
test("cherty -> cherti", function() {deepEqual( Stem("cherty"), "cherti");});
test("cherubim -> cherubim", function() {deepEqual( Stem("cherubim"), "cherubim");});
test("cheshires -> cheshir", function() {deepEqual( Stem("cheshires"), "cheshir");});
test("chesney -> chesney", function() {deepEqual( Stem("chesney"), "chesney");});
test("chess -> chess", function() {deepEqual( Stem("chess"), "chess");});
test("chest -> chest", function() {deepEqual( Stem("chest"), "chest");});
test("chested -> chest", function() {deepEqual( Stem("chested"), "chest");});
test("chesterfield -> chesterfield", function() {deepEqual( Stem("chesterfield"), "chesterfield");});
test("chestnut -> chestnut", function() {deepEqual( Stem("chestnut"), "chestnut");});
test("chestnuts -> chestnut", function() {deepEqual( Stem("chestnuts"), "chestnut");});
test("chests -> chest", function() {deepEqual( Stem("chests"), "chest");});
test("cheucau -> cheucau", function() {deepEqual( Stem("cheucau"), "cheucau");});
test("cheval -> cheval", function() {deepEqual( Stem("cheval"), "cheval");});
test("chevaux -> chevaux", function() {deepEqual( Stem("chevaux"), "chevaux");});
test("chevy -> chevi", function() {deepEqual( Stem("chevy"), "chevi");});
test("chew -> chew", function() {deepEqual( Stem("chew"), "chew");});
test("chewed -> chew", function() {deepEqual( Stem("chewed"), "chew");});
test("chewing -> chew", function() {deepEqual( Stem("chewing"), "chew");});
test("chichester -> chichest", function() {deepEqual( Stem("chichester"), "chichest");});
test("chichi -> chichi", function() {deepEqual( Stem("chichi"), "chichi");});
test("chick -> chick", function() {deepEqual( Stem("chick"), "chick");});
test("chicken -> chicken", function() {deepEqual( Stem("chicken"), "chicken");});
test("chickens -> chicken", function() {deepEqual( Stem("chickens"), "chicken");});
test("chiduco -> chiduco", function() {deepEqual( Stem("chiduco"), "chiduco");});
test("chief -> chief", function() {deepEqual( Stem("chief"), "chief");});
test("chiefest -> chiefest", function() {deepEqual( Stem("chiefest"), "chiefest");});
test("chiefly -> chiefli", function() {deepEqual( Stem("chiefly"), "chiefli");});
test("chiefs -> chief", function() {deepEqual( Stem("chiefs"), "chief");});
test("chiel -> chiel", function() {deepEqual( Stem("chiel"), "chiel");});
test("chiens -> chien", function() {deepEqual( Stem("chiens"), "chien");});
test("child -> child", function() {deepEqual( Stem("child"), "child");});
test("childhood -> childhood", function() {deepEqual( Stem("childhood"), "childhood");});
test("childish -> childish", function() {deepEqual( Stem("childish"), "childish");});
test("childishly -> childish", function() {deepEqual( Stem("childishly"), "childish");});
test("childishness -> childish", function() {deepEqual( Stem("childishness"), "childish");});
test("childless -> childless", function() {deepEqual( Stem("childless"), "childless");});
test("childlike -> childlik", function() {deepEqual( Stem("childlike"), "childlik");});
test("children -> children", function() {deepEqual( Stem("children"), "children");});
test("chile -> chile", function() {deepEqual( Stem("chile"), "chile");});
test("chilean -> chilean", function() {deepEqual( Stem("chilean"), "chilean");});
test("chileno -> chileno", function() {deepEqual( Stem("chileno"), "chileno");});
test("chilenos -> chileno", function() {deepEqual( Stem("chilenos"), "chileno");});
test("chilian -> chilian", function() {deepEqual( Stem("chilian"), "chilian");});
test("chilicauquen -> chilicauquen", function() {deepEqual( Stem("chilicauquen"), "chilicauquen");});
test("chilipa -> chilipa", function() {deepEqual( Stem("chilipa"), "chilipa");});
test("chill -> chill", function() {deepEqual( Stem("chill"), "chill");});
test("chilled -> chill", function() {deepEqual( Stem("chilled"), "chill");});
test("chilling -> chill", function() {deepEqual( Stem("chilling"), "chill");});
test("chills -> chill", function() {deepEqual( Stem("chills"), "chill");});
test("chilly -> chilli", function() {deepEqual( Stem("chilly"), "chilli");});
test("chiloe -> chilo", function() {deepEqual( Stem("chiloe"), "chilo");});
test("chilotan -> chilotan", function() {deepEqual( Stem("chilotan"), "chilotan");});
test("chilotans -> chilotan", function() {deepEqual( Stem("chilotans"), "chilotan");});
test("chiltern -> chiltern", function() {deepEqual( Stem("chiltern"), "chiltern");});
test("chimango -> chimango", function() {deepEqual( Stem("chimango"), "chimango");});
test("chimbley -> chimbley", function() {deepEqual( Stem("chimbley"), "chimbley");});
test("chimborazo -> chimborazo", function() {deepEqual( Stem("chimborazo"), "chimborazo");});
test("chimes -> chime", function() {deepEqual( Stem("chimes"), "chime");});
test("chimie -> chimi", function() {deepEqual( Stem("chimie"), "chimi");});
test("chimney -> chimney", function() {deepEqual( Stem("chimney"), "chimney");});
test("chimneypiece -> chimneypiec", function() {deepEqual( Stem("chimneypiece"), "chimneypiec");});
test("chimneys -> chimney", function() {deepEqual( Stem("chimneys"), "chimney");});
test("chin -> chin", function() {deepEqual( Stem("chin"), "chin");});
test("china -> china", function() {deepEqual( Stem("china"), "china");});
test("chinas -> china", function() {deepEqual( Stem("chinas"), "china");});
test("chinchilloides -> chinchilloid", function() {deepEqual( Stem("chinchilloides"), "chinchilloid");});
test("chinese -> chines", function() {deepEqual( Stem("chinese"), "chines");});
test("chink -> chink", function() {deepEqual( Stem("chink"), "chink");});
test("chinking -> chink", function() {deepEqual( Stem("chinking"), "chink");});
test("chinks -> chink", function() {deepEqual( Stem("chinks"), "chink");});
test("chins -> chin", function() {deepEqual( Stem("chins"), "chin");});
test("chintz -> chintz", function() {deepEqual( Stem("chintz"), "chintz");});
test("chionis -> chioni", function() {deepEqual( Stem("chionis"), "chioni");});
test("chip -> chip", function() {deepEqual( Stem("chip"), "chip");});
test("chipping -> chip", function() {deepEqual( Stem("chipping"), "chip");});
test("chirp -> chirp", function() {deepEqual( Stem("chirp"), "chirp");});
test("chirped -> chirp", function() {deepEqual( Stem("chirped"), "chirp");});
test("chirping -> chirp", function() {deepEqual( Stem("chirping"), "chirp");});
test("chirps -> chirp", function() {deepEqual( Stem("chirps"), "chirp");});
test("chirrup -> chirrup", function() {deepEqual( Stem("chirrup"), "chirrup");});
test("chirruped -> chirrup", function() {deepEqual( Stem("chirruped"), "chirrup");});
test("chirruping -> chirrup", function() {deepEqual( Stem("chirruping"), "chirrup");});
test("chisel -> chisel", function() {deepEqual( Stem("chisel"), "chisel");});
test("chiselled -> chisel", function() {deepEqual( Stem("chiselled"), "chisel");});
test("chit -> chit", function() {deepEqual( Stem("chit"), "chit");});
test("chitons -> chiton", function() {deepEqual( Stem("chitons"), "chiton");});
test("chivalrous -> chivalr", function() {deepEqual( Stem("chivalrous"), "chivalr");});
test("chivalrously -> chivalr", function() {deepEqual( Stem("chivalrously"), "chivalr");});
test("chivalry -> chivalri", function() {deepEqual( Stem("chivalry"), "chivalri");});
test("chivied -> chivi", function() {deepEqual( Stem("chivied"), "chivi");});
test("chivying -> chivi", function() {deepEqual( Stem("chivying"), "chivi");});
test("chizzle -> chizzl", function() {deepEqual( Stem("chizzle"), "chizzl");});
test("chlorides -> chlorid", function() {deepEqual( Stem("chlorides"), "chlorid");});
test("chock -> chock", function() {deepEqual( Stem("chock"), "chock");});
test("chocolate -> chocol", function() {deepEqual( Stem("chocolate"), "chocol");});
test("choice -> choic", function() {deepEqual( Stem("choice"), "choic");});
test("choiceness -> choic", function() {deepEqual( Stem("choiceness"), "choic");});
test("choicest -> choicest", function() {deepEqual( Stem("choicest"), "choicest");});
test("choir -> choir", function() {deepEqual( Stem("choir"), "choir");});
test("choiseul -> choiseul", function() {deepEqual( Stem("choiseul"), "choiseul");});
test("choke -> choke", function() {deepEqual( Stem("choke"), "choke");});
test("choked -> choke", function() {deepEqual( Stem("choked"), "choke");});
test("chokes -> choke", function() {deepEqual( Stem("chokes"), "choke");});
test("choking -> choke", function() {deepEqual( Stem("choking"), "choke");});
test("cholechel -> cholechel", function() {deepEqual( Stem("cholechel"), "cholechel");});
test("cholera -> cholera", function() {deepEqual( Stem("cholera"), "cholera");});
test("chonchi -> chonchi", function() {deepEqual( Stem("chonchi"), "chonchi");});
test("chonos -> chono", function() {deepEqual( Stem("chonos"), "chono");});
test("choose -> choos", function() {deepEqual( Stem("choose"), "choos");});
test("chooses -> choos", function() {deepEqual( Stem("chooses"), "choos");});
test("choosing -> choos", function() {deepEqual( Stem("choosing"), "choos");});
test("chop -> chop", function() {deepEqual( Stem("chop"), "chop");});
test("chopkins -> chopkin", function() {deepEqual( Stem("chopkins"), "chopkin");});
test("chopped -> chop", function() {deepEqual( Stem("chopped"), "chop");});
test("chopping -> chop", function() {deepEqual( Stem("chopping"), "chop");});
test("chops -> chop", function() {deepEqual( Stem("chops"), "chop");});
test("chord -> chord", function() {deepEqual( Stem("chord"), "chord");});
test("chords -> chord", function() {deepEqual( Stem("chords"), "chord");});
test("choristers -> chorist", function() {deepEqual( Stem("choristers"), "chorist");});
test("chorus -> chorus", function() {deepEqual( Stem("chorus"), "chorus");});
test("choruses -> chorus", function() {deepEqual( Stem("choruses"), "chorus");});
test("chose -> chose", function() {deepEqual( Stem("chose"), "chose");});
test("chosen -> chosen", function() {deepEqual( Stem("chosen"), "chosen");});
test("chowser -> chowser", function() {deepEqual( Stem("chowser"), "chowser");});
test("christ -> christ", function() {deepEqual( Stem("christ"), "christ");});
test("christabel -> christabel", function() {deepEqual( Stem("christabel"), "christabel");});
test("christen -> christen", function() {deepEqual( Stem("christen"), "christen");});
test("christendom -> christendom", function() {deepEqual( Stem("christendom"), "christendom");});
test("christened -> christen", function() {deepEqual( Stem("christened"), "christen");});
test("christening -> christen", function() {deepEqual( Stem("christening"), "christen");});
test("christi -> christi", function() {deepEqual( Stem("christi"), "christi");});
test("christian -> christian", function() {deepEqual( Stem("christian"), "christian");});
test("christianity -> christian", function() {deepEqual( Stem("christianity"), "christian");});
test("christians -> christian", function() {deepEqual( Stem("christians"), "christian");});
test("christmas -> christma", function() {deepEqual( Stem("christmas"), "christma");});
test("christopher -> christoph", function() {deepEqual( Stem("christopher"), "christoph");});
test("chronic -> chronic", function() {deepEqual( Stem("chronic"), "chronic");});
test("chronicle -> chronicl", function() {deepEqual( Stem("chronicle"), "chronicl");});
test("chronicled -> chronicl", function() {deepEqual( Stem("chronicled"), "chronicl");});
test("chroniclers -> chronicl", function() {deepEqual( Stem("chroniclers"), "chronicl");});
test("chronicles -> chronicl", function() {deepEqual( Stem("chronicles"), "chronicl");});
test("chronometrical -> chronometr", function() {deepEqual( Stem("chronometrical"), "chronometr");});
test("chrysalis -> chrysali", function() {deepEqual( Stem("chrysalis"), "chrysali");});
test("chrysomelidae -> chrysomelida", function() {deepEqual( Stem("chrysomelidae"), "chrysomelida");});
test("chrysopa -> chrysopa", function() {deepEqual( Stem("chrysopa"), "chrysopa");});
test("chubby -> chubbi", function() {deepEqual( Stem("chubby"), "chubbi");});
test("chuck -> chuck", function() {deepEqual( Stem("chuck"), "chuck");});
test("chucked -> chuck", function() {deepEqual( Stem("chucked"), "chuck");});
test("chuckle -> chuckl", function() {deepEqual( Stem("chuckle"), "chuckl");});
test("chuckled -> chuckl", function() {deepEqual( Stem("chuckled"), "chuckl");});
test("chuckling -> chuckl", function() {deepEqual( Stem("chuckling"), "chuckl");});
test("chunk -> chunk", function() {deepEqual( Stem("chunk"), "chunk");});
test("chunks -> chunk", function() {deepEqual( Stem("chunks"), "chunk");});
test("chupat -> chupat", function() {deepEqual( Stem("chupat"), "chupat");});
test("church -> church", function() {deepEqual( Stem("church"), "church");});
test("churches -> church", function() {deepEqual( Stem("churches"), "church");});
test("churchgoing -> churchgo", function() {deepEqual( Stem("churchgoing"), "churchgo");});
test("churchyard -> churchyard", function() {deepEqual( Stem("churchyard"), "churchyard");});
test("churchyards -> churchyard", function() {deepEqual( Stem("churchyards"), "churchyard");});
test("churlishness -> churlish", function() {deepEqual( Stem("churlishness"), "churlish");});
test("churls -> churl", function() {deepEqual( Stem("churls"), "churl");});
test("churned -> churn", function() {deepEqual( Stem("churned"), "churn");});
test("churning -> churn", function() {deepEqual( Stem("churning"), "churn");});
test("chut -> chut", function() {deepEqual( Stem("chut"), "chut");});
test("chuzo -> chuzo", function() {deepEqual( Stem("chuzo"), "chuzo");});
test("chuzos -> chuzo", function() {deepEqual( Stem("chuzos"), "chuzo");});
test("chy -> chi", function() {deepEqual( Stem("chy"), "chi");});
test("cicadae -> cicada", function() {deepEqual( Stem("cicadae"), "cicada");});
test("cicadas -> cicada", function() {deepEqual( Stem("cicadas"), "cicada");});
test("cicidae -> cicida", function() {deepEqual( Stem("cicidae"), "cicida");});
test("cider -> cider", function() {deepEqual( Stem("cider"), "cider");});
test("cigar -> cigar", function() {deepEqual( Stem("cigar"), "cigar");});
test("cigarette -> cigarett", function() {deepEqual( Stem("cigarette"), "cigarett");});
test("cigarettes -> cigarett", function() {deepEqual( Stem("cigarettes"), "cigarett");});
test("cigaritos -> cigarito", function() {deepEqual( Stem("cigaritos"), "cigarito");});
test("cigars -> cigar", function() {deepEqual( Stem("cigars"), "cigar");});
test("ciliae -> cilia", function() {deepEqual( Stem("ciliae"), "cilia");});
test("cimabue -> cimabu", function() {deepEqual( Stem("cimabue"), "cimabu");});
test("cincindela -> cincindela", function() {deepEqual( Stem("cincindela"), "cincindela");});
test("cincinnatus -> cincinnatus", function() {deepEqual( Stem("cincinnatus"), "cincinnatus");});
test("cincinnatuses -> cincinnatus", function() {deepEqual( Stem("cincinnatuses"), "cincinnatus");});
test("cinder -> cinder", function() {deepEqual( Stem("cinder"), "cinder");});
test("cinderella -> cinderella", function() {deepEqual( Stem("cinderella"), "cinderella");});
test("cinders -> cinder", function() {deepEqual( Stem("cinders"), "cinder");});
test("cindery -> cinderi", function() {deepEqual( Stem("cindery"), "cinderi");});
test("cinereus -> cinereus", function() {deepEqual( Stem("cinereus"), "cinereus");});
test("cinnamon -> cinnamon", function() {deepEqual( Stem("cinnamon"), "cinnamon");});
test("cinq -> cinq", function() {deepEqual( Stem("cinq"), "cinq");});
test("ciphering -> cipher", function() {deepEqual( Stem("ciphering"), "cipher");});
test("cir -> cir", function() {deepEqual( Stem("cir"), "cir");});
test("circle -> circl", function() {deepEqual( Stem("circle"), "circl");});
test("circles -> circl", function() {deepEqual( Stem("circles"), "circl");});
test("circling -> circl", function() {deepEqual( Stem("circling"), "circl");});
test("circuit -> circuit", function() {deepEqual( Stem("circuit"), "circuit");});
test("circuitous -> circuit", function() {deepEqual( Stem("circuitous"), "circuit");});
test("circuits -> circuit", function() {deepEqual( Stem("circuits"), "circuit");});
test("circular -> circular", function() {deepEqual( Stem("circular"), "circular");});
test("circulars -> circular", function() {deepEqual( Stem("circulars"), "circular");});
test("circulated -> circul", function() {deepEqual( Stem("circulated"), "circul");});
test("circulates -> circul", function() {deepEqual( Stem("circulates"), "circul");});
test("circulating -> circul", function() {deepEqual( Stem("circulating"), "circul");});
test("circulation -> circul", function() {deepEqual( Stem("circulation"), "circul");});
test("circumambient -> circumambi", function() {deepEqual( Stem("circumambient"), "circumambi");});
test("circumference -> circumfer", function() {deepEqual( Stem("circumference"), "circumfer");});
test("circumjacent -> circumjac", function() {deepEqual( Stem("circumjacent"), "circumjac");});
test("circumlocution -> circumlocut", function() {deepEqual( Stem("circumlocution"), "circumlocut");});
test("circumnavigate -> circumnavig", function() {deepEqual( Stem("circumnavigate"), "circumnavig");});
test("circumnavigation -> circumnavig", function() {deepEqual( Stem("circumnavigation"), "circumnavig");});
test("circumscribed -> circumscrib", function() {deepEqual( Stem("circumscribed"), "circumscrib");});
test("circumspect -> circumspect", function() {deepEqual( Stem("circumspect"), "circumspect");});
test("circumstance -> circumst", function() {deepEqual( Stem("circumstance"), "circumst");});
test("circumstanced -> circumstanc", function() {deepEqual( Stem("circumstanced"), "circumstanc");});
test("circumstances -> circumst", function() {deepEqual( Stem("circumstances"), "circumst");});
test("circumstantial -> circumstanti", function() {deepEqual( Stem("circumstantial"), "circumstanti");});
test("circumstantially -> circumstanti", function() {deepEqual( Stem("circumstantially"), "circumstanti");});
test("circus -> circus", function() {deepEqual( Stem("circus"), "circus");});
test("cistern -> cistern", function() {deepEqual( Stem("cistern"), "cistern");});
test("cisterns -> cistern", function() {deepEqual( Stem("cisterns"), "cistern");});
test("citadel -> citadel", function() {deepEqual( Stem("citadel"), "citadel");});
test("citation -> citat", function() {deepEqual( Stem("citation"), "citat");});
test("cite -> cite", function() {deepEqual( Stem("cite"), "cite");});
test("cited -> cite", function() {deepEqual( Stem("cited"), "cite");});
test("cities -> citi", function() {deepEqual( Stem("cities"), "citi");});
test("citigrade -> citigrad", function() {deepEqual( Stem("citigrade"), "citigrad");});
test("citizen -> citizen", function() {deepEqual( Stem("citizen"), "citizen");});
test("citizens -> citizen", function() {deepEqual( Stem("citizens"), "citizen");});
test("city -> citi", function() {deepEqual( Stem("city"), "citi");});
test("cive -> cive", function() {deepEqual( Stem("cive"), "cive");});
test("civil -> civil", function() {deepEqual( Stem("civil"), "civil");});
test("civilian -> civilian", function() {deepEqual( Stem("civilian"), "civilian");});
test("civilians -> civilian", function() {deepEqual( Stem("civilians"), "civilian");});
test("civilised -> civilis", function() {deepEqual( Stem("civilised"), "civilis");});
test("civilities -> civil", function() {deepEqual( Stem("civilities"), "civil");});
test("civility -> civil", function() {deepEqual( Stem("civility"), "civil");});
test("civilization -> civil", function() {deepEqual( Stem("civilization"), "civil");});
test("civilized -> civil", function() {deepEqual( Stem("civilized"), "civil");});
test("civilly -> civilli", function() {deepEqual( Stem("civilly"), "civilli");});
test("clad -> clad", function() {deepEqual( Stem("clad"), "clad");});
test("cladonia -> cladonia", function() {deepEqual( Stem("cladonia"), "cladonia");});
test("claim -> claim", function() {deepEqual( Stem("claim"), "claim");});
test("claimant -> claimant", function() {deepEqual( Stem("claimant"), "claimant");});
test("claimed -> claim", function() {deepEqual( Stem("claimed"), "claim");});
test("claiming -> claim", function() {deepEqual( Stem("claiming"), "claim");});
test("claims -> claim", function() {deepEqual( Stem("claims"), "claim");});
test("clairvoyante -> clairvoyant", function() {deepEqual( Stem("clairvoyante"), "clairvoyant");});
test("clambered -> clamber", function() {deepEqual( Stem("clambered"), "clamber");});
test("clamorous -> clamor", function() {deepEqual( Stem("clamorous"), "clamor");});
test("clamour -> clamour", function() {deepEqual( Stem("clamour"), "clamour");});
test("clamouring -> clamour", function() {deepEqual( Stem("clamouring"), "clamour");});
test("clandestinely -> clandestin", function() {deepEqual( Stem("clandestinely"), "clandestin");});
test("clang -> clang", function() {deepEqual( Stem("clang"), "clang");});
test("clanging -> clang", function() {deepEqual( Stem("clanging"), "clang");});
test("clangour -> clangour", function() {deepEqual( Stem("clangour"), "clangour");});
test("clank -> clank", function() {deepEqual( Stem("clank"), "clank");});
test("clanking -> clank", function() {deepEqual( Stem("clanking"), "clank");});
test("clanks -> clank", function() {deepEqual( Stem("clanks"), "clank");});
test("clap -> clap", function() {deepEqual( Stem("clap"), "clap");});
test("clapped -> clap", function() {deepEqual( Stem("clapped"), "clap");});
test("clapping -> clap", function() {deepEqual( Stem("clapping"), "clap");});
test("clappings -> clap", function() {deepEqual( Stem("clappings"), "clap");});
test("claps -> clap", function() {deepEqual( Stem("claps"), "clap");});
test("clara -> clara", function() {deepEqual( Stem("clara"), "clara");});
test("clare -> clare", function() {deepEqual( Stem("clare"), "clare");});
test("claret -> claret", function() {deepEqual( Stem("claret"), "claret");});
test("clarionet -> clarionet", function() {deepEqual( Stem("clarionet"), "clarionet");});
test("clark -> clark", function() {deepEqual( Stem("clark"), "clark");});
test("clarke -> clark", function() {deepEqual( Stem("clarke"), "clark");});
test("clash -> clash", function() {deepEqual( Stem("clash"), "clash");});
test("clashed -> clash", function() {deepEqual( Stem("clashed"), "clash");});
test("clashes -> clash", function() {deepEqual( Stem("clashes"), "clash");});
test("clashing -> clash", function() {deepEqual( Stem("clashing"), "clash");});
test("clasp -> clasp", function() {deepEqual( Stem("clasp"), "clasp");});
test("clasped -> clasp", function() {deepEqual( Stem("clasped"), "clasp");});
test("clasping -> clasp", function() {deepEqual( Stem("clasping"), "clasp");});
test("claspknife -> claspknif", function() {deepEqual( Stem("claspknife"), "claspknif");});
test("clasps -> clasp", function() {deepEqual( Stem("clasps"), "clasp");});
test("class -> class", function() {deepEqual( Stem("class"), "class");});
test("classed -> class", function() {deepEqual( Stem("classed"), "class");});
test("classes -> class", function() {deepEqual( Stem("classes"), "class");});
test("classic -> classic", function() {deepEqual( Stem("classic"), "classic");});
test("classical -> classic", function() {deepEqual( Stem("classical"), "classic");});
test("classicality -> classic", function() {deepEqual( Stem("classicality"), "classic");});
test("classify -> classifi", function() {deepEqual( Stem("classify"), "classifi");});
test("clatter -> clatter", function() {deepEqual( Stem("clatter"), "clatter");});
test("clattered -> clatter", function() {deepEqual( Stem("clattered"), "clatter");});
test("clattering -> clatter", function() {deepEqual( Stem("clattering"), "clatter");});
test("clause -> claus", function() {deepEqual( Stem("clause"), "claus");});
test("clausen -> clausen", function() {deepEqual( Stem("clausen"), "clausen");});
test("clauses -> claus", function() {deepEqual( Stem("clauses"), "claus");});
test("clavipes -> clavip", function() {deepEqual( Stem("clavipes"), "clavip");});
test("claw -> claw", function() {deepEqual( Stem("claw"), "claw");});
test("clawing -> claw", function() {deepEqual( Stem("clawing"), "claw");});
test("claws -> claw", function() {deepEqual( Stem("claws"), "claw");});
test("clay -> clay", function() {deepEqual( Stem("clay"), "clay");});
test("clayey -> clayey", function() {deepEqual( Stem("clayey"), "clayey");});
test("claying -> clay", function() {deepEqual( Stem("claying"), "clay");});
test("clayver -> clayver", function() {deepEqual( Stem("clayver"), "clayver");});
test("clean -> clean", function() {deepEqual( Stem("clean"), "clean");});
test("cleaned -> clean", function() {deepEqual( Stem("cleaned"), "clean");});
test("cleaner -> cleaner", function() {deepEqual( Stem("cleaner"), "cleaner");});
test("cleanest -> cleanest", function() {deepEqual( Stem("cleanest"), "cleanest");});
test("cleaning -> clean", function() {deepEqual( Stem("cleaning"), "clean");});
test("cleanliest -> cleanliest", function() {deepEqual( Stem("cleanliest"), "cleanliest");});
test("cleanliness -> cleanli", function() {deepEqual( Stem("cleanliness"), "cleanli");});
test("cleanly -> clean", function() {deepEqual( Stem("cleanly"), "clean");});
test("cleans -> clean", function() {deepEqual( Stem("cleans"), "clean");});
test("cleanse -> cleans", function() {deepEqual( Stem("cleanse"), "cleans");});
test("cleanses -> cleans", function() {deepEqual( Stem("cleanses"), "cleans");});
test("cleansing -> cleans", function() {deepEqual( Stem("cleansing"), "cleans");});
test("clear -> clear", function() {deepEqual( Stem("clear"), "clear");});
test("clearance -> clearanc", function() {deepEqual( Stem("clearance"), "clearanc");});
test("cleared -> clear", function() {deepEqual( Stem("cleared"), "clear");});
test("clearer -> clearer", function() {deepEqual( Stem("clearer"), "clearer");});
test("clearest -> clearest", function() {deepEqual( Stem("clearest"), "clearest");});
test("clearing -> clear", function() {deepEqual( Stem("clearing"), "clear");});
test("clearly -> clear", function() {deepEqual( Stem("clearly"), "clear");});
test("clearness -> clear", function() {deepEqual( Stem("clearness"), "clear");});
test("cleavage -> cleavag", function() {deepEqual( Stem("cleavage"), "cleavag");});
test("cleft -> cleft", function() {deepEqual( Stem("cleft"), "cleft");});
test("clefts -> cleft", function() {deepEqual( Stem("clefts"), "cleft");});
test("clematis -> clemati", function() {deepEqual( Stem("clematis"), "clemati");});
test("clemency -> clemenc", function() {deepEqual( Stem("clemency"), "clemenc");});
test("clench -> clench", function() {deepEqual( Stem("clench"), "clench");});
test("clenched -> clench", function() {deepEqual( Stem("clenched"), "clench");});
test("clenches -> clench", function() {deepEqual( Stem("clenches"), "clench");});
test("clenching -> clench", function() {deepEqual( Stem("clenching"), "clench");});
test("cleopatra -> cleopatra", function() {deepEqual( Stem("cleopatra"), "cleopatra");});
test("clergyman -> clergyman", function() {deepEqual( Stem("clergyman"), "clergyman");});
test("clergymen -> clergymen", function() {deepEqual( Stem("clergymen"), "clergymen");});
test("clerical -> cleric", function() {deepEqual( Stem("clerical"), "cleric");});
test("clerk -> clerk", function() {deepEqual( Stem("clerk"), "clerk");});
test("clerkenwell -> clerkenwel", function() {deepEqual( Stem("clerkenwell"), "clerkenwel");});
test("clerkly -> clerk", function() {deepEqual( Stem("clerkly"), "clerk");});
test("clerks -> clerk", function() {deepEqual( Stem("clerks"), "clerk");});
test("clerkship -> clerkship", function() {deepEqual( Stem("clerkship"), "clerkship");});
test("cleveland -> cleveland", function() {deepEqual( Stem("cleveland"), "cleveland");});
test("clever -> clever", function() {deepEqual( Stem("clever"), "clever");});
test("cleverer -> clever", function() {deepEqual( Stem("cleverer"), "clever");});
test("cleverest -> cleverest", function() {deepEqual( Stem("cleverest"), "cleverest");});
test("cleverly -> clever", function() {deepEqual( Stem("cleverly"), "clever");});
test("cleverness -> clever", function() {deepEqual( Stem("cleverness"), "clever");});
test("click -> click", function() {deepEqual( Stem("click"), "click");});
test("clicked -> click", function() {deepEqual( Stem("clicked"), "click");});
test("clicking -> click", function() {deepEqual( Stem("clicking"), "click");});
test("client -> client", function() {deepEqual( Stem("client"), "client");});
test("clients -> client", function() {deepEqual( Stem("clients"), "client");});
test("cliff -> cliff", function() {deepEqual( Stem("cliff"), "cliff");});
test("clifford -> clifford", function() {deepEqual( Stem("clifford"), "clifford");});
test("cliffs -> cliff", function() {deepEqual( Stem("cliffs"), "cliff");});
test("clifton -> clifton", function() {deepEqual( Stem("clifton"), "clifton");});
test("clima -> clima", function() {deepEqual( Stem("clima"), "clima");});
test("climate -> climat", function() {deepEqual( Stem("climate"), "climat");});
test("climates -> climat", function() {deepEqual( Stem("climates"), "climat");});
test("climax -> climax", function() {deepEqual( Stem("climax"), "climax");});
test("climb -> climb", function() {deepEqual( Stem("climb"), "climb");});
test("climbed -> climb", function() {deepEqual( Stem("climbed"), "climb");});
test("climbers -> climber", function() {deepEqual( Stem("climbers"), "climber");});
test("climbing -> climb", function() {deepEqual( Stem("climbing"), "climb");});
test("clime -> clime", function() {deepEqual( Stem("clime"), "clime");});
test("climes -> clime", function() {deepEqual( Stem("climes"), "clime");});
test("clinched -> clinch", function() {deepEqual( Stem("clinched"), "clinch");});
test("cling -> cling", function() {deepEqual( Stem("cling"), "cling");});
test("clinging -> cling", function() {deepEqual( Stem("clinging"), "cling");});
test("clings -> cling", function() {deepEqual( Stem("clings"), "cling");});
test("clink -> clink", function() {deepEqual( Stem("clink"), "clink");});
test("clinked -> clink", function() {deepEqual( Stem("clinked"), "clink");});
test("clinking -> clink", function() {deepEqual( Stem("clinking"), "clink");});
test("clip -> clip", function() {deepEqual( Stem("clip"), "clip");});
test("clipped -> clip", function() {deepEqual( Stem("clipped"), "clip");});
test("clippers -> clipper", function() {deepEqual( Stem("clippers"), "clipper");});
test("clipping -> clip", function() {deepEqual( Stem("clipping"), "clip");});
test("cliquot -> cliquot", function() {deepEqual( Stem("cliquot"), "cliquot");});
test("clks -> clks", function() {deepEqual( Stem("clks"), "clks");});
test("cloak -> cloak", function() {deepEqual( Stem("cloak"), "cloak");});
test("cloaks -> cloak", function() {deepEqual( Stem("cloaks"), "cloak");});
test("clock -> clock", function() {deepEqual( Stem("clock"), "clock");});
test("clocks -> clock", function() {deepEqual( Stem("clocks"), "clock");});
test("clods -> clod", function() {deepEqual( Stem("clods"), "clod");});
test("cloe -> cloe", function() {deepEqual( Stem("cloe"), "cloe");});
test("clogged -> clog", function() {deepEqual( Stem("clogged"), "clog");});
test("cloister -> cloister", function() {deepEqual( Stem("cloister"), "cloister");});
test("cloistered -> cloister", function() {deepEqual( Stem("cloistered"), "cloister");});
test("cloisterly -> cloister", function() {deepEqual( Stem("cloisterly"), "cloister");});
test("cloisters -> cloister", function() {deepEqual( Stem("cloisters"), "cloister");});
test("close -> close", function() {deepEqual( Stem("close"), "close");});
test("closed -> close", function() {deepEqual( Stem("closed"), "close");});
test("closely -> close", function() {deepEqual( Stem("closely"), "close");});
test("closeness -> close", function() {deepEqual( Stem("closeness"), "close");});
test("closer -> closer", function() {deepEqual( Stem("closer"), "closer");});
test("closes -> close", function() {deepEqual( Stem("closes"), "close");});
test("closest -> closest", function() {deepEqual( Stem("closest"), "closest");});
test("closet -> closet", function() {deepEqual( Stem("closet"), "closet");});
test("closeted -> closet", function() {deepEqual( Stem("closeted"), "closet");});
test("closets -> closet", function() {deepEqual( Stem("closets"), "closet");});
test("closing -> close", function() {deepEqual( Stem("closing"), "close");});
test("cloth -> cloth", function() {deepEqual( Stem("cloth"), "cloth");});
test("clothe -> cloth", function() {deepEqual( Stem("clothe"), "cloth");});
test("clothed -> cloth", function() {deepEqual( Stem("clothed"), "cloth");});
test("clother -> clother", function() {deepEqual( Stem("clother"), "clother");});
test("clothes -> cloth", function() {deepEqual( Stem("clothes"), "cloth");});
test("clothing -> cloth", function() {deepEqual( Stem("clothing"), "cloth");});
test("cloths -> cloth", function() {deepEqual( Stem("cloths"), "cloth");});
test("clotted -> clot", function() {deepEqual( Stem("clotted"), "clot");});
test("cloud -> cloud", function() {deepEqual( Stem("cloud"), "cloud");});
test("clouded -> cloud", function() {deepEqual( Stem("clouded"), "cloud");});
test("cloudily -> cloudili", function() {deepEqual( Stem("cloudily"), "cloudili");});
test("cloudless -> cloudless", function() {deepEqual( Stem("cloudless"), "cloudless");});
test("clouds -> cloud", function() {deepEqual( Stem("clouds"), "cloud");});
test("cloudy -> cloudi", function() {deepEqual( Stem("cloudy"), "cloudi");});
test("clout -> clout", function() {deepEqual( Stem("clout"), "clout");});
test("clove -> clove", function() {deepEqual( Stem("clove"), "clove");});
test("clover -> clover", function() {deepEqual( Stem("clover"), "clover");});
test("cloves -> clove", function() {deepEqual( Stem("cloves"), "clove");});
test("clown -> clown", function() {deepEqual( Stem("clown"), "clown");});
test("clt -> clt", function() {deepEqual( Stem("clt"), "clt");});
test("club -> club", function() {deepEqual( Stem("club"), "club");});
test("clubs -> club", function() {deepEqual( Stem("clubs"), "club");});
test("cluck -> cluck", function() {deepEqual( Stem("cluck"), "cluck");});
test("clue -> clue", function() {deepEqual( Stem("clue"), "clue");});
test("clump -> clump", function() {deepEqual( Stem("clump"), "clump");});
test("clumps -> clump", function() {deepEqual( Stem("clumps"), "clump");});
test("clumsily -> clumsili", function() {deepEqual( Stem("clumsily"), "clumsili");});
test("clumsiness -> clumsi", function() {deepEqual( Stem("clumsiness"), "clumsi");});
test("clumsy -> clumsi", function() {deepEqual( Stem("clumsy"), "clumsi");});
test("clung -> clung", function() {deepEqual( Stem("clung"), "clung");});
test("cluskie -> cluski", function() {deepEqual( Stem("cluskie"), "cluski");});
test("cluster -> cluster", function() {deepEqual( Stem("cluster"), "cluster");});
test("clustered -> cluster", function() {deepEqual( Stem("clustered"), "cluster");});
test("clustering -> cluster", function() {deepEqual( Stem("clustering"), "cluster");});
test("clusters -> cluster", function() {deepEqual( Stem("clusters"), "cluster");});
test("clutch -> clutch", function() {deepEqual( Stem("clutch"), "clutch");});
test("clutched -> clutch", function() {deepEqual( Stem("clutched"), "clutch");});
test("clutches -> clutch", function() {deepEqual( Stem("clutches"), "clutch");});
test("clutching -> clutch", function() {deepEqual( Stem("clutching"), "clutch");});
test("clytia -> clytia", function() {deepEqual( Stem("clytia"), "clytia");});
test("co -> co", function() {deepEqual( Stem("co"), "co");});
test("coach -> coach", function() {deepEqual( Stem("coach"), "coach");});
test("coaches -> coach", function() {deepEqual( Stem("coaches"), "coach");});
test("coaching -> coach", function() {deepEqual( Stem("coaching"), "coach");});
test("coachmaker -> coachmak", function() {deepEqual( Stem("coachmaker"), "coachmak");});
test("coachman -> coachman", function() {deepEqual( Stem("coachman"), "coachman");});
test("coachmen -> coachmen", function() {deepEqual( Stem("coachmen"), "coachmen");});
test("coachyard -> coachyard", function() {deepEqual( Stem("coachyard"), "coachyard");});
test("coadjutor -> coadjutor", function() {deepEqual( Stem("coadjutor"), "coadjutor");});
test("coal -> coal", function() {deepEqual( Stem("coal"), "coal");});
test("coalesced -> coalesc", function() {deepEqual( Stem("coalesced"), "coalesc");});
test("coalescing -> coalesc", function() {deepEqual( Stem("coalescing"), "coalesc");});
test("coalition -> coalit", function() {deepEqual( Stem("coalition"), "coalit");});
test("coalitions -> coalit", function() {deepEqual( Stem("coalitions"), "coalit");});
test("coals -> coal", function() {deepEqual( Stem("coals"), "coal");});
test("coalworth -> coalworth", function() {deepEqual( Stem("coalworth"), "coalworth");});
test("coarse -> coars", function() {deepEqual( Stem("coarse"), "coars");});
test("coarsely -> coars", function() {deepEqual( Stem("coarsely"), "coars");});
test("coarsened -> coarsen", function() {deepEqual( Stem("coarsened"), "coarsen");});
test("coarseness -> coars", function() {deepEqual( Stem("coarseness"), "coars");});
test("coarser -> coarser", function() {deepEqual( Stem("coarser"), "coarser");});
test("coarsest -> coarsest", function() {deepEqual( Stem("coarsest"), "coarsest");});
test("coast -> coast", function() {deepEqual( Stem("coast"), "coast");});
test("coasts -> coast", function() {deepEqual( Stem("coasts"), "coast");});
test("coat -> coat", function() {deepEqual( Stem("coat"), "coat");});
test("coated -> coat", function() {deepEqual( Stem("coated"), "coat");});
test("coating -> coat", function() {deepEqual( Stem("coating"), "coat");});
test("coatings -> coat", function() {deepEqual( Stem("coatings"), "coat");});
test("coats -> coat", function() {deepEqual( Stem("coats"), "coat");});
test("coavins -> coavin", function() {deepEqual( Stem("coavins"), "coavin");});
test("coavinses -> coavins", function() {deepEqual( Stem("coavinses"), "coavins");});
test("coaxed -> coax", function() {deepEqual( Stem("coaxed"), "coax");});
test("coaxin -> coaxin", function() {deepEqual( Stem("coaxin"), "coaxin");});
test("coaxing -> coax", function() {deepEqual( Stem("coaxing"), "coax");});
test("coaxingly -> coax", function() {deepEqual( Stem("coaxingly"), "coax");});
test("cob -> cob", function() {deepEqual( Stem("cob"), "cob");});
test("cobbey -> cobbey", function() {deepEqual( Stem("cobbey"), "cobbey");});
test("cobbler -> cobbler", function() {deepEqual( Stem("cobbler"), "cobbler");});
test("cobblesborough -> cobblesborough", function() {deepEqual( Stem("cobblesborough"), "cobblesborough");});
test("coburg -> coburg", function() {deepEqual( Stem("coburg"), "coburg");});
test("cobweb -> cobweb", function() {deepEqual( Stem("cobweb"), "cobweb");});
test("cobwebs -> cobweb", function() {deepEqual( Stem("cobwebs"), "cobweb");});
test("cochlogena -> cochlogena", function() {deepEqual( Stem("cochlogena"), "cochlogena");});
test("cochrane -> cochran", function() {deepEqual( Stem("cochrane"), "cochran");});
test("cock -> cock", function() {deepEqual( Stem("cock"), "cock");});
test("cockaded -> cockad", function() {deepEqual( Stem("cockaded"), "cockad");});
test("cockades -> cockad", function() {deepEqual( Stem("cockades"), "cockad");});
test("cockatoo -> cockatoo", function() {deepEqual( Stem("cockatoo"), "cockatoo");});
test("cocked -> cock", function() {deepEqual( Stem("cocked"), "cock");});
test("cocking -> cock", function() {deepEqual( Stem("cocking"), "cock");});
test("cockney -> cockney", function() {deepEqual( Stem("cockney"), "cockney");});
test("cockroaches -> cockroach", function() {deepEqual( Stem("cockroaches"), "cockroach");});
test("coco -> coco", function() {deepEqual( Stem("coco"), "coco");});
test("cocoa -> cocoa", function() {deepEqual( Stem("cocoa"), "cocoa");});
test("cocoon -> cocoon", function() {deepEqual( Stem("cocoon"), "cocoon");});
test("cocos -> coco", function() {deepEqual( Stem("cocos"), "coco");});
test("cod -> cod", function() {deepEqual( Stem("cod"), "cod");});
test("coddle -> coddl", function() {deepEqual( Stem("coddle"), "coddl");});
test("coddled -> coddl", function() {deepEqual( Stem("coddled"), "coddl");});
test("coddling -> coddl", function() {deepEqual( Stem("coddling"), "coddl");});
test("code -> code", function() {deepEqual( Stem("code"), "code");});
test("codes -> code", function() {deepEqual( Stem("codes"), "code");});
test("codger -> codger", function() {deepEqual( Stem("codger"), "codger");});
test("codicil -> codicil", function() {deepEqual( Stem("codicil"), "codicil");});
test("codified -> codifi", function() {deepEqual( Stem("codified"), "codifi");});
test("codlings -> codl", function() {deepEqual( Stem("codlings"), "codl");});
test("coelum -> coelum", function() {deepEqual( Stem("coelum"), "coelum");});
test("coerced -> coerc", function() {deepEqual( Stem("coerced"), "coerc");});
test("coercive -> coerciv", function() {deepEqual( Stem("coercive"), "coerciv");});
test("coeur -> coeur", function() {deepEqual( Stem("coeur"), "coeur");});
test("coeval -> coeval", function() {deepEqual( Stem("coeval"), "coeval");});
test("coextensive -> coextens", function() {deepEqual( Stem("coextensive"), "coextens");});
test("coffee -> coffe", function() {deepEqual( Stem("coffee"), "coffe");});
test("coffeehouse -> coffeehous", function() {deepEqual( Stem("coffeehouse"), "coffeehous");});
test("coffers -> coffer", function() {deepEqual( Stem("coffers"), "coffer");});
test("coffin -> coffin", function() {deepEqual( Stem("coffin"), "coffin");});
test("coffins -> coffin", function() {deepEqual( Stem("coffins"), "coffin");});
test("cogitated -> cogit", function() {deepEqual( Stem("cogitated"), "cogit");});
test("cogitating -> cogit", function() {deepEqual( Stem("cogitating"), "cogit");});
test("cogitation -> cogit", function() {deepEqual( Stem("cogitation"), "cogit");});
test("cogitations -> cogit", function() {deepEqual( Stem("cogitations"), "cogit");});
test("cognate -> cognat", function() {deepEqual( Stem("cognate"), "cognat");});
test("cognisant -> cognis", function() {deepEqual( Stem("cognisant"), "cognis");});
test("cognizant -> cogniz", function() {deepEqual( Stem("cognizant"), "cogniz");});
test("cognovits -> cognovit", function() {deepEqual( Stem("cognovits"), "cognovit");});
test("cogs -> cog", function() {deepEqual( Stem("cogs"), "cog");});
test("coherence -> coher", function() {deepEqual( Stem("coherence"), "coher");});
test("coherent -> coher", function() {deepEqual( Stem("coherent"), "coher");});
test("cohesion -> cohes", function() {deepEqual( Stem("cohesion"), "cohes");});
test("coil -> coil", function() {deepEqual( Stem("coil"), "coil");});
test("coiled -> coil", function() {deepEqual( Stem("coiled"), "coil");});
test("coils -> coil", function() {deepEqual( Stem("coils"), "coil");});
test("coin -> coin", function() {deepEqual( Stem("coin"), "coin");});
test("coinage -> coinag", function() {deepEqual( Stem("coinage"), "coinag");});
test("coincide -> coincid", function() {deepEqual( Stem("coincide"), "coincid");});
test("coincided -> coincid", function() {deepEqual( Stem("coincided"), "coincid");});
test("coincidence -> coincid", function() {deepEqual( Stem("coincidence"), "coincid");});
test("coincidences -> coincid", function() {deepEqual( Stem("coincidences"), "coincid");});
test("coincides -> coincid", function() {deepEqual( Stem("coincides"), "coincid");});
test("coiner -> coiner", function() {deepEqual( Stem("coiner"), "coiner");});
test("coiners -> coiner", function() {deepEqual( Stem("coiners"), "coiner");});
test("coining -> coin", function() {deepEqual( Stem("coining"), "coin");});
test("coins -> coin", function() {deepEqual( Stem("coins"), "coin");});
test("coinstantaneous -> coinstantan", function() {deepEqual( Stem("coinstantaneous"), "coinstantan");});
test("coinstantaneously -> coinstantan", function() {deepEqual( Stem("coinstantaneously"), "coinstantan");});
test("coke -> coke", function() {deepEqual( Stem("coke"), "coke");});
test("cold -> cold", function() {deepEqual( Stem("cold"), "cold");});
test("colder -> colder", function() {deepEqual( Stem("colder"), "colder");});
test("coldest -> coldest", function() {deepEqual( Stem("coldest"), "coldest");});
test("coldly -> cold", function() {deepEqual( Stem("coldly"), "cold");});
test("coldness -> cold", function() {deepEqual( Stem("coldness"), "cold");});
test("coldnesses -> cold", function() {deepEqual( Stem("coldnesses"), "cold");});
test("colds -> cold", function() {deepEqual( Stem("colds"), "cold");});
test("coleman -> coleman", function() {deepEqual( Stem("coleman"), "coleman");});
test("coleoptera -> coleoptera", function() {deepEqual( Stem("coleoptera"), "coleoptera");});
test("coleridge -> coleridg", function() {deepEqual( Stem("coleridge"), "coleridg");});
test("colias -> colia", function() {deepEqual( Stem("colias"), "colia");});
test("colla -> colla", function() {deepEqual( Stem("colla"), "colla");});
test("collapse -> collaps", function() {deepEqual( Stem("collapse"), "collaps");});
test("collapsed -> collaps", function() {deepEqual( Stem("collapsed"), "collaps");});
test("collapses -> collaps", function() {deepEqual( Stem("collapses"), "collaps");});
test("collar -> collar", function() {deepEqual( Stem("collar"), "collar");});
test("collars -> collar", function() {deepEqual( Stem("collars"), "collar");});
test("collateral -> collater", function() {deepEqual( Stem("collateral"), "collater");});
test("collation -> collat", function() {deepEqual( Stem("collation"), "collat");});
test("colleague -> colleagu", function() {deepEqual( Stem("colleague"), "colleagu");});
test("colleagues -> colleagu", function() {deepEqual( Stem("colleagues"), "colleagu");});
test("collect -> collect", function() {deepEqual( Stem("collect"), "collect");});
test("collected -> collect", function() {deepEqual( Stem("collected"), "collect");});
test("collectedly -> collect", function() {deepEqual( Stem("collectedly"), "collect");});
test("collecting -> collect", function() {deepEqual( Stem("collecting"), "collect");});
test("collection -> collect", function() {deepEqual( Stem("collection"), "collect");});
test("collections -> collect", function() {deepEqual( Stem("collections"), "collect");});
test("collectively -> collect", function() {deepEqual( Stem("collectively"), "collect");});
test("collector -> collector", function() {deepEqual( Stem("collector"), "collector");});
test("collectors -> collector", function() {deepEqual( Stem("collectors"), "collector");});
test("collects -> collect", function() {deepEqual( Stem("collects"), "collect");});
test("college -> colleg", function() {deepEqual( Stem("college"), "colleg");});
test("collier -> collier", function() {deepEqual( Stem("collier"), "collier");});
test("collieries -> collieri", function() {deepEqual( Stem("collieries"), "collieri");});
test("colliers -> collier", function() {deepEqual( Stem("colliers"), "collier");});
test("colliery -> collieri", function() {deepEqual( Stem("colliery"), "collieri");});
test("collision -> collis", function() {deepEqual( Stem("collision"), "collis");});
test("collnet -> collnet", function() {deepEqual( Stem("collnet"), "collnet");});
test("collnett -> collnett", function() {deepEqual( Stem("collnett"), "collnett");});
test("colloquial -> colloqui", function() {deepEqual( Stem("colloquial"), "colloqui");});
test("colloquially -> colloqui", function() {deepEqual( Stem("colloquially"), "colloqui");});
test("colloquy -> colloquy", function() {deepEqual( Stem("colloquy"), "colloquy");});
test("colman -> colman", function() {deepEqual( Stem("colman"), "colman");});
test("colnett -> colnett", function() {deepEqual( Stem("colnett"), "colnett");});
test("cologne -> cologn", function() {deepEqual( Stem("cologne"), "cologn");});
test("colonel -> colonel", function() {deepEqual( Stem("colonel"), "colonel");});
test("colonia -> colonia", function() {deepEqual( Stem("colonia"), "colonia");});
test("colonies -> coloni", function() {deepEqual( Stem("colonies"), "coloni");});
test("colonist -> colonist", function() {deepEqual( Stem("colonist"), "colonist");});
test("colonists -> colonist", function() {deepEqual( Stem("colonists"), "colonist");});
test("colonize -> colon", function() {deepEqual( Stem("colonize"), "colon");});
test("colonized -> colon", function() {deepEqual( Stem("colonized"), "colon");});
test("colonnade -> colonnad", function() {deepEqual( Stem("colonnade"), "colonnad");});
test("colonnades -> colonnad", function() {deepEqual( Stem("colonnades"), "colonnad");});
test("colony -> coloni", function() {deepEqual( Stem("colony"), "coloni");});
test("color -> color", function() {deepEqual( Stem("color"), "color");});
test("colorado -> colorado", function() {deepEqual( Stem("colorado"), "colorado");});
test("colored -> color", function() {deepEqual( Stem("colored"), "color");});
test("colossal -> coloss", function() {deepEqual( Stem("colossal"), "coloss");});
test("colour -> colour", function() {deepEqual( Stem("colour"), "colour");});
test("coloured -> colour", function() {deepEqual( Stem("coloured"), "colour");});
test("colouring -> colour", function() {deepEqual( Stem("colouring"), "colour");});
test("colourless -> colourless", function() {deepEqual( Stem("colourless"), "colourless");});
test("colours -> colour", function() {deepEqual( Stem("colours"), "colour");});
test("colt -> colt", function() {deepEqual( Stem("colt"), "colt");});
test("colts -> colt", function() {deepEqual( Stem("colts"), "colt");});
test("columbus -> columbus", function() {deepEqual( Stem("columbus"), "columbus");});
test("column -> column", function() {deepEqual( Stem("column"), "column");});
test("columnar -> columnar", function() {deepEqual( Stem("columnar"), "columnar");});
test("columns -> column", function() {deepEqual( Stem("columns"), "column");});
test("colymbetes -> colymbet", function() {deepEqual( Stem("colymbetes"), "colymbet");});
test("com -> com", function() {deepEqual( Stem("com"), "com");});
test("comb -> comb", function() {deepEqual( Stem("comb"), "comb");});
test("combat -> combat", function() {deepEqual( Stem("combat"), "combat");});
test("combatants -> combat", function() {deepEqual( Stem("combatants"), "combat");});
test("combative -> combat", function() {deepEqual( Stem("combative"), "combat");});
test("combativeness -> combat", function() {deepEqual( Stem("combativeness"), "combat");});
test("combats -> combat", function() {deepEqual( Stem("combats"), "combat");});
test("combatted -> combat", function() {deepEqual( Stem("combatted"), "combat");});
test("combed -> comb", function() {deepEqual( Stem("combed"), "comb");});
test("combination -> combin", function() {deepEqual( Stem("combination"), "combin");});
test("combinations -> combin", function() {deepEqual( Stem("combinations"), "combin");});
test("combine -> combin", function() {deepEqual( Stem("combine"), "combin");});
test("combined -> combin", function() {deepEqual( Stem("combined"), "combin");});
test("combines -> combin", function() {deepEqual( Stem("combines"), "combin");});
test("combing -> comb", function() {deepEqual( Stem("combing"), "comb");});
test("combining -> combin", function() {deepEqual( Stem("combining"), "combin");});
test("combs -> comb", function() {deepEqual( Stem("combs"), "comb");});
test("combusted -> combust", function() {deepEqual( Stem("combusted"), "combust");});
test("combusting -> combust", function() {deepEqual( Stem("combusting"), "combust");});
test("combustion -> combust", function() {deepEqual( Stem("combustion"), "combust");});
test("come -> come", function() {deepEqual( Stem("come"), "come");});
test("comedies -> comedi", function() {deepEqual( Stem("comedies"), "comedi");});
test("comedy -> comedi", function() {deepEqual( Stem("comedy"), "comedi");});
test("comeliness -> comeli", function() {deepEqual( Stem("comeliness"), "comeli");});
test("comely -> come", function() {deepEqual( Stem("comely"), "come");});
test("comer -> comer", function() {deepEqual( Stem("comer"), "comer");});
test("comers -> comer", function() {deepEqual( Stem("comers"), "comer");});
test("comes -> come", function() {deepEqual( Stem("comes"), "come");});
test("comestibles -> comest", function() {deepEqual( Stem("comestibles"), "comest");});
test("cometh -> cometh", function() {deepEqual( Stem("cometh"), "cometh");});
test("comfort -> comfort", function() {deepEqual( Stem("comfort"), "comfort");});
test("comfortable -> comfort", function() {deepEqual( Stem("comfortable"), "comfort");});
test("comfortabler -> comfortabl", function() {deepEqual( Stem("comfortabler"), "comfortabl");});
test("comfortablest -> comfortablest", function() {deepEqual( Stem("comfortablest"), "comfortablest");});
test("comfortably -> comfort", function() {deepEqual( Stem("comfortably"), "comfort");});
test("comforted -> comfort", function() {deepEqual( Stem("comforted"), "comfort");});
test("comforter -> comfort", function() {deepEqual( Stem("comforter"), "comfort");});
test("comforters -> comfort", function() {deepEqual( Stem("comforters"), "comfort");});
test("comforting -> comfort", function() {deepEqual( Stem("comforting"), "comfort");});
test("comfortingly -> comfort", function() {deepEqual( Stem("comfortingly"), "comfort");});
test("comfortless -> comfortless", function() {deepEqual( Stem("comfortless"), "comfortless");});
test("comforts -> comfort", function() {deepEqual( Stem("comforts"), "comfort");});
test("comic -> comic", function() {deepEqual( Stem("comic"), "comic");});
test("comical -> comic", function() {deepEqual( Stem("comical"), "comic");});
test("comicality -> comic", function() {deepEqual( Stem("comicality"), "comic");});
test("comin -> comin", function() {deepEqual( Stem("comin"), "comin");});
test("coming -> come", function() {deepEqual( Stem("coming"), "come");});
test("comings -> come", function() {deepEqual( Stem("comings"), "come");});
test("command -> command", function() {deepEqual( Stem("command"), "command");});
test("commandant -> command", function() {deepEqual( Stem("commandant"), "command");});
test("commanded -> command", function() {deepEqual( Stem("commanded"), "command");});
test("commander -> command", function() {deepEqual( Stem("commander"), "command");});
test("commanding -> command", function() {deepEqual( Stem("commanding"), "command");});
test("commands -> command", function() {deepEqual( Stem("commands"), "command");});
test("comme -> comm", function() {deepEqual( Stem("comme"), "comm");});
test("commemorate -> commemor", function() {deepEqual( Stem("commemorate"), "commemor");});
test("commemorated -> commemor", function() {deepEqual( Stem("commemorated"), "commemor");});
test("commemoration -> commemor", function() {deepEqual( Stem("commemoration"), "commemor");});
test("commemorative -> commemor", function() {deepEqual( Stem("commemorative"), "commemor");});
test("commence -> commenc", function() {deepEqual( Stem("commence"), "commenc");});
test("commenced -> commenc", function() {deepEqual( Stem("commenced"), "commenc");});
test("commencement -> commenc", function() {deepEqual( Stem("commencement"), "commenc");});
test("commencements -> commenc", function() {deepEqual( Stem("commencements"), "commenc");});
test("commences -> commenc", function() {deepEqual( Stem("commences"), "commenc");});
test("commencing -> commenc", function() {deepEqual( Stem("commencing"), "commenc");});
test("commend -> commend", function() {deepEqual( Stem("commend"), "commend");});
test("commendable -> commend", function() {deepEqual( Stem("commendable"), "commend");});
test("commendation -> commend", function() {deepEqual( Stem("commendation"), "commend");});
test("commendations -> commend", function() {deepEqual( Stem("commendations"), "commend");});
test("commended -> commend", function() {deepEqual( Stem("commended"), "commend");});
test("commending -> commend", function() {deepEqual( Stem("commending"), "commend");});
test("commendingly -> commend", function() {deepEqual( Stem("commendingly"), "commend");});
test("commends -> commend", function() {deepEqual( Stem("commends"), "commend");});
test("comment -> comment", function() {deepEqual( Stem("comment"), "comment");});
test("commentary -> commentari", function() {deepEqual( Stem("commentary"), "commentari");});
test("commented -> comment", function() {deepEqual( Stem("commented"), "comment");});
test("commenting -> comment", function() {deepEqual( Stem("commenting"), "comment");});
test("comments -> comment", function() {deepEqual( Stem("comments"), "comment");});
test("commerce -> commerc", function() {deepEqual( Stem("commerce"), "commerc");});
test("commercial -> commerci", function() {deepEqual( Stem("commercial"), "commerci");});
test("commiserating -> commiser", function() {deepEqual( Stem("commiserating"), "commiser");});
test("commiseration -> commiser", function() {deepEqual( Stem("commiseration"), "commiser");});
test("commissariat -> commissariat", function() {deepEqual( Stem("commissariat"), "commissariat");});
test("commission -> commiss", function() {deepEqual( Stem("commission"), "commiss");});
test("commissioned -> commiss", function() {deepEqual( Stem("commissioned"), "commiss");});
test("commissioner -> commission", function() {deepEqual( Stem("commissioner"), "commission");});
test("commissioners -> commission", function() {deepEqual( Stem("commissioners"), "commission");});
test("commissions -> commiss", function() {deepEqual( Stem("commissions"), "commiss");});
test("commit -> commit", function() {deepEqual( Stem("commit"), "commit");});
test("commits -> commit", function() {deepEqual( Stem("commits"), "commit");});
test("committed -> commit", function() {deepEqual( Stem("committed"), "commit");});
test("committee -> committe", function() {deepEqual( Stem("committee"), "committe");});
test("committees -> committe", function() {deepEqual( Stem("committees"), "committe");});
test("committing -> commit", function() {deepEqual( Stem("committing"), "commit");});
test("commixta -> commixta", function() {deepEqual( Stem("commixta"), "commixta");});
test("commo -> commo", function() {deepEqual( Stem("commo"), "commo");});
test("commodious -> commodi", function() {deepEqual( Stem("commodious"), "commodi");});
test("commodities -> commod", function() {deepEqual( Stem("commodities"), "commod");});
test("commodity -> commod", function() {deepEqual( Stem("commodity"), "commod");});
test("commodore -> commodor", function() {deepEqual( Stem("commodore"), "commodor");});
test("common -> common", function() {deepEqual( Stem("common"), "common");});
test("commoner -> common", function() {deepEqual( Stem("commoner"), "common");});
test("commoners -> common", function() {deepEqual( Stem("commoners"), "common");});
test("commonest -> commonest", function() {deepEqual( Stem("commonest"), "commonest");});
test("commonl -> commonl", function() {deepEqual( Stem("commonl"), "commonl");});
test("commonly -> common", function() {deepEqual( Stem("commonly"), "common");});
test("commonplace -> commonplac", function() {deepEqual( Stem("commonplace"), "commonplac");});
test("commonplaces -> commonplac", function() {deepEqual( Stem("commonplaces"), "commonplac");});
test("commons -> common", function() {deepEqual( Stem("commons"), "common");});
test("commonwealth -> commonwealth", function() {deepEqual( Stem("commonwealth"), "commonwealth");});
test("commotion -> commot", function() {deepEqual( Stem("commotion"), "commot");});
test("commotions -> commot", function() {deepEqual( Stem("commotions"), "commot");});
test("commttted -> commtt", function() {deepEqual( Stem("commttted"), "commtt");});
test("commune -> commune", function() {deepEqual( Stem("commune"), "commune");});
test("communicant -> communic", function() {deepEqual( Stem("communicant"), "communic");});
test("communicate -> communic", function() {deepEqual( Stem("communicate"), "communic");});
test("communicated -> communic", function() {deepEqual( Stem("communicated"), "communic");});
test("communicates -> communic", function() {deepEqual( Stem("communicates"), "communic");});
test("communicating -> communic", function() {deepEqual( Stem("communicating"), "communic");});
test("communication -> communic", function() {deepEqual( Stem("communication"), "communic");});
test("communications -> communic", function() {deepEqual( Stem("communications"), "communic");});
test("communicative -> communic", function() {deepEqual( Stem("communicative"), "communic");});
test("communing -> commune", function() {deepEqual( Stem("communing"), "commune");});
test("communion -> communion", function() {deepEqual( Stem("communion"), "communion");});
test("communism -> communism", function() {deepEqual( Stem("communism"), "communism");});
test("communities -> communiti", function() {deepEqual( Stem("communities"), "communiti");});
test("community -> communiti", function() {deepEqual( Stem("community"), "communiti");});
test("commuted -> commut", function() {deepEqual( Stem("commuted"), "commut");});
test("commuuity -> commuuiti", function() {deepEqual( Stem("commuuity"), "commuuiti");});
test("como -> como", function() {deepEqual( Stem("como"), "como");});
test("compact -> compact", function() {deepEqual( Stem("compact"), "compact");});
test("compactness -> compact", function() {deepEqual( Stem("compactness"), "compact");});
test("compacts -> compact", function() {deepEqual( Stem("compacts"), "compact");});
test("companies -> compani", function() {deepEqual( Stem("companies"), "compani");});
test("companion -> companion", function() {deepEqual( Stem("companion"), "companion");});
test("companions -> companion", function() {deepEqual( Stem("companions"), "companion");});
test("companionship -> companionship", function() {deepEqual( Stem("companionship"), "companionship");});
test("company -> compani", function() {deepEqual( Stem("company"), "compani");});
test("comparable -> compar", function() {deepEqual( Stem("comparable"), "compar");});
test("comparative -> compar", function() {deepEqual( Stem("comparative"), "compar");});
test("comparatively -> compar", function() {deepEqual( Stem("comparatively"), "compar");});
test("compare -> compar", function() {deepEqual( Stem("compare"), "compar");});
test("compared -> compar", function() {deepEqual( Stem("compared"), "compar");});
test("compares -> compar", function() {deepEqual( Stem("compares"), "compar");});
test("comparing -> compar", function() {deepEqual( Stem("comparing"), "compar");});
test("comparison -> comparison", function() {deepEqual( Stem("comparison"), "comparison");});
test("comparisons -> comparison", function() {deepEqual( Stem("comparisons"), "comparison");});
test("compartments -> compart", function() {deepEqual( Stem("compartments"), "compart");});
test("compass -> compass", function() {deepEqual( Stem("compass"), "compass");});
test("compassion -> compass", function() {deepEqual( Stem("compassion"), "compass");});
test("compassionate -> compassion", function() {deepEqual( Stem("compassionate"), "compassion");});
test("compassionated -> compassion", function() {deepEqual( Stem("compassionated"), "compassion");});
test("compassionately -> compassion", function() {deepEqual( Stem("compassionately"), "compassion");});
test("compassionating -> compassion", function() {deepEqual( Stem("compassionating"), "compassion");});
test("compatible -> compat", function() {deepEqual( Stem("compatible"), "compat");});
test("compatriots -> compatriot", function() {deepEqual( Stem("compatriots"), "compatriot");});
test("compel -> compel", function() {deepEqual( Stem("compel"), "compel");});
test("compelled -> compel", function() {deepEqual( Stem("compelled"), "compel");});
test("compelling -> compel", function() {deepEqual( Stem("compelling"), "compel");});
test("compels -> compel", function() {deepEqual( Stem("compels"), "compel");});
test("compensate -> compens", function() {deepEqual( Stem("compensate"), "compens");});
test("compensated -> compens", function() {deepEqual( Stem("compensated"), "compens");});
test("compensating -> compens", function() {deepEqual( Stem("compensating"), "compens");});
test("compensation -> compens", function() {deepEqual( Stem("compensation"), "compens");});
test("compete -> compet", function() {deepEqual( Stem("compete"), "compet");});
test("competency -> compet", function() {deepEqual( Stem("competency"), "compet");});
test("competent -> compet", function() {deepEqual( Stem("competent"), "compet");});
test("competitions -> competit", function() {deepEqual( Stem("competitions"), "competit");});
test("competitor -> competitor", function() {deepEqual( Stem("competitor"), "competitor");});
test("compilers -> compil", function() {deepEqual( Stem("compilers"), "compil");});
test("complacency -> complac", function() {deepEqual( Stem("complacency"), "complac");});
test("complacent -> complac", function() {deepEqual( Stem("complacent"), "complac");});
test("complacently -> complac", function() {deepEqual( Stem("complacently"), "complac");});
test("complain -> complain", function() {deepEqual( Stem("complain"), "complain");});
test("complained -> complain", function() {deepEqual( Stem("complained"), "complain");});
test("complaining -> complain", function() {deepEqual( Stem("complaining"), "complain");});
test("complainings -> complain", function() {deepEqual( Stem("complainings"), "complain");});
test("complains -> complain", function() {deepEqual( Stem("complains"), "complain");});
test("complaint -> complaint", function() {deepEqual( Stem("complaint"), "complaint");});
test("complaints -> complaint", function() {deepEqual( Stem("complaints"), "complaint");});
test("complanata -> complanata", function() {deepEqual( Stem("complanata"), "complanata");});
test("complement -> complement", function() {deepEqual( Stem("complement"), "complement");});
test("complete -> complet", function() {deepEqual( Stem("complete"), "complet");});
test("completed -> complet", function() {deepEqual( Stem("completed"), "complet");});
test("completel -> completel", function() {deepEqual( Stem("completel"), "completel");});
test("completely -> complet", function() {deepEqual( Stem("completely"), "complet");});
test("completeness -> complet", function() {deepEqual( Stem("completeness"), "complet");});
test("completes -> complet", function() {deepEqual( Stem("completes"), "complet");});
test("completest -> completest", function() {deepEqual( Stem("completest"), "completest");});
test("completing -> complet", function() {deepEqual( Stem("completing"), "complet");});
test("completion -> complet", function() {deepEqual( Stem("completion"), "complet");});
test("complex -> complex", function() {deepEqual( Stem("complex"), "complex");});
test("complexion -> complexion", function() {deepEqual( Stem("complexion"), "complexion");});
test("complexioned -> complexion", function() {deepEqual( Stem("complexioned"), "complexion");});
test("complexions -> complexion", function() {deepEqual( Stem("complexions"), "complexion");});
test("compliance -> complianc", function() {deepEqual( Stem("compliance"), "complianc");});
test("complicated -> complic", function() {deepEqual( Stem("complicated"), "complic");});
test("complication -> complic", function() {deepEqual( Stem("complication"), "complic");});
test("complications -> complic", function() {deepEqual( Stem("complications"), "complic");});
test("complied -> compli", function() {deepEqual( Stem("complied"), "compli");});
test("complies -> compli", function() {deepEqual( Stem("complies"), "compli");});
test("compliment -> compliment", function() {deepEqual( Stem("compliment"), "compliment");});
test("complimentary -> complimentari", function() {deepEqual( Stem("complimentary"), "complimentari");});
test("complimented -> compliment", function() {deepEqual( Stem("complimented"), "compliment");});
test("complimenting -> compliment", function() {deepEqual( Stem("complimenting"), "compliment");});
test("compliments -> compliment", function() {deepEqual( Stem("compliments"), "compliment");});
test("comply -> compli", function() {deepEqual( Stem("comply"), "compli");});
test("complying -> compli", function() {deepEqual( Stem("complying"), "compli");});
test("compn -> compn", function() {deepEqual( Stem("compn"), "compn");});
test("component -> compon", function() {deepEqual( Stem("component"), "compon");});
test("compose -> compos", function() {deepEqual( Stem("compose"), "compos");});
test("composed -> compos", function() {deepEqual( Stem("composed"), "compos");});
test("composedly -> compos", function() {deepEqual( Stem("composedly"), "compos");});
test("composer -> compos", function() {deepEqual( Stem("composer"), "compos");});
test("composes -> compos", function() {deepEqual( Stem("composes"), "compos");});
test("composing -> compos", function() {deepEqual( Stem("composing"), "compos");});
test("compositae -> composita", function() {deepEqual( Stem("compositae"), "composita");});
test("composite -> composit", function() {deepEqual( Stem("composite"), "composit");});
test("composition -> composit", function() {deepEqual( Stem("composition"), "composit");});
test("compositions -> composit", function() {deepEqual( Stem("compositions"), "composit");});
test("composure -> composur", function() {deepEqual( Stem("composure"), "composur");});
test("compound -> compound", function() {deepEqual( Stem("compound"), "compound");});
test("compounded -> compound", function() {deepEqual( Stem("compounded"), "compound");});
test("comprehen -> comprehen", function() {deepEqual( Stem("comprehen"), "comprehen");});
test("comprehend -> comprehend", function() {deepEqual( Stem("comprehend"), "comprehend");});
test("comprehended -> comprehend", function() {deepEqual( Stem("comprehended"), "comprehend");});
test("comprehending -> comprehend", function() {deepEqual( Stem("comprehending"), "comprehend");});
test("comprehends -> comprehend", function() {deepEqual( Stem("comprehends"), "comprehend");});
test("comprehensible -> comprehens", function() {deepEqual( Stem("comprehensible"), "comprehens");});
test("comprehension -> comprehens", function() {deepEqual( Stem("comprehension"), "comprehens");});
test("comprehensive -> comprehens", function() {deepEqual( Stem("comprehensive"), "comprehens");});
test("compressed -> compress", function() {deepEqual( Stem("compressed"), "compress");});
test("compressible -> compress", function() {deepEqual( Stem("compressible"), "compress");});
test("compressing -> compress", function() {deepEqual( Stem("compressing"), "compress");});
test("compression -> compress", function() {deepEqual( Stem("compression"), "compress");});
test("comprise -> compris", function() {deepEqual( Stem("comprise"), "compris");});
test("comprised -> compris", function() {deepEqual( Stem("comprised"), "compris");});
test("comprises -> compris", function() {deepEqual( Stem("comprises"), "compris");});
test("comprising -> compris", function() {deepEqual( Stem("comprising"), "compris");});
test("compromise -> compromis", function() {deepEqual( Stem("compromise"), "compromis");});
test("compromised -> compromis", function() {deepEqual( Stem("compromised"), "compromis");});
test("compromises -> compromis", function() {deepEqual( Stem("compromises"), "compromis");});
test("compromising -> compromis", function() {deepEqual( Stem("compromising"), "compromis");});
test("compter -> compter", function() {deepEqual( Stem("compter"), "compter");});
test("comptes -> compt", function() {deepEqual( Stem("comptes"), "compt");});
test("compulsion -> compuls", function() {deepEqual( Stem("compulsion"), "compuls");});
test("compulsory -> compulsori", function() {deepEqual( Stem("compulsory"), "compulsori");});
test("compunction -> compunct", function() {deepEqual( Stem("compunction"), "compunct");});
test("computation -> comput", function() {deepEqual( Stem("computation"), "comput");});
test("comrade -> comrad", function() {deepEqual( Stem("comrade"), "comrad");});
test("comrades -> comrad", function() {deepEqual( Stem("comrades"), "comrad");});
test("con -> con", function() {deepEqual( Stem("con"), "con");});
test("concatenation -> concaten", function() {deepEqual( Stem("concatenation"), "concaten");});
test("concave -> concav", function() {deepEqual( Stem("concave"), "concav");});
test("conceal -> conceal", function() {deepEqual( Stem("conceal"), "conceal");});
test("concealed -> conceal", function() {deepEqual( Stem("concealed"), "conceal");});
test("concealing -> conceal", function() {deepEqual( Stem("concealing"), "conceal");});
test("concealment -> conceal", function() {deepEqual( Stem("concealment"), "conceal");});
test("concealments -> conceal", function() {deepEqual( Stem("concealments"), "conceal");});
test("concebida -> concebida", function() {deepEqual( Stem("concebida"), "concebida");});
test("concede -> conced", function() {deepEqual( Stem("concede"), "conced");});
test("conceded -> conced", function() {deepEqual( Stem("conceded"), "conced");});
test("concedes -> conced", function() {deepEqual( Stem("concedes"), "conced");});
test("conceit -> conceit", function() {deepEqual( Stem("conceit"), "conceit");});
test("conceited -> conceit", function() {deepEqual( Stem("conceited"), "conceit");});
test("conceivable -> conceiv", function() {deepEqual( Stem("conceivable"), "conceiv");});
test("conceive -> conceiv", function() {deepEqual( Stem("conceive"), "conceiv");});
test("conceived -> conceiv", function() {deepEqual( Stem("conceived"), "conceiv");});
test("conceives -> conceiv", function() {deepEqual( Stem("conceives"), "conceiv");});
test("conceiving -> conceiv", function() {deepEqual( Stem("conceiving"), "conceiv");});
test("concentrate -> concentr", function() {deepEqual( Stem("concentrate"), "concentr");});
test("concentrated -> concentr", function() {deepEqual( Stem("concentrated"), "concentr");});
test("concentrating -> concentr", function() {deepEqual( Stem("concentrating"), "concentr");});
test("concentration -> concentr", function() {deepEqual( Stem("concentration"), "concentr");});
test("concepcion -> concepcion", function() {deepEqual( Stem("concepcion"), "concepcion");});
test("conception -> concept", function() {deepEqual( Stem("conception"), "concept");});
test("conceptions -> concept", function() {deepEqual( Stem("conceptions"), "concept");});
test("concern -> concern", function() {deepEqual( Stem("concern"), "concern");});
test("concerned -> concern", function() {deepEqual( Stem("concerned"), "concern");});
test("concerning -> concern", function() {deepEqual( Stem("concerning"), "concern");});
test("concerns -> concern", function() {deepEqual( Stem("concerns"), "concern");});
test("concert -> concert", function() {deepEqual( Stem("concert"), "concert");});
test("concerted -> concert", function() {deepEqual( Stem("concerted"), "concert");});
test("concertina -> concertina", function() {deepEqual( Stem("concertina"), "concertina");});
test("concerts -> concert", function() {deepEqual( Stem("concerts"), "concert");});
test("concession -> concess", function() {deepEqual( Stem("concession"), "concess");});
test("concessions -> concess", function() {deepEqual( Stem("concessions"), "concess");});
test("conchalee -> conchale", function() {deepEqual( Stem("conchalee"), "conchale");});
test("conchas -> concha", function() {deepEqual( Stem("conchas"), "concha");});
test("conchological -> concholog", function() {deepEqual( Stem("conchological"), "concholog");});
test("conciliate -> concili", function() {deepEqual( Stem("conciliate"), "concili");});
test("conciliated -> concili", function() {deepEqual( Stem("conciliated"), "concili");});
test("conciliation -> concili", function() {deepEqual( Stem("conciliation"), "concili");});
test("conciliations -> concili", function() {deepEqual( Stem("conciliations"), "concili");});
test("conciliatory -> conciliatori", function() {deepEqual( Stem("conciliatory"), "conciliatori");});
test("concise -> concis", function() {deepEqual( Stem("concise"), "concis");});
test("conclave -> conclav", function() {deepEqual( Stem("conclave"), "conclav");});
test("conclaves -> conclav", function() {deepEqual( Stem("conclaves"), "conclav");});
test("conclude -> conclud", function() {deepEqual( Stem("conclude"), "conclud");});
test("concluded -> conclud", function() {deepEqual( Stem("concluded"), "conclud");});
test("concludes -> conclud", function() {deepEqual( Stem("concludes"), "conclud");});
test("concluding -> conclud", function() {deepEqual( Stem("concluding"), "conclud");});
test("conclusion -> conclus", function() {deepEqual( Stem("conclusion"), "conclus");});
test("conclusions -> conclus", function() {deepEqual( Stem("conclusions"), "conclus");});
test("conclusive -> conclus", function() {deepEqual( Stem("conclusive"), "conclus");});
test("conclusively -> conclus", function() {deepEqual( Stem("conclusively"), "conclus");});
test("concoct -> concoct", function() {deepEqual( Stem("concoct"), "concoct");});
test("concocted -> concoct", function() {deepEqual( Stem("concocted"), "concoct");});
test("concord -> concord", function() {deepEqual( Stem("concord"), "concord");});
test("concourse -> concours", function() {deepEqual( Stem("concourse"), "concours");});
test("concretions -> concret", function() {deepEqual( Stem("concretions"), "concret");});
test("concubine -> concubin", function() {deepEqual( Stem("concubine"), "concubin");});
test("concur -> concur", function() {deepEqual( Stem("concur"), "concur");});
test("concurrence -> concurr", function() {deepEqual( Stem("concurrence"), "concurr");});
test("concurrent -> concurr", function() {deepEqual( Stem("concurrent"), "concurr");});
test("concurs -> concur", function() {deepEqual( Stem("concurs"), "concur");});
test("condemn -> condemn", function() {deepEqual( Stem("condemn"), "condemn");});
test("condemnation -> condemn", function() {deepEqual( Stem("condemnation"), "condemn");});
test("condemned -> condemn", function() {deepEqual( Stem("condemned"), "condemn");});
test("condemning -> condemn", function() {deepEqual( Stem("condemning"), "condemn");});
test("condemns -> condemn", function() {deepEqual( Stem("condemns"), "condemn");});
test("condense -> condens", function() {deepEqual( Stem("condense"), "condens");});
test("condensed -> condens", function() {deepEqual( Stem("condensed"), "condens");});
test("condescend -> condescend", function() {deepEqual( Stem("condescend"), "condescend");});
test("condescended -> condescend", function() {deepEqual( Stem("condescended"), "condescend");});
test("condescending -> condescend", function() {deepEqual( Stem("condescending"), "condescend");});
test("condescendingly -> condescend", function() {deepEqual( Stem("condescendingly"), "condescend");});
test("condescends -> condescend", function() {deepEqual( Stem("condescends"), "condescend");});
test("condescension -> condescens", function() {deepEqual( Stem("condescension"), "condescens");});
test("condescent -> condesc", function() {deepEqual( Stem("condescent"), "condesc");});
test("condeseending -> condeseend", function() {deepEqual( Stem("condeseending"), "condeseend");});
test("condign -> condign", function() {deepEqual( Stem("condign"), "condign");});
test("condition -> condit", function() {deepEqual( Stem("condition"), "condit");});
test("conditional -> condit", function() {deepEqual( Stem("conditional"), "condit");});
test("conditioned -> condit", function() {deepEqual( Stem("conditioned"), "condit");});
test("conditions -> condit", function() {deepEqual( Stem("conditions"), "condit");});
test("condole -> condol", function() {deepEqual( Stem("condole"), "condol");});
test("condoled -> condol", function() {deepEqual( Stem("condoled"), "condol");});
test("condolence -> condol", function() {deepEqual( Stem("condolence"), "condol");});
test("condolences -> condol", function() {deepEqual( Stem("condolences"), "condol");});
test("condor -> condor", function() {deepEqual( Stem("condor"), "condor");});
test("condors -> condor", function() {deepEqual( Stem("condors"), "condor");});
test("conduce -> conduc", function() {deepEqual( Stem("conduce"), "conduc");});
test("conducive -> conduc", function() {deepEqual( Stem("conducive"), "conduc");});
test("conduct -> conduct", function() {deepEqual( Stem("conduct"), "conduct");});
test("conducted -> conduct", function() {deepEqual( Stem("conducted"), "conduct");});
test("conducting -> conduct", function() {deepEqual( Stem("conducting"), "conduct");});
test("conductor -> conductor", function() {deepEqual( Stem("conductor"), "conductor");});
test("conductors -> conductor", function() {deepEqual( Stem("conductors"), "conductor");});
test("conductress -> conductress", function() {deepEqual( Stem("conductress"), "conductress");});
test("conducts -> conduct", function() {deepEqual( Stem("conducts"), "conduct");});
test("conduits -> conduit", function() {deepEqual( Stem("conduits"), "conduit");});
test("cone -> cone", function() {deepEqual( Stem("cone"), "cone");});
test("conejos -> conejo", function() {deepEqual( Stem("conejos"), "conejo");});
test("cones -> cone", function() {deepEqual( Stem("cones"), "cone");});
test("confabulation -> confabul", function() {deepEqual( Stem("confabulation"), "confabul");});
test("confabulations -> confabul", function() {deepEqual( Stem("confabulations"), "confabul");});
test("confectioner -> confection", function() {deepEqual( Stem("confectioner"), "confection");});
test("confederate -> confeder", function() {deepEqual( Stem("confederate"), "confeder");});
test("confederates -> confeder", function() {deepEqual( Stem("confederates"), "confeder");});
test("confer -> confer", function() {deepEqual( Stem("confer"), "confer");});
test("conference -> confer", function() {deepEqual( Stem("conference"), "confer");});
test("conferences -> confer", function() {deepEqual( Stem("conferences"), "confer");});
test("conferred -> confer", function() {deepEqual( Stem("conferred"), "confer");});
test("conferring -> confer", function() {deepEqual( Stem("conferring"), "confer");});
test("confers -> confer", function() {deepEqual( Stem("confers"), "confer");});
test("confervae -> conferva", function() {deepEqual( Stem("confervae"), "conferva");});
test("confess -> confess", function() {deepEqual( Stem("confess"), "confess");});
test("confessed -> confess", function() {deepEqual( Stem("confessed"), "confess");});
test("confessedly -> confess", function() {deepEqual( Stem("confessedly"), "confess");});
test("confessing -> confess", function() {deepEqual( Stem("confessing"), "confess");});
test("confession -> confess", function() {deepEqual( Stem("confession"), "confess");});
test("confessions -> confess", function() {deepEqual( Stem("confessions"), "confess");});
test("confessor -> confessor", function() {deepEqual( Stem("confessor"), "confessor");});
test("confidante -> confidant", function() {deepEqual( Stem("confidante"), "confidant");});
test("confidantes -> confidant", function() {deepEqual( Stem("confidantes"), "confidant");});
test("confide -> confid", function() {deepEqual( Stem("confide"), "confid");});
test("confided -> confid", function() {deepEqual( Stem("confided"), "confid");});
test("confidence -> confid", function() {deepEqual( Stem("confidence"), "confid");});
test("confidences -> confid", function() {deepEqual( Stem("confidences"), "confid");});
test("confident -> confid", function() {deepEqual( Stem("confident"), "confid");});
test("confidential -> confidenti", function() {deepEqual( Stem("confidential"), "confidenti");});
test("confidentially -> confidenti", function() {deepEqual( Stem("confidentially"), "confidenti");});
test("confidently -> confid", function() {deepEqual( Stem("confidently"), "confid");});
test("confides -> confid", function() {deepEqual( Stem("confides"), "confid");});
test("confiding -> confid", function() {deepEqual( Stem("confiding"), "confid");});
test("confidingly -> confid", function() {deepEqual( Stem("confidingly"), "confid");});
test("configuration -> configur", function() {deepEqual( Stem("configuration"), "configur");});
test("confine -> confin", function() {deepEqual( Stem("confine"), "confin");});
test("confined -> confin", function() {deepEqual( Stem("confined"), "confin");});
test("confinement -> confin", function() {deepEqual( Stem("confinement"), "confin");});
test("confines -> confin", function() {deepEqual( Stem("confines"), "confin");});
test("confining -> confin", function() {deepEqual( Stem("confining"), "confin");});
test("confirm -> confirm", function() {deepEqual( Stem("confirm"), "confirm");});
test("confirmation -> confirm", function() {deepEqual( Stem("confirmation"), "confirm");});
test("confirmatory -> confirmatori", function() {deepEqual( Stem("confirmatory"), "confirmatori");});
test("confirmed -> confirm", function() {deepEqual( Stem("confirmed"), "confirm");});
test("confirming -> confirm", function() {deepEqual( Stem("confirming"), "confirm");});
test("confirms -> confirm", function() {deepEqual( Stem("confirms"), "confirm");});
test("confiscate -> confisc", function() {deepEqual( Stem("confiscate"), "confisc");});
test("confiscation -> confisc", function() {deepEqual( Stem("confiscation"), "confisc");});
test("conflagrations -> conflagr", function() {deepEqual( Stem("conflagrations"), "conflagr");});
test("conflict -> conflict", function() {deepEqual( Stem("conflict"), "conflict");});
test("conflicting -> conflict", function() {deepEqual( Stem("conflicting"), "conflict");});
test("conform -> conform", function() {deepEqual( Stem("conform"), "conform");});
test("conforming -> conform", function() {deepEqual( Stem("conforming"), "conform");});
test("conformity -> conform", function() {deepEqual( Stem("conformity"), "conform");});
test("confound -> confound", function() {deepEqual( Stem("confound"), "confound");});
test("confounded -> confound", function() {deepEqual( Stem("confounded"), "confound");});
test("confoundedly -> confound", function() {deepEqual( Stem("confoundedly"), "confound");});
test("confounding -> confound", function() {deepEqual( Stem("confounding"), "confound");});
test("confront -> confront", function() {deepEqual( Stem("confront"), "confront");});
test("confronted -> confront", function() {deepEqual( Stem("confronted"), "confront");});
test("confronting -> confront", function() {deepEqual( Stem("confronting"), "confront");});
test("confronts -> confront", function() {deepEqual( Stem("confronts"), "confront");});
test("confuse -> confus", function() {deepEqual( Stem("confuse"), "confus");});
test("confused -> confus", function() {deepEqual( Stem("confused"), "confus");});
test("confusedly -> confus", function() {deepEqual( Stem("confusedly"), "confus");});
test("confuses -> confus", function() {deepEqual( Stem("confuses"), "confus");});
test("confusing -> confus", function() {deepEqual( Stem("confusing"), "confus");});
test("confusion -> confus", function() {deepEqual( Stem("confusion"), "confus");});
test("confute -> confut", function() {deepEqual( Stem("confute"), "confut");});
test("confuting -> confut", function() {deepEqual( Stem("confuting"), "confut");});
test("congealed -> congeal", function() {deepEqual( Stem("congealed"), "congeal");});
test("congelation -> congel", function() {deepEqual( Stem("congelation"), "congel");});
test("congeners -> congen", function() {deepEqual( Stem("congeners"), "congen");});
test("congenial -> congeni", function() {deepEqual( Stem("congenial"), "congeni");});
test("congenially -> congeni", function() {deepEqual( Stem("congenially"), "congeni");});
test("conglomerate -> conglomer", function() {deepEqual( Stem("conglomerate"), "conglomer");});
test("conglomeration -> conglomer", function() {deepEqual( Stem("conglomeration"), "conglomer");});
test("congo -> congo", function() {deepEqual( Stem("congo"), "congo");});
test("congratulate -> congratul", function() {deepEqual( Stem("congratulate"), "congratul");});
test("congratulated -> congratul", function() {deepEqual( Stem("congratulated"), "congratul");});
test("congratulating -> congratul", function() {deepEqual( Stem("congratulating"), "congratul");});
test("congratulation -> congratul", function() {deepEqual( Stem("congratulation"), "congratul");});
test("congratulations -> congratul", function() {deepEqual( Stem("congratulations"), "congratul");});
test("congratulatory -> congratulatori", function() {deepEqual( Stem("congratulatory"), "congratulatori");});
test("congregate -> congreg", function() {deepEqual( Stem("congregate"), "congreg");});
test("congregated -> congreg", function() {deepEqual( Stem("congregated"), "congreg");});
test("congregation -> congreg", function() {deepEqual( Stem("congregation"), "congreg");});
test("congruous -> congruous", function() {deepEqual( Stem("congruous"), "congruous");});
test("conica -> conica", function() {deepEqual( Stem("conica"), "conica");});
test("conical -> conic", function() {deepEqual( Stem("conical"), "conic");});
test("conjecture -> conjectur", function() {deepEqual( Stem("conjecture"), "conjectur");});
test("conjectured -> conjectur", function() {deepEqual( Stem("conjectured"), "conjectur");});
test("conjectures -> conjectur", function() {deepEqual( Stem("conjectures"), "conjectur");});
test("conjecturing -> conjectur", function() {deepEqual( Stem("conjecturing"), "conjectur");});
test("conjoint -> conjoint", function() {deepEqual( Stem("conjoint"), "conjoint");});
test("conjointly -> conjoint", function() {deepEqual( Stem("conjointly"), "conjoint");});
test("conjugal -> conjug", function() {deepEqual( Stem("conjugal"), "conjug");});
test("conjunction -> conjunct", function() {deepEqual( Stem("conjunction"), "conjunct");});
test("conjuncture -> conjunctur", function() {deepEqual( Stem("conjuncture"), "conjunctur");});
test("conjuration -> conjur", function() {deepEqual( Stem("conjuration"), "conjur");});
test("conjure -> conjur", function() {deepEqual( Stem("conjure"), "conjur");});
test("conjured -> conjur", function() {deepEqual( Stem("conjured"), "conjur");});
test("conjures -> conjur", function() {deepEqual( Stem("conjures"), "conjur");});
test("conjuring -> conjur", function() {deepEqual( Stem("conjuring"), "conjur");});
test("conjuror -> conjuror", function() {deepEqual( Stem("conjuror"), "conjuror");});
test("connect -> connect", function() {deepEqual( Stem("connect"), "connect");});
test("connected -> connect", function() {deepEqual( Stem("connected"), "connect");});
test("connecting -> connect", function() {deepEqual( Stem("connecting"), "connect");});
test("connection -> connect", function() {deepEqual( Stem("connection"), "connect");});
test("connections -> connect", function() {deepEqual( Stem("connections"), "connect");});
test("connects -> connect", function() {deepEqual( Stem("connects"), "connect");});
test("connexion -> connexion", function() {deepEqual( Stem("connexion"), "connexion");});
test("connexions -> connexion", function() {deepEqual( Stem("connexions"), "connexion");});
test("conning -> con", function() {deepEqual( Stem("conning"), "con");});
test("connivance -> conniv", function() {deepEqual( Stem("connivance"), "conniv");});
test("connoisseur -> connoisseur", function() {deepEqual( Stem("connoisseur"), "connoisseur");});
test("connubialities -> connubi", function() {deepEqual( Stem("connubialities"), "connubi");});
test("conquer -> conquer", function() {deepEqual( Stem("conquer"), "conquer");});
test("conquerable -> conquer", function() {deepEqual( Stem("conquerable"), "conquer");});
test("conquered -> conquer", function() {deepEqual( Stem("conquered"), "conquer");});
test("conquering -> conquer", function() {deepEqual( Stem("conquering"), "conquer");});
test("conqueror -> conqueror", function() {deepEqual( Stem("conqueror"), "conqueror");});
test("conquerors -> conqueror", function() {deepEqual( Stem("conquerors"), "conqueror");});
test("conquest -> conquest", function() {deepEqual( Stem("conquest"), "conquest");});
test("consanguinity -> consanguin", function() {deepEqual( Stem("consanguinity"), "consanguin");});
test("consarn -> consarn", function() {deepEqual( Stem("consarn"), "consarn");});
test("conscience -> conscienc", function() {deepEqual( Stem("conscience"), "conscienc");});
test("consciences -> conscienc", function() {deepEqual( Stem("consciences"), "conscienc");});
test("conscientious -> conscienti", function() {deepEqual( Stem("conscientious"), "conscienti");});
test("conscientiously -> conscienti", function() {deepEqual( Stem("conscientiously"), "conscienti");});
test("conscientiousness -> conscienti", function() {deepEqual( Stem("conscientiousness"), "conscienti");});
test("conscious -> conscious", function() {deepEqual( Stem("conscious"), "conscious");});
test("consciously -> conscious", function() {deepEqual( Stem("consciously"), "conscious");});
test("consciousness -> conscious", function() {deepEqual( Stem("consciousness"), "conscious");});
test("consecrated -> consecr", function() {deepEqual( Stem("consecrated"), "consecr");});
test("consecrating -> consecr", function() {deepEqual( Stem("consecrating"), "consecr");});
test("consecutive -> consecut", function() {deepEqual( Stem("consecutive"), "consecut");});
test("consecutively -> consecut", function() {deepEqual( Stem("consecutively"), "consecut");});
test("consent -> consent", function() {deepEqual( Stem("consent"), "consent");});
test("consented -> consent", function() {deepEqual( Stem("consented"), "consent");});
test("consenting -> consent", function() {deepEqual( Stem("consenting"), "consent");});
test("consents -> consent", function() {deepEqual( Stem("consents"), "consent");});
test("consequence -> consequ", function() {deepEqual( Stem("consequence"), "consequ");});
test("consequences -> consequ", function() {deepEqual( Stem("consequences"), "consequ");});
test("consequent -> consequ", function() {deepEqual( Stem("consequent"), "consequ");});
test("consequential -> consequenti", function() {deepEqual( Stem("consequential"), "consequenti");});
test("consequently -> consequ", function() {deepEqual( Stem("consequently"), "consequ");});
test("conservatism -> conservat", function() {deepEqual( Stem("conservatism"), "conservat");});
test("conservative -> conserv", function() {deepEqual( Stem("conservative"), "conserv");});
test("conservatives -> conserv", function() {deepEqual( Stem("conservatives"), "conserv");});
test("conservatories -> conservatori", function() {deepEqual( Stem("conservatories"), "conservatori");});
test("conservatory -> conservatori", function() {deepEqual( Stem("conservatory"), "conservatori");});
test("conserved -> conserv", function() {deepEqual( Stem("conserved"), "conserv");});
test("consider -> consid", function() {deepEqual( Stem("consider"), "consid");});
test("considerable -> consider", function() {deepEqual( Stem("considerable"), "consider");});
test("considerably -> consider", function() {deepEqual( Stem("considerably"), "consider");});
test("considerate -> consider", function() {deepEqual( Stem("considerate"), "consider");});
test("considerately -> consider", function() {deepEqual( Stem("considerately"), "consider");});
test("consideration -> consider", function() {deepEqual( Stem("consideration"), "consider");});
test("considerations -> consider", function() {deepEqual( Stem("considerations"), "consider");});
test("considered -> consid", function() {deepEqual( Stem("considered"), "consid");});
test("considering -> consid", function() {deepEqual( Stem("considering"), "consid");});
test("considers -> consid", function() {deepEqual( Stem("considers"), "consid");});
test("consign -> consign", function() {deepEqual( Stem("consign"), "consign");});
test("consigned -> consign", function() {deepEqual( Stem("consigned"), "consign");});
test("consigning -> consign", function() {deepEqual( Stem("consigning"), "consign");});
test("consignment -> consign", function() {deepEqual( Stem("consignment"), "consign");});
test("consist -> consist", function() {deepEqual( Stem("consist"), "consist");});
test("consisted -> consist", function() {deepEqual( Stem("consisted"), "consist");});
test("consistency -> consist", function() {deepEqual( Stem("consistency"), "consist");});
test("consistent -> consist", function() {deepEqual( Stem("consistent"), "consist");});
test("consistently -> consist", function() {deepEqual( Stem("consistently"), "consist");});
test("consisting -> consist", function() {deepEqual( Stem("consisting"), "consist");});
test("consists -> consist", function() {deepEqual( Stem("consists"), "consist");});
test("consolation -> consol", function() {deepEqual( Stem("consolation"), "consol");});
test("consolations -> consol", function() {deepEqual( Stem("consolations"), "consol");});
test("consolatory -> consolatori", function() {deepEqual( Stem("consolatory"), "consolatori");});
test("console -> consol", function() {deepEqual( Stem("console"), "consol");});
test("consoled -> consol", function() {deepEqual( Stem("consoled"), "consol");});
test("consoles -> consol", function() {deepEqual( Stem("consoles"), "consol");});
test("consolidate -> consolid", function() {deepEqual( Stem("consolidate"), "consolid");});
test("consolidated -> consolid", function() {deepEqual( Stem("consolidated"), "consolid");});
test("consolidating -> consolid", function() {deepEqual( Stem("consolidating"), "consolid");});
test("consoling -> consol", function() {deepEqual( Stem("consoling"), "consol");});
test("consolingly -> consol", function() {deepEqual( Stem("consolingly"), "consol");});
test("consols -> consol", function() {deepEqual( Stem("consols"), "consol");});
test("consonant -> conson", function() {deepEqual( Stem("consonant"), "conson");});
test("consort -> consort", function() {deepEqual( Stem("consort"), "consort");});
test("consorted -> consort", function() {deepEqual( Stem("consorted"), "consort");});
test("consorting -> consort", function() {deepEqual( Stem("consorting"), "consort");});
test("conspicuous -> conspicu", function() {deepEqual( Stem("conspicuous"), "conspicu");});
test("conspicuously -> conspicu", function() {deepEqual( Stem("conspicuously"), "conspicu");});
test("conspiracy -> conspiraci", function() {deepEqual( Stem("conspiracy"), "conspiraci");});
test("conspirator -> conspir", function() {deepEqual( Stem("conspirator"), "conspir");});
test("conspirators -> conspir", function() {deepEqual( Stem("conspirators"), "conspir");});
test("conspire -> conspir", function() {deepEqual( Stem("conspire"), "conspir");});
test("conspired -> conspir", function() {deepEqual( Stem("conspired"), "conspir");});
test("conspiring -> conspir", function() {deepEqual( Stem("conspiring"), "conspir");});
test("constable -> constabl", function() {deepEqual( Stem("constable"), "constabl");});
test("constables -> constabl", function() {deepEqual( Stem("constables"), "constabl");});
test("constance -> constanc", function() {deepEqual( Stem("constance"), "constanc");});
test("constancy -> constanc", function() {deepEqual( Stem("constancy"), "constanc");});
test("constant -> constant", function() {deepEqual( Stem("constant"), "constant");});
test("constantinople -> constantinopl", function() {deepEqual( Stem("constantinople"), "constantinopl");});
test("constantly -> constant", function() {deepEqual( Stem("constantly"), "constant");});
test("constellations -> constel", function() {deepEqual( Stem("constellations"), "constel");});
test("consternation -> constern", function() {deepEqual( Stem("consternation"), "constern");});
test("constitootion -> constitoot", function() {deepEqual( Stem("constitootion"), "constitoot");});
test("constituencies -> constitu", function() {deepEqual( Stem("constituencies"), "constitu");});
test("constituency -> constitu", function() {deepEqual( Stem("constituency"), "constitu");});
test("constituent -> constitu", function() {deepEqual( Stem("constituent"), "constitu");});
test("constituents -> constitu", function() {deepEqual( Stem("constituents"), "constitu");});
test("constitute -> constitut", function() {deepEqual( Stem("constitute"), "constitut");});
test("constituted -> constitut", function() {deepEqual( Stem("constituted"), "constitut");});
test("constitutes -> constitut", function() {deepEqual( Stem("constitutes"), "constitut");});
test("constituting -> constitut", function() {deepEqual( Stem("constituting"), "constitut");});
test("constitution -> constitut", function() {deepEqual( Stem("constitution"), "constitut");});
test("constitutional -> constitut", function() {deepEqual( Stem("constitutional"), "constitut");});
test("constitutionally -> constitut", function() {deepEqual( Stem("constitutionally"), "constitut");});
test("constrain -> constrain", function() {deepEqual( Stem("constrain"), "constrain");});
test("constrained -> constrain", function() {deepEqual( Stem("constrained"), "constrain");});
test("constraining -> constrain", function() {deepEqual( Stem("constraining"), "constrain");});
test("constrains -> constrain", function() {deepEqual( Stem("constrains"), "constrain");});
test("constraint -> constraint", function() {deepEqual( Stem("constraint"), "constraint");});
test("construct -> construct", function() {deepEqual( Stem("construct"), "construct");});
test("constructed -> construct", function() {deepEqual( Stem("constructed"), "construct");});
test("constructing -> construct", function() {deepEqual( Stem("constructing"), "construct");});
test("construction -> construct", function() {deepEqual( Stem("construction"), "construct");});
test("constructions -> construct", function() {deepEqual( Stem("constructions"), "construct");});
test("construe -> constru", function() {deepEqual( Stem("construe"), "constru");});
test("consul -> consul", function() {deepEqual( Stem("consul"), "consul");});
test("consult -> consult", function() {deepEqual( Stem("consult"), "consult");});
test("consultation -> consult", function() {deepEqual( Stem("consultation"), "consult");});
test("consultations -> consult", function() {deepEqual( Stem("consultations"), "consult");});
test("consulted -> consult", function() {deepEqual( Stem("consulted"), "consult");});
test("consulting -> consult", function() {deepEqual( Stem("consulting"), "consult");});
test("consults -> consult", function() {deepEqual( Stem("consults"), "consult");});
test("consume -> consum", function() {deepEqual( Stem("consume"), "consum");});
test("consumed -> consum", function() {deepEqual( Stem("consumed"), "consum");});
test("consumedly -> consum", function() {deepEqual( Stem("consumedly"), "consum");});
test("consumers -> consum", function() {deepEqual( Stem("consumers"), "consum");});
test("consuming -> consum", function() {deepEqual( Stem("consuming"), "consum");});
test("consummate -> consumm", function() {deepEqual( Stem("consummate"), "consumm");});
test("consummation -> consumm", function() {deepEqual( Stem("consummation"), "consumm");});
test("consumption -> consumpt", function() {deepEqual( Stem("consumption"), "consumpt");});
test("consumptive -> consumpt", function() {deepEqual( Stem("consumptive"), "consumpt");});
test("contact -> contact", function() {deepEqual( Stem("contact"), "contact");});
test("contagion -> contagion", function() {deepEqual( Stem("contagion"), "contagion");});
test("contagious -> contagi", function() {deepEqual( Stem("contagious"), "contagi");});
test("contain -> contain", function() {deepEqual( Stem("contain"), "contain");});
test("contained -> contain", function() {deepEqual( Stem("contained"), "contain");});
test("containing -> contain", function() {deepEqual( Stem("containing"), "contain");});
test("contains -> contain", function() {deepEqual( Stem("contains"), "contain");});
test("contaminated -> contamin", function() {deepEqual( Stem("contaminated"), "contamin");});
test("contaminating -> contamin", function() {deepEqual( Stem("contaminating"), "contamin");});
test("contamination -> contamin", function() {deepEqual( Stem("contamination"), "contamin");});
test("contemned -> contemn", function() {deepEqual( Stem("contemned"), "contemn");});
test("contemning -> contemn", function() {deepEqual( Stem("contemning"), "contemn");});
test("contemns -> contemn", function() {deepEqual( Stem("contemns"), "contemn");});
test("contemplate -> contempl", function() {deepEqual( Stem("contemplate"), "contempl");});
test("contemplated -> contempl", function() {deepEqual( Stem("contemplated"), "contempl");});
test("contemplates -> contempl", function() {deepEqual( Stem("contemplates"), "contempl");});
test("contemplating -> contempl", function() {deepEqual( Stem("contemplating"), "contempl");});
test("contemplation -> contempl", function() {deepEqual( Stem("contemplation"), "contempl");});
test("contemplations -> contempl", function() {deepEqual( Stem("contemplations"), "contempl");});
test("contemplative -> contempl", function() {deepEqual( Stem("contemplative"), "contempl");});
test("contemporaneous -> contemporan", function() {deepEqual( Stem("contemporaneous"), "contemporan");});
test("contemporaneously -> contemporan", function() {deepEqual( Stem("contemporaneously"), "contemporan");});
test("contemporaneousness -> contemporan", function() {deepEqual( Stem("contemporaneousness"), "contemporan");});
test("contemporaries -> contemporari", function() {deepEqual( Stem("contemporaries"), "contemporari");});
test("contempt -> contempt", function() {deepEqual( Stem("contempt"), "contempt");});
test("contemptible -> contempt", function() {deepEqual( Stem("contemptible"), "contempt");});
test("contemptuous -> contemptu", function() {deepEqual( Stem("contemptuous"), "contemptu");});
test("contemptuously -> contemptu", function() {deepEqual( Stem("contemptuously"), "contemptu");});
test("conten -> conten", function() {deepEqual( Stem("conten"), "conten");});
test("contend -> contend", function() {deepEqual( Stem("contend"), "contend");});
test("contended -> contend", function() {deepEqual( Stem("contended"), "contend");});
test("contending -> contend", function() {deepEqual( Stem("contending"), "contend");});
test("contends -> contend", function() {deepEqual( Stem("contends"), "contend");});
test("content -> content", function() {deepEqual( Stem("content"), "content");});
test("contented -> content", function() {deepEqual( Stem("contented"), "content");});
test("contentedly -> content", function() {deepEqual( Stem("contentedly"), "content");});
test("contenting -> content", function() {deepEqual( Stem("contenting"), "content");});
test("contention -> content", function() {deepEqual( Stem("contention"), "content");});
test("contentions -> content", function() {deepEqual( Stem("contentions"), "content");});
test("contentious -> contenti", function() {deepEqual( Stem("contentious"), "contenti");});
test("contentment -> content", function() {deepEqual( Stem("contentment"), "content");});
test("contents -> content", function() {deepEqual( Stem("contents"), "content");});
test("contest -> contest", function() {deepEqual( Stem("contest"), "contest");});
test("contested -> contest", function() {deepEqual( Stem("contested"), "contest");});
test("contests -> contest", function() {deepEqual( Stem("contests"), "contest");});
test("continent -> contin", function() {deepEqual( Stem("continent"), "contin");});
test("continental -> continent", function() {deepEqual( Stem("continental"), "continent");});
test("continents -> contin", function() {deepEqual( Stem("continents"), "contin");});
test("contingencies -> conting", function() {deepEqual( Stem("contingencies"), "conting");});
test("contingency -> conting", function() {deepEqual( Stem("contingency"), "conting");});
test("contingent -> conting", function() {deepEqual( Stem("contingent"), "conting");});
test("continney -> continney", function() {deepEqual( Stem("continney"), "continney");});
test("continual -> continu", function() {deepEqual( Stem("continual"), "continu");});
test("continually -> continu", function() {deepEqual( Stem("continually"), "continu");});
test("continuance -> continu", function() {deepEqual( Stem("continuance"), "continu");});
test("continuation -> continu", function() {deepEqual( Stem("continuation"), "continu");});
test("continue -> continu", function() {deepEqual( Stem("continue"), "continu");});
test("continued -> continu", function() {deepEqual( Stem("continued"), "continu");});
test("continues -> continu", function() {deepEqual( Stem("continues"), "continu");});
test("continuing -> continu", function() {deepEqual( Stem("continuing"), "continu");});
test("continuous -> continu", function() {deepEqual( Stem("continuous"), "continu");});
test("continuously -> continu", function() {deepEqual( Stem("continuously"), "continu");});
test("contorted -> contort", function() {deepEqual( Stem("contorted"), "contort");});
test("contorting -> contort", function() {deepEqual( Stem("contorting"), "contort");});
test("contortions -> contort", function() {deepEqual( Stem("contortions"), "contort");});
test("contra -> contra", function() {deepEqual( Stem("contra"), "contra");});
test("contract -> contract", function() {deepEqual( Stem("contract"), "contract");});
test("contracted -> contract", function() {deepEqual( Stem("contracted"), "contract");});
test("contracting -> contract", function() {deepEqual( Stem("contracting"), "contract");});
test("contraction -> contract", function() {deepEqual( Stem("contraction"), "contract");});
test("contractors -> contractor", function() {deepEqual( Stem("contractors"), "contractor");});
test("contracts -> contract", function() {deepEqual( Stem("contracts"), "contract");});
test("contradict -> contradict", function() {deepEqual( Stem("contradict"), "contradict");});
test("contradicted -> contradict", function() {deepEqual( Stem("contradicted"), "contradict");});
test("contradicting -> contradict", function() {deepEqual( Stem("contradicting"), "contradict");});
test("contradiction -> contradict", function() {deepEqual( Stem("contradiction"), "contradict");});
test("contradictions -> contradict", function() {deepEqual( Stem("contradictions"), "contradict");});
test("contradictory -> contradictori", function() {deepEqual( Stem("contradictory"), "contradictori");});
test("contradicts -> contradict", function() {deepEqual( Stem("contradicts"), "contradict");});
test("contradistinction -> contradistinct", function() {deepEqual( Stem("contradistinction"), "contradistinct");});
test("contrairy -> contrairi", function() {deepEqual( Stem("contrairy"), "contrairi");});
test("contralto -> contralto", function() {deepEqual( Stem("contralto"), "contralto");});
test("contrarieties -> contrarieti", function() {deepEqual( Stem("contrarieties"), "contrarieti");});
test("contrary -> contrari", function() {deepEqual( Stem("contrary"), "contrari");});
test("contrast -> contrast", function() {deepEqual( Stem("contrast"), "contrast");});
test("contrasted -> contrast", function() {deepEqual( Stem("contrasted"), "contrast");});
test("contrasting -> contrast", function() {deepEqual( Stem("contrasting"), "contrast");});
test("contrasts -> contrast", function() {deepEqual( Stem("contrasts"), "contrast");});
test("contrees -> contre", function() {deepEqual( Stem("contrees"), "contre");});
test("contribute -> contribut", function() {deepEqual( Stem("contribute"), "contribut");});
test("contributed -> contribut", function() {deepEqual( Stem("contributed"), "contribut");});
test("contributes -> contribut", function() {deepEqual( Stem("contributes"), "contribut");});
test("contributing -> contribut", function() {deepEqual( Stem("contributing"), "contribut");});
test("contribution -> contribut", function() {deepEqual( Stem("contribution"), "contribut");});
test("contributions -> contribut", function() {deepEqual( Stem("contributions"), "contribut");});
test("contributors -> contributor", function() {deepEqual( Stem("contributors"), "contributor");});
test("contrite -> contrit", function() {deepEqual( Stem("contrite"), "contrit");});
test("contrition -> contrit", function() {deepEqual( Stem("contrition"), "contrit");});
test("contrivance -> contriv", function() {deepEqual( Stem("contrivance"), "contriv");});
test("contrivances -> contriv", function() {deepEqual( Stem("contrivances"), "contriv");});
test("contrive -> contriv", function() {deepEqual( Stem("contrive"), "contriv");});
test("contrived -> contriv", function() {deepEqual( Stem("contrived"), "contriv");});
test("contriving -> contriv", function() {deepEqual( Stem("contriving"), "contriv");});
test("control -> control", function() {deepEqual( Stem("control"), "control");});
test("controlled -> control", function() {deepEqual( Stem("controlled"), "control");});
test("controlling -> control", function() {deepEqual( Stem("controlling"), "control");});
test("controls -> control", function() {deepEqual( Stem("controls"), "control");});
test("controvert -> controvert", function() {deepEqual( Stem("controvert"), "controvert");});
test("controverted -> controvert", function() {deepEqual( Stem("controverted"), "controvert");});
test("contumelious -> contumeli", function() {deepEqual( Stem("contumelious"), "contumeli");});
test("contumely -> contum", function() {deepEqual( Stem("contumely"), "contum");});
test("contusion -> contus", function() {deepEqual( Stem("contusion"), "contus");});
test("conundrums -> conundrum", function() {deepEqual( Stem("conundrums"), "conundrum");});
test("conurus -> conurus", function() {deepEqual( Stem("conurus"), "conurus");});
test("convalescence -> convalesc", function() {deepEqual( Stem("convalescence"), "convalesc");});
test("convalescent -> convalesc", function() {deepEqual( Stem("convalescent"), "convalesc");});
test("convened -> conven", function() {deepEqual( Stem("convened"), "conven");});
test("convenience -> conveni", function() {deepEqual( Stem("convenience"), "conveni");});
test("convenient -> conveni", function() {deepEqual( Stem("convenient"), "conveni");});
test("conveniently -> conveni", function() {deepEqual( Stem("conveniently"), "conveni");});
test("convent -> convent", function() {deepEqual( Stem("convent"), "convent");});
test("convention -> convent", function() {deepEqual( Stem("convention"), "convent");});
test("conventional -> convent", function() {deepEqual( Stem("conventional"), "convent");});
test("conventionalities -> convent", function() {deepEqual( Stem("conventionalities"), "convent");});
test("conventionality -> convent", function() {deepEqual( Stem("conventionality"), "convent");});
test("conventionally -> convent", function() {deepEqual( Stem("conventionally"), "convent");});
test("conventions -> convent", function() {deepEqual( Stem("conventions"), "convent");});
test("convents -> convent", function() {deepEqual( Stem("convents"), "convent");});
test("conventual -> conventu", function() {deepEqual( Stem("conventual"), "conventu");});
test("converge -> converg", function() {deepEqual( Stem("converge"), "converg");});
test("converged -> converg", function() {deepEqual( Stem("converged"), "converg");});
test("convergent -> converg", function() {deepEqual( Stem("convergent"), "converg");});
test("conversant -> convers", function() {deepEqual( Stem("conversant"), "convers");});
test("conversation -> convers", function() {deepEqual( Stem("conversation"), "convers");});
test("conversational -> convers", function() {deepEqual( Stem("conversational"), "convers");});
test("conversationally -> convers", function() {deepEqual( Stem("conversationally"), "convers");});
test("conversations -> convers", function() {deepEqual( Stem("conversations"), "convers");});
test("converse -> convers", function() {deepEqual( Stem("converse"), "convers");});
test("conversed -> convers", function() {deepEqual( Stem("conversed"), "convers");});
test("converses -> convers", function() {deepEqual( Stem("converses"), "convers");});
test("conversing -> convers", function() {deepEqual( Stem("conversing"), "convers");});
test("conversion -> convers", function() {deepEqual( Stem("conversion"), "convers");});
test("convert -> convert", function() {deepEqual( Stem("convert"), "convert");});
test("converted -> convert", function() {deepEqual( Stem("converted"), "convert");});
test("convertible -> convert", function() {deepEqual( Stem("convertible"), "convert");});
test("converting -> convert", function() {deepEqual( Stem("converting"), "convert");});
test("convertion -> convert", function() {deepEqual( Stem("convertion"), "convert");});
test("converts -> convert", function() {deepEqual( Stem("converts"), "convert");});
test("convex -> convex", function() {deepEqual( Stem("convex"), "convex");});
test("convey -> convey", function() {deepEqual( Stem("convey"), "convey");});
test("conveyance -> convey", function() {deepEqual( Stem("conveyance"), "convey");});
test("conveyancer -> conveyanc", function() {deepEqual( Stem("conveyancer"), "conveyanc");});
test("conveyances -> convey", function() {deepEqual( Stem("conveyances"), "convey");});
test("conveyed -> convey", function() {deepEqual( Stem("conveyed"), "convey");});
test("conveying -> convey", function() {deepEqual( Stem("conveying"), "convey");});
test("conveys -> convey", function() {deepEqual( Stem("conveys"), "convey");});
test("convict -> convict", function() {deepEqual( Stem("convict"), "convict");});
test("convicted -> convict", function() {deepEqual( Stem("convicted"), "convict");});
test("conviction -> convict", function() {deepEqual( Stem("conviction"), "convict");});
test("convictions -> convict", function() {deepEqual( Stem("convictions"), "convict");});
test("convicts -> convict", function() {deepEqual( Stem("convicts"), "convict");});
test("convince -> convinc", function() {deepEqual( Stem("convince"), "convinc");});
test("convinced -> convinc", function() {deepEqual( Stem("convinced"), "convinc");});
test("convinces -> convinc", function() {deepEqual( Stem("convinces"), "convinc");});
test("convincing -> convinc", function() {deepEqual( Stem("convincing"), "convinc");});
test("convivial -> convivi", function() {deepEqual( Stem("convivial"), "convivi");});
test("conviviality -> convivi", function() {deepEqual( Stem("conviviality"), "convivi");});
test("convolvulus -> convolvulus", function() {deepEqual( Stem("convolvulus"), "convolvulus");});
test("convulsed -> convuls", function() {deepEqual( Stem("convulsed"), "convuls");});
test("convulsion -> convuls", function() {deepEqual( Stem("convulsion"), "convuls");});
test("convulsions -> convuls", function() {deepEqual( Stem("convulsions"), "convuls");});
test("convulsive -> convuls", function() {deepEqual( Stem("convulsive"), "convuls");});
test("convulsively -> convuls", function() {deepEqual( Stem("convulsively"), "convuls");});
test("conwenient -> conweni", function() {deepEqual( Stem("conwenient"), "conweni");});
test("conwulsions -> conwuls", function() {deepEqual( Stem("conwulsions"), "conwuls");});
test("coodle -> coodl", function() {deepEqual( Stem("coodle"), "coodl");});
test("coodleites -> coodleit", function() {deepEqual( Stem("coodleites"), "coodleit");});
test("cooing -> coo", function() {deepEqual( Stem("cooing"), "coo");});
test("cook -> cook", function() {deepEqual( Stem("cook"), "cook");});
test("cooked -> cook", function() {deepEqual( Stem("cooked"), "cook");});
test("cookery -> cookeri", function() {deepEqual( Stem("cookery"), "cookeri");});
test("cooking -> cook", function() {deepEqual( Stem("cooking"), "cook");});
test("cookites -> cookit", function() {deepEqual( Stem("cookites"), "cookit");});
test("cooks -> cook", function() {deepEqual( Stem("cooks"), "cook");});
test("cookshop -> cookshop", function() {deepEqual( Stem("cookshop"), "cookshop");});
test("cool -> cool", function() {deepEqual( Stem("cool"), "cool");});
test("cooled -> cool", function() {deepEqual( Stem("cooled"), "cool");});
test("cooler -> cooler", function() {deepEqual( Stem("cooler"), "cooler");});
test("coolest -> coolest", function() {deepEqual( Stem("coolest"), "coolest");});
test("cooling -> cool", function() {deepEqual( Stem("cooling"), "cool");});
test("coolly -> coolli", function() {deepEqual( Stem("coolly"), "coolli");});
test("coolness -> cool", function() {deepEqual( Stem("coolness"), "cool");});
test("coom -> coom", function() {deepEqual( Stem("coom"), "coom");});
test("coomin -> coomin", function() {deepEqual( Stem("coomin"), "coomin");});
test("cooms -> coom", function() {deepEqual( Stem("cooms"), "coom");});
test("coop -> coop", function() {deepEqual( Stem("coop"), "coop");});
test("cooped -> coop", function() {deepEqual( Stem("cooped"), "coop");});
test("coorch -> coorch", function() {deepEqual( Stem("coorch"), "coorch");});
test("coot -> coot", function() {deepEqual( Stem("coot"), "coot");});
test("cope -> cope", function() {deepEqual( Stem("cope"), "cope");});
test("copeck -> copeck", function() {deepEqual( Stem("copeck"), "copeck");});
test("copecks -> copeck", function() {deepEqual( Stem("copecks"), "copeck");});
test("cophias -> cophia", function() {deepEqual( Stem("cophias"), "cophia");});
test("copiapo -> copiapo", function() {deepEqual( Stem("copiapo"), "copiapo");});
test("copied -> copi", function() {deepEqual( Stem("copied"), "copi");});
test("copies -> copi", function() {deepEqual( Stem("copies"), "copi");});
test("coping -> cope", function() {deepEqual( Stem("coping"), "cope");});
test("copious -> copious", function() {deepEqual( Stem("copious"), "copious");});
test("copiously -> copious", function() {deepEqual( Stem("copiously"), "copious");});
test("copper -> copper", function() {deepEqual( Stem("copper"), "copper");});
test("coppers -> copper", function() {deepEqual( Stem("coppers"), "copper");});
test("coppery -> copperi", function() {deepEqual( Stem("coppery"), "copperi");});
test("coppice -> coppic", function() {deepEqual( Stem("coppice"), "coppic");});
test("copse -> cops", function() {deepEqual( Stem("copse"), "cops");});
test("copy -> copi", function() {deepEqual( Stem("copy"), "copi");});
test("copying -> copi", function() {deepEqual( Stem("copying"), "copi");});
test("coquetry -> coquetri", function() {deepEqual( Stem("coquetry"), "coquetri");});
test("coquette -> coquett", function() {deepEqual( Stem("coquette"), "coquett");});
test("coquettish -> coquettish", function() {deepEqual( Stem("coquettish"), "coquettish");});
test("coquille -> coquill", function() {deepEqual( Stem("coquille"), "coquill");});
test("coquimbo -> coquimbo", function() {deepEqual( Stem("coquimbo"), "coquimbo");});
test("cora -> cora", function() {deepEqual( Stem("cora"), "cora");});
test("coral -> coral", function() {deepEqual( Stem("coral"), "coral");});
test("coralline -> corallin", function() {deepEqual( Stem("coralline"), "corallin");});
test("corallines -> corallin", function() {deepEqual( Stem("corallines"), "corallin");});
test("corals -> coral", function() {deepEqual( Stem("corals"), "coral");});
test("corcovado -> corcovado", function() {deepEqual( Stem("corcovado"), "corcovado");});
test("cord -> cord", function() {deepEqual( Stem("cord"), "cord");});
test("cordage -> cordag", function() {deepEqual( Stem("cordage"), "cordag");});
test("corded -> cord", function() {deepEqual( Stem("corded"), "cord");});
test("cordial -> cordial", function() {deepEqual( Stem("cordial"), "cordial");});
test("cordiality -> cordial", function() {deepEqual( Stem("cordiality"), "cordial");});
test("cordially -> cordial", function() {deepEqual( Stem("cordially"), "cordial");});
test("cordials -> cordial", function() {deepEqual( Stem("cordials"), "cordial");});
test("cordillera -> cordillera", function() {deepEqual( Stem("cordillera"), "cordillera");});
test("cords -> cord", function() {deepEqual( Stem("cords"), "cord");});
test("corduroy -> corduroy", function() {deepEqual( Stem("corduroy"), "corduroy");});
test("core -> core", function() {deepEqual( Stem("core"), "core");});
test("corfield -> corfield", function() {deepEqual( Stem("corfield"), "corfield");});
test("coriaceous -> coriac", function() {deepEqual( Stem("coriaceous"), "coriac");});
test("coriolanus -> coriolanus", function() {deepEqual( Stem("coriolanus"), "coriolanus");});
test("cork -> cork", function() {deepEqual( Stem("cork"), "cork");});
test("corks -> cork", function() {deepEqual( Stem("corks"), "cork");});
test("corkscrew -> corkscrew", function() {deepEqual( Stem("corkscrew"), "corkscrew");});
test("corkscrewed -> corkscrew", function() {deepEqual( Stem("corkscrewed"), "corkscrew");});
test("cormoran -> cormoran", function() {deepEqual( Stem("cormoran"), "cormoran");});
test("cormorant -> cormor", function() {deepEqual( Stem("cormorant"), "cormor");});
test("cormorants -> cormor", function() {deepEqual( Stem("cormorants"), "cormor");});
test("corn -> corn", function() {deepEqual( Stem("corn"), "corn");});
test("corned -> corn", function() {deepEqual( Stem("corned"), "corn");});
test("cornelia -> cornelia", function() {deepEqual( Stem("cornelia"), "cornelia");});
test("cornelian -> cornelian", function() {deepEqual( Stem("cornelian"), "cornelian");});
test("corner -> corner", function() {deepEqual( Stem("corner"), "corner");});
test("cornered -> corner", function() {deepEqual( Stem("cornered"), "corner");});
test("corners -> corner", function() {deepEqual( Stem("corners"), "corner");});
test("cornerstone -> cornerston", function() {deepEqual( Stem("cornerstone"), "cornerston");});
test("cornfield -> cornfield", function() {deepEqual( Stem("cornfield"), "cornfield");});
test("cornice -> cornic", function() {deepEqual( Stem("cornice"), "cornic");});
test("cornish -> cornish", function() {deepEqual( Stem("cornish"), "cornish");});
test("corns -> corn", function() {deepEqual( Stem("corns"), "corn");});
test("cornwall -> cornwal", function() {deepEqual( Stem("cornwall"), "cornwal");});
test("coronal -> coron", function() {deepEqual( Stem("coronal"), "coron");});
test("coroner -> coron", function() {deepEqual( Stem("coroner"), "coron");});
test("coroners -> coron", function() {deepEqual( Stem("coroners"), "coron");});
test("coronet -> coronet", function() {deepEqual( Stem("coronet"), "coronet");});
test("coronets -> coronet", function() {deepEqual( Stem("coronets"), "coronet");});
test("corporal -> corpor", function() {deepEqual( Stem("corporal"), "corpor");});
test("corporation -> corpor", function() {deepEqual( Stem("corporation"), "corpor");});
test("corporations -> corpor", function() {deepEqual( Stem("corporations"), "corpor");});
test("corporeal -> corpor", function() {deepEqual( Stem("corporeal"), "corpor");});
test("corps -> corp", function() {deepEqual( Stem("corps"), "corp");});
test("corpse -> corps", function() {deepEqual( Stem("corpse"), "corps");});
test("corpses -> corps", function() {deepEqual( Stem("corpses"), "corps");});
test("corpulence -> corpul", function() {deepEqual( Stem("corpulence"), "corpul");});
test("corpulent -> corpul", function() {deepEqual( Stem("corpulent"), "corpul");});
test("corpus -> corpus", function() {deepEqual( Stem("corpus"), "corpus");});
test("corral -> corral", function() {deepEqual( Stem("corral"), "corral");});
test("corrales -> corral", function() {deepEqual( Stem("corrales"), "corral");});
test("corrals -> corral", function() {deepEqual( Stem("corrals"), "corral");});
test("correct -> correct", function() {deepEqual( Stem("correct"), "correct");});
test("corrected -> correct", function() {deepEqual( Stem("corrected"), "correct");});
test("correcting -> correct", function() {deepEqual( Stem("correcting"), "correct");});
test("correction -> correct", function() {deepEqual( Stem("correction"), "correct");});
test("corrective -> correct", function() {deepEqual( Stem("corrective"), "correct");});
test("correctly -> correct", function() {deepEqual( Stem("correctly"), "correct");});
test("correctness -> correct", function() {deepEqual( Stem("correctness"), "correct");});
test("corrects -> correct", function() {deepEqual( Stem("corrects"), "correct");});
test("correndera -> correndera", function() {deepEqual( Stem("correndera"), "correndera");});
test("correspond -> correspond", function() {deepEqual( Stem("correspond"), "correspond");});
test("corresponded -> correspond", function() {deepEqual( Stem("corresponded"), "correspond");});
test("correspondence -> correspond", function() {deepEqual( Stem("correspondence"), "correspond");});
test("correspondent -> correspond", function() {deepEqual( Stem("correspondent"), "correspond");});
test("correspondents -> correspond", function() {deepEqual( Stem("correspondents"), "correspond");});
test("corresponding -> correspond", function() {deepEqual( Stem("corresponding"), "correspond");});
test("correspondingly -> correspond", function() {deepEqual( Stem("correspondingly"), "correspond");});
test("corridor -> corridor", function() {deepEqual( Stem("corridor"), "corridor");});
test("corrientes -> corrient", function() {deepEqual( Stem("corrientes"), "corrient");});
test("corrobery -> corroberi", function() {deepEqual( Stem("corrobery"), "corroberi");});
test("corroborate -> corrobor", function() {deepEqual( Stem("corroborate"), "corrobor");});
test("corroborated -> corrobor", function() {deepEqual( Stem("corroborated"), "corrobor");});
test("corroboration -> corrobor", function() {deepEqual( Stem("corroboration"), "corrobor");});
test("corroborative -> corrobor", function() {deepEqual( Stem("corroborative"), "corrobor");});
test("corroboratory -> corroboratori", function() {deepEqual( Stem("corroboratory"), "corroboratori");});
test("corroded -> corrod", function() {deepEqual( Stem("corroded"), "corrod");});
test("corroding -> corrod", function() {deepEqual( Stem("corroding"), "corrod");});
test("corrugated -> corrug", function() {deepEqual( Stem("corrugated"), "corrug");});
test("corrupt -> corrupt", function() {deepEqual( Stem("corrupt"), "corrupt");});
test("corrupted -> corrupt", function() {deepEqual( Stem("corrupted"), "corrupt");});
test("corrupting -> corrupt", function() {deepEqual( Stem("corrupting"), "corrupt");});
test("corruption -> corrupt", function() {deepEqual( Stem("corruption"), "corrupt");});
test("corrupts -> corrupt", function() {deepEqual( Stem("corrupts"), "corrupt");});
test("corse -> cors", function() {deepEqual( Stem("corse"), "cors");});
test("cortez -> cortez", function() {deepEqual( Stem("cortez"), "cortez");});
test("corunda -> corunda", function() {deepEqual( Stem("corunda"), "corunda");});
test("corynetes -> corynet", function() {deepEqual( Stem("corynetes"), "corynet");});
test("cos -> cos", function() {deepEqual( Stem("cos"), "cos");});
test("cosa -> cosa", function() {deepEqual( Stem("cosa"), "cosa");});
test("coseguina -> coseguina", function() {deepEqual( Stem("coseguina"), "coseguina");});
test("cosgrave -> cosgrav", function() {deepEqual( Stem("cosgrave"), "cosgrav");});
test("cosily -> cosili", function() {deepEqual( Stem("cosily"), "cosili");});
test("cosmopolitan -> cosmopolitan", function() {deepEqual( Stem("cosmopolitan"), "cosmopolitan");});
test("cost -> cost", function() {deepEqual( Stem("cost"), "cost");});
test("costal -> costal", function() {deepEqual( Stem("costal"), "costal");});
test("costermongers -> costermong", function() {deepEqual( Stem("costermongers"), "costermong");});
test("costlier -> costlier", function() {deepEqual( Stem("costlier"), "costlier");});
test("costliest -> costliest", function() {deepEqual( Stem("costliest"), "costliest");});
test("costly -> cost", function() {deepEqual( Stem("costly"), "cost");});
test("costs -> cost", function() {deepEqual( Stem("costs"), "cost");});
test("costume -> costum", function() {deepEqual( Stem("costume"), "costum");});
test("costumes -> costum", function() {deepEqual( Stem("costumes"), "costum");});
test("cosy -> cosi", function() {deepEqual( Stem("cosy"), "cosi");});
test("cot -> cot", function() {deepEqual( Stem("cot"), "cot");});
test("cote -> cote", function() {deepEqual( Stem("cote"), "cote");});
test("cottage -> cottag", function() {deepEqual( Stem("cottage"), "cottag");});
test("cottager -> cottag", function() {deepEqual( Stem("cottager"), "cottag");});
test("cottagers -> cottag", function() {deepEqual( Stem("cottagers"), "cottag");});
test("cottages -> cottag", function() {deepEqual( Stem("cottages"), "cottag");});
test("cotton -> cotton", function() {deepEqual( Stem("cotton"), "cotton");});
test("cottoned -> cotton", function() {deepEqual( Stem("cottoned"), "cotton");});
test("cottons -> cotton", function() {deepEqual( Stem("cottons"), "cotton");});
test("couch -> couch", function() {deepEqual( Stem("couch"), "couch");});
test("couched -> couch", function() {deepEqual( Stem("couched"), "couch");});
test("couches -> couch", function() {deepEqual( Stem("couches"), "couch");});
test("cough -> cough", function() {deepEqual( Stem("cough"), "cough");});
test("coughed -> cough", function() {deepEqual( Stem("coughed"), "cough");});
test("coughing -> cough", function() {deepEqual( Stem("coughing"), "cough");});
test("coughs -> cough", function() {deepEqual( Stem("coughs"), "cough");});
test("could -> could", function() {deepEqual( Stem("could"), "could");});
test("couldn -> couldn", function() {deepEqual( Stem("couldn"), "couldn");});
test("couldst -> couldst", function() {deepEqual( Stem("couldst"), "couldst");});
test("council -> council", function() {deepEqual( Stem("council"), "council");});
test("councillor -> councillor", function() {deepEqual( Stem("councillor"), "councillor");});
test("councillors -> councillor", function() {deepEqual( Stem("councillors"), "councillor");});
test("councils -> council", function() {deepEqual( Stem("councils"), "council");});
test("counsel -> counsel", function() {deepEqual( Stem("counsel"), "counsel");});
test("counselled -> counsel", function() {deepEqual( Stem("counselled"), "counsel");});
test("counsellor -> counsellor", function() {deepEqual( Stem("counsellor"), "counsellor");});
test("counsellors -> counsellor", function() {deepEqual( Stem("counsellors"), "counsellor");});
test("counsels -> counsel", function() {deepEqual( Stem("counsels"), "counsel");});
test("count -> count", function() {deepEqual( Stem("count"), "count");});
test("counted -> count", function() {deepEqual( Stem("counted"), "count");});
test("countenance -> counten", function() {deepEqual( Stem("countenance"), "counten");});
test("countenanced -> countenanc", function() {deepEqual( Stem("countenanced"), "countenanc");});
test("countenances -> counten", function() {deepEqual( Stem("countenances"), "counten");});
test("counter -> counter", function() {deepEqual( Stem("counter"), "counter");});
test("counteract -> counteract", function() {deepEqual( Stem("counteract"), "counteract");});
test("counteracted -> counteract", function() {deepEqual( Stem("counteracted"), "counteract");});
test("counterbalance -> counterbal", function() {deepEqual( Stem("counterbalance"), "counterbal");});
test("counterbalanced -> counterbalanc", function() {deepEqual( Stem("counterbalanced"), "counterbalanc");});
test("counterfeit -> counterfeit", function() {deepEqual( Stem("counterfeit"), "counterfeit");});
test("counterfeited -> counterfeit", function() {deepEqual( Stem("counterfeited"), "counterfeit");});
test("counterfeiting -> counterfeit", function() {deepEqual( Stem("counterfeiting"), "counterfeit");});
test("counterfeits -> counterfeit", function() {deepEqual( Stem("counterfeits"), "counterfeit");});
test("counterpane -> counterpan", function() {deepEqual( Stem("counterpane"), "counterpan");});
test("counterpart -> counterpart", function() {deepEqual( Stem("counterpart"), "counterpart");});
test("counterplot -> counterplot", function() {deepEqual( Stem("counterplot"), "counterplot");});
test("counterpoise -> counterpois", function() {deepEqual( Stem("counterpoise"), "counterpois");});
test("counters -> counter", function() {deepEqual( Stem("counters"), "counter");});
test("countess -> countess", function() {deepEqual( Stem("countess"), "countess");});
test("countesses -> countess", function() {deepEqual( Stem("countesses"), "countess");});
test("counties -> counti", function() {deepEqual( Stem("counties"), "counti");});
test("counting -> count", function() {deepEqual( Stem("counting"), "count");});
test("countless -> countless", function() {deepEqual( Stem("countless"), "countless");});
test("countree -> countre", function() {deepEqual( Stem("countree"), "countre");});
test("countries -> countri", function() {deepEqual( Stem("countries"), "countri");});
test("countrified -> countrifi", function() {deepEqual( Stem("countrified"), "countrifi");});
test("country -> countri", function() {deepEqual( Stem("country"), "countri");});
test("countryman -> countryman", function() {deepEqual( Stem("countryman"), "countryman");});
test("countrymen -> countrymen", function() {deepEqual( Stem("countrymen"), "countrymen");});
test("countryrmen -> countryrmen", function() {deepEqual( Stem("countryrmen"), "countryrmen");});
test("countrywomen -> countrywomen", function() {deepEqual( Stem("countrywomen"), "countrywomen");});
test("counts -> count", function() {deepEqual( Stem("counts"), "count");});
test("county -> counti", function() {deepEqual( Stem("county"), "counti");});
test("coup -> coup", function() {deepEqual( Stem("coup"), "coup");});
test("couple -> coupl", function() {deepEqual( Stem("couple"), "coupl");});
test("coupled -> coupl", function() {deepEqual( Stem("coupled"), "coupl");});
test("couples -> coupl", function() {deepEqual( Stem("couples"), "coupl");});
test("coupling -> coupl", function() {deepEqual( Stem("coupling"), "coupl");});
test("courage -> courag", function() {deepEqual( Stem("courage"), "courag");});
test("courageous -> courag", function() {deepEqual( Stem("courageous"), "courag");});
test("courageously -> courag", function() {deepEqual( Stem("courageously"), "courag");});
test("courcy -> courci", function() {deepEqual( Stem("courcy"), "courci");});
test("courcys -> courci", function() {deepEqual( Stem("courcys"), "courci");});
test("courier -> courier", function() {deepEqual( Stem("courier"), "courier");});
test("course -> cours", function() {deepEqual( Stem("course"), "cours");});
test("coursed -> cours", function() {deepEqual( Stem("coursed"), "cours");});
test("coursers -> courser", function() {deepEqual( Stem("coursers"), "courser");});
test("courses -> cours", function() {deepEqual( Stem("courses"), "cours");});
test("coursing -> cours", function() {deepEqual( Stem("coursing"), "cours");});
test("court -> court", function() {deepEqual( Stem("court"), "court");});
test("courted -> court", function() {deepEqual( Stem("courted"), "court");});
test("courteous -> courteous", function() {deepEqual( Stem("courteous"), "courteous");});
test("courteously -> courteous", function() {deepEqual( Stem("courteously"), "courteous");});
test("courtesies -> courtesi", function() {deepEqual( Stem("courtesies"), "courtesi");});
test("courtesy -> courtesi", function() {deepEqual( Stem("courtesy"), "courtesi");});
test("courtier -> courtier", function() {deepEqual( Stem("courtier"), "courtier");});
test("courtiers -> courtier", function() {deepEqual( Stem("courtiers"), "courtier");});
test("courting -> court", function() {deepEqual( Stem("courting"), "court");});
test("courtly -> court", function() {deepEqual( Stem("courtly"), "court");});
test("courts -> court", function() {deepEqual( Stem("courts"), "court");});
test("courtship -> courtship", function() {deepEqual( Stem("courtship"), "courtship");});
test("courtships -> courtship", function() {deepEqual( Stem("courtships"), "courtship");});
test("courtyard -> courtyard", function() {deepEqual( Stem("courtyard"), "courtyard");});
test("courtyards -> courtyard", function() {deepEqual( Stem("courtyards"), "courtyard");});
test("cousin -> cousin", function() {deepEqual( Stem("cousin"), "cousin");});
test("cousinly -> cousin", function() {deepEqual( Stem("cousinly"), "cousin");});
test("cousins -> cousin", function() {deepEqual( Stem("cousins"), "cousin");});
test("cousinship -> cousinship", function() {deepEqual( Stem("cousinship"), "cousinship");});
test("couthouy -> couthouy", function() {deepEqual( Stem("couthouy"), "couthouy");});
test("cove -> cove", function() {deepEqual( Stem("cove"), "cove");});
test("covenanted -> coven", function() {deepEqual( Stem("covenanted"), "coven");});
test("covent -> covent", function() {deepEqual( Stem("covent"), "covent");});
test("coventry -> coventri", function() {deepEqual( Stem("coventry"), "coventri");});
test("cover -> cover", function() {deepEqual( Stem("cover"), "cover");});
test("covered -> cover", function() {deepEqual( Stem("covered"), "cover");});
test("covering -> cover", function() {deepEqual( Stem("covering"), "cover");});
test("coverings -> cover", function() {deepEqual( Stem("coverings"), "cover");});
test("coverlet -> coverlet", function() {deepEqual( Stem("coverlet"), "coverlet");});
test("coverley -> coverley", function() {deepEqual( Stem("coverley"), "coverley");});
test("covers -> cover", function() {deepEqual( Stem("covers"), "cover");});
test("covert -> covert", function() {deepEqual( Stem("covert"), "covert");});
test("covertly -> covert", function() {deepEqual( Stem("covertly"), "covert");});
test("coverts -> covert", function() {deepEqual( Stem("coverts"), "covert");});
test("coverture -> covertur", function() {deepEqual( Stem("coverture"), "covertur");});
test("coves -> cove", function() {deepEqual( Stem("coves"), "cove");});
test("covet -> covet", function() {deepEqual( Stem("covet"), "covet");});
test("coveted -> covet", function() {deepEqual( Stem("coveted"), "covet");});
test("covetous -> covet", function() {deepEqual( Stem("covetous"), "covet");});
test("covetousness -> covet", function() {deepEqual( Stem("covetousness"), "covet");});
test("coveys -> covey", function() {deepEqual( Stem("coveys"), "covey");});
test("cow -> cow", function() {deepEqual( Stem("cow"), "cow");});
test("coward -> coward", function() {deepEqual( Stem("coward"), "coward");});
test("cowardice -> cowardic", function() {deepEqual( Stem("cowardice"), "cowardic");});
test("cowardly -> coward", function() {deepEqual( Stem("cowardly"), "coward");});
test("cowards -> coward", function() {deepEqual( Stem("cowards"), "coward");});
test("cowboy -> cowboy", function() {deepEqual( Stem("cowboy"), "cowboy");});
test("cowcumber -> cowcumb", function() {deepEqual( Stem("cowcumber"), "cowcumb");});
test("cowed -> cow", function() {deepEqual( Stem("cowed"), "cow");});
test("cower -> cower", function() {deepEqual( Stem("cower"), "cower");});
test("cowered -> cower", function() {deepEqual( Stem("cowered"), "cower");});
test("cowering -> cower", function() {deepEqual( Stem("cowering"), "cower");});
test("cowers -> cower", function() {deepEqual( Stem("cowers"), "cower");});
test("cowl -> cowl", function() {deepEqual( Stem("cowl"), "cowl");});
test("cowley -> cowley", function() {deepEqual( Stem("cowley"), "cowley");});
test("cows -> cow", function() {deepEqual( Stem("cows"), "cow");});
test("cowshed -> cowsh", function() {deepEqual( Stem("cowshed"), "cowsh");});
test("cowslip -> cowslip", function() {deepEqual( Stem("cowslip"), "cowslip");});
test("cowslips -> cowslip", function() {deepEqual( Stem("cowslips"), "cowslip");});
test("cox -> cox", function() {deepEqual( Stem("cox"), "cox");});
test("coxcomb -> coxcomb", function() {deepEqual( Stem("coxcomb"), "coxcomb");});
test("coxcombical -> coxcomb", function() {deepEqual( Stem("coxcombical"), "coxcomb");});
test("coxcombs -> coxcomb", function() {deepEqual( Stem("coxcombs"), "coxcomb");});
test("coxswain -> coxswain", function() {deepEqual( Stem("coxswain"), "coxswain");});
test("coy -> coy", function() {deepEqual( Stem("coy"), "coy");});
test("coyness -> coy", function() {deepEqual( Stem("coyness"), "coy");});
test("coypus -> coypus", function() {deepEqual( Stem("coypus"), "coypus");});
test("cozened -> cozen", function() {deepEqual( Stem("cozened"), "cozen");});
test("cozily -> cozili", function() {deepEqual( Stem("cozily"), "cozili");});
test("crab -> crab", function() {deepEqual( Stem("crab"), "crab");});
test("crabbe -> crabb", function() {deepEqual( Stem("crabbe"), "crabb");});
test("crabbed -> crab", function() {deepEqual( Stem("crabbed"), "crab");});
test("crabberies -> crabberi", function() {deepEqual( Stem("crabberies"), "crabberi");});
test("crabs -> crab", function() {deepEqual( Stem("crabs"), "crab");});
test("crack -> crack", function() {deepEqual( Stem("crack"), "crack");});
test("cracked -> crack", function() {deepEqual( Stem("cracked"), "crack");});
test("cracking -> crack", function() {deepEqual( Stem("cracking"), "crack");});
test("crackle -> crackl", function() {deepEqual( Stem("crackle"), "crackl");});
test("crackled -> crackl", function() {deepEqual( Stem("crackled"), "crackl");});
test("crackling -> crackl", function() {deepEqual( Stem("crackling"), "crackl");});
test("cracks -> crack", function() {deepEqual( Stem("cracks"), "crack");});
test("cradle -> cradl", function() {deepEqual( Stem("cradle"), "cradl");});
test("cradles -> cradl", function() {deepEqual( Stem("cradles"), "cradl");});
test("craft -> craft", function() {deepEqual( Stem("craft"), "craft");});
test("craftier -> craftier", function() {deepEqual( Stem("craftier"), "craftier");});
test("craftiest -> craftiest", function() {deepEqual( Stem("craftiest"), "craftiest");});
test("crafts -> craft", function() {deepEqual( Stem("crafts"), "craft");});
test("crafty -> crafti", function() {deepEqual( Stem("crafty"), "crafti");});
test("crags -> crag", function() {deepEqual( Stem("crags"), "crag");});
test("cram -> cram", function() {deepEqual( Stem("cram"), "cram");});
test("cramble -> crambl", function() {deepEqual( Stem("cramble"), "crambl");});
test("crammed -> cram", function() {deepEqual( Stem("crammed"), "cram");});
test("cramming -> cram", function() {deepEqual( Stem("cramming"), "cram");});
test("cramp -> cramp", function() {deepEqual( Stem("cramp"), "cramp");});
test("cramped -> cramp", function() {deepEqual( Stem("cramped"), "cramp");});
test("cramping -> cramp", function() {deepEqual( Stem("cramping"), "cramp");});
test("cranberry -> cranberri", function() {deepEqual( Stem("cranberry"), "cranberri");});
test("crancrivora -> crancrivora", function() {deepEqual( Stem("crancrivora"), "crancrivora");});
test("cranes -> crane", function() {deepEqual( Stem("cranes"), "crane");});
test("craning -> crane", function() {deepEqual( Stem("craning"), "crane");});
test("cranks -> crank", function() {deepEqual( Stem("cranks"), "crank");});
test("crannies -> cranni", function() {deepEqual( Stem("crannies"), "cranni");});
test("crape -> crape", function() {deepEqual( Stem("crape"), "crape");});
test("crash -> crash", function() {deepEqual( Stem("crash"), "crash");});
test("crashed -> crash", function() {deepEqual( Stem("crashed"), "crash");});
test("crashing -> crash", function() {deepEqual( Stem("crashing"), "crash");});
test("crater -> crater", function() {deepEqual( Stem("crater"), "crater");});
test("crateriform -> crateriform", function() {deepEqual( Stem("crateriform"), "crateriform");});
test("craters -> crater", function() {deepEqual( Stem("craters"), "crater");});
test("cravat -> cravat", function() {deepEqual( Stem("cravat"), "cravat");});
test("cravats -> cravat", function() {deepEqual( Stem("cravats"), "cravat");});
test("crave -> crave", function() {deepEqual( Stem("crave"), "crave");});
test("craved -> crave", function() {deepEqual( Stem("craved"), "crave");});
test("craven -> craven", function() {deepEqual( Stem("craven"), "craven");});
test("craving -> crave", function() {deepEqual( Stem("craving"), "crave");});
test("craw -> craw", function() {deepEqual( Stem("craw"), "craw");});
test("crawl -> crawl", function() {deepEqual( Stem("crawl"), "crawl");});
test("crawled -> crawl", function() {deepEqual( Stem("crawled"), "crawl");});
test("crawling -> crawl", function() {deepEqual( Stem("crawling"), "crawl");});
test("crawls -> crawl", function() {deepEqual( Stem("crawls"), "crawl");});
test("craws -> craw", function() {deepEqual( Stem("craws"), "craw");});
test("cray -> cray", function() {deepEqual( Stem("cray"), "cray");});
test("crayons -> crayon", function() {deepEqual( Stem("crayons"), "crayon");});
test("craze -> craze", function() {deepEqual( Stem("craze"), "craze");});
test("crazed -> craze", function() {deepEqual( Stem("crazed"), "craze");});
test("crazy -> crazi", function() {deepEqual( Stem("crazy"), "crazi");});
test("creak -> creak", function() {deepEqual( Stem("creak"), "creak");});
test("creaked -> creak", function() {deepEqual( Stem("creaked"), "creak");});
test("creaking -> creak", function() {deepEqual( Stem("creaking"), "creak");});
test("cream -> cream", function() {deepEqual( Stem("cream"), "cream");});
test("crease -> creas", function() {deepEqual( Stem("crease"), "creas");});
test("creases -> creas", function() {deepEqual( Stem("creases"), "creas");});
test("creasing -> creas", function() {deepEqual( Stem("creasing"), "creas");});
test("create -> creat", function() {deepEqual( Stem("create"), "creat");});
test("created -> creat", function() {deepEqual( Stem("created"), "creat");});
test("creating -> creat", function() {deepEqual( Stem("creating"), "creat");});
test("creation -> creation", function() {deepEqual( Stem("creation"), "creation");});
test("creations -> creation", function() {deepEqual( Stem("creations"), "creation");});
test("creative -> creativ", function() {deepEqual( Stem("creative"), "creativ");});
test("creator -> creator", function() {deepEqual( Stem("creator"), "creator");});
test("creature -> creatur", function() {deepEqual( Stem("creature"), "creatur");});
test("creatures -> creatur", function() {deepEqual( Stem("creatures"), "creatur");});
test("credence -> credenc", function() {deepEqual( Stem("credence"), "credenc");});
test("credentials -> credenti", function() {deepEqual( Stem("credentials"), "credenti");});
test("credibility -> credibl", function() {deepEqual( Stem("credibility"), "credibl");});
test("credible -> credibl", function() {deepEqual( Stem("credible"), "credibl");});
test("credibly -> credibl", function() {deepEqual( Stem("credibly"), "credibl");});
test("credit -> credit", function() {deepEqual( Stem("credit"), "credit");});
test("creditable -> credit", function() {deepEqual( Stem("creditable"), "credit");});
test("creditably -> credit", function() {deepEqual( Stem("creditably"), "credit");});
test("credited -> credit", function() {deepEqual( Stem("credited"), "credit");});
test("crediting -> credit", function() {deepEqual( Stem("crediting"), "credit");});
test("creditor -> creditor", function() {deepEqual( Stem("creditor"), "creditor");});
test("creditors -> creditor", function() {deepEqual( Stem("creditors"), "creditor");});
test("credulity -> credul", function() {deepEqual( Stem("credulity"), "credul");});
test("credulous -> credul", function() {deepEqual( Stem("credulous"), "credul");});
test("cree -> cree", function() {deepEqual( Stem("cree"), "cree");});
test("creed -> creed", function() {deepEqual( Stem("creed"), "creed");});
test("creek -> creek", function() {deepEqual( Stem("creek"), "creek");});
test("creeks -> creek", function() {deepEqual( Stem("creeks"), "creek");});
test("creep -> creep", function() {deepEqual( Stem("creep"), "creep");});
test("creeper -> creeper", function() {deepEqual( Stem("creeper"), "creeper");});
test("creepers -> creeper", function() {deepEqual( Stem("creepers"), "creeper");});
test("creeping -> creep", function() {deepEqual( Stem("creeping"), "creep");});
test("creeps -> creep", function() {deepEqual( Stem("creeps"), "creep");});
test("creetur -> creetur", function() {deepEqual( Stem("creetur"), "creetur");});
test("creeturs -> creetur", function() {deepEqual( Stem("creeturs"), "creetur");});
test("creevy -> creevi", function() {deepEqual( Stem("creevy"), "creevi");});
test("crepitans -> crepitan", function() {deepEqual( Stem("crepitans"), "crepitan");});
test("crept -> crept", function() {deepEqual( Stem("crept"), "crept");});
test("crescent -> crescent", function() {deepEqual( Stem("crescent"), "crescent");});
test("crest -> crest", function() {deepEqual( Stem("crest"), "crest");});
test("crested -> crest", function() {deepEqual( Stem("crested"), "crest");});
test("crestfallen -> crestfallen", function() {deepEqual( Stem("crestfallen"), "crestfallen");});
test("crests -> crest", function() {deepEqual( Stem("crests"), "crest");});
test("crevez -> crevez", function() {deepEqual( Stem("crevez"), "crevez");});
test("crevice -> crevic", function() {deepEqual( Stem("crevice"), "crevic");});
test("crevices -> crevic", function() {deepEqual( Stem("crevices"), "crevic");});
test("crew -> crew", function() {deepEqual( Stem("crew"), "crew");});
test("crib -> crib", function() {deepEqual( Stem("crib"), "crib");});
test("cribs -> crib", function() {deepEqual( Stem("cribs"), "crib");});
test("crichton -> crichton", function() {deepEqual( Stem("crichton"), "crichton");});
test("cricket -> cricket", function() {deepEqual( Stem("cricket"), "cricket");});
test("crickets -> cricket", function() {deepEqual( Stem("crickets"), "cricket");});
test("cried -> cri", function() {deepEqual( Stem("cried"), "cri");});
test("crier -> crier", function() {deepEqual( Stem("crier"), "crier");});
test("criers -> crier", function() {deepEqual( Stem("criers"), "crier");});
test("cries -> cri", function() {deepEqual( Stem("cries"), "cri");});
test("crime -> crime", function() {deepEqual( Stem("crime"), "crime");});
test("crimes -> crime", function() {deepEqual( Stem("crimes"), "crime");});
test("criminal -> crimin", function() {deepEqual( Stem("criminal"), "crimin");});
test("criminality -> crimin", function() {deepEqual( Stem("criminality"), "crimin");});
test("criminals -> crimin", function() {deepEqual( Stem("criminals"), "crimin");});
test("criminate -> crimin", function() {deepEqual( Stem("criminate"), "crimin");});
test("criminations -> crimin", function() {deepEqual( Stem("criminations"), "crimin");});
test("crimson -> crimson", function() {deepEqual( Stem("crimson"), "crimson");});
test("crimsoned -> crimson", function() {deepEqual( Stem("crimsoned"), "crimson");});
test("cringe -> cring", function() {deepEqual( Stem("cringe"), "cring");});
test("cringing -> cring", function() {deepEqual( Stem("cringing"), "cring");});
test("cringingly -> cring", function() {deepEqual( Stem("cringingly"), "cring");});
test("crinoline -> crinolin", function() {deepEqual( Stem("crinoline"), "crinolin");});
test("cripple -> crippl", function() {deepEqual( Stem("cripple"), "crippl");});
test("crippled -> crippl", function() {deepEqual( Stem("crippled"), "crippl");});
test("crippler -> crippler", function() {deepEqual( Stem("crippler"), "crippler");});
test("crisia -> crisia", function() {deepEqual( Stem("crisia"), "crisia");});
test("crisis -> crisi", function() {deepEqual( Stem("crisis"), "crisi");});
test("crisp -> crisp", function() {deepEqual( Stem("crisp"), "crisp");});
test("cristal -> cristal", function() {deepEqual( Stem("cristal"), "cristal");});
test("cristatus -> cristatus", function() {deepEqual( Stem("cristatus"), "cristatus");});
test("cristiandad -> cristiandad", function() {deepEqual( Stem("cristiandad"), "cristiandad");});
test("cristianos -> cristiano", function() {deepEqual( Stem("cristianos"), "cristiano");});
test("criterion -> criterion", function() {deepEqual( Stem("criterion"), "criterion");});
test("critic -> critic", function() {deepEqual( Stem("critic"), "critic");});
test("critical -> critic", function() {deepEqual( Stem("critical"), "critic");});
test("criticise -> criticis", function() {deepEqual( Stem("criticise"), "criticis");});
test("criticised -> criticis", function() {deepEqual( Stem("criticised"), "criticis");});
test("criticism -> critic", function() {deepEqual( Stem("criticism"), "critic");});
test("criticisms -> critic", function() {deepEqual( Stem("criticisms"), "critic");});
test("criticize -> critic", function() {deepEqual( Stem("criticize"), "critic");});
test("criticizing -> critic", function() {deepEqual( Stem("criticizing"), "critic");});
test("critics -> critic", function() {deepEqual( Stem("critics"), "critic");});
test("critique -> critiqu", function() {deepEqual( Stem("critique"), "critiqu");});
test("critturs -> crittur", function() {deepEqual( Stem("critturs"), "crittur");});
test("croak -> croak", function() {deepEqual( Stem("croak"), "croak");});
test("croaked -> croak", function() {deepEqual( Stem("croaked"), "croak");});
test("croaking -> croak", function() {deepEqual( Stem("croaking"), "croak");});
test("croaks -> croak", function() {deepEqual( Stem("croaks"), "croak");});
test("crockery -> crockeri", function() {deepEqual( Stem("crockery"), "crockeri");});
test("crockford -> crockford", function() {deepEqual( Stem("crockford"), "crockford");});
test("crocking -> crock", function() {deepEqual( Stem("crocking"), "crock");});
test("crocodile -> crocodil", function() {deepEqual( Stem("crocodile"), "crocodil");});
test("crocodiles -> crocodil", function() {deepEqual( Stem("crocodiles"), "crocodil");});
test("croesus -> croesus", function() {deepEqual( Stem("croesus"), "croesus");});
test("crois -> croi", function() {deepEqual( Stem("crois"), "croi");});
test("crook -> crook", function() {deepEqual( Stem("crook"), "crook");});
test("crooked -> crook", function() {deepEqual( Stem("crooked"), "crook");});
test("crookedly -> crook", function() {deepEqual( Stem("crookedly"), "crook");});
test("crooks -> crook", function() {deepEqual( Stem("crooks"), "crook");});
test("crop -> crop", function() {deepEqual( Stem("crop"), "crop");});
test("cropley -> cropley", function() {deepEqual( Stem("cropley"), "cropley");});
test("crops -> crop", function() {deepEqual( Stem("crops"), "crop");});
test("cros -> cros", function() {deepEqual( Stem("cros"), "cros");});
test("cross -> cross", function() {deepEqual( Stem("cross"), "cross");});
test("crosse -> cross", function() {deepEqual( Stem("crosse"), "cross");});
test("crossed -> cross", function() {deepEqual( Stem("crossed"), "cross");});
test("crosses -> cross", function() {deepEqual( Stem("crosses"), "cross");});
test("crossgrained -> crossgrain", function() {deepEqual( Stem("crossgrained"), "crossgrain");});
test("crossin -> crossin", function() {deepEqual( Stem("crossin"), "crossin");});
test("crossing -> cross", function() {deepEqual( Stem("crossing"), "cross");});
test("crossings -> cross", function() {deepEqual( Stem("crossings"), "cross");});
test("crossly -> crossli", function() {deepEqual( Stem("crossly"), "crossli");});
test("crost -> crost", function() {deepEqual( Stem("crost"), "crost");});
test("crotchet -> crotchet", function() {deepEqual( Stem("crotchet"), "crotchet");});
test("crotchets -> crotchet", function() {deepEqual( Stem("crotchets"), "crotchet");});
test("crouched -> crouch", function() {deepEqual( Stem("crouched"), "crouch");});
test("crouches -> crouch", function() {deepEqual( Stem("crouches"), "crouch");});
test("crouching -> crouch", function() {deepEqual( Stem("crouching"), "crouch");});
test("croup -> croup", function() {deepEqual( Stem("croup"), "croup");});
test("crow -> crow", function() {deepEqual( Stem("crow"), "crow");});
test("crowbar -> crowbar", function() {deepEqual( Stem("crowbar"), "crowbar");});
test("crowd -> crowd", function() {deepEqual( Stem("crowd"), "crowd");});
test("crowded -> crowd", function() {deepEqual( Stem("crowded"), "crowd");});
test("crowding -> crowd", function() {deepEqual( Stem("crowding"), "crowd");});
test("crowds -> crowd", function() {deepEqual( Stem("crowds"), "crowd");});
test("crowed -> crow", function() {deepEqual( Stem("crowed"), "crow");});
test("crowin -> crowin", function() {deepEqual( Stem("crowin"), "crowin");});
test("crowing -> crow", function() {deepEqual( Stem("crowing"), "crow");});
test("crowl -> crowl", function() {deepEqual( Stem("crowl"), "crowl");});
test("crown -> crown", function() {deepEqual( Stem("crown"), "crown");});
test("crowned -> crown", function() {deepEqual( Stem("crowned"), "crown");});
test("crowning -> crown", function() {deepEqual( Stem("crowning"), "crown");});
test("crowns -> crown", function() {deepEqual( Stem("crowns"), "crown");});
test("crowquill -> crowquil", function() {deepEqual( Stem("crowquill"), "crowquil");});
test("crows -> crow", function() {deepEqual( Stem("crows"), "crow");});
test("crucified -> crucifi", function() {deepEqual( Stem("crucified"), "crucifi");});
test("crucify -> crucifi", function() {deepEqual( Stem("crucify"), "crucifi");});
test("crucifying -> crucifi", function() {deepEqual( Stem("crucifying"), "crucifi");});
test("crude -> crude", function() {deepEqual( Stem("crude"), "crude");});
test("crudely -> crude", function() {deepEqual( Stem("crudely"), "crude");});
test("crudest -> crudest", function() {deepEqual( Stem("crudest"), "crudest");});
test("cruel -> cruel", function() {deepEqual( Stem("cruel"), "cruel");});
test("cruellest -> cruellest", function() {deepEqual( Stem("cruellest"), "cruellest");});
test("cruelly -> cruelli", function() {deepEqual( Stem("cruelly"), "cruelli");});
test("cruelties -> cruelti", function() {deepEqual( Stem("cruelties"), "cruelti");});
test("cruelty -> cruelti", function() {deepEqual( Stem("cruelty"), "cruelti");});
test("cruenta -> cruenta", function() {deepEqual( Stem("cruenta"), "cruenta");});
test("cruet -> cruet", function() {deepEqual( Stem("cruet"), "cruet");});
test("cruise -> cruis", function() {deepEqual( Stem("cruise"), "cruis");});
test("cruises -> cruis", function() {deepEqual( Stem("cruises"), "cruis");});
test("crumb -> crumb", function() {deepEqual( Stem("crumb"), "crumb");});
test("crumber -> crumber", function() {deepEqual( Stem("crumber"), "crumber");});
test("crumble -> crumbl", function() {deepEqual( Stem("crumble"), "crumbl");});
test("crumbled -> crumbl", function() {deepEqual( Stem("crumbled"), "crumbl");});
test("crumbling -> crumbl", function() {deepEqual( Stem("crumbling"), "crumbl");});
test("crumbs -> crumb", function() {deepEqual( Stem("crumbs"), "crumb");});
test("crumlinwallinwer -> crumlinwallinw", function() {deepEqual( Stem("crumlinwallinwer"), "crumlinwallinw");});
test("crummles -> crumml", function() {deepEqual( Stem("crummles"), "crumml");});
test("crummleses -> crummles", function() {deepEqual( Stem("crummleses"), "crummles");});
test("crumpet -> crumpet", function() {deepEqual( Stem("crumpet"), "crumpet");});
test("crumpets -> crumpet", function() {deepEqual( Stem("crumpets"), "crumpet");});
test("crumpled -> crumpl", function() {deepEqual( Stem("crumpled"), "crumpl");});
test("crumpling -> crumpl", function() {deepEqual( Stem("crumpling"), "crumpl");});
test("crumpy -> crumpi", function() {deepEqual( Stem("crumpy"), "crumpi");});
test("crupper -> crupper", function() {deepEqual( Stem("crupper"), "crupper");});
test("crusade -> crusad", function() {deepEqual( Stem("crusade"), "crusad");});
test("crusader -> crusad", function() {deepEqual( Stem("crusader"), "crusad");});
test("crusaders -> crusad", function() {deepEqual( Stem("crusaders"), "crusad");});
test("crusades -> crusad", function() {deepEqual( Stem("crusades"), "crusad");});
test("crusading -> crusad", function() {deepEqual( Stem("crusading"), "crusad");});
test("crush -> crush", function() {deepEqual( Stem("crush"), "crush");});
test("crushed -> crush", function() {deepEqual( Stem("crushed"), "crush");});
test("crushes -> crush", function() {deepEqual( Stem("crushes"), "crush");});
test("crushing -> crush", function() {deepEqual( Stem("crushing"), "crush");});
test("crusoe -> cruso", function() {deepEqual( Stem("crusoe"), "cruso");});
test("crust -> crust", function() {deepEqual( Stem("crust"), "crust");});
test("crustacea -> crustacea", function() {deepEqual( Stem("crustacea"), "crustacea");});
test("crustaceous -> crustac", function() {deepEqual( Stem("crustaceous"), "crustac");});
test("crusts -> crust", function() {deepEqual( Stem("crusts"), "crust");});
test("crusty -> crusti", function() {deepEqual( Stem("crusty"), "crusti");});
test("crutches -> crutch", function() {deepEqual( Stem("crutches"), "crutch");});
test("cruz -> cruz", function() {deepEqual( Stem("cruz"), "cruz");});
test("cry -> cri", function() {deepEqual( Stem("cry"), "cri");});
test("crying -> cri", function() {deepEqual( Stem("crying"), "cri");});
test("crypt -> crypt", function() {deepEqual( Stem("crypt"), "crypt");});
test("cryptogamic -> cryptogam", function() {deepEqual( Stem("cryptogamic"), "cryptogam");});
test("crystal -> crystal", function() {deepEqual( Stem("crystal"), "crystal");});
test("crystalline -> crystallin", function() {deepEqual( Stem("crystalline"), "crystallin");});
test("crystallization -> crystal", function() {deepEqual( Stem("crystallization"), "crystal");});
test("crystallized -> crystal", function() {deepEqual( Stem("crystallized"), "crystal");});
test("crystals -> crystal", function() {deepEqual( Stem("crystals"), "crystal");});
test("crystial -> crystial", function() {deepEqual( Stem("crystial"), "crystial");});
test("ct -> ct", function() {deepEqual( Stem("ct"), "ct");});
test("ctenomys -> ctenomi", function() {deepEqual( Stem("ctenomys"), "ctenomi");});
test("cu -> cu", function() {deepEqual( Stem("cu"), "cu");});
test("cubes -> cube", function() {deepEqual( Stem("cubes"), "cube");});
test("cubic -> cubic", function() {deepEqual( Stem("cubic"), "cubic");});
test("cubs -> cub", function() {deepEqual( Stem("cubs"), "cub");});
test("cucao -> cucao", function() {deepEqual( Stem("cucao"), "cucao");});
test("cuchilla -> cuchilla", function() {deepEqual( Stem("cuchilla"), "cuchilla");});
test("cuckoo -> cuckoo", function() {deepEqual( Stem("cuckoo"), "cuckoo");});
test("cuckoos -> cuckoo", function() {deepEqual( Stem("cuckoos"), "cuckoo");});
test("cucumber -> cucumb", function() {deepEqual( Stem("cucumber"), "cucumb");});
test("cucumbers -> cucumb", function() {deepEqual( Stem("cucumbers"), "cucumb");});
test("cudgel -> cudgel", function() {deepEqual( Stem("cudgel"), "cudgel");});
test("cudgelled -> cudgel", function() {deepEqual( Stem("cudgelled"), "cudgel");});
test("cudgels -> cudgel", function() {deepEqual( Stem("cudgels"), "cudgel");});
test("cudico -> cudico", function() {deepEqual( Stem("cudico"), "cudico");});
test("cue -> cue", function() {deepEqual( Stem("cue"), "cue");});
test("cuentas -> cuenta", function() {deepEqual( Stem("cuentas"), "cuenta");});
test("cuero -> cuero", function() {deepEqual( Stem("cuero"), "cuero");});
test("cues -> cue", function() {deepEqual( Stem("cues"), "cue");});
test("cueva -> cueva", function() {deepEqual( Stem("cueva"), "cueva");});
test("cuff -> cuff", function() {deepEqual( Stem("cuff"), "cuff");});
test("cuffs -> cuff", function() {deepEqual( Stem("cuffs"), "cuff");});
test("cuffy -> cuffi", function() {deepEqual( Stem("cuffy"), "cuffi");});
test("cufre -> cufr", function() {deepEqual( Stem("cufre"), "cufr");});
test("cul -> cul", function() {deepEqual( Stem("cul"), "cul");});
test("culpability -> culpabl", function() {deepEqual( Stem("culpability"), "culpabl");});
test("culpeu -> culpeu", function() {deepEqual( Stem("culpeu"), "culpeu");});
test("culprit -> culprit", function() {deepEqual( Stem("culprit"), "culprit");});
test("cultivate -> cultiv", function() {deepEqual( Stem("cultivate"), "cultiv");});
test("cultivated -> cultiv", function() {deepEqual( Stem("cultivated"), "cultiv");});
test("cultivating -> cultiv", function() {deepEqual( Stem("cultivating"), "cultiv");});
test("cultivation -> cultiv", function() {deepEqual( Stem("cultivation"), "cultiv");});
test("culture -> cultur", function() {deepEqual( Stem("culture"), "cultur");});
test("culver -> culver", function() {deepEqual( Stem("culver"), "culver");});
test("cum -> cum", function() {deepEqual( Stem("cum"), "cum");});
test("cumber -> cumber", function() {deepEqual( Stem("cumber"), "cumber");});
test("cumberland -> cumberland", function() {deepEqual( Stem("cumberland"), "cumberland");});
test("cumbre -> cumbr", function() {deepEqual( Stem("cumbre"), "cumbr");});
test("cumbrously -> cumbrous", function() {deepEqual( Stem("cumbrously"), "cumbrous");});
test("cumfbler -> cumfbler", function() {deepEqual( Stem("cumfbler"), "cumfbler");});
test("cumin -> cumin", function() {deepEqual( Stem("cumin"), "cumin");});
test("cuming -> cume", function() {deepEqual( Stem("cuming"), "cume");});
test("cummin -> cummin", function() {deepEqual( Stem("cummin"), "cummin");});
test("cumnor -> cumnor", function() {deepEqual( Stem("cumnor"), "cumnor");});
test("cums -> cum", function() {deepEqual( Stem("cums"), "cum");});
test("cumuli -> cumuli", function() {deepEqual( Stem("cumuli"), "cumuli");});
test("cunicularia -> cunicularia", function() {deepEqual( Stem("cunicularia"), "cunicularia");});
test("cunicularius -> cunicularius", function() {deepEqual( Stem("cunicularius"), "cunicularius");});
test("cunning -> cun", function() {deepEqual( Stem("cunning"), "cun");});
test("cunningest -> cunningest", function() {deepEqual( Stem("cunningest"), "cunningest");});
test("cunningly -> cun", function() {deepEqual( Stem("cunningly"), "cun");});
test("cup -> cup", function() {deepEqual( Stem("cup"), "cup");});
test("cupboard -> cupboard", function() {deepEqual( Stem("cupboard"), "cupboard");});
test("cupboards -> cupboard", function() {deepEqual( Stem("cupboards"), "cupboard");});
test("cupid -> cupid", function() {deepEqual( Stem("cupid"), "cupid");});
test("cupidity -> cupid", function() {deepEqual( Stem("cupidity"), "cupid");});
test("cupids -> cupid", function() {deepEqual( Stem("cupids"), "cupid");});
test("cupola -> cupola", function() {deepEqual( Stem("cupola"), "cupola");});
test("cups -> cup", function() {deepEqual( Stem("cups"), "cup");});
test("cur -> cur", function() {deepEqual( Stem("cur"), "cur");});
test("cura -> cura", function() {deepEqual( Stem("cura"), "cura");});
test("curacy -> curaci", function() {deepEqual( Stem("curacy"), "curaci");});
test("curate -> curat", function() {deepEqual( Stem("curate"), "curat");});
test("curb -> curb", function() {deepEqual( Stem("curb"), "curb");});
test("curbed -> curb", function() {deepEqual( Stem("curbed"), "curb");});
test("curdle -> curdl", function() {deepEqual( Stem("curdle"), "curdl");});
test("curds -> curd", function() {deepEqual( Stem("curds"), "curd");});
test("cure -> cure", function() {deepEqual( Stem("cure"), "cure");});
test("cured -> cure", function() {deepEqual( Stem("cured"), "cure");});
test("cures -> cure", function() {deepEqual( Stem("cures"), "cure");});
test("curing -> cure", function() {deepEqual( Stem("curing"), "cure");});
test("curiosities -> curios", function() {deepEqual( Stem("curiosities"), "curios");});
test("curiosity -> curios", function() {deepEqual( Stem("curiosity"), "curios");});
test("curious -> curious", function() {deepEqual( Stem("curious"), "curious");});
test("curiously -> curious", function() {deepEqual( Stem("curiously"), "curious");});
test("curl -> curl", function() {deepEqual( Stem("curl"), "curl");});
test("curled -> curl", function() {deepEqual( Stem("curled"), "curl");});
test("curlew -> curlew", function() {deepEqual( Stem("curlew"), "curlew");});
test("curling -> curl", function() {deepEqual( Stem("curling"), "curl");});
test("curlings -> curl", function() {deepEqual( Stem("curlings"), "curl");});
test("curls -> curl", function() {deepEqual( Stem("curls"), "curl");});
test("curly -> cur", function() {deepEqual( Stem("curly"), "cur");});
test("curmudgeon -> curmudgeon", function() {deepEqual( Stem("curmudgeon"), "curmudgeon");});
test("curragh -> curragh", function() {deepEqual( Stem("curragh"), "curragh");});
test("currant -> currant", function() {deepEqual( Stem("currant"), "currant");});
test("currants -> currant", function() {deepEqual( Stem("currants"), "currant");});
test("currency -> currenc", function() {deepEqual( Stem("currency"), "currenc");});
test("current -> current", function() {deepEqual( Stem("current"), "current");});
test("currently -> current", function() {deepEqual( Stem("currently"), "current");});
test("currents -> current", function() {deepEqual( Stem("currents"), "current");});
test("curricle -> curricl", function() {deepEqual( Stem("curricle"), "curricl");});
test("curries -> curri", function() {deepEqual( Stem("curries"), "curri");});
test("curry -> curri", function() {deepEqual( Stem("curry"), "curri");});
test("curs -> cur", function() {deepEqual( Stem("curs"), "cur");});
test("curse -> curs", function() {deepEqual( Stem("curse"), "curs");});
test("cursed -> curs", function() {deepEqual( Stem("cursed"), "curs");});
test("curses -> curs", function() {deepEqual( Stem("curses"), "curs");});
test("cursing -> curs", function() {deepEqual( Stem("cursing"), "curs");});
test("cursitor -> cursitor", function() {deepEqual( Stem("cursitor"), "cursitor");});
test("cursory -> cursori", function() {deepEqual( Stem("cursory"), "cursori");});
test("curt -> curt", function() {deepEqual( Stem("curt"), "curt");});
test("curtain -> curtain", function() {deepEqual( Stem("curtain"), "curtain");});
test("curtained -> curtain", function() {deepEqual( Stem("curtained"), "curtain");});
test("curtaining -> curtain", function() {deepEqual( Stem("curtaining"), "curtain");});
test("curtains -> curtain", function() {deepEqual( Stem("curtains"), "curtain");});
test("curtness -> curt", function() {deepEqual( Stem("curtness"), "curt");});
test("curtsey -> curtsey", function() {deepEqual( Stem("curtsey"), "curtsey");});
test("curtseyed -> curtsey", function() {deepEqual( Stem("curtseyed"), "curtsey");});
test("curtseying -> curtsey", function() {deepEqual( Stem("curtseying"), "curtsey");});
test("curtseys -> curtsey", function() {deepEqual( Stem("curtseys"), "curtsey");});
test("curtsied -> curtsi", function() {deepEqual( Stem("curtsied"), "curtsi");});
test("curtsy -> curtsi", function() {deepEqual( Stem("curtsy"), "curtsi");});
test("curtsying -> curtsi", function() {deepEqual( Stem("curtsying"), "curtsi");});
test("curtsys -> curtsi", function() {deepEqual( Stem("curtsys"), "curtsi");});
test("curvature -> curvatur", function() {deepEqual( Stem("curvature"), "curvatur");});
test("curve -> curv", function() {deepEqual( Stem("curve"), "curv");});
test("curved -> curv", function() {deepEqual( Stem("curved"), "curv");});
test("curves -> curv", function() {deepEqual( Stem("curves"), "curv");});
test("curvidens -> curviden", function() {deepEqual( Stem("curvidens"), "curviden");});
test("curving -> curv", function() {deepEqual( Stem("curving"), "curv");});
test("cushion -> cushion", function() {deepEqual( Stem("cushion"), "cushion");});
test("cushioned -> cushion", function() {deepEqual( Stem("cushioned"), "cushion");});
test("cushioning -> cushion", function() {deepEqual( Stem("cushioning"), "cushion");});
test("cushions -> cushion", function() {deepEqual( Stem("cushions"), "cushion");});
test("custodian -> custodian", function() {deepEqual( Stem("custodian"), "custodian");});
test("custodians -> custodian", function() {deepEqual( Stem("custodians"), "custodian");});
test("custody -> custodi", function() {deepEqual( Stem("custody"), "custodi");});
test("custom -> custom", function() {deepEqual( Stem("custom"), "custom");});
test("customarily -> customarili", function() {deepEqual( Stem("customarily"), "customarili");});
test("customary -> customari", function() {deepEqual( Stem("customary"), "customari");});
test("customer -> custom", function() {deepEqual( Stem("customer"), "custom");});
test("customers -> custom", function() {deepEqual( Stem("customers"), "custom");});
test("customs -> custom", function() {deepEqual( Stem("customs"), "custom");});
test("cut -> cut", function() {deepEqual( Stem("cut"), "cut");});
test("cutaneous -> cutan", function() {deepEqual( Stem("cutaneous"), "cutan");});
test("cute -> cute", function() {deepEqual( Stem("cute"), "cute");});
test("cutlass -> cutlass", function() {deepEqual( Stem("cutlass"), "cutlass");});
test("cutler -> cutler", function() {deepEqual( Stem("cutler"), "cutler");});
test("cutlery -> cutleri", function() {deepEqual( Stem("cutlery"), "cutleri");});
test("cutlets -> cutlet", function() {deepEqual( Stem("cutlets"), "cutlet");});
test("cuts -> cut", function() {deepEqual( Stem("cuts"), "cut");});
test("cutter -> cutter", function() {deepEqual( Stem("cutter"), "cutter");});
test("cutters -> cutter", function() {deepEqual( Stem("cutters"), "cutter");});
test("cutthroat -> cutthroat", function() {deepEqual( Stem("cutthroat"), "cutthroat");});
test("cutting -> cut", function() {deepEqual( Stem("cutting"), "cut");});
test("cuttle -> cuttl", function() {deepEqual( Stem("cuttle"), "cuttl");});
test("cuvier -> cuvier", function() {deepEqual( Stem("cuvier"), "cuvier");});
test("cycle -> cycl", function() {deepEqual( Stem("cycle"), "cycl");});
test("cycles -> cycl", function() {deepEqual( Stem("cycles"), "cycl");});
test("cyclopean -> cyclopean", function() {deepEqual( Stem("cyclopean"), "cyclopean");});
test("cylinder -> cylind", function() {deepEqual( Stem("cylinder"), "cylind");});
test("cylinders -> cylind", function() {deepEqual( Stem("cylinders"), "cylind");});
test("cylindrical -> cylindr", function() {deepEqual( Stem("cylindrical"), "cylindr");});
test("cymbal -> cymbal", function() {deepEqual( Stem("cymbal"), "cymbal");});
test("cymindis -> cymindi", function() {deepEqual( Stem("cymindis"), "cymindi");});
test("cynara -> cynara", function() {deepEqual( Stem("cynara"), "cynara");});
test("cynic -> cynic", function() {deepEqual( Stem("cynic"), "cynic");});
test("cynical -> cynic", function() {deepEqual( Stem("cynical"), "cynic");});
test("cynicism -> cynic", function() {deepEqual( Stem("cynicism"), "cynic");});
test("cynucus -> cynucus", function() {deepEqual( Stem("cynucus"), "cynucus");});
test("cyperus -> cyperus", function() {deepEqual( Stem("cyperus"), "cyperus");});
test("cypress -> cypress", function() {deepEqual( Stem("cypress"), "cypress");});
test("cyprus -> cyprus", function() {deepEqual( Stem("cyprus"), "cyprus");});
test("cyrus -> cyrus", function() {deepEqual( Stem("cyrus"), "cyrus");});
test("cyttaria -> cyttaria", function() {deepEqual( Stem("cyttaria"), "cyttaria");});
test("d -> d", function() {deepEqual( Stem("d"), "d");});
test("da -> da", function() {deepEqual( Stem("da"), "da");});
test("daark -> daark", function() {deepEqual( Stem("daark"), "daark");});
test("dab -> dab", function() {deepEqual( Stem("dab"), "dab");});
test("dabber -> dabber", function() {deepEqual( Stem("dabber"), "dabber");});
test("dabbing -> dab", function() {deepEqual( Stem("dabbing"), "dab");});
test("dabbled -> dabbl", function() {deepEqual( Stem("dabbled"), "dabbl");});
test("dabblers -> dabbler", function() {deepEqual( Stem("dabblers"), "dabbler");});
test("dabbling -> dabbl", function() {deepEqual( Stem("dabbling"), "dabbl");});
test("dabs -> dab", function() {deepEqual( Stem("dabs"), "dab");});
test("dacelo -> dacelo", function() {deepEqual( Stem("dacelo"), "dacelo");});
test("dacia -> dacia", function() {deepEqual( Stem("dacia"), "dacia");});
test("dadass -> dadass", function() {deepEqual( Stem("dadass"), "dadass");});
test("daft -> daft", function() {deepEqual( Stem("daft"), "daft");});
test("dagestan -> dagestan", function() {deepEqual( Stem("dagestan"), "dagestan");});
test("dagger -> dagger", function() {deepEqual( Stem("dagger"), "dagger");});
test("daggers -> dagger", function() {deepEqual( Stem("daggers"), "dagger");});
test("dail -> dail", function() {deepEqual( Stem("dail"), "dail");});
test("daily -> daili", function() {deepEqual( Stem("daily"), "daili");});
test("dainties -> dainti", function() {deepEqual( Stem("dainties"), "dainti");});
test("daintily -> daintili", function() {deepEqual( Stem("daintily"), "daintili");});
test("dainty -> dainti", function() {deepEqual( Stem("dainty"), "dainti");});
test("dairy -> dairi", function() {deepEqual( Stem("dairy"), "dairi");});
test("dais -> dai", function() {deepEqual( Stem("dais"), "dai");});
test("daisy -> daisi", function() {deepEqual( Stem("daisy"), "daisi");});
test("dale -> dale", function() {deepEqual( Stem("dale"), "dale");});
test("dalliance -> dallianc", function() {deepEqual( Stem("dalliance"), "dallianc");});
test("dallied -> dalli", function() {deepEqual( Stem("dallied"), "dalli");});
test("dally -> dalli", function() {deepEqual( Stem("dally"), "dalli");});
test("damage -> damag", function() {deepEqual( Stem("damage"), "damag");});
test("damaged -> damag", function() {deepEqual( Stem("damaged"), "damag");});
test("damages -> damag", function() {deepEqual( Stem("damages"), "damag");});
test("damaging -> damag", function() {deepEqual( Stem("damaging"), "damag");});
test("damask -> damask", function() {deepEqual( Stem("damask"), "damask");});
test("dame -> dame", function() {deepEqual( Stem("dame"), "dame");});
test("dames -> dame", function() {deepEqual( Stem("dames"), "dame");});
test("damme -> damm", function() {deepEqual( Stem("damme"), "damm");});
test("dammed -> dam", function() {deepEqual( Stem("dammed"), "dam");});
test("damn -> damn", function() {deepEqual( Stem("damn"), "damn");});
test("damnable -> damnabl", function() {deepEqual( Stem("damnable"), "damnabl");});
test("damnably -> damnabl", function() {deepEqual( Stem("damnably"), "damnabl");});
test("damnation -> damnat", function() {deepEqual( Stem("damnation"), "damnat");});
test("damnatory -> damnatori", function() {deepEqual( Stem("damnatory"), "damnatori");});
test("damned -> damn", function() {deepEqual( Stem("damned"), "damn");});
test("damp -> damp", function() {deepEqual( Stem("damp"), "damp");});
test("damped -> damp", function() {deepEqual( Stem("damped"), "damp");});
test("damper -> damper", function() {deepEqual( Stem("damper"), "damper");});
test("dampest -> dampest", function() {deepEqual( Stem("dampest"), "dampest");});
test("dampier -> dampier", function() {deepEqual( Stem("dampier"), "dampier");});
test("damping -> damp", function() {deepEqual( Stem("damping"), "damp");});
test("dampness -> damp", function() {deepEqual( Stem("dampness"), "damp");});
test("damsel -> damsel", function() {deepEqual( Stem("damsel"), "damsel");});
test("damsels -> damsel", function() {deepEqual( Stem("damsels"), "damsel");});
test("dan -> dan", function() {deepEqual( Stem("dan"), "dan");});
test("dance -> danc", function() {deepEqual( Stem("dance"), "danc");});
test("danced -> danc", function() {deepEqual( Stem("danced"), "danc");});
test("dancer -> dancer", function() {deepEqual( Stem("dancer"), "dancer");});
test("dancers -> dancer", function() {deepEqual( Stem("dancers"), "dancer");});
test("dances -> danc", function() {deepEqual( Stem("dances"), "danc");});
test("dancing -> danc", function() {deepEqual( Stem("dancing"), "danc");});
test("dancings -> danc", function() {deepEqual( Stem("dancings"), "danc");});
test("dandified -> dandifi", function() {deepEqual( Stem("dandified"), "dandifi");});
test("dandling -> dandl", function() {deepEqual( Stem("dandling"), "dandl");});
test("dandy -> dandi", function() {deepEqual( Stem("dandy"), "dandi");});
test("dandyism -> dandyism", function() {deepEqual( Stem("dandyism"), "dandyism");});
test("dang -> dang", function() {deepEqual( Stem("dang"), "dang");});
test("danger -> danger", function() {deepEqual( Stem("danger"), "danger");});
test("dangerous -> danger", function() {deepEqual( Stem("dangerous"), "danger");});
test("dangerously -> danger", function() {deepEqual( Stem("dangerously"), "danger");});
test("dangers -> danger", function() {deepEqual( Stem("dangers"), "danger");});
test("dangle -> dangl", function() {deepEqual( Stem("dangle"), "dangl");});
test("dangling -> dangl", function() {deepEqual( Stem("dangling"), "dangl");});
test("daniel -> daniel", function() {deepEqual( Stem("daniel"), "daniel");});
test("daniell -> daniel", function() {deepEqual( Stem("daniell"), "daniel");});
test("dank -> dank", function() {deepEqual( Stem("dank"), "dank");});
test("danke -> dank", function() {deepEqual( Stem("danke"), "dank");});
test("dans -> dan", function() {deepEqual( Stem("dans"), "dan");});
test("danse -> dans", function() {deepEqual( Stem("danse"), "dans");});
test("dante -> dant", function() {deepEqual( Stem("dante"), "dant");});
test("dapibus -> dapibus", function() {deepEqual( Stem("dapibus"), "dapibus");});
test("darby -> darbi", function() {deepEqual( Stem("darby"), "darbi");});
test("dare -> dare", function() {deepEqual( Stem("dare"), "dare");});
test("dared -> dare", function() {deepEqual( Stem("dared"), "dare");});
test("daren -> daren", function() {deepEqual( Stem("daren"), "daren");});
test("dares -> dare", function() {deepEqual( Stem("dares"), "dare");});
test("daresay -> daresay", function() {deepEqual( Stem("daresay"), "daresay");});
test("daring -> dare", function() {deepEqual( Stem("daring"), "dare");});
test("dark -> dark", function() {deepEqual( Stem("dark"), "dark");});
test("darken -> darken", function() {deepEqual( Stem("darken"), "darken");});
test("darkened -> darken", function() {deepEqual( Stem("darkened"), "darken");});
test("darkening -> darken", function() {deepEqual( Stem("darkening"), "darken");});
test("darkens -> darken", function() {deepEqual( Stem("darkens"), "darken");});
test("darker -> darker", function() {deepEqual( Stem("darker"), "darker");});
test("darkest -> darkest", function() {deepEqual( Stem("darkest"), "darkest");});
test("darkly -> dark", function() {deepEqual( Stem("darkly"), "dark");});
test("darkness -> dark", function() {deepEqual( Stem("darkness"), "dark");});
test("darling -> darl", function() {deepEqual( Stem("darling"), "darl");});
test("darlings -> darl", function() {deepEqual( Stem("darlings"), "darl");});
test("darn -> darn", function() {deepEqual( Stem("darn"), "darn");});
test("darned -> darn", function() {deepEqual( Stem("darned"), "darn");});
test("darning -> darn", function() {deepEqual( Stem("darning"), "darn");});
test("dart -> dart", function() {deepEqual( Stem("dart"), "dart");});
test("darted -> dart", function() {deepEqual( Stem("darted"), "dart");});
test("darting -> dart", function() {deepEqual( Stem("darting"), "dart");});
test("darts -> dart", function() {deepEqual( Stem("darts"), "dart");});
test("darwin -> darwin", function() {deepEqual( Stem("darwin"), "darwin");});
test("darwinian -> darwinian", function() {deepEqual( Stem("darwinian"), "darwinian");});
test("darwinii -> darwinii", function() {deepEqual( Stem("darwinii"), "darwinii");});
test("darya -> darya", function() {deepEqual( Stem("darya"), "darya");});
test("das -> das", function() {deepEqual( Stem("das"), "das");});
test("dash -> dash", function() {deepEqual( Stem("dash"), "dash");});
test("dashed -> dash", function() {deepEqual( Stem("dashed"), "dash");});
test("dashes -> dash", function() {deepEqual( Stem("dashes"), "dash");});
test("dashing -> dash", function() {deepEqual( Stem("dashing"), "dash");});
test("dastard -> dastard", function() {deepEqual( Stem("dastard"), "dastard");});
test("dastardly -> dastard", function() {deepEqual( Stem("dastardly"), "dastard");});
test("dasypus -> dasypus", function() {deepEqual( Stem("dasypus"), "dasypus");});
test("data -> data", function() {deepEqual( Stem("data"), "data");});
test("date -> date", function() {deepEqual( Stem("date"), "date");});
test("dated -> date", function() {deepEqual( Stem("dated"), "date");});
test("dates -> date", function() {deepEqual( Stem("dates"), "date");});
test("dating -> date", function() {deepEqual( Stem("dating"), "date");});
test("daubed -> daub", function() {deepEqual( Stem("daubed"), "daub");});
test("daubeny -> daubeni", function() {deepEqual( Stem("daubeny"), "daubeni");});
test("daubney -> daubney", function() {deepEqual( Stem("daubney"), "daubney");});
test("daughter -> daughter", function() {deepEqual( Stem("daughter"), "daughter");});
test("daughters -> daughter", function() {deepEqual( Stem("daughters"), "daughter");});
test("daunt -> daunt", function() {deepEqual( Stem("daunt"), "daunt");});
test("daunted -> daunt", function() {deepEqual( Stem("daunted"), "daunt");});
test("daverous -> daver", function() {deepEqual( Stem("daverous"), "daver");});
test("david -> david", function() {deepEqual( Stem("david"), "david");});
test("davies -> davi", function() {deepEqual( Stem("davies"), "davi");});
test("davis -> davi", function() {deepEqual( Stem("davis"), "davi");});
test("davy -> davi", function() {deepEqual( Stem("davy"), "davi");});
test("dawdle -> dawdl", function() {deepEqual( Stem("dawdle"), "dawdl");});
test("dawdling -> dawdl", function() {deepEqual( Stem("dawdling"), "dawdl");});
test("dawlish -> dawlish", function() {deepEqual( Stem("dawlish"), "dawlish");});
test("dawn -> dawn", function() {deepEqual( Stem("dawn"), "dawn");});
test("dawned -> dawn", function() {deepEqual( Stem("dawned"), "dawn");});
test("dawning -> dawn", function() {deepEqual( Stem("dawning"), "dawn");});
test("dawns -> dawn", function() {deepEqual( Stem("dawns"), "dawn");});
test("day -> day", function() {deepEqual( Stem("day"), "day");});
test("daybreak -> daybreak", function() {deepEqual( Stem("daybreak"), "daybreak");});
test("daylight -> daylight", function() {deepEqual( Stem("daylight"), "daylight");});
test("days -> day", function() {deepEqual( Stem("days"), "day");});
test("daytime -> daytim", function() {deepEqual( Stem("daytime"), "daytim");});
test("dayvle -> dayvl", function() {deepEqual( Stem("dayvle"), "dayvl");});
test("dazed -> daze", function() {deepEqual( Stem("dazed"), "daze");});
test("dazzle -> dazzl", function() {deepEqual( Stem("dazzle"), "dazzl");});
test("dazzled -> dazzl", function() {deepEqual( Stem("dazzled"), "dazzl");});
test("dazzler -> dazzler", function() {deepEqual( Stem("dazzler"), "dazzler");});
test("dazzling -> dazzl", function() {deepEqual( Stem("dazzling"), "dazzl");});
test("dcar -> dcar", function() {deepEqual( Stem("dcar"), "dcar");});
test("de -> de", function() {deepEqual( Stem("de"), "de");});
test("dea -> dea", function() {deepEqual( Stem("dea"), "dea");});
test("dead -> dead", function() {deepEqual( Stem("dead"), "dead");});
test("deaden -> deaden", function() {deepEqual( Stem("deaden"), "deaden");});
test("deadened -> deaden", function() {deepEqual( Stem("deadened"), "deaden");});
test("deadens -> deaden", function() {deepEqual( Stem("deadens"), "deaden");});
test("deadliest -> deadliest", function() {deepEqual( Stem("deadliest"), "deadliest");});
test("deadlock -> deadlock", function() {deepEqual( Stem("deadlock"), "deadlock");});
test("deadly -> dead", function() {deepEqual( Stem("deadly"), "dead");});
test("deadwood -> deadwood", function() {deepEqual( Stem("deadwood"), "deadwood");});
test("deaf -> deaf", function() {deepEqual( Stem("deaf"), "deaf");});
test("deafen -> deafen", function() {deepEqual( Stem("deafen"), "deafen");});
test("deafening -> deafen", function() {deepEqual( Stem("deafening"), "deafen");});
test("deafness -> deaf", function() {deepEqual( Stem("deafness"), "deaf");});
test("deal -> deal", function() {deepEqual( Stem("deal"), "deal");});
test("dealer -> dealer", function() {deepEqual( Stem("dealer"), "dealer");});
test("dealers -> dealer", function() {deepEqual( Stem("dealers"), "dealer");});
test("dealing -> deal", function() {deepEqual( Stem("dealing"), "deal");});
test("dealings -> deal", function() {deepEqual( Stem("dealings"), "deal");});
test("dealt -> dealt", function() {deepEqual( Stem("dealt"), "dealt");});
test("dean -> dean", function() {deepEqual( Stem("dean"), "dean");});
test("deane -> dean", function() {deepEqual( Stem("deane"), "dean");});
test("deans -> dean", function() {deepEqual( Stem("deans"), "dean");});
test("dear -> dear", function() {deepEqual( Stem("dear"), "dear");});
test("dearer -> dearer", function() {deepEqual( Stem("dearer"), "dearer");});
test("dearest -> dearest", function() {deepEqual( Stem("dearest"), "dearest");});
test("dearly -> dear", function() {deepEqual( Stem("dearly"), "dear");});
test("dears -> dear", function() {deepEqual( Stem("dears"), "dear");});
test("dearth -> dearth", function() {deepEqual( Stem("dearth"), "dearth");});
test("dease -> deas", function() {deepEqual( Stem("dease"), "deas");});
test("death -> death", function() {deepEqual( Stem("death"), "death");});
test("deathbed -> deathb", function() {deepEqual( Stem("deathbed"), "deathb");});
test("deathless -> deathless", function() {deepEqual( Stem("deathless"), "deathless");});
test("deathlike -> deathlik", function() {deepEqual( Stem("deathlike"), "deathlik");});
test("deathly -> death", function() {deepEqual( Stem("deathly"), "death");});
test("deaths -> death", function() {deepEqual( Stem("deaths"), "death");});
test("debacle -> debacl", function() {deepEqual( Stem("debacle"), "debacl");});
test("debar -> debar", function() {deepEqual( Stem("debar"), "debar");});
test("debarred -> debar", function() {deepEqual( Stem("debarred"), "debar");});
test("debase -> debas", function() {deepEqual( Stem("debase"), "debas");});
test("debased -> debas", function() {deepEqual( Stem("debased"), "debas");});
test("debasement -> debas", function() {deepEqual( Stem("debasement"), "debas");});
test("debasing -> debas", function() {deepEqual( Stem("debasing"), "debas");});
test("debate -> debat", function() {deepEqual( Stem("debate"), "debat");});
test("debated -> debat", function() {deepEqual( Stem("debated"), "debat");});
test("debater -> debat", function() {deepEqual( Stem("debater"), "debat");});
test("debates -> debat", function() {deepEqual( Stem("debates"), "debat");});
test("debating -> debat", function() {deepEqual( Stem("debating"), "debat");});
test("debauch -> debauch", function() {deepEqual( Stem("debauch"), "debauch");});
test("debauchery -> debaucheri", function() {deepEqual( Stem("debauchery"), "debaucheri");});
test("debilitated -> debilit", function() {deepEqual( Stem("debilitated"), "debilit");});
test("debility -> debil", function() {deepEqual( Stem("debility"), "debil");});
test("debris -> debri", function() {deepEqual( Stem("debris"), "debri");});
test("debt -> debt", function() {deepEqual( Stem("debt"), "debt");});
test("debtor -> debtor", function() {deepEqual( Stem("debtor"), "debtor");});
test("debtors -> debtor", function() {deepEqual( Stem("debtors"), "debtor");});
test("debts -> debt", function() {deepEqual( Stem("debts"), "debt");});
test("dec -> dec", function() {deepEqual( Stem("dec"), "dec");});
test("decamp -> decamp", function() {deepEqual( Stem("decamp"), "decamp");});
test("decamped -> decamp", function() {deepEqual( Stem("decamped"), "decamp");});
test("decanter -> decant", function() {deepEqual( Stem("decanter"), "decant");});
test("decanters -> decant", function() {deepEqual( Stem("decanters"), "decant");});
test("decapitated -> decapit", function() {deepEqual( Stem("decapitated"), "decapit");});
test("decay -> decay", function() {deepEqual( Stem("decay"), "decay");});
test("decayed -> decay", function() {deepEqual( Stem("decayed"), "decay");});
test("decaying -> decay", function() {deepEqual( Stem("decaying"), "decay");});
test("decease -> deceas", function() {deepEqual( Stem("decease"), "deceas");});
test("deceased -> deceas", function() {deepEqual( Stem("deceased"), "deceas");});
test("deceit -> deceit", function() {deepEqual( Stem("deceit"), "deceit");});
test("deceitful -> deceit", function() {deepEqual( Stem("deceitful"), "deceit");});
test("deceitfulness -> deceit", function() {deepEqual( Stem("deceitfulness"), "deceit");});
test("deceive -> deceiv", function() {deepEqual( Stem("deceive"), "deceiv");});
test("deceived -> deceiv", function() {deepEqual( Stem("deceived"), "deceiv");});
test("deceivers -> deceiv", function() {deepEqual( Stem("deceivers"), "deceiv");});
test("deceives -> deceiv", function() {deepEqual( Stem("deceives"), "deceiv");});
test("deceiving -> deceiv", function() {deepEqual( Stem("deceiving"), "deceiv");});
test("december -> decemb", function() {deepEqual( Stem("december"), "decemb");});
test("decencies -> decenc", function() {deepEqual( Stem("decencies"), "decenc");});
test("decency -> decenc", function() {deepEqual( Stem("decency"), "decenc");});
test("decent -> decent", function() {deepEqual( Stem("decent"), "decent");});
test("decently -> decent", function() {deepEqual( Stem("decently"), "decent");});
test("deception -> decept", function() {deepEqual( Stem("deception"), "decept");});
test("deceptions -> decept", function() {deepEqual( Stem("deceptions"), "decept");});
test("deceptive -> decept", function() {deepEqual( Stem("deceptive"), "decept");});
test("decide -> decid", function() {deepEqual( Stem("decide"), "decid");});
test("decided -> decid", function() {deepEqual( Stem("decided"), "decid");});
test("decidedly -> decid", function() {deepEqual( Stem("decidedly"), "decid");});
test("decides -> decid", function() {deepEqual( Stem("decides"), "decid");});
test("deciding -> decid", function() {deepEqual( Stem("deciding"), "decid");});
test("deciduous -> decidu", function() {deepEqual( Stem("deciduous"), "decidu");});
test("decimal -> decim", function() {deepEqual( Stem("decimal"), "decim");});
test("decimals -> decim", function() {deepEqual( Stem("decimals"), "decim");});
test("decipher -> deciph", function() {deepEqual( Stem("decipher"), "deciph");});
test("deciphered -> deciph", function() {deepEqual( Stem("deciphered"), "deciph");});
test("deciphering -> deciph", function() {deepEqual( Stem("deciphering"), "deciph");});
test("decision -> decis", function() {deepEqual( Stem("decision"), "decis");});
test("decisions -> decis", function() {deepEqual( Stem("decisions"), "decis");});
test("decisive -> decis", function() {deepEqual( Stem("decisive"), "decis");});
test("decisively -> decis", function() {deepEqual( Stem("decisively"), "decis");});
test("deck -> deck", function() {deepEqual( Stem("deck"), "deck");});
test("decked -> deck", function() {deepEqual( Stem("decked"), "deck");});
test("decking -> deck", function() {deepEqual( Stem("decking"), "deck");});
test("declaim -> declaim", function() {deepEqual( Stem("declaim"), "declaim");});
test("declaimed -> declaim", function() {deepEqual( Stem("declaimed"), "declaim");});
test("declamation -> declam", function() {deepEqual( Stem("declamation"), "declam");});
test("declaration -> declar", function() {deepEqual( Stem("declaration"), "declar");});
test("declarations -> declar", function() {deepEqual( Stem("declarations"), "declar");});
test("declaratory -> declaratori", function() {deepEqual( Stem("declaratory"), "declaratori");});
test("declare -> declar", function() {deepEqual( Stem("declare"), "declar");});
test("declared -> declar", function() {deepEqual( Stem("declared"), "declar");});
test("declares -> declar", function() {deepEqual( Stem("declares"), "declar");});
test("declaring -> declar", function() {deepEqual( Stem("declaring"), "declar");});
test("decline -> declin", function() {deepEqual( Stem("decline"), "declin");});
test("declined -> declin", function() {deepEqual( Stem("declined"), "declin");});
test("declines -> declin", function() {deepEqual( Stem("declines"), "declin");});
test("declining -> declin", function() {deepEqual( Stem("declining"), "declin");});
test("decompose -> decompos", function() {deepEqual( Stem("decompose"), "decompos");});
test("decomposed -> decompos", function() {deepEqual( Stem("decomposed"), "decompos");});
test("decomposing -> decompos", function() {deepEqual( Stem("decomposing"), "decompos");});
test("decomposition -> decomposit", function() {deepEqual( Stem("decomposition"), "decomposit");});
test("decorate -> decor", function() {deepEqual( Stem("decorate"), "decor");});
test("decorated -> decor", function() {deepEqual( Stem("decorated"), "decor");});
test("decorates -> decor", function() {deepEqual( Stem("decorates"), "decor");});
test("decoration -> decor", function() {deepEqual( Stem("decoration"), "decor");});
test("decorations -> decor", function() {deepEqual( Stem("decorations"), "decor");});
test("decorative -> decor", function() {deepEqual( Stem("decorative"), "decor");});
test("decorous -> decor", function() {deepEqual( Stem("decorous"), "decor");});
test("decorously -> decor", function() {deepEqual( Stem("decorously"), "decor");});
test("decorum -> decorum", function() {deepEqual( Stem("decorum"), "decorum");});
test("decoy -> decoy", function() {deepEqual( Stem("decoy"), "decoy");});
test("decrease -> decreas", function() {deepEqual( Stem("decrease"), "decreas");});
test("decreased -> decreas", function() {deepEqual( Stem("decreased"), "decreas");});
test("decreasing -> decreas", function() {deepEqual( Stem("decreasing"), "decreas");});
test("decree -> decre", function() {deepEqual( Stem("decree"), "decre");});
test("decreed -> decre", function() {deepEqual( Stem("decreed"), "decre");});
test("decrees -> decre", function() {deepEqual( Stem("decrees"), "decre");});
test("decrepit -> decrepit", function() {deepEqual( Stem("decrepit"), "decrepit");});
test("decrepitude -> decrepitud", function() {deepEqual( Stem("decrepitude"), "decrepitud");});
test("dedicated -> dedic", function() {deepEqual( Stem("dedicated"), "dedic");});
test("dedlock -> dedlock", function() {deepEqual( Stem("dedlock"), "dedlock");});
test("dedlocks -> dedlock", function() {deepEqual( Stem("dedlocks"), "dedlock");});
test("deduced -> deduc", function() {deepEqual( Stem("deduced"), "deduc");});
test("deducible -> deduc", function() {deepEqual( Stem("deducible"), "deduc");});
test("deduct -> deduct", function() {deepEqual( Stem("deduct"), "deduct");});
test("deducted -> deduct", function() {deepEqual( Stem("deducted"), "deduct");});
test("deducting -> deduct", function() {deepEqual( Stem("deducting"), "deduct");});
test("deduction -> deduct", function() {deepEqual( Stem("deduction"), "deduct");});
test("deductions -> deduct", function() {deepEqual( Stem("deductions"), "deduct");});
test("dee -> dee", function() {deepEqual( Stem("dee"), "dee");});
test("deead -> deead", function() {deepEqual( Stem("deead"), "deead");});
test("deed -> deed", function() {deepEqual( Stem("deed"), "deed");});
test("deedn -> deedn", function() {deepEqual( Stem("deedn"), "deedn");});
test("deeds -> deed", function() {deepEqual( Stem("deeds"), "deed");});
test("deein -> deein", function() {deepEqual( Stem("deein"), "deein");});
test("deem -> deem", function() {deepEqual( Stem("deem"), "deem");});
test("deemed -> deem", function() {deepEqual( Stem("deemed"), "deem");});
test("deeming -> deem", function() {deepEqual( Stem("deeming"), "deem");});
test("deems -> deem", function() {deepEqual( Stem("deems"), "deem");});
test("deep -> deep", function() {deepEqual( Stem("deep"), "deep");});
test("deepen -> deepen", function() {deepEqual( Stem("deepen"), "deepen");});
test("deepened -> deepen", function() {deepEqual( Stem("deepened"), "deepen");});
test("deepening -> deepen", function() {deepEqual( Stem("deepening"), "deepen");});
test("deepens -> deepen", function() {deepEqual( Stem("deepens"), "deepen");});
test("deeper -> deeper", function() {deepEqual( Stem("deeper"), "deeper");});
test("deepest -> deepest", function() {deepEqual( Stem("deepest"), "deepest");});
test("deeply -> deepli", function() {deepEqual( Stem("deeply"), "deepli");});
test("deer -> deer", function() {deepEqual( Stem("deer"), "deer");});
test("deering -> deer", function() {deepEqual( Stem("deering"), "deer");});
test("defacing -> defac", function() {deepEqual( Stem("defacing"), "defac");});
test("defalcation -> defalc", function() {deepEqual( Stem("defalcation"), "defalc");});
test("default -> default", function() {deepEqual( Stem("default"), "default");});
test("defeat -> defeat", function() {deepEqual( Stem("defeat"), "defeat");});
test("defeated -> defeat", function() {deepEqual( Stem("defeated"), "defeat");});
test("defect -> defect", function() {deepEqual( Stem("defect"), "defect");});
test("defection -> defect", function() {deepEqual( Stem("defection"), "defect");});
test("defective -> defect", function() {deepEqual( Stem("defective"), "defect");});
test("defects -> defect", function() {deepEqual( Stem("defects"), "defect");});
test("defence -> defenc", function() {deepEqual( Stem("defence"), "defenc");});
test("defenceless -> defenceless", function() {deepEqual( Stem("defenceless"), "defenceless");});
test("defend -> defend", function() {deepEqual( Stem("defend"), "defend");});
test("defendant -> defend", function() {deepEqual( Stem("defendant"), "defend");});
test("defendants -> defend", function() {deepEqual( Stem("defendants"), "defend");});
test("defended -> defend", function() {deepEqual( Stem("defended"), "defend");});
test("defenders -> defend", function() {deepEqual( Stem("defenders"), "defend");});
test("defending -> defend", function() {deepEqual( Stem("defending"), "defend");});
test("defer -> defer", function() {deepEqual( Stem("defer"), "defer");});
test("deference -> defer", function() {deepEqual( Stem("deference"), "defer");});
test("deferential -> deferenti", function() {deepEqual( Stem("deferential"), "deferenti");});
test("deferentially -> deferenti", function() {deepEqual( Stem("deferentially"), "deferenti");});
test("deferred -> defer", function() {deepEqual( Stem("deferred"), "defer");});
test("deferring -> defer", function() {deepEqual( Stem("deferring"), "defer");});
test("defers -> defer", function() {deepEqual( Stem("defers"), "defer");});
test("defiance -> defianc", function() {deepEqual( Stem("defiance"), "defianc");});
test("defiances -> defianc", function() {deepEqual( Stem("defiances"), "defianc");});
test("defiant -> defiant", function() {deepEqual( Stem("defiant"), "defiant");});
test("defiantly -> defiant", function() {deepEqual( Stem("defiantly"), "defiant");});
test("deficiencies -> defici", function() {deepEqual( Stem("deficiencies"), "defici");});
test("deficiency -> defici", function() {deepEqual( Stem("deficiency"), "defici");});
test("deficient -> defici", function() {deepEqual( Stem("deficient"), "defici");});
test("defied -> defi", function() {deepEqual( Stem("defied"), "defi");});
test("defies -> defi", function() {deepEqual( Stem("defies"), "defi");});
test("defile -> defil", function() {deepEqual( Stem("defile"), "defil");});
test("defiled -> defil", function() {deepEqual( Stem("defiled"), "defil");});
test("defiles -> defil", function() {deepEqual( Stem("defiles"), "defil");});
test("define -> defin", function() {deepEqual( Stem("define"), "defin");});
test("defined -> defin", function() {deepEqual( Stem("defined"), "defin");});
test("defining -> defin", function() {deepEqual( Stem("defining"), "defin");});
test("definite -> definit", function() {deepEqual( Stem("definite"), "definit");});
test("definitely -> definit", function() {deepEqual( Stem("definitely"), "definit");});
test("definition -> definit", function() {deepEqual( Stem("definition"), "definit");});
test("definitions -> definit", function() {deepEqual( Stem("definitions"), "definit");});
test("definitively -> definit", function() {deepEqual( Stem("definitively"), "definit");});
test("deflected -> deflect", function() {deepEqual( Stem("deflected"), "deflect");});
test("deflecting -> deflect", function() {deepEqual( Stem("deflecting"), "deflect");});
test("deformed -> deform", function() {deepEqual( Stem("deformed"), "deform");});
test("deformities -> deform", function() {deepEqual( Stem("deformities"), "deform");});
test("deformity -> deform", function() {deepEqual( Stem("deformity"), "deform");});
test("defrauded -> defraud", function() {deepEqual( Stem("defrauded"), "defraud");});
test("defrauding -> defraud", function() {deepEqual( Stem("defrauding"), "defraud");});
test("defray -> defray", function() {deepEqual( Stem("defray"), "defray");});
test("defrayed -> defray", function() {deepEqual( Stem("defrayed"), "defray");});
test("defraying -> defray", function() {deepEqual( Stem("defraying"), "defray");});
test("deftly -> deft", function() {deepEqual( Stem("deftly"), "deft");});
test("defunct -> defunct", function() {deepEqual( Stem("defunct"), "defunct");});
test("defy -> defi", function() {deepEqual( Stem("defy"), "defi");});
test("defying -> defi", function() {deepEqual( Stem("defying"), "defi");});
test("degage -> degag", function() {deepEqual( Stem("degage"), "degag");});
test("degenerate -> degener", function() {deepEqual( Stem("degenerate"), "degener");});
test("degenerated -> degener", function() {deepEqual( Stem("degenerated"), "degener");});
test("degenerating -> degener", function() {deepEqual( Stem("degenerating"), "degener");});
test("degeneration -> degener", function() {deepEqual( Stem("degeneration"), "degener");});
test("degradation -> degrad", function() {deepEqual( Stem("degradation"), "degrad");});
test("degrade -> degrad", function() {deepEqual( Stem("degrade"), "degrad");});
test("degraded -> degrad", function() {deepEqual( Stem("degraded"), "degrad");});
test("degrading -> degrad", function() {deepEqual( Stem("degrading"), "degrad");});
test("degree -> degre", function() {deepEqual( Stem("degree"), "degre");});
test("degrees -> degre", function() {deepEqual( Stem("degrees"), "degre");});
test("degs -> deg", function() {deepEqual( Stem("degs"), "deg");});
test("deified -> deifi", function() {deepEqual( Stem("deified"), "deifi");});
test("deigned -> deign", function() {deepEqual( Stem("deigned"), "deign");});
test("deigning -> deign", function() {deepEqual( Stem("deigning"), "deign");});
test("deinornis -> deinorni", function() {deepEqual( Stem("deinornis"), "deinorni");});
test("deity -> deiti", function() {deepEqual( Stem("deity"), "deiti");});
test("dejected -> deject", function() {deepEqual( Stem("dejected"), "deject");});
test("dejectedly -> deject", function() {deepEqual( Stem("dejectedly"), "deject");});
test("dejection -> deject", function() {deepEqual( Stem("dejection"), "deject");});
test("del -> del", function() {deepEqual( Stem("del"), "del");});
test("delaval -> delav", function() {deepEqual( Stem("delaval"), "delav");});
test("delavals -> delav", function() {deepEqual( Stem("delavals"), "delav");});
test("delay -> delay", function() {deepEqual( Stem("delay"), "delay");});
test("delayed -> delay", function() {deepEqual( Stem("delayed"), "delay");});
test("delaying -> delay", function() {deepEqual( Stem("delaying"), "delay");});
test("delays -> delay", function() {deepEqual( Stem("delays"), "delay");});
test("delectable -> delect", function() {deepEqual( Stem("delectable"), "delect");});
test("delegates -> deleg", function() {deepEqual( Stem("delegates"), "deleg");});
test("deleterious -> deleteri", function() {deepEqual( Stem("deleterious"), "deleteri");});
test("deliberate -> deliber", function() {deepEqual( Stem("deliberate"), "deliber");});
test("deliberated -> deliber", function() {deepEqual( Stem("deliberated"), "deliber");});
test("deliberately -> deliber", function() {deepEqual( Stem("deliberately"), "deliber");});
test("deliberating -> deliber", function() {deepEqual( Stem("deliberating"), "deliber");});
test("deliberation -> deliber", function() {deepEqual( Stem("deliberation"), "deliber");});
test("deliberations -> deliber", function() {deepEqual( Stem("deliberations"), "deliber");});
test("delicacies -> delicaci", function() {deepEqual( Stem("delicacies"), "delicaci");});
test("delicacy -> delicaci", function() {deepEqual( Stem("delicacy"), "delicaci");});
test("delicate -> delic", function() {deepEqual( Stem("delicate"), "delic");});
test("delicately -> delic", function() {deepEqual( Stem("delicately"), "delic");});
test("delicater -> delicat", function() {deepEqual( Stem("delicater"), "delicat");});
test("delicious -> delici", function() {deepEqual( Stem("delicious"), "delici");});
test("deliciously -> delici", function() {deepEqual( Stem("deliciously"), "delici");});
test("delight -> delight", function() {deepEqual( Stem("delight"), "delight");});
test("delighted -> delight", function() {deepEqual( Stem("delighted"), "delight");});
test("delightful -> delight", function() {deepEqual( Stem("delightful"), "delight");});
test("delightfully -> delight", function() {deepEqual( Stem("delightfully"), "delight");});
test("delighting -> delight", function() {deepEqual( Stem("delighting"), "delight");});
test("delights -> delight", function() {deepEqual( Stem("delights"), "delight");});
test("delinquency -> delinqu", function() {deepEqual( Stem("delinquency"), "delinqu");});
test("deliquescent -> deliquesc", function() {deepEqual( Stem("deliquescent"), "deliquesc");});
test("delirious -> deliri", function() {deepEqual( Stem("delirious"), "deliri");});
test("deliriously -> deliri", function() {deepEqual( Stem("deliriously"), "deliri");});
test("delirium -> delirium", function() {deepEqual( Stem("delirium"), "delirium");});
test("deliver -> deliv", function() {deepEqual( Stem("deliver"), "deliv");});
test("deliverance -> deliver", function() {deepEqual( Stem("deliverance"), "deliver");});
test("delivered -> deliv", function() {deepEqual( Stem("delivered"), "deliv");});
test("deliverer -> deliver", function() {deepEqual( Stem("deliverer"), "deliver");});
test("delivering -> deliv", function() {deepEqual( Stem("delivering"), "deliv");});
test("delivers -> deliv", function() {deepEqual( Stem("delivers"), "deliv");});
test("delivery -> deliveri", function() {deepEqual( Stem("delivery"), "deliveri");});
test("delude -> delud", function() {deepEqual( Stem("delude"), "delud");});
test("deluded -> delud", function() {deepEqual( Stem("deluded"), "delud");});
test("deludes -> delud", function() {deepEqual( Stem("deludes"), "delud");});
test("deluding -> delud", function() {deepEqual( Stem("deluding"), "delud");});
test("deluge -> delug", function() {deepEqual( Stem("deluge"), "delug");});
test("deluges -> delug", function() {deepEqual( Stem("deluges"), "delug");});
test("delusion -> delus", function() {deepEqual( Stem("delusion"), "delus");});
test("delusions -> delus", function() {deepEqual( Stem("delusions"), "delus");});
test("delusive -> delus", function() {deepEqual( Stem("delusive"), "delus");});
test("delving -> delv", function() {deepEqual( Stem("delving"), "delv");});
test("dem -> dem", function() {deepEqual( Stem("dem"), "dem");});
test("demagogue -> demagogu", function() {deepEqual( Stem("demagogue"), "demagogu");});
test("demand -> demand", function() {deepEqual( Stem("demand"), "demand");});
test("demanded -> demand", function() {deepEqual( Stem("demanded"), "demand");});
test("demanding -> demand", function() {deepEqual( Stem("demanding"), "demand");});
test("demands -> demand", function() {deepEqual( Stem("demands"), "demand");});
test("demarlii -> demarlii", function() {deepEqual( Stem("demarlii"), "demarlii");});
test("demd -> demd", function() {deepEqual( Stem("demd"), "demd");});
test("demder -> demder", function() {deepEqual( Stem("demder"), "demder");});
test("demdest -> demdest", function() {deepEqual( Stem("demdest"), "demdest");});
test("demeaning -> demean", function() {deepEqual( Stem("demeaning"), "demean");});
test("demeanour -> demeanour", function() {deepEqual( Stem("demeanour"), "demeanour");});
test("demented -> dement", function() {deepEqual( Stem("demented"), "dement");});
test("dementyev -> dementyev", function() {deepEqual( Stem("dementyev"), "dementyev");});
test("demerits -> demerit", function() {deepEqual( Stem("demerits"), "demerit");});
test("demersa -> demersa", function() {deepEqual( Stem("demersa"), "demersa");});
test("demi -> demi", function() {deepEqual( Stem("demi"), "demi");});
test("demigods -> demigod", function() {deepEqual( Stem("demigods"), "demigod");});
test("demmit -> demmit", function() {deepEqual( Stem("demmit"), "demmit");});
test("demneble -> demnebl", function() {deepEqual( Stem("demneble"), "demnebl");});
test("demnebly -> demnebl", function() {deepEqual( Stem("demnebly"), "demnebl");});
test("demnition -> demnit", function() {deepEqual( Stem("demnition"), "demnit");});
test("democracy -> democraci", function() {deepEqual( Stem("democracy"), "democraci");});
test("democratic -> democrat", function() {deepEqual( Stem("democratic"), "democrat");});
test("demolished -> demolish", function() {deepEqual( Stem("demolished"), "demolish");});
test("demolition -> demolit", function() {deepEqual( Stem("demolition"), "demolit");});
test("demon -> demon", function() {deepEqual( Stem("demon"), "demon");});
test("demoniacs -> demoniac", function() {deepEqual( Stem("demoniacs"), "demoniac");});
test("demons -> demon", function() {deepEqual( Stem("demons"), "demon");});
test("demonstrate -> demonstr", function() {deepEqual( Stem("demonstrate"), "demonstr");});
test("demonstrated -> demonstr", function() {deepEqual( Stem("demonstrated"), "demonstr");});
test("demonstrates -> demonstr", function() {deepEqual( Stem("demonstrates"), "demonstr");});
test("demonstration -> demonstr", function() {deepEqual( Stem("demonstration"), "demonstr");});
test("demonstrations -> demonstr", function() {deepEqual( Stem("demonstrations"), "demonstr");});
test("demonstrative -> demonstr", function() {deepEqual( Stem("demonstrative"), "demonstr");});
test("demoralisation -> demoralis", function() {deepEqual( Stem("demoralisation"), "demoralis");});
test("demoralize -> demor", function() {deepEqual( Stem("demoralize"), "demor");});
test("demoralized -> demor", function() {deepEqual( Stem("demoralized"), "demor");});
test("demur -> demur", function() {deepEqual( Stem("demur"), "demur");});
test("demure -> demur", function() {deepEqual( Stem("demure"), "demur");});
test("demurely -> demur", function() {deepEqual( Stem("demurely"), "demur");});
test("demurred -> demur", function() {deepEqual( Stem("demurred"), "demur");});
test("den -> den", function() {deepEqual( Stem("den"), "den");});
test("denial -> denial", function() {deepEqual( Stem("denial"), "denial");});
test("denied -> deni", function() {deepEqual( Stem("denied"), "deni");});
test("denies -> deni", function() {deepEqual( Stem("denies"), "deni");});
test("denizens -> denizen", function() {deepEqual( Stem("denizens"), "denizen");});
test("denmark -> denmark", function() {deepEqual( Stem("denmark"), "denmark");});
test("dennison -> dennison", function() {deepEqual( Stem("dennison"), "dennison");});
test("denominated -> denomin", function() {deepEqual( Stem("denominated"), "denomin");});
test("denomination -> denomin", function() {deepEqual( Stem("denomination"), "denomin");});
test("denominations -> denomin", function() {deepEqual( Stem("denominations"), "denomin");});
test("denote -> denot", function() {deepEqual( Stem("denote"), "denot");});
test("denoted -> denot", function() {deepEqual( Stem("denoted"), "denot");});
test("denotes -> denot", function() {deepEqual( Stem("denotes"), "denot");});
test("denoting -> denot", function() {deepEqual( Stem("denoting"), "denot");});
test("denouement -> denouement", function() {deepEqual( Stem("denouement"), "denouement");});
test("denounce -> denounc", function() {deepEqual( Stem("denounce"), "denounc");});
test("denounced -> denounc", function() {deepEqual( Stem("denounced"), "denounc");});
test("denouncing -> denounc", function() {deepEqual( Stem("denouncing"), "denounc");});
test("dens -> den", function() {deepEqual( Stem("dens"), "den");});
test("dense -> dens", function() {deepEqual( Stem("dense"), "dens");});
test("densely -> dens", function() {deepEqual( Stem("densely"), "dens");});
test("denser -> denser", function() {deepEqual( Stem("denser"), "denser");});
test("densest -> densest", function() {deepEqual( Stem("densest"), "densest");});
test("density -> densiti", function() {deepEqual( Stem("density"), "densiti");});
test("dent -> dent", function() {deepEqual( Stem("dent"), "dent");});
test("dentist -> dentist", function() {deepEqual( Stem("dentist"), "dentist");});
test("dentistical -> dentist", function() {deepEqual( Stem("dentistical"), "dentist");});
test("denudation -> denud", function() {deepEqual( Stem("denudation"), "denud");});
test("denuded -> denud", function() {deepEqual( Stem("denuded"), "denud");});
test("denuding -> denud", function() {deepEqual( Stem("denuding"), "denud");});
test("denunciation -> denunci", function() {deepEqual( Stem("denunciation"), "denunci");});
test("denunciations -> denunci", function() {deepEqual( Stem("denunciations"), "denunci");});
test("deny -> deni", function() {deepEqual( Stem("deny"), "deni");});
test("denying -> deni", function() {deepEqual( Stem("denying"), "deni");});
test("deodara -> deodara", function() {deepEqual( Stem("deodara"), "deodara");});
test("deos -> deo", function() {deepEqual( Stem("deos"), "deo");});
test("depairture -> depairtur", function() {deepEqual( Stem("depairture"), "depairtur");});
test("depart -> depart", function() {deepEqual( Stem("depart"), "depart");});
test("departed -> depart", function() {deepEqual( Stem("departed"), "depart");});
test("departing -> depart", function() {deepEqual( Stem("departing"), "depart");});
test("department -> depart", function() {deepEqual( Stem("department"), "depart");});
test("departs -> depart", function() {deepEqual( Stem("departs"), "depart");});
test("departure -> departur", function() {deepEqual( Stem("departure"), "departur");});
test("departures -> departur", function() {deepEqual( Stem("departures"), "departur");});
test("depend -> depend", function() {deepEqual( Stem("depend"), "depend");});
test("dependant -> depend", function() {deepEqual( Stem("dependant"), "depend");});
test("dependants -> depend", function() {deepEqual( Stem("dependants"), "depend");});
test("depended -> depend", function() {deepEqual( Stem("depended"), "depend");});
test("dependence -> depend", function() {deepEqual( Stem("dependence"), "depend");});
test("dependencies -> depend", function() {deepEqual( Stem("dependencies"), "depend");});
test("dependent -> depend", function() {deepEqual( Stem("dependent"), "depend");});
test("dependents -> depend", function() {deepEqual( Stem("dependents"), "depend");});
test("depending -> depend", function() {deepEqual( Stem("depending"), "depend");});
test("depends -> depend", function() {deepEqual( Stem("depends"), "depend");});
test("depict -> depict", function() {deepEqual( Stem("depict"), "depict");});
test("depicted -> depict", function() {deepEqual( Stem("depicted"), "depict");});
test("depicter -> depict", function() {deepEqual( Stem("depicter"), "depict");});
test("depicts -> depict", function() {deepEqual( Stem("depicts"), "depict");});
test("deplorable -> deplor", function() {deepEqual( Stem("deplorable"), "deplor");});
test("deplorably -> deplor", function() {deepEqual( Stem("deplorably"), "deplor");});
test("deplore -> deplor", function() {deepEqual( Stem("deplore"), "deplor");});
test("deplored -> deplor", function() {deepEqual( Stem("deplored"), "deplor");});
test("deploring -> deplor", function() {deepEqual( Stem("deploring"), "deplor");});
test("deploy -> deploy", function() {deepEqual( Stem("deploy"), "deploy");});
test("deport -> deport", function() {deepEqual( Stem("deport"), "deport");});
test("deportation -> deport", function() {deepEqual( Stem("deportation"), "deport");});
test("deporting -> deport", function() {deepEqual( Stem("deporting"), "deport");});
test("deportment -> deport", function() {deepEqual( Stem("deportment"), "deport");});
test("depose -> depos", function() {deepEqual( Stem("depose"), "depos");});
test("deposed -> depos", function() {deepEqual( Stem("deposed"), "depos");});
test("deposer -> depos", function() {deepEqual( Stem("deposer"), "depos");});
test("deposit -> deposit", function() {deepEqual( Stem("deposit"), "deposit");});
test("deposited -> deposit", function() {deepEqual( Stem("deposited"), "deposit");});
test("depositing -> deposit", function() {deepEqual( Stem("depositing"), "deposit");});
test("deposition -> deposit", function() {deepEqual( Stem("deposition"), "deposit");});
test("depository -> depositori", function() {deepEqual( Stem("depository"), "depositori");});
test("deposits -> deposit", function() {deepEqual( Stem("deposits"), "deposit");});
test("depraved -> deprav", function() {deepEqual( Stem("depraved"), "deprav");});
test("depraving -> deprav", function() {deepEqual( Stem("depraving"), "deprav");});
test("depravity -> deprav", function() {deepEqual( Stem("depravity"), "deprav");});
test("deprecating -> deprec", function() {deepEqual( Stem("deprecating"), "deprec");});
test("deprecation -> deprec", function() {deepEqual( Stem("deprecation"), "deprec");});
test("depreciate -> depreci", function() {deepEqual( Stem("depreciate"), "depreci");});
test("depreciated -> depreci", function() {deepEqual( Stem("depreciated"), "depreci");});
test("depreciating -> depreci", function() {deepEqual( Stem("depreciating"), "depreci");});
test("depreciation -> depreci", function() {deepEqual( Stem("depreciation"), "depreci");});
test("depress -> depress", function() {deepEqual( Stem("depress"), "depress");});
test("depressed -> depress", function() {deepEqual( Stem("depressed"), "depress");});
test("depresses -> depress", function() {deepEqual( Stem("depresses"), "depress");});
test("depressing -> depress", function() {deepEqual( Stem("depressing"), "depress");});
test("depression -> depress", function() {deepEqual( Stem("depression"), "depress");});
test("depressions -> depress", function() {deepEqual( Stem("depressions"), "depress");});
test("deprivation -> depriv", function() {deepEqual( Stem("deprivation"), "depriv");});
test("deprive -> depriv", function() {deepEqual( Stem("deprive"), "depriv");});
test("deprived -> depriv", function() {deepEqual( Stem("deprived"), "depriv");});
test("deprives -> depriv", function() {deepEqual( Stem("deprives"), "depriv");});
test("depriving -> depriv", function() {deepEqual( Stem("depriving"), "depriv");});
test("deptford -> deptford", function() {deepEqual( Stem("deptford"), "deptford");});
test("depth -> depth", function() {deepEqual( Stem("depth"), "depth");});
test("depths -> depth", function() {deepEqual( Stem("depths"), "depth");});
test("deputation -> deput", function() {deepEqual( Stem("deputation"), "deput");});
test("deputations -> deput", function() {deepEqual( Stem("deputations"), "deput");});
test("depute -> deput", function() {deepEqual( Stem("depute"), "deput");});
test("deputed -> deput", function() {deepEqual( Stem("deputed"), "deput");});
test("deputies -> deputi", function() {deepEqual( Stem("deputies"), "deputi");});
test("deputy -> deputi", function() {deepEqual( Stem("deputy"), "deputi");});
test("der -> der", function() {deepEqual( Stem("der"), "der");});
test("deranged -> derang", function() {deepEqual( Stem("deranged"), "derang");});
test("derangement -> derang", function() {deepEqual( Stem("derangement"), "derang");});
test("derby -> derbi", function() {deepEqual( Stem("derby"), "derbi");});
test("derided -> derid", function() {deepEqual( Stem("derided"), "derid");});
test("derision -> deris", function() {deepEqual( Stem("derision"), "deris");});
test("derisive -> deris", function() {deepEqual( Stem("derisive"), "deris");});
test("derisively -> deris", function() {deepEqual( Stem("derisively"), "deris");});
test("derivable -> deriv", function() {deepEqual( Stem("derivable"), "deriv");});
test("derivation -> deriv", function() {deepEqual( Stem("derivation"), "deriv");});
test("derive -> deriv", function() {deepEqual( Stem("derive"), "deriv");});
test("derived -> deriv", function() {deepEqual( Stem("derived"), "deriv");});
test("derives -> deriv", function() {deepEqual( Stem("derives"), "deriv");});
test("deriving -> deriv", function() {deepEqual( Stem("deriving"), "deriv");});
test("dermestes -> dermest", function() {deepEqual( Stem("dermestes"), "dermest");});
test("derogatory -> derogatori", function() {deepEqual( Stem("derogatory"), "derogatori");});
test("derwent -> derwent", function() {deepEqual( Stem("derwent"), "derwent");});
test("des -> des", function() {deepEqual( Stem("des"), "des");});
test("desc -> desc", function() {deepEqual( Stem("desc"), "desc");});
test("descanted -> descant", function() {deepEqual( Stem("descanted"), "descant");});
test("descanting -> descant", function() {deepEqual( Stem("descanting"), "descant");});
test("descen -> descen", function() {deepEqual( Stem("descen"), "descen");});
test("descend -> descend", function() {deepEqual( Stem("descend"), "descend");});
test("descendant -> descend", function() {deepEqual( Stem("descendant"), "descend");});
test("descendants -> descend", function() {deepEqual( Stem("descendants"), "descend");});
test("descended -> descend", function() {deepEqual( Stem("descended"), "descend");});
test("descendin -> descendin", function() {deepEqual( Stem("descendin"), "descendin");});
test("descending -> descend", function() {deepEqual( Stem("descending"), "descend");});
test("descends -> descend", function() {deepEqual( Stem("descends"), "descend");});
test("descent -> descent", function() {deepEqual( Stem("descent"), "descent");});
test("describe -> describ", function() {deepEqual( Stem("describe"), "describ");});
test("described -> describ", function() {deepEqual( Stem("described"), "describ");});
test("describes -> describ", function() {deepEqual( Stem("describes"), "describ");});
test("describing -> describ", function() {deepEqual( Stem("describing"), "describ");});
test("descried -> descri", function() {deepEqual( Stem("descried"), "descri");});
test("descries -> descri", function() {deepEqual( Stem("descries"), "descri");});
test("descrip -> descrip", function() {deepEqual( Stem("descrip"), "descrip");});
test("description -> descript", function() {deepEqual( Stem("description"), "descript");});
test("descriptions -> descript", function() {deepEqual( Stem("descriptions"), "descript");});
test("descriptive -> descript", function() {deepEqual( Stem("descriptive"), "descript");});
test("descripts -> descript", function() {deepEqual( Stem("descripts"), "descript");});
test("descry -> descri", function() {deepEqual( Stem("descry"), "descri");});
test("desert -> desert", function() {deepEqual( Stem("desert"), "desert");});
test("deserted -> desert", function() {deepEqual( Stem("deserted"), "desert");});
test("deserting -> desert", function() {deepEqual( Stem("deserting"), "desert");});
test("desertion -> desert", function() {deepEqual( Stem("desertion"), "desert");});
test("deserts -> desert", function() {deepEqual( Stem("deserts"), "desert");});
test("deserve -> deserv", function() {deepEqual( Stem("deserve"), "deserv");});
test("deserved -> deserv", function() {deepEqual( Stem("deserved"), "deserv");});
test("deservedly -> deserv", function() {deepEqual( Stem("deservedly"), "deserv");});
test("deserves -> deserv", function() {deepEqual( Stem("deserves"), "deserv");});
test("deserving -> deserv", function() {deepEqual( Stem("deserving"), "deserv");});
test("design -> design", function() {deepEqual( Stem("design"), "design");});
test("designates -> design", function() {deepEqual( Stem("designates"), "design");});
test("designation -> design", function() {deepEqual( Stem("designation"), "design");});
test("designed -> design", function() {deepEqual( Stem("designed"), "design");});
test("designer -> design", function() {deepEqual( Stem("designer"), "design");});
test("designing -> design", function() {deepEqual( Stem("designing"), "design");});
test("designs -> design", function() {deepEqual( Stem("designs"), "design");});
test("desirable -> desir", function() {deepEqual( Stem("desirable"), "desir");});
test("desire -> desir", function() {deepEqual( Stem("desire"), "desir");});
test("desired -> desir", function() {deepEqual( Stem("desired"), "desir");});
test("desires -> desir", function() {deepEqual( Stem("desires"), "desir");});
test("desiring -> desir", function() {deepEqual( Stem("desiring"), "desir");});
test("desirous -> desir", function() {deepEqual( Stem("desirous"), "desir");});
test("desist -> desist", function() {deepEqual( Stem("desist"), "desist");});
test("desisted -> desist", function() {deepEqual( Stem("desisted"), "desist");});
test("desists -> desist", function() {deepEqual( Stem("desists"), "desist");});
test("desk -> desk", function() {deepEqual( Stem("desk"), "desk");});
test("desks -> desk", function() {deepEqual( Stem("desks"), "desk");});
test("desmodus -> desmodus", function() {deepEqual( Stem("desmodus"), "desmodus");});
test("desolate -> desol", function() {deepEqual( Stem("desolate"), "desol");});
test("desolated -> desol", function() {deepEqual( Stem("desolated"), "desol");});
test("desolately -> desol", function() {deepEqual( Stem("desolately"), "desol");});
test("desolateness -> desol", function() {deepEqual( Stem("desolateness"), "desol");});
test("desolation -> desol", function() {deepEqual( Stem("desolation"), "desol");});
test("desolee -> desole", function() {deepEqual( Stem("desolee"), "desole");});
test("despair -> despair", function() {deepEqual( Stem("despair"), "despair");});
test("despaired -> despair", function() {deepEqual( Stem("despaired"), "despair");});
test("despairing -> despair", function() {deepEqual( Stem("despairing"), "despair");});
test("despairingly -> despair", function() {deepEqual( Stem("despairingly"), "despair");});
test("despairs -> despair", function() {deepEqual( Stem("despairs"), "despair");});
test("despatch -> despatch", function() {deepEqual( Stem("despatch"), "despatch");});
test("despatched -> despatch", function() {deepEqual( Stem("despatched"), "despatch");});
test("desperate -> desper", function() {deepEqual( Stem("desperate"), "desper");});
test("desperately -> desper", function() {deepEqual( Stem("desperately"), "desper");});
test("desperation -> desper", function() {deepEqual( Stem("desperation"), "desper");});
test("despicable -> despic", function() {deepEqual( Stem("despicable"), "despic");});
test("despicably -> despic", function() {deepEqual( Stem("despicably"), "despic");});
test("despise -> despis", function() {deepEqual( Stem("despise"), "despis");});
test("despised -> despis", function() {deepEqual( Stem("despised"), "despis");});
test("despises -> despis", function() {deepEqual( Stem("despises"), "despis");});
test("despising -> despis", function() {deepEqual( Stem("despising"), "despis");});
test("despite -> despit", function() {deepEqual( Stem("despite"), "despit");});
test("despoblado -> despoblado", function() {deepEqual( Stem("despoblado"), "despoblado");});
test("despoil -> despoil", function() {deepEqual( Stem("despoil"), "despoil");});
test("despoiled -> despoil", function() {deepEqual( Stem("despoiled"), "despoil");});
test("despond -> despond", function() {deepEqual( Stem("despond"), "despond");});
test("desponded -> despond", function() {deepEqual( Stem("desponded"), "despond");});
test("despondence -> despond", function() {deepEqual( Stem("despondence"), "despond");});
test("despondency -> despond", function() {deepEqual( Stem("despondency"), "despond");});
test("despondent -> despond", function() {deepEqual( Stem("despondent"), "despond");});
test("despondently -> despond", function() {deepEqual( Stem("despondently"), "despond");});
test("desponding -> despond", function() {deepEqual( Stem("desponding"), "despond");});
test("despondingly -> despond", function() {deepEqual( Stem("despondingly"), "despond");});
test("despot -> despot", function() {deepEqual( Stem("despot"), "despot");});
test("despotic -> despot", function() {deepEqual( Stem("despotic"), "despot");});
test("despotism -> despot", function() {deepEqual( Stem("despotism"), "despot");});
test("dessert -> dessert", function() {deepEqual( Stem("dessert"), "dessert");});
test("desserts -> dessert", function() {deepEqual( Stem("desserts"), "dessert");});
test("destination -> destin", function() {deepEqual( Stem("destination"), "destin");});
test("destinction -> destinct", function() {deepEqual( Stem("destinction"), "destinct");});
test("destined -> destin", function() {deepEqual( Stem("destined"), "destin");});
test("destinies -> destini", function() {deepEqual( Stem("destinies"), "destini");});
test("destiny -> destini", function() {deepEqual( Stem("destiny"), "destini");});
test("destitute -> destitut", function() {deepEqual( Stem("destitute"), "destitut");});
test("destitution -> destitut", function() {deepEqual( Stem("destitution"), "destitut");});
test("destro -> destro", function() {deepEqual( Stem("destro"), "destro");});
test("destroy -> destroy", function() {deepEqual( Stem("destroy"), "destroy");});
test("destroyed -> destroy", function() {deepEqual( Stem("destroyed"), "destroy");});
test("destroyer -> destroy", function() {deepEqual( Stem("destroyer"), "destroy");});
test("destroyers -> destroy", function() {deepEqual( Stem("destroyers"), "destroy");});
test("destroying -> destroy", function() {deepEqual( Stem("destroying"), "destroy");});
test("destroys -> destroy", function() {deepEqual( Stem("destroys"), "destroy");});
test("destruction -> destruct", function() {deepEqual( Stem("destruction"), "destruct");});
test("destructive -> destruct", function() {deepEqual( Stem("destructive"), "destruct");});
test("desultory -> desultori", function() {deepEqual( Stem("desultory"), "desultori");});
test("det -> det", function() {deepEqual( Stem("det"), "det");});
test("detach -> detach", function() {deepEqual( Stem("detach"), "detach");});
test("detached -> detach", function() {deepEqual( Stem("detached"), "detach");});
test("detaches -> detach", function() {deepEqual( Stem("detaches"), "detach");});
test("detachment -> detach", function() {deepEqual( Stem("detachment"), "detach");});
test("detail -> detail", function() {deepEqual( Stem("detail"), "detail");});
test("detailed -> detail", function() {deepEqual( Stem("detailed"), "detail");});
test("details -> detail", function() {deepEqual( Stem("details"), "detail");});
test("detain -> detain", function() {deepEqual( Stem("detain"), "detain");});
test("detained -> detain", function() {deepEqual( Stem("detained"), "detain");});
test("detainer -> detain", function() {deepEqual( Stem("detainer"), "detain");});
test("detaining -> detain", function() {deepEqual( Stem("detaining"), "detain");});
test("detect -> detect", function() {deepEqual( Stem("detect"), "detect");});
test("detected -> detect", function() {deepEqual( Stem("detected"), "detect");});
test("detecting -> detect", function() {deepEqual( Stem("detecting"), "detect");});
test("detection -> detect", function() {deepEqual( Stem("detection"), "detect");});
test("detective -> detect", function() {deepEqual( Stem("detective"), "detect");});
test("detects -> detect", function() {deepEqual( Stem("detects"), "detect");});
test("detenined -> detenin", function() {deepEqual( Stem("detenined"), "detenin");});
test("detention -> detent", function() {deepEqual( Stem("detention"), "detent");});
test("deter -> deter", function() {deepEqual( Stem("deter"), "deter");});
test("deteriorate -> deterior", function() {deepEqual( Stem("deteriorate"), "deterior");});
test("deteriorated -> deterior", function() {deepEqual( Stem("deteriorated"), "deterior");});
test("deteriorating -> deterior", function() {deepEqual( Stem("deteriorating"), "deterior");});
test("determination -> determin", function() {deepEqual( Stem("determination"), "determin");});
test("determine -> determin", function() {deepEqual( Stem("determine"), "determin");});
test("determined -> determin", function() {deepEqual( Stem("determined"), "determin");});
test("determines -> determin", function() {deepEqual( Stem("determines"), "determin");});
test("determining -> determin", function() {deepEqual( Stem("determining"), "determin");});
test("deterred -> deter", function() {deepEqual( Stem("deterred"), "deter");});
test("detest -> detest", function() {deepEqual( Stem("detest"), "detest");});
test("detestable -> detest", function() {deepEqual( Stem("detestable"), "detest");});
test("detestation -> detest", function() {deepEqual( Stem("detestation"), "detest");});
test("detested -> detest", function() {deepEqual( Stem("detested"), "detest");});
test("detesting -> detest", function() {deepEqual( Stem("detesting"), "detest");});
test("dethronement -> dethron", function() {deepEqual( Stem("dethronement"), "dethron");});
test("detour -> detour", function() {deepEqual( Stem("detour"), "detour");});
test("detract -> detract", function() {deepEqual( Stem("detract"), "detract");});
test("detriment -> detriment", function() {deepEqual( Stem("detriment"), "detriment");});
test("detrimental -> detriment", function() {deepEqual( Stem("detrimental"), "detriment");});
test("detritus -> detritus", function() {deepEqual( Stem("detritus"), "detritus");});
test("deuce -> deuc", function() {deepEqual( Stem("deuce"), "deuc");});
test("deuced -> deuc", function() {deepEqual( Stem("deuced"), "deuc");});
test("deum -> deum", function() {deepEqual( Stem("deum"), "deum");});
test("deus -> deus", function() {deepEqual( Stem("deus"), "deus");});
test("deux -> deux", function() {deepEqual( Stem("deux"), "deux");});
test("devastate -> devast", function() {deepEqual( Stem("devastate"), "devast");});
test("devastation -> devast", function() {deepEqual( Stem("devastation"), "devast");});
test("develop -> develop", function() {deepEqual( Stem("develop"), "develop");});
test("developed -> develop", function() {deepEqual( Stem("developed"), "develop");});
test("developes -> develop", function() {deepEqual( Stem("developes"), "develop");});
test("developing -> develop", function() {deepEqual( Stem("developing"), "develop");});
test("development -> develop", function() {deepEqual( Stem("development"), "develop");});
test("develops -> develop", function() {deepEqual( Stem("develops"), "develop");});
test("deviated -> deviat", function() {deepEqual( Stem("deviated"), "deviat");});
test("deviation -> deviat", function() {deepEqual( Stem("deviation"), "deviat");});
test("device -> devic", function() {deepEqual( Stem("device"), "devic");});
test("devices -> devic", function() {deepEqual( Stem("devices"), "devic");});
test("devil -> devil", function() {deepEqual( Stem("devil"), "devil");});
test("devilish -> devilish", function() {deepEqual( Stem("devilish"), "devilish");});
test("devilry -> devilri", function() {deepEqual( Stem("devilry"), "devilri");});
test("devils -> devil", function() {deepEqual( Stem("devils"), "devil");});
test("devious -> devious", function() {deepEqual( Stem("devious"), "devious");});
test("devise -> devis", function() {deepEqual( Stem("devise"), "devis");});
test("devised -> devis", function() {deepEqual( Stem("devised"), "devis");});
test("deviser -> devis", function() {deepEqual( Stem("deviser"), "devis");});
test("devising -> devis", function() {deepEqual( Stem("devising"), "devis");});
test("devoid -> devoid", function() {deepEqual( Stem("devoid"), "devoid");});
test("devoir -> devoir", function() {deepEqual( Stem("devoir"), "devoir");});
test("devolved -> devolv", function() {deepEqual( Stem("devolved"), "devolv");});
test("devolves -> devolv", function() {deepEqual( Stem("devolves"), "devolv");});
test("devon -> devon", function() {deepEqual( Stem("devon"), "devon");});
test("devonian -> devonian", function() {deepEqual( Stem("devonian"), "devonian");});
test("devonport -> devonport", function() {deepEqual( Stem("devonport"), "devonport");});
test("devonshire -> devonshir", function() {deepEqual( Stem("devonshire"), "devonshir");});
test("devote -> devot", function() {deepEqual( Stem("devote"), "devot");});
test("devoted -> devot", function() {deepEqual( Stem("devoted"), "devot");});
test("devotedly -> devot", function() {deepEqual( Stem("devotedly"), "devot");});
test("devotedness -> devoted", function() {deepEqual( Stem("devotedness"), "devoted");});
test("devotes -> devot", function() {deepEqual( Stem("devotes"), "devot");});
test("devoting -> devot", function() {deepEqual( Stem("devoting"), "devot");});
test("devotion -> devot", function() {deepEqual( Stem("devotion"), "devot");});
test("devotions -> devot", function() {deepEqual( Stem("devotions"), "devot");});
test("devour -> devour", function() {deepEqual( Stem("devour"), "devour");});
test("devoured -> devour", function() {deepEqual( Stem("devoured"), "devour");});
test("devourers -> devour", function() {deepEqual( Stem("devourers"), "devour");});
test("devouring -> devour", function() {deepEqual( Stem("devouring"), "devour");});
test("devout -> devout", function() {deepEqual( Stem("devout"), "devout");});
test("devoutly -> devout", function() {deepEqual( Stem("devoutly"), "devout");});
test("dew -> dew", function() {deepEqual( Stem("dew"), "dew");});
test("dewdrop -> dewdrop", function() {deepEqual( Stem("dewdrop"), "dewdrop");});
test("dewdrops -> dewdrop", function() {deepEqual( Stem("dewdrops"), "dewdrop");});
test("deweloping -> dewelop", function() {deepEqual( Stem("deweloping"), "dewelop");});
test("dewiness -> dewi", function() {deepEqual( Stem("dewiness"), "dewi");});
test("dews -> dew", function() {deepEqual( Stem("dews"), "dew");});
test("dewy -> dewi", function() {deepEqual( Stem("dewy"), "dewi");});
test("dexterity -> dexter", function() {deepEqual( Stem("dexterity"), "dexter");});
test("dexterous -> dexter", function() {deepEqual( Stem("dexterous"), "dexter");});
test("dexterously -> dexter", function() {deepEqual( Stem("dexterously"), "dexter");});
test("dey -> dey", function() {deepEqual( Stem("dey"), "dey");});
test("deyvle -> deyvl", function() {deepEqual( Stem("deyvle"), "deyvl");});
test("deyvlish -> deyvlish", function() {deepEqual( Stem("deyvlish"), "deyvlish");});
test("di -> di", function() {deepEqual( Stem("di"), "di");});
test("diabolical -> diabol", function() {deepEqual( Stem("diabolical"), "diabol");});
test("diabolicus -> diabolicus", function() {deepEqual( Stem("diabolicus"), "diabolicus");});
test("diagnosed -> diagnos", function() {deepEqual( Stem("diagnosed"), "diagnos");});
test("diagonal -> diagon", function() {deepEqual( Stem("diagonal"), "diagon");});
test("dial -> dial", function() {deepEqual( Stem("dial"), "dial");});
test("dialect -> dialect", function() {deepEqual( Stem("dialect"), "dialect");});
test("dialects -> dialect", function() {deepEqual( Stem("dialects"), "dialect");});
test("dialogue -> dialogu", function() {deepEqual( Stem("dialogue"), "dialogu");});
test("dialogues -> dialogu", function() {deepEqual( Stem("dialogues"), "dialogu");});
test("dials -> dial", function() {deepEqual( Stem("dials"), "dial");});
test("diamanten -> diamanten", function() {deepEqual( Stem("diamanten"), "diamanten");});
test("diameter -> diamet", function() {deepEqual( Stem("diameter"), "diamet");});
test("diametrically -> diametr", function() {deepEqual( Stem("diametrically"), "diametr");});
test("diamond -> diamond", function() {deepEqual( Stem("diamond"), "diamond");});
test("diamonds -> diamond", function() {deepEqual( Stem("diamonds"), "diamond");});
test("dianaea -> dianaea", function() {deepEqual( Stem("dianaea"), "dianaea");});
test("diaphragm -> diaphragm", function() {deepEqual( Stem("diaphragm"), "diaphragm");});
test("diappointments -> diappoint", function() {deepEqual( Stem("diappointments"), "diappoint");});
test("diaries -> diari", function() {deepEqual( Stem("diaries"), "diari");});
test("diary -> diari", function() {deepEqual( Stem("diary"), "diari");});
test("diatribes -> diatrib", function() {deepEqual( Stem("diatribes"), "diatrib");});
test("dibabs -> dibab", function() {deepEqual( Stem("dibabs"), "dibab");});
test("dibabses -> dibabs", function() {deepEqual( Stem("dibabses"), "dibabs");});
test("dick -> dick", function() {deepEqual( Stem("dick"), "dick");});
test("dickens -> dicken", function() {deepEqual( Stem("dickens"), "dicken");});
test("dicks -> dick", function() {deepEqual( Stem("dicks"), "dick");});
test("dictate -> dictat", function() {deepEqual( Stem("dictate"), "dictat");});
test("dictated -> dictat", function() {deepEqual( Stem("dictated"), "dictat");});
test("dictates -> dictat", function() {deepEqual( Stem("dictates"), "dictat");});
test("dictating -> dictat", function() {deepEqual( Stem("dictating"), "dictat");});
test("dictation -> dictat", function() {deepEqual( Stem("dictation"), "dictat");});
test("dictator -> dictat", function() {deepEqual( Stem("dictator"), "dictat");});
test("dictatorial -> dictatori", function() {deepEqual( Stem("dictatorial"), "dictatori");});
test("dictionary -> dictionari", function() {deepEqual( Stem("dictionary"), "dictionari");});
test("dictum -> dictum", function() {deepEqual( Stem("dictum"), "dictum");});
test("did -> did", function() {deepEqual( Stem("did"), "did");});
test("diddler -> diddler", function() {deepEqual( Stem("diddler"), "diddler");});
test("didelphis -> didelphi", function() {deepEqual( Stem("didelphis"), "didelphi");});
test("didn -> didn", function() {deepEqual( Stem("didn"), "didn");});
test("didst -> didst", function() {deepEqual( Stem("didst"), "didst");});
test("die -> die", function() {deepEqual( Stem("die"), "die");});
test("died -> die", function() {deepEqual( Stem("died"), "die");});
test("dieffenbach -> dieffenbach", function() {deepEqual( Stem("dieffenbach"), "dieffenbach");});
test("diego -> diego", function() {deepEqual( Stem("diego"), "diego");});
test("dieman -> dieman", function() {deepEqual( Stem("dieman"), "dieman");});
test("diemen -> diemen", function() {deepEqual( Stem("diemen"), "diemen");});
test("diernan -> diernan", function() {deepEqual( Stem("diernan"), "diernan");});
test("dies -> die", function() {deepEqual( Stem("dies"), "die");});
test("diet -> diet", function() {deepEqual( Stem("diet"), "diet");});
test("differ -> differ", function() {deepEqual( Stem("differ"), "differ");});
test("differed -> differ", function() {deepEqual( Stem("differed"), "differ");});
test("difference -> differ", function() {deepEqual( Stem("difference"), "differ");});
test("differences -> differ", function() {deepEqual( Stem("differences"), "differ");});
test("different -> differ", function() {deepEqual( Stem("different"), "differ");});
test("differently -> differ", function() {deepEqual( Stem("differently"), "differ");});
test("differing -> differ", function() {deepEqual( Stem("differing"), "differ");});
test("differs -> differ", function() {deepEqual( Stem("differs"), "differ");});
test("difficult -> difficult", function() {deepEqual( Stem("difficult"), "difficult");});
test("difficulties -> difficulti", function() {deepEqual( Stem("difficulties"), "difficulti");});
test("difficulty -> difficulti", function() {deepEqual( Stem("difficulty"), "difficulti");});
test("diffidence -> diffid", function() {deepEqual( Stem("diffidence"), "diffid");});
test("diffident -> diffid", function() {deepEqual( Stem("diffident"), "diffid");});
test("diffidently -> diffid", function() {deepEqual( Stem("diffidently"), "diffid");});
test("diffused -> diffus", function() {deepEqual( Stem("diffused"), "diffus");});
test("diffusing -> diffus", function() {deepEqual( Stem("diffusing"), "diffus");});
test("diffusion -> diffus", function() {deepEqual( Stem("diffusion"), "diffus");});
test("dig -> dig", function() {deepEqual( Stem("dig"), "dig");});
test("digby -> digbi", function() {deepEqual( Stem("digby"), "digbi");});
test("diges -> dige", function() {deepEqual( Stem("diges"), "dige");});
test("digest -> digest", function() {deepEqual( Stem("digest"), "digest");});
test("digester -> digest", function() {deepEqual( Stem("digester"), "digest");});
test("digestio -> digestio", function() {deepEqual( Stem("digestio"), "digestio");});
test("digestion -> digest", function() {deepEqual( Stem("digestion"), "digest");});
test("digestive -> digest", function() {deepEqual( Stem("digestive"), "digest");});
test("digger -> digger", function() {deepEqual( Stem("digger"), "digger");});
test("digging -> dig", function() {deepEqual( Stem("digging"), "dig");});
test("digitated -> digit", function() {deepEqual( Stem("digitated"), "digit");});
test("digitatus -> digitatus", function() {deepEqual( Stem("digitatus"), "digitatus");});
test("dignified -> dignifi", function() {deepEqual( Stem("dignified"), "dignifi");});
test("dignities -> digniti", function() {deepEqual( Stem("dignities"), "digniti");});
test("dignity -> digniti", function() {deepEqual( Stem("dignity"), "digniti");});
test("digression -> digress", function() {deepEqual( Stem("digression"), "digress");});
test("dilapidated -> dilapid", function() {deepEqual( Stem("dilapidated"), "dilapid");});
test("dilapidation -> dilapid", function() {deepEqual( Stem("dilapidation"), "dilapid");});
test("dilatation -> dilat", function() {deepEqual( Stem("dilatation"), "dilat");});
test("dilate -> dilat", function() {deepEqual( Stem("dilate"), "dilat");});
test("dilated -> dilat", function() {deepEqual( Stem("dilated"), "dilat");});
test("dilates -> dilat", function() {deepEqual( Stem("dilates"), "dilat");});
test("dilating -> dilat", function() {deepEqual( Stem("dilating"), "dilat");});
test("dilatory -> dilatori", function() {deepEqual( Stem("dilatory"), "dilatori");});
test("dilemma -> dilemma", function() {deepEqual( Stem("dilemma"), "dilemma");});
test("dilettanti -> dilettanti", function() {deepEqual( Stem("dilettanti"), "dilettanti");});
test("diligence -> dilig", function() {deepEqual( Stem("diligence"), "dilig");});
test("diligent -> dilig", function() {deepEqual( Stem("diligent"), "dilig");});
test("diligently -> dilig", function() {deepEqual( Stem("diligently"), "dilig");});
test("diluted -> dilut", function() {deepEqual( Stem("diluted"), "dilut");});
test("dim -> dim", function() {deepEqual( Stem("dim"), "dim");});
test("dimension -> dimens", function() {deepEqual( Stem("dimension"), "dimens");});
test("dimensions -> dimens", function() {deepEqual( Stem("dimensions"), "dimens");});
test("diminish -> diminish", function() {deepEqual( Stem("diminish"), "diminish");});
test("diminished -> diminish", function() {deepEqual( Stem("diminished"), "diminish");});
test("diminishes -> diminish", function() {deepEqual( Stem("diminishes"), "diminish");});
test("diminishing -> diminish", function() {deepEqual( Stem("diminishing"), "diminish");});
test("diminution -> diminut", function() {deepEqual( Stem("diminution"), "diminut");});
test("diminutive -> diminut", function() {deepEqual( Stem("diminutive"), "diminut");});
test("dimity -> dimiti", function() {deepEqual( Stem("dimity"), "dimiti");});
test("dimly -> dim", function() {deepEqual( Stem("dimly"), "dim");});
test("dimmed -> dim", function() {deepEqual( Stem("dimmed"), "dim");});
test("dimple -> dimpl", function() {deepEqual( Stem("dimple"), "dimpl");});
test("dimpled -> dimpl", function() {deepEqual( Stem("dimpled"), "dimpl");});
test("dimpling -> dimpl", function() {deepEqual( Stem("dimpling"), "dimpl");});
test("din -> din", function() {deepEqual( Stem("din"), "din");});
test("dine -> dine", function() {deepEqual( Stem("dine"), "dine");});
test("dined -> dine", function() {deepEqual( Stem("dined"), "dine");});
test("dines -> dine", function() {deepEqual( Stem("dines"), "dine");});
test("ding -> ding", function() {deepEqual( Stem("ding"), "ding");});
test("dingey -> dingey", function() {deepEqual( Stem("dingey"), "dingey");});
test("dingleby -> dinglebi", function() {deepEqual( Stem("dingleby"), "dinglebi");});
test("dingo -> dingo", function() {deepEqual( Stem("dingo"), "dingo");});
test("dingy -> dingi", function() {deepEqual( Stem("dingy"), "dingi");});
test("dining -> dine", function() {deepEqual( Stem("dining"), "dine");});
test("dinner -> dinner", function() {deepEqual( Stem("dinner"), "dinner");});
test("dinners -> dinner", function() {deepEqual( Stem("dinners"), "dinner");});
test("dinnot -> dinnot", function() {deepEqual( Stem("dinnot"), "dinnot");});
test("dint -> dint", function() {deepEqual( Stem("dint"), "dint");});
test("diocese -> dioces", function() {deepEqual( Stem("diocese"), "dioces");});
test("diodon -> diodon", function() {deepEqual( Stem("diodon"), "diodon");});
test("diopaea -> diopaea", function() {deepEqual( Stem("diopaea"), "diopaea");});
test("diorgeenes -> diorgeen", function() {deepEqual( Stem("diorgeenes"), "diorgeen");});
test("dios -> dio", function() {deepEqual( Stem("dios"), "dio");});
test("dip -> dip", function() {deepEqual( Stem("dip"), "dip");});
test("diplomacy -> diplomaci", function() {deepEqual( Stem("diplomacy"), "diplomaci");});
test("diplomatic -> diplomat", function() {deepEqual( Stem("diplomatic"), "diplomat");});
test("diplomatical -> diplomat", function() {deepEqual( Stem("diplomatical"), "diplomat");});
test("diplomats -> diplomat", function() {deepEqual( Stem("diplomats"), "diplomat");});
test("dipped -> dip", function() {deepEqual( Stem("dipped"), "dip");});
test("dipping -> dip", function() {deepEqual( Stem("dipping"), "dip");});
test("dips -> dip", function() {deepEqual( Stem("dips"), "dip");});
test("diptera -> diptera", function() {deepEqual( Stem("diptera"), "diptera");});
test("dire -> dire", function() {deepEqual( Stem("dire"), "dire");});
test("direcfly -> direcfli", function() {deepEqual( Stem("direcfly"), "direcfli");});
test("direct -> direct", function() {deepEqual( Stem("direct"), "direct");});
test("directed -> direct", function() {deepEqual( Stem("directed"), "direct");});
test("directing -> direct", function() {deepEqual( Stem("directing"), "direct");});
test("direction -> direct", function() {deepEqual( Stem("direction"), "direct");});
test("directions -> direct", function() {deepEqual( Stem("directions"), "direct");});
test("directly -> direct", function() {deepEqual( Stem("directly"), "direct");});
test("director -> director", function() {deepEqual( Stem("director"), "director");});
test("directors -> director", function() {deepEqual( Stem("directors"), "director");});
test("directory -> directori", function() {deepEqual( Stem("directory"), "directori");});
test("directress -> directress", function() {deepEqual( Stem("directress"), "directress");});
test("directs -> direct", function() {deepEqual( Stem("directs"), "direct");});
test("direfully -> dire", function() {deepEqual( Stem("direfully"), "dire");});
test("dirt -> dirt", function() {deepEqual( Stem("dirt"), "dirt");});
test("dirtied -> dirti", function() {deepEqual( Stem("dirtied"), "dirti");});
test("dirtier -> dirtier", function() {deepEqual( Stem("dirtier"), "dirtier");});
test("dirtiest -> dirtiest", function() {deepEqual( Stem("dirtiest"), "dirtiest");});
test("dirty -> dirti", function() {deepEqual( Stem("dirty"), "dirti");});
test("disable -> disabl", function() {deepEqual( Stem("disable"), "disabl");});
test("disabled -> disabl", function() {deepEqual( Stem("disabled"), "disabl");});
test("disadvantage -> disadvantag", function() {deepEqual( Stem("disadvantage"), "disadvantag");});
test("disadvantages -> disadvantag", function() {deepEqual( Stem("disadvantages"), "disadvantag");});
test("disagree -> disagre", function() {deepEqual( Stem("disagree"), "disagre");});
test("disagreeable -> disagre", function() {deepEqual( Stem("disagreeable"), "disagre");});
test("disagreeably -> disagre", function() {deepEqual( Stem("disagreeably"), "disagre");});
test("disagreed -> disagre", function() {deepEqual( Stem("disagreed"), "disagre");});
test("disagreeing -> disagre", function() {deepEqual( Stem("disagreeing"), "disagre");});
test("disagreement -> disagr", function() {deepEqual( Stem("disagreement"), "disagr");});
test("disappear -> disappear", function() {deepEqual( Stem("disappear"), "disappear");});
test("disappearance -> disappear", function() {deepEqual( Stem("disappearance"), "disappear");});
test("disappeared -> disappear", function() {deepEqual( Stem("disappeared"), "disappear");});
test("disappearing -> disappear", function() {deepEqual( Stem("disappearing"), "disappear");});
test("disappears -> disappear", function() {deepEqual( Stem("disappears"), "disappear");});
test("disappoint -> disappoint", function() {deepEqual( Stem("disappoint"), "disappoint");});
test("disappointed -> disappoint", function() {deepEqual( Stem("disappointed"), "disappoint");});
test("disappointing -> disappoint", function() {deepEqual( Stem("disappointing"), "disappoint");});
test("disappointment -> disappoint", function() {deepEqual( Stem("disappointment"), "disappoint");});
test("disappointments -> disappoint", function() {deepEqual( Stem("disappointments"), "disappoint");});
test("disappoints -> disappoint", function() {deepEqual( Stem("disappoints"), "disappoint");});
test("disapprobation -> disapprob", function() {deepEqual( Stem("disapprobation"), "disapprob");});
test("disapproval -> disapprov", function() {deepEqual( Stem("disapproval"), "disapprov");});
test("disapprove -> disapprov", function() {deepEqual( Stem("disapprove"), "disapprov");});
test("disapproved -> disapprov", function() {deepEqual( Stem("disapproved"), "disapprov");});
test("disapproves -> disapprov", function() {deepEqual( Stem("disapproves"), "disapprov");});
test("disapproving -> disapprov", function() {deepEqual( Stem("disapproving"), "disapprov");});
test("disarm -> disarm", function() {deepEqual( Stem("disarm"), "disarm");});
test("disarmed -> disarm", function() {deepEqual( Stem("disarmed"), "disarm");});
test("disarming -> disarm", function() {deepEqual( Stem("disarming"), "disarm");});
test("disarranged -> disarrang", function() {deepEqual( Stem("disarranged"), "disarrang");});
test("disarrangement -> disarrang", function() {deepEqual( Stem("disarrangement"), "disarrang");});
test("disarray -> disarray", function() {deepEqual( Stem("disarray"), "disarray");});
test("disaster -> disast", function() {deepEqual( Stem("disaster"), "disast");});
test("disastrous -> disastr", function() {deepEqual( Stem("disastrous"), "disastr");});
test("disavow -> disavow", function() {deepEqual( Stem("disavow"), "disavow");});
test("disavowal -> disavow", function() {deepEqual( Stem("disavowal"), "disavow");});
test("disavowals -> disavow", function() {deepEqual( Stem("disavowals"), "disavow");});
test("disband -> disband", function() {deepEqual( Stem("disband"), "disband");});
test("disbelief -> disbelief", function() {deepEqual( Stem("disbelief"), "disbelief");});
test("disbelieve -> disbeliev", function() {deepEqual( Stem("disbelieve"), "disbeliev");});
test("disbelieved -> disbeliev", function() {deepEqual( Stem("disbelieved"), "disbeliev");});
test("disbelieving -> disbeliev", function() {deepEqual( Stem("disbelieving"), "disbeliev");});
test("discard -> discard", function() {deepEqual( Stem("discard"), "discard");});
test("discarded -> discard", function() {deepEqual( Stem("discarded"), "discard");});
test("discern -> discern", function() {deepEqual( Stem("discern"), "discern");});
test("discerned -> discern", function() {deepEqual( Stem("discerned"), "discern");});
test("discernible -> discern", function() {deepEqual( Stem("discernible"), "discern");});
test("discerning -> discern", function() {deepEqual( Stem("discerning"), "discern");});
test("discernment -> discern", function() {deepEqual( Stem("discernment"), "discern");});
test("discharge -> discharg", function() {deepEqual( Stem("discharge"), "discharg");});
test("discharged -> discharg", function() {deepEqual( Stem("discharged"), "discharg");});
test("discharges -> discharg", function() {deepEqual( Stem("discharges"), "discharg");});
test("discharging -> discharg", function() {deepEqual( Stem("discharging"), "discharg");});
test("disciples -> discipl", function() {deepEqual( Stem("disciples"), "discipl");});
test("disciplinary -> disciplinari", function() {deepEqual( Stem("disciplinary"), "disciplinari");});
test("discipline -> disciplin", function() {deepEqual( Stem("discipline"), "disciplin");});
test("disciplined -> disciplin", function() {deepEqual( Stem("disciplined"), "disciplin");});
test("disciplining -> disciplin", function() {deepEqual( Stem("disciplining"), "disciplin");});
test("disclaimed -> disclaim", function() {deepEqual( Stem("disclaimed"), "disclaim");});
test("disclose -> disclos", function() {deepEqual( Stem("disclose"), "disclos");});
test("disclosed -> disclos", function() {deepEqual( Stem("disclosed"), "disclos");});
test("disclosing -> disclos", function() {deepEqual( Stem("disclosing"), "disclos");});
test("disclosure -> disclosur", function() {deepEqual( Stem("disclosure"), "disclosur");});
test("disclosures -> disclosur", function() {deepEqual( Stem("disclosures"), "disclosur");});
test("discoloration -> discolor", function() {deepEqual( Stem("discoloration"), "discolor");});
test("discoloured -> discolour", function() {deepEqual( Stem("discoloured"), "discolour");});
test("discolouring -> discolour", function() {deepEqual( Stem("discolouring"), "discolour");});
test("discomfited -> discomfit", function() {deepEqual( Stem("discomfited"), "discomfit");});
test("discomfiture -> discomfitur", function() {deepEqual( Stem("discomfiture"), "discomfitur");});
test("discomfort -> discomfort", function() {deepEqual( Stem("discomfort"), "discomfort");});
test("discomforts -> discomfort", function() {deepEqual( Stem("discomforts"), "discomfort");});
test("discompose -> discompos", function() {deepEqual( Stem("discompose"), "discompos");});
test("discomposed -> discompos", function() {deepEqual( Stem("discomposed"), "discompos");});
test("discomposure -> discomposur", function() {deepEqual( Stem("discomposure"), "discomposur");});
test("disconcert -> disconcert", function() {deepEqual( Stem("disconcert"), "disconcert");});
test("disconcerted -> disconcert", function() {deepEqual( Stem("disconcerted"), "disconcert");});
test("disconnected -> disconnect", function() {deepEqual( Stem("disconnected"), "disconnect");});
test("disconsolate -> disconsol", function() {deepEqual( Stem("disconsolate"), "disconsol");});
test("disconsolately -> disconsol", function() {deepEqual( Stem("disconsolately"), "disconsol");});
test("discontended -> discontend", function() {deepEqual( Stem("discontended"), "discontend");});
test("discontent -> discont", function() {deepEqual( Stem("discontent"), "discont");});
test("discontented -> discont", function() {deepEqual( Stem("discontented"), "discont");});
test("discontentedly -> discont", function() {deepEqual( Stem("discontentedly"), "discont");});
test("discontinuance -> discontinu", function() {deepEqual( Stem("discontinuance"), "discontinu");});
test("discontinue -> discontinu", function() {deepEqual( Stem("discontinue"), "discontinu");});
test("discontinued -> discontinu", function() {deepEqual( Stem("discontinued"), "discontinu");});
test("discord -> discord", function() {deepEqual( Stem("discord"), "discord");});
test("discordant -> discord", function() {deepEqual( Stem("discordant"), "discord");});
test("discordantly -> discord", function() {deepEqual( Stem("discordantly"), "discord");});
test("discords -> discord", function() {deepEqual( Stem("discords"), "discord");});
test("discount -> discount", function() {deepEqual( Stem("discount"), "discount");});
test("discountenanced -> discountenanc", function() {deepEqual( Stem("discountenanced"), "discountenanc");});
test("discounters -> discount", function() {deepEqual( Stem("discounters"), "discount");});
test("discounting -> discount", function() {deepEqual( Stem("discounting"), "discount");});
test("discourage -> discourag", function() {deepEqual( Stem("discourage"), "discourag");});
test("discouraged -> discourag", function() {deepEqual( Stem("discouraged"), "discourag");});
test("discouragement -> discourag", function() {deepEqual( Stem("discouragement"), "discourag");});
test("discourages -> discourag", function() {deepEqual( Stem("discourages"), "discourag");});
test("discouraging -> discourag", function() {deepEqual( Stem("discouraging"), "discourag");});
test("discourse -> discours", function() {deepEqual( Stem("discourse"), "discours");});
test("discoursed -> discours", function() {deepEqual( Stem("discoursed"), "discours");});
test("discourses -> discours", function() {deepEqual( Stem("discourses"), "discours");});
test("discoursing -> discours", function() {deepEqual( Stem("discoursing"), "discours");});
test("discourteous -> discourt", function() {deepEqual( Stem("discourteous"), "discourt");});
test("discourtesy -> discourtesi", function() {deepEqual( Stem("discourtesy"), "discourtesi");});
test("discover -> discov", function() {deepEqual( Stem("discover"), "discov");});
test("discoverable -> discover", function() {deepEqual( Stem("discoverable"), "discover");});
test("discovered -> discov", function() {deepEqual( Stem("discovered"), "discov");});
test("discoverer -> discover", function() {deepEqual( Stem("discoverer"), "discover");});
test("discoverers -> discover", function() {deepEqual( Stem("discoverers"), "discover");});
test("discoveries -> discoveri", function() {deepEqual( Stem("discoveries"), "discoveri");});
test("discoverin -> discoverin", function() {deepEqual( Stem("discoverin"), "discoverin");});
test("discovering -> discov", function() {deepEqual( Stem("discovering"), "discov");});
test("discovers -> discov", function() {deepEqual( Stem("discovers"), "discov");});
test("discovery -> discoveri", function() {deepEqual( Stem("discovery"), "discoveri");});
test("discredit -> discredit", function() {deepEqual( Stem("discredit"), "discredit");});
test("discreditable -> discredit", function() {deepEqual( Stem("discreditable"), "discredit");});
test("discreet -> discreet", function() {deepEqual( Stem("discreet"), "discreet");});
test("discreetest -> discreetest", function() {deepEqual( Stem("discreetest"), "discreetest");});
test("discreetly -> discreet", function() {deepEqual( Stem("discreetly"), "discreet");});
test("discretion -> discret", function() {deepEqual( Stem("discretion"), "discret");});
test("discriminate -> discrimin", function() {deepEqual( Stem("discriminate"), "discrimin");});
test("discrimination -> discrimin", function() {deepEqual( Stem("discrimination"), "discrimin");});
test("discursive -> discurs", function() {deepEqual( Stem("discursive"), "discurs");});
test("discuss -> discuss", function() {deepEqual( Stem("discuss"), "discuss");});
test("discussed -> discuss", function() {deepEqual( Stem("discussed"), "discuss");});
test("discusses -> discuss", function() {deepEqual( Stem("discusses"), "discuss");});
test("discussing -> discuss", function() {deepEqual( Stem("discussing"), "discuss");});
test("discussion -> discuss", function() {deepEqual( Stem("discussion"), "discuss");});
test("discussions -> discuss", function() {deepEqual( Stem("discussions"), "discuss");});
test("disdain -> disdain", function() {deepEqual( Stem("disdain"), "disdain");});
test("disdained -> disdain", function() {deepEqual( Stem("disdained"), "disdain");});
test("disdainful -> disdain", function() {deepEqual( Stem("disdainful"), "disdain");});
test("disdainfully -> disdain", function() {deepEqual( Stem("disdainfully"), "disdain");});
test("disdaining -> disdain", function() {deepEqual( Stem("disdaining"), "disdain");});
test("disease -> diseas", function() {deepEqual( Stem("disease"), "diseas");});
test("diseased -> diseas", function() {deepEqual( Stem("diseased"), "diseas");});
test("diseases -> diseas", function() {deepEqual( Stem("diseases"), "diseas");});
test("disembarrassed -> disembarrass", function() {deepEqual( Stem("disembarrassed"), "disembarrass");});
test("disenchanted -> disench", function() {deepEqual( Stem("disenchanted"), "disench");});
test("disenchantment -> disenchant", function() {deepEqual( Stem("disenchantment"), "disenchant");});
test("disengage -> disengag", function() {deepEqual( Stem("disengage"), "disengag");});
test("disengaged -> disengag", function() {deepEqual( Stem("disengaged"), "disengag");});
test("disengages -> disengag", function() {deepEqual( Stem("disengages"), "disengag");});
test("disengaging -> disengag", function() {deepEqual( Stem("disengaging"), "disengag");});
test("disentangle -> disentangl", function() {deepEqual( Stem("disentangle"), "disentangl");});
test("disentangles -> disentangl", function() {deepEqual( Stem("disentangles"), "disentangl");});
test("disestablished -> disestablish", function() {deepEqual( Stem("disestablished"), "disestablish");});
test("disfavour -> disfavour", function() {deepEqual( Stem("disfavour"), "disfavour");});
test("disfigured -> disfigur", function() {deepEqual( Stem("disfigured"), "disfigur");});
test("disfigurement -> disfigur", function() {deepEqual( Stem("disfigurement"), "disfigur");});
test("disfigurements -> disfigur", function() {deepEqual( Stem("disfigurements"), "disfigur");});
test("disgorged -> disgorg", function() {deepEqual( Stem("disgorged"), "disgorg");});
test("disgorging -> disgorg", function() {deepEqual( Stem("disgorging"), "disgorg");});
test("disgrace -> disgrac", function() {deepEqual( Stem("disgrace"), "disgrac");});
test("disgraced -> disgrac", function() {deepEqual( Stem("disgraced"), "disgrac");});
test("disgraceful -> disgrac", function() {deepEqual( Stem("disgraceful"), "disgrac");});
test("disgraces -> disgrac", function() {deepEqual( Stem("disgraces"), "disgrac");});
test("disgracing -> disgrac", function() {deepEqual( Stem("disgracing"), "disgrac");});
test("disguise -> disguis", function() {deepEqual( Stem("disguise"), "disguis");});
test("disguised -> disguis", function() {deepEqual( Stem("disguised"), "disguis");});
test("disguises -> disguis", function() {deepEqual( Stem("disguises"), "disguis");});
test("disguising -> disguis", function() {deepEqual( Stem("disguising"), "disguis");});
test("disgust -> disgust", function() {deepEqual( Stem("disgust"), "disgust");});
test("disgusted -> disgust", function() {deepEqual( Stem("disgusted"), "disgust");});
test("disgusting -> disgust", function() {deepEqual( Stem("disgusting"), "disgust");});
test("disgustingly -> disgust", function() {deepEqual( Stem("disgustingly"), "disgust");});
test("disgusts -> disgust", function() {deepEqual( Stem("disgusts"), "disgust");});
test("dish -> dish", function() {deepEqual( Stem("dish"), "dish");});
test("dishabille -> dishabill", function() {deepEqual( Stem("dishabille"), "dishabill");});
test("disheartened -> dishearten", function() {deepEqual( Stem("disheartened"), "dishearten");});
test("disheartening -> dishearten", function() {deepEqual( Stem("disheartening"), "dishearten");});
test("dished -> dish", function() {deepEqual( Stem("dished"), "dish");});
test("dishes -> dish", function() {deepEqual( Stem("dishes"), "dish");});
test("dishevelled -> dishevel", function() {deepEqual( Stem("dishevelled"), "dishevel");});
test("dishonest -> dishonest", function() {deepEqual( Stem("dishonest"), "dishonest");});
test("dishonestly -> dishonest", function() {deepEqual( Stem("dishonestly"), "dishonest");});
test("dishonesty -> dishonesti", function() {deepEqual( Stem("dishonesty"), "dishonesti");});
test("dishonour -> dishonour", function() {deepEqual( Stem("dishonour"), "dishonour");});
test("dishonourable -> dishonour", function() {deepEqual( Stem("dishonourable"), "dishonour");});
test("dishonoured -> dishonour", function() {deepEqual( Stem("dishonoured"), "dishonour");});
test("dishonouring -> dishonour", function() {deepEqual( Stem("dishonouring"), "dishonour");});
test("disillusion -> disillus", function() {deepEqual( Stem("disillusion"), "disillus");});
test("disillusioned -> disillus", function() {deepEqual( Stem("disillusioned"), "disillus");});
test("disinclination -> disinclin", function() {deepEqual( Stem("disinclination"), "disinclin");});
test("disinclined -> disinclin", function() {deepEqual( Stem("disinclined"), "disinclin");});
test("disinherit -> disinherit", function() {deepEqual( Stem("disinherit"), "disinherit");});
test("disinherits -> disinherit", function() {deepEqual( Stem("disinherits"), "disinherit");});
test("disintegration -> disintegr", function() {deepEqual( Stem("disintegration"), "disintegr");});
test("disinterested -> disinterest", function() {deepEqual( Stem("disinterested"), "disinterest");});
test("disinterestedly -> disinterest", function() {deepEqual( Stem("disinterestedly"), "disinterest");});
test("disinterestedness -> disinterested", function() {deepEqual( Stem("disinterestedness"), "disinterested");});
test("disjoin -> disjoin", function() {deepEqual( Stem("disjoin"), "disjoin");});
test("disjointed -> disjoint", function() {deepEqual( Stem("disjointed"), "disjoint");});
test("disk -> disk", function() {deepEqual( Stem("disk"), "disk");});
test("dislike -> dislik", function() {deepEqual( Stem("dislike"), "dislik");});
test("disliked -> dislik", function() {deepEqual( Stem("disliked"), "dislik");});
test("dislikes -> dislik", function() {deepEqual( Stem("dislikes"), "dislik");});
test("disliking -> dislik", function() {deepEqual( Stem("disliking"), "dislik");});
test("dislocated -> disloc", function() {deepEqual( Stem("dislocated"), "disloc");});
test("dislocation -> disloc", function() {deepEqual( Stem("dislocation"), "disloc");});
test("dislodge -> dislodg", function() {deepEqual( Stem("dislodge"), "dislodg");});
test("dismal -> dismal", function() {deepEqual( Stem("dismal"), "dismal");});
test("dismally -> dismal", function() {deepEqual( Stem("dismally"), "dismal");});
test("dismantle -> dismantl", function() {deepEqual( Stem("dismantle"), "dismantl");});
test("dismantled -> dismantl", function() {deepEqual( Stem("dismantled"), "dismantl");});
test("dismay -> dismay", function() {deepEqual( Stem("dismay"), "dismay");});
test("dismayed -> dismay", function() {deepEqual( Stem("dismayed"), "dismay");});
test("dismiss -> dismiss", function() {deepEqual( Stem("dismiss"), "dismiss");});
test("dismissal -> dismiss", function() {deepEqual( Stem("dismissal"), "dismiss");});
test("dismissed -> dismiss", function() {deepEqual( Stem("dismissed"), "dismiss");});
test("dismisses -> dismiss", function() {deepEqual( Stem("dismisses"), "dismiss");});
test("dismissing -> dismiss", function() {deepEqual( Stem("dismissing"), "dismiss");});
test("dismount -> dismount", function() {deepEqual( Stem("dismount"), "dismount");});
test("dismounted -> dismount", function() {deepEqual( Stem("dismounted"), "dismount");});
test("disobedience -> disobedi", function() {deepEqual( Stem("disobedience"), "disobedi");});
test("disobedient -> disobedi", function() {deepEqual( Stem("disobedient"), "disobedi");});
test("disobey -> disobey", function() {deepEqual( Stem("disobey"), "disobey");});
test("disobeyed -> disobey", function() {deepEqual( Stem("disobeyed"), "disobey");});
test("disorder -> disord", function() {deepEqual( Stem("disorder"), "disord");});
test("disordered -> disord", function() {deepEqual( Stem("disordered"), "disord");});
test("disorderly -> disord", function() {deepEqual( Stem("disorderly"), "disord");});
test("disorders -> disord", function() {deepEqual( Stem("disorders"), "disord");});
test("disorganization -> disorgan", function() {deepEqual( Stem("disorganization"), "disorgan");});
test("disown -> disown", function() {deepEqual( Stem("disown"), "disown");});
test("disowned -> disown", function() {deepEqual( Stem("disowned"), "disown");});
test("disparage -> disparag", function() {deepEqual( Stem("disparage"), "disparag");});
test("disparagement -> disparag", function() {deepEqual( Stem("disparagement"), "disparag");});
test("disparaging -> disparag", function() {deepEqual( Stem("disparaging"), "disparag");});
test("dispassionate -> dispassion", function() {deepEqual( Stem("dispassionate"), "dispassion");});
test("dispassionately -> dispassion", function() {deepEqual( Stem("dispassionately"), "dispassion");});
test("dispatch -> dispatch", function() {deepEqual( Stem("dispatch"), "dispatch");});
test("dispatched -> dispatch", function() {deepEqual( Stem("dispatched"), "dispatch");});
test("dispatching -> dispatch", function() {deepEqual( Stem("dispatching"), "dispatch");});
test("dispel -> dispel", function() {deepEqual( Stem("dispel"), "dispel");});
test("dispelled -> dispel", function() {deepEqual( Stem("dispelled"), "dispel");});
test("dispensation -> dispens", function() {deepEqual( Stem("dispensation"), "dispens");});
test("dispense -> dispens", function() {deepEqual( Stem("dispense"), "dispens");});
test("dispensed -> dispens", function() {deepEqual( Stem("dispensed"), "dispens");});
test("dispenses -> dispens", function() {deepEqual( Stem("dispenses"), "dispens");});
test("dispensing -> dispens", function() {deepEqual( Stem("dispensing"), "dispens");});
test("disperse -> dispers", function() {deepEqual( Stem("disperse"), "dispers");});
test("dispersed -> dispers", function() {deepEqual( Stem("dispersed"), "dispers");});
test("disperses -> dispers", function() {deepEqual( Stem("disperses"), "dispers");});
test("dispersing -> dispers", function() {deepEqual( Stem("dispersing"), "dispers");});
test("dispirited -> dispirit", function() {deepEqual( Stem("dispirited"), "dispirit");});
test("displaced -> displac", function() {deepEqual( Stem("displaced"), "displac");});
test("displacement -> displac", function() {deepEqual( Stem("displacement"), "displac");});
test("displaces -> displac", function() {deepEqual( Stem("displaces"), "displac");});
test("displacing -> displac", function() {deepEqual( Stem("displacing"), "displac");});
test("display -> display", function() {deepEqual( Stem("display"), "display");});
test("displayed -> display", function() {deepEqual( Stem("displayed"), "display");});
test("displaying -> display", function() {deepEqual( Stem("displaying"), "display");});
test("displays -> display", function() {deepEqual( Stem("displays"), "display");});
test("displease -> displeas", function() {deepEqual( Stem("displease"), "displeas");});
test("displeased -> displeas", function() {deepEqual( Stem("displeased"), "displeas");});
test("displeases -> displeas", function() {deepEqual( Stem("displeases"), "displeas");});
test("displeasing -> displeas", function() {deepEqual( Stem("displeasing"), "displeas");});
test("displeasure -> displeasur", function() {deepEqual( Stem("displeasure"), "displeasur");});
test("disposal -> dispos", function() {deepEqual( Stem("disposal"), "dispos");});
test("dispose -> dispos", function() {deepEqual( Stem("dispose"), "dispos");});
test("disposed -> dispos", function() {deepEqual( Stem("disposed"), "dispos");});
test("disposes -> dispos", function() {deepEqual( Stem("disposes"), "dispos");});
test("disposing -> dispos", function() {deepEqual( Stem("disposing"), "dispos");});
test("disposition -> disposit", function() {deepEqual( Stem("disposition"), "disposit");});
test("dispositions -> disposit", function() {deepEqual( Stem("dispositions"), "disposit");});
test("dispossess -> dispossess", function() {deepEqual( Stem("dispossess"), "dispossess");});
test("dispossessed -> dispossess", function() {deepEqual( Stem("dispossessed"), "dispossess");});
test("dispraise -> disprais", function() {deepEqual( Stem("dispraise"), "disprais");});
test("disproof -> disproof", function() {deepEqual( Stem("disproof"), "disproof");});
test("disproportionate -> disproportion", function() {deepEqual( Stem("disproportionate"), "disproportion");});
test("disproportionately -> disproportion", function() {deepEqual( Stem("disproportionately"), "disproportion");});
test("disproved -> disprov", function() {deepEqual( Stem("disproved"), "disprov");});
test("disproving -> disprov", function() {deepEqual( Stem("disproving"), "disprov");});
test("disputation -> disput", function() {deepEqual( Stem("disputation"), "disput");});
test("disputations -> disput", function() {deepEqual( Stem("disputations"), "disput");});
test("dispute -> disput", function() {deepEqual( Stem("dispute"), "disput");});
test("disputed -> disput", function() {deepEqual( Stem("disputed"), "disput");});
test("disputes -> disput", function() {deepEqual( Stem("disputes"), "disput");});
test("disputing -> disput", function() {deepEqual( Stem("disputing"), "disput");});
test("disqualification -> disqualif", function() {deepEqual( Stem("disqualification"), "disqualif");});
test("disquiet -> disquiet", function() {deepEqual( Stem("disquiet"), "disquiet");});
test("disquietude -> disquietud", function() {deepEqual( Stem("disquietude"), "disquietud");});
test("disregard -> disregard", function() {deepEqual( Stem("disregard"), "disregard");});
test("disregarded -> disregard", function() {deepEqual( Stem("disregarded"), "disregard");});
test("disregardful -> disregard", function() {deepEqual( Stem("disregardful"), "disregard");});
test("disregarding -> disregard", function() {deepEqual( Stem("disregarding"), "disregard");});
test("disregards -> disregard", function() {deepEqual( Stem("disregards"), "disregard");});
test("disreputable -> disreput", function() {deepEqual( Stem("disreputable"), "disreput");});
test("disrespect -> disrespect", function() {deepEqual( Stem("disrespect"), "disrespect");});
test("disrespectful -> disrespect", function() {deepEqual( Stem("disrespectful"), "disrespect");});
test("disrespectfully -> disrespect", function() {deepEqual( Stem("disrespectfully"), "disrespect");});
test("disruption -> disrupt", function() {deepEqual( Stem("disruption"), "disrupt");});
test("dissatisfaction -> dissatisfact", function() {deepEqual( Stem("dissatisfaction"), "dissatisfact");});
test("dissatisfied -> dissatisfi", function() {deepEqual( Stem("dissatisfied"), "dissatisfi");});
test("dissected -> dissect", function() {deepEqual( Stem("dissected"), "dissect");});
test("dissecting -> dissect", function() {deepEqual( Stem("dissecting"), "dissect");});
test("dissection -> dissect", function() {deepEqual( Stem("dissection"), "dissect");});
test("dissemble -> dissembl", function() {deepEqual( Stem("dissemble"), "dissembl");});
test("dissembler -> dissembl", function() {deepEqual( Stem("dissembler"), "dissembl");});
test("disseminated -> dissemin", function() {deepEqual( Stem("disseminated"), "dissemin");});
test("dissemination -> dissemin", function() {deepEqual( Stem("dissemination"), "dissemin");});
test("dissension -> dissens", function() {deepEqual( Stem("dissension"), "dissens");});
test("dissensions -> dissens", function() {deepEqual( Stem("dissensions"), "dissens");});
test("dissent -> dissent", function() {deepEqual( Stem("dissent"), "dissent");});
test("dissenter -> dissent", function() {deepEqual( Stem("dissenter"), "dissent");});
test("dissertation -> dissert", function() {deepEqual( Stem("dissertation"), "dissert");});
test("dissimilar -> dissimilar", function() {deepEqual( Stem("dissimilar"), "dissimilar");});
test("dissimulation -> dissimul", function() {deepEqual( Stem("dissimulation"), "dissimul");});
test("dissipate -> dissip", function() {deepEqual( Stem("dissipate"), "dissip");});
test("dissipated -> dissip", function() {deepEqual( Stem("dissipated"), "dissip");});
test("dissipating -> dissip", function() {deepEqual( Stem("dissipating"), "dissip");});
test("dissipation -> dissip", function() {deepEqual( Stem("dissipation"), "dissip");});
test("dissolute -> dissolut", function() {deepEqual( Stem("dissolute"), "dissolut");});
test("dissolution -> dissolut", function() {deepEqual( Stem("dissolution"), "dissolut");});
test("dissolve -> dissolv", function() {deepEqual( Stem("dissolve"), "dissolv");});
test("dissolved -> dissolv", function() {deepEqual( Stem("dissolved"), "dissolv");});
test("dissuade -> dissuad", function() {deepEqual( Stem("dissuade"), "dissuad");});
test("dissuaded -> dissuad", function() {deepEqual( Stem("dissuaded"), "dissuad");});
test("dissuasions -> dissuas", function() {deepEqual( Stem("dissuasions"), "dissuas");});
test("distanc -> distanc", function() {deepEqual( Stem("distanc"), "distanc");});
test("distance -> distanc", function() {deepEqual( Stem("distance"), "distanc");});
test("distanced -> distanc", function() {deepEqual( Stem("distanced"), "distanc");});
test("distances -> distanc", function() {deepEqual( Stem("distances"), "distanc");});
test("distant -> distant", function() {deepEqual( Stem("distant"), "distant");});
test("distantly -> distant", function() {deepEqual( Stem("distantly"), "distant");});
test("distaste -> distast", function() {deepEqual( Stem("distaste"), "distast");});
test("distasteful -> distast", function() {deepEqual( Stem("distasteful"), "distast");});
test("distempered -> distemp", function() {deepEqual( Stem("distempered"), "distemp");});
test("distended -> distend", function() {deepEqual( Stem("distended"), "distend");});
test("distending -> distend", function() {deepEqual( Stem("distending"), "distend");});
test("distilled -> distil", function() {deepEqual( Stem("distilled"), "distil");});
test("distinct -> distinct", function() {deepEqual( Stem("distinct"), "distinct");});
test("distinction -> distinct", function() {deepEqual( Stem("distinction"), "distinct");});
test("distinctions -> distinct", function() {deepEqual( Stem("distinctions"), "distinct");});
test("distinctive -> distinct", function() {deepEqual( Stem("distinctive"), "distinct");});
test("distinctly -> distinct", function() {deepEqual( Stem("distinctly"), "distinct");});
test("distinctness -> distinct", function() {deepEqual( Stem("distinctness"), "distinct");});
test("distinguish -> distinguish", function() {deepEqual( Stem("distinguish"), "distinguish");});
test("distinguishable -> distinguish", function() {deepEqual( Stem("distinguishable"), "distinguish");});
test("distinguished -> distinguish", function() {deepEqual( Stem("distinguished"), "distinguish");});
test("distinguishes -> distinguish", function() {deepEqual( Stem("distinguishes"), "distinguish");});
test("distinguishing -> distinguish", function() {deepEqual( Stem("distinguishing"), "distinguish");});
test("distinguons -> distinguon", function() {deepEqual( Stem("distinguons"), "distinguon");});
test("distort -> distort", function() {deepEqual( Stem("distort"), "distort");});
test("distorted -> distort", function() {deepEqual( Stem("distorted"), "distort");});
test("distortion -> distort", function() {deepEqual( Stem("distortion"), "distort");});
test("distortions -> distort", function() {deepEqual( Stem("distortions"), "distort");});
test("distract -> distract", function() {deepEqual( Stem("distract"), "distract");});
test("distracted -> distract", function() {deepEqual( Stem("distracted"), "distract");});
test("distractedly -> distract", function() {deepEqual( Stem("distractedly"), "distract");});
test("distracting -> distract", function() {deepEqual( Stem("distracting"), "distract");});
test("distraction -> distract", function() {deepEqual( Stem("distraction"), "distract");});
test("distracts -> distract", function() {deepEqual( Stem("distracts"), "distract");});
test("distraught -> distraught", function() {deepEqual( Stem("distraught"), "distraught");});
test("distress -> distress", function() {deepEqual( Stem("distress"), "distress");});
test("distressed -> distress", function() {deepEqual( Stem("distressed"), "distress");});
test("distresses -> distress", function() {deepEqual( Stem("distresses"), "distress");});
test("distressful -> distress", function() {deepEqual( Stem("distressful"), "distress");});
test("distressfully -> distress", function() {deepEqual( Stem("distressfully"), "distress");});
test("distressing -> distress", function() {deepEqual( Stem("distressing"), "distress");});
test("distribute -> distribut", function() {deepEqual( Stem("distribute"), "distribut");});
test("distributed -> distribut", function() {deepEqual( Stem("distributed"), "distribut");});
test("distributing -> distribut", function() {deepEqual( Stem("distributing"), "distribut");});
test("distribution -> distribut", function() {deepEqual( Stem("distribution"), "distribut");});
test("district -> district", function() {deepEqual( Stem("district"), "district");});
test("districts -> district", function() {deepEqual( Stem("districts"), "district");});
test("distrust -> distrust", function() {deepEqual( Stem("distrust"), "distrust");});
test("distrusted -> distrust", function() {deepEqual( Stem("distrusted"), "distrust");});
test("distrustful -> distrust", function() {deepEqual( Stem("distrustful"), "distrust");});
test("distrustfully -> distrust", function() {deepEqual( Stem("distrustfully"), "distrust");});
test("disturb -> disturb", function() {deepEqual( Stem("disturb"), "disturb");});
test("disturbance -> disturb", function() {deepEqual( Stem("disturbance"), "disturb");});
test("disturbances -> disturb", function() {deepEqual( Stem("disturbances"), "disturb");});
test("disturbed -> disturb", function() {deepEqual( Stem("disturbed"), "disturb");});
test("disturbing -> disturb", function() {deepEqual( Stem("disturbing"), "disturb");});
test("disturbs -> disturb", function() {deepEqual( Stem("disturbs"), "disturb");});
test("disused -> disus", function() {deepEqual( Stem("disused"), "disus");});
test("ditch -> ditch", function() {deepEqual( Stem("ditch"), "ditch");});
test("ditches -> ditch", function() {deepEqual( Stem("ditches"), "ditch");});
test("ditching -> ditch", function() {deepEqual( Stem("ditching"), "ditch");});
test("ditties -> ditti", function() {deepEqual( Stem("ditties"), "ditti");});
test("ditto -> ditto", function() {deepEqual( Stem("ditto"), "ditto");});
test("ditty -> ditti", function() {deepEqual( Stem("ditty"), "ditti");});
test("diurnal -> diurnal", function() {deepEqual( Stem("diurnal"), "diurnal");});
test("divan -> divan", function() {deepEqual( Stem("divan"), "divan");});
test("dive -> dive", function() {deepEqual( Stem("dive"), "dive");});
test("dived -> dive", function() {deepEqual( Stem("dived"), "dive");});
test("diver -> diver", function() {deepEqual( Stem("diver"), "diver");});
test("diverge -> diverg", function() {deepEqual( Stem("diverge"), "diverg");});
test("diverged -> diverg", function() {deepEqual( Stem("diverged"), "diverg");});
test("divergence -> diverg", function() {deepEqual( Stem("divergence"), "diverg");});
test("diverging -> diverg", function() {deepEqual( Stem("diverging"), "diverg");});
test("divers -> diver", function() {deepEqual( Stem("divers"), "diver");});
test("diverse -> divers", function() {deepEqual( Stem("diverse"), "divers");});
test("diversified -> diversifi", function() {deepEqual( Stem("diversified"), "diversifi");});
test("diversifying -> diversifi", function() {deepEqual( Stem("diversifying"), "diversifi");});
test("diversion -> divers", function() {deepEqual( Stem("diversion"), "divers");});
test("diversions -> divers", function() {deepEqual( Stem("diversions"), "divers");});
test("diversity -> divers", function() {deepEqual( Stem("diversity"), "divers");});
test("divert -> divert", function() {deepEqual( Stem("divert"), "divert");});
test("diverted -> divert", function() {deepEqual( Stem("diverted"), "divert");});
test("diverting -> divert", function() {deepEqual( Stem("diverting"), "divert");});
test("dives -> dive", function() {deepEqual( Stem("dives"), "dive");});
test("divest -> divest", function() {deepEqual( Stem("divest"), "divest");});
test("divested -> divest", function() {deepEqual( Stem("divested"), "divest");});
test("divesting -> divest", function() {deepEqual( Stem("divesting"), "divest");});
test("divide -> divid", function() {deepEqual( Stem("divide"), "divid");});
test("divided -> divid", function() {deepEqual( Stem("divided"), "divid");});
test("dividend -> dividend", function() {deepEqual( Stem("dividend"), "dividend");});
test("divides -> divid", function() {deepEqual( Stem("divides"), "divid");});
test("dividing -> divid", function() {deepEqual( Stem("dividing"), "divid");});
test("divine -> divin", function() {deepEqual( Stem("divine"), "divin");});
test("divined -> divin", function() {deepEqual( Stem("divined"), "divin");});
test("diviner -> divin", function() {deepEqual( Stem("diviner"), "divin");});
test("divines -> divin", function() {deepEqual( Stem("divines"), "divin");});
test("diving -> dive", function() {deepEqual( Stem("diving"), "dive");});
test("divining -> divin", function() {deepEqual( Stem("divining"), "divin");});
test("divinities -> divin", function() {deepEqual( Stem("divinities"), "divin");});
test("divinity -> divin", function() {deepEqual( Stem("divinity"), "divin");});
test("divisio -> divisio", function() {deepEqual( Stem("divisio"), "divisio");});
test("division -> divis", function() {deepEqual( Stem("division"), "divis");});
test("divisions -> divis", function() {deepEqual( Stem("divisions"), "divis");});
test("divn -> divn", function() {deepEqual( Stem("divn"), "divn");});
test("divorce -> divorc", function() {deepEqual( Stem("divorce"), "divorc");});
test("divorced -> divorc", function() {deepEqual( Stem("divorced"), "divorc");});
test("divulge -> divulg", function() {deepEqual( Stem("divulge"), "divulg");});
test("divulges -> divulg", function() {deepEqual( Stem("divulges"), "divulg");});
test("dixon -> dixon", function() {deepEqual( Stem("dixon"), "dixon");});
test("dizzier -> dizzier", function() {deepEqual( Stem("dizzier"), "dizzier");});
test("dizziness -> dizzi", function() {deepEqual( Stem("dizziness"), "dizzi");});
test("dizzy -> dizzi", function() {deepEqual( Stem("dizzy"), "dizzi");});
test("dmitri -> dmitri", function() {deepEqual( Stem("dmitri"), "dmitri");});
test("do -> do", function() {deepEqual( Stem("do"), "do");});
test("doant -> doant", function() {deepEqual( Stem("doant"), "doant");});
test("dobrizhoffen -> dobrizhoffen", function() {deepEqual( Stem("dobrizhoffen"), "dobrizhoffen");});
test("dobrizhoffer -> dobrizhoff", function() {deepEqual( Stem("dobrizhoffer"), "dobrizhoff");});
test("docile -> docil", function() {deepEqual( Stem("docile"), "docil");});
test("dock -> dock", function() {deepEqual( Stem("dock"), "dock");});
test("docks -> dock", function() {deepEqual( Stem("docks"), "dock");});
test("dockyard -> dockyard", function() {deepEqual( Stem("dockyard"), "dockyard");});
test("dockyards -> dockyard", function() {deepEqual( Stem("dockyards"), "dockyard");});
test("doctor -> doctor", function() {deepEqual( Stem("doctor"), "doctor");});
test("doctoring -> doctor", function() {deepEqual( Stem("doctoring"), "doctor");});
test("doctors -> doctor", function() {deepEqual( Stem("doctors"), "doctor");});
test("doctrine -> doctrin", function() {deepEqual( Stem("doctrine"), "doctrin");});
test("doctrines -> doctrin", function() {deepEqual( Stem("doctrines"), "doctrin");});
test("document -> document", function() {deepEqual( Stem("document"), "document");});
test("documentary -> documentari", function() {deepEqual( Stem("documentary"), "documentari");});
test("documents -> document", function() {deepEqual( Stem("documents"), "document");});
test("dod -> dod", function() {deepEqual( Stem("dod"), "dod");});
test("dodge -> dodg", function() {deepEqual( Stem("dodge"), "dodg");});
test("dodged -> dodg", function() {deepEqual( Stem("dodged"), "dodg");});
test("dodges -> dodg", function() {deepEqual( Stem("dodges"), "dodg");});
test("dodging -> dodg", function() {deepEqual( Stem("dodging"), "dodg");});
test("dodo -> dodo", function() {deepEqual( Stem("dodo"), "dodo");});
test("doe -> doe", function() {deepEqual( Stem("doe"), "doe");});
test("doers -> doer", function() {deepEqual( Stem("doers"), "doer");});
test("does -> doe", function() {deepEqual( Stem("does"), "doe");});
test("doesn -> doesn", function() {deepEqual( Stem("doesn"), "doesn");});
test("dog -> dog", function() {deepEqual( Stem("dog"), "dog");});
test("dogged -> dog", function() {deepEqual( Stem("dogged"), "dog");});
test("doggedly -> dog", function() {deepEqual( Stem("doggedly"), "dog");});
test("doggedness -> dogged", function() {deepEqual( Stem("doggedness"), "dogged");});
test("doggies -> doggi", function() {deepEqual( Stem("doggies"), "doggi");});
test("dogging -> dog", function() {deepEqual( Stem("dogging"), "dog");});
test("dogs -> dog", function() {deepEqual( Stem("dogs"), "dog");});
test("doin -> doin", function() {deepEqual( Stem("doin"), "doin");});
test("doing -> do", function() {deepEqual( Stem("doing"), "do");});
test("doings -> do", function() {deepEqual( Stem("doings"), "do");});
test("dole -> dole", function() {deepEqual( Stem("dole"), "dole");});
test("doleful -> dole", function() {deepEqual( Stem("doleful"), "dole");});
test("dolefully -> dole", function() {deepEqual( Stem("dolefully"), "dole");});
test("dolichonyx -> dolichonyx", function() {deepEqual( Stem("dolichonyx"), "dolichonyx");});
test("doll -> doll", function() {deepEqual( Stem("doll"), "doll");});
test("dollar -> dollar", function() {deepEqual( Stem("dollar"), "dollar");});
test("dollars -> dollar", function() {deepEqual( Stem("dollars"), "dollar");});
test("dolls -> doll", function() {deepEqual( Stem("dolls"), "doll");});
test("dolly -> dolli", function() {deepEqual( Stem("dolly"), "dolli");});
test("dolorous -> dolor", function() {deepEqual( Stem("dolorous"), "dolor");});
test("dolt -> dolt", function() {deepEqual( Stem("dolt"), "dolt");});
test("dom -> dom", function() {deepEqual( Stem("dom"), "dom");});
test("domain -> domain", function() {deepEqual( Stem("domain"), "domain");});
test("domains -> domain", function() {deepEqual( Stem("domains"), "domain");});
test("dome -> dome", function() {deepEqual( Stem("dome"), "dome");});
test("domestic -> domest", function() {deepEqual( Stem("domestic"), "domest");});
test("domesticated -> domest", function() {deepEqual( Stem("domesticated"), "domest");});
test("domestication -> domest", function() {deepEqual( Stem("domestication"), "domest");});
test("domestics -> domest", function() {deepEqual( Stem("domestics"), "domest");});
test("domiciled -> domicil", function() {deepEqual( Stem("domiciled"), "domicil");});
test("domidor -> domidor", function() {deepEqual( Stem("domidor"), "domidor");});
test("domidors -> domidor", function() {deepEqual( Stem("domidors"), "domidor");});
test("dominant -> domin", function() {deepEqual( Stem("dominant"), "domin");});
test("domination -> domin", function() {deepEqual( Stem("domination"), "domin");});
test("domineer -> domin", function() {deepEqual( Stem("domineer"), "domin");});
test("domineered -> domin", function() {deepEqual( Stem("domineered"), "domin");});
test("domineering -> domin", function() {deepEqual( Stem("domineering"), "domin");});
test("domingo -> domingo", function() {deepEqual( Stem("domingo"), "domingo");});
test("dominion -> dominion", function() {deepEqual( Stem("dominion"), "dominion");});
test("dominions -> dominion", function() {deepEqual( Stem("dominions"), "dominion");});
test("domino -> domino", function() {deepEqual( Stem("domino"), "domino");});
test("domo -> domo", function() {deepEqual( Stem("domo"), "domo");});
test("don -> don", function() {deepEqual( Stem("don"), "don");});
test("donatia -> donatia", function() {deepEqual( Stem("donatia"), "donatia");});
test("donation -> donat", function() {deepEqual( Stem("donation"), "donat");});
test("done -> done", function() {deepEqual( Stem("done"), "done");});
test("dong -> dong", function() {deepEqual( Stem("dong"), "dong");});
test("donkey -> donkey", function() {deepEqual( Stem("donkey"), "donkey");});
test("donkeys -> donkey", function() {deepEqual( Stem("donkeys"), "donkey");});
test("donnez -> donnez", function() {deepEqual( Stem("donnez"), "donnez");});
test("donny -> donni", function() {deepEqual( Stem("donny"), "donni");});
test("donnys -> donni", function() {deepEqual( Stem("donnys"), "donni");});
test("dont -> dont", function() {deepEqual( Stem("dont"), "dont");});
test("dooble -> doobl", function() {deepEqual( Stem("dooble"), "doobl");});
test("dooced -> dooc", function() {deepEqual( Stem("dooced"), "dooc");});
test("doodle -> doodl", function() {deepEqual( Stem("doodle"), "doodl");});
test("doodleites -> doodleit", function() {deepEqual( Stem("doodleites"), "doodleit");});
test("doom -> doom", function() {deepEqual( Stem("doom"), "doom");});
test("doomed -> doom", function() {deepEqual( Stem("doomed"), "doom");});
test("dooms -> doom", function() {deepEqual( Stem("dooms"), "doom");});
test("doomsday -> doomsday", function() {deepEqual( Stem("doomsday"), "doomsday");});
test("doon -> doon", function() {deepEqual( Stem("doon"), "doon");});
test("doonstairs -> doonstair", function() {deepEqual( Stem("doonstairs"), "doonstair");});
test("door -> door", function() {deepEqual( Stem("door"), "door");});
test("doorkeeper -> doorkeep", function() {deepEqual( Stem("doorkeeper"), "doorkeep");});
test("doors -> door", function() {deepEqual( Stem("doors"), "door");});
test("doorway -> doorway", function() {deepEqual( Stem("doorway"), "doorway");});
test("doorways -> doorway", function() {deepEqual( Stem("doorways"), "doorway");});
test("doos -> doo", function() {deepEqual( Stem("doos"), "doo");});
test("doozen -> doozen", function() {deepEqual( Stem("doozen"), "doozen");});
test("dora -> dora", function() {deepEqual( Stem("dora"), "dora");});
test("doris -> dori", function() {deepEqual( Stem("doris"), "dori");});
test("dorker -> dorker", function() {deepEqual( Stem("dorker"), "dorker");});
test("dormant -> dormant", function() {deepEqual( Stem("dormant"), "dormant");});
test("dormitory -> dormitori", function() {deepEqual( Stem("dormitory"), "dormitori");});
test("dormouse -> dormous", function() {deepEqual( Stem("dormouse"), "dormous");});
test("dorsal -> dorsal", function() {deepEqual( Stem("dorsal"), "dorsal");});
test("dose -> dose", function() {deepEqual( Stem("dose"), "dose");});
test("dosed -> dose", function() {deepEqual( Stem("dosed"), "dose");});
test("doses -> dose", function() {deepEqual( Stem("doses"), "dose");});
test("dost -> dost", function() {deepEqual( Stem("dost"), "dost");});
test("dostoevsky -> dostoevski", function() {deepEqual( Stem("dostoevsky"), "dostoevski");});
test("dotage -> dotag", function() {deepEqual( Stem("dotage"), "dotag");});
test("dotard -> dotard", function() {deepEqual( Stem("dotard"), "dotard");});
test("dote -> dote", function() {deepEqual( Stem("dote"), "dote");});
test("doted -> dote", function() {deepEqual( Stem("doted"), "dote");});
test("dotes -> dote", function() {deepEqual( Stem("dotes"), "dote");});
test("doth -> doth", function() {deepEqual( Stem("doth"), "doth");});
test("dotheboys -> dotheboy", function() {deepEqual( Stem("dotheboys"), "dotheboy");});
test("dothebys -> dothebi", function() {deepEqual( Stem("dothebys"), "dothebi");});
test("doting -> dote", function() {deepEqual( Stem("doting"), "dote");});
test("dots -> dot", function() {deepEqual( Stem("dots"), "dot");});
test("dotted -> dot", function() {deepEqual( Stem("dotted"), "dot");});
test("double -> doubl", function() {deepEqual( Stem("double"), "doubl");});
test("doubled -> doubl", function() {deepEqual( Stem("doubled"), "doubl");});
test("doubleday -> doubleday", function() {deepEqual( Stem("doubleday"), "doubleday");});
test("doubles -> doubl", function() {deepEqual( Stem("doubles"), "doubl");});
test("doubling -> doubl", function() {deepEqual( Stem("doubling"), "doubl");});
test("doubly -> doubli", function() {deepEqual( Stem("doubly"), "doubli");});
test("doubt -> doubt", function() {deepEqual( Stem("doubt"), "doubt");});
test("doubted -> doubt", function() {deepEqual( Stem("doubted"), "doubt");});
test("doubtful -> doubt", function() {deepEqual( Stem("doubtful"), "doubt");});
test("doubtfully -> doubt", function() {deepEqual( Stem("doubtfully"), "doubt");});
test("doubting -> doubt", function() {deepEqual( Stem("doubting"), "doubt");});
test("doubtingly -> doubt", function() {deepEqual( Stem("doubtingly"), "doubt");});
test("doubtless -> doubtless", function() {deepEqual( Stem("doubtless"), "doubtless");});
test("doubts -> doubt", function() {deepEqual( Stem("doubts"), "doubt");});
test("douches -> douch", function() {deepEqual( Stem("douches"), "douch");});
test("douglas -> dougla", function() {deepEqual( Stem("douglas"), "dougla");});
test("dounia -> dounia", function() {deepEqual( Stem("dounia"), "dounia");});
test("dourov -> dourov", function() {deepEqual( Stem("dourov"), "dourov");});
test("dove -> dove", function() {deepEqual( Stem("dove"), "dove");});
test("dover -> dover", function() {deepEqual( Stem("dover"), "dover");});
test("dovercourt -> dovercourt", function() {deepEqual( Stem("dovercourt"), "dovercourt");});
test("doves -> dove", function() {deepEqual( Stem("doves"), "dove");});
test("dovetailedness -> dovetailed", function() {deepEqual( Stem("dovetailedness"), "dovetailed");});
test("doveton -> doveton", function() {deepEqual( Stem("doveton"), "doveton");});
test("dowager -> dowag", function() {deepEqual( Stem("dowager"), "dowag");});
test("dowagers -> dowag", function() {deepEqual( Stem("dowagers"), "dowag");});
test("dowdles -> dowdl", function() {deepEqual( Stem("dowdles"), "dowdl");});
test("dowdy -> dowdi", function() {deepEqual( Stem("dowdy"), "dowdi");});
test("dower -> dower", function() {deepEqual( Stem("dower"), "dower");});
test("down -> down", function() {deepEqual( Stem("down"), "down");});
test("downcast -> downcast", function() {deepEqual( Stem("downcast"), "downcast");});
test("downfall -> downfal", function() {deepEqual( Stem("downfall"), "downfal");});
test("downfallings -> downfal", function() {deepEqual( Stem("downfallings"), "downfal");});
test("downhearted -> downheart", function() {deepEqual( Stem("downhearted"), "downheart");});
test("downing -> down", function() {deepEqual( Stem("downing"), "down");});
test("downright -> downright", function() {deepEqual( Stem("downright"), "downright");});
test("downs -> down", function() {deepEqual( Stem("downs"), "down");});
test("downstairs -> downstair", function() {deepEqual( Stem("downstairs"), "downstair");});
test("downward -> downward", function() {deepEqual( Stem("downward"), "downward");});
test("downwards -> downward", function() {deepEqual( Stem("downwards"), "downward");});
test("downy -> downi", function() {deepEqual( Stem("downy"), "downi");});
test("dowry -> dowri", function() {deepEqual( Stem("dowry"), "dowri");});
test("doze -> doze", function() {deepEqual( Stem("doze"), "doze");});
test("dozed -> doze", function() {deepEqual( Stem("dozed"), "doze");});
test("dozen -> dozen", function() {deepEqual( Stem("dozen"), "dozen");});
test("dozens -> dozen", function() {deepEqual( Stem("dozens"), "dozen");});
test("dozenth -> dozenth", function() {deepEqual( Stem("dozenth"), "dozenth");});
test("dozes -> doze", function() {deepEqual( Stem("dozes"), "doze");});
test("dozing -> doze", function() {deepEqual( Stem("dozing"), "doze");});
test("dr -> dr", function() {deepEqual( Stem("dr"), "dr");});
test("dra -> dra", function() {deepEqual( Stem("dra"), "dra");});
test("drab -> drab", function() {deepEqual( Stem("drab"), "drab");});
test("drabs -> drab", function() {deepEqual( Stem("drabs"), "drab");});
test("draft -> draft", function() {deepEqual( Stem("draft"), "draft");});
test("drafts -> draft", function() {deepEqual( Stem("drafts"), "draft");});
test("drag -> drag", function() {deepEqual( Stem("drag"), "drag");});
test("dragged -> drag", function() {deepEqual( Stem("dragged"), "drag");});
test("dragging -> drag", function() {deepEqual( Stem("dragging"), "drag");});
test("draggled -> draggl", function() {deepEqual( Stem("draggled"), "draggl");});
test("draggletails -> draggletail", function() {deepEqual( Stem("draggletails"), "draggletail");});
test("dragon -> dragon", function() {deepEqual( Stem("dragon"), "dragon");});
test("dragoon -> dragoon", function() {deepEqual( Stem("dragoon"), "dragoon");});
test("dragooning -> dragoon", function() {deepEqual( Stem("dragooning"), "dragoon");});
test("dragoons -> dragoon", function() {deepEqual( Stem("dragoons"), "dragoon");});
test("drags -> drag", function() {deepEqual( Stem("drags"), "drag");});
test("drain -> drain", function() {deepEqual( Stem("drain"), "drain");});
test("drainage -> drainag", function() {deepEqual( Stem("drainage"), "drainag");});
test("drained -> drain", function() {deepEqual( Stem("drained"), "drain");});
test("draining -> drain", function() {deepEqual( Stem("draining"), "drain");});
test("drains -> drain", function() {deepEqual( Stem("drains"), "drain");});
test("drake -> drake", function() {deepEqual( Stem("drake"), "drake");});
test("drakes -> drake", function() {deepEqual( Stem("drakes"), "drake");});
test("dram -> dram", function() {deepEqual( Stem("dram"), "dram");});
test("drama -> drama", function() {deepEqual( Stem("drama"), "drama");});
test("dramatic -> dramat", function() {deepEqual( Stem("dramatic"), "dramat");});
test("dramatically -> dramat", function() {deepEqual( Stem("dramatically"), "dramat");});
test("dramaticus -> dramaticus", function() {deepEqual( Stem("dramaticus"), "dramaticus");});
test("dramatise -> dramatis", function() {deepEqual( Stem("dramatise"), "dramatis");});
test("dramatised -> dramatis", function() {deepEqual( Stem("dramatised"), "dramatis");});
test("dramatist -> dramatist", function() {deepEqual( Stem("dramatist"), "dramatist");});
test("dramatists -> dramatist", function() {deepEqual( Stem("dramatists"), "dramatist");});
test("drank -> drank", function() {deepEqual( Stem("drank"), "drank");});
test("drap -> drap", function() {deepEqual( Stem("drap"), "drap");});
test("draperies -> draperi", function() {deepEqual( Stem("draperies"), "draperi");});
test("drapery -> draperi", function() {deepEqual( Stem("drapery"), "draperi");});
test("drat -> drat", function() {deepEqual( Stem("drat"), "drat");});
test("draught -> draught", function() {deepEqual( Stem("draught"), "draught");});
test("draughts -> draught", function() {deepEqual( Stem("draughts"), "draught");});
test("draughtsman -> draughtsman", function() {deepEqual( Stem("draughtsman"), "draughtsman");});
test("draw -> draw", function() {deepEqual( Stem("draw"), "draw");});
test("drawback -> drawback", function() {deepEqual( Stem("drawback"), "drawback");});
test("drawbacks -> drawback", function() {deepEqual( Stem("drawbacks"), "drawback");});
test("drawbridge -> drawbridg", function() {deepEqual( Stem("drawbridge"), "drawbridg");});
test("drawed -> draw", function() {deepEqual( Stem("drawed"), "draw");});
test("drawer -> drawer", function() {deepEqual( Stem("drawer"), "drawer");});
test("drawers -> drawer", function() {deepEqual( Stem("drawers"), "drawer");});
test("drawing -> draw", function() {deepEqual( Stem("drawing"), "draw");});
test("drawings -> draw", function() {deepEqual( Stem("drawings"), "draw");});
test("drawl -> drawl", function() {deepEqual( Stem("drawl"), "drawl");});
test("drawled -> drawl", function() {deepEqual( Stem("drawled"), "drawl");});
test("drawling -> drawl", function() {deepEqual( Stem("drawling"), "drawl");});
test("drawls -> drawl", function() {deepEqual( Stem("drawls"), "drawl");});
test("drawn -> drawn", function() {deepEqual( Stem("drawn"), "drawn");});
test("draws -> draw", function() {deepEqual( Stem("draws"), "draw");});
test("dray -> dray", function() {deepEqual( Stem("dray"), "dray");});
test("drays -> dray", function() {deepEqual( Stem("drays"), "dray");});
test("dread -> dread", function() {deepEqual( Stem("dread"), "dread");});
test("dreaded -> dread", function() {deepEqual( Stem("dreaded"), "dread");});
test("dreadful -> dread", function() {deepEqual( Stem("dreadful"), "dread");});
test("dreadfully -> dread", function() {deepEqual( Stem("dreadfully"), "dread");});
test("dreading -> dread", function() {deepEqual( Stem("dreading"), "dread");});
test("dreadnought -> dreadnought", function() {deepEqual( Stem("dreadnought"), "dreadnought");});
test("dream -> dream", function() {deepEqual( Stem("dream"), "dream");});
test("dreamed -> dream", function() {deepEqual( Stem("dreamed"), "dream");});
test("dreamer -> dreamer", function() {deepEqual( Stem("dreamer"), "dreamer");});
test("dreamily -> dreamili", function() {deepEqual( Stem("dreamily"), "dreamili");});
test("dreaminess -> dreami", function() {deepEqual( Stem("dreaminess"), "dreami");});
test("dreaming -> dream", function() {deepEqual( Stem("dreaming"), "dream");});
test("dreamings -> dream", function() {deepEqual( Stem("dreamings"), "dream");});
test("dreams -> dream", function() {deepEqual( Stem("dreams"), "dream");});
test("dreamt -> dreamt", function() {deepEqual( Stem("dreamt"), "dreamt");});
test("dreamy -> dreami", function() {deepEqual( Stem("dreamy"), "dreami");});
test("drear -> drear", function() {deepEqual( Stem("drear"), "drear");});
test("dreariness -> dreari", function() {deepEqual( Stem("dreariness"), "dreari");});
test("dreary -> dreari", function() {deepEqual( Stem("dreary"), "dreari");});
test("dregs -> dreg", function() {deepEqual( Stem("dregs"), "dreg");});
test("drenched -> drench", function() {deepEqual( Stem("drenched"), "drench");});
test("dresden -> dresden", function() {deepEqual( Stem("dresden"), "dresden");});
test("dress -> dress", function() {deepEqual( Stem("dress"), "dress");});
test("dressed -> dress", function() {deepEqual( Stem("dressed"), "dress");});
test("dresser -> dresser", function() {deepEqual( Stem("dresser"), "dresser");});
test("dresses -> dress", function() {deepEqual( Stem("dresses"), "dress");});
test("dressing -> dress", function() {deepEqual( Stem("dressing"), "dress");});
test("dressmaker -> dressmak", function() {deepEqual( Stem("dressmaker"), "dressmak");});
test("dressmakers -> dressmak", function() {deepEqual( Stem("dressmakers"), "dressmak");});
test("dressmaking -> dressmak", function() {deepEqual( Stem("dressmaking"), "dressmak");});
test("drest -> drest", function() {deepEqual( Stem("drest"), "drest");});
test("drew -> drew", function() {deepEqual( Stem("drew"), "drew");});
test("driblets -> driblet", function() {deepEqual( Stem("driblets"), "driblet");});
test("dried -> dri", function() {deepEqual( Stem("dried"), "dri");});
test("drier -> drier", function() {deepEqual( Stem("drier"), "drier");});
test("dries -> dri", function() {deepEqual( Stem("dries"), "dri");});
test("driest -> driest", function() {deepEqual( Stem("driest"), "driest");});
test("drift -> drift", function() {deepEqual( Stem("drift"), "drift");});
test("drifte -> drift", function() {deepEqual( Stem("drifte"), "drift");});
test("drifted -> drift", function() {deepEqual( Stem("drifted"), "drift");});
test("drifting -> drift", function() {deepEqual( Stem("drifting"), "drift");});
test("drifts -> drift", function() {deepEqual( Stem("drifts"), "drift");});
test("drigg -> drigg", function() {deepEqual( Stem("drigg"), "drigg");});
test("drilled -> drill", function() {deepEqual( Stem("drilled"), "drill");});
test("drily -> drili", function() {deepEqual( Stem("drily"), "drili");});
test("drink -> drink", function() {deepEqual( Stem("drink"), "drink");});
test("drinkable -> drinkabl", function() {deepEqual( Stem("drinkable"), "drinkabl");});
test("drinker -> drinker", function() {deepEqual( Stem("drinker"), "drinker");});
test("drinkers -> drinker", function() {deepEqual( Stem("drinkers"), "drinker");});
test("drinking -> drink", function() {deepEqual( Stem("drinking"), "drink");});
test("drinkings -> drink", function() {deepEqual( Stem("drinkings"), "drink");});
test("drinks -> drink", function() {deepEqual( Stem("drinks"), "drink");});
test("drip -> drip", function() {deepEqual( Stem("drip"), "drip");});
test("dripping -> drip", function() {deepEqual( Stem("dripping"), "drip");});
test("drips -> drip", function() {deepEqual( Stem("drips"), "drip");});
test("drive -> drive", function() {deepEqual( Stem("drive"), "drive");});
test("drivelling -> drivel", function() {deepEqual( Stem("drivelling"), "drivel");});
test("driven -> driven", function() {deepEqual( Stem("driven"), "driven");});
test("driver -> driver", function() {deepEqual( Stem("driver"), "driver");});
test("drivers -> driver", function() {deepEqual( Stem("drivers"), "driver");});
test("drives -> drive", function() {deepEqual( Stem("drives"), "drive");});
test("driving -> drive", function() {deepEqual( Stem("driving"), "drive");});
test("drizzle -> drizzl", function() {deepEqual( Stem("drizzle"), "drizzl");});
test("drizzling -> drizzl", function() {deepEqual( Stem("drizzling"), "drizzl");});
test("drizzly -> drizzli", function() {deepEqual( Stem("drizzly"), "drizzli");});
test("dro -> dro", function() {deepEqual( Stem("dro"), "dro");});
test("droite -> droit", function() {deepEqual( Stem("droite"), "droit");});
test("droll -> droll", function() {deepEqual( Stem("droll"), "droll");});
test("drollery -> drolleri", function() {deepEqual( Stem("drollery"), "drolleri");});
test("drolly -> drolli", function() {deepEqual( Stem("drolly"), "drolli");});
test("drone -> drone", function() {deepEqual( Stem("drone"), "drone");});
test("drones -> drone", function() {deepEqual( Stem("drones"), "drone");});
test("droonk -> droonk", function() {deepEqual( Stem("droonk"), "droonk");});
test("droop -> droop", function() {deepEqual( Stem("droop"), "droop");});
test("drooped -> droop", function() {deepEqual( Stem("drooped"), "droop");});
test("drooping -> droop", function() {deepEqual( Stem("drooping"), "droop");});
test("droops -> droop", function() {deepEqual( Stem("droops"), "droop");});
test("drop -> drop", function() {deepEqual( Stem("drop"), "drop");});
test("droppe -> dropp", function() {deepEqual( Stem("droppe"), "dropp");});
test("dropped -> drop", function() {deepEqual( Stem("dropped"), "drop");});
test("dropping -> drop", function() {deepEqual( Stem("dropping"), "drop");});
test("droppings -> drop", function() {deepEqual( Stem("droppings"), "drop");});
test("drops -> drop", function() {deepEqual( Stem("drops"), "drop");});
test("dropsy -> dropsi", function() {deepEqual( Stem("dropsy"), "dropsi");});
test("dross -> dross", function() {deepEqual( Stem("dross"), "dross");});
test("drought -> drought", function() {deepEqual( Stem("drought"), "drought");});
test("droughts -> drought", function() {deepEqual( Stem("droughts"), "drought");});
test("drove -> drove", function() {deepEqual( Stem("drove"), "drove");});
test("drover -> drover", function() {deepEqual( Stem("drover"), "drover");});
test("drovers -> drover", function() {deepEqual( Stem("drovers"), "drover");});
test("droves -> drove", function() {deepEqual( Stem("droves"), "drove");});
test("drown -> drown", function() {deepEqual( Stem("drown"), "drown");});
test("drownded -> drownd", function() {deepEqual( Stem("drownded"), "drownd");});
test("drowned -> drown", function() {deepEqual( Stem("drowned"), "drown");});
test("drowning -> drown", function() {deepEqual( Stem("drowning"), "drown");});
test("drowsily -> drowsili", function() {deepEqual( Stem("drowsily"), "drowsili");});
test("drowsiness -> drowsi", function() {deepEqual( Stem("drowsiness"), "drowsi");});
test("drowsy -> drowsi", function() {deepEqual( Stem("drowsy"), "drowsi");});
test("drubbing -> drub", function() {deepEqual( Stem("drubbing"), "drub");});
test("drudge -> drudg", function() {deepEqual( Stem("drudge"), "drudg");});
test("drudgery -> drudgeri", function() {deepEqual( Stem("drudgery"), "drudgeri");});
test("drudges -> drudg", function() {deepEqual( Stem("drudges"), "drudg");});
test("drugs -> drug", function() {deepEqual( Stem("drugs"), "drug");});
test("druidical -> druidic", function() {deepEqual( Stem("druidical"), "druidic");});
test("drum -> drum", function() {deepEqual( Stem("drum"), "drum");});
test("drummer -> drummer", function() {deepEqual( Stem("drummer"), "drummer");});
test("drummers -> drummer", function() {deepEqual( Stem("drummers"), "drummer");});
test("drummond -> drummond", function() {deepEqual( Stem("drummond"), "drummond");});
test("drummonds -> drummond", function() {deepEqual( Stem("drummonds"), "drummond");});
test("drums -> drum", function() {deepEqual( Stem("drums"), "drum");});
test("drunk -> drunk", function() {deepEqual( Stem("drunk"), "drunk");});
test("drunkard -> drunkard", function() {deepEqual( Stem("drunkard"), "drunkard");});
test("drunkards -> drunkard", function() {deepEqual( Stem("drunkards"), "drunkard");});
test("drunken -> drunken", function() {deepEqual( Stem("drunken"), "drunken");});
test("drunkenness -> drunken", function() {deepEqual( Stem("drunkenness"), "drunken");});
test("drury -> druri", function() {deepEqual( Stem("drury"), "druri");});
test("dry -> dri", function() {deepEqual( Stem("dry"), "dri");});
test("dryer -> dryer", function() {deepEqual( Stem("dryer"), "dryer");});
test("drying -> dri", function() {deepEqual( Stem("drying"), "dri");});
test("dryly -> dryli", function() {deepEqual( Stem("dryly"), "dryli");});
test("dryness -> dryness", function() {deepEqual( Stem("dryness"), "dryness");});
test("dst -> dst", function() {deepEqual( Stem("dst"), "dst");});
test("du -> du", function() {deepEqual( Stem("du"), "du");});
test("dubious -> dubious", function() {deepEqual( Stem("dubious"), "dubious");});
test("dublin -> dublin", function() {deepEqual( Stem("dublin"), "dublin");});
test("ducal -> ducal", function() {deepEqual( Stem("ducal"), "ducal");});
test("duchess -> duchess", function() {deepEqual( Stem("duchess"), "duchess");});
test("duchesses -> duchess", function() {deepEqual( Stem("duchesses"), "duchess");});
test("duchy -> duchi", function() {deepEqual( Stem("duchy"), "duchi");});
test("duck -> duck", function() {deepEqual( Stem("duck"), "duck");});
test("ducking -> duck", function() {deepEqual( Stem("ducking"), "duck");});
test("ducklings -> duckl", function() {deepEqual( Stem("ducklings"), "duckl");});
test("ducks -> duck", function() {deepEqual( Stem("ducks"), "duck");});
test("duclida -> duclida", function() {deepEqual( Stem("duclida"), "duclida");});
test("dudgeon -> dudgeon", function() {deepEqual( Stem("dudgeon"), "dudgeon");});
test("due -> due", function() {deepEqual( Stem("due"), "due");});
test("duel -> duel", function() {deepEqual( Stem("duel"), "duel");});
test("duenna -> duenna", function() {deepEqual( Stem("duenna"), "duenna");});
test("dues -> due", function() {deepEqual( Stem("dues"), "due");});
test("duets -> duet", function() {deepEqual( Stem("duets"), "duet");});
test("duffer -> duffer", function() {deepEqual( Stem("duffer"), "duffer");});
test("duffy -> duffi", function() {deepEqual( Stem("duffy"), "duffi");});
test("dug -> dug", function() {deepEqual( Stem("dug"), "dug");});
test("dugong -> dugong", function() {deepEqual( Stem("dugong"), "dugong");});
test("duke -> duke", function() {deepEqual( Stem("duke"), "duke");});
test("dukedom -> dukedom", function() {deepEqual( Stem("dukedom"), "dukedom");});
test("dukes -> duke", function() {deepEqual( Stem("dukes"), "duke");});
test("dulcet -> dulcet", function() {deepEqual( Stem("dulcet"), "dulcet");});
test("dull -> dull", function() {deepEqual( Stem("dull"), "dull");});
test("dullards -> dullard", function() {deepEqual( Stem("dullards"), "dullard");});
test("duller -> duller", function() {deepEqual( Stem("duller"), "duller");});
test("dullest -> dullest", function() {deepEqual( Stem("dullest"), "dullest");});
test("dullish -> dullish", function() {deepEqual( Stem("dullish"), "dullish");});
test("dullness -> dull", function() {deepEqual( Stem("dullness"), "dull");});
test("dully -> dulli", function() {deepEqual( Stem("dully"), "dulli");});
test("dulness -> dul", function() {deepEqual( Stem("dulness"), "dul");});
test("dulwich -> dulwich", function() {deepEqual( Stem("dulwich"), "dulwich");});
test("duly -> duli", function() {deepEqual( Stem("duly"), "duli");});
test("dumb -> dumb", function() {deepEqual( Stem("dumb"), "dumb");});
test("dumbbell -> dumbbel", function() {deepEqual( Stem("dumbbell"), "dumbbel");});
test("dumbfounded -> dumbfound", function() {deepEqual( Stem("dumbfounded"), "dumbfound");});
test("dumbfoundered -> dumbfound", function() {deepEqual( Stem("dumbfoundered"), "dumbfound");});
test("dumbly -> dumbl", function() {deepEqual( Stem("dumbly"), "dumbl");});
test("dummy -> dummi", function() {deepEqual( Stem("dummy"), "dummi");});
test("dumpling -> dumpl", function() {deepEqual( Stem("dumpling"), "dumpl");});
test("dun -> dun", function() {deepEqual( Stem("dun"), "dun");});
test("duncan -> duncan", function() {deepEqual( Stem("duncan"), "duncan");});
test("dunes -> dune", function() {deepEqual( Stem("dunes"), "dune");});
test("dung -> dung", function() {deepEqual( Stem("dung"), "dung");});
test("dungeon -> dungeon", function() {deepEqual( Stem("dungeon"), "dungeon");});
test("dungeons -> dungeon", function() {deepEqual( Stem("dungeons"), "dungeon");});
test("dunghill -> dunghil", function() {deepEqual( Stem("dunghill"), "dunghil");});
test("dunheved -> dunhev", function() {deepEqual( Stem("dunheved"), "dunhev");});
test("dunlops -> dunlop", function() {deepEqual( Stem("dunlops"), "dunlop");});
test("duns -> dun", function() {deepEqual( Stem("duns"), "dun");});
test("duodecimos -> duodecimo", function() {deepEqual( Stem("duodecimos"), "duodecimo");});
test("duodenum -> duodenum", function() {deepEqual( Stem("duodenum"), "duodenum");});
test("dupe -> dupe", function() {deepEqual( Stem("dupe"), "dupe");});
test("duped -> dupe", function() {deepEqual( Stem("duped"), "dupe");});
test("duping -> dupe", function() {deepEqual( Stem("duping"), "dupe");});
test("duplicate -> duplic", function() {deepEqual( Stem("duplicate"), "duplic");});
test("duplicates -> duplic", function() {deepEqual( Stem("duplicates"), "duplic");});
test("duplicity -> duplic", function() {deepEqual( Stem("duplicity"), "duplic");});
test("durability -> durabl", function() {deepEqual( Stem("durability"), "durabl");});
test("duratio -> duratio", function() {deepEqual( Stem("duratio"), "duratio");});
test("duration -> durat", function() {deepEqual( Stem("duration"), "durat");});
test("durden -> durden", function() {deepEqual( Stem("durden"), "durden");});
test("durer -> durer", function() {deepEqual( Stem("durer"), "durer");});
test("durham -> durham", function() {deepEqual( Stem("durham"), "durham");});
test("during -> dure", function() {deepEqual( Stem("during"), "dure");});
test("dursn -> dursn", function() {deepEqual( Stem("dursn"), "dursn");});
test("durst -> durst", function() {deepEqual( Stem("durst"), "durst");});
test("durstn -> durstn", function() {deepEqual( Stem("durstn"), "durstn");});
test("dushkin -> dushkin", function() {deepEqual( Stem("dushkin"), "dushkin");});
test("dusk -> dusk", function() {deepEqual( Stem("dusk"), "dusk");});
test("duskier -> duskier", function() {deepEqual( Stem("duskier"), "duskier");});
test("dusky -> duski", function() {deepEqual( Stem("dusky"), "duski");});
test("dussauts -> dussaut", function() {deepEqual( Stem("dussauts"), "dussaut");});
test("dust -> dust", function() {deepEqual( Stem("dust"), "dust");});
test("dusted -> dust", function() {deepEqual( Stem("dusted"), "dust");});
test("duster -> duster", function() {deepEqual( Stem("duster"), "duster");});
test("dustier -> dustier", function() {deepEqual( Stem("dustier"), "dustier");});
test("dusting -> dust", function() {deepEqual( Stem("dusting"), "dust");});
test("dustman -> dustman", function() {deepEqual( Stem("dustman"), "dustman");});
test("dustn -> dustn", function() {deepEqual( Stem("dustn"), "dustn");});
test("dusty -> dusti", function() {deepEqual( Stem("dusty"), "dusti");});
test("dutch -> dutch", function() {deepEqual( Stem("dutch"), "dutch");});
test("dutchman -> dutchman", function() {deepEqual( Stem("dutchman"), "dutchman");});
test("duties -> duti", function() {deepEqual( Stem("duties"), "duti");});
test("dutiful -> duti", function() {deepEqual( Stem("dutiful"), "duti");});
test("dutifully -> duti", function() {deepEqual( Stem("dutifully"), "duti");});
test("duty -> duti", function() {deepEqual( Stem("duty"), "duti");});
test("dwarf -> dwarf", function() {deepEqual( Stem("dwarf"), "dwarf");});
test("dwell -> dwell", function() {deepEqual( Stem("dwell"), "dwell");});
test("dweller -> dweller", function() {deepEqual( Stem("dweller"), "dweller");});
test("dwelling -> dwell", function() {deepEqual( Stem("dwelling"), "dwell");});
test("dwellings -> dwell", function() {deepEqual( Stem("dwellings"), "dwell");});
test("dwells -> dwell", function() {deepEqual( Stem("dwells"), "dwell");});
test("dwelt -> dwelt", function() {deepEqual( Stem("dwelt"), "dwelt");});
test("dwindled -> dwindl", function() {deepEqual( Stem("dwindled"), "dwindl");});
test("dwindling -> dwindl", function() {deepEqual( Stem("dwindling"), "dwindl");});
test("dy -> dy", function() {deepEqual( Stem("dy"), "dy");});
test("dye -> dye", function() {deepEqual( Stem("dye"), "dye");});
test("dyed -> dy", function() {deepEqual( Stem("dyed"), "dy");});
test("dyer -> dyer", function() {deepEqual( Stem("dyer"), "dyer");});
test("dyes -> dye", function() {deepEqual( Stem("dyes"), "dye");});
test("dying -> die", function() {deepEqual( Stem("dying"), "die");});
test("dykes -> dyke", function() {deepEqual( Stem("dykes"), "dyke");});
test("dynasty -> dynasti", function() {deepEqual( Stem("dynasty"), "dynasti");});
test("dysentery -> dysenteri", function() {deepEqual( Stem("dysentery"), "dysenteri");});
test("e -> e", function() {deepEqual( Stem("e"), "e");});
test("each -> each", function() {deepEqual( Stem("each"), "each");});
test("ead -> ead", function() {deepEqual( Stem("ead"), "ead");});
test("eager -> eager", function() {deepEqual( Stem("eager"), "eager");});
test("eagerly -> eager", function() {deepEqual( Stem("eagerly"), "eager");});
test("eagerness -> eager", function() {deepEqual( Stem("eagerness"), "eager");});
test("eagle -> eagl", function() {deepEqual( Stem("eagle"), "eagl");});
test("eagles -> eagl", function() {deepEqual( Stem("eagles"), "eagl");});
test("ealthiest -> ealthiest", function() {deepEqual( Stem("ealthiest"), "ealthiest");});
test("ear -> ear", function() {deepEqual( Stem("ear"), "ear");});
test("eard -> eard", function() {deepEqual( Stem("eard"), "eard");});
test("eared -> ear", function() {deepEqual( Stem("eared"), "ear");});
test("earings -> ear", function() {deepEqual( Stem("earings"), "ear");});
test("earl -> earl", function() {deepEqual( Stem("earl"), "earl");});
test("earlier -> earlier", function() {deepEqual( Stem("earlier"), "earlier");});
test("earliest -> earliest", function() {deepEqual( Stem("earliest"), "earliest");});
test("earls -> earl", function() {deepEqual( Stem("earls"), "earl");});
test("early -> earli", function() {deepEqual( Stem("early"), "earli");});
test("earlybird -> earlybird", function() {deepEqual( Stem("earlybird"), "earlybird");});
test("earn -> earn", function() {deepEqual( Stem("earn"), "earn");});
test("earned -> earn", function() {deepEqual( Stem("earned"), "earn");});
test("earnest -> earnest", function() {deepEqual( Stem("earnest"), "earnest");});
test("earnestly -> earnest", function() {deepEqual( Stem("earnestly"), "earnest");});
test("earnestness -> earnest", function() {deepEqual( Stem("earnestness"), "earnest");});
test("earning -> earn", function() {deepEqual( Stem("earning"), "earn");});
test("earnings -> earn", function() {deepEqual( Stem("earnings"), "earn");});
test("earring -> earring", function() {deepEqual( Stem("earring"), "earring");});
test("earrings -> earring", function() {deepEqual( Stem("earrings"), "earring");});
test("ears -> ear", function() {deepEqual( Stem("ears"), "ear");});
test("eart -> eart", function() {deepEqual( Stem("eart"), "eart");});
test("earth -> earth", function() {deepEqual( Stem("earth"), "earth");});
test("earthen -> earthen", function() {deepEqual( Stem("earthen"), "earthen");});
test("earthenware -> earthenwar", function() {deepEqual( Stem("earthenware"), "earthenwar");});
test("earthly -> earth", function() {deepEqual( Stem("earthly"), "earth");});
test("earthquake -> earthquak", function() {deepEqual( Stem("earthquake"), "earthquak");});
test("earthquakes -> earthquak", function() {deepEqual( Stem("earthquakes"), "earthquak");});
test("earths -> earth", function() {deepEqual( Stem("earths"), "earth");});
test("earthy -> earthi", function() {deepEqual( Stem("earthy"), "earthi");});
test("earwigs -> earwig", function() {deepEqual( Stem("earwigs"), "earwig");});
test("eas -> ea", function() {deepEqual( Stem("eas"), "ea");});
test("ease -> eas", function() {deepEqual( Stem("ease"), "eas");});
test("eased -> eas", function() {deepEqual( Stem("eased"), "eas");});
test("easier -> easier", function() {deepEqual( Stem("easier"), "easier");});
test("easiest -> easiest", function() {deepEqual( Stem("easiest"), "easiest");});
test("easily -> easili", function() {deepEqual( Stem("easily"), "easili");});
test("easiness -> easi", function() {deepEqual( Stem("easiness"), "easi");});
test("east -> east", function() {deepEqual( Stem("east"), "east");});
test("easter -> easter", function() {deepEqual( Stem("easter"), "easter");});
test("easterly -> easter", function() {deepEqual( Stem("easterly"), "easter");});
test("eastern -> eastern", function() {deepEqual( Stem("eastern"), "eastern");});
test("eastward -> eastward", function() {deepEqual( Stem("eastward"), "eastward");});
test("eastwards -> eastward", function() {deepEqual( Stem("eastwards"), "eastward");});
test("easy -> easi", function() {deepEqual( Stem("easy"), "easi");});
test("eat -> eat", function() {deepEqual( Stem("eat"), "eat");});
test("eatable -> eatabl", function() {deepEqual( Stem("eatable"), "eatabl");});
test("eatables -> eatabl", function() {deepEqual( Stem("eatables"), "eatabl");});
test("eaten -> eaten", function() {deepEqual( Stem("eaten"), "eaten");});
test("eater -> eater", function() {deepEqual( Stem("eater"), "eater");});
test("eaters -> eater", function() {deepEqual( Stem("eaters"), "eater");});
test("eating -> eat", function() {deepEqual( Stem("eating"), "eat");});
test("eats -> eat", function() {deepEqual( Stem("eats"), "eat");});
test("eau -> eau", function() {deepEqual( Stem("eau"), "eau");});
test("eaves -> eav", function() {deepEqual( Stem("eaves"), "eav");});
test("ebb -> ebb", function() {deepEqual( Stem("ebb"), "ebb");});
test("ebbed -> eb", function() {deepEqual( Stem("ebbed"), "eb");});
test("ebbing -> eb", function() {deepEqual( Stem("ebbing"), "eb");});
test("ebullitions -> ebullit", function() {deepEqual( Stem("ebullitions"), "ebullit");});
test("eccentric -> eccentr", function() {deepEqual( Stem("eccentric"), "eccentr");});
test("eccentricities -> eccentr", function() {deepEqual( Stem("eccentricities"), "eccentr");});
test("eccentricity -> eccentr", function() {deepEqual( Stem("eccentricity"), "eccentr");});
test("ecclesiastical -> ecclesiast", function() {deepEqual( Stem("ecclesiastical"), "ecclesiast");});
test("ech -> ech", function() {deepEqual( Stem("ech"), "ech");});
test("echo -> echo", function() {deepEqual( Stem("echo"), "echo");});
test("echoed -> echo", function() {deepEqual( Stem("echoed"), "echo");});
test("echoes -> echo", function() {deepEqual( Stem("echoes"), "echo");});
test("echoing -> echo", function() {deepEqual( Stem("echoing"), "echo");});
test("echoings -> echo", function() {deepEqual( Stem("echoings"), "echo");});
test("eclipse -> eclips", function() {deepEqual( Stem("eclipse"), "eclips");});
test("eclipsed -> eclips", function() {deepEqual( Stem("eclipsed"), "eclips");});
test("ecod -> ecod", function() {deepEqual( Stem("ecod"), "ecod");});
test("economic -> econom", function() {deepEqual( Stem("economic"), "econom");});
test("economical -> econom", function() {deepEqual( Stem("economical"), "econom");});
test("economically -> econom", function() {deepEqual( Stem("economically"), "econom");});
test("economists -> economist", function() {deepEqual( Stem("economists"), "economist");});
test("economize -> econom", function() {deepEqual( Stem("economize"), "econom");});
test("economizing -> econom", function() {deepEqual( Stem("economizing"), "econom");});
test("economy -> economi", function() {deepEqual( Stem("economy"), "economi");});
test("ecstasies -> ecstasi", function() {deepEqual( Stem("ecstasies"), "ecstasi");});
test("ecstasy -> ecstasi", function() {deepEqual( Stem("ecstasy"), "ecstasi");});
test("ecstatic -> ecstat", function() {deepEqual( Stem("ecstatic"), "ecstat");});
test("ecstatically -> ecstat", function() {deepEqual( Stem("ecstatically"), "ecstat");});
test("ed -> ed", function() {deepEqual( Stem("ed"), "ed");});
test("eddication -> eddic", function() {deepEqual( Stem("eddication"), "eddic");});
test("eddies -> eddi", function() {deepEqual( Stem("eddies"), "eddi");});
test("eddying -> eddi", function() {deepEqual( Stem("eddying"), "eddi");});
test("eden -> eden", function() {deepEqual( Stem("eden"), "eden");});
test("edental -> edent", function() {deepEqual( Stem("edental"), "edent");});
test("edentata -> edentata", function() {deepEqual( Stem("edentata"), "edentata");});
test("edge -> edg", function() {deepEqual( Stem("edge"), "edg");});
test("edged -> edg", function() {deepEqual( Stem("edged"), "edg");});
test("edgeless -> edgeless", function() {deepEqual( Stem("edgeless"), "edgeless");});
test("edges -> edg", function() {deepEqual( Stem("edges"), "edg");});
test("edgeware -> edgewar", function() {deepEqual( Stem("edgeware"), "edgewar");});
test("edgeways -> edgeway", function() {deepEqual( Stem("edgeways"), "edgeway");});
test("edging -> edg", function() {deepEqual( Stem("edging"), "edg");});
test("edible -> edibl", function() {deepEqual( Stem("edible"), "edibl");});
test("edict -> edict", function() {deepEqual( Stem("edict"), "edict");});
test("edification -> edif", function() {deepEqual( Stem("edification"), "edif");});
test("edifice -> edific", function() {deepEqual( Stem("edifice"), "edific");});
test("edifices -> edific", function() {deepEqual( Stem("edifices"), "edific");});
test("edified -> edifi", function() {deepEqual( Stem("edified"), "edifi");});
test("edify -> edifi", function() {deepEqual( Stem("edify"), "edifi");});
test("edifying -> edifi", function() {deepEqual( Stem("edifying"), "edifi");});
test("edin -> edin", function() {deepEqual( Stem("edin"), "edin");});
test("edinburgh -> edinburgh", function() {deepEqual( Stem("edinburgh"), "edinburgh");});
test("edition -> edit", function() {deepEqual( Stem("edition"), "edit");});
test("editor -> editor", function() {deepEqual( Stem("editor"), "editor");});
test("editors -> editor", function() {deepEqual( Stem("editors"), "editor");});
test("educate -> educ", function() {deepEqual( Stem("educate"), "educ");});
test("educated -> educ", function() {deepEqual( Stem("educated"), "educ");});
test("educating -> educ", function() {deepEqual( Stem("educating"), "educ");});
test("education -> educ", function() {deepEqual( Stem("education"), "educ");});
test("educational -> educ", function() {deepEqual( Stem("educational"), "educ");});
test("educator -> educ", function() {deepEqual( Stem("educator"), "educ");});
test("edusa -> edusa", function() {deepEqual( Stem("edusa"), "edusa");});
test("edward -> edward", function() {deepEqual( Stem("edward"), "edward");});
test("edwards -> edward", function() {deepEqual( Stem("edwards"), "edward");});
test("edwin -> edwin", function() {deepEqual( Stem("edwin"), "edwin");});
test("ee -> ee", function() {deepEqual( Stem("ee"), "ee");});
test("eel -> eel", function() {deepEqual( Stem("eel"), "eel");});
test("eels -> eel", function() {deepEqual( Stem("eels"), "eel");});
test("ees -> ee", function() {deepEqual( Stem("ees"), "ee");});
test("efface -> effac", function() {deepEqual( Stem("efface"), "effac");});
test("effaceable -> effac", function() {deepEqual( Stem("effaceable"), "effac");});
test("effect -> effect", function() {deepEqual( Stem("effect"), "effect");});
test("effected -> effect", function() {deepEqual( Stem("effected"), "effect");});
test("effecting -> effect", function() {deepEqual( Stem("effecting"), "effect");});
test("effective -> effect", function() {deepEqual( Stem("effective"), "effect");});
test("effectiveness -> effect", function() {deepEqual( Stem("effectiveness"), "effect");});
test("effects -> effect", function() {deepEqual( Stem("effects"), "effect");});
test("effectual -> effectu", function() {deepEqual( Stem("effectual"), "effectu");});
test("effectually -> effectu", function() {deepEqual( Stem("effectually"), "effectu");});
test("effeminate -> effemin", function() {deepEqual( Stem("effeminate"), "effemin");});
test("effervescence -> effervesc", function() {deepEqual( Stem("effervescence"), "effervesc");});
test("effervescent -> effervesc", function() {deepEqual( Stem("effervescent"), "effervesc");});
test("effets -> effet", function() {deepEqual( Stem("effets"), "effet");});
test("efficacious -> efficaci", function() {deepEqual( Stem("efficacious"), "efficaci");});
test("efficacy -> efficaci", function() {deepEqual( Stem("efficacy"), "efficaci");});
test("efficiency -> effici", function() {deepEqual( Stem("efficiency"), "effici");});
test("efficient -> effici", function() {deepEqual( Stem("efficient"), "effici");});
test("effigy -> effigi", function() {deepEqual( Stem("effigy"), "effigi");});
test("effloresce -> effloresc", function() {deepEqual( Stem("effloresce"), "effloresc");});
test("efflorescence -> effloresc", function() {deepEqual( Stem("efflorescence"), "effloresc");});
test("effluvia -> effluvia", function() {deepEqual( Stem("effluvia"), "effluvia");});
test("effluvium -> effluvium", function() {deepEqual( Stem("effluvium"), "effluvium");});
test("effort -> effort", function() {deepEqual( Stem("effort"), "effort");});
test("efforts -> effort", function() {deepEqual( Stem("efforts"), "effort");});
test("effrontery -> effronteri", function() {deepEqual( Stem("effrontery"), "effronteri");});
test("effulgence -> effulg", function() {deepEqual( Stem("effulgence"), "effulg");});
test("effusion -> effus", function() {deepEqual( Stem("effusion"), "effus");});
test("effusions -> effus", function() {deepEqual( Stem("effusions"), "effus");});
test("efther -> efther", function() {deepEqual( Stem("efther"), "efther");});
test("egad -> egad", function() {deepEqual( Stem("egad"), "egad");});
test("egbert -> egbert", function() {deepEqual( Stem("egbert"), "egbert");});
test("egg -> egg", function() {deepEqual( Stem("egg"), "egg");});
test("eggs -> egg", function() {deepEqual( Stem("eggs"), "egg");});
test("eggshells -> eggshel", function() {deepEqual( Stem("eggshells"), "eggshel");});
test("eghert -> eghert", function() {deepEqual( Stem("eghert"), "eghert");});
test("eglantine -> eglantin", function() {deepEqual( Stem("eglantine"), "eglantin");});
test("egoist -> egoist", function() {deepEqual( Stem("egoist"), "egoist");});
test("egotistically -> egotist", function() {deepEqual( Stem("egotistically"), "egotist");});
test("egregious -> egregi", function() {deepEqual( Stem("egregious"), "egregi");});
test("egregiously -> egregi", function() {deepEqual( Stem("egregiously"), "egregi");});
test("egress -> egress", function() {deepEqual( Stem("egress"), "egress");});
test("egrets -> egret", function() {deepEqual( Stem("egrets"), "egret");});
test("egypt -> egypt", function() {deepEqual( Stem("egypt"), "egypt");});
test("egyptian -> egyptian", function() {deepEqual( Stem("egyptian"), "egyptian");});
test("egyptians -> egyptian", function() {deepEqual( Stem("egyptians"), "egyptian");});
test("eh -> eh", function() {deepEqual( Stem("eh"), "eh");});
test("ehrenberg -> ehrenberg", function() {deepEqual( Stem("ehrenberg"), "ehrenberg");});
test("eight -> eight", function() {deepEqual( Stem("eight"), "eight");});
test("eighteen -> eighteen", function() {deepEqual( Stem("eighteen"), "eighteen");});
test("eighteenpence -> eighteenp", function() {deepEqual( Stem("eighteenpence"), "eighteenp");});
test("eighteenpences -> eighteenp", function() {deepEqual( Stem("eighteenpences"), "eighteenp");});
test("eighteenpenny -> eighteenpenni", function() {deepEqual( Stem("eighteenpenny"), "eighteenpenni");});
test("eighth -> eighth", function() {deepEqual( Stem("eighth"), "eighth");});
test("eighthly -> eighth", function() {deepEqual( Stem("eighthly"), "eighth");});
test("eighths -> eighth", function() {deepEqual( Stem("eighths"), "eighth");});
test("eightpence -> eightpenc", function() {deepEqual( Stem("eightpence"), "eightpenc");});
test("eighty -> eighti", function() {deepEqual( Stem("eighty"), "eighti");});
test("eimeo -> eimeo", function() {deepEqual( Stem("eimeo"), "eimeo");});
test("eine -> ein", function() {deepEqual( Stem("eine"), "ein");});
test("either -> either", function() {deepEqual( Stem("either"), "either");});
test("ejaculate -> ejacul", function() {deepEqual( Stem("ejaculate"), "ejacul");});
test("ejaculated -> ejacul", function() {deepEqual( Stem("ejaculated"), "ejacul");});
test("ejaculates -> ejacul", function() {deepEqual( Stem("ejaculates"), "ejacul");});
test("ejaculating -> ejacul", function() {deepEqual( Stem("ejaculating"), "ejacul");});
test("ejaculations -> ejacul", function() {deepEqual( Stem("ejaculations"), "ejacul");});
test("eject -> eject", function() {deepEqual( Stem("eject"), "eject");});
test("ejected -> eject", function() {deepEqual( Stem("ejected"), "eject");});
test("ejecting -> eject", function() {deepEqual( Stem("ejecting"), "eject");});
test("ekaterininsky -> ekaterininski", function() {deepEqual( Stem("ekaterininsky"), "ekaterininski");});
test("eke -> eke", function() {deepEqual( Stem("eke"), "eke");});
test("eked -> eke", function() {deepEqual( Stem("eked"), "eke");});
test("eking -> eke", function() {deepEqual( Stem("eking"), "eke");});
test("el -> el", function() {deepEqual( Stem("el"), "el");});
test("elaborate -> elabor", function() {deepEqual( Stem("elaborate"), "elabor");});
test("elaborated -> elabor", function() {deepEqual( Stem("elaborated"), "elabor");});
test("elaboration -> elabor", function() {deepEqual( Stem("elaboration"), "elabor");});
test("elan -> elan", function() {deepEqual( Stem("elan"), "elan");});
test("elapse -> elaps", function() {deepEqual( Stem("elapse"), "elaps");});
test("elapsed -> elaps", function() {deepEqual( Stem("elapsed"), "elaps");});
test("elapses -> elaps", function() {deepEqual( Stem("elapses"), "elaps");});
test("elastic -> elast", function() {deepEqual( Stem("elastic"), "elast");});
test("elasticity -> elast", function() {deepEqual( Stem("elasticity"), "elast");});
test("elated -> elat", function() {deepEqual( Stem("elated"), "elat");});
test("elater -> elat", function() {deepEqual( Stem("elater"), "elat");});
test("elateridae -> elaterida", function() {deepEqual( Stem("elateridae"), "elaterida");});
test("elaters -> elat", function() {deepEqual( Stem("elaters"), "elat");});
test("elation -> elat", function() {deepEqual( Stem("elation"), "elat");});
test("elber -> elber", function() {deepEqual( Stem("elber"), "elber");});
test("elbers -> elber", function() {deepEqual( Stem("elbers"), "elber");});
test("elbow -> elbow", function() {deepEqual( Stem("elbow"), "elbow");});
test("elbowed -> elbow", function() {deepEqual( Stem("elbowed"), "elbow");});
test("elbowing -> elbow", function() {deepEqual( Stem("elbowing"), "elbow");});
test("elbows -> elbow", function() {deepEqual( Stem("elbows"), "elbow");});
test("elder -> elder", function() {deepEqual( Stem("elder"), "elder");});
test("elderly -> elder", function() {deepEqual( Stem("elderly"), "elder");});
test("elders -> elder", function() {deepEqual( Stem("elders"), "elder");});
test("eldest -> eldest", function() {deepEqual( Stem("eldest"), "eldest");});
test("eldon -> eldon", function() {deepEqual( Stem("eldon"), "eldon");});
test("elect -> elect", function() {deepEqual( Stem("elect"), "elect");});
test("elected -> elect", function() {deepEqual( Stem("elected"), "elect");});
test("electing -> elect", function() {deepEqual( Stem("electing"), "elect");});
test("election -> elect", function() {deepEqual( Stem("election"), "elect");});
test("electioneering -> election", function() {deepEqual( Stem("electioneering"), "election");});
test("elections -> elect", function() {deepEqual( Stem("elections"), "elect");});
test("elector -> elector", function() {deepEqual( Stem("elector"), "elector");});
test("electors -> elector", function() {deepEqual( Stem("electors"), "elector");});
test("electric -> electr", function() {deepEqual( Stem("electric"), "electr");});
test("electrical -> electr", function() {deepEqual( Stem("electrical"), "electr");});
test("electricity -> electr", function() {deepEqual( Stem("electricity"), "electr");});
test("elegance -> eleg", function() {deepEqual( Stem("elegance"), "eleg");});
test("elegancies -> eleg", function() {deepEqual( Stem("elegancies"), "eleg");});
test("elegans -> elegan", function() {deepEqual( Stem("elegans"), "elegan");});
test("elegant -> eleg", function() {deepEqual( Stem("elegant"), "eleg");});
test("elegantly -> eleg", function() {deepEqual( Stem("elegantly"), "eleg");});
test("element -> element", function() {deepEqual( Stem("element"), "element");});
test("elementary -> elementari", function() {deepEqual( Stem("elementary"), "elementari");});
test("elements -> element", function() {deepEqual( Stem("elements"), "element");});
test("elephant -> eleph", function() {deepEqual( Stem("elephant"), "eleph");});
test("elephantine -> elephantin", function() {deepEqual( Stem("elephantine"), "elephantin");});
test("elephants -> eleph", function() {deepEqual( Stem("elephants"), "eleph");});
test("elevate -> elev", function() {deepEqual( Stem("elevate"), "elev");});
test("elevated -> elev", function() {deepEqual( Stem("elevated"), "elev");});
test("elevates -> elev", function() {deepEqual( Stem("elevates"), "elev");});
test("elevating -> elev", function() {deepEqual( Stem("elevating"), "elev");});
test("elevation -> elev", function() {deepEqual( Stem("elevation"), "elev");});
test("elevations -> elev", function() {deepEqual( Stem("elevations"), "elev");});
test("elevatory -> elevatori", function() {deepEqual( Stem("elevatory"), "elevatori");});
test("eleven -> eleven", function() {deepEqual( Stem("eleven"), "eleven");});
test("elevens -> eleven", function() {deepEqual( Stem("elevens"), "eleven");});
test("eleventh -> eleventh", function() {deepEqual( Stem("eleventh"), "eleventh");});
test("elewated -> elew", function() {deepEqual( Stem("elewated"), "elew");});
test("elf -> elf", function() {deepEqual( Stem("elf"), "elf");});
test("elfin -> elfin", function() {deepEqual( Stem("elfin"), "elfin");});
test("elgble -> elgbl", function() {deepEqual( Stem("elgble"), "elgbl");});
test("elicit -> elicit", function() {deepEqual( Stem("elicit"), "elicit");});
test("elicited -> elicit", function() {deepEqual( Stem("elicited"), "elicit");});
test("eliciting -> elicit", function() {deepEqual( Stem("eliciting"), "elicit");});
test("elicits -> elicit", function() {deepEqual( Stem("elicits"), "elicit");});
test("eligible -> elig", function() {deepEqual( Stem("eligible"), "elig");});
test("eliminate -> elimin", function() {deepEqual( Stem("eliminate"), "elimin");});
test("elite -> elit", function() {deepEqual( Stem("elite"), "elit");});
test("elizabeth -> elizabeth", function() {deepEqual( Stem("elizabeth"), "elizabeth");});
test("ell -> ell", function() {deepEqual( Stem("ell"), "ell");});
test("elle -> ell", function() {deepEqual( Stem("elle"), "ell");});
test("ellen -> ellen", function() {deepEqual( Stem("ellen"), "ellen");});
test("elles -> ell", function() {deepEqual( Stem("elles"), "ell");});
test("ellesmere -> ellesmer", function() {deepEqual( Stem("ellesmere"), "ellesmer");});
test("elliptic -> ellipt", function() {deepEqual( Stem("elliptic"), "ellipt");});
test("ellis -> elli", function() {deepEqual( Stem("ellis"), "elli");});
test("ellore -> ellor", function() {deepEqual( Stem("ellore"), "ellor");});
test("elm -> elm", function() {deepEqual( Stem("elm"), "elm");});
test("elmo -> elmo", function() {deepEqual( Stem("elmo"), "elmo");});
test("elms -> elm", function() {deepEqual( Stem("elms"), "elm");});
test("elocution -> elocut", function() {deepEqual( Stem("elocution"), "elocut");});
test("elongated -> elong", function() {deepEqual( Stem("elongated"), "elong");});
test("elongation -> elong", function() {deepEqual( Stem("elongation"), "elong");});
test("elope -> elop", function() {deepEqual( Stem("elope"), "elop");});
test("eloped -> elop", function() {deepEqual( Stem("eloped"), "elop");});
test("elopement -> elop", function() {deepEqual( Stem("elopement"), "elop");});
test("eloquence -> eloqu", function() {deepEqual( Stem("eloquence"), "eloqu");});
test("eloquent -> eloqu", function() {deepEqual( Stem("eloquent"), "eloqu");});
test("eloquently -> eloqu", function() {deepEqual( Stem("eloquently"), "eloqu");});
test("elscholchias -> elscholchia", function() {deepEqual( Stem("elscholchias"), "elscholchia");});
test("elsdale -> elsdal", function() {deepEqual( Stem("elsdale"), "elsdal");});
test("else -> els", function() {deepEqual( Stem("else"), "els");});
test("elsewhere -> elsewher", function() {deepEqual( Stem("elsewhere"), "elsewher");});
test("elucidate -> elucid", function() {deepEqual( Stem("elucidate"), "elucid");});
test("elucidated -> elucid", function() {deepEqual( Stem("elucidated"), "elucid");});
test("elude -> elud", function() {deepEqual( Stem("elude"), "elud");});
test("eluded -> elud", function() {deepEqual( Stem("eluded"), "elud");});
test("eluding -> elud", function() {deepEqual( Stem("eluding"), "elud");});
test("elves -> elv", function() {deepEqual( Stem("elves"), "elv");});
test("elwes -> elw", function() {deepEqual( Stem("elwes"), "elw");});
test("elysian -> elysian", function() {deepEqual( Stem("elysian"), "elysian");});
test("elysium -> elysium", function() {deepEqual( Stem("elysium"), "elysium");});
test("em -> em", function() {deepEqual( Stem("em"), "em");});
test("emaciated -> emaci", function() {deepEqual( Stem("emaciated"), "emaci");});
test("emanated -> eman", function() {deepEqual( Stem("emanated"), "eman");});
test("emanating -> eman", function() {deepEqual( Stem("emanating"), "eman");});
test("emanation -> eman", function() {deepEqual( Stem("emanation"), "eman");});
test("emancipated -> emancip", function() {deepEqual( Stem("emancipated"), "emancip");});
test("emancipation -> emancip", function() {deepEqual( Stem("emancipation"), "emancip");});
test("emancipist -> emancipist", function() {deepEqual( Stem("emancipist"), "emancipist");});
test("emasculate -> emascul", function() {deepEqual( Stem("emasculate"), "emascul");});
test("embankment -> embank", function() {deepEqual( Stem("embankment"), "embank");});
test("embankments -> embank", function() {deepEqual( Stem("embankments"), "embank");});
test("embarassed -> embarass", function() {deepEqual( Stem("embarassed"), "embarass");});
test("embargo -> embargo", function() {deepEqual( Stem("embargo"), "embargo");});
test("embark -> embark", function() {deepEqual( Stem("embark"), "embark");});
test("embarked -> embark", function() {deepEqual( Stem("embarked"), "embark");});
test("embarking -> embark", function() {deepEqual( Stem("embarking"), "embark");});
test("embarrass -> embarrass", function() {deepEqual( Stem("embarrass"), "embarrass");});
test("embarrassed -> embarrass", function() {deepEqual( Stem("embarrassed"), "embarrass");});
test("embarrassing -> embarrass", function() {deepEqual( Stem("embarrassing"), "embarrass");});
test("embarrassment -> embarrass", function() {deepEqual( Stem("embarrassment"), "embarrass");});
test("embarrassments -> embarrass", function() {deepEqual( Stem("embarrassments"), "embarrass");});
test("embassy -> embassi", function() {deepEqual( Stem("embassy"), "embassi");});
test("embedded -> embed", function() {deepEqual( Stem("embedded"), "embed");});
test("embellish -> embellish", function() {deepEqual( Stem("embellish"), "embellish");});
test("embellished -> embellish", function() {deepEqual( Stem("embellished"), "embellish");});
test("embellishes -> embellish", function() {deepEqual( Stem("embellishes"), "embellish");});
test("embellishing -> embellish", function() {deepEqual( Stem("embellishing"), "embellish");});
test("embellishment -> embellish", function() {deepEqual( Stem("embellishment"), "embellish");});
test("embellishments -> embellish", function() {deepEqual( Stem("embellishments"), "embellish");});
test("ember -> ember", function() {deepEqual( Stem("ember"), "ember");});
test("embers -> ember", function() {deepEqual( Stem("embers"), "ember");});
test("embitter -> embitt", function() {deepEqual( Stem("embitter"), "embitt");});
test("embittered -> embitt", function() {deepEqual( Stem("embittered"), "embitt");});
test("emblazoned -> emblazon", function() {deepEqual( Stem("emblazoned"), "emblazon");});
test("emblem -> emblem", function() {deepEqual( Stem("emblem"), "emblem");});
test("emblems -> emblem", function() {deepEqual( Stem("emblems"), "emblem");});
test("embodied -> embodi", function() {deepEqual( Stem("embodied"), "embodi");});
test("embodiment -> embodi", function() {deepEqual( Stem("embodiment"), "embodi");});
test("emboldened -> embolden", function() {deepEqual( Stem("emboldened"), "embolden");});
test("emboldening -> embolden", function() {deepEqual( Stem("emboldening"), "embolden");});
test("emboldens -> embolden", function() {deepEqual( Stem("emboldens"), "embolden");});
test("embossed -> emboss", function() {deepEqual( Stem("embossed"), "emboss");});
test("embowed -> embow", function() {deepEqual( Stem("embowed"), "embow");});
test("embrace -> embrac", function() {deepEqual( Stem("embrace"), "embrac");});
test("embraced -> embrac", function() {deepEqual( Stem("embraced"), "embrac");});
test("embracer -> embrac", function() {deepEqual( Stem("embracer"), "embrac");});
test("embraces -> embrac", function() {deepEqual( Stem("embraces"), "embrac");});
test("embracing -> embrac", function() {deepEqual( Stem("embracing"), "embrac");});
test("embroidered -> embroid", function() {deepEqual( Stem("embroidered"), "embroid");});
test("embroidering -> embroid", function() {deepEqual( Stem("embroidering"), "embroid");});
test("embroiders -> embroid", function() {deepEqual( Stem("embroiders"), "embroid");});
test("embroidery -> embroideri", function() {deepEqual( Stem("embroidery"), "embroideri");});
test("embroil -> embroil", function() {deepEqual( Stem("embroil"), "embroil");});
test("embryo -> embryo", function() {deepEqual( Stem("embryo"), "embryo");});
test("emerald -> emerald", function() {deepEqual( Stem("emerald"), "emerald");});
test("emerge -> emerg", function() {deepEqual( Stem("emerge"), "emerg");});
test("emerged -> emerg", function() {deepEqual( Stem("emerged"), "emerg");});
test("emergency -> emerg", function() {deepEqual( Stem("emergency"), "emerg");});
test("emerges -> emerg", function() {deepEqual( Stem("emerges"), "emerg");});
test("emerging -> emerg", function() {deepEqual( Stem("emerging"), "emerg");});
test("emigrate -> emigr", function() {deepEqual( Stem("emigrate"), "emigr");});
test("emigrated -> emigr", function() {deepEqual( Stem("emigrated"), "emigr");});
test("emigration -> emigr", function() {deepEqual( Stem("emigration"), "emigr");});
test("emilia -> emilia", function() {deepEqual( Stem("emilia"), "emilia");});
test("emily -> emili", function() {deepEqual( Stem("emily"), "emili");});
test("eminence -> emin", function() {deepEqual( Stem("eminence"), "emin");});
test("eminent -> emin", function() {deepEqual( Stem("eminent"), "emin");});
test("eminently -> emin", function() {deepEqual( Stem("eminently"), "emin");});
test("emit -> emit", function() {deepEqual( Stem("emit"), "emit");});
test("emits -> emit", function() {deepEqual( Stem("emits"), "emit");});
test("emitted -> emit", function() {deepEqual( Stem("emitted"), "emit");});
test("emitting -> emit", function() {deepEqual( Stem("emitting"), "emit");});
test("emma -> emma", function() {deepEqual( Stem("emma"), "emma");});
test("emollient -> emolli", function() {deepEqual( Stem("emollient"), "emolli");});
test("emoluments -> emolu", function() {deepEqual( Stem("emoluments"), "emolu");});
test("emotion -> emot", function() {deepEqual( Stem("emotion"), "emot");});
test("emotional -> emot", function() {deepEqual( Stem("emotional"), "emot");});
test("emotions -> emot", function() {deepEqual( Stem("emotions"), "emot");});
test("emperor -> emperor", function() {deepEqual( Stem("emperor"), "emperor");});
test("empetrum -> empetrum", function() {deepEqual( Stem("empetrum"), "empetrum");});
test("emphasis -> emphasi", function() {deepEqual( Stem("emphasis"), "emphasi");});
test("emphasise -> emphasis", function() {deepEqual( Stem("emphasise"), "emphasis");});
test("emphasising -> emphasis", function() {deepEqual( Stem("emphasising"), "emphasis");});
test("emphasizing -> emphas", function() {deepEqual( Stem("emphasizing"), "emphas");});
test("emphatic -> emphat", function() {deepEqual( Stem("emphatic"), "emphat");});
test("emphatically -> emphat", function() {deepEqual( Stem("emphatically"), "emphat");});
test("empire -> empir", function() {deepEqual( Stem("empire"), "empir");});
test("employ -> employ", function() {deepEqual( Stem("employ"), "employ");});
test("employed -> employ", function() {deepEqual( Stem("employed"), "employ");});
test("employer -> employ", function() {deepEqual( Stem("employer"), "employ");});
test("employers -> employ", function() {deepEqual( Stem("employers"), "employ");});
test("employing -> employ", function() {deepEqual( Stem("employing"), "employ");});
test("employment -> employ", function() {deepEqual( Stem("employment"), "employ");});
test("employments -> employ", function() {deepEqual( Stem("employments"), "employ");});
test("employs -> employ", function() {deepEqual( Stem("employs"), "employ");});
test("emporium -> emporium", function() {deepEqual( Stem("emporium"), "emporium");});
test("emporiums -> emporium", function() {deepEqual( Stem("emporiums"), "emporium");});
test("empower -> empow", function() {deepEqual( Stem("empower"), "empow");});
test("empowered -> empow", function() {deepEqual( Stem("empowered"), "empow");});
test("empress -> empress", function() {deepEqual( Stem("empress"), "empress");});
test("emptied -> empti", function() {deepEqual( Stem("emptied"), "empti");});
test("empties -> empti", function() {deepEqual( Stem("empties"), "empti");});
test("emptiness -> empti", function() {deepEqual( Stem("emptiness"), "empti");});
test("emptor -> emptor", function() {deepEqual( Stem("emptor"), "emptor");});
test("empty -> empti", function() {deepEqual( Stem("empty"), "empti");});
test("emptying -> empti", function() {deepEqual( Stem("emptying"), "empti");});
test("emu -> emu", function() {deepEqual( Stem("emu"), "emu");});
test("emulation -> emul", function() {deepEqual( Stem("emulation"), "emul");});
test("emus -> emus", function() {deepEqual( Stem("emus"), "emus");});
test("en -> en", function() {deepEqual( Stem("en"), "en");});
test("enable -> enabl", function() {deepEqual( Stem("enable"), "enabl");});
test("enabled -> enabl", function() {deepEqual( Stem("enabled"), "enabl");});
test("enables -> enabl", function() {deepEqual( Stem("enables"), "enabl");});
test("enabling -> enabl", function() {deepEqual( Stem("enabling"), "enabl");});
test("enact -> enact", function() {deepEqual( Stem("enact"), "enact");});
test("enacted -> enact", function() {deepEqual( Stem("enacted"), "enact");});
test("enacting -> enact", function() {deepEqual( Stem("enacting"), "enact");});
test("enamel -> enamel", function() {deepEqual( Stem("enamel"), "enamel");});
test("enamelled -> enamel", function() {deepEqual( Stem("enamelled"), "enamel");});
test("enamoured -> enamour", function() {deepEqual( Stem("enamoured"), "enamour");});
test("encamped -> encamp", function() {deepEqual( Stem("encamped"), "encamp");});
test("encampment -> encamp", function() {deepEqual( Stem("encampment"), "encamp");});
test("encamps -> encamp", function() {deepEqual( Stem("encamps"), "encamp");});
test("encased -> encas", function() {deepEqual( Stem("encased"), "encas");});
test("encerrado -> encerrado", function() {deepEqual( Stem("encerrado"), "encerrado");});
test("enchanted -> enchant", function() {deepEqual( Stem("enchanted"), "enchant");});
test("enchanter -> enchant", function() {deepEqual( Stem("enchanter"), "enchant");});
test("enchanting -> enchant", function() {deepEqual( Stem("enchanting"), "enchant");});
test("encircle -> encircl", function() {deepEqual( Stem("encircle"), "encircl");});
test("encircled -> encircl", function() {deepEqual( Stem("encircled"), "encircl");});
test("encircles -> encircl", function() {deepEqual( Stem("encircles"), "encircl");});
test("encircling -> encircl", function() {deepEqual( Stem("encircling"), "encircl");});
test("enclos -> enclo", function() {deepEqual( Stem("enclos"), "enclo");});
test("enclose -> enclos", function() {deepEqual( Stem("enclose"), "enclos");});
test("enclosed -> enclos", function() {deepEqual( Stem("enclosed"), "enclos");});
test("enclosing -> enclos", function() {deepEqual( Stem("enclosing"), "enclos");});
test("enclosure -> enclosur", function() {deepEqual( Stem("enclosure"), "enclosur");});
test("enclosures -> enclosur", function() {deepEqual( Stem("enclosures"), "enclosur");});
test("encomium -> encomium", function() {deepEqual( Stem("encomium"), "encomium");});
test("encomiums -> encomium", function() {deepEqual( Stem("encomiums"), "encomium");});
test("encompassed -> encompass", function() {deepEqual( Stem("encompassed"), "encompass");});
test("encompassing -> encompass", function() {deepEqual( Stem("encompassing"), "encompass");});
test("encore -> encor", function() {deepEqual( Stem("encore"), "encor");});
test("encounter -> encount", function() {deepEqual( Stem("encounter"), "encount");});
test("encountered -> encount", function() {deepEqual( Stem("encountered"), "encount");});
test("encountering -> encount", function() {deepEqual( Stem("encountering"), "encount");});
test("encounters -> encount", function() {deepEqual( Stem("encounters"), "encount");});
test("encourage -> encourag", function() {deepEqual( Stem("encourage"), "encourag");});
test("encouraged -> encourag", function() {deepEqual( Stem("encouraged"), "encourag");});
test("encouragement -> encourag", function() {deepEqual( Stem("encouragement"), "encourag");});
test("encouragements -> encourag", function() {deepEqual( Stem("encouragements"), "encourag");});
test("encourager -> encourag", function() {deepEqual( Stem("encourager"), "encourag");});
test("encourages -> encourag", function() {deepEqual( Stem("encourages"), "encourag");});
test("encouraging -> encourag", function() {deepEqual( Stem("encouraging"), "encourag");});
test("encouragingly -> encourag", function() {deepEqual( Stem("encouragingly"), "encourag");});
test("encroach -> encroach", function() {deepEqual( Stem("encroach"), "encroach");});
test("encroached -> encroach", function() {deepEqual( Stem("encroached"), "encroach");});
test("encroaches -> encroach", function() {deepEqual( Stem("encroaches"), "encroach");});
test("encroachment -> encroach", function() {deepEqual( Stem("encroachment"), "encroach");});
test("encroachments -> encroach", function() {deepEqual( Stem("encroachments"), "encroach");});
test("encrusted -> encrust", function() {deepEqual( Stem("encrusted"), "encrust");});
test("encumber -> encumb", function() {deepEqual( Stem("encumber"), "encumb");});
test("encumbered -> encumb", function() {deepEqual( Stem("encumbered"), "encumb");});
test("encumbering -> encumb", function() {deepEqual( Stem("encumbering"), "encumb");});
test("encyclop -> encyclop", function() {deepEqual( Stem("encyclop"), "encyclop");});
test("end -> end", function() {deepEqual( Stem("end"), "end");});
test("endanger -> endang", function() {deepEqual( Stem("endanger"), "endang");});
test("endangered -> endang", function() {deepEqual( Stem("endangered"), "endang");});
test("endear -> endear", function() {deepEqual( Stem("endear"), "endear");});
test("endeared -> endear", function() {deepEqual( Stem("endeared"), "endear");});
test("endearing -> endear", function() {deepEqual( Stem("endearing"), "endear");});
test("endearment -> endear", function() {deepEqual( Stem("endearment"), "endear");});
test("endearments -> endear", function() {deepEqual( Stem("endearments"), "endear");});
test("endeavour -> endeavour", function() {deepEqual( Stem("endeavour"), "endeavour");});
test("endeavoured -> endeavour", function() {deepEqual( Stem("endeavoured"), "endeavour");});
test("endeavouring -> endeavour", function() {deepEqual( Stem("endeavouring"), "endeavour");});
test("endeavours -> endeavour", function() {deepEqual( Stem("endeavours"), "endeavour");});
test("ended -> end", function() {deepEqual( Stem("ended"), "end");});
test("endemic -> endem", function() {deepEqual( Stem("endemic"), "endem");});
test("enderby -> enderbi", function() {deepEqual( Stem("enderby"), "enderbi");});
test("enders -> ender", function() {deepEqual( Stem("enders"), "ender");});
test("ending -> end", function() {deepEqual( Stem("ending"), "end");});
test("endless -> endless", function() {deepEqual( Stem("endless"), "endless");});
test("endlessly -> endless", function() {deepEqual( Stem("endlessly"), "endless");});
test("endow -> endow", function() {deepEqual( Stem("endow"), "endow");});
test("endowed -> endow", function() {deepEqual( Stem("endowed"), "endow");});
test("endowing -> endow", function() {deepEqual( Stem("endowing"), "endow");});
test("endowment -> endow", function() {deepEqual( Stem("endowment"), "endow");});
test("endowments -> endow", function() {deepEqual( Stem("endowments"), "endow");});
test("endroits -> endroit", function() {deepEqual( Stem("endroits"), "endroit");});
test("ends -> end", function() {deepEqual( Stem("ends"), "end");});
test("endurable -> endur", function() {deepEqual( Stem("endurable"), "endur");});
test("endurance -> endur", function() {deepEqual( Stem("endurance"), "endur");});
test("endure -> endur", function() {deepEqual( Stem("endure"), "endur");});
test("endured -> endur", function() {deepEqual( Stem("endured"), "endur");});
test("enduring -> endur", function() {deepEqual( Stem("enduring"), "endur");});
test("eneaf -> eneaf", function() {deepEqual( Stem("eneaf"), "eneaf");});
test("enemies -> enemi", function() {deepEqual( Stem("enemies"), "enemi");});
test("enemy -> enemi", function() {deepEqual( Stem("enemy"), "enemi");});
test("energetic -> energet", function() {deepEqual( Stem("energetic"), "energet");});
test("energetically -> energet", function() {deepEqual( Stem("energetically"), "energet");});
test("energies -> energi", function() {deepEqual( Stem("energies"), "energi");});
test("energy -> energi", function() {deepEqual( Stem("energy"), "energi");});
test("enervated -> enerv", function() {deepEqual( Stem("enervated"), "enerv");});
test("enfant -> enfant", function() {deepEqual( Stem("enfant"), "enfant");});
test("enfeebled -> enfeebl", function() {deepEqual( Stem("enfeebled"), "enfeebl");});
test("enfolded -> enfold", function() {deepEqual( Stem("enfolded"), "enfold");});
test("enfolding -> enfold", function() {deepEqual( Stem("enfolding"), "enfold");});
test("enforce -> enforc", function() {deepEqual( Stem("enforce"), "enforc");});
test("enforced -> enforc", function() {deepEqual( Stem("enforced"), "enforc");});
test("enforcing -> enforc", function() {deepEqual( Stem("enforcing"), "enforc");});
test("engaddi -> engaddi", function() {deepEqual( Stem("engaddi"), "engaddi");});
test("engage -> engag", function() {deepEqual( Stem("engage"), "engag");});
test("engaged -> engag", function() {deepEqual( Stem("engaged"), "engag");});
test("engagement -> engag", function() {deepEqual( Stem("engagement"), "engag");});
test("engagements -> engag", function() {deepEqual( Stem("engagements"), "engag");});
test("engages -> engag", function() {deepEqual( Stem("engages"), "engag");});
test("engaging -> engag", function() {deepEqual( Stem("engaging"), "engag");});
test("engagingness -> engaging", function() {deepEqual( Stem("engagingness"), "engaging");});
test("engagmg -> engagmg", function() {deepEqual( Stem("engagmg"), "engagmg");});
test("engender -> engend", function() {deepEqual( Stem("engender"), "engend");});
test("engendered -> engend", function() {deepEqual( Stem("engendered"), "engend");});
test("engenhodo -> engenhodo", function() {deepEqual( Stem("engenhodo"), "engenhodo");});
test("engine -> engin", function() {deepEqual( Stem("engine"), "engin");});
test("engineer -> engin", function() {deepEqual( Stem("engineer"), "engin");});
test("engineering -> engin", function() {deepEqual( Stem("engineering"), "engin");});
test("engines -> engin", function() {deepEqual( Stem("engines"), "engin");});
test("england -> england", function() {deepEqual( Stem("england"), "england");});
test("english -> english", function() {deepEqual( Stem("english"), "english");});
test("englishman -> englishman", function() {deepEqual( Stem("englishman"), "englishman");});
test("englishmen -> englishmen", function() {deepEqual( Stem("englishmen"), "englishmen");});
test("englishwoman -> englishwoman", function() {deepEqual( Stem("englishwoman"), "englishwoman");});
test("engraved -> engrav", function() {deepEqual( Stem("engraved"), "engrav");});
test("engraven -> engraven", function() {deepEqual( Stem("engraven"), "engraven");});
test("engraver -> engrav", function() {deepEqual( Stem("engraver"), "engrav");});
test("engraving -> engrav", function() {deepEqual( Stem("engraving"), "engrav");});
test("engravings -> engrav", function() {deepEqual( Stem("engravings"), "engrav");});
test("engrossed -> engross", function() {deepEqual( Stem("engrossed"), "engross");});
test("engrosser -> engross", function() {deepEqual( Stem("engrosser"), "engross");});
test("engrossing -> engross", function() {deepEqual( Stem("engrossing"), "engross");});
test("enhance -> enhanc", function() {deepEqual( Stem("enhance"), "enhanc");});
test("enhanced -> enhanc", function() {deepEqual( Stem("enhanced"), "enhanc");});
test("enhancing -> enhanc", function() {deepEqual( Stem("enhancing"), "enhanc");});
test("enigma -> enigma", function() {deepEqual( Stem("enigma"), "enigma");});
test("enigmatic -> enigmat", function() {deepEqual( Stem("enigmatic"), "enigmat");});
test("enigmatically -> enigmat", function() {deepEqual( Stem("enigmatically"), "enigmat");});
test("enjoin -> enjoin", function() {deepEqual( Stem("enjoin"), "enjoin");});
test("enjoined -> enjoin", function() {deepEqual( Stem("enjoined"), "enjoin");});
test("enjoins -> enjoin", function() {deepEqual( Stem("enjoins"), "enjoin");});
test("enjoy -> enjoy", function() {deepEqual( Stem("enjoy"), "enjoy");});
test("enjoyable -> enjoy", function() {deepEqual( Stem("enjoyable"), "enjoy");});
test("enjoyed -> enjoy", function() {deepEqual( Stem("enjoyed"), "enjoy");});
test("enjoying -> enjoy", function() {deepEqual( Stem("enjoying"), "enjoy");});
test("enjoyingly -> enjoy", function() {deepEqual( Stem("enjoyingly"), "enjoy");});
test("enjoyment -> enjoy", function() {deepEqual( Stem("enjoyment"), "enjoy");});
test("enjoys -> enjoy", function() {deepEqual( Stem("enjoys"), "enjoy");});
test("enlarge -> enlarg", function() {deepEqual( Stem("enlarge"), "enlarg");});
test("enlarged -> enlarg", function() {deepEqual( Stem("enlarged"), "enlarg");});
test("enlarging -> enlarg", function() {deepEqual( Stem("enlarging"), "enlarg");});
test("enlighten -> enlighten", function() {deepEqual( Stem("enlighten"), "enlighten");});
test("enlightened -> enlighten", function() {deepEqual( Stem("enlightened"), "enlighten");});
test("enlightenment -> enlighten", function() {deepEqual( Stem("enlightenment"), "enlighten");});
test("enlist -> enlist", function() {deepEqual( Stem("enlist"), "enlist");});
test("enlisted -> enlist", function() {deepEqual( Stem("enlisted"), "enlist");});
test("enlisting -> enlist", function() {deepEqual( Stem("enlisting"), "enlist");});
test("enlistment -> enlist", function() {deepEqual( Stem("enlistment"), "enlist");});
test("enliven -> enliven", function() {deepEqual( Stem("enliven"), "enliven");});
test("enlivened -> enliven", function() {deepEqual( Stem("enlivened"), "enliven");});
test("enlivening -> enliven", function() {deepEqual( Stem("enlivening"), "enliven");});
test("enlivenment -> enliven", function() {deepEqual( Stem("enlivenment"), "enliven");});
test("enmity -> enmiti", function() {deepEqual( Stem("enmity"), "enmiti");});
test("ennoble -> ennobl", function() {deepEqual( Stem("ennoble"), "ennobl");});
test("ennobled -> ennobl", function() {deepEqual( Stem("ennobled"), "ennobl");});
test("ennobles -> ennobl", function() {deepEqual( Stem("ennobles"), "ennobl");});
test("ennui -> ennui", function() {deepEqual( Stem("ennui"), "ennui");});
test("enormity -> enorm", function() {deepEqual( Stem("enormity"), "enorm");});
test("enormous -> enorm", function() {deepEqual( Stem("enormous"), "enorm");});
test("enormously -> enorm", function() {deepEqual( Stem("enormously"), "enorm");});
test("enough -> enough", function() {deepEqual( Stem("enough"), "enough");});
test("enrage -> enrag", function() {deepEqual( Stem("enrage"), "enrag");});
test("enraged -> enrag", function() {deepEqual( Stem("enraged"), "enrag");});
test("enraptured -> enraptur", function() {deepEqual( Stem("enraptured"), "enraptur");});
test("enriched -> enrich", function() {deepEqual( Stem("enriched"), "enrich");});
test("enriching -> enrich", function() {deepEqual( Stem("enriching"), "enrich");});
test("enrichment -> enrich", function() {deepEqual( Stem("enrichment"), "enrich");});
test("enrobed -> enrob", function() {deepEqual( Stem("enrobed"), "enrob");});
test("enrol -> enrol", function() {deepEqual( Stem("enrol"), "enrol");});
test("enrolled -> enrol", function() {deepEqual( Stem("enrolled"), "enrol");});
test("enshrined -> enshrin", function() {deepEqual( Stem("enshrined"), "enshrin");});
test("enshrouded -> enshroud", function() {deepEqual( Stem("enshrouded"), "enshroud");});
test("ensign -> ensign", function() {deepEqual( Stem("ensign"), "ensign");});
test("enslaver -> enslav", function() {deepEqual( Stem("enslaver"), "enslav");});
test("enslaving -> enslav", function() {deepEqual( Stem("enslaving"), "enslav");});
test("ensnare -> ensnar", function() {deepEqual( Stem("ensnare"), "ensnar");});
test("ensnared -> ensnar", function() {deepEqual( Stem("ensnared"), "ensnar");});
test("ensue -> ensu", function() {deepEqual( Stem("ensue"), "ensu");});
test("ensued -> ensu", function() {deepEqual( Stem("ensued"), "ensu");});
test("ensues -> ensu", function() {deepEqual( Stem("ensues"), "ensu");});
test("ensuing -> ensu", function() {deepEqual( Stem("ensuing"), "ensu");});
test("ensure -> ensur", function() {deepEqual( Stem("ensure"), "ensur");});
test("entail -> entail", function() {deepEqual( Stem("entail"), "entail");});
test("entailed -> entail", function() {deepEqual( Stem("entailed"), "entail");});
test("entangle -> entangl", function() {deepEqual( Stem("entangle"), "entangl");});
test("entangled -> entangl", function() {deepEqual( Stem("entangled"), "entangl");});
test("entanglement -> entangl", function() {deepEqual( Stem("entanglement"), "entangl");});
test("enter -> enter", function() {deepEqual( Stem("enter"), "enter");});
test("entered -> enter", function() {deepEqual( Stem("entered"), "enter");});
test("entering -> enter", function() {deepEqual( Stem("entering"), "enter");});
test("enterprise -> enterpris", function() {deepEqual( Stem("enterprise"), "enterpris");});
test("enterprising -> enterpris", function() {deepEqual( Stem("enterprising"), "enterpris");});
test("enters -> enter", function() {deepEqual( Stem("enters"), "enter");});
test("entertain -> entertain", function() {deepEqual( Stem("entertain"), "entertain");});
test("entertained -> entertain", function() {deepEqual( Stem("entertained"), "entertain");});
test("entertainer -> entertain", function() {deepEqual( Stem("entertainer"), "entertain");});
test("entertaining -> entertain", function() {deepEqual( Stem("entertaining"), "entertain");});
test("entertainment -> entertain", function() {deepEqual( Stem("entertainment"), "entertain");});
test("entertainments -> entertain", function() {deepEqual( Stem("entertainments"), "entertain");});
test("entertains -> entertain", function() {deepEqual( Stem("entertains"), "entertain");});
test("enthralled -> enthral", function() {deepEqual( Stem("enthralled"), "enthral");});
test("enthusiasm -> enthusiasm", function() {deepEqual( Stem("enthusiasm"), "enthusiasm");});
test("enthusiastic -> enthusiast", function() {deepEqual( Stem("enthusiastic"), "enthusiast");});
test("enthusiastically -> enthusiast", function() {deepEqual( Stem("enthusiastically"), "enthusiast");});
test("enticed -> entic", function() {deepEqual( Stem("enticed"), "entic");});
test("enticing -> entic", function() {deepEqual( Stem("enticing"), "entic");});
test("entire -> entir", function() {deepEqual( Stem("entire"), "entir");});
test("entirely -> entir", function() {deepEqual( Stem("entirely"), "entir");});
test("entirety -> entireti", function() {deepEqual( Stem("entirety"), "entireti");});
test("entitle -> entitl", function() {deepEqual( Stem("entitle"), "entitl");});
test("entitled -> entitl", function() {deepEqual( Stem("entitled"), "entitl");});
test("entitling -> entitl", function() {deepEqual( Stem("entitling"), "entitl");});
test("entombed -> entomb", function() {deepEqual( Stem("entombed"), "entomb");});
test("entombment -> entomb", function() {deepEqual( Stem("entombment"), "entomb");});
test("entomol -> entomol", function() {deepEqual( Stem("entomol"), "entomol");});
test("entomological -> entomolog", function() {deepEqual( Stem("entomological"), "entomolog");});
test("entomologist -> entomologist", function() {deepEqual( Stem("entomologist"), "entomologist");});
test("entomology -> entomolog", function() {deepEqual( Stem("entomology"), "entomolog");});
test("entomostraca -> entomostraca", function() {deepEqual( Stem("entomostraca"), "entomostraca");});
test("entomostracous -> entomostrac", function() {deepEqual( Stem("entomostracous"), "entomostrac");});
test("entrails -> entrail", function() {deepEqual( Stem("entrails"), "entrail");});
test("entrance -> entranc", function() {deepEqual( Stem("entrance"), "entranc");});
test("entrances -> entranc", function() {deepEqual( Stem("entrances"), "entranc");});
test("entrap -> entrap", function() {deepEqual( Stem("entrap"), "entrap");});
test("entrapped -> entrap", function() {deepEqual( Stem("entrapped"), "entrap");});
test("entre -> entr", function() {deepEqual( Stem("entre"), "entr");});
test("entreat -> entreat", function() {deepEqual( Stem("entreat"), "entreat");});
test("entreated -> entreat", function() {deepEqual( Stem("entreated"), "entreat");});
test("entreaties -> entreati", function() {deepEqual( Stem("entreaties"), "entreati");});
test("entreating -> entreat", function() {deepEqual( Stem("entreating"), "entreat");});
test("entreats -> entreat", function() {deepEqual( Stem("entreats"), "entreat");});
test("entreaty -> entreati", function() {deepEqual( Stem("entreaty"), "entreati");});
test("entree -> entre", function() {deepEqual( Stem("entree"), "entre");});
test("entrenched -> entrench", function() {deepEqual( Stem("entrenched"), "entrench");});
test("entries -> entri", function() {deepEqual( Stem("entries"), "entri");});
test("entrust -> entrust", function() {deepEqual( Stem("entrust"), "entrust");});
test("entrusted -> entrust", function() {deepEqual( Stem("entrusted"), "entrust");});
test("entry -> entri", function() {deepEqual( Stem("entry"), "entri");});
test("entwine -> entwin", function() {deepEqual( Stem("entwine"), "entwin");});
test("entwined -> entwin", function() {deepEqual( Stem("entwined"), "entwin");});
test("entwines -> entwin", function() {deepEqual( Stem("entwines"), "entwin");});
test("enumerate -> enumer", function() {deepEqual( Stem("enumerate"), "enumer");});
test("enumerated -> enumer", function() {deepEqual( Stem("enumerated"), "enumer");});
test("enunciated -> enunci", function() {deepEqual( Stem("enunciated"), "enunci");});
test("enunciation -> enunci", function() {deepEqual( Stem("enunciation"), "enunci");});
test("envelope -> envelop", function() {deepEqual( Stem("envelope"), "envelop");});
test("enveloped -> envelop", function() {deepEqual( Stem("enveloped"), "envelop");});
test("envelopes -> envelop", function() {deepEqual( Stem("envelopes"), "envelop");});
test("envelops -> envelop", function() {deepEqual( Stem("envelops"), "envelop");});
test("envenomed -> envenom", function() {deepEqual( Stem("envenomed"), "envenom");});
test("enviable -> enviabl", function() {deepEqual( Stem("enviable"), "enviabl");});
test("envied -> envi", function() {deepEqual( Stem("envied"), "envi");});
test("envies -> envi", function() {deepEqual( Stem("envies"), "envi");});
test("envious -> envious", function() {deepEqual( Stem("envious"), "envious");});
test("environ -> environ", function() {deepEqual( Stem("environ"), "environ");});
test("environment -> environ", function() {deepEqual( Stem("environment"), "environ");});
test("environne -> environn", function() {deepEqual( Stem("environne"), "environn");});
test("envy -> envi", function() {deepEqual( Stem("envy"), "envi");});
test("epaulets -> epaulet", function() {deepEqual( Stem("epaulets"), "epaulet");});
test("epaulette -> epaulett", function() {deepEqual( Stem("epaulette"), "epaulett");});
test("epeira -> epeira", function() {deepEqual( Stem("epeira"), "epeira");});
test("ephemeral -> ephemer", function() {deepEqual( Stem("ephemeral"), "ephemer");});
test("epicure -> epicur", function() {deepEqual( Stem("epicure"), "epicur");});
test("epicurean -> epicurean", function() {deepEqual( Stem("epicurean"), "epicurean");});
test("epidemics -> epidem", function() {deepEqual( Stem("epidemics"), "epidem");});
test("epilepsy -> epilepsi", function() {deepEqual( Stem("epilepsy"), "epilepsi");});
test("epileptic -> epilept", function() {deepEqual( Stem("epileptic"), "epilept");});
test("epilogue -> epilogu", function() {deepEqual( Stem("epilogue"), "epilogu");});
test("episode -> episod", function() {deepEqual( Stem("episode"), "episod");});
test("episodes -> episod", function() {deepEqual( Stem("episodes"), "episod");});
test("epistle -> epistl", function() {deepEqual( Stem("epistle"), "epistl");});
test("epithet -> epithet", function() {deepEqual( Stem("epithet"), "epithet");});
test("epithets -> epithet", function() {deepEqual( Stem("epithets"), "epithet");});
test("epitome -> epitom", function() {deepEqual( Stem("epitome"), "epitom");});
test("epoch -> epoch", function() {deepEqual( Stem("epoch"), "epoch");});
test("epochs -> epoch", function() {deepEqual( Stem("epochs"), "epoch");});
test("eprise -> epris", function() {deepEqual( Stem("eprise"), "epris");});
test("epsom -> epsom", function() {deepEqual( Stem("epsom"), "epsom");});
test("equable -> equabl", function() {deepEqual( Stem("equable"), "equabl");});
test("equal -> equal", function() {deepEqual( Stem("equal"), "equal");});
test("equality -> equal", function() {deepEqual( Stem("equality"), "equal");});
test("equalle -> equall", function() {deepEqual( Stem("equalle"), "equall");});
test("equalled -> equal", function() {deepEqual( Stem("equalled"), "equal");});
test("equalling -> equal", function() {deepEqual( Stem("equalling"), "equal");});
test("equally -> equal", function() {deepEqual( Stem("equally"), "equal");});
test("equals -> equal", function() {deepEqual( Stem("equals"), "equal");});
test("equanimity -> equanim", function() {deepEqual( Stem("equanimity"), "equanim");});
test("equator -> equat", function() {deepEqual( Stem("equator"), "equat");});
test("equatorial -> equatori", function() {deepEqual( Stem("equatorial"), "equatori");});
test("equestrian -> equestrian", function() {deepEqual( Stem("equestrian"), "equestrian");});
test("equidistant -> equidist", function() {deepEqual( Stem("equidistant"), "equidist");});
test("equilibrium -> equilibrium", function() {deepEqual( Stem("equilibrium"), "equilibrium");});
test("equinox -> equinox", function() {deepEqual( Stem("equinox"), "equinox");});
test("equipage -> equipag", function() {deepEqual( Stem("equipage"), "equipag");});
test("equipages -> equipag", function() {deepEqual( Stem("equipages"), "equipag");});
test("equipment -> equip", function() {deepEqual( Stem("equipment"), "equip");});
test("equipped -> equip", function() {deepEqual( Stem("equipped"), "equip");});
test("equitable -> equit", function() {deepEqual( Stem("equitable"), "equit");});
test("equitably -> equit", function() {deepEqual( Stem("equitably"), "equit");});
test("equitem -> equitem", function() {deepEqual( Stem("equitem"), "equitem");});
test("equity -> equiti", function() {deepEqual( Stem("equity"), "equiti");});
test("equivalent -> equival", function() {deepEqual( Stem("equivalent"), "equival");});
test("equivocal -> equivoc", function() {deepEqual( Stem("equivocal"), "equivoc");});
test("equivocation -> equivoc", function() {deepEqual( Stem("equivocation"), "equivoc");});
test("equus -> equus", function() {deepEqual( Stem("equus"), "equus");});
test("er -> er", function() {deepEqual( Stem("er"), "er");});
test("era -> era", function() {deepEqual( Stem("era"), "era");});
test("eradicate -> erad", function() {deepEqual( Stem("eradicate"), "erad");});
test("eradicated -> erad", function() {deepEqual( Stem("eradicated"), "erad");});
test("eras -> era", function() {deepEqual( Stem("eras"), "era");});
test("erased -> eras", function() {deepEqual( Stem("erased"), "eras");});
test("ercharged -> ercharg", function() {deepEqual( Stem("ercharged"), "ercharg");});
test("ere -> ere", function() {deepEqual( Stem("ere"), "ere");});
test("erec -> erec", function() {deepEqual( Stem("erec"), "erec");});
test("erect -> erect", function() {deepEqual( Stem("erect"), "erect");});
test("erected -> erect", function() {deepEqual( Stem("erected"), "erect");});
test("erections -> erect", function() {deepEqual( Stem("erections"), "erect");});
test("erectness -> erect", function() {deepEqual( Stem("erectness"), "erect");});
test("erects -> erect", function() {deepEqual( Stem("erects"), "erect");});
test("erichson -> erichson", function() {deepEqual( Stem("erichson"), "erichson");});
test("erle -> erl", function() {deepEqual( Stem("erle"), "erl");});
test("erme -> erm", function() {deepEqual( Stem("erme"), "erm");});
test("ermine -> ermin", function() {deepEqual( Stem("ermine"), "ermin");});
test("erosio -> erosio", function() {deepEqual( Stem("erosio"), "erosio");});
test("err -> err", function() {deepEqual( Stem("err"), "err");});
test("errand -> errand", function() {deepEqual( Stem("errand"), "errand");});
test("errands -> errand", function() {deepEqual( Stem("errands"), "errand");});
test("erratic -> errat", function() {deepEqual( Stem("erratic"), "errat");});
test("erred -> er", function() {deepEqual( Stem("erred"), "er");});
test("erring -> er", function() {deepEqual( Stem("erring"), "er");});
test("erroneous -> erron", function() {deepEqual( Stem("erroneous"), "erron");});
test("error -> error", function() {deepEqual( Stem("error"), "error");});
test("errors -> error", function() {deepEqual( Stem("errors"), "error");});
test("erst -> erst", function() {deepEqual( Stem("erst"), "erst");});
test("erstan -> erstan", function() {deepEqual( Stem("erstan"), "erstan");});
test("eructans -> eructan", function() {deepEqual( Stem("eructans"), "eructan");});
test("erudite -> erudit", function() {deepEqual( Stem("erudite"), "erudit");});
test("erudition -> erudit", function() {deepEqual( Stem("erudition"), "erudit");});
test("erupted -> erupt", function() {deepEqual( Stem("erupted"), "erupt");});
test("eruption -> erupt", function() {deepEqual( Stem("eruption"), "erupt");});
test("eruptions -> erupt", function() {deepEqual( Stem("eruptions"), "erupt");});
test("eruptive -> erupt", function() {deepEqual( Stem("eruptive"), "erupt");});
test("eryngium -> eryngium", function() {deepEqual( Stem("eryngium"), "eryngium");});
test("erysipelas -> erysipela", function() {deepEqual( Stem("erysipelas"), "erysipela");});
test("erythraeum -> erythraeum", function() {deepEqual( Stem("erythraeum"), "erythraeum");});
test("es -> es", function() {deepEqual( Stem("es"), "es");});
test("escape -> escap", function() {deepEqual( Stem("escape"), "escap");});
test("escaped -> escap", function() {deepEqual( Stem("escaped"), "escap");});
test("escapes -> escap", function() {deepEqual( Stem("escapes"), "escap");});
test("escaping -> escap", function() {deepEqual( Stem("escaping"), "escap");});
test("escarpment -> escarp", function() {deepEqual( Stem("escarpment"), "escarp");});
test("escarpments -> escarp", function() {deepEqual( Stem("escarpments"), "escarp");});
test("eschara -> eschara", function() {deepEqual( Stem("eschara"), "eschara");});
test("escheated -> escheat", function() {deepEqual( Stem("escheated"), "escheat");});
test("escort -> escort", function() {deepEqual( Stem("escort"), "escort");});
test("escorted -> escort", function() {deepEqual( Stem("escorted"), "escort");});
test("escorting -> escort", function() {deepEqual( Stem("escorting"), "escort");});
test("esculentus -> esculentus", function() {deepEqual( Stem("esculentus"), "esculentus");});
test("escutcheons -> escutcheon", function() {deepEqual( Stem("escutcheons"), "escutcheon");});
test("esk -> esk", function() {deepEqual( Stem("esk"), "esk");});
test("espagne -> espagn", function() {deepEqual( Stem("espagne"), "espagn");});
test("especial -> especi", function() {deepEqual( Stem("especial"), "especi");});
test("especially -> especi", function() {deepEqual( Stem("especially"), "especi");});
test("espied -> espi", function() {deepEqual( Stem("espied"), "espi");});
test("esplanades -> esplanad", function() {deepEqual( Stem("esplanades"), "esplanad");});
test("espouse -> espous", function() {deepEqual( Stem("espouse"), "espous");});
test("espoused -> espous", function() {deepEqual( Stem("espoused"), "espous");});
test("esprit -> esprit", function() {deepEqual( Stem("esprit"), "esprit");});
test("esq -> esq", function() {deepEqual( Stem("esq"), "esq");});
test("esquimau -> esquimau", function() {deepEqual( Stem("esquimau"), "esquimau");});
test("esquire -> esquir", function() {deepEqual( Stem("esquire"), "esquir");});
test("essay -> essay", function() {deepEqual( Stem("essay"), "essay");});
test("essayed -> essay", function() {deepEqual( Stem("essayed"), "essay");});
test("essays -> essay", function() {deepEqual( Stem("essays"), "essay");});
test("esse -> ess", function() {deepEqual( Stem("esse"), "ess");});
test("essence -> essenc", function() {deepEqual( Stem("essence"), "essenc");});
test("essential -> essenti", function() {deepEqual( Stem("essential"), "essenti");});
test("essentially -> essenti", function() {deepEqual( Stem("essentially"), "essenti");});
test("essentials -> essenti", function() {deepEqual( Stem("essentials"), "essenti");});
test("essex -> essex", function() {deepEqual( Stem("essex"), "essex");});
test("est -> est", function() {deepEqual( Stem("est"), "est");});
test("establish -> establish", function() {deepEqual( Stem("establish"), "establish");});
test("established -> establish", function() {deepEqual( Stem("established"), "establish");});
test("establishes -> establish", function() {deepEqual( Stem("establishes"), "establish");});
test("establishing -> establish", function() {deepEqual( Stem("establishing"), "establish");});
test("establishment -> establish", function() {deepEqual( Stem("establishment"), "establish");});
test("establishments -> establish", function() {deepEqual( Stem("establishments"), "establish");});
test("estacado -> estacado", function() {deepEqual( Stem("estacado"), "estacado");});
test("estancia -> estancia", function() {deepEqual( Stem("estancia"), "estancia");});
test("estancias -> estancia", function() {deepEqual( Stem("estancias"), "estancia");});
test("estanciero -> estanciero", function() {deepEqual( Stem("estanciero"), "estanciero");});
test("estate -> estat", function() {deepEqual( Stem("estate"), "estat");});
test("estates -> estat", function() {deepEqual( Stem("estates"), "estat");});
test("esteem -> esteem", function() {deepEqual( Stem("esteem"), "esteem");});
test("esteemed -> esteem", function() {deepEqual( Stem("esteemed"), "esteem");});
test("esteeming -> esteem", function() {deepEqual( Stem("esteeming"), "esteem");});
test("esteems -> esteem", function() {deepEqual( Stem("esteems"), "esteem");});
test("esther -> esther", function() {deepEqual( Stem("esther"), "esther");});
test("esthers -> esther", function() {deepEqual( Stem("esthers"), "esther");});
test("estimable -> estim", function() {deepEqual( Stem("estimable"), "estim");});
test("estimate -> estim", function() {deepEqual( Stem("estimate"), "estim");});
test("estimated -> estim", function() {deepEqual( Stem("estimated"), "estim");});
test("estimates -> estim", function() {deepEqual( Stem("estimates"), "estim");});
test("estimating -> estim", function() {deepEqual( Stem("estimating"), "estim");});
test("estimation -> estim", function() {deepEqual( Stem("estimation"), "estim");});
test("estrange -> estrang", function() {deepEqual( Stem("estrange"), "estrang");});
test("estranged -> estrang", function() {deepEqual( Stem("estranged"), "estrang");});
test("estrangement -> estrang", function() {deepEqual( Stem("estrangement"), "estrang");});
test("estranging -> estrang", function() {deepEqual( Stem("estranging"), "estrang");});
test("estuaries -> estuari", function() {deepEqual( Stem("estuaries"), "estuari");});
test("estuary -> estuari", function() {deepEqual( Stem("estuary"), "estuari");});
test("et -> et", function() {deepEqual( Stem("et"), "et");});
test("etage -> etag", function() {deepEqual( Stem("etage"), "etag");});
test("etc -> etc", function() {deepEqual( Stem("etc"), "etc");});
test("ete -> ete", function() {deepEqual( Stem("ete"), "ete");});
test("eternal -> etern", function() {deepEqual( Stem("eternal"), "etern");});
test("eternally -> etern", function() {deepEqual( Stem("eternally"), "etern");});
test("eternelle -> eternell", function() {deepEqual( Stem("eternelle"), "eternell");});
test("eternity -> etern", function() {deepEqual( Stem("eternity"), "etern");});
test("etes -> ete", function() {deepEqual( Stem("etes"), "ete");});
test("ethereal -> ether", function() {deepEqual( Stem("ethereal"), "ether");});
test("etiquette -> etiquett", function() {deepEqual( Stem("etiquette"), "etiquett");});
test("etiquettes -> etiquett", function() {deepEqual( Stem("etiquettes"), "etiquett");});
test("etna -> etna", function() {deepEqual( Stem("etna"), "etna");});
test("eton -> eton", function() {deepEqual( Stem("eton"), "eton");});
test("etonnement -> etonn", function() {deepEqual( Stem("etonnement"), "etonn");});
test("etymology -> etymolog", function() {deepEqual( Stem("etymology"), "etymolog");});
test("eucalypti -> eucalypti", function() {deepEqual( Stem("eucalypti"), "eucalypti");});
test("eucalyptus -> eucalyptus", function() {deepEqual( Stem("eucalyptus"), "eucalyptus");});
test("eudromia -> eudromia", function() {deepEqual( Stem("eudromia"), "eudromia");});
test("eulogistic -> eulogist", function() {deepEqual( Stem("eulogistic"), "eulogist");});
test("eulogium -> eulogium", function() {deepEqual( Stem("eulogium"), "eulogium");});
test("euphorbia -> euphorbia", function() {deepEqual( Stem("euphorbia"), "euphorbia");});
test("euphorbiaceae -> euphorbiacea", function() {deepEqual( Stem("euphorbiaceae"), "euphorbiacea");});
test("europe -> europ", function() {deepEqual( Stem("europe"), "europ");});
test("european -> european", function() {deepEqual( Stem("european"), "european");});
test("europeans -> european", function() {deepEqual( Stem("europeans"), "european");});
test("eustace -> eustac", function() {deepEqual( Stem("eustace"), "eustac");});
test("euston -> euston", function() {deepEqual( Stem("euston"), "euston");});
test("ev -> ev", function() {deepEqual( Stem("ev"), "ev");});
test("evade -> evad", function() {deepEqual( Stem("evade"), "evad");});
test("evaded -> evad", function() {deepEqual( Stem("evaded"), "evad");});
test("evading -> evad", function() {deepEqual( Stem("evading"), "evad");});
test("evans -> evan", function() {deepEqual( Stem("evans"), "evan");});
test("evaporate -> evapor", function() {deepEqual( Stem("evaporate"), "evapor");});
test("evaporated -> evapor", function() {deepEqual( Stem("evaporated"), "evapor");});
test("evaporates -> evapor", function() {deepEqual( Stem("evaporates"), "evapor");});
test("evaporation -> evapor", function() {deepEqual( Stem("evaporation"), "evapor");});
test("evasion -> evas", function() {deepEqual( Stem("evasion"), "evas");});
test("evasions -> evas", function() {deepEqual( Stem("evasions"), "evas");});
test("evasive -> evas", function() {deepEqual( Stem("evasive"), "evas");});
test("evasively -> evas", function() {deepEqual( Stem("evasively"), "evas");});
test("evasiveness -> evas", function() {deepEqual( Stem("evasiveness"), "evas");});
test("eve -> eve", function() {deepEqual( Stem("eve"), "eve");});
test("evelyn -> evelyn", function() {deepEqual( Stem("evelyn"), "evelyn");});
test("evelyns -> evelyn", function() {deepEqual( Stem("evelyns"), "evelyn");});
test("even -> even", function() {deepEqual( Stem("even"), "even");});
test("evening -> even", function() {deepEqual( Stem("evening"), "even");});
test("evenings -> even", function() {deepEqual( Stem("evenings"), "even");});
test("evenlng -> evenlng", function() {deepEqual( Stem("evenlng"), "evenlng");});
test("evenly -> even", function() {deepEqual( Stem("evenly"), "even");});
test("evenness -> even", function() {deepEqual( Stem("evenness"), "even");});
test("event -> event", function() {deepEqual( Stem("event"), "event");});
test("eventful -> event", function() {deepEqual( Stem("eventful"), "event");});
test("events -> event", function() {deepEqual( Stem("events"), "event");});
test("eventually -> eventu", function() {deepEqual( Stem("eventually"), "eventu");});
test("ever -> ever", function() {deepEqual( Stem("ever"), "ever");});
test("everbody -> everbodi", function() {deepEqual( Stem("everbody"), "everbodi");});
test("everbrowns -> everbrown", function() {deepEqual( Stem("everbrowns"), "everbrown");});
test("everett -> everett", function() {deepEqual( Stem("everett"), "everett");});
test("evergreen -> evergreen", function() {deepEqual( Stem("evergreen"), "evergreen");});
test("evergreens -> evergreen", function() {deepEqual( Stem("evergreens"), "evergreen");});
test("everlasting -> everlast", function() {deepEqual( Stem("everlasting"), "everlast");});
test("everlastingly -> everlast", function() {deepEqual( Stem("everlastingly"), "everlast");});
test("evermore -> evermor", function() {deepEqual( Stem("evermore"), "evermor");});
test("evervwhere -> evervwher", function() {deepEqual( Stem("evervwhere"), "evervwher");});
test("every -> everi", function() {deepEqual( Stem("every"), "everi");});
test("everybody -> everybodi", function() {deepEqual( Stem("everybody"), "everybodi");});
test("everybodys -> everybodi", function() {deepEqual( Stem("everybodys"), "everybodi");});
test("everyday -> everyday", function() {deepEqual( Stem("everyday"), "everyday");});
test("everyone -> everyon", function() {deepEqual( Stem("everyone"), "everyon");});
test("everything -> everyth", function() {deepEqual( Stem("everything"), "everyth");});
test("everythink -> everythink", function() {deepEqual( Stem("everythink"), "everythink");});
test("everyways -> everyway", function() {deepEqual( Stem("everyways"), "everyway");});
test("everywhere -> everywher", function() {deepEqual( Stem("everywhere"), "everywher");});
test("everywheres -> everywher", function() {deepEqual( Stem("everywheres"), "everywher");});
test("evidence -> evid", function() {deepEqual( Stem("evidence"), "evid");});
test("evidences -> evid", function() {deepEqual( Stem("evidences"), "evid");});
test("evidenfly -> evidenfli", function() {deepEqual( Stem("evidenfly"), "evidenfli");});
test("evident -> evid", function() {deepEqual( Stem("evident"), "evid");});
test("evidently -> evid", function() {deepEqual( Stem("evidently"), "evid");});
test("evil -> evil", function() {deepEqual( Stem("evil"), "evil");});
test("evils -> evil", function() {deepEqual( Stem("evils"), "evil");});
test("evince -> evinc", function() {deepEqual( Stem("evince"), "evinc");});
test("evinced -> evinc", function() {deepEqual( Stem("evinced"), "evinc");});
test("evincing -> evinc", function() {deepEqual( Stem("evincing"), "evinc");});
test("evins -> evin", function() {deepEqual( Stem("evins"), "evin");});
test("evoke -> evok", function() {deepEqual( Stem("evoke"), "evok");});
test("evoked -> evok", function() {deepEqual( Stem("evoked"), "evok");});
test("evokes -> evok", function() {deepEqual( Stem("evokes"), "evok");});
test("evolution -> evolut", function() {deepEqual( Stem("evolution"), "evolut");});
test("evolutions -> evolut", function() {deepEqual( Stem("evolutions"), "evolut");});
test("ew -> ew", function() {deepEqual( Stem("ew"), "ew");});
test("ewe -> ewe", function() {deepEqual( Stem("ewe"), "ewe");});
test("ewent -> ewent", function() {deepEqual( Stem("ewent"), "ewent");});
test("ex -> ex", function() {deepEqual( Stem("ex"), "ex");});
test("exact -> exact", function() {deepEqual( Stem("exact"), "exact");});
test("exacted -> exact", function() {deepEqual( Stem("exacted"), "exact");});
test("exacting -> exact", function() {deepEqual( Stem("exacting"), "exact");});
test("exactions -> exact", function() {deepEqual( Stem("exactions"), "exact");});
test("exactitude -> exactitud", function() {deepEqual( Stem("exactitude"), "exactitud");});
test("exactly -> exact", function() {deepEqual( Stem("exactly"), "exact");});
test("exactness -> exact", function() {deepEqual( Stem("exactness"), "exact");});
test("exaggerate -> exagger", function() {deepEqual( Stem("exaggerate"), "exagger");});
test("exaggerated -> exagger", function() {deepEqual( Stem("exaggerated"), "exagger");});
test("exaggerates -> exagger", function() {deepEqual( Stem("exaggerates"), "exagger");});
test("exaggerating -> exagger", function() {deepEqual( Stem("exaggerating"), "exagger");});
test("exaggeration -> exagger", function() {deepEqual( Stem("exaggeration"), "exagger");});
test("exaggerations -> exagger", function() {deepEqual( Stem("exaggerations"), "exagger");});
test("exalt -> exalt", function() {deepEqual( Stem("exalt"), "exalt");});
test("exaltation -> exalt", function() {deepEqual( Stem("exaltation"), "exalt");});
test("exalted -> exalt", function() {deepEqual( Stem("exalted"), "exalt");});
test("exalting -> exalt", function() {deepEqual( Stem("exalting"), "exalt");});
test("examination -> examin", function() {deepEqual( Stem("examination"), "examin");});
test("examinations -> examin", function() {deepEqual( Stem("examinations"), "examin");});
test("examine -> examin", function() {deepEqual( Stem("examine"), "examin");});
test("examined -> examin", function() {deepEqual( Stem("examined"), "examin");});
test("examines -> examin", function() {deepEqual( Stem("examines"), "examin");});
test("examining -> examin", function() {deepEqual( Stem("examining"), "examin");});
test("example -> exampl", function() {deepEqual( Stem("example"), "exampl");});
test("examples -> exampl", function() {deepEqual( Stem("examples"), "exampl");});
test("exasperated -> exasper", function() {deepEqual( Stem("exasperated"), "exasper");});
test("exasperating -> exasper", function() {deepEqual( Stem("exasperating"), "exasper");});
test("exasperation -> exasper", function() {deepEqual( Stem("exasperation"), "exasper");});
test("excavated -> excav", function() {deepEqual( Stem("excavated"), "excav");});
test("excavation -> excav", function() {deepEqual( Stem("excavation"), "excav");});
test("excavations -> excav", function() {deepEqual( Stem("excavations"), "excav");});
test("exceed -> exceed", function() {deepEqual( Stem("exceed"), "exceed");});
test("exceeded -> exceed", function() {deepEqual( Stem("exceeded"), "exceed");});
test("exceeding -> exceed", function() {deepEqual( Stem("exceeding"), "exceed");});
test("exceedingly -> exceed", function() {deepEqual( Stem("exceedingly"), "exceed");});
test("exceeds -> exceed", function() {deepEqual( Stem("exceeds"), "exceed");});
test("excelled -> excel", function() {deepEqual( Stem("excelled"), "excel");});
test("excellence -> excel", function() {deepEqual( Stem("excellence"), "excel");});
test("excellences -> excel", function() {deepEqual( Stem("excellences"), "excel");});
test("excellencies -> excel", function() {deepEqual( Stem("excellencies"), "excel");});
test("excellency -> excel", function() {deepEqual( Stem("excellency"), "excel");});
test("excellent -> excel", function() {deepEqual( Stem("excellent"), "excel");});
test("excellently -> excel", function() {deepEqual( Stem("excellently"), "excel");});
test("except -> except", function() {deepEqual( Stem("except"), "except");});
test("excepted -> except", function() {deepEqual( Stem("excepted"), "except");});
test("excepting -> except", function() {deepEqual( Stem("excepting"), "except");});
test("exception -> except", function() {deepEqual( Stem("exception"), "except");});
test("exceptional -> except", function() {deepEqual( Stem("exceptional"), "except");});
test("exceptionally -> except", function() {deepEqual( Stem("exceptionally"), "except");});
test("exceptionalness -> exception", function() {deepEqual( Stem("exceptionalness"), "exception");});
test("exceptions -> except", function() {deepEqual( Stem("exceptions"), "except");});
test("excess -> excess", function() {deepEqual( Stem("excess"), "excess");});
test("excesses -> excess", function() {deepEqual( Stem("excesses"), "excess");});
test("excessive -> excess", function() {deepEqual( Stem("excessive"), "excess");});
test("excessively -> excess", function() {deepEqual( Stem("excessively"), "excess");});
test("exchange -> exchang", function() {deepEqual( Stem("exchange"), "exchang");});
test("exchanged -> exchang", function() {deepEqual( Stem("exchanged"), "exchang");});
test("exchanges -> exchang", function() {deepEqual( Stem("exchanges"), "exchang");});
test("exchanging -> exchang", function() {deepEqual( Stem("exchanging"), "exchang");});
test("exchequer -> exchequ", function() {deepEqual( Stem("exchequer"), "exchequ");});
test("excitable -> excit", function() {deepEqual( Stem("excitable"), "excit");});
test("excitableness -> excit", function() {deepEqual( Stem("excitableness"), "excit");});
test("excite -> excit", function() {deepEqual( Stem("excite"), "excit");});
test("excited -> excit", function() {deepEqual( Stem("excited"), "excit");});
test("excitedly -> excit", function() {deepEqual( Stem("excitedly"), "excit");});
test("excitement -> excit", function() {deepEqual( Stem("excitement"), "excit");});
test("excitements -> excit", function() {deepEqual( Stem("excitements"), "excit");});
test("excites -> excit", function() {deepEqual( Stem("excites"), "excit");});
test("exciting -> excit", function() {deepEqual( Stem("exciting"), "excit");});
test("exclaim -> exclaim", function() {deepEqual( Stem("exclaim"), "exclaim");});
test("exclaimed -> exclaim", function() {deepEqual( Stem("exclaimed"), "exclaim");});
test("exclaiming -> exclaim", function() {deepEqual( Stem("exclaiming"), "exclaim");});
test("exclaims -> exclaim", function() {deepEqual( Stem("exclaims"), "exclaim");});
test("exclamation -> exclam", function() {deepEqual( Stem("exclamation"), "exclam");});
test("exclamations -> exclam", function() {deepEqual( Stem("exclamations"), "exclam");});
test("exclude -> exclud", function() {deepEqual( Stem("exclude"), "exclud");});
test("excluded -> exclud", function() {deepEqual( Stem("excluded"), "exclud");});
test("excluding -> exclud", function() {deepEqual( Stem("excluding"), "exclud");});
test("exclusion -> exclus", function() {deepEqual( Stem("exclusion"), "exclus");});
test("exclusions -> exclus", function() {deepEqual( Stem("exclusions"), "exclus");});
test("exclusive -> exclus", function() {deepEqual( Stem("exclusive"), "exclus");});
test("exclusively -> exclus", function() {deepEqual( Stem("exclusively"), "exclus");});
test("exclusiveness -> exclus", function() {deepEqual( Stem("exclusiveness"), "exclus");});
test("excoriate -> excori", function() {deepEqual( Stem("excoriate"), "excori");});
test("excremens -> excremen", function() {deepEqual( Stem("excremens"), "excremen");});
test("excrescence -> excresc", function() {deepEqual( Stem("excrescence"), "excresc");});
test("excruciatingly -> excruci", function() {deepEqual( Stem("excruciatingly"), "excruci");});
test("excursion -> excurs", function() {deepEqual( Stem("excursion"), "excurs");});
test("excursions -> excurs", function() {deepEqual( Stem("excursions"), "excurs");});
test("excusable -> excus", function() {deepEqual( Stem("excusable"), "excus");});
test("excuse -> excus", function() {deepEqual( Stem("excuse"), "excus");});
test("excused -> excus", function() {deepEqual( Stem("excused"), "excus");});
test("excuses -> excus", function() {deepEqual( Stem("excuses"), "excus");});
test("excusing -> excus", function() {deepEqual( Stem("excusing"), "excus");});
test("execrable -> execr", function() {deepEqual( Stem("execrable"), "execr");});
test("execrate -> execr", function() {deepEqual( Stem("execrate"), "execr");});
test("execrating -> execr", function() {deepEqual( Stem("execrating"), "execr");});
test("execute -> execut", function() {deepEqual( Stem("execute"), "execut");});
test("executed -> execut", function() {deepEqual( Stem("executed"), "execut");});
test("executing -> execut", function() {deepEqual( Stem("executing"), "execut");});
test("execution -> execut", function() {deepEqual( Stem("execution"), "execut");});
test("executioner -> execution", function() {deepEqual( Stem("executioner"), "execution");});
test("executions -> execut", function() {deepEqual( Stem("executions"), "execut");});
test("executive -> execut", function() {deepEqual( Stem("executive"), "execut");});
test("executor -> executor", function() {deepEqual( Stem("executor"), "executor");});
test("executors -> executor", function() {deepEqual( Stem("executors"), "executor");});
test("exemplary -> exemplari", function() {deepEqual( Stem("exemplary"), "exemplari");});
test("exemplified -> exemplifi", function() {deepEqual( Stem("exemplified"), "exemplifi");});
test("exemplifies -> exemplifi", function() {deepEqual( Stem("exemplifies"), "exemplifi");});
test("exemplify -> exemplifi", function() {deepEqual( Stem("exemplify"), "exemplifi");});
test("exempt -> exempt", function() {deepEqual( Stem("exempt"), "exempt");});
test("exempted -> exempt", function() {deepEqual( Stem("exempted"), "exempt");});
test("exemption -> exempt", function() {deepEqual( Stem("exemption"), "exempt");});
test("exercise -> exercis", function() {deepEqual( Stem("exercise"), "exercis");});
test("exercised -> exercis", function() {deepEqual( Stem("exercised"), "exercis");});
test("exercises -> exercis", function() {deepEqual( Stem("exercises"), "exercis");});
test("exercising -> exercis", function() {deepEqual( Stem("exercising"), "exercis");});
test("exert -> exert", function() {deepEqual( Stem("exert"), "exert");});
test("exerted -> exert", function() {deepEqual( Stem("exerted"), "exert");});
test("exerting -> exert", function() {deepEqual( Stem("exerting"), "exert");});
test("exertion -> exert", function() {deepEqual( Stem("exertion"), "exert");});
test("exertions -> exert", function() {deepEqual( Stem("exertions"), "exert");});
test("exerts -> exert", function() {deepEqual( Stem("exerts"), "exert");});
test("exeter -> exet", function() {deepEqual( Stem("exeter"), "exet");});
test("exhalations -> exhal", function() {deepEqual( Stem("exhalations"), "exhal");});
test("exhale -> exhal", function() {deepEqual( Stem("exhale"), "exhal");});
test("exhaled -> exhal", function() {deepEqual( Stem("exhaled"), "exhal");});
test("exhaust -> exhaust", function() {deepEqual( Stem("exhaust"), "exhaust");});
test("exhausted -> exhaust", function() {deepEqual( Stem("exhausted"), "exhaust");});
test("exhausting -> exhaust", function() {deepEqual( Stem("exhausting"), "exhaust");});
test("exhaustion -> exhaust", function() {deepEqual( Stem("exhaustion"), "exhaust");});
test("exhaustless -> exhaustless", function() {deepEqual( Stem("exhaustless"), "exhaustless");});
test("exhausts -> exhaust", function() {deepEqual( Stem("exhausts"), "exhaust");});
test("exhibit -> exhibit", function() {deepEqual( Stem("exhibit"), "exhibit");});
test("exhibited -> exhibit", function() {deepEqual( Stem("exhibited"), "exhibit");});
test("exhibiting -> exhibit", function() {deepEqual( Stem("exhibiting"), "exhibit");});
test("exhibition -> exhibit", function() {deepEqual( Stem("exhibition"), "exhibit");});
test("exhibitions -> exhibit", function() {deepEqual( Stem("exhibitions"), "exhibit");});
test("exhibits -> exhibit", function() {deepEqual( Stem("exhibits"), "exhibit");});
test("exhilarated -> exhilar", function() {deepEqual( Stem("exhilarated"), "exhilar");});
test("exhilarating -> exhilar", function() {deepEqual( Stem("exhilarating"), "exhilar");});
test("exhilaration -> exhilar", function() {deepEqual( Stem("exhilaration"), "exhilar");});
test("exhort -> exhort", function() {deepEqual( Stem("exhort"), "exhort");});
test("exhortation -> exhort", function() {deepEqual( Stem("exhortation"), "exhort");});
test("exhortations -> exhort", function() {deepEqual( Stem("exhortations"), "exhort");});
test("exhorted -> exhort", function() {deepEqual( Stem("exhorted"), "exhort");});
test("exhorting -> exhort", function() {deepEqual( Stem("exhorting"), "exhort");});
test("exhorts -> exhort", function() {deepEqual( Stem("exhorts"), "exhort");});
test("exigencies -> exig", function() {deepEqual( Stem("exigencies"), "exig");});
test("exile -> exil", function() {deepEqual( Stem("exile"), "exil");});
test("exiled -> exil", function() {deepEqual( Stem("exiled"), "exil");});
test("exiles -> exil", function() {deepEqual( Stem("exiles"), "exil");});
test("exist -> exist", function() {deepEqual( Stem("exist"), "exist");});
test("existe -> exist", function() {deepEqual( Stem("existe"), "exist");});
test("existed -> exist", function() {deepEqual( Stem("existed"), "exist");});
test("existence -> exist", function() {deepEqual( Stem("existence"), "exist");});
test("existent -> exist", function() {deepEqual( Stem("existent"), "exist");});
test("existing -> exist", function() {deepEqual( Stem("existing"), "exist");});
test("exists -> exist", function() {deepEqual( Stem("exists"), "exist");});
test("exit -> exit", function() {deepEqual( Stem("exit"), "exit");});
test("exorbitant -> exorbit", function() {deepEqual( Stem("exorbitant"), "exorbit");});
test("exordium -> exordium", function() {deepEqual( Stem("exordium"), "exordium");});
test("exotic -> exot", function() {deepEqual( Stem("exotic"), "exot");});
test("exotically -> exot", function() {deepEqual( Stem("exotically"), "exot");});
test("exotics -> exot", function() {deepEqual( Stem("exotics"), "exot");});
test("expand -> expand", function() {deepEqual( Stem("expand"), "expand");});
test("expande -> expand", function() {deepEqual( Stem("expande"), "expand");});
test("expanded -> expand", function() {deepEqual( Stem("expanded"), "expand");});
test("expanding -> expand", function() {deepEqual( Stem("expanding"), "expand");});
test("expands -> expand", function() {deepEqual( Stem("expands"), "expand");});
test("expanse -> expans", function() {deepEqual( Stem("expanse"), "expans");});
test("expanses -> expans", function() {deepEqual( Stem("expanses"), "expans");});
test("expansion -> expans", function() {deepEqual( Stem("expansion"), "expans");});
test("expansions -> expans", function() {deepEqual( Stem("expansions"), "expans");});
test("expansive -> expans", function() {deepEqual( Stem("expansive"), "expans");});
test("expatiate -> expati", function() {deepEqual( Stem("expatiate"), "expati");});
test("expatiated -> expati", function() {deepEqual( Stem("expatiated"), "expati");});
test("expatiating -> expati", function() {deepEqual( Stem("expatiating"), "expati");});
test("expatriated -> expatri", function() {deepEqual( Stem("expatriated"), "expatri");});
test("expatriation -> expatri", function() {deepEqual( Stem("expatriation"), "expatri");});
test("expect -> expect", function() {deepEqual( Stem("expect"), "expect");});
test("expectancy -> expect", function() {deepEqual( Stem("expectancy"), "expect");});
test("expectant -> expect", function() {deepEqual( Stem("expectant"), "expect");});
test("expectants -> expect", function() {deepEqual( Stem("expectants"), "expect");});
test("expectation -> expect", function() {deepEqual( Stem("expectation"), "expect");});
test("expectations -> expect", function() {deepEqual( Stem("expectations"), "expect");});
test("expected -> expect", function() {deepEqual( Stem("expected"), "expect");});
test("expecting -> expect", function() {deepEqual( Stem("expecting"), "expect");});
test("expects -> expect", function() {deepEqual( Stem("expects"), "expect");});
test("exped -> exp", function() {deepEqual( Stem("exped"), "exp");});
test("expedience -> expedi", function() {deepEqual( Stem("expedience"), "expedi");});
test("expediency -> expedi", function() {deepEqual( Stem("expediency"), "expedi");});
test("expedient -> expedi", function() {deepEqual( Stem("expedient"), "expedi");});
test("expedients -> expedi", function() {deepEqual( Stem("expedients"), "expedi");});
test("expedite -> expedit", function() {deepEqual( Stem("expedite"), "expedit");});
test("expedition -> expedit", function() {deepEqual( Stem("expedition"), "expedit");});
test("expeditions -> expedit", function() {deepEqual( Stem("expeditions"), "expedit");});
test("expeditious -> expediti", function() {deepEqual( Stem("expeditious"), "expediti");});
test("expeditiously -> expediti", function() {deepEqual( Stem("expeditiously"), "expediti");});
test("expel -> expel", function() {deepEqual( Stem("expel"), "expel");});
test("expelled -> expel", function() {deepEqual( Stem("expelled"), "expel");});
test("expelling -> expel", function() {deepEqual( Stem("expelling"), "expel");});
test("expend -> expend", function() {deepEqual( Stem("expend"), "expend");});
test("expended -> expend", function() {deepEqual( Stem("expended"), "expend");});
test("expenditure -> expenditur", function() {deepEqual( Stem("expenditure"), "expenditur");});
test("expense -> expens", function() {deepEqual( Stem("expense"), "expens");});
test("expenses -> expens", function() {deepEqual( Stem("expenses"), "expens");});
test("expensive -> expens", function() {deepEqual( Stem("expensive"), "expens");});
test("expensively -> expens", function() {deepEqual( Stem("expensively"), "expens");});
test("experience -> experi", function() {deepEqual( Stem("experience"), "experi");});
test("experienced -> experienc", function() {deepEqual( Stem("experienced"), "experienc");});
test("experiences -> experi", function() {deepEqual( Stem("experiences"), "experi");});
test("experiment -> experi", function() {deepEqual( Stem("experiment"), "experi");});
test("experimental -> experiment", function() {deepEqual( Stem("experimental"), "experiment");});
test("experimented -> experi", function() {deepEqual( Stem("experimented"), "experi");});
test("experiments -> experi", function() {deepEqual( Stem("experiments"), "experi");});
test("expert -> expert", function() {deepEqual( Stem("expert"), "expert");});
test("expiate -> expiat", function() {deepEqual( Stem("expiate"), "expiat");});
test("expiating -> expiat", function() {deepEqual( Stem("expiating"), "expiat");});
test("expiation -> expiat", function() {deepEqual( Stem("expiation"), "expiat");});
test("expiration -> expir", function() {deepEqual( Stem("expiration"), "expir");});
test("expire -> expir", function() {deepEqual( Stem("expire"), "expir");});
test("expired -> expir", function() {deepEqual( Stem("expired"), "expir");});
test("expiring -> expir", function() {deepEqual( Stem("expiring"), "expir");});
test("explain -> explain", function() {deepEqual( Stem("explain"), "explain");});
test("explained -> explain", function() {deepEqual( Stem("explained"), "explain");});
test("explaining -> explain", function() {deepEqual( Stem("explaining"), "explain");});
test("explains -> explain", function() {deepEqual( Stem("explains"), "explain");});
test("explanation -> explan", function() {deepEqual( Stem("explanation"), "explan");});
test("explanations -> explan", function() {deepEqual( Stem("explanations"), "explan");});
test("explanatory -> explanatori", function() {deepEqual( Stem("explanatory"), "explanatori");});
test("expletive -> explet", function() {deepEqual( Stem("expletive"), "explet");});
test("expletives -> explet", function() {deepEqual( Stem("expletives"), "explet");});
test("expletus -> expletus", function() {deepEqual( Stem("expletus"), "expletus");});
test("explicit -> explicit", function() {deepEqual( Stem("explicit"), "explicit");});
test("explode -> explod", function() {deepEqual( Stem("explode"), "explod");});
test("explodes -> explod", function() {deepEqual( Stem("explodes"), "explod");});
test("exploding -> explod", function() {deepEqual( Stem("exploding"), "explod");});
test("exploit -> exploit", function() {deepEqual( Stem("exploit"), "exploit");});
test("exploits -> exploit", function() {deepEqual( Stem("exploits"), "exploit");});
test("explore -> explor", function() {deepEqual( Stem("explore"), "explor");});
test("explored -> explor", function() {deepEqual( Stem("explored"), "explor");});
test("explorer -> explor", function() {deepEqual( Stem("explorer"), "explor");});
test("exploring -> explor", function() {deepEqual( Stem("exploring"), "explor");});
test("explosion -> explos", function() {deepEqual( Stem("explosion"), "explos");});
test("explosions -> explos", function() {deepEqual( Stem("explosions"), "explos");});
test("explosive -> explos", function() {deepEqual( Stem("explosive"), "explos");});
test("exponent -> expon", function() {deepEqual( Stem("exponent"), "expon");});
test("export -> export", function() {deepEqual( Stem("export"), "export");});
test("exportation -> export", function() {deepEqual( Stem("exportation"), "export");});
test("exported -> export", function() {deepEqual( Stem("exported"), "export");});
test("exports -> export", function() {deepEqual( Stem("exports"), "export");});
test("expose -> expos", function() {deepEqual( Stem("expose"), "expos");});
test("exposed -> expos", function() {deepEqual( Stem("exposed"), "expos");});
test("exposes -> expos", function() {deepEqual( Stem("exposes"), "expos");});
test("exposing -> expos", function() {deepEqual( Stem("exposing"), "expos");});
test("exposition -> exposit", function() {deepEqual( Stem("exposition"), "exposit");});
test("expostulate -> expostul", function() {deepEqual( Stem("expostulate"), "expostul");});
test("expostulated -> expostul", function() {deepEqual( Stem("expostulated"), "expostul");});
test("expostulating -> expostul", function() {deepEqual( Stem("expostulating"), "expostul");});
test("expostulation -> expostul", function() {deepEqual( Stem("expostulation"), "expostul");});
test("exposure -> exposur", function() {deepEqual( Stem("exposure"), "exposur");});
test("expound -> expound", function() {deepEqual( Stem("expound"), "expound");});
test("expounding -> expound", function() {deepEqual( Stem("expounding"), "expound");});
test("express -> express", function() {deepEqual( Stem("express"), "express");});
test("expressed -> express", function() {deepEqual( Stem("expressed"), "express");});
test("expresses -> express", function() {deepEqual( Stem("expresses"), "express");});
test("expressing -> express", function() {deepEqual( Stem("expressing"), "express");});
test("expression -> express", function() {deepEqual( Stem("expression"), "express");});
test("expressionless -> expressionless", function() {deepEqual( Stem("expressionless"), "expressionless");});
test("expressions -> express", function() {deepEqual( Stem("expressions"), "express");});
test("expressive -> express", function() {deepEqual( Stem("expressive"), "express");});
test("expressively -> express", function() {deepEqual( Stem("expressively"), "express");});
test("expressly -> expressli", function() {deepEqual( Stem("expressly"), "expressli");});
test("expulsion -> expuls", function() {deepEqual( Stem("expulsion"), "expuls");});
test("exquisite -> exquisit", function() {deepEqual( Stem("exquisite"), "exquisit");});
test("exquisitely -> exquisit", function() {deepEqual( Stem("exquisitely"), "exquisit");});
test("exquisites -> exquisit", function() {deepEqual( Stem("exquisites"), "exquisit");});
test("exserted -> exsert", function() {deepEqual( Stem("exserted"), "exsert");});
test("extant -> extant", function() {deepEqual( Stem("extant"), "extant");});
test("extemporaneously -> extemporan", function() {deepEqual( Stem("extemporaneously"), "extemporan");});
test("extemporary -> extemporari", function() {deepEqual( Stem("extemporary"), "extemporari");});
test("extemporized -> extempor", function() {deepEqual( Stem("extemporized"), "extempor");});
test("extend -> extend", function() {deepEqual( Stem("extend"), "extend");});
test("extended -> extend", function() {deepEqual( Stem("extended"), "extend");});
test("extending -> extend", function() {deepEqual( Stem("extending"), "extend");});
test("extends -> extend", function() {deepEqual( Stem("extends"), "extend");});
test("extensile -> extensil", function() {deepEqual( Stem("extensile"), "extensil");});
test("extension -> extens", function() {deepEqual( Stem("extension"), "extens");});
test("extensive -> extens", function() {deepEqual( Stem("extensive"), "extens");});
test("extensively -> extens", function() {deepEqual( Stem("extensively"), "extens");});
test("extent -> extent", function() {deepEqual( Stem("extent"), "extent");});
test("extenuating -> extenu", function() {deepEqual( Stem("extenuating"), "extenu");});
test("extenuation -> extenu", function() {deepEqual( Stem("extenuation"), "extenu");});
test("exterior -> exterior", function() {deepEqual( Stem("exterior"), "exterior");});
test("exterminated -> extermin", function() {deepEqual( Stem("exterminated"), "extermin");});
test("exterminating -> extermin", function() {deepEqual( Stem("exterminating"), "extermin");});
test("extermination -> extermin", function() {deepEqual( Stem("extermination"), "extermin");});
test("exterminations -> extermin", function() {deepEqual( Stem("exterminations"), "extermin");});
test("external -> extern", function() {deepEqual( Stem("external"), "extern");});
test("externally -> extern", function() {deepEqual( Stem("externally"), "extern");});
test("extinct -> extinct", function() {deepEqual( Stem("extinct"), "extinct");});
test("extinction -> extinct", function() {deepEqual( Stem("extinction"), "extinct");});
test("extinguish -> extinguish", function() {deepEqual( Stem("extinguish"), "extinguish");});
test("extinguished -> extinguish", function() {deepEqual( Stem("extinguished"), "extinguish");});
test("extinguisher -> extinguish", function() {deepEqual( Stem("extinguisher"), "extinguish");});
test("extinguishers -> extinguish", function() {deepEqual( Stem("extinguishers"), "extinguish");});
test("extinguishes -> extinguish", function() {deepEqual( Stem("extinguishes"), "extinguish");});
test("extinguishing -> extinguish", function() {deepEqual( Stem("extinguishing"), "extinguish");});
test("extirpating -> extirp", function() {deepEqual( Stem("extirpating"), "extirp");});
test("extol -> extol", function() {deepEqual( Stem("extol"), "extol");});
test("extolled -> extol", function() {deepEqual( Stem("extolled"), "extol");});
test("extolling -> extol", function() {deepEqual( Stem("extolling"), "extol");});
test("extort -> extort", function() {deepEqual( Stem("extort"), "extort");});
test("extorted -> extort", function() {deepEqual( Stem("extorted"), "extort");});
test("extorting -> extort", function() {deepEqual( Stem("extorting"), "extort");});
test("extortion -> extort", function() {deepEqual( Stem("extortion"), "extort");});
test("extortions -> extort", function() {deepEqual( Stem("extortions"), "extort");});
test("extra -> extra", function() {deepEqual( Stem("extra"), "extra");});
test("extract -> extract", function() {deepEqual( Stem("extract"), "extract");});
test("extracted -> extract", function() {deepEqual( Stem("extracted"), "extract");});
test("extracting -> extract", function() {deepEqual( Stem("extracting"), "extract");});
test("extraction -> extract", function() {deepEqual( Stem("extraction"), "extract");});
test("extracts -> extract", function() {deepEqual( Stem("extracts"), "extract");});
test("extraneous -> extran", function() {deepEqual( Stem("extraneous"), "extran");});
test("extraordinarily -> extraordinarili", function() {deepEqual( Stem("extraordinarily"), "extraordinarili");});
test("extraordinary -> extraordinari", function() {deepEqual( Stem("extraordinary"), "extraordinari");});
test("extras -> extra", function() {deepEqual( Stem("extras"), "extra");});
test("extravagance -> extravag", function() {deepEqual( Stem("extravagance"), "extravag");});
test("extravagances -> extravag", function() {deepEqual( Stem("extravagances"), "extravag");});
test("extravagant -> extravag", function() {deepEqual( Stem("extravagant"), "extravag");});
test("extreme -> extrem", function() {deepEqual( Stem("extreme"), "extrem");});
test("extremely -> extrem", function() {deepEqual( Stem("extremely"), "extrem");});
test("extremes -> extrem", function() {deepEqual( Stem("extremes"), "extrem");});
test("extremest -> extremest", function() {deepEqual( Stem("extremest"), "extremest");});
test("extremities -> extrem", function() {deepEqual( Stem("extremities"), "extrem");});
test("extremity -> extrem", function() {deepEqual( Stem("extremity"), "extrem");});
test("extremum -> extremum", function() {deepEqual( Stem("extremum"), "extremum");});
test("extricate -> extric", function() {deepEqual( Stem("extricate"), "extric");});
test("extricated -> extric", function() {deepEqual( Stem("extricated"), "extric");});
test("extricating -> extric", function() {deepEqual( Stem("extricating"), "extric");});
test("extrication -> extric", function() {deepEqual( Stem("extrication"), "extric");});
test("exuberant -> exuber", function() {deepEqual( Stem("exuberant"), "exuber");});
test("exudations -> exud", function() {deepEqual( Stem("exudations"), "exud");});
test("exuded -> exud", function() {deepEqual( Stem("exuded"), "exud");});
test("exultation -> exult", function() {deepEqual( Stem("exultation"), "exult");});
test("exulted -> exult", function() {deepEqual( Stem("exulted"), "exult");});
test("exulting -> exult", function() {deepEqual( Stem("exulting"), "exult");});
test("exultingly -> exult", function() {deepEqual( Stem("exultingly"), "exult");});
test("exults -> exult", function() {deepEqual( Stem("exults"), "exult");});
test("ey -> ey", function() {deepEqual( Stem("ey"), "ey");});
test("eye -> eye", function() {deepEqual( Stem("eye"), "eye");});
test("eyeball -> eyebal", function() {deepEqual( Stem("eyeball"), "eyebal");});
test("eyebrow -> eyebrow", function() {deepEqual( Stem("eyebrow"), "eyebrow");});
test("eyebrows -> eyebrow", function() {deepEqual( Stem("eyebrows"), "eyebrow");});
test("eyed -> eye", function() {deepEqual( Stem("eyed"), "eye");});
test("eyeglass -> eyeglass", function() {deepEqual( Stem("eyeglass"), "eyeglass");});
test("eyeing -> eye", function() {deepEqual( Stem("eyeing"), "eye");});
test("eyelash -> eyelash", function() {deepEqual( Stem("eyelash"), "eyelash");});
test("eyelashes -> eyelash", function() {deepEqual( Stem("eyelashes"), "eyelash");});
test("eyelid -> eyelid", function() {deepEqual( Stem("eyelid"), "eyelid");});
test("eyelids -> eyelid", function() {deepEqual( Stem("eyelids"), "eyelid");});
test("eyes -> eye", function() {deepEqual( Stem("eyes"), "eye");});
test("eyesight -> eyesight", function() {deepEqual( Stem("eyesight"), "eyesight");});
test("eyesore -> eyesor", function() {deepEqual( Stem("eyesore"), "eyesor");});
test("eyre -> eyr", function() {deepEqual( Stem("eyre"), "eyr");});
test("ezactly -> ezact", function() {deepEqual( Stem("ezactly"), "ezact");});
test("f -> f", function() {deepEqual( Stem("f"), "f");});
test("fa -> fa", function() {deepEqual( Stem("fa"), "fa");});
test("fable -> fabl", function() {deepEqual( Stem("fable"), "fabl");});
test("fabled -> fabl", function() {deepEqual( Stem("fabled"), "fabl");});
test("fables -> fabl", function() {deepEqual( Stem("fables"), "fabl");});
test("fabric -> fabric", function() {deepEqual( Stem("fabric"), "fabric");});
test("fabricated -> fabric", function() {deepEqual( Stem("fabricated"), "fabric");});
test("fabricius -> fabricius", function() {deepEqual( Stem("fabricius"), "fabricius");});
test("fabulous -> fabul", function() {deepEqual( Stem("fabulous"), "fabul");});
test("fabulously -> fabul", function() {deepEqual( Stem("fabulously"), "fabul");});
test("facade -> facad", function() {deepEqual( Stem("facade"), "facad");});
test("face -> face", function() {deepEqual( Stem("face"), "face");});
test("faced -> face", function() {deepEqual( Stem("faced"), "face");});
test("faces -> face", function() {deepEqual( Stem("faces"), "face");});
test("facetious -> faceti", function() {deepEqual( Stem("facetious"), "faceti");});
test("facetiously -> faceti", function() {deepEqual( Stem("facetiously"), "faceti");});
test("facetiousness -> faceti", function() {deepEqual( Stem("facetiousness"), "faceti");});
test("facial -> facial", function() {deepEqual( Stem("facial"), "facial");});
test("facile -> facil", function() {deepEqual( Stem("facile"), "facil");});
test("facilitate -> facilit", function() {deepEqual( Stem("facilitate"), "facilit");});
test("facilitates -> facilit", function() {deepEqual( Stem("facilitates"), "facilit");});
test("facilitating -> facilit", function() {deepEqual( Stem("facilitating"), "facilit");});
test("facilities -> facil", function() {deepEqual( Stem("facilities"), "facil");});
test("facility -> facil", function() {deepEqual( Stem("facility"), "facil");});
test("facing -> face", function() {deepEqual( Stem("facing"), "face");});
test("facings -> face", function() {deepEqual( Stem("facings"), "face");});
test("fact -> fact", function() {deepEqual( Stem("fact"), "fact");});
test("faction -> faction", function() {deepEqual( Stem("faction"), "faction");});
test("factor -> factor", function() {deepEqual( Stem("factor"), "factor");});
test("factors -> factor", function() {deepEqual( Stem("factors"), "factor");});
test("factory -> factori", function() {deepEqual( Stem("factory"), "factori");});
test("facts -> fact", function() {deepEqual( Stem("facts"), "fact");});
test("faculties -> faculti", function() {deepEqual( Stem("faculties"), "faculti");});
test("faculty -> faculti", function() {deepEqual( Stem("faculty"), "faculti");});
test("fade -> fade", function() {deepEqual( Stem("fade"), "fade");});
test("faded -> fade", function() {deepEqual( Stem("faded"), "fade");});
test("fadedly -> fade", function() {deepEqual( Stem("fadedly"), "fade");});
test("fades -> fade", function() {deepEqual( Stem("fades"), "fade");});
test("fading -> fade", function() {deepEqual( Stem("fading"), "fade");});
test("fag -> fag", function() {deepEqual( Stem("fag"), "fag");});
test("fagged -> fag", function() {deepEqual( Stem("fagged"), "fag");});
test("faggot -> faggot", function() {deepEqual( Stem("faggot"), "faggot");});
test("fagus -> fagus", function() {deepEqual( Stem("fagus"), "fagus");});
test("fah -> fah", function() {deepEqual( Stem("fah"), "fah");});
test("fail -> fail", function() {deepEqual( Stem("fail"), "fail");});
test("failed -> fail", function() {deepEqual( Stem("failed"), "fail");});
test("failing -> fail", function() {deepEqual( Stem("failing"), "fail");});
test("failings -> fail", function() {deepEqual( Stem("failings"), "fail");});
test("fails -> fail", function() {deepEqual( Stem("fails"), "fail");});
test("failure -> failur", function() {deepEqual( Stem("failure"), "failur");});
test("failures -> failur", function() {deepEqual( Stem("failures"), "failur");});
test("fain -> fain", function() {deepEqual( Stem("fain"), "fain");});
test("faineant -> faineant", function() {deepEqual( Stem("faineant"), "faineant");});
test("faineants -> faineant", function() {deepEqual( Stem("faineants"), "faineant");});
test("faint -> faint", function() {deepEqual( Stem("faint"), "faint");});
test("fainted -> faint", function() {deepEqual( Stem("fainted"), "faint");});
test("fainter -> fainter", function() {deepEqual( Stem("fainter"), "fainter");});
test("faintest -> faintest", function() {deepEqual( Stem("faintest"), "faintest");});
test("fainting -> faint", function() {deepEqual( Stem("fainting"), "faint");});
test("faintings -> faint", function() {deepEqual( Stem("faintings"), "faint");});
test("faintly -> faint", function() {deepEqual( Stem("faintly"), "faint");});
test("faintness -> faint", function() {deepEqual( Stem("faintness"), "faint");});
test("faints -> faint", function() {deepEqual( Stem("faints"), "faint");});
test("fair -> fair", function() {deepEqual( Stem("fair"), "fair");});
test("faire -> fair", function() {deepEqual( Stem("faire"), "fair");});
test("fairer -> fairer", function() {deepEqual( Stem("fairer"), "fairer");});
test("fairest -> fairest", function() {deepEqual( Stem("fairest"), "fairest");});
test("fairies -> fairi", function() {deepEqual( Stem("fairies"), "fairi");});
test("fairish -> fairish", function() {deepEqual( Stem("fairish"), "fairish");});
test("fairly -> fair", function() {deepEqual( Stem("fairly"), "fair");});
test("fairness -> fair", function() {deepEqual( Stem("fairness"), "fair");});
test("fairy -> fairi", function() {deepEqual( Stem("fairy"), "fairi");});
test("fait -> fait", function() {deepEqual( Stem("fait"), "fait");});
test("faith -> faith", function() {deepEqual( Stem("faith"), "faith");});
test("faithful -> faith", function() {deepEqual( Stem("faithful"), "faith");});
test("faithfuller -> faithful", function() {deepEqual( Stem("faithfuller"), "faithful");});
test("faithfully -> faith", function() {deepEqual( Stem("faithfully"), "faith");});
test("faithfulness -> faith", function() {deepEqual( Stem("faithfulness"), "faith");});
test("falconer -> falcon", function() {deepEqual( Stem("falconer"), "falcon");});
test("falkland -> falkland", function() {deepEqual( Stem("falkland"), "falkland");});
test("falklands -> falkland", function() {deepEqual( Stem("falklands"), "falkland");});
test("fall -> fall", function() {deepEqual( Stem("fall"), "fall");});
test("fallacy -> fallaci", function() {deepEqual( Stem("fallacy"), "fallaci");});
test("fallen -> fallen", function() {deepEqual( Stem("fallen"), "fallen");});
test("fallible -> fallibl", function() {deepEqual( Stem("fallible"), "fallibl");});
test("fallin -> fallin", function() {deepEqual( Stem("fallin"), "fallin");});
test("falling -> fall", function() {deepEqual( Stem("falling"), "fall");});
test("falls -> fall", function() {deepEqual( Stem("falls"), "fall");});
test("falmouth -> falmouth", function() {deepEqual( Stem("falmouth"), "falmouth");});
test("false -> fals", function() {deepEqual( Stem("false"), "fals");});
test("falsehood -> falsehood", function() {deepEqual( Stem("falsehood"), "falsehood");});
test("falsehoods -> falsehood", function() {deepEqual( Stem("falsehoods"), "falsehood");});
test("falsely -> fals", function() {deepEqual( Stem("falsely"), "fals");});
test("falseness -> fals", function() {deepEqual( Stem("falseness"), "fals");});
test("falser -> falser", function() {deepEqual( Stem("falser"), "falser");});
test("falsetto -> falsetto", function() {deepEqual( Stem("falsetto"), "falsetto");});
test("falsify -> falsifi", function() {deepEqual( Stem("falsify"), "falsifi");});
test("falsity -> falsiti", function() {deepEqual( Stem("falsity"), "falsiti");});
test("falter -> falter", function() {deepEqual( Stem("falter"), "falter");});
test("faltered -> falter", function() {deepEqual( Stem("faltered"), "falter");});
test("faltering -> falter", function() {deepEqual( Stem("faltering"), "falter");});
test("falteringly -> falter", function() {deepEqual( Stem("falteringly"), "falter");});
test("falters -> falter", function() {deepEqual( Stem("falters"), "falter");});
test("fame -> fame", function() {deepEqual( Stem("fame"), "fame");});
test("famed -> fame", function() {deepEqual( Stem("famed"), "fame");});
test("familiar -> familiar", function() {deepEqual( Stem("familiar"), "familiar");});
test("familiaris -> familiari", function() {deepEqual( Stem("familiaris"), "familiari");});
test("familiarised -> familiaris", function() {deepEqual( Stem("familiarised"), "familiaris");});
test("familiarities -> familiar", function() {deepEqual( Stem("familiarities"), "familiar");});
test("familiarity -> familiar", function() {deepEqual( Stem("familiarity"), "familiar");});
test("familiarized -> familiar", function() {deepEqual( Stem("familiarized"), "familiar");});
test("familiarly -> familiar", function() {deepEqual( Stem("familiarly"), "familiar");});
test("familiars -> familiar", function() {deepEqual( Stem("familiars"), "familiar");});
test("families -> famili", function() {deepEqual( Stem("families"), "famili");});
test("family -> famili", function() {deepEqual( Stem("family"), "famili");});
test("famine -> famin", function() {deepEqual( Stem("famine"), "famin");});
test("famines -> famin", function() {deepEqual( Stem("famines"), "famin");});
test("famished -> famish", function() {deepEqual( Stem("famished"), "famish");});
test("famoso -> famoso", function() {deepEqual( Stem("famoso"), "famoso");});
test("famous -> famous", function() {deepEqual( Stem("famous"), "famous");});
test("famously -> famous", function() {deepEqual( Stem("famously"), "famous");});
test("fan -> fan", function() {deepEqual( Stem("fan"), "fan");});
test("fanaticism -> fanatic", function() {deepEqual( Stem("fanaticism"), "fanatic");});
test("fancied -> fanci", function() {deepEqual( Stem("fancied"), "fanci");});
test("fancier -> fancier", function() {deepEqual( Stem("fancier"), "fancier");});
test("fancies -> fanci", function() {deepEqual( Stem("fancies"), "fanci");});
test("fanciful -> fanci", function() {deepEqual( Stem("fanciful"), "fanci");});
test("fancy -> fanci", function() {deepEqual( Stem("fancy"), "fanci");});
test("fancying -> fanci", function() {deepEqual( Stem("fancying"), "fanci");});
test("faneant -> faneant", function() {deepEqual( Stem("faneant"), "faneant");});
test("fangs -> fang", function() {deepEqual( Stem("fangs"), "fang");});
test("fanlight -> fanlight", function() {deepEqual( Stem("fanlight"), "fanlight");});
test("fanned -> fan", function() {deepEqual( Stem("fanned"), "fan");});
test("fanny -> fanni", function() {deepEqual( Stem("fanny"), "fanni");});
test("fans -> fan", function() {deepEqual( Stem("fans"), "fan");});
test("fanshawe -> fanshaw", function() {deepEqual( Stem("fanshawe"), "fanshaw");});
test("fantastic -> fantast", function() {deepEqual( Stem("fantastic"), "fantast");});
test("fantastical -> fantast", function() {deepEqual( Stem("fantastical"), "fantast");});
test("fantastically -> fantast", function() {deepEqual( Stem("fantastically"), "fantast");});
test("fantasy -> fantasi", function() {deepEqual( Stem("fantasy"), "fantasi");});
test("far -> far", function() {deepEqual( Stem("far"), "far");});
test("farce -> farc", function() {deepEqual( Stem("farce"), "farc");});
test("fare -> fare", function() {deepEqual( Stem("fare"), "fare");});
test("fared -> fare", function() {deepEqual( Stem("fared"), "fare");});
test("fares -> fare", function() {deepEqual( Stem("fares"), "fare");});
test("farewell -> farewel", function() {deepEqual( Stem("farewell"), "farewel");});
test("farewells -> farewel", function() {deepEqual( Stem("farewells"), "farewel");});
test("farinha -> farinha", function() {deepEqual( Stem("farinha"), "farinha");});
test("farm -> farm", function() {deepEqual( Stem("farm"), "farm");});
test("farmed -> farm", function() {deepEqual( Stem("farmed"), "farm");});
test("farmer -> farmer", function() {deepEqual( Stem("farmer"), "farmer");});
test("farmers -> farmer", function() {deepEqual( Stem("farmers"), "farmer");});
test("farmhouse -> farmhous", function() {deepEqual( Stem("farmhouse"), "farmhous");});
test("farmhouses -> farmhous", function() {deepEqual( Stem("farmhouses"), "farmhous");});
test("farming -> farm", function() {deepEqual( Stem("farming"), "farm");});
test("farms -> farm", function() {deepEqual( Stem("farms"), "farm");});
test("farrago -> farrago", function() {deepEqual( Stem("farrago"), "farrago");});
test("farther -> farther", function() {deepEqual( Stem("farther"), "farther");});
test("farthest -> farthest", function() {deepEqual( Stem("farthest"), "farthest");});
test("farthing -> farth", function() {deepEqual( Stem("farthing"), "farth");});
test("farthings -> farth", function() {deepEqual( Stem("farthings"), "farth");});
test("fascinate -> fascin", function() {deepEqual( Stem("fascinate"), "fascin");});
test("fascinated -> fascin", function() {deepEqual( Stem("fascinated"), "fascin");});
test("fascinating -> fascin", function() {deepEqual( Stem("fascinating"), "fascin");});
test("fascination -> fascin", function() {deepEqual( Stem("fascination"), "fascin");});
test("fascinations -> fascin", function() {deepEqual( Stem("fascinations"), "fascin");});
test("fascinator -> fascin", function() {deepEqual( Stem("fascinator"), "fascin");});
test("fash -> fash", function() {deepEqual( Stem("fash"), "fash");});
test("fashion -> fashion", function() {deepEqual( Stem("fashion"), "fashion");});
test("fashionable -> fashion", function() {deepEqual( Stem("fashionable"), "fashion");});
test("fashionably -> fashion", function() {deepEqual( Stem("fashionably"), "fashion");});
test("fashionahle -> fashionahl", function() {deepEqual( Stem("fashionahle"), "fashionahl");});
test("fashioned -> fashion", function() {deepEqual( Stem("fashioned"), "fashion");});
test("fashions -> fashion", function() {deepEqual( Stem("fashions"), "fashion");});
test("fast -> fast", function() {deepEqual( Stem("fast"), "fast");});
test("fasten -> fasten", function() {deepEqual( Stem("fasten"), "fasten");});
test("fastened -> fasten", function() {deepEqual( Stem("fastened"), "fasten");});
test("fastening -> fasten", function() {deepEqual( Stem("fastening"), "fasten");});
test("fastenings -> fasten", function() {deepEqual( Stem("fastenings"), "fasten");});
test("fastens -> fasten", function() {deepEqual( Stem("fastens"), "fasten");});
test("faster -> faster", function() {deepEqual( Stem("faster"), "faster");});
test("fastest -> fastest", function() {deepEqual( Stem("fastest"), "fastest");});
test("fastidious -> fastidi", function() {deepEqual( Stem("fastidious"), "fastidi");});
test("fastidiousness -> fastidi", function() {deepEqual( Stem("fastidiousness"), "fastidi");});
test("fasting -> fast", function() {deepEqual( Stem("fasting"), "fast");});
test("fastness -> fast", function() {deepEqual( Stem("fastness"), "fast");});
test("fat -> fat", function() {deepEqual( Stem("fat"), "fat");});
test("fatal -> fatal", function() {deepEqual( Stem("fatal"), "fatal");});
test("fate -> fate", function() {deepEqual( Stem("fate"), "fate");});
test("fated -> fate", function() {deepEqual( Stem("fated"), "fate");});
test("fateful -> fate", function() {deepEqual( Stem("fateful"), "fate");});
test("fates -> fate", function() {deepEqual( Stem("fates"), "fate");});
test("father -> father", function() {deepEqual( Stem("father"), "father");});
test("fatherland -> fatherland", function() {deepEqual( Stem("fatherland"), "fatherland");});
test("fatherless -> fatherless", function() {deepEqual( Stem("fatherless"), "fatherless");});
test("fatherly -> father", function() {deepEqual( Stem("fatherly"), "father");});
test("fathers -> father", function() {deepEqual( Stem("fathers"), "father");});
test("fathom -> fathom", function() {deepEqual( Stem("fathom"), "fathom");});
test("fathomless -> fathomless", function() {deepEqual( Stem("fathomless"), "fathomless");});
test("fathoms -> fathom", function() {deepEqual( Stem("fathoms"), "fathom");});
test("fatigue -> fatigu", function() {deepEqual( Stem("fatigue"), "fatigu");});
test("fatigued -> fatigu", function() {deepEqual( Stem("fatigued"), "fatigu");});
test("fatigues -> fatigu", function() {deepEqual( Stem("fatigues"), "fatigu");});
test("fatiguing -> fatigu", function() {deepEqual( Stem("fatiguing"), "fatigu");});
test("fatima -> fatima", function() {deepEqual( Stem("fatima"), "fatima");});
test("fatly -> fat", function() {deepEqual( Stem("fatly"), "fat");});
test("fatness -> fat", function() {deepEqual( Stem("fatness"), "fat");});
test("fatten -> fatten", function() {deepEqual( Stem("fatten"), "fatten");});
test("fattened -> fatten", function() {deepEqual( Stem("fattened"), "fatten");});
test("fattening -> fatten", function() {deepEqual( Stem("fattening"), "fatten");});
test("fatter -> fatter", function() {deepEqual( Stem("fatter"), "fatter");});
test("fattish -> fattish", function() {deepEqual( Stem("fattish"), "fattish");});
test("fatuity -> fatuiti", function() {deepEqual( Stem("fatuity"), "fatuiti");});
test("faugh -> faugh", function() {deepEqual( Stem("faugh"), "faugh");});
test("fault -> fault", function() {deepEqual( Stem("fault"), "fault");});
test("faultless -> faultless", function() {deepEqual( Stem("faultless"), "faultless");});
test("faults -> fault", function() {deepEqual( Stem("faults"), "fault");});
test("fauna -> fauna", function() {deepEqual( Stem("fauna"), "fauna");});
test("faux -> faux", function() {deepEqual( Stem("faux"), "faux");});
test("favour -> favour", function() {deepEqual( Stem("favour"), "favour");});
test("favourable -> favour", function() {deepEqual( Stem("favourable"), "favour");});
test("favourably -> favour", function() {deepEqual( Stem("favourably"), "favour");});
test("favoured -> favour", function() {deepEqual( Stem("favoured"), "favour");});
test("favouring -> favour", function() {deepEqual( Stem("favouring"), "favour");});
test("favourite -> favourit", function() {deepEqual( Stem("favourite"), "favourit");});
test("favourites -> favourit", function() {deepEqual( Stem("favourites"), "favourit");});
test("favours -> favour", function() {deepEqual( Stem("favours"), "favour");});
test("fawn -> fawn", function() {deepEqual( Stem("fawn"), "fawn");});
test("fawned -> fawn", function() {deepEqual( Stem("fawned"), "fawn");});
test("fawning -> fawn", function() {deepEqual( Stem("fawning"), "fawn");});
test("fawns -> fawn", function() {deepEqual( Stem("fawns"), "fawn");});
test("fazenda -> fazenda", function() {deepEqual( Stem("fazenda"), "fazenda");});
test("fazendas -> fazenda", function() {deepEqual( Stem("fazendas"), "fazenda");});
test("fe -> fe", function() {deepEqual( Stem("fe"), "fe");});
test("feace -> feac", function() {deepEqual( Stem("feace"), "feac");});
test("feaced -> feac", function() {deepEqual( Stem("feaced"), "feac");});
test("fealty -> fealti", function() {deepEqual( Stem("fealty"), "fealti");});
test("fear -> fear", function() {deepEqual( Stem("fear"), "fear");});
test("feared -> fear", function() {deepEqual( Stem("feared"), "fear");});
test("feareth -> feareth", function() {deepEqual( Stem("feareth"), "feareth");});
test("fearful -> fear", function() {deepEqual( Stem("fearful"), "fear");});
test("fearfully -> fear", function() {deepEqual( Stem("fearfully"), "fear");});
test("fearfulty -> fearfulti", function() {deepEqual( Stem("fearfulty"), "fearfulti");});
test("fearing -> fear", function() {deepEqual( Stem("fearing"), "fear");});
test("feariocious -> fearioci", function() {deepEqual( Stem("feariocious"), "fearioci");});
test("fearless -> fearless", function() {deepEqual( Stem("fearless"), "fearless");});
test("fearlessly -> fearless", function() {deepEqual( Stem("fearlessly"), "fearless");});
test("fears -> fear", function() {deepEqual( Stem("fears"), "fear");});
test("feasible -> feasibl", function() {deepEqual( Stem("feasible"), "feasibl");});
test("feast -> feast", function() {deepEqual( Stem("feast"), "feast");});
test("feasted -> feast", function() {deepEqual( Stem("feasted"), "feast");});
test("feasting -> feast", function() {deepEqual( Stem("feasting"), "feast");});
test("feasts -> feast", function() {deepEqual( Stem("feasts"), "feast");});
test("feat -> feat", function() {deepEqual( Stem("feat"), "feat");});
test("feather -> feather", function() {deepEqual( Stem("feather"), "feather");});
test("featherbed -> featherb", function() {deepEqual( Stem("featherbed"), "featherb");});
test("feathered -> feather", function() {deepEqual( Stem("feathered"), "feather");});
test("feathers -> feather", function() {deepEqual( Stem("feathers"), "feather");});
test("feathery -> featheri", function() {deepEqual( Stem("feathery"), "featheri");});
test("feats -> feat", function() {deepEqual( Stem("feats"), "feat");});
test("feature -> featur", function() {deepEqual( Stem("feature"), "featur");});
test("featured -> featur", function() {deepEqual( Stem("featured"), "featur");});
test("features -> featur", function() {deepEqual( Stem("features"), "featur");});
test("feb -> feb", function() {deepEqual( Stem("feb"), "feb");});
test("februa -> februa", function() {deepEqual( Stem("februa"), "februa");});
test("february -> februari", function() {deepEqual( Stem("february"), "februari");});
test("fed -> fed", function() {deepEqual( Stem("fed"), "fed");});
test("fedosya -> fedosya", function() {deepEqual( Stem("fedosya"), "fedosya");});
test("fedyaev -> fedyaev", function() {deepEqual( Stem("fedyaev"), "fedyaev");});
test("fee -> fee", function() {deepEqual( Stem("fee"), "fee");});
test("feeble -> feebl", function() {deepEqual( Stem("feeble"), "feebl");});
test("feebleness -> feebl", function() {deepEqual( Stem("feebleness"), "feebl");});
test("feebler -> feebler", function() {deepEqual( Stem("feebler"), "feebler");});
test("feebly -> feebli", function() {deepEqual( Stem("feebly"), "feebli");});
test("feeckle -> feeckl", function() {deepEqual( Stem("feeckle"), "feeckl");});
test("feed -> feed", function() {deepEqual( Stem("feed"), "feed");});
test("feeder -> feeder", function() {deepEqual( Stem("feeder"), "feeder");});
test("feeders -> feeder", function() {deepEqual( Stem("feeders"), "feeder");});
test("feeding -> feed", function() {deepEqual( Stem("feeding"), "feed");});
test("feeds -> feed", function() {deepEqual( Stem("feeds"), "feed");});
test("feel -> feel", function() {deepEqual( Stem("feel"), "feel");});
test("feeling -> feel", function() {deepEqual( Stem("feeling"), "feel");});
test("feelingly -> feel", function() {deepEqual( Stem("feelingly"), "feel");});
test("feelings -> feel", function() {deepEqual( Stem("feelings"), "feel");});
test("feels -> feel", function() {deepEqual( Stem("feels"), "feel");});
test("fees -> fee", function() {deepEqual( Stem("fees"), "fee");});
test("feet -> feet", function() {deepEqual( Stem("feet"), "feet");});
test("feign -> feign", function() {deepEqual( Stem("feign"), "feign");});
test("feigned -> feign", function() {deepEqual( Stem("feigned"), "feign");});
test("feigning -> feign", function() {deepEqual( Stem("feigning"), "feign");});
test("feigns -> feign", function() {deepEqual( Stem("feigns"), "feign");});
test("feijao -> feijao", function() {deepEqual( Stem("feijao"), "feijao");});
test("feint -> feint", function() {deepEqual( Stem("feint"), "feint");});
test("feints -> feint", function() {deepEqual( Stem("feints"), "feint");});
test("fel -> fel", function() {deepEqual( Stem("fel"), "fel");});
test("feldspathic -> feldspath", function() {deepEqual( Stem("feldspathic"), "feldspath");});
test("felicitations -> felicit", function() {deepEqual( Stem("felicitations"), "felicit");});
test("felicitous -> felicit", function() {deepEqual( Stem("felicitous"), "felicit");});
test("felicitously -> felicit", function() {deepEqual( Stem("felicitously"), "felicit");});
test("felicity -> felic", function() {deepEqual( Stem("felicity"), "felic");});
test("feline -> felin", function() {deepEqual( Stem("feline"), "felin");});
test("felipe -> felip", function() {deepEqual( Stem("felipe"), "felip");});
test("felix -> felix", function() {deepEqual( Stem("felix"), "felix");});
test("fell -> fell", function() {deepEqual( Stem("fell"), "fell");});
test("felled -> fell", function() {deepEqual( Stem("felled"), "fell");});
test("feller -> feller", function() {deepEqual( Stem("feller"), "feller");});
test("fellow -> fellow", function() {deepEqual( Stem("fellow"), "fellow");});
test("fellows -> fellow", function() {deepEqual( Stem("fellows"), "fellow");});
test("fellowship -> fellowship", function() {deepEqual( Stem("fellowship"), "fellowship");});
test("felo -> felo", function() {deepEqual( Stem("felo"), "felo");});
test("felon -> felon", function() {deepEqual( Stem("felon"), "felon");});
test("feloniously -> feloni", function() {deepEqual( Stem("feloniously"), "feloni");});
test("felons -> felon", function() {deepEqual( Stem("felons"), "felon");});
test("felony -> feloni", function() {deepEqual( Stem("felony"), "feloni");});
test("felspar -> felspar", function() {deepEqual( Stem("felspar"), "felspar");});
test("felspathic -> felspath", function() {deepEqual( Stem("felspathic"), "felspath");});
test("felt -> felt", function() {deepEqual( Stem("felt"), "felt");});
test("female -> femal", function() {deepEqual( Stem("female"), "femal");});
test("females -> femal", function() {deepEqual( Stem("females"), "femal");});
test("feminine -> feminin", function() {deepEqual( Stem("feminine"), "feminin");});
test("fen -> fen", function() {deepEqual( Stem("fen"), "fen");});
test("fence -> fenc", function() {deepEqual( Stem("fence"), "fenc");});
test("fenced -> fenc", function() {deepEqual( Stem("fenced"), "fenc");});
test("fences -> fenc", function() {deepEqual( Stem("fences"), "fenc");});
test("fencing -> fenc", function() {deepEqual( Stem("fencing"), "fenc");});
test("fender -> fender", function() {deepEqual( Stem("fender"), "fender");});
test("fennel -> fennel", function() {deepEqual( Stem("fennel"), "fennel");});
test("fens -> fen", function() {deepEqual( Stem("fens"), "fen");});
test("ferdinand -> ferdinand", function() {deepEqual( Stem("ferdinand"), "ferdinand");});
test("ferdy -> ferdi", function() {deepEqual( Stem("ferdy"), "ferdi");});
test("ferguson -> ferguson", function() {deepEqual( Stem("ferguson"), "ferguson");});
test("ferment -> ferment", function() {deepEqual( Stem("ferment"), "ferment");});
test("fermentable -> ferment", function() {deepEqual( Stem("fermentable"), "ferment");});
test("fermenting -> ferment", function() {deepEqual( Stem("fermenting"), "ferment");});
test("fern -> fern", function() {deepEqual( Stem("fern"), "fern");});
test("fernal -> fernal", function() {deepEqual( Stem("fernal"), "fernal");});
test("fernandez -> fernandez", function() {deepEqual( Stem("fernandez"), "fernandez");});
test("fernando -> fernando", function() {deepEqual( Stem("fernando"), "fernando");});
test("fernery -> ferneri", function() {deepEqual( Stem("fernery"), "ferneri");});
test("ferns -> fern", function() {deepEqual( Stem("ferns"), "fern");});
test("ferocious -> feroci", function() {deepEqual( Stem("ferocious"), "feroci");});
test("ferociously -> feroci", function() {deepEqual( Stem("ferociously"), "feroci");});
test("ferocity -> feroc", function() {deepEqual( Stem("ferocity"), "feroc");});
test("feronia -> feronia", function() {deepEqual( Stem("feronia"), "feronia");});
test("ferret -> ferret", function() {deepEqual( Stem("ferret"), "ferret");});
test("ferreted -> ferret", function() {deepEqual( Stem("ferreted"), "ferret");});
test("ferried -> ferri", function() {deepEqual( Stem("ferried"), "ferri");});
test("ferruginous -> ferrugin", function() {deepEqual( Stem("ferruginous"), "ferrugin");});
test("ferrule -> ferrul", function() {deepEqual( Stem("ferrule"), "ferrul");});
test("ferry -> ferri", function() {deepEqual( Stem("ferry"), "ferri");});
test("fertile -> fertil", function() {deepEqual( Stem("fertile"), "fertil");});
test("fertility -> fertil", function() {deepEqual( Stem("fertility"), "fertil");});
test("fertilizing -> fertil", function() {deepEqual( Stem("fertilizing"), "fertil");});
test("ferule -> ferul", function() {deepEqual( Stem("ferule"), "ferul");});
test("fervency -> fervenc", function() {deepEqual( Stem("fervency"), "fervenc");});
test("fervent -> fervent", function() {deepEqual( Stem("fervent"), "fervent");});
test("fervently -> fervent", function() {deepEqual( Stem("fervently"), "fervent");});
test("fervid -> fervid", function() {deepEqual( Stem("fervid"), "fervid");});
test("fervour -> fervour", function() {deepEqual( Stem("fervour"), "fervour");});
test("fester -> fester", function() {deepEqual( Stem("fester"), "fester");});
test("festering -> fester", function() {deepEqual( Stem("festering"), "fester");});
test("festival -> festiv", function() {deepEqual( Stem("festival"), "festiv");});
test("festivals -> festiv", function() {deepEqual( Stem("festivals"), "festiv");});
test("festive -> festiv", function() {deepEqual( Stem("festive"), "festiv");});
test("festivities -> festiv", function() {deepEqual( Stem("festivities"), "festiv");});
test("festivity -> festiv", function() {deepEqual( Stem("festivity"), "festiv");});
test("festoon -> festoon", function() {deepEqual( Stem("festoon"), "festoon");});
test("festoons -> festoon", function() {deepEqual( Stem("festoons"), "festoon");});
test("fetch -> fetch", function() {deepEqual( Stem("fetch"), "fetch");});
test("fetched -> fetch", function() {deepEqual( Stem("fetched"), "fetch");});
test("fetches -> fetch", function() {deepEqual( Stem("fetches"), "fetch");});
test("fetching -> fetch", function() {deepEqual( Stem("fetching"), "fetch");});
test("feted -> fete", function() {deepEqual( Stem("feted"), "fete");});
test("fetid -> fetid", function() {deepEqual( Stem("fetid"), "fetid");});
test("fetlock -> fetlock", function() {deepEqual( Stem("fetlock"), "fetlock");});
test("fetlocks -> fetlock", function() {deepEqual( Stem("fetlocks"), "fetlock");});
test("fetters -> fetter", function() {deepEqual( Stem("fetters"), "fetter");});
test("feud -> feud", function() {deepEqual( Stem("feud"), "feud");});
test("feudal -> feudal", function() {deepEqual( Stem("feudal"), "feudal");});
test("feury -> feuri", function() {deepEqual( Stem("feury"), "feuri");});
test("fever -> fever", function() {deepEqual( Stem("fever"), "fever");});
test("fevered -> fever", function() {deepEqual( Stem("fevered"), "fever");});
test("feverish -> feverish", function() {deepEqual( Stem("feverish"), "feverish");});
test("feverishly -> feverish", function() {deepEqual( Stem("feverishly"), "feverish");});
test("feverishness -> feverish", function() {deepEqual( Stem("feverishness"), "feverish");});
test("fevers -> fever", function() {deepEqual( Stem("fevers"), "fever");});
test("few -> few", function() {deepEqual( Stem("few"), "few");});
test("fewer -> fewer", function() {deepEqual( Stem("fewer"), "fewer");});
test("fewest -> fewest", function() {deepEqual( Stem("fewest"), "fewest");});
test("fewness -> few", function() {deepEqual( Stem("fewness"), "few");});
test("feyther -> feyther", function() {deepEqual( Stem("feyther"), "feyther");});
test("feythers -> feyther", function() {deepEqual( Stem("feythers"), "feyther");});
test("fiance -> fianc", function() {deepEqual( Stem("fiance"), "fianc");});
test("fiancee -> fiance", function() {deepEqual( Stem("fiancee"), "fiance");});
test("fiat -> fiat", function() {deepEqual( Stem("fiat"), "fiat");});
test("fib -> fib", function() {deepEqual( Stem("fib"), "fib");});
test("fibbing -> fib", function() {deepEqual( Stem("fibbing"), "fib");});
test("fibre -> fibr", function() {deepEqual( Stem("fibre"), "fibr");});
test("fibres -> fibr", function() {deepEqual( Stem("fibres"), "fibr");});
test("fibrous -> fibrous", function() {deepEqual( Stem("fibrous"), "fibrous");});
test("fibs -> fib", function() {deepEqual( Stem("fibs"), "fib");});
test("fichy -> fichi", function() {deepEqual( Stem("fichy"), "fichi");});
test("fickle -> fickl", function() {deepEqual( Stem("fickle"), "fickl");});
test("fickleness -> fickl", function() {deepEqual( Stem("fickleness"), "fickl");});
test("fico -> fico", function() {deepEqual( Stem("fico"), "fico");});
test("fiction -> fiction", function() {deepEqual( Stem("fiction"), "fiction");});
test("fictions -> fiction", function() {deepEqual( Stem("fictions"), "fiction");});
test("fictitious -> fictiti", function() {deepEqual( Stem("fictitious"), "fictiti");});
test("fiddle -> fiddl", function() {deepEqual( Stem("fiddle"), "fiddl");});
test("fiddles -> fiddl", function() {deepEqual( Stem("fiddles"), "fiddl");});
test("fiddlesticks -> fiddlestick", function() {deepEqual( Stem("fiddlesticks"), "fiddlestick");});
test("fide -> fide", function() {deepEqual( Stem("fide"), "fide");});
test("fidelity -> fidel", function() {deepEqual( Stem("fidelity"), "fidel");});
test("fidget -> fidget", function() {deepEqual( Stem("fidget"), "fidget");});
test("fidgeted -> fidget", function() {deepEqual( Stem("fidgeted"), "fidget");});
test("fidgeting -> fidget", function() {deepEqual( Stem("fidgeting"), "fidget");});
test("fidgett -> fidgett", function() {deepEqual( Stem("fidgett"), "fidgett");});
test("fidgetts -> fidgett", function() {deepEqual( Stem("fidgetts"), "fidgett");});
test("fidgety -> fidgeti", function() {deepEqual( Stem("fidgety"), "fidgeti");});
test("fie -> fie", function() {deepEqual( Stem("fie"), "fie");});
test("field -> field", function() {deepEqual( Stem("field"), "field");});
test("fieldfare -> fieldfar", function() {deepEqual( Stem("fieldfare"), "fieldfar");});
test("fieldingsby -> fieldingsbi", function() {deepEqual( Stem("fieldingsby"), "fieldingsbi");});
test("fields -> field", function() {deepEqual( Stem("fields"), "field");});
test("fiend -> fiend", function() {deepEqual( Stem("fiend"), "fiend");});
test("fiendish -> fiendish", function() {deepEqual( Stem("fiendish"), "fiendish");});
test("fierce -> fierc", function() {deepEqual( Stem("fierce"), "fierc");});
test("fiercely -> fierc", function() {deepEqual( Stem("fiercely"), "fierc");});
test("fierceness -> fierc", function() {deepEqual( Stem("fierceness"), "fierc");});
test("fiercer -> fiercer", function() {deepEqual( Stem("fiercer"), "fiercer");});
test("fiercest -> fiercest", function() {deepEqual( Stem("fiercest"), "fiercest");});
test("fiery -> fieri", function() {deepEqual( Stem("fiery"), "fieri");});
test("fife -> fife", function() {deepEqual( Stem("fife"), "fife");});
test("fifer -> fifer", function() {deepEqual( Stem("fifer"), "fifer");});
test("fifteen -> fifteen", function() {deepEqual( Stem("fifteen"), "fifteen");});
test("fifteenth -> fifteenth", function() {deepEqual( Stem("fifteenth"), "fifteenth");});
test("fifth -> fifth", function() {deepEqual( Stem("fifth"), "fifth");});
test("fifthly -> fifth", function() {deepEqual( Stem("fifthly"), "fifth");});
test("fifths -> fifth", function() {deepEqual( Stem("fifths"), "fifth");});
test("fifty -> fifti", function() {deepEqual( Stem("fifty"), "fifti");});
test("fig -> fig", function() {deepEqual( Stem("fig"), "fig");});
test("fight -> fight", function() {deepEqual( Stem("fight"), "fight");});
test("fighter -> fighter", function() {deepEqual( Stem("fighter"), "fighter");});
test("fighting -> fight", function() {deepEqual( Stem("fighting"), "fight");});
test("fights -> fight", function() {deepEqual( Stem("fights"), "fight");});
test("figment -> figment", function() {deepEqual( Stem("figment"), "figment");});
test("figs -> fig", function() {deepEqual( Stem("figs"), "fig");});
test("figuireda -> figuireda", function() {deepEqual( Stem("figuireda"), "figuireda");});
test("figurative -> figur", function() {deepEqual( Stem("figurative"), "figur");});
test("figure -> figur", function() {deepEqual( Stem("figure"), "figur");});
test("figured -> figur", function() {deepEqual( Stem("figured"), "figur");});
test("figures -> figur", function() {deepEqual( Stem("figures"), "figur");});
test("figuring -> figur", function() {deepEqual( Stem("figuring"), "figur");});
test("filamentous -> filament", function() {deepEqual( Stem("filamentous"), "filament");});
test("filched -> filch", function() {deepEqual( Stem("filched"), "filch");});
test("file -> file", function() {deepEqual( Stem("file"), "file");});
test("filed -> file", function() {deepEqual( Stem("filed"), "file");});
test("files -> file", function() {deepEqual( Stem("files"), "file");});
test("filial -> filial", function() {deepEqual( Stem("filial"), "filial");});
test("filigree -> filigre", function() {deepEqual( Stem("filigree"), "filigre");});
test("filing -> file", function() {deepEqual( Stem("filing"), "file");});
test("filka -> filka", function() {deepEqual( Stem("filka"), "filka");});
test("fill -> fill", function() {deepEqual( Stem("fill"), "fill");});
test("fille -> fill", function() {deepEqual( Stem("fille"), "fill");});
test("filled -> fill", function() {deepEqual( Stem("filled"), "fill");});
test("fillet -> fillet", function() {deepEqual( Stem("fillet"), "fillet");});
test("filling -> fill", function() {deepEqual( Stem("filling"), "fill");});
test("fillip -> fillip", function() {deepEqual( Stem("fillip"), "fillip");});
test("fills -> fill", function() {deepEqual( Stem("fills"), "fill");});
test("film -> film", function() {deepEqual( Stem("film"), "film");});
test("films -> film", function() {deepEqual( Stem("films"), "film");});
test("filtered -> filter", function() {deepEqual( Stem("filtered"), "filter");});
test("filtering -> filter", function() {deepEqual( Stem("filtering"), "filter");});
test("filth -> filth", function() {deepEqual( Stem("filth"), "filth");});
test("filthily -> filthili", function() {deepEqual( Stem("filthily"), "filthili");});
test("filthiness -> filthi", function() {deepEqual( Stem("filthiness"), "filthi");});
test("filthy -> filthi", function() {deepEqual( Stem("filthy"), "filthi");});
test("fin -> fin", function() {deepEqual( Stem("fin"), "fin");});
test("final -> final", function() {deepEqual( Stem("final"), "final");});
test("finally -> final", function() {deepEqual( Stem("finally"), "final");});
test("finance -> financ", function() {deepEqual( Stem("finance"), "financ");});
test("finances -> financ", function() {deepEqual( Stem("finances"), "financ");});
test("financial -> financi", function() {deepEqual( Stem("financial"), "financi");});
test("finch -> finch", function() {deepEqual( Stem("finch"), "finch");});
test("finches -> finch", function() {deepEqual( Stem("finches"), "finch");});
test("find -> find", function() {deepEqual( Stem("find"), "find");});
test("finding -> find", function() {deepEqual( Stem("finding"), "find");});
test("finds -> find", function() {deepEqual( Stem("finds"), "find");});
test("fine -> fine", function() {deepEqual( Stem("fine"), "fine");});
test("finely -> fine", function() {deepEqual( Stem("finely"), "fine");});
test("finer -> finer", function() {deepEqual( Stem("finer"), "finer");});
test("finery -> fineri", function() {deepEqual( Stem("finery"), "fineri");});
test("finest -> finest", function() {deepEqual( Stem("finest"), "finest");});
test("finger -> finger", function() {deepEqual( Stem("finger"), "finger");});
test("fingered -> finger", function() {deepEqual( Stem("fingered"), "finger");});
test("fingerends -> fingerend", function() {deepEqual( Stem("fingerends"), "fingerend");});
test("fingerless -> fingerless", function() {deepEqual( Stem("fingerless"), "fingerless");});
test("fingers -> finger", function() {deepEqual( Stem("fingers"), "finger");});
test("finis -> fini", function() {deepEqual( Stem("finis"), "fini");});
test("finish -> finish", function() {deepEqual( Stem("finish"), "finish");});
test("finished -> finish", function() {deepEqual( Stem("finished"), "finish");});
test("finishes -> finish", function() {deepEqual( Stem("finishes"), "finish");});
test("finishing -> finish", function() {deepEqual( Stem("finishing"), "finish");});
test("finlshed -> finlsh", function() {deepEqual( Stem("finlshed"), "finlsh");});
test("finn -> finn", function() {deepEqual( Stem("finn"), "finn");});
test("finnish -> finnish", function() {deepEqual( Stem("finnish"), "finnish");});
test("fins -> fin", function() {deepEqual( Stem("fins"), "fin");});
test("finsbury -> finsburi", function() {deepEqual( Stem("finsbury"), "finsburi");});
test("fiord -> fiord", function() {deepEqual( Stem("fiord"), "fiord");});
test("fir -> fir", function() {deepEqual( Stem("fir"), "fir");});
test("fire -> fire", function() {deepEqual( Stem("fire"), "fire");});
test("firearms -> firearm", function() {deepEqual( Stem("firearms"), "firearm");});
test("firebrand -> firebrand", function() {deepEqual( Stem("firebrand"), "firebrand");});
test("fired -> fire", function() {deepEqual( Stem("fired"), "fire");});
test("fireflies -> firefli", function() {deepEqual( Stem("fireflies"), "firefli");});
test("firelight -> firelight", function() {deepEqual( Stem("firelight"), "firelight");});
test("fireman -> fireman", function() {deepEqual( Stem("fireman"), "fireman");});
test("fireplace -> fireplac", function() {deepEqual( Stem("fireplace"), "fireplac");});
test("fires -> fire", function() {deepEqual( Stem("fires"), "fire");});
test("fireside -> firesid", function() {deepEqual( Stem("fireside"), "firesid");});
test("firesides -> firesid", function() {deepEqual( Stem("firesides"), "firesid");});
test("firewood -> firewood", function() {deepEqual( Stem("firewood"), "firewood");});
test("firework -> firework", function() {deepEqual( Stem("firework"), "firework");});
test("fireworks -> firework", function() {deepEqual( Stem("fireworks"), "firework");});
test("firing -> fire", function() {deepEqual( Stem("firing"), "fire");});
test("firm -> firm", function() {deepEqual( Stem("firm"), "firm");});
test("firma -> firma", function() {deepEqual( Stem("firma"), "firma");});
test("firmament -> firmament", function() {deepEqual( Stem("firmament"), "firmament");});
test("firmaments -> firmament", function() {deepEqual( Stem("firmaments"), "firmament");});
test("firmer -> firmer", function() {deepEqual( Stem("firmer"), "firmer");});
test("firmest -> firmest", function() {deepEqual( Stem("firmest"), "firmest");});
test("firmly -> firm", function() {deepEqual( Stem("firmly"), "firm");});
test("firmness -> firm", function() {deepEqual( Stem("firmness"), "firm");});
test("firs -> fir", function() {deepEqual( Stem("firs"), "fir");});
test("first -> first", function() {deepEqual( Stem("first"), "first");});
test("firstborn -> firstborn", function() {deepEqual( Stem("firstborn"), "firstborn");});
test("firstly -> first", function() {deepEqual( Stem("firstly"), "first");});
test("fis -> fis", function() {deepEqual( Stem("fis"), "fis");});
test("fiscal -> fiscal", function() {deepEqual( Stem("fiscal"), "fiscal");});
test("fish -> fish", function() {deepEqual( Stem("fish"), "fish");});
test("fished -> fish", function() {deepEqual( Stem("fished"), "fish");});
test("fisherman -> fisherman", function() {deepEqual( Stem("fisherman"), "fisherman");});
test("fishermen -> fishermen", function() {deepEqual( Stem("fishermen"), "fishermen");});
test("fishes -> fish", function() {deepEqual( Stem("fishes"), "fish");});
test("fishing -> fish", function() {deepEqual( Stem("fishing"), "fish");});
test("fishmonger -> fishmong", function() {deepEqual( Stem("fishmonger"), "fishmong");});
test("fissure -> fissur", function() {deepEqual( Stem("fissure"), "fissur");});
test("fissured -> fissur", function() {deepEqual( Stem("fissured"), "fissur");});
test("fissurella -> fissurella", function() {deepEqual( Stem("fissurella"), "fissurella");});
test("fissurellae -> fissurella", function() {deepEqual( Stem("fissurellae"), "fissurella");});
test("fissures -> fissur", function() {deepEqual( Stem("fissures"), "fissur");});
test("fist -> fist", function() {deepEqual( Stem("fist"), "fist");});
test("fisted -> fist", function() {deepEqual( Stem("fisted"), "fist");});
test("fists -> fist", function() {deepEqual( Stem("fists"), "fist");});
test("fit -> fit", function() {deepEqual( Stem("fit"), "fit");});
test("fitful -> fit", function() {deepEqual( Stem("fitful"), "fit");});
test("fitfully -> fit", function() {deepEqual( Stem("fitfully"), "fit");});
test("fitly -> fit", function() {deepEqual( Stem("fitly"), "fit");});
test("fitness -> fit", function() {deepEqual( Stem("fitness"), "fit");});
test("fitnesses -> fit", function() {deepEqual( Stem("fitnesses"), "fit");});
test("fits -> fit", function() {deepEqual( Stem("fits"), "fit");});
test("fitted -> fit", function() {deepEqual( Stem("fitted"), "fit");});
test("fitter -> fitter", function() {deepEqual( Stem("fitter"), "fitter");});
test("fittest -> fittest", function() {deepEqual( Stem("fittest"), "fittest");});
test("fitting -> fit", function() {deepEqual( Stem("fitting"), "fit");});
test("fittings -> fit", function() {deepEqual( Stem("fittings"), "fit");});
test("fitz -> fitz", function() {deepEqual( Stem("fitz"), "fitz");});
test("fitzgibbon -> fitzgibbon", function() {deepEqual( Stem("fitzgibbon"), "fitzgibbon");});
test("fitzgibbons -> fitzgibbon", function() {deepEqual( Stem("fitzgibbons"), "fitzgibbon");});
test("fitzhugh -> fitzhugh", function() {deepEqual( Stem("fitzhugh"), "fitzhugh");});
test("fitzroy -> fitzroy", function() {deepEqual( Stem("fitzroy"), "fitzroy");});
test("five -> five", function() {deepEqual( Stem("five"), "five");});
test("fiver -> fiver", function() {deepEqual( Stem("fiver"), "fiver");});
test("fives -> five", function() {deepEqual( Stem("fives"), "five");});
test("fix -> fix", function() {deepEqual( Stem("fix"), "fix");});
test("fixed -> fix", function() {deepEqual( Stem("fixed"), "fix");});
test("fixedly -> fix", function() {deepEqual( Stem("fixedly"), "fix");});
test("fixes -> fix", function() {deepEqual( Stem("fixes"), "fix");});
test("fixing -> fix", function() {deepEqual( Stem("fixing"), "fix");});
test("fixity -> fixiti", function() {deepEqual( Stem("fixity"), "fixiti");});
test("fixture -> fixtur", function() {deepEqual( Stem("fixture"), "fixtur");});
test("fixtures -> fixtur", function() {deepEqual( Stem("fixtures"), "fixtur");});
test("flabbily -> flabbili", function() {deepEqual( Stem("flabbily"), "flabbili");});
test("flabby -> flabbi", function() {deepEqual( Stem("flabby"), "flabbi");});
test("flabella -> flabella", function() {deepEqual( Stem("flabella"), "flabella");});
test("flaco -> flaco", function() {deepEqual( Stem("flaco"), "flaco");});
test("flag -> flag", function() {deepEqual( Stem("flag"), "flag");});
test("flagellation -> flagel", function() {deepEqual( Stem("flagellation"), "flagel");});
test("flagellator -> flagel", function() {deepEqual( Stem("flagellator"), "flagel");});
test("flagged -> flag", function() {deepEqual( Stem("flagged"), "flag");});
test("flagging -> flag", function() {deepEqual( Stem("flagging"), "flag");});
test("flagrant -> flagrant", function() {deepEqual( Stem("flagrant"), "flagrant");});
test("flagrantly -> flagrant", function() {deepEqual( Stem("flagrantly"), "flagrant");});
test("flags -> flag", function() {deepEqual( Stem("flags"), "flag");});
test("flagstaff -> flagstaff", function() {deepEqual( Stem("flagstaff"), "flagstaff");});
test("flake -> flake", function() {deepEqual( Stem("flake"), "flake");});
test("flakes -> flake", function() {deepEqual( Stem("flakes"), "flake");});
test("flambeaux -> flambeaux", function() {deepEqual( Stem("flambeaux"), "flambeaux");});
test("flame -> flame", function() {deepEqual( Stem("flame"), "flame");});
test("flames -> flame", function() {deepEqual( Stem("flames"), "flame");});
test("flaming -> flame", function() {deepEqual( Stem("flaming"), "flame");});
test("flamingoes -> flamingo", function() {deepEqual( Stem("flamingoes"), "flamingo");});
test("flank -> flank", function() {deepEqual( Stem("flank"), "flank");});
test("flanked -> flank", function() {deepEqual( Stem("flanked"), "flank");});
test("flanks -> flank", function() {deepEqual( Stem("flanks"), "flank");});
test("flannel -> flannel", function() {deepEqual( Stem("flannel"), "flannel");});
test("flap -> flap", function() {deepEqual( Stem("flap"), "flap");});
test("flapped -> flap", function() {deepEqual( Stem("flapped"), "flap");});
test("flapping -> flap", function() {deepEqual( Stem("flapping"), "flap");});
test("flaps -> flap", function() {deepEqual( Stem("flaps"), "flap");});
test("flare -> flare", function() {deepEqual( Stem("flare"), "flare");});
test("flares -> flare", function() {deepEqual( Stem("flares"), "flare");});
test("flaring -> flare", function() {deepEqual( Stem("flaring"), "flare");});
test("flash -> flash", function() {deepEqual( Stem("flash"), "flash");});
test("flashed -> flash", function() {deepEqual( Stem("flashed"), "flash");});
test("flashes -> flash", function() {deepEqual( Stem("flashes"), "flash");});
test("flashing -> flash", function() {deepEqual( Stem("flashing"), "flash");});
test("flashy -> flashi", function() {deepEqual( Stem("flashy"), "flashi");});
test("flask -> flask", function() {deepEqual( Stem("flask"), "flask");});
test("flat -> flat", function() {deepEqual( Stem("flat"), "flat");});
test("flatly -> flat", function() {deepEqual( Stem("flatly"), "flat");});
test("flatness -> flat", function() {deepEqual( Stem("flatness"), "flat");});
test("flats -> flat", function() {deepEqual( Stem("flats"), "flat");});
test("flattened -> flatten", function() {deepEqual( Stem("flattened"), "flatten");});
test("flattening -> flatten", function() {deepEqual( Stem("flattening"), "flatten");});
test("flatter -> flatter", function() {deepEqual( Stem("flatter"), "flatter");});
test("flattered -> flatter", function() {deepEqual( Stem("flattered"), "flatter");});
test("flatterer -> flatter", function() {deepEqual( Stem("flatterer"), "flatter");});
test("flatterers -> flatter", function() {deepEqual( Stem("flatterers"), "flatter");});
test("flattering -> flatter", function() {deepEqual( Stem("flattering"), "flatter");});
test("flatters -> flatter", function() {deepEqual( Stem("flatters"), "flatter");});
test("flattery -> flatteri", function() {deepEqual( Stem("flattery"), "flatteri");});
test("flattest -> flattest", function() {deepEqual( Stem("flattest"), "flattest");});
test("flattish -> flattish", function() {deepEqual( Stem("flattish"), "flattish");});
test("flavor -> flavor", function() {deepEqual( Stem("flavor"), "flavor");});
test("flavour -> flavour", function() {deepEqual( Stem("flavour"), "flavour");});
test("flavoured -> flavour", function() {deepEqual( Stem("flavoured"), "flavour");});
test("flaw -> flaw", function() {deepEqual( Stem("flaw"), "flaw");});
test("flawed -> flaw", function() {deepEqual( Stem("flawed"), "flaw");});
test("flaws -> flaw", function() {deepEqual( Stem("flaws"), "flaw");});
test("flax -> flax", function() {deepEqual( Stem("flax"), "flax");});
test("flaxen -> flaxen", function() {deepEqual( Stem("flaxen"), "flaxen");});
test("flaying -> flay", function() {deepEqual( Stem("flaying"), "flay");});
test("flea -> flea", function() {deepEqual( Stem("flea"), "flea");});
test("fleas -> flea", function() {deepEqual( Stem("fleas"), "flea");});
test("fleck -> fleck", function() {deepEqual( Stem("fleck"), "fleck");});
test("flecked -> fleck", function() {deepEqual( Stem("flecked"), "fleck");});
test("fled -> fled", function() {deepEqual( Stem("fled"), "fled");});
test("fledged -> fledg", function() {deepEqual( Stem("fledged"), "fledg");});
test("fledgling -> fledgl", function() {deepEqual( Stem("fledgling"), "fledgl");});
test("fledglings -> fledgl", function() {deepEqual( Stem("fledglings"), "fledgl");});
test("flee -> flee", function() {deepEqual( Stem("flee"), "flee");});
test("fleece -> fleec", function() {deepEqual( Stem("fleece"), "fleec");});
test("fleecy -> fleeci", function() {deepEqual( Stem("fleecy"), "fleeci");});
test("fleet -> fleet", function() {deepEqual( Stem("fleet"), "fleet");});
test("fleeting -> fleet", function() {deepEqual( Stem("fleeting"), "fleet");});
test("fleetingly -> fleet", function() {deepEqual( Stem("fleetingly"), "fleet");});
test("flemish -> flemish", function() {deepEqual( Stem("flemish"), "flemish");});
test("fler -> fler", function() {deepEqual( Stem("fler"), "fler");});
test("flesh -> flesh", function() {deepEqual( Stem("flesh"), "flesh");});
test("fleshing -> flesh", function() {deepEqual( Stem("fleshing"), "flesh");});
test("fleshly -> flesh", function() {deepEqual( Stem("fleshly"), "flesh");});
test("fleshy -> fleshi", function() {deepEqual( Stem("fleshy"), "fleshi");});
test("fletcher -> fletcher", function() {deepEqual( Stem("fletcher"), "fletcher");});
test("fletcherites -> fletcherit", function() {deepEqual( Stem("fletcherites"), "fletcherit");});
test("fletchers -> fletcher", function() {deepEqual( Stem("fletchers"), "fletcher");});
test("flew -> flew", function() {deepEqual( Stem("flew"), "flew");});
test("flexibility -> flexibl", function() {deepEqual( Stem("flexibility"), "flexibl");});
test("flexible -> flexibl", function() {deepEqual( Stem("flexible"), "flexibl");});
test("flexure -> flexur", function() {deepEqual( Stem("flexure"), "flexur");});
test("flickering -> flicker", function() {deepEqual( Stem("flickering"), "flicker");});
test("flickers -> flicker", function() {deepEqual( Stem("flickers"), "flicker");});
test("flicking -> flick", function() {deepEqual( Stem("flicking"), "flick");});
test("flier -> flier", function() {deepEqual( Stem("flier"), "flier");});
test("flies -> fli", function() {deepEqual( Stem("flies"), "fli");});
test("flight -> flight", function() {deepEqual( Stem("flight"), "flight");});
test("flights -> flight", function() {deepEqual( Stem("flights"), "flight");});
test("flighty -> flighti", function() {deepEqual( Stem("flighty"), "flighti");});
test("flinch -> flinch", function() {deepEqual( Stem("flinch"), "flinch");});
test("flinching -> flinch", function() {deepEqual( Stem("flinching"), "flinch");});
test("flinder -> flinder", function() {deepEqual( Stem("flinder"), "flinder");});
test("flinders -> flinder", function() {deepEqual( Stem("flinders"), "flinder");});
test("fling -> fling", function() {deepEqual( Stem("fling"), "fling");});
test("flinging -> fling", function() {deepEqual( Stem("flinging"), "fling");});
test("flings -> fling", function() {deepEqual( Stem("flings"), "fling");});
test("flint -> flint", function() {deepEqual( Stem("flint"), "flint");});
test("flinty -> flinti", function() {deepEqual( Stem("flinty"), "flinti");});
test("flippant -> flippant", function() {deepEqual( Stem("flippant"), "flippant");});
test("flipping -> flip", function() {deepEqual( Stem("flipping"), "flip");});
test("flirt -> flirt", function() {deepEqual( Stem("flirt"), "flirt");});
test("flirtation -> flirtat", function() {deepEqual( Stem("flirtation"), "flirtat");});
test("flirtations -> flirtat", function() {deepEqual( Stem("flirtations"), "flirtat");});
test("flirted -> flirt", function() {deepEqual( Stem("flirted"), "flirt");});
test("flirting -> flirt", function() {deepEqual( Stem("flirting"), "flirt");});
test("flirts -> flirt", function() {deepEqual( Stem("flirts"), "flirt");});
test("flit -> flit", function() {deepEqual( Stem("flit"), "flit");});
test("flite -> flite", function() {deepEqual( Stem("flite"), "flite");});
test("flits -> flit", function() {deepEqual( Stem("flits"), "flit");});
test("flitted -> flit", function() {deepEqual( Stem("flitted"), "flit");});
test("flitting -> flit", function() {deepEqual( Stem("flitting"), "flit");});
test("float -> float", function() {deepEqual( Stem("float"), "float");});
test("floated -> float", function() {deepEqual( Stem("floated"), "float");});
test("floating -> float", function() {deepEqual( Stem("floating"), "float");});
test("floats -> float", function() {deepEqual( Stem("floats"), "float");});
test("flocculent -> floccul", function() {deepEqual( Stem("flocculent"), "floccul");});
test("flock -> flock", function() {deepEqual( Stem("flock"), "flock");});
test("flocked -> flock", function() {deepEqual( Stem("flocked"), "flock");});
test("flocking -> flock", function() {deepEqual( Stem("flocking"), "flock");});
test("flocks -> flock", function() {deepEqual( Stem("flocks"), "flock");});
test("flog -> flog", function() {deepEqual( Stem("flog"), "flog");});
test("flogged -> flog", function() {deepEqual( Stem("flogged"), "flog");});
test("flogging -> flog", function() {deepEqual( Stem("flogging"), "flog");});
test("flood -> flood", function() {deepEqual( Stem("flood"), "flood");});
test("flooded -> flood", function() {deepEqual( Stem("flooded"), "flood");});
test("floodgates -> floodgat", function() {deepEqual( Stem("floodgates"), "floodgat");});
test("flooding -> flood", function() {deepEqual( Stem("flooding"), "flood");});
test("floods -> flood", function() {deepEqual( Stem("floods"), "flood");});
test("floor -> floor", function() {deepEqual( Stem("floor"), "floor");});
test("floored -> floor", function() {deepEqual( Stem("floored"), "floor");});
test("flooring -> floor", function() {deepEqual( Stem("flooring"), "floor");});
test("floors -> floor", function() {deepEqual( Stem("floors"), "floor");});
test("flop -> flop", function() {deepEqual( Stem("flop"), "flop");});
test("flora -> flora", function() {deepEqual( Stem("flora"), "flora");});
test("floral -> floral", function() {deepEqual( Stem("floral"), "floral");});
test("florence -> florenc", function() {deepEqual( Stem("florence"), "florenc");});
test("florian -> florian", function() {deepEqual( Stem("florian"), "florian");});
test("floriated -> floriat", function() {deepEqual( Stem("floriated"), "floriat");});
test("florid -> florid", function() {deepEqual( Stem("florid"), "florid");});
test("florist -> florist", function() {deepEqual( Stem("florist"), "florist");});
test("florula -> florula", function() {deepEqual( Stem("florula"), "florula");});
test("flotilla -> flotilla", function() {deepEqual( Stem("flotilla"), "flotilla");});
test("flounce -> flounc", function() {deepEqual( Stem("flounce"), "flounc");});
test("flounced -> flounc", function() {deepEqual( Stem("flounced"), "flounc");});
test("flounces -> flounc", function() {deepEqual( Stem("flounces"), "flounc");});
test("flouncing -> flounc", function() {deepEqual( Stem("flouncing"), "flounc");});
test("floundered -> flounder", function() {deepEqual( Stem("floundered"), "flounder");});
test("floundering -> flounder", function() {deepEqual( Stem("floundering"), "flounder");});
test("flour -> flour", function() {deepEqual( Stem("flour"), "flour");});
test("floured -> flour", function() {deepEqual( Stem("floured"), "flour");});
test("flourish -> flourish", function() {deepEqual( Stem("flourish"), "flourish");});
test("flourished -> flourish", function() {deepEqual( Stem("flourished"), "flourish");});
test("flourishes -> flourish", function() {deepEqual( Stem("flourishes"), "flourish");});
test("flourishing -> flourish", function() {deepEqual( Stem("flourishing"), "flourish");});
test("flow -> flow", function() {deepEqual( Stem("flow"), "flow");});
test("flowed -> flow", function() {deepEqual( Stem("flowed"), "flow");});
test("flower -> flower", function() {deepEqual( Stem("flower"), "flower");});
test("flowering -> flower", function() {deepEqual( Stem("flowering"), "flower");});
test("flowers -> flower", function() {deepEqual( Stem("flowers"), "flower");});
test("flowing -> flow", function() {deepEqual( Stem("flowing"), "flow");});
test("flown -> flown", function() {deepEqual( Stem("flown"), "flown");});
test("flows -> flow", function() {deepEqual( Stem("flows"), "flow");});
test("flrst -> flrst", function() {deepEqual( Stem("flrst"), "flrst");});
test("flu -> flu", function() {deepEqual( Stem("flu"), "flu");});
test("fluctuate -> fluctuat", function() {deepEqual( Stem("fluctuate"), "fluctuat");});
test("fluctuated -> fluctuat", function() {deepEqual( Stem("fluctuated"), "fluctuat");});
test("fluctuating -> fluctuat", function() {deepEqual( Stem("fluctuating"), "fluctuat");});
test("flue -> flue", function() {deepEqual( Stem("flue"), "flue");});
test("fluent -> fluent", function() {deepEqual( Stem("fluent"), "fluent");});
test("fluently -> fluentli", function() {deepEqual( Stem("fluently"), "fluentli");});
test("fluffles -> fluffl", function() {deepEqual( Stem("fluffles"), "fluffl");});
test("fluggers -> flugger", function() {deepEqual( Stem("fluggers"), "flugger");});
test("fluid -> fluid", function() {deepEqual( Stem("fluid"), "fluid");});
test("fluidified -> fluidifi", function() {deepEqual( Stem("fluidified"), "fluidifi");});
test("fluids -> fluid", function() {deepEqual( Stem("fluids"), "fluid");});
test("flung -> flung", function() {deepEqual( Stem("flung"), "flung");});
test("flunkey -> flunkey", function() {deepEqual( Stem("flunkey"), "flunkey");});
test("flurried -> flurri", function() {deepEqual( Stem("flurried"), "flurri");});
test("flurries -> flurri", function() {deepEqual( Stem("flurries"), "flurri");});
test("flurry -> flurri", function() {deepEqual( Stem("flurry"), "flurri");});
test("flush -> flush", function() {deepEqual( Stem("flush"), "flush");});
test("flushed -> flush", function() {deepEqual( Stem("flushed"), "flush");});
test("flushes -> flush", function() {deepEqual( Stem("flushes"), "flush");});
test("flushing -> flush", function() {deepEqual( Stem("flushing"), "flush");});
test("flustered -> fluster", function() {deepEqual( Stem("flustered"), "fluster");});
test("flustra -> flustra", function() {deepEqual( Stem("flustra"), "flustra");});
test("flustraceae -> flustracea", function() {deepEqual( Stem("flustraceae"), "flustracea");});
test("flute -> flute", function() {deepEqual( Stem("flute"), "flute");});
test("flutes -> flute", function() {deepEqual( Stem("flutes"), "flute");});
test("flutings -> flute", function() {deepEqual( Stem("flutings"), "flute");});
test("flutter -> flutter", function() {deepEqual( Stem("flutter"), "flutter");});
test("fluttered -> flutter", function() {deepEqual( Stem("fluttered"), "flutter");});
test("flutterers -> flutter", function() {deepEqual( Stem("flutterers"), "flutter");});
test("fluttering -> flutter", function() {deepEqual( Stem("fluttering"), "flutter");});
test("flutteringiy -> flutteringiy", function() {deepEqual( Stem("flutteringiy"), "flutteringiy");});
test("flutters -> flutter", function() {deepEqual( Stem("flutters"), "flutter");});
test("fly -> fli", function() {deepEqual( Stem("fly"), "fli");});
test("flycatcher -> flycatch", function() {deepEqual( Stem("flycatcher"), "flycatch");});
test("flycatchers -> flycatch", function() {deepEqual( Stem("flycatchers"), "flycatch");});
test("flying -> fli", function() {deepEqual( Stem("flying"), "fli");});
test("flys -> flys", function() {deepEqual( Stem("flys"), "flys");});
test("fo -> fo", function() {deepEqual( Stem("fo"), "fo");});
test("foal -> foal", function() {deepEqual( Stem("foal"), "foal");});
test("foals -> foal", function() {deepEqual( Stem("foals"), "foal");});
test("foam -> foam", function() {deepEqual( Stem("foam"), "foam");});
test("foaming -> foam", function() {deepEqual( Stem("foaming"), "foam");});
test("fob -> fob", function() {deepEqual( Stem("fob"), "fob");});
test("focus -> focus", function() {deepEqual( Stem("focus"), "focus");});
test("fodere -> foder", function() {deepEqual( Stem("fodere"), "foder");});
test("foe -> foe", function() {deepEqual( Stem("foe"), "foe");});
test("foes -> foe", function() {deepEqual( Stem("foes"), "foe");});
test("foetid -> foetid", function() {deepEqual( Stem("foetid"), "foetid");});
test("fog -> fog", function() {deepEqual( Stem("fog"), "fog");});
test("fogeys -> fogey", function() {deepEqual( Stem("fogeys"), "fogey");});
test("foggy -> foggi", function() {deepEqual( Stem("foggy"), "foggi");});
test("fogies -> fogi", function() {deepEqual( Stem("fogies"), "fogi");});
test("fogs -> fog", function() {deepEqual( Stem("fogs"), "fog");});
test("fogy -> fogi", function() {deepEqual( Stem("fogy"), "fogi");});
test("foh -> foh", function() {deepEqual( Stem("foh"), "foh");});
test("foibles -> foibl", function() {deepEqual( Stem("foibles"), "foibl");});
test("foil -> foil", function() {deepEqual( Stem("foil"), "foil");});
test("foiled -> foil", function() {deepEqual( Stem("foiled"), "foil");});
test("foind -> foind", function() {deepEqual( Stem("foind"), "foind");});
test("foinds -> foind", function() {deepEqual( Stem("foinds"), "foind");});
test("folair -> folair", function() {deepEqual( Stem("folair"), "folair");});
test("fold -> fold", function() {deepEqual( Stem("fold"), "fold");});
test("folded -> fold", function() {deepEqual( Stem("folded"), "fold");});
test("folding -> fold", function() {deepEqual( Stem("folding"), "fold");});
test("folds -> fold", function() {deepEqual( Stem("folds"), "fold");});
test("foliaceous -> foliac", function() {deepEqual( Stem("foliaceous"), "foliac");});
test("foliage -> foliag", function() {deepEqual( Stem("foliage"), "foliag");});
test("folio -> folio", function() {deepEqual( Stem("folio"), "folio");});
test("folk -> folk", function() {deepEqual( Stem("folk"), "folk");});
test("folkestone -> folkeston", function() {deepEqual( Stem("folkestone"), "folkeston");});
test("folks -> folk", function() {deepEqual( Stem("folks"), "folk");});
test("foller -> foller", function() {deepEqual( Stem("foller"), "foller");});
test("follerer -> foller", function() {deepEqual( Stem("follerer"), "foller");});
test("follerers -> foller", function() {deepEqual( Stem("follerers"), "foller");});
test("follering -> foller", function() {deepEqual( Stem("follering"), "foller");});
test("follies -> folli", function() {deepEqual( Stem("follies"), "folli");});
test("follow -> follow", function() {deepEqual( Stem("follow"), "follow");});
test("followed -> follow", function() {deepEqual( Stem("followed"), "follow");});
test("follower -> follow", function() {deepEqual( Stem("follower"), "follow");});
test("followers -> follow", function() {deepEqual( Stem("followers"), "follow");});
test("following -> follow", function() {deepEqual( Stem("following"), "follow");});
test("follows -> follow", function() {deepEqual( Stem("follows"), "follow");});
test("folly -> folli", function() {deepEqual( Stem("folly"), "folli");});
test("fomentation -> foment", function() {deepEqual( Stem("fomentation"), "foment");});
test("fomitch -> fomitch", function() {deepEqual( Stem("fomitch"), "fomitch");});
test("fond -> fond", function() {deepEqual( Stem("fond"), "fond");});
test("fonder -> fonder", function() {deepEqual( Stem("fonder"), "fonder");});
test("fondest -> fondest", function() {deepEqual( Stem("fondest"), "fondest");});
test("fondle -> fondl", function() {deepEqual( Stem("fondle"), "fondl");});
test("fondles -> fondl", function() {deepEqual( Stem("fondles"), "fondl");});
test("fondling -> fondl", function() {deepEqual( Stem("fondling"), "fondl");});
test("fondly -> fond", function() {deepEqual( Stem("fondly"), "fond");});
test("fondness -> fond", function() {deepEqual( Stem("fondness"), "fond");});
test("font -> font", function() {deepEqual( Stem("font"), "font");});
test("foo -> foo", function() {deepEqual( Stem("foo"), "foo");});
test("food -> food", function() {deepEqual( Stem("food"), "food");});
test("foodle -> foodl", function() {deepEqual( Stem("foodle"), "foodl");});
test("fool -> fool", function() {deepEqual( Stem("fool"), "fool");});
test("fooled -> fool", function() {deepEqual( Stem("fooled"), "fool");});
test("fooleries -> fooleri", function() {deepEqual( Stem("fooleries"), "fooleri");});
test("foolery -> fooleri", function() {deepEqual( Stem("foolery"), "fooleri");});
test("fooling -> fool", function() {deepEqual( Stem("fooling"), "fool");});
test("foolish -> foolish", function() {deepEqual( Stem("foolish"), "foolish");});
test("foolishly -> foolish", function() {deepEqual( Stem("foolishly"), "foolish");});
test("foolishness -> foolish", function() {deepEqual( Stem("foolishness"), "foolish");});
test("fools -> fool", function() {deepEqual( Stem("fools"), "fool");});
test("foolscap -> foolscap", function() {deepEqual( Stem("foolscap"), "foolscap");});
test("foot -> foot", function() {deepEqual( Stem("foot"), "foot");});
test("football -> footbal", function() {deepEqual( Stem("football"), "footbal");});
test("footboy -> footboy", function() {deepEqual( Stem("footboy"), "footboy");});
test("footed -> foot", function() {deepEqual( Stem("footed"), "foot");});
test("footer -> footer", function() {deepEqual( Stem("footer"), "footer");});
test("footfall -> footfal", function() {deepEqual( Stem("footfall"), "footfal");});
test("footguards -> footguard", function() {deepEqual( Stem("footguards"), "footguard");});
test("foothold -> foothold", function() {deepEqual( Stem("foothold"), "foothold");});
test("footing -> foot", function() {deepEqual( Stem("footing"), "foot");});
test("footlights -> footlight", function() {deepEqual( Stem("footlights"), "footlight");});
test("footman -> footman", function() {deepEqual( Stem("footman"), "footman");});
test("footmen -> footmen", function() {deepEqual( Stem("footmen"), "footmen");});
test("footpad -> footpad", function() {deepEqual( Stem("footpad"), "footpad");});
test("footpath -> footpath", function() {deepEqual( Stem("footpath"), "footpath");});
test("footprint -> footprint", function() {deepEqual( Stem("footprint"), "footprint");});
test("footprints -> footprint", function() {deepEqual( Stem("footprints"), "footprint");});
test("footsore -> footsor", function() {deepEqual( Stem("footsore"), "footsor");});
test("footstep -> footstep", function() {deepEqual( Stem("footstep"), "footstep");});
test("footsteps -> footstep", function() {deepEqual( Stem("footsteps"), "footstep");});
test("footstool -> footstool", function() {deepEqual( Stem("footstool"), "footstool");});
test("footstools -> footstool", function() {deepEqual( Stem("footstools"), "footstool");});
test("footway -> footway", function() {deepEqual( Stem("footway"), "footway");});
test("footways -> footway", function() {deepEqual( Stem("footways"), "footway");});
test("foppish -> foppish", function() {deepEqual( Stem("foppish"), "foppish");});
test("for -> for", function() {deepEqual( Stem("for"), "for");});
test("foragers -> forag", function() {deepEqual( Stem("foragers"), "forag");});
test("forard -> forard", function() {deepEqual( Stem("forard"), "forard");});
test("forards -> forard", function() {deepEqual( Stem("forards"), "forard");});
test("forasmuch -> forasmuch", function() {deepEqual( Stem("forasmuch"), "forasmuch");});
test("forbade -> forbad", function() {deepEqual( Stem("forbade"), "forbad");});
test("forbear -> forbear", function() {deepEqual( Stem("forbear"), "forbear");});
test("forbearance -> forbear", function() {deepEqual( Stem("forbearance"), "forbear");});
test("forbearing -> forbear", function() {deepEqual( Stem("forbearing"), "forbear");});
test("forbearingly -> forbear", function() {deepEqual( Stem("forbearingly"), "forbear");});
test("forbears -> forbear", function() {deepEqual( Stem("forbears"), "forbear");});
test("forbes -> forb", function() {deepEqual( Stem("forbes"), "forb");});
test("forbid -> forbid", function() {deepEqual( Stem("forbid"), "forbid");});
test("forbidden -> forbidden", function() {deepEqual( Stem("forbidden"), "forbidden");});
test("forbidding -> forbid", function() {deepEqual( Stem("forbidding"), "forbid");});
test("forbids -> forbid", function() {deepEqual( Stem("forbids"), "forbid");});
test("forbore -> forbor", function() {deepEqual( Stem("forbore"), "forbor");});
test("force -> forc", function() {deepEqual( Stem("force"), "forc");});
test("forced -> forc", function() {deepEqual( Stem("forced"), "forc");});
test("forceps -> forcep", function() {deepEqual( Stem("forceps"), "forcep");});
test("forces -> forc", function() {deepEqual( Stem("forces"), "forc");});
test("forcible -> forcibl", function() {deepEqual( Stem("forcible"), "forcibl");});
test("forcibly -> forcibl", function() {deepEqual( Stem("forcibly"), "forcibl");});
test("forcing -> forc", function() {deepEqual( Stem("forcing"), "forc");});
test("ford -> ford", function() {deepEqual( Stem("ford"), "ford");});
test("forded -> ford", function() {deepEqual( Stem("forded"), "ford");});
test("fore -> fore", function() {deepEqual( Stem("fore"), "fore");});
test("foreboded -> forebod", function() {deepEqual( Stem("foreboded"), "forebod");});
test("foreboding -> forebod", function() {deepEqual( Stem("foreboding"), "forebod");});
test("forebodings -> forebod", function() {deepEqual( Stem("forebodings"), "forebod");});
test("forecast -> forecast", function() {deepEqual( Stem("forecast"), "forecast");});
test("forecoming -> forecom", function() {deepEqual( Stem("forecoming"), "forecom");});
test("forefathers -> forefath", function() {deepEqual( Stem("forefathers"), "forefath");});
test("forefinger -> forefing", function() {deepEqual( Stem("forefinger"), "forefing");});
test("forefingers -> forefing", function() {deepEqual( Stem("forefingers"), "forefing");});
test("foregathered -> foregath", function() {deepEqual( Stem("foregathered"), "foregath");});
test("forego -> forego", function() {deepEqual( Stem("forego"), "forego");});
test("foregoing -> forego", function() {deepEqual( Stem("foregoing"), "forego");});
test("foregone -> foregon", function() {deepEqual( Stem("foregone"), "foregon");});
test("foreground -> foreground", function() {deepEqual( Stem("foreground"), "foreground");});
test("forehead -> forehead", function() {deepEqual( Stem("forehead"), "forehead");});
test("foreheads -> forehead", function() {deepEqual( Stem("foreheads"), "forehead");});
test("foreign -> foreign", function() {deepEqual( Stem("foreign"), "foreign");});
test("foreigner -> foreign", function() {deepEqual( Stem("foreigner"), "foreign");});
test("foreigners -> foreign", function() {deepEqual( Stem("foreigners"), "foreign");});
test("forelock -> forelock", function() {deepEqual( Stem("forelock"), "forelock");});
test("foreman -> foreman", function() {deepEqual( Stem("foreman"), "foreman");});
test("foremost -> foremost", function() {deepEqual( Stem("foremost"), "foremost");});
test("forenoon -> forenoon", function() {deepEqual( Stem("forenoon"), "forenoon");});
test("forensic -> forens", function() {deepEqual( Stem("forensic"), "forens");});
test("forerunner -> forerunn", function() {deepEqual( Stem("forerunner"), "forerunn");});
test("foresaw -> foresaw", function() {deepEqual( Stem("foresaw"), "foresaw");});
test("foresee -> forese", function() {deepEqual( Stem("foresee"), "forese");});
test("foreseeing -> forese", function() {deepEqual( Stem("foreseeing"), "forese");});
test("foreseen -> foreseen", function() {deepEqual( Stem("foreseen"), "foreseen");});
test("foresees -> forese", function() {deepEqual( Stem("foresees"), "forese");});
test("foreshadow -> foreshadow", function() {deepEqual( Stem("foreshadow"), "foreshadow");});
test("foreshadowing -> foreshadow", function() {deepEqual( Stem("foreshadowing"), "foreshadow");});
test("foreshortened -> foreshorten", function() {deepEqual( Stem("foreshortened"), "foreshorten");});
test("foresight -> foresight", function() {deepEqual( Stem("foresight"), "foresight");});
test("forest -> forest", function() {deepEqual( Stem("forest"), "forest");});
test("forests -> forest", function() {deepEqual( Stem("forests"), "forest");});
test("foretaste -> foretast", function() {deepEqual( Stem("foretaste"), "foretast");});
test("foretell -> foretel", function() {deepEqual( Stem("foretell"), "foretel");});
test("foretelling -> foretel", function() {deepEqual( Stem("foretelling"), "foretel");});
test("forethought -> forethought", function() {deepEqual( Stem("forethought"), "forethought");});
test("foretold -> foretold", function() {deepEqual( Stem("foretold"), "foretold");});
test("forever -> forev", function() {deepEqual( Stem("forever"), "forev");});
test("forewarned -> forewarn", function() {deepEqual( Stem("forewarned"), "forewarn");});
test("forewarning -> forewarn", function() {deepEqual( Stem("forewarning"), "forewarn");});
test("forewarnings -> forewarn", function() {deepEqual( Stem("forewarnings"), "forewarn");});
test("forewoman -> forewoman", function() {deepEqual( Stem("forewoman"), "forewoman");});
test("forfeit -> forfeit", function() {deepEqual( Stem("forfeit"), "forfeit");});
test("forfeited -> forfeit", function() {deepEqual( Stem("forfeited"), "forfeit");});
test("forfeiting -> forfeit", function() {deepEqual( Stem("forfeiting"), "forfeit");});
test("forfeits -> forfeit", function() {deepEqual( Stem("forfeits"), "forfeit");});
test("forficatus -> forficatus", function() {deepEqual( Stem("forficatus"), "forficatus");});
test("forgave -> forgav", function() {deepEqual( Stem("forgave"), "forgav");});
test("forge -> forg", function() {deepEqual( Stem("forge"), "forg");});
test("forged -> forg", function() {deepEqual( Stem("forged"), "forg");});
test("forgeries -> forgeri", function() {deepEqual( Stem("forgeries"), "forgeri");});
test("forgery -> forgeri", function() {deepEqual( Stem("forgery"), "forgeri");});
test("forget -> forget", function() {deepEqual( Stem("forget"), "forget");});
test("forgetful -> forget", function() {deepEqual( Stem("forgetful"), "forget");});
test("forgetfulness -> forget", function() {deepEqual( Stem("forgetfulness"), "forget");});
test("forgets -> forget", function() {deepEqual( Stem("forgets"), "forget");});
test("forgetting -> forget", function() {deepEqual( Stem("forgetting"), "forget");});
test("forgi -> forgi", function() {deepEqual( Stem("forgi"), "forgi");});
test("forging -> forg", function() {deepEqual( Stem("forging"), "forg");});
test("forgive -> forgiv", function() {deepEqual( Stem("forgive"), "forgiv");});
test("forgiven -> forgiven", function() {deepEqual( Stem("forgiven"), "forgiven");});
test("forgiveness -> forgiv", function() {deepEqual( Stem("forgiveness"), "forgiv");});
test("forgives -> forgiv", function() {deepEqual( Stem("forgives"), "forgiv");});
test("forgiving -> forgiv", function() {deepEqual( Stem("forgiving"), "forgiv");});
test("forgivingly -> forgiv", function() {deepEqual( Stem("forgivingly"), "forgiv");});
test("forgot -> forgot", function() {deepEqual( Stem("forgot"), "forgot");});
test("forgotten -> forgotten", function() {deepEqual( Stem("forgotten"), "forgotten");});
test("fork -> fork", function() {deepEqual( Stem("fork"), "fork");});
test("forked -> fork", function() {deepEqual( Stem("forked"), "fork");});
test("forks -> fork", function() {deepEqual( Stem("forks"), "fork");});
test("forlorn -> forlorn", function() {deepEqual( Stem("forlorn"), "forlorn");});
test("forlornest -> forlornest", function() {deepEqual( Stem("forlornest"), "forlornest");});
test("forlornly -> forlorn", function() {deepEqual( Stem("forlornly"), "forlorn");});
test("form -> form", function() {deepEqual( Stem("form"), "form");});
test("formal -> formal", function() {deepEqual( Stem("formal"), "formal");});
test("formalities -> formal", function() {deepEqual( Stem("formalities"), "formal");});
test("formality -> formal", function() {deepEqual( Stem("formality"), "formal");});
test("formally -> formal", function() {deepEqual( Stem("formally"), "formal");});
test("formation -> format", function() {deepEqual( Stem("formation"), "format");});
test("formations -> format", function() {deepEqual( Stem("formations"), "format");});
test("formed -> form", function() {deepEqual( Stem("formed"), "form");});
test("former -> former", function() {deepEqual( Stem("former"), "former");});
test("formerly -> former", function() {deepEqual( Stem("formerly"), "former");});
test("formidable -> formid", function() {deepEqual( Stem("formidable"), "formid");});
test("forming -> form", function() {deepEqual( Stem("forming"), "form");});
test("forms -> form", function() {deepEqual( Stem("forms"), "form");});
test("forrard -> forrard", function() {deepEqual( Stem("forrard"), "forrard");});
test("forrenner -> forrenn", function() {deepEqual( Stem("forrenner"), "forrenn");});
test("forres -> forr", function() {deepEqual( Stem("forres"), "forr");});
test("forsake -> forsak", function() {deepEqual( Stem("forsake"), "forsak");});
test("forsaken -> forsaken", function() {deepEqual( Stem("forsaken"), "forsaken");});
test("forsaking -> forsak", function() {deepEqual( Stem("forsaking"), "forsak");});
test("forsook -> forsook", function() {deepEqual( Stem("forsook"), "forsook");});
test("forster -> forster", function() {deepEqual( Stem("forster"), "forster");});
test("forsworn -> forsworn", function() {deepEqual( Stem("forsworn"), "forsworn");});
test("fort -> fort", function() {deepEqual( Stem("fort"), "fort");});
test("forte -> fort", function() {deepEqual( Stem("forte"), "fort");});
test("forth -> forth", function() {deepEqual( Stem("forth"), "forth");});
test("forthcoming -> forthcom", function() {deepEqual( Stem("forthcoming"), "forthcom");});
test("forthwith -> forthwith", function() {deepEqual( Stem("forthwith"), "forthwith");});
test("fortification -> fortif", function() {deepEqual( Stem("fortification"), "fortif");});
test("fortifications -> fortif", function() {deepEqual( Stem("fortifications"), "fortif");});
test("fortified -> fortifi", function() {deepEqual( Stem("fortified"), "fortifi");});
test("fortifying -> fortifi", function() {deepEqual( Stem("fortifying"), "fortifi");});
test("fortis -> forti", function() {deepEqual( Stem("fortis"), "forti");});
test("fortitude -> fortitud", function() {deepEqual( Stem("fortitude"), "fortitud");});
test("fortnight -> fortnight", function() {deepEqual( Stem("fortnight"), "fortnight");});
test("fortress -> fortress", function() {deepEqual( Stem("fortress"), "fortress");});
test("forts -> fort", function() {deepEqual( Stem("forts"), "fort");});
test("fortuitous -> fortuit", function() {deepEqual( Stem("fortuitous"), "fortuit");});
test("fortunate -> fortun", function() {deepEqual( Stem("fortunate"), "fortun");});
test("fortunately -> fortun", function() {deepEqual( Stem("fortunately"), "fortun");});
test("fortunatus -> fortunatus", function() {deepEqual( Stem("fortunatus"), "fortunatus");});
test("fortune -> fortun", function() {deepEqual( Stem("fortune"), "fortun");});
test("fortunes -> fortun", function() {deepEqual( Stem("fortunes"), "fortun");});
test("forty -> forti", function() {deepEqual( Stem("forty"), "forti");});
test("forward -> forward", function() {deepEqual( Stem("forward"), "forward");});
test("forwarded -> forward", function() {deepEqual( Stem("forwarded"), "forward");});
test("forwarding -> forward", function() {deepEqual( Stem("forwarding"), "forward");});
test("forwardness -> forward", function() {deepEqual( Stem("forwardness"), "forward");});
test("forwards -> forward", function() {deepEqual( Stem("forwards"), "forward");});
test("fossil -> fossil", function() {deepEqual( Stem("fossil"), "fossil");});
test("fossiles -> fossil", function() {deepEqual( Stem("fossiles"), "fossil");});
test("fossiliferous -> fossilifer", function() {deepEqual( Stem("fossiliferous"), "fossilifer");});
test("fossils -> fossil", function() {deepEqual( Stem("fossils"), "fossil");});
test("foster -> foster", function() {deepEqual( Stem("foster"), "foster");});
test("fostered -> foster", function() {deepEqual( Stem("fostered"), "foster");});
test("fostering -> foster", function() {deepEqual( Stem("fostering"), "foster");});
test("fothergill -> fothergil", function() {deepEqual( Stem("fothergill"), "fothergil");});
test("fotheringham -> fotheringham", function() {deepEqual( Stem("fotheringham"), "fotheringham");});
test("fotheringhams -> fotheringham", function() {deepEqual( Stem("fotheringhams"), "fotheringham");});
test("fou -> fou", function() {deepEqual( Stem("fou"), "fou");});
test("fought -> fought", function() {deepEqual( Stem("fought"), "fought");});
test("foul -> foul", function() {deepEqual( Stem("foul"), "foul");});
test("fouled -> foul", function() {deepEqual( Stem("fouled"), "foul");});
test("foulest -> foulest", function() {deepEqual( Stem("foulest"), "foulest");});
test("foun -> foun", function() {deepEqual( Stem("foun"), "foun");});
test("found -> found", function() {deepEqual( Stem("found"), "found");});
test("foundation -> foundat", function() {deepEqual( Stem("foundation"), "foundat");});
test("foundations -> foundat", function() {deepEqual( Stem("foundations"), "foundat");});
test("founded -> found", function() {deepEqual( Stem("founded"), "found");});
test("founding -> found", function() {deepEqual( Stem("founding"), "found");});
test("foundling -> foundl", function() {deepEqual( Stem("foundling"), "foundl");});
test("foundries -> foundri", function() {deepEqual( Stem("foundries"), "foundri");});
test("founds -> found", function() {deepEqual( Stem("founds"), "found");});
test("fount -> fount", function() {deepEqual( Stem("fount"), "fount");});
test("fountain -> fountain", function() {deepEqual( Stem("fountain"), "fountain");});
test("fountains -> fountain", function() {deepEqual( Stem("fountains"), "fountain");});
test("fouque -> fouqu", function() {deepEqual( Stem("fouque"), "fouqu");});
test("four -> four", function() {deepEqual( Stem("four"), "four");});
test("fourier -> fourier", function() {deepEqual( Stem("fourier"), "fourier");});
test("fourpence -> fourpenc", function() {deepEqual( Stem("fourpence"), "fourpenc");});
test("fours -> four", function() {deepEqual( Stem("fours"), "four");});
test("fourteen -> fourteen", function() {deepEqual( Stem("fourteen"), "fourteen");});
test("fourteenpenny -> fourteenpenni", function() {deepEqual( Stem("fourteenpenny"), "fourteenpenni");});
test("fourteenth -> fourteenth", function() {deepEqual( Stem("fourteenth"), "fourteenth");});
test("fourth -> fourth", function() {deepEqual( Stem("fourth"), "fourth");});
test("fourthly -> fourth", function() {deepEqual( Stem("fourthly"), "fourth");});
test("fourths -> fourth", function() {deepEqual( Stem("fourths"), "fourth");});
test("fower -> fower", function() {deepEqual( Stem("fower"), "fower");});
test("fowl -> fowl", function() {deepEqual( Stem("fowl"), "fowl");});
test("fowler -> fowler", function() {deepEqual( Stem("fowler"), "fowler");});
test("fowls -> fowl", function() {deepEqual( Stem("fowls"), "fowl");});
test("fox -> fox", function() {deepEqual( Stem("fox"), "fox");});
test("foxes -> fox", function() {deepEqual( Stem("foxes"), "fox");});
test("foxgloves -> foxglov", function() {deepEqual( Stem("foxgloves"), "foxglov");});
test("fra -> fra", function() {deepEqual( Stem("fra"), "fra");});
test("fraction -> fraction", function() {deepEqual( Stem("fraction"), "fraction");});
test("fractious -> fractious", function() {deepEqual( Stem("fractious"), "fractious");});
test("fracture -> fractur", function() {deepEqual( Stem("fracture"), "fractur");});
test("fractured -> fractur", function() {deepEqual( Stem("fractured"), "fractur");});
test("fractures -> fractur", function() {deepEqual( Stem("fractures"), "fractur");});
test("fragile -> fragil", function() {deepEqual( Stem("fragile"), "fragil");});
test("fragility -> fragil", function() {deepEqual( Stem("fragility"), "fragil");});
test("fragm -> fragm", function() {deepEqual( Stem("fragm"), "fragm");});
test("fragment -> fragment", function() {deepEqual( Stem("fragment"), "fragment");});
test("fragmentary -> fragmentari", function() {deepEqual( Stem("fragmentary"), "fragmentari");});
test("fragments -> fragment", function() {deepEqual( Stem("fragments"), "fragment");});
test("fragrance -> fragranc", function() {deepEqual( Stem("fragrance"), "fragranc");});
test("fragrant -> fragrant", function() {deepEqual( Stem("fragrant"), "fragrant");});
test("frail -> frail", function() {deepEqual( Stem("frail"), "frail");});
test("frame -> frame", function() {deepEqual( Stem("frame"), "frame");});
test("framed -> frame", function() {deepEqual( Stem("framed"), "frame");});
test("frames -> frame", function() {deepEqual( Stem("frames"), "frame");});
test("framework -> framework", function() {deepEqual( Stem("framework"), "framework");});
test("framing -> frame", function() {deepEqual( Stem("framing"), "frame");});
test("francais -> francai", function() {deepEqual( Stem("francais"), "francai");});
test("france -> franc", function() {deepEqual( Stem("france"), "franc");});
test("franchise -> franchis", function() {deepEqual( Stem("franchise"), "franchis");});
test("franchises -> franchis", function() {deepEqual( Stem("franchises"), "franchis");});
test("francia -> francia", function() {deepEqual( Stem("francia"), "francia");});
test("francis -> franci", function() {deepEqual( Stem("francis"), "franci");});
test("francisco -> francisco", function() {deepEqual( Stem("francisco"), "francisco");});
test("frank -> frank", function() {deepEqual( Stem("frank"), "frank");});
test("frankest -> frankest", function() {deepEqual( Stem("frankest"), "frankest");});
test("frankfort -> frankfort", function() {deepEqual( Stem("frankfort"), "frankfort");});
test("frankly -> frank", function() {deepEqual( Stem("frankly"), "frank");});
test("frankness -> frank", function() {deepEqual( Stem("frankness"), "frank");});
test("franks -> frank", function() {deepEqual( Stem("franks"), "frank");});
test("frantic -> frantic", function() {deepEqual( Stem("frantic"), "frantic");});
test("frantically -> frantic", function() {deepEqual( Stem("frantically"), "frantic");});
test("frantsovna -> frantsovna", function() {deepEqual( Stem("frantsovna"), "frantsovna");});
test("frantsovnas -> frantsovna", function() {deepEqual( Stem("frantsovnas"), "frantsovna");});
test("fraternal -> fratern", function() {deepEqual( Stem("fraternal"), "fratern");});
test("fraternity -> fratern", function() {deepEqual( Stem("fraternity"), "fratern");});
test("fraud -> fraud", function() {deepEqual( Stem("fraud"), "fraud");});
test("fraudulent -> fraudul", function() {deepEqual( Stem("fraudulent"), "fraudul");});
test("fraudulently -> fraudul", function() {deepEqual( Stem("fraudulently"), "fraudul");});
test("fraught -> fraught", function() {deepEqual( Stem("fraught"), "fraught");});
test("fray -> fray", function() {deepEqual( Stem("fray"), "fray");});
test("frayed -> fray", function() {deepEqual( Stem("frayed"), "fray");});
test("freak -> freak", function() {deepEqual( Stem("freak"), "freak");});
test("freaks -> freak", function() {deepEqual( Stem("freaks"), "freak");});
test("freckled -> freckl", function() {deepEqual( Stem("freckled"), "freckl");});
test("frederick -> frederick", function() {deepEqual( Stem("frederick"), "frederick");});
test("free -> free", function() {deepEqual( Stem("free"), "free");});
test("freed -> freed", function() {deepEqual( Stem("freed"), "freed");});
test("freedom -> freedom", function() {deepEqual( Stem("freedom"), "freedom");});
test("freeholders -> freehold", function() {deepEqual( Stem("freeholders"), "freehold");});
test("freeing -> free", function() {deepEqual( Stem("freeing"), "free");});
test("freely -> freeli", function() {deepEqual( Stem("freely"), "freeli");});
test("freemason -> freemason", function() {deepEqual( Stem("freemason"), "freemason");});
test("freemasonry -> freemasonri", function() {deepEqual( Stem("freemasonry"), "freemasonri");});
test("freer -> freer", function() {deepEqual( Stem("freer"), "freer");});
test("frees -> free", function() {deepEqual( Stem("frees"), "free");});
test("freestone -> freeston", function() {deepEqual( Stem("freestone"), "freeston");});
test("freeze -> freez", function() {deepEqual( Stem("freeze"), "freez");});
test("freezes -> freez", function() {deepEqual( Stem("freezes"), "freez");});
test("freezing -> freez", function() {deepEqual( Stem("freezing"), "freez");});
test("freight -> freight", function() {deepEqual( Stem("freight"), "freight");});
test("freischutz -> freischutz", function() {deepEqual( Stem("freischutz"), "freischutz");});
test("french -> french", function() {deepEqual( Stem("french"), "french");});
test("frenchman -> frenchman", function() {deepEqual( Stem("frenchman"), "frenchman");});
test("frenchmen -> frenchmen", function() {deepEqual( Stem("frenchmen"), "frenchmen");});
test("frenchwoman -> frenchwoman", function() {deepEqual( Stem("frenchwoman"), "frenchwoman");});
test("frenchwomen -> frenchwomen", function() {deepEqual( Stem("frenchwomen"), "frenchwomen");});
test("frenzied -> frenzi", function() {deepEqual( Stem("frenzied"), "frenzi");});
test("frenzy -> frenzi", function() {deepEqual( Stem("frenzy"), "frenzi");});
test("frequency -> frequenc", function() {deepEqual( Stem("frequency"), "frequenc");});
test("frequenfly -> frequenfli", function() {deepEqual( Stem("frequenfly"), "frequenfli");});
test("frequent -> frequent", function() {deepEqual( Stem("frequent"), "frequent");});
test("frequented -> frequent", function() {deepEqual( Stem("frequented"), "frequent");});
test("frequenters -> frequent", function() {deepEqual( Stem("frequenters"), "frequent");});
test("frequenting -> frequent", function() {deepEqual( Stem("frequenting"), "frequent");});
test("frequentl -> frequentl", function() {deepEqual( Stem("frequentl"), "frequentl");});
test("frequently -> frequent", function() {deepEqual( Stem("frequently"), "frequent");});
test("frequents -> frequent", function() {deepEqual( Stem("frequents"), "frequent");});
test("fres -> fres", function() {deepEqual( Stem("fres"), "fres");});
test("fresco -> fresco", function() {deepEqual( Stem("fresco"), "fresco");});
test("fresh -> fresh", function() {deepEqual( Stem("fresh"), "fresh");});
test("freshen -> freshen", function() {deepEqual( Stem("freshen"), "freshen");});
test("freshened -> freshen", function() {deepEqual( Stem("freshened"), "freshen");});
test("freshening -> freshen", function() {deepEqual( Stem("freshening"), "freshen");});
test("fresher -> fresher", function() {deepEqual( Stem("fresher"), "fresher");});
test("freshest -> freshest", function() {deepEqual( Stem("freshest"), "freshest");});
test("freshly -> fresh", function() {deepEqual( Stem("freshly"), "fresh");});
test("freshness -> fresh", function() {deepEqual( Stem("freshness"), "fresh");});
test("freshwater -> freshwat", function() {deepEqual( Stem("freshwater"), "freshwat");});
test("fret -> fret", function() {deepEqual( Stem("fret"), "fret");});
test("fretful -> fret", function() {deepEqual( Stem("fretful"), "fret");});
test("fretfully -> fret", function() {deepEqual( Stem("fretfully"), "fret");});
test("fretfulness -> fret", function() {deepEqual( Stem("fretfulness"), "fret");});
test("fretted -> fret", function() {deepEqual( Stem("fretted"), "fret");});
test("fretting -> fret", function() {deepEqual( Stem("fretting"), "fret");});
test("frever -> frever", function() {deepEqual( Stem("frever"), "frever");});
test("freyrina -> freyrina", function() {deepEqual( Stem("freyrina"), "freyrina");});
test("friable -> friabl", function() {deepEqual( Stem("friable"), "friabl");});
test("friar -> friar", function() {deepEqual( Stem("friar"), "friar");});
test("fricassee -> fricasse", function() {deepEqual( Stem("fricassee"), "fricasse");});
test("friction -> friction", function() {deepEqual( Stem("friction"), "friction");});
test("friday -> friday", function() {deepEqual( Stem("friday"), "friday");});
test("fridays -> friday", function() {deepEqual( Stem("fridays"), "friday");});
test("fridolin -> fridolin", function() {deepEqual( Stem("fridolin"), "fridolin");});
test("fried -> fri", function() {deepEqual( Stem("fried"), "fri");});
test("friend -> friend", function() {deepEqual( Stem("friend"), "friend");});
test("friendless -> friendless", function() {deepEqual( Stem("friendless"), "friendless");});
test("friendliest -> friendliest", function() {deepEqual( Stem("friendliest"), "friendliest");});
test("friendliness -> friendli", function() {deepEqual( Stem("friendliness"), "friendli");});
test("friendly -> friend", function() {deepEqual( Stem("friendly"), "friend");});
test("friends -> friend", function() {deepEqual( Stem("friends"), "friend");});
test("friendship -> friendship", function() {deepEqual( Stem("friendship"), "friendship");});
test("friendships -> friendship", function() {deepEqual( Stem("friendships"), "friendship");});
test("frigate -> frigat", function() {deepEqual( Stem("frigate"), "frigat");});
test("fright -> fright", function() {deepEqual( Stem("fright"), "fright");});
test("frighten -> frighten", function() {deepEqual( Stem("frighten"), "frighten");});
test("frightened -> frighten", function() {deepEqual( Stem("frightened"), "frighten");});
test("frightening -> frighten", function() {deepEqual( Stem("frightening"), "frighten");});
test("frightens -> frighten", function() {deepEqual( Stem("frightens"), "frighten");});
test("frightful -> fright", function() {deepEqual( Stem("frightful"), "fright");});
test("frightfully -> fright", function() {deepEqual( Stem("frightfully"), "fright");});
test("frights -> fright", function() {deepEqual( Stem("frights"), "fright");});
test("frigid -> frigid", function() {deepEqual( Stem("frigid"), "frigid");});
test("frigidity -> frigid", function() {deepEqual( Stem("frigidity"), "frigid");});
test("frill -> frill", function() {deepEqual( Stem("frill"), "frill");});
test("frilled -> frill", function() {deepEqual( Stem("frilled"), "frill");});
test("frills -> frill", function() {deepEqual( Stem("frills"), "frill");});
test("fringe -> fring", function() {deepEqual( Stem("fringe"), "fring");});
test("fringed -> fring", function() {deepEqual( Stem("fringed"), "fring");});
test("fringes -> fring", function() {deepEqual( Stem("fringes"), "fring");});
test("fringing -> fring", function() {deepEqual( Stem("fringing"), "fring");});
test("frio -> frio", function() {deepEqual( Stem("frio"), "frio");});
test("frippery -> fripperi", function() {deepEqual( Stem("frippery"), "fripperi");});
test("frisk -> frisk", function() {deepEqual( Stem("frisk"), "frisk");});
test("frisking -> frisk", function() {deepEqual( Stem("frisking"), "frisk");});
test("friths -> frith", function() {deepEqual( Stem("friths"), "frith");});
test("fritter -> fritter", function() {deepEqual( Stem("fritter"), "fritter");});
test("frittered -> fritter", function() {deepEqual( Stem("frittered"), "fritter");});
test("frivolities -> frivol", function() {deepEqual( Stem("frivolities"), "frivol");});
test("frivolity -> frivol", function() {deepEqual( Stem("frivolity"), "frivol");});
test("frivolous -> frivol", function() {deepEqual( Stem("frivolous"), "frivol");});
test("frizzling -> frizzl", function() {deepEqual( Stem("frizzling"), "frizzl");});
test("fro -> fro", function() {deepEqual( Stem("fro"), "fro");});
test("frock -> frock", function() {deepEqual( Stem("frock"), "frock");});
test("frocks -> frock", function() {deepEqual( Stem("frocks"), "frock");});
test("frog -> frog", function() {deepEqual( Stem("frog"), "frog");});
test("frogs -> frog", function() {deepEqual( Stem("frogs"), "frog");});
test("frolic -> frolic", function() {deepEqual( Stem("frolic"), "frolic");});
test("frolics -> frolic", function() {deepEqual( Stem("frolics"), "frolic");});
test("frolicsome -> frolicsom", function() {deepEqual( Stem("frolicsome"), "frolicsom");});
test("from -> from", function() {deepEqual( Stem("from"), "from");});
test("frond -> frond", function() {deepEqual( Stem("frond"), "frond");});
test("fronds -> frond", function() {deepEqual( Stem("fronds"), "frond");});
test("front -> front", function() {deepEqual( Stem("front"), "front");});
test("fronte -> front", function() {deepEqual( Stem("fronte"), "front");});
test("fronted -> front", function() {deepEqual( Stem("fronted"), "front");});
test("frontier -> frontier", function() {deepEqual( Stem("frontier"), "frontier");});
test("fronting -> front", function() {deepEqual( Stem("fronting"), "front");});
test("frontispiece -> frontispiec", function() {deepEqual( Stem("frontispiece"), "frontispiec");});
test("fronts -> front", function() {deepEqual( Stem("fronts"), "front");});
test("frost -> frost", function() {deepEqual( Stem("frost"), "frost");});
test("frosted -> frost", function() {deepEqual( Stem("frosted"), "frost");});
test("frosts -> frost", function() {deepEqual( Stem("frosts"), "frost");});
test("frosty -> frosti", function() {deepEqual( Stem("frosty"), "frosti");});
test("froth -> froth", function() {deepEqual( Stem("froth"), "froth");});
test("frothed -> froth", function() {deepEqual( Stem("frothed"), "froth");});
test("frothy -> frothi", function() {deepEqual( Stem("frothy"), "frothi");});
test("frouzy -> frouzi", function() {deepEqual( Stem("frouzy"), "frouzi");});
test("frown -> frown", function() {deepEqual( Stem("frown"), "frown");});
test("frowned -> frown", function() {deepEqual( Stem("frowned"), "frown");});
test("frowning -> frown", function() {deepEqual( Stem("frowning"), "frown");});
test("frowns -> frown", function() {deepEqual( Stem("frowns"), "frown");});
test("frowsy -> frowsi", function() {deepEqual( Stem("frowsy"), "frowsi");});
test("froze -> froze", function() {deepEqual( Stem("froze"), "froze");});
test("frozen -> frozen", function() {deepEqual( Stem("frozen"), "frozen");});
test("fructifying -> fructifi", function() {deepEqual( Stem("fructifying"), "fructifi");});
test("frugal -> frugal", function() {deepEqual( Stem("frugal"), "frugal");});
test("frugality -> frugal", function() {deepEqual( Stem("frugality"), "frugal");});
test("fruit -> fruit", function() {deepEqual( Stem("fruit"), "fruit");});
test("fruitful -> fruit", function() {deepEqual( Stem("fruitful"), "fruit");});
test("fruitless -> fruitless", function() {deepEqual( Stem("fruitless"), "fruitless");});
test("fruitlessly -> fruitless", function() {deepEqual( Stem("fruitlessly"), "fruitless");});
test("fruits -> fruit", function() {deepEqual( Stem("fruits"), "fruit");});
test("frusta -> frusta", function() {deepEqual( Stem("frusta"), "frusta");});
test("fry -> fri", function() {deepEqual( Stem("fry"), "fri");});
test("frying -> fri", function() {deepEqual( Stem("frying"), "fri");});
test("fuchsia -> fuchsia", function() {deepEqual( Stem("fuchsia"), "fuchsia");});
test("fucus -> fucus", function() {deepEqual( Stem("fucus"), "fucus");});
test("fuddled -> fuddl", function() {deepEqual( Stem("fuddled"), "fuddl");});
test("fuega -> fuega", function() {deepEqual( Stem("fuega"), "fuega");});
test("fuegia -> fuegia", function() {deepEqual( Stem("fuegia"), "fuegia");});
test("fuegian -> fuegian", function() {deepEqual( Stem("fuegian"), "fuegian");});
test("fuegians -> fuegian", function() {deepEqual( Stem("fuegians"), "fuegian");});
test("fuego -> fuego", function() {deepEqual( Stem("fuego"), "fuego");});
test("fuel -> fuel", function() {deepEqual( Stem("fuel"), "fuel");});
test("fuentes -> fuent", function() {deepEqual( Stem("fuentes"), "fuent");});
test("fuffy -> fuffi", function() {deepEqual( Stem("fuffy"), "fuffi");});
test("fugitive -> fugit", function() {deepEqual( Stem("fugitive"), "fugit");});
test("fugitives -> fugit", function() {deepEqual( Stem("fugitives"), "fugit");});
test("fulcrum -> fulcrum", function() {deepEqual( Stem("fulcrum"), "fulcrum");});
test("fule -> fule", function() {deepEqual( Stem("fule"), "fule");});
test("fulfil -> fulfil", function() {deepEqual( Stem("fulfil"), "fulfil");});
test("fulfilled -> fulfil", function() {deepEqual( Stem("fulfilled"), "fulfil");});
test("fulfilling -> fulfil", function() {deepEqual( Stem("fulfilling"), "fulfil");});
test("fulfilment -> fulfil", function() {deepEqual( Stem("fulfilment"), "fulfil");});
test("fulgurites -> fulgurit", function() {deepEqual( Stem("fulgurites"), "fulgurit");});
test("fulils -> fulil", function() {deepEqual( Stem("fulils"), "fulil");});
test("full -> full", function() {deepEqual( Stem("full"), "full");});
test("fuller -> fuller", function() {deepEqual( Stem("fuller"), "fuller");});
test("fullest -> fullest", function() {deepEqual( Stem("fullest"), "fullest");});
test("fullness -> full", function() {deepEqual( Stem("fullness"), "full");});
test("fully -> fulli", function() {deepEqual( Stem("fully"), "fulli");});
test("fulness -> ful", function() {deepEqual( Stem("fulness"), "ful");});
test("fulvipes -> fulvip", function() {deepEqual( Stem("fulvipes"), "fulvip");});
test("fumbled -> fumbl", function() {deepEqual( Stem("fumbled"), "fumbl");});
test("fumbling -> fumbl", function() {deepEqual( Stem("fumbling"), "fumbl");});
test("fume -> fume", function() {deepEqual( Stem("fume"), "fume");});
test("fumed -> fume", function() {deepEqual( Stem("fumed"), "fume");});
test("fumes -> fume", function() {deepEqual( Stem("fumes"), "fume");});
test("fumigation -> fumig", function() {deepEqual( Stem("fumigation"), "fumig");});
test("fuming -> fume", function() {deepEqual( Stem("fuming"), "fume");});
test("fun -> fun", function() {deepEqual( Stem("fun"), "fun");});
test("function -> function", function() {deepEqual( Stem("function"), "function");});
test("functionary -> functionari", function() {deepEqual( Stem("functionary"), "functionari");});
test("functions -> function", function() {deepEqual( Stem("functions"), "function");});
test("fund -> fund", function() {deepEqual( Stem("fund"), "fund");});
test("fundamental -> fundament", function() {deepEqual( Stem("fundamental"), "fundament");});
test("fundamentally -> fundament", function() {deepEqual( Stem("fundamentally"), "fundament");});
test("funds -> fund", function() {deepEqual( Stem("funds"), "fund");});
test("funebre -> funebr", function() {deepEqual( Stem("funebre"), "funebr");});
test("funeral -> funer", function() {deepEqual( Stem("funeral"), "funer");});
test("funerals -> funer", function() {deepEqual( Stem("funerals"), "funer");});
test("funereal -> funer", function() {deepEqual( Stem("funereal"), "funer");});
test("fungi -> fungi", function() {deepEqual( Stem("fungi"), "fungi");});
test("fungus -> fungus", function() {deepEqual( Stem("fungus"), "fungus");});
test("funk -> funk", function() {deepEqual( Stem("funk"), "funk");});
test("funnel -> funnel", function() {deepEqual( Stem("funnel"), "funnel");});
test("funniest -> funniest", function() {deepEqual( Stem("funniest"), "funniest");});
test("funny -> funni", function() {deepEqual( Stem("funny"), "funni");});
test("fur -> fur", function() {deepEqual( Stem("fur"), "fur");});
test("furbished -> furbish", function() {deepEqual( Stem("furbished"), "furbish");});
test("furder -> furder", function() {deepEqual( Stem("furder"), "furder");});
test("furies -> furi", function() {deepEqual( Stem("furies"), "furi");});
test("furious -> furious", function() {deepEqual( Stem("furious"), "furious");});
test("furiously -> furious", function() {deepEqual( Stem("furiously"), "furious");});
test("furlongs -> furlong", function() {deepEqual( Stem("furlongs"), "furlong");});
test("furnace -> furnac", function() {deepEqual( Stem("furnace"), "furnac");});
test("furnaces -> furnac", function() {deepEqual( Stem("furnaces"), "furnac");});
test("furnarius -> furnarius", function() {deepEqual( Stem("furnarius"), "furnarius");});
test("furnish -> furnish", function() {deepEqual( Stem("furnish"), "furnish");});
test("furnished -> furnish", function() {deepEqual( Stem("furnished"), "furnish");});
test("furnishes -> furnish", function() {deepEqual( Stem("furnishes"), "furnish");});
test("furnishing -> furnish", function() {deepEqual( Stem("furnishing"), "furnish");});
test("furniter -> furnit", function() {deepEqual( Stem("furniter"), "furnit");});
test("furniture -> furnitur", function() {deepEqual( Stem("furniture"), "furnitur");});
test("furrowed -> furrow", function() {deepEqual( Stem("furrowed"), "furrow");});
test("furrows -> furrow", function() {deepEqual( Stem("furrows"), "furrow");});
test("furry -> furri", function() {deepEqual( Stem("furry"), "furri");});
test("furs -> fur", function() {deepEqual( Stem("furs"), "fur");});
test("further -> further", function() {deepEqual( Stem("further"), "further");});
test("furtherance -> further", function() {deepEqual( Stem("furtherance"), "further");});
test("furthermore -> furthermor", function() {deepEqual( Stem("furthermore"), "furthermor");});
test("furthest -> furthest", function() {deepEqual( Stem("furthest"), "furthest");});
test("furtive -> furtiv", function() {deepEqual( Stem("furtive"), "furtiv");});
test("furtively -> furtiv", function() {deepEqual( Stem("furtively"), "furtiv");});
test("fury -> furi", function() {deepEqual( Stem("fury"), "furi");});
test("furze -> furz", function() {deepEqual( Stem("furze"), "furz");});
test("fuse -> fuse", function() {deepEqual( Stem("fuse"), "fuse");});
test("fused -> fuse", function() {deepEqual( Stem("fused"), "fuse");});
test("fusibility -> fusibl", function() {deepEqual( Stem("fusibility"), "fusibl");});
test("fuss -> fuss", function() {deepEqual( Stem("fuss"), "fuss");});
test("fussily -> fussili", function() {deepEqual( Stem("fussily"), "fussili");});
test("fussy -> fussi", function() {deepEqual( Stem("fussy"), "fussi");});
test("fust -> fust", function() {deepEqual( Stem("fust"), "fust");});
test("fustian -> fustian", function() {deepEqual( Stem("fustian"), "fustian");});
test("futile -> futil", function() {deepEqual( Stem("futile"), "futil");});
test("futur -> futur", function() {deepEqual( Stem("futur"), "futur");});
test("future -> futur", function() {deepEqual( Stem("future"), "futur");});
test("futures -> futur", function() {deepEqual( Stem("futures"), "futur");});
test("fyodor -> fyodor", function() {deepEqual( Stem("fyodor"), "fyodor");});
test("fyodorovna -> fyodorovna", function() {deepEqual( Stem("fyodorovna"), "fyodorovna");});
test("fypunnote -> fypunnot", function() {deepEqual( Stem("fypunnote"), "fypunnot");});
test("g -> g", function() {deepEqual( Stem("g"), "g");});
test("ga -> ga", function() {deepEqual( Stem("ga"), "ga");});
test("gab -> gab", function() {deepEqual( Stem("gab"), "gab");});
test("gabble -> gabbl", function() {deepEqual( Stem("gabble"), "gabbl");});
test("gabbled -> gabbl", function() {deepEqual( Stem("gabbled"), "gabbl");});
test("gable -> gabl", function() {deepEqual( Stem("gable"), "gabl");});
test("gables -> gabl", function() {deepEqual( Stem("gables"), "gabl");});
test("gad -> gad", function() {deepEqual( Stem("gad"), "gad");});
test("gadfly -> gadfli", function() {deepEqual( Stem("gadfly"), "gadfli");});
test("gadzooks -> gadzook", function() {deepEqual( Stem("gadzooks"), "gadzook");});
test("gags -> gag", function() {deepEqual( Stem("gags"), "gag");});
test("gaieties -> gaieti", function() {deepEqual( Stem("gaieties"), "gaieti");});
test("gaiety -> gaieti", function() {deepEqual( Stem("gaiety"), "gaieti");});
test("gaily -> gaili", function() {deepEqual( Stem("gaily"), "gaili");});
test("gaimard -> gaimard", function() {deepEqual( Stem("gaimard"), "gaimard");});
test("gain -> gain", function() {deepEqual( Stem("gain"), "gain");});
test("gained -> gain", function() {deepEqual( Stem("gained"), "gain");});
test("gainer -> gainer", function() {deepEqual( Stem("gainer"), "gainer");});
test("gaining -> gain", function() {deepEqual( Stem("gaining"), "gain");});
test("gains -> gain", function() {deepEqual( Stem("gains"), "gain");});
test("gainsaid -> gainsaid", function() {deepEqual( Stem("gainsaid"), "gainsaid");});
test("gainsay -> gainsay", function() {deepEqual( Stem("gainsay"), "gainsay");});
test("gainsaying -> gainsay", function() {deepEqual( Stem("gainsaying"), "gainsay");});
test("gait -> gait", function() {deepEqual( Stem("gait"), "gait");});
test("gaiters -> gaiter", function() {deepEqual( Stem("gaiters"), "gaiter");});
test("gal -> gal", function() {deepEqual( Stem("gal"), "gal");});
test("gala -> gala", function() {deepEqual( Stem("gala"), "gala");});
test("galapageian -> galapageian", function() {deepEqual( Stem("galapageian"), "galapageian");});
test("galapagoensis -> galapagoensi", function() {deepEqual( Stem("galapagoensis"), "galapagoensi");});
test("galapagos -> galapago", function() {deepEqual( Stem("galapagos"), "galapago");});
test("galaxy -> galaxi", function() {deepEqual( Stem("galaxy"), "galaxi");});
test("gale -> gale", function() {deepEqual( Stem("gale"), "gale");});
test("gales -> gale", function() {deepEqual( Stem("gales"), "gale");});
test("gall -> gall", function() {deepEqual( Stem("gall"), "gall");});
test("gallanbile -> gallanbil", function() {deepEqual( Stem("gallanbile"), "gallanbil");});
test("gallant -> gallant", function() {deepEqual( Stem("gallant"), "gallant");});
test("gallantly -> gallant", function() {deepEqual( Stem("gallantly"), "gallant");});
test("gallantries -> gallantri", function() {deepEqual( Stem("gallantries"), "gallantri");});
test("gallantry -> gallantri", function() {deepEqual( Stem("gallantry"), "gallantri");});
test("gallants -> gallant", function() {deepEqual( Stem("gallants"), "gallant");});
test("galled -> gall", function() {deepEqual( Stem("galled"), "gall");});
test("gallegos -> gallego", function() {deepEqual( Stem("gallegos"), "gallego");});
test("galleries -> galleri", function() {deepEqual( Stem("galleries"), "galleri");});
test("gallery -> galleri", function() {deepEqual( Stem("gallery"), "galleri");});
test("galley -> galley", function() {deepEqual( Stem("galley"), "galley");});
test("galleys -> galley", function() {deepEqual( Stem("galleys"), "galley");});
test("gallinaceous -> gallinac", function() {deepEqual( Stem("gallinaceous"), "gallinac");});
test("gallinazo -> gallinazo", function() {deepEqual( Stem("gallinazo"), "gallinazo");});
test("gallinazos -> gallinazo", function() {deepEqual( Stem("gallinazos"), "gallinazo");});
test("galling -> gall", function() {deepEqual( Stem("galling"), "gall");});
test("gallivanting -> galliv", function() {deepEqual( Stem("gallivanting"), "galliv");});
test("gallon -> gallon", function() {deepEqual( Stem("gallon"), "gallon");});
test("gallons -> gallon", function() {deepEqual( Stem("gallons"), "gallon");});
test("gallop -> gallop", function() {deepEqual( Stem("gallop"), "gallop");});
test("galloped -> gallop", function() {deepEqual( Stem("galloped"), "gallop");});
test("galloping -> gallop", function() {deepEqual( Stem("galloping"), "gallop");});
test("gallops -> gallop", function() {deepEqual( Stem("gallops"), "gallop");});
test("gallows -> gallow", function() {deepEqual( Stem("gallows"), "gallow");});
test("gals -> gal", function() {deepEqual( Stem("gals"), "gal");});
test("galvanism -> galvan", function() {deepEqual( Stem("galvanism"), "galvan");});
test("gambier -> gambier", function() {deepEqual( Stem("gambier"), "gambier");});
test("gamble -> gambl", function() {deepEqual( Stem("gamble"), "gambl");});
test("gambled -> gambl", function() {deepEqual( Stem("gambled"), "gambl");});
test("gambler -> gambler", function() {deepEqual( Stem("gambler"), "gambler");});
test("gamblers -> gambler", function() {deepEqual( Stem("gamblers"), "gambler");});
test("gambles -> gambl", function() {deepEqual( Stem("gambles"), "gambl");});
test("gambling -> gambl", function() {deepEqual( Stem("gambling"), "gambl");});
test("gambolling -> gambol", function() {deepEqual( Stem("gambolling"), "gambol");});
test("gambrinus -> gambrinus", function() {deepEqual( Stem("gambrinus"), "gambrinus");});
test("game -> game", function() {deepEqual( Stem("game"), "game");});
test("gamekeepers -> gamekeep", function() {deepEqual( Stem("gamekeepers"), "gamekeep");});
test("games -> game", function() {deepEqual( Stem("games"), "game");});
test("gamester -> gamest", function() {deepEqual( Stem("gamester"), "gamest");});
test("gamesters -> gamest", function() {deepEqual( Stem("gamesters"), "gamest");});
test("gaming -> game", function() {deepEqual( Stem("gaming"), "game");});
test("gammon -> gammon", function() {deepEqual( Stem("gammon"), "gammon");});
test("gammoning -> gammon", function() {deepEqual( Stem("gammoning"), "gammon");});
test("gamut -> gamut", function() {deepEqual( Stem("gamut"), "gamut");});
test("gander -> gander", function() {deepEqual( Stem("gander"), "gander");});
test("gane -> gane", function() {deepEqual( Stem("gane"), "gane");});
test("gang -> gang", function() {deepEqual( Stem("gang"), "gang");});
test("ganges -> gang", function() {deepEqual( Stem("ganges"), "gang");});
test("ganging -> gang", function() {deepEqual( Stem("ganging"), "gang");});
test("ganglion -> ganglion", function() {deepEqual( Stem("ganglion"), "ganglion");});
test("gangs -> gang", function() {deepEqual( Stem("gangs"), "gang");});
test("gangway -> gangway", function() {deepEqual( Stem("gangway"), "gangway");});
test("gannet -> gannet", function() {deepEqual( Stem("gannet"), "gannet");});
test("gannets -> gannet", function() {deepEqual( Stem("gannets"), "gannet");});
test("ganz -> ganz", function() {deepEqual( Stem("ganz"), "ganz");});
test("gap -> gap", function() {deepEqual( Stem("gap"), "gap");});
test("gape -> gape", function() {deepEqual( Stem("gape"), "gape");});
test("gaped -> gape", function() {deepEqual( Stem("gaped"), "gape");});
test("gapes -> gape", function() {deepEqual( Stem("gapes"), "gape");});
test("gaping -> gape", function() {deepEqual( Stem("gaping"), "gape");});
test("gaps -> gap", function() {deepEqual( Stem("gaps"), "gap");});
test("gar -> gar", function() {deepEqual( Stem("gar"), "gar");});
test("garb -> garb", function() {deepEqual( Stem("garb"), "garb");});
test("garbled -> garbl", function() {deepEqual( Stem("garbled"), "garbl");});
test("garbs -> garb", function() {deepEqual( Stem("garbs"), "garb");});
test("garde -> gard", function() {deepEqual( Stem("garde"), "gard");});
test("garden -> garden", function() {deepEqual( Stem("garden"), "garden");});
test("gardener -> garden", function() {deepEqual( Stem("gardener"), "garden");});
test("gardeners -> garden", function() {deepEqual( Stem("gardeners"), "garden");});
test("gardening -> garden", function() {deepEqual( Stem("gardening"), "garden");});
test("gardens -> garden", function() {deepEqual( Stem("gardens"), "garden");});
test("gardner -> gardner", function() {deepEqual( Stem("gardner"), "gardner");});
test("gardners -> gardner", function() {deepEqual( Stem("gardners"), "gardner");});
test("garish -> garish", function() {deepEqual( Stem("garish"), "garish");});
test("garland -> garland", function() {deepEqual( Stem("garland"), "garland");});
test("garlanded -> garland", function() {deepEqual( Stem("garlanded"), "garland");});
test("garlands -> garland", function() {deepEqual( Stem("garlands"), "garland");});
test("garment -> garment", function() {deepEqual( Stem("garment"), "garment");});
test("garments -> garment", function() {deepEqual( Stem("garments"), "garment");});
test("garnet -> garnet", function() {deepEqual( Stem("garnet"), "garnet");});
test("garnett -> garnett", function() {deepEqual( Stem("garnett"), "garnett");});
test("garnish -> garnish", function() {deepEqual( Stem("garnish"), "garnish");});
test("garnished -> garnish", function() {deepEqual( Stem("garnished"), "garnish");});
test("garnishing -> garnish", function() {deepEqual( Stem("garnishing"), "garnish");});
test("garniture -> garnitur", function() {deepEqual( Stem("garniture"), "garnitur");});
test("garran -> garran", function() {deepEqual( Stem("garran"), "garran");});
test("garret -> garret", function() {deepEqual( Stem("garret"), "garret");});
test("garrets -> garret", function() {deepEqual( Stem("garrets"), "garret");});
test("garrison -> garrison", function() {deepEqual( Stem("garrison"), "garrison");});
test("garter -> garter", function() {deepEqual( Stem("garter"), "garter");});
test("gartered -> garter", function() {deepEqual( Stem("gartered"), "garter");});
test("garters -> garter", function() {deepEqual( Stem("garters"), "garter");});
test("garth -> garth", function() {deepEqual( Stem("garth"), "garth");});
test("garthers -> garther", function() {deepEqual( Stem("garthers"), "garther");});
test("gas -> gas", function() {deepEqual( Stem("gas"), "gas");});
test("gases -> gase", function() {deepEqual( Stem("gases"), "gase");});
test("gash -> gash", function() {deepEqual( Stem("gash"), "gash");});
test("gashed -> gash", function() {deepEqual( Stem("gashed"), "gash");});
test("gaslights -> gaslight", function() {deepEqual( Stem("gaslights"), "gaslight");});
test("gasp -> gasp", function() {deepEqual( Stem("gasp"), "gasp");});
test("gasped -> gasp", function() {deepEqual( Stem("gasped"), "gasp");});
test("gasping -> gasp", function() {deepEqual( Stem("gasping"), "gasp");});
test("gaspingly -> gasp", function() {deepEqual( Stem("gaspingly"), "gasp");});
test("gasps -> gasp", function() {deepEqual( Stem("gasps"), "gasp");});
test("gate -> gate", function() {deepEqual( Stem("gate"), "gate");});
test("gates -> gate", function() {deepEqual( Stem("gates"), "gate");});
test("gateway -> gateway", function() {deepEqual( Stem("gateway"), "gateway");});
test("gateways -> gateway", function() {deepEqual( Stem("gateways"), "gateway");});
test("gather -> gather", function() {deepEqual( Stem("gather"), "gather");});
test("gathered -> gather", function() {deepEqual( Stem("gathered"), "gather");});
test("gatherer -> gather", function() {deepEqual( Stem("gatherer"), "gather");});
test("gatherers -> gather", function() {deepEqual( Stem("gatherers"), "gather");});
test("gathering -> gather", function() {deepEqual( Stem("gathering"), "gather");});
test("gatherings -> gather", function() {deepEqual( Stem("gatherings"), "gather");});
test("gatherlng -> gatherlng", function() {deepEqual( Stem("gatherlng"), "gatherlng");});
test("gathers -> gather", function() {deepEqual( Stem("gathers"), "gather");});
test("gatherum -> gatherum", function() {deepEqual( Stem("gatherum"), "gatherum");});
test("gato -> gato", function() {deepEqual( Stem("gato"), "gato");});
test("gauch -> gauch", function() {deepEqual( Stem("gauch"), "gauch");});
test("gaucho -> gaucho", function() {deepEqual( Stem("gaucho"), "gaucho");});
test("gauchos -> gaucho", function() {deepEqual( Stem("gauchos"), "gaucho");});
test("gaudiest -> gaudiest", function() {deepEqual( Stem("gaudiest"), "gaudiest");});
test("gaudy -> gaudi", function() {deepEqual( Stem("gaudy"), "gaudi");});
test("gaul -> gaul", function() {deepEqual( Stem("gaul"), "gaul");});
test("gaunt -> gaunt", function() {deepEqual( Stem("gaunt"), "gaunt");});
test("gauntlet -> gauntlet", function() {deepEqual( Stem("gauntlet"), "gauntlet");});
test("gauntlets -> gauntlet", function() {deepEqual( Stem("gauntlets"), "gauntlet");});
test("gauntly -> gaunt", function() {deepEqual( Stem("gauntly"), "gaunt");});
test("gauze -> gauz", function() {deepEqual( Stem("gauze"), "gauz");});
test("gauzy -> gauzi", function() {deepEqual( Stem("gauzy"), "gauzi");});
test("gave -> gave", function() {deepEqual( Stem("gave"), "gave");});
test("gavia -> gavia", function() {deepEqual( Stem("gavia"), "gavia");});
test("gawky -> gawki", function() {deepEqual( Stem("gawky"), "gawki");});
test("gay -> gay", function() {deepEqual( Stem("gay"), "gay");});
test("gayest -> gayest", function() {deepEqual( Stem("gayest"), "gayest");});
test("gaze -> gaze", function() {deepEqual( Stem("gaze"), "gaze");});
test("gazed -> gaze", function() {deepEqual( Stem("gazed"), "gaze");});
test("gazelle -> gazell", function() {deepEqual( Stem("gazelle"), "gazell");});
test("gazelles -> gazell", function() {deepEqual( Stem("gazelles"), "gazell");});
test("gazes -> gaze", function() {deepEqual( Stem("gazes"), "gaze");});
test("gazette -> gazett", function() {deepEqual( Stem("gazette"), "gazett");});
test("gazing -> gaze", function() {deepEqual( Stem("gazing"), "gaze");});
test("gazingi -> gazingi", function() {deepEqual( Stem("gazingi"), "gazingi");});
test("gear -> gear", function() {deepEqual( Stem("gear"), "gear");});
test("geese -> gees", function() {deepEqual( Stem("geese"), "gees");});
test("geist -> geist", function() {deepEqual( Stem("geist"), "geist");});
test("gelatinous -> gelatin", function() {deepEqual( Stem("gelatinous"), "gelatin");});
test("gem -> gem", function() {deepEqual( Stem("gem"), "gem");});
test("gemmules -> gemmul", function() {deepEqual( Stem("gemmules"), "gemmul");});
test("gen -> gen", function() {deepEqual( Stem("gen"), "gen");});
test("gender -> gender", function() {deepEqual( Stem("gender"), "gender");});
test("genealogical -> genealog", function() {deepEqual( Stem("genealogical"), "genealog");});
test("genealogist -> genealogist", function() {deepEqual( Stem("genealogist"), "genealogist");});
test("genelman -> genelman", function() {deepEqual( Stem("genelman"), "genelman");});
test("genelmen -> genelmen", function() {deepEqual( Stem("genelmen"), "genelmen");});
test("genera -> genera", function() {deepEqual( Stem("genera"), "genera");});
test("general -> general", function() {deepEqual( Stem("general"), "general");});
test("generalities -> general", function() {deepEqual( Stem("generalities"), "general");});
test("generality -> general", function() {deepEqual( Stem("generality"), "general");});
test("generalization -> general", function() {deepEqual( Stem("generalization"), "general");});
test("generally -> general", function() {deepEqual( Stem("generally"), "general");});
test("generals -> general", function() {deepEqual( Stem("generals"), "general");});
test("generalship -> generalship", function() {deepEqual( Stem("generalship"), "generalship");});
test("generate -> generat", function() {deepEqual( Stem("generate"), "generat");});
test("generated -> generat", function() {deepEqual( Stem("generated"), "generat");});
test("generation -> generat", function() {deepEqual( Stem("generation"), "generat");});
test("generations -> generat", function() {deepEqual( Stem("generations"), "generat");});
test("generic -> generic", function() {deepEqual( Stem("generic"), "generic");});
test("generosity -> generos", function() {deepEqual( Stem("generosity"), "generos");});
test("generous -> generous", function() {deepEqual( Stem("generous"), "generous");});
test("generously -> generous", function() {deepEqual( Stem("generously"), "generous");});
test("genesis -> genesi", function() {deepEqual( Stem("genesis"), "genesi");});
test("geneva -> geneva", function() {deepEqual( Stem("geneva"), "geneva");});
test("genfleman -> genfleman", function() {deepEqual( Stem("genfleman"), "genfleman");});
test("genial -> genial", function() {deepEqual( Stem("genial"), "genial");});
test("genially -> genial", function() {deepEqual( Stem("genially"), "genial");});
test("genie -> geni", function() {deepEqual( Stem("genie"), "geni");});
test("genius -> genius", function() {deepEqual( Stem("genius"), "genius");});
test("geniuses -> genius", function() {deepEqual( Stem("geniuses"), "genius");});
test("genlmen -> genlmen", function() {deepEqual( Stem("genlmen"), "genlmen");});
test("genlmn -> genlmn", function() {deepEqual( Stem("genlmn"), "genlmn");});
test("genteel -> genteel", function() {deepEqual( Stem("genteel"), "genteel");});
test("genteelest -> genteelest", function() {deepEqual( Stem("genteelest"), "genteelest");});
test("genteelly -> genteelli", function() {deepEqual( Stem("genteelly"), "genteelli");});
test("gentile -> gentil", function() {deepEqual( Stem("gentile"), "gentil");});
test("gentility -> gentil", function() {deepEqual( Stem("gentility"), "gentil");});
test("gentle -> gentl", function() {deepEqual( Stem("gentle"), "gentl");});
test("gentlefolk -> gentlefolk", function() {deepEqual( Stem("gentlefolk"), "gentlefolk");});
test("gentlefolks -> gentlefolk", function() {deepEqual( Stem("gentlefolks"), "gentlefolk");});
test("gentlema -> gentlema", function() {deepEqual( Stem("gentlema"), "gentlema");});
test("gentleman -> gentleman", function() {deepEqual( Stem("gentleman"), "gentleman");});
test("gentlemanlike -> gentlemanlik", function() {deepEqual( Stem("gentlemanlike"), "gentlemanlik");});
test("gentlemanly -> gentleman", function() {deepEqual( Stem("gentlemanly"), "gentleman");});
test("gentlemen -> gentlemen", function() {deepEqual( Stem("gentlemen"), "gentlemen");});
test("gentleness -> gentl", function() {deepEqual( Stem("gentleness"), "gentl");});
test("gentler -> gentler", function() {deepEqual( Stem("gentler"), "gentler");});
test("gentlest -> gentlest", function() {deepEqual( Stem("gentlest"), "gentlest");});
test("gentlewoman -> gentlewoman", function() {deepEqual( Stem("gentlewoman"), "gentlewoman");});
test("gently -> gentl", function() {deepEqual( Stem("gently"), "gentl");});
test("gentry -> gentri", function() {deepEqual( Stem("gentry"), "gentri");});
test("genuine -> genuin", function() {deepEqual( Stem("genuine"), "genuin");});
test("genuinely -> genuin", function() {deepEqual( Stem("genuinely"), "genuin");});
test("genus -> genus", function() {deepEqual( Stem("genus"), "genus");});
test("geoffroi -> geoffroi", function() {deepEqual( Stem("geoffroi"), "geoffroi");});
test("geoffroy -> geoffroy", function() {deepEqual( Stem("geoffroy"), "geoffroy");});
test("geograph -> geograph", function() {deepEqual( Stem("geograph"), "geograph");});
test("geographer -> geograph", function() {deepEqual( Stem("geographer"), "geograph");});
test("geographica -> geographica", function() {deepEqual( Stem("geographica"), "geographica");});
test("geographical -> geograph", function() {deepEqual( Stem("geographical"), "geograph");});
test("geography -> geographi", function() {deepEqual( Stem("geography"), "geographi");});
test("geolog -> geolog", function() {deepEqual( Stem("geolog"), "geolog");});
test("geological -> geolog", function() {deepEqual( Stem("geological"), "geolog");});
test("geologically -> geolog", function() {deepEqual( Stem("geologically"), "geolog");});
test("geologicas -> geologica", function() {deepEqual( Stem("geologicas"), "geologica");});
test("geologist -> geologist", function() {deepEqual( Stem("geologist"), "geologist");});
test("geologists -> geologist", function() {deepEqual( Stem("geologists"), "geologist");});
test("geologize -> geolog", function() {deepEqual( Stem("geologize"), "geolog");});
test("geologizing -> geolog", function() {deepEqual( Stem("geologizing"), "geolog");});
test("geology -> geolog", function() {deepEqual( Stem("geology"), "geolog");});
test("geometrical -> geometr", function() {deepEqual( Stem("geometrical"), "geometr");});
test("geometry -> geometri", function() {deepEqual( Stem("geometry"), "geometri");});
test("george -> georg", function() {deepEqual( Stem("george"), "georg");});
test("georges -> georg", function() {deepEqual( Stem("georges"), "georg");});
test("georgia -> georgia", function() {deepEqual( Stem("georgia"), "georgia");});
test("georgina -> georgina", function() {deepEqual( Stem("georgina"), "georgina");});
test("geospiza -> geospiza", function() {deepEqual( Stem("geospiza"), "geospiza");});
test("geously -> geousli", function() {deepEqual( Stem("geously"), "geousli");});
test("geraldine -> geraldin", function() {deepEqual( Stem("geraldine"), "geraldin");});
test("geranium -> geranium", function() {deepEqual( Stem("geranium"), "geranium");});
test("geraniums -> geranium", function() {deepEqual( Stem("geraniums"), "geranium");});
test("germ -> germ", function() {deepEqual( Stem("germ"), "germ");});
test("german -> german", function() {deepEqual( Stem("german"), "german");});
test("germans -> german", function() {deepEqual( Stem("germans"), "german");});
test("germany -> germani", function() {deepEqual( Stem("germany"), "germani");});
test("germinating -> germin", function() {deepEqual( Stem("germinating"), "germin");});
test("germs -> germ", function() {deepEqual( Stem("germs"), "germ");});
test("gerous -> gerous", function() {deepEqual( Stem("gerous"), "gerous");});
test("gervais -> gervai", function() {deepEqual( Stem("gervais"), "gervai");});
test("geschichte -> geschicht", function() {deepEqual( Stem("geschichte"), "geschicht");});
test("gesticulating -> gesticul", function() {deepEqual( Stem("gesticulating"), "gesticul");});
test("gesticulations -> gesticul", function() {deepEqual( Stem("gesticulations"), "gesticul");});
test("gesture -> gestur", function() {deepEqual( Stem("gesture"), "gestur");});
test("gestures -> gestur", function() {deepEqual( Stem("gestures"), "gestur");});
test("get -> get", function() {deepEqual( Stem("get"), "get");});
test("gets -> get", function() {deepEqual( Stem("gets"), "get");});
test("getting -> get", function() {deepEqual( Stem("getting"), "get");});
test("gettings -> get", function() {deepEqual( Stem("gettings"), "get");});
test("gewgaws -> gewgaw", function() {deepEqual( Stem("gewgaws"), "gewgaw");});
test("gha -> gha", function() {deepEqual( Stem("gha"), "gha");});
test("ghastlier -> ghastlier", function() {deepEqual( Stem("ghastlier"), "ghastlier");});
test("ghastly -> ghast", function() {deepEqual( Stem("ghastly"), "ghast");});
test("ghirlandajo -> ghirlandajo", function() {deepEqual( Stem("ghirlandajo"), "ghirlandajo");});
test("ghost -> ghost", function() {deepEqual( Stem("ghost"), "ghost");});
test("ghostly -> ghost", function() {deepEqual( Stem("ghostly"), "ghost");});
test("ghosts -> ghost", function() {deepEqual( Stem("ghosts"), "ghost");});
test("ght -> ght", function() {deepEqual( Stem("ght"), "ght");});
test("gi -> gi", function() {deepEqual( Stem("gi"), "gi");});
test("giant -> giant", function() {deepEqual( Stem("giant"), "giant");});
test("giants -> giant", function() {deepEqual( Stem("giants"), "giant");});
test("gibing -> gibe", function() {deepEqual( Stem("gibing"), "gibe");});
test("gibraltar -> gibraltar", function() {deepEqual( Stem("gibraltar"), "gibraltar");});
test("giddily -> giddili", function() {deepEqual( Stem("giddily"), "giddili");});
test("giddiness -> giddi", function() {deepEqual( Stem("giddiness"), "giddi");});
test("giddy -> giddi", function() {deepEqual( Stem("giddy"), "giddi");});
test("gift -> gift", function() {deepEqual( Stem("gift"), "gift");});
test("gifted -> gift", function() {deepEqual( Stem("gifted"), "gift");});
test("gifts -> gift", function() {deepEqual( Stem("gifts"), "gift");});
test("gig -> gig", function() {deepEqual( Stem("gig"), "gig");});
test("gigantea -> gigantea", function() {deepEqual( Stem("gigantea"), "gigantea");});
test("gigantic -> gigant", function() {deepEqual( Stem("gigantic"), "gigant");});
test("gigas -> giga", function() {deepEqual( Stem("gigas"), "giga");});
test("giggle -> giggl", function() {deepEqual( Stem("giggle"), "giggl");});
test("giggled -> giggl", function() {deepEqual( Stem("giggled"), "giggl");});
test("giggles -> giggl", function() {deepEqual( Stem("giggles"), "giggl");});
test("giggling -> giggl", function() {deepEqual( Stem("giggling"), "giggl");});
test("gild -> gild", function() {deepEqual( Stem("gild"), "gild");});
test("gilded -> gild", function() {deepEqual( Stem("gilded"), "gild");});
test("gilding -> gild", function() {deepEqual( Stem("gilding"), "gild");});
test("gilds -> gild", function() {deepEqual( Stem("gilds"), "gild");});
test("giles -> gile", function() {deepEqual( Stem("giles"), "gile");});
test("gill -> gill", function() {deepEqual( Stem("gill"), "gill");});
test("gillies -> gilli", function() {deepEqual( Stem("gillies"), "gilli");});
test("gillingwater -> gillingwat", function() {deepEqual( Stem("gillingwater"), "gillingwat");});
test("gilt -> gilt", function() {deepEqual( Stem("gilt"), "gilt");});
test("gimlet -> gimlet", function() {deepEqual( Stem("gimlet"), "gimlet");});
test("gimlets -> gimlet", function() {deepEqual( Stem("gimlets"), "gimlet");});
test("gin -> gin", function() {deepEqual( Stem("gin"), "gin");});
test("ginger -> ginger", function() {deepEqual( Stem("ginger"), "ginger");});
test("gingerbread -> gingerbread", function() {deepEqual( Stem("gingerbread"), "gingerbread");});
test("gingery -> gingeri", function() {deepEqual( Stem("gingery"), "gingeri");});
test("gipsy -> gipsi", function() {deepEqual( Stem("gipsy"), "gipsi");});
test("giraffe -> giraff", function() {deepEqual( Stem("giraffe"), "giraff");});
test("giraffes -> giraff", function() {deepEqual( Stem("giraffes"), "giraff");});
test("gird -> gird", function() {deepEqual( Stem("gird"), "gird");});
test("girdle -> girdl", function() {deepEqual( Stem("girdle"), "girdl");});
test("girdled -> girdl", function() {deepEqual( Stem("girdled"), "girdl");});
test("girl -> girl", function() {deepEqual( Stem("girl"), "girl");});
test("girlhood -> girlhood", function() {deepEqual( Stem("girlhood"), "girlhood");});
test("girlish -> girlish", function() {deepEqual( Stem("girlish"), "girlish");});
test("girlishly -> girlish", function() {deepEqual( Stem("girlishly"), "girlish");});
test("girls -> girl", function() {deepEqual( Stem("girls"), "girl");});
test("girt -> girt", function() {deepEqual( Stem("girt"), "girt");});
test("girth -> girth", function() {deepEqual( Stem("girth"), "girth");});
test("girths -> girth", function() {deepEqual( Stem("girths"), "girth");});
test("gist -> gist", function() {deepEqual( Stem("gist"), "gist");});
test("git -> git", function() {deepEqual( Stem("git"), "git");});
test("giuseppe -> giusepp", function() {deepEqual( Stem("giuseppe"), "giusepp");});
test("giv -> giv", function() {deepEqual( Stem("giv"), "giv");});
test("give -> give", function() {deepEqual( Stem("give"), "give");});
test("given -> given", function() {deepEqual( Stem("given"), "given");});
test("giver -> giver", function() {deepEqual( Stem("giver"), "giver");});
test("gives -> give", function() {deepEqual( Stem("gives"), "give");});
test("giving -> give", function() {deepEqual( Stem("giving"), "give");});
test("gizzard -> gizzard", function() {deepEqual( Stem("gizzard"), "gizzard");});
test("gl -> gl", function() {deepEqual( Stem("gl"), "gl");});
test("glacier -> glacier", function() {deepEqual( Stem("glacier"), "glacier");});
test("glaciers -> glacier", function() {deepEqual( Stem("glaciers"), "glacier");});
test("glad -> glad", function() {deepEqual( Stem("glad"), "glad");});
test("gladden -> gladden", function() {deepEqual( Stem("gladden"), "gladden");});
test("gladdened -> gladden", function() {deepEqual( Stem("gladdened"), "gladden");});
test("glades -> glade", function() {deepEqual( Stem("glades"), "glade");});
test("gladiator -> gladiat", function() {deepEqual( Stem("gladiator"), "gladiat");});
test("gladly -> glad", function() {deepEqual( Stem("gladly"), "glad");});
test("gladness -> glad", function() {deepEqual( Stem("gladness"), "glad");});
test("gladsome -> gladsom", function() {deepEqual( Stem("gladsome"), "gladsom");});
test("gladsomeness -> gladsom", function() {deepEqual( Stem("gladsomeness"), "gladsom");});
test("glance -> glanc", function() {deepEqual( Stem("glance"), "glanc");});
test("glanced -> glanc", function() {deepEqual( Stem("glanced"), "glanc");});
test("glances -> glanc", function() {deepEqual( Stem("glances"), "glanc");});
test("glancing -> glanc", function() {deepEqual( Stem("glancing"), "glanc");});
test("glare -> glare", function() {deepEqual( Stem("glare"), "glare");});
test("glared -> glare", function() {deepEqual( Stem("glared"), "glare");});
test("glares -> glare", function() {deepEqual( Stem("glares"), "glare");});
test("glaring -> glare", function() {deepEqual( Stem("glaring"), "glare");});
test("glaringly -> glare", function() {deepEqual( Stem("glaringly"), "glare");});
test("glass -> glass", function() {deepEqual( Stem("glass"), "glass");});
test("glasses -> glass", function() {deepEqual( Stem("glasses"), "glass");});
test("glassful -> glass", function() {deepEqual( Stem("glassful"), "glass");});
test("glassy -> glassi", function() {deepEqual( Stem("glassy"), "glassi");});
test("glavormelly -> glavormelli", function() {deepEqual( Stem("glavormelly"), "glavormelli");});
test("glaze -> glaze", function() {deepEqual( Stem("glaze"), "glaze");});
test("glazed -> glaze", function() {deepEqual( Stem("glazed"), "glaze");});
test("gleam -> gleam", function() {deepEqual( Stem("gleam"), "gleam");});
test("gleamed -> gleam", function() {deepEqual( Stem("gleamed"), "gleam");});
test("gleaming -> gleam", function() {deepEqual( Stem("gleaming"), "gleam");});
test("gleams -> gleam", function() {deepEqual( Stem("gleams"), "gleam");});
test("glean -> glean", function() {deepEqual( Stem("glean"), "glean");});
test("gleaned -> glean", function() {deepEqual( Stem("gleaned"), "glean");});
test("glee -> glee", function() {deepEqual( Stem("glee"), "glee");});
test("gleefully -> gleefulli", function() {deepEqual( Stem("gleefully"), "gleefulli");});
test("gleesome -> gleesom", function() {deepEqual( Stem("gleesome"), "gleesom");});
test("glen -> glen", function() {deepEqual( Stem("glen"), "glen");});
test("glencora -> glencora", function() {deepEqual( Stem("glencora"), "glencora");});
test("glib -> glib", function() {deepEqual( Stem("glib"), "glib");});
test("glide -> glide", function() {deepEqual( Stem("glide"), "glide");});
test("glided -> glide", function() {deepEqual( Stem("glided"), "glide");});
test("glides -> glide", function() {deepEqual( Stem("glides"), "glide");});
test("gliding -> glide", function() {deepEqual( Stem("gliding"), "glide");});
test("glimmer -> glimmer", function() {deepEqual( Stem("glimmer"), "glimmer");});
test("glimmered -> glimmer", function() {deepEqual( Stem("glimmered"), "glimmer");});
test("glimmering -> glimmer", function() {deepEqual( Stem("glimmering"), "glimmer");});
test("glimmerings -> glimmer", function() {deepEqual( Stem("glimmerings"), "glimmer");});
test("glimpse -> glimps", function() {deepEqual( Stem("glimpse"), "glimps");});
test("glimpses -> glimps", function() {deepEqual( Stem("glimpses"), "glimps");});
test("glissez -> glissez", function() {deepEqual( Stem("glissez"), "glissez");});
test("glisten -> glisten", function() {deepEqual( Stem("glisten"), "glisten");});
test("glistened -> glisten", function() {deepEqual( Stem("glistened"), "glisten");});
test("glistening -> glisten", function() {deepEqual( Stem("glistening"), "glisten");});
test("glistens -> glisten", function() {deepEqual( Stem("glistens"), "glisten");});
test("glitter -> glitter", function() {deepEqual( Stem("glitter"), "glitter");});
test("glittered -> glitter", function() {deepEqual( Stem("glittered"), "glitter");});
test("glittering -> glitter", function() {deepEqual( Stem("glittering"), "glitter");});
test("gloated -> gloat", function() {deepEqual( Stem("gloated"), "gloat");});
test("gloating -> gloat", function() {deepEqual( Stem("gloating"), "gloat");});
test("globe -> globe", function() {deepEqual( Stem("globe"), "globe");});
test("globes -> globe", function() {deepEqual( Stem("globes"), "globe");});
test("globular -> globular", function() {deepEqual( Stem("globular"), "globular");});
test("globules -> globul", function() {deepEqual( Stem("globules"), "globul");});
test("glod -> glod", function() {deepEqual( Stem("glod"), "glod");});
test("gloom -> gloom", function() {deepEqual( Stem("gloom"), "gloom");});
test("gloomier -> gloomier", function() {deepEqual( Stem("gloomier"), "gloomier");});
test("gloomily -> gloomili", function() {deepEqual( Stem("gloomily"), "gloomili");});
test("gloominess -> gloomi", function() {deepEqual( Stem("gloominess"), "gloomi");});
test("gloomy -> gloomi", function() {deepEqual( Stem("gloomy"), "gloomi");});
test("gloried -> glori", function() {deepEqual( Stem("gloried"), "glori");});
test("glories -> glori", function() {deepEqual( Stem("glories"), "glori");});
test("glorious -> glorious", function() {deepEqual( Stem("glorious"), "glorious");});
test("glory -> glori", function() {deepEqual( Stem("glory"), "glori");});
test("glorying -> glori", function() {deepEqual( Stem("glorying"), "glori");});
test("gloss -> gloss", function() {deepEqual( Stem("gloss"), "gloss");});
test("glossary -> glossari", function() {deepEqual( Stem("glossary"), "glossari");});
test("glossy -> glossi", function() {deepEqual( Stem("glossy"), "glossi");});
test("gloucester -> gloucest", function() {deepEqual( Stem("gloucester"), "gloucest");});
test("glove -> glove", function() {deepEqual( Stem("glove"), "glove");});
test("gloved -> glove", function() {deepEqual( Stem("gloved"), "glove");});
test("gloves -> glove", function() {deepEqual( Stem("gloves"), "glove");});
test("glow -> glow", function() {deepEqual( Stem("glow"), "glow");});
test("glowed -> glow", function() {deepEqual( Stem("glowed"), "glow");});
test("glowered -> glower", function() {deepEqual( Stem("glowered"), "glower");});
test("glowing -> glow", function() {deepEqual( Stem("glowing"), "glow");});
test("glows -> glow", function() {deepEqual( Stem("glows"), "glow");});
test("glowworm -> glowworm", function() {deepEqual( Stem("glowworm"), "glowworm");});
test("glowworms -> glowworm", function() {deepEqual( Stem("glowworms"), "glowworm");});
test("glue -> glue", function() {deepEqual( Stem("glue"), "glue");});
test("glum -> glum", function() {deepEqual( Stem("glum"), "glum");});
test("glutinous -> glutin", function() {deepEqual( Stem("glutinous"), "glutin");});
test("glutton -> glutton", function() {deepEqual( Stem("glutton"), "glutton");});
test("gluttons -> glutton", function() {deepEqual( Stem("gluttons"), "glutton");});
test("gnarled -> gnarl", function() {deepEqual( Stem("gnarled"), "gnarl");});
test("gnashed -> gnash", function() {deepEqual( Stem("gnashed"), "gnash");});
test("gnashing -> gnash", function() {deepEqual( Stem("gnashing"), "gnash");});
test("gnats -> gnat", function() {deepEqual( Stem("gnats"), "gnat");});
test("gnaw -> gnaw", function() {deepEqual( Stem("gnaw"), "gnaw");});
test("gnawed -> gnaw", function() {deepEqual( Stem("gnawed"), "gnaw");});
test("gnawer -> gnawer", function() {deepEqual( Stem("gnawer"), "gnawer");});
test("gnawers -> gnawer", function() {deepEqual( Stem("gnawers"), "gnawer");});
test("gnawing -> gnaw", function() {deepEqual( Stem("gnawing"), "gnaw");});
test("gneiss -> gneiss", function() {deepEqual( Stem("gneiss"), "gneiss");});
test("gnus -> gnus", function() {deepEqual( Stem("gnus"), "gnus");});
test("go -> go", function() {deepEqual( Stem("go"), "go");});
test("goa -> goa", function() {deepEqual( Stem("goa"), "goa");});
test("goad -> goad", function() {deepEqual( Stem("goad"), "goad");});
test("goaded -> goad", function() {deepEqual( Stem("goaded"), "goad");});
test("goads -> goad", function() {deepEqual( Stem("goads"), "goad");});
test("goal -> goal", function() {deepEqual( Stem("goal"), "goal");});
test("goar -> goar", function() {deepEqual( Stem("goar"), "goar");});
test("goat -> goat", function() {deepEqual( Stem("goat"), "goat");});
test("goatherd -> goatherd", function() {deepEqual( Stem("goatherd"), "goatherd");});
test("goats -> goat", function() {deepEqual( Stem("goats"), "goat");});
test("goatskin -> goatskin", function() {deepEqual( Stem("goatskin"), "goatskin");});
test("goatsucker -> goatsuck", function() {deepEqual( Stem("goatsucker"), "goatsuck");});
test("goblet -> goblet", function() {deepEqual( Stem("goblet"), "goblet");});
test("goblets -> goblet", function() {deepEqual( Stem("goblets"), "goblet");});
test("goblin -> goblin", function() {deepEqual( Stem("goblin"), "goblin");});
test("god -> god", function() {deepEqual( Stem("god"), "god");});
test("godalming -> godalm", function() {deepEqual( Stem("godalming"), "godalm");});
test("godchild -> godchild", function() {deepEqual( Stem("godchild"), "godchild");});
test("goddess -> goddess", function() {deepEqual( Stem("goddess"), "goddess");});
test("godfather -> godfath", function() {deepEqual( Stem("godfather"), "godfath");});
test("godfeyther -> godfeyth", function() {deepEqual( Stem("godfeyther"), "godfeyth");});
test("godfrey -> godfrey", function() {deepEqual( Stem("godfrey"), "godfrey");});
test("godless -> godless", function() {deepEqual( Stem("godless"), "godless");});
test("godlike -> godlik", function() {deepEqual( Stem("godlike"), "godlik");});
test("godly -> god", function() {deepEqual( Stem("godly"), "god");});
test("godmother -> godmoth", function() {deepEqual( Stem("godmother"), "godmoth");});
test("gods -> god", function() {deepEqual( Stem("gods"), "god");});
test("godsend -> godsend", function() {deepEqual( Stem("godsend"), "godsend");});
test("godson -> godson", function() {deepEqual( Stem("godson"), "godson");});
test("goeree -> goere", function() {deepEqual( Stem("goeree"), "goere");});
test("goes -> goe", function() {deepEqual( Stem("goes"), "goe");});
test("goesler -> goesler", function() {deepEqual( Stem("goesler"), "goesler");});
test("goeth -> goeth", function() {deepEqual( Stem("goeth"), "goeth");});
test("goethe -> goeth", function() {deepEqual( Stem("goethe"), "goeth");});
test("gog -> gog", function() {deepEqual( Stem("gog"), "gog");});
test("goggle -> goggl", function() {deepEqual( Stem("goggle"), "goggl");});
test("gogol -> gogol", function() {deepEqual( Stem("gogol"), "gogol");});
test("going -> go", function() {deepEqual( Stem("going"), "go");});
test("goings -> go", function() {deepEqual( Stem("goings"), "go");});
test("goitre -> goitr", function() {deepEqual( Stem("goitre"), "goitr");});
test("gold -> gold", function() {deepEqual( Stem("gold"), "gold");});
test("golden -> golden", function() {deepEqual( Stem("golden"), "golden");});
test("goldfinch -> goldfinch", function() {deepEqual( Stem("goldfinch"), "goldfinch");});
test("goldfinches -> goldfinch", function() {deepEqual( Stem("goldfinches"), "goldfinch");});
test("goldfish -> goldfish", function() {deepEqual( Stem("goldfish"), "goldfish");});
test("goldingsby -> goldingsbi", function() {deepEqual( Stem("goldingsby"), "goldingsbi");});
test("goldsmith -> goldsmith", function() {deepEqual( Stem("goldsmith"), "goldsmith");});
test("golgotha -> golgotha", function() {deepEqual( Stem("golgotha"), "golgotha");});
test("goloshes -> golosh", function() {deepEqual( Stem("goloshes"), "golosh");});
test("gomez -> gomez", function() {deepEqual( Stem("gomez"), "gomez");});
test("gondola -> gondola", function() {deepEqual( Stem("gondola"), "gondola");});
test("gone -> gone", function() {deepEqual( Stem("gone"), "gone");});
test("gong -> gong", function() {deepEqual( Stem("gong"), "gong");});
test("gonoph -> gonoph", function() {deepEqual( Stem("gonoph"), "gonoph");});
test("gonzales -> gonzal", function() {deepEqual( Stem("gonzales"), "gonzal");});
test("goo -> goo", function() {deepEqual( Stem("goo"), "goo");});
test("good -> good", function() {deepEqual( Stem("good"), "good");});
test("goodbye -> goodby", function() {deepEqual( Stem("goodbye"), "goodby");});
test("goodle -> goodl", function() {deepEqual( Stem("goodle"), "goodl");});
test("goodly -> good", function() {deepEqual( Stem("goodly"), "good");});
test("goodnaturedly -> goodnatur", function() {deepEqual( Stem("goodnaturedly"), "goodnatur");});
test("goodness -> good", function() {deepEqual( Stem("goodness"), "good");});
test("goods -> good", function() {deepEqual( Stem("goods"), "good");});
test("goodwill -> goodwil", function() {deepEqual( Stem("goodwill"), "goodwil");});
test("goodwood -> goodwood", function() {deepEqual( Stem("goodwood"), "goodwood");});
test("goose -> goos", function() {deepEqual( Stem("goose"), "goos");});
test("gooseberries -> gooseberri", function() {deepEqual( Stem("gooseberries"), "gooseberri");});
test("gooseberry -> gooseberri", function() {deepEqual( Stem("gooseberry"), "gooseberri");});
test("gootther -> gootther", function() {deepEqual( Stem("gootther"), "gootther");});
test("gorda -> gorda", function() {deepEqual( Stem("gorda"), "gorda");});
test("gore -> gore", function() {deepEqual( Stem("gore"), "gore");});
test("gorge -> gorg", function() {deepEqual( Stem("gorge"), "gorg");});
test("gorged -> gorg", function() {deepEqual( Stem("gorged"), "gorg");});
test("gorgeous -> gorgeous", function() {deepEqual( Stem("gorgeous"), "gorgeous");});
test("gorgeously -> gorgeous", function() {deepEqual( Stem("gorgeously"), "gorgeous");});
test("gorgeousness -> gorgeous", function() {deepEqual( Stem("gorgeousness"), "gorgeous");});
test("gorges -> gorg", function() {deepEqual( Stem("gorges"), "gorg");});
test("gorging -> gorg", function() {deepEqual( Stem("gorging"), "gorg");});
test("gormandize -> gormand", function() {deepEqual( Stem("gormandize"), "gormand");});
test("gorse -> gors", function() {deepEqual( Stem("gorse"), "gors");});
test("gory -> gori", function() {deepEqual( Stem("gory"), "gori");});
test("gospel -> gospel", function() {deepEqual( Stem("gospel"), "gospel");});
test("gossamer -> gossam", function() {deepEqual( Stem("gossamer"), "gossam");});
test("gossip -> gossip", function() {deepEqual( Stem("gossip"), "gossip");});
test("gossiper -> gossip", function() {deepEqual( Stem("gossiper"), "gossip");});
test("gossiping -> gossip", function() {deepEqual( Stem("gossiping"), "gossip");});
test("gossips -> gossip", function() {deepEqual( Stem("gossips"), "gossip");});
test("got -> got", function() {deepEqual( Stem("got"), "got");});
test("gothic -> gothic", function() {deepEqual( Stem("gothic"), "gothic");});
test("gothlands -> gothland", function() {deepEqual( Stem("gothlands"), "gothland");});
test("gott -> gott", function() {deepEqual( Stem("gott"), "gott");});
test("gotten -> gotten", function() {deepEqual( Stem("gotten"), "gotten");});
test("gould -> gould", function() {deepEqual( Stem("gould"), "gould");});
test("gourmand -> gourmand", function() {deepEqual( Stem("gourmand"), "gourmand");});
test("gourmands -> gourmand", function() {deepEqual( Stem("gourmands"), "gourmand");});
test("gout -> gout", function() {deepEqual( Stem("gout"), "gout");});
test("gouty -> gouti", function() {deepEqual( Stem("gouty"), "gouti");});
test("gov -> gov", function() {deepEqual( Stem("gov"), "gov");});
test("gove -> gove", function() {deepEqual( Stem("gove"), "gove");});
test("govemment -> govem", function() {deepEqual( Stem("govemment"), "govem");});
test("govern -> govern", function() {deepEqual( Stem("govern"), "govern");});
test("governed -> govern", function() {deepEqual( Stem("governed"), "govern");});
test("governess -> gover", function() {deepEqual( Stem("governess"), "gover");});
test("governesses -> gover", function() {deepEqual( Stem("governesses"), "gover");});
test("governessing -> gover", function() {deepEqual( Stem("governessing"), "gover");});
test("governing -> govern", function() {deepEqual( Stem("governing"), "govern");});
test("government -> govern", function() {deepEqual( Stem("government"), "govern");});
test("governments -> govern", function() {deepEqual( Stem("governments"), "govern");});
test("governor -> governor", function() {deepEqual( Stem("governor"), "governor");});
test("governors -> governor", function() {deepEqual( Stem("governors"), "governor");});
test("governorship -> governorship", function() {deepEqual( Stem("governorship"), "governorship");});
test("governs -> govern", function() {deepEqual( Stem("governs"), "govern");});
test("govett -> govett", function() {deepEqual( Stem("govett"), "govett");});
test("govvernor -> govvernor", function() {deepEqual( Stem("govvernor"), "govvernor");});
test("gower -> gower", function() {deepEqual( Stem("gower"), "gower");});
test("gown -> gown", function() {deepEqual( Stem("gown"), "gown");});
test("gownd -> gownd", function() {deepEqual( Stem("gownd"), "gownd");});
test("gowns -> gown", function() {deepEqual( Stem("gowns"), "gown");});
test("gra -> gra", function() {deepEqual( Stem("gra"), "gra");});
test("grace -> grace", function() {deepEqual( Stem("grace"), "grace");});
test("gracechurch -> gracechurch", function() {deepEqual( Stem("gracechurch"), "gracechurch");});
test("graced -> grace", function() {deepEqual( Stem("graced"), "grace");});
test("graceful -> grace", function() {deepEqual( Stem("graceful"), "grace");});
test("gracefully -> grace", function() {deepEqual( Stem("gracefully"), "grace");});
test("graceless -> graceless", function() {deepEqual( Stem("graceless"), "graceless");});
test("graces -> grace", function() {deepEqual( Stem("graces"), "grace");});
test("gracing -> grace", function() {deepEqual( Stem("gracing"), "grace");});
test("gracious -> gracious", function() {deepEqual( Stem("gracious"), "gracious");});
test("graciously -> gracious", function() {deepEqual( Stem("graciously"), "gracious");});
test("graciousness -> gracious", function() {deepEqual( Stem("graciousness"), "gracious");});
test("gradation -> gradat", function() {deepEqual( Stem("gradation"), "gradat");});
test("gradations -> gradat", function() {deepEqual( Stem("gradations"), "gradat");});
test("grade -> grade", function() {deepEqual( Stem("grade"), "grade");});
test("grades -> grade", function() {deepEqual( Stem("grades"), "grade");});
test("gradual -> gradual", function() {deepEqual( Stem("gradual"), "gradual");});
test("gradually -> gradual", function() {deepEqual( Stem("gradually"), "gradual");});
test("graduate -> graduat", function() {deepEqual( Stem("graduate"), "graduat");});
test("graduated -> graduat", function() {deepEqual( Stem("graduated"), "graduat");});
test("grafted -> graft", function() {deepEqual( Stem("grafted"), "graft");});
test("grafts -> graft", function() {deepEqual( Stem("grafts"), "graft");});
test("grain -> grain", function() {deepEqual( Stem("grain"), "grain");});
test("grained -> grain", function() {deepEqual( Stem("grained"), "grain");});
test("grains -> grain", function() {deepEqual( Stem("grains"), "grain");});
test("grammar -> grammar", function() {deepEqual( Stem("grammar"), "grammar");});
test("grammarian -> grammarian", function() {deepEqual( Stem("grammarian"), "grammarian");});
test("grammars -> grammar", function() {deepEqual( Stem("grammars"), "grammar");});
test("grammatical -> grammat", function() {deepEqual( Stem("grammatical"), "grammat");});
test("gran -> gran", function() {deepEqual( Stem("gran"), "gran");});
test("granaries -> granari", function() {deepEqual( Stem("granaries"), "granari");});
test("grand -> grand", function() {deepEqual( Stem("grand"), "grand");});
test("grandchild -> grandchild", function() {deepEqual( Stem("grandchild"), "grandchild");});
test("grandchildren -> grandchildren", function() {deepEqual( Stem("grandchildren"), "grandchildren");});
test("granddaughter -> granddaught", function() {deepEqual( Stem("granddaughter"), "granddaught");});
test("grande -> grand", function() {deepEqual( Stem("grande"), "grand");});
test("grandee -> grande", function() {deepEqual( Stem("grandee"), "grande");});
test("grandees -> grande", function() {deepEqual( Stem("grandees"), "grande");});
test("grander -> grander", function() {deepEqual( Stem("grander"), "grander");});
test("grandest -> grandest", function() {deepEqual( Stem("grandest"), "grandest");});
test("grandeur -> grandeur", function() {deepEqual( Stem("grandeur"), "grandeur");});
test("grandeurs -> grandeur", function() {deepEqual( Stem("grandeurs"), "grandeur");});
test("grandfather -> grandfath", function() {deepEqual( Stem("grandfather"), "grandfath");});
test("grandfathers -> grandfath", function() {deepEqual( Stem("grandfathers"), "grandfath");});
test("grandiflorus -> grandiflorus", function() {deepEqual( Stem("grandiflorus"), "grandiflorus");});
test("grandiloquent -> grandiloqu", function() {deepEqual( Stem("grandiloquent"), "grandiloqu");});
test("grandiloquently -> grandiloqu", function() {deepEqual( Stem("grandiloquently"), "grandiloqu");});
test("grandly -> grand", function() {deepEqual( Stem("grandly"), "grand");});
test("grandmama -> grandmama", function() {deepEqual( Stem("grandmama"), "grandmama");});
test("grandmamma -> grandmamma", function() {deepEqual( Stem("grandmamma"), "grandmamma");});
test("grandmother -> grandmoth", function() {deepEqual( Stem("grandmother"), "grandmoth");});
test("grandmothers -> grandmoth", function() {deepEqual( Stem("grandmothers"), "grandmoth");});
test("grandpapa -> grandpapa", function() {deepEqual( Stem("grandpapa"), "grandpapa");});
test("grandsire -> grandsir", function() {deepEqual( Stem("grandsire"), "grandsir");});
test("grandson -> grandson", function() {deepEqual( Stem("grandson"), "grandson");});
test("granite -> granit", function() {deepEqual( Stem("granite"), "granit");});
test("granitic -> granit", function() {deepEqual( Stem("granitic"), "granit");});
test("granny -> granni", function() {deepEqual( Stem("granny"), "granni");});
test("grant -> grant", function() {deepEqual( Stem("grant"), "grant");});
test("granted -> grant", function() {deepEqual( Stem("granted"), "grant");});
test("grantham -> grantham", function() {deepEqual( Stem("grantham"), "grantham");});
test("granting -> grant", function() {deepEqual( Stem("granting"), "grant");});
test("granular -> granular", function() {deepEqual( Stem("granular"), "granular");});
test("granulo -> granulo", function() {deepEqual( Stem("granulo"), "granulo");});
test("grape -> grape", function() {deepEqual( Stem("grape"), "grape");});
test("grapes -> grape", function() {deepEqual( Stem("grapes"), "grape");});
test("grapevine -> grapevin", function() {deepEqual( Stem("grapevine"), "grapevin");});
test("grapple -> grappl", function() {deepEqual( Stem("grapple"), "grappl");});
test("grappled -> grappl", function() {deepEqual( Stem("grappled"), "grappl");});
test("grappling -> grappl", function() {deepEqual( Stem("grappling"), "grappl");});
test("grasp -> grasp", function() {deepEqual( Stem("grasp"), "grasp");});
test("grasped -> grasp", function() {deepEqual( Stem("grasped"), "grasp");});
test("grasping -> grasp", function() {deepEqual( Stem("grasping"), "grasp");});
test("grasps -> grasp", function() {deepEqual( Stem("grasps"), "grasp");});
test("graspus -> graspus", function() {deepEqual( Stem("graspus"), "graspus");});
test("grass -> grass", function() {deepEqual( Stem("grass"), "grass");});
test("grasses -> grass", function() {deepEqual( Stem("grasses"), "grass");});
test("grasshopper -> grasshopp", function() {deepEqual( Stem("grasshopper"), "grasshopp");});
test("grasshoppers -> grasshopp", function() {deepEqual( Stem("grasshoppers"), "grasshopp");});
test("grassy -> grassi", function() {deepEqual( Stem("grassy"), "grassi");});
test("grate -> grate", function() {deepEqual( Stem("grate"), "grate");});
test("grated -> grate", function() {deepEqual( Stem("grated"), "grate");});
test("grateful -> grate", function() {deepEqual( Stem("grateful"), "grate");});
test("gratefully -> grate", function() {deepEqual( Stem("gratefully"), "grate");});
test("grater -> grater", function() {deepEqual( Stem("grater"), "grater");});
test("grates -> grate", function() {deepEqual( Stem("grates"), "grate");});
test("gratful -> grat", function() {deepEqual( Stem("gratful"), "grat");});
test("gratification -> gratif", function() {deepEqual( Stem("gratification"), "gratif");});
test("gratified -> gratifi", function() {deepEqual( Stem("gratified"), "gratifi");});
test("gratifies -> gratifi", function() {deepEqual( Stem("gratifies"), "gratifi");});
test("gratify -> gratifi", function() {deepEqual( Stem("gratify"), "gratifi");});
test("gratifying -> gratifi", function() {deepEqual( Stem("gratifying"), "gratifi");});
test("grating -> grate", function() {deepEqual( Stem("grating"), "grate");});
test("gratitude -> gratitud", function() {deepEqual( Stem("gratitude"), "gratitud");});
test("gratuitous -> gratuit", function() {deepEqual( Stem("gratuitous"), "gratuit");});
test("gratuitously -> gratuit", function() {deepEqual( Stem("gratuitously"), "gratuit");});
test("gratulation -> gratul", function() {deepEqual( Stem("gratulation"), "gratul");});
test("gravamen -> gravamen", function() {deepEqual( Stem("gravamen"), "gravamen");});
test("grave -> grave", function() {deepEqual( Stem("grave"), "grave");});
test("graveclothes -> gravecloth", function() {deepEqual( Stem("graveclothes"), "gravecloth");});
test("gravel -> gravel", function() {deepEqual( Stem("gravel"), "gravel");});
test("gravelled -> gravel", function() {deepEqual( Stem("gravelled"), "gravel");});
test("gravelly -> gravelli", function() {deepEqual( Stem("gravelly"), "gravelli");});
test("gravely -> grave", function() {deepEqual( Stem("gravely"), "grave");});
test("graver -> graver", function() {deepEqual( Stem("graver"), "graver");});
test("graves -> grave", function() {deepEqual( Stem("graves"), "grave");});
test("gravesend -> gravesend", function() {deepEqual( Stem("gravesend"), "gravesend");});
test("gravest -> gravest", function() {deepEqual( Stem("gravest"), "gravest");});
test("gravestone -> graveston", function() {deepEqual( Stem("gravestone"), "graveston");});
test("gravestones -> graveston", function() {deepEqual( Stem("gravestones"), "graveston");});
test("graveyard -> graveyard", function() {deepEqual( Stem("graveyard"), "graveyard");});
test("gravies -> gravi", function() {deepEqual( Stem("gravies"), "gravi");});
test("gravity -> graviti", function() {deepEqual( Stem("gravity"), "graviti");});
test("gravy -> gravi", function() {deepEqual( Stem("gravy"), "gravi");});
test("gray -> gray", function() {deepEqual( Stem("gray"), "gray");});
test("graymarsh -> graymarsh", function() {deepEqual( Stem("graymarsh"), "graymarsh");});
test("graze -> graze", function() {deepEqual( Stem("graze"), "graze");});
test("grazed -> graze", function() {deepEqual( Stem("grazed"), "graze");});
test("grazes -> graze", function() {deepEqual( Stem("grazes"), "graze");});
test("grazier -> grazier", function() {deepEqual( Stem("grazier"), "grazier");});
test("grazing -> graze", function() {deepEqual( Stem("grazing"), "graze");});
test("grea -> grea", function() {deepEqual( Stem("grea"), "grea");});
test("grease -> greas", function() {deepEqual( Stem("grease"), "greas");});
test("greased -> greas", function() {deepEqual( Stem("greased"), "greas");});
test("greasily -> greasili", function() {deepEqual( Stem("greasily"), "greasili");});
test("greasy -> greasi", function() {deepEqual( Stem("greasy"), "greasi");});
test("great -> great", function() {deepEqual( Stem("great"), "great");});
test("greatcoat -> greatcoat", function() {deepEqual( Stem("greatcoat"), "greatcoat");});
test("greateful -> great", function() {deepEqual( Stem("greateful"), "great");});
test("greater -> greater", function() {deepEqual( Stem("greater"), "greater");});
test("greatest -> greatest", function() {deepEqual( Stem("greatest"), "greatest");});
test("greatl -> greatl", function() {deepEqual( Stem("greatl"), "greatl");});
test("greatly -> great", function() {deepEqual( Stem("greatly"), "great");});
test("greatness -> great", function() {deepEqual( Stem("greatness"), "great");});
test("grecian -> grecian", function() {deepEqual( Stem("grecian"), "grecian");});
test("grecians -> grecian", function() {deepEqual( Stem("grecians"), "grecian");});
test("greece -> greec", function() {deepEqual( Stem("greece"), "greec");});
test("greed -> greed", function() {deepEqual( Stem("greed"), "greed");});
test("greedily -> greedili", function() {deepEqual( Stem("greedily"), "greedili");});
test("greediness -> greedi", function() {deepEqual( Stem("greediness"), "greedi");});
test("greedy -> greedi", function() {deepEqual( Stem("greedy"), "greedi");});
test("greek -> greek", function() {deepEqual( Stem("greek"), "greek");});
test("green -> green", function() {deepEqual( Stem("green"), "green");});
test("greener -> greener", function() {deepEqual( Stem("greener"), "greener");});
test("greengrocer -> greengroc", function() {deepEqual( Stem("greengrocer"), "greengroc");});
test("greengrocery -> greengroceri", function() {deepEqual( Stem("greengrocery"), "greengroceri");});
test("greenhorn -> greenhorn", function() {deepEqual( Stem("greenhorn"), "greenhorn");});
test("greenish -> greenish", function() {deepEqual( Stem("greenish"), "greenish");});
test("greenland -> greenland", function() {deepEqual( Stem("greenland"), "greenland");});
test("greenleaf -> greenleaf", function() {deepEqual( Stem("greenleaf"), "greenleaf");});
test("greenly -> green", function() {deepEqual( Stem("greenly"), "green");});
test("greenness -> green", function() {deepEqual( Stem("greenness"), "green");});
test("greens -> green", function() {deepEqual( Stem("greens"), "green");});
test("greenstone -> greenston", function() {deepEqual( Stem("greenstone"), "greenston");});
test("greensward -> greensward", function() {deepEqual( Stem("greensward"), "greensward");});
test("greenwich -> greenwich", function() {deepEqual( Stem("greenwich"), "greenwich");});
test("greet -> greet", function() {deepEqual( Stem("greet"), "greet");});
test("greeted -> greet", function() {deepEqual( Stem("greeted"), "greet");});
test("greeting -> greet", function() {deepEqual( Stem("greeting"), "greet");});
test("greetings -> greet", function() {deepEqual( Stem("greetings"), "greet");});
test("greets -> greet", function() {deepEqual( Stem("greets"), "greet");});
test("gregarious -> gregari", function() {deepEqual( Stem("gregarious"), "gregari");});
test("gregory -> gregori", function() {deepEqual( Stem("gregory"), "gregori");});
test("gregsbury -> gregsburi", function() {deepEqual( Stem("gregsbury"), "gregsburi");});
test("grenadier -> grenadi", function() {deepEqual( Stem("grenadier"), "grenadi");});
test("grenadiers -> grenadi", function() {deepEqual( Stem("grenadiers"), "grenadi");});
test("gresham -> gresham", function() {deepEqual( Stem("gresham"), "gresham");});
test("greshambury -> greshamburi", function() {deepEqual( Stem("greshambury"), "greshamburi");});
test("greta -> greta", function() {deepEqual( Stem("greta"), "greta");});
test("grew -> grew", function() {deepEqual( Stem("grew"), "grew");});
test("grey -> grey", function() {deepEqual( Stem("grey"), "grey");});
test("greyhound -> greyhound", function() {deepEqual( Stem("greyhound"), "greyhound");});
test("greyhounds -> greyhound", function() {deepEqual( Stem("greyhounds"), "greyhound");});
test("greyish -> greyish", function() {deepEqual( Stem("greyish"), "greyish");});
test("gride -> gride", function() {deepEqual( Stem("gride"), "gride");});
test("gridiron -> gridiron", function() {deepEqual( Stem("gridiron"), "gridiron");});
test("gridley -> gridley", function() {deepEqual( Stem("gridley"), "gridley");});
test("grief -> grief", function() {deepEqual( Stem("grief"), "grief");});
test("griefs -> grief", function() {deepEqual( Stem("griefs"), "grief");});
test("grievance -> grievanc", function() {deepEqual( Stem("grievance"), "grievanc");});
test("grievances -> grievanc", function() {deepEqual( Stem("grievances"), "grievanc");});
test("grieve -> griev", function() {deepEqual( Stem("grieve"), "griev");});
test("grieved -> griev", function() {deepEqual( Stem("grieved"), "griev");});
test("grieves -> griev", function() {deepEqual( Stem("grieves"), "griev");});
test("grieving -> griev", function() {deepEqual( Stem("grieving"), "griev");});
test("grievous -> grievous", function() {deepEqual( Stem("grievous"), "grievous");});
test("grievously -> grievous", function() {deepEqual( Stem("grievously"), "grievous");});
test("griffin -> griffin", function() {deepEqual( Stem("griffin"), "griffin");});
test("griffith -> griffith", function() {deepEqual( Stem("griffith"), "griffith");});
test("griffiths -> griffith", function() {deepEqual( Stem("griffiths"), "griffith");});
test("grig -> grig", function() {deepEqual( Stem("grig"), "grig");});
test("grigorievitch -> grigorievitch", function() {deepEqual( Stem("grigorievitch"), "grigorievitch");});
test("grigoryev -> grigoryev", function() {deepEqual( Stem("grigoryev"), "grigoryev");});
test("grim -> grim", function() {deepEqual( Stem("grim"), "grim");});
test("grimace -> grimac", function() {deepEqual( Stem("grimace"), "grimac");});
test("grimaces -> grimac", function() {deepEqual( Stem("grimaces"), "grimac");});
test("grimacing -> grimac", function() {deepEqual( Stem("grimacing"), "grimac");});
test("grimalkin -> grimalkin", function() {deepEqual( Stem("grimalkin"), "grimalkin");});
test("grimble -> grimbl", function() {deepEqual( Stem("grimble"), "grimbl");});
test("grimbles -> grimbl", function() {deepEqual( Stem("grimbles"), "grimbl");});
test("grime -> grime", function() {deepEqual( Stem("grime"), "grime");});
test("grimed -> grime", function() {deepEqual( Stem("grimed"), "grime");});
test("grimes -> grime", function() {deepEqual( Stem("grimes"), "grime");});
test("grimly -> grim", function() {deepEqual( Stem("grimly"), "grim");});
test("grimy -> grimi", function() {deepEqual( Stem("grimy"), "grimi");});
test("grin -> grin", function() {deepEqual( Stem("grin"), "grin");});
test("grind -> grind", function() {deepEqual( Stem("grind"), "grind");});
test("grinder -> grinder", function() {deepEqual( Stem("grinder"), "grinder");});
test("grinders -> grinder", function() {deepEqual( Stem("grinders"), "grinder");});
test("grinding -> grind", function() {deepEqual( Stem("grinding"), "grind");});
test("grinned -> grin", function() {deepEqual( Stem("grinned"), "grin");});
test("grinning -> grin", function() {deepEqual( Stem("grinning"), "grin");});
test("grins -> grin", function() {deepEqual( Stem("grins"), "grin");});
test("grip -> grip", function() {deepEqual( Stem("grip"), "grip");});
test("griping -> gripe", function() {deepEqual( Stem("griping"), "gripe");});
test("gripped -> grip", function() {deepEqual( Stem("gripped"), "grip");});
test("gripping -> grip", function() {deepEqual( Stem("gripping"), "grip");});
test("grips -> grip", function() {deepEqual( Stem("grips"), "grip");});
test("grisly -> grisli", function() {deepEqual( Stem("grisly"), "grisli");});
test("grist -> grist", function() {deepEqual( Stem("grist"), "grist");});
test("gritting -> grit", function() {deepEqual( Stem("gritting"), "grit");});
test("grizzled -> grizzl", function() {deepEqual( Stem("grizzled"), "grizzl");});
test("groan -> groan", function() {deepEqual( Stem("groan"), "groan");});
test("groaned -> groan", function() {deepEqual( Stem("groaned"), "groan");});
test("groaning -> groan", function() {deepEqual( Stem("groaning"), "groan");});
test("groans -> groan", function() {deepEqual( Stem("groans"), "groan");});
test("grocer -> grocer", function() {deepEqual( Stem("grocer"), "grocer");});
test("grogram -> grogram", function() {deepEqual( Stem("grogram"), "grogram");});
test("grogzwig -> grogzwig", function() {deepEqual( Stem("grogzwig"), "grogzwig");});
test("groom -> groom", function() {deepEqual( Stem("groom"), "groom");});
test("groomed -> groom", function() {deepEqual( Stem("groomed"), "groom");});
test("grooms -> groom", function() {deepEqual( Stem("grooms"), "groom");});
test("groove -> groov", function() {deepEqual( Stem("groove"), "groov");});
test("grooves -> groov", function() {deepEqual( Stem("grooves"), "groov");});
test("grooving -> groov", function() {deepEqual( Stem("grooving"), "groov");});
test("grope -> grope", function() {deepEqual( Stem("grope"), "grope");});
test("groped -> grope", function() {deepEqual( Stem("groped"), "grope");});
test("gropes -> grope", function() {deepEqual( Stem("gropes"), "grope");});
test("gropin -> gropin", function() {deepEqual( Stem("gropin"), "gropin");});
test("groping -> grope", function() {deepEqual( Stem("groping"), "grope");});
test("grose -> grose", function() {deepEqual( Stem("grose"), "grose");});
test("gross -> gross", function() {deepEqual( Stem("gross"), "gross");});
test("grosser -> grosser", function() {deepEqual( Stem("grosser"), "grosser");});
test("grossest -> grossest", function() {deepEqual( Stem("grossest"), "grossest");});
test("grossly -> grossli", function() {deepEqual( Stem("grossly"), "grossli");});
test("grossness -> gross", function() {deepEqual( Stem("grossness"), "gross");});
test("grosvenor -> grosvenor", function() {deepEqual( Stem("grosvenor"), "grosvenor");});
test("grotesque -> grotesqu", function() {deepEqual( Stem("grotesque"), "grotesqu");});
test("grotesquely -> grotesqu", function() {deepEqual( Stem("grotesquely"), "grotesqu");});
test("grottoes -> grotto", function() {deepEqual( Stem("grottoes"), "grotto");});
test("ground -> ground", function() {deepEqual( Stem("ground"), "ground");});
test("grounded -> ground", function() {deepEqual( Stem("grounded"), "ground");});
test("groundless -> groundless", function() {deepEqual( Stem("groundless"), "groundless");});
test("groundlessness -> groundless", function() {deepEqual( Stem("groundlessness"), "groundless");});
test("grounds -> ground", function() {deepEqual( Stem("grounds"), "ground");});
test("groundwork -> groundwork", function() {deepEqual( Stem("groundwork"), "groundwork");});
test("group -> group", function() {deepEqual( Stem("group"), "group");});
test("grouped -> group", function() {deepEqual( Stem("grouped"), "group");});
test("grouping -> group", function() {deepEqual( Stem("grouping"), "group");});
test("groups -> group", function() {deepEqual( Stem("groups"), "group");});
test("grouse -> grous", function() {deepEqual( Stem("grouse"), "grous");});
test("grove -> grove", function() {deepEqual( Stem("grove"), "grove");});
test("grovel -> grovel", function() {deepEqual( Stem("grovel"), "grovel");});
test("grovelling -> grovel", function() {deepEqual( Stem("grovelling"), "grovel");});
test("groves -> grove", function() {deepEqual( Stem("groves"), "grove");});
test("grow -> grow", function() {deepEqual( Stem("grow"), "grow");});
test("groweth -> groweth", function() {deepEqual( Stem("groweth"), "groweth");});
test("growin -> growin", function() {deepEqual( Stem("growin"), "growin");});
test("growing -> grow", function() {deepEqual( Stem("growing"), "grow");});
test("growl -> growl", function() {deepEqual( Stem("growl"), "growl");});
test("growled -> growl", function() {deepEqual( Stem("growled"), "growl");});
test("growlery -> growleri", function() {deepEqual( Stem("growlery"), "growleri");});
test("growling -> growl", function() {deepEqual( Stem("growling"), "growl");});
test("growlings -> growl", function() {deepEqual( Stem("growlings"), "growl");});
test("growls -> growl", function() {deepEqual( Stem("growls"), "growl");});
test("grown -> grown", function() {deepEqual( Stem("grown"), "grown");});
test("grows -> grow", function() {deepEqual( Stem("grows"), "grow");});
test("growth -> growth", function() {deepEqual( Stem("growth"), "growth");});
test("grub -> grub", function() {deepEqual( Stem("grub"), "grub");});
test("grubbed -> grub", function() {deepEqual( Stem("grubbed"), "grub");});
test("grubbing -> grub", function() {deepEqual( Stem("grubbing"), "grub");});
test("grubble -> grubbl", function() {deepEqual( Stem("grubble"), "grubbl");});
test("grudden -> grudden", function() {deepEqual( Stem("grudden"), "grudden");});
test("grudge -> grudg", function() {deepEqual( Stem("grudge"), "grudg");});
test("grudged -> grudg", function() {deepEqual( Stem("grudged"), "grudg");});
test("grudges -> grudg", function() {deepEqual( Stem("grudges"), "grudg");});
test("grudgingly -> grudg", function() {deepEqual( Stem("grudgingly"), "grudg");});
test("gruff -> gruff", function() {deepEqual( Stem("gruff"), "gruff");});
test("gruffly -> gruffli", function() {deepEqual( Stem("gruffly"), "gruffli");});
test("grumble -> grumbl", function() {deepEqual( Stem("grumble"), "grumbl");});
test("grumbled -> grumbl", function() {deepEqual( Stem("grumbled"), "grumbl");});
test("grumbler -> grumbler", function() {deepEqual( Stem("grumbler"), "grumbler");});
test("grumblers -> grumbler", function() {deepEqual( Stem("grumblers"), "grumbler");});
test("grumbling -> grumbl", function() {deepEqual( Stem("grumbling"), "grumbl");});
test("grumblings -> grumbl", function() {deepEqual( Stem("grumblings"), "grumbl");});
test("grund -> grund", function() {deepEqual( Stem("grund"), "grund");});
test("grunt -> grunt", function() {deepEqual( Stem("grunt"), "grunt");});
test("grunted -> grunt", function() {deepEqual( Stem("grunted"), "grunt");});
test("grunts -> grunt", function() {deepEqual( Stem("grunts"), "grunt");});
test("gryllus -> gryllus", function() {deepEqual( Stem("gryllus"), "gryllus");});
test("guanaco -> guanaco", function() {deepEqual( Stem("guanaco"), "guanaco");});
test("guanacos -> guanaco", function() {deepEqual( Stem("guanacos"), "guanaco");});
test("guano -> guano", function() {deepEqual( Stem("guano"), "guano");});
test("guantajaya -> guantajaya", function() {deepEqual( Stem("guantajaya"), "guantajaya");});
test("guarantee -> guarante", function() {deepEqual( Stem("guarantee"), "guarante");});
test("guaranteed -> guarante", function() {deepEqual( Stem("guaranteed"), "guarante");});
test("guard -> guard", function() {deepEqual( Stem("guard"), "guard");});
test("guardage -> guardag", function() {deepEqual( Stem("guardage"), "guardag");});
test("guarded -> guard", function() {deepEqual( Stem("guarded"), "guard");});
test("guardedness -> guarded", function() {deepEqual( Stem("guardedness"), "guarded");});
test("guardhouse -> guardhous", function() {deepEqual( Stem("guardhouse"), "guardhous");});
test("guardia -> guardia", function() {deepEqual( Stem("guardia"), "guardia");});
test("guardian -> guardian", function() {deepEqual( Stem("guardian"), "guardian");});
test("guardians -> guardian", function() {deepEqual( Stem("guardians"), "guardian");});
test("guardianship -> guardianship", function() {deepEqual( Stem("guardianship"), "guardianship");});
test("guarding -> guard", function() {deepEqual( Stem("guarding"), "guard");});
test("guards -> guard", function() {deepEqual( Stem("guards"), "guard");});
test("guardsman -> guardsman", function() {deepEqual( Stem("guardsman"), "guardsman");});
test("guardsmen -> guardsmen", function() {deepEqual( Stem("guardsmen"), "guardsmen");});
test("guasco -> guasco", function() {deepEqual( Stem("guasco"), "guasco");});
test("guascos -> guasco", function() {deepEqual( Stem("guascos"), "guasco");});
test("guaso -> guaso", function() {deepEqual( Stem("guaso"), "guaso");});
test("guasos -> guaso", function() {deepEqual( Stem("guasos"), "guaso");});
test("guatemala -> guatemala", function() {deepEqual( Stem("guatemala"), "guatemala");});
test("guava -> guava", function() {deepEqual( Stem("guava"), "guava");});
test("guayaquil -> guayaquil", function() {deepEqual( Stem("guayaquil"), "guayaquil");});
test("guayatecas -> guayateca", function() {deepEqual( Stem("guayatecas"), "guayateca");});
test("guayavita -> guayavita", function() {deepEqual( Stem("guayavita"), "guayavita");});
test("gucho -> gucho", function() {deepEqual( Stem("gucho"), "gucho");});
test("gude -> gude", function() {deepEqual( Stem("gude"), "gude");});
test("guerre -> guerr", function() {deepEqual( Stem("guerre"), "guerr");});
test("guess -> guess", function() {deepEqual( Stem("guess"), "guess");});
test("guessed -> guess", function() {deepEqual( Stem("guessed"), "guess");});
test("guesses -> guess", function() {deepEqual( Stem("guesses"), "guess");});
test("guessing -> guess", function() {deepEqual( Stem("guessing"), "guess");});
test("guest -> guest", function() {deepEqual( Stem("guest"), "guest");});
test("guests -> guest", function() {deepEqual( Stem("guests"), "guest");});
test("guffaw -> guffaw", function() {deepEqual( Stem("guffaw"), "guffaw");});
test("guffawed -> guffaw", function() {deepEqual( Stem("guffawed"), "guffaw");});
test("guffawing -> guffaw", function() {deepEqual( Stem("guffawing"), "guffaw");});
test("guffy -> guffi", function() {deepEqual( Stem("guffy"), "guffi");});
test("guid -> guid", function() {deepEqual( Stem("guid"), "guid");});
test("guidance -> guidanc", function() {deepEqual( Stem("guidance"), "guidanc");});
test("guide -> guid", function() {deepEqual( Stem("guide"), "guid");});
test("guided -> guid", function() {deepEqual( Stem("guided"), "guid");});
test("guides -> guid", function() {deepEqual( Stem("guides"), "guid");});
test("guiding -> guid", function() {deepEqual( Stem("guiding"), "guid");});
test("guilandina -> guilandina", function() {deepEqual( Stem("guilandina"), "guilandina");});
test("guildford -> guildford", function() {deepEqual( Stem("guildford"), "guildford");});
test("guile -> guil", function() {deepEqual( Stem("guile"), "guil");});
test("guileless -> guileless", function() {deepEqual( Stem("guileless"), "guileless");});
test("guilt -> guilt", function() {deepEqual( Stem("guilt"), "guilt");});
test("guiltily -> guiltili", function() {deepEqual( Stem("guiltily"), "guiltili");});
test("guiltiness -> guilti", function() {deepEqual( Stem("guiltiness"), "guilti");});
test("guiltless -> guiltless", function() {deepEqual( Stem("guiltless"), "guiltless");});
test("guilty -> guilti", function() {deepEqual( Stem("guilty"), "guilti");});
test("guinea -> guinea", function() {deepEqual( Stem("guinea"), "guinea");});
test("guineas -> guinea", function() {deepEqual( Stem("guineas"), "guinea");});
test("guise -> guis", function() {deepEqual( Stem("guise"), "guis");});
test("guitar -> guitar", function() {deepEqual( Stem("guitar"), "guitar");});
test("guitron -> guitron", function() {deepEqual( Stem("guitron"), "guitron");});
test("gulf -> gulf", function() {deepEqual( Stem("gulf"), "gulf");});
test("gulfs -> gulf", function() {deepEqual( Stem("gulfs"), "gulf");});
test("gull -> gull", function() {deepEqual( Stem("gull"), "gull");});
test("gulled -> gull", function() {deepEqual( Stem("gulled"), "gull");});
test("gullet -> gullet", function() {deepEqual( Stem("gullet"), "gullet");});
test("gulleys -> gulley", function() {deepEqual( Stem("gulleys"), "gulley");});
test("gullies -> gulli", function() {deepEqual( Stem("gullies"), "gulli");});
test("gulliver -> gulliv", function() {deepEqual( Stem("gulliver"), "gulliv");});
test("gulls -> gull", function() {deepEqual( Stem("gulls"), "gull");});
test("gully -> gulli", function() {deepEqual( Stem("gully"), "gulli");});
test("gulp -> gulp", function() {deepEqual( Stem("gulp"), "gulp");});
test("gulped -> gulp", function() {deepEqual( Stem("gulped"), "gulp");});
test("gulping -> gulp", function() {deepEqual( Stem("gulping"), "gulp");});
test("gulps -> gulp", function() {deepEqual( Stem("gulps"), "gulp");});
test("gum -> gum", function() {deepEqual( Stem("gum"), "gum");});
test("gums -> gum", function() {deepEqual( Stem("gums"), "gum");});
test("gumwood -> gumwood", function() {deepEqual( Stem("gumwood"), "gumwood");});
test("gun -> gun", function() {deepEqual( Stem("gun"), "gun");});
test("gunless -> gunless", function() {deepEqual( Stem("gunless"), "gunless");});
test("gunner -> gunner", function() {deepEqual( Stem("gunner"), "gunner");});
test("gunnera -> gunnera", function() {deepEqual( Stem("gunnera"), "gunnera");});
test("gunners -> gunner", function() {deepEqual( Stem("gunners"), "gunner");});
test("gunnners -> gunnner", function() {deepEqual( Stem("gunnners"), "gunnner");});
test("gunpowder -> gunpowd", function() {deepEqual( Stem("gunpowder"), "gunpowd");});
test("guns -> gun", function() {deepEqual( Stem("guns"), "gun");});
test("gunsmith -> gunsmith", function() {deepEqual( Stem("gunsmith"), "gunsmith");});
test("gunther -> gunther", function() {deepEqual( Stem("gunther"), "gunther");});
test("gunwale -> gunwal", function() {deepEqual( Stem("gunwale"), "gunwal");});
test("gunwales -> gunwal", function() {deepEqual( Stem("gunwales"), "gunwal");});
test("gup -> gup", function() {deepEqual( Stem("gup"), "gup");});
test("guppy -> guppi", function() {deepEqual( Stem("guppy"), "guppi");});
test("gurgled -> gurgl", function() {deepEqual( Stem("gurgled"), "gurgl");});
test("gurgling -> gurgl", function() {deepEqual( Stem("gurgling"), "gurgl");});
test("gush -> gush", function() {deepEqual( Stem("gush"), "gush");});
test("gushed -> gush", function() {deepEqual( Stem("gushed"), "gush");});
test("gusher -> gusher", function() {deepEqual( Stem("gusher"), "gusher");});
test("gushing -> gush", function() {deepEqual( Stem("gushing"), "gush");});
test("gust -> gust", function() {deepEqual( Stem("gust"), "gust");});
test("guster -> guster", function() {deepEqual( Stem("guster"), "guster");});
test("gusts -> gust", function() {deepEqual( Stem("gusts"), "gust");});
test("gusty -> gusti", function() {deepEqual( Stem("gusty"), "gusti");});
test("gutta -> gutta", function() {deepEqual( Stem("gutta"), "gutta");});
test("gutter -> gutter", function() {deepEqual( Stem("gutter"), "gutter");});
test("guttered -> gutter", function() {deepEqual( Stem("guttered"), "gutter");});
test("guttering -> gutter", function() {deepEqual( Stem("guttering"), "gutter");});
test("gutters -> gutter", function() {deepEqual( Stem("gutters"), "gutter");});
test("guttural -> guttur", function() {deepEqual( Stem("guttural"), "guttur");});
test("guv -> guv", function() {deepEqual( Stem("guv"), "guv");});
test("guy -> guy", function() {deepEqual( Stem("guy"), "guy");});
test("guyaquil -> guyaquil", function() {deepEqual( Stem("guyaquil"), "guyaquil");});
test("guzzling -> guzzl", function() {deepEqual( Stem("guzzling"), "guzzl");});
test("gwyneth -> gwyneth", function() {deepEqual( Stem("gwyneth"), "gwyneth");});
test("gymnasium -> gymnasium", function() {deepEqual( Stem("gymnasium"), "gymnasium");});
test("gymnastic -> gymnast", function() {deepEqual( Stem("gymnastic"), "gymnast");});
test("gypsies -> gypsi", function() {deepEqual( Stem("gypsies"), "gypsi");});
test("gypsum -> gypsum", function() {deepEqual( Stem("gypsum"), "gypsum");});
test("gypsy -> gypsi", function() {deepEqual( Stem("gypsy"), "gypsi");});
test("gyrations -> gyrat", function() {deepEqual( Stem("gyrations"), "gyrat");});
test("h -> h", function() {deepEqual( Stem("h"), "h");});
test("ha -> ha", function() {deepEqual( Stem("ha"), "ha");});
test("habeas -> habea", function() {deepEqual( Stem("habeas"), "habea");});
test("haberdasher -> haberdash", function() {deepEqual( Stem("haberdasher"), "haberdash");});
test("habiliments -> habili", function() {deepEqual( Stem("habiliments"), "habili");});
test("habit -> habit", function() {deepEqual( Stem("habit"), "habit");});
test("habitable -> habit", function() {deepEqual( Stem("habitable"), "habit");});
test("habitation -> habit", function() {deepEqual( Stem("habitation"), "habit");});
test("habitations -> habit", function() {deepEqual( Stem("habitations"), "habit");});
test("habited -> habit", function() {deepEqual( Stem("habited"), "habit");});
test("habits -> habit", function() {deepEqual( Stem("habits"), "habit");});
test("habitual -> habitu", function() {deepEqual( Stem("habitual"), "habitu");});
test("habitually -> habitu", function() {deepEqual( Stem("habitually"), "habitu");});
test("habituated -> habitu", function() {deepEqual( Stem("habituated"), "habitu");});
test("hachette -> hachett", function() {deepEqual( Stem("hachette"), "hachett");});
test("hacienda -> hacienda", function() {deepEqual( Stem("hacienda"), "hacienda");});
test("haciendero -> haciendero", function() {deepEqual( Stem("haciendero"), "haciendero");});
test("hack -> hack", function() {deepEqual( Stem("hack"), "hack");});
test("hackney -> hackney", function() {deepEqual( Stem("hackney"), "hackney");});
test("hacks -> hack", function() {deepEqual( Stem("hacks"), "hack");});
test("had -> had", function() {deepEqual( Stem("had"), "had");});
test("hadn -> hadn", function() {deepEqual( Stem("hadn"), "hadn");});
test("hadst -> hadst", function() {deepEqual( Stem("hadst"), "hadst");});
test("hag -> hag", function() {deepEqual( Stem("hag"), "hag");});
test("haggard -> haggard", function() {deepEqual( Stem("haggard"), "haggard");});
test("haggardly -> haggard", function() {deepEqual( Stem("haggardly"), "haggard");});
test("haggardness -> haggard", function() {deepEqual( Stem("haggardness"), "haggard");});
test("haggle -> haggl", function() {deepEqual( Stem("haggle"), "haggl");});
test("hah -> hah", function() {deepEqual( Stem("hah"), "hah");});
test("hail -> hail", function() {deepEqual( Stem("hail"), "hail");});
test("hailed -> hail", function() {deepEqual( Stem("hailed"), "hail");});
test("hailing -> hail", function() {deepEqual( Stem("hailing"), "hail");});
test("hailstones -> hailston", function() {deepEqual( Stem("hailstones"), "hailston");});
test("hair -> hair", function() {deepEqual( Stem("hair"), "hair");});
test("hairbrush -> hairbrush", function() {deepEqual( Stem("hairbrush"), "hairbrush");});
test("hairdresser -> hairdress", function() {deepEqual( Stem("hairdresser"), "hairdress");});
test("haired -> hair", function() {deepEqual( Stem("haired"), "hair");});
test("hairless -> hairless", function() {deepEqual( Stem("hairless"), "hairless");});
test("hairs -> hair", function() {deepEqual( Stem("hairs"), "hair");});
test("hairy -> hairi", function() {deepEqual( Stem("hairy"), "hairi");});
test("halcyon -> halcyon", function() {deepEqual( Stem("halcyon"), "halcyon");});
test("hale -> hale", function() {deepEqual( Stem("hale"), "hale");});
test("half -> half", function() {deepEqual( Stem("half"), "half");});
test("halfpence -> halfpenc", function() {deepEqual( Stem("halfpence"), "halfpenc");});
test("halfpenny -> halfpenni", function() {deepEqual( Stem("halfpenny"), "halfpenni");});
test("halfpennyworth -> halfpennyworth", function() {deepEqual( Stem("halfpennyworth"), "halfpennyworth");});
test("halfway -> halfway", function() {deepEqual( Stem("halfway"), "halfway");});
test("hall -> hall", function() {deepEqual( Stem("hall"), "hall");});
test("hallo -> hallo", function() {deepEqual( Stem("hallo"), "hallo");});
test("halloa -> halloa", function() {deepEqual( Stem("halloa"), "halloa");});
test("halloo -> halloo", function() {deepEqual( Stem("halloo"), "halloo");});
test("hallooing -> halloo", function() {deepEqual( Stem("hallooing"), "halloo");});
test("hallowed -> hallow", function() {deepEqual( Stem("hallowed"), "hallow");});
test("halls -> hall", function() {deepEqual( Stem("halls"), "hall");});
test("hallucination -> hallucin", function() {deepEqual( Stem("hallucination"), "hallucin");});
test("halo -> halo", function() {deepEqual( Stem("halo"), "halo");});
test("halt -> halt", function() {deepEqual( Stem("halt"), "halt");});
test("halted -> halt", function() {deepEqual( Stem("halted"), "halt");});
test("halter -> halter", function() {deepEqual( Stem("halter"), "halter");});
test("haltica -> haltica", function() {deepEqual( Stem("haltica"), "haltica");});
test("halting -> halt", function() {deepEqual( Stem("halting"), "halt");});
test("halts -> halt", function() {deepEqual( Stem("halts"), "halt");});
test("halves -> halv", function() {deepEqual( Stem("halves"), "halv");});
test("ham -> ham", function() {deepEqual( Stem("ham"), "ham");});
test("hamilton -> hamilton", function() {deepEqual( Stem("hamilton"), "hamilton");});
test("hamlet -> hamlet", function() {deepEqual( Stem("hamlet"), "hamlet");});
test("hamlets -> hamlet", function() {deepEqual( Stem("hamlets"), "hamlet");});
test("hammer -> hammer", function() {deepEqual( Stem("hammer"), "hammer");});
test("hammercloths -> hammercloth", function() {deepEqual( Stem("hammercloths"), "hammercloth");});
test("hammered -> hammer", function() {deepEqual( Stem("hammered"), "hammer");});
test("hammering -> hammer", function() {deepEqual( Stem("hammering"), "hammer");});
test("hammers -> hammer", function() {deepEqual( Stem("hammers"), "hammer");});
test("hammersmith -> hammersmith", function() {deepEqual( Stem("hammersmith"), "hammersmith");});
test("hammond -> hammond", function() {deepEqual( Stem("hammond"), "hammond");});
test("hampdens -> hampden", function() {deepEqual( Stem("hampdens"), "hampden");});
test("hamper -> hamper", function() {deepEqual( Stem("hamper"), "hamper");});
test("hampered -> hamper", function() {deepEqual( Stem("hampered"), "hamper");});
test("hampering -> hamper", function() {deepEqual( Stem("hampering"), "hamper");});
test("hampers -> hamper", function() {deepEqual( Stem("hampers"), "hamper");});
test("hampshire -> hampshir", function() {deepEqual( Stem("hampshire"), "hampshir");});
test("hampstead -> hampstead", function() {deepEqual( Stem("hampstead"), "hampstead");});
test("hampton -> hampton", function() {deepEqual( Stem("hampton"), "hampton");});
test("hams -> ham", function() {deepEqual( Stem("hams"), "ham");});
test("hamstrings -> hamstr", function() {deepEqual( Stem("hamstrings"), "hamstr");});
test("hand -> hand", function() {deepEqual( Stem("hand"), "hand");});
test("handcuff -> handcuff", function() {deepEqual( Stem("handcuff"), "handcuff");});
test("handcuffed -> handcuf", function() {deepEqual( Stem("handcuffed"), "handcuf");});
test("handcuffs -> handcuff", function() {deepEqual( Stem("handcuffs"), "handcuff");});
test("hande -> hand", function() {deepEqual( Stem("hande"), "hand");});
test("handed -> hand", function() {deepEqual( Stem("handed"), "hand");});
test("handeder -> handed", function() {deepEqual( Stem("handeder"), "handed");});
test("handel -> handel", function() {deepEqual( Stem("handel"), "handel");});
test("handful -> hand", function() {deepEqual( Stem("handful"), "hand");});
test("handfuls -> hand", function() {deepEqual( Stem("handfuls"), "hand");});
test("handing -> hand", function() {deepEqual( Stem("handing"), "hand");});
test("handkercher -> handkerch", function() {deepEqual( Stem("handkercher"), "handkerch");});
test("handkerchief -> handkerchief", function() {deepEqual( Stem("handkerchief"), "handkerchief");});
test("handkerchiefs -> handkerchief", function() {deepEqual( Stem("handkerchiefs"), "handkerchief");});
test("handle -> handl", function() {deepEqual( Stem("handle"), "handl");});
test("handled -> handl", function() {deepEqual( Stem("handled"), "handl");});
test("handles -> handl", function() {deepEqual( Stem("handles"), "handl");});
test("handling -> handl", function() {deepEqual( Stem("handling"), "handl");});
test("handmaid -> handmaid", function() {deepEqual( Stem("handmaid"), "handmaid");});
test("handmaiden -> handmaiden", function() {deepEqual( Stem("handmaiden"), "handmaiden");});
test("handrail -> handrail", function() {deepEqual( Stem("handrail"), "handrail");});
test("hands -> hand", function() {deepEqual( Stem("hands"), "hand");});
test("handsome -> handsom", function() {deepEqual( Stem("handsome"), "handsom");});
test("handsomely -> handsom", function() {deepEqual( Stem("handsomely"), "handsom");});
test("handsomer -> handsom", function() {deepEqual( Stem("handsomer"), "handsom");});
test("handsomest -> handsomest", function() {deepEqual( Stem("handsomest"), "handsomest");});
test("handwriting -> handwrit", function() {deepEqual( Stem("handwriting"), "handwrit");});
test("handy -> handi", function() {deepEqual( Stem("handy"), "handi");});
test("hang -> hang", function() {deepEqual( Stem("hang"), "hang");});
test("hangdog -> hangdog", function() {deepEqual( Stem("hangdog"), "hangdog");});
test("hanged -> hang", function() {deepEqual( Stem("hanged"), "hang");});
test("hanger -> hanger", function() {deepEqual( Stem("hanger"), "hanger");});
test("hangers -> hanger", function() {deepEqual( Stem("hangers"), "hanger");});
test("hanging -> hang", function() {deepEqual( Stem("hanging"), "hang");});
test("hangings -> hang", function() {deepEqual( Stem("hangings"), "hang");});
test("hangman -> hangman", function() {deepEqual( Stem("hangman"), "hangman");});
test("hangs -> hang", function() {deepEqual( Stem("hangs"), "hang");});
test("hankering -> hanker", function() {deepEqual( Stem("hankering"), "hanker");});
test("hankers -> hanker", function() {deepEqual( Stem("hankers"), "hanker");});
test("hannah -> hannah", function() {deepEqual( Stem("hannah"), "hannah");});
test("hanover -> hanov", function() {deepEqual( Stem("hanover"), "hanov");});
test("hansome -> hansom", function() {deepEqual( Stem("hansome"), "hansom");});
test("hap -> hap", function() {deepEqual( Stem("hap"), "hap");});
test("haphazard -> haphazard", function() {deepEqual( Stem("haphazard"), "haphazard");});
test("hapless -> hapless", function() {deepEqual( Stem("hapless"), "hapless");});
test("haply -> hapli", function() {deepEqual( Stem("haply"), "hapli");});
test("happen -> happen", function() {deepEqual( Stem("happen"), "happen");});
test("happened -> happen", function() {deepEqual( Stem("happened"), "happen");});
test("happening -> happen", function() {deepEqual( Stem("happening"), "happen");});
test("happens -> happen", function() {deepEqual( Stem("happens"), "happen");});
test("happerton -> happerton", function() {deepEqual( Stem("happerton"), "happerton");});
test("happertons -> happerton", function() {deepEqual( Stem("happertons"), "happerton");});
test("happier -> happier", function() {deepEqual( Stem("happier"), "happier");});
test("happiest -> happiest", function() {deepEqual( Stem("happiest"), "happiest");});
test("happily -> happili", function() {deepEqual( Stem("happily"), "happili");});
test("happiness -> happi", function() {deepEqual( Stem("happiness"), "happi");});
test("happy -> happi", function() {deepEqual( Stem("happy"), "happi");});
test("harangue -> harangu", function() {deepEqual( Stem("harangue"), "harangu");});
test("harangued -> harangu", function() {deepEqual( Stem("harangued"), "harangu");});
test("harass -> harass", function() {deepEqual( Stem("harass"), "harass");});
test("harassed -> harass", function() {deepEqual( Stem("harassed"), "harass");});
test("harassing -> harass", function() {deepEqual( Stem("harassing"), "harass");});
test("harbinger -> harbing", function() {deepEqual( Stem("harbinger"), "harbing");});
test("harbour -> harbour", function() {deepEqual( Stem("harbour"), "harbour");});
test("harboured -> harbour", function() {deepEqual( Stem("harboured"), "harbour");});
test("harbouring -> harbour", function() {deepEqual( Stem("harbouring"), "harbour");});
test("harbours -> harbour", function() {deepEqual( Stem("harbours"), "harbour");});
test("hard -> hard", function() {deepEqual( Stem("hard"), "hard");});
test("harden -> harden", function() {deepEqual( Stem("harden"), "harden");});
test("hardened -> harden", function() {deepEqual( Stem("hardened"), "harden");});
test("hardening -> harden", function() {deepEqual( Stem("hardening"), "harden");});
test("harder -> harder", function() {deepEqual( Stem("harder"), "harder");});
test("hardest -> hardest", function() {deepEqual( Stem("hardest"), "hardest");});
test("hardihood -> hardihood", function() {deepEqual( Stem("hardihood"), "hardihood");});
test("harding -> hard", function() {deepEqual( Stem("harding"), "hard");});
test("hardly -> hard", function() {deepEqual( Stem("hardly"), "hard");});
test("hardness -> hard", function() {deepEqual( Stem("hardness"), "hard");});
test("hardship -> hardship", function() {deepEqual( Stem("hardship"), "hardship");});
test("hardships -> hardship", function() {deepEqual( Stem("hardships"), "hardship");});
test("hardworking -> hardwork", function() {deepEqual( Stem("hardworking"), "hardwork");});
test("hardy -> hardi", function() {deepEqual( Stem("hardy"), "hardi");});
test("hare -> hare", function() {deepEqual( Stem("hare"), "hare");});
test("hares -> hare", function() {deepEqual( Stem("hares"), "hare");});
test("hareskin -> hareskin", function() {deepEqual( Stem("hareskin"), "hareskin");});
test("hark -> hark", function() {deepEqual( Stem("hark"), "hark");});
test("harkee -> harke", function() {deepEqual( Stem("harkee"), "harke");});
test("harkov -> harkov", function() {deepEqual( Stem("harkov"), "harkov");});
test("harkye -> harky", function() {deepEqual( Stem("harkye"), "harky");});
test("harlamov -> harlamov", function() {deepEqual( Stem("harlamov"), "harlamov");});
test("harlequin -> harlequin", function() {deepEqual( Stem("harlequin"), "harlequin");});
test("harlot -> harlot", function() {deepEqual( Stem("harlot"), "harlot");});
test("harm -> harm", function() {deepEqual( Stem("harm"), "harm");});
test("harmattan -> harmattan", function() {deepEqual( Stem("harmattan"), "harmattan");});
test("harmful -> harm", function() {deepEqual( Stem("harmful"), "harm");});
test("harmless -> harmless", function() {deepEqual( Stem("harmless"), "harmless");});
test("harmlessly -> harmless", function() {deepEqual( Stem("harmlessly"), "harmless");});
test("harmonic -> harmon", function() {deepEqual( Stem("harmonic"), "harmon");});
test("harmonious -> harmoni", function() {deepEqual( Stem("harmonious"), "harmoni");});
test("harmoniously -> harmoni", function() {deepEqual( Stem("harmoniously"), "harmoni");});
test("harmonised -> harmonis", function() {deepEqual( Stem("harmonised"), "harmonis");});
test("harmony -> harmoni", function() {deepEqual( Stem("harmony"), "harmoni");});
test("harn -> harn", function() {deepEqual( Stem("harn"), "harn");});
test("harness -> har", function() {deepEqual( Stem("harness"), "har");});
test("harnessed -> har", function() {deepEqual( Stem("harnessed"), "har");});
test("harnessing -> har", function() {deepEqual( Stem("harnessing"), "har");});
test("harold -> harold", function() {deepEqual( Stem("harold"), "harold");});
test("harp -> harp", function() {deepEqual( Stem("harp"), "harp");});
test("harpalidae -> harpalida", function() {deepEqual( Stem("harpalidae"), "harpalida");});
test("harpalus -> harpalus", function() {deepEqual( Stem("harpalus"), "harpalus");});
test("harpies -> harpi", function() {deepEqual( Stem("harpies"), "harpi");});
test("harping -> harp", function() {deepEqual( Stem("harping"), "harp");});
test("harps -> harp", function() {deepEqual( Stem("harps"), "harp");});
test("harpy -> harpi", function() {deepEqual( Stem("harpy"), "harpi");});
test("harriet -> harriet", function() {deepEqual( Stem("harriet"), "harriet");});
test("harriett -> harriett", function() {deepEqual( Stem("harriett"), "harriett");});
test("harrington -> harrington", function() {deepEqual( Stem("harrington"), "harrington");});
test("harris -> harri", function() {deepEqual( Stem("harris"), "harri");});
test("harrison -> harrison", function() {deepEqual( Stem("harrison"), "harrison");});
test("harrow -> harrow", function() {deepEqual( Stem("harrow"), "harrow");});
test("harrowgate -> harrowg", function() {deepEqual( Stem("harrowgate"), "harrowg");});
test("harrowing -> harrow", function() {deepEqual( Stem("harrowing"), "harrow");});
test("harrows -> harrow", function() {deepEqual( Stem("harrows"), "harrow");});
test("harse -> hars", function() {deepEqual( Stem("harse"), "hars");});
test("harsh -> harsh", function() {deepEqual( Stem("harsh"), "harsh");});
test("harsher -> harsher", function() {deepEqual( Stem("harsher"), "harsher");});
test("harshest -> harshest", function() {deepEqual( Stem("harshest"), "harshest");});
test("harshly -> harsh", function() {deepEqual( Stem("harshly"), "harsh");});
test("harshness -> harsh", function() {deepEqual( Stem("harshness"), "harsh");});
test("hart -> hart", function() {deepEqual( Stem("hart"), "hart");});
test("hartlepod -> hartlepod", function() {deepEqual( Stem("hartlepod"), "hartlepod");});
test("hartlepool -> hartlepool", function() {deepEqual( Stem("hartlepool"), "hartlepool");});
test("hartshorn -> hartshorn", function() {deepEqual( Stem("hartshorn"), "hartshorn");});
test("harum -> harum", function() {deepEqual( Stem("harum"), "harum");});
test("harurn -> harurn", function() {deepEqual( Stem("harurn"), "harurn");});
test("harvest -> harvest", function() {deepEqual( Stem("harvest"), "harvest");});
test("has -> has", function() {deepEqual( Stem("has"), "has");});
test("hash -> hash", function() {deepEqual( Stem("hash"), "hash");});
test("hashed -> hash", function() {deepEqual( Stem("hashed"), "hash");});
test("hasn -> hasn", function() {deepEqual( Stem("hasn"), "hasn");});
test("hasp -> hasp", function() {deepEqual( Stem("hasp"), "hasp");});
test("hassan -> hassan", function() {deepEqual( Stem("hassan"), "hassan");});
test("hast -> hast", function() {deepEqual( Stem("hast"), "hast");});
test("haste -> hast", function() {deepEqual( Stem("haste"), "hast");});
test("hasten -> hasten", function() {deepEqual( Stem("hasten"), "hasten");});
test("hastened -> hasten", function() {deepEqual( Stem("hastened"), "hasten");});
test("hastening -> hasten", function() {deepEqual( Stem("hastening"), "hasten");});
test("hastens -> hasten", function() {deepEqual( Stem("hastens"), "hasten");});
test("hastily -> hastili", function() {deepEqual( Stem("hastily"), "hastili");});
test("hasty -> hasti", function() {deepEqual( Stem("hasty"), "hasti");});
test("hat -> hat", function() {deepEqual( Stem("hat"), "hat");});
test("hatch -> hatch", function() {deepEqual( Stem("hatch"), "hatch");});
test("hatched -> hatch", function() {deepEqual( Stem("hatched"), "hatch");});
test("hatches -> hatch", function() {deepEqual( Stem("hatches"), "hatch");});
test("hatchet -> hatchet", function() {deepEqual( Stem("hatchet"), "hatchet");});
test("hatching -> hatch", function() {deepEqual( Stem("hatching"), "hatch");});
test("hatchings -> hatch", function() {deepEqual( Stem("hatchings"), "hatch");});
test("hatchment -> hatchment", function() {deepEqual( Stem("hatchment"), "hatchment");});
test("hate -> hate", function() {deepEqual( Stem("hate"), "hate");});
test("hated -> hate", function() {deepEqual( Stem("hated"), "hate");});
test("hateful -> hate", function() {deepEqual( Stem("hateful"), "hate");});
test("hater -> hater", function() {deepEqual( Stem("hater"), "hater");});
test("hates -> hate", function() {deepEqual( Stem("hates"), "hate");});
test("hath -> hath", function() {deepEqual( Stem("hath"), "hath");});
test("hating -> hate", function() {deepEqual( Stem("hating"), "hate");});
test("hatless -> hatless", function() {deepEqual( Stem("hatless"), "hatless");});
test("hatred -> hatr", function() {deepEqual( Stem("hatred"), "hatr");});
test("hatreds -> hatr", function() {deepEqual( Stem("hatreds"), "hatr");});
test("hats -> hat", function() {deepEqual( Stem("hats"), "hat");});
test("hatter -> hatter", function() {deepEqual( Stem("hatter"), "hatter");});
test("hatton -> hatton", function() {deepEqual( Stem("hatton"), "hatton");});
test("haughtiest -> haughtiest", function() {deepEqual( Stem("haughtiest"), "haughtiest");});
test("haughtily -> haughtili", function() {deepEqual( Stem("haughtily"), "haughtili");});
test("haughtiness -> haughti", function() {deepEqual( Stem("haughtiness"), "haughti");});
test("haughtinesses -> haughti", function() {deepEqual( Stem("haughtinesses"), "haughti");});
test("haughty -> haughti", function() {deepEqual( Stem("haughty"), "haughti");});
test("haul -> haul", function() {deepEqual( Stem("haul"), "haul");});
test("hauled -> haul", function() {deepEqual( Stem("hauled"), "haul");});
test("hauling -> haul", function() {deepEqual( Stem("hauling"), "haul");});
test("haunches -> haunch", function() {deepEqual( Stem("haunches"), "haunch");});
test("haunt -> haunt", function() {deepEqual( Stem("haunt"), "haunt");});
test("haunted -> haunt", function() {deepEqual( Stem("haunted"), "haunt");});
test("haunting -> haunt", function() {deepEqual( Stem("haunting"), "haunt");});
test("haunts -> haunt", function() {deepEqual( Stem("haunts"), "haunt");});
test("hav -> hav", function() {deepEqual( Stem("hav"), "hav");});
test("have -> have", function() {deepEqual( Stem("have"), "have");});
test("haven -> haven", function() {deepEqual( Stem("haven"), "haven");});
test("having -> have", function() {deepEqual( Stem("having"), "have");});
test("havoc -> havoc", function() {deepEqual( Stem("havoc"), "havoc");});
test("hawdon -> hawdon", function() {deepEqual( Stem("hawdon"), "hawdon");});
test("hawed -> haw", function() {deepEqual( Stem("hawed"), "haw");});
test("hawfinch -> hawfinch", function() {deepEqual( Stem("hawfinch"), "hawfinch");});
test("hawk -> hawk", function() {deepEqual( Stem("hawk"), "hawk");});
test("hawkinses -> hawkins", function() {deepEqual( Stem("hawkinses"), "hawkins");});
test("hawks -> hawk", function() {deepEqual( Stem("hawks"), "hawk");});
test("hawthorns -> hawthorn", function() {deepEqual( Stem("hawthorns"), "hawthorn");});
test("hay -> hay", function() {deepEqual( Stem("hay"), "hay");});
test("haycock -> haycock", function() {deepEqual( Stem("haycock"), "haycock");});
test("hayes -> hay", function() {deepEqual( Stem("hayes"), "hay");});
test("haymakers -> haymak", function() {deepEqual( Stem("haymakers"), "haymak");});
test("haymaking -> haymak", function() {deepEqual( Stem("haymaking"), "haymak");});
test("haymarket -> haymarket", function() {deepEqual( Stem("haymarket"), "haymarket");});
test("haystacks -> haystack", function() {deepEqual( Stem("haystacks"), "haystack");});
test("hazard -> hazard", function() {deepEqual( Stem("hazard"), "hazard");});
test("hazarded -> hazard", function() {deepEqual( Stem("hazarded"), "hazard");});
test("hazarding -> hazard", function() {deepEqual( Stem("hazarding"), "hazard");});
test("hazardous -> hazard", function() {deepEqual( Stem("hazardous"), "hazard");});
test("hazards -> hazard", function() {deepEqual( Stem("hazards"), "hazard");});
test("haze -> haze", function() {deepEqual( Stem("haze"), "haze");});
test("hazel -> hazel", function() {deepEqual( Stem("hazel"), "hazel");});
test("hazy -> hazi", function() {deepEqual( Stem("hazy"), "hazi");});
test("hd -> hd", function() {deepEqual( Stem("hd"), "hd");});
test("he -> he", function() {deepEqual( Stem("he"), "he");});
test("hea -> hea", function() {deepEqual( Stem("hea"), "hea");});
test("head -> head", function() {deepEqual( Stem("head"), "head");});
test("headache -> headach", function() {deepEqual( Stem("headache"), "headach");});
test("headaches -> headach", function() {deepEqual( Stem("headaches"), "headach");});
test("headdress -> headdress", function() {deepEqual( Stem("headdress"), "headdress");});
test("headed -> head", function() {deepEqual( Stem("headed"), "head");});
test("headgear -> headgear", function() {deepEqual( Stem("headgear"), "headgear");});
test("heading -> head", function() {deepEqual( Stem("heading"), "head");});
test("headland -> headland", function() {deepEqual( Stem("headland"), "headland");});
test("headlands -> headland", function() {deepEqual( Stem("headlands"), "headland");});
test("headless -> headless", function() {deepEqual( Stem("headless"), "headless");});
test("headlong -> headlong", function() {deepEqual( Stem("headlong"), "headlong");});
test("headmost -> headmost", function() {deepEqual( Stem("headmost"), "headmost");});
test("headquarters -> headquart", function() {deepEqual( Stem("headquarters"), "headquart");});
test("heads -> head", function() {deepEqual( Stem("heads"), "head");});
test("headstrong -> headstrong", function() {deepEqual( Stem("headstrong"), "headstrong");});
test("heal -> heal", function() {deepEqual( Stem("heal"), "heal");});
test("healed -> heal", function() {deepEqual( Stem("healed"), "heal");});
test("healing -> heal", function() {deepEqual( Stem("healing"), "heal");});
test("health -> health", function() {deepEqual( Stem("health"), "health");});
test("healthful -> health", function() {deepEqual( Stem("healthful"), "health");});
test("healthier -> healthier", function() {deepEqual( Stem("healthier"), "healthier");});
test("healthiness -> healthi", function() {deepEqual( Stem("healthiness"), "healthi");});
test("healths -> health", function() {deepEqual( Stem("healths"), "health");});
test("healthy -> healthi", function() {deepEqual( Stem("healthy"), "healthi");});
test("heap -> heap", function() {deepEqual( Stem("heap"), "heap");});
test("heaped -> heap", function() {deepEqual( Stem("heaped"), "heap");});
test("heaping -> heap", function() {deepEqual( Stem("heaping"), "heap");});
test("heaps -> heap", function() {deepEqual( Stem("heaps"), "heap");});
test("hear -> hear", function() {deepEqual( Stem("hear"), "hear");});
test("heard -> heard", function() {deepEqual( Stem("heard"), "heard");});
test("hearer -> hearer", function() {deepEqual( Stem("hearer"), "hearer");});
test("hearers -> hearer", function() {deepEqual( Stem("hearers"), "hearer");});
test("hearest -> hearest", function() {deepEqual( Stem("hearest"), "hearest");});
test("hearing -> hear", function() {deepEqual( Stem("hearing"), "hear");});
test("hearken -> hearken", function() {deepEqual( Stem("hearken"), "hearken");});
test("hearne -> hearn", function() {deepEqual( Stem("hearne"), "hearn");});
test("hears -> hear", function() {deepEqual( Stem("hears"), "hear");});
test("hearse -> hears", function() {deepEqual( Stem("hearse"), "hears");});
test("heart -> heart", function() {deepEqual( Stem("heart"), "heart");});
test("heartache -> heartach", function() {deepEqual( Stem("heartache"), "heartach");});
test("heartbroken -> heartbroken", function() {deepEqual( Stem("heartbroken"), "heartbroken");});
test("heartburns -> heartburn", function() {deepEqual( Stem("heartburns"), "heartburn");});
test("hearted -> heart", function() {deepEqual( Stem("hearted"), "heart");});
test("heartedest -> heartedest", function() {deepEqual( Stem("heartedest"), "heartedest");});
test("heartedness -> hearted", function() {deepEqual( Stem("heartedness"), "hearted");});
test("heartfelt -> heartfelt", function() {deepEqual( Stem("heartfelt"), "heartfelt");});
test("hearth -> hearth", function() {deepEqual( Stem("hearth"), "hearth");});
test("hearths -> hearth", function() {deepEqual( Stem("hearths"), "hearth");});
test("hearthstone -> hearthston", function() {deepEqual( Stem("hearthstone"), "hearthston");});
test("heartiest -> heartiest", function() {deepEqual( Stem("heartiest"), "heartiest");});
test("heartily -> heartili", function() {deepEqual( Stem("heartily"), "heartili");});
test("heartiness -> hearti", function() {deepEqual( Stem("heartiness"), "hearti");});
test("heartless -> heartless", function() {deepEqual( Stem("heartless"), "heartless");});
test("heartlessly -> heartless", function() {deepEqual( Stem("heartlessly"), "heartless");});
test("heartlessness -> heartless", function() {deepEqual( Stem("heartlessness"), "heartless");});
test("heartrending -> heartrend", function() {deepEqual( Stem("heartrending"), "heartrend");});
test("hearts -> heart", function() {deepEqual( Stem("hearts"), "heart");});
test("heartsease -> heartseas", function() {deepEqual( Stem("heartsease"), "heartseas");});
test("heartsore -> heartsor", function() {deepEqual( Stem("heartsore"), "heartsor");});
test("heartstrings -> heartstr", function() {deepEqual( Stem("heartstrings"), "heartstr");});
test("hearty -> hearti", function() {deepEqual( Stem("hearty"), "hearti");});
test("heat -> heat", function() {deepEqual( Stem("heat"), "heat");});
test("heated -> heat", function() {deepEqual( Stem("heated"), "heat");});
test("heater -> heater", function() {deepEqual( Stem("heater"), "heater");});
test("heath -> heath", function() {deepEqual( Stem("heath"), "heath");});
test("heathen -> heathen", function() {deepEqual( Stem("heathen"), "heathen");});
test("heather -> heather", function() {deepEqual( Stem("heather"), "heather");});
test("heaths -> heath", function() {deepEqual( Stem("heaths"), "heath");});
test("heav -> heav", function() {deepEqual( Stem("heav"), "heav");});
test("heave -> heav", function() {deepEqual( Stem("heave"), "heav");});
test("heaved -> heav", function() {deepEqual( Stem("heaved"), "heav");});
test("heaven -> heaven", function() {deepEqual( Stem("heaven"), "heaven");});
test("heavenly -> heaven", function() {deepEqual( Stem("heavenly"), "heaven");});
test("heavens -> heaven", function() {deepEqual( Stem("heavens"), "heaven");});
test("heaver -> heaver", function() {deepEqual( Stem("heaver"), "heaver");});
test("heaves -> heav", function() {deepEqual( Stem("heaves"), "heav");});
test("heavier -> heavier", function() {deepEqual( Stem("heavier"), "heavier");});
test("heaviest -> heaviest", function() {deepEqual( Stem("heaviest"), "heaviest");});
test("heavily -> heavili", function() {deepEqual( Stem("heavily"), "heavili");});
test("heaviness -> heavi", function() {deepEqual( Stem("heaviness"), "heavi");});
test("heaving -> heav", function() {deepEqual( Stem("heaving"), "heav");});
test("heavings -> heav", function() {deepEqual( Stem("heavings"), "heav");});
test("heavv -> heavv", function() {deepEqual( Stem("heavv"), "heavv");});
test("heavy -> heavi", function() {deepEqual( Stem("heavy"), "heavi");});
test("hebrew -> hebrew", function() {deepEqual( Stem("hebrew"), "hebrew");});
test("hecla -> hecla", function() {deepEqual( Stem("hecla"), "hecla");});
test("hectic -> hectic", function() {deepEqual( Stem("hectic"), "hectic");});
test("hectoring -> hector", function() {deepEqual( Stem("hectoring"), "hector");});
test("hedge -> hedg", function() {deepEqual( Stem("hedge"), "hedg");});
test("hedgehog -> hedgehog", function() {deepEqual( Stem("hedgehog"), "hedgehog");});
test("hedgerows -> hedgerow", function() {deepEqual( Stem("hedgerows"), "hedgerow");});
test("hedges -> hedg", function() {deepEqual( Stem("hedges"), "hedg");});
test("hedging -> hedg", function() {deepEqual( Stem("hedging"), "hedg");});
test("heed -> heed", function() {deepEqual( Stem("heed"), "heed");});
test("heeded -> heed", function() {deepEqual( Stem("heeded"), "heed");});
test("heeding -> heed", function() {deepEqual( Stem("heeding"), "heed");});
test("heedless -> heedless", function() {deepEqual( Stem("heedless"), "heedless");});
test("heedlessly -> heedless", function() {deepEqual( Stem("heedlessly"), "heedless");});
test("heedlessness -> heedless", function() {deepEqual( Stem("heedlessness"), "heedless");});
test("heeds -> heed", function() {deepEqual( Stem("heeds"), "heed");});
test("heel -> heel", function() {deepEqual( Stem("heel"), "heel");});
test("heeled -> heel", function() {deepEqual( Stem("heeled"), "heel");});
test("heels -> heel", function() {deepEqual( Stem("heels"), "heel");});
test("heerd -> heerd", function() {deepEqual( Stem("heerd"), "heerd");});
test("heern -> heern", function() {deepEqual( Stem("heern"), "heern");});
test("heigh -> heigh", function() {deepEqual( Stem("heigh"), "heigh");});
test("heigho -> heigho", function() {deepEqual( Stem("heigho"), "heigho");});
test("height -> height", function() {deepEqual( Stem("height"), "height");});
test("heighten -> heighten", function() {deepEqual( Stem("heighten"), "heighten");});
test("heightened -> heighten", function() {deepEqual( Stem("heightened"), "heighten");});
test("heightening -> heighten", function() {deepEqual( Stem("heightening"), "heighten");});
test("heightens -> heighten", function() {deepEqual( Stem("heightens"), "heighten");});
test("heighth -> heighth", function() {deepEqual( Stem("heighth"), "heighth");});
test("heights -> height", function() {deepEqual( Stem("heights"), "height");});
test("heinous -> heinous", function() {deepEqual( Stem("heinous"), "heinous");});
test("heir -> heir", function() {deepEqual( Stem("heir"), "heir");});
test("heiress -> heiress", function() {deepEqual( Stem("heiress"), "heiress");});
test("heiresses -> heiress", function() {deepEqual( Stem("heiresses"), "heiress");});
test("heirlooms -> heirloom", function() {deepEqual( Stem("heirlooms"), "heirloom");});
test("heirs -> heir", function() {deepEqual( Stem("heirs"), "heir");});
test("heirship -> heirship", function() {deepEqual( Stem("heirship"), "heirship");});
test("held -> held", function() {deepEqual( Stem("held"), "held");});
test("helden -> helden", function() {deepEqual( Stem("helden"), "helden");});
test("helen -> helen", function() {deepEqual( Stem("helen"), "helen");});
test("helena -> helena", function() {deepEqual( Stem("helena"), "helena");});
test("heliotrope -> heliotrop", function() {deepEqual( Stem("heliotrope"), "heliotrop");});
test("helix -> helix", function() {deepEqual( Stem("helix"), "helix");});
test("hell -> hell", function() {deepEqual( Stem("hell"), "hell");});
test("helm -> helm", function() {deepEqual( Stem("helm"), "helm");});
test("helmet -> helmet", function() {deepEqual( Stem("helmet"), "helmet");});
test("helmets -> helmet", function() {deepEqual( Stem("helmets"), "helmet");});
test("help -> help", function() {deepEqual( Stem("help"), "help");});
test("helped -> help", function() {deepEqual( Stem("helped"), "help");});
test("helper -> helper", function() {deepEqual( Stem("helper"), "helper");});
test("helpers -> helper", function() {deepEqual( Stem("helpers"), "helper");});
test("helpful -> help", function() {deepEqual( Stem("helpful"), "help");});
test("helping -> help", function() {deepEqual( Stem("helping"), "help");});
test("helpless -> helpless", function() {deepEqual( Stem("helpless"), "helpless");});
test("helplessly -> helpless", function() {deepEqual( Stem("helplessly"), "helpless");});
test("helplessness -> helpless", function() {deepEqual( Stem("helplessness"), "helpless");});
test("helpmate -> helpmat", function() {deepEqual( Stem("helpmate"), "helpmat");});
test("helps -> help", function() {deepEqual( Stem("helps"), "help");});
test("helvellyn -> helvellyn", function() {deepEqual( Stem("helvellyn"), "helvellyn");});
test("hem -> hem", function() {deepEqual( Stem("hem"), "hem");});
test("hemiptera -> hemiptera", function() {deepEqual( Stem("hemiptera"), "hemiptera");});
test("hemisphere -> hemispher", function() {deepEqual( Stem("hemisphere"), "hemispher");});
test("hemispheres -> hemispher", function() {deepEqual( Stem("hemispheres"), "hemispher");});
test("hemmed -> hem", function() {deepEqual( Stem("hemmed"), "hem");});
test("hemming -> hem", function() {deepEqual( Stem("hemming"), "hem");});
test("hempen -> hempen", function() {deepEqual( Stem("hempen"), "hempen");});
test("hen -> hen", function() {deepEqual( Stem("hen"), "hen");});
test("hence -> henc", function() {deepEqual( Stem("hence"), "henc");});
test("henceforth -> henceforth", function() {deepEqual( Stem("henceforth"), "henceforth");});
test("henceforward -> henceforward", function() {deepEqual( Stem("henceforward"), "henceforward");});
test("hend -> hend", function() {deepEqual( Stem("hend"), "hend");});
test("henemies -> henemi", function() {deepEqual( Stem("henemies"), "henemi");});
test("henrietta -> henrietta", function() {deepEqual( Stem("henrietta"), "henrietta");});
test("henriette -> henriett", function() {deepEqual( Stem("henriette"), "henriett");});
test("henry -> henri", function() {deepEqual( Stem("henry"), "henri");});
test("hens -> hen", function() {deepEqual( Stem("hens"), "hen");});
test("henslow -> henslow", function() {deepEqual( Stem("henslow"), "henslow");});
test("heptarchy -> heptarchi", function() {deepEqual( Stem("heptarchy"), "heptarchi");});
test("her -> her", function() {deepEqual( Stem("her"), "her");});
test("herald -> herald", function() {deepEqual( Stem("herald"), "herald");});
test("heralded -> herald", function() {deepEqual( Stem("heralded"), "herald");});
test("heraldic -> herald", function() {deepEqual( Stem("heraldic"), "herald");});
test("herb -> herb", function() {deepEqual( Stem("herb"), "herb");});
test("herbaceous -> herbac", function() {deepEqual( Stem("herbaceous"), "herbac");});
test("herbage -> herbag", function() {deepEqual( Stem("herbage"), "herbag");});
test("herbarium -> herbarium", function() {deepEqual( Stem("herbarium"), "herbarium");});
test("herbert -> herbert", function() {deepEqual( Stem("herbert"), "herbert");});
test("herbivorous -> herbivor", function() {deepEqual( Stem("herbivorous"), "herbivor");});
test("herbs -> herb", function() {deepEqual( Stem("herbs"), "herb");});
test("herculean -> herculean", function() {deepEqual( Stem("herculean"), "herculean");});
test("hercules -> hercul", function() {deepEqual( Stem("hercules"), "hercul");});
test("herd -> herd", function() {deepEqual( Stem("herd"), "herd");});
test("herds -> herd", function() {deepEqual( Stem("herds"), "herd");});
test("here -> here", function() {deepEqual( Stem("here"), "here");});
test("hereabouts -> hereabout", function() {deepEqual( Stem("hereabouts"), "hereabout");});
test("hereafter -> hereaft", function() {deepEqual( Stem("hereafter"), "hereaft");});
test("hereby -> herebi", function() {deepEqual( Stem("hereby"), "herebi");});
test("hereditary -> hereditari", function() {deepEqual( Stem("hereditary"), "hereditari");});
test("hereford -> hereford", function() {deepEqual( Stem("hereford"), "hereford");});
test("herein -> herein", function() {deepEqual( Stem("herein"), "herein");});
test("hereof -> hereof", function() {deepEqual( Stem("hereof"), "hereof");});
test("heresy -> heresi", function() {deepEqual( Stem("heresy"), "heresi");});
test("heretic -> heret", function() {deepEqual( Stem("heretic"), "heret");});
test("heretick -> heretick", function() {deepEqual( Stem("heretick"), "heretick");});
test("hereticks -> heretick", function() {deepEqual( Stem("hereticks"), "heretick");});
test("heretics -> heret", function() {deepEqual( Stem("heretics"), "heret");});
test("heretofore -> heretofor", function() {deepEqual( Stem("heretofore"), "heretofor");});
test("hereupon -> hereupon", function() {deepEqual( Stem("hereupon"), "hereupon");});
test("herewith -> herewith", function() {deepEqual( Stem("herewith"), "herewith");});
test("heritage -> heritag", function() {deepEqual( Stem("heritage"), "heritag");});
test("hermit -> hermit", function() {deepEqual( Stem("hermit"), "hermit");});
test("hermitage -> hermitag", function() {deepEqual( Stem("hermitage"), "hermitag");});
test("hero -> hero", function() {deepEqual( Stem("hero"), "hero");});
test("herod -> herod", function() {deepEqual( Stem("herod"), "herod");});
test("heroded -> herod", function() {deepEqual( Stem("heroded"), "herod");});
test("heroes -> hero", function() {deepEqual( Stem("heroes"), "hero");});
test("heroic -> heroic", function() {deepEqual( Stem("heroic"), "heroic");});
test("heroine -> heroin", function() {deepEqual( Stem("heroine"), "heroin");});
test("heroism -> heroism", function() {deepEqual( Stem("heroism"), "heroism");});
test("herons -> heron", function() {deepEqual( Stem("herons"), "heron");});
test("herries -> herri", function() {deepEqual( Stem("herries"), "herri");});
test("herrings -> herring", function() {deepEqual( Stem("herrings"), "herring");});
test("hers -> her", function() {deepEqual( Stem("hers"), "her");});
test("herschel -> herschel", function() {deepEqual( Stem("herschel"), "herschel");});
test("herself -> herself", function() {deepEqual( Stem("herself"), "herself");});
test("hertfordshire -> hertfordshir", function() {deepEqual( Stem("hertfordshire"), "hertfordshir");});
test("heruvimov -> heruvimov", function() {deepEqual( Stem("heruvimov"), "heruvimov");});
test("hesitate -> hesit", function() {deepEqual( Stem("hesitate"), "hesit");});
test("hesitated -> hesit", function() {deepEqual( Stem("hesitated"), "hesit");});
test("hesitates -> hesit", function() {deepEqual( Stem("hesitates"), "hesit");});
test("hesitating -> hesit", function() {deepEqual( Stem("hesitating"), "hesit");});
test("hesitatingly -> hesit", function() {deepEqual( Stem("hesitatingly"), "hesit");});
test("hesitation -> hesit", function() {deepEqual( Stem("hesitation"), "hesit");});
test("hesitations -> hesit", function() {deepEqual( Stem("hesitations"), "hesit");});
test("heterogeneous -> heterogen", function() {deepEqual( Stem("heterogeneous"), "heterogen");});
test("heteromera -> heteromera", function() {deepEqual( Stem("heteromera"), "heteromera");});
test("heteromerous -> heteromer", function() {deepEqual( Stem("heteromerous"), "heteromer");});
test("heteromidae -> heteromida", function() {deepEqual( Stem("heteromidae"), "heteromida");});
test("hever -> hever", function() {deepEqual( Stem("hever"), "hever");});
test("hew -> hew", function() {deepEqual( Stem("hew"), "hew");});
test("hewer -> hewer", function() {deepEqual( Stem("hewer"), "hewer");});
test("hewers -> hewer", function() {deepEqual( Stem("hewers"), "hewer");});
test("hewing -> hew", function() {deepEqual( Stem("hewing"), "hew");});
test("hey -> hey", function() {deepEqual( Stem("hey"), "hey");});
test("heyday -> heyday", function() {deepEqual( Stem("heyday"), "heyday");});
test("hi -> hi", function() {deepEqual( Stem("hi"), "hi");});
test("hiatus -> hiatus", function() {deepEqual( Stem("hiatus"), "hiatus");});
test("hibiscus -> hibiscus", function() {deepEqual( Stem("hibiscus"), "hibiscus");});
test("hiccup -> hiccup", function() {deepEqual( Stem("hiccup"), "hiccup");});
test("hiccuped -> hiccup", function() {deepEqual( Stem("hiccuped"), "hiccup");});
test("hid -> hid", function() {deepEqual( Stem("hid"), "hid");});
test("hidden -> hidden", function() {deepEqual( Stem("hidden"), "hidden");});
test("hide -> hide", function() {deepEqual( Stem("hide"), "hide");});
test("hideous -> hideous", function() {deepEqual( Stem("hideous"), "hideous");});
test("hideously -> hideous", function() {deepEqual( Stem("hideously"), "hideous");});
test("hideousness -> hideous", function() {deepEqual( Stem("hideousness"), "hideous");});
test("hides -> hide", function() {deepEqual( Stem("hides"), "hide");});
test("hiding -> hide", function() {deepEqual( Stem("hiding"), "hide");});
test("hierarchy -> hierarchi", function() {deepEqual( Stem("hierarchy"), "hierarchi");});
test("hieroglyphics -> hieroglyph", function() {deepEqual( Stem("hieroglyphics"), "hieroglyph");});
test("higgenbottom -> higgenbottom", function() {deepEqual( Stem("higgenbottom"), "higgenbottom");});
test("higgins -> higgin", function() {deepEqual( Stem("higgins"), "higgin");});
test("high -> high", function() {deepEqual( Stem("high"), "high");});
test("higher -> higher", function() {deepEqual( Stem("higher"), "higher");});
test("highest -> highest", function() {deepEqual( Stem("highest"), "highest");});
test("highfaluting -> highfalut", function() {deepEqual( Stem("highfaluting"), "highfalut");});
test("highgate -> highgat", function() {deepEqual( Stem("highgate"), "highgat");});
test("highl -> highl", function() {deepEqual( Stem("highl"), "highl");});
test("highland -> highland", function() {deepEqual( Stem("highland"), "highland");});
test("highlanders -> highland", function() {deepEqual( Stem("highlanders"), "highland");});
test("highlands -> highland", function() {deepEqual( Stem("highlands"), "highland");});
test("highly -> high", function() {deepEqual( Stem("highly"), "high");});
test("highness -> high", function() {deepEqual( Stem("highness"), "high");});
test("highroad -> highroad", function() {deepEqual( Stem("highroad"), "highroad");});
test("highway -> highway", function() {deepEqual( Stem("highway"), "highway");});
test("highwayman -> highwayman", function() {deepEqual( Stem("highwayman"), "highwayman");});
test("highways -> highway", function() {deepEqual( Stem("highways"), "highway");});
test("hignominiousness -> hignomini", function() {deepEqual( Stem("hignominiousness"), "hignomini");});
test("hilaire -> hilair", function() {deepEqual( Stem("hilaire"), "hilair");});
test("hilarious -> hilari", function() {deepEqual( Stem("hilarious"), "hilari");});
test("hilariously -> hilari", function() {deepEqual( Stem("hilariously"), "hilari");});
test("hilarity -> hilar", function() {deepEqual( Stem("hilarity"), "hilar");});
test("hilda -> hilda", function() {deepEqual( Stem("hilda"), "hilda");});
test("hill -> hill", function() {deepEqual( Stem("hill"), "hill");});
test("hillock -> hillock", function() {deepEqual( Stem("hillock"), "hillock");});
test("hillocks -> hillock", function() {deepEqual( Stem("hillocks"), "hillock");});
test("hills -> hill", function() {deepEqual( Stem("hills"), "hill");});
test("hillsides -> hillsid", function() {deepEqual( Stem("hillsides"), "hillsid");});
test("hilltops -> hilltop", function() {deepEqual( Stem("hilltops"), "hilltop");});
test("hilly -> hilli", function() {deepEqual( Stem("hilly"), "hilli");});
test("hilt -> hilt", function() {deepEqual( Stem("hilt"), "hilt");});
test("hilts -> hilt", function() {deepEqual( Stem("hilts"), "hilt");});
test("him -> him", function() {deepEqual( Stem("him"), "him");});
test("himalaya -> himalaya", function() {deepEqual( Stem("himalaya"), "himalaya");});
test("himantopus -> himantopus", function() {deepEqual( Stem("himantopus"), "himantopus");});
test("himsel -> himsel", function() {deepEqual( Stem("himsel"), "himsel");});
test("himself -> himself", function() {deepEqual( Stem("himself"), "himself");});
test("hind -> hind", function() {deepEqual( Stem("hind"), "hind");});
test("hinder -> hinder", function() {deepEqual( Stem("hinder"), "hinder");});
test("hindered -> hinder", function() {deepEqual( Stem("hindered"), "hinder");});
test("hindering -> hinder", function() {deepEqual( Stem("hindering"), "hinder");});
test("hindoos -> hindoo", function() {deepEqual( Stem("hindoos"), "hindoo");});
test("hindrance -> hindranc", function() {deepEqual( Stem("hindrance"), "hindranc");});
test("hinds -> hind", function() {deepEqual( Stem("hinds"), "hind");});
test("hindu -> hindu", function() {deepEqual( Stem("hindu"), "hindu");});
test("hing -> hing", function() {deepEqual( Stem("hing"), "hing");});
test("hinges -> hing", function() {deepEqual( Stem("hinges"), "hing");});
test("hint -> hint", function() {deepEqual( Stem("hint"), "hint");});
test("hinted -> hint", function() {deepEqual( Stem("hinted"), "hint");});
test("hinting -> hint", function() {deepEqual( Stem("hinting"), "hint");});
test("hints -> hint", function() {deepEqual( Stem("hints"), "hint");});
test("hip -> hip", function() {deepEqual( Stem("hip"), "hip");});
test("hippah -> hippah", function() {deepEqual( Stem("hippah"), "hippah");});
test("hippahs -> hippah", function() {deepEqual( Stem("hippahs"), "hippah");});
test("hipped -> hip", function() {deepEqual( Stem("hipped"), "hip");});
test("hippish -> hippish", function() {deepEqual( Stem("hippish"), "hippish");});
test("hippopotamus -> hippopotamus", function() {deepEqual( Stem("hippopotamus"), "hippopotamus");});
test("hippopotamuses -> hippopotamus", function() {deepEqual( Stem("hippopotamuses"), "hippopotamus");});
test("hips -> hip", function() {deepEqual( Stem("hips"), "hip");});
test("hire -> hire", function() {deepEqual( Stem("hire"), "hire");});
test("hired -> hire", function() {deepEqual( Stem("hired"), "hire");});
test("hiring -> hire", function() {deepEqual( Stem("hiring"), "hire");});
test("hirrold -> hirrold", function() {deepEqual( Stem("hirrold"), "hirrold");});
test("his -> his", function() {deepEqual( Stem("his"), "his");});
test("hiss -> hiss", function() {deepEqual( Stem("hiss"), "hiss");});
test("hisself -> hisself", function() {deepEqual( Stem("hisself"), "hisself");});
test("hisses -> hiss", function() {deepEqual( Stem("hisses"), "hiss");});
test("hissing -> hiss", function() {deepEqual( Stem("hissing"), "hiss");});
test("hist -> hist", function() {deepEqual( Stem("hist"), "hist");});
test("histoire -> histoir", function() {deepEqual( Stem("histoire"), "histoir");});
test("historian -> historian", function() {deepEqual( Stem("historian"), "historian");});
test("historical -> histor", function() {deepEqual( Stem("historical"), "histor");});
test("historically -> histor", function() {deepEqual( Stem("historically"), "histor");});
test("histories -> histori", function() {deepEqual( Stem("histories"), "histori");});
test("history -> histori", function() {deepEqual( Stem("history"), "histori");});
test("histrionic -> histrion", function() {deepEqual( Stem("histrionic"), "histrion");});
test("hit -> hit", function() {deepEqual( Stem("hit"), "hit");});
test("hitch -> hitch", function() {deepEqual( Stem("hitch"), "hitch");});
test("hitchcock -> hitchcock", function() {deepEqual( Stem("hitchcock"), "hitchcock");});
test("hitched -> hitch", function() {deepEqual( Stem("hitched"), "hitch");});
test("hitches -> hitch", function() {deepEqual( Stem("hitches"), "hitch");});
test("hitching -> hitch", function() {deepEqual( Stem("hitching"), "hitch");});
test("hither -> hither", function() {deepEqual( Stem("hither"), "hither");});
test("hitherto -> hitherto", function() {deepEqual( Stem("hitherto"), "hitherto");});
test("hitherward -> hitherward", function() {deepEqual( Stem("hitherward"), "hitherward");});
test("hits -> hit", function() {deepEqual( Stem("hits"), "hit");});
test("hitting -> hit", function() {deepEqual( Stem("hitting"), "hit");});
test("hittites -> hittit", function() {deepEqual( Stem("hittites"), "hittit");});
test("hive -> hive", function() {deepEqual( Stem("hive"), "hive");});
test("hl -> hl", function() {deepEqual( Stem("hl"), "hl");});
test("hm -> hm", function() {deepEqual( Stem("hm"), "hm");});
test("ho -> ho", function() {deepEqual( Stem("ho"), "ho");});
test("hoar -> hoar", function() {deepEqual( Stem("hoar"), "hoar");});
test("hoard -> hoard", function() {deepEqual( Stem("hoard"), "hoard");});
test("hoarded -> hoard", function() {deepEqual( Stem("hoarded"), "hoard");});
test("hoarding -> hoard", function() {deepEqual( Stem("hoarding"), "hoard");});
test("hoardings -> hoard", function() {deepEqual( Stem("hoardings"), "hoard");});
test("hoards -> hoard", function() {deepEqual( Stem("hoards"), "hoard");});
test("hoarse -> hoars", function() {deepEqual( Stem("hoarse"), "hoars");});
test("hoarsely -> hoars", function() {deepEqual( Stem("hoarsely"), "hoars");});
test("hoarser -> hoarser", function() {deepEqual( Stem("hoarser"), "hoarser");});
test("hoary -> hoari", function() {deepEqual( Stem("hoary"), "hoari");});
test("hob -> hob", function() {deepEqual( Stem("hob"), "hob");});
test("hobart -> hobart", function() {deepEqual( Stem("hobart"), "hobart");});
test("hobbled -> hobbl", function() {deepEqual( Stem("hobbled"), "hobbl");});
test("hobbledehoy -> hobbledehoy", function() {deepEqual( Stem("hobbledehoy"), "hobbledehoy");});
test("hobbles -> hobbl", function() {deepEqual( Stem("hobbles"), "hobbl");});
test("hobbling -> hobbl", function() {deepEqual( Stem("hobbling"), "hobbl");});
test("hobby -> hobbi", function() {deepEqual( Stem("hobby"), "hobbi");});
test("hobgoblin -> hobgoblin", function() {deepEqual( Stem("hobgoblin"), "hobgoblin");});
test("hoch -> hoch", function() {deepEqual( Stem("hoch"), "hoch");});
test("hochbeseeltes -> hochbeseelt", function() {deepEqual( Stem("hochbeseeltes"), "hochbeseelt");});
test("hock -> hock", function() {deepEqual( Stem("hock"), "hock");});
test("hod -> hod", function() {deepEqual( Stem("hod"), "hod");});
test("hof -> hof", function() {deepEqual( Stem("hof"), "hof");});
test("hoffmanseggi -> hoffmanseggi", function() {deepEqual( Stem("hoffmanseggi"), "hoffmanseggi");});
test("hog -> hog", function() {deepEqual( Stem("hog"), "hog");});
test("hogoleu -> hogoleu", function() {deepEqual( Stem("hogoleu"), "hogoleu");});
test("hogs -> hog", function() {deepEqual( Stem("hogs"), "hog");});
test("hoist -> hoist", function() {deepEqual( Stem("hoist"), "hoist");});
test("hoisted -> hoist", function() {deepEqual( Stem("hoisted"), "hoist");});
test("hoity -> hoiti", function() {deepEqual( Stem("hoity"), "hoiti");});
test("holborn -> holborn", function() {deepEqual( Stem("holborn"), "holborn");});
test("hold -> hold", function() {deepEqual( Stem("hold"), "hold");});
test("holden -> holden", function() {deepEqual( Stem("holden"), "holden");});
test("holder -> holder", function() {deepEqual( Stem("holder"), "holder");});
test("holders -> holder", function() {deepEqual( Stem("holders"), "holder");});
test("holding -> hold", function() {deepEqual( Stem("holding"), "hold");});
test("holds -> hold", function() {deepEqual( Stem("holds"), "hold");});
test("hole -> hole", function() {deepEqual( Stem("hole"), "hole");});
test("holes -> hole", function() {deepEqual( Stem("holes"), "hole");});
test("holiday -> holiday", function() {deepEqual( Stem("holiday"), "holiday");});
test("holidays -> holiday", function() {deepEqual( Stem("holidays"), "holiday");});
test("holies -> holi", function() {deepEqual( Stem("holies"), "holi");});
test("holily -> holili", function() {deepEqual( Stem("holily"), "holili");});
test("holiness -> holi", function() {deepEqual( Stem("holiness"), "holi");});
test("holland -> holland", function() {deepEqual( Stem("holland"), "holland");});
test("hollies -> holli", function() {deepEqual( Stem("hollies"), "holli");});
test("hollo -> hollo", function() {deepEqual( Stem("hollo"), "hollo");});
test("holloa -> holloa", function() {deepEqual( Stem("holloa"), "holloa");});
test("hollow -> hollow", function() {deepEqual( Stem("hollow"), "hollow");});
test("holloway -> holloway", function() {deepEqual( Stem("holloway"), "holloway");});
test("hollowed -> hollow", function() {deepEqual( Stem("hollowed"), "hollow");});
test("hollower -> hollow", function() {deepEqual( Stem("hollower"), "hollow");});
test("hollowness -> hollow", function() {deepEqual( Stem("hollowness"), "hollow");});
test("hollows -> hollow", function() {deepEqual( Stem("hollows"), "hollow");});
test("holly -> holli", function() {deepEqual( Stem("holly"), "holli");});
test("holman -> holman", function() {deepEqual( Stem("holman"), "holman");});
test("holstein -> holstein", function() {deepEqual( Stem("holstein"), "holstein");});
test("holuthuriae -> holuthuria", function() {deepEqual( Stem("holuthuriae"), "holuthuria");});
test("holy -> holi", function() {deepEqual( Stem("holy"), "holi");});
test("holyhead -> holyhead", function() {deepEqual( Stem("holyhead"), "holyhead");});
test("homage -> homag", function() {deepEqual( Stem("homage"), "homag");});
test("hombre -> hombr", function() {deepEqual( Stem("hombre"), "hombr");});
test("home -> home", function() {deepEqual( Stem("home"), "home");});
test("homeless -> homeless", function() {deepEqual( Stem("homeless"), "homeless");});
test("homelessness -> homeless", function() {deepEqual( Stem("homelessness"), "homeless");});
test("homelike -> homelik", function() {deepEqual( Stem("homelike"), "homelik");});
test("homely -> home", function() {deepEqual( Stem("homely"), "home");});
test("homes -> home", function() {deepEqual( Stem("homes"), "home");});
test("homeward -> homeward", function() {deepEqual( Stem("homeward"), "homeward");});
test("homewards -> homeward", function() {deepEqual( Stem("homewards"), "homeward");});
test("homicidal -> homicid", function() {deepEqual( Stem("homicidal"), "homicid");});
test("homily -> homili", function() {deepEqual( Stem("homily"), "homili");});
test("homoptera -> homoptera", function() {deepEqual( Stem("homoptera"), "homoptera");});
test("hon -> hon", function() {deepEqual( Stem("hon"), "hon");});
test("hond -> hond", function() {deepEqual( Stem("hond"), "hond");});
test("honds -> hond", function() {deepEqual( Stem("honds"), "hond");});
test("honest -> honest", function() {deepEqual( Stem("honest"), "honest");});
test("honester -> honest", function() {deepEqual( Stem("honester"), "honest");});
test("honestest -> honestest", function() {deepEqual( Stem("honestest"), "honestest");});
test("honestly -> honest", function() {deepEqual( Stem("honestly"), "honest");});
test("honesty -> honesti", function() {deepEqual( Stem("honesty"), "honesti");});
test("honey -> honey", function() {deepEqual( Stem("honey"), "honey");});
test("honeymoon -> honeymoon", function() {deepEqual( Stem("honeymoon"), "honeymoon");});
test("honeysuckle -> honeysuckl", function() {deepEqual( Stem("honeysuckle"), "honeysuckl");});
test("hong -> hong", function() {deepEqual( Stem("hong"), "hong");});
test("honoria -> honoria", function() {deepEqual( Stem("honoria"), "honoria");});
test("honour -> honour", function() {deepEqual( Stem("honour"), "honour");});
test("honourable -> honour", function() {deepEqual( Stem("honourable"), "honour");});
test("honourably -> honour", function() {deepEqual( Stem("honourably"), "honour");});
test("honourahle -> honourahl", function() {deepEqual( Stem("honourahle"), "honourahl");});
test("honoured -> honour", function() {deepEqual( Stem("honoured"), "honour");});
test("honouring -> honour", function() {deepEqual( Stem("honouring"), "honour");});
test("honourmg -> honourmg", function() {deepEqual( Stem("honourmg"), "honourmg");});
test("honours -> honour", function() {deepEqual( Stem("honours"), "honour");});
test("honysuckles -> honysuckl", function() {deepEqual( Stem("honysuckles"), "honysuckl");});
test("hoo -> hoo", function() {deepEqual( Stem("hoo"), "hoo");});
test("hood -> hood", function() {deepEqual( Stem("hood"), "hood");});
test("hooded -> hood", function() {deepEqual( Stem("hooded"), "hood");});
test("hoodle -> hoodl", function() {deepEqual( Stem("hoodle"), "hoodl");});
test("hoodwinked -> hoodwink", function() {deepEqual( Stem("hoodwinked"), "hoodwink");});
test("hoof -> hoof", function() {deepEqual( Stem("hoof"), "hoof");});
test("hoofs -> hoof", function() {deepEqual( Stem("hoofs"), "hoof");});
test("hook -> hook", function() {deepEqual( Stem("hook"), "hook");});
test("hooked -> hook", function() {deepEqual( Stem("hooked"), "hook");});
test("hooker -> hooker", function() {deepEqual( Stem("hooker"), "hooker");});
test("hooking -> hook", function() {deepEqual( Stem("hooking"), "hook");});
test("hookites -> hookit", function() {deepEqual( Stem("hookites"), "hookit");});
test("hooks -> hook", function() {deepEqual( Stem("hooks"), "hook");});
test("hoold -> hoold", function() {deepEqual( Stem("hoold"), "hoold");});
test("hoonger -> hoonger", function() {deepEqual( Stem("hoonger"), "hoonger");});
test("hoongry -> hoongri", function() {deepEqual( Stem("hoongry"), "hoongri");});
test("hoop -> hoop", function() {deepEqual( Stem("hoop"), "hoop");});
test("hooping -> hoop", function() {deepEqual( Stem("hooping"), "hoop");});
test("hoops -> hoop", function() {deepEqual( Stem("hoops"), "hoop");});
test("hoor -> hoor", function() {deepEqual( Stem("hoor"), "hoor");});
test("hooray -> hooray", function() {deepEqual( Stem("hooray"), "hooray");});
test("hoorly -> hoor", function() {deepEqual( Stem("hoorly"), "hoor");});
test("hooted -> hoot", function() {deepEqual( Stem("hooted"), "hoot");});
test("hooting -> hoot", function() {deepEqual( Stem("hooting"), "hoot");});
test("hootings -> hoot", function() {deepEqual( Stem("hootings"), "hoot");});
test("hoots -> hoot", function() {deepEqual( Stem("hoots"), "hoot");});
test("hop -> hop", function() {deepEqual( Stem("hop"), "hop");});
test("hope -> hope", function() {deepEqual( Stem("hope"), "hope");});
test("hoped -> hope", function() {deepEqual( Stem("hoped"), "hope");});
test("hopeful -> hope", function() {deepEqual( Stem("hopeful"), "hope");});
test("hopefully -> hope", function() {deepEqual( Stem("hopefully"), "hope");});
test("hopefulness -> hope", function() {deepEqual( Stem("hopefulness"), "hope");});
test("hopeless -> hopeless", function() {deepEqual( Stem("hopeless"), "hopeless");});
test("hopelessly -> hopeless", function() {deepEqual( Stem("hopelessly"), "hopeless");});
test("hopelessness -> hopeless", function() {deepEqual( Stem("hopelessness"), "hopeless");});
test("hopes -> hope", function() {deepEqual( Stem("hopes"), "hope");});
test("hoping -> hope", function() {deepEqual( Stem("hoping"), "hope");});
test("hopped -> hop", function() {deepEqual( Stem("hopped"), "hop");});
test("hopping -> hop", function() {deepEqual( Stem("hopping"), "hop");});
test("hops -> hop", function() {deepEqual( Stem("hops"), "hop");});
test("horatio -> horatio", function() {deepEqual( Stem("horatio"), "horatio");});
test("horders -> horder", function() {deepEqual( Stem("horders"), "horder");});
test("horizon -> horizon", function() {deepEqual( Stem("horizon"), "horizon");});
test("horizonta -> horizonta", function() {deepEqual( Stem("horizonta"), "horizonta");});
test("horizontal -> horizont", function() {deepEqual( Stem("horizontal"), "horizont");});
test("horizontally -> horizont", function() {deepEqual( Stem("horizontally"), "horizont");});
test("horn -> horn", function() {deepEqual( Stem("horn"), "horn");});
test("horned -> horn", function() {deepEqual( Stem("horned"), "horn");});
test("horner -> horner", function() {deepEqual( Stem("horner"), "horner");});
test("hornet -> hornet", function() {deepEqual( Stem("hornet"), "hornet");});
test("hornos -> horno", function() {deepEqual( Stem("hornos"), "horno");});
test("hornpipe -> hornpip", function() {deepEqual( Stem("hornpipe"), "hornpip");});
test("hornpipes -> hornpip", function() {deepEqual( Stem("hornpipes"), "hornpip");});
test("horns -> horn", function() {deepEqual( Stem("horns"), "horn");});
test("hornsey -> hornsey", function() {deepEqual( Stem("hornsey"), "hornsey");});
test("horny -> horni", function() {deepEqual( Stem("horny"), "horni");});
test("horrible -> horribl", function() {deepEqual( Stem("horrible"), "horribl");});
test("horribly -> horribl", function() {deepEqual( Stem("horribly"), "horribl");});
test("horrid -> horrid", function() {deepEqual( Stem("horrid"), "horrid");});
test("horridly -> horrid", function() {deepEqual( Stem("horridly"), "horrid");});
test("horrified -> horrifi", function() {deepEqual( Stem("horrified"), "horrifi");});
test("horror -> horror", function() {deepEqual( Stem("horror"), "horror");});
test("horrors -> horror", function() {deepEqual( Stem("horrors"), "horror");});
test("horse -> hors", function() {deepEqual( Stem("horse"), "hors");});
test("horseback -> horseback", function() {deepEqual( Stem("horseback"), "horseback");});
test("horsecloths -> horsecloth", function() {deepEqual( Stem("horsecloths"), "horsecloth");});
test("horseflesh -> horseflesh", function() {deepEqual( Stem("horseflesh"), "horseflesh");});
test("horsefly -> horsefli", function() {deepEqual( Stem("horsefly"), "horsefli");});
test("horsehair -> horsehair", function() {deepEqual( Stem("horsehair"), "horsehair");});
test("horseman -> horseman", function() {deepEqual( Stem("horseman"), "horseman");});
test("horsemanship -> horsemanship", function() {deepEqual( Stem("horsemanship"), "horsemanship");});
test("horsemen -> horsemen", function() {deepEqual( Stem("horsemen"), "horsemen");});
test("horsepittle -> horsepittl", function() {deepEqual( Stem("horsepittle"), "horsepittl");});
test("horses -> hors", function() {deepEqual( Stem("horses"), "hors");});
test("horsewhip -> horsewhip", function() {deepEqual( Stem("horsewhip"), "horsewhip");});
test("horsewhipped -> horsewhip", function() {deepEqual( Stem("horsewhipped"), "horsewhip");});
test("horsewhipping -> horsewhip", function() {deepEqual( Stem("horsewhipping"), "horsewhip");});
test("hortense -> hortens", function() {deepEqual( Stem("hortense"), "hortens");});
test("hortensio -> hortensio", function() {deepEqual( Stem("hortensio"), "hortensio");});
test("horticultural -> horticultur", function() {deepEqual( Stem("horticultural"), "horticultur");});
test("horticulture -> horticultur", function() {deepEqual( Stem("horticulture"), "horticultur");});
test("hose -> hose", function() {deepEqual( Stem("hose"), "hose");});
test("hospitable -> hospit", function() {deepEqual( Stem("hospitable"), "hospit");});
test("hospitably -> hospit", function() {deepEqual( Stem("hospitably"), "hospit");});
test("hospital -> hospit", function() {deepEqual( Stem("hospital"), "hospit");});
test("hospitalities -> hospit", function() {deepEqual( Stem("hospitalities"), "hospit");});
test("hospitality -> hospit", function() {deepEqual( Stem("hospitality"), "hospit");});
test("hospitals -> hospit", function() {deepEqual( Stem("hospitals"), "hospit");});
test("hospitility -> hospitil", function() {deepEqual( Stem("hospitility"), "hospitil");});
test("host -> host", function() {deepEqual( Stem("host"), "host");});
test("hostages -> hostag", function() {deepEqual( Stem("hostages"), "hostag");});
test("hoste -> host", function() {deepEqual( Stem("hoste"), "host");});
test("hostelry -> hostelri", function() {deepEqual( Stem("hostelry"), "hostelri");});
test("hostess -> hostess", function() {deepEqual( Stem("hostess"), "hostess");});
test("hostesses -> hostess", function() {deepEqual( Stem("hostesses"), "hostess");});
test("hostile -> hostil", function() {deepEqual( Stem("hostile"), "hostil");});
test("hostilities -> hostil", function() {deepEqual( Stem("hostilities"), "hostil");});
test("hostility -> hostil", function() {deepEqual( Stem("hostility"), "hostil");});
test("hostlers -> hostler", function() {deepEqual( Stem("hostlers"), "hostler");});
test("hosts -> host", function() {deepEqual( Stem("hosts"), "host");});
test("hot -> hot", function() {deepEqual( Stem("hot"), "hot");});
test("hotel -> hotel", function() {deepEqual( Stem("hotel"), "hotel");});
test("hotels -> hotel", function() {deepEqual( Stem("hotels"), "hotel");});
test("hothouse -> hothous", function() {deepEqual( Stem("hothouse"), "hothous");});
test("hotly -> hot", function() {deepEqual( Stem("hotly"), "hot");});
test("hottentot -> hottentot", function() {deepEqual( Stem("hottentot"), "hottentot");});
test("hottentots -> hottentot", function() {deepEqual( Stem("hottentots"), "hottentot");});
test("hotter -> hotter", function() {deepEqual( Stem("hotter"), "hotter");});
test("hottest -> hottest", function() {deepEqual( Stem("hottest"), "hottest");});
test("hou -> hou", function() {deepEqual( Stem("hou"), "hou");});
test("hound -> hound", function() {deepEqual( Stem("hound"), "hound");});
test("hounded -> hound", function() {deepEqual( Stem("hounded"), "hound");});
test("hounding -> hound", function() {deepEqual( Stem("hounding"), "hound");});
test("hounds -> hound", function() {deepEqual( Stem("hounds"), "hound");});
test("hour -> hour", function() {deepEqual( Stem("hour"), "hour");});
test("houri -> houri", function() {deepEqual( Stem("houri"), "houri");});
test("hourly -> hour", function() {deepEqual( Stem("hourly"), "hour");});
test("hours -> hour", function() {deepEqual( Stem("hours"), "hour");});
test("house -> hous", function() {deepEqual( Stem("house"), "hous");});
test("housebreaker -> housebreak", function() {deepEqual( Stem("housebreaker"), "housebreak");});
test("housebuilder -> housebuild", function() {deepEqual( Stem("housebuilder"), "housebuild");});
test("housed -> hous", function() {deepEqual( Stem("housed"), "hous");});
test("household -> household", function() {deepEqual( Stem("household"), "household");});
test("housekeeper -> housekeep", function() {deepEqual( Stem("housekeeper"), "housekeep");});
test("housekeepers -> housekeep", function() {deepEqual( Stem("housekeepers"), "housekeep");});
test("housekeeping -> housekeep", function() {deepEqual( Stem("housekeeping"), "housekeep");});
test("housemaid -> housemaid", function() {deepEqual( Stem("housemaid"), "housemaid");});
test("housemaids -> housemaid", function() {deepEqual( Stem("housemaids"), "housemaid");});
test("housemaker -> housemak", function() {deepEqual( Stem("housemaker"), "housemak");});
test("houses -> hous", function() {deepEqual( Stem("houses"), "hous");});
test("housetops -> housetop", function() {deepEqual( Stem("housetops"), "housetop");});
test("housewife -> housewif", function() {deepEqual( Stem("housewife"), "housewif");});
test("housewifery -> housewiferi", function() {deepEqual( Stem("housewifery"), "housewiferi");});
test("hove -> hove", function() {deepEqual( Stem("hove"), "hove");});
test("hovel -> hovel", function() {deepEqual( Stem("hovel"), "hovel");});
test("hovels -> hovel", function() {deepEqual( Stem("hovels"), "hovel");});
test("hover -> hover", function() {deepEqual( Stem("hover"), "hover");});
test("hovered -> hover", function() {deepEqual( Stem("hovered"), "hover");});
test("hovering -> hover", function() {deepEqual( Stem("hovering"), "hover");});
test("hovers -> hover", function() {deepEqual( Stem("hovers"), "hover");});
test("how -> how", function() {deepEqual( Stem("how"), "how");});
test("howard -> howard", function() {deepEqual( Stem("howard"), "howard");});
test("howbeit -> howbeit", function() {deepEqual( Stem("howbeit"), "howbeit");});
test("howell -> howel", function() {deepEqual( Stem("howell"), "howel");});
test("howeve -> howev", function() {deepEqual( Stem("howeve"), "howev");});
test("however -> howev", function() {deepEqual( Stem("however"), "howev");});
test("howitt -> howitt", function() {deepEqual( Stem("howitt"), "howitt");});
test("howl -> howl", function() {deepEqual( Stem("howl"), "howl");});
test("howled -> howl", function() {deepEqual( Stem("howled"), "howl");});
test("howling -> howl", function() {deepEqual( Stem("howling"), "howl");});
test("howls -> howl", function() {deepEqual( Stem("howls"), "howl");});
test("howsoever -> howsoev", function() {deepEqual( Stem("howsoever"), "howsoev");});
test("huacas -> huaca", function() {deepEqual( Stem("huacas"), "huaca");});
test("huachos -> huacho", function() {deepEqual( Stem("huachos"), "huacho");});
test("huantamo -> huantamo", function() {deepEqual( Stem("huantamo"), "huantamo");});
test("huapi -> huapi", function() {deepEqual( Stem("huapi"), "huapi");});
test("huaraz -> huaraz", function() {deepEqual( Stem("huaraz"), "huaraz");});
test("hubbard -> hubbard", function() {deepEqual( Stem("hubbard"), "hubbard");});
test("hubbub -> hubbub", function() {deepEqual( Stem("hubbub"), "hubbub");});
test("huckster -> huckster", function() {deepEqual( Stem("huckster"), "huckster");});
test("huddled -> huddl", function() {deepEqual( Stem("huddled"), "huddl");});
test("hue -> hue", function() {deepEqual( Stem("hue"), "hue");});
test("huechucucuy -> huechucucuy", function() {deepEqual( Stem("huechucucuy"), "huechucucuy");});
test("hues -> hue", function() {deepEqual( Stem("hues"), "hue");});
test("huff -> huff", function() {deepEqual( Stem("huff"), "huff");});
test("huffily -> huffili", function() {deepEqual( Stem("huffily"), "huffili");});
test("huffy -> huffi", function() {deepEqual( Stem("huffy"), "huffi");});
test("hug -> hug", function() {deepEqual( Stem("hug"), "hug");});
test("huge -> huge", function() {deepEqual( Stem("huge"), "huge");});
test("hugged -> hug", function() {deepEqual( Stem("hugged"), "hug");});
test("hugging -> hug", function() {deepEqual( Stem("hugging"), "hug");});
test("huggins -> huggin", function() {deepEqual( Stem("huggins"), "huggin");});
test("hugh -> hugh", function() {deepEqual( Stem("hugh"), "hugh");});
test("hugs -> hug", function() {deepEqual( Stem("hugs"), "hug");});
test("huitreu -> huitreu", function() {deepEqual( Stem("huitreu"), "huitreu");});
test("hulk -> hulk", function() {deepEqual( Stem("hulk"), "hulk");});
test("hullo -> hullo", function() {deepEqual( Stem("hullo"), "hullo");});
test("hulloa -> hulloa", function() {deepEqual( Stem("hulloa"), "hulloa");});
test("hum -> hum", function() {deepEqual( Stem("hum"), "hum");});
test("humain -> humain", function() {deepEqual( Stem("humain"), "humain");});
test("humaine -> humain", function() {deepEqual( Stem("humaine"), "humain");});
test("human -> human", function() {deepEqual( Stem("human"), "human");});
test("humane -> human", function() {deepEqual( Stem("humane"), "human");});
test("humanely -> human", function() {deepEqual( Stem("humanely"), "human");});
test("humanising -> humanis", function() {deepEqual( Stem("humanising"), "humanis");});
test("humanity -> human", function() {deepEqual( Stem("humanity"), "human");});
test("humanizing -> human", function() {deepEqual( Stem("humanizing"), "human");});
test("humanly -> human", function() {deepEqual( Stem("humanly"), "human");});
test("humanum -> humanum", function() {deepEqual( Stem("humanum"), "humanum");});
test("humble -> humbl", function() {deepEqual( Stem("humble"), "humbl");});
test("humbled -> humbl", function() {deepEqual( Stem("humbled"), "humbl");});
test("humbleness -> humbl", function() {deepEqual( Stem("humbleness"), "humbl");});
test("humbler -> humbler", function() {deepEqual( Stem("humbler"), "humbler");});
test("humblest -> humblest", function() {deepEqual( Stem("humblest"), "humblest");});
test("humbling -> humbl", function() {deepEqual( Stem("humbling"), "humbl");});
test("humbly -> humbl", function() {deepEqual( Stem("humbly"), "humbl");});
test("humboldt -> humboldt", function() {deepEqual( Stem("humboldt"), "humboldt");});
test("humbug -> humbug", function() {deepEqual( Stem("humbug"), "humbug");});
test("humbugging -> humbug", function() {deepEqual( Stem("humbugging"), "humbug");});
test("humdrum -> humdrum", function() {deepEqual( Stem("humdrum"), "humdrum");});
test("humid -> humid", function() {deepEqual( Stem("humid"), "humid");});
test("humidity -> humid", function() {deepEqual( Stem("humidity"), "humid");});
test("humiliate -> humili", function() {deepEqual( Stem("humiliate"), "humili");});
test("humiliated -> humili", function() {deepEqual( Stem("humiliated"), "humili");});
test("humiliating -> humili", function() {deepEqual( Stem("humiliating"), "humili");});
test("humiliation -> humili", function() {deepEqual( Stem("humiliation"), "humili");});
test("humility -> humil", function() {deepEqual( Stem("humility"), "humil");});
test("hummed -> hum", function() {deepEqual( Stem("hummed"), "hum");});
test("humming -> hum", function() {deepEqual( Stem("humming"), "hum");});
test("hummingbirds -> hummingbird", function() {deepEqual( Stem("hummingbirds"), "hummingbird");});
test("hummocks -> hummock", function() {deepEqual( Stem("hummocks"), "hummock");});
test("humorous -> humor", function() {deepEqual( Stem("humorous"), "humor");});
test("humorously -> humor", function() {deepEqual( Stem("humorously"), "humor");});
test("humour -> humour", function() {deepEqual( Stem("humour"), "humour");});
test("humoured -> humour", function() {deepEqual( Stem("humoured"), "humour");});
test("humouredly -> humour", function() {deepEqual( Stem("humouredly"), "humour");});
test("humouring -> humour", function() {deepEqual( Stem("humouring"), "humour");});
test("humours -> humour", function() {deepEqual( Stem("humours"), "humour");});
test("hump -> hump", function() {deepEqual( Stem("hump"), "hump");});
test("humph -> humph", function() {deepEqual( Stem("humph"), "humph");});
test("hums -> hum", function() {deepEqual( Stem("hums"), "hum");});
test("hunchback -> hunchback", function() {deepEqual( Stem("hunchback"), "hunchback");});
test("hundred -> hundr", function() {deepEqual( Stem("hundred"), "hundr");});
test("hundreds -> hundr", function() {deepEqual( Stem("hundreds"), "hundr");});
test("hundredth -> hundredth", function() {deepEqual( Stem("hundredth"), "hundredth");});
test("hundredweight -> hundredweight", function() {deepEqual( Stem("hundredweight"), "hundredweight");});
test("hung -> hung", function() {deepEqual( Stem("hung"), "hung");});
test("hunger -> hunger", function() {deepEqual( Stem("hunger"), "hunger");});
test("hungering -> hunger", function() {deepEqual( Stem("hungering"), "hunger");});
test("hungry -> hungri", function() {deepEqual( Stem("hungry"), "hungri");});
test("hunks -> hunk", function() {deepEqual( Stem("hunks"), "hunk");});
test("hunky -> hunki", function() {deepEqual( Stem("hunky"), "hunki");});
test("hunt -> hunt", function() {deepEqual( Stem("hunt"), "hunt");});
test("hunted -> hunt", function() {deepEqual( Stem("hunted"), "hunt");});
test("hunter -> hunter", function() {deepEqual( Stem("hunter"), "hunter");});
test("hunters -> hunter", function() {deepEqual( Stem("hunters"), "hunter");});
test("hunting -> hunt", function() {deepEqual( Stem("hunting"), "hunt");});
test("hunts -> hunt", function() {deepEqual( Stem("hunts"), "hunt");});
test("huntsman -> huntsman", function() {deepEqual( Stem("huntsman"), "huntsman");});
test("huntsmen -> huntsmen", function() {deepEqual( Stem("huntsmen"), "huntsmen");});
test("hurled -> hurl", function() {deepEqual( Stem("hurled"), "hurl");});
test("hurly -> hur", function() {deepEqual( Stem("hurly"), "hur");});
test("hurrah -> hurrah", function() {deepEqual( Stem("hurrah"), "hurrah");});
test("hurrahed -> hurrah", function() {deepEqual( Stem("hurrahed"), "hurrah");});
test("hurrahs -> hurrah", function() {deepEqual( Stem("hurrahs"), "hurrah");});
test("hurricane -> hurrican", function() {deepEqual( Stem("hurricane"), "hurrican");});
test("hurried -> hurri", function() {deepEqual( Stem("hurried"), "hurri");});
test("hurriedly -> hurri", function() {deepEqual( Stem("hurriedly"), "hurri");});
test("hurries -> hurri", function() {deepEqual( Stem("hurries"), "hurri");});
test("hurry -> hurri", function() {deepEqual( Stem("hurry"), "hurri");});
test("hurrying -> hurri", function() {deepEqual( Stem("hurrying"), "hurri");});
test("hurt -> hurt", function() {deepEqual( Stem("hurt"), "hurt");});
test("hurtado -> hurtado", function() {deepEqual( Stem("hurtado"), "hurtado");});
test("hurting -> hurt", function() {deepEqual( Stem("hurting"), "hurt");});
test("hurts -> hurt", function() {deepEqual( Stem("hurts"), "hurt");});
test("husband -> husband", function() {deepEqual( Stem("husband"), "husband");});
test("husbanded -> husband", function() {deepEqual( Stem("husbanded"), "husband");});
test("husbandman -> husbandman", function() {deepEqual( Stem("husbandman"), "husbandman");});
test("husbands -> husband", function() {deepEqual( Stem("husbands"), "husband");});
test("hush -> hush", function() {deepEqual( Stem("hush"), "hush");});
test("hushed -> hush", function() {deepEqual( Stem("hushed"), "hush");});
test("hushing -> hush", function() {deepEqual( Stem("hushing"), "hush");});
test("husk -> husk", function() {deepEqual( Stem("husk"), "husk");});
test("huskily -> huskili", function() {deepEqual( Stem("huskily"), "huskili");});
test("huskiness -> huski", function() {deepEqual( Stem("huskiness"), "huski");});
test("husky -> huski", function() {deepEqual( Stem("husky"), "huski");});
test("hussar -> hussar", function() {deepEqual( Stem("hussar"), "hussar");});
test("hussy -> hussi", function() {deepEqual( Stem("hussy"), "hussi");});
test("hustings -> hust", function() {deepEqual( Stem("hustings"), "hust");});
test("hustle -> hustl", function() {deepEqual( Stem("hustle"), "hustl");});
test("hustled -> hustl", function() {deepEqual( Stem("hustled"), "hustl");});
test("hustling -> hustl", function() {deepEqual( Stem("hustling"), "hustl");});
test("hut -> hut", function() {deepEqual( Stem("hut"), "hut");});
test("hutch -> hutch", function() {deepEqual( Stem("hutch"), "hutch");});
test("huts -> hut", function() {deepEqual( Stem("huts"), "hut");});
test("hutton -> hutton", function() {deepEqual( Stem("hutton"), "hutton");});
test("hy -> hy", function() {deepEqual( Stem("hy"), "hy");});
test("hyacinth -> hyacinth", function() {deepEqual( Stem("hyacinth"), "hyacinth");});
test("hyacinths -> hyacinth", function() {deepEqual( Stem("hyacinths"), "hyacinth");});
test("hyaena -> hyaena", function() {deepEqual( Stem("hyaena"), "hyaena");});
test("hybernate -> hybern", function() {deepEqual( Stem("hybernate"), "hybern");});
test("hybernating -> hybern", function() {deepEqual( Stem("hybernating"), "hybern");});
test("hybernation -> hybern", function() {deepEqual( Stem("hybernation"), "hybern");});
test("hybrid -> hybrid", function() {deepEqual( Stem("hybrid"), "hybrid");});
test("hybrida -> hybrida", function() {deepEqual( Stem("hybrida"), "hybrida");});
test("hyde -> hyde", function() {deepEqual( Stem("hyde"), "hyde");});
test("hydra -> hydra", function() {deepEqual( Stem("hydra"), "hydra");});
test("hydraulic -> hydraul", function() {deepEqual( Stem("hydraulic"), "hydraul");});
test("hydrobius -> hydrobius", function() {deepEqual( Stem("hydrobius"), "hydrobius");});
test("hydrochaerus -> hydrochaerus", function() {deepEqual( Stem("hydrochaerus"), "hydrochaerus");});
test("hydrogen -> hydrogen", function() {deepEqual( Stem("hydrogen"), "hydrogen");});
test("hydrographer -> hydrograph", function() {deepEqual( Stem("hydrographer"), "hydrograph");});
test("hydrophilidae -> hydrophilida", function() {deepEqual( Stem("hydrophilidae"), "hydrophilida");});
test("hydrophilus -> hydrophilus", function() {deepEqual( Stem("hydrophilus"), "hydrophilus");});
test("hydrophobia -> hydrophobia", function() {deepEqual( Stem("hydrophobia"), "hydrophobia");});
test("hydroporus -> hydroporus", function() {deepEqual( Stem("hydroporus"), "hydroporus");});
test("hygrometer -> hygromet", function() {deepEqual( Stem("hygrometer"), "hygromet");});
test("hyla -> hyla", function() {deepEqual( Stem("hyla"), "hyla");});
test("hymenophallus -> hymenophallus", function() {deepEqual( Stem("hymenophallus"), "hymenophallus");});
test("hymenoptera -> hymenoptera", function() {deepEqual( Stem("hymenoptera"), "hymenoptera");});
test("hymenopterous -> hymenopter", function() {deepEqual( Stem("hymenopterous"), "hymenopter");});
test("hymn -> hymn", function() {deepEqual( Stem("hymn"), "hymn");});
test("hymns -> hymn", function() {deepEqual( Stem("hymns"), "hymn");});
test("hyperbolical -> hyperbol", function() {deepEqual( Stem("hyperbolical"), "hyperbol");});
test("hyperion -> hyperion", function() {deepEqual( Stem("hyperion"), "hyperion");});
test("hypochondria -> hypochondria", function() {deepEqual( Stem("hypochondria"), "hypochondria");});
test("hypochondriac -> hypochondriac", function() {deepEqual( Stem("hypochondriac"), "hypochondriac");});
test("hypochondriacal -> hypochondriac", function() {deepEqual( Stem("hypochondriacal"), "hypochondriac");});
test("hypocrisy -> hypocrisi", function() {deepEqual( Stem("hypocrisy"), "hypocrisi");});
test("hypocrite -> hypocrit", function() {deepEqual( Stem("hypocrite"), "hypocrit");});
test("hypocritical -> hypocrit", function() {deepEqual( Stem("hypocritical"), "hypocrit");});
test("hypocritically -> hypocrit", function() {deepEqual( Stem("hypocritically"), "hypocrit");});
test("hypotheses -> hypothes", function() {deepEqual( Stem("hypotheses"), "hypothes");});
test("hypothesis -> hypothesi", function() {deepEqual( Stem("hypothesis"), "hypothesi");});
test("hypothetical -> hypothet", function() {deepEqual( Stem("hypothetical"), "hypothet");});
test("hyseters -> hyset", function() {deepEqual( Stem("hyseters"), "hyset");});
test("hysteric -> hyster", function() {deepEqual( Stem("hysteric"), "hyster");});
test("hysterical -> hyster", function() {deepEqual( Stem("hysterical"), "hyster");});
test("hysterically -> hyster", function() {deepEqual( Stem("hysterically"), "hyster");});
test("hysterics -> hyster", function() {deepEqual( Stem("hysterics"), "hyster");});
test("i -> i", function() {deepEqual( Stem("i"), "i");});
test("iagoensis -> iagoensi", function() {deepEqual( Stem("iagoensis"), "iagoensi");});
test("ibis -> ibi", function() {deepEqual( Stem("ibis"), "ibi");});
test("ica -> ica", function() {deepEqual( Stem("ica"), "ica");});
test("ice -> ice", function() {deepEqual( Stem("ice"), "ice");});
test("iceberg -> iceberg", function() {deepEqual( Stem("iceberg"), "iceberg");});
test("icebergs -> iceberg", function() {deepEqual( Stem("icebergs"), "iceberg");});
test("iced -> ice", function() {deepEqual( Stem("iced"), "ice");});
test("iceland -> iceland", function() {deepEqual( Stem("iceland"), "iceland");});
test("ices -> ice", function() {deepEqual( Stem("ices"), "ice");});
test("ich -> ich", function() {deepEqual( Stem("ich"), "ich");});
test("icterus -> icterus", function() {deepEqual( Stem("icterus"), "icterus");});
test("icy -> ici", function() {deepEqual( Stem("icy"), "ici");});
test("ide -> ide", function() {deepEqual( Stem("ide"), "ide");});
test("idea -> idea", function() {deepEqual( Stem("idea"), "idea");});
test("ideal -> ideal", function() {deepEqual( Stem("ideal"), "ideal");});
test("idealism -> ideal", function() {deepEqual( Stem("idealism"), "ideal");});
test("idealist -> idealist", function() {deepEqual( Stem("idealist"), "idealist");});
test("ideality -> ideal", function() {deepEqual( Stem("ideality"), "ideal");});
test("ideals -> ideal", function() {deepEqual( Stem("ideals"), "ideal");});
test("ideas -> idea", function() {deepEqual( Stem("ideas"), "idea");});
test("identical -> ident", function() {deepEqual( Stem("identical"), "ident");});
test("identically -> ident", function() {deepEqual( Stem("identically"), "ident");});
test("identification -> identif", function() {deepEqual( Stem("identification"), "identif");});
test("identified -> identifi", function() {deepEqual( Stem("identified"), "identifi");});
test("identifles -> identifl", function() {deepEqual( Stem("identifles"), "identifl");});
test("identifying -> identifi", function() {deepEqual( Stem("identifying"), "identifi");});
test("identity -> ident", function() {deepEqual( Stem("identity"), "ident");});
test("idiocy -> idioci", function() {deepEqual( Stem("idiocy"), "idioci");});
test("idiosyncrasies -> idiosyncrasi", function() {deepEqual( Stem("idiosyncrasies"), "idiosyncrasi");});
test("idiosyncrasy -> idiosyncrasi", function() {deepEqual( Stem("idiosyncrasy"), "idiosyncrasi");});
test("idiot -> idiot", function() {deepEqual( Stem("idiot"), "idiot");});
test("idiotcy -> idiotci", function() {deepEqual( Stem("idiotcy"), "idiotci");});
test("idiotic -> idiot", function() {deepEqual( Stem("idiotic"), "idiot");});
test("idiotically -> idiot", function() {deepEqual( Stem("idiotically"), "idiot");});
test("idiots -> idiot", function() {deepEqual( Stem("idiots"), "idiot");});
test("idle -> idl", function() {deepEqual( Stem("idle"), "idl");});
test("idleness -> idl", function() {deepEqual( Stem("idleness"), "idl");});
test("idlers -> idler", function() {deepEqual( Stem("idlers"), "idler");});
test("idlest -> idlest", function() {deepEqual( Stem("idlest"), "idlest");});
test("idling -> idl", function() {deepEqual( Stem("idling"), "idl");});
test("idly -> idl", function() {deepEqual( Stem("idly"), "idl");});
test("idol -> idol", function() {deepEqual( Stem("idol"), "idol");});
test("idolatrous -> idolatr", function() {deepEqual( Stem("idolatrous"), "idolatr");});
test("idolatry -> idolatri", function() {deepEqual( Stem("idolatry"), "idolatri");});
test("idolized -> idol", function() {deepEqual( Stem("idolized"), "idol");});
test("ie -> ie", function() {deepEqual( Stem("ie"), "ie");});
test("ied -> ie", function() {deepEqual( Stem("ied"), "ie");});
test("if -> if", function() {deepEqual( Stem("if"), "if");});
test("ies -> ie", function() {deepEqual( Stem("ies"), "ie");});
test("ight -> ight", function() {deepEqual( Stem("ight"), "ight");});
test("ighway -> ighway", function() {deepEqual( Stem("ighway"), "ighway");});
test("igneous -> igneous", function() {deepEqual( Stem("igneous"), "igneous");});
test("ignited -> ignit", function() {deepEqual( Stem("ignited"), "ignit");});
test("igniting -> ignit", function() {deepEqual( Stem("igniting"), "ignit");});
test("ignoble -> ignobl", function() {deepEqual( Stem("ignoble"), "ignobl");});
test("ignominious -> ignomini", function() {deepEqual( Stem("ignominious"), "ignomini");});
test("ignominy -> ignomini", function() {deepEqual( Stem("ignominy"), "ignomini");});
test("ignoramuses -> ignoramus", function() {deepEqual( Stem("ignoramuses"), "ignoramus");});
test("ignorance -> ignor", function() {deepEqual( Stem("ignorance"), "ignor");});
test("ignorant -> ignor", function() {deepEqual( Stem("ignorant"), "ignor");});
test("ignorantly -> ignor", function() {deepEqual( Stem("ignorantly"), "ignor");});
test("ignore -> ignor", function() {deepEqual( Stem("ignore"), "ignor");});
test("ignored -> ignor", function() {deepEqual( Stem("ignored"), "ignor");});
test("ignoring -> ignor", function() {deepEqual( Stem("ignoring"), "ignor");});
test("iguana -> iguana", function() {deepEqual( Stem("iguana"), "iguana");});
test("ii -> ii", function() {deepEqual( Stem("ii"), "ii");});
test("iii -> iii", function() {deepEqual( Stem("iii"), "iii");});
test("ikon -> ikon", function() {deepEqual( Stem("ikon"), "ikon");});
test("ikons -> ikon", function() {deepEqual( Stem("ikons"), "ikon");});
test("il -> il", function() {deepEqual( Stem("il"), "il");});
test("iles -> ile", function() {deepEqual( Stem("iles"), "ile");});
test("ill -> ill", function() {deepEqual( Stem("ill"), "ill");});
test("illapel -> illapel", function() {deepEqual( Stem("illapel"), "illapel");});
test("illegible -> illeg", function() {deepEqual( Stem("illegible"), "illeg");});
test("illegitimate -> illegitim", function() {deepEqual( Stem("illegitimate"), "illegitim");});
test("illiberal -> illiber", function() {deepEqual( Stem("illiberal"), "illiber");});
test("illig -> illig", function() {deepEqual( Stem("illig"), "illig");});
test("illimitable -> illimit", function() {deepEqual( Stem("illimitable"), "illimit");});
test("illiterate -> illiter", function() {deepEqual( Stem("illiterate"), "illiter");});
test("illness -> ill", function() {deepEqual( Stem("illness"), "ill");});
test("illnesses -> ill", function() {deepEqual( Stem("illnesses"), "ill");});
test("illuminate -> illumin", function() {deepEqual( Stem("illuminate"), "illumin");});
test("illuminated -> illumin", function() {deepEqual( Stem("illuminated"), "illumin");});
test("illuminating -> illumin", function() {deepEqual( Stem("illuminating"), "illumin");});
test("illumined -> illumin", function() {deepEqual( Stem("illumined"), "illumin");});
test("illusion -> illus", function() {deepEqual( Stem("illusion"), "illus");});
test("illusions -> illus", function() {deepEqual( Stem("illusions"), "illus");});
test("illustrated -> illustr", function() {deepEqual( Stem("illustrated"), "illustr");});
test("illustrates -> illustr", function() {deepEqual( Stem("illustrates"), "illustr");});
test("illustrating -> illustr", function() {deepEqual( Stem("illustrating"), "illustr");});
test("illustration -> illustr", function() {deepEqual( Stem("illustration"), "illustr");});
test("illustrations -> illustr", function() {deepEqual( Stem("illustrations"), "illustr");});
test("illustrative -> illustr", function() {deepEqual( Stem("illustrative"), "illustr");});
test("illustrious -> illustri", function() {deepEqual( Stem("illustrious"), "illustri");});
test("ils -> il", function() {deepEqual( Stem("ils"), "il");});
test("ilya -> ilya", function() {deepEqual( Stem("ilya"), "ilya");});
test("image -> imag", function() {deepEqual( Stem("image"), "imag");});
test("images -> imag", function() {deepEqual( Stem("images"), "imag");});
test("imaginable -> imagin", function() {deepEqual( Stem("imaginable"), "imagin");});
test("imaginary -> imaginari", function() {deepEqual( Stem("imaginary"), "imaginari");});
test("imagination -> imagin", function() {deepEqual( Stem("imagination"), "imagin");});
test("imaginative -> imagin", function() {deepEqual( Stem("imaginative"), "imagin");});
test("imagine -> imagin", function() {deepEqual( Stem("imagine"), "imagin");});
test("imagined -> imagin", function() {deepEqual( Stem("imagined"), "imagin");});
test("imagines -> imagin", function() {deepEqual( Stem("imagines"), "imagin");});
test("imagining -> imagin", function() {deepEqual( Stem("imagining"), "imagin");});
test("imaginings -> imagin", function() {deepEqual( Stem("imaginings"), "imagin");});
test("imbecile -> imbecil", function() {deepEqual( Stem("imbecile"), "imbecil");});
test("imbecility -> imbecil", function() {deepEqual( Stem("imbecility"), "imbecil");});
test("imbedded -> imbed", function() {deepEqual( Stem("imbedded"), "imbed");});
test("imbibed -> imbib", function() {deepEqual( Stem("imbibed"), "imbib");});
test("imbue -> imbu", function() {deepEqual( Stem("imbue"), "imbu");});
test("imbued -> imbu", function() {deepEqual( Stem("imbued"), "imbu");});
test("imeantersay -> imeantersay", function() {deepEqual( Stem("imeantersay"), "imeantersay");});
test("imitate -> imit", function() {deepEqual( Stem("imitate"), "imit");});
test("imitated -> imit", function() {deepEqual( Stem("imitated"), "imit");});
test("imitating -> imit", function() {deepEqual( Stem("imitating"), "imit");});
test("imitation -> imit", function() {deepEqual( Stem("imitation"), "imit");});
test("imitations -> imit", function() {deepEqual( Stem("imitations"), "imit");});
test("imitative -> imit", function() {deepEqual( Stem("imitative"), "imit");});
test("imitator -> imit", function() {deepEqual( Stem("imitator"), "imit");});
test("immaculate -> immacul", function() {deepEqual( Stem("immaculate"), "immacul");});
test("immaterial -> immateri", function() {deepEqual( Stem("immaterial"), "immateri");});
test("immature -> immatur", function() {deepEqual( Stem("immature"), "immatur");});
test("immeasurable -> immeasur", function() {deepEqual( Stem("immeasurable"), "immeasur");});
test("immeasurably -> immeasur", function() {deepEqual( Stem("immeasurably"), "immeasur");});
test("immediate -> immedi", function() {deepEqual( Stem("immediate"), "immedi");});
test("immediately -> immedi", function() {deepEqual( Stem("immediately"), "immedi");});
test("immemorial -> immemori", function() {deepEqual( Stem("immemorial"), "immemori");});
test("immense -> immens", function() {deepEqual( Stem("immense"), "immens");});
test("immensely -> immens", function() {deepEqual( Stem("immensely"), "immens");});
test("immensity -> immens", function() {deepEqual( Stem("immensity"), "immens");});
test("immensus -> immensus", function() {deepEqual( Stem("immensus"), "immensus");});
test("immersed -> immers", function() {deepEqual( Stem("immersed"), "immers");});
test("immersion -> immers", function() {deepEqual( Stem("immersion"), "immers");});
test("immigrants -> immigr", function() {deepEqual( Stem("immigrants"), "immigr");});
test("imminent -> immin", function() {deepEqual( Stem("imminent"), "immin");});
test("immoderate -> immoder", function() {deepEqual( Stem("immoderate"), "immoder");});
test("immolate -> immol", function() {deepEqual( Stem("immolate"), "immol");});
test("immolation -> immol", function() {deepEqual( Stem("immolation"), "immol");});
test("immoral -> immor", function() {deepEqual( Stem("immoral"), "immor");});
test("immorality -> immor", function() {deepEqual( Stem("immorality"), "immor");});
test("immortal -> immort", function() {deepEqual( Stem("immortal"), "immort");});
test("immortality -> immort", function() {deepEqual( Stem("immortality"), "immort");});
test("immovability -> immov", function() {deepEqual( Stem("immovability"), "immov");});
test("immovable -> immov", function() {deepEqual( Stem("immovable"), "immov");});
test("immovably -> immov", function() {deepEqual( Stem("immovably"), "immov");});
test("immoveable -> immov", function() {deepEqual( Stem("immoveable"), "immov");});
test("immured -> immur", function() {deepEqual( Stem("immured"), "immur");});
test("immutability -> immut", function() {deepEqual( Stem("immutability"), "immut");});
test("immutable -> immut", function() {deepEqual( Stem("immutable"), "immut");});
test("imp -> imp", function() {deepEqual( Stem("imp"), "imp");});
test("impair -> impair", function() {deepEqual( Stem("impair"), "impair");});
test("impaired -> impair", function() {deepEqual( Stem("impaired"), "impair");});
test("impairing -> impair", function() {deepEqual( Stem("impairing"), "impair");});
test("impaling -> impal", function() {deepEqual( Stem("impaling"), "impal");});
test("impalpable -> impalp", function() {deepEqual( Stem("impalpable"), "impalp");});
test("impalpably -> impalp", function() {deepEqual( Stem("impalpably"), "impalp");});
test("impanelled -> impanel", function() {deepEqual( Stem("impanelled"), "impanel");});
test("impart -> impart", function() {deepEqual( Stem("impart"), "impart");});
test("imparted -> impart", function() {deepEqual( Stem("imparted"), "impart");});
test("impartial -> imparti", function() {deepEqual( Stem("impartial"), "imparti");});
test("impartiality -> imparti", function() {deepEqual( Stem("impartiality"), "imparti");});
test("impartially -> imparti", function() {deepEqual( Stem("impartially"), "imparti");});
test("imparting -> impart", function() {deepEqual( Stem("imparting"), "impart");});
test("imparts -> impart", function() {deepEqual( Stem("imparts"), "impart");});
test("impassable -> impass", function() {deepEqual( Stem("impassable"), "impass");});
test("impassibility -> impass", function() {deepEqual( Stem("impassibility"), "impass");});
test("impassible -> impass", function() {deepEqual( Stem("impassible"), "impass");});
test("impassioned -> impass", function() {deepEqual( Stem("impassioned"), "impass");});
test("impassive -> impass", function() {deepEqual( Stem("impassive"), "impass");});
test("impassiveness -> impass", function() {deepEqual( Stem("impassiveness"), "impass");});
test("impatience -> impati", function() {deepEqual( Stem("impatience"), "impati");});
test("impatient -> impati", function() {deepEqual( Stem("impatient"), "impati");});
test("impatiently -> impati", function() {deepEqual( Stem("impatiently"), "impati");});
test("impeach -> impeach", function() {deepEqual( Stem("impeach"), "impeach");});
test("impeachment -> impeach", function() {deepEqual( Stem("impeachment"), "impeach");});
test("impecuniosity -> impecunios", function() {deepEqual( Stem("impecuniosity"), "impecunios");});
test("impecunious -> impecuni", function() {deepEqual( Stem("impecunious"), "impecuni");});
test("impede -> imped", function() {deepEqual( Stem("impede"), "imped");});
test("impeded -> imped", function() {deepEqual( Stem("impeded"), "imped");});
test("impediment -> impedi", function() {deepEqual( Stem("impediment"), "impedi");});
test("impediments -> impedi", function() {deepEqual( Stem("impediments"), "impedi");});
test("impel -> impel", function() {deepEqual( Stem("impel"), "impel");});
test("impelled -> impel", function() {deepEqual( Stem("impelled"), "impel");});
test("impels -> impel", function() {deepEqual( Stem("impels"), "impel");});
test("impend -> impend", function() {deepEqual( Stem("impend"), "impend");});
test("impending -> impend", function() {deepEqual( Stem("impending"), "impend");});
test("impenetrabilities -> impenetr", function() {deepEqual( Stem("impenetrabilities"), "impenetr");});
test("impenetrable -> impenetr", function() {deepEqual( Stem("impenetrable"), "impenetr");});
test("imperative -> imper", function() {deepEqual( Stem("imperative"), "imper");});
test("imperatively -> imper", function() {deepEqual( Stem("imperatively"), "imper");});
test("imperceptibly -> impercept", function() {deepEqual( Stem("imperceptibly"), "impercept");});
test("imperfect -> imperfect", function() {deepEqual( Stem("imperfect"), "imperfect");});
test("imperfection -> imperfect", function() {deepEqual( Stem("imperfection"), "imperfect");});
test("imperfectly -> imperfect", function() {deepEqual( Stem("imperfectly"), "imperfect");});
test("imperial -> imperi", function() {deepEqual( Stem("imperial"), "imperi");});
test("imperilled -> imperil", function() {deepEqual( Stem("imperilled"), "imperil");});
test("imperils -> imperil", function() {deepEqual( Stem("imperils"), "imperil");});
test("imperious -> imperi", function() {deepEqual( Stem("imperious"), "imperi");});
test("imperiously -> imperi", function() {deepEqual( Stem("imperiously"), "imperi");});
test("impersonal -> imperson", function() {deepEqual( Stem("impersonal"), "imperson");});
test("impertinence -> impertin", function() {deepEqual( Stem("impertinence"), "impertin");});
test("impertinent -> impertin", function() {deepEqual( Stem("impertinent"), "impertin");});
test("impertinently -> impertin", function() {deepEqual( Stem("impertinently"), "impertin");});
test("imperturbability -> imperturb", function() {deepEqual( Stem("imperturbability"), "imperturb");});
test("imperturbable -> imperturb", function() {deepEqual( Stem("imperturbable"), "imperturb");});
test("imperturbably -> imperturb", function() {deepEqual( Stem("imperturbably"), "imperturb");});
test("impervious -> impervi", function() {deepEqual( Stem("impervious"), "impervi");});
test("impetuosity -> impetuos", function() {deepEqual( Stem("impetuosity"), "impetuos");});
test("impetuous -> impetu", function() {deepEqual( Stem("impetuous"), "impetu");});
test("impetuously -> impetu", function() {deepEqual( Stem("impetuously"), "impetu");});
test("impiety -> impieti", function() {deepEqual( Stem("impiety"), "impieti");});
test("impious -> impious", function() {deepEqual( Stem("impious"), "impious");});
test("implacable -> implac", function() {deepEqual( Stem("implacable"), "implac");});
test("implacably -> implac", function() {deepEqual( Stem("implacably"), "implac");});
test("implanted -> implant", function() {deepEqual( Stem("implanted"), "implant");});
test("implement -> implement", function() {deepEqual( Stem("implement"), "implement");});
test("implements -> implement", function() {deepEqual( Stem("implements"), "implement");});
test("implicate -> implic", function() {deepEqual( Stem("implicate"), "implic");});
test("implicated -> implic", function() {deepEqual( Stem("implicated"), "implic");});
test("implication -> implic", function() {deepEqual( Stem("implication"), "implic");});
test("implicit -> implicit", function() {deepEqual( Stem("implicit"), "implicit");});
test("implicitly -> implicit", function() {deepEqual( Stem("implicitly"), "implicit");});
test("implied -> impli", function() {deepEqual( Stem("implied"), "impli");});
test("implies -> impli", function() {deepEqual( Stem("implies"), "impli");});
test("implore -> implor", function() {deepEqual( Stem("implore"), "implor");});
test("implored -> implor", function() {deepEqual( Stem("implored"), "implor");});
test("imploring -> implor", function() {deepEqual( Stem("imploring"), "implor");});
test("imploringly -> implor", function() {deepEqual( Stem("imploringly"), "implor");});
test("imply -> impli", function() {deepEqual( Stem("imply"), "impli");});
test("implying -> impli", function() {deepEqual( Stem("implying"), "impli");});
test("impolitic -> impolit", function() {deepEqual( Stem("impolitic"), "impolit");});
test("import -> import", function() {deepEqual( Stem("import"), "import");});
test("importance -> import", function() {deepEqual( Stem("importance"), "import");});
test("important -> import", function() {deepEqual( Stem("important"), "import");});
test("importation -> import", function() {deepEqual( Stem("importation"), "import");});
test("imported -> import", function() {deepEqual( Stem("imported"), "import");});
test("importer -> import", function() {deepEqual( Stem("importer"), "import");});
test("importing -> import", function() {deepEqual( Stem("importing"), "import");});
test("importunate -> importun", function() {deepEqual( Stem("importunate"), "importun");});
test("importunity -> importun", function() {deepEqual( Stem("importunity"), "importun");});
test("impose -> impos", function() {deepEqual( Stem("impose"), "impos");});
test("imposed -> impos", function() {deepEqual( Stem("imposed"), "impos");});
test("imposing -> impos", function() {deepEqual( Stem("imposing"), "impos");});
test("imposition -> imposit", function() {deepEqual( Stem("imposition"), "imposit");});
test("impossibilities -> imposs", function() {deepEqual( Stem("impossibilities"), "imposs");});
test("impossibility -> imposs", function() {deepEqual( Stem("impossibility"), "imposs");});
test("impossible -> imposs", function() {deepEqual( Stem("impossible"), "imposs");});
test("imposter -> impost", function() {deepEqual( Stem("imposter"), "impost");});
test("impostors -> impostor", function() {deepEqual( Stem("impostors"), "impostor");});
test("imposture -> impostur", function() {deepEqual( Stem("imposture"), "impostur");});
test("impostures -> impostur", function() {deepEqual( Stem("impostures"), "impostur");});
test("impotence -> impot", function() {deepEqual( Stem("impotence"), "impot");});
test("impotent -> impot", function() {deepEqual( Stem("impotent"), "impot");});
test("impoverished -> impoverish", function() {deepEqual( Stem("impoverished"), "impoverish");});
test("impracticability -> impractic", function() {deepEqual( Stem("impracticability"), "impractic");});
test("impracticable -> impractic", function() {deepEqual( Stem("impracticable"), "impractic");});
test("impracticality -> impract", function() {deepEqual( Stem("impracticality"), "impract");});
test("imprecation -> imprec", function() {deepEqual( Stem("imprecation"), "imprec");});
test("imprecations -> imprec", function() {deepEqual( Stem("imprecations"), "imprec");});
test("impregnability -> impregn", function() {deepEqual( Stem("impregnability"), "impregn");});
test("impregnable -> impregn", function() {deepEqual( Stem("impregnable"), "impregn");});
test("impregnated -> impregn", function() {deepEqual( Stem("impregnated"), "impregn");});
test("impress -> impress", function() {deepEqual( Stem("impress"), "impress");});
test("impressed -> impress", function() {deepEqual( Stem("impressed"), "impress");});
test("impresses -> impress", function() {deepEqual( Stem("impresses"), "impress");});
test("impressible -> impress", function() {deepEqual( Stem("impressible"), "impress");});
test("impressing -> impress", function() {deepEqual( Stem("impressing"), "impress");});
test("impression -> impress", function() {deepEqual( Stem("impression"), "impress");});
test("impressionable -> impression", function() {deepEqual( Stem("impressionable"), "impression");});
test("impressions -> impress", function() {deepEqual( Stem("impressions"), "impress");});
test("impressive -> impress", function() {deepEqual( Stem("impressive"), "impress");});
test("impressively -> impress", function() {deepEqual( Stem("impressively"), "impress");});
test("imprinted -> imprint", function() {deepEqual( Stem("imprinted"), "imprint");});
test("imprinting -> imprint", function() {deepEqual( Stem("imprinting"), "imprint");});
test("imprisoned -> imprison", function() {deepEqual( Stem("imprisoned"), "imprison");});
test("imprisonment -> imprison", function() {deepEqual( Stem("imprisonment"), "imprison");});
test("improbability -> improb", function() {deepEqual( Stem("improbability"), "improb");});
test("improbable -> improb", function() {deepEqual( Stem("improbable"), "improb");});
test("improbably -> improb", function() {deepEqual( Stem("improbably"), "improb");});
test("impromptu -> impromptu", function() {deepEqual( Stem("impromptu"), "impromptu");});
test("improper -> improp", function() {deepEqual( Stem("improper"), "improp");});
test("improperly -> improp", function() {deepEqual( Stem("improperly"), "improp");});
test("impropriety -> improprieti", function() {deepEqual( Stem("impropriety"), "improprieti");});
test("improve -> improv", function() {deepEqual( Stem("improve"), "improv");});
test("improved -> improv", function() {deepEqual( Stem("improved"), "improv");});
test("improvement -> improv", function() {deepEqual( Stem("improvement"), "improv");});
test("improvements -> improv", function() {deepEqual( Stem("improvements"), "improv");});
test("improves -> improv", function() {deepEqual( Stem("improves"), "improv");});
test("improvident -> improvid", function() {deepEqual( Stem("improvident"), "improvid");});
test("improving -> improv", function() {deepEqual( Stem("improving"), "improv");});
test("improvisatrice -> improvisatric", function() {deepEqual( Stem("improvisatrice"), "improvisatric");});
test("imprudence -> imprud", function() {deepEqual( Stem("imprudence"), "imprud");});
test("imprudent -> imprud", function() {deepEqual( Stem("imprudent"), "imprud");});
test("imprudently -> imprud", function() {deepEqual( Stem("imprudently"), "imprud");});
test("imps -> imp", function() {deepEqual( Stem("imps"), "imp");});
test("impudence -> impud", function() {deepEqual( Stem("impudence"), "impud");});
test("impudent -> impud", function() {deepEqual( Stem("impudent"), "impud");});
test("impudently -> impud", function() {deepEqual( Stem("impudently"), "impud");});
test("impugned -> impugn", function() {deepEqual( Stem("impugned"), "impugn");});
test("impulse -> impuls", function() {deepEqual( Stem("impulse"), "impuls");});
test("impulses -> impuls", function() {deepEqual( Stem("impulses"), "impuls");});
test("impulsive -> impuls", function() {deepEqual( Stem("impulsive"), "impuls");});
test("impulsively -> impuls", function() {deepEqual( Stem("impulsively"), "impuls");});
test("impulsiveness -> impuls", function() {deepEqual( Stem("impulsiveness"), "impuls");});
test("impunity -> impun", function() {deepEqual( Stem("impunity"), "impun");});
test("impure -> impur", function() {deepEqual( Stem("impure"), "impur");});
test("impurity -> impur", function() {deepEqual( Stem("impurity"), "impur");});
test("imputation -> imput", function() {deepEqual( Stem("imputation"), "imput");});
test("impute -> imput", function() {deepEqual( Stem("impute"), "imput");});
test("imputed -> imput", function() {deepEqual( Stem("imputed"), "imput");});
test("imputing -> imput", function() {deepEqual( Stem("imputing"), "imput");});
test("imself -> imself", function() {deepEqual( Stem("imself"), "imself");});
test("in -> in", function() {deepEqual( Stem("in"), "in");});
test("inability -> inabl", function() {deepEqual( Stem("inability"), "inabl");});
test("inaccessible -> inaccess", function() {deepEqual( Stem("inaccessible"), "inaccess");});
test("inaccurate -> inaccur", function() {deepEqual( Stem("inaccurate"), "inaccur");});
test("inaccurately -> inaccur", function() {deepEqual( Stem("inaccurately"), "inaccur");});
test("inaction -> inact", function() {deepEqual( Stem("inaction"), "inact");});
test("inactive -> inact", function() {deepEqual( Stem("inactive"), "inact");});
test("inactivity -> inact", function() {deepEqual( Stem("inactivity"), "inact");});
test("inadequate -> inadequ", function() {deepEqual( Stem("inadequate"), "inadequ");});
test("inadmissible -> inadmiss", function() {deepEqual( Stem("inadmissible"), "inadmiss");});
test("inadvertently -> inadvert", function() {deepEqual( Stem("inadvertently"), "inadvert");});
test("inanimate -> inanim", function() {deepEqual( Stem("inanimate"), "inanim");});
test("inanities -> inan", function() {deepEqual( Stem("inanities"), "inan");});
test("inanity -> inan", function() {deepEqual( Stem("inanity"), "inan");});
test("inappeasable -> inappeas", function() {deepEqual( Stem("inappeasable"), "inappeas");});
test("inapplicable -> inapplic", function() {deepEqual( Stem("inapplicable"), "inapplic");});
test("inappreciable -> inappreci", function() {deepEqual( Stem("inappreciable"), "inappreci");});
test("inappropriate -> inappropri", function() {deepEqual( Stem("inappropriate"), "inappropri");});
test("inappropriately -> inappropri", function() {deepEqual( Stem("inappropriately"), "inappropri");});
test("inaptitude -> inaptitud", function() {deepEqual( Stem("inaptitude"), "inaptitud");});
test("inaptly -> inapt", function() {deepEqual( Stem("inaptly"), "inapt");});
test("inarticulate -> inarticul", function() {deepEqual( Stem("inarticulate"), "inarticul");});
test("inarticulately -> inarticul", function() {deepEqual( Stem("inarticulately"), "inarticul");});
test("inartistic -> inartist", function() {deepEqual( Stem("inartistic"), "inartist");});
test("inasmuch -> inasmuch", function() {deepEqual( Stem("inasmuch"), "inasmuch");});
test("inattention -> inattent", function() {deepEqual( Stem("inattention"), "inattent");});
test("inattentive -> inattent", function() {deepEqual( Stem("inattentive"), "inattent");});
test("inaudible -> inaud", function() {deepEqual( Stem("inaudible"), "inaud");});
test("inaudibly -> inaud", function() {deepEqual( Stem("inaudibly"), "inaud");});
test("inaugurate -> inaugur", function() {deepEqual( Stem("inaugurate"), "inaugur");});
test("inaugurated -> inaugur", function() {deepEqual( Stem("inaugurated"), "inaugur");});
test("inaugurates -> inaugur", function() {deepEqual( Stem("inaugurates"), "inaugur");});
test("inauspicious -> inauspici", function() {deepEqual( Stem("inauspicious"), "inauspici");});
test("inborn -> inborn", function() {deepEqual( Stem("inborn"), "inborn");});
test("inbred -> inbr", function() {deepEqual( Stem("inbred"), "inbr");});
test("incalculable -> incalcul", function() {deepEqual( Stem("incalculable"), "incalcul");});
test("incalculably -> incalcul", function() {deepEqual( Stem("incalculably"), "incalcul");});
test("incapable -> incap", function() {deepEqual( Stem("incapable"), "incap");});
test("incapacitated -> incapacit", function() {deepEqual( Stem("incapacitated"), "incapacit");});
test("incapacity -> incapac", function() {deepEqual( Stem("incapacity"), "incapac");});
test("incarnation -> incarn", function() {deepEqual( Stem("incarnation"), "incarn");});
test("incas -> inca", function() {deepEqual( Stem("incas"), "inca");});
test("incased -> incas", function() {deepEqual( Stem("incased"), "incas");});
test("incautious -> incauti", function() {deepEqual( Stem("incautious"), "incauti");});
test("incautiously -> incauti", function() {deepEqual( Stem("incautiously"), "incauti");});
test("incense -> incens", function() {deepEqual( Stem("incense"), "incens");});
test("incensed -> incens", function() {deepEqual( Stem("incensed"), "incens");});
test("incentive -> incent", function() {deepEqual( Stem("incentive"), "incent");});
test("incessant -> incess", function() {deepEqual( Stem("incessant"), "incess");});
test("incessantly -> incess", function() {deepEqual( Stem("incessantly"), "incess");});
test("inch -> inch", function() {deepEqual( Stem("inch"), "inch");});
test("inches -> inch", function() {deepEqual( Stem("inches"), "inch");});
test("incident -> incid", function() {deepEqual( Stem("incident"), "incid");});
test("incidental -> incident", function() {deepEqual( Stem("incidental"), "incident");});
test("incidentally -> incident", function() {deepEqual( Stem("incidentally"), "incident");});
test("incidents -> incid", function() {deepEqual( Stem("incidents"), "incid");});
test("incipient -> incipi", function() {deepEqual( Stem("incipient"), "incipi");});
test("incisions -> incis", function() {deepEqual( Stem("incisions"), "incis");});
test("incisive -> incis", function() {deepEqual( Stem("incisive"), "incis");});
test("incited -> incit", function() {deepEqual( Stem("incited"), "incit");});
test("incitement -> incit", function() {deepEqual( Stem("incitement"), "incit");});
test("incivility -> incivil", function() {deepEqual( Stem("incivility"), "incivil");});
test("inclemency -> inclem", function() {deepEqual( Stem("inclemency"), "inclem");});
test("inclement -> inclement", function() {deepEqual( Stem("inclement"), "inclement");});
test("inclination -> inclin", function() {deepEqual( Stem("inclination"), "inclin");});
test("inclinations -> inclin", function() {deepEqual( Stem("inclinations"), "inclin");});
test("incline -> inclin", function() {deepEqual( Stem("incline"), "inclin");});
test("inclined -> inclin", function() {deepEqual( Stem("inclined"), "inclin");});
test("inclines -> inclin", function() {deepEqual( Stem("inclines"), "inclin");});
test("inclining -> inclin", function() {deepEqual( Stem("inclining"), "inclin");});
test("inclosure -> inclosur", function() {deepEqual( Stem("inclosure"), "inclosur");});
test("include -> includ", function() {deepEqual( Stem("include"), "includ");});
test("included -> includ", function() {deepEqual( Stem("included"), "includ");});
test("includes -> includ", function() {deepEqual( Stem("includes"), "includ");});
test("including -> includ", function() {deepEqual( Stem("including"), "includ");});
test("inclusive -> inclus", function() {deepEqual( Stem("inclusive"), "inclus");});
test("incog -> incog", function() {deepEqual( Stem("incog"), "incog");});
test("incognita -> incognita", function() {deepEqual( Stem("incognita"), "incognita");});
test("incognito -> incognito", function() {deepEqual( Stem("incognito"), "incognito");});
test("incoherence -> incoher", function() {deepEqual( Stem("incoherence"), "incoher");});
test("incoherent -> incoher", function() {deepEqual( Stem("incoherent"), "incoher");});
test("incoherently -> incoher", function() {deepEqual( Stem("incoherently"), "incoher");});
test("income -> incom", function() {deepEqual( Stem("income"), "incom");});
test("incoming -> incom", function() {deepEqual( Stem("incoming"), "incom");});
test("incommoded -> incommod", function() {deepEqual( Stem("incommoded"), "incommod");});
test("incomparably -> incompar", function() {deepEqual( Stem("incomparably"), "incompar");});
test("incompatibility -> incompat", function() {deepEqual( Stem("incompatibility"), "incompat");});
test("incompatible -> incompat", function() {deepEqual( Stem("incompatible"), "incompat");});
test("incomplete -> incomplet", function() {deepEqual( Stem("incomplete"), "incomplet");});
test("incomprehensible -> incomprehens", function() {deepEqual( Stem("incomprehensible"), "incomprehens");});
test("inconceivable -> inconceiv", function() {deepEqual( Stem("inconceivable"), "inconceiv");});
test("incongruity -> incongru", function() {deepEqual( Stem("incongruity"), "incongru");});
test("incongruous -> incongru", function() {deepEqual( Stem("incongruous"), "incongru");});
test("inconsiderable -> inconsider", function() {deepEqual( Stem("inconsiderable"), "inconsider");});
test("inconsiderate -> inconsider", function() {deepEqual( Stem("inconsiderate"), "inconsider");});
test("inconsiderately -> inconsider", function() {deepEqual( Stem("inconsiderately"), "inconsider");});
test("inconsiderateness -> inconsider", function() {deepEqual( Stem("inconsiderateness"), "inconsider");});
test("inconsistencies -> inconsist", function() {deepEqual( Stem("inconsistencies"), "inconsist");});
test("inconsistency -> inconsist", function() {deepEqual( Stem("inconsistency"), "inconsist");});
test("inconsistent -> inconsist", function() {deepEqual( Stem("inconsistent"), "inconsist");});
test("inconsistently -> inconsist", function() {deepEqual( Stem("inconsistently"), "inconsist");});
test("inconsolable -> inconsol", function() {deepEqual( Stem("inconsolable"), "inconsol");});
test("inconstancy -> inconst", function() {deepEqual( Stem("inconstancy"), "inconst");});
test("inconstant -> inconst", function() {deepEqual( Stem("inconstant"), "inconst");});
test("incontestable -> incontest", function() {deepEqual( Stem("incontestable"), "incontest");});
test("incontestably -> incontest", function() {deepEqual( Stem("incontestably"), "incontest");});
test("inconvenience -> inconveni", function() {deepEqual( Stem("inconvenience"), "inconveni");});
test("inconvenienced -> inconvenienc", function() {deepEqual( Stem("inconvenienced"), "inconvenienc");});
test("inconveniences -> inconveni", function() {deepEqual( Stem("inconveniences"), "inconveni");});
test("inconveniency -> inconveni", function() {deepEqual( Stem("inconveniency"), "inconveni");});
test("inconvenient -> inconveni", function() {deepEqual( Stem("inconvenient"), "inconveni");});
test("inconveniently -> inconveni", function() {deepEqual( Stem("inconveniently"), "inconveni");});
test("incorrect -> incorrect", function() {deepEqual( Stem("incorrect"), "incorrect");});
test("incorrectly -> incorrect", function() {deepEqual( Stem("incorrectly"), "incorrect");});
test("incorrigible -> incorrig", function() {deepEqual( Stem("incorrigible"), "incorrig");});
test("incorruptible -> incorrupt", function() {deepEqual( Stem("incorruptible"), "incorrupt");});
test("increase -> increas", function() {deepEqual( Stem("increase"), "increas");});
test("increased -> increas", function() {deepEqual( Stem("increased"), "increas");});
test("increases -> increas", function() {deepEqual( Stem("increases"), "increas");});
test("increasing -> increas", function() {deepEqual( Stem("increasing"), "increas");});
test("increasingly -> increas", function() {deepEqual( Stem("increasingly"), "increas");});
test("incredible -> incred", function() {deepEqual( Stem("incredible"), "incred");});
test("incredibly -> incred", function() {deepEqual( Stem("incredibly"), "incred");});
test("incredulity -> incredul", function() {deepEqual( Stem("incredulity"), "incredul");});
test("incredulous -> incredul", function() {deepEqual( Stem("incredulous"), "incredul");});
test("incredulously -> incredul", function() {deepEqual( Stem("incredulously"), "incredul");});
test("incrustation -> incrust", function() {deepEqual( Stem("incrustation"), "incrust");});
test("incrustations -> incrust", function() {deepEqual( Stem("incrustations"), "incrust");});
test("incrusted -> incrust", function() {deepEqual( Stem("incrusted"), "incrust");});
test("incubation -> incub", function() {deepEqual( Stem("incubation"), "incub");});
test("incubus -> incubus", function() {deepEqual( Stem("incubus"), "incubus");});
test("inculcate -> inculc", function() {deepEqual( Stem("inculcate"), "inculc");});
test("inculcates -> inculc", function() {deepEqual( Stem("inculcates"), "inculc");});
test("inculcating -> inculc", function() {deepEqual( Stem("inculcating"), "inculc");});
test("incumbent -> incumb", function() {deepEqual( Stem("incumbent"), "incumb");});
test("incumbrance -> incumbr", function() {deepEqual( Stem("incumbrance"), "incumbr");});
test("incumbrances -> incumbr", function() {deepEqual( Stem("incumbrances"), "incumbr");});
test("incur -> incur", function() {deepEqual( Stem("incur"), "incur");});
test("incurious -> incuri", function() {deepEqual( Stem("incurious"), "incuri");});
test("incurred -> incur", function() {deepEqual( Stem("incurred"), "incur");});
test("incursion -> incurs", function() {deepEqual( Stem("incursion"), "incurs");});
test("indebted -> indebt", function() {deepEqual( Stem("indebted"), "indebt");});
test("indecency -> indec", function() {deepEqual( Stem("indecency"), "indec");});
test("indecent -> indec", function() {deepEqual( Stem("indecent"), "indec");});
test("indecently -> indec", function() {deepEqual( Stem("indecently"), "indec");});
test("indecision -> indecis", function() {deepEqual( Stem("indecision"), "indecis");});
test("indecorous -> indecor", function() {deepEqual( Stem("indecorous"), "indecor");});
test("indecorously -> indecor", function() {deepEqual( Stem("indecorously"), "indecor");});
test("indeed -> inde", function() {deepEqual( Stem("indeed"), "inde");});
test("indefatigable -> indefatig", function() {deepEqual( Stem("indefatigable"), "indefatig");});
test("indefatigably -> indefatig", function() {deepEqual( Stem("indefatigably"), "indefatig");});
test("indefinable -> indefin", function() {deepEqual( Stem("indefinable"), "indefin");});
test("indefinably -> indefin", function() {deepEqual( Stem("indefinably"), "indefin");});
test("indefinite -> indefinit", function() {deepEqual( Stem("indefinite"), "indefinit");});
test("indefinitely -> indefinit", function() {deepEqual( Stem("indefinitely"), "indefinit");});
test("indelible -> indel", function() {deepEqual( Stem("indelible"), "indel");});
test("indelibly -> indel", function() {deepEqual( Stem("indelibly"), "indel");});
test("indelicate -> indel", function() {deepEqual( Stem("indelicate"), "indel");});
test("indented -> indent", function() {deepEqual( Stem("indented"), "indent");});
test("indenting -> indent", function() {deepEqual( Stem("indenting"), "indent");});
test("indenture -> indentur", function() {deepEqual( Stem("indenture"), "indentur");});
test("independence -> independ", function() {deepEqual( Stem("independence"), "independ");});
test("independent -> independ", function() {deepEqual( Stem("independent"), "independ");});
test("independently -> independ", function() {deepEqual( Stem("independently"), "independ");});
test("independeuce -> independeuc", function() {deepEqual( Stem("independeuce"), "independeuc");});
test("inder -> inder", function() {deepEqual( Stem("inder"), "inder");});
test("indescribable -> indescrib", function() {deepEqual( Stem("indescribable"), "indescrib");});
test("indescribably -> indescrib", function() {deepEqual( Stem("indescribably"), "indescrib");});
test("indestructible -> indestruct", function() {deepEqual( Stem("indestructible"), "indestruct");});
test("india -> india", function() {deepEqual( Stem("india"), "india");});
test("indiaman -> indiaman", function() {deepEqual( Stem("indiaman"), "indiaman");});
test("indian -> indian", function() {deepEqual( Stem("indian"), "indian");});
test("indians -> indian", function() {deepEqual( Stem("indians"), "indian");});
test("indica -> indica", function() {deepEqual( Stem("indica"), "indica");});
test("indicate -> indic", function() {deepEqual( Stem("indicate"), "indic");});
test("indicated -> indic", function() {deepEqual( Stem("indicated"), "indic");});
test("indicates -> indic", function() {deepEqual( Stem("indicates"), "indic");});
test("indicating -> indic", function() {deepEqual( Stem("indicating"), "indic");});
test("indication -> indic", function() {deepEqual( Stem("indication"), "indic");});
test("indications -> indic", function() {deepEqual( Stem("indications"), "indic");});
test("indicative -> indic", function() {deepEqual( Stem("indicative"), "indic");});
test("indies -> indi", function() {deepEqual( Stem("indies"), "indi");});
test("indifference -> indiffer", function() {deepEqual( Stem("indifference"), "indiffer");});
test("indifferent -> indiffer", function() {deepEqual( Stem("indifferent"), "indiffer");});
test("indifferently -> indiffer", function() {deepEqual( Stem("indifferently"), "indiffer");});
test("indigenous -> indigen", function() {deepEqual( Stem("indigenous"), "indigen");});
test("indigent -> indig", function() {deepEqual( Stem("indigent"), "indig");});
test("indigestion -> indigest", function() {deepEqual( Stem("indigestion"), "indigest");});
test("indignant -> indign", function() {deepEqual( Stem("indignant"), "indign");});
test("indignantly -> indign", function() {deepEqual( Stem("indignantly"), "indign");});
test("indignation -> indign", function() {deepEqual( Stem("indignation"), "indign");});
test("indignities -> indign", function() {deepEqual( Stem("indignities"), "indign");});
test("indignity -> indign", function() {deepEqual( Stem("indignity"), "indign");});
test("indigo -> indigo", function() {deepEqual( Stem("indigo"), "indigo");});
test("indios -> indio", function() {deepEqual( Stem("indios"), "indio");});
test("indirect -> indirect", function() {deepEqual( Stem("indirect"), "indirect");});
test("indirectly -> indirect", function() {deepEqual( Stem("indirectly"), "indirect");});
test("indiscreet -> indiscreet", function() {deepEqual( Stem("indiscreet"), "indiscreet");});
test("indiscreetness -> indiscreet", function() {deepEqual( Stem("indiscreetness"), "indiscreet");});
test("indiscretion -> indiscret", function() {deepEqual( Stem("indiscretion"), "indiscret");});
test("indiscretions -> indiscret", function() {deepEqual( Stem("indiscretions"), "indiscret");});
test("indiscriminate -> indiscrimin", function() {deepEqual( Stem("indiscriminate"), "indiscrimin");});
test("indiscriminately -> indiscrimin", function() {deepEqual( Stem("indiscriminately"), "indiscrimin");});
test("indiscriminating -> indiscrimin", function() {deepEqual( Stem("indiscriminating"), "indiscrimin");});
test("indispensable -> indispens", function() {deepEqual( Stem("indispensable"), "indispens");});
test("indispensably -> indispens", function() {deepEqual( Stem("indispensably"), "indispens");});
test("indisposed -> indispos", function() {deepEqual( Stem("indisposed"), "indispos");});
test("indisposition -> indisposit", function() {deepEqual( Stem("indisposition"), "indisposit");});
test("indisputably -> indisput", function() {deepEqual( Stem("indisputably"), "indisput");});
test("indistinct -> indistinct", function() {deepEqual( Stem("indistinct"), "indistinct");});
test("indistinctly -> indistinct", function() {deepEqual( Stem("indistinctly"), "indistinct");});
test("indistinctness -> indistinct", function() {deepEqual( Stem("indistinctness"), "indistinct");});
test("indistinguishable -> indistinguish", function() {deepEqual( Stem("indistinguishable"), "indistinguish");});
test("indited -> indit", function() {deepEqual( Stem("indited"), "indit");});
test("individua -> individua", function() {deepEqual( Stem("individua"), "individua");});
test("individual -> individu", function() {deepEqual( Stem("individual"), "individu");});
test("individualism -> individu", function() {deepEqual( Stem("individualism"), "individu");});
test("individuality -> individu", function() {deepEqual( Stem("individuality"), "individu");});
test("individually -> individu", function() {deepEqual( Stem("individually"), "individu");});
test("individuals -> individu", function() {deepEqual( Stem("individuals"), "individu");});
test("indo -> indo", function() {deepEqual( Stem("indo"), "indo");});
test("indolence -> indol", function() {deepEqual( Stem("indolence"), "indol");});
test("indolent -> indol", function() {deepEqual( Stem("indolent"), "indol");});
test("indolently -> indol", function() {deepEqual( Stem("indolently"), "indol");});
test("indomitable -> indomit", function() {deepEqual( Stem("indomitable"), "indomit");});
test("indoor -> indoor", function() {deepEqual( Stem("indoor"), "indoor");});
test("indoors -> indoor", function() {deepEqual( Stem("indoors"), "indoor");});
test("indubitable -> indubit", function() {deepEqual( Stem("indubitable"), "indubit");});
test("indubitably -> indubit", function() {deepEqual( Stem("indubitably"), "indubit");});
test("induce -> induc", function() {deepEqual( Stem("induce"), "induc");});
test("induced -> induc", function() {deepEqual( Stem("induced"), "induc");});
test("inducement -> induc", function() {deepEqual( Stem("inducement"), "induc");});
test("inducements -> induc", function() {deepEqual( Stem("inducements"), "induc");});
test("induces -> induc", function() {deepEqual( Stem("induces"), "induc");});
test("inducing -> induc", function() {deepEqual( Stem("inducing"), "induc");});
test("inducted -> induct", function() {deepEqual( Stem("inducted"), "induct");});
test("inducts -> induct", function() {deepEqual( Stem("inducts"), "induct");});
test("indulge -> indulg", function() {deepEqual( Stem("indulge"), "indulg");});
test("indulged -> indulg", function() {deepEqual( Stem("indulged"), "indulg");});
test("indulgence -> indulg", function() {deepEqual( Stem("indulgence"), "indulg");});
test("indulgences -> indulg", function() {deepEqual( Stem("indulgences"), "indulg");});
test("indulgent -> indulg", function() {deepEqual( Stem("indulgent"), "indulg");});
test("indulging -> indulg", function() {deepEqual( Stem("indulging"), "indulg");});
test("indurated -> indur", function() {deepEqual( Stem("indurated"), "indur");});
test("industrie -> industri", function() {deepEqual( Stem("industrie"), "industri");});
test("industrious -> industri", function() {deepEqual( Stem("industrious"), "industri");});
test("industriously -> industri", function() {deepEqual( Stem("industriously"), "industri");});
test("industry -> industri", function() {deepEqual( Stem("industry"), "industri");});
test("inebriated -> inebri", function() {deepEqual( Stem("inebriated"), "inebri");});
test("inebriety -> inebrieti", function() {deepEqual( Stem("inebriety"), "inebrieti");});
test("ineffable -> ineff", function() {deepEqual( Stem("ineffable"), "ineff");});
test("ineffective -> ineffect", function() {deepEqual( Stem("ineffective"), "ineffect");});
test("ineffectiveness -> ineffect", function() {deepEqual( Stem("ineffectiveness"), "ineffect");});
test("ineffectual -> ineffectu", function() {deepEqual( Stem("ineffectual"), "ineffectu");});
test("ineffectually -> ineffectu", function() {deepEqual( Stem("ineffectually"), "ineffectu");});
test("inefficacious -> inefficaci", function() {deepEqual( Stem("inefficacious"), "inefficaci");});
test("inefficacy -> inefficaci", function() {deepEqual( Stem("inefficacy"), "inefficaci");});
test("inefficiency -> ineffici", function() {deepEqual( Stem("inefficiency"), "ineffici");});
test("inefficient -> ineffici", function() {deepEqual( Stem("inefficient"), "ineffici");});
test("inelegance -> ineleg", function() {deepEqual( Stem("inelegance"), "ineleg");});
test("ineptitude -> ineptitud", function() {deepEqual( Stem("ineptitude"), "ineptitud");});
test("inequalities -> inequ", function() {deepEqual( Stem("inequalities"), "inequ");});
test("inequality -> inequ", function() {deepEqual( Stem("inequality"), "inequ");});
test("ineradicable -> ineradic", function() {deepEqual( Stem("ineradicable"), "ineradic");});
test("inermis -> inermi", function() {deepEqual( Stem("inermis"), "inermi");});
test("inert -> inert", function() {deepEqual( Stem("inert"), "inert");});
test("inertia -> inertia", function() {deepEqual( Stem("inertia"), "inertia");});
test("inertness -> inert", function() {deepEqual( Stem("inertness"), "inert");});
test("inestimable -> inestim", function() {deepEqual( Stem("inestimable"), "inestim");});
test("inestimably -> inestim", function() {deepEqual( Stem("inestimably"), "inestim");});
test("inevitable -> inevit", function() {deepEqual( Stem("inevitable"), "inevit");});
test("inevitably -> inevit", function() {deepEqual( Stem("inevitably"), "inevit");});
test("inexcusable -> inexcus", function() {deepEqual( Stem("inexcusable"), "inexcus");});
test("inexhaustible -> inexhaust", function() {deepEqual( Stem("inexhaustible"), "inexhaust");});
test("inexorable -> inexor", function() {deepEqual( Stem("inexorable"), "inexor");});
test("inexpedient -> inexpedi", function() {deepEqual( Stem("inexpedient"), "inexpedi");});
test("inexperience -> inexperi", function() {deepEqual( Stem("inexperience"), "inexperi");});
test("inexperienced -> inexperienc", function() {deepEqual( Stem("inexperienced"), "inexperienc");});
test("inexpiable -> inexpi", function() {deepEqual( Stem("inexpiable"), "inexpi");});
test("inexplicable -> inexplic", function() {deepEqual( Stem("inexplicable"), "inexplic");});
test("inexpressible -> inexpress", function() {deepEqual( Stem("inexpressible"), "inexpress");});
test("inexpressibles -> inexpress", function() {deepEqual( Stem("inexpressibles"), "inexpress");});
test("inexpressibly -> inexpress", function() {deepEqual( Stem("inexpressibly"), "inexpress");});
test("inexpressive -> inexpress", function() {deepEqual( Stem("inexpressive"), "inexpress");});
test("inexpressively -> inexpress", function() {deepEqual( Stem("inexpressively"), "inexpress");});
test("inextinguishable -> inextinguish", function() {deepEqual( Stem("inextinguishable"), "inextinguish");});
test("infallibility -> infal", function() {deepEqual( Stem("infallibility"), "infal");});
test("infallible -> infal", function() {deepEqual( Stem("infallible"), "infal");});
test("infallibly -> infal", function() {deepEqual( Stem("infallibly"), "infal");});
test("infame -> infam", function() {deepEqual( Stem("infame"), "infam");});
test("infamies -> infami", function() {deepEqual( Stem("infamies"), "infami");});
test("infamous -> infam", function() {deepEqual( Stem("infamous"), "infam");});
test("infamy -> infami", function() {deepEqual( Stem("infamy"), "infami");});
test("infancy -> infanc", function() {deepEqual( Stem("infancy"), "infanc");});
test("infant -> infant", function() {deepEqual( Stem("infant"), "infant");});
test("infanticide -> infanticid", function() {deepEqual( Stem("infanticide"), "infanticid");});
test("infantine -> infantin", function() {deepEqual( Stem("infantine"), "infantin");});
test("infantry -> infantri", function() {deepEqual( Stem("infantry"), "infantri");});
test("infants -> infant", function() {deepEqual( Stem("infants"), "infant");});
test("infatuated -> infatu", function() {deepEqual( Stem("infatuated"), "infatu");});
test("infatuation -> infatu", function() {deepEqual( Stem("infatuation"), "infatu");});
test("infect -> infect", function() {deepEqual( Stem("infect"), "infect");});
test("infected -> infect", function() {deepEqual( Stem("infected"), "infect");});
test("infection -> infect", function() {deepEqual( Stem("infection"), "infect");});
test("infectious -> infecti", function() {deepEqual( Stem("infectious"), "infecti");});
test("infer -> infer", function() {deepEqual( Stem("infer"), "infer");});
test("inference -> infer", function() {deepEqual( Stem("inference"), "infer");});
test("inferior -> inferior", function() {deepEqual( Stem("inferior"), "inferior");});
test("inferiorities -> inferior", function() {deepEqual( Stem("inferiorities"), "inferior");});
test("inferiority -> inferior", function() {deepEqual( Stem("inferiority"), "inferior");});
test("inferiors -> inferior", function() {deepEqual( Stem("inferiors"), "inferior");});
test("infernal -> infern", function() {deepEqual( Stem("infernal"), "infern");});
test("inferred -> infer", function() {deepEqual( Stem("inferred"), "infer");});
test("inferring -> infer", function() {deepEqual( Stem("inferring"), "infer");});
test("infested -> infest", function() {deepEqual( Stem("infested"), "infest");});
test("infidel -> infidel", function() {deepEqual( Stem("infidel"), "infidel");});
test("infidelities -> infidel", function() {deepEqual( Stem("infidelities"), "infidel");});
test("infidelity -> infidel", function() {deepEqual( Stem("infidelity"), "infidel");});
test("infidels -> infidel", function() {deepEqual( Stem("infidels"), "infidel");});
test("infinite -> infinit", function() {deepEqual( Stem("infinite"), "infinit");});
test("infinitely -> infinit", function() {deepEqual( Stem("infinitely"), "infinit");});
test("infinitesimal -> infinitesim", function() {deepEqual( Stem("infinitesimal"), "infinitesim");});
test("infinitum -> infinitum", function() {deepEqual( Stem("infinitum"), "infinitum");});
test("infinity -> infin", function() {deepEqual( Stem("infinity"), "infin");});
test("infirm -> infirm", function() {deepEqual( Stem("infirm"), "infirm");});
test("infirmities -> infirm", function() {deepEqual( Stem("infirmities"), "infirm");});
test("infirmity -> infirm", function() {deepEqual( Stem("infirmity"), "infirm");});
test("inflamed -> inflam", function() {deepEqual( Stem("inflamed"), "inflam");});
test("inflammable -> inflamm", function() {deepEqual( Stem("inflammable"), "inflamm");});
test("inflammation -> inflamm", function() {deepEqual( Stem("inflammation"), "inflamm");});
test("inflated -> inflat", function() {deepEqual( Stem("inflated"), "inflat");});
test("inflates -> inflat", function() {deepEqual( Stem("inflates"), "inflat");});
test("inflation -> inflat", function() {deepEqual( Stem("inflation"), "inflat");});
test("inflexam -> inflexam", function() {deepEqual( Stem("inflexam"), "inflexam");});
test("inflexibility -> inflex", function() {deepEqual( Stem("inflexibility"), "inflex");});
test("inflexible -> inflex", function() {deepEqual( Stem("inflexible"), "inflex");});
test("inflict -> inflict", function() {deepEqual( Stem("inflict"), "inflict");});
test("inflicted -> inflict", function() {deepEqual( Stem("inflicted"), "inflict");});
test("inflicting -> inflict", function() {deepEqual( Stem("inflicting"), "inflict");});
test("infliction -> inflict", function() {deepEqual( Stem("infliction"), "inflict");});
test("inflicts -> inflict", function() {deepEqual( Stem("inflicts"), "inflict");});
test("influence -> influenc", function() {deepEqual( Stem("influence"), "influenc");});
test("influenced -> influenc", function() {deepEqual( Stem("influenced"), "influenc");});
test("influences -> influenc", function() {deepEqual( Stem("influences"), "influenc");});
test("influencing -> influenc", function() {deepEqual( Stem("influencing"), "influenc");});
test("influential -> influenti", function() {deepEqual( Stem("influential"), "influenti");});
test("influx -> influx", function() {deepEqual( Stem("influx"), "influx");});
test("inform -> inform", function() {deepEqual( Stem("inform"), "inform");});
test("informant -> inform", function() {deepEqual( Stem("informant"), "inform");});
test("information -> inform", function() {deepEqual( Stem("information"), "inform");});
test("informed -> inform", function() {deepEqual( Stem("informed"), "inform");});
test("informer -> inform", function() {deepEqual( Stem("informer"), "inform");});
test("informing -> inform", function() {deepEqual( Stem("informing"), "inform");});
test("informs -> inform", function() {deepEqual( Stem("informs"), "inform");});
test("infra -> infra", function() {deepEqual( Stem("infra"), "infra");});
test("infrequency -> infrequ", function() {deepEqual( Stem("infrequency"), "infrequ");});
test("infrequent -> infrequ", function() {deepEqual( Stem("infrequent"), "infrequ");});
test("infrequently -> infrequ", function() {deepEqual( Stem("infrequently"), "infrequ");});
test("infuriated -> infuri", function() {deepEqual( Stem("infuriated"), "infuri");});
test("infuse -> infus", function() {deepEqual( Stem("infuse"), "infus");});
test("infused -> infus", function() {deepEqual( Stem("infused"), "infus");});
test("infusing -> infus", function() {deepEqual( Stem("infusing"), "infus");});
test("infusoria -> infusoria", function() {deepEqual( Stem("infusoria"), "infusoria");});
test("infusorial -> infusori", function() {deepEqual( Stem("infusorial"), "infusori");});
test("ing -> ing", function() {deepEqual( Stem("ing"), "ing");});
test("ingenio -> ingenio", function() {deepEqual( Stem("ingenio"), "ingenio");});
test("ingenious -> ingeni", function() {deepEqual( Stem("ingenious"), "ingeni");});
test("ingeniously -> ingeni", function() {deepEqual( Stem("ingeniously"), "ingeni");});
test("ingenuity -> ingenu", function() {deepEqual( Stem("ingenuity"), "ingenu");});
test("ingenuous -> ingenu", function() {deepEqual( Stem("ingenuous"), "ingenu");});
test("ingenuously -> ingenu", function() {deepEqual( Stem("ingenuously"), "ingenu");});
test("ingleses -> ingles", function() {deepEqual( Stem("ingleses"), "ingles");});
test("ingrained -> ingrain", function() {deepEqual( Stem("ingrained"), "ingrain");});
test("ingratiate -> ingrati", function() {deepEqual( Stem("ingratiate"), "ingrati");});
test("ingratiated -> ingrati", function() {deepEqual( Stem("ingratiated"), "ingrati");});
test("ingratiating -> ingrati", function() {deepEqual( Stem("ingratiating"), "ingrati");});
test("ingratitude -> ingratitud", function() {deepEqual( Stem("ingratitude"), "ingratitud");});
test("ingredient -> ingredi", function() {deepEqual( Stem("ingredient"), "ingredi");});
test("ingredients -> ingredi", function() {deepEqual( Stem("ingredients"), "ingredi");});
test("inhabit -> inhabit", function() {deepEqual( Stem("inhabit"), "inhabit");});
test("inhabitant -> inhabit", function() {deepEqual( Stem("inhabitant"), "inhabit");});
test("inhabitants -> inhabit", function() {deepEqual( Stem("inhabitants"), "inhabit");});
test("inhabited -> inhabit", function() {deepEqual( Stem("inhabited"), "inhabit");});
test("inhabiting -> inhabit", function() {deepEqual( Stem("inhabiting"), "inhabit");});
test("inhabits -> inhabit", function() {deepEqual( Stem("inhabits"), "inhabit");});
test("inhaled -> inhal", function() {deepEqual( Stem("inhaled"), "inhal");});
test("inhaling -> inhal", function() {deepEqual( Stem("inhaling"), "inhal");});
test("inharmonious -> inharmoni", function() {deepEqual( Stem("inharmonious"), "inharmoni");});
test("inherent -> inher", function() {deepEqual( Stem("inherent"), "inher");});
test("inherit -> inherit", function() {deepEqual( Stem("inherit"), "inherit");});
test("inheritance -> inherit", function() {deepEqual( Stem("inheritance"), "inherit");});
test("inherited -> inherit", function() {deepEqual( Stem("inherited"), "inherit");});
test("inheriting -> inherit", function() {deepEqual( Stem("inheriting"), "inherit");});
test("inhospitable -> inhospit", function() {deepEqual( Stem("inhospitable"), "inhospit");});
test("inhospitality -> inhospit", function() {deepEqual( Stem("inhospitality"), "inhospit");});
test("inhuman -> inhuman", function() {deepEqual( Stem("inhuman"), "inhuman");});
test("inhumanity -> inhuman", function() {deepEqual( Stem("inhumanity"), "inhuman");});
test("inhumanly -> inhuman", function() {deepEqual( Stem("inhumanly"), "inhuman");});
test("inimical -> inim", function() {deepEqual( Stem("inimical"), "inim");});
test("iniquities -> iniqu", function() {deepEqual( Stem("iniquities"), "iniqu");});
test("iniquity -> iniqu", function() {deepEqual( Stem("iniquity"), "iniqu");});
test("init -> init", function() {deepEqual( Stem("init"), "init");});
test("initial -> initi", function() {deepEqual( Stem("initial"), "initi");});
test("initiated -> initi", function() {deepEqual( Stem("initiated"), "initi");});
test("initiation -> initi", function() {deepEqual( Stem("initiation"), "initi");});
test("initiative -> initi", function() {deepEqual( Stem("initiative"), "initi");});
test("initiatory -> initiatori", function() {deepEqual( Stem("initiatory"), "initiatori");});
test("injected -> inject", function() {deepEqual( Stem("injected"), "inject");});
test("injection -> inject", function() {deepEqual( Stem("injection"), "inject");});
test("injections -> inject", function() {deepEqual( Stem("injections"), "inject");});
test("injudicious -> injudici", function() {deepEqual( Stem("injudicious"), "injudici");});
test("injudiciously -> injudici", function() {deepEqual( Stem("injudiciously"), "injudici");});
test("injunction -> injunct", function() {deepEqual( Stem("injunction"), "injunct");});
test("injunctions -> injunct", function() {deepEqual( Stem("injunctions"), "injunct");});
test("injure -> injur", function() {deepEqual( Stem("injure"), "injur");});
test("injured -> injur", function() {deepEqual( Stem("injured"), "injur");});
test("injures -> injur", function() {deepEqual( Stem("injures"), "injur");});
test("injuries -> injuri", function() {deepEqual( Stem("injuries"), "injuri");});
test("injuring -> injur", function() {deepEqual( Stem("injuring"), "injur");});
test("injurious -> injuri", function() {deepEqual( Stem("injurious"), "injuri");});
test("injury -> injuri", function() {deepEqual( Stem("injury"), "injuri");});
test("injustice -> injustic", function() {deepEqual( Stem("injustice"), "injustic");});
test("ink -> ink", function() {deepEqual( Stem("ink"), "ink");});
test("inked -> ink", function() {deepEqual( Stem("inked"), "ink");});
test("inkling -> inkl", function() {deepEqual( Stem("inkling"), "inkl");});
test("inkpot -> inkpot", function() {deepEqual( Stem("inkpot"), "inkpot");});
test("inkstand -> inkstand", function() {deepEqual( Stem("inkstand"), "inkstand");});
test("inkstands -> inkstand", function() {deepEqual( Stem("inkstands"), "inkstand");});
test("inkwhich -> inkwhich", function() {deepEqual( Stem("inkwhich"), "inkwhich");});
test("inkwhiched -> inkwhich", function() {deepEqual( Stem("inkwhiched"), "inkwhich");});
test("inky -> inki", function() {deepEqual( Stem("inky"), "inki");});
test("inlaid -> inlaid", function() {deepEqual( Stem("inlaid"), "inlaid");});
test("inland -> inland", function() {deepEqual( Stem("inland"), "inland");});
test("inlet -> inlet", function() {deepEqual( Stem("inlet"), "inlet");});
test("inlets -> inlet", function() {deepEqual( Stem("inlets"), "inlet");});
test("inmate -> inmat", function() {deepEqual( Stem("inmate"), "inmat");});
test("inmates -> inmat", function() {deepEqual( Stem("inmates"), "inmat");});
test("inmost -> inmost", function() {deepEqual( Stem("inmost"), "inmost");});
test("inn -> inn", function() {deepEqual( Stem("inn"), "inn");});
test("innate -> innat", function() {deepEqual( Stem("innate"), "innat");});
test("inner -> inner", function() {deepEqual( Stem("inner"), "inner");});
test("innings -> inning", function() {deepEqual( Stem("innings"), "inning");});
test("innkeeper -> innkeep", function() {deepEqual( Stem("innkeeper"), "innkeep");});
test("innkeepers -> innkeep", function() {deepEqual( Stem("innkeepers"), "innkeep");});
test("innocence -> innoc", function() {deepEqual( Stem("innocence"), "innoc");});
test("innocent -> innoc", function() {deepEqual( Stem("innocent"), "innoc");});
test("innocently -> innoc", function() {deepEqual( Stem("innocently"), "innoc");});
test("innocents -> innoc", function() {deepEqual( Stem("innocents"), "innoc");});
test("innocuous -> innocu", function() {deepEqual( Stem("innocuous"), "innocu");});
test("innombrable -> innombr", function() {deepEqual( Stem("innombrable"), "innombr");});
test("inns -> inn", function() {deepEqual( Stem("inns"), "inn");});
test("innuendo -> innuendo", function() {deepEqual( Stem("innuendo"), "innuendo");});
test("innuendoes -> innuendo", function() {deepEqual( Stem("innuendoes"), "innuendo");});
test("innumerable -> innumer", function() {deepEqual( Stem("innumerable"), "innumer");});
test("inoffensive -> inoffens", function() {deepEqual( Stem("inoffensive"), "inoffens");});
test("inopportune -> inopportun", function() {deepEqual( Stem("inopportune"), "inopportun");});
test("inopportunely -> inopportun", function() {deepEqual( Stem("inopportunely"), "inopportun");});
test("inorganic -> inorgan", function() {deepEqual( Stem("inorganic"), "inorgan");});
test("inquest -> inquest", function() {deepEqual( Stem("inquest"), "inquest");});
test("inquests -> inquest", function() {deepEqual( Stem("inquests"), "inquest");});
test("inquire -> inquir", function() {deepEqual( Stem("inquire"), "inquir");});
test("inquired -> inquir", function() {deepEqual( Stem("inquired"), "inquir");});
test("inquirer -> inquir", function() {deepEqual( Stem("inquirer"), "inquir");});
test("inquirers -> inquir", function() {deepEqual( Stem("inquirers"), "inquir");});
test("inquires -> inquir", function() {deepEqual( Stem("inquires"), "inquir");});
test("inquiries -> inquiri", function() {deepEqual( Stem("inquiries"), "inquiri");});
test("inquiring -> inquir", function() {deepEqual( Stem("inquiring"), "inquir");});
test("inquiringly -> inquir", function() {deepEqual( Stem("inquiringly"), "inquir");});
test("inquiry -> inquiri", function() {deepEqual( Stem("inquiry"), "inquiri");});
test("inquisition -> inquisit", function() {deepEqual( Stem("inquisition"), "inquisit");});
test("inquisitive -> inquisit", function() {deepEqual( Stem("inquisitive"), "inquisit");});
test("inquisitively -> inquisit", function() {deepEqual( Stem("inquisitively"), "inquisit");});
test("inquisitiveness -> inquisit", function() {deepEqual( Stem("inquisitiveness"), "inquisit");});
test("inroad -> inroad", function() {deepEqual( Stem("inroad"), "inroad");});
test("inroads -> inroad", function() {deepEqual( Stem("inroads"), "inroad");});
test("ins -> in", function() {deepEqual( Stem("ins"), "in");});
test("insane -> insan", function() {deepEqual( Stem("insane"), "insan");});
test("insanity -> insan", function() {deepEqual( Stem("insanity"), "insan");});
test("insatiable -> insati", function() {deepEqual( Stem("insatiable"), "insati");});
test("insatiate -> insati", function() {deepEqual( Stem("insatiate"), "insati");});
test("inscribed -> inscrib", function() {deepEqual( Stem("inscribed"), "inscrib");});
test("inscription -> inscript", function() {deepEqual( Stem("inscription"), "inscript");});
test("inscriptions -> inscript", function() {deepEqual( Stem("inscriptions"), "inscript");});
test("inscrutable -> inscrut", function() {deepEqual( Stem("inscrutable"), "inscrut");});
test("insect -> insect", function() {deepEqual( Stem("insect"), "insect");});
test("insects -> insect", function() {deepEqual( Stem("insects"), "insect");});
test("insecure -> insecur", function() {deepEqual( Stem("insecure"), "insecur");});
test("insecurity -> insecur", function() {deepEqual( Stem("insecurity"), "insecur");});
test("insense -> insens", function() {deepEqual( Stem("insense"), "insens");});
test("insensibility -> insens", function() {deepEqual( Stem("insensibility"), "insens");});
test("insensible -> insens", function() {deepEqual( Stem("insensible"), "insens");});
test("insensibly -> insens", function() {deepEqual( Stem("insensibly"), "insens");});
test("inseparable -> insepar", function() {deepEqual( Stem("inseparable"), "insepar");});
test("inserted -> insert", function() {deepEqual( Stem("inserted"), "insert");});
test("inserting -> insert", function() {deepEqual( Stem("inserting"), "insert");});
test("insertion -> insert", function() {deepEqual( Stem("insertion"), "insert");});
test("inserts -> insert", function() {deepEqual( Stem("inserts"), "insert");});
test("inside -> insid", function() {deepEqual( Stem("inside"), "insid");});
test("insides -> insid", function() {deepEqual( Stem("insides"), "insid");});
test("insight -> insight", function() {deepEqual( Stem("insight"), "insight");});
test("insignificance -> insignific", function() {deepEqual( Stem("insignificance"), "insignific");});
test("insignificant -> insignific", function() {deepEqual( Stem("insignificant"), "insignific");});
test("insinuate -> insinu", function() {deepEqual( Stem("insinuate"), "insinu");});
test("insinuated -> insinu", function() {deepEqual( Stem("insinuated"), "insinu");});
test("insinuating -> insinu", function() {deepEqual( Stem("insinuating"), "insinu");});
test("insinuation -> insinu", function() {deepEqual( Stem("insinuation"), "insinu");});
test("insinuations -> insinu", function() {deepEqual( Stem("insinuations"), "insinu");});
test("insipid -> insipid", function() {deepEqual( Stem("insipid"), "insipid");});
test("insipidity -> insipid", function() {deepEqual( Stem("insipidity"), "insipid");});
test("insist -> insist", function() {deepEqual( Stem("insist"), "insist");});
test("insisted -> insist", function() {deepEqual( Stem("insisted"), "insist");});
test("insistence -> insist", function() {deepEqual( Stem("insistence"), "insist");});
test("insistent -> insist", function() {deepEqual( Stem("insistent"), "insist");});
test("insistently -> insist", function() {deepEqual( Stem("insistently"), "insist");});
test("insistes -> insist", function() {deepEqual( Stem("insistes"), "insist");});
test("insisting -> insist", function() {deepEqual( Stem("insisting"), "insist");});
test("insists -> insist", function() {deepEqual( Stem("insists"), "insist");});
test("insolence -> insol", function() {deepEqual( Stem("insolence"), "insol");});
test("insolent -> insol", function() {deepEqual( Stem("insolent"), "insol");});
test("insolently -> insol", function() {deepEqual( Stem("insolently"), "insol");});
test("insolvent -> insolv", function() {deepEqual( Stem("insolvent"), "insolv");});
test("insomuch -> insomuch", function() {deepEqual( Stem("insomuch"), "insomuch");});
test("inspect -> inspect", function() {deepEqual( Stem("inspect"), "inspect");});
test("inspected -> inspect", function() {deepEqual( Stem("inspected"), "inspect");});
test("inspecting -> inspect", function() {deepEqual( Stem("inspecting"), "inspect");});
test("inspection -> inspect", function() {deepEqual( Stem("inspection"), "inspect");});
test("inspector -> inspector", function() {deepEqual( Stem("inspector"), "inspector");});
test("inspects -> inspect", function() {deepEqual( Stem("inspects"), "inspect");});
test("inspiration -> inspir", function() {deepEqual( Stem("inspiration"), "inspir");});
test("inspire -> inspir", function() {deepEqual( Stem("inspire"), "inspir");});
test("inspired -> inspir", function() {deepEqual( Stem("inspired"), "inspir");});
test("inspires -> inspir", function() {deepEqual( Stem("inspires"), "inspir");});
test("inspiring -> inspir", function() {deepEqual( Stem("inspiring"), "inspir");});
test("inspirit -> inspirit", function() {deepEqual( Stem("inspirit"), "inspirit");});
test("inspiriting -> inspirit", function() {deepEqual( Stem("inspiriting"), "inspirit");});
test("instability -> instabl", function() {deepEqual( Stem("instability"), "instabl");});
test("installed -> instal", function() {deepEqual( Stem("installed"), "instal");});
test("instalment -> instal", function() {deepEqual( Stem("instalment"), "instal");});
test("instance -> instanc", function() {deepEqual( Stem("instance"), "instanc");});
test("instanced -> instanc", function() {deepEqual( Stem("instanced"), "instanc");});
test("instances -> instanc", function() {deepEqual( Stem("instances"), "instanc");});
test("instant -> instant", function() {deepEqual( Stem("instant"), "instant");});
test("instantaneous -> instantan", function() {deepEqual( Stem("instantaneous"), "instantan");});
test("instantaneously -> instantan", function() {deepEqual( Stem("instantaneously"), "instantan");});
test("instantly -> instant", function() {deepEqual( Stem("instantly"), "instant");});
test("instea -> instea", function() {deepEqual( Stem("instea"), "instea");});
test("instead -> instead", function() {deepEqual( Stem("instead"), "instead");});
test("instigated -> instig", function() {deepEqual( Stem("instigated"), "instig");});
test("instigation -> instig", function() {deepEqual( Stem("instigation"), "instig");});
test("instigator -> instig", function() {deepEqual( Stem("instigator"), "instig");});
test("instil -> instil", function() {deepEqual( Stem("instil"), "instil");});
test("instinct -> instinct", function() {deepEqual( Stem("instinct"), "instinct");});
test("instinctive -> instinct", function() {deepEqual( Stem("instinctive"), "instinct");});
test("instinctively -> instinct", function() {deepEqual( Stem("instinctively"), "instinct");});
test("instincts -> instinct", function() {deepEqual( Stem("instincts"), "instinct");});
test("institut -> institut", function() {deepEqual( Stem("institut"), "institut");});
test("institute -> institut", function() {deepEqual( Stem("institute"), "institut");});
test("instituted -> institut", function() {deepEqual( Stem("instituted"), "institut");});
test("institution -> institut", function() {deepEqual( Stem("institution"), "institut");});
test("institutions -> institut", function() {deepEqual( Stem("institutions"), "institut");});
test("instruct -> instruct", function() {deepEqual( Stem("instruct"), "instruct");});
test("instructed -> instruct", function() {deepEqual( Stem("instructed"), "instruct");});
test("instructing -> instruct", function() {deepEqual( Stem("instructing"), "instruct");});
test("instruction -> instruct", function() {deepEqual( Stem("instruction"), "instruct");});
test("instructions -> instruct", function() {deepEqual( Stem("instructions"), "instruct");});
test("instructive -> instruct", function() {deepEqual( Stem("instructive"), "instruct");});
test("instructor -> instructor", function() {deepEqual( Stem("instructor"), "instructor");});
test("instructs -> instruct", function() {deepEqual( Stem("instructs"), "instruct");});
test("instrument -> instrument", function() {deepEqual( Stem("instrument"), "instrument");});
test("instrumental -> instrument", function() {deepEqual( Stem("instrumental"), "instrument");});
test("instrumentality -> instrument", function() {deepEqual( Stem("instrumentality"), "instrument");});
test("instruments -> instrument", function() {deepEqual( Stem("instruments"), "instrument");});
test("insubordinate -> insubordin", function() {deepEqual( Stem("insubordinate"), "insubordin");});
test("insubordination -> insubordin", function() {deepEqual( Stem("insubordination"), "insubordin");});
test("insufferable -> insuffer", function() {deepEqual( Stem("insufferable"), "insuffer");});
test("insufferably -> insuffer", function() {deepEqual( Stem("insufferably"), "insuffer");});
test("insufficient -> insuffici", function() {deepEqual( Stem("insufficient"), "insuffici");});
test("insufficiently -> insuffici", function() {deepEqual( Stem("insufficiently"), "insuffici");});
test("insular -> insular", function() {deepEqual( Stem("insular"), "insular");});
test("insulated -> insul", function() {deepEqual( Stem("insulated"), "insul");});
test("insult -> insult", function() {deepEqual( Stem("insult"), "insult");});
test("insulted -> insult", function() {deepEqual( Stem("insulted"), "insult");});
test("insulting -> insult", function() {deepEqual( Stem("insulting"), "insult");});
test("insults -> insult", function() {deepEqual( Stem("insults"), "insult");});
test("insuperable -> insuper", function() {deepEqual( Stem("insuperable"), "insuper");});
test("insupportable -> insupport", function() {deepEqual( Stem("insupportable"), "insupport");});
test("insure -> insur", function() {deepEqual( Stem("insure"), "insur");});
test("insured -> insur", function() {deepEqual( Stem("insured"), "insur");});
test("insuring -> insur", function() {deepEqual( Stem("insuring"), "insur");});
test("insurmountable -> insurmount", function() {deepEqual( Stem("insurmountable"), "insurmount");});
test("intact -> intact", function() {deepEqual( Stem("intact"), "intact");});
test("integral -> integr", function() {deepEqual( Stem("integral"), "integr");});
test("integrity -> integr", function() {deepEqual( Stem("integrity"), "integr");});
test("intellect -> intellect", function() {deepEqual( Stem("intellect"), "intellect");});
test("intellects -> intellect", function() {deepEqual( Stem("intellects"), "intellect");});
test("intellectual -> intellectu", function() {deepEqual( Stem("intellectual"), "intellectu");});
test("intellectuality -> intellectu", function() {deepEqual( Stem("intellectuality"), "intellectu");});
test("intellectually -> intellectu", function() {deepEqual( Stem("intellectually"), "intellectu");});
test("intelligence -> intellig", function() {deepEqual( Stem("intelligence"), "intellig");});
test("intelligent -> intellig", function() {deepEqual( Stem("intelligent"), "intellig");});
test("intelligently -> intellig", function() {deepEqual( Stem("intelligently"), "intellig");});
test("intelligible -> intellig", function() {deepEqual( Stem("intelligible"), "intellig");});
test("intelligibly -> intellig", function() {deepEqual( Stem("intelligibly"), "intellig");});
test("intemperance -> intemper", function() {deepEqual( Stem("intemperance"), "intemper");});
test("intemperate -> intemper", function() {deepEqual( Stem("intemperate"), "intemper");});
test("intend -> intend", function() {deepEqual( Stem("intend"), "intend");});
test("intended -> intend", function() {deepEqual( Stem("intended"), "intend");});
test("intendeds -> intend", function() {deepEqual( Stem("intendeds"), "intend");});
test("intending -> intend", function() {deepEqual( Stem("intending"), "intend");});
test("intends -> intend", function() {deepEqual( Stem("intends"), "intend");});
test("intense -> intens", function() {deepEqual( Stem("intense"), "intens");});
test("intensely -> intens", function() {deepEqual( Stem("intensely"), "intens");});
test("intensest -> intensest", function() {deepEqual( Stem("intensest"), "intensest");});
test("intensifies -> intensifi", function() {deepEqual( Stem("intensifies"), "intensifi");});
test("intensifying -> intensifi", function() {deepEqual( Stem("intensifying"), "intensifi");});
test("intensity -> intens", function() {deepEqual( Stem("intensity"), "intens");});
test("intent -> intent", function() {deepEqual( Stem("intent"), "intent");});
test("intention -> intent", function() {deepEqual( Stem("intention"), "intent");});
test("intentional -> intent", function() {deepEqual( Stem("intentional"), "intent");});
test("intentionally -> intent", function() {deepEqual( Stem("intentionally"), "intent");});
test("intentioned -> intent", function() {deepEqual( Stem("intentioned"), "intent");});
test("intentions -> intent", function() {deepEqual( Stem("intentions"), "intent");});
test("intently -> intent", function() {deepEqual( Stem("intently"), "intent");});
test("intents -> intent", function() {deepEqual( Stem("intents"), "intent");});
test("inter -> inter", function() {deepEqual( Stem("inter"), "inter");});
test("intercalated -> intercal", function() {deepEqual( Stem("intercalated"), "intercal");});
test("intercede -> interced", function() {deepEqual( Stem("intercede"), "interced");});
test("intercept -> intercept", function() {deepEqual( Stem("intercept"), "intercept");});
test("intercepted -> intercept", function() {deepEqual( Stem("intercepted"), "intercept");});
test("intercepting -> intercept", function() {deepEqual( Stem("intercepting"), "intercept");});
test("intercepts -> intercept", function() {deepEqual( Stem("intercepts"), "intercept");});
test("intercession -> intercess", function() {deepEqual( Stem("intercession"), "intercess");});
test("interchange -> interchang", function() {deepEqual( Stem("interchange"), "interchang");});
test("interchangeable -> interchang", function() {deepEqual( Stem("interchangeable"), "interchang");});
test("interchanged -> interchang", function() {deepEqual( Stem("interchanged"), "interchang");});
test("interchanging -> interchang", function() {deepEqual( Stem("interchanging"), "interchang");});
test("intercourse -> intercours", function() {deepEqual( Stem("intercourse"), "intercours");});
test("interest -> interest", function() {deepEqual( Stem("interest"), "interest");});
test("interested -> interest", function() {deepEqual( Stem("interested"), "interest");});
test("interestin -> interestin", function() {deepEqual( Stem("interestin"), "interestin");});
test("interesting -> interest", function() {deepEqual( Stem("interesting"), "interest");});
test("interests -> interest", function() {deepEqual( Stem("interests"), "interest");});
test("interfere -> interfer", function() {deepEqual( Stem("interfere"), "interfer");});
test("interfered -> interf", function() {deepEqual( Stem("interfered"), "interf");});
test("interference -> interfer", function() {deepEqual( Stem("interference"), "interfer");});
test("interferes -> interfer", function() {deepEqual( Stem("interferes"), "interfer");});
test("interfering -> interf", function() {deepEqual( Stem("interfering"), "interf");});
test("interior -> interior", function() {deepEqual( Stem("interior"), "interior");});
test("interjection -> interject", function() {deepEqual( Stem("interjection"), "interject");});
test("interlacings -> interlac", function() {deepEqual( Stem("interlacings"), "interlac");});
test("interleaved -> interleav", function() {deepEqual( Stem("interleaved"), "interleav");});
test("interloper -> interlop", function() {deepEqual( Stem("interloper"), "interlop");});
test("interlopers -> interlop", function() {deepEqual( Stem("interlopers"), "interlop");});
test("interlude -> interlud", function() {deepEqual( Stem("interlude"), "interlud");});
test("intermarriages -> intermarriag", function() {deepEqual( Stem("intermarriages"), "intermarriag");});
test("intermeddling -> intermeddl", function() {deepEqual( Stem("intermeddling"), "intermeddl");});
test("intermediate -> intermedi", function() {deepEqual( Stem("intermediate"), "intermedi");});
test("interminable -> intermin", function() {deepEqual( Stem("interminable"), "intermin");});
test("intermingling -> intermingl", function() {deepEqual( Stem("intermingling"), "intermingl");});
test("intermission -> intermiss", function() {deepEqual( Stem("intermission"), "intermiss");});
test("intermittent -> intermitt", function() {deepEqual( Stem("intermittent"), "intermitt");});
test("internal -> intern", function() {deepEqual( Stem("internal"), "intern");});
test("internally -> intern", function() {deepEqual( Stem("internally"), "intern");});
test("international -> intern", function() {deepEqual( Stem("international"), "intern");});
test("interpose -> interpos", function() {deepEqual( Stem("interpose"), "interpos");});
test("interposed -> interpos", function() {deepEqual( Stem("interposed"), "interpos");});
test("interposes -> interpos", function() {deepEqual( Stem("interposes"), "interpos");});
test("interposing -> interpos", function() {deepEqual( Stem("interposing"), "interpos");});
test("interposition -> interposit", function() {deepEqual( Stem("interposition"), "interposit");});
test("interpret -> interpret", function() {deepEqual( Stem("interpret"), "interpret");});
test("interpretation -> interpret", function() {deepEqual( Stem("interpretation"), "interpret");});
test("interpretations -> interpret", function() {deepEqual( Stem("interpretations"), "interpret");});
test("interpreted -> interpret", function() {deepEqual( Stem("interpreted"), "interpret");});
test("interpreter -> interpret", function() {deepEqual( Stem("interpreter"), "interpret");});
test("interrogate -> interrog", function() {deepEqual( Stem("interrogate"), "interrog");});
test("interrogated -> interrog", function() {deepEqual( Stem("interrogated"), "interrog");});
test("interrogating -> interrog", function() {deepEqual( Stem("interrogating"), "interrog");});
test("interrogations -> interrog", function() {deepEqual( Stem("interrogations"), "interrog");});
test("interrogator -> interrog", function() {deepEqual( Stem("interrogator"), "interrog");});
test("interrogatories -> interrogatori", function() {deepEqual( Stem("interrogatories"), "interrogatori");});
test("interrogatory -> interrogatori", function() {deepEqual( Stem("interrogatory"), "interrogatori");});
test("interrupt -> interrupt", function() {deepEqual( Stem("interrupt"), "interrupt");});
test("interrupted -> interrupt", function() {deepEqual( Stem("interrupted"), "interrupt");});
test("interrupting -> interrupt", function() {deepEqual( Stem("interrupting"), "interrupt");});
test("interruption -> interrupt", function() {deepEqual( Stem("interruption"), "interrupt");});
test("interruptions -> interrupt", function() {deepEqual( Stem("interruptions"), "interrupt");});
test("interrupts -> interrupt", function() {deepEqual( Stem("interrupts"), "interrupt");});
test("intersect -> intersect", function() {deepEqual( Stem("intersect"), "intersect");});
test("intersected -> intersect", function() {deepEqual( Stem("intersected"), "intersect");});
test("intersecting -> intersect", function() {deepEqual( Stem("intersecting"), "intersect");});
test("intersection -> intersect", function() {deepEqual( Stem("intersection"), "intersect");});
test("interspersed -> interspers", function() {deepEqual( Stem("interspersed"), "interspers");});
test("interspersing -> interspers", function() {deepEqual( Stem("interspersing"), "interspers");});
test("interstices -> interstic", function() {deepEqual( Stem("interstices"), "interstic");});
test("interstratified -> interstratifi", function() {deepEqual( Stem("interstratified"), "interstratifi");});
test("intertropical -> intertrop", function() {deepEqual( Stem("intertropical"), "intertrop");});
test("intertwined -> intertwin", function() {deepEqual( Stem("intertwined"), "intertwin");});
test("interval -> interv", function() {deepEqual( Stem("interval"), "interv");});
test("intervals -> interv", function() {deepEqual( Stem("intervals"), "interv");});
test("intervened -> interven", function() {deepEqual( Stem("intervened"), "interven");});
test("intervening -> interven", function() {deepEqual( Stem("intervening"), "interven");});
test("interview -> interview", function() {deepEqual( Stem("interview"), "interview");});
test("interviews -> interview", function() {deepEqual( Stem("interviews"), "interview");});
test("interwoven -> interwoven", function() {deepEqual( Stem("interwoven"), "interwoven");});
test("intestate -> intest", function() {deepEqual( Stem("intestate"), "intest");});
test("intestinal -> intestin", function() {deepEqual( Stem("intestinal"), "intestin");});
test("intestines -> intestin", function() {deepEqual( Stem("intestines"), "intestin");});
test("intimacy -> intimaci", function() {deepEqual( Stem("intimacy"), "intimaci");});
test("intimate -> intim", function() {deepEqual( Stem("intimate"), "intim");});
test("intimated -> intim", function() {deepEqual( Stem("intimated"), "intim");});
test("intimately -> intim", function() {deepEqual( Stem("intimately"), "intim");});
test("intimates -> intim", function() {deepEqual( Stem("intimates"), "intim");});
test("intimating -> intim", function() {deepEqual( Stem("intimating"), "intim");});
test("intimation -> intim", function() {deepEqual( Stem("intimation"), "intim");});
test("intimidated -> intimid", function() {deepEqual( Stem("intimidated"), "intimid");});
test("intimidation -> intimid", function() {deepEqual( Stem("intimidation"), "intimid");});
test("intiv -> intiv", function() {deepEqual( Stem("intiv"), "intiv");});
test("into -> into", function() {deepEqual( Stem("into"), "into");});
test("intolerable -> intoler", function() {deepEqual( Stem("intolerable"), "intoler");});
test("intolerably -> intoler", function() {deepEqual( Stem("intolerably"), "intoler");});
test("intombed -> intomb", function() {deepEqual( Stem("intombed"), "intomb");});
test("intonation -> inton", function() {deepEqual( Stem("intonation"), "inton");});
test("intonations -> inton", function() {deepEqual( Stem("intonations"), "inton");});
test("intoning -> inton", function() {deepEqual( Stem("intoning"), "inton");});
test("intoxicated -> intox", function() {deepEqual( Stem("intoxicated"), "intox");});
test("intoxicating -> intox", function() {deepEqual( Stem("intoxicating"), "intox");});
test("intoxication -> intox", function() {deepEqual( Stem("intoxication"), "intox");});
test("intractable -> intract", function() {deepEqual( Stem("intractable"), "intract");});
test("intreat -> intreat", function() {deepEqual( Stem("intreat"), "intreat");});
test("intrepid -> intrepid", function() {deepEqual( Stem("intrepid"), "intrepid");});
test("intrepidity -> intrepid", function() {deepEqual( Stem("intrepidity"), "intrepid");});
test("intricacies -> intricaci", function() {deepEqual( Stem("intricacies"), "intricaci");});
test("intricate -> intric", function() {deepEqual( Stem("intricate"), "intric");});
test("intrigue -> intrigu", function() {deepEqual( Stem("intrigue"), "intrigu");});
test("intrigued -> intrigu", function() {deepEqual( Stem("intrigued"), "intrigu");});
test("intrigues -> intrigu", function() {deepEqual( Stem("intrigues"), "intrigu");});
test("intriguing -> intrigu", function() {deepEqual( Stem("intriguing"), "intrigu");});
test("intrinsic -> intrins", function() {deepEqual( Stem("intrinsic"), "intrins");});
test("introduce -> introduc", function() {deepEqual( Stem("introduce"), "introduc");});
test("introduced -> introduc", function() {deepEqual( Stem("introduced"), "introduc");});
test("introduces -> introduc", function() {deepEqual( Stem("introduces"), "introduc");});
test("introducing -> introduc", function() {deepEqual( Stem("introducing"), "introduc");});
test("introduction -> introduct", function() {deepEqual( Stem("introduction"), "introduct");});
test("introductions -> introduct", function() {deepEqual( Stem("introductions"), "introduct");});
test("introductory -> introductori", function() {deepEqual( Stem("introductory"), "introductori");});
test("intrude -> intrud", function() {deepEqual( Stem("intrude"), "intrud");});
test("intruded -> intrud", function() {deepEqual( Stem("intruded"), "intrud");});
test("intruder -> intrud", function() {deepEqual( Stem("intruder"), "intrud");});
test("intrudes -> intrud", function() {deepEqual( Stem("intrudes"), "intrud");});
test("intruding -> intrud", function() {deepEqual( Stem("intruding"), "intrud");});
test("intrusion -> intrus", function() {deepEqual( Stem("intrusion"), "intrus");});
test("intrusive -> intrus", function() {deepEqual( Stem("intrusive"), "intrus");});
test("intrust -> intrust", function() {deepEqual( Stem("intrust"), "intrust");});
test("intrusted -> intrust", function() {deepEqual( Stem("intrusted"), "intrust");});
test("intuition -> intuit", function() {deepEqual( Stem("intuition"), "intuit");});
test("intuitive -> intuit", function() {deepEqual( Stem("intuitive"), "intuit");});
test("intwined -> intwin", function() {deepEqual( Stem("intwined"), "intwin");});
test("intwining -> intwin", function() {deepEqual( Stem("intwining"), "intwin");});
test("inundated -> inund", function() {deepEqual( Stem("inundated"), "inund");});
test("inundations -> inund", function() {deepEqual( Stem("inundations"), "inund");});
test("inured -> inur", function() {deepEqual( Stem("inured"), "inur");});
test("inutility -> inutil", function() {deepEqual( Stem("inutility"), "inutil");});
test("invade -> invad", function() {deepEqual( Stem("invade"), "invad");});
test("invaded -> invad", function() {deepEqual( Stem("invaded"), "invad");});
test("invaders -> invad", function() {deepEqual( Stem("invaders"), "invad");});
test("invading -> invad", function() {deepEqual( Stem("invading"), "invad");});
test("invalid -> invalid", function() {deepEqual( Stem("invalid"), "invalid");});
test("invalidate -> invalid", function() {deepEqual( Stem("invalidate"), "invalid");});
test("invalided -> invalid", function() {deepEqual( Stem("invalided"), "invalid");});
test("invalids -> invalid", function() {deepEqual( Stem("invalids"), "invalid");});
test("invaluable -> invalu", function() {deepEqual( Stem("invaluable"), "invalu");});
test("invariable -> invari", function() {deepEqual( Stem("invariable"), "invari");});
test("invariably -> invari", function() {deepEqual( Stem("invariably"), "invari");});
test("invasion -> invas", function() {deepEqual( Stem("invasion"), "invas");});
test("invective -> invect", function() {deepEqual( Stem("invective"), "invect");});
test("invectives -> invect", function() {deepEqual( Stem("invectives"), "invect");});
test("inveighed -> inveigh", function() {deepEqual( Stem("inveighed"), "inveigh");});
test("inveigle -> inveigl", function() {deepEqual( Stem("inveigle"), "inveigl");});
test("inveigled -> inveigl", function() {deepEqual( Stem("inveigled"), "inveigl");});
test("invencion -> invencion", function() {deepEqual( Stem("invencion"), "invencion");});
test("invent -> invent", function() {deepEqual( Stem("invent"), "invent");});
test("invented -> invent", function() {deepEqual( Stem("invented"), "invent");});
test("inventing -> invent", function() {deepEqual( Stem("inventing"), "invent");});
test("invention -> invent", function() {deepEqual( Stem("invention"), "invent");});
test("inventions -> invent", function() {deepEqual( Stem("inventions"), "invent");});
test("inventory -> inventori", function() {deepEqual( Stem("inventory"), "inventori");});
test("invents -> invent", function() {deepEqual( Stem("invents"), "invent");});
test("inverness -> inver", function() {deepEqual( Stem("inverness"), "inver");});
test("invertebrate -> invertebr", function() {deepEqual( Stem("invertebrate"), "invertebr");});
test("inverted -> invert", function() {deepEqual( Stem("inverted"), "invert");});
test("invest -> invest", function() {deepEqual( Stem("invest"), "invest");});
test("invested -> invest", function() {deepEqual( Stem("invested"), "invest");});
test("investigate -> investig", function() {deepEqual( Stem("investigate"), "investig");});
test("investigated -> investig", function() {deepEqual( Stem("investigated"), "investig");});
test("investigating -> investig", function() {deepEqual( Stem("investigating"), "investig");});
test("investigation -> investig", function() {deepEqual( Stem("investigation"), "investig");});
test("investigations -> investig", function() {deepEqual( Stem("investigations"), "investig");});
test("investigators -> investig", function() {deepEqual( Stem("investigators"), "investig");});
test("investment -> invest", function() {deepEqual( Stem("investment"), "invest");});
test("invests -> invest", function() {deepEqual( Stem("invests"), "invest");});
test("inveterate -> inveter", function() {deepEqual( Stem("inveterate"), "inveter");});
test("invigorate -> invigor", function() {deepEqual( Stem("invigorate"), "invigor");});
test("invigorated -> invigor", function() {deepEqual( Stem("invigorated"), "invigor");});
test("invigorating -> invigor", function() {deepEqual( Stem("invigorating"), "invigor");});
test("invigoration -> invigor", function() {deepEqual( Stem("invigoration"), "invigor");});
test("invincible -> invinc", function() {deepEqual( Stem("invincible"), "invinc");});
test("invisible -> invis", function() {deepEqual( Stem("invisible"), "invis");});
test("invisibly -> invis", function() {deepEqual( Stem("invisibly"), "invis");});
test("invitation -> invit", function() {deepEqual( Stem("invitation"), "invit");});
test("invitations -> invit", function() {deepEqual( Stem("invitations"), "invit");});
test("invite -> invit", function() {deepEqual( Stem("invite"), "invit");});
test("invited -> invit", function() {deepEqual( Stem("invited"), "invit");});
test("invites -> invit", function() {deepEqual( Stem("invites"), "invit");});
test("inviting -> invit", function() {deepEqual( Stem("inviting"), "invit");});
test("invitingly -> invit", function() {deepEqual( Stem("invitingly"), "invit");});
test("invoking -> invok", function() {deepEqual( Stem("invoking"), "invok");});
test("involuntarily -> involuntarili", function() {deepEqual( Stem("involuntarily"), "involuntarili");});
test("involuntary -> involuntari", function() {deepEqual( Stem("involuntary"), "involuntari");});
test("involutions -> involut", function() {deepEqual( Stem("involutions"), "involut");});
test("involve -> involv", function() {deepEqual( Stem("involve"), "involv");});
test("involved -> involv", function() {deepEqual( Stem("involved"), "involv");});
test("involvement -> involv", function() {deepEqual( Stem("involvement"), "involv");});
test("involves -> involv", function() {deepEqual( Stem("involves"), "involv");});
test("involving -> involv", function() {deepEqual( Stem("involving"), "involv");});
test("inward -> inward", function() {deepEqual( Stem("inward"), "inward");});
test("inwardly -> inward", function() {deepEqual( Stem("inwardly"), "inward");});
test("inwards -> inward", function() {deepEqual( Stem("inwards"), "inward");});
test("inwentory -> inwentori", function() {deepEqual( Stem("inwentory"), "inwentori");});
test("iodic -> iodic", function() {deepEqual( Stem("iodic"), "iodic");});
test("ionic -> ionic", function() {deepEqual( Stem("ionic"), "ionic");});
test("iota -> iota", function() {deepEqual( Stem("iota"), "iota");});
test("iou -> iou", function() {deepEqual( Stem("iou"), "iou");});
test("iquique -> iquiqu", function() {deepEqual( Stem("iquique"), "iquiqu");});
test("irascibility -> irasc", function() {deepEqual( Stem("irascibility"), "irasc");});
test("irascible -> irasc", function() {deepEqual( Stem("irascible"), "irasc");});
test("irascibly -> irasc", function() {deepEqual( Stem("irascibly"), "irasc");});
test("irate -> irat", function() {deepEqual( Stem("irate"), "irat");});
test("ire -> ire", function() {deepEqual( Stem("ire"), "ire");});
test("ireland -> ireland", function() {deepEqual( Stem("ireland"), "ireland");});
test("iridescent -> iridesc", function() {deepEqual( Stem("iridescent"), "iridesc");});
test("iris -> iri", function() {deepEqual( Stem("iris"), "iri");});
test("irish -> irish", function() {deepEqual( Stem("irish"), "irish");});
test("irishman -> irishman", function() {deepEqual( Stem("irishman"), "irishman");});
test("irishmen -> irishmen", function() {deepEqual( Stem("irishmen"), "irishmen");});
test("irishwoman -> irishwoman", function() {deepEqual( Stem("irishwoman"), "irishwoman");});
test("irksome -> irksom", function() {deepEqual( Stem("irksome"), "irksom");});
test("irksomeness -> irksom", function() {deepEqual( Stem("irksomeness"), "irksom");});
test("iron -> iron", function() {deepEqual( Stem("iron"), "iron");});
test("ironed -> iron", function() {deepEqual( Stem("ironed"), "iron");});
test("ironical -> iron", function() {deepEqual( Stem("ironical"), "iron");});
test("ironically -> iron", function() {deepEqual( Stem("ironically"), "iron");});
test("ironing -> iron", function() {deepEqual( Stem("ironing"), "iron");});
test("ironmaster -> ironmast", function() {deepEqual( Stem("ironmaster"), "ironmast");});
test("ironmasters -> ironmast", function() {deepEqual( Stem("ironmasters"), "ironmast");});
test("ironmonger -> ironmong", function() {deepEqual( Stem("ironmonger"), "ironmong");});
test("irons -> iron", function() {deepEqual( Stem("irons"), "iron");});
test("irony -> ironi", function() {deepEqual( Stem("irony"), "ironi");});
test("irradiated -> irradi", function() {deepEqual( Stem("irradiated"), "irradi");});
test("irrational -> irrat", function() {deepEqual( Stem("irrational"), "irrat");});
test("irreclaimable -> irreclaim", function() {deepEqual( Stem("irreclaimable"), "irreclaim");});
test("irreconcilable -> irreconcil", function() {deepEqual( Stem("irreconcilable"), "irreconcil");});
test("irrecoverable -> irrecover", function() {deepEqual( Stem("irrecoverable"), "irrecover");});
test("irredeemable -> irredeem", function() {deepEqual( Stem("irredeemable"), "irredeem");});
test("irrefutable -> irrefut", function() {deepEqual( Stem("irrefutable"), "irrefut");});
test("irregular -> irregular", function() {deepEqual( Stem("irregular"), "irregular");});
test("irregularities -> irregular", function() {deepEqual( Stem("irregularities"), "irregular");});
test("irregularity -> irregular", function() {deepEqual( Stem("irregularity"), "irregular");});
test("irregularly -> irregular", function() {deepEqual( Stem("irregularly"), "irregular");});
test("irrelevant -> irrelev", function() {deepEqual( Stem("irrelevant"), "irrelev");});
test("irrepressible -> irrepress", function() {deepEqual( Stem("irrepressible"), "irrepress");});
test("irreproachable -> irreproach", function() {deepEqual( Stem("irreproachable"), "irreproach");});
test("irresistible -> irresist", function() {deepEqual( Stem("irresistible"), "irresist");});
test("irresistibly -> irresist", function() {deepEqual( Stem("irresistibly"), "irresist");});
test("irresolute -> irresolut", function() {deepEqual( Stem("irresolute"), "irresolut");});
test("irresolutely -> irresolut", function() {deepEqual( Stem("irresolutely"), "irresolut");});
test("irresolution -> irresolut", function() {deepEqual( Stem("irresolution"), "irresolut");});
test("irrespective -> irrespect", function() {deepEqual( Stem("irrespective"), "irrespect");});
test("irresponsible -> irrespons", function() {deepEqual( Stem("irresponsible"), "irrespons");});
test("irresponsive -> irrespons", function() {deepEqual( Stem("irresponsive"), "irrespons");});
test("irretrievable -> irretriev", function() {deepEqual( Stem("irretrievable"), "irretriev");});
test("irretrievably -> irretriev", function() {deepEqual( Stem("irretrievably"), "irretriev");});
test("irreverent -> irrever", function() {deepEqual( Stem("irreverent"), "irrever");});
test("irreverently -> irrever", function() {deepEqual( Stem("irreverently"), "irrever");});
test("irrevocable -> irrevoc", function() {deepEqual( Stem("irrevocable"), "irrevoc");});
test("irrevocably -> irrevoc", function() {deepEqual( Stem("irrevocably"), "irrevoc");});
test("irrigate -> irrig", function() {deepEqual( Stem("irrigate"), "irrig");});
test("irrigated -> irrig", function() {deepEqual( Stem("irrigated"), "irrig");});
test("irrigating -> irrig", function() {deepEqual( Stem("irrigating"), "irrig");});
test("irrigation -> irrig", function() {deepEqual( Stem("irrigation"), "irrig");});
test("irritability -> irrit", function() {deepEqual( Stem("irritability"), "irrit");});
test("irritable -> irrit", function() {deepEqual( Stem("irritable"), "irrit");});
test("irritably -> irrit", function() {deepEqual( Stem("irritably"), "irrit");});
test("irritate -> irrit", function() {deepEqual( Stem("irritate"), "irrit");});
test("irritated -> irrit", function() {deepEqual( Stem("irritated"), "irrit");});
test("irritating -> irrit", function() {deepEqual( Stem("irritating"), "irrit");});
test("irritation -> irrit", function() {deepEqual( Stem("irritation"), "irrit");});
test("irruption -> irrupt", function() {deepEqual( Stem("irruption"), "irrupt");});
test("irtish -> irtish", function() {deepEqual( Stem("irtish"), "irtish");});
test("is -> is", function() {deepEqual( Stem("is"), "is");});
test("isabel -> isabel", function() {deepEqual( Stem("isabel"), "isabel");});
test("isaiah -> isaiah", function() {deepEqual( Stem("isaiah"), "isaiah");});
test("isid -> isid", function() {deepEqual( Stem("isid"), "isid");});
test("isidro -> isidro", function() {deepEqual( Stem("isidro"), "isidro");});
test("island -> island", function() {deepEqual( Stem("island"), "island");});
test("islanders -> island", function() {deepEqual( Stem("islanders"), "island");});
test("islands -> island", function() {deepEqual( Stem("islands"), "island");});
test("isle -> isl", function() {deepEqual( Stem("isle"), "isl");});
test("isles -> isl", function() {deepEqual( Stem("isles"), "isl");});
test("islet -> islet", function() {deepEqual( Stem("islet"), "islet");});
test("islets -> islet", function() {deepEqual( Stem("islets"), "islet");});
test("islington -> islington", function() {deepEqual( Stem("islington"), "islington");});
test("isn -> isn", function() {deepEqual( Stem("isn"), "isn");});
test("isobel -> isobel", function() {deepEqual( Stem("isobel"), "isobel");});
test("isolated -> isol", function() {deepEqual( Stem("isolated"), "isol");});
test("isolation -> isol", function() {deepEqual( Stem("isolation"), "isol");});
test("israelites -> israelit", function() {deepEqual( Stem("israelites"), "israelit");});
test("issue -> issu", function() {deepEqual( Stem("issue"), "issu");});
test("issued -> issu", function() {deepEqual( Stem("issued"), "issu");});
test("issues -> issu", function() {deepEqual( Stem("issues"), "issu");});
test("issuing -> issu", function() {deepEqual( Stem("issuing"), "issu");});
test("ist -> ist", function() {deepEqual( Stem("ist"), "ist");});
test("isthmus -> isthmus", function() {deepEqual( Stem("isthmus"), "isthmus");});
test("it -> it", function() {deepEqual( Stem("it"), "it");});
test("italian -> italian", function() {deepEqual( Stem("italian"), "italian");});
test("italy -> itali", function() {deepEqual( Stem("italy"), "itali");});
test("itch -> itch", function() {deepEqual( Stem("itch"), "itch");});
test("itchen -> itchen", function() {deepEqual( Stem("itchen"), "itchen");});
test("itching -> itch", function() {deepEqual( Stem("itching"), "itch");});
test("item -> item", function() {deepEqual( Stem("item"), "item");});
test("items -> item", function() {deepEqual( Stem("items"), "item");});
test("ithacaia -> ithacaia", function() {deepEqual( Stem("ithacaia"), "ithacaia");});
test("itinerant -> itiner", function() {deepEqual( Stem("itinerant"), "itiner");});
test("its -> it", function() {deepEqual( Stem("its"), "it");});
test("itself -> itself", function() {deepEqual( Stem("itself"), "itself");});
test("iv -> iv", function() {deepEqual( Stem("iv"), "iv");});
test("ivan -> ivan", function() {deepEqual( Stem("ivan"), "ivan");});
test("ivanitch -> ivanitch", function() {deepEqual( Stem("ivanitch"), "ivanitch");});
test("ivanovitch -> ivanovitch", function() {deepEqual( Stem("ivanovitch"), "ivanovitch");});
test("ivanovna -> ivanovna", function() {deepEqual( Stem("ivanovna"), "ivanovna");});
test("ivory -> ivori", function() {deepEqual( Stem("ivory"), "ivori");});
test("ivy -> ivi", function() {deepEqual( Stem("ivy"), "ivi");});
test("ix -> ix", function() {deepEqual( Stem("ix"), "ix");});
test("ixion -> ixion", function() {deepEqual( Stem("ixion"), "ixion");});
test("j -> j", function() {deepEqual( Stem("j"), "j");});
test("ja -> ja", function() {deepEqual( Stem("ja"), "ja");});
test("jabbers -> jabber", function() {deepEqual( Stem("jabbers"), "jabber");});
test("jaca -> jaca", function() {deepEqual( Stem("jaca"), "jaca");});
test("jack -> jack", function() {deepEqual( Stem("jack"), "jack");});
test("jackals -> jackal", function() {deepEqual( Stem("jackals"), "jackal");});
test("jackanapes -> jackanap", function() {deepEqual( Stem("jackanapes"), "jackanap");});
test("jackas -> jacka", function() {deepEqual( Stem("jackas"), "jacka");});
test("jackdaw -> jackdaw", function() {deepEqual( Stem("jackdaw"), "jackdaw");});
test("jackdaws -> jackdaw", function() {deepEqual( Stem("jackdaws"), "jackdaw");});
test("jacket -> jacket", function() {deepEqual( Stem("jacket"), "jacket");});
test("jackets -> jacket", function() {deepEqual( Stem("jackets"), "jacket");});
test("jacks -> jack", function() {deepEqual( Stem("jacks"), "jack");});
test("jackson -> jackson", function() {deepEqual( Stem("jackson"), "jackson");});
test("jacob -> jacob", function() {deepEqual( Stem("jacob"), "jacob");});
test("jacuitque -> jacuitqu", function() {deepEqual( Stem("jacuitque"), "jacuitqu");});
test("jaculation -> jacul", function() {deepEqual( Stem("jaculation"), "jacul");});
test("jade -> jade", function() {deepEqual( Stem("jade"), "jade");});
test("jaded -> jade", function() {deepEqual( Stem("jaded"), "jade");});
test("jading -> jade", function() {deepEqual( Stem("jading"), "jade");});
test("jag -> jag", function() {deepEqual( Stem("jag"), "jag");});
test("jagged -> jag", function() {deepEqual( Stem("jagged"), "jag");});
test("jago -> jago", function() {deepEqual( Stem("jago"), "jago");});
test("jaguar -> jaguar", function() {deepEqual( Stem("jaguar"), "jaguar");});
test("jaguars -> jaguar", function() {deepEqual( Stem("jaguars"), "jaguar");});
test("jail -> jail", function() {deepEqual( Stem("jail"), "jail");});
test("jailer -> jailer", function() {deepEqual( Stem("jailer"), "jailer");});
test("jajuel -> jajuel", function() {deepEqual( Stem("jajuel"), "jajuel");});
test("jam -> jam", function() {deepEqual( Stem("jam"), "jam");});
test("jamaica -> jamaica", function() {deepEqual( Stem("jamaica"), "jamaica");});
test("james -> jame", function() {deepEqual( Stem("james"), "jame");});
test("jammed -> jam", function() {deepEqual( Stem("jammed"), "jam");});
test("jams -> jam", function() {deepEqual( Stem("jams"), "jam");});
test("jan -> jan", function() {deepEqual( Stem("jan"), "jan");});
test("jane -> jane", function() {deepEqual( Stem("jane"), "jane");});
test("janeiro -> janeiro", function() {deepEqual( Stem("janeiro"), "janeiro");});
test("janes -> jane", function() {deepEqual( Stem("janes"), "jane");});
test("jangled -> jangl", function() {deepEqual( Stem("jangled"), "jangl");});
test("jangling -> jangl", function() {deepEqual( Stem("jangling"), "jangl");});
test("january -> januari", function() {deepEqual( Stem("january"), "januari");});
test("japan -> japan", function() {deepEqual( Stem("japan"), "japan");});
test("jar -> jar", function() {deepEqual( Stem("jar"), "jar");});
test("jargon -> jargon", function() {deepEqual( Stem("jargon"), "jargon");});
test("jargonelle -> jargonell", function() {deepEqual( Stem("jargonelle"), "jargonell");});
test("jarnders -> jarnder", function() {deepEqual( Stem("jarnders"), "jarnder");});
test("jarndyce -> jarndyc", function() {deepEqual( Stem("jarndyce"), "jarndyc");});
test("jarndyces -> jarndyc", function() {deepEqual( Stem("jarndyces"), "jarndyc");});
test("jarodyce -> jarodyc", function() {deepEqual( Stem("jarodyce"), "jarodyc");});
test("jarring -> jar", function() {deepEqual( Stem("jarring"), "jar");});
test("jasmine -> jasmin", function() {deepEqual( Stem("jasmine"), "jasmin");});
test("jaundice -> jaundic", function() {deepEqual( Stem("jaundice"), "jaundic");});
test("jaundiced -> jaundic", function() {deepEqual( Stem("jaundiced"), "jaundic");});
test("jaunt -> jaunt", function() {deepEqual( Stem("jaunt"), "jaunt");});
test("jauntily -> jauntili", function() {deepEqual( Stem("jauntily"), "jauntili");});
test("jauntiness -> jaunti", function() {deepEqual( Stem("jauntiness"), "jaunti");});
test("jaunty -> jaunti", function() {deepEqual( Stem("jaunty"), "jaunti");});
test("java -> java", function() {deepEqual( Stem("java"), "java");});
test("javelin -> javelin", function() {deepEqual( Stem("javelin"), "javelin");});
test("jaw -> jaw", function() {deepEqual( Stem("jaw"), "jaw");});
test("jawed -> jaw", function() {deepEqual( Stem("jawed"), "jaw");});
test("jawlly -> jawlli", function() {deepEqual( Stem("jawlly"), "jawlli");});
test("jaws -> jaw", function() {deepEqual( Stem("jaws"), "jaw");});
test("je -> je", function() {deepEqual( Stem("je"), "je");});
test("jea -> jea", function() {deepEqual( Stem("jea"), "jea");});
test("jealous -> jealous", function() {deepEqual( Stem("jealous"), "jealous");});
test("jealousies -> jealousi", function() {deepEqual( Stem("jealousies"), "jealousi");});
test("jealously -> jealous", function() {deepEqual( Stem("jealously"), "jealous");});
test("jealousy -> jealousi", function() {deepEqual( Stem("jealousy"), "jealousi");});
test("jean -> jean", function() {deepEqual( Stem("jean"), "jean");});
test("jeanie -> jeani", function() {deepEqual( Stem("jeanie"), "jeani");});
test("jeer -> jeer", function() {deepEqual( Stem("jeer"), "jeer");});
test("jeered -> jeer", function() {deepEqual( Stem("jeered"), "jeer");});
test("jeering -> jeer", function() {deepEqual( Stem("jeering"), "jeer");});
test("jeeringly -> jeer", function() {deepEqual( Stem("jeeringly"), "jeer");});
test("jeers -> jeer", function() {deepEqual( Stem("jeers"), "jeer");});
test("jell -> jell", function() {deepEqual( Stem("jell"), "jell");});
test("jelly -> jelli", function() {deepEqual( Stem("jelly"), "jelli");});
test("jellyby -> jellybi", function() {deepEqual( Stem("jellyby"), "jellybi");});
test("jellybys -> jellybi", function() {deepEqual( Stem("jellybys"), "jellybi");});
test("jemmy -> jemmi", function() {deepEqual( Stem("jemmy"), "jemmi");});
test("jenkins -> jenkin", function() {deepEqual( Stem("jenkins"), "jenkin");});
test("jennings -> jen", function() {deepEqual( Stem("jennings"), "jen");});
test("jenny -> jenni", function() {deepEqual( Stem("jenny"), "jenni");});
test("jennys -> jenni", function() {deepEqual( Stem("jennys"), "jenni");});
test("jenyns -> jenyn", function() {deepEqual( Stem("jenyns"), "jenyn");});
test("jeopardy -> jeopardi", function() {deepEqual( Stem("jeopardy"), "jeopardi");});
test("jeremy -> jeremi", function() {deepEqual( Stem("jeremy"), "jeremi");});
test("jericho -> jericho", function() {deepEqual( Stem("jericho"), "jericho");});
test("jerk -> jerk", function() {deepEqual( Stem("jerk"), "jerk");});
test("jerked -> jerk", function() {deepEqual( Stem("jerked"), "jerk");});
test("jerkily -> jerkili", function() {deepEqual( Stem("jerkily"), "jerkili");});
test("jerking -> jerk", function() {deepEqual( Stem("jerking"), "jerk");});
test("jerks -> jerk", function() {deepEqual( Stem("jerks"), "jerk");});
test("jerky -> jerki", function() {deepEqual( Stem("jerky"), "jerki");});
test("jerry -> jerri", function() {deepEqual( Stem("jerry"), "jerri");});
test("jerusalem -> jerusalem", function() {deepEqual( Stem("jerusalem"), "jerusalem");});
test("jest -> jest", function() {deepEqual( Stem("jest"), "jest");});
test("jesting -> jest", function() {deepEqual( Stem("jesting"), "jest");});
test("jestingly -> jest", function() {deepEqual( Stem("jestingly"), "jest");});
test("jests -> jest", function() {deepEqual( Stem("jests"), "jest");});
test("jesuit -> jesuit", function() {deepEqual( Stem("jesuit"), "jesuit");});
test("jesuitical -> jesuit", function() {deepEqual( Stem("jesuitical"), "jesuit");});
test("jesus -> jesus", function() {deepEqual( Stem("jesus"), "jesus");});
test("jet -> jet", function() {deepEqual( Stem("jet"), "jet");});
test("jets -> jet", function() {deepEqual( Stem("jets"), "jet");});
test("jew -> jew", function() {deepEqual( Stem("jew"), "jew");});
test("jewby -> jewbi", function() {deepEqual( Stem("jewby"), "jewbi");});
test("jewel -> jewel", function() {deepEqual( Stem("jewel"), "jewel");});
test("jeweler -> jewel", function() {deepEqual( Stem("jeweler"), "jewel");});
test("jewelled -> jewel", function() {deepEqual( Stem("jewelled"), "jewel");});
test("jeweller -> jewel", function() {deepEqual( Stem("jeweller"), "jewel");});
test("jewellers -> jewel", function() {deepEqual( Stem("jewellers"), "jewel");});
test("jewellery -> jewelleri", function() {deepEqual( Stem("jewellery"), "jewelleri");});
test("jewels -> jewel", function() {deepEqual( Stem("jewels"), "jewel");});
test("jewess -> jewess", function() {deepEqual( Stem("jewess"), "jewess");});
test("jewish -> jewish", function() {deepEqual( Stem("jewish"), "jewish");});
test("jews -> jew", function() {deepEqual( Stem("jews"), "jew");});
test("jezebel -> jezebel", function() {deepEqual( Stem("jezebel"), "jezebel");});
test("jilted -> jilt", function() {deepEqual( Stem("jilted"), "jilt");});
test("jingle -> jingl", function() {deepEqual( Stem("jingle"), "jingl");});
test("jingled -> jingl", function() {deepEqual( Stem("jingled"), "jingl");});
test("jingles -> jingl", function() {deepEqual( Stem("jingles"), "jingl");});
test("jingling -> jingl", function() {deepEqual( Stem("jingling"), "jingl");});
test("jist -> jist", function() {deepEqual( Stem("jist"), "jist");});
test("jo -> jo", function() {deepEqual( Stem("jo"), "jo");});
test("joan -> joan", function() {deepEqual( Stem("joan"), "joan");});
test("joanna -> joanna", function() {deepEqual( Stem("joanna"), "joanna");});
test("job -> job", function() {deepEqual( Stem("job"), "job");});
test("jobbed -> job", function() {deepEqual( Stem("jobbed"), "job");});
test("jobling -> jobl", function() {deepEqual( Stem("jobling"), "jobl");});
test("jobs -> job", function() {deepEqual( Stem("jobs"), "job");});
test("jockey -> jockey", function() {deepEqual( Stem("jockey"), "jockey");});
test("jocose -> jocos", function() {deepEqual( Stem("jocose"), "jocos");});
test("jocosely -> jocos", function() {deepEqual( Stem("jocosely"), "jocos");});
test("jocoseness -> jocos", function() {deepEqual( Stem("jocoseness"), "jocos");});
test("jocular -> jocular", function() {deepEqual( Stem("jocular"), "jocular");});
test("jocularity -> jocular", function() {deepEqual( Stem("jocularity"), "jocular");});
test("jocularly -> jocular", function() {deepEqual( Stem("jocularly"), "jocular");});
test("jocundity -> jocund", function() {deepEqual( Stem("jocundity"), "jocund");});
test("joe -> joe", function() {deepEqual( Stem("joe"), "joe");});
test("joful -> joful", function() {deepEqual( Stem("joful"), "joful");});
test("jog -> jog", function() {deepEqual( Stem("jog"), "jog");});
test("jogg -> jogg", function() {deepEqual( Stem("jogg"), "jogg");});
test("jogged -> jog", function() {deepEqual( Stem("jogged"), "jog");});
test("jogging -> jog", function() {deepEqual( Stem("jogging"), "jog");});
test("johann -> johann", function() {deepEqual( Stem("johann"), "johann");});
test("john -> john", function() {deepEqual( Stem("john"), "john");});
test("johnnie -> johnni", function() {deepEqual( Stem("johnnie"), "johnni");});
test("johnny -> johnni", function() {deepEqual( Stem("johnny"), "johnni");});
test("johnson -> johnson", function() {deepEqual( Stem("johnson"), "johnson");});
test("join -> join", function() {deepEqual( Stem("join"), "join");});
test("joined -> join", function() {deepEqual( Stem("joined"), "join");});
test("joinin -> joinin", function() {deepEqual( Stem("joinin"), "joinin");});
test("joining -> join", function() {deepEqual( Stem("joining"), "join");});
test("joins -> join", function() {deepEqual( Stem("joins"), "join");});
test("joint -> joint", function() {deepEqual( Stem("joint"), "joint");});
test("jointly -> joint", function() {deepEqual( Stem("jointly"), "joint");});
test("joints -> joint", function() {deepEqual( Stem("joints"), "joint");});
test("joke -> joke", function() {deepEqual( Stem("joke"), "joke");});
test("joked -> joke", function() {deepEqual( Stem("joked"), "joke");});
test("joker -> joker", function() {deepEqual( Stem("joker"), "joker");});
test("jokers -> joker", function() {deepEqual( Stem("jokers"), "joker");});
test("jokes -> joke", function() {deepEqual( Stem("jokes"), "joke");});
test("joking -> joke", function() {deepEqual( Stem("joking"), "joke");});
test("jolliest -> jolliest", function() {deepEqual( Stem("jolliest"), "jolliest");});
test("jollity -> jolliti", function() {deepEqual( Stem("jollity"), "jolliti");});
test("jolly -> jolli", function() {deepEqual( Stem("jolly"), "jolli");});
test("jolquera -> jolquera", function() {deepEqual( Stem("jolquera"), "jolquera");});
test("jolt -> jolt", function() {deepEqual( Stem("jolt"), "jolt");});
test("jolted -> jolt", function() {deepEqual( Stem("jolted"), "jolt");});
test("jolter -> jolter", function() {deepEqual( Stem("jolter"), "jolter");});
test("jolting -> jolt", function() {deepEqual( Stem("jolting"), "jolt");});
test("jolts -> jolt", function() {deepEqual( Stem("jolts"), "jolt");});
test("jones -> jone", function() {deepEqual( Stem("jones"), "jone");});
test("joneses -> jones", function() {deepEqual( Stem("joneses"), "jones");});
test("joodle -> joodl", function() {deepEqual( Stem("joodle"), "joodl");});
test("jordan -> jordan", function() {deepEqual( Stem("jordan"), "jordan");});
test("jorullo -> jorullo", function() {deepEqual( Stem("jorullo"), "jorullo");});
test("jose -> jose", function() {deepEqual( Stem("jose"), "jose");});
test("joseph -> joseph", function() {deepEqual( Stem("joseph"), "joseph");});
test("joshua -> joshua", function() {deepEqual( Stem("joshua"), "joshua");});
test("jostle -> jostl", function() {deepEqual( Stem("jostle"), "jostl");});
test("jostled -> jostl", function() {deepEqual( Stem("jostled"), "jostl");});
test("jostling -> jostl", function() {deepEqual( Stem("jostling"), "jostl");});
test("jot -> jot", function() {deepEqual( Stem("jot"), "jot");});
test("jour -> jour", function() {deepEqual( Stem("jour"), "jour");});
test("journ -> journ", function() {deepEqual( Stem("journ"), "journ");});
test("journal -> journal", function() {deepEqual( Stem("journal"), "journal");});
test("journalist -> journalist", function() {deepEqual( Stem("journalist"), "journalist");});
test("journalistic -> journalist", function() {deepEqual( Stem("journalistic"), "journalist");});
test("journals -> journal", function() {deepEqual( Stem("journals"), "journal");});
test("journey -> journey", function() {deepEqual( Stem("journey"), "journey");});
test("journeyed -> journey", function() {deepEqual( Stem("journeyed"), "journey");});
test("journeying -> journey", function() {deepEqual( Stem("journeying"), "journey");});
test("journeyings -> journey", function() {deepEqual( Stem("journeyings"), "journey");});
test("journeyman -> journeyman", function() {deepEqual( Stem("journeyman"), "journeyman");});
test("journeys -> journey", function() {deepEqual( Stem("journeys"), "journey");});
test("jove -> jove", function() {deepEqual( Stem("jove"), "jove");});
test("jovial -> jovial", function() {deepEqual( Stem("jovial"), "jovial");});
test("joviality -> jovial", function() {deepEqual( Stem("joviality"), "jovial");});
test("jowl -> jowl", function() {deepEqual( Stem("jowl"), "jowl");});
test("joy -> joy", function() {deepEqual( Stem("joy"), "joy");});
test("joyed -> joy", function() {deepEqual( Stem("joyed"), "joy");});
test("joyful -> joy", function() {deepEqual( Stem("joyful"), "joy");});
test("joyfully -> joy", function() {deepEqual( Stem("joyfully"), "joy");});
test("joyous -> joyous", function() {deepEqual( Stem("joyous"), "joyous");});
test("joyously -> joyous", function() {deepEqual( Stem("joyously"), "joyous");});
test("joyousness -> joyous", function() {deepEqual( Stem("joyousness"), "joyous");});
test("joys -> joy", function() {deepEqual( Stem("joys"), "joy");});
test("juan -> juan", function() {deepEqual( Stem("juan"), "juan");});
test("judah -> judah", function() {deepEqual( Stem("judah"), "judah");});
test("judge -> judg", function() {deepEqual( Stem("judge"), "judg");});
test("judged -> judg", function() {deepEqual( Stem("judged"), "judg");});
test("judgement -> judgement", function() {deepEqual( Stem("judgement"), "judgement");});
test("judges -> judg", function() {deepEqual( Stem("judges"), "judg");});
test("judging -> judg", function() {deepEqual( Stem("judging"), "judg");});
test("judgment -> judgment", function() {deepEqual( Stem("judgment"), "judgment");});
test("judgments -> judgment", function() {deepEqual( Stem("judgments"), "judgment");});
test("judicial -> judici", function() {deepEqual( Stem("judicial"), "judici");});
test("judicious -> judici", function() {deepEqual( Stem("judicious"), "judici");});
test("judiciously -> judici", function() {deepEqual( Stem("judiciously"), "judici");});
test("judith -> judith", function() {deepEqual( Stem("judith"), "judith");});
test("judy -> judi", function() {deepEqual( Stem("judy"), "judi");});
test("juffy -> juffi", function() {deepEqual( Stem("juffy"), "juffi");});
test("jug -> jug", function() {deepEqual( Stem("jug"), "jug");});
test("juggle -> juggl", function() {deepEqual( Stem("juggle"), "juggl");});
test("juggled -> juggl", function() {deepEqual( Stem("juggled"), "juggl");});
test("juggler -> juggler", function() {deepEqual( Stem("juggler"), "juggler");});
test("jugglery -> juggleri", function() {deepEqual( Stem("jugglery"), "juggleri");});
test("jugs -> jug", function() {deepEqual( Stem("jugs"), "jug");});
test("jugular -> jugular", function() {deepEqual( Stem("jugular"), "jugular");});
test("juice -> juic", function() {deepEqual( Stem("juice"), "juic");});
test("juices -> juic", function() {deepEqual( Stem("juices"), "juic");});
test("juicy -> juici", function() {deepEqual( Stem("juicy"), "juici");});
test("juillet -> juillet", function() {deepEqual( Stem("juillet"), "juillet");});
test("julia -> julia", function() {deepEqual( Stem("julia"), "julia");});
test("julian -> julian", function() {deepEqual( Stem("julian"), "julian");});
test("juliet -> juliet", function() {deepEqual( Stem("juliet"), "juliet");});
test("julius -> julius", function() {deepEqual( Stem("julius"), "julius");});
test("july -> juli", function() {deepEqual( Stem("july"), "juli");});
test("jumble -> jumbl", function() {deepEqual( Stem("jumble"), "jumbl");});
test("jumbled -> jumbl", function() {deepEqual( Stem("jumbled"), "jumbl");});
test("jumbling -> jumbl", function() {deepEqual( Stem("jumbling"), "jumbl");});
test("jump -> jump", function() {deepEqual( Stem("jump"), "jump");});
test("jumped -> jump", function() {deepEqual( Stem("jumped"), "jump");});
test("jumping -> jump", function() {deepEqual( Stem("jumping"), "jump");});
test("jumps -> jump", function() {deepEqual( Stem("jumps"), "jump");});
test("junction -> junction", function() {deepEqual( Stem("junction"), "junction");});
test("juncture -> junctur", function() {deepEqual( Stem("juncture"), "junctur");});
test("juncus -> juncus", function() {deepEqual( Stem("juncus"), "juncus");});
test("june -> june", function() {deepEqual( Stem("june"), "june");});
test("jungle -> jungl", function() {deepEqual( Stem("jungle"), "jungl");});
test("jungles -> jungl", function() {deepEqual( Stem("jungles"), "jungl");});
test("junior -> junior", function() {deepEqual( Stem("junior"), "junior");});
test("juniorest -> juniorest", function() {deepEqual( Stem("juniorest"), "juniorest");});
test("juniors -> junior", function() {deepEqual( Stem("juniors"), "junior");});
test("junk -> junk", function() {deepEqual( Stem("junk"), "junk");});
test("jupiter -> jupit", function() {deepEqual( Stem("jupiter"), "jupit");});
test("jura -> jura", function() {deepEqual( Stem("jura"), "jura");});
test("juries -> juri", function() {deepEqual( Stem("juries"), "juri");});
test("jurisprudence -> jurisprud", function() {deepEqual( Stem("jurisprudence"), "jurisprud");});
test("juror -> juror", function() {deepEqual( Stem("juror"), "juror");});
test("jurors -> juror", function() {deepEqual( Stem("jurors"), "juror");});
test("jury -> juri", function() {deepEqual( Stem("jury"), "juri");});
test("juryman -> juryman", function() {deepEqual( Stem("juryman"), "juryman");});
test("jurymen -> jurymen", function() {deepEqual( Stem("jurymen"), "jurymen");});
test("just -> just", function() {deepEqual( Stem("just"), "just");});
test("juster -> juster", function() {deepEqual( Stem("juster"), "juster");});
test("justest -> justest", function() {deepEqual( Stem("justest"), "justest");});
test("justice -> justic", function() {deepEqual( Stem("justice"), "justic");});
test("justifiable -> justifi", function() {deepEqual( Stem("justifiable"), "justifi");});
test("justification -> justif", function() {deepEqual( Stem("justification"), "justif");});
test("justifications -> justif", function() {deepEqual( Stem("justifications"), "justif");});
test("justified -> justifi", function() {deepEqual( Stem("justified"), "justifi");});
test("justifies -> justifi", function() {deepEqual( Stem("justifies"), "justifi");});
test("justify -> justifi", function() {deepEqual( Stem("justify"), "justifi");});
test("justifying -> justifi", function() {deepEqual( Stem("justifying"), "justifi");});
test("justitia -> justitia", function() {deepEqual( Stem("justitia"), "justitia");});
test("justly -> just", function() {deepEqual( Stem("justly"), "just");});
test("jute -> jute", function() {deepEqual( Stem("jute"), "jute");});
test("juvenile -> juvenil", function() {deepEqual( Stem("juvenile"), "juvenil");});
test("juxtaposition -> juxtaposit", function() {deepEqual( Stem("juxtaposition"), "juxtaposit");});
test("k -> k", function() {deepEqual( Stem("k"), "k");});
test("kalydor -> kalydor", function() {deepEqual( Stem("kalydor"), "kalydor");});
test("kammerjunker -> kammerjunk", function() {deepEqual( Stem("kammerjunker"), "kammerjunk");});
test("kampfes -> kampf", function() {deepEqual( Stem("kampfes"), "kampf");});
test("kamtschatka -> kamtschatka", function() {deepEqual( Stem("kamtschatka"), "kamtschatka");});
test("kangaroo -> kangaroo", function() {deepEqual( Stem("kangaroo"), "kangaroo");});
test("kapernaumov -> kapernaumov", function() {deepEqual( Stem("kapernaumov"), "kapernaumov");});
test("kapernaumovs -> kapernaumov", function() {deepEqual( Stem("kapernaumovs"), "kapernaumov");});
test("karl -> karl", function() {deepEqual( Stem("karl"), "karl");});
test("karros -> karro", function() {deepEqual( Stem("karros"), "karro");});
test("kate -> kate", function() {deepEqual( Stem("kate"), "kate");});
test("kater -> kater", function() {deepEqual( Stem("kater"), "kater");});
test("katerina -> katerina", function() {deepEqual( Stem("katerina"), "katerina");});
test("katharina -> katharina", function() {deepEqual( Stem("katharina"), "katharina");});
test("katia -> katia", function() {deepEqual( Stem("katia"), "katia");});
test("kattymaly -> kattymali", function() {deepEqual( Stem("kattymaly"), "kattymali");});
test("kauri -> kauri", function() {deepEqual( Stem("kauri"), "kauri");});
test("kazan -> kazan", function() {deepEqual( Stem("kazan"), "kazan");});
test("keane -> kean", function() {deepEqual( Stem("keane"), "kean");});
test("keating -> keat", function() {deepEqual( Stem("keating"), "keat");});
test("keeling -> keel", function() {deepEqual( Stem("keeling"), "keel");});
test("keen -> keen", function() {deepEqual( Stem("keen"), "keen");});
test("keener -> keener", function() {deepEqual( Stem("keener"), "keener");});
test("keenest -> keenest", function() {deepEqual( Stem("keenest"), "keenest");});
test("keenly -> keen", function() {deepEqual( Stem("keenly"), "keen");});
test("keenness -> keen", function() {deepEqual( Stem("keenness"), "keen");});
test("keep -> keep", function() {deepEqual( Stem("keep"), "keep");});
test("keeper -> keeper", function() {deepEqual( Stem("keeper"), "keeper");});
test("keepers -> keeper", function() {deepEqual( Stem("keepers"), "keeper");});
test("keeping -> keep", function() {deepEqual( Stem("keeping"), "keep");});
test("keeps -> keep", function() {deepEqual( Stem("keeps"), "keep");});
test("keepsake -> keepsak", function() {deepEqual( Stem("keepsake"), "keepsak");});
test("keepsakes -> keepsak", function() {deepEqual( Stem("keepsakes"), "keepsak");});
test("keine -> kein", function() {deepEqual( Stem("keine"), "kein");});
test("kelp -> kelp", function() {deepEqual( Stem("kelp"), "kelp");});
test("ken -> ken", function() {deepEqual( Stem("ken"), "ken");});
test("kendall -> kendal", function() {deepEqual( Stem("kendall"), "kendal");});
test("kenge -> keng", function() {deepEqual( Stem("kenge"), "keng");});
test("kennel -> kennel", function() {deepEqual( Stem("kennel"), "kennel");});
test("kennels -> kennel", function() {deepEqual( Stem("kennels"), "kennel");});
test("kennington -> kennington", function() {deepEqual( Stem("kennington"), "kennington");});
test("kensington -> kensington", function() {deepEqual( Stem("kensington"), "kensington");});
test("kent -> kent", function() {deepEqual( Stem("kent"), "kent");});
test("kentish -> kentish", function() {deepEqual( Stem("kentish"), "kentish");});
test("kenwigs -> kenwig", function() {deepEqual( Stem("kenwigs"), "kenwig");});
test("kenwigses -> kenwigs", function() {deepEqual( Stem("kenwigses"), "kenwigs");});
test("kepler -> kepler", function() {deepEqual( Stem("kepler"), "kepler");});
test("kept -> kept", function() {deepEqual( Stem("kept"), "kept");});
test("kerchief -> kerchief", function() {deepEqual( Stem("kerchief"), "kerchief");});
test("kerguelen -> kerguelen", function() {deepEqual( Stem("kerguelen"), "kerguelen");});
test("kernel -> kernel", function() {deepEqual( Stem("kernel"), "kernel");});
test("kerr -> kerr", function() {deepEqual( Stem("kerr"), "kerr");});
test("kerrig -> kerrig", function() {deepEqual( Stem("kerrig"), "kerrig");});
test("kettle -> kettl", function() {deepEqual( Stem("kettle"), "kettl");});
test("kettles -> kettl", function() {deepEqual( Stem("kettles"), "kettl");});
test("key -> key", function() {deepEqual( Stem("key"), "key");});
test("keyhole -> keyhol", function() {deepEqual( Stem("keyhole"), "keyhol");});
test("keyholes -> keyhol", function() {deepEqual( Stem("keyholes"), "keyhol");});
test("keyne -> keyn", function() {deepEqual( Stem("keyne"), "keyn");});
test("keys -> key", function() {deepEqual( Stem("keys"), "key");});
test("khan -> khan", function() {deepEqual( Stem("khan"), "khan");});
test("kick -> kick", function() {deepEqual( Stem("kick"), "kick");});
test("kicked -> kick", function() {deepEqual( Stem("kicked"), "kick");});
test("kicking -> kick", function() {deepEqual( Stem("kicking"), "kick");});
test("kicks -> kick", function() {deepEqual( Stem("kicks"), "kick");});
test("kid -> kid", function() {deepEqual( Stem("kid"), "kid");});
test("kidnapped -> kidnap", function() {deepEqual( Stem("kidnapped"), "kidnap");});
test("kidnapper -> kidnapp", function() {deepEqual( Stem("kidnapper"), "kidnapp");});
test("kidnapping -> kidnap", function() {deepEqual( Stem("kidnapping"), "kidnap");});
test("kidney -> kidney", function() {deepEqual( Stem("kidney"), "kidney");});
test("kilda -> kilda", function() {deepEqual( Stem("kilda"), "kilda");});
test("kill -> kill", function() {deepEqual( Stem("kill"), "kill");});
test("killed -> kill", function() {deepEqual( Stem("killed"), "kill");});
test("killer -> killer", function() {deepEqual( Stem("killer"), "killer");});
test("killing -> kill", function() {deepEqual( Stem("killing"), "kill");});
test("kills -> kill", function() {deepEqual( Stem("kills"), "kill");});
test("kiln -> kiln", function() {deepEqual( Stem("kiln"), "kiln");});
test("kilns -> kiln", function() {deepEqual( Stem("kilns"), "kiln");});
test("kilt -> kilt", function() {deepEqual( Stem("kilt"), "kilt");});
test("kimbo -> kimbo", function() {deepEqual( Stem("kimbo"), "kimbo");});
test("kimiri -> kimiri", function() {deepEqual( Stem("kimiri"), "kimiri");});
test("kimpelled -> kimpel", function() {deepEqual( Stem("kimpelled"), "kimpel");});
test("kin -> kin", function() {deepEqual( Stem("kin"), "kin");});
test("kind -> kind", function() {deepEqual( Stem("kind"), "kind");});
test("kinder -> kinder", function() {deepEqual( Stem("kinder"), "kinder");});
test("kindest -> kindest", function() {deepEqual( Stem("kindest"), "kindest");});
test("kindhearted -> kindheart", function() {deepEqual( Stem("kindhearted"), "kindheart");});
test("kindle -> kindl", function() {deepEqual( Stem("kindle"), "kindl");});
test("kindled -> kindl", function() {deepEqual( Stem("kindled"), "kindl");});
test("kindles -> kindl", function() {deepEqual( Stem("kindles"), "kindl");});
test("kindlier -> kindlier", function() {deepEqual( Stem("kindlier"), "kindlier");});
test("kindliest -> kindliest", function() {deepEqual( Stem("kindliest"), "kindliest");});
test("kindliness -> kindli", function() {deepEqual( Stem("kindliness"), "kindli");});
test("kindling -> kindl", function() {deepEqual( Stem("kindling"), "kindl");});
test("kindly -> kind", function() {deepEqual( Stem("kindly"), "kind");});
test("kindness -> kind", function() {deepEqual( Stem("kindness"), "kind");});
test("kindnesses -> kind", function() {deepEqual( Stem("kindnesses"), "kind");});
test("kindred -> kindr", function() {deepEqual( Stem("kindred"), "kindr");});
test("kinds -> kind", function() {deepEqual( Stem("kinds"), "kind");});
test("king -> king", function() {deepEqual( Stem("king"), "king");});
test("kingdom -> kingdom", function() {deepEqual( Stem("kingdom"), "kingdom");});
test("kingdoms -> kingdom", function() {deepEqual( Stem("kingdoms"), "kingdom");});
test("kingfisher -> kingfish", function() {deepEqual( Stem("kingfisher"), "kingfish");});
test("kingly -> king", function() {deepEqual( Stem("kingly"), "king");});
test("kings -> king", function() {deepEqual( Stem("kings"), "king");});
test("kingston -> kingston", function() {deepEqual( Stem("kingston"), "kingston");});
test("kinkajou -> kinkajou", function() {deepEqual( Stem("kinkajou"), "kinkajou");});
test("kinsman -> kinsman", function() {deepEqual( Stem("kinsman"), "kinsman");});
test("kirby -> kirbi", function() {deepEqual( Stem("kirby"), "kirbi");});
test("kiss -> kiss", function() {deepEqual( Stem("kiss"), "kiss");});
test("kissed -> kiss", function() {deepEqual( Stem("kissed"), "kiss");});
test("kisses -> kiss", function() {deepEqual( Stem("kisses"), "kiss");});
test("kissing -> kiss", function() {deepEqual( Stem("kissing"), "kiss");});
test("kit -> kit", function() {deepEqual( Stem("kit"), "kit");});
test("kitchen -> kitchen", function() {deepEqual( Stem("kitchen"), "kitchen");});
test("kitchens -> kitchen", function() {deepEqual( Stem("kitchens"), "kitchen");});
test("kitchin -> kitchin", function() {deepEqual( Stem("kitchin"), "kitchin");});
test("kite -> kite", function() {deepEqual( Stem("kite"), "kite");});
test("kitten -> kitten", function() {deepEqual( Stem("kitten"), "kitten");});
test("kittlitz -> kittlitz", function() {deepEqual( Stem("kittlitz"), "kittlitz");});
test("kitty -> kitti", function() {deepEqual( Stem("kitty"), "kitti");});
test("klopstock -> klopstock", function() {deepEqual( Stem("klopstock"), "klopstock");});
test("knack -> knack", function() {deepEqual( Stem("knack"), "knack");});
test("knackeries -> knackeri", function() {deepEqual( Stem("knackeries"), "knackeri");});
test("knacks -> knack", function() {deepEqual( Stem("knacks"), "knack");});
test("knag -> knag", function() {deepEqual( Stem("knag"), "knag");});
test("knave -> knave", function() {deepEqual( Stem("knave"), "knave");});
test("knaves -> knave", function() {deepEqual( Stem("knaves"), "knave");});
test("knavish -> knavish", function() {deepEqual( Stem("knavish"), "knavish");});
test("kneaded -> knead", function() {deepEqual( Stem("kneaded"), "knead");});
test("kneading -> knead", function() {deepEqual( Stem("kneading"), "knead");});
test("knee -> knee", function() {deepEqual( Stem("knee"), "knee");});
test("kneel -> kneel", function() {deepEqual( Stem("kneel"), "kneel");});
test("kneeled -> kneel", function() {deepEqual( Stem("kneeled"), "kneel");});
test("kneeling -> kneel", function() {deepEqual( Stem("kneeling"), "kneel");});
test("kneels -> kneel", function() {deepEqual( Stem("kneels"), "kneel");});
test("knees -> knee", function() {deepEqual( Stem("knees"), "knee");});
test("knell -> knell", function() {deepEqual( Stem("knell"), "knell");});
test("knelt -> knelt", function() {deepEqual( Stem("knelt"), "knelt");});
test("knew -> knew", function() {deepEqual( Stem("knew"), "knew");});
test("knick -> knick", function() {deepEqual( Stem("knick"), "knick");});
test("knif -> knif", function() {deepEqual( Stem("knif"), "knif");});
test("knife -> knife", function() {deepEqual( Stem("knife"), "knife");});
test("knight -> knight", function() {deepEqual( Stem("knight"), "knight");});
test("knightly -> knight", function() {deepEqual( Stem("knightly"), "knight");});
test("knights -> knight", function() {deepEqual( Stem("knights"), "knight");});
test("knit -> knit", function() {deepEqual( Stem("knit"), "knit");});
test("knits -> knit", function() {deepEqual( Stem("knits"), "knit");});
test("knitted -> knit", function() {deepEqual( Stem("knitted"), "knit");});
test("knitting -> knit", function() {deepEqual( Stem("knitting"), "knit");});
test("knives -> knive", function() {deepEqual( Stem("knives"), "knive");});
test("knob -> knob", function() {deepEqual( Stem("knob"), "knob");});
test("knobs -> knob", function() {deepEqual( Stem("knobs"), "knob");});
test("knock -> knock", function() {deepEqual( Stem("knock"), "knock");});
test("knocked -> knock", function() {deepEqual( Stem("knocked"), "knock");});
test("knocker -> knocker", function() {deepEqual( Stem("knocker"), "knocker");});
test("knockers -> knocker", function() {deepEqual( Stem("knockers"), "knocker");});
test("knocking -> knock", function() {deepEqual( Stem("knocking"), "knock");});
test("knocks -> knock", function() {deepEqual( Stem("knocks"), "knock");});
test("knopp -> knopp", function() {deepEqual( Stem("knopp"), "knopp");});
test("knot -> knot", function() {deepEqual( Stem("knot"), "knot");});
test("knots -> knot", function() {deepEqual( Stem("knots"), "knot");});
test("knotted -> knot", function() {deepEqual( Stem("knotted"), "knot");});
test("knotty -> knotti", function() {deepEqual( Stem("knotty"), "knotti");});
test("know -> know", function() {deepEqual( Stem("know"), "know");});
test("knowa -> knowa", function() {deepEqual( Stem("knowa"), "knowa");});
test("knowd -> knowd", function() {deepEqual( Stem("knowd"), "knowd");});
test("knowed -> know", function() {deepEqual( Stem("knowed"), "know");});
test("knowest -> knowest", function() {deepEqual( Stem("knowest"), "knowest");});
test("knoweth -> knoweth", function() {deepEqual( Stem("knoweth"), "knoweth");});
test("knowin -> knowin", function() {deepEqual( Stem("knowin"), "knowin");});
test("knowing -> know", function() {deepEqual( Stem("knowing"), "know");});
test("knowledg -> knowledg", function() {deepEqual( Stem("knowledg"), "knowledg");});
test("knowledge -> knowledg", function() {deepEqual( Stem("knowledge"), "knowledg");});
test("known -> known", function() {deepEqual( Stem("known"), "known");});
test("knows -> know", function() {deepEqual( Stem("knows"), "know");});
test("knuckle -> knuckl", function() {deepEqual( Stem("knuckle"), "knuckl");});
test("knuckleboy -> knuckleboy", function() {deepEqual( Stem("knuckleboy"), "knuckleboy");});
test("knuckles -> knuckl", function() {deepEqual( Stem("knuckles"), "knuckl");});
test("kobelev -> kobelev", function() {deepEqual( Stem("kobelev"), "kobelev");});
test("kobilatnikov -> kobilatnikov", function() {deepEqual( Stem("kobilatnikov"), "kobilatnikov");});
test("koch -> koch", function() {deepEqual( Stem("koch"), "koch");});
test("koeldwethout -> koeldwethout", function() {deepEqual( Stem("koeldwethout"), "koeldwethout");});
test("kolomensky -> kolomenski", function() {deepEqual( Stem("kolomensky"), "kolomenski");});
test("kolya -> kolya", function() {deepEqual( Stem("kolya"), "kolya");});
test("kong -> kong", function() {deepEqual( Stem("kong"), "kong");});
test("konig -> konig", function() {deepEqual( Stem("konig"), "konig");});
test("koodle -> koodl", function() {deepEqual( Stem("koodle"), "koodl");});
test("kororadika -> kororadika", function() {deepEqual( Stem("kororadika"), "kororadika");});
test("kotzebue -> kotzebu", function() {deepEqual( Stem("kotzebue"), "kotzebu");});
test("kozel -> kozel", function() {deepEqual( Stem("kozel"), "kozel");});
test("krestovsky -> krestovski", function() {deepEqual( Stem("krestovsky"), "krestovski");});
test("kriegsrath -> kriegsrath", function() {deepEqual( Stem("kriegsrath"), "kriegsrath");});
test("krook -> krook", function() {deepEqual( Stem("krook"), "krook");});
test("kryukov -> kryukov", function() {deepEqual( Stem("kryukov"), "kryukov");});
test("kuffy -> kuffi", function() {deepEqual( Stem("kuffy"), "kuffi");});
test("l -> l", function() {deepEqual( Stem("l"), "l");});
test("la -> la", function() {deepEqual( Stem("la"), "la");});
test("label -> label", function() {deepEqual( Stem("label"), "label");});
test("labelled -> label", function() {deepEqual( Stem("labelled"), "label");});
test("labillardiere -> labillardier", function() {deepEqual( Stem("labillardiere"), "labillardier");});
test("laborious -> labori", function() {deepEqual( Stem("laborious"), "labori");});
test("laboriously -> labori", function() {deepEqual( Stem("laboriously"), "labori");});
test("labour -> labour", function() {deepEqual( Stem("labour"), "labour");});
test("laboured -> labour", function() {deepEqual( Stem("laboured"), "labour");});
test("labourer -> labour", function() {deepEqual( Stem("labourer"), "labour");});
test("labourers -> labour", function() {deepEqual( Stem("labourers"), "labour");});
test("labouring -> labour", function() {deepEqual( Stem("labouring"), "labour");});
test("labourious -> labouri", function() {deepEqual( Stem("labourious"), "labouri");});
test("labours -> labour", function() {deepEqual( Stem("labours"), "labour");});
test("laburnum -> laburnum", function() {deepEqual( Stem("laburnum"), "laburnum");});
test("labyrinth -> labyrinth", function() {deepEqual( Stem("labyrinth"), "labyrinth");});
test("labyrinths -> labyrinth", function() {deepEqual( Stem("labyrinths"), "labyrinth");});
test("lace -> lace", function() {deepEqual( Stem("lace"), "lace");});
test("laced -> lace", function() {deepEqual( Stem("laced"), "lace");});
test("lacerate -> lacer", function() {deepEqual( Stem("lacerate"), "lacer");});
test("lacerta -> lacerta", function() {deepEqual( Stem("lacerta"), "lacerta");});
test("laches -> lach", function() {deepEqual( Stem("laches"), "lach");});
test("lachrymatories -> lachrymatori", function() {deepEqual( Stem("lachrymatories"), "lachrymatori");});
test("lachrymose -> lachrymos", function() {deepEqual( Stem("lachrymose"), "lachrymos");});
test("lacing -> lace", function() {deepEqual( Stem("lacing"), "lace");});
test("lack -> lack", function() {deepEqual( Stem("lack"), "lack");});
test("lackadaisical -> lackadais", function() {deepEqual( Stem("lackadaisical"), "lackadais");});
test("lacked -> lack", function() {deepEqual( Stem("lacked"), "lack");});
test("lacking -> lack", function() {deepEqual( Stem("lacking"), "lack");});
test("lacks -> lack", function() {deepEqual( Stem("lacks"), "lack");});
test("laconic -> lacon", function() {deepEqual( Stem("laconic"), "lacon");});
test("lacquered -> lacquer", function() {deepEqual( Stem("lacquered"), "lacquer");});
test("lad -> lad", function() {deepEqual( Stem("lad"), "lad");});
test("ladder -> ladder", function() {deepEqual( Stem("ladder"), "ladder");});
test("ladders -> ladder", function() {deepEqual( Stem("ladders"), "ladder");});
test("lade -> lade", function() {deepEqual( Stem("lade"), "lade");});
test("laden -> laden", function() {deepEqual( Stem("laden"), "laden");});
test("laderas -> ladera", function() {deepEqual( Stem("laderas"), "ladera");});
test("ladies -> ladi", function() {deepEqual( Stem("ladies"), "ladi");});
test("ladle -> ladl", function() {deepEqual( Stem("ladle"), "ladl");});
test("lads -> lad", function() {deepEqual( Stem("lads"), "lad");});
test("lady -> ladi", function() {deepEqual( Stem("lady"), "ladi");});
test("ladyhood -> ladyhood", function() {deepEqual( Stem("ladyhood"), "ladyhood");});
test("ladylike -> ladylik", function() {deepEqual( Stem("ladylike"), "ladylik");});
test("ladyship -> ladyship", function() {deepEqual( Stem("ladyship"), "ladyship");});
test("lag -> lag", function() {deepEqual( Stem("lag"), "lag");});
test("laggard -> laggard", function() {deepEqual( Stem("laggard"), "laggard");});
test("lagged -> lag", function() {deepEqual( Stem("lagged"), "lag");});
test("lagging -> lag", function() {deepEqual( Stem("lagging"), "lag");});
test("lagoa -> lagoa", function() {deepEqual( Stem("lagoa"), "lagoa");});
test("lagoon -> lagoon", function() {deepEqual( Stem("lagoon"), "lagoon");});
test("lagoons -> lagoon", function() {deepEqual( Stem("lagoons"), "lagoon");});
test("lagostomus -> lagostomus", function() {deepEqual( Stem("lagostomus"), "lagostomus");});
test("lags -> lag", function() {deepEqual( Stem("lags"), "lag");});
test("laguna -> laguna", function() {deepEqual( Stem("laguna"), "laguna");});
test("laid -> laid", function() {deepEqual( Stem("laid"), "laid");});
test("lain -> lain", function() {deepEqual( Stem("lain"), "lain");});
test("lair -> lair", function() {deepEqual( Stem("lair"), "lair");});
test("laissez -> laissez", function() {deepEqual( Stem("laissez"), "laissez");});
test("laity -> laiti", function() {deepEqual( Stem("laity"), "laiti");});
test("lajdak -> lajdak", function() {deepEqual( Stem("lajdak"), "lajdak");});
test("lake -> lake", function() {deepEqual( Stem("lake"), "lake");});
test("lakes -> lake", function() {deepEqual( Stem("lakes"), "lake");});
test("lalegraicavalca -> lalegraicavalca", function() {deepEqual( Stem("lalegraicavalca"), "lalegraicavalca");});
test("lall -> lall", function() {deepEqual( Stem("lall"), "lall");});
test("lalla -> lalla", function() {deepEqual( Stem("lalla"), "lalla");});
test("lama -> lama", function() {deepEqual( Stem("lama"), "lama");});
test("lamarck -> lamarck", function() {deepEqual( Stem("lamarck"), "lamarck");});
test("lamb -> lamb", function() {deepEqual( Stem("lamb"), "lamb");});
test("lambert -> lambert", function() {deepEqual( Stem("lambert"), "lambert");});
test("lambeth -> lambeth", function() {deepEqual( Stem("lambeth"), "lambeth");});
test("lambs -> lamb", function() {deepEqual( Stem("lambs"), "lamb");});
test("lame -> lame", function() {deepEqual( Stem("lame"), "lame");});
test("lamed -> lame", function() {deepEqual( Stem("lamed"), "lame");});
test("lamellicorn -> lamellicorn", function() {deepEqual( Stem("lamellicorn"), "lamellicorn");});
test("lameness -> lame", function() {deepEqual( Stem("lameness"), "lame");});
test("lament -> lament", function() {deepEqual( Stem("lament"), "lament");});
test("lamentable -> lament", function() {deepEqual( Stem("lamentable"), "lament");});
test("lamentably -> lament", function() {deepEqual( Stem("lamentably"), "lament");});
test("lamentation -> lament", function() {deepEqual( Stem("lamentation"), "lament");});
test("lamentations -> lament", function() {deepEqual( Stem("lamentations"), "lament");});
test("lamented -> lament", function() {deepEqual( Stem("lamented"), "lament");});
test("lamenting -> lament", function() {deepEqual( Stem("lamenting"), "lament");});
test("laments -> lament", function() {deepEqual( Stem("laments"), "lament");});
test("laminae -> lamina", function() {deepEqual( Stem("laminae"), "lamina");});
test("lamp -> lamp", function() {deepEqual( Stem("lamp"), "lamp");});
test("lamplight -> lamplight", function() {deepEqual( Stem("lamplight"), "lamplight");});
test("lamplighter -> lamplight", function() {deepEqual( Stem("lamplighter"), "lamplight");});
test("lamps -> lamp", function() {deepEqual( Stem("lamps"), "lamp");});
test("lampyridae -> lampyrida", function() {deepEqual( Stem("lampyridae"), "lampyrida");});
test("lampyris -> lampyri", function() {deepEqual( Stem("lampyris"), "lampyri");});
test("lancashire -> lancashir", function() {deepEqual( Stem("lancashire"), "lancashir");});
test("lancaster -> lancast", function() {deepEqual( Stem("lancaster"), "lancast");});
test("lance -> lanc", function() {deepEqual( Stem("lance"), "lanc");});
test("lancerated -> lancer", function() {deepEqual( Stem("lancerated"), "lancer");});
test("land -> land", function() {deepEqual( Stem("land"), "land");});
test("landed -> land", function() {deepEqual( Stem("landed"), "land");});
test("landing -> land", function() {deepEqual( Stem("landing"), "land");});
test("landings -> land", function() {deepEqual( Stem("landings"), "land");});
test("landlady -> landladi", function() {deepEqual( Stem("landlady"), "landladi");});
test("landlord -> landlord", function() {deepEqual( Stem("landlord"), "landlord");});
test("landmark -> landmark", function() {deepEqual( Stem("landmark"), "landmark");});
test("landmarks -> landmark", function() {deepEqual( Stem("landmarks"), "landmark");});
test("landowner -> landown", function() {deepEqual( Stem("landowner"), "landown");});
test("landowners -> landown", function() {deepEqual( Stem("landowners"), "landown");});
test("lands -> land", function() {deepEqual( Stem("lands"), "land");});
test("landscape -> landscap", function() {deepEqual( Stem("landscape"), "landscap");});
test("landseer -> landseer", function() {deepEqual( Stem("landseer"), "landseer");});
test("landsman -> landsman", function() {deepEqual( Stem("landsman"), "landsman");});
test("lane -> lane", function() {deepEqual( Stem("lane"), "lane");});
test("lanes -> lane", function() {deepEqual( Stem("lanes"), "lane");});
test("langsdorff -> langsdorff", function() {deepEqual( Stem("langsdorff"), "langsdorff");});
test("language -> languag", function() {deepEqual( Stem("language"), "languag");});
test("languages -> languag", function() {deepEqual( Stem("languages"), "languag");});
test("languid -> languid", function() {deepEqual( Stem("languid"), "languid");});
test("languidly -> languid", function() {deepEqual( Stem("languidly"), "languid");});
test("languish -> languish", function() {deepEqual( Stem("languish"), "languish");});
test("languished -> languish", function() {deepEqual( Stem("languished"), "languish");});
test("languishing -> languish", function() {deepEqual( Stem("languishing"), "languish");});
test("languor -> languor", function() {deepEqual( Stem("languor"), "languor");});
test("langwedge -> langwedg", function() {deepEqual( Stem("langwedge"), "langwedg");});
test("lank -> lank", function() {deepEqual( Stem("lank"), "lank");});
test("lanky -> lanki", function() {deepEqual( Stem("lanky"), "lanki");});
test("lantern -> lantern", function() {deepEqual( Stem("lantern"), "lantern");});
test("lanterns -> lantern", function() {deepEqual( Stem("lanterns"), "lantern");});
test("lap -> lap", function() {deepEqual( Stem("lap"), "lap");});
test("lapel -> lapel", function() {deepEqual( Stem("lapel"), "lapel");});
test("lappel -> lappel", function() {deepEqual( Stem("lappel"), "lappel");});
test("laps -> lap", function() {deepEqual( Stem("laps"), "lap");});
test("lapse -> laps", function() {deepEqual( Stem("lapse"), "laps");});
test("lapsed -> laps", function() {deepEqual( Stem("lapsed"), "laps");});
test("lapses -> laps", function() {deepEqual( Stem("lapses"), "laps");});
test("lapsing -> laps", function() {deepEqual( Stem("lapsing"), "laps");});
test("lar -> lar", function() {deepEqual( Stem("lar"), "lar");});
test("larcenerer -> larcener", function() {deepEqual( Stem("larcenerer"), "larcener");});
test("larch -> larch", function() {deepEqual( Stem("larch"), "larch");});
test("larg -> larg", function() {deepEqual( Stem("larg"), "larg");});
test("large -> larg", function() {deepEqual( Stem("large"), "larg");});
test("largely -> larg", function() {deepEqual( Stem("largely"), "larg");});
test("largeness -> larg", function() {deepEqual( Stem("largeness"), "larg");});
test("larger -> larger", function() {deepEqual( Stem("larger"), "larger");});
test("largest -> largest", function() {deepEqual( Stem("largest"), "largest");});
test("lark -> lark", function() {deepEqual( Stem("lark"), "lark");});
test("larking -> lark", function() {deepEqual( Stem("larking"), "lark");});
test("larks -> lark", function() {deepEqual( Stem("larks"), "lark");});
test("larming -> larm", function() {deepEqual( Stem("larming"), "larm");});
test("larry -> larri", function() {deepEqual( Stem("larry"), "larri");});
test("larvae -> larva", function() {deepEqual( Stem("larvae"), "larva");});
test("las -> las", function() {deepEqual( Stem("las"), "las");});
test("lash -> lash", function() {deepEqual( Stem("lash"), "lash");});
test("lashed -> lash", function() {deepEqual( Stem("lashed"), "lash");});
test("lashes -> lash", function() {deepEqual( Stem("lashes"), "lash");});
test("lashing -> lash", function() {deepEqual( Stem("lashing"), "lash");});
test("lass -> lass", function() {deepEqual( Stem("lass"), "lass");});
test("lassie -> lassi", function() {deepEqual( Stem("lassie"), "lassi");});
test("lassitude -> lassitud", function() {deepEqual( Stem("lassitude"), "lassitud");});
test("lassoit -> lassoit", function() {deepEqual( Stem("lassoit"), "lassoit");});
test("lassonthwaite -> lassonthwait", function() {deepEqual( Stem("lassonthwaite"), "lassonthwait");});
test("lassonthwayte -> lassonthwayt", function() {deepEqual( Stem("lassonthwayte"), "lassonthwayt");});
test("last -> last", function() {deepEqual( Stem("last"), "last");});
test("lasted -> last", function() {deepEqual( Stem("lasted"), "last");});
test("lasting -> last", function() {deepEqual( Stem("lasting"), "last");});
test("lastly -> last", function() {deepEqual( Stem("lastly"), "last");});
test("lasts -> last", function() {deepEqual( Stem("lasts"), "last");});
test("lat -> lat", function() {deepEqual( Stem("lat"), "lat");});
test("latch -> latch", function() {deepEqual( Stem("latch"), "latch");});
test("latched -> latch", function() {deepEqual( Stem("latched"), "latch");});
test("late -> late", function() {deepEqual( Stem("late"), "late");});
test("latel -> latel", function() {deepEqual( Stem("latel"), "latel");});
test("lately -> late", function() {deepEqual( Stem("lately"), "late");});
test("lateness -> late", function() {deepEqual( Stem("lateness"), "late");});
test("latent -> latent", function() {deepEqual( Stem("latent"), "latent");});
test("later -> later", function() {deepEqual( Stem("later"), "later");});
test("lateral -> later", function() {deepEqual( Stem("lateral"), "later");});
test("laterally -> later", function() {deepEqual( Stem("laterally"), "later");});
test("latest -> latest", function() {deepEqual( Stem("latest"), "latest");});
test("lath -> lath", function() {deepEqual( Stem("lath"), "lath");});
test("lathered -> lather", function() {deepEqual( Stem("lathered"), "lather");});
test("latin -> latin", function() {deepEqual( Stem("latin"), "latin");});
test("latinity -> latin", function() {deepEqual( Stem("latinity"), "latin");});
test("latitude -> latitud", function() {deepEqual( Stem("latitude"), "latitud");});
test("latitudes -> latitud", function() {deepEqual( Stem("latitudes"), "latitud");});
test("latreille -> latreill", function() {deepEqual( Stem("latreille"), "latreill");});
test("latro -> latro", function() {deepEqual( Stem("latro"), "latro");});
test("latte -> latt", function() {deepEqual( Stem("latte"), "latt");});
test("latter -> latter", function() {deepEqual( Stem("latter"), "latter");});
test("latterly -> latter", function() {deepEqual( Stem("latterly"), "latter");});
test("latther -> latther", function() {deepEqual( Stem("latther"), "latther");});
test("latthers -> latther", function() {deepEqual( Stem("latthers"), "latther");});
test("lattice -> lattic", function() {deepEqual( Stem("lattice"), "lattic");});
test("latticed -> lattic", function() {deepEqual( Stem("latticed"), "lattic");});
test("lattle -> lattl", function() {deepEqual( Stem("lattle"), "lattl");});
test("laud -> laud", function() {deepEqual( Stem("laud"), "laud");});
test("laudable -> laudabl", function() {deepEqual( Stem("laudable"), "laudabl");});
test("laudamus -> laudamus", function() {deepEqual( Stem("laudamus"), "laudamus");});
test("laudation -> laudat", function() {deepEqual( Stem("laudation"), "laudat");});
test("laudatory -> laudatori", function() {deepEqual( Stem("laudatory"), "laudatori");});
test("lauded -> laud", function() {deepEqual( Stem("lauded"), "laud");});
test("laugh -> laugh", function() {deepEqual( Stem("laugh"), "laugh");});
test("laughable -> laughabl", function() {deepEqual( Stem("laughable"), "laughabl");});
test("laughed -> laugh", function() {deepEqual( Stem("laughed"), "laugh");});
test("laughing -> laugh", function() {deepEqual( Stem("laughing"), "laugh");});
test("laughingly -> laugh", function() {deepEqual( Stem("laughingly"), "laugh");});
test("laughs -> laugh", function() {deepEqual( Stem("laughs"), "laugh");});
test("laughter -> laughter", function() {deepEqual( Stem("laughter"), "laughter");});
test("launch -> launch", function() {deepEqual( Stem("launch"), "launch");});
test("launched -> launch", function() {deepEqual( Stem("launched"), "launch");});
test("launching -> launch", function() {deepEqual( Stem("launching"), "launch");});
test("laundry -> laundri", function() {deepEqual( Stem("laundry"), "laundri");});
test("laura -> laura", function() {deepEqual( Stem("laura"), "laura");});
test("laurance -> lauranc", function() {deepEqual( Stem("laurance"), "lauranc");});
test("laurel -> laurel", function() {deepEqual( Stem("laurel"), "laurel");});
test("laurels -> laurel", function() {deepEqual( Stem("laurels"), "laurel");});
test("laurence -> laurenc", function() {deepEqual( Stem("laurence"), "laurenc");});
test("lauzun -> lauzun", function() {deepEqual( Stem("lauzun"), "lauzun");});
test("lav -> lav", function() {deepEqual( Stem("lav"), "lav");});
test("lava -> lava", function() {deepEqual( Stem("lava"), "lava");});
test("laval -> laval", function() {deepEqual( Stem("laval"), "laval");});
test("lavas -> lava", function() {deepEqual( Stem("lavas"), "lava");});
test("lavender -> lavend", function() {deepEqual( Stem("lavender"), "lavend");});
test("lavish -> lavish", function() {deepEqual( Stem("lavish"), "lavish");});
test("lavished -> lavish", function() {deepEqual( Stem("lavished"), "lavish");});
test("lavishly -> lavish", function() {deepEqual( Stem("lavishly"), "lavish");});
test("law -> law", function() {deepEqual( Stem("law"), "law");});
test("lawful -> law", function() {deepEqual( Stem("lawful"), "law");});
test("lawgiver -> lawgiv", function() {deepEqual( Stem("lawgiver"), "lawgiv");});
test("lawk -> lawk", function() {deepEqual( Stem("lawk"), "lawk");});
test("lawn -> lawn", function() {deepEqual( Stem("lawn"), "lawn");});
test("lawns -> lawn", function() {deepEqual( Stem("lawns"), "lawn");});
test("lawrence -> lawrenc", function() {deepEqual( Stem("lawrence"), "lawrenc");});
test("laws -> law", function() {deepEqual( Stem("laws"), "law");});
test("lawson -> lawson", function() {deepEqual( Stem("lawson"), "lawson");});
test("lawstationers -> lawstation", function() {deepEqual( Stem("lawstationers"), "lawstation");});
test("lawsuit -> lawsuit", function() {deepEqual( Stem("lawsuit"), "lawsuit");});
test("lawver -> lawver", function() {deepEqual( Stem("lawver"), "lawver");});
test("lawyer -> lawyer", function() {deepEqual( Stem("lawyer"), "lawyer");});
test("lawyers -> lawyer", function() {deepEqual( Stem("lawyers"), "lawyer");});
test("lax -> lax", function() {deepEqual( Stem("lax"), "lax");});
test("laxity -> laxiti", function() {deepEqual( Stem("laxity"), "laxiti");});
test("lay -> lay", function() {deepEqual( Stem("lay"), "lay");});
test("layer -> layer", function() {deepEqual( Stem("layer"), "layer");});
test("layers -> layer", function() {deepEqual( Stem("layers"), "layer");});
test("layin -> layin", function() {deepEqual( Stem("layin"), "layin");});
test("laying -> lay", function() {deepEqual( Stem("laying"), "lay");});
test("laylec -> laylec", function() {deepEqual( Stem("laylec"), "laylec");});
test("lays -> lay", function() {deepEqual( Stem("lays"), "lay");});
test("layton -> layton", function() {deepEqual( Stem("layton"), "layton");});
test("laz -> laz", function() {deepEqual( Stem("laz"), "laz");});
test("lazarus -> lazarus", function() {deepEqual( Stem("lazarus"), "lazarus");});
test("lazily -> lazili", function() {deepEqual( Stem("lazily"), "lazili");});
test("laziness -> lazi", function() {deepEqual( Stem("laziness"), "lazi");});
test("lazo -> lazo", function() {deepEqual( Stem("lazo"), "lazo");});
test("lazoed -> lazo", function() {deepEqual( Stem("lazoed"), "lazo");});
test("lazos -> lazo", function() {deepEqual( Stem("lazos"), "lazo");});
test("lazy -> lazi", function() {deepEqual( Stem("lazy"), "lazi");});
test("lazzeretto -> lazzeretto", function() {deepEqual( Stem("lazzeretto"), "lazzeretto");});
test("le -> le", function() {deepEqual( Stem("le"), "le");});
test("lead -> lead", function() {deepEqual( Stem("lead"), "lead");});
test("leaden -> leaden", function() {deepEqual( Stem("leaden"), "leaden");});
test("leadenhall -> leadenhal", function() {deepEqual( Stem("leadenhall"), "leadenhal");});
test("leader -> leader", function() {deepEqual( Stem("leader"), "leader");});
test("leaders -> leader", function() {deepEqual( Stem("leaders"), "leader");});
test("leadership -> leadership", function() {deepEqual( Stem("leadership"), "leadership");});
test("leading -> lead", function() {deepEqual( Stem("leading"), "lead");});
test("leads -> lead", function() {deepEqual( Stem("leads"), "lead");});
test("leaf -> leaf", function() {deepEqual( Stem("leaf"), "leaf");});
test("leafed -> leaf", function() {deepEqual( Stem("leafed"), "leaf");});
test("leafless -> leafless", function() {deepEqual( Stem("leafless"), "leafless");});
test("leafy -> leafi", function() {deepEqual( Stem("leafy"), "leafi");});
test("league -> leagu", function() {deepEqual( Stem("league"), "leagu");});
test("leagued -> leagu", function() {deepEqual( Stem("leagued"), "leagu");});
test("leagues -> leagu", function() {deepEqual( Stem("leagues"), "leagu");});
test("leaked -> leak", function() {deepEqual( Stem("leaked"), "leak");});
test("lean -> lean", function() {deepEqual( Stem("lean"), "lean");});
test("leaned -> lean", function() {deepEqual( Stem("leaned"), "lean");});
test("leaning -> lean", function() {deepEqual( Stem("leaning"), "lean");});
test("leanness -> lean", function() {deepEqual( Stem("leanness"), "lean");});
test("leans -> lean", function() {deepEqual( Stem("leans"), "lean");});
test("leant -> leant", function() {deepEqual( Stem("leant"), "leant");});
test("leap -> leap", function() {deepEqual( Stem("leap"), "leap");});
test("leaped -> leap", function() {deepEqual( Stem("leaped"), "leap");});
test("leaper -> leaper", function() {deepEqual( Stem("leaper"), "leaper");});
test("leaping -> leap", function() {deepEqual( Stem("leaping"), "leap");});
test("leapings -> leap", function() {deepEqual( Stem("leapings"), "leap");});
test("leapt -> leapt", function() {deepEqual( Stem("leapt"), "leapt");});
test("lear -> lear", function() {deepEqual( Stem("lear"), "lear");});
test("learn -> learn", function() {deepEqual( Stem("learn"), "learn");});
test("learned -> learn", function() {deepEqual( Stem("learned"), "learn");});
test("learners -> learner", function() {deepEqual( Stem("learners"), "learner");});
test("learning -> learn", function() {deepEqual( Stem("learning"), "learn");});
test("learns -> learn", function() {deepEqual( Stem("learns"), "learn");});
test("learnt -> learnt", function() {deepEqual( Stem("learnt"), "learnt");});
test("lease -> leas", function() {deepEqual( Stem("lease"), "leas");});
test("leases -> leas", function() {deepEqual( Stem("leases"), "leas");});
test("least -> least", function() {deepEqual( Stem("least"), "least");});
test("leastways -> leastway", function() {deepEqual( Stem("leastways"), "leastway");});
test("leather -> leather", function() {deepEqual( Stem("leather"), "leather");});
test("leathern -> leathern", function() {deepEqual( Stem("leathern"), "leathern");});
test("leave -> leav", function() {deepEqual( Stem("leave"), "leav");});
test("leaves -> leav", function() {deepEqual( Stem("leaves"), "leav");});
test("leaving -> leav", function() {deepEqual( Stem("leaving"), "leav");});
test("lebanon -> lebanon", function() {deepEqual( Stem("lebanon"), "lebanon");});
test("leben -> leben", function() {deepEqual( Stem("leben"), "leben");});
test("lebeziatnikov -> lebeziatnikov", function() {deepEqual( Stem("lebeziatnikov"), "lebeziatnikov");});
test("lecherousness -> lecher", function() {deepEqual( Stem("lecherousness"), "lecher");});
test("lecture -> lectur", function() {deepEqual( Stem("lecture"), "lectur");});
test("lectured -> lectur", function() {deepEqual( Stem("lectured"), "lectur");});
test("lecturer -> lectur", function() {deepEqual( Stem("lecturer"), "lectur");});
test("lectures -> lectur", function() {deepEqual( Stem("lectures"), "lectur");});
test("lecturing -> lectur", function() {deepEqual( Stem("lecturing"), "lectur");});
test("led -> led", function() {deepEqual( Stem("led"), "led");});
test("ledge -> ledg", function() {deepEqual( Stem("ledge"), "ledg");});
test("ledger -> ledger", function() {deepEqual( Stem("ledger"), "ledger");});
test("ledgers -> ledger", function() {deepEqual( Stem("ledgers"), "ledger");});
test("ledges -> ledg", function() {deepEqual( Stem("ledges"), "ledg");});
test("ledrook -> ledrook", function() {deepEqual( Stem("ledrook"), "ledrook");});
test("leech -> leech", function() {deepEqual( Stem("leech"), "leech");});
test("leek -> leek", function() {deepEqual( Stem("leek"), "leek");});
test("leer -> leer", function() {deepEqual( Stem("leer"), "leer");});
test("leered -> leer", function() {deepEqual( Stem("leered"), "leer");});
test("leering -> leer", function() {deepEqual( Stem("leering"), "leer");});
test("leetle -> leetl", function() {deepEqual( Stem("leetle"), "leetl");});
test("leeuwin -> leeuwin", function() {deepEqual( Stem("leeuwin"), "leeuwin");});
test("leeward -> leeward", function() {deepEqual( Stem("leeward"), "leeward");});
test("left -> left", function() {deepEqual( Stem("left"), "left");});
test("leg -> leg", function() {deepEqual( Stem("leg"), "leg");});
test("legacy -> legaci", function() {deepEqual( Stem("legacy"), "legaci");});
test("legal -> legal", function() {deepEqual( Stem("legal"), "legal");});
test("legality -> legal", function() {deepEqual( Stem("legality"), "legal");});
test("legally -> legal", function() {deepEqual( Stem("legally"), "legal");});
test("legatee -> legate", function() {deepEqual( Stem("legatee"), "legate");});
test("legatees -> legate", function() {deepEqual( Stem("legatees"), "legate");});
test("legend -> legend", function() {deepEqual( Stem("legend"), "legend");});
test("legendary -> legendari", function() {deepEqual( Stem("legendary"), "legendari");});
test("legends -> legend", function() {deepEqual( Stem("legends"), "legend");});
test("legged -> leg", function() {deepEqual( Stem("legged"), "leg");});
test("leggings -> leg", function() {deepEqual( Stem("leggings"), "leg");});
test("legh -> legh", function() {deepEqual( Stem("legh"), "legh");});
test("legibility -> legibl", function() {deepEqual( Stem("legibility"), "legibl");});
test("legible -> legibl", function() {deepEqual( Stem("legible"), "legibl");});
test("legibly -> legibl", function() {deepEqual( Stem("legibly"), "legibl");});
test("legion -> legion", function() {deepEqual( Stem("legion"), "legion");});
test("legislation -> legisl", function() {deepEqual( Stem("legislation"), "legisl");});
test("legislative -> legisl", function() {deepEqual( Stem("legislative"), "legisl");});
test("legislator -> legisl", function() {deepEqual( Stem("legislator"), "legisl");});
test("legislators -> legisl", function() {deepEqual( Stem("legislators"), "legisl");});
test("legislature -> legislatur", function() {deepEqual( Stem("legislature"), "legislatur");});
test("legitimacy -> legitimaci", function() {deepEqual( Stem("legitimacy"), "legitimaci");});
test("legitimate -> legitim", function() {deepEqual( Stem("legitimate"), "legitim");});
test("legs -> leg", function() {deepEqual( Stem("legs"), "leg");});
test("leguminosae -> leguminosa", function() {deepEqual( Stem("leguminosae"), "leguminosa");});
test("leicester -> leicest", function() {deepEqual( Stem("leicester"), "leicest");});
test("leicestershire -> leicestershir", function() {deepEqual( Stem("leicestershire"), "leicestershir");});
test("leighton -> leighton", function() {deepEqual( Stem("leighton"), "leighton");});
test("leisure -> leisur", function() {deepEqual( Stem("leisure"), "leisur");});
test("leisurely -> leisur", function() {deepEqual( Stem("leisurely"), "leisur");});
test("lemen -> lemen", function() {deepEqual( Stem("lemen"), "lemen");});
test("lemon -> lemon", function() {deepEqual( Stem("lemon"), "lemon");});
test("lemonade -> lemonad", function() {deepEqual( Stem("lemonade"), "lemonad");});
test("lemons -> lemon", function() {deepEqual( Stem("lemons"), "lemon");});
test("lemuel -> lemuel", function() {deepEqual( Stem("lemuel"), "lemuel");});
test("lemuy -> lemuy", function() {deepEqual( Stem("lemuy"), "lemuy");});
test("len -> len", function() {deepEqual( Stem("len"), "len");});
test("lend -> lend", function() {deepEqual( Stem("lend"), "lend");});
test("lender -> lender", function() {deepEqual( Stem("lender"), "lender");});
test("lenders -> lender", function() {deepEqual( Stem("lenders"), "lender");});
test("lending -> lend", function() {deepEqual( Stem("lending"), "lend");});
test("lends -> lend", function() {deepEqual( Stem("lends"), "lend");});
test("length -> length", function() {deepEqual( Stem("length"), "length");});
test("lengthen -> lengthen", function() {deepEqual( Stem("lengthen"), "lengthen");});
test("lengthened -> lengthen", function() {deepEqual( Stem("lengthened"), "lengthen");});
test("lengths -> length", function() {deepEqual( Stem("lengths"), "length");});
test("lengthy -> lengthi", function() {deepEqual( Stem("lengthy"), "lengthi");});
test("lenient -> lenient", function() {deepEqual( Stem("lenient"), "lenient");});
test("leniently -> lenient", function() {deepEqual( Stem("leniently"), "lenient");});
test("lenning -> len", function() {deepEqual( Stem("lenning"), "len");});
test("lenou -> lenou", function() {deepEqual( Stem("lenou"), "lenou");});
test("lens -> len", function() {deepEqual( Stem("lens"), "len");});
test("lent -> lent", function() {deepEqual( Stem("lent"), "lent");});
test("lentils -> lentil", function() {deepEqual( Stem("lentils"), "lentil");});
test("lenville -> lenvill", function() {deepEqual( Stem("lenville"), "lenvill");});
test("leone -> leon", function() {deepEqual( Stem("leone"), "leon");});
test("leoneros -> leonero", function() {deepEqual( Stem("leoneros"), "leonero");});
test("leoville -> leovill", function() {deepEqual( Stem("leoville"), "leovill");});
test("lepidoptera -> lepidoptera", function() {deepEqual( Stem("lepidoptera"), "lepidoptera");});
test("lepus -> lepus", function() {deepEqual( Stem("lepus"), "lepus");});
test("les -> les", function() {deepEqual( Stem("les"), "les");});
test("leslie -> lesli", function() {deepEqual( Stem("leslie"), "lesli");});
test("less -> less", function() {deepEqual( Stem("less"), "less");});
test("lessen -> lessen", function() {deepEqual( Stem("lessen"), "lessen");});
test("lessened -> lessen", function() {deepEqual( Stem("lessened"), "lessen");});
test("lessening -> lessen", function() {deepEqual( Stem("lessening"), "lessen");});
test("lesser -> lesser", function() {deepEqual( Stem("lesser"), "lesser");});
test("lesson -> lesson", function() {deepEqual( Stem("lesson"), "lesson");});
test("lessons -> lesson", function() {deepEqual( Stem("lessons"), "lesson");});
test("lest -> lest", function() {deepEqual( Stem("lest"), "lest");});
test("let -> let", function() {deepEqual( Stem("let"), "let");});
test("lethargic -> letharg", function() {deepEqual( Stem("lethargic"), "letharg");});
test("lethargy -> lethargi", function() {deepEqual( Stem("lethargy"), "lethargi");});
test("lethe -> leth", function() {deepEqual( Stem("lethe"), "leth");});
test("lets -> let", function() {deepEqual( Stem("lets"), "let");});
test("lett -> lett", function() {deepEqual( Stem("lett"), "lett");});
test("letter -> letter", function() {deepEqual( Stem("letter"), "letter");});
test("letters -> letter", function() {deepEqual( Stem("letters"), "letter");});
test("letting -> let", function() {deepEqual( Stem("letting"), "let");});
test("lettres -> lettr", function() {deepEqual( Stem("lettres"), "lettr");});
test("lettuce -> lettuc", function() {deepEqual( Stem("lettuce"), "lettuc");});
test("lettuces -> lettuc", function() {deepEqual( Stem("lettuces"), "lettuc");});
test("leurs -> leur", function() {deepEqual( Stem("leurs"), "leur");});
test("levanted -> levant", function() {deepEqual( Stem("levanted"), "levant");});
test("leve -> leve", function() {deepEqual( Stem("leve"), "leve");});
test("levees -> leve", function() {deepEqual( Stem("levees"), "leve");});
test("level -> level", function() {deepEqual( Stem("level"), "level");});
test("levelle -> levell", function() {deepEqual( Stem("levelle"), "levell");});
test("levelled -> level", function() {deepEqual( Stem("levelled"), "level");});
test("levelling -> level", function() {deepEqual( Stem("levelling"), "level");});
test("levels -> level", function() {deepEqual( Stem("levels"), "level");});
test("levers -> lever", function() {deepEqual( Stem("levers"), "lever");});
test("levities -> leviti", function() {deepEqual( Stem("levities"), "leviti");});
test("levity -> leviti", function() {deepEqual( Stem("levity"), "leviti");});
test("lewes -> lew", function() {deepEqual( Stem("lewes"), "lew");});
test("lewis -> lewi", function() {deepEqual( Stem("lewis"), "lewi");});
test("li -> li", function() {deepEqual( Stem("li"), "li");});
test("liabilities -> liabil", function() {deepEqual( Stem("liabilities"), "liabil");});
test("liability -> liabil", function() {deepEqual( Stem("liability"), "liabil");});
test("liable -> liabl", function() {deepEqual( Stem("liable"), "liabl");});
test("liana -> liana", function() {deepEqual( Stem("liana"), "liana");});
test("liar -> liar", function() {deepEqual( Stem("liar"), "liar");});
test("libation -> libat", function() {deepEqual( Stem("libation"), "libat");});
test("libel -> libel", function() {deepEqual( Stem("libel"), "libel");});
test("liberal -> liber", function() {deepEqual( Stem("liberal"), "liber");});
test("liberalism -> liber", function() {deepEqual( Stem("liberalism"), "liber");});
test("liberality -> liber", function() {deepEqual( Stem("liberality"), "liber");});
test("liberally -> liber", function() {deepEqual( Stem("liberally"), "liber");});
test("liberals -> liber", function() {deepEqual( Stem("liberals"), "liber");});
test("liberate -> liber", function() {deepEqual( Stem("liberate"), "liber");});
test("liberated -> liber", function() {deepEqual( Stem("liberated"), "liber");});
test("liberates -> liber", function() {deepEqual( Stem("liberates"), "liber");});
test("liberties -> liberti", function() {deepEqual( Stem("liberties"), "liberti");});
test("libertine -> libertin", function() {deepEqual( Stem("libertine"), "libertin");});
test("libertines -> libertin", function() {deepEqual( Stem("libertines"), "libertin");});
test("liberty -> liberti", function() {deepEqual( Stem("liberty"), "liberti");});
test("librarian -> librarian", function() {deepEqual( Stem("librarian"), "librarian");});
test("libraries -> librari", function() {deepEqual( Stem("libraries"), "librari");});
test("library -> librari", function() {deepEqual( Stem("library"), "librari");});
test("lice -> lice", function() {deepEqual( Stem("lice"), "lice");});
test("licence -> licenc", function() {deepEqual( Stem("licence"), "licenc");});
test("licences -> licenc", function() {deepEqual( Stem("licences"), "licenc");});
test("license -> licens", function() {deepEqual( Stem("license"), "licens");});
test("licensed -> licens", function() {deepEqual( Stem("licensed"), "licens");});
test("licenses -> licens", function() {deepEqual( Stem("licenses"), "licens");});
test("licentious -> licenti", function() {deepEqual( Stem("licentious"), "licenti");});
test("licentiousness -> licenti", function() {deepEqual( Stem("licentiousness"), "licenti");});
test("lichen -> lichen", function() {deepEqual( Stem("lichen"), "lichen");});
test("lichens -> lichen", function() {deepEqual( Stem("lichens"), "lichen");});
test("lichtenstein -> lichtenstein", function() {deepEqual( Stem("lichtenstein"), "lichtenstein");});
test("licked -> lick", function() {deepEqual( Stem("licked"), "lick");});
test("licking -> lick", function() {deepEqual( Stem("licking"), "lick");});
test("lid -> lid", function() {deepEqual( Stem("lid"), "lid");});
test("lida -> lida", function() {deepEqual( Stem("lida"), "lida");});
test("lids -> lid", function() {deepEqual( Stem("lids"), "lid");});
test("lie -> lie", function() {deepEqual( Stem("lie"), "lie");});
test("liebig -> liebig", function() {deepEqual( Stem("liebig"), "liebig");});
test("lied -> lie", function() {deepEqual( Stem("lied"), "lie");});
test("lies -> lie", function() {deepEqual( Stem("lies"), "lie");});
test("liesk -> liesk", function() {deepEqual( Stem("liesk"), "liesk");});
test("lieu -> lieu", function() {deepEqual( Stem("lieu"), "lieu");});
test("lieut -> lieut", function() {deepEqual( Stem("lieut"), "lieut");});
test("lieutenancies -> lieuten", function() {deepEqual( Stem("lieutenancies"), "lieuten");});
test("lieutenant -> lieuten", function() {deepEqual( Stem("lieutenant"), "lieuten");});
test("lieutenants -> lieuten", function() {deepEqual( Stem("lieutenants"), "lieuten");});
test("life -> life", function() {deepEqual( Stem("life"), "life");});
test("lifeless -> lifeless", function() {deepEqual( Stem("lifeless"), "lifeless");});
test("lifetime -> lifetim", function() {deepEqual( Stem("lifetime"), "lifetim");});
test("lift -> lift", function() {deepEqual( Stem("lift"), "lift");});
test("lifted -> lift", function() {deepEqual( Stem("lifted"), "lift");});
test("lifting -> lift", function() {deepEqual( Stem("lifting"), "lift");});
test("lifts -> lift", function() {deepEqual( Stem("lifts"), "lift");});
test("ligament -> ligament", function() {deepEqual( Stem("ligament"), "ligament");});
test("ligaments -> ligament", function() {deepEqual( Stem("ligaments"), "ligament");});
test("ligh -> ligh", function() {deepEqual( Stem("ligh"), "ligh");});
test("light -> light", function() {deepEqual( Stem("light"), "light");});
test("lighted -> light", function() {deepEqual( Stem("lighted"), "light");});
test("lighten -> lighten", function() {deepEqual( Stem("lighten"), "lighten");});
test("lightened -> lighten", function() {deepEqual( Stem("lightened"), "lighten");});
test("lightening -> lighten", function() {deepEqual( Stem("lightening"), "lighten");});
test("lightens -> lighten", function() {deepEqual( Stem("lightens"), "lighten");});
test("lighter -> lighter", function() {deepEqual( Stem("lighter"), "lighter");});
test("lightest -> lightest", function() {deepEqual( Stem("lightest"), "lightest");});
test("lightheaded -> lighthead", function() {deepEqual( Stem("lightheaded"), "lighthead");});
test("lighthearted -> lightheart", function() {deepEqual( Stem("lighthearted"), "lightheart");});
test("lighthouse -> lighthous", function() {deepEqual( Stem("lighthouse"), "lighthous");});
test("lighthouses -> lighthous", function() {deepEqual( Stem("lighthouses"), "lighthous");});
test("lighting -> light", function() {deepEqual( Stem("lighting"), "light");});
test("lightly -> light", function() {deepEqual( Stem("lightly"), "light");});
test("lightness -> light", function() {deepEqual( Stem("lightness"), "light");});
test("lightning -> lightn", function() {deepEqual( Stem("lightning"), "lightn");});
test("lights -> light", function() {deepEqual( Stem("lights"), "light");});
test("lightsome -> lightsom", function() {deepEqual( Stem("lightsome"), "lightsom");});
test("lignite -> lignit", function() {deepEqual( Stem("lignite"), "lignit");});
test("lignum -> lignum", function() {deepEqual( Stem("lignum"), "lignum");});
test("lii -> lii", function() {deepEqual( Stem("lii"), "lii");});
test("liii -> liii", function() {deepEqual( Stem("liii"), "liii");});
test("lik -> lik", function() {deepEqual( Stem("lik"), "lik");});
test("like -> like", function() {deepEqual( Stem("like"), "like");});
test("liked -> like", function() {deepEqual( Stem("liked"), "like");});
test("likelier -> likeli", function() {deepEqual( Stem("likelier"), "likeli");});
test("likelihood -> likelihood", function() {deepEqual( Stem("likelihood"), "likelihood");});
test("likely -> like", function() {deepEqual( Stem("likely"), "like");});
test("likened -> liken", function() {deepEqual( Stem("likened"), "liken");});
test("likeness -> like", function() {deepEqual( Stem("likeness"), "like");});
test("likenesses -> like", function() {deepEqual( Stem("likenesses"), "like");});
test("likes -> like", function() {deepEqual( Stem("likes"), "like");});
test("likewise -> likewis", function() {deepEqual( Stem("likewise"), "likewis");});
test("liking -> like", function() {deepEqual( Stem("liking"), "like");});
test("likings -> like", function() {deepEqual( Stem("likings"), "like");});
test("lilac -> lilac", function() {deepEqual( Stem("lilac"), "lilac");});
test("lilaceous -> lilac", function() {deepEqual( Stem("lilaceous"), "lilac");});
test("lilacs -> lilac", function() {deepEqual( Stem("lilacs"), "lilac");});
test("liliaceous -> liliac", function() {deepEqual( Stem("liliaceous"), "liliac");});
test("lilies -> lili", function() {deepEqual( Stem("lilies"), "lili");});
test("lilliput -> lilliput", function() {deepEqual( Stem("lilliput"), "lilliput");});
test("lillyvick -> lillyvick", function() {deepEqual( Stem("lillyvick"), "lillyvick");});
test("lillyvicks -> lillyvick", function() {deepEqual( Stem("lillyvicks"), "lillyvick");});
test("lily -> lili", function() {deepEqual( Stem("lily"), "lili");});
test("lima -> lima", function() {deepEqual( Stem("lima"), "lima");});
test("limache -> limach", function() {deepEqual( Stem("limache"), "limach");});
test("limb -> limb", function() {deepEqual( Stem("limb"), "limb");});
test("limbs -> limb", function() {deepEqual( Stem("limbs"), "limb");});
test("lime -> lime", function() {deepEqual( Stem("lime"), "lime");});
test("limes -> lime", function() {deepEqual( Stem("limes"), "lime");});
test("limestone -> limeston", function() {deepEqual( Stem("limestone"), "limeston");});
test("limit -> limit", function() {deepEqual( Stem("limit"), "limit");});
test("limited -> limit", function() {deepEqual( Stem("limited"), "limit");});
test("limiting -> limit", function() {deepEqual( Stem("limiting"), "limit");});
test("limits -> limit", function() {deepEqual( Stem("limits"), "limit");});
test("limnaea -> limnaea", function() {deepEqual( Stem("limnaea"), "limnaea");});
test("limp -> limp", function() {deepEqual( Stem("limp"), "limp");});
test("limped -> limp", function() {deepEqual( Stem("limped"), "limp");});
test("limpet -> limpet", function() {deepEqual( Stem("limpet"), "limpet");});
test("limpid -> limpid", function() {deepEqual( Stem("limpid"), "limpid");});
test("limping -> limp", function() {deepEqual( Stem("limping"), "limp");});
test("lin -> lin", function() {deepEqual( Stem("lin"), "lin");});
test("lincoln -> lincoln", function() {deepEqual( Stem("lincoln"), "lincoln");});
test("lincolnshire -> lincolnshir", function() {deepEqual( Stem("lincolnshire"), "lincolnshir");});
test("line -> line", function() {deepEqual( Stem("line"), "line");});
test("linea -> linea", function() {deepEqual( Stem("linea"), "linea");});
test("lineage -> lineag", function() {deepEqual( Stem("lineage"), "lineag");});
test("lineament -> lineament", function() {deepEqual( Stem("lineament"), "lineament");});
test("lineaments -> lineament", function() {deepEqual( Stem("lineaments"), "lineament");});
test("linear -> linear", function() {deepEqual( Stem("linear"), "linear");});
test("lined -> line", function() {deepEqual( Stem("lined"), "line");});
test("linen -> linen", function() {deepEqual( Stem("linen"), "linen");});
test("linendraper -> linendrap", function() {deepEqual( Stem("linendraper"), "linendrap");});
test("lines -> line", function() {deepEqual( Stem("lines"), "line");});
test("linger -> linger", function() {deepEqual( Stem("linger"), "linger");});
test("lingered -> linger", function() {deepEqual( Stem("lingered"), "linger");});
test("lingering -> linger", function() {deepEqual( Stem("lingering"), "linger");});
test("lingerings -> linger", function() {deepEqual( Stem("lingerings"), "linger");});
test("lingers -> linger", function() {deepEqual( Stem("lingers"), "linger");});
test("linguist -> linguist", function() {deepEqual( Stem("linguist"), "linguist");});
test("lining -> line", function() {deepEqual( Stem("lining"), "line");});
test("linings -> line", function() {deepEqual( Stem("linings"), "line");});
test("link -> link", function() {deepEqual( Stem("link"), "link");});
test("linked -> link", function() {deepEqual( Stem("linked"), "link");});
test("linking -> link", function() {deepEqual( Stem("linking"), "link");});
test("linkinwater -> linkinwat", function() {deepEqual( Stem("linkinwater"), "linkinwat");});
test("links -> link", function() {deepEqual( Stem("links"), "link");});
test("linn -> linn", function() {deepEqual( Stem("linn"), "linn");});
test("linnaean -> linnaean", function() {deepEqual( Stem("linnaean"), "linnaean");});
test("linnean -> linnean", function() {deepEqual( Stem("linnean"), "linnean");});
test("linnets -> linnet", function() {deepEqual( Stem("linnets"), "linnet");});
test("lintels -> lintel", function() {deepEqual( Stem("lintels"), "lintel");});
test("lion -> lion", function() {deepEqual( Stem("lion"), "lion");});
test("lioness -> lioness", function() {deepEqual( Stem("lioness"), "lioness");});
test("lions -> lion", function() {deepEqual( Stem("lions"), "lion");});
test("lip -> lip", function() {deepEqual( Stem("lip"), "lip");});
test("lippevechsel -> lippevechsel", function() {deepEqual( Stem("lippevechsel"), "lippevechsel");});
test("lipping -> lip", function() {deepEqual( Stem("lipping"), "lip");});
test("lips -> lip", function() {deepEqual( Stem("lips"), "lip");});
test("liquid -> liquid", function() {deepEqual( Stem("liquid"), "liquid");});
test("liquidating -> liquid", function() {deepEqual( Stem("liquidating"), "liquid");});
test("liquor -> liquor", function() {deepEqual( Stem("liquor"), "liquor");});
test("liquorish -> liquorish", function() {deepEqual( Stem("liquorish"), "liquorish");});
test("liquors -> liquor", function() {deepEqual( Stem("liquors"), "liquor");});
test("lisbon -> lisbon", function() {deepEqual( Stem("lisbon"), "lisbon");});
test("lisp -> lisp", function() {deepEqual( Stem("lisp"), "lisp");});
test("list -> list", function() {deepEqual( Stem("list"), "list");});
test("listed -> list", function() {deepEqual( Stem("listed"), "list");});
test("listen -> listen", function() {deepEqual( Stem("listen"), "listen");});
test("listened -> listen", function() {deepEqual( Stem("listened"), "listen");});
test("listener -> listen", function() {deepEqual( Stem("listener"), "listen");});
test("listeners -> listen", function() {deepEqual( Stem("listeners"), "listen");});
test("listening -> listen", function() {deepEqual( Stem("listening"), "listen");});
test("listenings -> listen", function() {deepEqual( Stem("listenings"), "listen");});
test("listens -> listen", function() {deepEqual( Stem("listens"), "listen");});
test("listless -> listless", function() {deepEqual( Stem("listless"), "listless");});
test("listlessly -> listless", function() {deepEqual( Stem("listlessly"), "listless");});
test("listlessness -> listless", function() {deepEqual( Stem("listlessness"), "listless");});
test("lists -> list", function() {deepEqual( Stem("lists"), "list");});
test("lit -> lit", function() {deepEqual( Stem("lit"), "lit");});
test("litany -> litani", function() {deepEqual( Stem("litany"), "litani");});
test("literal -> liter", function() {deepEqual( Stem("literal"), "liter");});
test("literally -> liter", function() {deepEqual( Stem("literally"), "liter");});
test("literary -> literari", function() {deepEqual( Stem("literary"), "literari");});
test("literature -> literatur", function() {deepEqual( Stem("literature"), "literatur");});
test("lithe -> lith", function() {deepEqual( Stem("lithe"), "lith");});
test("lithographic -> lithograph", function() {deepEqual( Stem("lithographic"), "lithograph");});
test("litigation -> litig", function() {deepEqual( Stem("litigation"), "litig");});
test("litigious -> litigi", function() {deepEqual( Stem("litigious"), "litigi");});
test("litter -> litter", function() {deepEqual( Stem("litter"), "litter");});
test("littered -> litter", function() {deepEqual( Stem("littered"), "litter");});
test("littering -> litter", function() {deepEqual( Stem("littering"), "litter");});
test("littl -> littl", function() {deepEqual( Stem("littl"), "littl");});
test("little -> littl", function() {deepEqual( Stem("little"), "littl");});
test("littleness -> littl", function() {deepEqual( Stem("littleness"), "littl");});
test("littlenesses -> littl", function() {deepEqual( Stem("littlenesses"), "littl");});
test("littlest -> littlest", function() {deepEqual( Stem("littlest"), "littlest");});
test("littoral -> littor", function() {deepEqual( Stem("littoral"), "littor");});
test("liv -> liv", function() {deepEqual( Stem("liv"), "liv");});
test("live -> live", function() {deepEqual( Stem("live"), "live");});
test("lived -> live", function() {deepEqual( Stem("lived"), "live");});
test("livelier -> liveli", function() {deepEqual( Stem("livelier"), "liveli");});
test("liveliest -> liveliest", function() {deepEqual( Stem("liveliest"), "liveliest");});
test("livelihood -> livelihood", function() {deepEqual( Stem("livelihood"), "livelihood");});
test("liveliness -> liveli", function() {deepEqual( Stem("liveliness"), "liveli");});
test("livelong -> livelong", function() {deepEqual( Stem("livelong"), "livelong");});
test("lively -> live", function() {deepEqual( Stem("lively"), "live");});
test("liver -> liver", function() {deepEqual( Stem("liver"), "liver");});
test("liveried -> liveri", function() {deepEqual( Stem("liveried"), "liveri");});
test("liveries -> liveri", function() {deepEqual( Stem("liveries"), "liveri");});
test("liverpool -> liverpool", function() {deepEqual( Stem("liverpool"), "liverpool");});
test("livers -> liver", function() {deepEqual( Stem("livers"), "liver");});
test("livery -> liveri", function() {deepEqual( Stem("livery"), "liveri");});
test("lives -> live", function() {deepEqual( Stem("lives"), "live");});
test("livest -> livest", function() {deepEqual( Stem("livest"), "livest");});
test("liveth -> liveth", function() {deepEqual( Stem("liveth"), "liveth");});
test("livid -> livid", function() {deepEqual( Stem("livid"), "livid");});
test("living -> live", function() {deepEqual( Stem("living"), "live");});
test("livingstone -> livingston", function() {deepEqual( Stem("livingstone"), "livingston");});
test("lix -> lix", function() {deepEqual( Stem("lix"), "lix");});
test("liz -> liz", function() {deepEqual( Stem("liz"), "liz");});
test("lizard -> lizard", function() {deepEqual( Stem("lizard"), "lizard");});
test("lizards -> lizard", function() {deepEqual( Stem("lizards"), "lizard");});
test("lizaveta -> lizaveta", function() {deepEqual( Stem("lizaveta"), "lizaveta");});
test("lizzie -> lizzi", function() {deepEqual( Stem("lizzie"), "lizzi");});
test("lizzy -> lizzi", function() {deepEqual( Stem("lizzy"), "lizzi");});
test("ll -> ll", function() {deepEqual( Stem("ll"), "ll");});
test("llama -> llama", function() {deepEqual( Stem("llama"), "llama");});
test("llandaff -> llandaff", function() {deepEqual( Stem("llandaff"), "llandaff");});
test("llanos -> llano", function() {deepEqual( Stem("llanos"), "llano");});
test("lloyd -> lloyd", function() {deepEqual( Stem("lloyd"), "lloyd");});
test("llth -> llth", function() {deepEqual( Stem("llth"), "llth");});
test("lmmediately -> lmmediat", function() {deepEqual( Stem("lmmediately"), "lmmediat");});
test("lo -> lo", function() {deepEqual( Stem("lo"), "lo");});
test("load -> load", function() {deepEqual( Stem("load"), "load");});
test("loaded -> load", function() {deepEqual( Stem("loaded"), "load");});
test("loading -> load", function() {deepEqual( Stem("loading"), "load");});
test("loads -> load", function() {deepEqual( Stem("loads"), "load");});
test("loaf -> loaf", function() {deepEqual( Stem("loaf"), "loaf");});
test("loam -> loam", function() {deepEqual( Stem("loam"), "loam");});
test("loan -> loan", function() {deepEqual( Stem("loan"), "loan");});
test("loans -> loan", function() {deepEqual( Stem("loans"), "loan");});
test("loath -> loath", function() {deepEqual( Stem("loath"), "loath");});
test("loathe -> loath", function() {deepEqual( Stem("loathe"), "loath");});
test("loathed -> loath", function() {deepEqual( Stem("loathed"), "loath");});
test("loathing -> loath", function() {deepEqual( Stem("loathing"), "loath");});
test("loathsome -> loathsom", function() {deepEqual( Stem("loathsome"), "loathsom");});
test("loathsomeness -> loathsom", function() {deepEqual( Stem("loathsomeness"), "loathsom");});
test("loaves -> loav", function() {deepEqual( Stem("loaves"), "loav");});
test("lobbies -> lobbi", function() {deepEqual( Stem("lobbies"), "lobbi");});
test("lobby -> lobbi", function() {deepEqual( Stem("lobby"), "lobbi");});
test("lobster -> lobster", function() {deepEqual( Stem("lobster"), "lobster");});
test("lobsters -> lobster", function() {deepEqual( Stem("lobsters"), "lobster");});
test("local -> local", function() {deepEqual( Stem("local"), "local");});
test("locality -> local", function() {deepEqual( Stem("locality"), "local");});
test("locations -> locat", function() {deepEqual( Stem("locations"), "locat");});
test("lochness -> loch", function() {deepEqual( Stem("lochness"), "loch");});
test("lock -> lock", function() {deepEqual( Stem("lock"), "lock");});
test("locked -> lock", function() {deepEqual( Stem("locked"), "lock");});
test("locket -> locket", function() {deepEqual( Stem("locket"), "locket");});
test("locking -> lock", function() {deepEqual( Stem("locking"), "lock");});
test("lockouts -> lockout", function() {deepEqual( Stem("lockouts"), "lockout");});
test("locks -> lock", function() {deepEqual( Stem("locks"), "lock");});
test("locksmiths -> locksmith", function() {deepEqual( Stem("locksmiths"), "locksmith");});
test("lockyer -> lockyer", function() {deepEqual( Stem("lockyer"), "lockyer");});
test("locock -> locock", function() {deepEqual( Stem("locock"), "locock");});
test("lococks -> locock", function() {deepEqual( Stem("lococks"), "locock");});
test("locomotion -> locomot", function() {deepEqual( Stem("locomotion"), "locomot");});
test("locomotive -> locomot", function() {deepEqual( Stem("locomotive"), "locomot");});
test("locomotives -> locomot", function() {deepEqual( Stem("locomotives"), "locomot");});
test("locust -> locust", function() {deepEqual( Stem("locust"), "locust");});
test("locusts -> locust", function() {deepEqual( Stem("locusts"), "locust");});
test("lod -> lod", function() {deepEqual( Stem("lod"), "lod");});
test("lodge -> lodg", function() {deepEqual( Stem("lodge"), "lodg");});
test("lodged -> lodg", function() {deepEqual( Stem("lodged"), "lodg");});
test("lodger -> lodger", function() {deepEqual( Stem("lodger"), "lodger");});
test("lodgers -> lodger", function() {deepEqual( Stem("lodgers"), "lodger");});
test("lodges -> lodg", function() {deepEqual( Stem("lodges"), "lodg");});
test("lodging -> lodg", function() {deepEqual( Stem("lodging"), "lodg");});
test("lodgings -> lodg", function() {deepEqual( Stem("lodgings"), "lodg");});
test("loft -> loft", function() {deepEqual( Stem("loft"), "loft");});
test("loftiest -> loftiest", function() {deepEqual( Stem("loftiest"), "loftiest");});
test("loftily -> loftili", function() {deepEqual( Stem("loftily"), "loftili");});
test("loftiness -> lofti", function() {deepEqual( Stem("loftiness"), "lofti");});
test("lofty -> lofti", function() {deepEqual( Stem("lofty"), "lofti");});
test("log -> log", function() {deepEqual( Stem("log"), "log");});
test("loggerheaded -> loggerhead", function() {deepEqual( Stem("loggerheaded"), "loggerhead");});
test("loggerheads -> loggerhead", function() {deepEqual( Stem("loggerheads"), "loggerhead");});
test("logic -> logic", function() {deepEqual( Stem("logic"), "logic");});
test("logical -> logic", function() {deepEqual( Stem("logical"), "logic");});
test("logically -> logic", function() {deepEqual( Stem("logically"), "logic");});
test("logs -> log", function() {deepEqual( Stem("logs"), "log");});
test("loight -> loight", function() {deepEqual( Stem("loight"), "loight");});
test("loike -> loik", function() {deepEqual( Stem("loike"), "loik");});
test("loikewise -> loikewis", function() {deepEqual( Stem("loikewise"), "loikewis");});
test("loins -> loin", function() {deepEqual( Stem("loins"), "loin");});
test("loiter -> loiter", function() {deepEqual( Stem("loiter"), "loiter");});
test("loitered -> loiter", function() {deepEqual( Stem("loitered"), "loiter");});
test("loiterer -> loiter", function() {deepEqual( Stem("loiterer"), "loiter");});
test("loiterers -> loiter", function() {deepEqual( Stem("loiterers"), "loiter");});
test("loitering -> loiter", function() {deepEqual( Stem("loitering"), "loiter");});
test("loix -> loix", function() {deepEqual( Stem("loix"), "loix");});
test("loll -> loll", function() {deepEqual( Stem("loll"), "loll");});
test("lolling -> loll", function() {deepEqual( Stem("lolling"), "loll");});
test("lombard -> lombard", function() {deepEqual( Stem("lombard"), "lombard");});
test("lombardic -> lombard", function() {deepEqual( Stem("lombardic"), "lombard");});
test("lon -> lon", function() {deepEqual( Stem("lon"), "lon");});
test("lond -> lond", function() {deepEqual( Stem("lond"), "lond");});
test("london -> london", function() {deepEqual( Stem("london"), "london");});
test("lone -> lone", function() {deepEqual( Stem("lone"), "lone");});
test("lonelier -> loneli", function() {deepEqual( Stem("lonelier"), "loneli");});
test("loneliness -> loneli", function() {deepEqual( Stem("loneliness"), "loneli");});
test("lonely -> lone", function() {deepEqual( Stem("lonely"), "lone");});
test("lonesome -> lonesom", function() {deepEqual( Stem("lonesome"), "lonesom");});
test("long -> long", function() {deepEqual( Stem("long"), "long");});
test("longbarns -> longbarn", function() {deepEqual( Stem("longbarns"), "longbarn");});
test("longed -> long", function() {deepEqual( Stem("longed"), "long");});
test("longer -> longer", function() {deepEqual( Stem("longer"), "longer");});
test("longest -> longest", function() {deepEqual( Stem("longest"), "longest");});
test("longevity -> longev", function() {deepEqual( Stem("longevity"), "longev");});
test("longing -> long", function() {deepEqual( Stem("longing"), "long");});
test("longings -> long", function() {deepEqual( Stem("longings"), "long");});
test("longitude -> longitud", function() {deepEqual( Stem("longitude"), "longitud");});
test("longitudinal -> longitudin", function() {deepEqual( Stem("longitudinal"), "longitudin");});
test("longitudinally -> longitudin", function() {deepEqual( Stem("longitudinally"), "longitudin");});
test("longs -> long", function() {deepEqual( Stem("longs"), "long");});
test("longwood -> longwood", function() {deepEqual( Stem("longwood"), "longwood");});
test("loo -> loo", function() {deepEqual( Stem("loo"), "loo");});
test("looder -> looder", function() {deepEqual( Stem("looder"), "looder");});
test("loodgin -> loodgin", function() {deepEqual( Stem("loodgin"), "loodgin");});
test("loodle -> loodl", function() {deepEqual( Stem("loodle"), "loodl");});
test("look -> look", function() {deepEqual( Stem("look"), "look");});
test("looked -> look", function() {deepEqual( Stem("looked"), "look");});
test("lookee -> looke", function() {deepEqual( Stem("lookee"), "looke");});
test("looker -> looker", function() {deepEqual( Stem("looker"), "looker");});
test("lookers -> looker", function() {deepEqual( Stem("lookers"), "looker");});
test("looking -> look", function() {deepEqual( Stem("looking"), "look");});
test("looks -> look", function() {deepEqual( Stem("looks"), "look");});
test("lookye -> looky", function() {deepEqual( Stem("lookye"), "looky");});
test("loom -> loom", function() {deepEqual( Stem("loom"), "loom");});
test("loomed -> loom", function() {deepEqual( Stem("loomed"), "loom");});
test("looming -> loom", function() {deepEqual( Stem("looming"), "loom");});
test("looms -> loom", function() {deepEqual( Stem("looms"), "loom");});
test("loonching -> loonch", function() {deepEqual( Stem("loonching"), "loonch");});
test("loone -> loon", function() {deepEqual( Stem("loone"), "loon");});
test("loop -> loop", function() {deepEqual( Stem("loop"), "loop");});
test("loopholes -> loophol", function() {deepEqual( Stem("loopholes"), "loophol");});
test("loose -> loos", function() {deepEqual( Stem("loose"), "loos");});
test("loosed -> loos", function() {deepEqual( Stem("loosed"), "loos");});
test("loosely -> loos", function() {deepEqual( Stem("loosely"), "loos");});
test("loosen -> loosen", function() {deepEqual( Stem("loosen"), "loosen");});
test("loosened -> loosen", function() {deepEqual( Stem("loosened"), "loosen");});
test("looseness -> loos", function() {deepEqual( Stem("looseness"), "loos");});
test("loosening -> loosen", function() {deepEqual( Stem("loosening"), "loosen");});
test("looser -> looser", function() {deepEqual( Stem("looser"), "looser");});
test("loosing -> loos", function() {deepEqual( Stem("loosing"), "loos");});
test("loov -> loov", function() {deepEqual( Stem("loov"), "loov");});
test("lop -> lop", function() {deepEqual( Stem("lop"), "lop");});
test("lopez -> lopez", function() {deepEqual( Stem("lopez"), "lopez");});
test("lopezes -> lopez", function() {deepEqual( Stem("lopezes"), "lopez");});
test("lopezites -> lopezit", function() {deepEqual( Stem("lopezites"), "lopezit");});
test("lopped -> lop", function() {deepEqual( Stem("lopped"), "lop");});
test("loppings -> lop", function() {deepEqual( Stem("loppings"), "lop");});
test("loquacious -> loquaci", function() {deepEqual( Stem("loquacious"), "loquaci");});
test("lor -> lor", function() {deepEqual( Stem("lor"), "lor");});
test("lord -> lord", function() {deepEqual( Stem("lord"), "lord");});
test("lordlings -> lordl", function() {deepEqual( Stem("lordlings"), "lordl");});
test("lordly -> lord", function() {deepEqual( Stem("lordly"), "lord");});
test("lords -> lord", function() {deepEqual( Stem("lords"), "lord");});
test("lordship -> lordship", function() {deepEqual( Stem("lordship"), "lordship");});
test("lordships -> lordship", function() {deepEqual( Stem("lordships"), "lordship");});
test("lorenzo -> lorenzo", function() {deepEqual( Stem("lorenzo"), "lorenzo");});
test("los -> los", function() {deepEqual( Stem("los"), "los");});
test("lose -> lose", function() {deepEqual( Stem("lose"), "lose");});
test("loser -> loser", function() {deepEqual( Stem("loser"), "loser");});
test("losers -> loser", function() {deepEqual( Stem("losers"), "loser");});
test("loses -> lose", function() {deepEqual( Stem("loses"), "lose");});
test("losing -> lose", function() {deepEqual( Stem("losing"), "lose");});
test("loss -> loss", function() {deepEqual( Stem("loss"), "loss");});
test("losses -> loss", function() {deepEqual( Stem("losses"), "loss");});
test("lost -> lost", function() {deepEqual( Stem("lost"), "lost");});
test("lot -> lot", function() {deepEqual( Stem("lot"), "lot");});
test("lothbury -> lothburi", function() {deepEqual( Stem("lothbury"), "lothburi");});
test("lots -> lot", function() {deepEqual( Stem("lots"), "lot");});
test("lottery -> lotteri", function() {deepEqual( Stem("lottery"), "lotteri");});
test("loud -> loud", function() {deepEqual( Stem("loud"), "loud");});
test("louder -> louder", function() {deepEqual( Stem("louder"), "louder");});
test("loudest -> loudest", function() {deepEqual( Stem("loudest"), "loudest");});
test("loudly -> loud", function() {deepEqual( Stem("loudly"), "loud");});
test("loudness -> loud", function() {deepEqual( Stem("loudness"), "loud");});
test("louis -> loui", function() {deepEqual( Stem("louis"), "loui");});
test("louisa -> louisa", function() {deepEqual( Stem("louisa"), "louisa");});
test("lounge -> loung", function() {deepEqual( Stem("lounge"), "loung");});
test("lounged -> loung", function() {deepEqual( Stem("lounged"), "loung");});
test("lounger -> lounger", function() {deepEqual( Stem("lounger"), "lounger");});
test("loungers -> lounger", function() {deepEqual( Stem("loungers"), "lounger");});
test("lounges -> loung", function() {deepEqual( Stem("lounges"), "loung");});
test("lounging -> loung", function() {deepEqual( Stem("lounging"), "loung");});
test("lous -> lous", function() {deepEqual( Stem("lous"), "lous");});
test("louse -> lous", function() {deepEqual( Stem("louse"), "lous");});
test("louvain -> louvain", function() {deepEqual( Stem("louvain"), "louvain");});
test("lovable -> lovabl", function() {deepEqual( Stem("lovable"), "lovabl");});
test("love -> love", function() {deepEqual( Stem("love"), "love");});
test("loveable -> loveabl", function() {deepEqual( Stem("loveable"), "loveabl");});
test("loved -> love", function() {deepEqual( Stem("loved"), "love");});
test("lovelier -> loveli", function() {deepEqual( Stem("lovelier"), "loveli");});
test("loveliest -> loveliest", function() {deepEqual( Stem("loveliest"), "loveliest");});
test("loveliness -> loveli", function() {deepEqual( Stem("loveliness"), "loveli");});
test("lovely -> love", function() {deepEqual( Stem("lovely"), "love");});
test("lover -> lover", function() {deepEqual( Stem("lover"), "lover");});
test("lovers -> lover", function() {deepEqual( Stem("lovers"), "lover");});
test("loves -> love", function() {deepEqual( Stem("loves"), "love");});
test("loving -> love", function() {deepEqual( Stem("loving"), "love");});
test("lovingly -> love", function() {deepEqual( Stem("lovingly"), "love");});
test("lovingness -> loving", function() {deepEqual( Stem("lovingness"), "loving");});
test("low -> low", function() {deepEqual( Stem("low"), "low");});
test("lower -> lower", function() {deepEqual( Stem("lower"), "lower");});
test("lowered -> lower", function() {deepEqual( Stem("lowered"), "lower");});
test("lowering -> lower", function() {deepEqual( Stem("lowering"), "lower");});
test("lowers -> lower", function() {deepEqual( Stem("lowers"), "lower");});
test("lowest -> lowest", function() {deepEqual( Stem("lowest"), "lowest");});
test("lowland -> lowland", function() {deepEqual( Stem("lowland"), "lowland");});
test("lowliest -> lowliest", function() {deepEqual( Stem("lowliest"), "lowliest");});
test("lowliness -> lowli", function() {deepEqual( Stem("lowliness"), "lowli");});
test("lowly -> lowli", function() {deepEqual( Stem("lowly"), "lowli");});
test("lowness -> low", function() {deepEqual( Stem("lowness"), "low");});
test("loyal -> loyal", function() {deepEqual( Stem("loyal"), "loyal");});
test("loyalty -> loyalti", function() {deepEqual( Stem("loyalty"), "loyalti");});
test("lozenge -> lozeng", function() {deepEqual( Stem("lozenge"), "lozeng");});
test("lozenges -> lozeng", function() {deepEqual( Stem("lozenges"), "lozeng");});
test("lt -> lt", function() {deepEqual( Stem("lt"), "lt");});
test("lubricates -> lubric", function() {deepEqual( Stem("lubricates"), "lubric");});
test("lucanee -> lucane", function() {deepEqual( Stem("lucanee"), "lucane");});
test("lucia -> lucia", function() {deepEqual( Stem("lucia"), "lucia");});
test("luciano -> luciano", function() {deepEqual( Stem("luciano"), "luciano");});
test("lucid -> lucid", function() {deepEqual( Stem("lucid"), "lucid");});
test("lucidly -> lucid", function() {deepEqual( Stem("lucidly"), "lucid");});
test("lucifer -> lucif", function() {deepEqual( Stem("lucifer"), "lucif");});
test("lucifers -> lucif", function() {deepEqual( Stem("lucifers"), "lucif");});
test("luck -> luck", function() {deepEqual( Stem("luck"), "luck");});
test("luckiest -> luckiest", function() {deepEqual( Stem("luckiest"), "luckiest");});
test("luckily -> luckili", function() {deepEqual( Stem("luckily"), "luckili");});
test("luckless -> luckless", function() {deepEqual( Stem("luckless"), "luckless");});
test("lucky -> lucki", function() {deepEqual( Stem("lucky"), "lucki");});
test("lucrative -> lucrat", function() {deepEqual( Stem("lucrative"), "lucrat");});
test("lucre -> lucr", function() {deepEqual( Stem("lucre"), "lucr");});
test("lucy -> luci", function() {deepEqual( Stem("lucy"), "luci");});
test("lud -> lud", function() {deepEqual( Stem("lud"), "lud");});
test("ludgate -> ludgat", function() {deepEqual( Stem("ludgate"), "ludgat");});
test("ludicrous -> ludicr", function() {deepEqual( Stem("ludicrous"), "ludicr");});
test("ludicrously -> ludicr", function() {deepEqual( Stem("ludicrously"), "ludicr");});
test("ludship -> ludship", function() {deepEqual( Stem("ludship"), "ludship");});
test("ludwigovna -> ludwigovna", function() {deepEqual( Stem("ludwigovna"), "ludwigovna");});
test("luffy -> luffi", function() {deepEqual( Stem("luffy"), "luffi");});
test("luggage -> luggag", function() {deepEqual( Stem("luggage"), "luggag");});
test("lugged -> lug", function() {deepEqual( Stem("lugged"), "lug");});
test("lui -> lui", function() {deepEqual( Stem("lui"), "lui");});
test("luis -> lui", function() {deepEqual( Stem("luis"), "lui");});
test("luise -> luis", function() {deepEqual( Stem("luise"), "luis");});
test("lukewarm -> lukewarm", function() {deepEqual( Stem("lukewarm"), "lukewarm");});
test("lukin -> lukin", function() {deepEqual( Stem("lukin"), "lukin");});
test("lull -> lull", function() {deepEqual( Stem("lull"), "lull");});
test("lullaby -> lullabi", function() {deepEqual( Stem("lullaby"), "lullabi");});
test("lulled -> lull", function() {deepEqual( Stem("lulled"), "lull");});
test("lulling -> lull", function() {deepEqual( Stem("lulling"), "lull");});
test("lulls -> lull", function() {deepEqual( Stem("lulls"), "lull");});
test("lumb -> lumb", function() {deepEqual( Stem("lumb"), "lumb");});
test("lumbagers -> lumbag", function() {deepEqual( Stem("lumbagers"), "lumbag");});
test("lumber -> lumber", function() {deepEqual( Stem("lumber"), "lumber");});
test("lumbering -> lumber", function() {deepEqual( Stem("lumbering"), "lumber");});
test("lumbey -> lumbey", function() {deepEqual( Stem("lumbey"), "lumbey");});
test("luminary -> luminari", function() {deepEqual( Stem("luminary"), "luminari");});
test("luminosus -> luminosus", function() {deepEqual( Stem("luminosus"), "luminosus");});
test("luminous -> lumin", function() {deepEqual( Stem("luminous"), "lumin");});
test("lumley -> lumley", function() {deepEqual( Stem("lumley"), "lumley");});
test("lump -> lump", function() {deepEqual( Stem("lump"), "lump");});
test("lumpkin -> lumpkin", function() {deepEqual( Stem("lumpkin"), "lumpkin");});
test("lumps -> lump", function() {deepEqual( Stem("lumps"), "lump");});
test("lumpy -> lumpi", function() {deepEqual( Stem("lumpy"), "lumpi");});
test("lunacy -> lunaci", function() {deepEqual( Stem("lunacy"), "lunaci");});
test("lunatic -> lunat", function() {deepEqual( Stem("lunatic"), "lunat");});
test("lunch -> lunch", function() {deepEqual( Stem("lunch"), "lunch");});
test("luncheon -> luncheon", function() {deepEqual( Stem("luncheon"), "luncheon");});
test("lunches -> lunch", function() {deepEqual( Stem("lunches"), "lunch");});
test("lund -> lund", function() {deepEqual( Stem("lund"), "lund");});
test("lunge -> lung", function() {deepEqual( Stem("lunge"), "lung");});
test("lungs -> lung", function() {deepEqual( Stem("lungs"), "lung");});
test("lunnun -> lunnun", function() {deepEqual( Stem("lunnun"), "lunnun");});
test("lupton -> lupton", function() {deepEqual( Stem("lupton"), "lupton");});
test("lurch -> lurch", function() {deepEqual( Stem("lurch"), "lurch");});
test("lurched -> lurch", function() {deepEqual( Stem("lurched"), "lurch");});
test("lure -> lure", function() {deepEqual( Stem("lure"), "lure");});
test("lured -> lure", function() {deepEqual( Stem("lured"), "lure");});
test("lures -> lure", function() {deepEqual( Stem("lures"), "lure");});
test("lurid -> lurid", function() {deepEqual( Stem("lurid"), "lurid");});
test("luring -> lure", function() {deepEqual( Stem("luring"), "lure");});
test("lurk -> lurk", function() {deepEqual( Stem("lurk"), "lurk");});
test("lurked -> lurk", function() {deepEqual( Stem("lurked"), "lurk");});
test("lurking -> lurk", function() {deepEqual( Stem("lurking"), "lurk");});
test("luscious -> luscious", function() {deepEqual( Stem("luscious"), "luscious");});
test("lustfahrt -> lustfahrt", function() {deepEqual( Stem("lustfahrt"), "lustfahrt");});
test("lustier -> lustier", function() {deepEqual( Stem("lustier"), "lustier");});
test("lustily -> lustili", function() {deepEqual( Stem("lustily"), "lustili");});
test("lustre -> lustr", function() {deepEqual( Stem("lustre"), "lustr");});
test("lustreless -> lustreless", function() {deepEqual( Stem("lustreless"), "lustreless");});
test("lustrous -> lustrous", function() {deepEqual( Stem("lustrous"), "lustrous");});
test("lusts -> lust", function() {deepEqual( Stem("lusts"), "lust");});
test("lusty -> lusti", function() {deepEqual( Stem("lusty"), "lusti");});
test("lute -> lute", function() {deepEqual( Stem("lute"), "lute");});
test("luxan -> luxan", function() {deepEqual( Stem("luxan"), "luxan");});
test("luxuriance -> luxuri", function() {deepEqual( Stem("luxuriance"), "luxuri");});
test("luxuriant -> luxuri", function() {deepEqual( Stem("luxuriant"), "luxuri");});
test("luxuriantly -> luxuri", function() {deepEqual( Stem("luxuriantly"), "luxuri");});
test("luxuriate -> luxuri", function() {deepEqual( Stem("luxuriate"), "luxuri");});
test("luxuriating -> luxuri", function() {deepEqual( Stem("luxuriating"), "luxuri");});
test("luxuries -> luxuri", function() {deepEqual( Stem("luxuries"), "luxuri");});
test("luxurious -> luxuri", function() {deepEqual( Stem("luxurious"), "luxuri");});
test("luxuriously -> luxuri", function() {deepEqual( Stem("luxuriously"), "luxuri");});
test("luxury -> luxuri", function() {deepEqual( Stem("luxury"), "luxuri");});
test("luzhin -> luzhin", function() {deepEqual( Stem("luzhin"), "luzhin");});
test("lv -> lv", function() {deepEqual( Stem("lv"), "lv");});
test("lvi -> lvi", function() {deepEqual( Stem("lvi"), "lvi");});
test("lvii -> lvii", function() {deepEqual( Stem("lvii"), "lvii");});
test("lviii -> lviii", function() {deepEqual( Stem("lviii"), "lviii");});
test("lx -> lx", function() {deepEqual( Stem("lx"), "lx");});
test("lxi -> lxi", function() {deepEqual( Stem("lxi"), "lxi");});
test("lxii -> lxii", function() {deepEqual( Stem("lxii"), "lxii");});
test("lxiii -> lxiii", function() {deepEqual( Stem("lxiii"), "lxiii");});
test("lxiv -> lxiv", function() {deepEqual( Stem("lxiv"), "lxiv");});
test("lxv -> lxv", function() {deepEqual( Stem("lxv"), "lxv");});
test("lxvi -> lxvi", function() {deepEqual( Stem("lxvi"), "lxvi");});
test("lxvii -> lxvii", function() {deepEqual( Stem("lxvii"), "lxvii");});
test("ly -> ly", function() {deepEqual( Stem("ly"), "ly");});
test("lycosa -> lycosa", function() {deepEqual( Stem("lycosa"), "lycosa");});
test("lycurgus -> lycurgus", function() {deepEqual( Stem("lycurgus"), "lycurgus");});
test("lyell -> lyell", function() {deepEqual( Stem("lyell"), "lyell");});
test("lying -> lie", function() {deepEqual( Stem("lying"), "lie");});
test("lymington -> lymington", function() {deepEqual( Stem("lymington"), "lymington");});
test("lymph -> lymph", function() {deepEqual( Stem("lymph"), "lymph");});
test("lynne -> lynn", function() {deepEqual( Stem("lynne"), "lynn");});
test("lynx -> lynx", function() {deepEqual( Stem("lynx"), "lynx");});
test("lyra -> lyra", function() {deepEqual( Stem("lyra"), "lyra");});
test("lyre -> lyre", function() {deepEqual( Stem("lyre"), "lyre");});
test("lyres -> lyre", function() {deepEqual( Stem("lyres"), "lyre");});
test("m -> m", function() {deepEqual( Stem("m"), "m");});
test("ma -> ma", function() {deepEqual( Stem("ma"), "ma");});
test("macadam -> macadam", function() {deepEqual( Stem("macadam"), "macadam");});
test("macae -> maca", function() {deepEqual( Stem("macae"), "maca");});
test("macbeth -> macbeth", function() {deepEqual( Stem("macbeth"), "macbeth");});
test("maccoort -> maccoort", function() {deepEqual( Stem("maccoort"), "maccoort");});
test("maccoorts -> maccoort", function() {deepEqual( Stem("maccoorts"), "maccoort");});
test("macculloch -> macculloch", function() {deepEqual( Stem("macculloch"), "macculloch");});
test("mace -> mace", function() {deepEqual( Stem("mace"), "mace");});
test("maces -> mace", function() {deepEqual( Stem("maces"), "mace");});
test("macfuzlem -> macfuzlem", function() {deepEqual( Stem("macfuzlem"), "macfuzlem");});
test("macgregor -> macgregor", function() {deepEqual( Stem("macgregor"), "macgregor");});
test("machina -> machina", function() {deepEqual( Stem("machina"), "machina");});
test("machine -> machin", function() {deepEqual( Stem("machine"), "machin");});
test("machinery -> machineri", function() {deepEqual( Stem("machinery"), "machineri");});
test("mack -> mack", function() {deepEqual( Stem("mack"), "mack");});
test("mackenzie -> mackenzi", function() {deepEqual( Stem("mackenzie"), "mackenzi");});
test("maclaren -> maclaren", function() {deepEqual( Stem("maclaren"), "maclaren");});
test("macpherson -> macpherson", function() {deepEqual( Stem("macpherson"), "macpherson");});
test("macphersons -> macpherson", function() {deepEqual( Stem("macphersons"), "macpherson");});
test("macquarie -> macquari", function() {deepEqual( Stem("macquarie"), "macquari");});
test("macquarrie -> macquarri", function() {deepEqual( Stem("macquarrie"), "macquarri");});
test("macrauchenia -> macrauchenia", function() {deepEqual( Stem("macrauchenia"), "macrauchenia");});
test("macrocystis -> macrocysti", function() {deepEqual( Stem("macrocystis"), "macrocysti");});
test("mactrae -> mactra", function() {deepEqual( Stem("mactrae"), "mactra");});
test("maculata -> maculata", function() {deepEqual( Stem("maculata"), "maculata");});
test("mad -> mad", function() {deepEqual( Stem("mad"), "mad");});
test("madagascar -> madagascar", function() {deepEqual( Stem("madagascar"), "madagascar");});
test("madam -> madam", function() {deepEqual( Stem("madam"), "madam");});
test("madame -> madam", function() {deepEqual( Stem("madame"), "madam");});
test("madcaps -> madcap", function() {deepEqual( Stem("madcaps"), "madcap");});
test("madchen -> madchen", function() {deepEqual( Stem("madchen"), "madchen");});
test("madden -> madden", function() {deepEqual( Stem("madden"), "madden");});
test("maddened -> madden", function() {deepEqual( Stem("maddened"), "madden");});
test("maddening -> madden", function() {deepEqual( Stem("maddening"), "madden");});
test("madder -> madder", function() {deepEqual( Stem("madder"), "madder");});
test("maddest -> maddest", function() {deepEqual( Stem("maddest"), "maddest");});
test("made -> made", function() {deepEqual( Stem("made"), "made");});
test("madeira -> madeira", function() {deepEqual( Stem("madeira"), "madeira");});
test("madeline -> madelin", function() {deepEqual( Stem("madeline"), "madelin");});
test("mademoiselle -> mademoisell", function() {deepEqual( Stem("mademoiselle"), "mademoisell");});
test("madhouse -> madhous", function() {deepEqual( Stem("madhouse"), "madhous");});
test("madly -> mad", function() {deepEqual( Stem("madly"), "mad");});
test("madman -> madman", function() {deepEqual( Stem("madman"), "madman");});
test("madmen -> madmen", function() {deepEqual( Stem("madmen"), "madmen");});
test("madness -> mad", function() {deepEqual( Stem("madness"), "mad");});
test("madonna -> madonna", function() {deepEqual( Stem("madonna"), "madonna");});
test("madras -> madra", function() {deepEqual( Stem("madras"), "madra");});
test("madre -> madr", function() {deepEqual( Stem("madre"), "madr");});
test("madrid -> madrid", function() {deepEqual( Stem("madrid"), "madrid");});
test("madrina -> madrina", function() {deepEqual( Stem("madrina"), "madrina");});
test("madrinas -> madrina", function() {deepEqual( Stem("madrinas"), "madrina");});
test("madwoman -> madwoman", function() {deepEqual( Stem("madwoman"), "madwoman");});
test("mag -> mag", function() {deepEqual( Stem("mag"), "mag");});
test("magalonyx -> magalonyx", function() {deepEqual( Stem("magalonyx"), "magalonyx");});
test("magazine -> magazin", function() {deepEqual( Stem("magazine"), "magazin");});
test("magazines -> magazin", function() {deepEqual( Stem("magazines"), "magazin");});
test("magdalen -> magdalen", function() {deepEqual( Stem("magdalen"), "magdalen");});
test("magellan -> magellan", function() {deepEqual( Stem("magellan"), "magellan");});
test("magellanica -> magellanica", function() {deepEqual( Stem("magellanica"), "magellanica");});
test("magellanicus -> magellanicus", function() {deepEqual( Stem("magellanicus"), "magellanicus");});
test("maggot -> maggot", function() {deepEqual( Stem("maggot"), "maggot");});
test("maggots -> maggot", function() {deepEqual( Stem("maggots"), "maggot");});
test("magic -> magic", function() {deepEqual( Stem("magic"), "magic");});
test("magical -> magic", function() {deepEqual( Stem("magical"), "magic");});
test("magically -> magic", function() {deepEqual( Stem("magically"), "magic");});
test("magician -> magician", function() {deepEqual( Stem("magician"), "magician");});
test("magistrate -> magistr", function() {deepEqual( Stem("magistrate"), "magistr");});
test("magistrates -> magistr", function() {deepEqual( Stem("magistrates"), "magistr");});
test("magnanimity -> magnanim", function() {deepEqual( Stem("magnanimity"), "magnanim");});
test("magnanimous -> magnanim", function() {deepEqual( Stem("magnanimous"), "magnanim");});
test("magnanimously -> magnanim", function() {deepEqual( Stem("magnanimously"), "magnanim");});
test("magnate -> magnat", function() {deepEqual( Stem("magnate"), "magnat");});
test("magnates -> magnat", function() {deepEqual( Stem("magnates"), "magnat");});
test("magnesium -> magnesium", function() {deepEqual( Stem("magnesium"), "magnesium");});
test("magnetic -> magnet", function() {deepEqual( Stem("magnetic"), "magnet");});
test("magnetized -> magnet", function() {deepEqual( Stem("magnetized"), "magnet");});
test("magnificence -> magnific", function() {deepEqual( Stem("magnificence"), "magnific");});
test("magnificent -> magnific", function() {deepEqual( Stem("magnificent"), "magnific");});
test("magnificently -> magnific", function() {deepEqual( Stem("magnificently"), "magnific");});
test("magnified -> magnifi", function() {deepEqual( Stem("magnified"), "magnifi");});
test("magnifies -> magnifi", function() {deepEqual( Stem("magnifies"), "magnifi");});
test("magnify -> magnifi", function() {deepEqual( Stem("magnify"), "magnifi");});
test("magnifying -> magnifi", function() {deepEqual( Stem("magnifying"), "magnifi");});
test("magnirostris -> magnirostri", function() {deepEqual( Stem("magnirostris"), "magnirostri");});
test("magnitude -> magnitud", function() {deepEqual( Stem("magnitude"), "magnitud");});
test("magnum -> magnum", function() {deepEqual( Stem("magnum"), "magnum");});
test("magog -> magog", function() {deepEqual( Stem("magog"), "magog");});
test("magpie -> magpi", function() {deepEqual( Stem("magpie"), "magpi");});
test("magpies -> magpi", function() {deepEqual( Stem("magpies"), "magpi");});
test("mahdoo -> mahdoo", function() {deepEqual( Stem("mahdoo"), "mahdoo");});
test("mahlos -> mahlo", function() {deepEqual( Stem("mahlos"), "mahlo");});
test("mahogany -> mahogani", function() {deepEqual( Stem("mahogany"), "mahogani");});
test("mahomedan -> mahomedan", function() {deepEqual( Stem("mahomedan"), "mahomedan");});
test("mahomet -> mahomet", function() {deepEqual( Stem("mahomet"), "mahomet");});
test("mahony -> mahoni", function() {deepEqual( Stem("mahony"), "mahoni");});
test("mai -> mai", function() {deepEqual( Stem("mai"), "mai");});
test("maid -> maid", function() {deepEqual( Stem("maid"), "maid");});
test("maiden -> maiden", function() {deepEqual( Stem("maiden"), "maiden");});
test("maidenly -> maiden", function() {deepEqual( Stem("maidenly"), "maiden");});
test("maidens -> maiden", function() {deepEqual( Stem("maidens"), "maiden");});
test("maidish -> maidish", function() {deepEqual( Stem("maidish"), "maidish");});
test("maids -> maid", function() {deepEqual( Stem("maids"), "maid");});
test("maidservants -> maidserv", function() {deepEqual( Stem("maidservants"), "maidserv");});
test("mail -> mail", function() {deepEqual( Stem("mail"), "mail");});
test("maim -> maim", function() {deepEqual( Stem("maim"), "maim");});
test("maimed -> maim", function() {deepEqual( Stem("maimed"), "maim");});
test("main -> main", function() {deepEqual( Stem("main"), "main");});
test("mainland -> mainland", function() {deepEqual( Stem("mainland"), "mainland");});
test("mainly -> main", function() {deepEqual( Stem("mainly"), "main");});
test("mainspring -> mainspr", function() {deepEqual( Stem("mainspring"), "mainspr");});
test("mainstay -> mainstay", function() {deepEqual( Stem("mainstay"), "mainstay");});
test("maintain -> maintain", function() {deepEqual( Stem("maintain"), "maintain");});
test("maintained -> maintain", function() {deepEqual( Stem("maintained"), "maintain");});
test("maintaining -> maintain", function() {deepEqual( Stem("maintaining"), "maintain");});
test("maintenance -> mainten", function() {deepEqual( Stem("maintenance"), "mainten");});
test("maire -> mair", function() {deepEqual( Stem("maire"), "mair");});
test("maitre -> maitr", function() {deepEqual( Stem("maitre"), "maitr");});
test("majestic -> majest", function() {deepEqual( Stem("majestic"), "majest");});
test("majestically -> majest", function() {deepEqual( Stem("majestically"), "majest");});
test("majesty -> majesti", function() {deepEqual( Stem("majesty"), "majesti");});
test("major -> major", function() {deepEqual( Stem("major"), "major");});
test("majorities -> major", function() {deepEqual( Stem("majorities"), "major");});
test("majority -> major", function() {deepEqual( Stem("majority"), "major");});
test("mak -> mak", function() {deepEqual( Stem("mak"), "mak");});
test("make -> make", function() {deepEqual( Stem("make"), "make");});
test("maker -> maker", function() {deepEqual( Stem("maker"), "maker");});
test("makers -> maker", function() {deepEqual( Stem("makers"), "maker");});
test("makes -> make", function() {deepEqual( Stem("makes"), "make");});
test("making -> make", function() {deepEqual( Stem("making"), "make");});
test("maktng -> maktng", function() {deepEqual( Stem("maktng"), "maktng");});
test("mal -> mal", function() {deepEqual( Stem("mal"), "mal");});
test("malacca -> malacca", function() {deepEqual( Stem("malacca"), "malacca");});
test("malady -> maladi", function() {deepEqual( Stem("malady"), "maladi");});
test("malaria -> malaria", function() {deepEqual( Stem("malaria"), "malaria");});
test("malay -> malay", function() {deepEqual( Stem("malay"), "malay");});
test("malaya -> malaya", function() {deepEqual( Stem("malaya"), "malaya");});
test("malays -> malay", function() {deepEqual( Stem("malays"), "malay");});
test("malcolmson -> malcolmson", function() {deepEqual( Stem("malcolmson"), "malcolmson");});
test("malcontents -> malcont", function() {deepEqual( Stem("malcontents"), "malcont");});
test("maldiva -> maldiva", function() {deepEqual( Stem("maldiva"), "maldiva");});
test("maldonado -> maldonado", function() {deepEqual( Stem("maldonado"), "maldonado");});
test("male -> male", function() {deepEqual( Stem("male"), "male");});
test("malediction -> maledict", function() {deepEqual( Stem("malediction"), "maledict");});
test("maledictions -> maledict", function() {deepEqual( Stem("maledictions"), "maledict");});
test("malefactors -> malefactor", function() {deepEqual( Stem("malefactors"), "malefactor");});
test("males -> male", function() {deepEqual( Stem("males"), "male");});
test("malevolent -> malevol", function() {deepEqual( Stem("malevolent"), "malevol");});
test("malgre -> malgr", function() {deepEqual( Stem("malgre"), "malgr");});
test("malice -> malic", function() {deepEqual( Stem("malice"), "malic");});
test("malicious -> malici", function() {deepEqual( Stem("malicious"), "malici");});
test("maliciously -> malici", function() {deepEqual( Stem("maliciously"), "malici");});
test("malignance -> malign", function() {deepEqual( Stem("malignance"), "malign");});
test("malignant -> malign", function() {deepEqual( Stem("malignant"), "malign");});
test("malignantly -> malign", function() {deepEqual( Stem("malignantly"), "malign");});
test("maligned -> malign", function() {deepEqual( Stem("maligned"), "malign");});
test("malignity -> malign", function() {deepEqual( Stem("malignity"), "malign");});
test("mall -> mall", function() {deepEqual( Stem("mall"), "mall");});
test("malleable -> malleabl", function() {deepEqual( Stem("malleable"), "malleabl");});
test("mallowford -> mallowford", function() {deepEqual( Stem("mallowford"), "mallowford");});
test("malouines -> malouin", function() {deepEqual( Stem("malouines"), "malouin");});
test("malt -> malt", function() {deepEqual( Stem("malt"), "malt");});
test("malta -> malta", function() {deepEqual( Stem("malta"), "malta");});
test("malte -> malt", function() {deepEqual( Stem("malte"), "malt");});
test("maltreatment -> maltreat", function() {deepEqual( Stem("maltreatment"), "maltreat");});
test("malty -> malti", function() {deepEqual( Stem("malty"), "malti");});
test("mama -> mama", function() {deepEqual( Stem("mama"), "mama");});
test("mamas -> mama", function() {deepEqual( Stem("mamas"), "mama");});
test("mameluke -> mameluk", function() {deepEqual( Stem("mameluke"), "mameluk");});
test("mamma -> mamma", function() {deepEqual( Stem("mamma"), "mamma");});
test("mammalia -> mammalia", function() {deepEqual( Stem("mammalia"), "mammalia");});
test("mammals -> mammal", function() {deepEqual( Stem("mammals"), "mammal");});
test("mammiferous -> mammifer", function() {deepEqual( Stem("mammiferous"), "mammifer");});
test("mammifers -> mammif", function() {deepEqual( Stem("mammifers"), "mammif");});
test("mammillated -> mammil", function() {deepEqual( Stem("mammillated"), "mammil");});
test("mammon -> mammon", function() {deepEqual( Stem("mammon"), "mammon");});
test("mammy -> mammi", function() {deepEqual( Stem("mammy"), "mammi");});
test("man -> man", function() {deepEqual( Stem("man"), "man");});
test("manage -> manag", function() {deepEqual( Stem("manage"), "manag");});
test("manageable -> manag", function() {deepEqual( Stem("manageable"), "manag");});
test("managed -> manag", function() {deepEqual( Stem("managed"), "manag");});
test("management -> manag", function() {deepEqual( Stem("management"), "manag");});
test("manager -> manag", function() {deepEqual( Stem("manager"), "manag");});
test("manageress -> manageress", function() {deepEqual( Stem("manageress"), "manageress");});
test("managers -> manag", function() {deepEqual( Stem("managers"), "manag");});
test("manages -> manag", function() {deepEqual( Stem("manages"), "manag");});
test("managing -> manag", function() {deepEqual( Stem("managing"), "manag");});
test("manatee -> manate", function() {deepEqual( Stem("manatee"), "manate");});
test("manchester -> manchest", function() {deepEqual( Stem("manchester"), "manchest");});
test("mandate -> mandat", function() {deepEqual( Stem("mandate"), "mandat");});
test("mandetiba -> mandetiba", function() {deepEqual( Stem("mandetiba"), "mandetiba");});
test("mandibl -> mandibl", function() {deepEqual( Stem("mandibl"), "mandibl");});
test("mandible -> mandibl", function() {deepEqual( Stem("mandible"), "mandibl");});
test("mandioca -> mandioca", function() {deepEqual( Stem("mandioca"), "mandioca");});
test("mane -> mane", function() {deepEqual( Stem("mane"), "mane");});
test("manes -> mane", function() {deepEqual( Stem("manes"), "mane");});
test("manful -> man", function() {deepEqual( Stem("manful"), "man");});
test("manfully -> man", function() {deepEqual( Stem("manfully"), "man");});
test("manganese -> manganes", function() {deepEqual( Stem("manganese"), "manganes");});
test("manger -> manger", function() {deepEqual( Stem("manger"), "manger");});
test("mangering -> manger", function() {deepEqual( Stem("mangering"), "manger");});
test("mangle -> mangl", function() {deepEqual( Stem("mangle"), "mangl");});
test("mangles -> mangl", function() {deepEqual( Stem("mangles"), "mangl");});
test("mangling -> mangl", function() {deepEqual( Stem("mangling"), "mangl");});
test("mango -> mango", function() {deepEqual( Stem("mango"), "mango");});
test("mangostin -> mangostin", function() {deepEqual( Stem("mangostin"), "mangostin");});
test("mangot -> mangot", function() {deepEqual( Stem("mangot"), "mangot");});
test("mangroves -> mangrov", function() {deepEqual( Stem("mangroves"), "mangrov");});
test("mangy -> mangi", function() {deepEqual( Stem("mangy"), "mangi");});
test("manhood -> manhood", function() {deepEqual( Stem("manhood"), "manhood");});
test("mania -> mania", function() {deepEqual( Stem("mania"), "mania");});
test("maniac -> maniac", function() {deepEqual( Stem("maniac"), "maniac");});
test("maniacs -> maniac", function() {deepEqual( Stem("maniacs"), "maniac");});
test("manie -> mani", function() {deepEqual( Stem("manie"), "mani");});
test("manifest -> manifest", function() {deepEqual( Stem("manifest"), "manifest");});
test("manifestation -> manifest", function() {deepEqual( Stem("manifestation"), "manifest");});
test("manifestations -> manifest", function() {deepEqual( Stem("manifestations"), "manifest");});
test("manifested -> manifest", function() {deepEqual( Stem("manifested"), "manifest");});
test("manifesting -> manifest", function() {deepEqual( Stem("manifesting"), "manifest");});
test("manifestly -> manifest", function() {deepEqual( Stem("manifestly"), "manifest");});
test("manifests -> manifest", function() {deepEqual( Stem("manifests"), "manifest");});
test("manifold -> manifold", function() {deepEqual( Stem("manifold"), "manifold");});
test("manipulated -> manipul", function() {deepEqual( Stem("manipulated"), "manipul");});
test("manipulation -> manipul", function() {deepEqual( Stem("manipulation"), "manipul");});
test("mankind -> mankind", function() {deepEqual( Stem("mankind"), "mankind");});
test("manliness -> manli", function() {deepEqual( Stem("manliness"), "manli");});
test("manly -> man", function() {deepEqual( Stem("manly"), "man");});
test("manne -> mann", function() {deepEqual( Stem("manne"), "mann");});
test("manned -> man", function() {deepEqual( Stem("manned"), "man");});
test("manner -> manner", function() {deepEqual( Stem("manner"), "manner");});
test("mannered -> manner", function() {deepEqual( Stem("mannered"), "manner");});
test("manners -> manner", function() {deepEqual( Stem("manners"), "manner");});
test("mannish -> mannish", function() {deepEqual( Stem("mannish"), "mannish");});
test("manoeuvre -> manoeuvr", function() {deepEqual( Stem("manoeuvre"), "manoeuvr");});
test("manoeuvred -> manoeuvr", function() {deepEqual( Stem("manoeuvred"), "manoeuvr");});
test("manoeuvres -> manoeuvr", function() {deepEqual( Stem("manoeuvres"), "manoeuvr");});
test("manoeuvring -> manoeuvr", function() {deepEqual( Stem("manoeuvring"), "manoeuvr");});
test("manor -> manor", function() {deepEqual( Stem("manor"), "manor");});
test("mansion -> mansion", function() {deepEqual( Stem("mansion"), "mansion");});
test("mansions -> mansion", function() {deepEqual( Stem("mansions"), "mansion");});
test("manslaughtering -> manslaught", function() {deepEqual( Stem("manslaughtering"), "manslaught");});
test("mansos -> manso", function() {deepEqual( Stem("mansos"), "manso");});
test("mantalini -> mantalini", function() {deepEqual( Stem("mantalini"), "mantalini");});
test("mantel -> mantel", function() {deepEqual( Stem("mantel"), "mantel");});
test("mantelpiece -> mantelpiec", function() {deepEqual( Stem("mantelpiece"), "mantelpiec");});
test("mantelshelf -> mantelshelf", function() {deepEqual( Stem("mantelshelf"), "mantelshelf");});
test("mantie -> manti", function() {deepEqual( Stem("mantie"), "manti");});
test("mantle -> mantl", function() {deepEqual( Stem("mantle"), "mantl");});
test("mantled -> mantl", function() {deepEqual( Stem("mantled"), "mantl");});
test("mantles -> mantl", function() {deepEqual( Stem("mantles"), "mantl");});
test("mantling -> mantl", function() {deepEqual( Stem("mantling"), "mantl");});
test("manual -> manual", function() {deepEqual( Stem("manual"), "manual");});
test("manuals -> manual", function() {deepEqual( Stem("manuals"), "manual");});
test("manuel -> manuel", function() {deepEqual( Stem("manuel"), "manuel");});
test("manufactories -> manufactori", function() {deepEqual( Stem("manufactories"), "manufactori");});
test("manufactory -> manufactori", function() {deepEqual( Stem("manufactory"), "manufactori");});
test("manufacture -> manufactur", function() {deepEqual( Stem("manufacture"), "manufactur");});
test("manufactured -> manufactur", function() {deepEqual( Stem("manufactured"), "manufactur");});
test("manufacturers -> manufactur", function() {deepEqual( Stem("manufacturers"), "manufactur");});
test("manufacturing -> manufactur", function() {deepEqual( Stem("manufacturing"), "manufactur");});
test("manure -> manur", function() {deepEqual( Stem("manure"), "manur");});
test("manured -> manur", function() {deepEqual( Stem("manured"), "manur");});
test("manuring -> manur", function() {deepEqual( Stem("manuring"), "manur");});
test("manuscript -> manuscript", function() {deepEqual( Stem("manuscript"), "manuscript");});
test("manuscripts -> manuscript", function() {deepEqual( Stem("manuscripts"), "manuscript");});
test("many -> mani", function() {deepEqual( Stem("many"), "mani");});
test("map -> map", function() {deepEqual( Stem("map"), "map");});
test("mapped -> map", function() {deepEqual( Stem("mapped"), "map");});
test("maps -> map", function() {deepEqual( Stem("maps"), "map");});
test("mar -> mar", function() {deepEqual( Stem("mar"), "mar");});
test("marbl -> marbl", function() {deepEqual( Stem("marbl"), "marbl");});
test("marble -> marbl", function() {deepEqual( Stem("marble"), "marbl");});
test("marbles -> marbl", function() {deepEqual( Stem("marbles"), "marbl");});
test("march -> march", function() {deepEqual( Stem("march"), "march");});
test("marchantiae -> marchantia", function() {deepEqual( Stem("marchantiae"), "marchantia");});
test("marched -> march", function() {deepEqual( Stem("marched"), "march");});
test("marches -> march", function() {deepEqual( Stem("marches"), "march");});
test("marching -> march", function() {deepEqual( Stem("marching"), "march");});
test("mare -> mare", function() {deepEqual( Stem("mare"), "mare");});
test("mares -> mare", function() {deepEqual( Stem("mares"), "mare");});
test("marfa -> marfa", function() {deepEqual( Stem("marfa"), "marfa");});
test("margate -> margat", function() {deepEqual( Stem("margate"), "margat");});
test("marge -> marg", function() {deepEqual( Stem("marge"), "marg");});
test("margin -> margin", function() {deepEqual( Stem("margin"), "margin");});
test("marginal -> margin", function() {deepEqual( Stem("marginal"), "margin");});
test("margins -> margin", function() {deepEqual( Stem("margins"), "margin");});
test("mari -> mari", function() {deepEqual( Stem("mari"), "mari");});
test("maria -> maria", function() {deepEqual( Stem("maria"), "maria");});
test("mariano -> mariano", function() {deepEqual( Stem("mariano"), "mariano");});
test("marica -> marica", function() {deepEqual( Stem("marica"), "marica");});
test("marie -> mari", function() {deepEqual( Stem("marie"), "mari");});
test("marine -> marin", function() {deepEqual( Stem("marine"), "marin");});
test("mariners -> marin", function() {deepEqual( Stem("mariners"), "marin");});
test("marines -> marin", function() {deepEqual( Stem("marines"), "marin");});
test("marital -> marit", function() {deepEqual( Stem("marital"), "marit");});
test("maritime -> maritim", function() {deepEqual( Stem("maritime"), "maritim");});
test("mark -> mark", function() {deepEqual( Stem("mark"), "mark");});
test("marked -> mark", function() {deepEqual( Stem("marked"), "mark");});
test("marker -> marker", function() {deepEqual( Stem("marker"), "marker");});
test("market -> market", function() {deepEqual( Stem("market"), "market");});
test("marketing -> market", function() {deepEqual( Stem("marketing"), "market");});
test("marketplace -> marketplac", function() {deepEqual( Stem("marketplace"), "marketplac");});
test("markets -> market", function() {deepEqual( Stem("markets"), "market");});
test("marking -> mark", function() {deepEqual( Stem("marking"), "mark");});
test("marks -> mark", function() {deepEqual( Stem("marks"), "mark");});
test("marl -> marl", function() {deepEqual( Stem("marl"), "marl");});
test("marlborough -> marlborough", function() {deepEqual( Stem("marlborough"), "marlborough");});
test("marly -> mar", function() {deepEqual( Stem("marly"), "mar");});
test("marmalade -> marmalad", function() {deepEqual( Stem("marmalade"), "marmalad");});
test("marmeladov -> marmeladov", function() {deepEqual( Stem("marmeladov"), "marmeladov");});
test("marmeladovs -> marmeladov", function() {deepEqual( Stem("marmeladovs"), "marmeladov");});
test("marquess -> marquess", function() {deepEqual( Stem("marquess"), "marquess");});
test("marquis -> marqui", function() {deepEqual( Stem("marquis"), "marqui");});
test("marquises -> marquis", function() {deepEqual( Stem("marquises"), "marquis");});
test("marred -> mar", function() {deepEqual( Stem("marred"), "mar");});
test("marriage -> marriag", function() {deepEqual( Stem("marriage"), "marriag");});
test("marriages -> marriag", function() {deepEqual( Stem("marriages"), "marriag");});
test("married -> marri", function() {deepEqual( Stem("married"), "marri");});
test("marries -> marri", function() {deepEqual( Stem("marries"), "marri");});
test("marring -> mar", function() {deepEqual( Stem("marring"), "mar");});
test("marrow -> marrow", function() {deepEqual( Stem("marrow"), "marrow");});
test("marrows -> marrow", function() {deepEqual( Stem("marrows"), "marrow");});
test("marry -> marri", function() {deepEqual( Stem("marry"), "marri");});
test("marrying -> marri", function() {deepEqual( Stem("marrying"), "marri");});
test("mars -> mar", function() {deepEqual( Stem("mars"), "mar");});
test("marsden -> marsden", function() {deepEqual( Stem("marsden"), "marsden");});
test("marseilles -> marseill", function() {deepEqual( Stem("marseilles"), "marseill");});
test("marsh -> marsh", function() {deepEqual( Stem("marsh"), "marsh");});
test("marshal -> marshal", function() {deepEqual( Stem("marshal"), "marshal");});
test("marshalled -> marshal", function() {deepEqual( Stem("marshalled"), "marshal");});
test("marshes -> marsh", function() {deepEqual( Stem("marshes"), "marsh");});
test("marshy -> marshi", function() {deepEqual( Stem("marshy"), "marshi");});
test("marstone -> marston", function() {deepEqual( Stem("marstone"), "marston");});
test("marstones -> marston", function() {deepEqual( Stem("marstones"), "marston");});
test("marsupial -> marsupi", function() {deepEqual( Stem("marsupial"), "marsupi");});
test("mart -> mart", function() {deepEqual( Stem("mart"), "mart");});
test("martens -> marten", function() {deepEqual( Stem("martens"), "marten");});
test("martha -> martha", function() {deepEqual( Stem("martha"), "martha");});
test("martial -> martial", function() {deepEqual( Stem("martial"), "martial");});
test("martin -> martin", function() {deepEqual( Stem("martin"), "martin");});
test("martindale -> martindal", function() {deepEqual( Stem("martindale"), "martindal");});
test("martindales -> martindal", function() {deepEqual( Stem("martindales"), "martindal");});
test("martins -> martin", function() {deepEqual( Stem("martins"), "martin");});
test("martlets -> martlet", function() {deepEqual( Stem("martlets"), "martlet");});
test("martyr -> martyr", function() {deepEqual( Stem("martyr"), "martyr");});
test("martyrdom -> martyrdom", function() {deepEqual( Stem("martyrdom"), "martyrdom");});
test("marvel -> marvel", function() {deepEqual( Stem("marvel"), "marvel");});
test("marvelled -> marvel", function() {deepEqual( Stem("marvelled"), "marvel");});
test("marvelling -> marvel", function() {deepEqual( Stem("marvelling"), "marvel");});
test("marvellous -> marvel", function() {deepEqual( Stem("marvellous"), "marvel");});
test("marvellously -> marvel", function() {deepEqual( Stem("marvellously"), "marvel");});
test("marvels -> marvel", function() {deepEqual( Stem("marvels"), "marvel");});
test("mary -> mari", function() {deepEqual( Stem("mary"), "mari");});
test("marylebone -> marylebon", function() {deepEqual( Stem("marylebone"), "marylebon");});
test("marys -> mari", function() {deepEqual( Stem("marys"), "mari");});
test("mascariensis -> mascariensi", function() {deepEqual( Stem("mascariensis"), "mascariensi");});
test("masculine -> masculin", function() {deepEqual( Stem("masculine"), "masculin");});
test("mashes -> mash", function() {deepEqual( Stem("mashes"), "mash");});
test("mask -> mask", function() {deepEqual( Stem("mask"), "mask");});
test("masonry -> masonri", function() {deepEqual( Stem("masonry"), "masonri");});
test("masquerading -> masquerad", function() {deepEqual( Stem("masquerading"), "masquerad");});
test("mass -> mass", function() {deepEqual( Stem("mass"), "mass");});
test("massacre -> massacr", function() {deepEqual( Stem("massacre"), "massacr");});
test("massacred -> massacr", function() {deepEqual( Stem("massacred"), "massacr");});
test("massacres -> massacr", function() {deepEqual( Stem("massacres"), "massacr");});
test("masse -> mass", function() {deepEqual( Stem("masse"), "mass");});
test("masses -> mass", function() {deepEqual( Stem("masses"), "mass");});
test("massive -> massiv", function() {deepEqual( Stem("massive"), "massiv");});
test("massively -> massiv", function() {deepEqual( Stem("massively"), "massiv");});
test("mast -> mast", function() {deepEqual( Stem("mast"), "mast");});
test("mastadon -> mastadon", function() {deepEqual( Stem("mastadon"), "mastadon");});
test("masted -> mast", function() {deepEqual( Stem("masted"), "mast");});
test("master -> master", function() {deepEqual( Stem("master"), "master");});
test("mastered -> master", function() {deepEqual( Stem("mastered"), "master");});
test("masterful -> master", function() {deepEqual( Stem("masterful"), "master");});
test("mastering -> master", function() {deepEqual( Stem("mastering"), "master");});
test("masterly -> master", function() {deepEqual( Stem("masterly"), "master");});
test("masterpieces -> masterpiec", function() {deepEqual( Stem("masterpieces"), "masterpiec");});
test("masters -> master", function() {deepEqual( Stem("masters"), "master");});
test("mastery -> masteri", function() {deepEqual( Stem("mastery"), "masteri");});
test("masthead -> masthead", function() {deepEqual( Stem("masthead"), "masthead");});
test("mastiff -> mastiff", function() {deepEqual( Stem("mastiff"), "mastiff");});
test("mastodon -> mastodon", function() {deepEqual( Stem("mastodon"), "mastodon");});
test("mastodons -> mastodon", function() {deepEqual( Stem("mastodons"), "mastodon");});
test("masts -> mast", function() {deepEqual( Stem("masts"), "mast");});
test("mat -> mat", function() {deepEqual( Stem("mat"), "mat");});
test("mata -> mata", function() {deepEqual( Stem("mata"), "mata");});
test("mataco -> mataco", function() {deepEqual( Stem("mataco"), "mataco");});
test("matador -> matador", function() {deepEqual( Stem("matador"), "matador");});
test("matavai -> matavai", function() {deepEqual( Stem("matavai"), "matavai");});
test("match -> match", function() {deepEqual( Stem("match"), "match");});
test("matched -> match", function() {deepEqual( Stem("matched"), "match");});
test("matches -> match", function() {deepEqual( Stem("matches"), "match");});
test("matching -> match", function() {deepEqual( Stem("matching"), "match");});
test("mate -> mate", function() {deepEqual( Stem("mate"), "mate");});
test("material -> materi", function() {deepEqual( Stem("material"), "materi");});
test("materially -> materi", function() {deepEqual( Stem("materially"), "materi");});
test("materials -> materi", function() {deepEqual( Stem("materials"), "materi");});
test("maternal -> matern", function() {deepEqual( Stem("maternal"), "matern");});
test("mates -> mate", function() {deepEqual( Stem("mates"), "mate");});
test("mathematical -> mathemat", function() {deepEqual( Stem("mathematical"), "mathemat");});
test("mathematically -> mathemat", function() {deepEqual( Stem("mathematically"), "mathemat");});
test("mathematics -> mathemat", function() {deepEqual( Stem("mathematics"), "mathemat");});
test("matilda -> matilda", function() {deepEqual( Stem("matilda"), "matilda");});
test("matins -> matin", function() {deepEqual( Stem("matins"), "matin");});
test("matlock -> matlock", function() {deepEqual( Stem("matlock"), "matlock");});
test("matricide -> matricid", function() {deepEqual( Stem("matricide"), "matricid");});
test("matrimonial -> matrimoni", function() {deepEqual( Stem("matrimonial"), "matrimoni");});
test("matrimonially -> matrimoni", function() {deepEqual( Stem("matrimonially"), "matrimoni");});
test("matrimony -> matrimoni", function() {deepEqual( Stem("matrimony"), "matrimoni");});
test("matrix -> matrix", function() {deepEqual( Stem("matrix"), "matrix");});
test("matron -> matron", function() {deepEqual( Stem("matron"), "matron");});
test("matronly -> matron", function() {deepEqual( Stem("matronly"), "matron");});
test("matrons -> matron", function() {deepEqual( Stem("matrons"), "matron");});
test("mats -> mat", function() {deepEqual( Stem("mats"), "mat");});
test("matted -> mat", function() {deepEqual( Stem("matted"), "mat");});
test("matter -> matter", function() {deepEqual( Stem("matter"), "matter");});
test("mattered -> matter", function() {deepEqual( Stem("mattered"), "matter");});
test("matters -> matter", function() {deepEqual( Stem("matters"), "matter");});
test("matther -> matther", function() {deepEqual( Stem("matther"), "matther");});
test("matthew -> matthew", function() {deepEqual( Stem("matthew"), "matthew");});
test("matthews -> matthew", function() {deepEqual( Stem("matthews"), "matthew");});
test("matting -> mat", function() {deepEqual( Stem("matting"), "mat");});
test("mattress -> mattress", function() {deepEqual( Stem("mattress"), "mattress");});
test("mattresses -> mattress", function() {deepEqual( Stem("mattresses"), "mattress");});
test("mature -> matur", function() {deepEqual( Stem("mature"), "matur");});
test("matured -> matur", function() {deepEqual( Stem("matured"), "matur");});
test("maturely -> matur", function() {deepEqual( Stem("maturely"), "matur");});
test("maturer -> matur", function() {deepEqual( Stem("maturer"), "matur");});
test("maturity -> matur", function() {deepEqual( Stem("maturity"), "matur");});
test("matutina -> matutina", function() {deepEqual( Stem("matutina"), "matutina");});
test("matvey -> matvey", function() {deepEqual( Stem("matvey"), "matvey");});
test("maun -> maun", function() {deepEqual( Stem("maun"), "maun");});
test("maunder -> maunder", function() {deepEqual( Stem("maunder"), "maunder");});
test("maurice -> mauric", function() {deepEqual( Stem("maurice"), "mauric");});
test("mauritius -> mauritius", function() {deepEqual( Stem("mauritius"), "mauritius");});
test("maurua -> maurua", function() {deepEqual( Stem("maurua"), "maurua");});
test("mausoleum -> mausoleum", function() {deepEqual( Stem("mausoleum"), "mausoleum");});
test("mausoleums -> mausoleum", function() {deepEqual( Stem("mausoleums"), "mausoleum");});
test("mauvais -> mauvai", function() {deepEqual( Stem("mauvais"), "mauvai");});
test("mawkish -> mawkish", function() {deepEqual( Stem("mawkish"), "mawkish");});
test("maxillae -> maxilla", function() {deepEqual( Stem("maxillae"), "maxilla");});
test("maxim -> maxim", function() {deepEqual( Stem("maxim"), "maxim");});
test("may -> may", function() {deepEqual( Stem("may"), "may");});
test("maybe -> mayb", function() {deepEqual( Stem("maybe"), "mayb");});
test("maydickle -> maydickl", function() {deepEqual( Stem("maydickle"), "maydickl");});
test("mayfair -> mayfair", function() {deepEqual( Stem("mayfair"), "mayfair");});
test("mayhap -> mayhap", function() {deepEqual( Stem("mayhap"), "mayhap");});
test("mayn -> mayn", function() {deepEqual( Stem("mayn"), "mayn");});
test("mayo -> mayo", function() {deepEqual( Stem("mayo"), "mayo");});
test("mayor -> mayor", function() {deepEqual( Stem("mayor"), "mayor");});
test("maypu -> maypu", function() {deepEqual( Stem("maypu"), "maypu");});
test("mayst -> mayst", function() {deepEqual( Stem("mayst"), "mayst");});
test("maze -> maze", function() {deepEqual( Stem("maze"), "maze");});
test("mazeppa -> mazeppa", function() {deepEqual( Stem("mazeppa"), "mazeppa");});
test("mazes -> maze", function() {deepEqual( Stem("mazes"), "maze");});
test("mazurka -> mazurka", function() {deepEqual( Stem("mazurka"), "mazurka");});
test("mazy -> mazi", function() {deepEqual( Stem("mazy"), "mazi");});
test("me -> me", function() {deepEqual( Stem("me"), "me");});
test("meadow -> meadow", function() {deepEqual( Stem("meadow"), "meadow");});
test("meadows -> meadow", function() {deepEqual( Stem("meadows"), "meadow");});
test("meads -> mead", function() {deepEqual( Stem("meads"), "mead");});
test("meagre -> meagr", function() {deepEqual( Stem("meagre"), "meagr");});
test("meal -> meal", function() {deepEqual( Stem("meal"), "meal");});
test("meals -> meal", function() {deepEqual( Stem("meals"), "meal");});
test("mean -> mean", function() {deepEqual( Stem("mean"), "mean");});
test("meandering -> meander", function() {deepEqual( Stem("meandering"), "meander");});
test("meanest -> meanest", function() {deepEqual( Stem("meanest"), "meanest");});
test("meaning -> mean", function() {deepEqual( Stem("meaning"), "mean");});
test("meaningless -> meaningless", function() {deepEqual( Stem("meaningless"), "meaningless");});
test("meanings -> mean", function() {deepEqual( Stem("meanings"), "mean");});
test("meanly -> mean", function() {deepEqual( Stem("meanly"), "mean");});
test("meanness -> mean", function() {deepEqual( Stem("meanness"), "mean");});
test("means -> mean", function() {deepEqual( Stem("means"), "mean");});
test("meant -> meant", function() {deepEqual( Stem("meant"), "meant");});
test("meantime -> meantim", function() {deepEqual( Stem("meantime"), "meantim");});
test("meanwhile -> meanwhil", function() {deepEqual( Stem("meanwhile"), "meanwhil");});
test("measles -> measl", function() {deepEqual( Stem("measles"), "measl");});
test("measther -> measther", function() {deepEqual( Stem("measther"), "measther");});
test("measthers -> measther", function() {deepEqual( Stem("measthers"), "measther");});
test("measure -> measur", function() {deepEqual( Stem("measure"), "measur");});
test("measured -> measur", function() {deepEqual( Stem("measured"), "measur");});
test("measurement -> measur", function() {deepEqual( Stem("measurement"), "measur");});
test("measurements -> measur", function() {deepEqual( Stem("measurements"), "measur");});
test("measurer -> measur", function() {deepEqual( Stem("measurer"), "measur");});
test("measures -> measur", function() {deepEqual( Stem("measures"), "measur");});
test("measuring -> measur", function() {deepEqual( Stem("measuring"), "measur");});
test("meat -> meat", function() {deepEqual( Stem("meat"), "meat");});
test("meats -> meat", function() {deepEqual( Stem("meats"), "meat");});
test("mechanic -> mechan", function() {deepEqual( Stem("mechanic"), "mechan");});
test("mechanical -> mechan", function() {deepEqual( Stem("mechanical"), "mechan");});
test("mechanically -> mechan", function() {deepEqual( Stem("mechanically"), "mechan");});
test("mechanics -> mechan", function() {deepEqual( Stem("mechanics"), "mechan");});
test("mechanism -> mechan", function() {deepEqual( Stem("mechanism"), "mechan");});
test("mecum -> mecum", function() {deepEqual( Stem("mecum"), "mecum");});
test("medal -> medal", function() {deepEqual( Stem("medal"), "medal");});
test("medallions -> medallion", function() {deepEqual( Stem("medallions"), "medallion");});
test("meddle -> meddl", function() {deepEqual( Stem("meddle"), "meddl");});
test("meddled -> meddl", function() {deepEqual( Stem("meddled"), "meddl");});
test("meddlers -> meddler", function() {deepEqual( Stem("meddlers"), "meddler");});
test("meddlesome -> meddlesom", function() {deepEqual( Stem("meddlesome"), "meddlesom");});
test("meddling -> meddl", function() {deepEqual( Stem("meddling"), "meddl");});
test("mediaeval -> mediaev", function() {deepEqual( Stem("mediaeval"), "mediaev");});
test("mediate -> mediat", function() {deepEqual( Stem("mediate"), "mediat");});
test("mediation -> mediat", function() {deepEqual( Stem("mediation"), "mediat");});
test("mediator -> mediat", function() {deepEqual( Stem("mediator"), "mediat");});
test("medical -> medic", function() {deepEqual( Stem("medical"), "medic");});
test("medicinal -> medicin", function() {deepEqual( Stem("medicinal"), "medicin");});
test("medicine -> medicin", function() {deepEqual( Stem("medicine"), "medicin");});
test("medicines -> medicin", function() {deepEqual( Stem("medicines"), "medicin");});
test("mediocrity -> mediocr", function() {deepEqual( Stem("mediocrity"), "mediocr");});
test("meditate -> medit", function() {deepEqual( Stem("meditate"), "medit");});
test("meditated -> medit", function() {deepEqual( Stem("meditated"), "medit");});
test("meditates -> medit", function() {deepEqual( Stem("meditates"), "medit");});
test("meditating -> medit", function() {deepEqual( Stem("meditating"), "medit");});
test("meditation -> medit", function() {deepEqual( Stem("meditation"), "medit");});
test("meditations -> medit", function() {deepEqual( Stem("meditations"), "medit");});
test("meditative -> medit", function() {deepEqual( Stem("meditative"), "medit");});
test("meditatively -> medit", function() {deepEqual( Stem("meditatively"), "medit");});
test("mediterranean -> mediterranean", function() {deepEqual( Stem("mediterranean"), "mediterranean");});
test("medium -> medium", function() {deepEqual( Stem("medium"), "medium");});
test("medley -> medley", function() {deepEqual( Stem("medley"), "medley");});
test("medusae -> medusa", function() {deepEqual( Stem("medusae"), "medusa");});
test("meek -> meek", function() {deepEqual( Stem("meek"), "meek");});
test("meekest -> meekest", function() {deepEqual( Stem("meekest"), "meekest");});
test("meekly -> meek", function() {deepEqual( Stem("meekly"), "meek");});
test("meekness -> meek", function() {deepEqual( Stem("meekness"), "meek");});
test("meet -> meet", function() {deepEqual( Stem("meet"), "meet");});
test("meeting -> meet", function() {deepEqual( Stem("meeting"), "meet");});
test("meetings -> meet", function() {deepEqual( Stem("meetings"), "meet");});
test("meets -> meet", function() {deepEqual( Stem("meets"), "meet");});
test("megalonyx -> megalonyx", function() {deepEqual( Stem("megalonyx"), "megalonyx");});
test("megalosaurus -> megalosaurus", function() {deepEqual( Stem("megalosaurus"), "megalosaurus");});
test("megapodius -> megapodius", function() {deepEqual( Stem("megapodius"), "megapodius");});
test("megatherium -> megatherium", function() {deepEqual( Stem("megatherium"), "megatherium");});
test("megatheroid -> megatheroid", function() {deepEqual( Stem("megatheroid"), "megatheroid");});
test("mehr -> mehr", function() {deepEqual( Stem("mehr"), "mehr");});
test("melancholy -> melancholi", function() {deepEqual( Stem("melancholy"), "melancholi");});
test("melanops -> melanop", function() {deepEqual( Stem("melanops"), "melanop");});
test("melanotis -> melanoti", function() {deepEqual( Stem("melanotis"), "melanoti");});
test("melasoma -> melasoma", function() {deepEqual( Stem("melasoma"), "melasoma");});
test("melchisedech -> melchisedech", function() {deepEqual( Stem("melchisedech"), "melchisedech");});
test("melindres -> melindr", function() {deepEqual( Stem("melindres"), "melindr");});
test("mell -> mell", function() {deepEqual( Stem("mell"), "mell");});
test("mellifluousness -> melliflu", function() {deepEqual( Stem("mellifluousness"), "melliflu");});
test("mellow -> mellow", function() {deepEqual( Stem("mellow"), "mellow");});
test("mellowed -> mellow", function() {deepEqual( Stem("mellowed"), "mellow");});
test("mellows -> mellow", function() {deepEqual( Stem("mellows"), "mellow");});
test("melodious -> melodi", function() {deepEqual( Stem("melodious"), "melodi");});
test("melodiously -> melodi", function() {deepEqual( Stem("melodiously"), "melodi");});
test("melodrama -> melodrama", function() {deepEqual( Stem("melodrama"), "melodrama");});
test("melodramatic -> melodramat", function() {deepEqual( Stem("melodramatic"), "melodramat");});
test("melody -> melodi", function() {deepEqual( Stem("melody"), "melodi");});
test("melolonthidae -> melolonthida", function() {deepEqual( Stem("melolonthidae"), "melolonthida");});
test("melons -> melon", function() {deepEqual( Stem("melons"), "melon");});
test("melt -> melt", function() {deepEqual( Stem("melt"), "melt");});
test("melted -> melt", function() {deepEqual( Stem("melted"), "melt");});
test("melteth -> melteth", function() {deepEqual( Stem("melteth"), "melteth");});
test("melting -> melt", function() {deepEqual( Stem("melting"), "melt");});
test("melts -> melt", function() {deepEqual( Stem("melts"), "melt");});
test("melvilleson -> melvilleson", function() {deepEqual( Stem("melvilleson"), "melvilleson");});
test("mem -> mem", function() {deepEqual( Stem("mem"), "mem");});
test("member -> member", function() {deepEqual( Stem("member"), "member");});
test("members -> member", function() {deepEqual( Stem("members"), "member");});
test("membrane -> membran", function() {deepEqual( Stem("membrane"), "membran");});
test("membranous -> membran", function() {deepEqual( Stem("membranous"), "membran");});
test("mememto -> mememto", function() {deepEqual( Stem("mememto"), "mememto");});
test("memoir -> memoir", function() {deepEqual( Stem("memoir"), "memoir");});
test("memoirs -> memoir", function() {deepEqual( Stem("memoirs"), "memoir");});
test("memorable -> memor", function() {deepEqual( Stem("memorable"), "memor");});
test("memoranda -> memoranda", function() {deepEqual( Stem("memoranda"), "memoranda");});
test("memorandum -> memorandum", function() {deepEqual( Stem("memorandum"), "memorandum");});
test("memorial -> memori", function() {deepEqual( Stem("memorial"), "memori");});
test("memorials -> memori", function() {deepEqual( Stem("memorials"), "memori");});
test("memories -> memori", function() {deepEqual( Stem("memories"), "memori");});
test("memory -> memori", function() {deepEqual( Stem("memory"), "memori");});
test("men -> men", function() {deepEqual( Stem("men"), "men");});
test("menace -> menac", function() {deepEqual( Stem("menace"), "menac");});
test("menacing -> menac", function() {deepEqual( Stem("menacing"), "menac");});
test("menage -> menag", function() {deepEqual( Stem("menage"), "menag");});
test("menchicoff -> menchicoff", function() {deepEqual( Stem("menchicoff"), "menchicoff");});
test("mend -> mend", function() {deepEqual( Stem("mend"), "mend");});
test("mended -> mend", function() {deepEqual( Stem("mended"), "mend");});
test("mending -> mend", function() {deepEqual( Stem("mending"), "mend");});
test("mendoza -> mendoza", function() {deepEqual( Stem("mendoza"), "mendoza");});
test("mendozinos -> mendozino", function() {deepEqual( Stem("mendozinos"), "mendozino");});
test("mends -> mend", function() {deepEqual( Stem("mends"), "mend");});
test("menfion -> menfion", function() {deepEqual( Stem("menfion"), "menfion");});
test("menfioning -> menfion", function() {deepEqual( Stem("menfioning"), "menfion");});
test("mental -> mental", function() {deepEqual( Stem("mental"), "mental");});
test("mentally -> mental", function() {deepEqual( Stem("mentally"), "mental");});
test("mention -> mention", function() {deepEqual( Stem("mention"), "mention");});
test("mentioned -> mention", function() {deepEqual( Stem("mentioned"), "mention");});
test("mentioning -> mention", function() {deepEqual( Stem("mentioning"), "mention");});
test("mentions -> mention", function() {deepEqual( Stem("mentions"), "mention");});
test("mentor -> mentor", function() {deepEqual( Stem("mentor"), "mentor");});
test("mercantile -> mercantil", function() {deepEqual( Stem("mercantile"), "mercantil");});
test("mercedes -> merced", function() {deepEqual( Stem("mercedes"), "merced");});
test("mercenary -> mercenari", function() {deepEqual( Stem("mercenary"), "mercenari");});
test("mercers -> mercer", function() {deepEqual( Stem("mercers"), "mercer");});
test("merchandise -> merchandis", function() {deepEqual( Stem("merchandise"), "merchandis");});
test("merchant -> merchant", function() {deepEqual( Stem("merchant"), "merchant");});
test("merchants -> merchant", function() {deepEqual( Stem("merchants"), "merchant");});
test("mercie -> merci", function() {deepEqual( Stem("mercie"), "merci");});
test("mercies -> merci", function() {deepEqual( Stem("mercies"), "merci");});
test("merciful -> merci", function() {deepEqual( Stem("merciful"), "merci");});
test("mercifully -> merci", function() {deepEqual( Stem("mercifully"), "merci");});
test("merciless -> merciless", function() {deepEqual( Stem("merciless"), "merciless");});
test("mercilessly -> merciless", function() {deepEqual( Stem("mercilessly"), "merciless");});
test("mercuries -> mercuri", function() {deepEqual( Stem("mercuries"), "mercuri");});
test("mercury -> mercuri", function() {deepEqual( Stem("mercury"), "mercuri");});
test("mercy -> merci", function() {deepEqual( Stem("mercy"), "merci");});
test("mere -> mere", function() {deepEqual( Stem("mere"), "mere");});
test("merely -> mere", function() {deepEqual( Stem("merely"), "mere");});
test("merest -> merest", function() {deepEqual( Stem("merest"), "merest");});
test("merged -> merg", function() {deepEqual( Stem("merged"), "merg");});
test("merging -> merg", function() {deepEqual( Stem("merging"), "merg");});
test("merid -> merid", function() {deepEqual( Stem("merid"), "merid");});
test("meridian -> meridian", function() {deepEqual( Stem("meridian"), "meridian");});
test("merit -> merit", function() {deepEqual( Stem("merit"), "merit");});
test("merited -> merit", function() {deepEqual( Stem("merited"), "merit");});
test("meritorious -> meritori", function() {deepEqual( Stem("meritorious"), "meritori");});
test("meritoriously -> meritori", function() {deepEqual( Stem("meritoriously"), "meritori");});
test("merits -> merit", function() {deepEqual( Stem("merits"), "merit");});
test("mermaid -> mermaid", function() {deepEqual( Stem("mermaid"), "mermaid");});
test("mero -> mero", function() {deepEqual( Stem("mero"), "mero");});
test("merrier -> merrier", function() {deepEqual( Stem("merrier"), "merrier");});
test("merriest -> merriest", function() {deepEqual( Stem("merriest"), "merriest");});
test("merrily -> merrili", function() {deepEqual( Stem("merrily"), "merrili");});
test("merriment -> merriment", function() {deepEqual( Stem("merriment"), "merriment");});
test("merry -> merri", function() {deepEqual( Stem("merry"), "merri");});
test("merveille -> merveill", function() {deepEqual( Stem("merveille"), "merveill");});
test("mervyn -> mervyn", function() {deepEqual( Stem("mervyn"), "mervyn");});
test("mesalliance -> mesalli", function() {deepEqual( Stem("mesalliance"), "mesalli");});
test("mesh -> mesh", function() {deepEqual( Stem("mesh"), "mesh");});
test("meshes -> mesh", function() {deepEqual( Stem("meshes"), "mesh");});
test("mesmerism -> mesmer", function() {deepEqual( Stem("mesmerism"), "mesmer");});
test("mess -> mess", function() {deepEqual( Stem("mess"), "mess");});
test("message -> messag", function() {deepEqual( Stem("message"), "messag");});
test("messages -> messag", function() {deepEqual( Stem("messages"), "messag");});
test("messenger -> messeng", function() {deepEqual( Stem("messenger"), "messeng");});
test("messengers -> messeng", function() {deepEqual( Stem("messengers"), "messeng");});
test("messes -> mess", function() {deepEqual( Stem("messes"), "mess");});
test("messiah -> messiah", function() {deepEqual( Stem("messiah"), "messiah");});
test("messrs -> messr", function() {deepEqual( Stem("messrs"), "messr");});
test("met -> met", function() {deepEqual( Stem("met"), "met");});
test("metal -> metal", function() {deepEqual( Stem("metal"), "metal");});
test("metallic -> metal", function() {deepEqual( Stem("metallic"), "metal");});
test("metalliferous -> metallifer", function() {deepEqual( Stem("metalliferous"), "metallifer");});
test("metals -> metal", function() {deepEqual( Stem("metals"), "metal");});
test("metamorphic -> metamorph", function() {deepEqual( Stem("metamorphic"), "metamorph");});
test("metamorphosed -> metamorphos", function() {deepEqual( Stem("metamorphosed"), "metamorphos");});
test("metaphorically -> metaphor", function() {deepEqual( Stem("metaphorically"), "metaphor");});
test("metaphysical -> metaphys", function() {deepEqual( Stem("metaphysical"), "metaphys");});
test("metaphysics -> metaphys", function() {deepEqual( Stem("metaphysics"), "metaphys");});
test("meteor -> meteor", function() {deepEqual( Stem("meteor"), "meteor");});
test("meteorological -> meteorolog", function() {deepEqual( Stem("meteorological"), "meteorolog");});
test("meteors -> meteor", function() {deepEqual( Stem("meteors"), "meteor");});
test("method -> method", function() {deepEqual( Stem("method"), "method");});
test("methodical -> method", function() {deepEqual( Stem("methodical"), "method");});
test("methodically -> method", function() {deepEqual( Stem("methodically"), "method");});
test("methodist -> methodist", function() {deepEqual( Stem("methodist"), "methodist");});
test("methods -> method", function() {deepEqual( Stem("methods"), "method");});
test("methoozellers -> methoozel", function() {deepEqual( Stem("methoozellers"), "methoozel");});
test("methuselah -> methuselah", function() {deepEqual( Stem("methuselah"), "methuselah");});
test("metropolis -> metropoli", function() {deepEqual( Stem("metropolis"), "metropoli");});
test("metropolitan -> metropolitan", function() {deepEqual( Stem("metropolitan"), "metropolitan");});
test("mettle -> mettl", function() {deepEqual( Stem("mettle"), "mettl");});
test("mew -> mew", function() {deepEqual( Stem("mew"), "mew");});
test("mewlinn -> mewlinn", function() {deepEqual( Stem("mewlinn"), "mewlinn");});
test("mewlinnwillinwodd -> mewlinnwillinwodd", function() {deepEqual( Stem("mewlinnwillinwodd"), "mewlinnwillinwodd");});
test("mews -> mew", function() {deepEqual( Stem("mews"), "mew");});
test("mexican -> mexican", function() {deepEqual( Stem("mexican"), "mexican");});
test("mexico -> mexico", function() {deepEqual( Stem("mexico"), "mexico");});
test("mezzotinto -> mezzotinto", function() {deepEqual( Stem("mezzotinto"), "mezzotinto");});
test("miasma -> miasma", function() {deepEqual( Stem("miasma"), "miasma");});
test("mica -> mica", function() {deepEqual( Stem("mica"), "mica");});
test("micaceous -> micac", function() {deepEqual( Stem("micaceous"), "micac");});
test("mice -> mice", function() {deepEqual( Stem("mice"), "mice");});
test("michael -> michael", function() {deepEqual( Stem("michael"), "michael");});
test("michaelmas -> michaelma", function() {deepEqual( Stem("michaelmas"), "michaelma");});
test("michell -> michel", function() {deepEqual( Stem("michell"), "michel");});
test("mickle -> mickl", function() {deepEqual( Stem("mickle"), "mickl");});
test("microbes -> microb", function() {deepEqual( Stem("microbes"), "microb");});
test("microscope -> microscop", function() {deepEqual( Stem("microscope"), "microscop");});
test("microscopic -> microscop", function() {deepEqual( Stem("microscopic"), "microscop");});
test("microscopical -> microscop", function() {deepEqual( Stem("microscopical"), "microscop");});
test("mid -> mid", function() {deepEqual( Stem("mid"), "mid");});
test("midday -> midday", function() {deepEqual( Stem("midday"), "midday");});
test("middl -> middl", function() {deepEqual( Stem("middl"), "middl");});
test("middle -> middl", function() {deepEqual( Stem("middle"), "middl");});
test("middlesex -> middlesex", function() {deepEqual( Stem("middlesex"), "middlesex");});
test("middleton -> middleton", function() {deepEqual( Stem("middleton"), "middleton");});
test("middling -> middl", function() {deepEqual( Stem("middling"), "middl");});
test("midnight -> midnight", function() {deepEqual( Stem("midnight"), "midnight");});
test("midshipmen -> midshipmen", function() {deepEqual( Stem("midshipmen"), "midshipmen");});
test("midst -> midst", function() {deepEqual( Stem("midst"), "midst");});
test("midsummer -> midsumm", function() {deepEqual( Stem("midsummer"), "midsumm");});
test("midway -> midway", function() {deepEqual( Stem("midway"), "midway");});
test("midwives -> midwiv", function() {deepEqual( Stem("midwives"), "midwiv");});
test("mien -> mien", function() {deepEqual( Stem("mien"), "mien");});
test("miers -> mier", function() {deepEqual( Stem("miers"), "mier");});
test("might -> might", function() {deepEqual( Stem("might"), "might");});
test("mightier -> mightier", function() {deepEqual( Stem("mightier"), "mightier");});
test("mightily -> mightili", function() {deepEqual( Stem("mightily"), "mightili");});
test("mightn -> mightn", function() {deepEqual( Stem("mightn"), "mightn");});
test("mighty -> mighti", function() {deepEqual( Stem("mighty"), "mighti");});
test("mignonette -> mignonett", function() {deepEqual( Stem("mignonette"), "mignonett");});
test("migrate -> migrat", function() {deepEqual( Stem("migrate"), "migrat");});
test("migrated -> migrat", function() {deepEqual( Stem("migrated"), "migrat");});
test("migrates -> migrat", function() {deepEqual( Stem("migrates"), "migrat");});
test("migrating -> migrat", function() {deepEqual( Stem("migrating"), "migrat");});
test("migration -> migrat", function() {deepEqual( Stem("migration"), "migrat");});
test("migrations -> migrat", function() {deepEqual( Stem("migrations"), "migrat");});
test("migratorius -> migratorius", function() {deepEqual( Stem("migratorius"), "migratorius");});
test("migratory -> migratori", function() {deepEqual( Stem("migratory"), "migratori");});
test("mihail -> mihail", function() {deepEqual( Stem("mihail"), "mihail");});
test("mihailovitch -> mihailovitch", function() {deepEqual( Stem("mihailovitch"), "mihailovitch");});
test("mihailovsky -> mihailovski", function() {deepEqual( Stem("mihailovsky"), "mihailovski");});
test("mikolka -> mikolka", function() {deepEqual( Stem("mikolka"), "mikolka");});
test("milch -> milch", function() {deepEqual( Stem("milch"), "milch");});
test("mild -> mild", function() {deepEqual( Stem("mild"), "mild");});
test("milder -> milder", function() {deepEqual( Stem("milder"), "milder");});
test("mildest -> mildest", function() {deepEqual( Stem("mildest"), "mildest");});
test("mildewed -> mildew", function() {deepEqual( Stem("mildewed"), "mildew");});
test("mildly -> mild", function() {deepEqual( Stem("mildly"), "mild");});
test("mildmay -> mildmay", function() {deepEqual( Stem("mildmay"), "mildmay");});
test("mildness -> mild", function() {deepEqual( Stem("mildness"), "mild");});
test("mile -> mile", function() {deepEqual( Stem("mile"), "mile");});
test("miles -> mile", function() {deepEqual( Stem("miles"), "mile");});
test("milestone -> mileston", function() {deepEqual( Stem("milestone"), "mileston");});
test("milestones -> mileston", function() {deepEqual( Stem("milestones"), "mileston");});
test("military -> militari", function() {deepEqual( Stem("military"), "militari");});
test("militia -> militia", function() {deepEqual( Stem("militia"), "militia");});
test("milk -> milk", function() {deepEqual( Stem("milk"), "milk");});
test("milked -> milk", function() {deepEqual( Stem("milked"), "milk");});
test("milking -> milk", function() {deepEqual( Stem("milking"), "milk");});
test("milkmaid -> milkmaid", function() {deepEqual( Stem("milkmaid"), "milkmaid");});
test("milkman -> milkman", function() {deepEqual( Stem("milkman"), "milkman");});
test("milkpot -> milkpot", function() {deepEqual( Stem("milkpot"), "milkpot");});
test("milksop -> milksop", function() {deepEqual( Stem("milksop"), "milksop");});
test("milky -> milki", function() {deepEqual( Stem("milky"), "milki");});
test("mill -> mill", function() {deepEqual( Stem("mill"), "mill");});
test("millennium -> millennium", function() {deepEqual( Stem("millennium"), "millennium");});
test("millenniums -> millennium", function() {deepEqual( Stem("millenniums"), "millennium");});
test("millepois -> millepoi", function() {deepEqual( Stem("millepois"), "millepoi");});
test("millepora -> millepora", function() {deepEqual( Stem("millepora"), "millepora");});
test("miller -> miller", function() {deepEqual( Stem("miller"), "miller");});
test("milleypoise -> milleypois", function() {deepEqual( Stem("milleypoise"), "milleypois");});
test("milliner -> millin", function() {deepEqual( Stem("milliner"), "millin");});
test("milliners -> millin", function() {deepEqual( Stem("milliners"), "millin");});
test("millinery -> millineri", function() {deepEqual( Stem("millinery"), "millineri");});
test("milling -> mill", function() {deepEqual( Stem("milling"), "mill");});
test("million -> million", function() {deepEqual( Stem("million"), "million");});
test("millionaire -> millionair", function() {deepEqual( Stem("millionaire"), "millionair");});
test("millions -> million", function() {deepEqual( Stem("millions"), "million");});
test("millionth -> millionth", function() {deepEqual( Stem("millionth"), "millionth");});
test("mills -> mill", function() {deepEqual( Stem("mills"), "mill");});
test("millstone -> millston", function() {deepEqual( Stem("millstone"), "millston");});
test("milton -> milton", function() {deepEqual( Stem("milton"), "milton");});
test("mimicking -> mimick", function() {deepEqual( Stem("mimicking"), "mimick");});
test("mimicry -> mimicri", function() {deepEqual( Stem("mimicry"), "mimicri");});
test("mimics -> mimic", function() {deepEqual( Stem("mimics"), "mimic");});
test("mimosa -> mimosa", function() {deepEqual( Stem("mimosa"), "mimosa");});
test("mimosae -> mimosa", function() {deepEqual( Stem("mimosae"), "mimosa");});
test("mimosas -> mimosa", function() {deepEqual( Stem("mimosas"), "mimosa");});
test("mimus -> mimus", function() {deepEqual( Stem("mimus"), "mimus");});
test("minaret -> minaret", function() {deepEqual( Stem("minaret"), "minaret");});
test("minas -> mina", function() {deepEqual( Stem("minas"), "mina");});
test("mince -> minc", function() {deepEqual( Stem("mince"), "minc");});
test("minced -> minc", function() {deepEqual( Stem("minced"), "minc");});
test("mincefenille -> mincefenill", function() {deepEqual( Stem("mincefenille"), "mincefenill");});
test("mincing -> minc", function() {deepEqual( Stem("mincing"), "minc");});
test("mincingly -> minc", function() {deepEqual( Stem("mincingly"), "minc");});
test("mind -> mind", function() {deepEqual( Stem("mind"), "mind");});
test("minded -> mind", function() {deepEqual( Stem("minded"), "mind");});
test("mindedly -> mind", function() {deepEqual( Stem("mindedly"), "mind");});
test("mindedness -> minded", function() {deepEqual( Stem("mindedness"), "minded");});
test("mindful -> mind", function() {deepEqual( Stem("mindful"), "mind");});
test("minding -> mind", function() {deepEqual( Stem("minding"), "mind");});
test("minds -> mind", function() {deepEqual( Stem("minds"), "mind");});
test("mine -> mine", function() {deepEqual( Stem("mine"), "mine");});
test("miner -> miner", function() {deepEqual( Stem("miner"), "miner");});
test("mineral -> miner", function() {deepEqual( Stem("mineral"), "miner");});
test("mineralogical -> mineralog", function() {deepEqual( Stem("mineralogical"), "mineralog");});
test("miners -> miner", function() {deepEqual( Stem("miners"), "miner");});
test("minerva -> minerva", function() {deepEqual( Stem("minerva"), "minerva");});
test("mines -> mine", function() {deepEqual( Stem("mines"), "mine");});
test("mingle -> mingl", function() {deepEqual( Stem("mingle"), "mingl");});
test("mingled -> mingl", function() {deepEqual( Stem("mingled"), "mingl");});
test("mingles -> mingl", function() {deepEqual( Stem("mingles"), "mingl");});
test("mingling -> mingl", function() {deepEqual( Stem("mingling"), "mingl");});
test("miniature -> miniatur", function() {deepEqual( Stem("miniature"), "miniatur");});
test("miniatures -> miniatur", function() {deepEqual( Stem("miniatures"), "miniatur");});
test("minimum -> minimum", function() {deepEqual( Stem("minimum"), "minimum");});
test("mining -> mine", function() {deepEqual( Stem("mining"), "mine");});
test("minions -> minion", function() {deepEqual( Stem("minions"), "minion");});
test("minister -> minist", function() {deepEqual( Stem("minister"), "minist");});
test("ministered -> minist", function() {deepEqual( Stem("ministered"), "minist");});
test("ministerial -> ministeri", function() {deepEqual( Stem("ministerial"), "ministeri");});
test("ministerialist -> ministerialist", function() {deepEqual( Stem("ministerialist"), "ministerialist");});
test("ministers -> minist", function() {deepEqual( Stem("ministers"), "minist");});
test("ministership -> ministership", function() {deepEqual( Stem("ministership"), "ministership");});
test("ministration -> ministr", function() {deepEqual( Stem("ministration"), "ministr");});
test("ministrations -> ministr", function() {deepEqual( Stem("ministrations"), "ministr");});
test("ministress -> ministress", function() {deepEqual( Stem("ministress"), "ministress");});
test("ministries -> ministri", function() {deepEqual( Stem("ministries"), "ministri");});
test("ministry -> ministri", function() {deepEqual( Stem("ministry"), "ministri");});
test("minnit -> minnit", function() {deepEqual( Stem("minnit"), "minnit");});
test("minor -> minor", function() {deepEqual( Stem("minor"), "minor");});
test("minorities -> minor", function() {deepEqual( Stem("minorities"), "minor");});
test("minority -> minor", function() {deepEqual( Stem("minority"), "minor");});
test("minster -> minster", function() {deepEqual( Stem("minster"), "minster");});
test("minstrel -> minstrel", function() {deepEqual( Stem("minstrel"), "minstrel");});
test("mint -> mint", function() {deepEqual( Stem("mint"), "mint");});
test("minute -> minut", function() {deepEqual( Stem("minute"), "minut");});
test("minutely -> minut", function() {deepEqual( Stem("minutely"), "minut");});
test("minuteness -> minut", function() {deepEqual( Stem("minuteness"), "minut");});
test("minutes -> minut", function() {deepEqual( Stem("minutes"), "minut");});
test("minutest -> minutest", function() {deepEqual( Stem("minutest"), "minutest");});
test("minutus -> minutus", function() {deepEqual( Stem("minutus"), "minutus");});
test("minx -> minx", function() {deepEqual( Stem("minx"), "minx");});
test("miracle -> miracl", function() {deepEqual( Stem("miracle"), "miracl");});
test("miraculous -> miracul", function() {deepEqual( Stem("miraculous"), "miracul");});
test("mirage -> mirag", function() {deepEqual( Stem("mirage"), "mirag");});
test("miranda -> miranda", function() {deepEqual( Stem("miranda"), "miranda");});
test("mire -> mire", function() {deepEqual( Stem("mire"), "mire");});
test("mirror -> mirror", function() {deepEqual( Stem("mirror"), "mirror");});
test("mirrored -> mirror", function() {deepEqual( Stem("mirrored"), "mirror");});
test("mirrors -> mirror", function() {deepEqual( Stem("mirrors"), "mirror");});
test("mirth -> mirth", function() {deepEqual( Stem("mirth"), "mirth");});
test("mirthful -> mirth", function() {deepEqual( Stem("mirthful"), "mirth");});
test("mirthfulness -> mirth", function() {deepEqual( Stem("mirthfulness"), "mirth");});
test("miry -> miri", function() {deepEqual( Stem("miry"), "miri");});
test("misanthrope -> misanthrop", function() {deepEqual( Stem("misanthrope"), "misanthrop");});
test("misanthropical -> misanthrop", function() {deepEqual( Stem("misanthropical"), "misanthrop");});
test("misapprehend -> misapprehend", function() {deepEqual( Stem("misapprehend"), "misapprehend");});
test("misapprehended -> misapprehend", function() {deepEqual( Stem("misapprehended"), "misapprehend");});
test("misbehave -> misbehav", function() {deepEqual( Stem("misbehave"), "misbehav");});
test("misbehaved -> misbehav", function() {deepEqual( Stem("misbehaved"), "misbehav");});
test("misbehaving -> misbehav", function() {deepEqual( Stem("misbehaving"), "misbehav");});
test("misbestowed -> misbestow", function() {deepEqual( Stem("misbestowed"), "misbestow");});
test("miscalculated -> miscalcul", function() {deepEqual( Stem("miscalculated"), "miscalcul");});
test("miscalculation -> miscalcul", function() {deepEqual( Stem("miscalculation"), "miscalcul");});
test("miscalled -> miscal", function() {deepEqual( Stem("miscalled"), "miscal");});
test("miscarried -> miscarri", function() {deepEqual( Stem("miscarried"), "miscarri");});
test("miscellaneous -> miscellan", function() {deepEqual( Stem("miscellaneous"), "miscellan");});
test("mischance -> mischanc", function() {deepEqual( Stem("mischance"), "mischanc");});
test("mischances -> mischanc", function() {deepEqual( Stem("mischances"), "mischanc");});
test("mischeevious -> mischeevi", function() {deepEqual( Stem("mischeevious"), "mischeevi");});
test("mischief -> mischief", function() {deepEqual( Stem("mischief"), "mischief");});
test("mischievous -> mischiev", function() {deepEqual( Stem("mischievous"), "mischiev");});
test("misconception -> misconcept", function() {deepEqual( Stem("misconception"), "misconcept");});
test("misconduct -> misconduct", function() {deepEqual( Stem("misconduct"), "misconduct");});
test("misconstruction -> misconstruct", function() {deepEqual( Stem("misconstruction"), "misconstruct");});
test("misconstructions -> misconstruct", function() {deepEqual( Stem("misconstructions"), "misconstruct");});
test("misconstrued -> misconstru", function() {deepEqual( Stem("misconstrued"), "misconstru");});
test("misconstruing -> misconstru", function() {deepEqual( Stem("misconstruing"), "misconstru");});
test("miscreant -> miscreant", function() {deepEqual( Stem("miscreant"), "miscreant");});
test("misdeed -> misde", function() {deepEqual( Stem("misdeed"), "misde");});
test("misdeeds -> misde", function() {deepEqual( Stem("misdeeds"), "misde");});
test("misdemeanor -> misdemeanor", function() {deepEqual( Stem("misdemeanor"), "misdemeanor");});
test("misdemeanour -> misdemeanour", function() {deepEqual( Stem("misdemeanour"), "misdemeanour");});
test("misdemeanours -> misdemeanour", function() {deepEqual( Stem("misdemeanours"), "misdemeanour");});
test("misdirected -> misdirect", function() {deepEqual( Stem("misdirected"), "misdirect");});
test("misdirecting -> misdirect", function() {deepEqual( Stem("misdirecting"), "misdirect");});
test("misdirections -> misdirect", function() {deepEqual( Stem("misdirections"), "misdirect");});
test("miser -> miser", function() {deepEqual( Stem("miser"), "miser");});
test("miserable -> miser", function() {deepEqual( Stem("miserable"), "miser");});
test("miserably -> miser", function() {deepEqual( Stem("miserably"), "miser");});
test("misericordia -> misericordia", function() {deepEqual( Stem("misericordia"), "misericordia");});
test("miseries -> miseri", function() {deepEqual( Stem("miseries"), "miseri");});
test("miserly -> miser", function() {deepEqual( Stem("miserly"), "miser");});
test("misers -> miser", function() {deepEqual( Stem("misers"), "miser");});
test("misery -> miseri", function() {deepEqual( Stem("misery"), "miseri");});
test("misfortune -> misfortun", function() {deepEqual( Stem("misfortune"), "misfortun");});
test("misfortunes -> misfortun", function() {deepEqual( Stem("misfortunes"), "misfortun");});
test("misgave -> misgav", function() {deepEqual( Stem("misgave"), "misgav");});
test("misgiving -> misgiv", function() {deepEqual( Stem("misgiving"), "misgiv");});
test("misgivings -> misgiv", function() {deepEqual( Stem("misgivings"), "misgiv");});
test("mishap -> mishap", function() {deepEqual( Stem("mishap"), "mishap");});
test("misinformed -> misinform", function() {deepEqual( Stem("misinformed"), "misinform");});
test("misinterpreted -> misinterpret", function() {deepEqual( Stem("misinterpreted"), "misinterpret");});
test("misjudged -> misjudg", function() {deepEqual( Stem("misjudged"), "misjudg");});
test("misjudges -> misjudg", function() {deepEqual( Stem("misjudges"), "misjudg");});
test("mislaid -> mislaid", function() {deepEqual( Stem("mislaid"), "mislaid");});
test("mislead -> mislead", function() {deepEqual( Stem("mislead"), "mislead");});
test("misled -> misl", function() {deepEqual( Stem("misled"), "misl");});
test("mismanaged -> mismanag", function() {deepEqual( Stem("mismanaged"), "mismanag");});
test("mismanagement -> mismanag", function() {deepEqual( Stem("mismanagement"), "mismanag");});
test("misplaced -> misplac", function() {deepEqual( Stem("misplaced"), "misplac");});
test("misrepresent -> misrepres", function() {deepEqual( Stem("misrepresent"), "misrepres");});
test("misrepresentations -> misrepresent", function() {deepEqual( Stem("misrepresentations"), "misrepresent");});
test("misrepresenting -> misrepres", function() {deepEqual( Stem("misrepresenting"), "misrepres");});
test("miss -> miss", function() {deepEqual( Stem("miss"), "miss");});
test("missed -> miss", function() {deepEqual( Stem("missed"), "miss");});
test("misses -> miss", function() {deepEqual( Stem("misses"), "miss");});
test("missile -> missil", function() {deepEqual( Stem("missile"), "missil");});
test("missing -> miss", function() {deepEqual( Stem("missing"), "miss");});
test("mission -> mission", function() {deepEqual( Stem("mission"), "mission");});
test("missionaries -> missionari", function() {deepEqual( Stem("missionaries"), "missionari");});
test("missionary -> missionari", function() {deepEqual( Stem("missionary"), "missionari");});
test("missiones -> mission", function() {deepEqual( Stem("missiones"), "mission");});
test("missions -> mission", function() {deepEqual( Stem("missions"), "mission");});
test("missis -> missi", function() {deepEqual( Stem("missis"), "missi");});
test("missive -> missiv", function() {deepEqual( Stem("missive"), "missiv");});
test("misspent -> misspent", function() {deepEqual( Stem("misspent"), "misspent");});
test("missus -> missus", function() {deepEqual( Stem("missus"), "missus");});
test("missy -> missi", function() {deepEqual( Stem("missy"), "missi");});
test("mist -> mist", function() {deepEqual( Stem("mist"), "mist");});
test("mistake -> mistak", function() {deepEqual( Stem("mistake"), "mistak");});
test("mistaken -> mistaken", function() {deepEqual( Stem("mistaken"), "mistaken");});
test("mistakenly -> mistaken", function() {deepEqual( Stem("mistakenly"), "mistaken");});
test("mistakes -> mistak", function() {deepEqual( Stem("mistakes"), "mistak");});
test("mistaking -> mistak", function() {deepEqual( Stem("mistaking"), "mistak");});
test("miste -> mist", function() {deepEqual( Stem("miste"), "mist");});
test("mister -> mister", function() {deepEqual( Stem("mister"), "mister");});
test("misther -> misther", function() {deepEqual( Stem("misther"), "misther");});
test("mistily -> mistili", function() {deepEqual( Stem("mistily"), "mistili");});
test("mistiness -> misti", function() {deepEqual( Stem("mistiness"), "misti");});
test("mistoo -> mistoo", function() {deepEqual( Stem("mistoo"), "mistoo");});
test("mistook -> mistook", function() {deepEqual( Stem("mistook"), "mistook");});
test("mistress -> mistress", function() {deepEqual( Stem("mistress"), "mistress");});
test("mistresses -> mistress", function() {deepEqual( Stem("mistresses"), "mistress");});
test("mistrust -> mistrust", function() {deepEqual( Stem("mistrust"), "mistrust");});
test("mistrusted -> mistrust", function() {deepEqual( Stem("mistrusted"), "mistrust");});
test("mistrustful -> mistrust", function() {deepEqual( Stem("mistrustful"), "mistrust");});
test("mistrustfully -> mistrust", function() {deepEqual( Stem("mistrustfully"), "mistrust");});
test("mistrusting -> mistrust", function() {deepEqual( Stem("mistrusting"), "mistrust");});
test("mistrusts -> mistrust", function() {deepEqual( Stem("mistrusts"), "mistrust");});
test("mists -> mist", function() {deepEqual( Stem("mists"), "mist");});
test("misty -> misti", function() {deepEqual( Stem("misty"), "misti");});
test("misunderstand -> misunderstand", function() {deepEqual( Stem("misunderstand"), "misunderstand");});
test("misunderstanding -> misunderstand", function() {deepEqual( Stem("misunderstanding"), "misunderstand");});
test("misunderstood -> misunderstood", function() {deepEqual( Stem("misunderstood"), "misunderstood");});
test("misused -> misus", function() {deepEqual( Stem("misused"), "misus");});
test("misuses -> misus", function() {deepEqual( Stem("misuses"), "misus");});
test("mitchell -> mitchel", function() {deepEqual( Stem("mitchell"), "mitchel");});
test("mite -> mite", function() {deepEqual( Stem("mite"), "mite");});
test("mites -> mite", function() {deepEqual( Stem("mites"), "mite");});
test("mitigation -> mitig", function() {deepEqual( Stem("mitigation"), "mitig");});
test("mitka -> mitka", function() {deepEqual( Stem("mitka"), "mitka");});
test("mitrofanievsky -> mitrofanievski", function() {deepEqual( Stem("mitrofanievsky"), "mitrofanievski");});
test("mitten -> mitten", function() {deepEqual( Stem("mitten"), "mitten");});
test("mix -> mix", function() {deepEqual( Stem("mix"), "mix");});
test("mixed -> mix", function() {deepEqual( Stem("mixed"), "mix");});
test("mixer -> mixer", function() {deepEqual( Stem("mixer"), "mixer");});
test("mixes -> mix", function() {deepEqual( Stem("mixes"), "mix");});
test("mixing -> mix", function() {deepEqual( Stem("mixing"), "mix");});
test("mixtur -> mixtur", function() {deepEqual( Stem("mixtur"), "mixtur");});
test("mixture -> mixtur", function() {deepEqual( Stem("mixture"), "mixtur");});
test("mizzle -> mizzl", function() {deepEqual( Stem("mizzle"), "mizzl");});
test("mlud -> mlud", function() {deepEqual( Stem("mlud"), "mlud");});
test("mm -> mm", function() {deepEqual( Stem("mm"), "mm");});
test("mmd -> mmd", function() {deepEqual( Stem("mmd"), "mmd");});
test("mo -> mo", function() {deepEqual( Stem("mo"), "mo");});
test("moan -> moan", function() {deepEqual( Stem("moan"), "moan");});
test("moaned -> moan", function() {deepEqual( Stem("moaned"), "moan");});
test("moaning -> moan", function() {deepEqual( Stem("moaning"), "moan");});
test("moanings -> moan", function() {deepEqual( Stem("moanings"), "moan");});
test("moans -> moan", function() {deepEqual( Stem("moans"), "moan");});
test("moat -> moat", function() {deepEqual( Stem("moat"), "moat");});
test("mob -> mob", function() {deepEqual( Stem("mob"), "mob");});
test("mobbed -> mob", function() {deepEqual( Stem("mobbed"), "mob");});
test("mobbs -> mobb", function() {deepEqual( Stem("mobbs"), "mobb");});
test("mobile -> mobil", function() {deepEqual( Stem("mobile"), "mobil");});
test("mock -> mock", function() {deepEqual( Stem("mock"), "mock");});
test("mocked -> mock", function() {deepEqual( Stem("mocked"), "mock");});
test("mockeries -> mockeri", function() {deepEqual( Stem("mockeries"), "mockeri");});
test("mockery -> mockeri", function() {deepEqual( Stem("mockery"), "mockeri");});
test("mocking -> mock", function() {deepEqual( Stem("mocking"), "mock");});
test("mockingly -> mock", function() {deepEqual( Stem("mockingly"), "mock");});
test("mode -> mode", function() {deepEqual( Stem("mode"), "mode");});
test("model -> model", function() {deepEqual( Stem("model"), "model");});
test("modelled -> model", function() {deepEqual( Stem("modelled"), "model");});
test("modelling -> model", function() {deepEqual( Stem("modelling"), "model");});
test("models -> model", function() {deepEqual( Stem("models"), "model");});
test("moderate -> moder", function() {deepEqual( Stem("moderate"), "moder");});
test("moderated -> moder", function() {deepEqual( Stem("moderated"), "moder");});
test("moderately -> moder", function() {deepEqual( Stem("moderately"), "moder");});
test("moderation -> moder", function() {deepEqual( Stem("moderation"), "moder");});
test("modern -> modern", function() {deepEqual( Stem("modern"), "modern");});
test("modes -> mode", function() {deepEqual( Stem("modes"), "mode");});
test("modest -> modest", function() {deepEqual( Stem("modest"), "modest");});
test("modestly -> modest", function() {deepEqual( Stem("modestly"), "modest");});
test("modesty -> modesti", function() {deepEqual( Stem("modesty"), "modesti");});
test("modifications -> modif", function() {deepEqual( Stem("modifications"), "modif");});
test("modified -> modifi", function() {deepEqual( Stem("modified"), "modifi");});
test("modify -> modifi", function() {deepEqual( Stem("modify"), "modifi");});
test("mogley -> mogley", function() {deepEqual( Stem("mogley"), "mogley");});
test("mogul -> mogul", function() {deepEqual( Stem("mogul"), "mogul");});
test("mohair -> mohair", function() {deepEqual( Stem("mohair"), "mohair");});
test("moi -> moi", function() {deepEqual( Stem("moi"), "moi");});
test("moiler -> moiler", function() {deepEqual( Stem("moiler"), "moiler");});
test("moind -> moind", function() {deepEqual( Stem("moind"), "moind");});
test("moins -> moin", function() {deepEqual( Stem("moins"), "moin");});
test("moist -> moist", function() {deepEqual( Stem("moist"), "moist");});
test("moisten -> moisten", function() {deepEqual( Stem("moisten"), "moisten");});
test("moistened -> moisten", function() {deepEqual( Stem("moistened"), "moisten");});
test("moistening -> moisten", function() {deepEqual( Stem("moistening"), "moisten");});
test("moisture -> moistur", function() {deepEqual( Stem("moisture"), "moistur");});
test("molar -> molar", function() {deepEqual( Stem("molar"), "molar");});
test("molasses -> molass", function() {deepEqual( Stem("molasses"), "molass");});
test("moldavia -> moldavia", function() {deepEqual( Stem("moldavia"), "moldavia");});
test("mole -> mole", function() {deepEqual( Stem("mole"), "mole");});
test("molest -> molest", function() {deepEqual( Stem("molest"), "molest");});
test("molestation -> molest", function() {deepEqual( Stem("molestation"), "molest");});
test("molested -> molest", function() {deepEqual( Stem("molested"), "molest");});
test("molesting -> molest", function() {deepEqual( Stem("molesting"), "molest");});
test("moliere -> molier", function() {deepEqual( Stem("moliere"), "molier");});
test("molina -> molina", function() {deepEqual( Stem("molina"), "molina");});
test("mollified -> mollifi", function() {deepEqual( Stem("mollified"), "mollifi");});
test("mollify -> mollifi", function() {deepEqual( Stem("mollify"), "mollifi");});
test("mollifying -> mollifi", function() {deepEqual( Stem("mollifying"), "mollifi");});
test("mollusca -> mollusca", function() {deepEqual( Stem("mollusca"), "mollusca");});
test("molluscous -> mollusc", function() {deepEqual( Stem("molluscous"), "mollusc");});
test("molluscs -> mollusc", function() {deepEqual( Stem("molluscs"), "mollusc");});
test("molothrus -> molothrus", function() {deepEqual( Stem("molothrus"), "molothrus");});
test("molten -> molten", function() {deepEqual( Stem("molten"), "molten");});
test("momen -> momen", function() {deepEqual( Stem("momen"), "momen");});
test("moment -> moment", function() {deepEqual( Stem("moment"), "moment");});
test("momentarily -> momentarili", function() {deepEqual( Stem("momentarily"), "momentarili");});
test("momentary -> momentari", function() {deepEqual( Stem("momentary"), "momentari");});
test("momentous -> moment", function() {deepEqual( Stem("momentous"), "moment");});
test("moments -> moment", function() {deepEqual( Stem("moments"), "moment");});
test("momentum -> momentum", function() {deepEqual( Stem("momentum"), "momentum");});
test("mon -> mon", function() {deepEqual( Stem("mon"), "mon");});
test("monarch -> monarch", function() {deepEqual( Stem("monarch"), "monarch");});
test("monarchs -> monarch", function() {deepEqual( Stem("monarchs"), "monarch");});
test("monastery -> monasteri", function() {deepEqual( Stem("monastery"), "monasteri");});
test("monats -> monat", function() {deepEqual( Stem("monats"), "monat");});
test("monceaux -> monceaux", function() {deepEqual( Stem("monceaux"), "monceaux");});
test("mond -> mond", function() {deepEqual( Stem("mond"), "mond");});
test("monday -> monday", function() {deepEqual( Stem("monday"), "monday");});
test("mondays -> monday", function() {deepEqual( Stem("mondays"), "monday");});
test("monde -> mond", function() {deepEqual( Stem("monde"), "mond");});
test("monetary -> monetari", function() {deepEqual( Stem("monetary"), "monetari");});
test("money -> money", function() {deepEqual( Stem("money"), "money");});
test("moneyed -> money", function() {deepEqual( Stem("moneyed"), "money");});
test("moneys -> money", function() {deepEqual( Stem("moneys"), "money");});
test("monge -> mong", function() {deepEqual( Stem("monge"), "mong");});
test("mongering -> monger", function() {deepEqual( Stem("mongering"), "monger");});
test("mongrel -> mongrel", function() {deepEqual( Stem("mongrel"), "mongrel");});
test("mongrels -> mongrel", function() {deepEqual( Stem("mongrels"), "mongrel");});
test("mongrober -> mongrob", function() {deepEqual( Stem("mongrober"), "mongrob");});
test("monied -> moni", function() {deepEqual( Stem("monied"), "moni");});
test("monitions -> monit", function() {deepEqual( Stem("monitions"), "monit");});
test("monk -> monk", function() {deepEqual( Stem("monk"), "monk");});
test("monkey -> monkey", function() {deepEqual( Stem("monkey"), "monkey");});
test("monkeyish -> monkeyish", function() {deepEqual( Stem("monkeyish"), "monkeyish");});
test("monkeys -> monkey", function() {deepEqual( Stem("monkeys"), "monkey");});
test("monks -> monk", function() {deepEqual( Stem("monks"), "monk");});
test("monneyment -> monney", function() {deepEqual( Stem("monneyment"), "monney");});
test("monoceros -> monocero", function() {deepEqual( Stem("monoceros"), "monocero");});
test("monocotyledonous -> monocotyledon", function() {deepEqual( Stem("monocotyledonous"), "monocotyledon");});
test("monodonta -> monodonta", function() {deepEqual( Stem("monodonta"), "monodonta");});
test("monogram -> monogram", function() {deepEqual( Stem("monogram"), "monogram");});
test("monologues -> monologu", function() {deepEqual( Stem("monologues"), "monologu");});
test("monomania -> monomania", function() {deepEqual( Stem("monomania"), "monomania");});
test("monomaniac -> monomaniac", function() {deepEqual( Stem("monomaniac"), "monomaniac");});
test("monomaniacs -> monomaniac", function() {deepEqual( Stem("monomaniacs"), "monomaniac");});
test("monopolising -> monopolis", function() {deepEqual( Stem("monopolising"), "monopolis");});
test("monopolist -> monopolist", function() {deepEqual( Stem("monopolist"), "monopolist");});
test("monopolize -> monopol", function() {deepEqual( Stem("monopolize"), "monopol");});
test("monopoly -> monopoli", function() {deepEqual( Stem("monopoly"), "monopoli");});
test("monosyllabic -> monosyllab", function() {deepEqual( Stem("monosyllabic"), "monosyllab");});
test("monosyllable -> monosyl", function() {deepEqual( Stem("monosyllable"), "monosyl");});
test("monosyllables -> monosyl", function() {deepEqual( Stem("monosyllables"), "monosyl");});
test("monotonous -> monoton", function() {deepEqual( Stem("monotonous"), "monoton");});
test("monotonously -> monoton", function() {deepEqual( Stem("monotonously"), "monoton");});
test("monotony -> monotoni", function() {deepEqual( Stem("monotony"), "monotoni");});
test("monsieur -> monsieur", function() {deepEqual( Stem("monsieur"), "monsieur");});
test("monsoon -> monsoon", function() {deepEqual( Stem("monsoon"), "monsoon");});
test("monster -> monster", function() {deepEqual( Stem("monster"), "monster");});
test("monsters -> monster", function() {deepEqual( Stem("monsters"), "monster");});
test("monsther -> monsther", function() {deepEqual( Stem("monsther"), "monsther");});
test("monstrous -> monstrous", function() {deepEqual( Stem("monstrous"), "monstrous");});
test("monstrously -> monstrous", function() {deepEqual( Stem("monstrously"), "monstrous");});
test("mont -> mont", function() {deepEqual( Stem("mont"), "mont");});
test("montagne -> montagn", function() {deepEqual( Stem("montagne"), "montagn");});
test("monte -> mont", function() {deepEqual( Stem("monte"), "mont");});
test("monter -> monter", function() {deepEqual( Stem("monter"), "monter");});
test("montes -> mont", function() {deepEqual( Stem("montes"), "mont");});
test("month -> month", function() {deepEqual( Stem("month"), "month");});
test("monthly -> month", function() {deepEqual( Stem("monthly"), "month");});
test("months -> month", function() {deepEqual( Stem("months"), "month");});
test("monument -> monument", function() {deepEqual( Stem("monument"), "monument");});
test("monumental -> monument", function() {deepEqual( Stem("monumental"), "monument");});
test("monuments -> monument", function() {deepEqual( Stem("monuments"), "monument");});
test("mood -> mood", function() {deepEqual( Stem("mood"), "mood");});
test("moodily -> moodili", function() {deepEqual( Stem("moodily"), "moodili");});
test("moodiness -> moodi", function() {deepEqual( Stem("moodiness"), "moodi");});
test("moodle -> moodl", function() {deepEqual( Stem("moodle"), "moodl");});
test("moods -> mood", function() {deepEqual( Stem("moods"), "mood");});
test("moody -> moodi", function() {deepEqual( Stem("moody"), "moodi");});
test("moon -> moon", function() {deepEqual( Stem("moon"), "moon");});
test("mooney -> mooney", function() {deepEqual( Stem("mooney"), "mooney");});
test("mooning -> moon", function() {deepEqual( Stem("mooning"), "moon");});
test("moonlight -> moonlight", function() {deepEqual( Stem("moonlight"), "moonlight");});
test("moonlighted -> moonlight", function() {deepEqual( Stem("moonlighted"), "moonlight");});
test("moons -> moon", function() {deepEqual( Stem("moons"), "moon");});
test("moonshine -> moonshin", function() {deepEqual( Stem("moonshine"), "moonshin");});
test("moonths -> moonth", function() {deepEqual( Stem("moonths"), "moonth");});
test("moor -> moor", function() {deepEqual( Stem("moor"), "moor");});
test("moored -> moor", function() {deepEqual( Stem("moored"), "moor");});
test("moorings -> moor", function() {deepEqual( Stem("moorings"), "moor");});
test("moorish -> moorish", function() {deepEqual( Stem("moorish"), "moorish");});
test("moorland -> moorland", function() {deepEqual( Stem("moorland"), "moorland");});
test("moors -> moor", function() {deepEqual( Stem("moors"), "moor");});
test("moot -> moot", function() {deepEqual( Stem("moot"), "moot");});
test("mooted -> moot", function() {deepEqual( Stem("mooted"), "moot");});
test("mooth -> mooth", function() {deepEqual( Stem("mooth"), "mooth");});
test("moothers -> moother", function() {deepEqual( Stem("moothers"), "moother");});
test("mope -> mope", function() {deepEqual( Stem("mope"), "mope");});
test("moped -> mope", function() {deepEqual( Stem("moped"), "mope");});
test("moping -> mope", function() {deepEqual( Stem("moping"), "mope");});
test("mor -> mor", function() {deepEqual( Stem("mor"), "mor");});
test("moraine -> morain", function() {deepEqual( Stem("moraine"), "morain");});
test("moral -> moral", function() {deepEqual( Stem("moral"), "moral");});
test("moralise -> moralis", function() {deepEqual( Stem("moralise"), "moralis");});
test("moralised -> moralis", function() {deepEqual( Stem("moralised"), "moralis");});
test("moralising -> moralis", function() {deepEqual( Stem("moralising"), "moralis");});
test("moralisings -> moralis", function() {deepEqual( Stem("moralisings"), "moralis");});
test("morality -> moral", function() {deepEqual( Stem("morality"), "moral");});
test("moralizes -> moral", function() {deepEqual( Stem("moralizes"), "moral");});
test("moralizing -> moral", function() {deepEqual( Stem("moralizing"), "moral");});
test("morally -> moral", function() {deepEqual( Stem("morally"), "moral");});
test("morals -> moral", function() {deepEqual( Stem("morals"), "moral");});
test("morass -> morass", function() {deepEqual( Stem("morass"), "morass");});
test("morbid -> morbid", function() {deepEqual( Stem("morbid"), "morbid");});
test("morbidly -> morbid", function() {deepEqual( Stem("morbidly"), "morbid");});
test("morbury -> morburi", function() {deepEqual( Stem("morbury"), "morburi");});
test("more -> more", function() {deepEqual( Stem("more"), "more");});
test("moreover -> moreov", function() {deepEqual( Stem("moreover"), "moreov");});
test("moresby -> moresbi", function() {deepEqual( Stem("moresby"), "moresbi");});
test("moreton -> moreton", function() {deepEqual( Stem("moreton"), "moreton");});
test("morgan -> morgan", function() {deepEqual( Stem("morgan"), "morgan");});
test("morgenfruh -> morgenfruh", function() {deepEqual( Stem("morgenfruh"), "morgenfruh");});
test("morleena -> morleena", function() {deepEqual( Stem("morleena"), "morleena");});
test("morn -> morn", function() {deepEqual( Stem("morn"), "morn");});
test("morning -> morn", function() {deepEqual( Stem("morning"), "morn");});
test("mornings -> morn", function() {deepEqual( Stem("mornings"), "morn");});
test("mornmg -> mornmg", function() {deepEqual( Stem("mornmg"), "mornmg");});
test("morocco -> morocco", function() {deepEqual( Stem("morocco"), "morocco");});
test("morose -> moros", function() {deepEqual( Stem("morose"), "moros");});
test("morosely -> moros", function() {deepEqual( Stem("morosely"), "moros");});
test("moroseness -> moros", function() {deepEqual( Stem("moroseness"), "moros");});
test("morpheus -> morpheus", function() {deepEqual( Stem("morpheus"), "morpheus");});
test("morrow -> morrow", function() {deepEqual( Stem("morrow"), "morrow");});
test("morsel -> morsel", function() {deepEqual( Stem("morsel"), "morsel");});
test("morsels -> morsel", function() {deepEqual( Stem("morsels"), "morsel");});
test("mortal -> mortal", function() {deepEqual( Stem("mortal"), "mortal");});
test("mortality -> mortal", function() {deepEqual( Stem("mortality"), "mortal");});
test("mortally -> mortal", function() {deepEqual( Stem("mortally"), "mortal");});
test("mortals -> mortal", function() {deepEqual( Stem("mortals"), "mortal");});
test("mortar -> mortar", function() {deepEqual( Stem("mortar"), "mortar");});
test("mortgage -> mortgag", function() {deepEqual( Stem("mortgage"), "mortgag");});
test("mortgages -> mortgag", function() {deepEqual( Stem("mortgages"), "mortgag");});
test("mortgaging -> mortgag", function() {deepEqual( Stem("mortgaging"), "mortgag");});
test("mortification -> mortif", function() {deepEqual( Stem("mortification"), "mortif");});
test("mortified -> mortifi", function() {deepEqual( Stem("mortified"), "mortifi");});
test("mortify -> mortifi", function() {deepEqual( Stem("mortify"), "mortifi");});
test("mortifying -> mortifi", function() {deepEqual( Stem("mortifying"), "mortifi");});
test("mortimer -> mortim", function() {deepEqual( Stem("mortimer"), "mortim");});
test("morton -> morton", function() {deepEqual( Stem("morton"), "morton");});
test("mos -> mos", function() {deepEqual( Stem("mos"), "mos");});
test("moscow -> moscow", function() {deepEqual( Stem("moscow"), "moscow");});
test("mosquitoes -> mosquito", function() {deepEqual( Stem("mosquitoes"), "mosquito");});
test("moss -> moss", function() {deepEqual( Stem("moss"), "moss");});
test("mosses -> moss", function() {deepEqual( Stem("mosses"), "moss");});
test("mossy -> mossi", function() {deepEqual( Stem("mossy"), "mossi");});
test("most -> most", function() {deepEqual( Stem("most"), "most");});
test("mostly -> most", function() {deepEqual( Stem("mostly"), "most");});
test("moth -> moth", function() {deepEqual( Stem("moth"), "moth");});
test("mother -> mother", function() {deepEqual( Stem("mother"), "mother");});
test("motherless -> motherless", function() {deepEqual( Stem("motherless"), "motherless");});
test("motherly -> mother", function() {deepEqual( Stem("motherly"), "mother");});
test("mothers -> mother", function() {deepEqual( Stem("mothers"), "mother");});
test("moths -> moth", function() {deepEqual( Stem("moths"), "moth");});
test("motion -> motion", function() {deepEqual( Stem("motion"), "motion");});
test("motioned -> motion", function() {deepEqual( Stem("motioned"), "motion");});
test("motioning -> motion", function() {deepEqual( Stem("motioning"), "motion");});
test("motionles -> motionl", function() {deepEqual( Stem("motionles"), "motionl");});
test("motionless -> motionless", function() {deepEqual( Stem("motionless"), "motionless");});
test("motions -> motion", function() {deepEqual( Stem("motions"), "motion");});
test("motive -> motiv", function() {deepEqual( Stem("motive"), "motiv");});
test("motives -> motiv", function() {deepEqual( Stem("motives"), "motiv");});
test("motley -> motley", function() {deepEqual( Stem("motley"), "motley");});
test("mottled -> mottl", function() {deepEqual( Stem("mottled"), "mottl");});
test("mottles -> mottl", function() {deepEqual( Stem("mottles"), "mottl");});
test("motto -> motto", function() {deepEqual( Stem("motto"), "motto");});
test("mouchoir -> mouchoir", function() {deepEqual( Stem("mouchoir"), "mouchoir");});
test("mould -> mould", function() {deepEqual( Stem("mould"), "mould");});
test("moulded -> mould", function() {deepEqual( Stem("moulded"), "mould");});
test("moulder -> moulder", function() {deepEqual( Stem("moulder"), "moulder");});
test("mouldering -> moulder", function() {deepEqual( Stem("mouldering"), "moulder");});
test("moulding -> mould", function() {deepEqual( Stem("moulding"), "mould");});
test("moulds -> mould", function() {deepEqual( Stem("moulds"), "mould");});
test("mouldy -> mouldi", function() {deepEqual( Stem("mouldy"), "mouldi");});
test("moun -> moun", function() {deepEqual( Stem("moun"), "moun");});
test("mound -> mound", function() {deepEqual( Stem("mound"), "mound");});
test("mounds -> mound", function() {deepEqual( Stem("mounds"), "mound");});
test("mount -> mount", function() {deepEqual( Stem("mount"), "mount");});
test("mountain -> mountain", function() {deepEqual( Stem("mountain"), "mountain");});
test("mountainous -> mountain", function() {deepEqual( Stem("mountainous"), "mountain");});
test("mountains -> mountain", function() {deepEqual( Stem("mountains"), "mountain");});
test("mountebanks -> mountebank", function() {deepEqual( Stem("mountebanks"), "mountebank");});
test("mounted -> mount", function() {deepEqual( Stem("mounted"), "mount");});
test("mounting -> mount", function() {deepEqual( Stem("mounting"), "mount");});
test("mounts -> mount", function() {deepEqual( Stem("mounts"), "mount");});
test("mourn -> mourn", function() {deepEqual( Stem("mourn"), "mourn");});
test("mourned -> mourn", function() {deepEqual( Stem("mourned"), "mourn");});
test("mourner -> mourner", function() {deepEqual( Stem("mourner"), "mourner");});
test("mourners -> mourner", function() {deepEqual( Stem("mourners"), "mourner");});
test("mournful -> mourn", function() {deepEqual( Stem("mournful"), "mourn");});
test("mournfully -> mourn", function() {deepEqual( Stem("mournfully"), "mourn");});
test("mournfulness -> mourn", function() {deepEqual( Stem("mournfulness"), "mourn");});
test("mourning -> mourn", function() {deepEqual( Stem("mourning"), "mourn");});
test("mourns -> mourn", function() {deepEqual( Stem("mourns"), "mourn");});
test("mouse -> mous", function() {deepEqual( Stem("mouse"), "mous");});
test("moustache -> moustach", function() {deepEqual( Stem("moustache"), "moustach");});
test("moustached -> moustach", function() {deepEqual( Stem("moustached"), "moustach");});
test("moustaches -> moustach", function() {deepEqual( Stem("moustaches"), "moustach");});
test("moustachios -> moustachio", function() {deepEqual( Stem("moustachios"), "moustachio");});
test("mouth -> mouth", function() {deepEqual( Stem("mouth"), "mouth");});
test("mouthed -> mouth", function() {deepEqual( Stem("mouthed"), "mouth");});
test("mouthful -> mouth", function() {deepEqual( Stem("mouthful"), "mouth");});
test("mouthfuls -> mouth", function() {deepEqual( Stem("mouthfuls"), "mouth");});
test("mouthing -> mouth", function() {deepEqual( Stem("mouthing"), "mouth");});
test("mouthpiece -> mouthpiec", function() {deepEqual( Stem("mouthpiece"), "mouthpiec");});
test("mouths -> mouth", function() {deepEqual( Stem("mouths"), "mouth");});
test("mov -> mov", function() {deepEqual( Stem("mov"), "mov");});
test("movables -> movabl", function() {deepEqual( Stem("movables"), "movabl");});
test("move -> move", function() {deepEqual( Stem("move"), "move");});
test("moveable -> moveabl", function() {deepEqual( Stem("moveable"), "moveabl");});
test("moved -> move", function() {deepEqual( Stem("moved"), "move");});
test("movemen -> movemen", function() {deepEqual( Stem("movemen"), "movemen");});
test("movement -> movement", function() {deepEqual( Stem("movement"), "movement");});
test("movements -> movement", function() {deepEqual( Stem("movements"), "movement");});
test("mover -> mover", function() {deepEqual( Stem("mover"), "mover");});
test("moves -> move", function() {deepEqual( Stem("moves"), "move");});
test("moving -> move", function() {deepEqual( Stem("moving"), "move");});
test("mowed -> mow", function() {deepEqual( Stem("mowed"), "mow");});
test("mown -> mown", function() {deepEqual( Stem("mown"), "mown");});
test("mozart -> mozart", function() {deepEqual( Stem("mozart"), "mozart");});
test("mp -> mp", function() {deepEqual( Stem("mp"), "mp");});
test("mps -> mps", function() {deepEqual( Stem("mps"), "mps");});
test("mr -> mr", function() {deepEqual( Stem("mr"), "mr");});
test("mrs -> mrs", function() {deepEqual( Stem("mrs"), "mrs");});
test("ms -> ms", function() {deepEqual( Stem("ms"), "ms");});
test("mt -> mt", function() {deepEqual( Stem("mt"), "mt");});
test("muc -> muc", function() {deepEqual( Stem("muc"), "muc");});
test("much -> much", function() {deepEqual( Stem("much"), "much");});
test("muchisimas -> muchisima", function() {deepEqual( Stem("muchisimas"), "muchisima");});
test("mucilaginous -> mucilagin", function() {deepEqual( Stem("mucilaginous"), "mucilagin");});
test("mucker -> mucker", function() {deepEqual( Stem("mucker"), "mucker");});
test("mud -> mud", function() {deepEqual( Stem("mud"), "mud");});
test("muddiest -> muddiest", function() {deepEqual( Stem("muddiest"), "muddiest");});
test("muddle -> muddl", function() {deepEqual( Stem("muddle"), "muddl");});
test("muddled -> muddl", function() {deepEqual( Stem("muddled"), "muddl");});
test("muddles -> muddl", function() {deepEqual( Stem("muddles"), "muddl");});
test("muddocks -> muddock", function() {deepEqual( Stem("muddocks"), "muddock");});
test("muddy -> muddi", function() {deepEqual( Stem("muddy"), "muddi");});
test("muddying -> muddi", function() {deepEqual( Stem("muddying"), "muddi");});
test("mudie -> mudi", function() {deepEqual( Stem("mudie"), "mudi");});
test("mudlike -> mudlik", function() {deepEqual( Stem("mudlike"), "mudlik");});
test("muffin -> muffin", function() {deepEqual( Stem("muffin"), "muffin");});
test("muffins -> muffin", function() {deepEqual( Stem("muffins"), "muffin");});
test("muffle -> muffl", function() {deepEqual( Stem("muffle"), "muffl");});
test("muffled -> muffl", function() {deepEqual( Stem("muffled"), "muffl");});
test("muffles -> muffl", function() {deepEqual( Stem("muffles"), "muffl");});
test("muffling -> muffl", function() {deepEqual( Stem("muffling"), "muffl");});
test("muffy -> muffi", function() {deepEqual( Stem("muffy"), "muffi");});
test("mug -> mug", function() {deepEqual( Stem("mug"), "mug");});
test("mugeres -> muger", function() {deepEqual( Stem("mugeres"), "muger");});
test("mugs -> mug", function() {deepEqual( Stem("mugs"), "mug");});
test("mulatto -> mulatto", function() {deepEqual( Stem("mulatto"), "mulatto");});
test("mulberry -> mulberri", function() {deepEqual( Stem("mulberry"), "mulberri");});
test("mulcted -> mulct", function() {deepEqual( Stem("mulcted"), "mulct");});
test("mule -> mule", function() {deepEqual( Stem("mule"), "mule");});
test("mules -> mule", function() {deepEqual( Stem("mules"), "mule");});
test("muleteer -> mulet", function() {deepEqual( Stem("muleteer"), "mulet");});
test("muleteers -> mulet", function() {deepEqual( Stem("muleteers"), "mulet");});
test("mulita -> mulita", function() {deepEqual( Stem("mulita"), "mulita");});
test("mullins -> mullin", function() {deepEqual( Stem("mullins"), "mullin");});
test("multimaculatus -> multimaculatus", function() {deepEqual( Stem("multimaculatus"), "multimaculatus");});
test("multiplication -> multipl", function() {deepEqual( Stem("multiplication"), "multipl");});
test("multiplicity -> multipl", function() {deepEqual( Stem("multiplicity"), "multipl");});
test("multiplied -> multipli", function() {deepEqual( Stem("multiplied"), "multipli");});
test("multiplier -> multipli", function() {deepEqual( Stem("multiplier"), "multipli");});
test("multiply -> multipli", function() {deepEqual( Stem("multiply"), "multipli");});
test("multiplying -> multipli", function() {deepEqual( Stem("multiplying"), "multipli");});
test("multitude -> multitud", function() {deepEqual( Stem("multitude"), "multitud");});
test("multitudes -> multitud", function() {deepEqual( Stem("multitudes"), "multitud");});
test("multitudinous -> multitudin", function() {deepEqual( Stem("multitudinous"), "multitudin");});
test("mum -> mum", function() {deepEqual( Stem("mum"), "mum");});
test("mumbled -> mumbl", function() {deepEqual( Stem("mumbled"), "mumbl");});
test("mumbling -> mumbl", function() {deepEqual( Stem("mumbling"), "mumbl");});
test("mummery -> mummeri", function() {deepEqual( Stem("mummery"), "mummeri");});
test("mummy -> mummi", function() {deepEqual( Stem("mummy"), "mummi");});
test("mun -> mun", function() {deepEqual( Stem("mun"), "mun");});
test("munchausen -> munchausen", function() {deepEqual( Stem("munchausen"), "munchausen");});
test("munches -> munch", function() {deepEqual( Stem("munches"), "munch");});
test("munching -> munch", function() {deepEqual( Stem("munching"), "munch");});
test("mundane -> mundan", function() {deepEqual( Stem("mundane"), "mundan");});
test("mungo -> mungo", function() {deepEqual( Stem("mungo"), "mungo");});
test("munich -> munich", function() {deepEqual( Stem("munich"), "munich");});
test("municipal -> municip", function() {deepEqual( Stem("municipal"), "municip");});
test("municipalities -> municip", function() {deepEqual( Stem("municipalities"), "municip");});
test("munificence -> munific", function() {deepEqual( Stem("munificence"), "munific");});
test("munificent -> munific", function() {deepEqual( Stem("munificent"), "munific");});
test("muniz -> muniz", function() {deepEqual( Stem("muniz"), "muniz");});
test("muntle -> muntl", function() {deepEqual( Stem("muntle"), "muntl");});
test("muntlehiney -> muntlehiney", function() {deepEqual( Stem("muntlehiney"), "muntlehiney");});
test("murder -> murder", function() {deepEqual( Stem("murder"), "murder");});
test("murdered -> murder", function() {deepEqual( Stem("murdered"), "murder");});
test("murderer -> murder", function() {deepEqual( Stem("murderer"), "murder");});
test("murderers -> murder", function() {deepEqual( Stem("murderers"), "murder");});
test("murderess -> murderess", function() {deepEqual( Stem("murderess"), "murderess");});
test("murdering -> murder", function() {deepEqual( Stem("murdering"), "murder");});
test("murderous -> murder", function() {deepEqual( Stem("murderous"), "murder");});
test("murders -> murder", function() {deepEqual( Stem("murders"), "murder");});
test("muriate -> muriat", function() {deepEqual( Stem("muriate"), "muriat");});
test("muriates -> muriat", function() {deepEqual( Stem("muriates"), "muriat");});
test("murinus -> murinus", function() {deepEqual( Stem("murinus"), "murinus");});
test("murky -> murki", function() {deepEqual( Stem("murky"), "murki");});
test("murmur -> murmur", function() {deepEqual( Stem("murmur"), "murmur");});
test("murmured -> murmur", function() {deepEqual( Stem("murmured"), "murmur");});
test("murmuring -> murmur", function() {deepEqual( Stem("murmuring"), "murmur");});
test("murmuringly -> murmur", function() {deepEqual( Stem("murmuringly"), "murmur");});
test("murmurings -> murmur", function() {deepEqual( Stem("murmurings"), "murmur");});
test("murmurs -> murmur", function() {deepEqual( Stem("murmurs"), "murmur");});
test("murphy -> murphi", function() {deepEqual( Stem("murphy"), "murphi");});
test("murray -> murray", function() {deepEqual( Stem("murray"), "murray");});
test("murrumbidgee -> murrumbidge", function() {deepEqual( Stem("murrumbidgee"), "murrumbidge");});
test("mus -> mus", function() {deepEqual( Stem("mus"), "mus");});
test("muscle -> muscl", function() {deepEqual( Stem("muscle"), "muscl");});
test("muscles -> muscl", function() {deepEqual( Stem("muscles"), "muscl");});
test("muscular -> muscular", function() {deepEqual( Stem("muscular"), "muscular");});
test("muse -> muse", function() {deepEqual( Stem("muse"), "muse");});
test("mused -> muse", function() {deepEqual( Stem("mused"), "muse");});
test("muses -> muse", function() {deepEqual( Stem("muses"), "muse");});
test("museum -> museum", function() {deepEqual( Stem("museum"), "museum");});
test("musgrave -> musgrav", function() {deepEqual( Stem("musgrave"), "musgrav");});
test("mushroom -> mushroom", function() {deepEqual( Stem("mushroom"), "mushroom");});
test("mushrooms -> mushroom", function() {deepEqual( Stem("mushrooms"), "mushroom");});
test("music -> music", function() {deepEqual( Stem("music"), "music");});
test("musical -> music", function() {deepEqual( Stem("musical"), "music");});
test("musician -> musician", function() {deepEqual( Stem("musician"), "musician");});
test("musing -> muse", function() {deepEqual( Stem("musing"), "muse");});
test("musingly -> muse", function() {deepEqual( Stem("musingly"), "muse");});
test("musk -> musk", function() {deepEqual( Stem("musk"), "musk");});
test("musket -> musket", function() {deepEqual( Stem("musket"), "musket");});
test("musketry -> musketri", function() {deepEqual( Stem("musketry"), "musketri");});
test("muskets -> musket", function() {deepEqual( Stem("muskets"), "musket");});
test("muslin -> muslin", function() {deepEqual( Stem("muslin"), "muslin");});
test("muslins -> muslin", function() {deepEqual( Stem("muslins"), "muslin");});
test("musn -> musn", function() {deepEqual( Stem("musn"), "musn");});
test("musquitoes -> musquito", function() {deepEqual( Stem("musquitoes"), "musquito");});
test("muss -> muss", function() {deepEqual( Stem("muss"), "muss");});
test("mussel -> mussel", function() {deepEqual( Stem("mussel"), "mussel");});
test("must -> must", function() {deepEqual( Stem("must"), "must");});
test("mustaches -> mustach", function() {deepEqual( Stem("mustaches"), "mustach");});
test("mustard -> mustard", function() {deepEqual( Stem("mustard"), "mustard");});
test("muster -> muster", function() {deepEqual( Stem("muster"), "muster");});
test("mustered -> muster", function() {deepEqual( Stem("mustered"), "muster");});
test("mustn -> mustn", function() {deepEqual( Stem("mustn"), "mustn");});
test("musty -> musti", function() {deepEqual( Stem("musty"), "musti");});
test("mute -> mute", function() {deepEqual( Stem("mute"), "mute");});
test("mutilated -> mutil", function() {deepEqual( Stem("mutilated"), "mutil");});
test("mutilates -> mutil", function() {deepEqual( Stem("mutilates"), "mutil");});
test("mutinous -> mutin", function() {deepEqual( Stem("mutinous"), "mutin");});
test("mutiny -> mutini", function() {deepEqual( Stem("mutiny"), "mutini");});
test("mutter -> mutter", function() {deepEqual( Stem("mutter"), "mutter");});
test("muttered -> mutter", function() {deepEqual( Stem("muttered"), "mutter");});
test("muttering -> mutter", function() {deepEqual( Stem("muttering"), "mutter");});
test("mutterings -> mutter", function() {deepEqual( Stem("mutterings"), "mutter");});
test("mutters -> mutter", function() {deepEqual( Stem("mutters"), "mutter");});
test("mutton -> mutton", function() {deepEqual( Stem("mutton"), "mutton");});
test("mutual -> mutual", function() {deepEqual( Stem("mutual"), "mutual");});
test("mutually -> mutual", function() {deepEqual( Stem("mutually"), "mutual");});
test("muy -> muy", function() {deepEqual( Stem("muy"), "muy");});
test("muzzle -> muzzl", function() {deepEqual( Stem("muzzle"), "muzzl");});
test("my -> my", function() {deepEqual( Stem("my"), "my");});
test("myiobius -> myiobius", function() {deepEqual( Stem("myiobius"), "myiobius");});
test("mylodon -> mylodon", function() {deepEqual( Stem("mylodon"), "mylodon");});
test("myopotamus -> myopotamus", function() {deepEqual( Stem("myopotamus"), "myopotamus");});
test("myriads -> myriad", function() {deepEqual( Stem("myriads"), "myriad");});
test("myrmidons -> myrmidon", function() {deepEqual( Stem("myrmidons"), "myrmidon");});
test("myrtle -> myrtl", function() {deepEqual( Stem("myrtle"), "myrtl");});
test("myrtus -> myrtus", function() {deepEqual( Stem("myrtus"), "myrtus");});
test("myself -> myself", function() {deepEqual( Stem("myself"), "myself");});
test("mysteries -> mysteri", function() {deepEqual( Stem("mysteries"), "mysteri");});
test("mysterieuse -> mysterieus", function() {deepEqual( Stem("mysterieuse"), "mysterieus");});
test("mysterious -> mysteri", function() {deepEqual( Stem("mysterious"), "mysteri");});
test("mysteriously -> mysteri", function() {deepEqual( Stem("mysteriously"), "mysteri");});
test("mystery -> mysteri", function() {deepEqual( Stem("mystery"), "mysteri");});
test("mystic -> mystic", function() {deepEqual( Stem("mystic"), "mystic");});
test("mystification -> mystif", function() {deepEqual( Stem("mystification"), "mystif");});
test("mystified -> mystifi", function() {deepEqual( Stem("mystified"), "mystifi");});
test("mystify -> mystifi", function() {deepEqual( Stem("mystify"), "mystifi");});
test("mythische -> mythisch", function() {deepEqual( Stem("mythische"), "mythisch");});
test("myths -> myth", function() {deepEqual( Stem("myths"), "myth");});
test("mytilus -> mytilus", function() {deepEqual( Stem("mytilus"), "mytilus");});
test("n -> n", function() {deepEqual( Stem("n"), "n");});
test("na -> na", function() {deepEqual( Stem("na"), "na");});
test("nae -> nae", function() {deepEqual( Stem("nae"), "nae");});
test("nag -> nag", function() {deepEqual( Stem("nag"), "nag");});
test("nags -> nag", function() {deepEqual( Stem("nags"), "nag");});
test("nail -> nail", function() {deepEqual( Stem("nail"), "nail");});
test("nailed -> nail", function() {deepEqual( Stem("nailed"), "nail");});
test("nails -> nail", function() {deepEqual( Stem("nails"), "nail");});
test("naive -> naiv", function() {deepEqual( Stem("naive"), "naiv");});
test("naively -> naiv", function() {deepEqual( Stem("naively"), "naiv");});
test("naked -> nake", function() {deepEqual( Stem("naked"), "nake");});
test("nakedness -> naked", function() {deepEqual( Stem("nakedness"), "naked");});
test("nam -> nam", function() {deepEqual( Stem("nam"), "nam");});
test("name -> name", function() {deepEqual( Stem("name"), "name");});
test("named -> name", function() {deepEqual( Stem("named"), "name");});
test("nameless -> nameless", function() {deepEqual( Stem("nameless"), "nameless");});
test("namely -> name", function() {deepEqual( Stem("namely"), "name");});
test("names -> name", function() {deepEqual( Stem("names"), "name");});
test("namesake -> namesak", function() {deepEqual( Stem("namesake"), "namesak");});
test("naming -> name", function() {deepEqual( Stem("naming"), "name");});
test("nankeen -> nankeen", function() {deepEqual( Stem("nankeen"), "nankeen");});
test("nanus -> nanus", function() {deepEqual( Stem("nanus"), "nanus");});
test("nap -> nap", function() {deepEqual( Stem("nap"), "nap");});
test("nape -> nape", function() {deepEqual( Stem("nape"), "nape");});
test("napkin -> napkin", function() {deepEqual( Stem("napkin"), "napkin");});
test("naples -> napl", function() {deepEqual( Stem("naples"), "napl");});
test("napoleon -> napoleon", function() {deepEqual( Stem("napoleon"), "napoleon");});
test("napoleons -> napoleon", function() {deepEqual( Stem("napoleons"), "napoleon");});
test("narborough -> narborough", function() {deepEqual( Stem("narborough"), "narborough");});
test("narcissus -> narcissus", function() {deepEqual( Stem("narcissus"), "narcissus");});
test("narr -> narr", function() {deepEqual( Stem("narr"), "narr");});
test("narrated -> narrat", function() {deepEqual( Stem("narrated"), "narrat");});
test("narrates -> narrat", function() {deepEqual( Stem("narrates"), "narrat");});
test("narration -> narrat", function() {deepEqual( Stem("narration"), "narrat");});
test("narrative -> narrat", function() {deepEqual( Stem("narrative"), "narrat");});
test("narratives -> narrat", function() {deepEqual( Stem("narratives"), "narrat");});
test("narrow -> narrow", function() {deepEqual( Stem("narrow"), "narrow");});
test("narrowed -> narrow", function() {deepEqual( Stem("narrowed"), "narrow");});
test("narrower -> narrow", function() {deepEqual( Stem("narrower"), "narrow");});
test("narrowest -> narrowest", function() {deepEqual( Stem("narrowest"), "narrowest");});
test("narrowing -> narrow", function() {deepEqual( Stem("narrowing"), "narrow");});
test("narrowly -> narrowli", function() {deepEqual( Stem("narrowly"), "narrowli");});
test("narrowness -> narrow", function() {deepEqual( Stem("narrowness"), "narrow");});
test("narrows -> narrow", function() {deepEqual( Stem("narrows"), "narrow");});
test("nasal -> nasal", function() {deepEqual( Stem("nasal"), "nasal");});
test("nassa -> nassa", function() {deepEqual( Stem("nassa"), "nassa");});
test("nastasya -> nastasya", function() {deepEqual( Stem("nastasya"), "nastasya");});
test("nastiness -> nasti", function() {deepEqual( Stem("nastiness"), "nasti");});
test("nasturtions -> nasturt", function() {deepEqual( Stem("nasturtions"), "nasturt");});
test("nasty -> nasti", function() {deepEqual( Stem("nasty"), "nasti");});
test("nat -> nat", function() {deepEqual( Stem("nat"), "nat");});
test("nata -> nata", function() {deepEqual( Stem("nata"), "nata");});
test("natalya -> natalya", function() {deepEqual( Stem("natalya"), "natalya");});
test("nate -> nate", function() {deepEqual( Stem("nate"), "nate");});
test("nateral -> nater", function() {deepEqual( Stem("nateral"), "nater");});
test("naterally -> nater", function() {deepEqual( Stem("naterally"), "nater");});
test("nation -> nation", function() {deepEqual( Stem("nation"), "nation");});
test("national -> nation", function() {deepEqual( Stem("national"), "nation");});
test("nationality -> nation", function() {deepEqual( Stem("nationality"), "nation");});
test("nations -> nation", function() {deepEqual( Stem("nations"), "nation");});
test("native -> nativ", function() {deepEqual( Stem("native"), "nativ");});
test("natives -> nativ", function() {deepEqual( Stem("natives"), "nativ");});
test("natur -> natur", function() {deepEqual( Stem("natur"), "natur");});
test("natural -> natur", function() {deepEqual( Stem("natural"), "natur");});
test("naturalest -> naturalest", function() {deepEqual( Stem("naturalest"), "naturalest");});
test("naturalist -> naturalist", function() {deepEqual( Stem("naturalist"), "naturalist");});
test("naturalista -> naturalista", function() {deepEqual( Stem("naturalista"), "naturalista");});
test("naturalists -> naturalist", function() {deepEqual( Stem("naturalists"), "naturalist");});
test("naturalized -> natur", function() {deepEqual( Stem("naturalized"), "natur");});
test("naturally -> natur", function() {deepEqual( Stem("naturally"), "natur");});
test("naturalness -> natur", function() {deepEqual( Stem("naturalness"), "natur");});
test("nature -> natur", function() {deepEqual( Stem("nature"), "natur");});
test("natured -> natur", function() {deepEqual( Stem("natured"), "natur");});
test("naturedly -> natur", function() {deepEqual( Stem("naturedly"), "natur");});
test("naturelles -> naturell", function() {deepEqual( Stem("naturelles"), "naturell");});
test("natures -> natur", function() {deepEqual( Stem("natures"), "natur");});
test("naughtiest -> naughtiest", function() {deepEqual( Stem("naughtiest"), "naughtiest");});
test("naughtiness -> naughti", function() {deepEqual( Stem("naughtiness"), "naughti");});
test("naughty -> naughti", function() {deepEqual( Stem("naughty"), "naughti");});
test("nausea -> nausea", function() {deepEqual( Stem("nausea"), "nausea");});
test("nauseous -> nauseous", function() {deepEqual( Stem("nauseous"), "nauseous");});
test("nautical -> nautic", function() {deepEqual( Stem("nautical"), "nautic");});
test("naval -> naval", function() {deepEqual( Stem("naval"), "naval");});
test("navarin -> navarin", function() {deepEqual( Stem("navarin"), "navarin");});
test("nave -> nave", function() {deepEqual( Stem("nave"), "nave");});
test("navedad -> navedad", function() {deepEqual( Stem("navedad"), "navedad");});
test("navel -> navel", function() {deepEqual( Stem("navel"), "navel");});
test("navies -> navi", function() {deepEqual( Stem("navies"), "navi");});
test("navigate -> navig", function() {deepEqual( Stem("navigate"), "navig");});
test("navigating -> navig", function() {deepEqual( Stem("navigating"), "navig");});
test("navigation -> navig", function() {deepEqual( Stem("navigation"), "navig");});
test("navigator -> navig", function() {deepEqual( Stem("navigator"), "navig");});
test("navigators -> navig", function() {deepEqual( Stem("navigators"), "navig");});
test("navy -> navi", function() {deepEqual( Stem("navy"), "navi");});
test("nay -> nay", function() {deepEqual( Stem("nay"), "nay");});
test("nayver -> nayver", function() {deepEqual( Stem("nayver"), "nayver");});
test("nd -> nd", function() {deepEqual( Stem("nd"), "nd");});
test("ne -> ne", function() {deepEqual( Stem("ne"), "ne");});
test("nea -> nea", function() {deepEqual( Stem("nea"), "nea");});
test("neame -> neam", function() {deepEqual( Stem("neame"), "neam");});
test("neaming -> neam", function() {deepEqual( Stem("neaming"), "neam");});
test("neane -> nean", function() {deepEqual( Stem("neane"), "nean");});
test("near -> near", function() {deepEqual( Stem("near"), "near");});
test("neared -> near", function() {deepEqual( Stem("neared"), "near");});
test("nearer -> nearer", function() {deepEqual( Stem("nearer"), "nearer");});
test("nearest -> nearest", function() {deepEqual( Stem("nearest"), "nearest");});
test("nearl -> nearl", function() {deepEqual( Stem("nearl"), "nearl");});
test("nearly -> near", function() {deepEqual( Stem("nearly"), "near");});
test("nearness -> near", function() {deepEqual( Stem("nearness"), "near");});
test("nearsighted -> nearsight", function() {deepEqual( Stem("nearsighted"), "nearsight");});
test("neat -> neat", function() {deepEqual( Stem("neat"), "neat");});
test("neatest -> neatest", function() {deepEqual( Stem("neatest"), "neatest");});
test("neath -> neath", function() {deepEqual( Stem("neath"), "neath");});
test("neatly -> neat", function() {deepEqual( Stem("neatly"), "neat");});
test("neatness -> neat", function() {deepEqual( Stem("neatness"), "neat");});
test("nebulous -> nebul", function() {deepEqual( Stem("nebulous"), "nebul");});
test("necesary -> necesari", function() {deepEqual( Stem("necesary"), "necesari");});
test("necesidad -> necesidad", function() {deepEqual( Stem("necesidad"), "necesidad");});
test("necessaries -> necessari", function() {deepEqual( Stem("necessaries"), "necessari");});
test("necessarily -> necessarili", function() {deepEqual( Stem("necessarily"), "necessarili");});
test("necessary -> necessari", function() {deepEqual( Stem("necessary"), "necessari");});
test("necessitate -> necessit", function() {deepEqual( Stem("necessitate"), "necessit");});
test("necessitated -> necessit", function() {deepEqual( Stem("necessitated"), "necessit");});
test("necessitates -> necessit", function() {deepEqual( Stem("necessitates"), "necessit");});
test("necessities -> necess", function() {deepEqual( Stem("necessities"), "necess");});
test("necessity -> necess", function() {deepEqual( Stem("necessity"), "necess");});
test("neck -> neck", function() {deepEqual( Stem("neck"), "neck");});
test("neckcloth -> neckcloth", function() {deepEqual( Stem("neckcloth"), "neckcloth");});
test("neckcloths -> neckcloth", function() {deepEqual( Stem("neckcloths"), "neckcloth");});
test("necked -> neck", function() {deepEqual( Stem("necked"), "neck");});
test("neckerchief -> neckerchief", function() {deepEqual( Stem("neckerchief"), "neckerchief");});
test("neckett -> neckett", function() {deepEqual( Stem("neckett"), "neckett");});
test("neckkerchief -> neckkerchief", function() {deepEqual( Stem("neckkerchief"), "neckkerchief");});
test("necklace -> necklac", function() {deepEqual( Stem("necklace"), "necklac");});
test("necklaced -> necklac", function() {deepEqual( Stem("necklaced"), "necklac");});
test("necklaces -> necklac", function() {deepEqual( Stem("necklaces"), "necklac");});
test("necks -> neck", function() {deepEqual( Stem("necks"), "neck");});
test("necktie -> neckti", function() {deepEqual( Stem("necktie"), "neckti");});
test("necromancer -> necromanc", function() {deepEqual( Stem("necromancer"), "necromanc");});
test("necrophagous -> necrophag", function() {deepEqual( Stem("necrophagous"), "necrophag");});
test("nectar -> nectar", function() {deepEqual( Stem("nectar"), "nectar");});
test("nectarine -> nectarin", function() {deepEqual( Stem("nectarine"), "nectarin");});
test("nectarines -> nectarin", function() {deepEqual( Stem("nectarines"), "nectarin");});
test("ned -> ned", function() {deepEqual( Stem("ned"), "ned");});
test("neeburs -> neebur", function() {deepEqual( Stem("neeburs"), "neebur");});
test("need -> need", function() {deepEqual( Stem("need"), "need");});
test("needed -> need", function() {deepEqual( Stem("needed"), "need");});
test("needful -> need", function() {deepEqual( Stem("needful"), "need");});
test("needing -> need", function() {deepEqual( Stem("needing"), "need");});
test("needle -> needl", function() {deepEqual( Stem("needle"), "needl");});
test("needless -> needless", function() {deepEqual( Stem("needless"), "needless");});
test("needlework -> needlework", function() {deepEqual( Stem("needlework"), "needlework");});
test("needn -> needn", function() {deepEqual( Stem("needn"), "needn");});
test("needs -> need", function() {deepEqual( Stem("needs"), "need");});
test("needy -> needi", function() {deepEqual( Stem("needy"), "needi");});
test("neeght -> neeght", function() {deepEqual( Stem("neeght"), "neeght");});
test("nefarious -> nefari", function() {deepEqual( Stem("nefarious"), "nefari");});
test("negative -> negat", function() {deepEqual( Stem("negative"), "negat");});
test("neglect -> neglect", function() {deepEqual( Stem("neglect"), "neglect");});
test("neglected -> neglect", function() {deepEqual( Stem("neglected"), "neglect");});
test("neglectful -> neglect", function() {deepEqual( Stem("neglectful"), "neglect");});
test("neglecting -> neglect", function() {deepEqual( Stem("neglecting"), "neglect");});
test("negligemment -> negligem", function() {deepEqual( Stem("negligemment"), "negligem");});
test("negligence -> neglig", function() {deepEqual( Stem("negligence"), "neglig");});
test("negligent -> neglig", function() {deepEqual( Stem("negligent"), "neglig");});
test("negligently -> neglig", function() {deepEqual( Stem("negligently"), "neglig");});
test("negotiable -> negoti", function() {deepEqual( Stem("negotiable"), "negoti");});
test("negotiate -> negoti", function() {deepEqual( Stem("negotiate"), "negoti");});
test("negotiating -> negoti", function() {deepEqual( Stem("negotiating"), "negoti");});
test("negotiation -> negoti", function() {deepEqual( Stem("negotiation"), "negoti");});
test("negotiations -> negoti", function() {deepEqual( Stem("negotiations"), "negoti");});
test("negress -> negress", function() {deepEqual( Stem("negress"), "negress");});
test("negro -> negro", function() {deepEqual( Stem("negro"), "negro");});
test("negroes -> negro", function() {deepEqual( Stem("negroes"), "negro");});
test("negus -> negus", function() {deepEqual( Stem("negus"), "negus");});
test("neigh -> neigh", function() {deepEqual( Stem("neigh"), "neigh");});
test("neighborhood -> neighborhood", function() {deepEqual( Stem("neighborhood"), "neighborhood");});
test("neighbour -> neighbour", function() {deepEqual( Stem("neighbour"), "neighbour");});
test("neighbourhood -> neighbourhood", function() {deepEqual( Stem("neighbourhood"), "neighbourhood");});
test("neighbouring -> neighbour", function() {deepEqual( Stem("neighbouring"), "neighbour");});
test("neighbourly -> neighbour", function() {deepEqual( Stem("neighbourly"), "neighbour");});
test("neighbours -> neighbour", function() {deepEqual( Stem("neighbours"), "neighbour");});
test("neighing -> neigh", function() {deepEqual( Stem("neighing"), "neigh");});
test("neight -> neight", function() {deepEqual( Stem("neight"), "neight");});
test("neither -> neither", function() {deepEqual( Stem("neither"), "neither");});
test("nekrassov -> nekrassov", function() {deepEqual( Stem("nekrassov"), "nekrassov");});
test("nelly -> nelli", function() {deepEqual( Stem("nelly"), "nelli");});
test("nemo -> nemo", function() {deepEqual( Stem("nemo"), "nemo");});
test("nemophilas -> nemophila", function() {deepEqual( Stem("nemophilas"), "nemophila");});
test("neophyte -> neophyt", function() {deepEqual( Stem("neophyte"), "neophyt");});
test("nepean -> nepean", function() {deepEqual( Stem("nepean"), "nepean");});
test("nephew -> nephew", function() {deepEqual( Stem("nephew"), "nephew");});
test("nephews -> nephew", function() {deepEqual( Stem("nephews"), "nephew");});
test("ner -> ner", function() {deepEqual( Stem("ner"), "ner");});
test("nereidae -> nereida", function() {deepEqual( Stem("nereidae"), "nereida");});
test("nereidous -> nereid", function() {deepEqual( Stem("nereidous"), "nereid");});
test("nero -> nero", function() {deepEqual( Stem("nero"), "nero");});
test("nerve -> nerv", function() {deepEqual( Stem("nerve"), "nerv");});
test("nerves -> nerv", function() {deepEqual( Stem("nerves"), "nerv");});
test("nerving -> nerv", function() {deepEqual( Stem("nerving"), "nerv");});
test("nervous -> nervous", function() {deepEqual( Stem("nervous"), "nervous");});
test("nervously -> nervous", function() {deepEqual( Stem("nervously"), "nervous");});
test("nervousness -> nervous", function() {deepEqual( Stem("nervousness"), "nervous");});
test("nervure -> nervur", function() {deepEqual( Stem("nervure"), "nervur");});
test("nervures -> nervur", function() {deepEqual( Stem("nervures"), "nervur");});
test("nesbit -> nesbit", function() {deepEqual( Stem("nesbit"), "nesbit");});
test("nest -> nest", function() {deepEqual( Stem("nest"), "nest");});
test("nestled -> nestl", function() {deepEqual( Stem("nestled"), "nestl");});
test("nestling -> nestl", function() {deepEqual( Stem("nestling"), "nestl");});
test("nestlings -> nestl", function() {deepEqual( Stem("nestlings"), "nestl");});
test("nestor -> nestor", function() {deepEqual( Stem("nestor"), "nestor");});
test("nests -> nest", function() {deepEqual( Stem("nests"), "nest");});
test("net -> net", function() {deepEqual( Stem("net"), "net");});
test("nether -> nether", function() {deepEqual( Stem("nether"), "nether");});
test("nets -> net", function() {deepEqual( Stem("nets"), "net");});
test("netted -> net", function() {deepEqual( Stem("netted"), "net");});
test("nettle -> nettl", function() {deepEqual( Stem("nettle"), "nettl");});
test("nettled -> nettl", function() {deepEqual( Stem("nettled"), "nettl");});
test("nettles -> nettl", function() {deepEqual( Stem("nettles"), "nettl");});
test("neuralgia -> neuralgia", function() {deepEqual( Stem("neuralgia"), "neuralgia");});
test("neuroptera -> neuroptera", function() {deepEqual( Stem("neuroptera"), "neuroptera");});
test("neuter -> neuter", function() {deepEqual( Stem("neuter"), "neuter");});
test("neutral -> neutral", function() {deepEqual( Stem("neutral"), "neutral");});
test("neva -> neva", function() {deepEqual( Stem("neva"), "neva");});
test("neve -> neve", function() {deepEqual( Stem("neve"), "neve");});
test("never -> never", function() {deepEqual( Stem("never"), "never");});
test("nevertheless -> nevertheless", function() {deepEqual( Stem("nevertheless"), "nevertheless");});
test("nevew -> nevew", function() {deepEqual( Stem("nevew"), "nevew");});
test("nevsky -> nevski", function() {deepEqual( Stem("nevsky"), "nevski");});
test("new -> new", function() {deepEqual( Stem("new"), "new");});
test("newark -> newark", function() {deepEqual( Stem("newark"), "newark");});
test("newcastle -> newcastl", function() {deepEqual( Stem("newcastle"), "newcastl");});
test("newcomers -> newcom", function() {deepEqual( Stem("newcomers"), "newcom");});
test("newer -> newer", function() {deepEqual( Stem("newer"), "newer");});
test("newest -> newest", function() {deepEqual( Stem("newest"), "newest");});
test("newgate -> newgat", function() {deepEqual( Stem("newgate"), "newgat");});
test("newly -> newli", function() {deepEqual( Stem("newly"), "newli");});
test("newman -> newman", function() {deepEqual( Stem("newman"), "newman");});
test("newmarket -> newmarket", function() {deepEqual( Stem("newmarket"), "newmarket");});
test("newness -> new", function() {deepEqual( Stem("newness"), "new");});
test("news -> news", function() {deepEqual( Stem("news"), "news");});
test("newsmen -> newsmen", function() {deepEqual( Stem("newsmen"), "newsmen");});
test("newspaper -> newspap", function() {deepEqual( Stem("newspaper"), "newspap");});
test("newspapers -> newspap", function() {deepEqual( Stem("newspapers"), "newspap");});
test("newton -> newton", function() {deepEqual( Stem("newton"), "newton");});
test("next -> next", function() {deepEqual( Stem("next"), "next");});
test("ney -> ney", function() {deepEqual( Stem("ney"), "ney");});
test("neyver -> neyver", function() {deepEqual( Stem("neyver"), "neyver");});
test("nezhin -> nezhin", function() {deepEqual( Stem("nezhin"), "nezhin");});
test("ni -> ni", function() {deepEqual( Stem("ni"), "ni");});
test("niagaras -> niagara", function() {deepEqual( Stem("niagaras"), "niagara");});
test("niata -> niata", function() {deepEqual( Stem("niata"), "niata");});
test("niatas -> niata", function() {deepEqual( Stem("niatas"), "niata");});
test("nib -> nib", function() {deepEqual( Stem("nib"), "nib");});
test("nice -> nice", function() {deepEqual( Stem("nice"), "nice");});
test("nicely -> nice", function() {deepEqual( Stem("nicely"), "nice");});
test("niceness -> nice", function() {deepEqual( Stem("niceness"), "nice");});
test("nicer -> nicer", function() {deepEqual( Stem("nicer"), "nicer");});
test("nicest -> nicest", function() {deepEqual( Stem("nicest"), "nicest");});
test("nicety -> niceti", function() {deepEqual( Stem("nicety"), "niceti");});
test("niche -> nich", function() {deepEqual( Stem("niche"), "nich");});
test("nicher -> nicher", function() {deepEqual( Stem("nicher"), "nicher");});
test("niches -> nich", function() {deepEqual( Stem("niches"), "nich");});
test("nicholas -> nichola", function() {deepEqual( Stem("nicholas"), "nichola");});
test("nick -> nick", function() {deepEqual( Stem("nick"), "nick");});
test("nickelby -> nickelbi", function() {deepEqual( Stem("nickelby"), "nickelbi");});
test("nickleby -> nicklebi", function() {deepEqual( Stem("nickleby"), "nicklebi");});
test("nicklebys -> nicklebi", function() {deepEqual( Stem("nicklebys"), "nicklebi");});
test("nickname -> nicknam", function() {deepEqual( Stem("nickname"), "nicknam");});
test("nicolas -> nicola", function() {deepEqual( Stem("nicolas"), "nicola");});
test("nictitating -> nictit", function() {deepEqual( Stem("nictitating"), "nictit");});
test("nidification -> nidif", function() {deepEqual( Stem("nidification"), "nidif");});
test("niebla -> niebla", function() {deepEqual( Stem("niebla"), "niebla");});
test("niece -> niec", function() {deepEqual( Stem("niece"), "niec");});
test("nieces -> niec", function() {deepEqual( Stem("nieces"), "niec");});
test("niente -> nient", function() {deepEqual( Stem("niente"), "nient");});
test("niger -> niger", function() {deepEqual( Stem("niger"), "niger");});
test("nigger -> nigger", function() {deepEqual( Stem("nigger"), "nigger");});
test("niggering -> nigger", function() {deepEqual( Stem("niggering"), "nigger");});
test("niggers -> nigger", function() {deepEqual( Stem("niggers"), "nigger");});
test("nigh -> nigh", function() {deepEqual( Stem("nigh"), "nigh");});
test("night -> night", function() {deepEqual( Stem("night"), "night");});
test("nightcap -> nightcap", function() {deepEqual( Stem("nightcap"), "nightcap");});
test("nightcaps -> nightcap", function() {deepEqual( Stem("nightcaps"), "nightcap");});
test("nightfall -> nightfal", function() {deepEqual( Stem("nightfall"), "nightfal");});
test("nightingale -> nightingal", function() {deepEqual( Stem("nightingale"), "nightingal");});
test("nightingales -> nightingal", function() {deepEqual( Stem("nightingales"), "nightingal");});
test("nightly -> night", function() {deepEqual( Stem("nightly"), "night");});
test("nightmare -> nightmar", function() {deepEqual( Stem("nightmare"), "nightmar");});
test("nights -> night", function() {deepEqual( Stem("nights"), "night");});
test("nigra -> nigra", function() {deepEqual( Stem("nigra"), "nigra");});
test("nigricans -> nigrican", function() {deepEqual( Stem("nigricans"), "nigrican");});
test("nigricollis -> nigricolli", function() {deepEqual( Stem("nigricollis"), "nigricolli");});
test("nihil -> nihil", function() {deepEqual( Stem("nihil"), "nihil");});
test("nihilist -> nihilist", function() {deepEqual( Stem("nihilist"), "nihilist");});
test("nihilists -> nihilist", function() {deepEqual( Stem("nihilists"), "nihilist");});
test("nikiforovna -> nikiforovna", function() {deepEqual( Stem("nikiforovna"), "nikiforovna");});
test("nikodim -> nikodim", function() {deepEqual( Stem("nikodim"), "nikodim");});
test("nikolaevsky -> nikolaevski", function() {deepEqual( Stem("nikolaevsky"), "nikolaevski");});
test("nikolay -> nikolay", function() {deepEqual( Stem("nikolay"), "nikolay");});
test("nil -> nil", function() {deepEqual( Stem("nil"), "nil");});
test("nile -> nile", function() {deepEqual( Stem("nile"), "nile");});
test("nillandoo -> nillandoo", function() {deepEqual( Stem("nillandoo"), "nillandoo");});
test("nimble -> nimbl", function() {deepEqual( Stem("nimble"), "nimbl");});
test("nimbly -> nimbl", function() {deepEqual( Stem("nimbly"), "nimbl");});
test("nimrod -> nimrod", function() {deepEqual( Stem("nimrod"), "nimrod");});
test("nine -> nine", function() {deepEqual( Stem("nine"), "nine");});
test("ninepence -> ninep", function() {deepEqual( Stem("ninepence"), "ninep");});
test("ninepin -> ninepin", function() {deepEqual( Stem("ninepin"), "ninepin");});
test("nines -> nine", function() {deepEqual( Stem("nines"), "nine");});
test("nineteen -> nineteen", function() {deepEqual( Stem("nineteen"), "nineteen");});
test("nineteenth -> nineteenth", function() {deepEqual( Stem("nineteenth"), "nineteenth");});
test("ninetta -> ninetta", function() {deepEqual( Stem("ninetta"), "ninetta");});
test("ninety -> nineti", function() {deepEqual( Stem("ninety"), "nineti");});
test("ninevite -> ninevit", function() {deepEqual( Stem("ninevite"), "ninevit");});
test("ninnies -> ninni", function() {deepEqual( Stem("ninnies"), "ninni");});
test("ninth -> ninth", function() {deepEqual( Stem("ninth"), "ninth");});
test("niobe -> niob", function() {deepEqual( Stem("niobe"), "niob");});
test("nipped -> nip", function() {deepEqual( Stem("nipped"), "nip");});
test("nipping -> nip", function() {deepEqual( Stem("nipping"), "nip");});
test("nips -> nip", function() {deepEqual( Stem("nips"), "nip");});
test("nitrate -> nitrat", function() {deepEqual( Stem("nitrate"), "nitrat");});
test("nitric -> nitric", function() {deepEqual( Stem("nitric"), "nitric");});
test("nivalis -> nivali", function() {deepEqual( Stem("nivalis"), "nivali");});
test("nixon -> nixon", function() {deepEqual( Stem("nixon"), "nixon");});
test("nixt -> nixt", function() {deepEqual( Stem("nixt"), "nixt");});
test("no -> no", function() {deepEqual( Stem("no"), "no");});
test("noa -> noa", function() {deepEqual( Stem("noa"), "noa");});
test("noabody -> noabodi", function() {deepEqual( Stem("noabody"), "noabodi");});
test("noah -> noah", function() {deepEqual( Stem("noah"), "noah");});
test("nobbiest -> nobbiest", function() {deepEqual( Stem("nobbiest"), "nobbiest");});
test("nobility -> nobil", function() {deepEqual( Stem("nobility"), "nobil");});
test("noble -> nobl", function() {deepEqual( Stem("noble"), "nobl");});
test("nobleman -> nobleman", function() {deepEqual( Stem("nobleman"), "nobleman");});
test("noblemen -> noblemen", function() {deepEqual( Stem("noblemen"), "noblemen");});
test("nobleness -> nobl", function() {deepEqual( Stem("nobleness"), "nobl");});
test("nobler -> nobler", function() {deepEqual( Stem("nobler"), "nobler");});
test("noblesse -> nobless", function() {deepEqual( Stem("noblesse"), "nobless");});
test("noblest -> noblest", function() {deepEqual( Stem("noblest"), "noblest");});
test("nobly -> nobli", function() {deepEqual( Stem("nobly"), "nobli");});
test("nobodies -> nobodi", function() {deepEqual( Stem("nobodies"), "nobodi");});
test("nobody -> nobodi", function() {deepEqual( Stem("nobody"), "nobodi");});
test("nobodys -> nobodi", function() {deepEqual( Stem("nobodys"), "nobodi");});
test("nocturna -> nocturna", function() {deepEqual( Stem("nocturna"), "nocturna");});
test("nocturnal -> nocturn", function() {deepEqual( Stem("nocturnal"), "nocturn");});
test("nod -> nod", function() {deepEqual( Stem("nod"), "nod");});
test("nodded -> nod", function() {deepEqual( Stem("nodded"), "nod");});
test("noddies -> noddi", function() {deepEqual( Stem("noddies"), "noddi");});
test("nodding -> nod", function() {deepEqual( Stem("nodding"), "nod");});
test("noddings -> nod", function() {deepEqual( Stem("noddings"), "nod");});
test("noddy -> noddi", function() {deepEqual( Stem("noddy"), "noddi");});
test("nods -> nod", function() {deepEqual( Stem("nods"), "nod");});
test("nodules -> nodul", function() {deepEqual( Stem("nodules"), "nodul");});
test("noes -> noe", function() {deepEqual( Stem("noes"), "noe");});
test("nogg -> nogg", function() {deepEqual( Stem("nogg"), "nogg");});
test("noggs -> nogg", function() {deepEqual( Stem("noggs"), "nogg");});
test("noice -> noic", function() {deepEqual( Stem("noice"), "noic");});
test("noir -> noir", function() {deepEqual( Stem("noir"), "noir");});
test("noire -> noir", function() {deepEqual( Stem("noire"), "noir");});
test("noise -> nois", function() {deepEqual( Stem("noise"), "nois");});
test("noised -> nois", function() {deepEqual( Stem("noised"), "nois");});
test("noiseless -> noiseless", function() {deepEqual( Stem("noiseless"), "noiseless");});
test("noiselessly -> noiseless", function() {deepEqual( Stem("noiselessly"), "noiseless");});
test("noises -> nois", function() {deepEqual( Stem("noises"), "nois");});
test("noisier -> noisier", function() {deepEqual( Stem("noisier"), "noisier");});
test("noisily -> noisili", function() {deepEqual( Stem("noisily"), "noisili");});
test("noisome -> noisom", function() {deepEqual( Stem("noisome"), "noisom");});
test("noisy -> noisi", function() {deepEqual( Stem("noisy"), "noisi");});
test("nokolay -> nokolay", function() {deepEqual( Stem("nokolay"), "nokolay");});
test("nolasko -> nolasko", function() {deepEqual( Stem("nolasko"), "nolasko");});
test("nomadically -> nomad", function() {deepEqual( Stem("nomadically"), "nomad");});
test("nomads -> nomad", function() {deepEqual( Stem("nomads"), "nomad");});
test("nomenclature -> nomenclatur", function() {deepEqual( Stem("nomenclature"), "nomenclatur");});
test("nominal -> nomin", function() {deepEqual( Stem("nominal"), "nomin");});
test("nominally -> nomin", function() {deepEqual( Stem("nominally"), "nomin");});
test("nominate -> nomin", function() {deepEqual( Stem("nominate"), "nomin");});
test("nominated -> nomin", function() {deepEqual( Stem("nominated"), "nomin");});
test("nomination -> nomin", function() {deepEqual( Stem("nomination"), "nomin");});
test("nominative -> nomin", function() {deepEqual( Stem("nominative"), "nomin");});
test("nominee -> nomine", function() {deepEqual( Stem("nominee"), "nomine");});
test("non -> non", function() {deepEqual( Stem("non"), "non");});
test("nonce -> nonc", function() {deepEqual( Stem("nonce"), "nonc");});
test("nonchalance -> nonchal", function() {deepEqual( Stem("nonchalance"), "nonchal");});
test("nonchalant -> nonchal", function() {deepEqual( Stem("nonchalant"), "nonchal");});
test("none -> none", function() {deepEqual( Stem("none"), "none");});
test("nonentity -> nonent", function() {deepEqual( Stem("nonentity"), "nonent");});
test("nonpareil -> nonpareil", function() {deepEqual( Stem("nonpareil"), "nonpareil");});
test("nonsense -> nonsens", function() {deepEqual( Stem("nonsense"), "nonsens");});
test("nonsensical -> nonsens", function() {deepEqual( Stem("nonsensical"), "nonsens");});
test("noo -> noo", function() {deepEqual( Stem("noo"), "noo");});
test("noodle -> noodl", function() {deepEqual( Stem("noodle"), "noodl");});
test("noodles -> noodl", function() {deepEqual( Stem("noodles"), "noodl");});
test("nook -> nook", function() {deepEqual( Stem("nook"), "nook");});
test("nooks -> nook", function() {deepEqual( Stem("nooks"), "nook");});
test("noon -> noon", function() {deepEqual( Stem("noon"), "noon");});
test("noonday -> noonday", function() {deepEqual( Stem("noonday"), "noonday");});
test("noose -> noos", function() {deepEqual( Stem("noose"), "noos");});
test("nooses -> noos", function() {deepEqual( Stem("nooses"), "noos");});
test("nor -> nor", function() {deepEqual( Stem("nor"), "nor");});
test("nore -> nore", function() {deepEqual( Stem("nore"), "nore");});
test("normal -> normal", function() {deepEqual( Stem("normal"), "normal");});
test("normally -> normal", function() {deepEqual( Stem("normally"), "normal");});
test("norman -> norman", function() {deepEqual( Stem("norman"), "norman");});
test("normously -> normous", function() {deepEqual( Stem("normously"), "normous");});
test("noronha -> noronha", function() {deepEqual( Stem("noronha"), "noronha");});
test("north -> north", function() {deepEqual( Stem("north"), "north");});
test("northampton -> northampton", function() {deepEqual( Stem("northampton"), "northampton");});
test("northerly -> norther", function() {deepEqual( Stem("northerly"), "norther");});
test("northern -> northern", function() {deepEqual( Stem("northern"), "northern");});
test("northward -> northward", function() {deepEqual( Stem("northward"), "northward");});
test("northwards -> northward", function() {deepEqual( Stem("northwards"), "northward");});
test("norval -> norval", function() {deepEqual( Stem("norval"), "norval");});
test("norway -> norway", function() {deepEqual( Stem("norway"), "norway");});
test("nose -> nose", function() {deepEqual( Stem("nose"), "nose");});
test("nosed -> nose", function() {deepEqual( Stem("nosed"), "nose");});
test("nosegay -> nosegay", function() {deepEqual( Stem("nosegay"), "nosegay");});
test("nosegays -> nosegay", function() {deepEqual( Stem("nosegays"), "nosegay");});
test("noses -> nose", function() {deepEqual( Stem("noses"), "nose");});
test("nostril -> nostril", function() {deepEqual( Stem("nostril"), "nostril");});
test("nostrils -> nostril", function() {deepEqual( Stem("nostrils"), "nostril");});
test("not -> not", function() {deepEqual( Stem("not"), "not");});
test("notable -> notabl", function() {deepEqual( Stem("notable"), "notabl");});
test("notably -> notabl", function() {deepEqual( Stem("notably"), "notabl");});
test("notaphus -> notaphus", function() {deepEqual( Stem("notaphus"), "notaphus");});
test("notary -> notari", function() {deepEqual( Stem("notary"), "notari");});
test("notched -> notch", function() {deepEqual( Stem("notched"), "notch");});
test("notches -> notch", function() {deepEqual( Stem("notches"), "notch");});
test("note -> note", function() {deepEqual( Stem("note"), "note");});
test("notebook -> notebook", function() {deepEqual( Stem("notebook"), "notebook");});
test("notebooks -> notebook", function() {deepEqual( Stem("notebooks"), "notebook");});
test("noted -> note", function() {deepEqual( Stem("noted"), "note");});
test("notes -> note", function() {deepEqual( Stem("notes"), "note");});
test("noteworthy -> noteworthi", function() {deepEqual( Stem("noteworthy"), "noteworthi");});
test("nothin -> nothin", function() {deepEqual( Stem("nothin"), "nothin");});
test("nothing -> noth", function() {deepEqual( Stem("nothing"), "noth");});
test("nothings -> noth", function() {deepEqual( Stem("nothings"), "noth");});
test("nothink -> nothink", function() {deepEqual( Stem("nothink"), "nothink");});
test("nothura -> nothura", function() {deepEqual( Stem("nothura"), "nothura");});
test("notic -> notic", function() {deepEqual( Stem("notic"), "notic");});
test("notice -> notic", function() {deepEqual( Stem("notice"), "notic");});
test("noticeable -> notic", function() {deepEqual( Stem("noticeable"), "notic");});
test("noticeably -> notic", function() {deepEqual( Stem("noticeably"), "notic");});
test("noticed -> notic", function() {deepEqual( Stem("noticed"), "notic");});
test("notices -> notic", function() {deepEqual( Stem("notices"), "notic");});
test("noticing -> notic", function() {deepEqual( Stem("noticing"), "notic");});
test("notification -> notif", function() {deepEqual( Stem("notification"), "notif");});
test("notified -> notifi", function() {deepEqual( Stem("notified"), "notifi");});
test("noting -> note", function() {deepEqual( Stem("noting"), "note");});
test("notion -> notion", function() {deepEqual( Stem("notion"), "notion");});
test("notions -> notion", function() {deepEqual( Stem("notions"), "notion");});
test("notopods -> notopod", function() {deepEqual( Stem("notopods"), "notopod");});
test("notoriety -> notorieti", function() {deepEqual( Stem("notoriety"), "notorieti");});
test("notorious -> notori", function() {deepEqual( Stem("notorious"), "notori");});
test("notoriously -> notori", function() {deepEqual( Stem("notoriously"), "notori");});
test("notre -> notr", function() {deepEqual( Stem("notre"), "notr");});
test("notwithstanding -> notwithstand", function() {deepEqual( Stem("notwithstanding"), "notwithstand");});
test("nou -> nou", function() {deepEqual( Stem("nou"), "nou");});
test("nough -> nough", function() {deepEqual( Stem("nough"), "nough");});
test("nought -> nought", function() {deepEqual( Stem("nought"), "nought");});
test("noun -> noun", function() {deepEqual( Stem("noun"), "noun");});
test("nourish -> nourish", function() {deepEqual( Stem("nourish"), "nourish");});
test("nourished -> nourish", function() {deepEqual( Stem("nourished"), "nourish");});
test("nourishment -> nourish", function() {deepEqual( Stem("nourishment"), "nourish");});
test("nous -> nous", function() {deepEqual( Stem("nous"), "nous");});
test("nov -> nov", function() {deepEqual( Stem("nov"), "nov");});
test("novae -> nova", function() {deepEqual( Stem("novae"), "nova");});
test("novel -> novel", function() {deepEqual( Stem("novel"), "novel");});
test("novelist -> novelist", function() {deepEqual( Stem("novelist"), "novelist");});
test("novels -> novel", function() {deepEqual( Stem("novels"), "novel");});
test("novelties -> novelti", function() {deepEqual( Stem("novelties"), "novelti");});
test("novelty -> novelti", function() {deepEqual( Stem("novelty"), "novelti");});
test("november -> novemb", function() {deepEqual( Stem("november"), "novemb");});
test("novice -> novic", function() {deepEqual( Stem("novice"), "novic");});
test("novices -> novic", function() {deepEqual( Stem("novices"), "novic");});
test("novitiate -> noviti", function() {deepEqual( Stem("novitiate"), "noviti");});
test("novos -> novo", function() {deepEqual( Stem("novos"), "novo");});
test("now -> now", function() {deepEqual( Stem("now"), "now");});
test("nowadays -> nowaday", function() {deepEqual( Stem("nowadays"), "nowaday");});
test("noways -> noway", function() {deepEqual( Stem("noways"), "noway");});
test("nowhere -> nowher", function() {deepEqual( Stem("nowhere"), "nowher");});
test("nowheres -> nowher", function() {deepEqual( Stem("nowheres"), "nowher");});
test("nowise -> nowis", function() {deepEqual( Stem("nowise"), "nowis");});
test("nowt -> nowt", function() {deepEqual( Stem("nowt"), "nowt");});
test("noxious -> noxious", function() {deepEqual( Stem("noxious"), "noxious");});
test("nozzle -> nozzl", function() {deepEqual( Stem("nozzle"), "nozzl");});
test("nt -> nt", function() {deepEqual( Stem("nt"), "nt");});
test("nucleus -> nucleus", function() {deepEqual( Stem("nucleus"), "nucleus");});
test("nudge -> nudg", function() {deepEqual( Stem("nudge"), "nudg");});
test("nudged -> nudg", function() {deepEqual( Stem("nudged"), "nudg");});
test("nudges -> nudg", function() {deepEqual( Stem("nudges"), "nudg");});
test("nudging -> nudg", function() {deepEqual( Stem("nudging"), "nudg");});
test("nuisance -> nuisanc", function() {deepEqual( Stem("nuisance"), "nuisanc");});
test("nulla -> nulla", function() {deepEqual( Stem("nulla"), "nulla");});
test("nulliporae -> nullipora", function() {deepEqual( Stem("nulliporae"), "nullipora");});
test("numb -> numb", function() {deepEqual( Stem("numb"), "numb");});
test("numbed -> numb", function() {deepEqual( Stem("numbed"), "numb");});
test("number -> number", function() {deepEqual( Stem("number"), "number");});
test("numbered -> number", function() {deepEqual( Stem("numbered"), "number");});
test("numberless -> numberless", function() {deepEqual( Stem("numberless"), "numberless");});
test("numbers -> number", function() {deepEqual( Stem("numbers"), "number");});
test("numerical -> numer", function() {deepEqual( Stem("numerical"), "numer");});
test("numerous -> numer", function() {deepEqual( Stem("numerous"), "numer");});
test("nummularia -> nummularia", function() {deepEqual( Stem("nummularia"), "nummularia");});
test("numskull -> numskul", function() {deepEqual( Stem("numskull"), "numskul");});
test("nun -> nun", function() {deepEqual( Stem("nun"), "nun");});
test("nunnery -> nunneri", function() {deepEqual( Stem("nunnery"), "nunneri");});
test("nuptial -> nuptial", function() {deepEqual( Stem("nuptial"), "nuptial");});
test("nuptials -> nuptial", function() {deepEqual( Stem("nuptials"), "nuptial");});
test("nurse -> nurs", function() {deepEqual( Stem("nurse"), "nurs");});
test("nursed -> nurs", function() {deepEqual( Stem("nursed"), "nurs");});
test("nursemaid -> nursemaid", function() {deepEqual( Stem("nursemaid"), "nursemaid");});
test("nursery -> nurseri", function() {deepEqual( Stem("nursery"), "nurseri");});
test("nurses -> nurs", function() {deepEqual( Stem("nurses"), "nurs");});
test("nursing -> nurs", function() {deepEqual( Stem("nursing"), "nurs");});
test("nurture -> nurtur", function() {deepEqual( Stem("nurture"), "nurtur");});
test("nurtured -> nurtur", function() {deepEqual( Stem("nurtured"), "nurtur");});
test("nuss -> nuss", function() {deepEqual( Stem("nuss"), "nuss");});
test("nut -> nut", function() {deepEqual( Stem("nut"), "nut");});
test("nutcrackers -> nutcrack", function() {deepEqual( Stem("nutcrackers"), "nutcrack");});
test("nutmeg -> nutmeg", function() {deepEqual( Stem("nutmeg"), "nutmeg");});
test("nutriment -> nutriment", function() {deepEqual( Stem("nutriment"), "nutriment");});
test("nutritious -> nutriti", function() {deepEqual( Stem("nutritious"), "nutriti");});
test("nuts -> nut", function() {deepEqual( Stem("nuts"), "nut");});
test("nutshell -> nutshel", function() {deepEqual( Stem("nutshell"), "nutshel");});
test("nutshells -> nutshel", function() {deepEqual( Stem("nutshells"), "nutshel");});
test("nymph -> nymph", function() {deepEqual( Stem("nymph"), "nymph");});
test("nymphs -> nymph", function() {deepEqual( Stem("nymphs"), "nymph");});
test("o -> o", function() {deepEqual( Stem("o"), "o");});
test("oaf -> oaf", function() {deepEqual( Stem("oaf"), "oaf");});
test("oak -> oak", function() {deepEqual( Stem("oak"), "oak");});
test("oaken -> oaken", function() {deepEqual( Stem("oaken"), "oaken");});
test("oaks -> oak", function() {deepEqual( Stem("oaks"), "oak");});
test("oar -> oar", function() {deepEqual( Stem("oar"), "oar");});
test("oars -> oar", function() {deepEqual( Stem("oars"), "oar");});
test("oarsman -> oarsman", function() {deepEqual( Stem("oarsman"), "oarsman");});
test("oasis -> oasi", function() {deepEqual( Stem("oasis"), "oasi");});
test("oath -> oath", function() {deepEqual( Stem("oath"), "oath");});
test("oaths -> oath", function() {deepEqual( Stem("oaths"), "oath");});
test("oats -> oat", function() {deepEqual( Stem("oats"), "oat");});
test("oban -> oban", function() {deepEqual( Stem("oban"), "oban");});
test("obduracy -> obduraci", function() {deepEqual( Stem("obduracy"), "obduraci");});
test("obdurate -> obdur", function() {deepEqual( Stem("obdurate"), "obdur");});
test("obdurately -> obdur", function() {deepEqual( Stem("obdurately"), "obdur");});
test("obedience -> obedi", function() {deepEqual( Stem("obedience"), "obedi");});
test("obedient -> obedi", function() {deepEqual( Stem("obedient"), "obedi");});
test("obediently -> obedi", function() {deepEqual( Stem("obediently"), "obedi");});
test("obedt -> obedt", function() {deepEqual( Stem("obedt"), "obedt");});
test("obeisance -> obeis", function() {deepEqual( Stem("obeisance"), "obeis");});
test("obeisances -> obeis", function() {deepEqual( Stem("obeisances"), "obeis");});
test("obelisk -> obelisk", function() {deepEqual( Stem("obelisk"), "obelisk");});
test("obelisks -> obelisk", function() {deepEqual( Stem("obelisks"), "obelisk");});
test("obesity -> obes", function() {deepEqual( Stem("obesity"), "obes");});
test("obey -> obey", function() {deepEqual( Stem("obey"), "obey");});
test("obeyed -> obey", function() {deepEqual( Stem("obeyed"), "obey");});
test("obeyeth -> obeyeth", function() {deepEqual( Stem("obeyeth"), "obeyeth");});
test("obeying -> obey", function() {deepEqual( Stem("obeying"), "obey");});
test("obeys -> obey", function() {deepEqual( Stem("obeys"), "obey");});
test("obispo -> obispo", function() {deepEqual( Stem("obispo"), "obispo");});
test("obits -> obit", function() {deepEqual( Stem("obits"), "obit");});
test("object -> object", function() {deepEqual( Stem("object"), "object");});
test("objected -> object", function() {deepEqual( Stem("objected"), "object");});
test("objecting -> object", function() {deepEqual( Stem("objecting"), "object");});
test("objection -> object", function() {deepEqual( Stem("objection"), "object");});
test("objectionable -> objection", function() {deepEqual( Stem("objectionable"), "objection");});
test("objections -> object", function() {deepEqual( Stem("objections"), "object");});
test("objectless -> objectless", function() {deepEqual( Stem("objectless"), "objectless");});
test("objects -> object", function() {deepEqual( Stem("objects"), "object");});
test("obleege -> obleeg", function() {deepEqual( Stem("obleege"), "obleeg");});
test("obleeging -> obleeg", function() {deepEqual( Stem("obleeging"), "obleeg");});
test("obligation -> oblig", function() {deepEqual( Stem("obligation"), "oblig");});
test("obligations -> oblig", function() {deepEqual( Stem("obligations"), "oblig");});
test("oblige -> oblig", function() {deepEqual( Stem("oblige"), "oblig");});
test("obliged -> oblig", function() {deepEqual( Stem("obliged"), "oblig");});
test("obliges -> oblig", function() {deepEqual( Stem("obliges"), "oblig");});
test("obliging -> oblig", function() {deepEqual( Stem("obliging"), "oblig");});
test("obligingly -> oblig", function() {deepEqual( Stem("obligingly"), "oblig");});
test("obligingness -> obliging", function() {deepEqual( Stem("obligingness"), "obliging");});
test("oblique -> obliqu", function() {deepEqual( Stem("oblique"), "obliqu");});
test("obliterate -> obliter", function() {deepEqual( Stem("obliterate"), "obliter");});
test("obliterated -> obliter", function() {deepEqual( Stem("obliterated"), "obliter");});
test("obliterating -> obliter", function() {deepEqual( Stem("obliterating"), "obliter");});
test("obliteration -> obliter", function() {deepEqual( Stem("obliteration"), "obliter");});
test("oblivion -> oblivion", function() {deepEqual( Stem("oblivion"), "oblivion");});
test("oblivious -> oblivi", function() {deepEqual( Stem("oblivious"), "oblivi");});
test("oblong -> oblong", function() {deepEqual( Stem("oblong"), "oblong");});
test("obscene -> obscen", function() {deepEqual( Stem("obscene"), "obscen");});
test("obscenity -> obscen", function() {deepEqual( Stem("obscenity"), "obscen");});
test("obscure -> obscur", function() {deepEqual( Stem("obscure"), "obscur");});
test("obscured -> obscur", function() {deepEqual( Stem("obscured"), "obscur");});
test("obscurely -> obscur", function() {deepEqual( Stem("obscurely"), "obscur");});
test("obscures -> obscur", function() {deepEqual( Stem("obscures"), "obscur");});
test("obscuring -> obscur", function() {deepEqual( Stem("obscuring"), "obscur");});
test("obscurity -> obscur", function() {deepEqual( Stem("obscurity"), "obscur");});
test("obsequious -> obsequi", function() {deepEqual( Stem("obsequious"), "obsequi");});
test("obsequiousness -> obsequi", function() {deepEqual( Stem("obsequiousness"), "obsequi");});
test("observa -> observa", function() {deepEqual( Stem("observa"), "observa");});
test("observable -> observ", function() {deepEqual( Stem("observable"), "observ");});
test("observaciones -> observacion", function() {deepEqual( Stem("observaciones"), "observacion");});
test("observance -> observ", function() {deepEqual( Stem("observance"), "observ");});
test("observant -> observ", function() {deepEqual( Stem("observant"), "observ");});
test("observation -> observ", function() {deepEqual( Stem("observation"), "observ");});
test("observations -> observ", function() {deepEqual( Stem("observations"), "observ");});
test("observe -> observ", function() {deepEqual( Stem("observe"), "observ");});
test("observed -> observ", function() {deepEqual( Stem("observed"), "observ");});
test("observer -> observ", function() {deepEqual( Stem("observer"), "observ");});
test("observers -> observ", function() {deepEqual( Stem("observers"), "observ");});
test("observes -> observ", function() {deepEqual( Stem("observes"), "observ");});
test("observing -> observ", function() {deepEqual( Stem("observing"), "observ");});
test("obsession -> obsess", function() {deepEqual( Stem("obsession"), "obsess");});
test("obsolete -> obsolet", function() {deepEqual( Stem("obsolete"), "obsolet");});
test("obstacle -> obstacl", function() {deepEqual( Stem("obstacle"), "obstacl");});
test("obstacles -> obstacl", function() {deepEqual( Stem("obstacles"), "obstacl");});
test("obstinacy -> obstinaci", function() {deepEqual( Stem("obstinacy"), "obstinaci");});
test("obstinate -> obstin", function() {deepEqual( Stem("obstinate"), "obstin");});
test("obstinately -> obstin", function() {deepEqual( Stem("obstinately"), "obstin");});
test("obstructed -> obstruct", function() {deepEqual( Stem("obstructed"), "obstruct");});
test("obstructing -> obstruct", function() {deepEqual( Stem("obstructing"), "obstruct");});
test("obstruction -> obstruct", function() {deepEqual( Stem("obstruction"), "obstruct");});
test("obtain -> obtain", function() {deepEqual( Stem("obtain"), "obtain");});
test("obtainable -> obtain", function() {deepEqual( Stem("obtainable"), "obtain");});
test("obtained -> obtain", function() {deepEqual( Stem("obtained"), "obtain");});
test("obtaining -> obtain", function() {deepEqual( Stem("obtaining"), "obtain");});
test("obtains -> obtain", function() {deepEqual( Stem("obtains"), "obtain");});
test("obtruded -> obtrud", function() {deepEqual( Stem("obtruded"), "obtrud");});
test("obtruding -> obtrud", function() {deepEqual( Stem("obtruding"), "obtrud");});
test("obtrusive -> obtrus", function() {deepEqual( Stem("obtrusive"), "obtrus");});
test("obtrusively -> obtrus", function() {deepEqual( Stem("obtrusively"), "obtrus");});
test("obtuse -> obtus", function() {deepEqual( Stem("obtuse"), "obtus");});
test("obviating -> obviat", function() {deepEqual( Stem("obviating"), "obviat");});
test("obvious -> obvious", function() {deepEqual( Stem("obvious"), "obvious");});
test("obviously -> obvious", function() {deepEqual( Stem("obviously"), "obvious");});
test("occasion -> occas", function() {deepEqual( Stem("occasion"), "occas");});
test("occasional -> occasion", function() {deepEqual( Stem("occasional"), "occasion");});
test("occasionally -> occasion", function() {deepEqual( Stem("occasionally"), "occasion");});
test("occasioned -> occas", function() {deepEqual( Stem("occasioned"), "occas");});
test("occasioning -> occas", function() {deepEqual( Stem("occasioning"), "occas");});
test("occasions -> occas", function() {deepEqual( Stem("occasions"), "occas");});
test("occidentalis -> occidentali", function() {deepEqual( Stem("occidentalis"), "occidentali");});
test("occupancy -> occup", function() {deepEqual( Stem("occupancy"), "occup");});
test("occupant -> occup", function() {deepEqual( Stem("occupant"), "occup");});
test("occupants -> occup", function() {deepEqual( Stem("occupants"), "occup");});
test("occupation -> occup", function() {deepEqual( Stem("occupation"), "occup");});
test("occupations -> occup", function() {deepEqual( Stem("occupations"), "occup");});
test("occupied -> occupi", function() {deepEqual( Stem("occupied"), "occupi");});
test("occupier -> occupi", function() {deepEqual( Stem("occupier"), "occupi");});
test("occupiers -> occupi", function() {deepEqual( Stem("occupiers"), "occupi");});
test("occupies -> occupi", function() {deepEqual( Stem("occupies"), "occupi");});
test("occupy -> occupi", function() {deepEqual( Stem("occupy"), "occupi");});
test("occupying -> occupi", function() {deepEqual( Stem("occupying"), "occupi");});
test("occur -> occur", function() {deepEqual( Stem("occur"), "occur");});
test("occurred -> occur", function() {deepEqual( Stem("occurred"), "occur");});
test("occurrence -> occurr", function() {deepEqual( Stem("occurrence"), "occurr");});
test("occurrences -> occurr", function() {deepEqual( Stem("occurrences"), "occurr");});
test("occurring -> occur", function() {deepEqual( Stem("occurring"), "occur");});
test("occurs -> occur", function() {deepEqual( Stem("occurs"), "occur");});
test("ocean -> ocean", function() {deepEqual( Stem("ocean"), "ocean");});
test("oceanic -> ocean", function() {deepEqual( Stem("oceanic"), "ocean");});
test("oceans -> ocean", function() {deepEqual( Stem("oceans"), "ocean");});
test("och -> och", function() {deepEqual( Stem("och"), "och");});
test("octave -> octav", function() {deepEqual( Stem("octave"), "octav");});
test("octavia -> octavia", function() {deepEqual( Stem("octavia"), "octavia");});
test("octavo -> octavo", function() {deepEqual( Stem("octavo"), "octavo");});
test("october -> octob", function() {deepEqual( Stem("october"), "octob");});
test("octopus -> octopus", function() {deepEqual( Stem("octopus"), "octopus");});
test("ocular -> ocular", function() {deepEqual( Stem("ocular"), "ocular");});
test("odd -> odd", function() {deepEqual( Stem("odd"), "odd");});
test("odder -> odder", function() {deepEqual( Stem("odder"), "odder");});
test("oddest -> oddest", function() {deepEqual( Stem("oddest"), "oddest");});
test("oddities -> odditi", function() {deepEqual( Stem("oddities"), "odditi");});
test("oddity -> odditi", function() {deepEqual( Stem("oddity"), "odditi");});
test("oddly -> odd", function() {deepEqual( Stem("oddly"), "odd");});
test("oddness -> odd", function() {deepEqual( Stem("oddness"), "odd");});
test("odds -> odd", function() {deepEqual( Stem("odds"), "odd");});
test("ode -> ode", function() {deepEqual( Stem("ode"), "ode");});
test("odious -> odious", function() {deepEqual( Stem("odious"), "odious");});
test("odiously -> odious", function() {deepEqual( Stem("odiously"), "odious");});
test("odium -> odium", function() {deepEqual( Stem("odium"), "odium");});
test("odoriferous -> odorifer", function() {deepEqual( Stem("odoriferous"), "odorifer");});
test("odour -> odour", function() {deepEqual( Stem("odour"), "odour");});
test("odours -> odour", function() {deepEqual( Stem("odours"), "odour");});
test("ods -> od", function() {deepEqual( Stem("ods"), "od");});
test("oens -> oen", function() {deepEqual( Stem("oens"), "oen");});
test("oesophagus -> oesophagus", function() {deepEqual( Stem("oesophagus"), "oesophagus");});
test("oeuvre -> oeuvr", function() {deepEqual( Stem("oeuvre"), "oeuvr");});
test("of -> of", function() {deepEqual( Stem("of"), "of");});
test("off -> off", function() {deepEqual( Stem("off"), "off");});
test("offal -> offal", function() {deepEqual( Stem("offal"), "offal");});
test("offe -> off", function() {deepEqual( Stem("offe"), "off");});
test("offence -> offenc", function() {deepEqual( Stem("offence"), "offenc");});
test("offences -> offenc", function() {deepEqual( Stem("offences"), "offenc");});
test("offend -> offend", function() {deepEqual( Stem("offend"), "offend");});
test("offended -> offend", function() {deepEqual( Stem("offended"), "offend");});
test("offender -> offend", function() {deepEqual( Stem("offender"), "offend");});
test("offending -> offend", function() {deepEqual( Stem("offending"), "offend");});
test("offends -> offend", function() {deepEqual( Stem("offends"), "offend");});
test("offense -> offens", function() {deepEqual( Stem("offense"), "offens");});
test("offensive -> offens", function() {deepEqual( Stem("offensive"), "offens");});
test("offensively -> offens", function() {deepEqual( Stem("offensively"), "offens");});
test("offer -> offer", function() {deepEqual( Stem("offer"), "offer");});
test("offered -> offer", function() {deepEqual( Stem("offered"), "offer");});
test("offering -> offer", function() {deepEqual( Stem("offering"), "offer");});
test("offerings -> offer", function() {deepEqual( Stem("offerings"), "offer");});
test("offers -> offer", function() {deepEqual( Stem("offers"), "offer");});
test("office -> offic", function() {deepEqual( Stem("office"), "offic");});
test("officer -> offic", function() {deepEqual( Stem("officer"), "offic");});
test("officered -> offic", function() {deepEqual( Stem("officered"), "offic");});
test("officers -> offic", function() {deepEqual( Stem("officers"), "offic");});
test("offices -> offic", function() {deepEqual( Stem("offices"), "offic");});
test("official -> offici", function() {deepEqual( Stem("official"), "offici");});
test("officially -> offici", function() {deepEqual( Stem("officially"), "offici");});
test("officials -> offici", function() {deepEqual( Stem("officials"), "offici");});
test("officiates -> offici", function() {deepEqual( Stem("officiates"), "offici");});
test("officier -> offici", function() {deepEqual( Stem("officier"), "offici");});
test("officious -> offici", function() {deepEqual( Stem("officious"), "offici");});
test("officiously -> offici", function() {deepEqual( Stem("officiously"), "offici");});
test("offing -> of", function() {deepEqual( Stem("offing"), "of");});
test("offshoots -> offshoot", function() {deepEqual( Stem("offshoots"), "offshoot");});
test("offspring -> offspr", function() {deepEqual( Stem("offspring"), "offspr");});
test("oft -> oft", function() {deepEqual( Stem("oft"), "oft");});
test("often -> often", function() {deepEqual( Stem("often"), "often");});
test("oftener -> often", function() {deepEqual( Stem("oftener"), "often");});
test("oftenest -> oftenest", function() {deepEqual( Stem("oftenest"), "oftenest");});
test("oftentimes -> oftentim", function() {deepEqual( Stem("oftentimes"), "oftentim");});
test("ogles -> ogl", function() {deepEqual( Stem("ogles"), "ogl");});
test("ogre -> ogr", function() {deepEqual( Stem("ogre"), "ogr");});
test("ogreish -> ogreish", function() {deepEqual( Stem("ogreish"), "ogreish");});
test("oh -> oh", function() {deepEqual( Stem("oh"), "oh");});
test("ohnglaube -> ohnglaub", function() {deepEqual( Stem("ohnglaube"), "ohnglaub");});
test("oho -> oho", function() {deepEqual( Stem("oho"), "oho");});
test("oil -> oil", function() {deepEqual( Stem("oil"), "oil");});
test("oiliness -> oili", function() {deepEqual( Stem("oiliness"), "oili");});
test("oilskin -> oilskin", function() {deepEqual( Stem("oilskin"), "oilskin");});
test("oily -> oili", function() {deepEqual( Stem("oily"), "oili");});
test("ointment -> ointment", function() {deepEqual( Stem("ointment"), "ointment");});
test("ojection -> oject", function() {deepEqual( Stem("ojection"), "oject");});
test("ojos -> ojo", function() {deepEqual( Stem("ojos"), "ojo");});
test("old -> old", function() {deepEqual( Stem("old"), "old");});
test("older -> older", function() {deepEqual( Stem("older"), "older");});
test("oldest -> oldest", function() {deepEqual( Stem("oldest"), "oldest");});
test("ole -> ole", function() {deepEqual( Stem("ole"), "ole");});
test("olfactory -> olfactori", function() {deepEqual( Stem("olfactory"), "olfactori");});
test("olfersia -> olfersia", function() {deepEqual( Stem("olfersia"), "olfersia");});
test("olinda -> olinda", function() {deepEqual( Stem("olinda"), "olinda");});
test("oliva -> oliva", function() {deepEqual( Stem("oliva"), "oliva");});
test("olivasea -> olivasea", function() {deepEqual( Stem("olivasea"), "olivasea");});
test("olive -> oliv", function() {deepEqual( Stem("olive"), "oliv");});
test("olives -> oliv", function() {deepEqual( Stem("olives"), "oliv");});
test("olivia -> olivia", function() {deepEqual( Stem("olivia"), "olivia");});
test("ologies -> olog", function() {deepEqual( Stem("ologies"), "olog");});
test("olympus -> olympus", function() {deepEqual( Stem("olympus"), "olympus");});
test("ombu -> ombu", function() {deepEqual( Stem("ombu"), "ombu");});
test("omen -> omen", function() {deepEqual( Stem("omen"), "omen");});
test("ominous -> omin", function() {deepEqual( Stem("ominous"), "omin");});
test("omission -> omiss", function() {deepEqual( Stem("omission"), "omiss");});
test("omissions -> omiss", function() {deepEqual( Stem("omissions"), "omiss");});
test("omit -> omit", function() {deepEqual( Stem("omit"), "omit");});
test("omitted -> omit", function() {deepEqual( Stem("omitted"), "omit");});
test("omitting -> omit", function() {deepEqual( Stem("omitting"), "omit");});
test("omnibus -> omnibus", function() {deepEqual( Stem("omnibus"), "omnibus");});
test("omnibuses -> omnibus", function() {deepEqual( Stem("omnibuses"), "omnibus");});
test("omnipotence -> omnipot", function() {deepEqual( Stem("omnipotence"), "omnipot");});
test("omnipotent -> omnipot", function() {deepEqual( Stem("omnipotent"), "omnipot");});
test("omniscience -> omnisci", function() {deepEqual( Stem("omniscience"), "omnisci");});
test("omniscient -> omnisci", function() {deepEqual( Stem("omniscient"), "omnisci");});
test("omnium -> omnium", function() {deepEqual( Stem("omnium"), "omnium");});
test("omnivorous -> omnivor", function() {deepEqual( Stem("omnivorous"), "omnivor");});
test("on -> on", function() {deepEqual( Stem("on"), "on");});
test("once -> onc", function() {deepEqual( Stem("once"), "onc");});
test("one -> one", function() {deepEqual( Stem("one"), "one");});
test("oneness -> one", function() {deepEqual( Stem("oneness"), "one");});
test("onerous -> oner", function() {deepEqual( Stem("onerous"), "oner");});
test("ones -> one", function() {deepEqual( Stem("ones"), "one");});
test("oneself -> oneself", function() {deepEqual( Stem("oneself"), "oneself");});
test("onion -> onion", function() {deepEqual( Stem("onion"), "onion");});
test("onions -> onion", function() {deepEqual( Stem("onions"), "onion");});
test("oniscia -> oniscia", function() {deepEqual( Stem("oniscia"), "oniscia");});
test("only -> onli", function() {deepEqual( Stem("only"), "onli");});
test("ont -> ont", function() {deepEqual( Stem("ont"), "ont");});
test("onthophagus -> onthophagus", function() {deepEqual( Stem("onthophagus"), "onthophagus");});
test("onto -> onto", function() {deepEqual( Stem("onto"), "onto");});
test("onus -> onus", function() {deepEqual( Stem("onus"), "onus");});
test("onward -> onward", function() {deepEqual( Stem("onward"), "onward");});
test("onwards -> onward", function() {deepEqual( Stem("onwards"), "onward");});
test("onwholesome -> onwholesom", function() {deepEqual( Stem("onwholesome"), "onwholesom");});
test("ony -> oni", function() {deepEqual( Stem("ony"), "oni");});
test("oo -> oo", function() {deepEqual( Stem("oo"), "oo");});
test("ooman -> ooman", function() {deepEqual( Stem("ooman"), "ooman");});
test("oop -> oop", function() {deepEqual( Stem("oop"), "oop");});
test("oot -> oot", function() {deepEqual( Stem("oot"), "oot");});
test("oother -> oother", function() {deepEqual( Stem("oother"), "oother");});
test("ootside -> ootsid", function() {deepEqual( Stem("ootside"), "ootsid");});
test("ooze -> ooz", function() {deepEqual( Stem("ooze"), "ooz");});
test("oozed -> ooz", function() {deepEqual( Stem("oozed"), "ooz");});
test("oozes -> ooz", function() {deepEqual( Stem("oozes"), "ooz");});
test("opaque -> opaqu", function() {deepEqual( Stem("opaque"), "opaqu");});
test("ope -> ope", function() {deepEqual( Stem("ope"), "ope");});
test("open -> open", function() {deepEqual( Stem("open"), "open");});
test("opened -> open", function() {deepEqual( Stem("opened"), "open");});
test("opener -> open", function() {deepEqual( Stem("opener"), "open");});
test("opening -> open", function() {deepEqual( Stem("opening"), "open");});
test("openings -> open", function() {deepEqual( Stem("openings"), "open");});
test("openly -> open", function() {deepEqual( Stem("openly"), "open");});
test("openness -> open", function() {deepEqual( Stem("openness"), "open");});
test("opens -> open", function() {deepEqual( Stem("opens"), "open");});
test("opera -> opera", function() {deepEqual( Stem("opera"), "opera");});
test("operas -> opera", function() {deepEqual( Stem("operas"), "opera");});
test("operate -> oper", function() {deepEqual( Stem("operate"), "oper");});
test("operated -> oper", function() {deepEqual( Stem("operated"), "oper");});
test("operating -> oper", function() {deepEqual( Stem("operating"), "oper");});
test("operation -> oper", function() {deepEqual( Stem("operation"), "oper");});
test("operations -> oper", function() {deepEqual( Stem("operations"), "oper");});
test("operative -> oper", function() {deepEqual( Stem("operative"), "oper");});
test("operator -> oper", function() {deepEqual( Stem("operator"), "oper");});
test("operculum -> operculum", function() {deepEqual( Stem("operculum"), "operculum");});
test("opetiorhynchi -> opetiorhynchi", function() {deepEqual( Stem("opetiorhynchi"), "opetiorhynchi");});
test("opetiorhynchus -> opetiorhynchus", function() {deepEqual( Stem("opetiorhynchus"), "opetiorhynchus");});
test("ophrys -> ophri", function() {deepEqual( Stem("ophrys"), "ophri");});
test("opiate -> opiat", function() {deepEqual( Stem("opiate"), "opiat");});
test("opimon -> opimon", function() {deepEqual( Stem("opimon"), "opimon");});
test("opined -> opin", function() {deepEqual( Stem("opined"), "opin");});
test("opining -> opin", function() {deepEqual( Stem("opining"), "opin");});
test("opinion -> opinion", function() {deepEqual( Stem("opinion"), "opinion");});
test("opinionated -> opinion", function() {deepEqual( Stem("opinionated"), "opinion");});
test("opinionative -> opinion", function() {deepEqual( Stem("opinionative"), "opinion");});
test("opinions -> opinion", function() {deepEqual( Stem("opinions"), "opinion");});
test("opinlon -> opinlon", function() {deepEqual( Stem("opinlon"), "opinlon");});
test("opium -> opium", function() {deepEqual( Stem("opium"), "opium");});
test("opossum -> opossum", function() {deepEqual( Stem("opossum"), "opossum");});
test("opossums -> opossum", function() {deepEqual( Stem("opossums"), "opossum");});
test("opp -> opp", function() {deepEqual( Stem("opp"), "opp");});
test("opponent -> oppon", function() {deepEqual( Stem("opponent"), "oppon");});
test("opponents -> oppon", function() {deepEqual( Stem("opponents"), "oppon");});
test("opportune -> opportun", function() {deepEqual( Stem("opportune"), "opportun");});
test("opportunely -> opportun", function() {deepEqual( Stem("opportunely"), "opportun");});
test("opportunities -> opportun", function() {deepEqual( Stem("opportunities"), "opportun");});
test("opportunity -> opportun", function() {deepEqual( Stem("opportunity"), "opportun");});
test("oppose -> oppos", function() {deepEqual( Stem("oppose"), "oppos");});
test("opposed -> oppos", function() {deepEqual( Stem("opposed"), "oppos");});
test("opposing -> oppos", function() {deepEqual( Stem("opposing"), "oppos");});
test("opposite -> opposit", function() {deepEqual( Stem("opposite"), "opposit");});
test("opposites -> opposit", function() {deepEqual( Stem("opposites"), "opposit");});
test("opposition -> opposit", function() {deepEqual( Stem("opposition"), "opposit");});
test("oppress -> oppress", function() {deepEqual( Stem("oppress"), "oppress");});
test("oppressed -> oppress", function() {deepEqual( Stem("oppressed"), "oppress");});
test("oppression -> oppress", function() {deepEqual( Stem("oppression"), "oppress");});
test("oppressive -> oppress", function() {deepEqual( Stem("oppressive"), "oppress");});
test("oppressor -> oppressor", function() {deepEqual( Stem("oppressor"), "oppressor");});
test("opprobrious -> opprobri", function() {deepEqual( Stem("opprobrious"), "opprobri");});
test("optic -> optic", function() {deepEqual( Stem("optic"), "optic");});
test("optical -> optic", function() {deepEqual( Stem("optical"), "optic");});
test("opulence -> opul", function() {deepEqual( Stem("opulence"), "opul");});
test("opulent -> opul", function() {deepEqual( Stem("opulent"), "opul");});
test("opuntia -> opuntia", function() {deepEqual( Stem("opuntia"), "opuntia");});
test("opuntias -> opuntia", function() {deepEqual( Stem("opuntias"), "opuntia");});
test("or -> or", function() {deepEqual( Stem("or"), "or");});
test("oracle -> oracl", function() {deepEqual( Stem("oracle"), "oracl");});
test("oracularly -> oracular", function() {deepEqual( Stem("oracularly"), "oracular");});
test("oraison -> oraison", function() {deepEqual( Stem("oraison"), "oraison");});
test("orange -> orang", function() {deepEqual( Stem("orange"), "orang");});
test("orangeman -> orangeman", function() {deepEqual( Stem("orangeman"), "orangeman");});
test("oranges -> orang", function() {deepEqual( Stem("oranges"), "orang");});
test("oration -> orat", function() {deepEqual( Stem("oration"), "orat");});
test("orations -> orat", function() {deepEqual( Stem("orations"), "orat");});
test("orator -> orat", function() {deepEqual( Stem("orator"), "orat");});
test("orators -> orat", function() {deepEqual( Stem("orators"), "orat");});
test("oratory -> oratori", function() {deepEqual( Stem("oratory"), "oratori");});
test("orb -> orb", function() {deepEqual( Stem("orb"), "orb");});
test("orbigny -> orbigni", function() {deepEqual( Stem("orbigny"), "orbigni");});
test("orbignyi -> orbignyi", function() {deepEqual( Stem("orbignyi"), "orbignyi");});
test("orbingy -> orbingi", function() {deepEqual( Stem("orbingy"), "orbingi");});
test("orchard -> orchard", function() {deepEqual( Stem("orchard"), "orchard");});
test("orchards -> orchard", function() {deepEqual( Stem("orchards"), "orchard");});
test("orchestra -> orchestra", function() {deepEqual( Stem("orchestra"), "orchestra");});
test("orchideae -> orchidea", function() {deepEqual( Stem("orchideae"), "orchidea");});
test("orchideous -> orchid", function() {deepEqual( Stem("orchideous"), "orchid");});
test("orchids -> orchid", function() {deepEqual( Stem("orchids"), "orchid");});
test("orchis -> orchi", function() {deepEqual( Stem("orchis"), "orchi");});
test("ordained -> ordain", function() {deepEqual( Stem("ordained"), "ordain");});
test("ordeal -> ordeal", function() {deepEqual( Stem("ordeal"), "ordeal");});
test("order -> order", function() {deepEqual( Stem("order"), "order");});
test("ordered -> order", function() {deepEqual( Stem("ordered"), "order");});
test("ordering -> order", function() {deepEqual( Stem("ordering"), "order");});
test("orderly -> order", function() {deepEqual( Stem("orderly"), "order");});
test("orders -> order", function() {deepEqual( Stem("orders"), "order");});
test("ordinance -> ordin", function() {deepEqual( Stem("ordinance"), "ordin");});
test("ordinances -> ordin", function() {deepEqual( Stem("ordinances"), "ordin");});
test("ordinarily -> ordinarili", function() {deepEqual( Stem("ordinarily"), "ordinarili");});
test("ordinary -> ordinari", function() {deepEqual( Stem("ordinary"), "ordinari");});
test("ore -> ore", function() {deepEqual( Stem("ore"), "ore");});
test("ores -> ore", function() {deepEqual( Stem("ores"), "ore");});
test("organ -> organ", function() {deepEqual( Stem("organ"), "organ");});
test("organic -> organ", function() {deepEqual( Stem("organic"), "organ");});
test("organically -> organ", function() {deepEqual( Stem("organically"), "organ");});
test("organisation -> organis", function() {deepEqual( Stem("organisation"), "organis");});
test("organise -> organis", function() {deepEqual( Stem("organise"), "organis");});
test("organised -> organis", function() {deepEqual( Stem("organised"), "organis");});
test("organism -> organ", function() {deepEqual( Stem("organism"), "organ");});
test("organization -> organ", function() {deepEqual( Stem("organization"), "organ");});
test("organizations -> organ", function() {deepEqual( Stem("organizations"), "organ");});
test("organized -> organ", function() {deepEqual( Stem("organized"), "organ");});
test("organs -> organ", function() {deepEqual( Stem("organs"), "organ");});
test("orgies -> orgi", function() {deepEqual( Stem("orgies"), "orgi");});
test("oriels -> oriel", function() {deepEqual( Stem("oriels"), "oriel");});
test("oriental -> orient", function() {deepEqual( Stem("oriental"), "orient");});
test("orifice -> orific", function() {deepEqual( Stem("orifice"), "orific");});
test("orifices -> orific", function() {deepEqual( Stem("orifices"), "orific");});
test("origin -> origin", function() {deepEqual( Stem("origin"), "origin");});
test("original -> origin", function() {deepEqual( Stem("original"), "origin");});
test("originality -> origin", function() {deepEqual( Stem("originality"), "origin");});
test("originally -> origin", function() {deepEqual( Stem("originally"), "origin");});
test("originals -> origin", function() {deepEqual( Stem("originals"), "origin");});
test("originate -> origin", function() {deepEqual( Stem("originate"), "origin");});
test("originated -> origin", function() {deepEqual( Stem("originated"), "origin");});
test("originates -> origin", function() {deepEqual( Stem("originates"), "origin");});
test("originating -> origin", function() {deepEqual( Stem("originating"), "origin");});
test("originatinin -> originatinin", function() {deepEqual( Stem("originatinin"), "originatinin");});
test("orinoco -> orinoco", function() {deepEqual( Stem("orinoco"), "orinoco");});
test("orlando -> orlando", function() {deepEqual( Stem("orlando"), "orlando");});
test("orlandos -> orlando", function() {deepEqual( Stem("orlandos"), "orlando");});
test("ormolu -> ormolu", function() {deepEqual( Stem("ormolu"), "ormolu");});
test("ornament -> ornament", function() {deepEqual( Stem("ornament"), "ornament");});
test("ornamental -> ornament", function() {deepEqual( Stem("ornamental"), "ornament");});
test("ornamented -> ornament", function() {deepEqual( Stem("ornamented"), "ornament");});
test("ornamenting -> ornament", function() {deepEqual( Stem("ornamenting"), "ornament");});
test("ornaments -> ornament", function() {deepEqual( Stem("ornaments"), "ornament");});
test("ornithologist -> ornithologist", function() {deepEqual( Stem("ornithologist"), "ornithologist");});
test("ornithologists -> ornithologist", function() {deepEqual( Stem("ornithologists"), "ornithologist");});
test("ornithology -> ornitholog", function() {deepEqual( Stem("ornithology"), "ornitholog");});
test("ornithorhynchus -> ornithorhynchus", function() {deepEqual( Stem("ornithorhynchus"), "ornithorhynchus");});
test("orphan -> orphan", function() {deepEqual( Stem("orphan"), "orphan");});
test("orphaned -> orphan", function() {deepEqual( Stem("orphaned"), "orphan");});
test("orphanhood -> orphanhood", function() {deepEqual( Stem("orphanhood"), "orphanhood");});
test("orphans -> orphan", function() {deepEqual( Stem("orphans"), "orphan");});
test("orpheus -> orpheus", function() {deepEqual( Stem("orpheus"), "orpheus");});
test("orsono -> orsono", function() {deepEqual( Stem("orsono"), "orsono");});
test("orth -> orth", function() {deepEqual( Stem("orth"), "orth");});
test("orthodox -> orthodox", function() {deepEqual( Stem("orthodox"), "orthodox");});
test("orthography -> orthographi", function() {deepEqual( Stem("orthography"), "orthographi");});
test("orthoptera -> orthoptera", function() {deepEqual( Stem("orthoptera"), "orthoptera");});
test("oruro -> oruro", function() {deepEqual( Stem("oruro"), "oruro");});
test("oryctes -> oryct", function() {deepEqual( Stem("oryctes"), "oryct");});
test("oryzivorus -> oryzivorus", function() {deepEqual( Stem("oryzivorus"), "oryzivorus");});
test("oscillated -> oscil", function() {deepEqual( Stem("oscillated"), "oscil");});
test("oscillates -> oscil", function() {deepEqual( Stem("oscillates"), "oscil");});
test("oscillating -> oscil", function() {deepEqual( Stem("oscillating"), "oscil");});
test("oscillation -> oscil", function() {deepEqual( Stem("oscillation"), "oscil");});
test("oscillations -> oscil", function() {deepEqual( Stem("oscillations"), "oscil");});
test("osorno -> osorno", function() {deepEqual( Stem("osorno"), "osorno");});
test("ossemens -> ossemen", function() {deepEqual( Stem("ossemens"), "ossemen");});
test("osseous -> osseous", function() {deepEqual( Stem("osseous"), "osseous");});
test("ostend -> ostend", function() {deepEqual( Stem("ostend"), "ostend");});
test("ostensible -> ostens", function() {deepEqual( Stem("ostensible"), "ostens");});
test("ostensibly -> ostens", function() {deepEqual( Stem("ostensibly"), "ostens");});
test("ostentation -> ostent", function() {deepEqual( Stem("ostentation"), "ostent");});
test("ostentatious -> ostentati", function() {deepEqual( Stem("ostentatious"), "ostentati");});
test("ostentatiously -> ostentati", function() {deepEqual( Stem("ostentatiously"), "ostentati");});
test("ostler -> ostler", function() {deepEqual( Stem("ostler"), "ostler");});
test("ostlers -> ostler", function() {deepEqual( Stem("ostlers"), "ostler");});
test("ostrich -> ostrich", function() {deepEqual( Stem("ostrich"), "ostrich");});
test("ostriches -> ostrich", function() {deepEqual( Stem("ostriches"), "ostrich");});
test("ostrov -> ostrov", function() {deepEqual( Stem("ostrov"), "ostrov");});
test("oswald -> oswald", function() {deepEqual( Stem("oswald"), "oswald");});
test("osyth -> osyth", function() {deepEqual( Stem("osyth"), "osyth");});
test("otaheite -> otaheit", function() {deepEqual( Stem("otaheite"), "otaheit");});
test("othe -> oth", function() {deepEqual( Stem("othe"), "oth");});
test("othello -> othello", function() {deepEqual( Stem("othello"), "othello");});
test("other -> other", function() {deepEqual( Stem("other"), "other");});
test("othered -> other", function() {deepEqual( Stem("othered"), "other");});
test("others -> other", function() {deepEqual( Stem("others"), "other");});
test("otherwise -> otherwis", function() {deepEqual( Stem("otherwise"), "otherwis");});
test("otter -> otter", function() {deepEqual( Stem("otter"), "otter");});
test("otters -> otter", function() {deepEqual( Stem("otters"), "otter");});
test("otto -> otto", function() {deepEqual( Stem("otto"), "otto");});
test("ottoman -> ottoman", function() {deepEqual( Stem("ottoman"), "ottoman");});
test("ottomans -> ottoman", function() {deepEqual( Stem("ottomans"), "ottoman");});
test("otus -> otus", function() {deepEqual( Stem("otus"), "otus");});
test("ou -> ou", function() {deepEqual( Stem("ou"), "ou");});
test("ought -> ought", function() {deepEqual( Stem("ought"), "ought");});
test("oughtn -> oughtn", function() {deepEqual( Stem("oughtn"), "oughtn");});
test("oughts -> ought", function() {deepEqual( Stem("oughts"), "ought");});
test("ouly -> ouli", function() {deepEqual( Stem("ouly"), "ouli");});
test("oun -> oun", function() {deepEqual( Stem("oun"), "oun");});
test("ounce -> ounc", function() {deepEqual( Stem("ounce"), "ounc");});
test("ounces -> ounc", function() {deepEqual( Stem("ounces"), "ounc");});
test("our -> our", function() {deepEqual( Stem("our"), "our");});
test("ourangoutang -> ourangoutang", function() {deepEqual( Stem("ourangoutang"), "ourangoutang");});
test("ours -> our", function() {deepEqual( Stem("ours"), "our");});
test("oursel -> oursel", function() {deepEqual( Stem("oursel"), "oursel");});
test("ourselves -> ourselv", function() {deepEqual( Stem("ourselves"), "ourselv");});
test("ouse -> ous", function() {deepEqual( Stem("ouse"), "ous");});
test("ousting -> oust", function() {deepEqual( Stem("ousting"), "oust");});
test("out -> out", function() {deepEqual( Stem("out"), "out");});
test("outbidden -> outbidden", function() {deepEqual( Stem("outbidden"), "outbidden");});
test("outbreak -> outbreak", function() {deepEqual( Stem("outbreak"), "outbreak");});
test("outburst -> outburst", function() {deepEqual( Stem("outburst"), "outburst");});
test("outcast -> outcast", function() {deepEqual( Stem("outcast"), "outcast");});
test("outcasts -> outcast", function() {deepEqual( Stem("outcasts"), "outcast");});
test("outcries -> outcri", function() {deepEqual( Stem("outcries"), "outcri");});
test("outcry -> outcri", function() {deepEqual( Stem("outcry"), "outcri");});
test("outdie -> outdi", function() {deepEqual( Stem("outdie"), "outdi");});
test("outdone -> outdon", function() {deepEqual( Stem("outdone"), "outdon");});
test("outer -> outer", function() {deepEqual( Stem("outer"), "outer");});
test("outerest -> outerest", function() {deepEqual( Stem("outerest"), "outerest");});
test("outermost -> outermost", function() {deepEqual( Stem("outermost"), "outermost");});
test("outerside -> outersid", function() {deepEqual( Stem("outerside"), "outersid");});
test("outfit -> outfit", function() {deepEqual( Stem("outfit"), "outfit");});
test("outgoing -> outgo", function() {deepEqual( Stem("outgoing"), "outgo");});
test("outgoings -> outgo", function() {deepEqual( Stem("outgoings"), "outgo");});
test("outgrown -> outgrown", function() {deepEqual( Stem("outgrown"), "outgrown");});
test("outhouse -> outhous", function() {deepEqual( Stem("outhouse"), "outhous");});
test("outlandish -> outlandish", function() {deepEqual( Stem("outlandish"), "outlandish");});
test("outlaw -> outlaw", function() {deepEqual( Stem("outlaw"), "outlaw");});
test("outlaws -> outlaw", function() {deepEqual( Stem("outlaws"), "outlaw");});
test("outlay -> outlay", function() {deepEqual( Stem("outlay"), "outlay");});
test("outlet -> outlet", function() {deepEqual( Stem("outlet"), "outlet");});
test("outlets -> outlet", function() {deepEqual( Stem("outlets"), "outlet");});
test("outliers -> outlier", function() {deepEqual( Stem("outliers"), "outlier");});
test("outline -> outlin", function() {deepEqual( Stem("outline"), "outlin");});
test("outlines -> outlin", function() {deepEqual( Stem("outlines"), "outlin");});
test("outlive -> outliv", function() {deepEqual( Stem("outlive"), "outliv");});
test("outlived -> outliv", function() {deepEqual( Stem("outlived"), "outliv");});
test("outlook -> outlook", function() {deepEqual( Stem("outlook"), "outlook");});
test("outlying -> out", function() {deepEqual( Stem("outlying"), "out");});
test("outposts -> outpost", function() {deepEqual( Stem("outposts"), "outpost");});
test("outpouring -> outpour", function() {deepEqual( Stem("outpouring"), "outpour");});
test("outpourings -> outpour", function() {deepEqual( Stem("outpourings"), "outpour");});
test("outr -> outr", function() {deepEqual( Stem("outr"), "outr");});
test("outrage -> outrag", function() {deepEqual( Stem("outrage"), "outrag");});
test("outraged -> outrag", function() {deepEqual( Stem("outraged"), "outrag");});
test("outrageous -> outrag", function() {deepEqual( Stem("outrageous"), "outrag");});
test("outrageously -> outrag", function() {deepEqual( Stem("outrageously"), "outrag");});
test("outrages -> outrag", function() {deepEqual( Stem("outrages"), "outrag");});
test("outraging -> outrag", function() {deepEqual( Stem("outraging"), "outrag");});
test("outre -> outr", function() {deepEqual( Stem("outre"), "outr");});
test("outrigeously -> outrig", function() {deepEqual( Stem("outrigeously"), "outrig");});
test("outright -> outright", function() {deepEqual( Stem("outright"), "outright");});
test("outrun -> outrun", function() {deepEqual( Stem("outrun"), "outrun");});
test("outs -> out", function() {deepEqual( Stem("outs"), "out");});
test("outset -> outset", function() {deepEqual( Stem("outset"), "outset");});
test("outshine -> outshin", function() {deepEqual( Stem("outshine"), "outshin");});
test("outshone -> outshon", function() {deepEqual( Stem("outshone"), "outshon");});
test("outside -> outsid", function() {deepEqual( Stem("outside"), "outsid");});
test("outsider -> outsid", function() {deepEqual( Stem("outsider"), "outsid");});
test("outsiders -> outsid", function() {deepEqual( Stem("outsiders"), "outsid");});
test("outsides -> outsid", function() {deepEqual( Stem("outsides"), "outsid");});
test("outskirting -> outskirt", function() {deepEqual( Stem("outskirting"), "outskirt");});
test("outskirts -> outskirt", function() {deepEqual( Stem("outskirts"), "outskirt");});
test("outspoken -> outspoken", function() {deepEqual( Stem("outspoken"), "outspoken");});
test("outspread -> outspread", function() {deepEqual( Stem("outspread"), "outspread");});
test("outstanding -> outstand", function() {deepEqual( Stem("outstanding"), "outstand");});
test("outstep -> outstep", function() {deepEqual( Stem("outstep"), "outstep");});
test("outstretched -> outstretch", function() {deepEqual( Stem("outstretched"), "outstretch");});
test("outstripping -> outstrip", function() {deepEqual( Stem("outstripping"), "outstrip");});
test("outward -> outward", function() {deepEqual( Stem("outward"), "outward");});
test("outwardly -> outward", function() {deepEqual( Stem("outwardly"), "outward");});
test("outwards -> outward", function() {deepEqual( Stem("outwards"), "outward");});
test("outweigh -> outweigh", function() {deepEqual( Stem("outweigh"), "outweigh");});
test("outweighed -> outweigh", function() {deepEqual( Stem("outweighed"), "outweigh");});
test("outweighing -> outweigh", function() {deepEqual( Stem("outweighing"), "outweigh");});
test("ova -> ova", function() {deepEqual( Stem("ova"), "ova");});
test("oval -> oval", function() {deepEqual( Stem("oval"), "oval");});
test("ovarium -> ovarium", function() {deepEqual( Stem("ovarium"), "ovarium");});
test("ove -> ove", function() {deepEqual( Stem("ove"), "ove");});
test("oven -> oven", function() {deepEqual( Stem("oven"), "oven");});
test("ovens -> oven", function() {deepEqual( Stem("ovens"), "oven");});
test("over -> over", function() {deepEqual( Stem("over"), "over");});
test("overawe -> overaw", function() {deepEqual( Stem("overawe"), "overaw");});
test("overawed -> overaw", function() {deepEqual( Stem("overawed"), "overaw");});
test("overbalancing -> overbalanc", function() {deepEqual( Stem("overbalancing"), "overbalanc");});
test("overbearing -> overbear", function() {deepEqual( Stem("overbearing"), "overbear");});
test("overblown -> overblown", function() {deepEqual( Stem("overblown"), "overblown");});
test("overboard -> overboard", function() {deepEqual( Stem("overboard"), "overboard");});
test("overborne -> overborn", function() {deepEqual( Stem("overborne"), "overborn");});
test("overburdened -> overburden", function() {deepEqual( Stem("overburdened"), "overburden");});
test("overcame -> overcam", function() {deepEqual( Stem("overcame"), "overcam");});
test("overcast -> overcast", function() {deepEqual( Stem("overcast"), "overcast");});
test("overcoat -> overcoat", function() {deepEqual( Stem("overcoat"), "overcoat");});
test("overcome -> overcom", function() {deepEqual( Stem("overcome"), "overcom");});
test("overcoming -> overcom", function() {deepEqual( Stem("overcoming"), "overcom");});
test("overcrowed -> overcrow", function() {deepEqual( Stem("overcrowed"), "overcrow");});
test("overdid -> overdid", function() {deepEqual( Stem("overdid"), "overdid");});
test("overdo -> overdo", function() {deepEqual( Stem("overdo"), "overdo");});
test("overdoes -> overdo", function() {deepEqual( Stem("overdoes"), "overdo");});
test("overdoing -> overdo", function() {deepEqual( Stem("overdoing"), "overdo");});
test("overdone -> overdon", function() {deepEqual( Stem("overdone"), "overdon");});
test("overdriven -> overdriven", function() {deepEqual( Stem("overdriven"), "overdriven");});
test("overdue -> overdu", function() {deepEqual( Stem("overdue"), "overdu");});
test("overflow -> overflow", function() {deepEqual( Stem("overflow"), "overflow");});
test("overflowed -> overflow", function() {deepEqual( Stem("overflowed"), "overflow");});
test("overflowing -> overflow", function() {deepEqual( Stem("overflowing"), "overflow");});
test("overflows -> overflow", function() {deepEqual( Stem("overflows"), "overflow");});
test("overgrown -> overgrown", function() {deepEqual( Stem("overgrown"), "overgrown");});
test("overhanging -> overhang", function() {deepEqual( Stem("overhanging"), "overhang");});
test("overhangs -> overhang", function() {deepEqual( Stem("overhangs"), "overhang");});
test("overhaul -> overhaul", function() {deepEqual( Stem("overhaul"), "overhaul");});
test("overhead -> overhead", function() {deepEqual( Stem("overhead"), "overhead");});
test("overhear -> overhear", function() {deepEqual( Stem("overhear"), "overhear");});
test("overheard -> overheard", function() {deepEqual( Stem("overheard"), "overheard");});
test("overhearing -> overhear", function() {deepEqual( Stem("overhearing"), "overhear");});
test("overhung -> overhung", function() {deepEqual( Stem("overhung"), "overhung");});
test("overjoyed -> overjoy", function() {deepEqual( Stem("overjoyed"), "overjoy");});
test("overlaid -> overlaid", function() {deepEqual( Stem("overlaid"), "overlaid");});
test("overleap -> overleap", function() {deepEqual( Stem("overleap"), "overleap");});
test("overleaping -> overleap", function() {deepEqual( Stem("overleaping"), "overleap");});
test("overloaded -> overload", function() {deepEqual( Stem("overloaded"), "overload");});
test("overlook -> overlook", function() {deepEqual( Stem("overlook"), "overlook");});
test("overlooked -> overlook", function() {deepEqual( Stem("overlooked"), "overlook");});
test("overlookers -> overlook", function() {deepEqual( Stem("overlookers"), "overlook");});
test("overlooking -> overlook", function() {deepEqual( Stem("overlooking"), "overlook");});
test("overlying -> over", function() {deepEqual( Stem("overlying"), "over");});
test("overmuch -> overmuch", function() {deepEqual( Stem("overmuch"), "overmuch");});
test("overnight -> overnight", function() {deepEqual( Stem("overnight"), "overnight");});
test("overpowered -> overpow", function() {deepEqual( Stem("overpowered"), "overpow");});
test("overpowering -> overpow", function() {deepEqual( Stem("overpowering"), "overpow");});
test("overpoweringly -> overpow", function() {deepEqual( Stem("overpoweringly"), "overpow");});
test("overpowers -> overpow", function() {deepEqual( Stem("overpowers"), "overpow");});
test("overrated -> overr", function() {deepEqual( Stem("overrated"), "overr");});
test("overreached -> overreach", function() {deepEqual( Stem("overreached"), "overreach");});
test("overreaching -> overreach", function() {deepEqual( Stem("overreaching"), "overreach");});
test("overruled -> overrul", function() {deepEqual( Stem("overruled"), "overrul");});
test("overrun -> overrun", function() {deepEqual( Stem("overrun"), "overrun");});
test("overset -> overset", function() {deepEqual( Stem("overset"), "overset");});
test("overshadowed -> overshadow", function() {deepEqual( Stem("overshadowed"), "overshadow");});
test("overshadowing -> overshadow", function() {deepEqual( Stem("overshadowing"), "overshadow");});
test("overshadows -> overshadow", function() {deepEqual( Stem("overshadows"), "overshadow");});
test("oversleep -> oversleep", function() {deepEqual( Stem("oversleep"), "oversleep");});
test("oversleeping -> oversleep", function() {deepEqual( Stem("oversleeping"), "oversleep");});
test("overslept -> overslept", function() {deepEqual( Stem("overslept"), "overslept");});
test("overspreading -> overspread", function() {deepEqual( Stem("overspreading"), "overspread");});
test("overspreads -> overspread", function() {deepEqual( Stem("overspreads"), "overspread");});
test("overstated -> overst", function() {deepEqual( Stem("overstated"), "overst");});
test("overstating -> overst", function() {deepEqual( Stem("overstating"), "overst");});
test("overstep -> overstep", function() {deepEqual( Stem("overstep"), "overstep");});
test("overstepped -> overstep", function() {deepEqual( Stem("overstepped"), "overstep");});
test("overstepping -> overstep", function() {deepEqual( Stem("overstepping"), "overstep");});
test("overstrained -> overstrain", function() {deepEqual( Stem("overstrained"), "overstrain");});
test("overtake -> overtak", function() {deepEqual( Stem("overtake"), "overtak");});
test("overtaken -> overtaken", function() {deepEqual( Stem("overtaken"), "overtaken");});
test("overtakes -> overtak", function() {deepEqual( Stem("overtakes"), "overtak");});
test("overtaking -> overtak", function() {deepEqual( Stem("overtaking"), "overtak");});
test("overtask -> overtask", function() {deepEqual( Stem("overtask"), "overtask");});
test("overtasked -> overtask", function() {deepEqual( Stem("overtasked"), "overtask");});
test("overthrew -> overthrew", function() {deepEqual( Stem("overthrew"), "overthrew");});
test("overthrow -> overthrow", function() {deepEqual( Stem("overthrow"), "overthrow");});
test("overthrown -> overthrown", function() {deepEqual( Stem("overthrown"), "overthrown");});
test("overthrows -> overthrow", function() {deepEqual( Stem("overthrows"), "overthrow");});
test("overtime -> overtim", function() {deepEqual( Stem("overtime"), "overtim");});
test("overtook -> overtook", function() {deepEqual( Stem("overtook"), "overtook");});
test("overtures -> overtur", function() {deepEqual( Stem("overtures"), "overtur");});
test("overturn -> overturn", function() {deepEqual( Stem("overturn"), "overturn");});
test("overturned -> overturn", function() {deepEqual( Stem("overturned"), "overturn");});
test("overturning -> overturn", function() {deepEqual( Stem("overturning"), "overturn");});
test("overturns -> overturn", function() {deepEqual( Stem("overturns"), "overturn");});
test("overweening -> overween", function() {deepEqual( Stem("overweening"), "overween");});
test("overwhelm -> overwhelm", function() {deepEqual( Stem("overwhelm"), "overwhelm");});
test("overwhelmed -> overwhelm", function() {deepEqual( Stem("overwhelmed"), "overwhelm");});
test("overwhelming -> overwhelm", function() {deepEqual( Stem("overwhelming"), "overwhelm");});
test("overwhelmingly -> overwhelm", function() {deepEqual( Stem("overwhelmingly"), "overwhelm");});
test("overwhelms -> overwhelm", function() {deepEqual( Stem("overwhelms"), "overwhelm");});
test("overworked -> overwork", function() {deepEqual( Stem("overworked"), "overwork");});
test("overwrought -> overwrought", function() {deepEqual( Stem("overwrought"), "overwrought");});
test("ovules -> ovul", function() {deepEqual( Stem("ovules"), "ovul");});
test("ow -> ow", function() {deepEqual( Stem("ow"), "ow");});
test("owdacious -> owdaci", function() {deepEqual( Stem("owdacious"), "owdaci");});
test("owe -> owe", function() {deepEqual( Stem("owe"), "owe");});
test("owed -> owe", function() {deepEqual( Stem("owed"), "owe");});
test("owen -> owen", function() {deepEqual( Stem("owen"), "owen");});
test("ower -> ower", function() {deepEqual( Stem("ower"), "ower");});
test("owes -> owe", function() {deepEqual( Stem("owes"), "owe");});
test("owing -> owe", function() {deepEqual( Stem("owing"), "owe");});
test("owl -> owl", function() {deepEqual( Stem("owl"), "owl");});
test("owlish -> owlish", function() {deepEqual( Stem("owlish"), "owlish");});
test("owls -> owl", function() {deepEqual( Stem("owls"), "owl");});
test("own -> own", function() {deepEqual( Stem("own"), "own");});
test("owned -> own", function() {deepEqual( Stem("owned"), "own");});
test("owner -> owner", function() {deepEqual( Stem("owner"), "owner");});
test("owners -> owner", function() {deepEqual( Stem("owners"), "owner");});
test("ownership -> ownership", function() {deepEqual( Stem("ownership"), "ownership");});
test("owning -> own", function() {deepEqual( Stem("owning"), "own");});
test("owns -> own", function() {deepEqual( Stem("owns"), "own");});
test("owor -> owor", function() {deepEqual( Stem("owor"), "owor");});
test("ox -> ox", function() {deepEqual( Stem("ox"), "ox");});
test("oxen -> oxen", function() {deepEqual( Stem("oxen"), "oxen");});
test("oxford -> oxford", function() {deepEqual( Stem("oxford"), "oxford");});
test("oxidate -> oxid", function() {deepEqual( Stem("oxidate"), "oxid");});
test("oxides -> oxid", function() {deepEqual( Stem("oxides"), "oxid");});
test("oxyurus -> oxyurus", function() {deepEqual( Stem("oxyurus"), "oxyurus");});
test("oyster -> oyster", function() {deepEqual( Stem("oyster"), "oyster");});
test("oysters -> oyster", function() {deepEqual( Stem("oysters"), "oyster");});
test("p -> p", function() {deepEqual( Stem("p"), "p");});
test("pa -> pa", function() {deepEqual( Stem("pa"), "pa");});
test("pace -> pace", function() {deepEqual( Stem("pace"), "pace");});
test("paced -> pace", function() {deepEqual( Stem("paced"), "pace");});
test("paces -> pace", function() {deepEqual( Stem("paces"), "pace");});
test("pachydermata -> pachydermata", function() {deepEqual( Stem("pachydermata"), "pachydermata");});
test("pachydermatous -> pachydermat", function() {deepEqual( Stem("pachydermatous"), "pachydermat");});
test("pachydermous -> pachyderm", function() {deepEqual( Stem("pachydermous"), "pachyderm");});
test("pacific -> pacif", function() {deepEqual( Stem("pacific"), "pacif");});
test("pacified -> pacifi", function() {deepEqual( Stem("pacified"), "pacifi");});
test("pacify -> pacifi", function() {deepEqual( Stem("pacify"), "pacifi");});
test("pacifying -> pacifi", function() {deepEqual( Stem("pacifying"), "pacifi");});
test("pacing -> pace", function() {deepEqual( Stem("pacing"), "pace");});
test("pack -> pack", function() {deepEqual( Stem("pack"), "pack");});
test("package -> packag", function() {deepEqual( Stem("package"), "packag");});
test("packages -> packag", function() {deepEqual( Stem("packages"), "packag");});
test("packed -> pack", function() {deepEqual( Stem("packed"), "pack");});
test("packer -> packer", function() {deepEqual( Stem("packer"), "packer");});
test("packet -> packet", function() {deepEqual( Stem("packet"), "packet");});
test("packets -> packet", function() {deepEqual( Stem("packets"), "packet");});
test("packhorse -> packhors", function() {deepEqual( Stem("packhorse"), "packhors");});
test("packing -> pack", function() {deepEqual( Stem("packing"), "pack");});
test("packs -> pack", function() {deepEqual( Stem("packs"), "pack");});
test("pad -> pad", function() {deepEqual( Stem("pad"), "pad");});
test("padded -> pad", function() {deepEqual( Stem("padded"), "pad");});
test("paddled -> paddl", function() {deepEqual( Stem("paddled"), "paddl");});
test("paddles -> paddl", function() {deepEqual( Stem("paddles"), "paddl");});
test("paddling -> paddl", function() {deepEqual( Stem("paddling"), "paddl");});
test("paddock -> paddock", function() {deepEqual( Stem("paddock"), "paddock");});
test("padlock -> padlock", function() {deepEqual( Stem("padlock"), "padlock");});
test("padlocked -> padlock", function() {deepEqual( Stem("padlocked"), "padlock");});
test("padlocking -> padlock", function() {deepEqual( Stem("padlocking"), "padlock");});
test("padre -> padr", function() {deepEqual( Stem("padre"), "padr");});
test("padres -> padr", function() {deepEqual( Stem("padres"), "padr");});
test("pagan -> pagan", function() {deepEqual( Stem("pagan"), "pagan");});
test("page -> page", function() {deepEqual( Stem("page"), "page");});
test("pageant -> pageant", function() {deepEqual( Stem("pageant"), "pageant");});
test("pageants -> pageant", function() {deepEqual( Stem("pageants"), "pageant");});
test("pages -> page", function() {deepEqual( Stem("pages"), "page");});
test("pah -> pah", function() {deepEqual( Stem("pah"), "pah");});
test("pahia -> pahia", function() {deepEqual( Stem("pahia"), "pahia");});
test("paid -> paid", function() {deepEqual( Stem("paid"), "paid");});
test("pail -> pail", function() {deepEqual( Stem("pail"), "pail");});
test("pailfuls -> pail", function() {deepEqual( Stem("pailfuls"), "pail");});
test("pain -> pain", function() {deepEqual( Stem("pain"), "pain");});
test("pained -> pain", function() {deepEqual( Stem("pained"), "pain");});
test("painful -> pain", function() {deepEqual( Stem("painful"), "pain");});
test("painfullest -> painfullest", function() {deepEqual( Stem("painfullest"), "painfullest");});
test("painfully -> pain", function() {deepEqual( Stem("painfully"), "pain");});
test("pains -> pain", function() {deepEqual( Stem("pains"), "pain");});
test("painstaking -> painstak", function() {deepEqual( Stem("painstaking"), "painstak");});
test("paint -> paint", function() {deepEqual( Stem("paint"), "paint");});
test("painted -> paint", function() {deepEqual( Stem("painted"), "paint");});
test("painter -> painter", function() {deepEqual( Stem("painter"), "painter");});
test("painters -> painter", function() {deepEqual( Stem("painters"), "painter");});
test("painting -> paint", function() {deepEqual( Stem("painting"), "paint");});
test("paintings -> paint", function() {deepEqual( Stem("paintings"), "paint");});
test("paints -> paint", function() {deepEqual( Stem("paints"), "paint");});
test("pair -> pair", function() {deepEqual( Stem("pair"), "pair");});
test("paired -> pair", function() {deepEqual( Stem("paired"), "pair");});
test("pairing -> pair", function() {deepEqual( Stem("pairing"), "pair");});
test("pairs -> pair", function() {deepEqual( Stem("pairs"), "pair");});
test("palace -> palac", function() {deepEqual( Stem("palace"), "palac");});
test("palaces -> palac", function() {deepEqual( Stem("palaces"), "palac");});
test("paladin -> paladin", function() {deepEqual( Stem("paladin"), "paladin");});
test("palaeologos -> palaeologo", function() {deepEqual( Stem("palaeologos"), "palaeologo");});
test("palaeotherium -> palaeotherium", function() {deepEqual( Stem("palaeotherium"), "palaeotherium");});
test("palais -> palai", function() {deepEqual( Stem("palais"), "palai");});
test("palanquin -> palanquin", function() {deepEqual( Stem("palanquin"), "palanquin");});
test("palatable -> palat", function() {deepEqual( Stem("palatable"), "palat");});
test("palate -> palat", function() {deepEqual( Stem("palate"), "palat");});
test("palates -> palat", function() {deepEqual( Stem("palates"), "palat");});
test("pale -> pale", function() {deepEqual( Stem("pale"), "pale");});
test("paled -> pale", function() {deepEqual( Stem("paled"), "pale");});
test("palely -> pale", function() {deepEqual( Stem("palely"), "pale");});
test("paleness -> pale", function() {deepEqual( Stem("paleness"), "pale");});
test("paler -> paler", function() {deepEqual( Stem("paler"), "paler");});
test("palings -> pale", function() {deepEqual( Stem("palings"), "pale");});
test("pall -> pall", function() {deepEqual( Stem("pall"), "pall");});
test("palladium -> palladium", function() {deepEqual( Stem("palladium"), "palladium");});
test("pallas -> palla", function() {deepEqual( Stem("pallas"), "palla");});
test("palliate -> palliat", function() {deepEqual( Stem("palliate"), "palliat");});
test("palliated -> palliat", function() {deepEqual( Stem("palliated"), "palliat");});
test("palliation -> palliat", function() {deepEqual( Stem("palliation"), "palliat");});
test("pallid -> pallid", function() {deepEqual( Stem("pallid"), "pallid");});
test("palliser -> pallis", function() {deepEqual( Stem("palliser"), "pallis");});
test("pallisers -> pallis", function() {deepEqual( Stem("pallisers"), "pallis");});
test("pallor -> pallor", function() {deepEqual( Stem("pallor"), "pallor");});
test("palm -> palm", function() {deepEqual( Stem("palm"), "palm");});
test("palmer -> palmer", function() {deepEqual( Stem("palmer"), "palmer");});
test("palmerston -> palmerston", function() {deepEqual( Stem("palmerston"), "palmerston");});
test("palmes -> palm", function() {deepEqual( Stem("palmes"), "palm");});
test("palms -> palm", function() {deepEqual( Stem("palms"), "palm");});
test("palmy -> palmi", function() {deepEqual( Stem("palmy"), "palmi");});
test("palpable -> palpabl", function() {deepEqual( Stem("palpable"), "palpabl");});
test("palpably -> palpabl", function() {deepEqual( Stem("palpably"), "palpabl");});
test("palpitate -> palpit", function() {deepEqual( Stem("palpitate"), "palpit");});
test("palpitated -> palpit", function() {deepEqual( Stem("palpitated"), "palpit");});
test("palpitating -> palpit", function() {deepEqual( Stem("palpitating"), "palpit");});
test("palpitation -> palpit", function() {deepEqual( Stem("palpitation"), "palpit");});
test("palpitations -> palpit", function() {deepEqual( Stem("palpitations"), "palpit");});
test("pals -> pal", function() {deepEqual( Stem("pals"), "pal");});
test("palsy -> palsi", function() {deepEqual( Stem("palsy"), "palsi");});
test("paltry -> paltri", function() {deepEqual( Stem("paltry"), "paltri");});
test("paludina -> paludina", function() {deepEqual( Stem("paludina"), "paludina");});
test("pampaean -> pampaean", function() {deepEqual( Stem("pampaean"), "pampaean");});
test("pampas -> pampa", function() {deepEqual( Stem("pampas"), "pampa");});
test("pampean -> pampean", function() {deepEqual( Stem("pampean"), "pampean");});
test("pamper -> pamper", function() {deepEqual( Stem("pamper"), "pamper");});
test("pampered -> pamper", function() {deepEqual( Stem("pampered"), "pamper");});
test("pamphlet -> pamphlet", function() {deepEqual( Stem("pamphlet"), "pamphlet");});
test("pamphlets -> pamphlet", function() {deepEqual( Stem("pamphlets"), "pamphlet");});
test("pamplemousses -> pamplemouss", function() {deepEqual( Stem("pamplemousses"), "pamplemouss");});
test("pan -> pan", function() {deepEqual( Stem("pan"), "pan");});
test("panacea -> panacea", function() {deepEqual( Stem("panacea"), "panacea");});
test("panama -> panama", function() {deepEqual( Stem("panama"), "panama");});
test("pancake -> pancak", function() {deepEqual( Stem("pancake"), "pancak");});
test("pancakes -> pancak", function() {deepEqual( Stem("pancakes"), "pancak");});
test("pandanus -> pandanus", function() {deepEqual( Stem("pandanus"), "pandanus");});
test("pandemoniac -> pandemoniac", function() {deepEqual( Stem("pandemoniac"), "pandemoniac");});
test("pandemonium -> pandemonium", function() {deepEqual( Stem("pandemonium"), "pandemonium");});
test("pane -> pane", function() {deepEqual( Stem("pane"), "pane");});
test("panel -> panel", function() {deepEqual( Stem("panel"), "panel");});
test("panelled -> panel", function() {deepEqual( Stem("panelled"), "panel");});
test("panelling -> panel", function() {deepEqual( Stem("panelling"), "panel");});
test("panels -> panel", function() {deepEqual( Stem("panels"), "panel");});
test("panes -> pane", function() {deepEqual( Stem("panes"), "pane");});
test("pang -> pang", function() {deepEqual( Stem("pang"), "pang");});
test("pangs -> pang", function() {deepEqual( Stem("pangs"), "pang");});
test("pani -> pani", function() {deepEqual( Stem("pani"), "pani");});
test("panic -> panic", function() {deepEqual( Stem("panic"), "panic");});
test("panics -> panic", function() {deepEqual( Stem("panics"), "panic");});
test("panke -> pank", function() {deepEqual( Stem("panke"), "pank");});
test("pannikins -> pannikin", function() {deepEqual( Stem("pannikins"), "pannikin");});
test("panoply -> panopli", function() {deepEqual( Stem("panoply"), "panopli");});
test("panorama -> panorama", function() {deepEqual( Stem("panorama"), "panorama");});
test("pans -> pan", function() {deepEqual( Stem("pans"), "pan");});
test("pansies -> pansi", function() {deepEqual( Stem("pansies"), "pansi");});
test("pant -> pant", function() {deepEqual( Stem("pant"), "pant");});
test("pantaloons -> pantaloon", function() {deepEqual( Stem("pantaloons"), "pantaloon");});
test("panted -> pant", function() {deepEqual( Stem("panted"), "pant");});
test("panther -> panther", function() {deepEqual( Stem("panther"), "panther");});
test("panting -> pant", function() {deepEqual( Stem("panting"), "pant");});
test("pantomime -> pantomim", function() {deepEqual( Stem("pantomime"), "pantomim");});
test("pantomimes -> pantomim", function() {deepEqual( Stem("pantomimes"), "pantomim");});
test("pantomimist -> pantomimist", function() {deepEqual( Stem("pantomimist"), "pantomimist");});
test("pantry -> pantri", function() {deepEqual( Stem("pantry"), "pantri");});
test("pants -> pant", function() {deepEqual( Stem("pants"), "pant");});
test("panza -> panza", function() {deepEqual( Stem("panza"), "panza");});
test("papa -> papa", function() {deepEqual( Stem("papa"), "papa");});
test("papal -> papal", function() {deepEqual( Stem("papal"), "papal");});
test("papawa -> papawa", function() {deepEqual( Stem("papawa"), "papawa");});
test("paper -> paper", function() {deepEqual( Stem("paper"), "paper");});
test("papered -> paper", function() {deepEqual( Stem("papered"), "paper");});
test("papering -> paper", function() {deepEqual( Stem("papering"), "paper");});
test("papers -> paper", function() {deepEqual( Stem("papers"), "paper");});
test("papiete -> papiet", function() {deepEqual( Stem("papiete"), "papiet");});
test("papilio -> papilio", function() {deepEqual( Stem("papilio"), "papilio");});
test("papillae -> papilla", function() {deepEqual( Stem("papillae"), "papilla");});
test("papin -> papin", function() {deepEqual( Stem("papin"), "papin");});
test("papist -> papist", function() {deepEqual( Stem("papist"), "papist");});
test("paposo -> paposo", function() {deepEqual( Stem("paposo"), "paposo");});
test("par -> par", function() {deepEqual( Stem("par"), "par");});
test("parable -> parabl", function() {deepEqual( Stem("parable"), "parabl");});
test("parabola -> parabola", function() {deepEqual( Stem("parabola"), "parabola");});
test("parade -> parad", function() {deepEqual( Stem("parade"), "parad");});
test("paraded -> parad", function() {deepEqual( Stem("paraded"), "parad");});
test("parades -> parad", function() {deepEqual( Stem("parades"), "parad");});
test("paradise -> paradis", function() {deepEqual( Stem("paradise"), "paradis");});
test("paradox -> paradox", function() {deepEqual( Stem("paradox"), "paradox");});
test("paradoxical -> paradox", function() {deepEqual( Stem("paradoxical"), "paradox");});
test("paradoxus -> paradoxus", function() {deepEqual( Stem("paradoxus"), "paradoxus");});
test("paragon -> paragon", function() {deepEqual( Stem("paragon"), "paragon");});
test("paragraph -> paragraph", function() {deepEqual( Stem("paragraph"), "paragraph");});
test("paragraphs -> paragraph", function() {deepEqual( Stem("paragraphs"), "paragraph");});
test("paraguay -> paraguay", function() {deepEqual( Stem("paraguay"), "paraguay");});
test("parallel -> parallel", function() {deepEqual( Stem("parallel"), "parallel");});
test("parallelism -> parallel", function() {deepEqual( Stem("parallelism"), "parallel");});
test("paralyse -> paralys", function() {deepEqual( Stem("paralyse"), "paralys");});
test("paralysed -> paralys", function() {deepEqual( Stem("paralysed"), "paralys");});
test("paralysis -> paralysi", function() {deepEqual( Stem("paralysis"), "paralysi");});
test("paralytic -> paralyt", function() {deepEqual( Stem("paralytic"), "paralyt");});
test("paramatta -> paramatta", function() {deepEqual( Stem("paramatta"), "paramatta");});
test("paramount -> paramount", function() {deepEqual( Stem("paramount"), "paramount");});
test("parana -> parana", function() {deepEqual( Stem("parana"), "parana");});
test("parapet -> parapet", function() {deepEqual( Stem("parapet"), "parapet");});
test("parapets -> parapet", function() {deepEqual( Stem("parapets"), "parapet");});
test("parasha -> parasha", function() {deepEqual( Stem("parasha"), "parasha");});
test("parasite -> parasit", function() {deepEqual( Stem("parasite"), "parasit");});
test("parasites -> parasit", function() {deepEqual( Stem("parasites"), "parasit");});
test("parasitic -> parasit", function() {deepEqual( Stem("parasitic"), "parasit");});
test("parasitical -> parasit", function() {deepEqual( Stem("parasitical"), "parasit");});
test("parasol -> parasol", function() {deepEqual( Stem("parasol"), "parasol");});
test("parasols -> parasol", function() {deepEqual( Stem("parasols"), "parasol");});
test("parcel -> parcel", function() {deepEqual( Stem("parcel"), "parcel");});
test("parcels -> parcel", function() {deepEqual( Stem("parcels"), "parcel");});
test("parchappe -> parchapp", function() {deepEqual( Stem("parchappe"), "parchapp");});
test("parched -> parch", function() {deepEqual( Stem("parched"), "parch");});
test("parchment -> parchment", function() {deepEqual( Stem("parchment"), "parchment");});
test("parchments -> parchment", function() {deepEqual( Stem("parchments"), "parchment");});
test("parchmentses -> parchments", function() {deepEqual( Stem("parchmentses"), "parchments");});
test("pardiggle -> pardiggl", function() {deepEqual( Stem("pardiggle"), "pardiggl");});
test("pardiggles -> pardiggl", function() {deepEqual( Stem("pardiggles"), "pardiggl");});
test("pardon -> pardon", function() {deepEqual( Stem("pardon"), "pardon");});
test("pardonable -> pardon", function() {deepEqual( Stem("pardonable"), "pardon");});
test("pardoned -> pardon", function() {deepEqual( Stem("pardoned"), "pardon");});
test("pardoning -> pardon", function() {deepEqual( Stem("pardoning"), "pardon");});
test("pardons -> pardon", function() {deepEqual( Stem("pardons"), "pardon");});
test("pared -> pare", function() {deepEqual( Stem("pared"), "pare");});
test("parenchymatous -> parenchymat", function() {deepEqual( Stem("parenchymatous"), "parenchymat");});
test("parent -> parent", function() {deepEqual( Stem("parent"), "parent");});
test("parentage -> parentag", function() {deepEqual( Stem("parentage"), "parentag");});
test("parental -> parent", function() {deepEqual( Stem("parental"), "parent");});
test("parentheses -> parenthes", function() {deepEqual( Stem("parentheses"), "parenthes");});
test("parenthesis -> parenthesi", function() {deepEqual( Stem("parenthesis"), "parenthesi");});
test("parenthetically -> parenthet", function() {deepEqual( Stem("parenthetically"), "parenthet");});
test("parents -> parent", function() {deepEqual( Stem("parents"), "parent");});
test("pariah -> pariah", function() {deepEqual( Stem("pariah"), "pariah");});
test("paris -> pari", function() {deepEqual( Stem("paris"), "pari");});
test("parish -> parish", function() {deepEqual( Stem("parish"), "parish");});
test("parishes -> parish", function() {deepEqual( Stem("parishes"), "parish");});
test("parishioner -> parishion", function() {deepEqual( Stem("parishioner"), "parishion");});
test("parisian -> parisian", function() {deepEqual( Stem("parisian"), "parisian");});
test("parisians -> parisian", function() {deepEqual( Stem("parisians"), "parisian");});
test("park -> park", function() {deepEqual( Stem("park"), "park");});
test("parker -> parker", function() {deepEqual( Stem("parker"), "parker");});
test("parkers -> parker", function() {deepEqual( Stem("parkers"), "parker");});
test("parks -> park", function() {deepEqual( Stem("parks"), "park");});
test("parlance -> parlanc", function() {deepEqual( Stem("parlance"), "parlanc");});
test("parlay -> parlay", function() {deepEqual( Stem("parlay"), "parlay");});
test("parlaying -> parlay", function() {deepEqual( Stem("parlaying"), "parlay");});
test("parley -> parley", function() {deepEqual( Stem("parley"), "parley");});
test("parlez -> parlez", function() {deepEqual( Stem("parlez"), "parlez");});
test("parliament -> parliament", function() {deepEqual( Stem("parliament"), "parliament");});
test("parliamentary -> parliamentari", function() {deepEqual( Stem("parliamentary"), "parliamentari");});
test("parliaments -> parliament", function() {deepEqual( Stem("parliaments"), "parliament");});
test("parlour -> parlour", function() {deepEqual( Stem("parlour"), "parlour");});
test("parlours -> parlour", function() {deepEqual( Stem("parlours"), "parlour");});
test("parochial -> parochi", function() {deepEqual( Stem("parochial"), "parochi");});
test("parole -> parol", function() {deepEqual( Stem("parole"), "parol");});
test("paroxysm -> paroxysm", function() {deepEqual( Stem("paroxysm"), "paroxysm");});
test("paroxysms -> paroxysm", function() {deepEqual( Stem("paroxysms"), "paroxysm");});
test("parried -> parri", function() {deepEqual( Stem("parried"), "parri");});
test("parrot -> parrot", function() {deepEqual( Stem("parrot"), "parrot");});
test("parrots -> parrot", function() {deepEqual( Stem("parrots"), "parrot");});
test("parry -> parri", function() {deepEqual( Stem("parry"), "parri");});
test("parsimonious -> parsimoni", function() {deepEqual( Stem("parsimonious"), "parsimoni");});
test("parsimony -> parsimoni", function() {deepEqual( Stem("parsimony"), "parsimoni");});
test("parsley -> parsley", function() {deepEqual( Stem("parsley"), "parsley");});
test("parson -> parson", function() {deepEqual( Stem("parson"), "parson");});
test("parsonage -> parsonag", function() {deepEqual( Stem("parsonage"), "parsonag");});
test("part -> part", function() {deepEqual( Stem("part"), "part");});
test("partake -> partak", function() {deepEqual( Stem("partake"), "partak");});
test("partaken -> partaken", function() {deepEqual( Stem("partaken"), "partaken");});
test("partaker -> partak", function() {deepEqual( Stem("partaker"), "partak");});
test("partakes -> partak", function() {deepEqual( Stem("partakes"), "partak");});
test("partaking -> partak", function() {deepEqual( Stem("partaking"), "partak");});
test("parted -> part", function() {deepEqual( Stem("parted"), "part");});
test("parterre -> parterr", function() {deepEqual( Stem("parterre"), "parterr");});
test("parthenon -> parthenon", function() {deepEqual( Stem("parthenon"), "parthenon");});
test("parti -> parti", function() {deepEqual( Stem("parti"), "parti");});
test("partial -> partial", function() {deepEqual( Stem("partial"), "partial");});
test("partiality -> partial", function() {deepEqual( Stem("partiality"), "partial");});
test("partially -> partial", function() {deepEqual( Stem("partially"), "partial");});
test("participate -> particip", function() {deepEqual( Stem("participate"), "particip");});
test("participated -> particip", function() {deepEqual( Stem("participated"), "particip");});
test("participation -> particip", function() {deepEqual( Stem("participation"), "particip");});
test("particle -> particl", function() {deepEqual( Stem("particle"), "particl");});
test("particles -> particl", function() {deepEqual( Stem("particles"), "particl");});
test("particular -> particular", function() {deepEqual( Stem("particular"), "particular");});
test("particularised -> particularis", function() {deepEqual( Stem("particularised"), "particularis");});
test("particularity -> particular", function() {deepEqual( Stem("particularity"), "particular");});
test("particularly -> particular", function() {deepEqual( Stem("particularly"), "particular");});
test("particulars -> particular", function() {deepEqual( Stem("particulars"), "particular");});
test("parties -> parti", function() {deepEqual( Stem("parties"), "parti");});
test("parting -> part", function() {deepEqual( Stem("parting"), "part");});
test("partings -> part", function() {deepEqual( Stem("partings"), "part");});
test("partisans -> partisan", function() {deepEqual( Stem("partisans"), "partisan");});
test("partisanship -> partisanship", function() {deepEqual( Stem("partisanship"), "partisanship");});
test("partition -> partit", function() {deepEqual( Stem("partition"), "partit");});
test("partitioned -> partit", function() {deepEqual( Stem("partitioned"), "partit");});
test("partitions -> partit", function() {deepEqual( Stem("partitions"), "partit");});
test("partly -> part", function() {deepEqual( Stem("partly"), "part");});
test("partner -> partner", function() {deepEqual( Stem("partner"), "partner");});
test("partners -> partner", function() {deepEqual( Stem("partners"), "partner");});
test("partnership -> partnership", function() {deepEqual( Stem("partnership"), "partnership");});
test("partnerships -> partnership", function() {deepEqual( Stem("partnerships"), "partnership");});
test("partook -> partook", function() {deepEqual( Stem("partook"), "partook");});
test("partridge -> partridg", function() {deepEqual( Stem("partridge"), "partridg");});
test("partridges -> partridg", function() {deepEqual( Stem("partridges"), "partridg");});
test("parts -> part", function() {deepEqual( Stem("parts"), "part");});
test("party -> parti", function() {deepEqual( Stem("party"), "parti");});
test("parvula -> parvula", function() {deepEqual( Stem("parvula"), "parvula");});
test("parvulus -> parvulus", function() {deepEqual( Stem("parvulus"), "parvulus");});
test("pas -> pas", function() {deepEqual( Stem("pas"), "pas");});
test("pashenka -> pashenka", function() {deepEqual( Stem("pashenka"), "pashenka");});
test("pass -> pass", function() {deepEqual( Stem("pass"), "pass");});
test("passable -> passabl", function() {deepEqual( Stem("passable"), "passabl");});
test("passage -> passag", function() {deepEqual( Stem("passage"), "passag");});
test("passages -> passag", function() {deepEqual( Stem("passages"), "passag");});
test("passed -> pass", function() {deepEqual( Stem("passed"), "pass");});
test("passee -> passe", function() {deepEqual( Stem("passee"), "passe");});
test("passees -> passe", function() {deepEqual( Stem("passees"), "passe");});
test("passenger -> passeng", function() {deepEqual( Stem("passenger"), "passeng");});
test("passengers -> passeng", function() {deepEqual( Stem("passengers"), "passeng");});
test("passer -> passer", function() {deepEqual( Stem("passer"), "passer");});
test("passerby -> passerbi", function() {deepEqual( Stem("passerby"), "passerbi");});
test("passers -> passer", function() {deepEqual( Stem("passers"), "passer");});
test("passes -> pass", function() {deepEqual( Stem("passes"), "pass");});
test("passin -> passin", function() {deepEqual( Stem("passin"), "passin");});
test("passing -> pass", function() {deepEqual( Stem("passing"), "pass");});
test("passion -> passion", function() {deepEqual( Stem("passion"), "passion");});
test("passionate -> passion", function() {deepEqual( Stem("passionate"), "passion");});
test("passionately -> passion", function() {deepEqual( Stem("passionately"), "passion");});
test("passionless -> passionless", function() {deepEqual( Stem("passionless"), "passionless");});
test("passions -> passion", function() {deepEqual( Stem("passions"), "passion");});
test("passive -> passiv", function() {deepEqual( Stem("passive"), "passiv");});
test("passively -> passiv", function() {deepEqual( Stem("passively"), "passiv");});
test("passport -> passport", function() {deepEqual( Stem("passport"), "passport");});
test("passports -> passport", function() {deepEqual( Stem("passports"), "passport");});
test("passwords -> password", function() {deepEqual( Stem("passwords"), "password");});
test("past -> past", function() {deepEqual( Stem("past"), "past");});
test("pasteboard -> pasteboard", function() {deepEqual( Stem("pasteboard"), "pasteboard");});
test("pasted -> past", function() {deepEqual( Stem("pasted"), "past");});
test("pasthry -> pasthri", function() {deepEqual( Stem("pasthry"), "pasthri");});
test("pastime -> pastim", function() {deepEqual( Stem("pastime"), "pastim");});
test("pastoral -> pastor", function() {deepEqual( Stem("pastoral"), "pastor");});
test("pastors -> pastor", function() {deepEqual( Stem("pastors"), "pastor");});
test("pastry -> pastri", function() {deepEqual( Stem("pastry"), "pastri");});
test("pastrycook -> pastrycook", function() {deepEqual( Stem("pastrycook"), "pastrycook");});
test("pasturage -> pasturag", function() {deepEqual( Stem("pasturage"), "pasturag");});
test("pasture -> pastur", function() {deepEqual( Stem("pasture"), "pastur");});
test("pastures -> pastur", function() {deepEqual( Stem("pastures"), "pastur");});
test("pasty -> pasti", function() {deepEqual( Stem("pasty"), "pasti");});
test("pat -> pat", function() {deepEqual( Stem("pat"), "pat");});
test("patachonica -> patachonica", function() {deepEqual( Stem("patachonica"), "patachonica");});
test("patagones -> patagon", function() {deepEqual( Stem("patagones"), "patagon");});
test("patagonia -> patagonia", function() {deepEqual( Stem("patagonia"), "patagonia");});
test("patagonian -> patagonian", function() {deepEqual( Stem("patagonian"), "patagonian");});
test("patagonians -> patagonian", function() {deepEqual( Stem("patagonians"), "patagonian");});
test("patagonica -> patagonica", function() {deepEqual( Stem("patagonica"), "patagonica");});
test("patagonicus -> patagonicus", function() {deepEqual( Stem("patagonicus"), "patagonicus");});
test("patch -> patch", function() {deepEqual( Stem("patch"), "patch");});
test("patched -> patch", function() {deepEqual( Stem("patched"), "patch");});
test("patches -> patch", function() {deepEqual( Stem("patches"), "patch");});
test("patchwork -> patchwork", function() {deepEqual( Stem("patchwork"), "patchwork");});
test("patellae -> patella", function() {deepEqual( Stem("patellae"), "patella");});
test("patelliform -> patelliform", function() {deepEqual( Stem("patelliform"), "patelliform");});
test("patent -> patent", function() {deepEqual( Stem("patent"), "patent");});
test("paternal -> patern", function() {deepEqual( Stem("paternal"), "patern");});
test("paternally -> patern", function() {deepEqual( Stem("paternally"), "patern");});
test("path -> path", function() {deepEqual( Stem("path"), "path");});
test("pathetic -> pathet", function() {deepEqual( Stem("pathetic"), "pathet");});
test("pathetically -> pathet", function() {deepEqual( Stem("pathetically"), "pathet");});
test("pathetics -> pathet", function() {deepEqual( Stem("pathetics"), "pathet");});
test("pathos -> patho", function() {deepEqual( Stem("pathos"), "patho");});
test("paths -> path", function() {deepEqual( Stem("paths"), "path");});
test("pathway -> pathway", function() {deepEqual( Stem("pathway"), "pathway");});
test("pathways -> pathway", function() {deepEqual( Stem("pathways"), "pathway");});
test("patience -> patienc", function() {deepEqual( Stem("patience"), "patienc");});
test("patient -> patient", function() {deepEqual( Stem("patient"), "patient");});
test("patienter -> patient", function() {deepEqual( Stem("patienter"), "patient");});
test("patiently -> patient", function() {deepEqual( Stem("patiently"), "patient");});
test("patients -> patient", function() {deepEqual( Stem("patients"), "patient");});
test("patriarch -> patriarch", function() {deepEqual( Stem("patriarch"), "patriarch");});
test("patriarchal -> patriarch", function() {deepEqual( Stem("patriarchal"), "patriarch");});
test("patriarchs -> patriarch", function() {deepEqual( Stem("patriarchs"), "patriarch");});
test("patrician -> patrician", function() {deepEqual( Stem("patrician"), "patrician");});
test("patrick -> patrick", function() {deepEqual( Stem("patrick"), "patrick");});
test("patrimonial -> patrimoni", function() {deepEqual( Stem("patrimonial"), "patrimoni");});
test("patrimony -> patrimoni", function() {deepEqual( Stem("patrimony"), "patrimoni");});
test("patriot -> patriot", function() {deepEqual( Stem("patriot"), "patriot");});
test("patriotic -> patriot", function() {deepEqual( Stem("patriotic"), "patriot");});
test("patriotism -> patriot", function() {deepEqual( Stem("patriotism"), "patriot");});
test("patrolling -> patrol", function() {deepEqual( Stem("patrolling"), "patrol");});
test("patron -> patron", function() {deepEqual( Stem("patron"), "patron");});
test("patronage -> patronag", function() {deepEqual( Stem("patronage"), "patronag");});
test("patroness -> patro", function() {deepEqual( Stem("patroness"), "patro");});
test("patronesses -> patro", function() {deepEqual( Stem("patronesses"), "patro");});
test("patronise -> patronis", function() {deepEqual( Stem("patronise"), "patronis");});
test("patronised -> patronis", function() {deepEqual( Stem("patronised"), "patronis");});
test("patronising -> patronis", function() {deepEqual( Stem("patronising"), "patronis");});
test("patronize -> patron", function() {deepEqual( Stem("patronize"), "patron");});
test("patronized -> patron", function() {deepEqual( Stem("patronized"), "patron");});
test("patronizing -> patron", function() {deepEqual( Stem("patronizing"), "patron");});
test("patronizingly -> patron", function() {deepEqual( Stem("patronizingly"), "patron");});
test("patrons -> patron", function() {deepEqual( Stem("patrons"), "patron");});
test("pats -> pat", function() {deepEqual( Stem("pats"), "pat");});
test("patted -> pat", function() {deepEqual( Stem("patted"), "pat");});
test("pattening -> patten", function() {deepEqual( Stem("pattening"), "patten");});
test("pattens -> patten", function() {deepEqual( Stem("pattens"), "patten");});
test("patter -> patter", function() {deepEqual( Stem("patter"), "patter");});
test("pattered -> patter", function() {deepEqual( Stem("pattered"), "patter");});
test("pattering -> patter", function() {deepEqual( Stem("pattering"), "patter");});
test("pattern -> pattern", function() {deepEqual( Stem("pattern"), "pattern");});
test("patternless -> patternless", function() {deepEqual( Stem("patternless"), "patternless");});
test("patterns -> pattern", function() {deepEqual( Stem("patterns"), "pattern");});
test("patting -> pat", function() {deepEqual( Stem("patting"), "pat");});
test("patula -> patula", function() {deepEqual( Stem("patula"), "patula");});
test("paucity -> pauciti", function() {deepEqual( Stem("paucity"), "pauciti");});
test("paul -> paul", function() {deepEqual( Stem("paul"), "paul");});
test("pauline -> paulin", function() {deepEqual( Stem("pauline"), "paulin");});
test("paunch -> paunch", function() {deepEqual( Stem("paunch"), "paunch");});
test("paunchy -> paunchi", function() {deepEqual( Stem("paunchy"), "paunchi");});
test("pauper -> pauper", function() {deepEqual( Stem("pauper"), "pauper");});
test("paupers -> pauper", function() {deepEqual( Stem("paupers"), "pauper");});
test("pause -> paus", function() {deepEqual( Stem("pause"), "paus");});
test("paused -> paus", function() {deepEqual( Stem("paused"), "paus");});
test("pauses -> paus", function() {deepEqual( Stem("pauses"), "paus");});
test("pausilippo -> pausilippo", function() {deepEqual( Stem("pausilippo"), "pausilippo");});
test("pausing -> paus", function() {deepEqual( Stem("pausing"), "paus");});
test("pave -> pave", function() {deepEqual( Stem("pave"), "pave");});
test("paved -> pave", function() {deepEqual( Stem("paved"), "pave");});
test("pavement -> pavement", function() {deepEqual( Stem("pavement"), "pavement");});
test("pavements -> pavement", function() {deepEqual( Stem("pavements"), "pavement");});
test("pavilion -> pavilion", function() {deepEqual( Stem("pavilion"), "pavilion");});
test("paving -> pave", function() {deepEqual( Stem("paving"), "pave");});
test("paviour -> paviour", function() {deepEqual( Stem("paviour"), "paviour");});
test("pavlitch -> pavlitch", function() {deepEqual( Stem("pavlitch"), "pavlitch");});
test("pavlovitch -> pavlovitch", function() {deepEqual( Stem("pavlovitch"), "pavlovitch");});
test("pavlovna -> pavlovna", function() {deepEqual( Stem("pavlovna"), "pavlovna");});
test("paw -> paw", function() {deepEqual( Stem("paw"), "paw");});
test("pawn -> pawn", function() {deepEqual( Stem("pawn"), "pawn");});
test("pawnbroker -> pawnbrok", function() {deepEqual( Stem("pawnbroker"), "pawnbrok");});
test("pawnbrokers -> pawnbrok", function() {deepEqual( Stem("pawnbrokers"), "pawnbrok");});
test("pawned -> pawn", function() {deepEqual( Stem("pawned"), "pawn");});
test("paws -> paw", function() {deepEqual( Stem("paws"), "paw");});
test("pay -> pay", function() {deepEqual( Stem("pay"), "pay");});
test("payable -> payabl", function() {deepEqual( Stem("payable"), "payabl");});
test("paying -> pay", function() {deepEqual( Stem("paying"), "pay");});
test("payment -> payment", function() {deepEqual( Stem("payment"), "payment");});
test("payments -> payment", function() {deepEqual( Stem("payments"), "payment");});
test("paypote -> paypot", function() {deepEqual( Stem("paypote"), "paypot");});
test("pays -> pay", function() {deepEqual( Stem("pays"), "pay");});
test("pe -> pe", function() {deepEqual( Stem("pe"), "pe");});
test("pea -> pea", function() {deepEqual( Stem("pea"), "pea");});
test("peace -> peac", function() {deepEqual( Stem("peace"), "peac");});
test("peaceable -> peaceabl", function() {deepEqual( Stem("peaceable"), "peaceabl");});
test("peaceably -> peaceabl", function() {deepEqual( Stem("peaceably"), "peaceabl");});
test("peaceful -> peac", function() {deepEqual( Stem("peaceful"), "peac");});
test("peacefully -> peac", function() {deepEqual( Stem("peacefully"), "peac");});
test("peacefulness -> peac", function() {deepEqual( Stem("peacefulness"), "peac");});
test("peach -> peach", function() {deepEqual( Stem("peach"), "peach");});
test("peaches -> peach", function() {deepEqual( Stem("peaches"), "peach");});
test("peachy -> peachi", function() {deepEqual( Stem("peachy"), "peachi");});
test("peacock -> peacock", function() {deepEqual( Stem("peacock"), "peacock");});
test("peacocks -> peacock", function() {deepEqual( Stem("peacocks"), "peacock");});
test("peak -> peak", function() {deepEqual( Stem("peak"), "peak");});
test("peaked -> peak", function() {deepEqual( Stem("peaked"), "peak");});
test("peaks -> peak", function() {deepEqual( Stem("peaks"), "peak");});
test("peal -> peal", function() {deepEqual( Stem("peal"), "peal");});
test("pealed -> peal", function() {deepEqual( Stem("pealed"), "peal");});
test("peals -> peal", function() {deepEqual( Stem("peals"), "peal");});
test("pear -> pear", function() {deepEqual( Stem("pear"), "pear");});
test("pearl -> pearl", function() {deepEqual( Stem("pearl"), "pearl");});
test("pearls -> pearl", function() {deepEqual( Stem("pearls"), "pearl");});
test("pearly -> pear", function() {deepEqual( Stem("pearly"), "pear");});
test("pears -> pear", function() {deepEqual( Stem("pears"), "pear");});
test("peas -> pea", function() {deepEqual( Stem("peas"), "pea");});
test("peasant -> peasant", function() {deepEqual( Stem("peasant"), "peasant");});
test("peasantry -> peasantri", function() {deepEqual( Stem("peasantry"), "peasantri");});
test("peasants -> peasant", function() {deepEqual( Stem("peasants"), "peasant");});
test("pease -> peas", function() {deepEqual( Stem("pease"), "peas");});
test("peat -> peat", function() {deepEqual( Stem("peat"), "peat");});
test("peaty -> peati", function() {deepEqual( Stem("peaty"), "peati");});
test("pebble -> pebbl", function() {deepEqual( Stem("pebble"), "pebbl");});
test("pebbles -> pebbl", function() {deepEqual( Stem("pebbles"), "pebbl");});
test("pecado -> pecado", function() {deepEqual( Stem("pecado"), "pecado");});
test("peccari -> peccari", function() {deepEqual( Stem("peccari"), "peccari");});
test("peccaries -> peccari", function() {deepEqual( Stem("peccaries"), "peccari");});
test("peccet -> peccet", function() {deepEqual( Stem("peccet"), "peccet");});
test("peck -> peck", function() {deepEqual( Stem("peck"), "peck");});
test("pecker -> pecker", function() {deepEqual( Stem("pecker"), "pecker");});
test("pecking -> peck", function() {deepEqual( Stem("pecking"), "peck");});
test("pecoris -> pecori", function() {deepEqual( Stem("pecoris"), "pecori");});
test("pectoral -> pector", function() {deepEqual( Stem("pectoral"), "pector");});
test("peculation -> pecul", function() {deepEqual( Stem("peculation"), "pecul");});
test("peculiar -> peculiar", function() {deepEqual( Stem("peculiar"), "peculiar");});
test("peculiarities -> peculiar", function() {deepEqual( Stem("peculiarities"), "peculiar");});
test("peculiarity -> peculiar", function() {deepEqual( Stem("peculiarity"), "peculiar");});
test("peculiarly -> peculiar", function() {deepEqual( Stem("peculiarly"), "peculiar");});
test("pecuniarily -> pecuniarili", function() {deepEqual( Stem("pecuniarily"), "pecuniarili");});
test("pecuniary -> pecuniari", function() {deepEqual( Stem("pecuniary"), "pecuniari");});
test("pedagogue -> pedagogu", function() {deepEqual( Stem("pedagogue"), "pedagogu");});
test("pedantry -> pedantri", function() {deepEqual( Stem("pedantry"), "pedantri");});
test("pedestal -> pedest", function() {deepEqual( Stem("pedestal"), "pedest");});
test("pedestrian -> pedestrian", function() {deepEqual( Stem("pedestrian"), "pedestrian");});
test("pedigree -> pedigre", function() {deepEqual( Stem("pedigree"), "pedigre");});
test("pediment -> pediment", function() {deepEqual( Stem("pediment"), "pediment");});
test("pedlar -> pedlar", function() {deepEqual( Stem("pedlar"), "pedlar");});
test("pedlars -> pedlar", function() {deepEqual( Stem("pedlars"), "pedlar");});
test("pedro -> pedro", function() {deepEqual( Stem("pedro"), "pedro");});
test("peel -> peel", function() {deepEqual( Stem("peel"), "peel");});
test("peeled -> peel", function() {deepEqual( Stem("peeled"), "peel");});
test("peeling -> peel", function() {deepEqual( Stem("peeling"), "peel");});
test("peep -> peep", function() {deepEqual( Stem("peep"), "peep");});
test("peeped -> peep", function() {deepEqual( Stem("peeped"), "peep");});
test("peeping -> peep", function() {deepEqual( Stem("peeping"), "peep");});
test("peeps -> peep", function() {deepEqual( Stem("peeps"), "peep");});
test("peepy -> peepi", function() {deepEqual( Stem("peepy"), "peepi");});
test("peer -> peer", function() {deepEqual( Stem("peer"), "peer");});
test("peerage -> peerag", function() {deepEqual( Stem("peerage"), "peerag");});
test("peerages -> peerag", function() {deepEqual( Stem("peerages"), "peerag");});
test("peered -> peer", function() {deepEqual( Stem("peered"), "peer");});
test("peeresses -> peeress", function() {deepEqual( Stem("peeresses"), "peeress");});
test("peering -> peer", function() {deepEqual( Stem("peering"), "peer");});
test("peerless -> peerless", function() {deepEqual( Stem("peerless"), "peerless");});
test("peers -> peer", function() {deepEqual( Stem("peers"), "peer");});
test("peevish -> peevish", function() {deepEqual( Stem("peevish"), "peevish");});
test("peevishly -> peevish", function() {deepEqual( Stem("peevishly"), "peevish");});
test("peevishness -> peevish", function() {deepEqual( Stem("peevishness"), "peevish");});
test("peewit -> peewit", function() {deepEqual( Stem("peewit"), "peewit");});
test("peewits -> peewit", function() {deepEqual( Stem("peewits"), "peewit");});
test("peffer -> peffer", function() {deepEqual( Stem("peffer"), "peffer");});
test("peg -> peg", function() {deepEqual( Stem("peg"), "peg");});
test("pegasus -> pegasus", function() {deepEqual( Stem("pegasus"), "pegasus");});
test("pegged -> peg", function() {deepEqual( Stem("pegged"), "peg");});
test("pegs -> peg", function() {deepEqual( Stem("pegs"), "peg");});
test("pelacanoides -> pelacanoid", function() {deepEqual( Stem("pelacanoides"), "pelacanoid");});
test("pelagic -> pelag", function() {deepEqual( Stem("pelagic"), "pelag");});
test("pelham -> pelham", function() {deepEqual( Stem("pelham"), "pelham");});
test("pelisse -> peliss", function() {deepEqual( Stem("pelisse"), "peliss");});
test("pell -> pell", function() {deepEqual( Stem("pell"), "pell");});
test("pelt -> pelt", function() {deepEqual( Stem("pelt"), "pelt");});
test("pelted -> pelt", function() {deepEqual( Stem("pelted"), "pelt");});
test("pelting -> pelt", function() {deepEqual( Stem("pelting"), "pelt");});
test("peltirogus -> peltirogus", function() {deepEqual( Stem("peltirogus"), "peltirogus");});
test("peltiroguses -> peltirogus", function() {deepEqual( Stem("peltiroguses"), "peltirogus");});
test("peludo -> peludo", function() {deepEqual( Stem("peludo"), "peludo");});
test("pembroke -> pembrok", function() {deepEqual( Stem("pembroke"), "pembrok");});
test("pen -> pen", function() {deepEqual( Stem("pen"), "pen");});
test("penal -> penal", function() {deepEqual( Stem("penal"), "penal");});
test("penalties -> penalti", function() {deepEqual( Stem("penalties"), "penalti");});
test("penalty -> penalti", function() {deepEqual( Stem("penalty"), "penalti");});
test("penance -> penanc", function() {deepEqual( Stem("penance"), "penanc");});
test("penas -> pena", function() {deepEqual( Stem("penas"), "pena");});
test("pence -> penc", function() {deepEqual( Stem("pence"), "penc");});
test("pencil -> pencil", function() {deepEqual( Stem("pencil"), "pencil");});
test("pencilled -> pencil", function() {deepEqual( Stem("pencilled"), "pencil");});
test("pencils -> pencil", function() {deepEqual( Stem("pencils"), "pencil");});
test("pendant -> pendant", function() {deepEqual( Stem("pendant"), "pendant");});
test("pending -> pend", function() {deepEqual( Stem("pending"), "pend");});
test("pendulum -> pendulum", function() {deepEqual( Stem("pendulum"), "pendulum");});
test("penetrable -> penetr", function() {deepEqual( Stem("penetrable"), "penetr");});
test("penetrate -> penetr", function() {deepEqual( Stem("penetrate"), "penetr");});
test("penetrated -> penetr", function() {deepEqual( Stem("penetrated"), "penetr");});
test("penetrates -> penetr", function() {deepEqual( Stem("penetrates"), "penetr");});
test("penetrating -> penetr", function() {deepEqual( Stem("penetrating"), "penetr");});
test("penetration -> penetr", function() {deepEqual( Stem("penetration"), "penetr");});
test("penguin -> penguin", function() {deepEqual( Stem("penguin"), "penguin");});
test("penguins -> penguin", function() {deepEqual( Stem("penguins"), "penguin");});
test("peninsula -> peninsula", function() {deepEqual( Stem("peninsula"), "peninsula");});
test("peninsular -> peninsular", function() {deepEqual( Stem("peninsular"), "peninsular");});
test("penitence -> penit", function() {deepEqual( Stem("penitence"), "penit");});
test("penitent -> penit", function() {deepEqual( Stem("penitent"), "penit");});
test("penitential -> penitenti", function() {deepEqual( Stem("penitential"), "penitenti");});
test("penitents -> penit", function() {deepEqual( Stem("penitents"), "penit");});
test("penknife -> penknif", function() {deepEqual( Stem("penknife"), "penknif");});
test("penn -> penn", function() {deepEqual( Stem("penn"), "penn");});
test("penned -> pen", function() {deepEqual( Stem("penned"), "pen");});
test("penniless -> penniless", function() {deepEqual( Stem("penniless"), "penniless");});
test("penny -> penni", function() {deepEqual( Stem("penny"), "penni");});
test("pennyworth -> pennyworth", function() {deepEqual( Stem("pennyworth"), "pennyworth");});
test("pens -> pen", function() {deepEqual( Stem("pens"), "pen");});
test("pension -> pension", function() {deepEqual( Stem("pension"), "pension");});
test("pensioner -> pension", function() {deepEqual( Stem("pensioner"), "pension");});
test("pensioners -> pension", function() {deepEqual( Stem("pensioners"), "pension");});
test("pensioning -> pension", function() {deepEqual( Stem("pensioning"), "pension");});
test("pensions -> pension", function() {deepEqual( Stem("pensions"), "pension");});
test("pensive -> pensiv", function() {deepEqual( Stem("pensive"), "pensiv");});
test("pensively -> pensiv", function() {deepEqual( Stem("pensively"), "pensiv");});
test("pensiveness -> pensiv", function() {deepEqual( Stem("pensiveness"), "pensiv");});
test("pent -> pent", function() {deepEqual( Stem("pent"), "pent");});
test("pentland -> pentland", function() {deepEqual( Stem("pentland"), "pentland");});
test("penton -> penton", function() {deepEqual( Stem("penton"), "penton");});
test("pentonville -> pentonvill", function() {deepEqual( Stem("pentonville"), "pentonvill");});
test("penultimate -> penultim", function() {deepEqual( Stem("penultimate"), "penultim");});
test("penury -> penuri", function() {deepEqual( Stem("penury"), "penuri");});
test("peony -> peoni", function() {deepEqual( Stem("peony"), "peoni");});
test("people -> peopl", function() {deepEqual( Stem("people"), "peopl");});
test("peopled -> peopl", function() {deepEqual( Stem("peopled"), "peopl");});
test("peoples -> peopl", function() {deepEqual( Stem("peoples"), "peopl");});
test("pepper -> pepper", function() {deepEqual( Stem("pepper"), "pepper");});
test("pepsis -> pepsi", function() {deepEqual( Stem("pepsis"), "pepsi");});
test("per -> per", function() {deepEqual( Stem("per"), "per");});
test("perceive -> perceiv", function() {deepEqual( Stem("perceive"), "perceiv");});
test("perceived -> perceiv", function() {deepEqual( Stem("perceived"), "perceiv");});
test("perceives -> perceiv", function() {deepEqual( Stem("perceives"), "perceiv");});
test("perceiving -> perceiv", function() {deepEqual( Stem("perceiving"), "perceiv");});
test("percent -> percent", function() {deepEqual( Stem("percent"), "percent");});
test("percentage -> percentag", function() {deepEqual( Stem("percentage"), "percentag");});
test("percentages -> percentag", function() {deepEqual( Stem("percentages"), "percentag");});
test("perceptible -> percept", function() {deepEqual( Stem("perceptible"), "percept");});
test("perceptibly -> percept", function() {deepEqual( Stem("perceptibly"), "percept");});
test("perception -> percept", function() {deepEqual( Stem("perception"), "percept");});
test("perceptions -> percept", function() {deepEqual( Stem("perceptions"), "percept");});
test("percepts -> percept", function() {deepEqual( Stem("percepts"), "percept");});
test("perch -> perch", function() {deepEqual( Stem("perch"), "perch");});
test("percha -> percha", function() {deepEqual( Stem("percha"), "percha");});
test("perchance -> perchanc", function() {deepEqual( Stem("perchance"), "perchanc");});
test("perched -> perch", function() {deepEqual( Stem("perched"), "perch");});
test("perches -> perch", function() {deepEqual( Stem("perches"), "perch");});
test("percival -> perciv", function() {deepEqual( Stem("percival"), "perciv");});
test("percolates -> percol", function() {deepEqual( Stem("percolates"), "percol");});
test("percolating -> percol", function() {deepEqual( Stem("percolating"), "percol");});
test("percolation -> percol", function() {deepEqual( Stem("percolation"), "percol");});
test("percy -> perci", function() {deepEqual( Stem("percy"), "perci");});
test("perdition -> perdit", function() {deepEqual( Stem("perdition"), "perdit");});
test("peremptorily -> peremptorili", function() {deepEqual( Stem("peremptorily"), "peremptorili");});
test("peremptory -> peremptori", function() {deepEqual( Stem("peremptory"), "peremptori");});
test("perennial -> perenni", function() {deepEqual( Stem("perennial"), "perenni");});
test("perennially -> perenni", function() {deepEqual( Stem("perennially"), "perenni");});
test("perfecfly -> perfecfli", function() {deepEqual( Stem("perfecfly"), "perfecfli");});
test("perfect -> perfect", function() {deepEqual( Stem("perfect"), "perfect");});
test("perfected -> perfect", function() {deepEqual( Stem("perfected"), "perfect");});
test("perfection -> perfect", function() {deepEqual( Stem("perfection"), "perfect");});
test("perfections -> perfect", function() {deepEqual( Stem("perfections"), "perfect");});
test("perfectly -> perfect", function() {deepEqual( Stem("perfectly"), "perfect");});
test("perfidy -> perfidi", function() {deepEqual( Stem("perfidy"), "perfidi");});
test("perforate -> perfor", function() {deepEqual( Stem("perforate"), "perfor");});
test("perforated -> perfor", function() {deepEqual( Stem("perforated"), "perfor");});
test("perforce -> perforc", function() {deepEqual( Stem("perforce"), "perforc");});
test("perform -> perform", function() {deepEqual( Stem("perform"), "perform");});
test("performance -> perform", function() {deepEqual( Stem("performance"), "perform");});
test("performances -> perform", function() {deepEqual( Stem("performances"), "perform");});
test("performed -> perform", function() {deepEqual( Stem("performed"), "perform");});
test("performer -> perform", function() {deepEqual( Stem("performer"), "perform");});
test("performers -> perform", function() {deepEqual( Stem("performers"), "perform");});
test("performing -> perform", function() {deepEqual( Stem("performing"), "perform");});
test("performs -> perform", function() {deepEqual( Stem("performs"), "perform");});
test("perfume -> perfum", function() {deepEqual( Stem("perfume"), "perfum");});
test("perfumed -> perfum", function() {deepEqual( Stem("perfumed"), "perfum");});
test("perfumery -> perfumeri", function() {deepEqual( Stem("perfumery"), "perfumeri");});
test("perfumes -> perfum", function() {deepEqual( Stem("perfumes"), "perfum");});
test("perhaps -> perhap", function() {deepEqual( Stem("perhaps"), "perhap");});
test("periagua -> periagua", function() {deepEqual( Stem("periagua"), "periagua");});
test("perianth -> perianth", function() {deepEqual( Stem("perianth"), "perianth");});
test("pericardium -> pericardium", function() {deepEqual( Stem("pericardium"), "pericardium");});
test("peril -> peril", function() {deepEqual( Stem("peril"), "peril");});
test("perilled -> peril", function() {deepEqual( Stem("perilled"), "peril");});
test("perilous -> peril", function() {deepEqual( Stem("perilous"), "peril");});
test("perilously -> peril", function() {deepEqual( Stem("perilously"), "peril");});
test("perils -> peril", function() {deepEqual( Stem("perils"), "peril");});
test("period -> period", function() {deepEqual( Stem("period"), "period");});
test("periodical -> period", function() {deepEqual( Stem("periodical"), "period");});
test("periodically -> period", function() {deepEqual( Stem("periodically"), "period");});
test("periodicals -> period", function() {deepEqual( Stem("periodicals"), "period");});
test("periods -> period", function() {deepEqual( Stem("periods"), "period");});
test("perish -> perish", function() {deepEqual( Stem("perish"), "perish");});
test("perishable -> perish", function() {deepEqual( Stem("perishable"), "perish");});
test("perished -> perish", function() {deepEqual( Stem("perished"), "perish");});
test("perishing -> perish", function() {deepEqual( Stem("perishing"), "perish");});
test("perjured -> perjur", function() {deepEqual( Stem("perjured"), "perjur");});
test("perjury -> perjuri", function() {deepEqual( Stem("perjury"), "perjuri");});
test("perkins -> perkin", function() {deepEqual( Stem("perkins"), "perkin");});
test("perlen -> perlen", function() {deepEqual( Stem("perlen"), "perlen");});
test("permanence -> perman", function() {deepEqual( Stem("permanence"), "perman");});
test("permanent -> perman", function() {deepEqual( Stem("permanent"), "perman");});
test("permanently -> perman", function() {deepEqual( Stem("permanently"), "perman");});
test("permeated -> permeat", function() {deepEqual( Stem("permeated"), "permeat");});
test("permissable -> permiss", function() {deepEqual( Stem("permissable"), "permiss");});
test("permissible -> permiss", function() {deepEqual( Stem("permissible"), "permiss");});
test("permission -> permiss", function() {deepEqual( Stem("permission"), "permiss");});
test("permit -> permit", function() {deepEqual( Stem("permit"), "permit");});
test("permitted -> permit", function() {deepEqual( Stem("permitted"), "permit");});
test("permitting -> permit", function() {deepEqual( Stem("permitting"), "permit");});
test("pernambuco -> pernambuco", function() {deepEqual( Stem("pernambuco"), "pernambuco");});
test("pernety -> perneti", function() {deepEqual( Stem("pernety"), "perneti");});
test("pernicious -> pernici", function() {deepEqual( Stem("pernicious"), "pernici");});
test("peron -> peron", function() {deepEqual( Stem("peron"), "peron");});
test("peroration -> peror", function() {deepEqual( Stem("peroration"), "peror");});
test("perpendicular -> perpendicular", function() {deepEqual( Stem("perpendicular"), "perpendicular");});
test("perpendicularly -> perpendicular", function() {deepEqual( Stem("perpendicularly"), "perpendicular");});
test("perpetrated -> perpetr", function() {deepEqual( Stem("perpetrated"), "perpetr");});
test("perpetration -> perpetr", function() {deepEqual( Stem("perpetration"), "perpetr");});
test("perpetrator -> perpetr", function() {deepEqual( Stem("perpetrator"), "perpetr");});
test("perpetrators -> perpetr", function() {deepEqual( Stem("perpetrators"), "perpetr");});
test("perpetual -> perpetu", function() {deepEqual( Stem("perpetual"), "perpetu");});
test("perpetually -> perpetu", function() {deepEqual( Stem("perpetually"), "perpetu");});
test("perpetuate -> perpetu", function() {deepEqual( Stem("perpetuate"), "perpetu");});
test("perpetuated -> perpetu", function() {deepEqual( Stem("perpetuated"), "perpetu");});
test("perpetuating -> perpetu", function() {deepEqual( Stem("perpetuating"), "perpetu");});
test("perpetuity -> perpetu", function() {deepEqual( Stem("perpetuity"), "perpetu");});
test("perplex -> perplex", function() {deepEqual( Stem("perplex"), "perplex");});
test("perplexed -> perplex", function() {deepEqual( Stem("perplexed"), "perplex");});
test("perplexing -> perplex", function() {deepEqual( Stem("perplexing"), "perplex");});
test("perplexities -> perplex", function() {deepEqual( Stem("perplexities"), "perplex");});
test("perplexity -> perplex", function() {deepEqual( Stem("perplexity"), "perplex");});
test("perquisition -> perquisit", function() {deepEqual( Stem("perquisition"), "perquisit");});
test("perquisitions -> perquisit", function() {deepEqual( Stem("perquisitions"), "perquisit");});
test("pers -> per", function() {deepEqual( Stem("pers"), "per");});
test("persecute -> persecut", function() {deepEqual( Stem("persecute"), "persecut");});
test("persecuted -> persecut", function() {deepEqual( Stem("persecuted"), "persecut");});
test("persecuting -> persecut", function() {deepEqual( Stem("persecuting"), "persecut");});
test("persecution -> persecut", function() {deepEqual( Stem("persecution"), "persecut");});
test("persecutions -> persecut", function() {deepEqual( Stem("persecutions"), "persecut");});
test("persecutor -> persecutor", function() {deepEqual( Stem("persecutor"), "persecutor");});
test("persecutors -> persecutor", function() {deepEqual( Stem("persecutors"), "persecutor");});
test("perseverance -> persever", function() {deepEqual( Stem("perseverance"), "persever");});
test("persevere -> persever", function() {deepEqual( Stem("persevere"), "persever");});
test("persevered -> persev", function() {deepEqual( Stem("persevered"), "persev");});
test("perseveres -> persever", function() {deepEqual( Stem("perseveres"), "persever");});
test("persevering -> persev", function() {deepEqual( Stem("persevering"), "persev");});
test("perseveringly -> persev", function() {deepEqual( Stem("perseveringly"), "persev");});
test("persia -> persia", function() {deepEqual( Stem("persia"), "persia");});
test("persian -> persian", function() {deepEqual( Stem("persian"), "persian");});
test("persist -> persist", function() {deepEqual( Stem("persist"), "persist");});
test("persisted -> persist", function() {deepEqual( Stem("persisted"), "persist");});
test("persistence -> persist", function() {deepEqual( Stem("persistence"), "persist");});
test("persistency -> persist", function() {deepEqual( Stem("persistency"), "persist");});
test("persistent -> persist", function() {deepEqual( Stem("persistent"), "persist");});
test("persistently -> persist", function() {deepEqual( Stem("persistently"), "persist");});
test("persisting -> persist", function() {deepEqual( Stem("persisting"), "persist");});
test("persists -> persist", function() {deepEqual( Stem("persists"), "persist");});
test("person -> person", function() {deepEqual( Stem("person"), "person");});
test("personage -> personag", function() {deepEqual( Stem("personage"), "personag");});
test("personages -> personag", function() {deepEqual( Stem("personages"), "personag");});
test("personal -> person", function() {deepEqual( Stem("personal"), "person");});
test("personality -> person", function() {deepEqual( Stem("personality"), "person");});
test("personally -> person", function() {deepEqual( Stem("personally"), "person");});
test("personate -> person", function() {deepEqual( Stem("personate"), "person");});
test("personated -> person", function() {deepEqual( Stem("personated"), "person");});
test("personification -> personif", function() {deepEqual( Stem("personification"), "personif");});
test("personified -> personifi", function() {deepEqual( Stem("personified"), "personifi");});
test("persons -> person", function() {deepEqual( Stem("persons"), "person");});
test("perspective -> perspect", function() {deepEqual( Stem("perspective"), "perspect");});
test("perspiration -> perspir", function() {deepEqual( Stem("perspiration"), "perspir");});
test("perspired -> perspir", function() {deepEqual( Stem("perspired"), "perspir");});
test("perspires -> perspir", function() {deepEqual( Stem("perspires"), "perspir");});
test("persuadable -> persuad", function() {deepEqual( Stem("persuadable"), "persuad");});
test("persuade -> persuad", function() {deepEqual( Stem("persuade"), "persuad");});
test("persuaded -> persuad", function() {deepEqual( Stem("persuaded"), "persuad");});
test("persuading -> persuad", function() {deepEqual( Stem("persuading"), "persuad");});
test("persuasion -> persuas", function() {deepEqual( Stem("persuasion"), "persuas");});
test("persuasions -> persuas", function() {deepEqual( Stem("persuasions"), "persuas");});
test("persuasive -> persuas", function() {deepEqual( Stem("persuasive"), "persuas");});
test("persuasively -> persuas", function() {deepEqual( Stem("persuasively"), "persuas");});
test("pert -> pert", function() {deepEqual( Stem("pert"), "pert");});
test("perthshire -> perthshir", function() {deepEqual( Stem("perthshire"), "perthshir");});
test("pertinacious -> pertinaci", function() {deepEqual( Stem("pertinacious"), "pertinaci");});
test("pertinaciously -> pertinaci", function() {deepEqual( Stem("pertinaciously"), "pertinaci");});
test("pertinacity -> pertinac", function() {deepEqual( Stem("pertinacity"), "pertinac");});
test("perturbation -> perturb", function() {deepEqual( Stem("perturbation"), "perturb");});
test("perturbed -> perturb", function() {deepEqual( Stem("perturbed"), "perturb");});
test("peru -> peru", function() {deepEqual( Stem("peru"), "peru");});
test("perusal -> perus", function() {deepEqual( Stem("perusal"), "perus");});
test("perusals -> perus", function() {deepEqual( Stem("perusals"), "perus");});
test("peruse -> perus", function() {deepEqual( Stem("peruse"), "perus");});
test("perused -> perus", function() {deepEqual( Stem("perused"), "perus");});
test("perusing -> perus", function() {deepEqual( Stem("perusing"), "perus");});
test("peruvian -> peruvian", function() {deepEqual( Stem("peruvian"), "peruvian");});
test("peruvians -> peruvian", function() {deepEqual( Stem("peruvians"), "peruvian");});
test("pervade -> pervad", function() {deepEqual( Stem("pervade"), "pervad");});
test("pervaded -> pervad", function() {deepEqual( Stem("pervaded"), "pervad");});
test("pervades -> pervad", function() {deepEqual( Stem("pervades"), "pervad");});
test("pervading -> pervad", function() {deepEqual( Stem("pervading"), "pervad");});
test("perverse -> pervers", function() {deepEqual( Stem("perverse"), "pervers");});
test("perversely -> pervers", function() {deepEqual( Stem("perversely"), "pervers");});
test("perverseness -> pervers", function() {deepEqual( Stem("perverseness"), "pervers");});
test("perversion -> pervers", function() {deepEqual( Stem("perversion"), "pervers");});
test("perversity -> pervers", function() {deepEqual( Stem("perversity"), "pervers");});
test("perverted -> pervert", function() {deepEqual( Stem("perverted"), "pervert");});
test("pervious -> pervious", function() {deepEqual( Stem("pervious"), "pervious");});
test("perwerse -> perwers", function() {deepEqual( Stem("perwerse"), "perwers");});
test("peski -> peski", function() {deepEqual( Stem("peski"), "peski");});
test("pest -> pest", function() {deepEqual( Stem("pest"), "pest");});
test("pester -> pester", function() {deepEqual( Stem("pester"), "pester");});
test("pestered -> pester", function() {deepEqual( Stem("pestered"), "pester");});
test("pestering -> pester", function() {deepEqual( Stem("pestering"), "pester");});
test("pestiferous -> pestifer", function() {deepEqual( Stem("pestiferous"), "pestifer");});
test("pestilence -> pestil", function() {deepEqual( Stem("pestilence"), "pestil");});
test("pestilent -> pestil", function() {deepEqual( Stem("pestilent"), "pestil");});
test("pestilential -> pestilenti", function() {deepEqual( Stem("pestilential"), "pestilenti");});
test("pestle -> pestl", function() {deepEqual( Stem("pestle"), "pestl");});
test("pestryakov -> pestryakov", function() {deepEqual( Stem("pestryakov"), "pestryakov");});
test("pet -> pet", function() {deepEqual( Stem("pet"), "pet");});
test("petals -> petal", function() {deepEqual( Stem("petals"), "petal");});
test("peter -> peter", function() {deepEqual( Stem("peter"), "peter");});
test("petersburg -> petersburg", function() {deepEqual( Stem("petersburg"), "petersburg");});
test("petersham -> petersham", function() {deepEqual( Stem("petersham"), "petersham");});
test("petioles -> petiol", function() {deepEqual( Stem("petioles"), "petiol");});
test("petise -> petis", function() {deepEqual( Stem("petise"), "petis");});
test("petises -> petis", function() {deepEqual( Stem("petises"), "petis");});
test("petition -> petit", function() {deepEqual( Stem("petition"), "petit");});
test("petitioned -> petit", function() {deepEqual( Stem("petitioned"), "petit");});
test("petitioners -> petition", function() {deepEqual( Stem("petitioners"), "petition");});
test("petitioning -> petit", function() {deepEqual( Stem("petitioning"), "petit");});
test("petitions -> petit", function() {deepEqual( Stem("petitions"), "petit");});
test("petorca -> petorca", function() {deepEqual( Stem("petorca"), "petorca");});
test("petowker -> petowk", function() {deepEqual( Stem("petowker"), "petowk");});
test("petrel -> petrel", function() {deepEqual( Stem("petrel"), "petrel");});
test("petrels -> petrel", function() {deepEqual( Stem("petrels"), "petrel");});
test("petrified -> petrifi", function() {deepEqual( Stem("petrified"), "petrifi");});
test("petrovitch -> petrovitch", function() {deepEqual( Stem("petrovitch"), "petrovitch");});
test("petrovna -> petrovna", function() {deepEqual( Stem("petrovna"), "petrovna");});
test("petrovsky -> petrovski", function() {deepEqual( Stem("petrovsky"), "petrovski");});
test("petruchio -> petruchio", function() {deepEqual( Stem("petruchio"), "petruchio");});
test("pets -> pet", function() {deepEqual( Stem("pets"), "pet");});
test("petted -> pet", function() {deepEqual( Stem("petted"), "pet");});
test("petticoat -> petticoat", function() {deepEqual( Stem("petticoat"), "petticoat");});
test("petticoats -> petticoat", function() {deepEqual( Stem("petticoats"), "petticoat");});
test("pettifoggers -> pettifogg", function() {deepEqual( Stem("pettifoggers"), "pettifogg");});
test("pettifogging -> pettifog", function() {deepEqual( Stem("pettifogging"), "pettifog");});
test("pettiness -> petti", function() {deepEqual( Stem("pettiness"), "petti");});
test("petting -> pet", function() {deepEqual( Stem("petting"), "pet");});
test("pettish -> pettish", function() {deepEqual( Stem("pettish"), "pettish");});
test("pettishly -> pettish", function() {deepEqual( Stem("pettishly"), "pettish");});
test("petty -> petti", function() {deepEqual( Stem("petty"), "petti");});
test("petulance -> petul", function() {deepEqual( Stem("petulance"), "petul");});
test("petulant -> petul", function() {deepEqual( Stem("petulant"), "petul");});
test("petulantly -> petul", function() {deepEqual( Stem("petulantly"), "petul");});
test("peuquenes -> peuquen", function() {deepEqual( Stem("peuquenes"), "peuquen");});
test("pew -> pew", function() {deepEqual( Stem("pew"), "pew");});
test("pewter -> pewter", function() {deepEqual( Stem("pewter"), "pewter");});
test("pfoo -> pfoo", function() {deepEqual( Stem("pfoo"), "pfoo");});
test("phaeton -> phaeton", function() {deepEqual( Stem("phaeton"), "phaeton");});
test("phairy -> phairi", function() {deepEqual( Stem("phairy"), "phairi");});
test("phalanstery -> phalansteri", function() {deepEqual( Stem("phalanstery"), "phalansteri");});
test("phallus -> phallus", function() {deepEqual( Stem("phallus"), "phallus");});
test("phanaeus -> phanaeus", function() {deepEqual( Stem("phanaeus"), "phanaeus");});
test("phantom -> phantom", function() {deepEqual( Stem("phantom"), "phantom");});
test("phantoms -> phantom", function() {deepEqual( Stem("phantoms"), "phantom");});
test("pharaoh -> pharaoh", function() {deepEqual( Stem("pharaoh"), "pharaoh");});
test("pharisees -> pharise", function() {deepEqual( Stem("pharisees"), "pharise");});
test("phases -> phase", function() {deepEqual( Stem("phases"), "phase");});
test("pheasants -> pheasant", function() {deepEqual( Stem("pheasants"), "pheasant");});
test("phenomena -> phenomena", function() {deepEqual( Stem("phenomena"), "phenomena");});
test("phenomenal -> phenomen", function() {deepEqual( Stem("phenomenal"), "phenomen");});
test("phenomenally -> phenomen", function() {deepEqual( Stem("phenomenally"), "phenomen");});
test("phenomenes -> phenomen", function() {deepEqual( Stem("phenomenes"), "phenomen");});
test("phenomenon -> phenomenon", function() {deepEqual( Stem("phenomenon"), "phenomenon");});
test("phenomenons -> phenomenon", function() {deepEqual( Stem("phenomenons"), "phenomenon");});
test("phew -> phew", function() {deepEqual( Stem("phew"), "phew");});
test("phib -> phib", function() {deepEqual( Stem("phib"), "phib");});
test("phil -> phil", function() {deepEqual( Stem("phil"), "phil");});
test("philandering -> philand", function() {deepEqual( Stem("philandering"), "philand");});
test("philanthropic -> philanthrop", function() {deepEqual( Stem("philanthropic"), "philanthrop");});
test("philanthropical -> philanthrop", function() {deepEqual( Stem("philanthropical"), "philanthrop");});
test("philanthropist -> philanthropist", function() {deepEqual( Stem("philanthropist"), "philanthropist");});
test("philanthropists -> philanthropist", function() {deepEqual( Stem("philanthropists"), "philanthropist");});
test("philanthropy -> philanthropi", function() {deepEqual( Stem("philanthropy"), "philanthropi");});
test("philip -> philip", function() {deepEqual( Stem("philip"), "philip");});
test("philippe -> philipp", function() {deepEqual( Stem("philippe"), "philipp");});
test("philippines -> philippin", function() {deepEqual( Stem("philippines"), "philippin");});
test("phillippensis -> phillippensi", function() {deepEqual( Stem("phillippensis"), "phillippensi");});
test("philo -> philo", function() {deepEqual( Stem("philo"), "philo");});
test("philos -> philo", function() {deepEqual( Stem("philos"), "philo");});
test("philosoph -> philosoph", function() {deepEqual( Stem("philosoph"), "philosoph");});
test("philosopher -> philosoph", function() {deepEqual( Stem("philosopher"), "philosoph");});
test("philosophers -> philosoph", function() {deepEqual( Stem("philosophers"), "philosoph");});
test("philosophical -> philosoph", function() {deepEqual( Stem("philosophical"), "philosoph");});
test("philosophically -> philosoph", function() {deepEqual( Stem("philosophically"), "philosoph");});
test("philosophies -> philosophi", function() {deepEqual( Stem("philosophies"), "philosophi");});
test("philosophy -> philosophi", function() {deepEqual( Stem("philosophy"), "philosophi");});
test("phineas -> phinea", function() {deepEqual( Stem("phineas"), "phinea");});
test("phlegmatic -> phlegmat", function() {deepEqual( Stem("phlegmatic"), "phlegmat");});
test("pho -> pho", function() {deepEqual( Stem("pho"), "pho");});
test("phoebe -> phoeb", function() {deepEqual( Stem("phoebe"), "phoeb");});
test("phoenix -> phoenix", function() {deepEqual( Stem("phoenix"), "phoenix");});
test("phonolite -> phonolit", function() {deepEqual( Stem("phonolite"), "phonolit");});
test("phosphate -> phosphat", function() {deepEqual( Stem("phosphate"), "phosphat");});
test("phosphorescence -> phosphoresc", function() {deepEqual( Stem("phosphorescence"), "phosphoresc");});
test("phosphorescent -> phosphoresc", function() {deepEqual( Stem("phosphorescent"), "phosphoresc");});
test("phosphoric -> phosphor", function() {deepEqual( Stem("phosphoric"), "phosphor");});
test("phosphorus -> phosphorus", function() {deepEqual( Stem("phosphorus"), "phosphorus");});
test("phosphuretted -> phosphuret", function() {deepEqual( Stem("phosphuretted"), "phosphuret");});
test("photographer -> photograph", function() {deepEqual( Stem("photographer"), "photograph");});
test("phrase -> phrase", function() {deepEqual( Stem("phrase"), "phrase");});
test("phrased -> phrase", function() {deepEqual( Stem("phrased"), "phrase");});
test("phraseology -> phraseolog", function() {deepEqual( Stem("phraseology"), "phraseolog");});
test("phrases -> phrase", function() {deepEqual( Stem("phrases"), "phrase");});
test("phrenological -> phrenolog", function() {deepEqual( Stem("phrenological"), "phrenolog");});
test("phryniscus -> phryniscus", function() {deepEqual( Stem("phryniscus"), "phryniscus");});
test("physalia -> physalia", function() {deepEqual( Stem("physalia"), "physalia");});
test("physic -> physic", function() {deepEqual( Stem("physic"), "physic");});
test("physical -> physic", function() {deepEqual( Stem("physical"), "physic");});
test("physically -> physic", function() {deepEqual( Stem("physically"), "physic");});
test("physician -> physician", function() {deepEqual( Stem("physician"), "physician");});
test("physicians -> physician", function() {deepEqual( Stem("physicians"), "physician");});
test("physicking -> physick", function() {deepEqual( Stem("physicking"), "physick");});
test("physiognomist -> physiognomist", function() {deepEqual( Stem("physiognomist"), "physiognomist");});
test("physiognomy -> physiognomi", function() {deepEqual( Stem("physiognomy"), "physiognomi");});
test("physiol -> physiol", function() {deepEqual( Stem("physiol"), "physiol");});
test("physiological -> physiolog", function() {deepEqual( Stem("physiological"), "physiolog");});
test("physiology -> physiolog", function() {deepEqual( Stem("physiology"), "physiolog");});
test("physique -> physiqu", function() {deepEqual( Stem("physique"), "physiqu");});
test("phytolitharia -> phytolitharia", function() {deepEqual( Stem("phytolitharia"), "phytolitharia");});
test("piano -> piano", function() {deepEqual( Stem("piano"), "piano");});
test("pianoforte -> pianofort", function() {deepEqual( Stem("pianoforte"), "pianofort");});
test("pianos -> piano", function() {deepEqual( Stem("pianos"), "piano");});
test("picaninnies -> picaninni", function() {deepEqual( Stem("picaninnies"), "picaninni");});
test("picaninny -> picaninni", function() {deepEqual( Stem("picaninny"), "picaninni");});
test("piccadilly -> piccadilli", function() {deepEqual( Stem("piccadilly"), "piccadilli");});
test("pichy -> pichi", function() {deepEqual( Stem("pichy"), "pichi");});
test("pick -> pick", function() {deepEqual( Stem("pick"), "pick");});
test("pickaxe -> pickax", function() {deepEqual( Stem("pickaxe"), "pickax");});
test("picked -> pick", function() {deepEqual( Stem("picked"), "pick");});
test("pickers -> picker", function() {deepEqual( Stem("pickers"), "picker");});
test("picking -> pick", function() {deepEqual( Stem("picking"), "pick");});
test("pickings -> pick", function() {deepEqual( Stem("pickings"), "pick");});
test("pickle -> pickl", function() {deepEqual( Stem("pickle"), "pickl");});
test("pickled -> pickl", function() {deepEqual( Stem("pickled"), "pickl");});
test("pickles -> pickl", function() {deepEqual( Stem("pickles"), "pickl");});
test("pickling -> pickl", function() {deepEqual( Stem("pickling"), "pickl");});
test("pickpocket -> pickpocket", function() {deepEqual( Stem("pickpocket"), "pickpocket");});
test("pickpockets -> pickpocket", function() {deepEqual( Stem("pickpockets"), "pickpocket");});
test("picks -> pick", function() {deepEqual( Stem("picks"), "pick");});
test("pickwick -> pickwick", function() {deepEqual( Stem("pickwick"), "pickwick");});
test("picnic -> picnic", function() {deepEqual( Stem("picnic"), "picnic");});
test("picnics -> picnic", function() {deepEqual( Stem("picnics"), "picnic");});
test("picter -> picter", function() {deepEqual( Stem("picter"), "picter");});
test("pictorial -> pictori", function() {deepEqual( Stem("pictorial"), "pictori");});
test("picture -> pictur", function() {deepEqual( Stem("picture"), "pictur");});
test("pictured -> pictur", function() {deepEqual( Stem("pictured"), "pictur");});
test("pictures -> pictur", function() {deepEqual( Stem("pictures"), "pictur");});
test("picturesque -> picturesqu", function() {deepEqual( Stem("picturesque"), "picturesqu");});
test("picturing -> pictur", function() {deepEqual( Stem("picturing"), "pictur");});
test("piderit -> piderit", function() {deepEqual( Stem("piderit"), "piderit");});
test("pie -> pie", function() {deepEqual( Stem("pie"), "pie");});
test("piebald -> piebald", function() {deepEqual( Stem("piebald"), "piebald");});
test("piebalds -> piebald", function() {deepEqual( Stem("piebalds"), "piebald");});
test("piece -> piec", function() {deepEqual( Stem("piece"), "piec");});
test("pieced -> piec", function() {deepEqual( Stem("pieced"), "piec");});
test("piecemeal -> piecem", function() {deepEqual( Stem("piecemeal"), "piecem");});
test("pieces -> piec", function() {deepEqual( Stem("pieces"), "piec");});
test("piecework -> piecework", function() {deepEqual( Stem("piecework"), "piecework");});
test("pieman -> pieman", function() {deepEqual( Stem("pieman"), "pieman");});
test("pier -> pier", function() {deepEqual( Stem("pier"), "pier");});
test("pierce -> pierc", function() {deepEqual( Stem("pierce"), "pierc");});
test("pierced -> pierc", function() {deepEqual( Stem("pierced"), "pierc");});
test("pierces -> pierc", function() {deepEqual( Stem("pierces"), "pierc");});
test("piercing -> pierc", function() {deepEqual( Stem("piercing"), "pierc");});
test("piercingly -> pierc", function() {deepEqual( Stem("piercingly"), "pierc");});
test("pierre -> pierr", function() {deepEqual( Stem("pierre"), "pierr");});
test("pierres -> pierr", function() {deepEqual( Stem("pierres"), "pierr");});
test("piers -> pier", function() {deepEqual( Stem("piers"), "pier");});
test("pies -> pie", function() {deepEqual( Stem("pies"), "pie");});
test("pietras -> pietra", function() {deepEqual( Stem("pietras"), "pietra");});
test("piety -> pieti", function() {deepEqual( Stem("piety"), "pieti");});
test("pig -> pig", function() {deepEqual( Stem("pig"), "pig");});
test("pigeon -> pigeon", function() {deepEqual( Stem("pigeon"), "pigeon");});
test("pigeons -> pigeon", function() {deepEqual( Stem("pigeons"), "pigeon");});
test("pigmies -> pigmi", function() {deepEqual( Stem("pigmies"), "pigmi");});
test("pigmy -> pigmi", function() {deepEqual( Stem("pigmy"), "pigmi");});
test("pigs -> pig", function() {deepEqual( Stem("pigs"), "pig");});
test("pigsties -> pigsti", function() {deepEqual( Stem("pigsties"), "pigsti");});
test("pigtail -> pigtail", function() {deepEqual( Stem("pigtail"), "pigtail");});
test("pigtails -> pigtail", function() {deepEqual( Stem("pigtails"), "pigtail");});
test("pikestaff -> pikestaff", function() {deepEqual( Stem("pikestaff"), "pikestaff");});
test("pile -> pile", function() {deepEqual( Stem("pile"), "pile");});
test("piled -> pile", function() {deepEqual( Stem("piled"), "pile");});
test("piles -> pile", function() {deepEqual( Stem("piles"), "pile");});
test("pilfering -> pilfer", function() {deepEqual( Stem("pilfering"), "pilfer");});
test("pilger -> pilger", function() {deepEqual( Stem("pilger"), "pilger");});
test("pilgrim -> pilgrim", function() {deepEqual( Stem("pilgrim"), "pilgrim");});
test("pilgrimage -> pilgrimag", function() {deepEqual( Stem("pilgrimage"), "pilgrimag");});
test("piling -> pile", function() {deepEqual( Stem("piling"), "pile");});
test("pill -> pill", function() {deepEqual( Stem("pill"), "pill");});
test("pillar -> pillar", function() {deepEqual( Stem("pillar"), "pillar");});
test("pillars -> pillar", function() {deepEqual( Stem("pillars"), "pillar");});
test("pillow -> pillow", function() {deepEqual( Stem("pillow"), "pillow");});
test("pillowed -> pillow", function() {deepEqual( Stem("pillowed"), "pillow");});
test("pillows -> pillow", function() {deepEqual( Stem("pillows"), "pillow");});
test("pills -> pill", function() {deepEqual( Stem("pills"), "pill");});
test("pilot -> pilot", function() {deepEqual( Stem("pilot"), "pilot");});
test("piloted -> pilot", function() {deepEqual( Stem("piloted"), "pilot");});
test("pilots -> pilot", function() {deepEqual( Stem("pilots"), "pilot");});
test("pimlico -> pimlico", function() {deepEqual( Stem("pimlico"), "pimlico");});
test("pimple -> pimpl", function() {deepEqual( Stem("pimple"), "pimpl");});
test("pimples -> pimpl", function() {deepEqual( Stem("pimples"), "pimpl");});
test("pimply -> pimpli", function() {deepEqual( Stem("pimply"), "pimpli");});
test("pin -> pin", function() {deepEqual( Stem("pin"), "pin");});
test("pinafore -> pinafor", function() {deepEqual( Stem("pinafore"), "pinafor");});
test("pincers -> pincer", function() {deepEqual( Stem("pincers"), "pincer");});
test("pinch -> pinch", function() {deepEqual( Stem("pinch"), "pinch");});
test("pinched -> pinch", function() {deepEqual( Stem("pinched"), "pinch");});
test("pincheira -> pincheira", function() {deepEqual( Stem("pincheira"), "pincheira");});
test("pinches -> pinch", function() {deepEqual( Stem("pinches"), "pinch");});
test("pinching -> pinch", function() {deepEqual( Stem("pinching"), "pinch");});
test("pincushions -> pincushion", function() {deepEqual( Stem("pincushions"), "pincushion");});
test("pine -> pine", function() {deepEqual( Stem("pine"), "pine");});
test("pineapple -> pineappl", function() {deepEqual( Stem("pineapple"), "pineappl");});
test("pined -> pine", function() {deepEqual( Stem("pined"), "pine");});
test("pines -> pine", function() {deepEqual( Stem("pines"), "pine");});
test("pining -> pine", function() {deepEqual( Stem("pining"), "pine");});
test("pinion -> pinion", function() {deepEqual( Stem("pinion"), "pinion");});
test("pinions -> pinion", function() {deepEqual( Stem("pinions"), "pinion");});
test("pink -> pink", function() {deepEqual( Stem("pink"), "pink");});
test("pinked -> pink", function() {deepEqual( Stem("pinked"), "pink");});
test("pinker -> pinker", function() {deepEqual( Stem("pinker"), "pinker");});
test("pinkish -> pinkish", function() {deepEqual( Stem("pinkish"), "pinkish");});
test("pinnace -> pinnac", function() {deepEqual( Stem("pinnace"), "pinnac");});
test("pinnacle -> pinnacl", function() {deepEqual( Stem("pinnacle"), "pinnacl");});
test("pinnacled -> pinnacl", function() {deepEqual( Stem("pinnacled"), "pinnacl");});
test("pinnacles -> pinnacl", function() {deepEqual( Stem("pinnacles"), "pinnacl");});
test("pinned -> pin", function() {deepEqual( Stem("pinned"), "pin");});
test("pinning -> pin", function() {deepEqual( Stem("pinning"), "pin");});
test("pins -> pin", function() {deepEqual( Stem("pins"), "pin");});
test("pint -> pint", function() {deepEqual( Stem("pint"), "pint");});
test("pints -> pint", function() {deepEqual( Stem("pints"), "pint");});
test("pious -> pious", function() {deepEqual( Stem("pious"), "pious");});
test("pipe -> pipe", function() {deepEqual( Stem("pipe"), "pipe");});
test("pipeclayed -> pipeclay", function() {deepEqual( Stem("pipeclayed"), "pipeclay");});
test("pipelight -> pipelight", function() {deepEqual( Stem("pipelight"), "pipelight");});
test("piper -> piper", function() {deepEqual( Stem("piper"), "piper");});
test("pipes -> pipe", function() {deepEqual( Stem("pipes"), "pipe");});
test("piping -> pipe", function() {deepEqual( Stem("piping"), "pipe");});
test("pips -> pip", function() {deepEqual( Stem("pips"), "pip");});
test("piquancy -> piquanc", function() {deepEqual( Stem("piquancy"), "piquanc");});
test("piquant -> piquant", function() {deepEqual( Stem("piquant"), "piquant");});
test("pique -> piqu", function() {deepEqual( Stem("pique"), "piqu");});
test("piqued -> piqu", function() {deepEqual( Stem("piqued"), "piqu");});
test("piquet -> piquet", function() {deepEqual( Stem("piquet"), "piquet");});
test("pirouette -> pirouett", function() {deepEqual( Stem("pirouette"), "pirouett");});
test("pisagua -> pisagua", function() {deepEqual( Stem("pisagua"), "pisagua");});
test("pise -> pise", function() {deepEqual( Stem("pise"), "pise");});
test("pish -> pish", function() {deepEqual( Stem("pish"), "pish");});
test("pistil -> pistil", function() {deepEqual( Stem("pistil"), "pistil");});
test("pistol -> pistol", function() {deepEqual( Stem("pistol"), "pistol");});
test("pistoling -> pistol", function() {deepEqual( Stem("pistoling"), "pistol");});
test("pistolling -> pistol", function() {deepEqual( Stem("pistolling"), "pistol");});
test("pistols -> pistol", function() {deepEqual( Stem("pistols"), "pistol");});
test("pit -> pit", function() {deepEqual( Stem("pit"), "pit");});
test("pitcairn -> pitcairn", function() {deepEqual( Stem("pitcairn"), "pitcairn");});
test("pitch -> pitch", function() {deepEqual( Stem("pitch"), "pitch");});
test("pitched -> pitch", function() {deepEqual( Stem("pitched"), "pitch");});
test("pitcher -> pitcher", function() {deepEqual( Stem("pitcher"), "pitcher");});
test("pitchers -> pitcher", function() {deepEqual( Stem("pitchers"), "pitcher");});
test("pitchfork -> pitchfork", function() {deepEqual( Stem("pitchfork"), "pitchfork");});
test("pitching -> pitch", function() {deepEqual( Stem("pitching"), "pitch");});
test("pitchy -> pitchi", function() {deepEqual( Stem("pitchy"), "pitchi");});
test("piteous -> piteous", function() {deepEqual( Stem("piteous"), "piteous");});
test("piteously -> piteous", function() {deepEqual( Stem("piteously"), "piteous");});
test("pitfall -> pitfal", function() {deepEqual( Stem("pitfall"), "pitfal");});
test("pitfalls -> pitfal", function() {deepEqual( Stem("pitfalls"), "pitfal");});
test("pith -> pith", function() {deepEqual( Stem("pith"), "pith");});
test("pithy -> pithi", function() {deepEqual( Stem("pithy"), "pithi");});
test("pitiable -> pitiabl", function() {deepEqual( Stem("pitiable"), "pitiabl");});
test("pitiably -> pitiabl", function() {deepEqual( Stem("pitiably"), "pitiabl");});
test("pitied -> piti", function() {deepEqual( Stem("pitied"), "piti");});
test("pities -> piti", function() {deepEqual( Stem("pities"), "piti");});
test("pitiful -> piti", function() {deepEqual( Stem("pitiful"), "piti");});
test("pitilessly -> pitiless", function() {deepEqual( Stem("pitilessly"), "pitiless");});
test("pitmen -> pitmen", function() {deepEqual( Stem("pitmen"), "pitmen");});
test("pits -> pit", function() {deepEqual( Stem("pits"), "pit");});
test("pitt -> pitt", function() {deepEqual( Stem("pitt"), "pitt");});
test("pittance -> pittanc", function() {deepEqual( Stem("pittance"), "pittanc");});
test("pittances -> pittanc", function() {deepEqual( Stem("pittances"), "pittanc");});
test("pitted -> pit", function() {deepEqual( Stem("pitted"), "pit");});
test("pitty -> pitti", function() {deepEqual( Stem("pitty"), "pitti");});
test("pity -> piti", function() {deepEqual( Stem("pity"), "piti");});
test("pitying -> piti", function() {deepEqual( Stem("pitying"), "piti");});
test("pivot -> pivot", function() {deepEqual( Stem("pivot"), "pivot");});
test("pizzaro -> pizzaro", function() {deepEqual( Stem("pizzaro"), "pizzaro");});
test("pla -> pla", function() {deepEqual( Stem("pla"), "pla");});
test("plac -> plac", function() {deepEqual( Stem("plac"), "plac");});
test("placard -> placard", function() {deepEqual( Stem("placard"), "placard");});
test("placarded -> placard", function() {deepEqual( Stem("placarded"), "placard");});
test("placards -> placard", function() {deepEqual( Stem("placards"), "placard");});
test("place -> place", function() {deepEqual( Stem("place"), "place");});
test("placed -> place", function() {deepEqual( Stem("placed"), "place");});
test("places -> place", function() {deepEqual( Stem("places"), "place");});
test("placid -> placid", function() {deepEqual( Stem("placid"), "placid");});
test("placidity -> placid", function() {deepEqual( Stem("placidity"), "placid");});
test("placidly -> placid", function() {deepEqual( Stem("placidly"), "placid");});
test("placing -> place", function() {deepEqual( Stem("placing"), "place");});
test("plagiarists -> plagiarist", function() {deepEqual( Stem("plagiarists"), "plagiarist");});
test("plague -> plagu", function() {deepEqual( Stem("plague"), "plagu");});
test("plagued -> plagu", function() {deepEqual( Stem("plagued"), "plagu");});
test("plagues -> plagu", function() {deepEqual( Stem("plagues"), "plagu");});
test("plaguing -> plagu", function() {deepEqual( Stem("plaguing"), "plagu");});
test("plaid -> plaid", function() {deepEqual( Stem("plaid"), "plaid");});
test("plain -> plain", function() {deepEqual( Stem("plain"), "plain");});
test("plainer -> plainer", function() {deepEqual( Stem("plainer"), "plainer");});
test("plainest -> plainest", function() {deepEqual( Stem("plainest"), "plainest");});
test("plainly -> plain", function() {deepEqual( Stem("plainly"), "plain");});
test("plainness -> plain", function() {deepEqual( Stem("plainness"), "plain");});
test("plains -> plain", function() {deepEqual( Stem("plains"), "plain");});
test("plaint -> plaint", function() {deepEqual( Stem("plaint"), "plaint");});
test("plaintiff -> plaintiff", function() {deepEqual( Stem("plaintiff"), "plaintiff");});
test("plaintiffs -> plaintiff", function() {deepEqual( Stem("plaintiffs"), "plaintiff");});
test("plaintive -> plaintiv", function() {deepEqual( Stem("plaintive"), "plaintiv");});
test("plaintively -> plaintiv", function() {deepEqual( Stem("plaintively"), "plaintiv");});
test("plaintiveness -> plaintiv", function() {deepEqual( Stem("plaintiveness"), "plaintiv");});
test("plaire -> plair", function() {deepEqual( Stem("plaire"), "plair");});
test("plaisir -> plaisir", function() {deepEqual( Stem("plaisir"), "plaisir");});
test("plait -> plait", function() {deepEqual( Stem("plait"), "plait");});
test("plaited -> plait", function() {deepEqual( Stem("plaited"), "plait");});
test("plaits -> plait", function() {deepEqual( Stem("plaits"), "plait");});
test("plan -> plan", function() {deepEqual( Stem("plan"), "plan");});
test("planaria -> planaria", function() {deepEqual( Stem("planaria"), "planaria");});
test("planariae -> planaria", function() {deepEqual( Stem("planariae"), "planaria");});
test("plane -> plane", function() {deepEqual( Stem("plane"), "plane");});
test("planed -> plane", function() {deepEqual( Stem("planed"), "plane");});
test("planet -> planet", function() {deepEqual( Stem("planet"), "planet");});
test("planing -> plane", function() {deepEqual( Stem("planing"), "plane");});
test("plank -> plank", function() {deepEqual( Stem("plank"), "plank");});
test("planks -> plank", function() {deepEqual( Stem("planks"), "plank");});
test("planned -> plan", function() {deepEqual( Stem("planned"), "plan");});
test("planning -> plan", function() {deepEqual( Stem("planning"), "plan");});
test("plans -> plan", function() {deepEqual( Stem("plans"), "plan");});
test("plant -> plant", function() {deepEqual( Stem("plant"), "plant");});
test("plantagenet -> plantagenet", function() {deepEqual( Stem("plantagenet"), "plantagenet");});
test("plantation -> plantat", function() {deepEqual( Stem("plantation"), "plantat");});
test("plantations -> plantat", function() {deepEqual( Stem("plantations"), "plantat");});
test("planted -> plant", function() {deepEqual( Stem("planted"), "plant");});
test("planter -> planter", function() {deepEqual( Stem("planter"), "planter");});
test("planting -> plant", function() {deepEqual( Stem("planting"), "plant");});
test("plants -> plant", function() {deepEqual( Stem("plants"), "plant");});
test("planty -> planti", function() {deepEqual( Stem("planty"), "planti");});
test("plashing -> plash", function() {deepEqual( Stem("plashing"), "plash");});
test("plaster -> plaster", function() {deepEqual( Stem("plaster"), "plaster");});
test("plastered -> plaster", function() {deepEqual( Stem("plastered"), "plaster");});
test("plat -> plat", function() {deepEqual( Stem("plat"), "plat");});
test("plata -> plata", function() {deepEqual( Stem("plata"), "plata");});
test("plate -> plate", function() {deepEqual( Stem("plate"), "plate");});
test("plateau -> plateau", function() {deepEqual( Stem("plateau"), "plateau");});
test("plated -> plate", function() {deepEqual( Stem("plated"), "plate");});
test("plates -> plate", function() {deepEqual( Stem("plates"), "plate");});
test("platform -> platform", function() {deepEqual( Stem("platform"), "platform");});
test("platforms -> platform", function() {deepEqual( Stem("platforms"), "platform");});
test("platforna -> platforna", function() {deepEqual( Stem("platforna"), "platforna");});
test("platina -> platina", function() {deepEqual( Stem("platina"), "platina");});
test("platitudes -> platitud", function() {deepEqual( Stem("platitudes"), "platitud");});
test("platters -> platter", function() {deepEqual( Stem("platters"), "platter");});
test("plaudits -> plaudit", function() {deepEqual( Stem("plaudits"), "plaudit");});
test("plausible -> plausibl", function() {deepEqual( Stem("plausible"), "plausibl");});
test("plausibly -> plausibl", function() {deepEqual( Stem("plausibly"), "plausibl");});
test("play -> play", function() {deepEqual( Stem("play"), "play");});
test("playbill -> playbil", function() {deepEqual( Stem("playbill"), "playbil");});
test("playbills -> playbil", function() {deepEqual( Stem("playbills"), "playbil");});
test("played -> play", function() {deepEqual( Stem("played"), "play");});
test("player -> player", function() {deepEqual( Stem("player"), "player");});
test("players -> player", function() {deepEqual( Stem("players"), "player");});
test("playfellow -> playfellow", function() {deepEqual( Stem("playfellow"), "playfellow");});
test("playfellows -> playfellow", function() {deepEqual( Stem("playfellows"), "playfellow");});
test("playful -> play", function() {deepEqual( Stem("playful"), "play");});
test("playfully -> play", function() {deepEqual( Stem("playfully"), "play");});
test("playfulness -> play", function() {deepEqual( Stem("playfulness"), "play");});
test("playing -> play", function() {deepEqual( Stem("playing"), "play");});
test("playmate -> playmat", function() {deepEqual( Stem("playmate"), "playmat");});
test("playmates -> playmat", function() {deepEqual( Stem("playmates"), "playmat");});
test("plays -> play", function() {deepEqual( Stem("plays"), "play");});
test("playsure -> playsur", function() {deepEqual( Stem("playsure"), "playsur");});
test("plaything -> playth", function() {deepEqual( Stem("plaything"), "playth");});
test("playthings -> playth", function() {deepEqual( Stem("playthings"), "playth");});
test("playwright -> playwright", function() {deepEqual( Stem("playwright"), "playwright");});
test("plaza -> plaza", function() {deepEqual( Stem("plaza"), "plaza");});
test("plea -> plea", function() {deepEqual( Stem("plea"), "plea");});
test("pleace -> pleac", function() {deepEqual( Stem("pleace"), "pleac");});
test("plead -> plead", function() {deepEqual( Stem("plead"), "plead");});
test("pleaded -> plead", function() {deepEqual( Stem("pleaded"), "plead");});
test("pleader -> pleader", function() {deepEqual( Stem("pleader"), "pleader");});
test("pleaders -> pleader", function() {deepEqual( Stem("pleaders"), "pleader");});
test("pleading -> plead", function() {deepEqual( Stem("pleading"), "plead");});
test("pleadingly -> plead", function() {deepEqual( Stem("pleadingly"), "plead");});
test("pleads -> plead", function() {deepEqual( Stem("pleads"), "plead");});
test("pleasant -> pleasant", function() {deepEqual( Stem("pleasant"), "pleasant");});
test("pleasanter -> pleasant", function() {deepEqual( Stem("pleasanter"), "pleasant");});
test("pleasantest -> pleasantest", function() {deepEqual( Stem("pleasantest"), "pleasantest");});
test("pleasantly -> pleasant", function() {deepEqual( Stem("pleasantly"), "pleasant");});
test("pleasantness -> pleasant", function() {deepEqual( Stem("pleasantness"), "pleasant");});
test("pleasantry -> pleasantri", function() {deepEqual( Stem("pleasantry"), "pleasantri");});
test("please -> pleas", function() {deepEqual( Stem("please"), "pleas");});
test("pleased -> pleas", function() {deepEqual( Stem("pleased"), "pleas");});
test("pleases -> pleas", function() {deepEqual( Stem("pleases"), "pleas");});
test("pleasing -> pleas", function() {deepEqual( Stem("pleasing"), "pleas");});
test("pleasurable -> pleasur", function() {deepEqual( Stem("pleasurable"), "pleasur");});
test("pleasure -> pleasur", function() {deepEqual( Stem("pleasure"), "pleasur");});
test("pleasures -> pleasur", function() {deepEqual( Stem("pleasures"), "pleasur");});
test("pleasuring -> pleasur", function() {deepEqual( Stem("pleasuring"), "pleasur");});
test("plebeian -> plebeian", function() {deepEqual( Stem("plebeian"), "plebeian");});
test("pledge -> pledg", function() {deepEqual( Stem("pledge"), "pledg");});
test("pledged -> pledg", function() {deepEqual( Stem("pledged"), "pledg");});
test("pledges -> pledg", function() {deepEqual( Stem("pledges"), "pledg");});
test("pledging -> pledg", function() {deepEqual( Stem("pledging"), "pledg");});
test("plentiful -> plenti", function() {deepEqual( Stem("plentiful"), "plenti");});
test("plentifully -> plenti", function() {deepEqual( Stem("plentifully"), "plenti");});
test("plenty -> plenti", function() {deepEqual( Stem("plenty"), "plenti");});
test("plestcheiev -> plestcheiev", function() {deepEqual( Stem("plestcheiev"), "plestcheiev");});
test("pliability -> pliabil", function() {deepEqual( Stem("pliability"), "pliabil");});
test("plicata -> plicata", function() {deepEqual( Stem("plicata"), "plicata");});
test("plied -> pli", function() {deepEqual( Stem("plied"), "pli");});
test("plies -> pli", function() {deepEqual( Stem("plies"), "pli");});
test("plight -> plight", function() {deepEqual( Stem("plight"), "plight");});
test("plighting -> plight", function() {deepEqual( Stem("plighting"), "plight");});
test("plodding -> plod", function() {deepEqual( Stem("plodding"), "plod");});
test("plot -> plot", function() {deepEqual( Stem("plot"), "plot");});
test("plots -> plot", function() {deepEqual( Stem("plots"), "plot");});
test("plotted -> plot", function() {deepEqual( Stem("plotted"), "plot");});
test("plotter -> plotter", function() {deepEqual( Stem("plotter"), "plotter");});
test("plotters -> plotter", function() {deepEqual( Stem("plotters"), "plotter");});
test("plotting -> plot", function() {deepEqual( Stem("plotting"), "plot");});
test("plough -> plough", function() {deepEqual( Stem("plough"), "plough");});
test("ploughboy -> ploughboy", function() {deepEqual( Stem("ploughboy"), "ploughboy");});
test("ploughed -> plough", function() {deepEqual( Stem("ploughed"), "plough");});
test("ploughing -> plough", function() {deepEqual( Stem("ploughing"), "plough");});
test("ploughman -> ploughman", function() {deepEqual( Stem("ploughman"), "ploughman");});
test("ploughs -> plough", function() {deepEqual( Stem("ploughs"), "plough");});
test("ploughshare -> ploughshar", function() {deepEqual( Stem("ploughshare"), "ploughshar");});
test("ploughshares -> ploughshar", function() {deepEqual( Stem("ploughshares"), "ploughshar");});
test("plover -> plover", function() {deepEqual( Stem("plover"), "plover");});
test("pluck -> pluck", function() {deepEqual( Stem("pluck"), "pluck");});
test("plucked -> pluck", function() {deepEqual( Stem("plucked"), "pluck");});
test("plucking -> pluck", function() {deepEqual( Stem("plucking"), "pluck");});
test("plucks -> pluck", function() {deepEqual( Stem("plucks"), "pluck");});
test("plug -> plug", function() {deepEqual( Stem("plug"), "plug");});
test("pluies -> plui", function() {deepEqual( Stem("pluies"), "plui");});
test("plum -> plum", function() {deepEqual( Stem("plum"), "plum");});
test("plumage -> plumag", function() {deepEqual( Stem("plumage"), "plumag");});
test("plumbago -> plumbago", function() {deepEqual( Stem("plumbago"), "plumbago");});
test("plumed -> plume", function() {deepEqual( Stem("plumed"), "plume");});
test("pluming -> plume", function() {deepEqual( Stem("pluming"), "plume");});
test("plummets -> plummet", function() {deepEqual( Stem("plummets"), "plummet");});
test("plump -> plump", function() {deepEqual( Stem("plump"), "plump");});
test("plumpest -> plumpest", function() {deepEqual( Stem("plumpest"), "plumpest");});
test("plumpness -> plump", function() {deepEqual( Stem("plumpness"), "plump");});
test("plums -> plum", function() {deepEqual( Stem("plums"), "plum");});
test("plunder -> plunder", function() {deepEqual( Stem("plunder"), "plunder");});
test("plundered -> plunder", function() {deepEqual( Stem("plundered"), "plunder");});
test("plundering -> plunder", function() {deepEqual( Stem("plundering"), "plunder");});
test("plunge -> plung", function() {deepEqual( Stem("plunge"), "plung");});
test("plunged -> plung", function() {deepEqual( Stem("plunged"), "plung");});
test("plunges -> plung", function() {deepEqual( Stem("plunges"), "plung");});
test("plunging -> plung", function() {deepEqual( Stem("plunging"), "plung");});
test("plural -> plural", function() {deepEqual( Stem("plural"), "plural");});
test("plurality -> plural", function() {deepEqual( Stem("plurality"), "plural");});
test("plus -> plus", function() {deepEqual( Stem("plus"), "plus");});
test("plutonic -> pluton", function() {deepEqual( Stem("plutonic"), "pluton");});
test("ply -> pli", function() {deepEqual( Stem("ply"), "pli");});
test("plying -> pli", function() {deepEqual( Stem("plying"), "pli");});
test("plymouth -> plymouth", function() {deepEqual( Stem("plymouth"), "plymouth");});
test("pm -> pm", function() {deepEqual( Stem("pm"), "pm");});
test("poached -> poach", function() {deepEqual( Stem("poached"), "poach");});
test("poaching -> poach", function() {deepEqual( Stem("poaching"), "poach");});
test("poast -> poast", function() {deepEqual( Stem("poast"), "poast");});
test("pock -> pock", function() {deepEqual( Stem("pock"), "pock");});
test("pocket -> pocket", function() {deepEqual( Stem("pocket"), "pocket");});
test("pocketbook -> pocketbook", function() {deepEqual( Stem("pocketbook"), "pocketbook");});
test("pocketed -> pocket", function() {deepEqual( Stem("pocketed"), "pocket");});
test("pocketing -> pocket", function() {deepEqual( Stem("pocketing"), "pocket");});
test("pockets -> pocket", function() {deepEqual( Stem("pockets"), "pocket");});
test("pods -> pod", function() {deepEqual( Stem("pods"), "pod");});
test("poem -> poem", function() {deepEqual( Stem("poem"), "poem");});
test("poems -> poem", function() {deepEqual( Stem("poems"), "poem");});
test("poet -> poet", function() {deepEqual( Stem("poet"), "poet");});
test("poetic -> poetic", function() {deepEqual( Stem("poetic"), "poetic");});
test("poetical -> poetic", function() {deepEqual( Stem("poetical"), "poetic");});
test("poetizing -> poetiz", function() {deepEqual( Stem("poetizing"), "poetiz");});
test("poetry -> poetri", function() {deepEqual( Stem("poetry"), "poetri");});
test("poets -> poet", function() {deepEqual( Stem("poets"), "poet");});
test("poignant -> poignant", function() {deepEqual( Stem("poignant"), "poignant");});
test("poin -> poin", function() {deepEqual( Stem("poin"), "poin");});
test("poins -> poin", function() {deepEqual( Stem("poins"), "poin");});
test("point -> point", function() {deepEqual( Stem("point"), "point");});
test("pointed -> point", function() {deepEqual( Stem("pointed"), "point");});
test("pointedly -> point", function() {deepEqual( Stem("pointedly"), "point");});
test("pointing -> point", function() {deepEqual( Stem("pointing"), "point");});
test("pointless -> pointless", function() {deepEqual( Stem("pointless"), "pointless");});
test("points -> point", function() {deepEqual( Stem("points"), "point");});
test("poised -> pois", function() {deepEqual( Stem("poised"), "pois");});
test("poising -> pois", function() {deepEqual( Stem("poising"), "pois");});
test("poison -> poison", function() {deepEqual( Stem("poison"), "poison");});
test("poisoned -> poison", function() {deepEqual( Stem("poisoned"), "poison");});
test("poisoning -> poison", function() {deepEqual( Stem("poisoning"), "poison");});
test("poisonous -> poison", function() {deepEqual( Stem("poisonous"), "poison");});
test("poke -> poke", function() {deepEqual( Stem("poke"), "poke");});
test("poked -> poke", function() {deepEqual( Stem("poked"), "poke");});
test("poker -> poker", function() {deepEqual( Stem("poker"), "poker");});
test("pokers -> poker", function() {deepEqual( Stem("pokers"), "poker");});
test("pokes -> poke", function() {deepEqual( Stem("pokes"), "poke");});
test("poking -> poke", function() {deepEqual( Stem("poking"), "poke");});
test("pokorev -> pokorev", function() {deepEqual( Stem("pokorev"), "pokorev");});
test("polanco -> polanco", function() {deepEqual( Stem("polanco"), "polanco");});
test("polar -> polar", function() {deepEqual( Stem("polar"), "polar");});
test("pole -> pole", function() {deepEqual( Stem("pole"), "pole");});
test("polecat -> polecat", function() {deepEqual( Stem("polecat"), "polecat");});
test("polemical -> polem", function() {deepEqual( Stem("polemical"), "polem");});
test("polenka -> polenka", function() {deepEqual( Stem("polenka"), "polenka");});
test("poles -> pole", function() {deepEqual( Stem("poles"), "pole");});
test("police -> polic", function() {deepEqual( Stem("police"), "polic");});
test("policeman -> policeman", function() {deepEqual( Stem("policeman"), "policeman");});
test("policemen -> policemen", function() {deepEqual( Stem("policemen"), "policemen");});
test("policies -> polici", function() {deepEqual( Stem("policies"), "polici");});
test("policy -> polici", function() {deepEqual( Stem("policy"), "polici");});
test("polish -> polish", function() {deepEqual( Stem("polish"), "polish");});
test("polished -> polish", function() {deepEqual( Stem("polished"), "polish");});
test("polishes -> polish", function() {deepEqual( Stem("polishes"), "polish");});
test("polishing -> polish", function() {deepEqual( Stem("polishing"), "polish");});
test("polit -> polit", function() {deepEqual( Stem("polit"), "polit");});
test("polite -> polit", function() {deepEqual( Stem("polite"), "polit");});
test("politely -> polit", function() {deepEqual( Stem("politely"), "polit");});
test("politeness -> polit", function() {deepEqual( Stem("politeness"), "polit");});
test("politest -> politest", function() {deepEqual( Stem("politest"), "politest");});
test("politic -> polit", function() {deepEqual( Stem("politic"), "polit");});
test("political -> polit", function() {deepEqual( Stem("political"), "polit");});
test("politically -> polit", function() {deepEqual( Stem("politically"), "polit");});
test("politician -> politician", function() {deepEqual( Stem("politician"), "politician");});
test("politicians -> politician", function() {deepEqual( Stem("politicians"), "politician");});
test("politics -> polit", function() {deepEqual( Stem("politics"), "polit");});
test("polking -> polk", function() {deepEqual( Stem("polking"), "polk");});
test("poll -> poll", function() {deepEqual( Stem("poll"), "poll");});
test("pollard -> pollard", function() {deepEqual( Stem("pollard"), "pollard");});
test("pollewt -> pollewt", function() {deepEqual( Stem("pollewt"), "pollewt");});
test("polling -> poll", function() {deepEqual( Stem("polling"), "poll");});
test("pollis -> polli", function() {deepEqual( Stem("pollis"), "polli");});
test("pollute -> pollut", function() {deepEqual( Stem("pollute"), "pollut");});
test("polluted -> pollut", function() {deepEqual( Stem("polluted"), "pollut");});
test("pollutions -> pollut", function() {deepEqual( Stem("pollutions"), "pollut");});
test("polly -> polli", function() {deepEqual( Stem("polly"), "polli");});
test("pollys -> polli", function() {deepEqual( Stem("pollys"), "polli");});
test("poltroon -> poltroon", function() {deepEqual( Stem("poltroon"), "poltroon");});
test("polya -> polya", function() {deepEqual( Stem("polya"), "polya");});
test("polybori -> polybori", function() {deepEqual( Stem("polybori"), "polybori");});
test("polyborus -> polyborus", function() {deepEqual( Stem("polyborus"), "polyborus");});
test("polygastrica -> polygastrica", function() {deepEqual( Stem("polygastrica"), "polygastrica");});
test("polygon -> polygon", function() {deepEqual( Stem("polygon"), "polygon");});
test("polynesia -> polynesia", function() {deepEqual( Stem("polynesia"), "polynesia");});
test("polynesian -> polynesian", function() {deepEqual( Stem("polynesian"), "polynesian");});
test("polypi -> polypi", function() {deepEqual( Stem("polypi"), "polypi");});
test("polypus -> polypus", function() {deepEqual( Stem("polypus"), "polypus");});
test("polysyllable -> polysyl", function() {deepEqual( Stem("polysyllable"), "polysyl");});
test("pomaded -> pomad", function() {deepEqual( Stem("pomaded"), "pomad");});
test("pomarre -> pomarr", function() {deepEqual( Stem("pomarre"), "pomarr");});
test("pomatum -> pomatum", function() {deepEqual( Stem("pomatum"), "pomatum");});
test("pommel -> pommel", function() {deepEqual( Stem("pommel"), "pommel");});
test("pomp -> pomp", function() {deepEqual( Stem("pomp"), "pomp");});
test("pompey -> pompey", function() {deepEqual( Stem("pompey"), "pompey");});
test("pomposities -> pompos", function() {deepEqual( Stem("pomposities"), "pompos");});
test("pompous -> pompous", function() {deepEqual( Stem("pompous"), "pompous");});
test("pompously -> pompous", function() {deepEqual( Stem("pompously"), "pompous");});
test("pomps -> pomp", function() {deepEqual( Stem("pomps"), "pomp");});
test("poncho -> poncho", function() {deepEqual( Stem("poncho"), "poncho");});
test("ponchos -> poncho", function() {deepEqual( Stem("ponchos"), "poncho");});
test("pond -> pond", function() {deepEqual( Stem("pond"), "pond");});
test("ponder -> ponder", function() {deepEqual( Stem("ponder"), "ponder");});
test("pondered -> ponder", function() {deepEqual( Stem("pondered"), "ponder");});
test("pondering -> ponder", function() {deepEqual( Stem("pondering"), "ponder");});
test("ponderous -> ponder", function() {deepEqual( Stem("ponderous"), "ponder");});
test("ponders -> ponder", function() {deepEqual( Stem("ponders"), "ponder");});
test("ponds -> pond", function() {deepEqual( Stem("ponds"), "pond");});
test("poniard -> poniard", function() {deepEqual( Stem("poniard"), "poniard");});
test("ponies -> poni", function() {deepEqual( Stem("ponies"), "poni");});
test("ponsonby -> ponsonbi", function() {deepEqual( Stem("ponsonby"), "ponsonbi");});
test("pony -> poni", function() {deepEqual( Stem("pony"), "poni");});
test("pooder -> pooder", function() {deepEqual( Stem("pooder"), "pooder");});
test("poodle -> poodl", function() {deepEqual( Stem("poodle"), "poodl");});
test("poof -> poof", function() {deepEqual( Stem("poof"), "poof");});
test("pooh -> pooh", function() {deepEqual( Stem("pooh"), "pooh");});
test("pool -> pool", function() {deepEqual( Stem("pool"), "pool");});
test("pools -> pool", function() {deepEqual( Stem("pools"), "pool");});
test("poonded -> poond", function() {deepEqual( Stem("poonded"), "poond");});
test("poop -> poop", function() {deepEqual( Stem("poop"), "poop");});
test("poor -> poor", function() {deepEqual( Stem("poor"), "poor");});
test("poorer -> poorer", function() {deepEqual( Stem("poorer"), "poorer");});
test("poorest -> poorest", function() {deepEqual( Stem("poorest"), "poorest");});
test("poorly -> poor", function() {deepEqual( Stem("poorly"), "poor");});
test("poorness -> poor", function() {deepEqual( Stem("poorness"), "poor");});
test("pop -> pop", function() {deepEqual( Stem("pop"), "pop");});
test("pope -> pope", function() {deepEqual( Stem("pope"), "pope");});
test("popery -> poperi", function() {deepEqual( Stem("popery"), "poperi");});
test("poplars -> poplar", function() {deepEqual( Stem("poplars"), "poplar");});
test("popolorum -> popolorum", function() {deepEqual( Stem("popolorum"), "popolorum");});
test("popped -> pop", function() {deepEqual( Stem("popped"), "pop");});
test("poppet -> poppet", function() {deepEqual( Stem("poppet"), "poppet");});
test("popping -> pop", function() {deepEqual( Stem("popping"), "pop");});
test("popular -> popular", function() {deepEqual( Stem("popular"), "popular");});
test("popularity -> popular", function() {deepEqual( Stem("popularity"), "popular");});
test("populated -> popul", function() {deepEqual( Stem("populated"), "popul");});
test("population -> popul", function() {deepEqual( Stem("population"), "popul");});
test("populous -> popul", function() {deepEqual( Stem("populous"), "popul");});
test("porch -> porch", function() {deepEqual( Stem("porch"), "porch");});
test("porches -> porch", function() {deepEqual( Stem("porches"), "porch");});
test("porcupine -> porcupin", function() {deepEqual( Stem("porcupine"), "porcupin");});
test("pore -> pore", function() {deepEqual( Stem("pore"), "pore");});
test("pored -> pore", function() {deepEqual( Stem("pored"), "pore");});
test("pores -> pore", function() {deepEqual( Stem("pores"), "pore");});
test("porfiry -> porfiri", function() {deepEqual( Stem("porfiry"), "porfiri");});
test("poring -> pore", function() {deepEqual( Stem("poring"), "pore");});
test("pork -> pork", function() {deepEqual( Stem("pork"), "pork");});
test("porous -> porous", function() {deepEqual( Stem("porous"), "porous");});
test("porphyries -> porphyri", function() {deepEqual( Stem("porphyries"), "porphyri");});
test("porphyrio -> porphyrio", function() {deepEqual( Stem("porphyrio"), "porphyrio");});
test("porphyry -> porphyri", function() {deepEqual( Stem("porphyry"), "porphyri");});
test("porpoises -> porpois", function() {deepEqual( Stem("porpoises"), "porpois");});
test("porridge -> porridg", function() {deepEqual( Stem("porridge"), "porridg");});
test("porson -> porson", function() {deepEqual( Stem("porson"), "porson");});
test("port -> port", function() {deepEqual( Stem("port"), "port");});
test("portable -> portabl", function() {deepEqual( Stem("portable"), "portabl");});
test("portal -> portal", function() {deepEqual( Stem("portal"), "portal");});
test("portend -> portend", function() {deepEqual( Stem("portend"), "portend");});
test("portended -> portend", function() {deepEqual( Stem("portended"), "portend");});
test("portentous -> portent", function() {deepEqual( Stem("portentous"), "portent");});
test("porter -> porter", function() {deepEqual( Stem("porter"), "porter");});
test("porterage -> porterag", function() {deepEqual( Stem("porterage"), "porterag");});
test("porters -> porter", function() {deepEqual( Stem("porters"), "porter");});
test("portfolio -> portfolio", function() {deepEqual( Stem("portfolio"), "portfolio");});
test("portfolios -> portfolio", function() {deepEqual( Stem("portfolios"), "portfolio");});
test("porth -> porth", function() {deepEqual( Stem("porth"), "porth");});
test("portico -> portico", function() {deepEqual( Stem("portico"), "portico");});
test("portillo -> portillo", function() {deepEqual( Stem("portillo"), "portillo");});
test("portion -> portion", function() {deepEqual( Stem("portion"), "portion");});
test("portionless -> portionless", function() {deepEqual( Stem("portionless"), "portionless");});
test("portions -> portion", function() {deepEqual( Stem("portions"), "portion");});
test("portland -> portland", function() {deepEqual( Stem("portland"), "portland");});
test("portly -> port", function() {deepEqual( Stem("portly"), "port");});
test("portmanteau -> portmanteau", function() {deepEqual( Stem("portmanteau"), "portmanteau");});
test("portmanteaus -> portmanteaus", function() {deepEqual( Stem("portmanteaus"), "portmanteaus");});
test("porto -> porto", function() {deepEqual( Stem("porto"), "porto");});
test("portrait -> portrait", function() {deepEqual( Stem("portrait"), "portrait");});
test("portraits -> portrait", function() {deepEqual( Stem("portraits"), "portrait");});
test("portrayed -> portray", function() {deepEqual( Stem("portrayed"), "portray");});
test("ports -> port", function() {deepEqual( Stem("ports"), "port");});
test("portsmouth -> portsmouth", function() {deepEqual( Stem("portsmouth"), "portsmouth");});
test("portugal -> portug", function() {deepEqual( Stem("portugal"), "portug");});
test("portuguese -> portugues", function() {deepEqual( Stem("portuguese"), "portugues");});
test("pose -> pose", function() {deepEqual( Stem("pose"), "pose");});
test("posed -> pose", function() {deepEqual( Stem("posed"), "pose");});
test("poses -> pose", function() {deepEqual( Stem("poses"), "pose");});
test("posession -> posess", function() {deepEqual( Stem("posession"), "posess");});
test("posing -> pose", function() {deepEqual( Stem("posing"), "pose");});
test("position -> posit", function() {deepEqual( Stem("position"), "posit");});
test("positions -> posit", function() {deepEqual( Stem("positions"), "posit");});
test("positive -> posit", function() {deepEqual( Stem("positive"), "posit");});
test("positively -> posit", function() {deepEqual( Stem("positively"), "posit");});
test("positiveness -> posit", function() {deepEqual( Stem("positiveness"), "posit");});
test("possess -> possess", function() {deepEqual( Stem("possess"), "possess");});
test("possesse -> possess", function() {deepEqual( Stem("possesse"), "possess");});
test("possessed -> possess", function() {deepEqual( Stem("possessed"), "possess");});
test("possesses -> possess", function() {deepEqual( Stem("possesses"), "possess");});
test("possessin -> possessin", function() {deepEqual( Stem("possessin"), "possessin");});
test("possessing -> possess", function() {deepEqual( Stem("possessing"), "possess");});
test("possession -> possess", function() {deepEqual( Stem("possession"), "possess");});
test("possessions -> possess", function() {deepEqual( Stem("possessions"), "possess");});
test("possessive -> possess", function() {deepEqual( Stem("possessive"), "possess");});
test("possessor -> possessor", function() {deepEqual( Stem("possessor"), "possessor");});
test("possessors -> possessor", function() {deepEqual( Stem("possessors"), "possessor");});
test("possibilities -> possibl", function() {deepEqual( Stem("possibilities"), "possibl");});
test("possibility -> possibl", function() {deepEqual( Stem("possibility"), "possibl");});
test("possible -> possibl", function() {deepEqual( Stem("possible"), "possibl");});
test("possibly -> possibl", function() {deepEqual( Stem("possibly"), "possibl");});
test("post -> post", function() {deepEqual( Stem("post"), "post");});
test("posta -> posta", function() {deepEqual( Stem("posta"), "posta");});
test("postage -> postag", function() {deepEqual( Stem("postage"), "postag");});
test("postas -> posta", function() {deepEqual( Stem("postas"), "posta");});
test("posted -> post", function() {deepEqual( Stem("posted"), "post");});
test("poster -> poster", function() {deepEqual( Stem("poster"), "poster");});
test("posterior -> posterior", function() {deepEqual( Stem("posterior"), "posterior");});
test("posterity -> poster", function() {deepEqual( Stem("posterity"), "poster");});
test("postern -> postern", function() {deepEqual( Stem("postern"), "postern");});
test("posters -> poster", function() {deepEqual( Stem("posters"), "poster");});
test("posthouse -> posthous", function() {deepEqual( Stem("posthouse"), "posthous");});
test("postilion -> postilion", function() {deepEqual( Stem("postilion"), "postilion");});
test("posting -> post", function() {deepEqual( Stem("posting"), "post");});
test("postman -> postman", function() {deepEqual( Stem("postman"), "postman");});
test("postmaster -> postmast", function() {deepEqual( Stem("postmaster"), "postmast");});
test("postmen -> postmen", function() {deepEqual( Stem("postmen"), "postmen");});
test("postpone -> postpon", function() {deepEqual( Stem("postpone"), "postpon");});
test("postponed -> postpon", function() {deepEqual( Stem("postponed"), "postpon");});
test("postponement -> postpon", function() {deepEqual( Stem("postponement"), "postpon");});
test("postpones -> postpon", function() {deepEqual( Stem("postpones"), "postpon");});
test("postponing -> postpon", function() {deepEqual( Stem("postponing"), "postpon");});
test("posts -> post", function() {deepEqual( Stem("posts"), "post");});
test("postscript -> postscript", function() {deepEqual( Stem("postscript"), "postscript");});
test("posture -> postur", function() {deepEqual( Stem("posture"), "postur");});
test("postures -> postur", function() {deepEqual( Stem("postures"), "postur");});
test("posuit -> posuit", function() {deepEqual( Stem("posuit"), "posuit");});
test("pot -> pot", function() {deepEqual( Stem("pot"), "pot");});
test("potanchikov -> potanchikov", function() {deepEqual( Stem("potanchikov"), "potanchikov");});
test("potash -> potash", function() {deepEqual( Stem("potash"), "potash");});
test("potations -> potat", function() {deepEqual( Stem("potations"), "potat");});
test("potato -> potato", function() {deepEqual( Stem("potato"), "potato");});
test("potatoes -> potato", function() {deepEqual( Stem("potatoes"), "potato");});
test("potatoless -> potatoless", function() {deepEqual( Stem("potatoless"), "potatoless");});
test("potboy -> potboy", function() {deepEqual( Stem("potboy"), "potboy");});
test("potchinkov -> potchinkov", function() {deepEqual( Stem("potchinkov"), "potchinkov");});
test("potent -> potent", function() {deepEqual( Stem("potent"), "potent");});
test("potentate -> potent", function() {deepEqual( Stem("potentate"), "potent");});
test("pothouse -> pothous", function() {deepEqual( Stem("pothouse"), "pothous");});
test("potion -> potion", function() {deepEqual( Stem("potion"), "potion");});
test("potosi -> potosi", function() {deepEqual( Stem("potosi"), "potosi");});
test("potrero -> potrero", function() {deepEqual( Stem("potrero"), "potrero");});
test("pots -> pot", function() {deepEqual( Stem("pots"), "pot");});
test("potted -> pot", function() {deepEqual( Stem("potted"), "pot");});
test("potter -> potter", function() {deepEqual( Stem("potter"), "potter");});
test("potteries -> potteri", function() {deepEqual( Stem("potteries"), "potteri");});
test("pottery -> potteri", function() {deepEqual( Stem("pottery"), "potteri");});
test("pouce -> pouc", function() {deepEqual( Stem("pouce"), "pouc");});
test("pouch -> pouch", function() {deepEqual( Stem("pouch"), "pouch");});
test("pouches -> pouch", function() {deepEqual( Stem("pouches"), "pouch");});
test("poultry -> poultri", function() {deepEqual( Stem("poultry"), "poultri");});
test("pounce -> pounc", function() {deepEqual( Stem("pounce"), "pounc");});
test("pounced -> pounc", function() {deepEqual( Stem("pounced"), "pounc");});
test("pounces -> pounc", function() {deepEqual( Stem("pounces"), "pounc");});
test("pouncing -> pounc", function() {deepEqual( Stem("pouncing"), "pounc");});
test("pound -> pound", function() {deepEqual( Stem("pound"), "pound");});
test("pounded -> pound", function() {deepEqual( Stem("pounded"), "pound");});
test("pounder -> pounder", function() {deepEqual( Stem("pounder"), "pounder");});
test("pounds -> pound", function() {deepEqual( Stem("pounds"), "pound");});
test("pountney -> pountney", function() {deepEqual( Stem("pountney"), "pountney");});
test("pountneys -> pountney", function() {deepEqual( Stem("pountneys"), "pountney");});
test("pour -> pour", function() {deepEqual( Stem("pour"), "pour");});
test("poured -> pour", function() {deepEqual( Stem("poured"), "pour");});
test("pouring -> pour", function() {deepEqual( Stem("pouring"), "pour");});
test("pours -> pour", function() {deepEqual( Stem("pours"), "pour");});
test("pout -> pout", function() {deepEqual( Stem("pout"), "pout");});
test("pouted -> pout", function() {deepEqual( Stem("pouted"), "pout");});
test("pouting -> pout", function() {deepEqual( Stem("pouting"), "pout");});
test("poverty -> poverti", function() {deepEqual( Stem("poverty"), "poverti");});
test("powder -> powder", function() {deepEqual( Stem("powder"), "powder");});
test("powdered -> powder", function() {deepEqual( Stem("powdered"), "powder");});
test("powderin -> powderin", function() {deepEqual( Stem("powderin"), "powderin");});
test("powe -> pow", function() {deepEqual( Stem("powe"), "pow");});
test("powell -> powel", function() {deepEqual( Stem("powell"), "powel");});
test("power -> power", function() {deepEqual( Stem("power"), "power");});
test("powerful -> power", function() {deepEqual( Stem("powerful"), "power");});
test("powerfully -> power", function() {deepEqual( Stem("powerfully"), "power");});
test("powerless -> powerless", function() {deepEqual( Stem("powerless"), "powerless");});
test("powers -> power", function() {deepEqual( Stem("powers"), "power");});
test("pox -> pox", function() {deepEqual( Stem("pox"), "pox");});
test("pp -> pp", function() {deepEqual( Stem("pp"), "pp");});
test("pr -> pr", function() {deepEqual( Stem("pr"), "pr");});
test("practicability -> practic", function() {deepEqual( Stem("practicability"), "practic");});
test("practicable -> practic", function() {deepEqual( Stem("practicable"), "practic");});
test("practical -> practic", function() {deepEqual( Stem("practical"), "practic");});
test("practicality -> practic", function() {deepEqual( Stem("practicality"), "practic");});
test("practically -> practic", function() {deepEqual( Stem("practically"), "practic");});
test("practice -> practic", function() {deepEqual( Stem("practice"), "practic");});
test("practices -> practic", function() {deepEqual( Stem("practices"), "practic");});
test("practise -> practis", function() {deepEqual( Stem("practise"), "practis");});
test("practised -> practis", function() {deepEqual( Stem("practised"), "practis");});
test("practiser -> practis", function() {deepEqual( Stem("practiser"), "practis");});
test("practises -> practis", function() {deepEqual( Stem("practises"), "practis");});
test("practising -> practis", function() {deepEqual( Stem("practising"), "practis");});
test("practitioner -> practition", function() {deepEqual( Stem("practitioner"), "practition");});
test("practitioners -> practition", function() {deepEqual( Stem("practitioners"), "practition");});
test("prae -> prae", function() {deepEqual( Stem("prae"), "prae");});
test("praetorian -> praetorian", function() {deepEqual( Stem("praetorian"), "praetorian");});
test("praia -> praia", function() {deepEqual( Stem("praia"), "praia");});
test("prairies -> prairi", function() {deepEqual( Stem("prairies"), "prairi");});
test("praise -> prais", function() {deepEqual( Stem("praise"), "prais");});
test("praised -> prais", function() {deepEqual( Stem("praised"), "prais");});
test("praises -> prais", function() {deepEqual( Stem("praises"), "prais");});
test("praiseworthy -> praiseworthi", function() {deepEqual( Stem("praiseworthy"), "praiseworthi");});
test("praising -> prais", function() {deepEqual( Stem("praising"), "prais");});
test("prance -> pranc", function() {deepEqual( Stem("prance"), "pranc");});
test("prancing -> pranc", function() {deepEqual( Stem("prancing"), "pranc");});
test("pranks -> prank", function() {deepEqual( Stem("pranks"), "prank");});
test("prasant -> prasant", function() {deepEqual( Stem("prasant"), "prasant");});
test("praskovya -> praskovya", function() {deepEqual( Stem("praskovya"), "praskovya");});
test("prattlings -> prattl", function() {deepEqual( Stem("prattlings"), "prattl");});
test("pratty -> pratti", function() {deepEqual( Stem("pratty"), "pratti");});
test("prawn -> prawn", function() {deepEqual( Stem("prawn"), "prawn");});
test("prawns -> prawn", function() {deepEqual( Stem("prawns"), "prawn");});
test("pray -> pray", function() {deepEqual( Stem("pray"), "pray");});
test("praya -> praya", function() {deepEqual( Stem("praya"), "praya");});
test("prayed -> pray", function() {deepEqual( Stem("prayed"), "pray");});
test("prayer -> prayer", function() {deepEqual( Stem("prayer"), "prayer");});
test("prayers -> prayer", function() {deepEqual( Stem("prayers"), "prayer");});
test("prayfession -> prayfess", function() {deepEqual( Stem("prayfession"), "prayfess");});
test("prayin -> prayin", function() {deepEqual( Stem("prayin"), "prayin");});
test("praying -> pray", function() {deepEqual( Stem("praying"), "pray");});
test("prays -> pray", function() {deepEqual( Stem("prays"), "pray");});
test("pre -> pre", function() {deepEqual( Stem("pre"), "pre");});
test("preach -> preach", function() {deepEqual( Stem("preach"), "preach");});
test("preached -> preach", function() {deepEqual( Stem("preached"), "preach");});
test("preacher -> preacher", function() {deepEqual( Stem("preacher"), "preacher");});
test("preachers -> preacher", function() {deepEqual( Stem("preachers"), "preacher");});
test("preaching -> preach", function() {deepEqual( Stem("preaching"), "preach");});
test("prebendary -> prebendari", function() {deepEqual( Stem("prebendary"), "prebendari");});
test("precarious -> precari", function() {deepEqual( Stem("precarious"), "precari");});
test("precaution -> precaut", function() {deepEqual( Stem("precaution"), "precaut");});
test("precautions -> precaut", function() {deepEqual( Stem("precautions"), "precaut");});
test("precede -> preced", function() {deepEqual( Stem("precede"), "preced");});
test("preceded -> preced", function() {deepEqual( Stem("preceded"), "preced");});
test("precedence -> preced", function() {deepEqual( Stem("precedence"), "preced");});
test("precedent -> preced", function() {deepEqual( Stem("precedent"), "preced");});
test("precedents -> preced", function() {deepEqual( Stem("precedents"), "preced");});
test("preceding -> preced", function() {deepEqual( Stem("preceding"), "preced");});
test("precept -> precept", function() {deepEqual( Stem("precept"), "precept");});
test("preceptor -> preceptor", function() {deepEqual( Stem("preceptor"), "preceptor");});
test("precepts -> precept", function() {deepEqual( Stem("precepts"), "precept");});
test("precincts -> precinct", function() {deepEqual( Stem("precincts"), "precinct");});
test("precious -> precious", function() {deepEqual( Stem("precious"), "precious");});
test("preciousest -> preciousest", function() {deepEqual( Stem("preciousest"), "preciousest");});
test("precipice -> precipic", function() {deepEqual( Stem("precipice"), "precipic");});
test("precipices -> precipic", function() {deepEqual( Stem("precipices"), "precipic");});
test("precipitate -> precipit", function() {deepEqual( Stem("precipitate"), "precipit");});
test("precipitated -> precipit", function() {deepEqual( Stem("precipitated"), "precipit");});
test("precipitately -> precipit", function() {deepEqual( Stem("precipitately"), "precipit");});
test("precipitation -> precipit", function() {deepEqual( Stem("precipitation"), "precipit");});
test("precipitous -> precipit", function() {deepEqual( Stem("precipitous"), "precipit");});
test("precise -> precis", function() {deepEqual( Stem("precise"), "precis");});
test("precisely -> precis", function() {deepEqual( Stem("precisely"), "precis");});
test("precision -> precis", function() {deepEqual( Stem("precision"), "precis");});
test("precluded -> preclud", function() {deepEqual( Stem("precluded"), "preclud");});
test("precocious -> precoci", function() {deepEqual( Stem("precocious"), "precoci");});
test("precociously -> precoci", function() {deepEqual( Stem("precociously"), "precoci");});
test("preconceived -> preconceiv", function() {deepEqual( Stem("preconceived"), "preconceiv");});
test("preconcerted -> preconcert", function() {deepEqual( Stem("preconcerted"), "preconcert");});
test("predecessor -> predecessor", function() {deepEqual( Stem("predecessor"), "predecessor");});
test("predecessors -> predecessor", function() {deepEqual( Stem("predecessors"), "predecessor");});
test("predestined -> predestin", function() {deepEqual( Stem("predestined"), "predestin");});
test("predicament -> predica", function() {deepEqual( Stem("predicament"), "predica");});
test("predicaments -> predica", function() {deepEqual( Stem("predicaments"), "predica");});
test("predict -> predict", function() {deepEqual( Stem("predict"), "predict");});
test("predicted -> predict", function() {deepEqual( Stem("predicted"), "predict");});
test("predicting -> predict", function() {deepEqual( Stem("predicting"), "predict");});
test("prediction -> predict", function() {deepEqual( Stem("prediction"), "predict");});
test("predictions -> predict", function() {deepEqual( Stem("predictions"), "predict");});
test("predilections -> predilect", function() {deepEqual( Stem("predilections"), "predilect");});
test("predisposition -> predisposit", function() {deepEqual( Stem("predisposition"), "predisposit");});
test("predominant -> predomin", function() {deepEqual( Stem("predominant"), "predomin");});
test("predominate -> predomin", function() {deepEqual( Stem("predominate"), "predomin");});
test("predominated -> predomin", function() {deepEqual( Stem("predominated"), "predomin");});
test("preening -> preen", function() {deepEqual( Stem("preening"), "preen");});
test("preface -> prefac", function() {deepEqual( Stem("preface"), "prefac");});
test("prefacing -> prefac", function() {deepEqual( Stem("prefacing"), "prefac");});
test("prefatory -> prefatori", function() {deepEqual( Stem("prefatory"), "prefatori");});
test("prefer -> prefer", function() {deepEqual( Stem("prefer"), "prefer");});
test("preferable -> prefer", function() {deepEqual( Stem("preferable"), "prefer");});
test("preference -> prefer", function() {deepEqual( Stem("preference"), "prefer");});
test("preferer -> prefer", function() {deepEqual( Stem("preferer"), "prefer");});
test("preferment -> prefer", function() {deepEqual( Stem("preferment"), "prefer");});
test("preferred -> prefer", function() {deepEqual( Stem("preferred"), "prefer");});
test("preferring -> prefer", function() {deepEqual( Stem("preferring"), "prefer");});
test("prefers -> prefer", function() {deepEqual( Stem("prefers"), "prefer");});
test("prefixed -> prefix", function() {deepEqual( Stem("prefixed"), "prefix");});
test("prehensile -> prehensil", function() {deepEqual( Stem("prehensile"), "prehensil");});
test("prehensilis -> prehensili", function() {deepEqual( Stem("prehensilis"), "prehensili");});
test("prejudge -> prejudg", function() {deepEqual( Stem("prejudge"), "prejudg");});
test("prejudice -> prejudic", function() {deepEqual( Stem("prejudice"), "prejudic");});
test("prejudiced -> prejud", function() {deepEqual( Stem("prejudiced"), "prejud");});
test("prejudices -> prejudic", function() {deepEqual( Stem("prejudices"), "prejudic");});
test("prejudicial -> prejudici", function() {deepEqual( Stem("prejudicial"), "prejudici");});
test("preliminaries -> preliminari", function() {deepEqual( Stem("preliminaries"), "preliminari");});
test("preliminary -> preliminari", function() {deepEqual( Stem("preliminary"), "preliminari");});
test("prelude -> prelud", function() {deepEqual( Stem("prelude"), "prelud");});
test("premature -> prematur", function() {deepEqual( Stem("premature"), "prematur");});
test("prematurely -> prematur", function() {deepEqual( Stem("prematurely"), "prematur");});
test("premeditated -> premedit", function() {deepEqual( Stem("premeditated"), "premedit");});
test("premeditation -> premedit", function() {deepEqual( Stem("premeditation"), "premedit");});
test("premier -> premier", function() {deepEqual( Stem("premier"), "premier");});
test("premiers -> premier", function() {deepEqual( Stem("premiers"), "premier");});
test("premiership -> premiership", function() {deepEqual( Stem("premiership"), "premiership");});
test("premise -> premis", function() {deepEqual( Stem("premise"), "premis");});
test("premised -> premis", function() {deepEqual( Stem("premised"), "premis");});
test("premises -> premis", function() {deepEqual( Stem("premises"), "premis");});
test("premium -> premium", function() {deepEqual( Stem("premium"), "premium");});
test("prentice -> prentic", function() {deepEqual( Stem("prentice"), "prentic");});
test("prentices -> prentic", function() {deepEqual( Stem("prentices"), "prentic");});
test("preoccupation -> preoccup", function() {deepEqual( Stem("preoccupation"), "preoccup");});
test("preoccupations -> preoccup", function() {deepEqual( Stem("preoccupations"), "preoccup");});
test("preoccupied -> preoccupi", function() {deepEqual( Stem("preoccupied"), "preoccupi");});
test("preordained -> preordain", function() {deepEqual( Stem("preordained"), "preordain");});
test("preparation -> prepar", function() {deepEqual( Stem("preparation"), "prepar");});
test("preparations -> prepar", function() {deepEqual( Stem("preparations"), "prepar");});
test("preparatory -> preparatori", function() {deepEqual( Stem("preparatory"), "preparatori");});
test("prepare -> prepar", function() {deepEqual( Stem("prepare"), "prepar");});
test("prepared -> prepar", function() {deepEqual( Stem("prepared"), "prepar");});
test("prepares -> prepar", function() {deepEqual( Stem("prepares"), "prepar");});
test("preparing -> prepar", function() {deepEqual( Stem("preparing"), "prepar");});
test("prepense -> prepens", function() {deepEqual( Stem("prepense"), "prepens");});
test("preponderance -> preponder", function() {deepEqual( Stem("preponderance"), "preponder");});
test("preponderated -> preponder", function() {deepEqual( Stem("preponderated"), "preponder");});
test("preponderates -> preponder", function() {deepEqual( Stem("preponderates"), "preponder");});
test("preponderating -> preponder", function() {deepEqual( Stem("preponderating"), "preponder");});
test("prepossessed -> prepossess", function() {deepEqual( Stem("prepossessed"), "prepossess");});
test("prepossessing -> prepossess", function() {deepEqual( Stem("prepossessing"), "prepossess");});
test("prepossession -> prepossess", function() {deepEqual( Stem("prepossession"), "prepossess");});
test("prepossessions -> prepossess", function() {deepEqual( Stem("prepossessions"), "prepossess");});
test("preposterous -> preposter", function() {deepEqual( Stem("preposterous"), "preposter");});
test("presbyterian -> presbyterian", function() {deepEqual( Stem("presbyterian"), "presbyterian");});
test("prescribe -> prescrib", function() {deepEqual( Stem("prescribe"), "prescrib");});
test("prescribed -> prescrib", function() {deepEqual( Stem("prescribed"), "prescrib");});
test("prescription -> prescript", function() {deepEqual( Stem("prescription"), "prescript");});
test("prescriptive -> prescript", function() {deepEqual( Stem("prescriptive"), "prescript");});
test("presence -> presenc", function() {deepEqual( Stem("presence"), "presenc");});
test("presenfty -> presenfti", function() {deepEqual( Stem("presenfty"), "presenfti");});
test("present -> present", function() {deepEqual( Stem("present"), "present");});
test("presentable -> present", function() {deepEqual( Stem("presentable"), "present");});
test("presentation -> present", function() {deepEqual( Stem("presentation"), "present");});
test("presented -> present", function() {deepEqual( Stem("presented"), "present");});
test("presentime -> presentim", function() {deepEqual( Stem("presentime"), "presentim");});
test("presentiment -> presenti", function() {deepEqual( Stem("presentiment"), "presenti");});
test("presentiments -> presenti", function() {deepEqual( Stem("presentiments"), "presenti");});
test("presenting -> present", function() {deepEqual( Stem("presenting"), "present");});
test("presently -> present", function() {deepEqual( Stem("presently"), "present");});
test("presentments -> present", function() {deepEqual( Stem("presentments"), "present");});
test("presents -> present", function() {deepEqual( Stem("presents"), "present");});
test("preservation -> preserv", function() {deepEqual( Stem("preservation"), "preserv");});
test("preserve -> preserv", function() {deepEqual( Stem("preserve"), "preserv");});
test("preserved -> preserv", function() {deepEqual( Stem("preserved"), "preserv");});
test("preserver -> preserv", function() {deepEqual( Stem("preserver"), "preserv");});
test("preserves -> preserv", function() {deepEqual( Stem("preserves"), "preserv");});
test("preserving -> preserv", function() {deepEqual( Stem("preserving"), "preserv");});
test("preside -> presid", function() {deepEqual( Stem("preside"), "presid");});
test("presided -> presid", function() {deepEqual( Stem("presided"), "presid");});
test("presidency -> presid", function() {deepEqual( Stem("presidency"), "presid");});
test("president -> presid", function() {deepEqual( Stem("president"), "presid");});
test("presidents -> presid", function() {deepEqual( Stem("presidents"), "presid");});
test("presidentship -> presidentship", function() {deepEqual( Stem("presidentship"), "presidentship");});
test("presiding -> presid", function() {deepEqual( Stem("presiding"), "presid");});
test("press -> press", function() {deepEqual( Stem("press"), "press");});
test("pressed -> press", function() {deepEqual( Stem("pressed"), "press");});
test("presses -> press", function() {deepEqual( Stem("presses"), "press");});
test("pressing -> press", function() {deepEqual( Stem("pressing"), "press");});
test("pressingly -> press", function() {deepEqual( Stem("pressingly"), "press");});
test("pressure -> pressur", function() {deepEqual( Stem("pressure"), "pressur");});
test("prestige -> prestig", function() {deepEqual( Stem("prestige"), "prestig");});
test("presumably -> presum", function() {deepEqual( Stem("presumably"), "presum");});
test("presume -> presum", function() {deepEqual( Stem("presume"), "presum");});
test("presumed -> presum", function() {deepEqual( Stem("presumed"), "presum");});
test("presumes -> presum", function() {deepEqual( Stem("presumes"), "presum");});
test("presuming -> presum", function() {deepEqual( Stem("presuming"), "presum");});
test("presumption -> presumpt", function() {deepEqual( Stem("presumption"), "presumpt");});
test("presumptuous -> presumptu", function() {deepEqual( Stem("presumptuous"), "presumptu");});
test("presumptuously -> presumptu", function() {deepEqual( Stem("presumptuously"), "presumptu");});
test("presupposes -> presuppos", function() {deepEqual( Stem("presupposes"), "presuppos");});
test("pretence -> pretenc", function() {deepEqual( Stem("pretence"), "pretenc");});
test("pretences -> pretenc", function() {deepEqual( Stem("pretences"), "pretenc");});
test("pretend -> pretend", function() {deepEqual( Stem("pretend"), "pretend");});
test("pretended -> pretend", function() {deepEqual( Stem("pretended"), "pretend");});
test("pretending -> pretend", function() {deepEqual( Stem("pretending"), "pretend");});
test("pretends -> pretend", function() {deepEqual( Stem("pretends"), "pretend");});
test("pretension -> pretens", function() {deepEqual( Stem("pretension"), "pretens");});
test("pretensions -> pretens", function() {deepEqual( Stem("pretensions"), "pretens");});
test("pretentious -> pretenti", function() {deepEqual( Stem("pretentious"), "pretenti");});
test("preternatural -> preternatur", function() {deepEqual( Stem("preternatural"), "preternatur");});
test("pretext -> pretext", function() {deepEqual( Stem("pretext"), "pretext");});
test("pretexts -> pretext", function() {deepEqual( Stem("pretexts"), "pretext");});
test("prett -> prett", function() {deepEqual( Stem("prett"), "prett");});
test("prettier -> prettier", function() {deepEqual( Stem("prettier"), "prettier");});
test("prettiest -> prettiest", function() {deepEqual( Stem("prettiest"), "prettiest");});
test("prettily -> prettili", function() {deepEqual( Stem("prettily"), "prettili");});
test("prettiness -> pretti", function() {deepEqual( Stem("prettiness"), "pretti");});
test("prettinesses -> pretti", function() {deepEqual( Stem("prettinesses"), "pretti");});
test("pretty -> pretti", function() {deepEqual( Stem("pretty"), "pretti");});
test("prevail -> prevail", function() {deepEqual( Stem("prevail"), "prevail");});
test("prevailed -> prevail", function() {deepEqual( Stem("prevailed"), "prevail");});
test("prevailing -> prevail", function() {deepEqual( Stem("prevailing"), "prevail");});
test("prevails -> prevail", function() {deepEqual( Stem("prevails"), "prevail");});
test("prevalent -> preval", function() {deepEqual( Stem("prevalent"), "preval");});
test("prevaricate -> prevar", function() {deepEqual( Stem("prevaricate"), "prevar");});
test("prevent -> prevent", function() {deepEqual( Stem("prevent"), "prevent");});
test("prevented -> prevent", function() {deepEqual( Stem("prevented"), "prevent");});
test("preventing -> prevent", function() {deepEqual( Stem("preventing"), "prevent");});
test("prevents -> prevent", function() {deepEqual( Stem("prevents"), "prevent");});
test("previous -> previous", function() {deepEqual( Stem("previous"), "previous");});
test("previously -> previous", function() {deepEqual( Stem("previously"), "previous");});
test("prevost -> prevost", function() {deepEqual( Stem("prevost"), "prevost");});
test("prey -> prey", function() {deepEqual( Stem("prey"), "prey");});
test("preyed -> prey", function() {deepEqual( Stem("preyed"), "prey");});
test("preying -> prey", function() {deepEqual( Stem("preying"), "prey");});
test("preys -> prey", function() {deepEqual( Stem("preys"), "prey");});
test("price -> price", function() {deepEqual( Stem("price"), "price");});
test("priceless -> priceless", function() {deepEqual( Stem("priceless"), "priceless");});
test("prices -> price", function() {deepEqual( Stem("prices"), "price");});
test("prick -> prick", function() {deepEqual( Stem("prick"), "prick");});
test("pricked -> prick", function() {deepEqual( Stem("pricked"), "prick");});
test("pricking -> prick", function() {deepEqual( Stem("pricking"), "prick");});
test("prickles -> prickl", function() {deepEqual( Stem("prickles"), "prickl");});
test("prickly -> prick", function() {deepEqual( Stem("prickly"), "prick");});
test("pricks -> prick", function() {deepEqual( Stem("pricks"), "prick");});
test("pride -> pride", function() {deepEqual( Stem("pride"), "pride");});
test("pries -> pri", function() {deepEqual( Stem("pries"), "pri");});
test("priest -> priest", function() {deepEqual( Stem("priest"), "priest");});
test("priesthood -> priesthood", function() {deepEqual( Stem("priesthood"), "priesthood");});
test("priestly -> priest", function() {deepEqual( Stem("priestly"), "priest");});
test("priests -> priest", function() {deepEqual( Stem("priests"), "priest");});
test("prig -> prig", function() {deepEqual( Stem("prig"), "prig");});
test("prilukov -> prilukov", function() {deepEqual( Stem("prilukov"), "prilukov");});
test("prim -> prim", function() {deepEqual( Stem("prim"), "prim");});
test("primarily -> primarili", function() {deepEqual( Stem("primarily"), "primarili");});
test("primary -> primari", function() {deepEqual( Stem("primary"), "primari");});
test("prime -> prime", function() {deepEqual( Stem("prime"), "prime");});
test("primer -> primer", function() {deepEqual( Stem("primer"), "primer");});
test("primera -> primera", function() {deepEqual( Stem("primera"), "primera");});
test("primeval -> primev", function() {deepEqual( Stem("primeval"), "primev");});
test("primitive -> primit", function() {deepEqual( Stem("primitive"), "primit");});
test("primogeniture -> primogenitur", function() {deepEqual( Stem("primogeniture"), "primogenitur");});
test("primrose -> primros", function() {deepEqual( Stem("primrose"), "primros");});
test("prince -> princ", function() {deepEqual( Stem("prince"), "princ");});
test("princely -> princ", function() {deepEqual( Stem("princely"), "princ");});
test("princes -> princ", function() {deepEqual( Stem("princes"), "princ");});
test("princess -> princess", function() {deepEqual( Stem("princess"), "princess");});
test("princesses -> princess", function() {deepEqual( Stem("princesses"), "princess");});
test("principal -> princip", function() {deepEqual( Stem("principal"), "princip");});
test("principally -> princip", function() {deepEqual( Stem("principally"), "princip");});
test("principals -> princip", function() {deepEqual( Stem("principals"), "princip");});
test("principle -> principl", function() {deepEqual( Stem("principle"), "principl");});
test("principles -> principl", function() {deepEqual( Stem("principles"), "principl");});
test("prinking -> prink", function() {deepEqual( Stem("prinking"), "prink");});
test("print -> print", function() {deepEqual( Stem("print"), "print");});
test("printed -> print", function() {deepEqual( Stem("printed"), "print");});
test("printers -> printer", function() {deepEqual( Stem("printers"), "printer");});
test("printing -> print", function() {deepEqual( Stem("printing"), "print");});
test("prints -> print", function() {deepEqual( Stem("prints"), "print");});
test("prionotus -> prionotus", function() {deepEqual( Stem("prionotus"), "prionotus");});
test("prior -> prior", function() {deepEqual( Stem("prior"), "prior");});
test("prioress -> prioress", function() {deepEqual( Stem("prioress"), "prioress");});
test("priority -> prioriti", function() {deepEqual( Stem("priority"), "prioriti");});
test("priory -> priori", function() {deepEqual( Stem("priory"), "priori");});
test("priscilla -> priscilla", function() {deepEqual( Stem("priscilla"), "priscilla");});
test("prismatic -> prismat", function() {deepEqual( Stem("prismatic"), "prismat");});
test("prison -> prison", function() {deepEqual( Stem("prison"), "prison");});
test("prisoner -> prison", function() {deepEqual( Stem("prisoner"), "prison");});
test("prisoners -> prison", function() {deepEqual( Stem("prisoners"), "prison");});
test("prisons -> prison", function() {deepEqual( Stem("prisons"), "prison");});
test("pritchard -> pritchard", function() {deepEqual( Stem("pritchard"), "pritchard");});
test("pritchards -> pritchard", function() {deepEqual( Stem("pritchards"), "pritchard");});
test("privacy -> privaci", function() {deepEqual( Stem("privacy"), "privaci");});
test("private -> privat", function() {deepEqual( Stem("private"), "privat");});
test("privateer -> privat", function() {deepEqual( Stem("privateer"), "privat");});
test("privately -> privat", function() {deepEqual( Stem("privately"), "privat");});
test("privation -> privat", function() {deepEqual( Stem("privation"), "privat");});
test("privations -> privat", function() {deepEqual( Stem("privations"), "privat");});
test("privilege -> privileg", function() {deepEqual( Stem("privilege"), "privileg");});
test("privileged -> privileg", function() {deepEqual( Stem("privileged"), "privileg");});
test("privileges -> privileg", function() {deepEqual( Stem("privileges"), "privileg");});
test("privy -> privi", function() {deepEqual( Stem("privy"), "privi");});
test("prize -> prize", function() {deepEqual( Stem("prize"), "prize");});
test("prized -> prize", function() {deepEqual( Stem("prized"), "prize");});
test("prizes -> prize", function() {deepEqual( Stem("prizes"), "prize");});
test("pro -> pro", function() {deepEqual( Stem("pro"), "pro");});
test("probabilities -> probabl", function() {deepEqual( Stem("probabilities"), "probabl");});
test("probability -> probabl", function() {deepEqual( Stem("probability"), "probabl");});
test("probable -> probabl", function() {deepEqual( Stem("probable"), "probabl");});
test("probably -> probabl", function() {deepEqual( Stem("probably"), "probabl");});
test("probation -> probat", function() {deepEqual( Stem("probation"), "probat");});
test("probing -> probe", function() {deepEqual( Stem("probing"), "probe");});
test("problem -> problem", function() {deepEqual( Stem("problem"), "problem");});
test("problematical -> problemat", function() {deepEqual( Stem("problematical"), "problemat");});
test("problems -> problem", function() {deepEqual( Stem("problems"), "problem");});
test("proboscis -> probosci", function() {deepEqual( Stem("proboscis"), "probosci");});
test("procedure -> procedur", function() {deepEqual( Stem("procedure"), "procedur");});
test("proceed -> proceed", function() {deepEqual( Stem("proceed"), "proceed");});
test("proceeded -> proceed", function() {deepEqual( Stem("proceeded"), "proceed");});
test("proceeding -> proceed", function() {deepEqual( Stem("proceeding"), "proceed");});
test("proceedings -> proceed", function() {deepEqual( Stem("proceedings"), "proceed");});
test("proceeds -> proceed", function() {deepEqual( Stem("proceeds"), "proceed");});
test("procellaria -> procellaria", function() {deepEqual( Stem("procellaria"), "procellaria");});
test("process -> process", function() {deepEqual( Stem("process"), "process");});
test("processes -> process", function() {deepEqual( Stem("processes"), "process");});
test("procession -> process", function() {deepEqual( Stem("procession"), "process");});
test("proclaim -> proclaim", function() {deepEqual( Stem("proclaim"), "proclaim");});
test("proclaimed -> proclaim", function() {deepEqual( Stem("proclaimed"), "proclaim");});
test("proclaiming -> proclaim", function() {deepEqual( Stem("proclaiming"), "proclaim");});
test("proclaims -> proclaim", function() {deepEqual( Stem("proclaims"), "proclaim");});
test("proclamation -> proclam", function() {deepEqual( Stem("proclamation"), "proclam");});
test("procrastinates -> procrastin", function() {deepEqual( Stem("procrastinates"), "procrastin");});
test("procrastination -> procrastin", function() {deepEqual( Stem("procrastination"), "procrastin");});
test("proctotretus -> proctotretus", function() {deepEqual( Stem("proctotretus"), "proctotretus");});
test("procurable -> procur", function() {deepEqual( Stem("procurable"), "procur");});
test("procure -> procur", function() {deepEqual( Stem("procure"), "procur");});
test("procured -> procur", function() {deepEqual( Stem("procured"), "procur");});
test("procuring -> procur", function() {deepEqual( Stem("procuring"), "procur");});
test("prodigal -> prodig", function() {deepEqual( Stem("prodigal"), "prodig");});
test("prodigality -> prodig", function() {deepEqual( Stem("prodigality"), "prodig");});
test("prodigieux -> prodigieux", function() {deepEqual( Stem("prodigieux"), "prodigieux");});
test("prodigious -> prodigi", function() {deepEqual( Stem("prodigious"), "prodigi");});
test("prodigiously -> prodigi", function() {deepEqual( Stem("prodigiously"), "prodigi");});
test("prodigy -> prodigi", function() {deepEqual( Stem("prodigy"), "prodigi");});
test("produce -> produc", function() {deepEqual( Stem("produce"), "produc");});
test("produced -> produc", function() {deepEqual( Stem("produced"), "produc");});
test("produces -> produc", function() {deepEqual( Stem("produces"), "produc");});
test("producible -> produc", function() {deepEqual( Stem("producible"), "produc");});
test("producing -> produc", function() {deepEqual( Stem("producing"), "produc");});
test("product -> product", function() {deepEqual( Stem("product"), "product");});
test("production -> product", function() {deepEqual( Stem("production"), "product");});
test("productions -> product", function() {deepEqual( Stem("productions"), "product");});
test("productive -> product", function() {deepEqual( Stem("productive"), "product");});
test("productiveness -> product", function() {deepEqual( Stem("productiveness"), "product");});
test("products -> product", function() {deepEqual( Stem("products"), "product");});
test("profanation -> profan", function() {deepEqual( Stem("profanation"), "profan");});
test("profane -> profan", function() {deepEqual( Stem("profane"), "profan");});
test("profanely -> profan", function() {deepEqual( Stem("profanely"), "profan");});
test("profaning -> profan", function() {deepEqual( Stem("profaning"), "profan");});
test("profess -> profess", function() {deepEqual( Stem("profess"), "profess");});
test("professed -> profess", function() {deepEqual( Stem("professed"), "profess");});
test("professes -> profess", function() {deepEqual( Stem("professes"), "profess");});
test("professing -> profess", function() {deepEqual( Stem("professing"), "profess");});
test("profession -> profess", function() {deepEqual( Stem("profession"), "profess");});
test("professional -> profession", function() {deepEqual( Stem("professional"), "profession");});
test("professionally -> profession", function() {deepEqual( Stem("professionally"), "profession");});
test("professionals -> profession", function() {deepEqual( Stem("professionals"), "profession");});
test("professionaly -> professionali", function() {deepEqual( Stem("professionaly"), "professionali");});
test("professions -> profess", function() {deepEqual( Stem("professions"), "profess");});
test("professor -> professor", function() {deepEqual( Stem("professor"), "professor");});
test("professors -> professor", function() {deepEqual( Stem("professors"), "professor");});
test("professorship -> professorship", function() {deepEqual( Stem("professorship"), "professorship");});
test("proffer -> proffer", function() {deepEqual( Stem("proffer"), "proffer");});
test("proffered -> proffer", function() {deepEqual( Stem("proffered"), "proffer");});
test("proficiency -> profici", function() {deepEqual( Stem("proficiency"), "profici");});
test("proficient -> profici", function() {deepEqual( Stem("proficient"), "profici");});
test("profile -> profil", function() {deepEqual( Stem("profile"), "profil");});
test("profit -> profit", function() {deepEqual( Stem("profit"), "profit");});
test("profitable -> profit", function() {deepEqual( Stem("profitable"), "profit");});
test("profited -> profit", function() {deepEqual( Stem("profited"), "profit");});
test("profiting -> profit", function() {deepEqual( Stem("profiting"), "profit");});
test("profitless -> profitless", function() {deepEqual( Stem("profitless"), "profitless");});
test("profits -> profit", function() {deepEqual( Stem("profits"), "profit");});
test("profligacy -> profligaci", function() {deepEqual( Stem("profligacy"), "profligaci");});
test("profligate -> proflig", function() {deepEqual( Stem("profligate"), "proflig");});
test("profligately -> proflig", function() {deepEqual( Stem("profligately"), "proflig");});
test("profligates -> proflig", function() {deepEqual( Stem("profligates"), "proflig");});
test("profound -> profound", function() {deepEqual( Stem("profound"), "profound");});
test("profoundest -> profoundest", function() {deepEqual( Stem("profoundest"), "profoundest");});
test("profoundly -> profound", function() {deepEqual( Stem("profoundly"), "profound");});
test("profundity -> profund", function() {deepEqual( Stem("profundity"), "profund");});
test("profuse -> profus", function() {deepEqual( Stem("profuse"), "profus");});
test("profusely -> profus", function() {deepEqual( Stem("profusely"), "profus");});
test("profusion -> profus", function() {deepEqual( Stem("profusion"), "profus");});
test("progenitive -> progenit", function() {deepEqual( Stem("progenitive"), "progenit");});
test("progenitors -> progenitor", function() {deepEqual( Stem("progenitors"), "progenitor");});
test("progne -> progn", function() {deepEqual( Stem("progne"), "progn");});
test("prognostications -> prognost", function() {deepEqual( Stem("prognostications"), "prognost");});
test("programme -> programm", function() {deepEqual( Stem("programme"), "programm");});
test("progress -> progress", function() {deepEqual( Stem("progress"), "progress");});
test("progressed -> progress", function() {deepEqual( Stem("progressed"), "progress");});
test("progressing -> progress", function() {deepEqual( Stem("progressing"), "progress");});
test("progression -> progress", function() {deepEqual( Stem("progression"), "progress");});
test("progressive -> progress", function() {deepEqual( Stem("progressive"), "progress");});
test("progressively -> progress", function() {deepEqual( Stem("progressively"), "progress");});
test("progressives -> progress", function() {deepEqual( Stem("progressives"), "progress");});
test("prohibited -> prohibit", function() {deepEqual( Stem("prohibited"), "prohibit");});
test("prohibiting -> prohibit", function() {deepEqual( Stem("prohibiting"), "prohibit");});
test("prohibition -> prohibit", function() {deepEqual( Stem("prohibition"), "prohibit");});
test("project -> project", function() {deepEqual( Stem("project"), "project");});
test("projected -> project", function() {deepEqual( Stem("projected"), "project");});
test("projecting -> project", function() {deepEqual( Stem("projecting"), "project");});
test("projection -> project", function() {deepEqual( Stem("projection"), "project");});
test("projector -> projector", function() {deepEqual( Stem("projector"), "projector");});
test("projects -> project", function() {deepEqual( Stem("projects"), "project");});
test("prokofitch -> prokofitch", function() {deepEqual( Stem("prokofitch"), "prokofitch");});
test("prolific -> prolif", function() {deepEqual( Stem("prolific"), "prolif");});
test("prolix -> prolix", function() {deepEqual( Stem("prolix"), "prolix");});
test("prolixities -> prolix", function() {deepEqual( Stem("prolixities"), "prolix");});
test("prolixity -> prolix", function() {deepEqual( Stem("prolixity"), "prolix");});
test("prolong -> prolong", function() {deepEqual( Stem("prolong"), "prolong");});
test("prolongation -> prolong", function() {deepEqual( Stem("prolongation"), "prolong");});
test("prolonged -> prolong", function() {deepEqual( Stem("prolonged"), "prolong");});
test("prolonging -> prolong", function() {deepEqual( Stem("prolonging"), "prolong");});
test("promenade -> promenad", function() {deepEqual( Stem("promenade"), "promenad");});
test("promethean -> promethean", function() {deepEqual( Stem("promethean"), "promethean");});
test("prominent -> promin", function() {deepEqual( Stem("prominent"), "promin");});
test("prominently -> promin", function() {deepEqual( Stem("prominently"), "promin");});
test("promise -> promis", function() {deepEqual( Stem("promise"), "promis");});
test("promised -> promis", function() {deepEqual( Stem("promised"), "promis");});
test("promises -> promis", function() {deepEqual( Stem("promises"), "promis");});
test("promisin -> promisin", function() {deepEqual( Stem("promisin"), "promisin");});
test("promising -> promis", function() {deepEqual( Stem("promising"), "promis");});
test("promissory -> promissori", function() {deepEqual( Stem("promissory"), "promissori");});
test("promontories -> promontori", function() {deepEqual( Stem("promontories"), "promontori");});
test("promontory -> promontori", function() {deepEqual( Stem("promontory"), "promontori");});
test("promote -> promot", function() {deepEqual( Stem("promote"), "promot");});
test("promoted -> promot", function() {deepEqual( Stem("promoted"), "promot");});
test("promoter -> promot", function() {deepEqual( Stem("promoter"), "promot");});
test("promotes -> promot", function() {deepEqual( Stem("promotes"), "promot");});
test("promoting -> promot", function() {deepEqual( Stem("promoting"), "promot");});
test("promotion -> promot", function() {deepEqual( Stem("promotion"), "promot");});
test("prompt -> prompt", function() {deepEqual( Stem("prompt"), "prompt");});
test("prompted -> prompt", function() {deepEqual( Stem("prompted"), "prompt");});
test("prompter -> prompter", function() {deepEqual( Stem("prompter"), "prompter");});
test("prompters -> prompter", function() {deepEqual( Stem("prompters"), "prompter");});
test("prompting -> prompt", function() {deepEqual( Stem("prompting"), "prompt");});
test("promptitude -> promptitud", function() {deepEqual( Stem("promptitude"), "promptitud");});
test("promptly -> prompt", function() {deepEqual( Stem("promptly"), "prompt");});
test("promptness -> prompt", function() {deepEqual( Stem("promptness"), "prompt");});
test("prompts -> prompt", function() {deepEqual( Stem("prompts"), "prompt");});
test("prone -> prone", function() {deepEqual( Stem("prone"), "prone");});
test("proneness -> prone", function() {deepEqual( Stem("proneness"), "prone");});
test("pronoun -> pronoun", function() {deepEqual( Stem("pronoun"), "pronoun");});
test("pronounce -> pronounc", function() {deepEqual( Stem("pronounce"), "pronounc");});
test("pronounced -> pronounc", function() {deepEqual( Stem("pronounced"), "pronounc");});
test("pronounces -> pronounc", function() {deepEqual( Stem("pronounces"), "pronounc");});
test("pronouncing -> pronounc", function() {deepEqual( Stem("pronouncing"), "pronounc");});
test("proodest -> proodest", function() {deepEqual( Stem("proodest"), "proodest");});
test("proof -> proof", function() {deepEqual( Stem("proof"), "proof");});
test("proofs -> proof", function() {deepEqual( Stem("proofs"), "proof");});
test("prop -> prop", function() {deepEqual( Stem("prop"), "prop");});
test("propaganda -> propaganda", function() {deepEqual( Stem("propaganda"), "propaganda");});
test("propagated -> propag", function() {deepEqual( Stem("propagated"), "propag");});
test("propagates -> propag", function() {deepEqual( Stem("propagates"), "propag");});
test("propagation -> propag", function() {deepEqual( Stem("propagation"), "propag");});
test("propensity -> propens", function() {deepEqual( Stem("propensity"), "propens");});
test("proper -> proper", function() {deepEqual( Stem("proper"), "proper");});
test("properly -> proper", function() {deepEqual( Stem("properly"), "proper");});
test("properties -> properti", function() {deepEqual( Stem("properties"), "properti");});
test("property -> properti", function() {deepEqual( Stem("property"), "properti");});
test("propertyless -> propertyless", function() {deepEqual( Stem("propertyless"), "propertyless");});
test("prophecy -> propheci", function() {deepEqual( Stem("prophecy"), "propheci");});
test("prophesied -> prophesi", function() {deepEqual( Stem("prophesied"), "prophesi");});
test("prophesying -> prophesi", function() {deepEqual( Stem("prophesying"), "prophesi");});
test("prophet -> prophet", function() {deepEqual( Stem("prophet"), "prophet");});
test("prophetic -> prophet", function() {deepEqual( Stem("prophetic"), "prophet");});
test("prophetical -> prophet", function() {deepEqual( Stem("prophetical"), "prophet");});
test("prophetically -> prophet", function() {deepEqual( Stem("prophetically"), "prophet");});
test("propitiate -> propiti", function() {deepEqual( Stem("propitiate"), "propiti");});
test("propitiated -> propiti", function() {deepEqual( Stem("propitiated"), "propiti");});
test("propitiation -> propiti", function() {deepEqual( Stem("propitiation"), "propiti");});
test("propitiatory -> propitiatori", function() {deepEqual( Stem("propitiatory"), "propitiatori");});
test("propitious -> propiti", function() {deepEqual( Stem("propitious"), "propiti");});
test("proportion -> proport", function() {deepEqual( Stem("proportion"), "proport");});
test("proportionably -> proportion", function() {deepEqual( Stem("proportionably"), "proportion");});
test("proportional -> proport", function() {deepEqual( Stem("proportional"), "proport");});
test("proportionally -> proport", function() {deepEqual( Stem("proportionally"), "proport");});
test("proportionate -> proportion", function() {deepEqual( Stem("proportionate"), "proportion");});
test("proportionately -> proportion", function() {deepEqual( Stem("proportionately"), "proportion");});
test("proportioned -> proport", function() {deepEqual( Stem("proportioned"), "proport");});
test("proportions -> proport", function() {deepEqual( Stem("proportions"), "proport");});
test("propos -> propo", function() {deepEqual( Stem("propos"), "propo");});
test("proposal -> propos", function() {deepEqual( Stem("proposal"), "propos");});
test("proposals -> propos", function() {deepEqual( Stem("proposals"), "propos");});
test("propose -> propos", function() {deepEqual( Stem("propose"), "propos");});
test("proposed -> propos", function() {deepEqual( Stem("proposed"), "propos");});
test("proposes -> propos", function() {deepEqual( Stem("proposes"), "propos");});
test("proposing -> propos", function() {deepEqual( Stem("proposing"), "propos");});
test("proposition -> proposit", function() {deepEqual( Stem("proposition"), "proposit");});
test("propositions -> proposit", function() {deepEqual( Stem("propositions"), "proposit");});
test("propound -> propound", function() {deepEqual( Stem("propound"), "propound");});
test("propounded -> propound", function() {deepEqual( Stem("propounded"), "propound");});
test("propounding -> propound", function() {deepEqual( Stem("propounding"), "propound");});
test("propoundlng -> propoundlng", function() {deepEqual( Stem("propoundlng"), "propoundlng");});
test("propounds -> propound", function() {deepEqual( Stem("propounds"), "propound");});
test("propped -> prop", function() {deepEqual( Stem("propped"), "prop");});
test("propping -> prop", function() {deepEqual( Stem("propping"), "prop");});
test("proprieties -> proprieti", function() {deepEqual( Stem("proprieties"), "proprieti");});
test("proprietor -> proprietor", function() {deepEqual( Stem("proprietor"), "proprietor");});
test("proprietorship -> proprietorship", function() {deepEqual( Stem("proprietorship"), "proprietorship");});
test("proprietress -> proprietress", function() {deepEqual( Stem("proprietress"), "proprietress");});
test("propriety -> proprieti", function() {deepEqual( Stem("propriety"), "proprieti");});
test("prorogation -> prorog", function() {deepEqual( Stem("prorogation"), "prorog");});
test("prosaic -> prosaic", function() {deepEqual( Stem("prosaic"), "prosaic");});
test("proscenium -> proscenium", function() {deepEqual( Stem("proscenium"), "proscenium");});
test("proscribed -> proscrib", function() {deepEqual( Stem("proscribed"), "proscrib");});
test("prose -> prose", function() {deepEqual( Stem("prose"), "prose");});
test("prosecute -> prosecut", function() {deepEqual( Stem("prosecute"), "prosecut");});
test("prosecuted -> prosecut", function() {deepEqual( Stem("prosecuted"), "prosecut");});
test("prosecution -> prosecut", function() {deepEqual( Stem("prosecution"), "prosecut");});
test("prosecutor -> prosecutor", function() {deepEqual( Stem("prosecutor"), "prosecutor");});
test("prosing -> prose", function() {deepEqual( Stem("prosing"), "prose");});
test("prospect -> prospect", function() {deepEqual( Stem("prospect"), "prospect");});
test("prospective -> prospect", function() {deepEqual( Stem("prospective"), "prospect");});
test("prospects -> prospect", function() {deepEqual( Stem("prospects"), "prospect");});
test("prospectus -> prospectus", function() {deepEqual( Stem("prospectus"), "prospectus");});
test("prosper -> prosper", function() {deepEqual( Stem("prosper"), "prosper");});
test("prospered -> prosper", function() {deepEqual( Stem("prospered"), "prosper");});
test("prospering -> prosper", function() {deepEqual( Stem("prospering"), "prosper");});
test("prosperity -> prosper", function() {deepEqual( Stem("prosperity"), "prosper");});
test("prosperous -> prosper", function() {deepEqual( Stem("prosperous"), "prosper");});
test("prosperously -> prosper", function() {deepEqual( Stem("prosperously"), "prosper");});
test("prostrate -> prostrat", function() {deepEqual( Stem("prostrate"), "prostrat");});
test("prostrated -> prostrat", function() {deepEqual( Stem("prostrated"), "prostrat");});
test("prostration -> prostrat", function() {deepEqual( Stem("prostration"), "prostrat");});
test("prosy -> prosi", function() {deepEqual( Stem("prosy"), "prosi");});
test("protect -> protect", function() {deepEqual( Stem("protect"), "protect");});
test("protected -> protect", function() {deepEqual( Stem("protected"), "protect");});
test("protecting -> protect", function() {deepEqual( Stem("protecting"), "protect");});
test("protection -> protect", function() {deepEqual( Stem("protection"), "protect");});
test("protective -> protect", function() {deepEqual( Stem("protective"), "protect");});
test("protector -> protector", function() {deepEqual( Stem("protector"), "protector");});
test("protectors -> protector", function() {deepEqual( Stem("protectors"), "protector");});
test("protegee -> protege", function() {deepEqual( Stem("protegee"), "protege");});
test("proteges -> proteg", function() {deepEqual( Stem("proteges"), "proteg");});
test("protest -> protest", function() {deepEqual( Stem("protest"), "protest");});
test("protestant -> protest", function() {deepEqual( Stem("protestant"), "protest");});
test("protestantism -> protestant", function() {deepEqual( Stem("protestantism"), "protestant");});
test("protestation -> protest", function() {deepEqual( Stem("protestation"), "protest");});
test("protestations -> protest", function() {deepEqual( Stem("protestations"), "protest");});
test("protested -> protest", function() {deepEqual( Stem("protested"), "protest");});
test("protesting -> protest", function() {deepEqual( Stem("protesting"), "protest");});
test("protests -> protest", function() {deepEqual( Stem("protests"), "protest");});
test("proteus -> proteus", function() {deepEqual( Stem("proteus"), "proteus");});
test("protococcus -> protococcus", function() {deepEqual( Stem("protococcus"), "protococcus");});
test("prototype -> prototyp", function() {deepEqual( Stem("prototype"), "prototyp");});
test("prototypes -> prototyp", function() {deepEqual( Stem("prototypes"), "prototyp");});
test("protract -> protract", function() {deepEqual( Stem("protract"), "protract");});
test("protracted -> protract", function() {deepEqual( Stem("protracted"), "protract");});
test("protrude -> protrud", function() {deepEqual( Stem("protrude"), "protrud");});
test("protruded -> protrud", function() {deepEqual( Stem("protruded"), "protrud");});
test("protrudes -> protrud", function() {deepEqual( Stem("protrudes"), "protrud");});
test("protruding -> protrud", function() {deepEqual( Stem("protruding"), "protrud");});
test("proud -> proud", function() {deepEqual( Stem("proud"), "proud");});
test("prouder -> prouder", function() {deepEqual( Stem("prouder"), "prouder");});
test("proudest -> proudest", function() {deepEqual( Stem("proudest"), "proudest");});
test("proudhon -> proudhon", function() {deepEqual( Stem("proudhon"), "proudhon");});
test("proudly -> proud", function() {deepEqual( Stem("proudly"), "proud");});
test("prov -> prov", function() {deepEqual( Stem("prov"), "prov");});
test("prove -> prove", function() {deepEqual( Stem("prove"), "prove");});
test("proved -> prove", function() {deepEqual( Stem("proved"), "prove");});
test("proverb -> proverb", function() {deepEqual( Stem("proverb"), "proverb");});
test("proves -> prove", function() {deepEqual( Stem("proves"), "prove");});
test("provide -> provid", function() {deepEqual( Stem("provide"), "provid");});
test("provided -> provid", function() {deepEqual( Stem("provided"), "provid");});
test("providence -> provid", function() {deepEqual( Stem("providence"), "provid");});
test("providential -> providenti", function() {deepEqual( Stem("providential"), "providenti");});
test("providentially -> providenti", function() {deepEqual( Stem("providentially"), "providenti");});
test("provider -> provid", function() {deepEqual( Stem("provider"), "provid");});
test("provides -> provid", function() {deepEqual( Stem("provides"), "provid");});
test("providing -> provid", function() {deepEqual( Stem("providing"), "provid");});
test("province -> provinc", function() {deepEqual( Stem("province"), "provinc");});
test("provinces -> provinc", function() {deepEqual( Stem("provinces"), "provinc");});
test("provincial -> provinci", function() {deepEqual( Stem("provincial"), "provinci");});
test("proving -> prove", function() {deepEqual( Stem("proving"), "prove");});
test("provision -> provis", function() {deepEqual( Stem("provision"), "provis");});
test("provisional -> provision", function() {deepEqual( Stem("provisional"), "provision");});
test("provisions -> provis", function() {deepEqual( Stem("provisions"), "provis");});
test("proviso -> proviso", function() {deepEqual( Stem("proviso"), "proviso");});
test("provocation -> provoc", function() {deepEqual( Stem("provocation"), "provoc");});
test("provocative -> provoc", function() {deepEqual( Stem("provocative"), "provoc");});
test("provoke -> provok", function() {deepEqual( Stem("provoke"), "provok");});
test("provoked -> provok", function() {deepEqual( Stem("provoked"), "provok");});
test("provokes -> provok", function() {deepEqual( Stem("provokes"), "provok");});
test("provoking -> provok", function() {deepEqual( Stem("provoking"), "provok");});
test("provokingly -> provok", function() {deepEqual( Stem("provokingly"), "provok");});
test("prow -> prow", function() {deepEqual( Stem("prow"), "prow");});
test("prowess -> prowess", function() {deepEqual( Stem("prowess"), "prowess");});
test("prowl -> prowl", function() {deepEqual( Stem("prowl"), "prowl");});
test("prowled -> prowl", function() {deepEqual( Stem("prowled"), "prowl");});
test("prowling -> prowl", function() {deepEqual( Stem("prowling"), "prowl");});
test("proximity -> proxim", function() {deepEqual( Stem("proximity"), "proxim");});
test("proxy -> proxi", function() {deepEqual( Stem("proxy"), "proxi");});
test("proxying -> proxi", function() {deepEqual( Stem("proxying"), "proxi");});
test("prudence -> prudenc", function() {deepEqual( Stem("prudence"), "prudenc");});
test("prudent -> prudent", function() {deepEqual( Stem("prudent"), "prudent");});
test("prudently -> prudent", function() {deepEqual( Stem("prudently"), "prudent");});
test("prudery -> pruderi", function() {deepEqual( Stem("prudery"), "pruderi");});
test("prudish -> prudish", function() {deepEqual( Stem("prudish"), "prudish");});
test("pruning -> prune", function() {deepEqual( Stem("pruning"), "prune");});
test("prunings -> prune", function() {deepEqual( Stem("prunings"), "prune");});
test("prurient -> prurient", function() {deepEqual( Stem("prurient"), "prurient");});
test("prussian -> prussian", function() {deepEqual( Stem("prussian"), "prussian");});
test("prussians -> prussian", function() {deepEqual( Stem("prussians"), "prussian");});
test("prussic -> prussic", function() {deepEqual( Stem("prussic"), "prussic");});
test("pry -> pri", function() {deepEqual( Stem("pry"), "pri");});
test("psalm -> psalm", function() {deepEqual( Stem("psalm"), "psalm");});
test("psalms -> psalm", function() {deepEqual( Stem("psalms"), "psalm");});
test("psammophis -> psammophi", function() {deepEqual( Stem("psammophis"), "psammophi");});
test("pselaphus -> pselaphus", function() {deepEqual( Stem("pselaphus"), "pselaphus");});
test("pseudo -> pseudo", function() {deepEqual( Stem("pseudo"), "pseudo");});
test("psha -> psha", function() {deepEqual( Stem("psha"), "psha");});
test("pshaw -> pshaw", function() {deepEqual( Stem("pshaw"), "pshaw");});
test("psyche -> psych", function() {deepEqual( Stem("psyche"), "psych");});
test("psychological -> psycholog", function() {deepEqual( Stem("psychological"), "psycholog");});
test("psychologically -> psycholog", function() {deepEqual( Stem("psychologically"), "psycholog");});
test("psychologist -> psychologist", function() {deepEqual( Stem("psychologist"), "psychologist");});
test("psychology -> psycholog", function() {deepEqual( Stem("psychology"), "psycholog");});
test("pt -> pt", function() {deepEqual( Stem("pt"), "pt");});
test("ptarmigans -> ptarmigan", function() {deepEqual( Stem("ptarmigans"), "ptarmigan");});
test("pterophorus -> pterophorus", function() {deepEqual( Stem("pterophorus"), "pterophorus");});
test("pteropoda -> pteropoda", function() {deepEqual( Stem("pteropoda"), "pteropoda");});
test("pteroptochos -> pteroptocho", function() {deepEqual( Stem("pteroptochos"), "pteroptocho");});
test("public -> public", function() {deepEqual( Stem("public"), "public");});
test("publicans -> publican", function() {deepEqual( Stem("publicans"), "publican");});
test("publication -> public", function() {deepEqual( Stem("publication"), "public");});
test("publications -> public", function() {deepEqual( Stem("publications"), "public");});
test("publicity -> public", function() {deepEqual( Stem("publicity"), "public");});
test("publicly -> public", function() {deepEqual( Stem("publicly"), "public");});
test("publish -> publish", function() {deepEqual( Stem("publish"), "publish");});
test("published -> publish", function() {deepEqual( Stem("published"), "publish");});
test("publisher -> publish", function() {deepEqual( Stem("publisher"), "publish");});
test("publishers -> publish", function() {deepEqual( Stem("publishers"), "publish");});
test("publishing -> publish", function() {deepEqual( Stem("publishing"), "publish");});
test("puckered -> pucker", function() {deepEqual( Stem("puckered"), "pucker");});
test("puddick -> puddick", function() {deepEqual( Stem("puddick"), "puddick");});
test("pudding -> pud", function() {deepEqual( Stem("pudding"), "pud");});
test("puddings -> pud", function() {deepEqual( Stem("puddings"), "pud");});
test("puddle -> puddl", function() {deepEqual( Stem("puddle"), "puddl");});
test("puddles -> puddl", function() {deepEqual( Stem("puddles"), "puddl");});
test("puente -> puent", function() {deepEqual( Stem("puente"), "puent");});
test("puff -> puff", function() {deepEqual( Stem("puff"), "puff");});
test("puffed -> puf", function() {deepEqual( Stem("puffed"), "puf");});
test("puffing -> puf", function() {deepEqual( Stem("puffing"), "puf");});
test("puffinus -> puffinus", function() {deepEqual( Stem("puffinus"), "puffinus");});
test("puffs -> puff", function() {deepEqual( Stem("puffs"), "puff");});
test("puffy -> puffi", function() {deepEqual( Stem("puffy"), "puffi");});
test("pug -> pug", function() {deepEqual( Stem("pug"), "pug");});
test("pugilistic -> pugilist", function() {deepEqual( Stem("pugilistic"), "pugilist");});
test("pugnacious -> pugnaci", function() {deepEqual( Stem("pugnacious"), "pugnaci");});
test("pugnacity -> pugnac", function() {deepEqual( Stem("pugnacity"), "pugnac");});
test("pugstyles -> pugstyl", function() {deepEqual( Stem("pugstyles"), "pugstyl");});
test("pul -> pul", function() {deepEqual( Stem("pul"), "pul");});
test("pulcheria -> pulcheria", function() {deepEqual( Stem("pulcheria"), "pulcheria");});
test("pull -> pull", function() {deepEqual( Stem("pull"), "pull");});
test("pulled -> pull", function() {deepEqual( Stem("pulled"), "pull");});
test("pulling -> pull", function() {deepEqual( Stem("pulling"), "pull");});
test("pulls -> pull", function() {deepEqual( Stem("pulls"), "pull");});
test("pulp -> pulp", function() {deepEqual( Stem("pulp"), "pulp");});
test("pulperia -> pulperia", function() {deepEqual( Stem("pulperia"), "pulperia");});
test("pulpit -> pulpit", function() {deepEqual( Stem("pulpit"), "pulpit");});
test("pulpy -> pulpi", function() {deepEqual( Stem("pulpy"), "pulpi");});
test("pulse -> puls", function() {deepEqual( Stem("pulse"), "puls");});
test("pulses -> puls", function() {deepEqual( Stem("pulses"), "puls");});
test("pum -> pum", function() {deepEqual( Stem("pum"), "pum");});
test("puma -> puma", function() {deepEqual( Stem("puma"), "puma");});
test("pumas -> puma", function() {deepEqual( Stem("pumas"), "puma");});
test("pumice -> pumic", function() {deepEqual( Stem("pumice"), "pumic");});
test("pumiceous -> pumic", function() {deepEqual( Stem("pumiceous"), "pumic");});
test("pumila -> pumila", function() {deepEqual( Stem("pumila"), "pumila");});
test("pummelled -> pummel", function() {deepEqual( Stem("pummelled"), "pummel");});
test("pummelling -> pummel", function() {deepEqual( Stem("pummelling"), "pummel");});
test("pump -> pump", function() {deepEqual( Stem("pump"), "pump");});
test("pumping -> pump", function() {deepEqual( Stem("pumping"), "pump");});
test("pumpkin -> pumpkin", function() {deepEqual( Stem("pumpkin"), "pumpkin");});
test("pumps -> pump", function() {deepEqual( Stem("pumps"), "pump");});
test("pun -> pun", function() {deepEqual( Stem("pun"), "pun");});
test("puna -> puna", function() {deepEqual( Stem("puna"), "puna");});
test("punch -> punch", function() {deepEqual( Stem("punch"), "punch");});
test("punched -> punch", function() {deepEqual( Stem("punched"), "punch");});
test("punches -> punch", function() {deepEqual( Stem("punches"), "punch");});
test("punchinello -> punchinello", function() {deepEqual( Stem("punchinello"), "punchinello");});
test("punching -> punch", function() {deepEqual( Stem("punching"), "punch");});
test("punctatissima -> punctatissima", function() {deepEqual( Stem("punctatissima"), "punctatissima");});
test("punctilious -> punctili", function() {deepEqual( Stem("punctilious"), "punctili");});
test("punctiliousness -> punctili", function() {deepEqual( Stem("punctiliousness"), "punctili");});
test("punctual -> punctual", function() {deepEqual( Stem("punctual"), "punctual");});
test("punctuality -> punctual", function() {deepEqual( Stem("punctuality"), "punctual");});
test("punctually -> punctual", function() {deepEqual( Stem("punctually"), "punctual");});
test("punctuation -> punctuat", function() {deepEqual( Stem("punctuation"), "punctuat");});
test("puncture -> punctur", function() {deepEqual( Stem("puncture"), "punctur");});
test("punctured -> punctur", function() {deepEqual( Stem("punctured"), "punctur");});
test("pundit -> pundit", function() {deepEqual( Stem("pundit"), "pundit");});
test("pundits -> pundit", function() {deepEqual( Stem("pundits"), "pundit");});
test("punish -> punish", function() {deepEqual( Stem("punish"), "punish");});
test("punished -> punish", function() {deepEqual( Stem("punished"), "punish");});
test("punishing -> punish", function() {deepEqual( Stem("punishing"), "punish");});
test("punishment -> punish", function() {deepEqual( Stem("punishment"), "punish");});
test("punt -> punt", function() {deepEqual( Stem("punt"), "punt");});
test("punta -> punta", function() {deepEqual( Stem("punta"), "punta");});
test("puny -> puni", function() {deepEqual( Stem("puny"), "puni");});
test("pupil -> pupil", function() {deepEqual( Stem("pupil"), "pupil");});
test("pupils -> pupil", function() {deepEqual( Stem("pupils"), "pupil");});
test("pupker -> pupker", function() {deepEqual( Stem("pupker"), "pupker");});
test("puppet -> puppet", function() {deepEqual( Stem("puppet"), "puppet");});
test("puppies -> puppi", function() {deepEqual( Stem("puppies"), "puppi");});
test("puppy -> puppi", function() {deepEqual( Stem("puppy"), "puppi");});
test("puppyism -> puppyism", function() {deepEqual( Stem("puppyism"), "puppyism");});
test("purblind -> purblind", function() {deepEqual( Stem("purblind"), "purblind");});
test("purchas -> purcha", function() {deepEqual( Stem("purchas"), "purcha");});
test("purchase -> purchas", function() {deepEqual( Stem("purchase"), "purchas");});
test("purchased -> purchas", function() {deepEqual( Stem("purchased"), "purchas");});
test("purchaser -> purchas", function() {deepEqual( Stem("purchaser"), "purchas");});
test("purchases -> purchas", function() {deepEqual( Stem("purchases"), "purchas");});
test("purchasing -> purchas", function() {deepEqual( Stem("purchasing"), "purchas");});
test("pure -> pure", function() {deepEqual( Stem("pure"), "pure");});
test("purechurch -> purechurch", function() {deepEqual( Stem("purechurch"), "purechurch");});
test("purely -> pure", function() {deepEqual( Stem("purely"), "pure");});
test("purer -> purer", function() {deepEqual( Stem("purer"), "purer");});
test("purest -> purest", function() {deepEqual( Stem("purest"), "purest");});
test("purge -> purg", function() {deepEqual( Stem("purge"), "purg");});
test("purified -> purifi", function() {deepEqual( Stem("purified"), "purifi");});
test("purify -> purifi", function() {deepEqual( Stem("purify"), "purifi");});
test("purity -> puriti", function() {deepEqual( Stem("purity"), "puriti");});
test("purple -> purpl", function() {deepEqual( Stem("purple"), "purpl");});
test("purplish -> purplish", function() {deepEqual( Stem("purplish"), "purplish");});
test("purport -> purport", function() {deepEqual( Stem("purport"), "purport");});
test("purporting -> purport", function() {deepEqual( Stem("purporting"), "purport");});
test("purpose -> purpos", function() {deepEqual( Stem("purpose"), "purpos");});
test("purposed -> purpos", function() {deepEqual( Stem("purposed"), "purpos");});
test("purposeless -> purposeless", function() {deepEqual( Stem("purposeless"), "purposeless");});
test("purposely -> purpos", function() {deepEqual( Stem("purposely"), "purpos");});
test("purposes -> purpos", function() {deepEqual( Stem("purposes"), "purpos");});
test("purpura -> purpura", function() {deepEqual( Stem("purpura"), "purpura");});
test("purpurea -> purpurea", function() {deepEqual( Stem("purpurea"), "purpurea");});
test("purr -> purr", function() {deepEqual( Stem("purr"), "purr");});
test("purring -> pur", function() {deepEqual( Stem("purring"), "pur");});
test("purse -> purs", function() {deepEqual( Stem("purse"), "purs");});
test("pursed -> purs", function() {deepEqual( Stem("pursed"), "purs");});
test("purser -> purser", function() {deepEqual( Stem("purser"), "purser");});
test("purses -> purs", function() {deepEqual( Stem("purses"), "purs");});
test("pursing -> purs", function() {deepEqual( Stem("pursing"), "purs");});
test("pursuance -> pursuanc", function() {deepEqual( Stem("pursuance"), "pursuanc");});
test("pursuant -> pursuant", function() {deepEqual( Stem("pursuant"), "pursuant");});
test("pursue -> pursu", function() {deepEqual( Stem("pursue"), "pursu");});
test("pursued -> pursu", function() {deepEqual( Stem("pursued"), "pursu");});
test("pursuer -> pursuer", function() {deepEqual( Stem("pursuer"), "pursuer");});
test("pursuers -> pursuer", function() {deepEqual( Stem("pursuers"), "pursuer");});
test("pursues -> pursu", function() {deepEqual( Stem("pursues"), "pursu");});
test("pursuing -> pursu", function() {deepEqual( Stem("pursuing"), "pursu");});
test("pursuit -> pursuit", function() {deepEqual( Stem("pursuit"), "pursuit");});
test("pursuits -> pursuit", function() {deepEqual( Stem("pursuits"), "pursuit");});
test("pursult -> pursult", function() {deepEqual( Stem("pursult"), "pursult");});
test("purvided -> purvid", function() {deepEqual( Stem("purvided"), "purvid");});
test("push -> push", function() {deepEqual( Stem("push"), "push");});
test("pushed -> push", function() {deepEqual( Stem("pushed"), "push");});
test("pushes -> push", function() {deepEqual( Stem("pushes"), "push");});
test("pushing -> push", function() {deepEqual( Stem("pushing"), "push");});
test("pushkin -> pushkin", function() {deepEqual( Stem("pushkin"), "pushkin");});
test("pusillanimity -> pusillanim", function() {deepEqual( Stem("pusillanimity"), "pusillanim");});
test("puss -> puss", function() {deepEqual( Stem("puss"), "puss");});
test("pussy -> pussi", function() {deepEqual( Stem("pussy"), "pussi");});
test("pustules -> pustul", function() {deepEqual( Stem("pustules"), "pustul");});
test("put -> put", function() {deepEqual( Stem("put"), "put");});
test("putrefaction -> putrefact", function() {deepEqual( Stem("putrefaction"), "putrefact");});
test("putrefying -> putrefi", function() {deepEqual( Stem("putrefying"), "putrefi");});
test("putrid -> putrid", function() {deepEqual( Stem("putrid"), "putrid");});
test("putridity -> putrid", function() {deepEqual( Stem("putridity"), "putrid");});
test("puts -> put", function() {deepEqual( Stem("puts"), "put");});
test("puttin -> puttin", function() {deepEqual( Stem("puttin"), "puttin");});
test("putting -> put", function() {deepEqual( Stem("putting"), "put");});
test("puzzle -> puzzl", function() {deepEqual( Stem("puzzle"), "puzzl");});
test("puzzled -> puzzl", function() {deepEqual( Stem("puzzled"), "puzzl");});
test("puzzles -> puzzl", function() {deepEqual( Stem("puzzles"), "puzzl");});
test("puzzling -> puzzl", function() {deepEqual( Stem("puzzling"), "puzzl");});
test("py -> py", function() {deepEqual( Stem("py"), "py");});
test("pye -> pye", function() {deepEqual( Stem("pye"), "pye");});
test("pygmy -> pygmi", function() {deepEqual( Stem("pygmy"), "pygmi");});
test("pyke -> pyke", function() {deepEqual( Stem("pyke"), "pyke");});
test("pyotr -> pyotr", function() {deepEqual( Stem("pyotr"), "pyotr");});
test("pyramid -> pyramid", function() {deepEqual( Stem("pyramid"), "pyramid");});
test("pyramids -> pyramid", function() {deepEqual( Stem("pyramids"), "pyramid");});
test("pyrard -> pyrard", function() {deepEqual( Stem("pyrard"), "pyrard");});
test("pyre -> pyre", function() {deepEqual( Stem("pyre"), "pyre");});
test("pyrenees -> pyrene", function() {deepEqual( Stem("pyrenees"), "pyrene");});
test("pyrifera -> pyrifera", function() {deepEqual( Stem("pyrifera"), "pyrifera");});
test("pyrites -> pyrit", function() {deepEqual( Stem("pyrites"), "pyrit");});
test("pyrocephalus -> pyrocephalus", function() {deepEqual( Stem("pyrocephalus"), "pyrocephalus");});
test("pyrophorus -> pyrophorus", function() {deepEqual( Stem("pyrophorus"), "pyrophorus");});
test("pyrosma -> pyrosma", function() {deepEqual( Stem("pyrosma"), "pyrosma");});
test("q -> q", function() {deepEqual( Stem("q"), "q");});
test("qc -> qc", function() {deepEqual( Stem("qc"), "qc");});
test("qu -> qu", function() {deepEqual( Stem("qu"), "qu");});
test("quaccha -> quaccha", function() {deepEqual( Stem("quaccha"), "quaccha");});
test("quack -> quack", function() {deepEqual( Stem("quack"), "quack");});
test("quadra -> quadra", function() {deepEqual( Stem("quadra"), "quadra");});
test("quadrangle -> quadrangl", function() {deepEqual( Stem("quadrangle"), "quadrangl");});
test("quadrangular -> quadrangular", function() {deepEqual( Stem("quadrangular"), "quadrangular");});
test("quadras -> quadra", function() {deepEqual( Stem("quadras"), "quadra");});
test("quadrille -> quadrill", function() {deepEqual( Stem("quadrille"), "quadrill");});
test("quadruped -> quadrup", function() {deepEqual( Stem("quadruped"), "quadrup");});
test("quadrupeds -> quadrup", function() {deepEqual( Stem("quadrupeds"), "quadrup");});
test("quadruple -> quadrupl", function() {deepEqual( Stem("quadruple"), "quadrupl");});
test("quadrupled -> quadrupl", function() {deepEqual( Stem("quadrupled"), "quadrupl");});
test("quagmire -> quagmir", function() {deepEqual( Stem("quagmire"), "quagmir");});
test("quagmires -> quagmir", function() {deepEqual( Stem("quagmires"), "quagmir");});
test("quail -> quail", function() {deepEqual( Stem("quail"), "quail");});
test("quailed -> quail", function() {deepEqual( Stem("quailed"), "quail");});
test("quailing -> quail", function() {deepEqual( Stem("quailing"), "quail");});
test("quails -> quail", function() {deepEqual( Stem("quails"), "quail");});
test("quaint -> quaint", function() {deepEqual( Stem("quaint"), "quaint");});
test("quaintly -> quaint", function() {deepEqual( Stem("quaintly"), "quaint");});
test("quaintness -> quaint", function() {deepEqual( Stem("quaintness"), "quaint");});
test("quake -> quak", function() {deepEqual( Stem("quake"), "quak");});
test("quaked -> quak", function() {deepEqual( Stem("quaked"), "quak");});
test("quakes -> quak", function() {deepEqual( Stem("quakes"), "quak");});
test("quaking -> quak", function() {deepEqual( Stem("quaking"), "quak");});
test("quakings -> quak", function() {deepEqual( Stem("quakings"), "quak");});
test("quale -> qual", function() {deepEqual( Stem("quale"), "qual");});
test("qualification -> qualif", function() {deepEqual( Stem("qualification"), "qualif");});
test("qualifications -> qualif", function() {deepEqual( Stem("qualifications"), "qualif");});
test("qualified -> qualifi", function() {deepEqual( Stem("qualified"), "qualifi");});
test("qualify -> qualifi", function() {deepEqual( Stem("qualify"), "qualifi");});
test("qualifying -> qualifi", function() {deepEqual( Stem("qualifying"), "qualifi");});
test("qualities -> qualiti", function() {deepEqual( Stem("qualities"), "qualiti");});
test("quality -> qualiti", function() {deepEqual( Stem("quality"), "qualiti");});
test("quand -> quand", function() {deepEqual( Stem("quand"), "quand");});
test("quantite -> quantit", function() {deepEqual( Stem("quantite"), "quantit");});
test("quantities -> quantiti", function() {deepEqual( Stem("quantities"), "quantiti");});
test("quantity -> quantiti", function() {deepEqual( Stem("quantity"), "quantiti");});
test("quarrel -> quarrel", function() {deepEqual( Stem("quarrel"), "quarrel");});
test("quarrelled -> quarrel", function() {deepEqual( Stem("quarrelled"), "quarrel");});
test("quarrelling -> quarrel", function() {deepEqual( Stem("quarrelling"), "quarrel");});
test("quarrels -> quarrel", function() {deepEqual( Stem("quarrels"), "quarrel");});
test("quarrelsome -> quarrelsom", function() {deepEqual( Stem("quarrelsome"), "quarrelsom");});
test("quarry -> quarri", function() {deepEqual( Stem("quarry"), "quarri");});
test("quart -> quart", function() {deepEqual( Stem("quart"), "quart");});
test("quarter -> quarter", function() {deepEqual( Stem("quarter"), "quarter");});
test("quartered -> quarter", function() {deepEqual( Stem("quartered"), "quarter");});
test("quartering -> quarter", function() {deepEqual( Stem("quartering"), "quarter");});
test("quarterly -> quarter", function() {deepEqual( Stem("quarterly"), "quarter");});
test("quartermaster -> quartermast", function() {deepEqual( Stem("quartermaster"), "quartermast");});
test("quartern -> quartern", function() {deepEqual( Stem("quartern"), "quartern");});
test("quarters -> quarter", function() {deepEqual( Stem("quarters"), "quarter");});
test("quarther -> quarther", function() {deepEqual( Stem("quarther"), "quarther");});
test("quartz -> quartz", function() {deepEqual( Stem("quartz"), "quartz");});
test("quatre -> quatr", function() {deepEqual( Stem("quatre"), "quatr");});
test("quaver -> quaver", function() {deepEqual( Stem("quaver"), "quaver");});
test("quavering -> quaver", function() {deepEqual( Stem("quavering"), "quaver");});
test("quay -> quay", function() {deepEqual( Stem("quay"), "quay");});
test("que -> que", function() {deepEqual( Stem("que"), "que");});
test("quebec -> quebec", function() {deepEqual( Stem("quebec"), "quebec");});
test("quebrantahuesos -> quebrantahueso", function() {deepEqual( Stem("quebrantahuesos"), "quebrantahueso");});
test("quedius -> quedius", function() {deepEqual( Stem("quedius"), "quedius");});
test("queen -> queen", function() {deepEqual( Stem("queen"), "queen");});
test("queens -> queen", function() {deepEqual( Stem("queens"), "queen");});
test("queer -> queer", function() {deepEqual( Stem("queer"), "queer");});
test("queerest -> queerest", function() {deepEqual( Stem("queerest"), "queerest");});
test("queerness -> queer", function() {deepEqual( Stem("queerness"), "queer");});
test("quell -> quell", function() {deepEqual( Stem("quell"), "quell");});
test("quelled -> quell", function() {deepEqual( Stem("quelled"), "quell");});
test("quench -> quench", function() {deepEqual( Stem("quench"), "quench");});
test("quenched -> quench", function() {deepEqual( Stem("quenched"), "quench");});
test("quenching -> quench", function() {deepEqual( Stem("quenching"), "quench");});
test("queries -> queri", function() {deepEqual( Stem("queries"), "queri");});
test("querulous -> querul", function() {deepEqual( Stem("querulous"), "querul");});
test("query -> queri", function() {deepEqual( Stem("query"), "queri");});
test("quest -> quest", function() {deepEqual( Stem("quest"), "quest");});
test("question -> question", function() {deepEqual( Stem("question"), "question");});
test("questionable -> question", function() {deepEqual( Stem("questionable"), "question");});
test("questioned -> question", function() {deepEqual( Stem("questioned"), "question");});
test("questioner -> question", function() {deepEqual( Stem("questioner"), "question");});
test("questioning -> question", function() {deepEqual( Stem("questioning"), "question");});
test("questionings -> question", function() {deepEqual( Stem("questionings"), "question");});
test("questions -> question", function() {deepEqual( Stem("questions"), "question");});
test("quibble -> quibbl", function() {deepEqual( Stem("quibble"), "quibbl");});
test("quick -> quick", function() {deepEqual( Stem("quick"), "quick");});
test("quicken -> quicken", function() {deepEqual( Stem("quicken"), "quicken");});
test("quickened -> quicken", function() {deepEqual( Stem("quickened"), "quicken");});
test("quickens -> quicken", function() {deepEqual( Stem("quickens"), "quicken");});
test("quicker -> quicker", function() {deepEqual( Stem("quicker"), "quicker");});
test("quickest -> quickest", function() {deepEqual( Stem("quickest"), "quickest");});
test("quickly -> quick", function() {deepEqual( Stem("quickly"), "quick");});
test("quickness -> quick", function() {deepEqual( Stem("quickness"), "quick");});
test("quicksilver -> quicksilv", function() {deepEqual( Stem("quicksilver"), "quicksilv");});
test("quidnuncs -> quidnunc", function() {deepEqual( Stem("quidnuncs"), "quidnunc");});
test("quien -> quien", function() {deepEqual( Stem("quien"), "quien");});
test("quiescence -> quiescenc", function() {deepEqual( Stem("quiescence"), "quiescenc");});
test("quiescent -> quiescent", function() {deepEqual( Stem("quiescent"), "quiescent");});
test("quiet -> quiet", function() {deepEqual( Stem("quiet"), "quiet");});
test("quieted -> quiet", function() {deepEqual( Stem("quieted"), "quiet");});
test("quieter -> quieter", function() {deepEqual( Stem("quieter"), "quieter");});
test("quietest -> quietest", function() {deepEqual( Stem("quietest"), "quietest");});
test("quietly -> quiet", function() {deepEqual( Stem("quietly"), "quiet");});
test("quietness -> quiet", function() {deepEqual( Stem("quietness"), "quiet");});
test("quiets -> quiet", function() {deepEqual( Stem("quiets"), "quiet");});
test("quietude -> quietud", function() {deepEqual( Stem("quietude"), "quietud");});
test("quilimari -> quilimari", function() {deepEqual( Stem("quilimari"), "quilimari");});
test("quillay -> quillay", function() {deepEqual( Stem("quillay"), "quillay");});
test("quillota -> quillota", function() {deepEqual( Stem("quillota"), "quillota");});
test("quills -> quill", function() {deepEqual( Stem("quills"), "quill");});
test("quilmes -> quilm", function() {deepEqual( Stem("quilmes"), "quilm");});
test("quilt -> quilt", function() {deepEqual( Stem("quilt"), "quilt");});
test("quince -> quinc", function() {deepEqual( Stem("quince"), "quinc");});
test("quinchao -> quinchao", function() {deepEqual( Stem("quinchao"), "quinchao");});
test("quintero -> quintero", function() {deepEqual( Stem("quintero"), "quintero");});
test("quints -> quint", function() {deepEqual( Stem("quints"), "quint");});
test("quintus -> quintus", function() {deepEqual( Stem("quintus"), "quintus");});
test("quiriquina -> quiriquina", function() {deepEqual( Stem("quiriquina"), "quiriquina");});
test("quit -> quit", function() {deepEqual( Stem("quit"), "quit");});
test("quite -> quit", function() {deepEqual( Stem("quite"), "quit");});
test("quito -> quito", function() {deepEqual( Stem("quito"), "quito");});
test("quits -> quit", function() {deepEqual( Stem("quits"), "quit");});
test("quitted -> quit", function() {deepEqual( Stem("quitted"), "quit");});
test("quitting -> quit", function() {deepEqual( Stem("quitting"), "quit");});
test("quiver -> quiver", function() {deepEqual( Stem("quiver"), "quiver");});
test("quivered -> quiver", function() {deepEqual( Stem("quivered"), "quiver");});
test("quivering -> quiver", function() {deepEqual( Stem("quivering"), "quiver");});
test("quivers -> quiver", function() {deepEqual( Stem("quivers"), "quiver");});
test("quixote -> quixot", function() {deepEqual( Stem("quixote"), "quixot");});
test("quixotic -> quixot", function() {deepEqual( Stem("quixotic"), "quixot");});
test("quixotism -> quixot", function() {deepEqual( Stem("quixotism"), "quixot");});
test("quizzical -> quizzic", function() {deepEqual( Stem("quizzical"), "quizzic");});
test("quizzing -> quizz", function() {deepEqual( Stem("quizzing"), "quizz");});
test("quizzings -> quizz", function() {deepEqual( Stem("quizzings"), "quizz");});
test("qulte -> qult", function() {deepEqual( Stem("qulte"), "qult");});
test("quo -> quo", function() {deepEqual( Stem("quo"), "quo");});
test("quondam -> quondam", function() {deepEqual( Stem("quondam"), "quondam");});
test("quoodle -> quoodl", function() {deepEqual( Stem("quoodle"), "quoodl");});
test("quotation -> quotat", function() {deepEqual( Stem("quotation"), "quotat");});
test("quotations -> quotat", function() {deepEqual( Stem("quotations"), "quotat");});
test("quote -> quot", function() {deepEqual( Stem("quote"), "quot");});
test("quoted -> quot", function() {deepEqual( Stem("quoted"), "quot");});
test("quotes -> quot", function() {deepEqual( Stem("quotes"), "quot");});
test("quoth -> quoth", function() {deepEqual( Stem("quoth"), "quoth");});
test("quoting -> quot", function() {deepEqual( Stem("quoting"), "quot");});
test("quoy -> quoy", function() {deepEqual( Stem("quoy"), "quoy");});
test("r -> r", function() {deepEqual( Stem("r"), "r");});
test("ra -> ra", function() {deepEqual( Stem("ra"), "ra");});
test("raa -> raa", function() {deepEqual( Stem("raa"), "raa");});
test("rabbit -> rabbit", function() {deepEqual( Stem("rabbit"), "rabbit");});
test("rabbits -> rabbit", function() {deepEqual( Stem("rabbits"), "rabbit");});
test("rabidly -> rabid", function() {deepEqual( Stem("rabidly"), "rabid");});
test("race -> race", function() {deepEqual( Stem("race"), "race");});
test("racehorses -> racehors", function() {deepEqual( Stem("racehorses"), "racehors");});
test("racers -> racer", function() {deepEqual( Stem("racers"), "racer");});
test("races -> race", function() {deepEqual( Stem("races"), "race");});
test("rachael -> rachael", function() {deepEqual( Stem("rachael"), "rachael");});
test("rachel -> rachel", function() {deepEqual( Stem("rachel"), "rachel");});
test("racing -> race", function() {deepEqual( Stem("racing"), "race");});
test("rack -> rack", function() {deepEqual( Stem("rack"), "rack");});
test("racked -> rack", function() {deepEqual( Stem("racked"), "rack");});
test("racket -> racket", function() {deepEqual( Stem("racket"), "racket");});
test("racketing -> racket", function() {deepEqual( Stem("racketing"), "racket");});
test("racking -> rack", function() {deepEqual( Stem("racking"), "rack");});
test("rackings -> rack", function() {deepEqual( Stem("rackings"), "rack");});
test("radack -> radack", function() {deepEqual( Stem("radack"), "radack");});
test("radiance -> radianc", function() {deepEqual( Stem("radiance"), "radianc");});
test("radiant -> radiant", function() {deepEqual( Stem("radiant"), "radiant");});
test("radiantly -> radiant", function() {deepEqual( Stem("radiantly"), "radiant");});
test("radiata -> radiata", function() {deepEqual( Stem("radiata"), "radiata");});
test("radiate -> radiat", function() {deepEqual( Stem("radiate"), "radiat");});
test("radiated -> radiat", function() {deepEqual( Stem("radiated"), "radiat");});
test("radiating -> radiat", function() {deepEqual( Stem("radiating"), "radiat");});
test("radiation -> radiat", function() {deepEqual( Stem("radiation"), "radiat");});
test("radical -> radic", function() {deepEqual( Stem("radical"), "radic");});
test("radicalism -> radic", function() {deepEqual( Stem("radicalism"), "radic");});
test("radicals -> radic", function() {deepEqual( Stem("radicals"), "radic");});
test("radii -> radii", function() {deepEqual( Stem("radii"), "radii");});
test("radish -> radish", function() {deepEqual( Stem("radish"), "radish");});
test("radishchev -> radishchev", function() {deepEqual( Stem("radishchev"), "radishchev");});
test("radishes -> radish", function() {deepEqual( Stem("radishes"), "radish");});
test("rads -> rad", function() {deepEqual( Stem("rads"), "rad");});
test("rafael -> rafael", function() {deepEqual( Stem("rafael"), "rafael");});
test("raff -> raff", function() {deepEqual( Stem("raff"), "raff");});
test("raffaelite -> raffaelit", function() {deepEqual( Stem("raffaelite"), "raffaelit");});
test("raffaelites -> raffaelit", function() {deepEqual( Stem("raffaelites"), "raffaelit");});
test("raffaelitism -> raffaelit", function() {deepEqual( Stem("raffaelitism"), "raffaelit");});
test("raft -> raft", function() {deepEqual( Stem("raft"), "raft");});
test("rafters -> rafter", function() {deepEqual( Stem("rafters"), "rafter");});
test("rafts -> raft", function() {deepEqual( Stem("rafts"), "raft");});
test("rag -> rag", function() {deepEqual( Stem("rag"), "rag");});
test("rage -> rage", function() {deepEqual( Stem("rage"), "rage");});
test("raged -> rage", function() {deepEqual( Stem("raged"), "rage");});
test("rages -> rage", function() {deepEqual( Stem("rages"), "rage");});
test("ragged -> rag", function() {deepEqual( Stem("ragged"), "rag");});
test("raging -> rage", function() {deepEqual( Stem("raging"), "rage");});
test("rags -> rag", function() {deepEqual( Stem("rags"), "rag");});
test("rail -> rail", function() {deepEqual( Stem("rail"), "rail");});
test("railed -> rail", function() {deepEqual( Stem("railed"), "rail");});
test("railing -> rail", function() {deepEqual( Stem("railing"), "rail");});
test("railings -> rail", function() {deepEqual( Stem("railings"), "rail");});
test("raillery -> railleri", function() {deepEqual( Stem("raillery"), "railleri");});
test("railroad -> railroad", function() {deepEqual( Stem("railroad"), "railroad");});
test("railroads -> railroad", function() {deepEqual( Stem("railroads"), "railroad");});
test("rails -> rail", function() {deepEqual( Stem("rails"), "rail");});
test("railway -> railway", function() {deepEqual( Stem("railway"), "railway");});
test("railways -> railway", function() {deepEqual( Stem("railways"), "railway");});
test("rain -> rain", function() {deepEqual( Stem("rain"), "rain");});
test("rainbow -> rainbow", function() {deepEqual( Stem("rainbow"), "rainbow");});
test("raindrops -> raindrop", function() {deepEqual( Stem("raindrops"), "raindrop");});
test("rained -> rain", function() {deepEqual( Stem("rained"), "rain");});
test("raining -> rain", function() {deepEqual( Stem("raining"), "rain");});
test("rains -> rain", function() {deepEqual( Stem("rains"), "rain");});
test("rainy -> raini", function() {deepEqual( Stem("rainy"), "raini");});
test("raise -> rais", function() {deepEqual( Stem("raise"), "rais");});
test("raised -> rais", function() {deepEqual( Stem("raised"), "rais");});
test("raises -> rais", function() {deepEqual( Stem("raises"), "rais");});
test("raising -> rais", function() {deepEqual( Stem("raising"), "rais");});
test("raisins -> raisin", function() {deepEqual( Stem("raisins"), "raisin");});
test("rake -> rake", function() {deepEqual( Stem("rake"), "rake");});
test("raked -> rake", function() {deepEqual( Stem("raked"), "rake");});
test("rakes -> rake", function() {deepEqual( Stem("rakes"), "rake");});
test("raking -> rake", function() {deepEqual( Stem("raking"), "rake");});
test("rakish -> rakish", function() {deepEqual( Stem("rakish"), "rakish");});
test("rakishly -> rakish", function() {deepEqual( Stem("rakishly"), "rakish");});
test("rakishness -> rakish", function() {deepEqual( Stem("rakishness"), "rakish");});
test("ral -> ral", function() {deepEqual( Stem("ral"), "ral");});
test("rallied -> ralli", function() {deepEqual( Stem("rallied"), "ralli");});
test("rallus -> rallus", function() {deepEqual( Stem("rallus"), "rallus");});
test("rally -> ralli", function() {deepEqual( Stem("rally"), "ralli");});
test("rallying -> ralli", function() {deepEqual( Stem("rallying"), "ralli");});
test("ralph -> ralph", function() {deepEqual( Stem("ralph"), "ralph");});
test("ram -> ram", function() {deepEqual( Stem("ram"), "ram");});
test("ramble -> rambl", function() {deepEqual( Stem("ramble"), "rambl");});
test("rambled -> rambl", function() {deepEqual( Stem("rambled"), "rambl");});
test("rambles -> rambl", function() {deepEqual( Stem("rambles"), "rambl");});
test("rambling -> rambl", function() {deepEqual( Stem("rambling"), "rambl");});
test("ramification -> ramif", function() {deepEqual( Stem("ramification"), "ramif");});
test("ramirez -> ramirez", function() {deepEqual( Stem("ramirez"), "ramirez");});
test("rammer -> rammer", function() {deepEqual( Stem("rammer"), "rammer");});
test("rampant -> rampant", function() {deepEqual( Stem("rampant"), "rampant");});
test("rampart -> rampart", function() {deepEqual( Stem("rampart"), "rampart");});
test("ramsden -> ramsden", function() {deepEqual( Stem("ramsden"), "ramsden");});
test("ramsgate -> ramsgat", function() {deepEqual( Stem("ramsgate"), "ramsgat");});
test("ran -> ran", function() {deepEqual( Stem("ran"), "ran");});
test("rana -> rana", function() {deepEqual( Stem("rana"), "rana");});
test("rancagua -> rancagua", function() {deepEqual( Stem("rancagua"), "rancagua");});
test("ranche -> ranch", function() {deepEqual( Stem("ranche"), "ranch");});
test("rancho -> rancho", function() {deepEqual( Stem("rancho"), "rancho");});
test("ranchos -> rancho", function() {deepEqual( Stem("ranchos"), "rancho");});
test("rancorous -> rancor", function() {deepEqual( Stem("rancorous"), "rancor");});
test("rancorously -> rancor", function() {deepEqual( Stem("rancorously"), "rancor");});
test("rancour -> rancour", function() {deepEqual( Stem("rancour"), "rancour");});
test("randal -> randal", function() {deepEqual( Stem("randal"), "randal");});
test("randall -> randal", function() {deepEqual( Stem("randall"), "randal");});
test("random -> random", function() {deepEqual( Stem("random"), "random");});
test("rang -> rang", function() {deepEqual( Stem("rang"), "rang");});
test("range -> rang", function() {deepEqual( Stem("range"), "rang");});
test("ranged -> rang", function() {deepEqual( Stem("ranged"), "rang");});
test("rangees -> range", function() {deepEqual( Stem("rangees"), "range");});
test("ranges -> rang", function() {deepEqual( Stem("ranges"), "rang");});
test("ranging -> rang", function() {deepEqual( Stem("ranging"), "rang");});
test("rank -> rank", function() {deepEqual( Stem("rank"), "rank");});
test("ranked -> rank", function() {deepEqual( Stem("ranked"), "rank");});
test("rankled -> rankl", function() {deepEqual( Stem("rankled"), "rankl");});
test("rankling -> rankl", function() {deepEqual( Stem("rankling"), "rankl");});
test("rankness -> rank", function() {deepEqual( Stem("rankness"), "rank");});
test("ranks -> rank", function() {deepEqual( Stem("ranks"), "rank");});
test("ransack -> ransack", function() {deepEqual( Stem("ransack"), "ransack");});
test("ransacked -> ransack", function() {deepEqual( Stem("ransacked"), "ransack");});
test("ransacking -> ransack", function() {deepEqual( Stem("ransacking"), "ransack");});
test("rap -> rap", function() {deepEqual( Stem("rap"), "rap");});
test("rapacious -> rapaci", function() {deepEqual( Stem("rapacious"), "rapaci");});
test("rapacity -> rapac", function() {deepEqual( Stem("rapacity"), "rapac");});
test("raphael -> raphael", function() {deepEqual( Stem("raphael"), "raphael");});
test("rapid -> rapid", function() {deepEqual( Stem("rapid"), "rapid");});
test("rapidity -> rapid", function() {deepEqual( Stem("rapidity"), "rapid");});
test("rapidly -> rapid", function() {deepEqual( Stem("rapidly"), "rapid");});
test("rapine -> rapin", function() {deepEqual( Stem("rapine"), "rapin");});
test("rapping -> rap", function() {deepEqual( Stem("rapping"), "rap");});
test("raps -> rap", function() {deepEqual( Stem("raps"), "rap");});
test("rapt -> rapt", function() {deepEqual( Stem("rapt"), "rapt");});
test("rapture -> raptur", function() {deepEqual( Stem("rapture"), "raptur");});
test("raptures -> raptur", function() {deepEqual( Stem("raptures"), "raptur");});
test("rapturous -> raptur", function() {deepEqual( Stem("rapturous"), "raptur");});
test("rapturously -> raptur", function() {deepEqual( Stem("rapturously"), "raptur");});
test("rare -> rare", function() {deepEqual( Stem("rare"), "rare");});
test("rarefied -> rarefi", function() {deepEqual( Stem("rarefied"), "rarefi");});
test("rarely -> rare", function() {deepEqual( Stem("rarely"), "rare");});
test("rarer -> rarer", function() {deepEqual( Stem("rarer"), "rarer");});
test("rarest -> rarest", function() {deepEqual( Stem("rarest"), "rarest");});
test("rarity -> rariti", function() {deepEqual( Stem("rarity"), "rariti");});
test("rascal -> rascal", function() {deepEqual( Stem("rascal"), "rascal");});
test("rascality -> rascal", function() {deepEqual( Stem("rascality"), "rascal");});
test("rascally -> rascal", function() {deepEqual( Stem("rascally"), "rascal");});
test("rascals -> rascal", function() {deepEqual( Stem("rascals"), "rascal");});
test("rash -> rash", function() {deepEqual( Stem("rash"), "rash");});
test("rasher -> rasher", function() {deepEqual( Stem("rasher"), "rasher");});
test("rashly -> rash", function() {deepEqual( Stem("rashly"), "rash");});
test("rashness -> rash", function() {deepEqual( Stem("rashness"), "rash");});
test("raskolnikov -> raskolnikov", function() {deepEqual( Stem("raskolnikov"), "raskolnikov");});
test("raspberries -> raspberri", function() {deepEqual( Stem("raspberries"), "raspberri");});
test("raspberry -> raspberri", function() {deepEqual( Stem("raspberry"), "raspberri");});
test("rasper -> rasper", function() {deepEqual( Stem("rasper"), "rasper");});
test("rastro -> rastro", function() {deepEqual( Stem("rastro"), "rastro");});
test("rat -> rat", function() {deepEqual( Stem("rat"), "rat");});
test("rate -> rate", function() {deepEqual( Stem("rate"), "rate");});
test("rated -> rate", function() {deepEqual( Stem("rated"), "rate");});
test("rates -> rate", function() {deepEqual( Stem("rates"), "rate");});
test("rathe -> rath", function() {deepEqual( Stem("rathe"), "rath");});
test("rather -> rather", function() {deepEqual( Stem("rather"), "rather");});
test("ratio -> ratio", function() {deepEqual( Stem("ratio"), "ratio");});
test("rational -> ration", function() {deepEqual( Stem("rational"), "ration");});
test("rationally -> ration", function() {deepEqual( Stem("rationally"), "ration");});
test("rations -> ration", function() {deepEqual( Stem("rations"), "ration");});
test("rats -> rat", function() {deepEqual( Stem("rats"), "rat");});
test("rattle -> rattl", function() {deepEqual( Stem("rattle"), "rattl");});
test("rattled -> rattl", function() {deepEqual( Stem("rattled"), "rattl");});
test("rattler -> rattler", function() {deepEqual( Stem("rattler"), "rattler");});
test("rattlers -> rattler", function() {deepEqual( Stem("rattlers"), "rattler");});
test("rattles -> rattl", function() {deepEqual( Stem("rattles"), "rattl");});
test("rattlesnake -> rattlesnak", function() {deepEqual( Stem("rattlesnake"), "rattlesnak");});
test("rattling -> rattl", function() {deepEqual( Stem("rattling"), "rattl");});
test("rattus -> rattus", function() {deepEqual( Stem("rattus"), "rattus");});
test("ravaged -> ravag", function() {deepEqual( Stem("ravaged"), "ravag");});
test("ravages -> ravag", function() {deepEqual( Stem("ravages"), "ravag");});
test("ravaging -> ravag", function() {deepEqual( Stem("ravaging"), "ravag");});
test("rave -> rave", function() {deepEqual( Stem("rave"), "rave");});
test("raved -> rave", function() {deepEqual( Stem("raved"), "rave");});
test("raven -> raven", function() {deepEqual( Stem("raven"), "raven");});
test("ravenous -> raven", function() {deepEqual( Stem("ravenous"), "raven");});
test("ravenously -> raven", function() {deepEqual( Stem("ravenously"), "raven");});
test("ravens -> raven", function() {deepEqual( Stem("ravens"), "raven");});
test("ravine -> ravin", function() {deepEqual( Stem("ravine"), "ravin");});
test("ravines -> ravin", function() {deepEqual( Stem("ravines"), "ravin");});
test("raving -> rave", function() {deepEqual( Stem("raving"), "rave");});
test("ravings -> rave", function() {deepEqual( Stem("ravings"), "rave");});
test("ravins -> ravin", function() {deepEqual( Stem("ravins"), "ravin");});
test("ravishing -> ravish", function() {deepEqual( Stem("ravishing"), "ravish");});
test("raw -> raw", function() {deepEqual( Stem("raw"), "raw");});
test("rawest -> rawest", function() {deepEqual( Stem("rawest"), "rawest");});
test("ray -> ray", function() {deepEqual( Stem("ray"), "ray");});
test("rays -> ray", function() {deepEqual( Stem("rays"), "ray");});
test("razor -> razor", function() {deepEqual( Stem("razor"), "razor");});
test("razors -> razor", function() {deepEqual( Stem("razors"), "razor");});
test("razsudkin -> razsudkin", function() {deepEqual( Stem("razsudkin"), "razsudkin");});
test("razumihin -> razumihin", function() {deepEqual( Stem("razumihin"), "razumihin");});
test("razumihins -> razumihin", function() {deepEqual( Stem("razumihins"), "razumihin");});
test("rd -> rd", function() {deepEqual( Stem("rd"), "rd");});
test("re -> re", function() {deepEqual( Stem("re"), "re");});
test("rea -> rea", function() {deepEqual( Stem("rea"), "rea");});
test("reach -> reach", function() {deepEqual( Stem("reach"), "reach");});
test("reached -> reach", function() {deepEqual( Stem("reached"), "reach");});
test("reaches -> reach", function() {deepEqual( Stem("reaches"), "reach");});
test("reaching -> reach", function() {deepEqual( Stem("reaching"), "reach");});
test("reaction -> reaction", function() {deepEqual( Stem("reaction"), "reaction");});
test("reactionaries -> reactionari", function() {deepEqual( Stem("reactionaries"), "reactionari");});
test("reactionary -> reactionari", function() {deepEqual( Stem("reactionary"), "reactionari");});
test("read -> read", function() {deepEqual( Stem("read"), "read");});
test("reader -> reader", function() {deepEqual( Stem("reader"), "reader");});
test("readers -> reader", function() {deepEqual( Stem("readers"), "reader");});
test("readied -> readi", function() {deepEqual( Stem("readied"), "readi");});
test("readiest -> readiest", function() {deepEqual( Stem("readiest"), "readiest");});
test("readil -> readil", function() {deepEqual( Stem("readil"), "readil");});
test("readily -> readili", function() {deepEqual( Stem("readily"), "readili");});
test("readiness -> readi", function() {deepEqual( Stem("readiness"), "readi");});
test("reading -> read", function() {deepEqual( Stem("reading"), "read");});
test("readings -> read", function() {deepEqual( Stem("readings"), "read");});
test("readjourned -> readjourn", function() {deepEqual( Stem("readjourned"), "readjourn");});
test("readjust -> readjust", function() {deepEqual( Stem("readjust"), "readjust");});
test("readjusted -> readjust", function() {deepEqual( Stem("readjusted"), "readjust");});
test("readjusts -> readjust", function() {deepEqual( Stem("readjusts"), "readjust");});
test("reads -> read", function() {deepEqual( Stem("reads"), "read");});
test("ready -> readi", function() {deepEqual( Stem("ready"), "readi");});
test("real -> real", function() {deepEqual( Stem("real"), "real");});
test("realisation -> realis", function() {deepEqual( Stem("realisation"), "realis");});
test("realise -> realis", function() {deepEqual( Stem("realise"), "realis");});
test("realised -> realis", function() {deepEqual( Stem("realised"), "realis");});
test("realising -> realis", function() {deepEqual( Stem("realising"), "realis");});
test("realit -> realit", function() {deepEqual( Stem("realit"), "realit");});
test("realities -> realiti", function() {deepEqual( Stem("realities"), "realiti");});
test("reality -> realiti", function() {deepEqual( Stem("reality"), "realiti");});
test("realize -> realiz", function() {deepEqual( Stem("realize"), "realiz");});
test("realized -> realiz", function() {deepEqual( Stem("realized"), "realiz");});
test("realizes -> realiz", function() {deepEqual( Stem("realizes"), "realiz");});
test("realizing -> realiz", function() {deepEqual( Stem("realizing"), "realiz");});
test("reall -> reall", function() {deepEqual( Stem("reall"), "reall");});
test("really -> realli", function() {deepEqual( Stem("really"), "realli");});
test("realm -> realm", function() {deepEqual( Stem("realm"), "realm");});
test("realms -> realm", function() {deepEqual( Stem("realms"), "realm");});
test("reals -> real", function() {deepEqual( Stem("reals"), "real");});
test("realty -> realti", function() {deepEqual( Stem("realty"), "realti");});
test("ream -> ream", function() {deepEqual( Stem("ream"), "ream");});
test("reams -> ream", function() {deepEqual( Stem("reams"), "ream");});
test("reanimate -> reanim", function() {deepEqual( Stem("reanimate"), "reanim");});
test("reap -> reap", function() {deepEqual( Stem("reap"), "reap");});
test("reaped -> reap", function() {deepEqual( Stem("reaped"), "reap");});
test("reaping -> reap", function() {deepEqual( Stem("reaping"), "reap");});
test("reappear -> reappear", function() {deepEqual( Stem("reappear"), "reappear");});
test("reappearance -> reappear", function() {deepEqual( Stem("reappearance"), "reappear");});
test("reappeared -> reappear", function() {deepEqual( Stem("reappeared"), "reappear");});
test("reappearing -> reappear", function() {deepEqual( Stem("reappearing"), "reappear");});
test("reappears -> reappear", function() {deepEqual( Stem("reappears"), "reappear");});
test("rear -> rear", function() {deepEqual( Stem("rear"), "rear");});
test("reared -> rear", function() {deepEqual( Stem("reared"), "rear");});
test("rearing -> rear", function() {deepEqual( Stem("rearing"), "rear");});
test("rearrange -> rearrang", function() {deepEqual( Stem("rearrange"), "rearrang");});
test("rearrangements -> rearrang", function() {deepEqual( Stem("rearrangements"), "rearrang");});
test("rears -> rear", function() {deepEqual( Stem("rears"), "rear");});
test("reascended -> reascend", function() {deepEqual( Stem("reascended"), "reascend");});
test("reascending -> reascend", function() {deepEqual( Stem("reascending"), "reascend");});
test("reason -> reason", function() {deepEqual( Stem("reason"), "reason");});
test("reasonable -> reason", function() {deepEqual( Stem("reasonable"), "reason");});
test("reasonableness -> reason", function() {deepEqual( Stem("reasonableness"), "reason");});
test("reasonably -> reason", function() {deepEqual( Stem("reasonably"), "reason");});
test("reasoned -> reason", function() {deepEqual( Stem("reasoned"), "reason");});
test("reasoners -> reason", function() {deepEqual( Stem("reasoners"), "reason");});
test("reasoning -> reason", function() {deepEqual( Stem("reasoning"), "reason");});
test("reasons -> reason", function() {deepEqual( Stem("reasons"), "reason");});
test("reassume -> reassum", function() {deepEqual( Stem("reassume"), "reassum");});
test("reassurance -> reassur", function() {deepEqual( Stem("reassurance"), "reassur");});
test("reassure -> reassur", function() {deepEqual( Stem("reassure"), "reassur");});
test("reassured -> reassur", function() {deepEqual( Stem("reassured"), "reassur");});
test("reassures -> reassur", function() {deepEqual( Stem("reassures"), "reassur");});
test("reassuring -> reassur", function() {deepEqual( Stem("reassuring"), "reassur");});
test("reassuringly -> reassur", function() {deepEqual( Stem("reassuringly"), "reassur");});
test("reaumur -> reaumur", function() {deepEqual( Stem("reaumur"), "reaumur");});
test("rebel -> rebel", function() {deepEqual( Stem("rebel"), "rebel");});
test("rebelled -> rebel", function() {deepEqual( Stem("rebelled"), "rebel");});
test("rebelling -> rebel", function() {deepEqual( Stem("rebelling"), "rebel");});
test("rebellion -> rebellion", function() {deepEqual( Stem("rebellion"), "rebellion");});
test("rebellious -> rebelli", function() {deepEqual( Stem("rebellious"), "rebelli");});
test("rebellyon -> rebellyon", function() {deepEqual( Stem("rebellyon"), "rebellyon");});
test("rebels -> rebel", function() {deepEqual( Stem("rebels"), "rebel");});
test("rebound -> rebound", function() {deepEqual( Stem("rebound"), "rebound");});
test("rebounded -> rebound", function() {deepEqual( Stem("rebounded"), "rebound");});
test("rebounding -> rebound", function() {deepEqual( Stem("rebounding"), "rebound");});
test("rebuff -> rebuff", function() {deepEqual( Stem("rebuff"), "rebuff");});
test("rebuffed -> rebuf", function() {deepEqual( Stem("rebuffed"), "rebuf");});
test("rebuilding -> rebuild", function() {deepEqual( Stem("rebuilding"), "rebuild");});
test("rebuilt -> rebuilt", function() {deepEqual( Stem("rebuilt"), "rebuilt");});
test("rebuke -> rebuk", function() {deepEqual( Stem("rebuke"), "rebuk");});
test("rebuked -> rebuk", function() {deepEqual( Stem("rebuked"), "rebuk");});
test("rec -> rec", function() {deepEqual( Stem("rec"), "rec");});
test("recado -> recado", function() {deepEqual( Stem("recado"), "recado");});
test("recall -> recal", function() {deepEqual( Stem("recall"), "recal");});
test("recalled -> recal", function() {deepEqual( Stem("recalled"), "recal");});
test("recalling -> recal", function() {deepEqual( Stem("recalling"), "recal");});
test("recalls -> recal", function() {deepEqual( Stem("recalls"), "recal");});
test("recantation -> recant", function() {deepEqual( Stem("recantation"), "recant");});
test("recapitulate -> recapitul", function() {deepEqual( Stem("recapitulate"), "recapitul");});
test("recapitulation -> recapitul", function() {deepEqual( Stem("recapitulation"), "recapitul");});
test("rece -> rece", function() {deepEqual( Stem("rece"), "rece");});
test("receded -> reced", function() {deepEqual( Stem("receded"), "reced");});
test("receding -> reced", function() {deepEqual( Stem("receding"), "reced");});
test("receipt -> receipt", function() {deepEqual( Stem("receipt"), "receipt");});
test("receipts -> receipt", function() {deepEqual( Stem("receipts"), "receipt");});
test("receive -> receiv", function() {deepEqual( Stem("receive"), "receiv");});
test("received -> receiv", function() {deepEqual( Stem("received"), "receiv");});
test("receiver -> receiv", function() {deepEqual( Stem("receiver"), "receiv");});
test("receives -> receiv", function() {deepEqual( Stem("receives"), "receiv");});
test("receiving -> receiv", function() {deepEqual( Stem("receiving"), "receiv");});
test("recent -> recent", function() {deepEqual( Stem("recent"), "recent");});
test("recently -> recent", function() {deepEqual( Stem("recently"), "recent");});
test("reception -> recept", function() {deepEqual( Stem("reception"), "recept");});
test("receptions -> recept", function() {deepEqual( Stem("receptions"), "recept");});
test("recess -> recess", function() {deepEqual( Stem("recess"), "recess");});
test("recesses -> recess", function() {deepEqual( Stem("recesses"), "recess");});
test("recipe -> recip", function() {deepEqual( Stem("recipe"), "recip");});
test("recipient -> recipi", function() {deepEqual( Stem("recipient"), "recipi");});
test("recipro -> recipro", function() {deepEqual( Stem("recipro"), "recipro");});
test("reciprocal -> reciproc", function() {deepEqual( Stem("reciprocal"), "reciproc");});
test("reciprocate -> reciproc", function() {deepEqual( Stem("reciprocate"), "reciproc");});
test("reciprocated -> reciproc", function() {deepEqual( Stem("reciprocated"), "reciproc");});
test("reciprocating -> reciproc", function() {deepEqual( Stem("reciprocating"), "reciproc");});
test("reciprocity -> reciproc", function() {deepEqual( Stem("reciprocity"), "reciproc");});
test("recital -> recit", function() {deepEqual( Stem("recital"), "recit");});
test("recitals -> recit", function() {deepEqual( Stem("recitals"), "recit");});
test("recite -> recit", function() {deepEqual( Stem("recite"), "recit");});
test("recited -> recit", function() {deepEqual( Stem("recited"), "recit");});
test("reckless -> reckless", function() {deepEqual( Stem("reckless"), "reckless");});
test("recklessly -> reckless", function() {deepEqual( Stem("recklessly"), "reckless");});
test("recklessness -> reckless", function() {deepEqual( Stem("recklessness"), "reckless");});
test("reckon -> reckon", function() {deepEqual( Stem("reckon"), "reckon");});
test("reckoned -> reckon", function() {deepEqual( Stem("reckoned"), "reckon");});
test("reckoners -> reckon", function() {deepEqual( Stem("reckoners"), "reckon");});
test("reckoning -> reckon", function() {deepEqual( Stem("reckoning"), "reckon");});
test("reckonings -> reckon", function() {deepEqual( Stem("reckonings"), "reckon");});
test("reclaim -> reclaim", function() {deepEqual( Stem("reclaim"), "reclaim");});
test("reclaimed -> reclaim", function() {deepEqual( Stem("reclaimed"), "reclaim");});
test("reclined -> reclin", function() {deepEqual( Stem("reclined"), "reclin");});
test("reclines -> reclin", function() {deepEqual( Stem("reclines"), "reclin");});
test("reclining -> reclin", function() {deepEqual( Stem("reclining"), "reclin");});
test("reclosing -> reclos", function() {deepEqual( Stem("reclosing"), "reclos");});
test("recluse -> reclus", function() {deepEqual( Stem("recluse"), "reclus");});
test("recognisant -> recognis", function() {deepEqual( Stem("recognisant"), "recognis");});
test("recognise -> recognis", function() {deepEqual( Stem("recognise"), "recognis");});
test("recognised -> recognis", function() {deepEqual( Stem("recognised"), "recognis");});
test("recognising -> recognis", function() {deepEqual( Stem("recognising"), "recognis");});
test("recognition -> recognit", function() {deepEqual( Stem("recognition"), "recognit");});
test("recognize -> recogn", function() {deepEqual( Stem("recognize"), "recogn");});
test("recognized -> recogn", function() {deepEqual( Stem("recognized"), "recogn");});
test("recognizes -> recogn", function() {deepEqual( Stem("recognizes"), "recogn");});
test("recognizing -> recogn", function() {deepEqual( Stem("recognizing"), "recogn");});
test("recoil -> recoil", function() {deepEqual( Stem("recoil"), "recoil");});
test("recoiled -> recoil", function() {deepEqual( Stem("recoiled"), "recoil");});
test("recoiling -> recoil", function() {deepEqual( Stem("recoiling"), "recoil");});
test("recoils -> recoil", function() {deepEqual( Stem("recoils"), "recoil");});
test("recollect -> recollect", function() {deepEqual( Stem("recollect"), "recollect");});
test("recollected -> recollect", function() {deepEqual( Stem("recollected"), "recollect");});
test("recollecting -> recollect", function() {deepEqual( Stem("recollecting"), "recollect");});
test("recollection -> recollect", function() {deepEqual( Stem("recollection"), "recollect");});
test("recollections -> recollect", function() {deepEqual( Stem("recollections"), "recollect");});
test("recollects -> recollect", function() {deepEqual( Stem("recollects"), "recollect");});
test("recommenced -> recommenc", function() {deepEqual( Stem("recommenced"), "recommenc");});
test("recommences -> recomm", function() {deepEqual( Stem("recommences"), "recomm");});
test("recommend -> recommend", function() {deepEqual( Stem("recommend"), "recommend");});
test("recommendation -> recommend", function() {deepEqual( Stem("recommendation"), "recommend");});
test("recommended -> recommend", function() {deepEqual( Stem("recommended"), "recommend");});
test("recommending -> recommend", function() {deepEqual( Stem("recommending"), "recommend");});
test("recompense -> recompens", function() {deepEqual( Stem("recompense"), "recompens");});
test("recompenses -> recompens", function() {deepEqual( Stem("recompenses"), "recompens");});
test("recomposed -> recompos", function() {deepEqual( Stem("recomposed"), "recompos");});
test("recomposing -> recompos", function() {deepEqual( Stem("recomposing"), "recompos");});
test("reconcilable -> reconcil", function() {deepEqual( Stem("reconcilable"), "reconcil");});
test("reconcile -> reconcil", function() {deepEqual( Stem("reconcile"), "reconcil");});
test("reconciled -> reconcil", function() {deepEqual( Stem("reconciled"), "reconcil");});
test("reconcilements -> reconcil", function() {deepEqual( Stem("reconcilements"), "reconcil");});
test("reconciliation -> reconcili", function() {deepEqual( Stem("reconciliation"), "reconcili");});
test("reconciling -> reconcil", function() {deepEqual( Stem("reconciling"), "reconcil");});
test("reconnoitre -> reconnoitr", function() {deepEqual( Stem("reconnoitre"), "reconnoitr");});
test("reconnoitred -> reconnoitr", function() {deepEqual( Stem("reconnoitred"), "reconnoitr");});
test("reconsider -> reconsid", function() {deepEqual( Stem("reconsider"), "reconsid");});
test("reconsideration -> reconsider", function() {deepEqual( Stem("reconsideration"), "reconsider");});
test("reconsidering -> reconsid", function() {deepEqual( Stem("reconsidering"), "reconsid");});
test("reconsigning -> reconsign", function() {deepEqual( Stem("reconsigning"), "reconsign");});
test("reconsignment -> reconsign", function() {deepEqual( Stem("reconsignment"), "reconsign");});
test("recopied -> recopi", function() {deepEqual( Stem("recopied"), "recopi");});
test("record -> record", function() {deepEqual( Stem("record"), "record");});
test("recorded -> record", function() {deepEqual( Stem("recorded"), "record");});
test("recording -> record", function() {deepEqual( Stem("recording"), "record");});
test("records -> record", function() {deepEqual( Stem("records"), "record");});
test("recount -> recount", function() {deepEqual( Stem("recount"), "recount");});
test("recounted -> recount", function() {deepEqual( Stem("recounted"), "recount");});
test("recounting -> recount", function() {deepEqual( Stem("recounting"), "recount");});
test("recouped -> recoup", function() {deepEqual( Stem("recouped"), "recoup");});
test("recourse -> recours", function() {deepEqual( Stem("recourse"), "recours");});
test("recover -> recov", function() {deepEqual( Stem("recover"), "recov");});
test("recovered -> recov", function() {deepEqual( Stem("recovered"), "recov");});
test("recovering -> recov", function() {deepEqual( Stem("recovering"), "recov");});
test("recovers -> recov", function() {deepEqual( Stem("recovers"), "recov");});
test("recovery -> recoveri", function() {deepEqual( Stem("recovery"), "recoveri");});
test("recreation -> recreat", function() {deepEqual( Stem("recreation"), "recreat");});
test("recreative -> recreat", function() {deepEqual( Stem("recreative"), "recreat");});
test("recrimination -> recrimin", function() {deepEqual( Stem("recrimination"), "recrimin");});
test("recriminations -> recrimin", function() {deepEqual( Stem("recriminations"), "recrimin");});
test("recross -> recross", function() {deepEqual( Stem("recross"), "recross");});
test("recrossed -> recross", function() {deepEqual( Stem("recrossed"), "recross");});
test("recrossing -> recross", function() {deepEqual( Stem("recrossing"), "recross");});
test("recruit -> recruit", function() {deepEqual( Stem("recruit"), "recruit");});
test("recruited -> recruit", function() {deepEqual( Stem("recruited"), "recruit");});
test("rectified -> rectifi", function() {deepEqual( Stem("rectified"), "rectifi");});
test("rectify -> rectifi", function() {deepEqual( Stem("rectify"), "rectifi");});
test("rectifying -> rectifi", function() {deepEqual( Stem("rectifying"), "rectifi");});
test("rectitude -> rectitud", function() {deepEqual( Stem("rectitude"), "rectitud");});
test("rectly -> rect", function() {deepEqual( Stem("rectly"), "rect");});
test("rector -> rector", function() {deepEqual( Stem("rector"), "rector");});
test("rectory -> rectori", function() {deepEqual( Stem("rectory"), "rectori");});
test("recumbent -> recumb", function() {deepEqual( Stem("recumbent"), "recumb");});
test("recuperative -> recup", function() {deepEqual( Stem("recuperative"), "recup");});
test("recur -> recur", function() {deepEqual( Stem("recur"), "recur");});
test("recurred -> recur", function() {deepEqual( Stem("recurred"), "recur");});
test("recurrence -> recurr", function() {deepEqual( Stem("recurrence"), "recurr");});
test("recurrent -> recurr", function() {deepEqual( Stem("recurrent"), "recurr");});
test("recurring -> recur", function() {deepEqual( Stem("recurring"), "recur");});
test("recurs -> recur", function() {deepEqual( Stem("recurs"), "recur");});
test("recuvver -> recuvv", function() {deepEqual( Stem("recuvver"), "recuvv");});
test("red -> red", function() {deepEqual( Stem("red"), "red");});
test("reddened -> redden", function() {deepEqual( Stem("reddened"), "redden");});
test("reddening -> redden", function() {deepEqual( Stem("reddening"), "redden");});
test("redder -> redder", function() {deepEqual( Stem("redder"), "redder");});
test("reddest -> reddest", function() {deepEqual( Stem("reddest"), "reddest");});
test("reddish -> reddish", function() {deepEqual( Stem("reddish"), "reddish");});
test("reddy -> reddi", function() {deepEqual( Stem("reddy"), "reddi");});
test("redecorated -> redecor", function() {deepEqual( Stem("redecorated"), "redecor");});
test("redeem -> redeem", function() {deepEqual( Stem("redeem"), "redeem");});
test("redeemed -> redeem", function() {deepEqual( Stem("redeemed"), "redeem");});
test("redeemer -> redeem", function() {deepEqual( Stem("redeemer"), "redeem");});
test("redeeming -> redeem", function() {deepEqual( Stem("redeeming"), "redeem");});
test("redemption -> redempt", function() {deepEqual( Stem("redemption"), "redempt");});
test("redistribution -> redistribut", function() {deepEqual( Stem("redistribution"), "redistribut");});
test("redly -> red", function() {deepEqual( Stem("redly"), "red");});
test("redolent -> redol", function() {deepEqual( Stem("redolent"), "redol");});
test("redouble -> redoubl", function() {deepEqual( Stem("redouble"), "redoubl");});
test("redoubled -> redoubl", function() {deepEqual( Stem("redoubled"), "redoubl");});
test("redoubling -> redoubl", function() {deepEqual( Stem("redoubling"), "redoubl");});
test("redoubtable -> redoubt", function() {deepEqual( Stem("redoubtable"), "redoubt");});
test("redound -> redound", function() {deepEqual( Stem("redound"), "redound");});
test("redounded -> redound", function() {deepEqual( Stem("redounded"), "redound");});
test("redress -> redress", function() {deepEqual( Stem("redress"), "redress");});
test("reduce -> reduc", function() {deepEqual( Stem("reduce"), "reduc");});
test("reduced -> reduc", function() {deepEqual( Stem("reduced"), "reduc");});
test("reduces -> reduc", function() {deepEqual( Stem("reduces"), "reduc");});
test("reducidos -> reducido", function() {deepEqual( Stem("reducidos"), "reducido");});
test("reducing -> reduc", function() {deepEqual( Stem("reducing"), "reduc");});
test("reduction -> reduct", function() {deepEqual( Stem("reduction"), "reduct");});
test("reductions -> reduct", function() {deepEqual( Stem("reductions"), "reduct");});
test("reduvius -> reduvius", function() {deepEqual( Stem("reduvius"), "reduvius");});
test("reed -> reed", function() {deepEqual( Stem("reed"), "reed");});
test("reeds -> reed", function() {deepEqual( Stem("reeds"), "reed");});
test("reef -> reef", function() {deepEqual( Stem("reef"), "reef");});
test("reefs -> reef", function() {deepEqual( Stem("reefs"), "reef");});
test("reeght -> reeght", function() {deepEqual( Stem("reeght"), "reeght");});
test("reek -> reek", function() {deepEqual( Stem("reek"), "reek");});
test("reeked -> reek", function() {deepEqual( Stem("reeked"), "reek");});
test("reeking -> reek", function() {deepEqual( Stem("reeking"), "reek");});
test("reeks -> reek", function() {deepEqual( Stem("reeks"), "reek");});
test("reel -> reel", function() {deepEqual( Stem("reel"), "reel");});
test("reeled -> reel", function() {deepEqual( Stem("reeled"), "reel");});
test("reeling -> reel", function() {deepEqual( Stem("reeling"), "reel");});
test("ref -> ref", function() {deepEqual( Stem("ref"), "ref");});
test("refer -> refer", function() {deepEqual( Stem("refer"), "refer");});
test("referable -> refer", function() {deepEqual( Stem("referable"), "refer");});
test("reference -> refer", function() {deepEqual( Stem("reference"), "refer");});
test("references -> refer", function() {deepEqual( Stem("references"), "refer");});
test("referred -> refer", function() {deepEqual( Stem("referred"), "refer");});
test("referring -> refer", function() {deepEqual( Stem("referring"), "refer");});
test("refers -> refer", function() {deepEqual( Stem("refers"), "refer");});
test("refine -> refin", function() {deepEqual( Stem("refine"), "refin");});
test("refined -> refin", function() {deepEqual( Stem("refined"), "refin");});
test("refinement -> refin", function() {deepEqual( Stem("refinement"), "refin");});
test("refinements -> refin", function() {deepEqual( Stem("refinements"), "refin");});
test("refines -> refin", function() {deepEqual( Stem("refines"), "refin");});
test("refit -> refit", function() {deepEqual( Stem("refit"), "refit");});
test("reflect -> reflect", function() {deepEqual( Stem("reflect"), "reflect");});
test("reflected -> reflect", function() {deepEqual( Stem("reflected"), "reflect");});
test("reflectin -> reflectin", function() {deepEqual( Stem("reflectin"), "reflectin");});
test("reflecting -> reflect", function() {deepEqual( Stem("reflecting"), "reflect");});
test("reflection -> reflect", function() {deepEqual( Stem("reflection"), "reflect");});
test("reflections -> reflect", function() {deepEqual( Stem("reflections"), "reflect");});
test("reflective -> reflect", function() {deepEqual( Stem("reflective"), "reflect");});
test("reflector -> reflector", function() {deepEqual( Stem("reflector"), "reflector");});
test("reflects -> reflect", function() {deepEqual( Stem("reflects"), "reflect");});
test("refolding -> refold", function() {deepEqual( Stem("refolding"), "refold");});
test("refolds -> refold", function() {deepEqual( Stem("refolds"), "refold");});
test("reform -> reform", function() {deepEqual( Stem("reform"), "reform");});
test("reformation -> reform", function() {deepEqual( Stem("reformation"), "reform");});
test("reformed -> reform", function() {deepEqual( Stem("reformed"), "reform");});
test("reformer -> reform", function() {deepEqual( Stem("reformer"), "reform");});
test("reforming -> reform", function() {deepEqual( Stem("reforming"), "reform");});
test("reforms -> reform", function() {deepEqual( Stem("reforms"), "reform");});
test("refraction -> refract", function() {deepEqual( Stem("refraction"), "refract");});
test("refractory -> refractori", function() {deepEqual( Stem("refractory"), "refractori");});
test("refrain -> refrain", function() {deepEqual( Stem("refrain"), "refrain");});
test("refrained -> refrain", function() {deepEqual( Stem("refrained"), "refrain");});
test("refrains -> refrain", function() {deepEqual( Stem("refrains"), "refrain");});
test("refresh -> refresh", function() {deepEqual( Stem("refresh"), "refresh");});
test("refreshed -> refresh", function() {deepEqual( Stem("refreshed"), "refresh");});
test("refreshes -> refresh", function() {deepEqual( Stem("refreshes"), "refresh");});
test("refreshing -> refresh", function() {deepEqual( Stem("refreshing"), "refresh");});
test("refreshingly -> refresh", function() {deepEqual( Stem("refreshingly"), "refresh");});
test("refreshment -> refresh", function() {deepEqual( Stem("refreshment"), "refresh");});
test("refreshments -> refresh", function() {deepEqual( Stem("refreshments"), "refresh");});
test("refrigerator -> refriger", function() {deepEqual( Stem("refrigerator"), "refriger");});
test("refuge -> refug", function() {deepEqual( Stem("refuge"), "refug");});
test("refugees -> refuge", function() {deepEqual( Stem("refugees"), "refuge");});
test("refulgent -> refulg", function() {deepEqual( Stem("refulgent"), "refulg");});
test("refund -> refund", function() {deepEqual( Stem("refund"), "refund");});
test("refunded -> refund", function() {deepEqual( Stem("refunded"), "refund");});
test("refurnish -> refurnish", function() {deepEqual( Stem("refurnish"), "refurnish");});
test("refusal -> refus", function() {deepEqual( Stem("refusal"), "refus");});
test("refuse -> refus", function() {deepEqual( Stem("refuse"), "refus");});
test("refused -> refus", function() {deepEqual( Stem("refused"), "refus");});
test("refuses -> refus", function() {deepEqual( Stem("refuses"), "refus");});
test("refusest -> refusest", function() {deepEqual( Stem("refusest"), "refusest");});
test("refusing -> refus", function() {deepEqual( Stem("refusing"), "refus");});
test("refutation -> refut", function() {deepEqual( Stem("refutation"), "refut");});
test("refute -> refut", function() {deepEqual( Stem("refute"), "refut");});
test("reg -> reg", function() {deepEqual( Stem("reg"), "reg");});
test("regain -> regain", function() {deepEqual( Stem("regain"), "regain");});
test("regained -> regain", function() {deepEqual( Stem("regained"), "regain");});
test("regaining -> regain", function() {deepEqual( Stem("regaining"), "regain");});
test("regains -> regain", function() {deepEqual( Stem("regains"), "regain");});
test("regal -> regal", function() {deepEqual( Stem("regal"), "regal");});
test("regale -> regal", function() {deepEqual( Stem("regale"), "regal");});
test("regaled -> regal", function() {deepEqual( Stem("regaled"), "regal");});
test("regaling -> regal", function() {deepEqual( Stem("regaling"), "regal");});
test("regard -> regard", function() {deepEqual( Stem("regard"), "regard");});
test("regarded -> regard", function() {deepEqual( Stem("regarded"), "regard");});
test("regardful -> regard", function() {deepEqual( Stem("regardful"), "regard");});
test("regarding -> regard", function() {deepEqual( Stem("regarding"), "regard");});
test("regardless -> regardless", function() {deepEqual( Stem("regardless"), "regardless");});
test("regards -> regard", function() {deepEqual( Stem("regards"), "regard");});
test("regeneration -> regener", function() {deepEqual( Stem("regeneration"), "regener");});
test("regent -> regent", function() {deepEqual( Stem("regent"), "regent");});
test("regimen -> regimen", function() {deepEqual( Stem("regimen"), "regimen");});
test("regiment -> regiment", function() {deepEqual( Stem("regiment"), "regiment");});
test("regimental -> regiment", function() {deepEqual( Stem("regimental"), "regiment");});
test("reginald -> reginald", function() {deepEqual( Stem("reginald"), "reginald");});
test("region -> region", function() {deepEqual( Stem("region"), "region");});
test("regions -> region", function() {deepEqual( Stem("regions"), "region");});
test("register -> regist", function() {deepEqual( Stem("register"), "regist");});
test("registered -> regist", function() {deepEqual( Stem("registered"), "regist");});
test("registrar -> registrar", function() {deepEqual( Stem("registrar"), "registrar");});
test("registries -> registri", function() {deepEqual( Stem("registries"), "registri");});
test("regression -> regress", function() {deepEqual( Stem("regression"), "regress");});
test("regret -> regret", function() {deepEqual( Stem("regret"), "regret");});
test("regretful -> regret", function() {deepEqual( Stem("regretful"), "regret");});
test("regretfully -> regret", function() {deepEqual( Stem("regretfully"), "regret");});
test("regrets -> regret", function() {deepEqual( Stem("regrets"), "regret");});
test("regretted -> regret", function() {deepEqual( Stem("regretted"), "regret");});
test("regretting -> regret", function() {deepEqual( Stem("regretting"), "regret");});
test("regular -> regular", function() {deepEqual( Stem("regular"), "regular");});
test("regularity -> regular", function() {deepEqual( Stem("regularity"), "regular");});
test("regularly -> regular", function() {deepEqual( Stem("regularly"), "regular");});
test("regulars -> regular", function() {deepEqual( Stem("regulars"), "regular");});
test("regulate -> regul", function() {deepEqual( Stem("regulate"), "regul");});
test("regulated -> regul", function() {deepEqual( Stem("regulated"), "regul");});
test("regulates -> regul", function() {deepEqual( Stem("regulates"), "regul");});
test("regulating -> regul", function() {deepEqual( Stem("regulating"), "regul");});
test("regulation -> regul", function() {deepEqual( Stem("regulation"), "regul");});
test("rehearsal -> rehears", function() {deepEqual( Stem("rehearsal"), "rehears");});
test("rehearse -> rehears", function() {deepEqual( Stem("rehearse"), "rehears");});
test("rehearsed -> rehears", function() {deepEqual( Stem("rehearsed"), "rehears");});
test("reid -> reid", function() {deepEqual( Stem("reid"), "reid");});
test("reign -> reign", function() {deepEqual( Stem("reign"), "reign");});
test("reigned -> reign", function() {deepEqual( Stem("reigned"), "reign");});
test("reigning -> reign", function() {deepEqual( Stem("reigning"), "reign");});
test("reigns -> reign", function() {deepEqual( Stem("reigns"), "reign");});
test("reimbursed -> reimburs", function() {deepEqual( Stem("reimbursed"), "reimburs");});
test("rein -> rein", function() {deepEqual( Stem("rein"), "rein");});
test("reindeer -> reindeer", function() {deepEqual( Stem("reindeer"), "reindeer");});
test("reined -> rein", function() {deepEqual( Stem("reined"), "rein");});
test("reinforced -> reinforc", function() {deepEqual( Stem("reinforced"), "reinforc");});
test("reining -> rein", function() {deepEqual( Stem("reining"), "rein");});
test("reins -> rein", function() {deepEqual( Stem("reins"), "rein");});
test("reinstated -> reinstat", function() {deepEqual( Stem("reinstated"), "reinstat");});
test("reinstating -> reinstat", function() {deepEqual( Stem("reinstating"), "reinstat");});
test("reiterated -> reiter", function() {deepEqual( Stem("reiterated"), "reiter");});
test("reiterates -> reiter", function() {deepEqual( Stem("reiterates"), "reiter");});
test("reiteration -> reiter", function() {deepEqual( Stem("reiteration"), "reiter");});
test("reithrodon -> reithrodon", function() {deepEqual( Stem("reithrodon"), "reithrodon");});
test("reject -> reject", function() {deepEqual( Stem("reject"), "reject");});
test("rejected -> reject", function() {deepEqual( Stem("rejected"), "reject");});
test("rejecting -> reject", function() {deepEqual( Stem("rejecting"), "reject");});
test("rejection -> reject", function() {deepEqual( Stem("rejection"), "reject");});
test("rejects -> reject", function() {deepEqual( Stem("rejects"), "reject");});
test("rejoice -> rejoic", function() {deepEqual( Stem("rejoice"), "rejoic");});
test("rejoiced -> rejoic", function() {deepEqual( Stem("rejoiced"), "rejoic");});
test("rejoices -> rejoic", function() {deepEqual( Stem("rejoices"), "rejoic");});
test("rejoicing -> rejoic", function() {deepEqual( Stem("rejoicing"), "rejoic");});
test("rejoicings -> rejoic", function() {deepEqual( Stem("rejoicings"), "rejoic");});
test("rejoin -> rejoin", function() {deepEqual( Stem("rejoin"), "rejoin");});
test("rejoinder -> rejoind", function() {deepEqual( Stem("rejoinder"), "rejoind");});
test("rejoinders -> rejoind", function() {deepEqual( Stem("rejoinders"), "rejoind");});
test("rejoined -> rejoin", function() {deepEqual( Stem("rejoined"), "rejoin");});
test("rejoining -> rejoin", function() {deepEqual( Stem("rejoining"), "rejoin");});
test("rejoins -> rejoin", function() {deepEqual( Stem("rejoins"), "rejoin");});
test("rekindled -> rekindl", function() {deepEqual( Stem("rekindled"), "rekindl");});
test("relapse -> relaps", function() {deepEqual( Stem("relapse"), "relaps");});
test("relapsed -> relaps", function() {deepEqual( Stem("relapsed"), "relaps");});
test("relapses -> relaps", function() {deepEqual( Stem("relapses"), "relaps");});
test("relapsing -> relaps", function() {deepEqual( Stem("relapsing"), "relaps");});
test("relate -> relat", function() {deepEqual( Stem("relate"), "relat");});
test("related -> relat", function() {deepEqual( Stem("related"), "relat");});
test("relates -> relat", function() {deepEqual( Stem("relates"), "relat");});
test("relating -> relat", function() {deepEqual( Stem("relating"), "relat");});
test("relation -> relat", function() {deepEqual( Stem("relation"), "relat");});
test("relations -> relat", function() {deepEqual( Stem("relations"), "relat");});
test("relationship -> relationship", function() {deepEqual( Stem("relationship"), "relationship");});
test("relative -> relat", function() {deepEqual( Stem("relative"), "relat");});
test("relatively -> relat", function() {deepEqual( Stem("relatively"), "relat");});
test("relatives -> relat", function() {deepEqual( Stem("relatives"), "relat");});
test("relax -> relax", function() {deepEqual( Stem("relax"), "relax");});
test("relaxation -> relax", function() {deepEqual( Stem("relaxation"), "relax");});
test("relaxations -> relax", function() {deepEqual( Stem("relaxations"), "relax");});
test("relaxe -> relax", function() {deepEqual( Stem("relaxe"), "relax");});
test("relaxed -> relax", function() {deepEqual( Stem("relaxed"), "relax");});
test("relaxes -> relax", function() {deepEqual( Stem("relaxes"), "relax");});
test("relaxing -> relax", function() {deepEqual( Stem("relaxing"), "relax");});
test("relays -> relay", function() {deepEqual( Stem("relays"), "relay");});
test("release -> releas", function() {deepEqual( Stem("release"), "releas");});
test("released -> releas", function() {deepEqual( Stem("released"), "releas");});
test("releases -> releas", function() {deepEqual( Stem("releases"), "releas");});
test("releasing -> releas", function() {deepEqual( Stem("releasing"), "releas");});
test("relent -> relent", function() {deepEqual( Stem("relent"), "relent");});
test("relented -> relent", function() {deepEqual( Stem("relented"), "relent");});
test("relenting -> relent", function() {deepEqual( Stem("relenting"), "relent");});
test("relentless -> relentless", function() {deepEqual( Stem("relentless"), "relentless");});
test("relents -> relent", function() {deepEqual( Stem("relents"), "relent");});
test("reliable -> reliabl", function() {deepEqual( Stem("reliable"), "reliabl");});
test("reliance -> relianc", function() {deepEqual( Stem("reliance"), "relianc");});
test("reliant -> reliant", function() {deepEqual( Stem("reliant"), "reliant");});
test("relic -> relic", function() {deepEqual( Stem("relic"), "relic");});
test("relics -> relic", function() {deepEqual( Stem("relics"), "relic");});
test("relict -> relict", function() {deepEqual( Stem("relict"), "relict");});
test("relied -> reli", function() {deepEqual( Stem("relied"), "reli");});
test("relief -> relief", function() {deepEqual( Stem("relief"), "relief");});
test("reliefs -> relief", function() {deepEqual( Stem("reliefs"), "relief");});
test("relies -> reli", function() {deepEqual( Stem("relies"), "reli");});
test("relieve -> reliev", function() {deepEqual( Stem("relieve"), "reliev");});
test("relieved -> reliev", function() {deepEqual( Stem("relieved"), "reliev");});
test("relieves -> reliev", function() {deepEqual( Stem("relieves"), "reliev");});
test("relieving -> reliev", function() {deepEqual( Stem("relieving"), "reliev");});
test("religion -> religion", function() {deepEqual( Stem("religion"), "religion");});
test("religions -> religion", function() {deepEqual( Stem("religions"), "religion");});
test("religious -> religi", function() {deepEqual( Stem("religious"), "religi");});
test("religiously -> religi", function() {deepEqual( Stem("religiously"), "religi");});
test("relinquish -> relinquish", function() {deepEqual( Stem("relinquish"), "relinquish");});
test("relinquished -> relinquish", function() {deepEqual( Stem("relinquished"), "relinquish");});
test("relinquishing -> relinquish", function() {deepEqual( Stem("relinquishing"), "relinquish");});
test("relinquishment -> relinquish", function() {deepEqual( Stem("relinquishment"), "relinquish");});
test("reliques -> reliqu", function() {deepEqual( Stem("reliques"), "reliqu");});
test("relish -> relish", function() {deepEqual( Stem("relish"), "relish");});
test("relished -> relish", function() {deepEqual( Stem("relished"), "relish");});
test("relishing -> relish", function() {deepEqual( Stem("relishing"), "relish");});
test("reluctance -> reluct", function() {deepEqual( Stem("reluctance"), "reluct");});
test("reluctant -> reluct", function() {deepEqual( Stem("reluctant"), "reluct");});
test("reluctantly -> reluct", function() {deepEqual( Stem("reluctantly"), "reluct");});
test("rely -> reli", function() {deepEqual( Stem("rely"), "reli");});
test("relying -> reli", function() {deepEqual( Stem("relying"), "reli");});
test("remain -> remain", function() {deepEqual( Stem("remain"), "remain");});
test("remainder -> remaind", function() {deepEqual( Stem("remainder"), "remaind");});
test("remaine -> remain", function() {deepEqual( Stem("remaine"), "remain");});
test("remained -> remain", function() {deepEqual( Stem("remained"), "remain");});
test("remaining -> remain", function() {deepEqual( Stem("remaining"), "remain");});
test("remains -> remain", function() {deepEqual( Stem("remains"), "remain");});
test("remand -> remand", function() {deepEqual( Stem("remand"), "remand");});
test("remanded -> remand", function() {deepEqual( Stem("remanded"), "remand");});
test("remands -> remand", function() {deepEqual( Stem("remands"), "remand");});
test("remark -> remark", function() {deepEqual( Stem("remark"), "remark");});
test("remarkable -> remark", function() {deepEqual( Stem("remarkable"), "remark");});
test("remarkably -> remark", function() {deepEqual( Stem("remarkably"), "remark");});
test("remarked -> remark", function() {deepEqual( Stem("remarked"), "remark");});
test("remarkedly -> remark", function() {deepEqual( Stem("remarkedly"), "remark");});
test("remarking -> remark", function() {deepEqual( Stem("remarking"), "remark");});
test("remarks -> remark", function() {deepEqual( Stem("remarks"), "remark");});
test("remedies -> remedi", function() {deepEqual( Stem("remedies"), "remedi");});
test("remedy -> remedi", function() {deepEqual( Stem("remedy"), "remedi");});
test("remember -> rememb", function() {deepEqual( Stem("remember"), "rememb");});
test("remembered -> rememb", function() {deepEqual( Stem("remembered"), "rememb");});
test("remembering -> rememb", function() {deepEqual( Stem("remembering"), "rememb");});
test("remembers -> rememb", function() {deepEqual( Stem("remembers"), "rememb");});
test("remembrance -> remembr", function() {deepEqual( Stem("remembrance"), "remembr");});
test("remembrances -> remembr", function() {deepEqual( Stem("remembrances"), "remembr");});
test("remensher -> remensh", function() {deepEqual( Stem("remensher"), "remensh");});
test("remind -> remind", function() {deepEqual( Stem("remind"), "remind");});
test("reminded -> remind", function() {deepEqual( Stem("reminded"), "remind");});
test("reminder -> remind", function() {deepEqual( Stem("reminder"), "remind");});
test("reminders -> remind", function() {deepEqual( Stem("reminders"), "remind");});
test("reminding -> remind", function() {deepEqual( Stem("reminding"), "remind");});
test("remindingmanfact -> remindingmanfact", function() {deepEqual( Stem("remindingmanfact"), "remindingmanfact");});
test("reminds -> remind", function() {deepEqual( Stem("reminds"), "remind");});
test("reminiscence -> reminisc", function() {deepEqual( Stem("reminiscence"), "reminisc");});
test("reminiscences -> reminisc", function() {deepEqual( Stem("reminiscences"), "reminisc");});
test("reminiscent -> reminisc", function() {deepEqual( Stem("reminiscent"), "reminisc");});
test("remiss -> remiss", function() {deepEqual( Stem("remiss"), "remiss");});
test("remit -> remit", function() {deepEqual( Stem("remit"), "remit");});
test("remittance -> remitt", function() {deepEqual( Stem("remittance"), "remitt");});
test("remitting -> remit", function() {deepEqual( Stem("remitting"), "remit");});
test("remnant -> remnant", function() {deepEqual( Stem("remnant"), "remnant");});
test("remnants -> remnant", function() {deepEqual( Stem("remnants"), "remnant");});
test("remonstrance -> remonstr", function() {deepEqual( Stem("remonstrance"), "remonstr");});
test("remonstrances -> remonstr", function() {deepEqual( Stem("remonstrances"), "remonstr");});
test("remonstrate -> remonstr", function() {deepEqual( Stem("remonstrate"), "remonstr");});
test("remonstrated -> remonstr", function() {deepEqual( Stem("remonstrated"), "remonstr");});
test("remonstrates -> remonstr", function() {deepEqual( Stem("remonstrates"), "remonstr");});
test("remonstrating -> remonstr", function() {deepEqual( Stem("remonstrating"), "remonstr");});
test("remonstrative -> remonstr", function() {deepEqual( Stem("remonstrative"), "remonstr");});
test("remorse -> remors", function() {deepEqual( Stem("remorse"), "remors");});
test("remorseful -> remors", function() {deepEqual( Stem("remorseful"), "remors");});
test("remote -> remot", function() {deepEqual( Stem("remote"), "remot");});
test("remotely -> remot", function() {deepEqual( Stem("remotely"), "remot");});
test("remoteness -> remot", function() {deepEqual( Stem("remoteness"), "remot");});
test("remotest -> remotest", function() {deepEqual( Stem("remotest"), "remotest");});
test("remounted -> remount", function() {deepEqual( Stem("remounted"), "remount");});
test("removal -> remov", function() {deepEqual( Stem("removal"), "remov");});
test("removals -> remov", function() {deepEqual( Stem("removals"), "remov");});
test("remove -> remov", function() {deepEqual( Stem("remove"), "remov");});
test("removed -> remov", function() {deepEqual( Stem("removed"), "remov");});
test("removes -> remov", function() {deepEqual( Stem("removes"), "remov");});
test("removing -> remov", function() {deepEqual( Stem("removing"), "remov");});
test("remplir -> remplir", function() {deepEqual( Stem("remplir"), "remplir");});
test("remunerate -> remuner", function() {deepEqual( Stem("remunerate"), "remuner");});
test("remunerated -> remuner", function() {deepEqual( Stem("remunerated"), "remuner");});
test("remuneration -> remuner", function() {deepEqual( Stem("remuneration"), "remuner");});
test("rend -> rend", function() {deepEqual( Stem("rend"), "rend");});
test("render -> render", function() {deepEqual( Stem("render"), "render");});
test("rendered -> render", function() {deepEqual( Stem("rendered"), "render");});
test("rendering -> render", function() {deepEqual( Stem("rendering"), "render");});
test("renders -> render", function() {deepEqual( Stem("renders"), "render");});
test("rendezvous -> rendezv", function() {deepEqual( Stem("rendezvous"), "rendezv");});
test("rending -> rend", function() {deepEqual( Stem("rending"), "rend");});
test("rendus -> rendus", function() {deepEqual( Stem("rendus"), "rendus");});
test("renegade -> renegad", function() {deepEqual( Stem("renegade"), "renegad");});
test("renew -> renew", function() {deepEqual( Stem("renew"), "renew");});
test("renewable -> renew", function() {deepEqual( Stem("renewable"), "renew");});
test("renewal -> renew", function() {deepEqual( Stem("renewal"), "renew");});
test("renewals -> renew", function() {deepEqual( Stem("renewals"), "renew");});
test("renewed -> renew", function() {deepEqual( Stem("renewed"), "renew");});
test("renewing -> renew", function() {deepEqual( Stem("renewing"), "renew");});
test("renews -> renew", function() {deepEqual( Stem("renews"), "renew");});
test("rengger -> rengger", function() {deepEqual( Stem("rengger"), "rengger");});
test("renounce -> renounc", function() {deepEqual( Stem("renounce"), "renounc");});
test("renounced -> renounc", function() {deepEqual( Stem("renounced"), "renounc");});
test("renouncing -> renounc", function() {deepEqual( Stem("renouncing"), "renounc");});
test("renous -> renous", function() {deepEqual( Stem("renous"), "renous");});
test("renovation -> renov", function() {deepEqual( Stem("renovation"), "renov");});
test("renown -> renown", function() {deepEqual( Stem("renown"), "renown");});
test("renowned -> renown", function() {deepEqual( Stem("renowned"), "renown");});
test("rent -> rent", function() {deepEqual( Stem("rent"), "rent");});
test("rents -> rent", function() {deepEqual( Stem("rents"), "rent");});
test("renunciation -> renunci", function() {deepEqual( Stem("renunciation"), "renunci");});
test("repacked -> repack", function() {deepEqual( Stem("repacked"), "repack");});
test("repaid -> repaid", function() {deepEqual( Stem("repaid"), "repaid");});
test("repair -> repair", function() {deepEqual( Stem("repair"), "repair");});
test("repaired -> repair", function() {deepEqual( Stem("repaired"), "repair");});
test("repairing -> repair", function() {deepEqual( Stem("repairing"), "repair");});
test("repairs -> repair", function() {deepEqual( Stem("repairs"), "repair");});
test("reparation -> repar", function() {deepEqual( Stem("reparation"), "repar");});
test("repartee -> reparte", function() {deepEqual( Stem("repartee"), "reparte");});
test("repass -> repass", function() {deepEqual( Stem("repass"), "repass");});
test("repassed -> repass", function() {deepEqual( Stem("repassed"), "repass");});
test("repassing -> repass", function() {deepEqual( Stem("repassing"), "repass");});
test("repast -> repast", function() {deepEqual( Stem("repast"), "repast");});
test("repay -> repay", function() {deepEqual( Stem("repay"), "repay");});
test("repaying -> repay", function() {deepEqual( Stem("repaying"), "repay");});
test("repayment -> repay", function() {deepEqual( Stem("repayment"), "repay");});
test("repays -> repay", function() {deepEqual( Stem("repays"), "repay");});
test("repeal -> repeal", function() {deepEqual( Stem("repeal"), "repeal");});
test("repealed -> repeal", function() {deepEqual( Stem("repealed"), "repeal");});
test("repeat -> repeat", function() {deepEqual( Stem("repeat"), "repeat");});
test("repeated -> repeat", function() {deepEqual( Stem("repeated"), "repeat");});
test("repeatedly -> repeat", function() {deepEqual( Stem("repeatedly"), "repeat");});
test("repeater -> repeat", function() {deepEqual( Stem("repeater"), "repeat");});
test("repeating -> repeat", function() {deepEqual( Stem("repeating"), "repeat");});
test("repeats -> repeat", function() {deepEqual( Stem("repeats"), "repeat");});
test("repeatually -> repeatu", function() {deepEqual( Stem("repeatually"), "repeatu");});
test("repel -> repel", function() {deepEqual( Stem("repel"), "repel");});
test("repelled -> repel", function() {deepEqual( Stem("repelled"), "repel");});
test("repellent -> repel", function() {deepEqual( Stem("repellent"), "repel");});
test("repelling -> repel", function() {deepEqual( Stem("repelling"), "repel");});
test("repent -> repent", function() {deepEqual( Stem("repent"), "repent");});
test("repentance -> repent", function() {deepEqual( Stem("repentance"), "repent");});
test("repentant -> repent", function() {deepEqual( Stem("repentant"), "repent");});
test("repented -> repent", function() {deepEqual( Stem("repented"), "repent");});
test("repenteth -> repenteth", function() {deepEqual( Stem("repenteth"), "repenteth");});
test("repenting -> repent", function() {deepEqual( Stem("repenting"), "repent");});
test("repents -> repent", function() {deepEqual( Stem("repents"), "repent");});
test("reperusal -> reperus", function() {deepEqual( Stem("reperusal"), "reperus");});
test("repetition -> repetit", function() {deepEqual( Stem("repetition"), "repetit");});
test("repetitions -> repetit", function() {deepEqual( Stem("repetitions"), "repetit");});
test("rephed -> reph", function() {deepEqual( Stem("rephed"), "reph");});
test("repine -> repin", function() {deepEqual( Stem("repine"), "repin");});
test("repined -> repin", function() {deepEqual( Stem("repined"), "repin");});
test("repines -> repin", function() {deepEqual( Stem("repines"), "repin");});
test("repining -> repin", function() {deepEqual( Stem("repining"), "repin");});
test("replace -> replac", function() {deepEqual( Stem("replace"), "replac");});
test("replaced -> replac", function() {deepEqual( Stem("replaced"), "replac");});
test("replaces -> replac", function() {deepEqual( Stem("replaces"), "replac");});
test("replacing -> replac", function() {deepEqual( Stem("replacing"), "replac");});
test("replenishing -> replenish", function() {deepEqual( Stem("replenishing"), "replenish");});
test("replete -> replet", function() {deepEqual( Stem("replete"), "replet");});
test("repletion -> replet", function() {deepEqual( Stem("repletion"), "replet");});
test("replied -> repli", function() {deepEqual( Stem("replied"), "repli");});
test("replies -> repli", function() {deepEqual( Stem("replies"), "repli");});
test("reply -> repli", function() {deepEqual( Stem("reply"), "repli");});
test("replying -> repli", function() {deepEqual( Stem("replying"), "repli");});
test("report -> report", function() {deepEqual( Stem("report"), "report");});
test("reported -> report", function() {deepEqual( Stem("reported"), "report");});
test("reporter -> report", function() {deepEqual( Stem("reporter"), "report");});
test("reporters -> report", function() {deepEqual( Stem("reporters"), "report");});
test("reporting -> report", function() {deepEqual( Stem("reporting"), "report");});
test("reports -> report", function() {deepEqual( Stem("reports"), "report");});
test("repose -> repos", function() {deepEqual( Stem("repose"), "repos");});
test("reposed -> repos", function() {deepEqual( Stem("reposed"), "repos");});
test("reposes -> repos", function() {deepEqual( Stem("reposes"), "repos");});
test("reposing -> repos", function() {deepEqual( Stem("reposing"), "repos");});
test("repository -> repositori", function() {deepEqual( Stem("repository"), "repositori");});
test("repossess -> repossess", function() {deepEqual( Stem("repossess"), "repossess");});
test("repossession -> repossess", function() {deepEqual( Stem("repossession"), "repossess");});
test("reprehensible -> reprehens", function() {deepEqual( Stem("reprehensible"), "reprehens");});
test("reprehension -> reprehens", function() {deepEqual( Stem("reprehension"), "reprehens");});
test("represent -> repres", function() {deepEqual( Stem("represent"), "repres");});
test("representation -> represent", function() {deepEqual( Stem("representation"), "represent");});
test("representations -> represent", function() {deepEqual( Stem("representations"), "represent");});
test("representative -> repres", function() {deepEqual( Stem("representative"), "repres");});
test("representatives -> repres", function() {deepEqual( Stem("representatives"), "repres");});
test("represented -> repres", function() {deepEqual( Stem("represented"), "repres");});
test("representing -> repres", function() {deepEqual( Stem("representing"), "repres");});
test("represents -> repres", function() {deepEqual( Stem("represents"), "repres");});
test("repress -> repress", function() {deepEqual( Stem("repress"), "repress");});
test("repressed -> repress", function() {deepEqual( Stem("repressed"), "repress");});
test("repressing -> repress", function() {deepEqual( Stem("repressing"), "repress");});
test("reprieve -> repriev", function() {deepEqual( Stem("reprieve"), "repriev");});
test("reprint -> reprint", function() {deepEqual( Stem("reprint"), "reprint");});
test("reprinted -> reprint", function() {deepEqual( Stem("reprinted"), "reprint");});
test("reproach -> reproach", function() {deepEqual( Stem("reproach"), "reproach");});
test("reproached -> reproach", function() {deepEqual( Stem("reproached"), "reproach");});
test("reproaches -> reproach", function() {deepEqual( Stem("reproaches"), "reproach");});
test("reproachful -> reproach", function() {deepEqual( Stem("reproachful"), "reproach");});
test("reproachfully -> reproach", function() {deepEqual( Stem("reproachfully"), "reproach");});
test("reproaching -> reproach", function() {deepEqual( Stem("reproaching"), "reproach");});
test("reprobate -> reprob", function() {deepEqual( Stem("reprobate"), "reprob");});
test("reprobates -> reprob", function() {deepEqual( Stem("reprobates"), "reprob");});
test("reprobation -> reprob", function() {deepEqual( Stem("reprobation"), "reprob");});
test("reproduce -> reproduc", function() {deepEqual( Stem("reproduce"), "reproduc");});
test("reproduced -> reproduc", function() {deepEqual( Stem("reproduced"), "reproduc");});
test("reproducing -> reproduc", function() {deepEqual( Stem("reproducing"), "reproduc");});
test("reproof -> reproof", function() {deepEqual( Stem("reproof"), "reproof");});
test("reproofs -> reproof", function() {deepEqual( Stem("reproofs"), "reproof");});
test("reprove -> reprov", function() {deepEqual( Stem("reprove"), "reprov");});
test("reproved -> reprov", function() {deepEqual( Stem("reproved"), "reprov");});
test("reprovingly -> reprov", function() {deepEqual( Stem("reprovingly"), "reprov");});
test("reptile -> reptil", function() {deepEqual( Stem("reptile"), "reptil");});
test("reptiles -> reptil", function() {deepEqual( Stem("reptiles"), "reptil");});
test("republic -> republ", function() {deepEqual( Stem("republic"), "republ");});
test("republican -> republican", function() {deepEqual( Stem("republican"), "republican");});
test("republicanism -> republican", function() {deepEqual( Stem("republicanism"), "republican");});
test("republicans -> republican", function() {deepEqual( Stem("republicans"), "republican");});
test("republics -> republ", function() {deepEqual( Stem("republics"), "republ");});
test("republished -> republish", function() {deepEqual( Stem("republished"), "republish");});
test("repudiate -> repudi", function() {deepEqual( Stem("repudiate"), "repudi");});
test("repudiated -> repudi", function() {deepEqual( Stem("repudiated"), "repudi");});
test("repudiating -> repudi", function() {deepEqual( Stem("repudiating"), "repudi");});
test("repudiation -> repudi", function() {deepEqual( Stem("repudiation"), "repudi");});
test("repugnance -> repugn", function() {deepEqual( Stem("repugnance"), "repugn");});
test("repugnant -> repugn", function() {deepEqual( Stem("repugnant"), "repugn");});
test("repulse -> repuls", function() {deepEqual( Stem("repulse"), "repuls");});
test("repulsed -> repuls", function() {deepEqual( Stem("repulsed"), "repuls");});
test("repulsion -> repuls", function() {deepEqual( Stem("repulsion"), "repuls");});
test("repulsive -> repuls", function() {deepEqual( Stem("repulsive"), "repuls");});
test("reputable -> reput", function() {deepEqual( Stem("reputable"), "reput");});
test("reputation -> reput", function() {deepEqual( Stem("reputation"), "reput");});
test("reputations -> reput", function() {deepEqual( Stem("reputations"), "reput");});
test("repute -> reput", function() {deepEqual( Stem("repute"), "reput");});
test("reputed -> reput", function() {deepEqual( Stem("reputed"), "reput");});
test("request -> request", function() {deepEqual( Stem("request"), "request");});
test("requested -> request", function() {deepEqual( Stem("requested"), "request");});
test("requesting -> request", function() {deepEqual( Stem("requesting"), "request");});
test("requests -> request", function() {deepEqual( Stem("requests"), "request");});
test("requiem -> requiem", function() {deepEqual( Stem("requiem"), "requiem");});
test("require -> requir", function() {deepEqual( Stem("require"), "requir");});
test("required -> requir", function() {deepEqual( Stem("required"), "requir");});
test("requirements -> requir", function() {deepEqual( Stem("requirements"), "requir");});
test("requires -> requir", function() {deepEqual( Stem("requires"), "requir");});
test("requiring -> requir", function() {deepEqual( Stem("requiring"), "requir");});
test("requisite -> requisit", function() {deepEqual( Stem("requisite"), "requisit");});
test("requisites -> requisit", function() {deepEqual( Stem("requisites"), "requisit");});
test("requisition -> requisit", function() {deepEqual( Stem("requisition"), "requisit");});
test("requite -> requit", function() {deepEqual( Stem("requite"), "requit");});
test("reread -> reread", function() {deepEqual( Stem("reread"), "reread");});
test("rescue -> rescu", function() {deepEqual( Stem("rescue"), "rescu");});
test("rescued -> rescu", function() {deepEqual( Stem("rescued"), "rescu");});
test("rescuers -> rescuer", function() {deepEqual( Stem("rescuers"), "rescuer");});
test("rescuing -> rescu", function() {deepEqual( Stem("rescuing"), "rescu");});
test("research -> research", function() {deepEqual( Stem("research"), "research");});
test("researches -> research", function() {deepEqual( Stem("researches"), "research");});
test("resemblance -> resembl", function() {deepEqual( Stem("resemblance"), "resembl");});
test("resemble -> resembl", function() {deepEqual( Stem("resemble"), "resembl");});
test("resembled -> resembl", function() {deepEqual( Stem("resembled"), "resembl");});
test("resembles -> resembl", function() {deepEqual( Stem("resembles"), "resembl");});
test("resembling -> resembl", function() {deepEqual( Stem("resembling"), "resembl");});
test("resent -> resent", function() {deepEqual( Stem("resent"), "resent");});
test("resented -> resent", function() {deepEqual( Stem("resented"), "resent");});
test("resentful -> resent", function() {deepEqual( Stem("resentful"), "resent");});
test("resentfully -> resent", function() {deepEqual( Stem("resentfully"), "resent");});
test("resenting -> resent", function() {deepEqual( Stem("resenting"), "resent");});
test("resentment -> resent", function() {deepEqual( Stem("resentment"), "resent");});
test("resentments -> resent", function() {deepEqual( Stem("resentments"), "resent");});
test("resents -> resent", function() {deepEqual( Stem("resents"), "resent");});
test("reservation -> reserv", function() {deepEqual( Stem("reservation"), "reserv");});
test("reservations -> reserv", function() {deepEqual( Stem("reservations"), "reserv");});
test("reserve -> reserv", function() {deepEqual( Stem("reserve"), "reserv");});
test("reserved -> reserv", function() {deepEqual( Stem("reserved"), "reserv");});
test("reserves -> reserv", function() {deepEqual( Stem("reserves"), "reserv");});
test("reserving -> reserv", function() {deepEqual( Stem("reserving"), "reserv");});
test("reservoir -> reservoir", function() {deepEqual( Stem("reservoir"), "reservoir");});
test("reservoirs -> reservoir", function() {deepEqual( Stem("reservoirs"), "reservoir");});
test("resettles -> resettl", function() {deepEqual( Stem("resettles"), "resettl");});
test("resfless -> resfless", function() {deepEqual( Stem("resfless"), "resfless");});
test("reside -> resid", function() {deepEqual( Stem("reside"), "resid");});
test("resided -> resid", function() {deepEqual( Stem("resided"), "resid");});
test("residence -> resid", function() {deepEqual( Stem("residence"), "resid");});
test("residences -> resid", function() {deepEqual( Stem("residences"), "resid");});
test("resident -> resid", function() {deepEqual( Stem("resident"), "resid");});
test("residents -> resid", function() {deepEqual( Stem("residents"), "resid");});
test("resides -> resid", function() {deepEqual( Stem("resides"), "resid");});
test("residing -> resid", function() {deepEqual( Stem("residing"), "resid");});
test("residue -> residu", function() {deepEqual( Stem("residue"), "residu");});
test("resign -> resign", function() {deepEqual( Stem("resign"), "resign");});
test("resignation -> resign", function() {deepEqual( Stem("resignation"), "resign");});
test("resignations -> resign", function() {deepEqual( Stem("resignations"), "resign");});
test("resigned -> resign", function() {deepEqual( Stem("resigned"), "resign");});
test("resigning -> resign", function() {deepEqual( Stem("resigning"), "resign");});
test("resigns -> resign", function() {deepEqual( Stem("resigns"), "resign");});
test("resin -> resin", function() {deepEqual( Stem("resin"), "resin");});
test("resinous -> resin", function() {deepEqual( Stem("resinous"), "resin");});
test("resist -> resist", function() {deepEqual( Stem("resist"), "resist");});
test("resistance -> resist", function() {deepEqual( Stem("resistance"), "resist");});
test("resisted -> resist", function() {deepEqual( Stem("resisted"), "resist");});
test("resisting -> resist", function() {deepEqual( Stem("resisting"), "resist");});
test("resists -> resist", function() {deepEqual( Stem("resists"), "resist");});
test("resoled -> resol", function() {deepEqual( Stem("resoled"), "resol");});
test("resolute -> resolut", function() {deepEqual( Stem("resolute"), "resolut");});
test("resolutely -> resolut", function() {deepEqual( Stem("resolutely"), "resolut");});
test("resolution -> resolut", function() {deepEqual( Stem("resolution"), "resolut");});
test("resolutions -> resolut", function() {deepEqual( Stem("resolutions"), "resolut");});
test("resolve -> resolv", function() {deepEqual( Stem("resolve"), "resolv");});
test("resolved -> resolv", function() {deepEqual( Stem("resolved"), "resolv");});
test("resolves -> resolv", function() {deepEqual( Stem("resolves"), "resolv");});
test("resolving -> resolv", function() {deepEqual( Stem("resolving"), "resolv");});
test("resonant -> reson", function() {deepEqual( Stem("resonant"), "reson");});
test("resort -> resort", function() {deepEqual( Stem("resort"), "resort");});
test("resorted -> resort", function() {deepEqual( Stem("resorted"), "resort");});
test("resorting -> resort", function() {deepEqual( Stem("resorting"), "resort");});
test("resorts -> resort", function() {deepEqual( Stem("resorts"), "resort");});
test("resound -> resound", function() {deepEqual( Stem("resound"), "resound");});
test("resounded -> resound", function() {deepEqual( Stem("resounded"), "resound");});
test("resounding -> resound", function() {deepEqual( Stem("resounding"), "resound");});
test("resource -> resourc", function() {deepEqual( Stem("resource"), "resourc");});
test("resourcefulness -> resourc", function() {deepEqual( Stem("resourcefulness"), "resourc");});
test("resources -> resourc", function() {deepEqual( Stem("resources"), "resourc");});
test("respect -> respect", function() {deepEqual( Stem("respect"), "respect");});
test("respectabilities -> respect", function() {deepEqual( Stem("respectabilities"), "respect");});
test("respectability -> respect", function() {deepEqual( Stem("respectability"), "respect");});
test("respectable -> respect", function() {deepEqual( Stem("respectable"), "respect");});
test("respectably -> respect", function() {deepEqual( Stem("respectably"), "respect");});
test("respected -> respect", function() {deepEqual( Stem("respected"), "respect");});
test("respectful -> respect", function() {deepEqual( Stem("respectful"), "respect");});
test("respectfully -> respect", function() {deepEqual( Stem("respectfully"), "respect");});
test("respecting -> respect", function() {deepEqual( Stem("respecting"), "respect");});
test("respective -> respect", function() {deepEqual( Stem("respective"), "respect");});
test("respectively -> respect", function() {deepEqual( Stem("respectively"), "respect");});
test("respects -> respect", function() {deepEqual( Stem("respects"), "respect");});
test("respiration -> respir", function() {deepEqual( Stem("respiration"), "respir");});
test("respite -> respit", function() {deepEqual( Stem("respite"), "respit");});
test("resplendent -> resplend", function() {deepEqual( Stem("resplendent"), "resplend");});
test("resplendently -> resplend", function() {deepEqual( Stem("resplendently"), "resplend");});
test("respond -> respond", function() {deepEqual( Stem("respond"), "respond");});
test("responded -> respond", function() {deepEqual( Stem("responded"), "respond");});
test("responding -> respond", function() {deepEqual( Stem("responding"), "respond");});
test("responds -> respond", function() {deepEqual( Stem("responds"), "respond");});
test("response -> respons", function() {deepEqual( Stem("response"), "respons");});
test("responsibilities -> respons", function() {deepEqual( Stem("responsibilities"), "respons");});
test("responsibility -> respons", function() {deepEqual( Stem("responsibility"), "respons");});
test("responsible -> respons", function() {deepEqual( Stem("responsible"), "respons");});
test("responsive -> respons", function() {deepEqual( Stem("responsive"), "respons");});
test("resslich -> resslich", function() {deepEqual( Stem("resslich"), "resslich");});
test("rest -> rest", function() {deepEqual( Stem("rest"), "rest");});
test("restaurant -> restaur", function() {deepEqual( Stem("restaurant"), "restaur");});
test("restaurants -> restaur", function() {deepEqual( Stem("restaurants"), "restaur");});
test("rested -> rest", function() {deepEqual( Stem("rested"), "rest");});
test("restful -> rest", function() {deepEqual( Stem("restful"), "rest");});
test("resting -> rest", function() {deepEqual( Stem("resting"), "rest");});
test("restitution -> restitut", function() {deepEqual( Stem("restitution"), "restitut");});
test("restive -> restiv", function() {deepEqual( Stem("restive"), "restiv");});
test("restless -> restless", function() {deepEqual( Stem("restless"), "restless");});
test("restlessly -> restless", function() {deepEqual( Stem("restlessly"), "restless");});
test("restlessness -> restless", function() {deepEqual( Stem("restlessness"), "restless");});
test("restoration -> restor", function() {deepEqual( Stem("restoration"), "restor");});
test("restorative -> restor", function() {deepEqual( Stem("restorative"), "restor");});
test("restoratives -> restor", function() {deepEqual( Stem("restoratives"), "restor");});
test("restore -> restor", function() {deepEqual( Stem("restore"), "restor");});
test("restored -> restor", function() {deepEqual( Stem("restored"), "restor");});
test("restores -> restor", function() {deepEqual( Stem("restores"), "restor");});
test("restoring -> restor", function() {deepEqual( Stem("restoring"), "restor");});
test("restrain -> restrain", function() {deepEqual( Stem("restrain"), "restrain");});
test("restrained -> restrain", function() {deepEqual( Stem("restrained"), "restrain");});
test("restraining -> restrain", function() {deepEqual( Stem("restraining"), "restrain");});
test("restrains -> restrain", function() {deepEqual( Stem("restrains"), "restrain");});
test("restraint -> restraint", function() {deepEqual( Stem("restraint"), "restraint");});
test("restraints -> restraint", function() {deepEqual( Stem("restraints"), "restraint");});
test("restrictions -> restrict", function() {deepEqual( Stem("restrictions"), "restrict");});
test("rests -> rest", function() {deepEqual( Stem("rests"), "rest");});
test("resuit -> resuit", function() {deepEqual( Stem("resuit"), "resuit");});
test("result -> result", function() {deepEqual( Stem("result"), "result");});
test("resultant -> result", function() {deepEqual( Stem("resultant"), "result");});
test("resulted -> result", function() {deepEqual( Stem("resulted"), "result");});
test("resulting -> result", function() {deepEqual( Stem("resulting"), "result");});
test("results -> result", function() {deepEqual( Stem("results"), "result");});
test("resume -> resum", function() {deepEqual( Stem("resume"), "resum");});
test("resumed -> resum", function() {deepEqual( Stem("resumed"), "resum");});
test("resumes -> resum", function() {deepEqual( Stem("resumes"), "resum");});
test("resuming -> resum", function() {deepEqual( Stem("resuming"), "resum");});
test("resumption -> resumpt", function() {deepEqual( Stem("resumption"), "resumpt");});
test("resurrected -> resurrect", function() {deepEqual( Stem("resurrected"), "resurrect");});
test("resurrection -> resurrect", function() {deepEqual( Stem("resurrection"), "resurrect");});
test("resurrections -> resurrect", function() {deepEqual( Stem("resurrections"), "resurrect");});
test("resuscitated -> resuscit", function() {deepEqual( Stem("resuscitated"), "resuscit");});
test("retail -> retail", function() {deepEqual( Stem("retail"), "retail");});
test("retain -> retain", function() {deepEqual( Stem("retain"), "retain");});
test("retained -> retain", function() {deepEqual( Stem("retained"), "retain");});
test("retainer -> retain", function() {deepEqual( Stem("retainer"), "retain");});
test("retainers -> retain", function() {deepEqual( Stem("retainers"), "retain");});
test("retaining -> retain", function() {deepEqual( Stem("retaining"), "retain");});
test("retains -> retain", function() {deepEqual( Stem("retains"), "retain");});
test("retaliate -> retali", function() {deepEqual( Stem("retaliate"), "retali");});
test("retaliated -> retali", function() {deepEqual( Stem("retaliated"), "retali");});
test("retaliation -> retali", function() {deepEqual( Stem("retaliation"), "retali");});
test("retard -> retard", function() {deepEqual( Stem("retard"), "retard");});
test("retarded -> retard", function() {deepEqual( Stem("retarded"), "retard");});
test("retches -> retch", function() {deepEqual( Stem("retches"), "retch");});
test("retention -> retent", function() {deepEqual( Stem("retention"), "retent");});
test("reticence -> retic", function() {deepEqual( Stem("reticence"), "retic");});
test("reticent -> retic", function() {deepEqual( Stem("reticent"), "retic");});
test("reticles -> reticl", function() {deepEqual( Stem("reticles"), "reticl");});
test("reticule -> reticul", function() {deepEqual( Stem("reticule"), "reticul");});
test("reticules -> reticul", function() {deepEqual( Stem("reticules"), "reticul");});
test("retinue -> retinu", function() {deepEqual( Stem("retinue"), "retinu");});
test("retire -> retir", function() {deepEqual( Stem("retire"), "retir");});
test("retired -> retir", function() {deepEqual( Stem("retired"), "retir");});
test("retirement -> retir", function() {deepEqual( Stem("retirement"), "retir");});
test("retirements -> retir", function() {deepEqual( Stem("retirements"), "retir");});
test("retires -> retir", function() {deepEqual( Stem("retires"), "retir");});
test("retiring -> retir", function() {deepEqual( Stem("retiring"), "retir");});
test("retored -> retor", function() {deepEqual( Stem("retored"), "retor");});
test("retort -> retort", function() {deepEqual( Stem("retort"), "retort");});
test("retorted -> retort", function() {deepEqual( Stem("retorted"), "retort");});
test("retorting -> retort", function() {deepEqual( Stem("retorting"), "retort");});
test("retorts -> retort", function() {deepEqual( Stem("retorts"), "retort");});
test("retouching -> retouch", function() {deepEqual( Stem("retouching"), "retouch");});
test("retrace -> retrac", function() {deepEqual( Stem("retrace"), "retrac");});
test("retraced -> retrac", function() {deepEqual( Stem("retraced"), "retrac");});
test("retraces -> retrac", function() {deepEqual( Stem("retraces"), "retrac");});
test("retract -> retract", function() {deepEqual( Stem("retract"), "retract");});
test("retracted -> retract", function() {deepEqual( Stem("retracted"), "retract");});
test("retraction -> retract", function() {deepEqual( Stem("retraction"), "retract");});
test("retreat -> retreat", function() {deepEqual( Stem("retreat"), "retreat");});
test("retreated -> retreat", function() {deepEqual( Stem("retreated"), "retreat");});
test("retreating -> retreat", function() {deepEqual( Stem("retreating"), "retreat");});
test("retreats -> retreat", function() {deepEqual( Stem("retreats"), "retreat");});
test("retrenchment -> retrench", function() {deepEqual( Stem("retrenchment"), "retrench");});
test("retrenchments -> retrench", function() {deepEqual( Stem("retrenchments"), "retrench");});
test("retribution -> retribut", function() {deepEqual( Stem("retribution"), "retribut");});
test("retributive -> retribut", function() {deepEqual( Stem("retributive"), "retribut");});
test("retrievable -> retriev", function() {deepEqual( Stem("retrievable"), "retriev");});
test("retrieve -> retriev", function() {deepEqual( Stem("retrieve"), "retriev");});
test("retrieved -> retriev", function() {deepEqual( Stem("retrieved"), "retriev");});
test("retrieving -> retriev", function() {deepEqual( Stem("retrieving"), "retriev");});
test("retrograde -> retrograd", function() {deepEqual( Stem("retrograde"), "retrograd");});
test("retrograding -> retrograd", function() {deepEqual( Stem("retrograding"), "retrograd");});
test("retrorsum -> retrorsum", function() {deepEqual( Stem("retrorsum"), "retrorsum");});
test("retrospect -> retrospect", function() {deepEqual( Stem("retrospect"), "retrospect");});
test("retrospective -> retrospect", function() {deepEqual( Stem("retrospective"), "retrospect");});
test("return -> return", function() {deepEqual( Stem("return"), "return");});
test("returned -> return", function() {deepEqual( Stem("returned"), "return");});
test("returning -> return", function() {deepEqual( Stem("returning"), "return");});
test("returns -> return", function() {deepEqual( Stem("returns"), "return");});
test("retzch -> retzch", function() {deepEqual( Stem("retzch"), "retzch");});
test("reunion -> reunion", function() {deepEqual( Stem("reunion"), "reunion");});
test("rev -> rev", function() {deepEqual( Stem("rev"), "rev");});
test("reveal -> reveal", function() {deepEqual( Stem("reveal"), "reveal");});
test("revealed -> reveal", function() {deepEqual( Stem("revealed"), "reveal");});
test("revealing -> reveal", function() {deepEqual( Stem("revealing"), "reveal");});
test("revel -> revel", function() {deepEqual( Stem("revel"), "revel");});
test("revelation -> revel", function() {deepEqual( Stem("revelation"), "revel");});
test("revelations -> revel", function() {deepEqual( Stem("revelations"), "revel");});
test("revelled -> revel", function() {deepEqual( Stem("revelled"), "revel");});
test("revellers -> revel", function() {deepEqual( Stem("revellers"), "revel");});
test("revelling -> revel", function() {deepEqual( Stem("revelling"), "revel");});
test("revelry -> revelri", function() {deepEqual( Stem("revelry"), "revelri");});
test("revels -> revel", function() {deepEqual( Stem("revels"), "revel");});
test("revenge -> reveng", function() {deepEqual( Stem("revenge"), "reveng");});
test("revenged -> reveng", function() {deepEqual( Stem("revenged"), "reveng");});
test("revengeful -> reveng", function() {deepEqual( Stem("revengeful"), "reveng");});
test("revenges -> reveng", function() {deepEqual( Stem("revenges"), "reveng");});
test("revenging -> reveng", function() {deepEqual( Stem("revenging"), "reveng");});
test("revenue -> revenu", function() {deepEqual( Stem("revenue"), "revenu");});
test("reverberate -> reverber", function() {deepEqual( Stem("reverberate"), "reverber");});
test("reverberated -> reverber", function() {deepEqual( Stem("reverberated"), "reverber");});
test("reverberates -> reverber", function() {deepEqual( Stem("reverberates"), "reverber");});
test("reverberating -> reverber", function() {deepEqual( Stem("reverberating"), "reverber");});
test("reverberation -> reverber", function() {deepEqual( Stem("reverberation"), "reverber");});
test("revered -> rever", function() {deepEqual( Stem("revered"), "rever");});
test("reverence -> rever", function() {deepEqual( Stem("reverence"), "rever");});
test("reverenced -> reverenc", function() {deepEqual( Stem("reverenced"), "reverenc");});
test("reverend -> reverend", function() {deepEqual( Stem("reverend"), "reverend");});
test("reverends -> reverend", function() {deepEqual( Stem("reverends"), "reverend");});
test("reverent -> rever", function() {deepEqual( Stem("reverent"), "rever");});
test("reverential -> reverenti", function() {deepEqual( Stem("reverential"), "reverenti");});
test("reverentially -> reverenti", function() {deepEqual( Stem("reverentially"), "reverenti");});
test("reverently -> rever", function() {deepEqual( Stem("reverently"), "rever");});
test("reverie -> reveri", function() {deepEqual( Stem("reverie"), "reveri");});
test("reversal -> revers", function() {deepEqual( Stem("reversal"), "revers");});
test("reverse -> revers", function() {deepEqual( Stem("reverse"), "revers");});
test("reversed -> revers", function() {deepEqual( Stem("reversed"), "revers");});
test("reverses -> revers", function() {deepEqual( Stem("reverses"), "revers");});
test("reversion -> revers", function() {deepEqual( Stem("reversion"), "revers");});
test("revert -> revert", function() {deepEqual( Stem("revert"), "revert");});
test("reverted -> revert", function() {deepEqual( Stem("reverted"), "revert");});
test("reverting -> revert", function() {deepEqual( Stem("reverting"), "revert");});
test("reverts -> revert", function() {deepEqual( Stem("reverts"), "revert");});
test("reviendra -> reviendra", function() {deepEqual( Stem("reviendra"), "reviendra");});
test("review -> review", function() {deepEqual( Stem("review"), "review");});
test("reviewal -> review", function() {deepEqual( Stem("reviewal"), "review");});
test("reviewing -> review", function() {deepEqual( Stem("reviewing"), "review");});
test("reviews -> review", function() {deepEqual( Stem("reviews"), "review");});
test("revile -> revil", function() {deepEqual( Stem("revile"), "revil");});
test("reviled -> revil", function() {deepEqual( Stem("reviled"), "revil");});
test("reviling -> revil", function() {deepEqual( Stem("reviling"), "revil");});
test("revilings -> revil", function() {deepEqual( Stem("revilings"), "revil");});
test("revise -> revis", function() {deepEqual( Stem("revise"), "revis");});
test("revision -> revis", function() {deepEqual( Stem("revision"), "revis");});
test("revisit -> revisit", function() {deepEqual( Stem("revisit"), "revisit");});
test("revisited -> revisit", function() {deepEqual( Stem("revisited"), "revisit");});
test("revival -> reviv", function() {deepEqual( Stem("revival"), "reviv");});
test("revive -> reviv", function() {deepEqual( Stem("revive"), "reviv");});
test("revived -> reviv", function() {deepEqual( Stem("revived"), "reviv");});
test("reviving -> reviv", function() {deepEqual( Stem("reviving"), "reviv");});
test("revivingly -> reviv", function() {deepEqual( Stem("revivingly"), "reviv");});
test("revoke -> revok", function() {deepEqual( Stem("revoke"), "revok");});
test("revoked -> revok", function() {deepEqual( Stem("revoked"), "revok");});
test("revolt -> revolt", function() {deepEqual( Stem("revolt"), "revolt");});
test("revolted -> revolt", function() {deepEqual( Stem("revolted"), "revolt");});
test("revolting -> revolt", function() {deepEqual( Stem("revolting"), "revolt");});
test("revolts -> revolt", function() {deepEqual( Stem("revolts"), "revolt");});
test("revolution -> revolut", function() {deepEqual( Stem("revolution"), "revolut");});
test("revolutionary -> revolutionari", function() {deepEqual( Stem("revolutionary"), "revolutionari");});
test("revolutionist -> revolutionist", function() {deepEqual( Stem("revolutionist"), "revolutionist");});
test("revolutionized -> revolution", function() {deepEqual( Stem("revolutionized"), "revolution");});
test("revolutions -> revolut", function() {deepEqual( Stem("revolutions"), "revolut");});
test("revolve -> revolv", function() {deepEqual( Stem("revolve"), "revolv");});
test("revolved -> revolv", function() {deepEqual( Stem("revolved"), "revolv");});
test("revolver -> revolv", function() {deepEqual( Stem("revolver"), "revolv");});
test("revolves -> revolv", function() {deepEqual( Stem("revolves"), "revolv");});
test("revolving -> revolv", function() {deepEqual( Stem("revolving"), "revolv");});
test("revulsion -> revuls", function() {deepEqual( Stem("revulsion"), "revuls");});
test("reward -> reward", function() {deepEqual( Stem("reward"), "reward");});
test("rewarded -> reward", function() {deepEqual( Stem("rewarded"), "reward");});
test("rewarding -> reward", function() {deepEqual( Stem("rewarding"), "reward");});
test("rewards -> reward", function() {deepEqual( Stem("rewards"), "reward");});
test("rewashed -> rewash", function() {deepEqual( Stem("rewashed"), "rewash");});
test("rex -> rex", function() {deepEqual( Stem("rex"), "rex");});
test("rexes -> rex", function() {deepEqual( Stem("rexes"), "rex");});
test("rhapsody -> rhapsodi", function() {deepEqual( Stem("rhapsody"), "rhapsodi");});
test("rhea -> rhea", function() {deepEqual( Stem("rhea"), "rhea");});
test("rheims -> rheim", function() {deepEqual( Stem("rheims"), "rheim");});
test("rhetoric -> rhetor", function() {deepEqual( Stem("rhetoric"), "rhetor");});
test("rheumatic -> rheumat", function() {deepEqual( Stem("rheumatic"), "rheumat");});
test("rheumatics -> rheumat", function() {deepEqual( Stem("rheumatics"), "rheumat");});
test("rheumatism -> rheumat", function() {deepEqual( Stem("rheumatism"), "rheumat");});
test("rhine -> rhine", function() {deepEqual( Stem("rhine"), "rhine");});
test("rhinoceros -> rhinocero", function() {deepEqual( Stem("rhinoceros"), "rhinocero");});
test("rhinoceroses -> rhinoceros", function() {deepEqual( Stem("rhinoceroses"), "rhinoceros");});
test("rhododendron -> rhododendron", function() {deepEqual( Stem("rhododendron"), "rhododendron");});
test("rhododendrons -> rhododendron", function() {deepEqual( Stem("rhododendrons"), "rhododendron");});
test("rhubarb -> rhubarb", function() {deepEqual( Stem("rhubarb"), "rhubarb");});
test("rhyme -> rhyme", function() {deepEqual( Stem("rhyme"), "rhyme");});
test("rhymes -> rhyme", function() {deepEqual( Stem("rhymes"), "rhyme");});
test("rhynchops -> rhynchop", function() {deepEqual( Stem("rhynchops"), "rhynchop");});
test("rhyncophora -> rhyncophora", function() {deepEqual( Stem("rhyncophora"), "rhyncophora");});
test("rhythmically -> rhythmic", function() {deepEqual( Stem("rhythmically"), "rhythmic");});
test("ri -> ri", function() {deepEqual( Stem("ri"), "ri");});
test("rib -> rib", function() {deepEqual( Stem("rib"), "rib");});
test("ribbed -> rib", function() {deepEqual( Stem("ribbed"), "rib");});
test("ribbentrop -> ribbentrop", function() {deepEqual( Stem("ribbentrop"), "ribbentrop");});
test("ribbon -> ribbon", function() {deepEqual( Stem("ribbon"), "ribbon");});
test("ribbons -> ribbon", function() {deepEqual( Stem("ribbons"), "ribbon");});
test("ribeira -> ribeira", function() {deepEqual( Stem("ribeira"), "ribeira");});
test("ribs -> rib", function() {deepEqual( Stem("ribs"), "rib");});
test("rice -> rice", function() {deepEqual( Stem("rice"), "rice");});
test("rich -> rich", function() {deepEqual( Stem("rich"), "rich");});
test("richard -> richard", function() {deepEqual( Stem("richard"), "richard");});
test("richardson -> richardson", function() {deepEqual( Stem("richardson"), "richardson");});
test("richer -> richer", function() {deepEqual( Stem("richer"), "richer");});
test("riches -> rich", function() {deepEqual( Stem("riches"), "rich");});
test("richest -> richest", function() {deepEqual( Stem("richest"), "richest");});
test("richly -> rich", function() {deepEqual( Stem("richly"), "rich");});
test("richmond -> richmond", function() {deepEqual( Stem("richmond"), "richmond");});
test("richness -> rich", function() {deepEqual( Stem("richness"), "rich");});
test("rick -> rick", function() {deepEqual( Stem("rick"), "rick");});
test("rickety -> ricketi", function() {deepEqual( Stem("rickety"), "ricketi");});
test("rickworth -> rickworth", function() {deepEqual( Stem("rickworth"), "rickworth");});
test("rid -> rid", function() {deepEqual( Stem("rid"), "rid");});
test("riddance -> riddanc", function() {deepEqual( Stem("riddance"), "riddanc");});
test("ridden -> ridden", function() {deepEqual( Stem("ridden"), "ridden");});
test("ridding -> rid", function() {deepEqual( Stem("ridding"), "rid");});
test("riddle -> riddl", function() {deepEqual( Stem("riddle"), "riddl");});
test("riddles -> riddl", function() {deepEqual( Stem("riddles"), "riddl");});
test("ride -> ride", function() {deepEqual( Stem("ride"), "ride");});
test("ridendus -> ridendus", function() {deepEqual( Stem("ridendus"), "ridendus");});
test("rider -> rider", function() {deepEqual( Stem("rider"), "rider");});
test("riders -> rider", function() {deepEqual( Stem("riders"), "rider");});
test("rides -> ride", function() {deepEqual( Stem("rides"), "ride");});
test("ridg -> ridg", function() {deepEqual( Stem("ridg"), "ridg");});
test("ridge -> ridg", function() {deepEqual( Stem("ridge"), "ridg");});
test("ridges -> ridg", function() {deepEqual( Stem("ridges"), "ridg");});
test("ridicule -> ridicul", function() {deepEqual( Stem("ridicule"), "ridicul");});
test("ridiculed -> ridicul", function() {deepEqual( Stem("ridiculed"), "ridicul");});
test("ridiculous -> ridicul", function() {deepEqual( Stem("ridiculous"), "ridicul");});
test("ridiculously -> ridicul", function() {deepEqual( Stem("ridiculously"), "ridicul");});
test("riding -> ride", function() {deepEqual( Stem("riding"), "ride");});
test("ridinghood -> ridinghood", function() {deepEqual( Stem("ridinghood"), "ridinghood");});
test("rife -> rife", function() {deepEqual( Stem("rife"), "rife");});
test("riff -> riff", function() {deepEqual( Stem("riff"), "riff");});
test("rifle -> rifl", function() {deepEqual( Stem("rifle"), "rifl");});
test("rifles -> rifl", function() {deepEqual( Stem("rifles"), "rifl");});
test("rifling -> rifl", function() {deepEqual( Stem("rifling"), "rifl");});
test("rig -> rig", function() {deepEqual( Stem("rig"), "rig");});
test("rigamarole -> rigamarol", function() {deepEqual( Stem("rigamarole"), "rigamarol");});
test("riggers -> rigger", function() {deepEqual( Stem("riggers"), "rigger");});
test("rigging -> rig", function() {deepEqual( Stem("rigging"), "rig");});
test("right -> right", function() {deepEqual( Stem("right"), "right");});
test("righted -> right", function() {deepEqual( Stem("righted"), "right");});
test("righteous -> righteous", function() {deepEqual( Stem("righteous"), "righteous");});
test("righteousness -> righteous", function() {deepEqual( Stem("righteousness"), "righteous");});
test("rightly -> right", function() {deepEqual( Stem("rightly"), "right");});
test("rights -> right", function() {deepEqual( Stem("rights"), "right");});
test("rigid -> rigid", function() {deepEqual( Stem("rigid"), "rigid");});
test("rigidity -> rigid", function() {deepEqual( Stem("rigidity"), "rigid");});
test("rigidly -> rigid", function() {deepEqual( Stem("rigidly"), "rigid");});
test("rigorous -> rigor", function() {deepEqual( Stem("rigorous"), "rigor");});
test("rigour -> rigour", function() {deepEqual( Stem("rigour"), "rigour");});
test("rigueur -> rigueur", function() {deepEqual( Stem("rigueur"), "rigueur");});
test("rill -> rill", function() {deepEqual( Stem("rill"), "rill");});
test("rim -> rim", function() {deepEqual( Stem("rim"), "rim");});
test("rims -> rim", function() {deepEqual( Stem("rims"), "rim");});
test("rimsky -> rimski", function() {deepEqual( Stem("rimsky"), "rimski");});
test("rincon -> rincon", function() {deepEqual( Stem("rincon"), "rincon");});
test("ring -> ring", function() {deepEqual( Stem("ring"), "ring");});
test("ringed -> ring", function() {deepEqual( Stem("ringed"), "ring");});
test("ringer -> ringer", function() {deepEqual( Stem("ringer"), "ringer");});
test("ringing -> ring", function() {deepEqual( Stem("ringing"), "ring");});
test("ringleaders -> ringlead", function() {deepEqual( Stem("ringleaders"), "ringlead");});
test("ringlets -> ringlet", function() {deepEqual( Stem("ringlets"), "ringlet");});
test("rings -> ring", function() {deepEqual( Stem("rings"), "ring");});
test("rinse -> rins", function() {deepEqual( Stem("rinse"), "rins");});
test("rinsing -> rins", function() {deepEqual( Stem("rinsing"), "rins");});
test("rio -> rio", function() {deepEqual( Stem("rio"), "rio");});
test("rios -> rio", function() {deepEqual( Stem("rios"), "rio");});
test("riot -> riot", function() {deepEqual( Stem("riot"), "riot");});
test("riotous -> riotous", function() {deepEqual( Stem("riotous"), "riotous");});
test("rip -> rip", function() {deepEqual( Stem("rip"), "rip");});
test("ripe -> ripe", function() {deepEqual( Stem("ripe"), "ripe");});
test("ripen -> ripen", function() {deepEqual( Stem("ripen"), "ripen");});
test("ripened -> ripen", function() {deepEqual( Stem("ripened"), "ripen");});
test("ripening -> ripen", function() {deepEqual( Stem("ripening"), "ripen");});
test("ripens -> ripen", function() {deepEqual( Stem("ripens"), "ripen");});
test("ripped -> rip", function() {deepEqual( Stem("ripped"), "rip");});
test("ripple -> rippl", function() {deepEqual( Stem("ripple"), "rippl");});
test("rippled -> rippl", function() {deepEqual( Stem("rippled"), "rippl");});
test("ripples -> rippl", function() {deepEqual( Stem("ripples"), "rippl");});
test("rippling -> rippl", function() {deepEqual( Stem("rippling"), "rippl");});
test("rise -> rise", function() {deepEqual( Stem("rise"), "rise");});
test("risen -> risen", function() {deepEqual( Stem("risen"), "risen");});
test("risers -> riser", function() {deepEqual( Stem("risers"), "riser");});
test("rises -> rise", function() {deepEqual( Stem("rises"), "rise");});
test("risible -> risibl", function() {deepEqual( Stem("risible"), "risibl");});
test("risin -> risin", function() {deepEqual( Stem("risin"), "risin");});
test("rising -> rise", function() {deepEqual( Stem("rising"), "rise");});
test("risingham -> risingham", function() {deepEqual( Stem("risingham"), "risingham");});
test("risk -> risk", function() {deepEqual( Stem("risk"), "risk");});
test("risked -> risk", function() {deepEqual( Stem("risked"), "risk");});
test("risking -> risk", function() {deepEqual( Stem("risking"), "risk");});
test("risks -> risk", function() {deepEqual( Stem("risks"), "risk");});
test("risky -> riski", function() {deepEqual( Stem("risky"), "riski");});
test("rite -> rite", function() {deepEqual( Stem("rite"), "rite");});
test("rites -> rite", function() {deepEqual( Stem("rites"), "rite");});
test("rival -> rival", function() {deepEqual( Stem("rival"), "rival");});
test("rivalled -> rival", function() {deepEqual( Stem("rivalled"), "rival");});
test("rivalry -> rivalri", function() {deepEqual( Stem("rivalry"), "rivalri");});
test("rivals -> rival", function() {deepEqual( Stem("rivals"), "rival");});
test("rivalship -> rivalship", function() {deepEqual( Stem("rivalship"), "rivalship");});
test("rive -> rive", function() {deepEqual( Stem("rive"), "rive");});
test("river -> river", function() {deepEqual( Stem("river"), "river");});
test("rivers -> river", function() {deepEqual( Stem("rivers"), "river");});
test("rivet -> rivet", function() {deepEqual( Stem("rivet"), "rivet");});
test("riveted -> rivet", function() {deepEqual( Stem("riveted"), "rivet");});
test("riveting -> rivet", function() {deepEqual( Stem("riveting"), "rivet");});
test("rivetted -> rivet", function() {deepEqual( Stem("rivetted"), "rivet");});
test("riviere -> rivier", function() {deepEqual( Stem("riviere"), "rivier");});
test("rivoli -> rivoli", function() {deepEqual( Stem("rivoli"), "rivoli");});
test("rivulet -> rivulet", function() {deepEqual( Stem("rivulet"), "rivulet");});
test("rivulets -> rivulet", function() {deepEqual( Stem("rivulets"), "rivulet");});
test("ro -> ro", function() {deepEqual( Stem("ro"), "ro");});
test("road -> road", function() {deepEqual( Stem("road"), "road");});
test("roads -> road", function() {deepEqual( Stem("roads"), "road");});
test("roadside -> roadsid", function() {deepEqual( Stem("roadside"), "roadsid");});
test("roam -> roam", function() {deepEqual( Stem("roam"), "roam");});
test("roamed -> roam", function() {deepEqual( Stem("roamed"), "roam");});
test("roaming -> roam", function() {deepEqual( Stem("roaming"), "roam");});
test("roams -> roam", function() {deepEqual( Stem("roams"), "roam");});
test("roan -> roan", function() {deepEqual( Stem("roan"), "roan");});
test("roar -> roar", function() {deepEqual( Stem("roar"), "roar");});
test("roared -> roar", function() {deepEqual( Stem("roared"), "roar");});
test("roarer -> roarer", function() {deepEqual( Stem("roarer"), "roarer");});
test("roaring -> roar", function() {deepEqual( Stem("roaring"), "roar");});
test("roast -> roast", function() {deepEqual( Stem("roast"), "roast");});
test("roasted -> roast", function() {deepEqual( Stem("roasted"), "roast");});
test("roasting -> roast", function() {deepEqual( Stem("roasting"), "roast");});
test("rob -> rob", function() {deepEqual( Stem("rob"), "rob");});
test("robbed -> rob", function() {deepEqual( Stem("robbed"), "rob");});
test("robber -> robber", function() {deepEqual( Stem("robber"), "robber");});
test("robberies -> robberi", function() {deepEqual( Stem("robberies"), "robberi");});
test("robbers -> robber", function() {deepEqual( Stem("robbers"), "robber");});
test("robbery -> robberi", function() {deepEqual( Stem("robbery"), "robberi");});
test("robbing -> rob", function() {deepEqual( Stem("robbing"), "rob");});
test("robe -> robe", function() {deepEqual( Stem("robe"), "robe");});
test("robed -> robe", function() {deepEqual( Stem("robed"), "robe");});
test("robert -> robert", function() {deepEqual( Stem("robert"), "robert");});
test("roberto -> roberto", function() {deepEqual( Stem("roberto"), "roberto");});
test("robes -> robe", function() {deepEqual( Stem("robes"), "robe");});
test("robin -> robin", function() {deepEqual( Stem("robin"), "robin");});
test("robing -> robe", function() {deepEqual( Stem("robing"), "robe");});
test("robinson -> robinson", function() {deepEqual( Stem("robinson"), "robinson");});
test("robs -> rob", function() {deepEqual( Stem("robs"), "rob");});
test("robust -> robust", function() {deepEqual( Stem("robust"), "robust");});
test("robustly -> robust", function() {deepEqual( Stem("robustly"), "robust");});
test("robustus -> robustus", function() {deepEqual( Stem("robustus"), "robustus");});
test("roby -> robi", function() {deepEqual( Stem("roby"), "robi");});
test("robys -> robi", function() {deepEqual( Stem("robys"), "robi");});
test("rochester -> rochest", function() {deepEqual( Stem("rochester"), "rochest");});
test("rock -> rock", function() {deepEqual( Stem("rock"), "rock");});
test("rocked -> rock", function() {deepEqual( Stem("rocked"), "rock");});
test("rocket -> rocket", function() {deepEqual( Stem("rocket"), "rocket");});
test("rockets -> rocket", function() {deepEqual( Stem("rockets"), "rocket");});
test("rocking -> rock", function() {deepEqual( Stem("rocking"), "rock");});
test("rocks -> rock", function() {deepEqual( Stem("rocks"), "rock");});
test("rocky -> rocki", function() {deepEqual( Stem("rocky"), "rocki");});
test("rod -> rod", function() {deepEqual( Stem("rod"), "rod");});
test("rode -> rode", function() {deepEqual( Stem("rode"), "rode");});
test("rodent -> rodent", function() {deepEqual( Stem("rodent"), "rodent");});
test("rodentia -> rodentia", function() {deepEqual( Stem("rodentia"), "rodentia");});
test("rodents -> rodent", function() {deepEqual( Stem("rodents"), "rodent");});
test("rodeo -> rodeo", function() {deepEqual( Stem("rodeo"), "rodeo");});
test("rodion -> rodion", function() {deepEqual( Stem("rodion"), "rodion");});
test("rodionovitch -> rodionovitch", function() {deepEqual( Stem("rodionovitch"), "rodionovitch");});
test("rods -> rod", function() {deepEqual( Stem("rods"), "rod");});
test("rodya -> rodya", function() {deepEqual( Stem("rodya"), "rodya");});
test("roe -> roe", function() {deepEqual( Stem("roe"), "roe");});
test("roger -> roger", function() {deepEqual( Stem("roger"), "roger");});
test("rogers -> roger", function() {deepEqual( Stem("rogers"), "roger");});
test("rogue -> rogu", function() {deepEqual( Stem("rogue"), "rogu");});
test("roguery -> rogueri", function() {deepEqual( Stem("roguery"), "rogueri");});
test("rogues -> rogu", function() {deepEqual( Stem("rogues"), "rogu");});
test("roi -> roi", function() {deepEqual( Stem("roi"), "roi");});
test("rokeby -> rokebi", function() {deepEqual( Stem("rokeby"), "rokebi");});
test("role -> role", function() {deepEqual( Stem("role"), "role");});
test("roles -> role", function() {deepEqual( Stem("roles"), "role");});
test("roll -> roll", function() {deepEqual( Stem("roll"), "roll");});
test("rolle -> roll", function() {deepEqual( Stem("rolle"), "roll");});
test("rolled -> roll", function() {deepEqual( Stem("rolled"), "roll");});
test("roller -> roller", function() {deepEqual( Stem("roller"), "roller");});
test("rollicking -> rollick", function() {deepEqual( Stem("rollicking"), "rollick");});
test("rolling -> roll", function() {deepEqual( Stem("rolling"), "roll");});
test("rollings -> roll", function() {deepEqual( Stem("rollings"), "roll");});
test("rolls -> roll", function() {deepEqual( Stem("rolls"), "roll");});
test("rolor -> rolor", function() {deepEqual( Stem("rolor"), "rolor");});
test("roman -> roman", function() {deepEqual( Stem("roman"), "roman");});
test("romance -> romanc", function() {deepEqual( Stem("romance"), "romanc");});
test("romancing -> romanc", function() {deepEqual( Stem("romancing"), "romanc");});
test("romanovitch -> romanovitch", function() {deepEqual( Stem("romanovitch"), "romanovitch");});
test("romanovna -> romanovna", function() {deepEqual( Stem("romanovna"), "romanovna");});
test("romans -> roman", function() {deepEqual( Stem("romans"), "roman");});
test("romantic -> romant", function() {deepEqual( Stem("romantic"), "romant");});
test("romantically -> romant", function() {deepEqual( Stem("romantically"), "romant");});
test("rome -> rome", function() {deepEqual( Stem("rome"), "rome");});
test("romeo -> romeo", function() {deepEqual( Stem("romeo"), "romeo");});
test("romish -> romish", function() {deepEqual( Stem("romish"), "romish");});
test("romp -> romp", function() {deepEqual( Stem("romp"), "romp");});
test("romping -> romp", function() {deepEqual( Stem("romping"), "romp");});
test("roof -> roof", function() {deepEqual( Stem("roof"), "roof");});
test("roofed -> roof", function() {deepEqual( Stem("roofed"), "roof");});
test("roofs -> roof", function() {deepEqual( Stem("roofs"), "roof");});
test("rooge -> roog", function() {deepEqual( Stem("rooge"), "roog");});
test("rook -> rook", function() {deepEqual( Stem("rook"), "rook");});
test("rookery -> rookeri", function() {deepEqual( Stem("rookery"), "rookeri");});
test("rookh -> rookh", function() {deepEqual( Stem("rookh"), "rookh");});
test("rooks -> rook", function() {deepEqual( Stem("rooks"), "rook");});
test("room -> room", function() {deepEqual( Stem("room"), "room");});
test("roomed -> room", function() {deepEqual( Stem("roomed"), "room");});
test("roomer -> roomer", function() {deepEqual( Stem("roomer"), "roomer");});
test("rooms -> room", function() {deepEqual( Stem("rooms"), "room");});
test("roomy -> roomi", function() {deepEqual( Stem("roomy"), "roomi");});
test("roon -> roon", function() {deepEqual( Stem("roon"), "roon");});
test("roonaway -> roonaway", function() {deepEqual( Stem("roonaway"), "roonaway");});
test("roosher -> roosher", function() {deepEqual( Stem("roosher"), "roosher");});
test("roost -> roost", function() {deepEqual( Stem("roost"), "roost");});
test("roosting -> roost", function() {deepEqual( Stem("roosting"), "roost");});
test("root -> root", function() {deepEqual( Stem("root"), "root");});
test("rooted -> root", function() {deepEqual( Stem("rooted"), "root");});
test("rooteth -> rooteth", function() {deepEqual( Stem("rooteth"), "rooteth");});
test("roots -> root", function() {deepEqual( Stem("roots"), "root");});
test("rope -> rope", function() {deepEqual( Stem("rope"), "rope");});
test("ropemakers -> ropemak", function() {deepEqual( Stem("ropemakers"), "ropemak");});
test("ropes -> rope", function() {deepEqual( Stem("ropes"), "rope");});
test("rosa -> rosa", function() {deepEqual( Stem("rosa"), "rosa");});
test("rosary -> rosari", function() {deepEqual( Stem("rosary"), "rosari");});
test("rosas -> rosa", function() {deepEqual( Stem("rosas"), "rosa");});
test("rose -> rose", function() {deepEqual( Stem("rose"), "rose");});
test("roseate -> roseat", function() {deepEqual( Stem("roseate"), "roseat");});
test("rosebud -> rosebud", function() {deepEqual( Stem("rosebud"), "rosebud");});
test("roses -> rose", function() {deepEqual( Stem("roses"), "rose");});
test("rosettes -> rosett", function() {deepEqual( Stem("rosettes"), "rosett");});
test("rosewood -> rosewood", function() {deepEqual( Stem("rosewood"), "rosewood");});
test("rosina -> rosina", function() {deepEqual( Stem("rosina"), "rosina");});
test("rosinas -> rosina", function() {deepEqual( Stem("rosinas"), "rosina");});
test("ross -> ross", function() {deepEqual( Stem("ross"), "ross");});
test("rosy -> rosi", function() {deepEqual( Stem("rosy"), "rosi");});
test("rot -> rot", function() {deepEqual( Stem("rot"), "rot");});
test("rotation -> rotat", function() {deepEqual( Stem("rotation"), "rotat");});
test("rotatory -> rotatori", function() {deepEqual( Stem("rotatory"), "rotatori");});
test("rote -> rote", function() {deepEqual( Stem("rote"), "rote");});
test("rotted -> rot", function() {deepEqual( Stem("rotted"), "rot");});
test("rotten -> rotten", function() {deepEqual( Stem("rotten"), "rotten");});
test("rottenness -> rotten", function() {deepEqual( Stem("rottenness"), "rotten");});
test("rotting -> rot", function() {deepEqual( Stem("rotting"), "rot");});
test("rouble -> roubl", function() {deepEqual( Stem("rouble"), "roubl");});
test("roubles -> roubl", function() {deepEqual( Stem("roubles"), "roubl");});
test("roue -> roue", function() {deepEqual( Stem("roue"), "roue");});
test("rouge -> roug", function() {deepEqual( Stem("rouge"), "roug");});
test("rouged -> roug", function() {deepEqual( Stem("rouged"), "roug");});
test("rough -> rough", function() {deepEqual( Stem("rough"), "rough");});
test("roughening -> roughen", function() {deepEqual( Stem("roughening"), "roughen");});
test("rougher -> rougher", function() {deepEqual( Stem("rougher"), "rougher");});
test("roughest -> roughest", function() {deepEqual( Stem("roughest"), "roughest");});
test("roughing -> rough", function() {deepEqual( Stem("roughing"), "rough");});
test("roughly -> rough", function() {deepEqual( Stem("roughly"), "rough");});
test("roughness -> rough", function() {deepEqual( Stem("roughness"), "rough");});
test("roughs -> rough", function() {deepEqual( Stem("roughs"), "rough");});
test("roulette -> roulett", function() {deepEqual( Stem("roulette"), "roulett");});
test("rounceweil -> rounceweil", function() {deepEqual( Stem("rounceweil"), "rounceweil");});
test("rouncewell -> rouncewel", function() {deepEqual( Stem("rouncewell"), "rouncewel");});
test("rouncewells -> rouncewel", function() {deepEqual( Stem("rouncewells"), "rouncewel");});
test("round -> round", function() {deepEqual( Stem("round"), "round");});
test("roundabout -> roundabout", function() {deepEqual( Stem("roundabout"), "roundabout");});
test("rounde -> round", function() {deepEqual( Stem("rounde"), "round");});
test("rounded -> round", function() {deepEqual( Stem("rounded"), "round");});
test("rounder -> rounder", function() {deepEqual( Stem("rounder"), "rounder");});
test("roundest -> roundest", function() {deepEqual( Stem("roundest"), "roundest");});
test("rounding -> round", function() {deepEqual( Stem("rounding"), "round");});
test("roundly -> round", function() {deepEqual( Stem("roundly"), "round");});
test("roundness -> round", function() {deepEqual( Stem("roundness"), "round");});
test("rounds -> round", function() {deepEqual( Stem("rounds"), "round");});
test("rouse -> rous", function() {deepEqual( Stem("rouse"), "rous");});
test("roused -> rous", function() {deepEqual( Stem("roused"), "rous");});
test("rousing -> rous", function() {deepEqual( Stem("rousing"), "rous");});
test("rousseau -> rousseau", function() {deepEqual( Stem("rousseau"), "rousseau");});
test("rout -> rout", function() {deepEqual( Stem("rout"), "rout");});
test("route -> rout", function() {deepEqual( Stem("route"), "rout");});
test("routed -> rout", function() {deepEqual( Stem("routed"), "rout");});
test("routes -> rout", function() {deepEqual( Stem("routes"), "rout");});
test("routine -> routin", function() {deepEqual( Stem("routine"), "routin");});
test("rover -> rover", function() {deepEqual( Stem("rover"), "rover");});
test("roving -> rove", function() {deepEqual( Stem("roving"), "rove");});
test("row -> row", function() {deepEqual( Stem("row"), "row");});
test("rowed -> row", function() {deepEqual( Stem("rowed"), "row");});
test("rowel -> rowel", function() {deepEqual( Stem("rowel"), "rowel");});
test("rowing -> row", function() {deepEqual( Stem("rowing"), "row");});
test("rowland -> rowland", function() {deepEqual( Stem("rowland"), "rowland");});
test("rowling -> rowl", function() {deepEqual( Stem("rowling"), "rowl");});
test("rows -> row", function() {deepEqual( Stem("rows"), "row");});
test("roy -> roy", function() {deepEqual( Stem("roy"), "roy");});
test("royal -> royal", function() {deepEqual( Stem("royal"), "royal");});
test("royalists -> royalist", function() {deepEqual( Stem("royalists"), "royalist");});
test("royalty -> royalti", function() {deepEqual( Stem("royalty"), "royalti");});
test("roystering -> royster", function() {deepEqual( Stem("roystering"), "royster");});
test("royston -> royston", function() {deepEqual( Stem("royston"), "royston");});
test("rozario -> rozario", function() {deepEqual( Stem("rozario"), "rozario");});
test("rt -> rt", function() {deepEqual( Stem("rt"), "rt");});
test("ruat -> ruat", function() {deepEqual( Stem("ruat"), "ruat");});
test("rub -> rub", function() {deepEqual( Stem("rub"), "rub");});
test("rubbed -> rub", function() {deepEqual( Stem("rubbed"), "rub");});
test("rubber -> rubber", function() {deepEqual( Stem("rubber"), "rubber");});
test("rubbers -> rubber", function() {deepEqual( Stem("rubbers"), "rubber");});
test("rubbing -> rub", function() {deepEqual( Stem("rubbing"), "rub");});
test("rubbish -> rubbish", function() {deepEqual( Stem("rubbish"), "rubbish");});
test("rubbishing -> rubbish", function() {deepEqual( Stem("rubbishing"), "rubbish");});
test("rubbishly -> rubbish", function() {deepEqual( Stem("rubbishly"), "rubbish");});
test("rubecula -> rubecula", function() {deepEqual( Stem("rubecula"), "rubecula");});
test("rubicund -> rubicund", function() {deepEqual( Stem("rubicund"), "rubicund");});
test("rubies -> rubi", function() {deepEqual( Stem("rubies"), "rubi");});
test("rubinstein -> rubinstein", function() {deepEqual( Stem("rubinstein"), "rubinstein");});
test("rubrum -> rubrum", function() {deepEqual( Stem("rubrum"), "rubrum");});
test("rubs -> rub", function() {deepEqual( Stem("rubs"), "rub");});
test("ruby -> rubi", function() {deepEqual( Stem("ruby"), "rubi");});
test("ruck -> ruck", function() {deepEqual( Stem("ruck"), "ruck");});
test("ruddier -> ruddier", function() {deepEqual( Stem("ruddier"), "ruddier");});
test("ruddle -> ruddl", function() {deepEqual( Stem("ruddle"), "ruddl");});
test("ruddy -> ruddi", function() {deepEqual( Stem("ruddy"), "ruddi");});
test("rude -> rude", function() {deepEqual( Stem("rude"), "rude");});
test("rudely -> rude", function() {deepEqual( Stem("rudely"), "rude");});
test("rudeness -> rude", function() {deepEqual( Stem("rudeness"), "rude");});
test("ruder -> ruder", function() {deepEqual( Stem("ruder"), "ruder");});
test("rudest -> rudest", function() {deepEqual( Stem("rudest"), "rudest");});
test("rudimentary -> rudimentari", function() {deepEqual( Stem("rudimentary"), "rudimentari");});
test("rudiments -> rudiment", function() {deepEqual( Stem("rudiments"), "rudiment");});
test("rue -> rue", function() {deepEqual( Stem("rue"), "rue");});
test("rueful -> rueful", function() {deepEqual( Stem("rueful"), "rueful");});
test("ruefully -> ruefulli", function() {deepEqual( Stem("ruefully"), "ruefulli");});
test("ruff -> ruff", function() {deepEqual( Stem("ruff"), "ruff");});
test("ruffian -> ruffian", function() {deepEqual( Stem("ruffian"), "ruffian");});
test("ruffianly -> ruffian", function() {deepEqual( Stem("ruffianly"), "ruffian");});
test("ruffians -> ruffian", function() {deepEqual( Stem("ruffians"), "ruffian");});
test("ruffle -> ruffl", function() {deepEqual( Stem("ruffle"), "ruffl");});
test("ruffled -> ruffl", function() {deepEqual( Stem("ruffled"), "ruffl");});
test("rug -> rug", function() {deepEqual( Stem("rug"), "rug");});
test("rugged -> rug", function() {deepEqual( Stem("rugged"), "rug");});
test("rugs -> rug", function() {deepEqual( Stem("rugs"), "rug");});
test("ruin -> ruin", function() {deepEqual( Stem("ruin"), "ruin");});
test("ruinas -> ruina", function() {deepEqual( Stem("ruinas"), "ruina");});
test("ruined -> ruin", function() {deepEqual( Stem("ruined"), "ruin");});
test("ruining -> ruin", function() {deepEqual( Stem("ruining"), "ruin");});
test("ruinous -> ruinous", function() {deepEqual( Stem("ruinous"), "ruinous");});
test("ruins -> ruin", function() {deepEqual( Stem("ruins"), "ruin");});
test("rule -> rule", function() {deepEqual( Stem("rule"), "rule");});
test("ruled -> rule", function() {deepEqual( Stem("ruled"), "rule");});
test("ruler -> ruler", function() {deepEqual( Stem("ruler"), "ruler");});
test("rulers -> ruler", function() {deepEqual( Stem("rulers"), "ruler");});
test("rules -> rule", function() {deepEqual( Stem("rules"), "rule");});
test("ruling -> rule", function() {deepEqual( Stem("ruling"), "rule");});
test("rum -> rum", function() {deepEqual( Stem("rum"), "rum");});
test("rumble -> rumbl", function() {deepEqual( Stem("rumble"), "rumbl");});
test("rumbled -> rumbl", function() {deepEqual( Stem("rumbled"), "rumbl");});
test("rumbling -> rumbl", function() {deepEqual( Stem("rumbling"), "rumbl");});
test("rumicivorus -> rumicivorus", function() {deepEqual( Stem("rumicivorus"), "rumicivorus");});
test("ruminant -> rumin", function() {deepEqual( Stem("ruminant"), "rumin");});
test("ruminants -> rumin", function() {deepEqual( Stem("ruminants"), "rumin");});
test("ruminate -> rumin", function() {deepEqual( Stem("ruminate"), "rumin");});
test("ruminated -> rumin", function() {deepEqual( Stem("ruminated"), "rumin");});
test("ruminates -> rumin", function() {deepEqual( Stem("ruminates"), "rumin");});
test("ruminating -> rumin", function() {deepEqual( Stem("ruminating"), "rumin");});
test("ruminations -> rumin", function() {deepEqual( Stem("ruminations"), "rumin");});
test("rummage -> rummag", function() {deepEqual( Stem("rummage"), "rummag");});
test("rummaged -> rummag", function() {deepEqual( Stem("rummaged"), "rummag");});
test("rummaging -> rummag", function() {deepEqual( Stem("rummaging"), "rummag");});
test("rummest -> rummest", function() {deepEqual( Stem("rummest"), "rummest");});
test("rummiest -> rummiest", function() {deepEqual( Stem("rummiest"), "rummiest");});
test("rummy -> rummi", function() {deepEqual( Stem("rummy"), "rummi");});
test("rumour -> rumour", function() {deepEqual( Stem("rumour"), "rumour");});
test("rumoured -> rumour", function() {deepEqual( Stem("rumoured"), "rumour");});
test("rumours -> rumour", function() {deepEqual( Stem("rumours"), "rumour");});
test("rumpling -> rumpl", function() {deepEqual( Stem("rumpling"), "rumpl");});
test("rums -> rum", function() {deepEqual( Stem("rums"), "rum");});
test("run -> run", function() {deepEqual( Stem("run"), "run");});
test("runaway -> runaway", function() {deepEqual( Stem("runaway"), "runaway");});
test("runaways -> runaway", function() {deepEqual( Stem("runaways"), "runaway");});
test("rung -> rung", function() {deepEqual( Stem("rung"), "rung");});
test("running -> run", function() {deepEqual( Stem("running"), "run");});
test("runs -> run", function() {deepEqual( Stem("runs"), "run");});
test("rupture -> ruptur", function() {deepEqual( Stem("rupture"), "ruptur");});
test("ruptured -> ruptur", function() {deepEqual( Stem("ruptured"), "ruptur");});
test("rural -> rural", function() {deepEqual( Stem("rural"), "rural");});
test("rush -> rush", function() {deepEqual( Stem("rush"), "rush");});
test("rushed -> rush", function() {deepEqual( Stem("rushed"), "rush");});
test("rushes -> rush", function() {deepEqual( Stem("rushes"), "rush");});
test("rushing -> rush", function() {deepEqual( Stem("rushing"), "rush");});
test("rushlight -> rushlight", function() {deepEqual( Stem("rushlight"), "rushlight");});
test("russell -> russel", function() {deepEqual( Stem("russell"), "russel");});
test("russet -> russet", function() {deepEqual( Stem("russet"), "russet");});
test("russia -> russia", function() {deepEqual( Stem("russia"), "russia");});
test("russian -> russian", function() {deepEqual( Stem("russian"), "russian");});
test("russians -> russian", function() {deepEqual( Stem("russians"), "russian");});
test("rust -> rust", function() {deepEqual( Stem("rust"), "rust");});
test("rusted -> rust", function() {deepEqual( Stem("rusted"), "rust");});
test("rustic -> rustic", function() {deepEqual( Stem("rustic"), "rustic");});
test("rusticated -> rustic", function() {deepEqual( Stem("rusticated"), "rustic");});
test("rusticities -> rustic", function() {deepEqual( Stem("rusticities"), "rustic");});
test("rustily -> rustili", function() {deepEqual( Stem("rustily"), "rustili");});
test("rusting -> rust", function() {deepEqual( Stem("rusting"), "rust");});
test("rustle -> rustl", function() {deepEqual( Stem("rustle"), "rustl");});
test("rustled -> rustl", function() {deepEqual( Stem("rustled"), "rustl");});
test("rustling -> rustl", function() {deepEqual( Stem("rustling"), "rustl");});
test("rusty -> rusti", function() {deepEqual( Stem("rusty"), "rusti");});
test("rut -> rut", function() {deepEqual( Stem("rut"), "rut");});
test("ruthlessly -> ruthless", function() {deepEqual( Stem("ruthlessly"), "ruthless");});
test("ry -> ry", function() {deepEqual( Stem("ry"), "ry");});
test("ryazan -> ryazan", function() {deepEqual( Stem("ryazan"), "ryazan");});
test("ryde -> ryde", function() {deepEqual( Stem("ryde"), "ryde");});
test("rylstone -> rylston", function() {deepEqual( Stem("rylstone"), "rylston");});
test("s -> s", function() {deepEqual( Stem("s"), "s");});
test("sa -> sa", function() {deepEqual( Stem("sa"), "sa");});
test("sabbatarian -> sabbatarian", function() {deepEqual( Stem("sabbatarian"), "sabbatarian");});
test("sabbath -> sabbath", function() {deepEqual( Stem("sabbath"), "sabbath");});
test("sabe -> sabe", function() {deepEqual( Stem("sabe"), "sabe");});
test("sabine -> sabin", function() {deepEqual( Stem("sabine"), "sabin");});
test("sable -> sabl", function() {deepEqual( Stem("sable"), "sabl");});
test("sabre -> sabr", function() {deepEqual( Stem("sabre"), "sabr");});
test("sabres -> sabr", function() {deepEqual( Stem("sabres"), "sabr");});
test("sac -> sac", function() {deepEqual( Stem("sac"), "sac");});
test("sachet -> sachet", function() {deepEqual( Stem("sachet"), "sachet");});
test("sack -> sack", function() {deepEqual( Stem("sack"), "sack");});
test("sackcloth -> sackcloth", function() {deepEqual( Stem("sackcloth"), "sackcloth");});
test("sackcloths -> sackcloth", function() {deepEqual( Stem("sackcloths"), "sackcloth");});
test("sacked -> sack", function() {deepEqual( Stem("sacked"), "sack");});
test("sacking -> sack", function() {deepEqual( Stem("sacking"), "sack");});
test("sacks -> sack", function() {deepEqual( Stem("sacks"), "sack");});
test("sacrament -> sacrament", function() {deepEqual( Stem("sacrament"), "sacrament");});
test("sacramiento -> sacramiento", function() {deepEqual( Stem("sacramiento"), "sacramiento");});
test("sacred -> sacr", function() {deepEqual( Stem("sacred"), "sacr");});
test("sacredly -> sacr", function() {deepEqual( Stem("sacredly"), "sacr");});
test("sacrifice -> sacrific", function() {deepEqual( Stem("sacrifice"), "sacrific");});
test("sacrificed -> sacrif", function() {deepEqual( Stem("sacrificed"), "sacrif");});
test("sacrifices -> sacrific", function() {deepEqual( Stem("sacrifices"), "sacrific");});
test("sacrificing -> sacrif", function() {deepEqual( Stem("sacrificing"), "sacrif");});
test("sacrilege -> sacrileg", function() {deepEqual( Stem("sacrilege"), "sacrileg");});
test("sad -> sad", function() {deepEqual( Stem("sad"), "sad");});
test("saddened -> sadden", function() {deepEqual( Stem("saddened"), "sadden");});
test("saddening -> sadden", function() {deepEqual( Stem("saddening"), "sadden");});
test("saddle -> saddl", function() {deepEqual( Stem("saddle"), "saddl");});
test("saddled -> saddl", function() {deepEqual( Stem("saddled"), "saddl");});
test("saddler -> saddler", function() {deepEqual( Stem("saddler"), "saddler");});
test("saddling -> saddl", function() {deepEqual( Stem("saddling"), "saddl");});
test("sadly -> sad", function() {deepEqual( Stem("sadly"), "sad");});
test("sadness -> sad", function() {deepEqual( Stem("sadness"), "sad");});
test("sadovy -> sadovi", function() {deepEqual( Stem("sadovy"), "sadovi");});
test("saeugethiere -> saeugethier", function() {deepEqual( Stem("saeugethiere"), "saeugethier");});
test("safe -> safe", function() {deepEqual( Stem("safe"), "safe");});
test("safeguard -> safeguard", function() {deepEqual( Stem("safeguard"), "safeguard");});
test("safeguards -> safeguard", function() {deepEqual( Stem("safeguards"), "safeguard");});
test("safely -> safe", function() {deepEqual( Stem("safely"), "safe");});
test("safer -> safer", function() {deepEqual( Stem("safer"), "safer");});
test("safes -> safe", function() {deepEqual( Stem("safes"), "safe");});
test("safest -> safest", function() {deepEqual( Stem("safest"), "safest");});
test("safety -> safeti", function() {deepEqual( Stem("safety"), "safeti");});
test("saffron -> saffron", function() {deepEqual( Stem("saffron"), "saffron");});
test("sagacious -> sagaci", function() {deepEqual( Stem("sagacious"), "sagaci");});
test("sagacity -> sagac", function() {deepEqual( Stem("sagacity"), "sagac");});
test("sage -> sage", function() {deepEqual( Stem("sage"), "sage");});
test("sago -> sago", function() {deepEqual( Stem("sago"), "sago");});
test("said -> said", function() {deepEqual( Stem("said"), "said");});
test("sail -> sail", function() {deepEqual( Stem("sail"), "sail");});
test("sailed -> sail", function() {deepEqual( Stem("sailed"), "sail");});
test("sailing -> sail", function() {deepEqual( Stem("sailing"), "sail");});
test("sailor -> sailor", function() {deepEqual( Stem("sailor"), "sailor");});
test("sailors -> sailor", function() {deepEqual( Stem("sailors"), "sailor");});
test("sails -> sail", function() {deepEqual( Stem("sails"), "sail");});
test("saint -> saint", function() {deepEqual( Stem("saint"), "saint");});
test("sainted -> saint", function() {deepEqual( Stem("sainted"), "saint");});
test("saintly -> saint", function() {deepEqual( Stem("saintly"), "saint");});
test("saints -> saint", function() {deepEqual( Stem("saints"), "saint");});
test("saisis -> saisi", function() {deepEqual( Stem("saisis"), "saisi");});
test("sait -> sait", function() {deepEqual( Stem("sait"), "sait");});
test("saith -> saith", function() {deepEqual( Stem("saith"), "saith");});
test("sak -> sak", function() {deepEqual( Stem("sak"), "sak");});
test("sake -> sake", function() {deepEqual( Stem("sake"), "sake");});
test("sakes -> sake", function() {deepEqual( Stem("sakes"), "sake");});
test("sal -> sal", function() {deepEqual( Stem("sal"), "sal");});
test("sala -> sala", function() {deepEqual( Stem("sala"), "sala");});
test("saladillo -> saladillo", function() {deepEqual( Stem("saladillo"), "saladillo");});
test("salado -> salado", function() {deepEqual( Stem("salado"), "salado");});
test("salaried -> salari", function() {deepEqual( Stem("salaried"), "salari");});
test("salary -> salari", function() {deepEqual( Stem("salary"), "salari");});
test("sald -> sald", function() {deepEqual( Stem("sald"), "sald");});
test("sale -> sale", function() {deepEqual( Stem("sale"), "sale");});
test("salesman -> salesman", function() {deepEqual( Stem("salesman"), "salesman");});
test("saliferous -> salifer", function() {deepEqual( Stem("saliferous"), "salifer");});
test("salina -> salina", function() {deepEqual( Stem("salina"), "salina");});
test("salinas -> salina", function() {deepEqual( Stem("salinas"), "salina");});
test("saline -> salin", function() {deepEqual( Stem("saline"), "salin");});
test("salinus -> salinus", function() {deepEqual( Stem("salinus"), "salinus");});
test("salitral -> salitr", function() {deepEqual( Stem("salitral"), "salitr");});
test("salitrales -> salitral", function() {deepEqual( Stem("salitrales"), "salitral");});
test("saliva -> saliva", function() {deepEqual( Stem("saliva"), "saliva");});
test("sallied -> salli", function() {deepEqual( Stem("sallied"), "salli");});
test("sallies -> salli", function() {deepEqual( Stem("sallies"), "salli");});
test("sallow -> sallow", function() {deepEqual( Stem("sallow"), "sallow");});
test("sally -> salli", function() {deepEqual( Stem("sally"), "salli");});
test("sallys -> salli", function() {deepEqual( Stem("sallys"), "salli");});
test("salmon -> salmon", function() {deepEqual( Stem("salmon"), "salmon");});
test("salon -> salon", function() {deepEqual( Stem("salon"), "salon");});
test("saloon -> saloon", function() {deepEqual( Stem("saloon"), "saloon");});
test("saloons -> saloon", function() {deepEqual( Stem("saloons"), "saloon");});
test("salt -> salt", function() {deepEqual( Stem("salt"), "salt");});
test("salta -> salta", function() {deepEqual( Stem("salta"), "salta");});
test("salted -> salt", function() {deepEqual( Stem("salted"), "salt");});
test("saltenfiord -> saltenfiord", function() {deepEqual( Stem("saltenfiord"), "saltenfiord");});
test("salting -> salt", function() {deepEqual( Stem("salting"), "salt");});
test("saltire -> saltir", function() {deepEqual( Stem("saltire"), "saltir");});
test("saltpeter -> saltpet", function() {deepEqual( Stem("saltpeter"), "saltpet");});
test("saltpetre -> saltpetr", function() {deepEqual( Stem("saltpetre"), "saltpetr");});
test("salts -> salt", function() {deepEqual( Stem("salts"), "salt");});
test("salubrity -> salubr", function() {deepEqual( Stem("salubrity"), "salubr");});
test("salutary -> salutari", function() {deepEqual( Stem("salutary"), "salutari");});
test("salutation -> salut", function() {deepEqual( Stem("salutation"), "salut");});
test("salutations -> salut", function() {deepEqual( Stem("salutations"), "salut");});
test("salute -> salut", function() {deepEqual( Stem("salute"), "salut");});
test("saluted -> salut", function() {deepEqual( Stem("saluted"), "salut");});
test("salutes -> salut", function() {deepEqual( Stem("salutes"), "salut");});
test("saluting -> salut", function() {deepEqual( Stem("saluting"), "salut");});
test("salvador -> salvador", function() {deepEqual( Stem("salvador"), "salvador");});
test("salvation -> salvat", function() {deepEqual( Stem("salvation"), "salvat");});
test("salvator -> salvat", function() {deepEqual( Stem("salvator"), "salvat");});
test("salver -> salver", function() {deepEqual( Stem("salver"), "salver");});
test("sam -> sam", function() {deepEqual( Stem("sam"), "sam");});
test("samaritan -> samaritan", function() {deepEqual( Stem("samaritan"), "samaritan");});
test("same -> same", function() {deepEqual( Stem("same"), "same");});
test("sameness -> same", function() {deepEqual( Stem("sameness"), "same");});
test("samovar -> samovar", function() {deepEqual( Stem("samovar"), "samovar");});
test("samovars -> samovar", function() {deepEqual( Stem("samovars"), "samovar");});
test("sampler -> sampler", function() {deepEqual( Stem("sampler"), "sampler");});
test("samples -> sampl", function() {deepEqual( Stem("samples"), "sampl");});
test("samson -> samson", function() {deepEqual( Stem("samson"), "samson");});
test("san -> san", function() {deepEqual( Stem("san"), "san");});
test("sancho -> sancho", function() {deepEqual( Stem("sancho"), "sancho");});
test("sanctified -> sanctifi", function() {deepEqual( Stem("sanctified"), "sanctifi");});
test("sanction -> sanction", function() {deepEqual( Stem("sanction"), "sanction");});
test("sanctions -> sanction", function() {deepEqual( Stem("sanctions"), "sanction");});
test("sanctity -> sanctiti", function() {deepEqual( Stem("sanctity"), "sanctiti");});
test("sanctuary -> sanctuari", function() {deepEqual( Stem("sanctuary"), "sanctuari");});
test("sanctum -> sanctum", function() {deepEqual( Stem("sanctum"), "sanctum");});
test("sand -> sand", function() {deepEqual( Stem("sand"), "sand");});
test("sandal -> sandal", function() {deepEqual( Stem("sandal"), "sandal");});
test("sandaled -> sandal", function() {deepEqual( Stem("sandaled"), "sandal");});
test("sandalled -> sandal", function() {deepEqual( Stem("sandalled"), "sandal");});
test("sandals -> sandal", function() {deepEqual( Stem("sandals"), "sandal");});
test("sanded -> sand", function() {deepEqual( Stem("sanded"), "sand");});
test("sandpiper -> sandpip", function() {deepEqual( Stem("sandpiper"), "sandpip");});
test("sands -> sand", function() {deepEqual( Stem("sands"), "sand");});
test("sandstone -> sandston", function() {deepEqual( Stem("sandstone"), "sandston");});
test("sandstones -> sandston", function() {deepEqual( Stem("sandstones"), "sandston");});
test("sandwich -> sandwich", function() {deepEqual( Stem("sandwich"), "sandwich");});
test("sandwiches -> sandwich", function() {deepEqual( Stem("sandwiches"), "sandwich");});
test("sandy -> sandi", function() {deepEqual( Stem("sandy"), "sandi");});
test("sane -> sane", function() {deepEqual( Stem("sane"), "sane");});
test("sang -> sang", function() {deepEqual( Stem("sang"), "sang");});
test("sanger -> sanger", function() {deepEqual( Stem("sanger"), "sanger");});
test("sangsby -> sangsbi", function() {deepEqual( Stem("sangsby"), "sangsbi");});
test("sanguinary -> sanguinari", function() {deepEqual( Stem("sanguinary"), "sanguinari");});
test("sanguine -> sanguin", function() {deepEqual( Stem("sanguine"), "sanguin");});
test("saniem -> saniem", function() {deepEqual( Stem("saniem"), "saniem");});
test("sanity -> saniti", function() {deepEqual( Stem("sanity"), "saniti");});
test("sank -> sank", function() {deepEqual( Stem("sank"), "sank");});
test("sant -> sant", function() {deepEqual( Stem("sant"), "sant");});
test("santa -> santa", function() {deepEqual( Stem("santa"), "santa");});
test("santiago -> santiago", function() {deepEqual( Stem("santiago"), "santiago");});
test("sap -> sap", function() {deepEqual( Stem("sap"), "sap");});
test("sapient -> sapient", function() {deepEqual( Stem("sapient"), "sapient");});
test("sapling -> sapl", function() {deepEqual( Stem("sapling"), "sapl");});
test("sapped -> sap", function() {deepEqual( Stem("sapped"), "sap");});
test("sapphire -> sapphir", function() {deepEqual( Stem("sapphire"), "sapphir");});
test("sapphires -> sapphir", function() {deepEqual( Stem("sapphires"), "sapphir");});
test("sar -> sar", function() {deepEqual( Stem("sar"), "sar");});
test("saracen -> saracen", function() {deepEqual( Stem("saracen"), "saracen");});
test("saracenic -> saracen", function() {deepEqual( Stem("saracenic"), "saracen");});
test("saracens -> saracen", function() {deepEqual( Stem("saracens"), "saracen");});
test("sarah -> sarah", function() {deepEqual( Stem("sarah"), "sarah");});
test("sarandis -> sarandi", function() {deepEqual( Stem("sarandis"), "sarandi");});
test("sarcasm -> sarcasm", function() {deepEqual( Stem("sarcasm"), "sarcasm");});
test("sarcastic -> sarcast", function() {deepEqual( Stem("sarcastic"), "sarcast");});
test("sarcastically -> sarcast", function() {deepEqual( Stem("sarcastically"), "sarcast");});
test("sarcophagus -> sarcophagus", function() {deepEqual( Stem("sarcophagus"), "sarcophagus");});
test("sarmiento -> sarmiento", function() {deepEqual( Stem("sarmiento"), "sarmiento");});
test("sart -> sart", function() {deepEqual( Stem("sart"), "sart");});
test("sash -> sash", function() {deepEqual( Stem("sash"), "sash");});
test("sashed -> sash", function() {deepEqual( Stem("sashed"), "sash");});
test("sasiated -> sasiat", function() {deepEqual( Stem("sasiated"), "sasiat");});
test("sassafras -> sassafra", function() {deepEqual( Stem("sassafras"), "sassafra");});
test("sat -> sat", function() {deepEqual( Stem("sat"), "sat");});
test("satan -> satan", function() {deepEqual( Stem("satan"), "satan");});
test("sated -> sate", function() {deepEqual( Stem("sated"), "sate");});
test("satellite -> satellit", function() {deepEqual( Stem("satellite"), "satellit");});
test("satellites -> satellit", function() {deepEqual( Stem("satellites"), "satellit");});
test("satin -> satin", function() {deepEqual( Stem("satin"), "satin");});
test("satins -> satin", function() {deepEqual( Stem("satins"), "satin");});
test("satire -> satir", function() {deepEqual( Stem("satire"), "satir");});
test("satirical -> satir", function() {deepEqual( Stem("satirical"), "satir");});
test("satirically -> satir", function() {deepEqual( Stem("satirically"), "satir");});
test("satisfaction -> satisfact", function() {deepEqual( Stem("satisfaction"), "satisfact");});
test("satisfactorily -> satisfactorili", function() {deepEqual( Stem("satisfactorily"), "satisfactorili");});
test("satisfactory -> satisfactori", function() {deepEqual( Stem("satisfactory"), "satisfactori");});
test("satisfied -> satisfi", function() {deepEqual( Stem("satisfied"), "satisfi");});
test("satisfies -> satisfi", function() {deepEqual( Stem("satisfies"), "satisfi");});
test("satisfy -> satisfi", function() {deepEqual( Stem("satisfy"), "satisfi");});
test("satisfying -> satisfi", function() {deepEqual( Stem("satisfying"), "satisfi");});
test("satrap -> satrap", function() {deepEqual( Stem("satrap"), "satrap");});
test("satraps -> satrap", function() {deepEqual( Stem("satraps"), "satrap");});
test("saturated -> satur", function() {deepEqual( Stem("saturated"), "satur");});
test("saturation -> satur", function() {deepEqual( Stem("saturation"), "satur");});
test("saturday -> saturday", function() {deepEqual( Stem("saturday"), "saturday");});
test("saturdays -> saturday", function() {deepEqual( Stem("saturdays"), "saturday");});
test("saturnine -> saturnin", function() {deepEqual( Stem("saturnine"), "saturnin");});
test("satyr -> satyr", function() {deepEqual( Stem("satyr"), "satyr");});
test("sauce -> sauc", function() {deepEqual( Stem("sauce"), "sauc");});
test("saucepan -> saucepan", function() {deepEqual( Stem("saucepan"), "saucepan");});
test("saucepans -> saucepan", function() {deepEqual( Stem("saucepans"), "saucepan");});
test("saucer -> saucer", function() {deepEqual( Stem("saucer"), "saucer");});
test("saucers -> saucer", function() {deepEqual( Stem("saucers"), "saucer");});
test("saucily -> saucili", function() {deepEqual( Stem("saucily"), "saucili");});
test("saucy -> sauci", function() {deepEqual( Stem("saucy"), "sauci");});
test("saul -> saul", function() {deepEqual( Stem("saul"), "saul");});
test("saunter -> saunter", function() {deepEqual( Stem("saunter"), "saunter");});
test("sauntered -> saunter", function() {deepEqual( Stem("sauntered"), "saunter");});
test("saunterer -> saunter", function() {deepEqual( Stem("saunterer"), "saunter");});
test("sauntering -> saunter", function() {deepEqual( Stem("sauntering"), "saunter");});
test("saunters -> saunter", function() {deepEqual( Stem("saunters"), "saunter");});
test("saurophagus -> saurophagus", function() {deepEqual( Stem("saurophagus"), "saurophagus");});
test("sausage -> sausag", function() {deepEqual( Stem("sausage"), "sausag");});
test("sausages -> sausag", function() {deepEqual( Stem("sausages"), "sausag");});
test("sauvages -> sauvag", function() {deepEqual( Stem("sauvages"), "sauvag");});
test("savage -> savag", function() {deepEqual( Stem("savage"), "savag");});
test("savagely -> savag", function() {deepEqual( Stem("savagely"), "savag");});
test("savages -> savag", function() {deepEqual( Stem("savages"), "savag");});
test("savana -> savana", function() {deepEqual( Stem("savana"), "savana");});
test("savannahs -> savannah", function() {deepEqual( Stem("savannahs"), "savannah");});
test("save -> save", function() {deepEqual( Stem("save"), "save");});
test("saved -> save", function() {deepEqual( Stem("saved"), "save");});
test("saves -> save", function() {deepEqual( Stem("saves"), "save");});
test("saving -> save", function() {deepEqual( Stem("saving"), "save");});
test("savings -> save", function() {deepEqual( Stem("savings"), "save");});
test("saviour -> saviour", function() {deepEqual( Stem("saviour"), "saviour");});
test("savoir -> savoir", function() {deepEqual( Stem("savoir"), "savoir");});
test("savour -> savour", function() {deepEqual( Stem("savour"), "savour");});
test("savoured -> savour", function() {deepEqual( Stem("savoured"), "savour");});
test("savouries -> savouri", function() {deepEqual( Stem("savouries"), "savouri");});
test("savours -> savour", function() {deepEqual( Stem("savours"), "savour");});
test("savoury -> savouri", function() {deepEqual( Stem("savoury"), "savouri");});
test("saw -> saw", function() {deepEqual( Stem("saw"), "saw");});
test("sawdust -> sawdust", function() {deepEqual( Stem("sawdust"), "sawdust");});
test("saws -> saw", function() {deepEqual( Stem("saws"), "saw");});
test("sawyer -> sawyer", function() {deepEqual( Stem("sawyer"), "sawyer");});
test("saxon -> saxon", function() {deepEqual( Stem("saxon"), "saxon");});
test("say -> say", function() {deepEqual( Stem("say"), "say");});
test("saying -> say", function() {deepEqual( Stem("saying"), "say");});
test("sayings -> say", function() {deepEqual( Stem("sayings"), "say");});
test("says -> say", function() {deepEqual( Stem("says"), "say");});
test("scabra -> scabra", function() {deepEqual( Stem("scabra"), "scabra");});
test("scabs -> scab", function() {deepEqual( Stem("scabs"), "scab");});
test("scaffold -> scaffold", function() {deepEqual( Stem("scaffold"), "scaffold");});
test("scaffolding -> scaffold", function() {deepEqual( Stem("scaffolding"), "scaffold");});
test("scaffolds -> scaffold", function() {deepEqual( Stem("scaffolds"), "scaffold");});
test("scagliola -> scagliola", function() {deepEqual( Stem("scagliola"), "scagliola");});
test("scald -> scald", function() {deepEqual( Stem("scald"), "scald");});
test("scalded -> scald", function() {deepEqual( Stem("scalded"), "scald");});
test("scalding -> scald", function() {deepEqual( Stem("scalding"), "scald");});
test("scale -> scale", function() {deepEqual( Stem("scale"), "scale");});
test("scaled -> scale", function() {deepEqual( Stem("scaled"), "scale");});
test("scales -> scale", function() {deepEqual( Stem("scales"), "scale");});
test("scalesia -> scalesia", function() {deepEqual( Stem("scalesia"), "scalesia");});
test("scaley -> scaley", function() {deepEqual( Stem("scaley"), "scaley");});
test("scaling -> scale", function() {deepEqual( Stem("scaling"), "scale");});
test("scallops -> scallop", function() {deepEqual( Stem("scallops"), "scallop");});
test("scalping -> scalp", function() {deepEqual( Stem("scalping"), "scalp");});
test("scaly -> scali", function() {deepEqual( Stem("scaly"), "scali");});
test("scamander -> scamand", function() {deepEqual( Stem("scamander"), "scamand");});
test("scamp -> scamp", function() {deepEqual( Stem("scamp"), "scamp");});
test("scamper -> scamper", function() {deepEqual( Stem("scamper"), "scamper");});
test("scampered -> scamper", function() {deepEqual( Stem("scampered"), "scamper");});
test("scamps -> scamp", function() {deepEqual( Stem("scamps"), "scamp");});
test("scan -> scan", function() {deepEqual( Stem("scan"), "scan");});
test("scandal -> scandal", function() {deepEqual( Stem("scandal"), "scandal");});
test("scandalising -> scandalis", function() {deepEqual( Stem("scandalising"), "scandalis");});
test("scandalized -> scandal", function() {deepEqual( Stem("scandalized"), "scandal");});
test("scandalizing -> scandal", function() {deepEqual( Stem("scandalizing"), "scandal");});
test("scandalous -> scandal", function() {deepEqual( Stem("scandalous"), "scandal");});
test("scandals -> scandal", function() {deepEqual( Stem("scandals"), "scandal");});
test("scanned -> scan", function() {deepEqual( Stem("scanned"), "scan");});
test("scanning -> scan", function() {deepEqual( Stem("scanning"), "scan");});
test("scant -> scant", function() {deepEqual( Stem("scant"), "scant");});
test("scantier -> scantier", function() {deepEqual( Stem("scantier"), "scantier");});
test("scantiest -> scantiest", function() {deepEqual( Stem("scantiest"), "scantiest");});
test("scantily -> scantili", function() {deepEqual( Stem("scantily"), "scantili");});
test("scantiness -> scanti", function() {deepEqual( Stem("scantiness"), "scanti");});
test("scanty -> scanti", function() {deepEqual( Stem("scanty"), "scanti");});
test("scape -> scape", function() {deepEqual( Stem("scape"), "scape");});
test("scapegoat -> scapegoat", function() {deepEqual( Stem("scapegoat"), "scapegoat");});
test("scapegrace -> scapegrac", function() {deepEqual( Stem("scapegrace"), "scapegrac");});
test("scar -> scar", function() {deepEqual( Stem("scar"), "scar");});
test("scarabaeus -> scarabaeus", function() {deepEqual( Stem("scarabaeus"), "scarabaeus");});
test("scarce -> scarc", function() {deepEqual( Stem("scarce"), "scarc");});
test("scarcel -> scarcel", function() {deepEqual( Stem("scarcel"), "scarcel");});
test("scarcely -> scarc", function() {deepEqual( Stem("scarcely"), "scarc");});
test("scarcer -> scarcer", function() {deepEqual( Stem("scarcer"), "scarcer");});
test("scarcity -> scarciti", function() {deepEqual( Stem("scarcity"), "scarciti");});
test("scare -> scare", function() {deepEqual( Stem("scare"), "scare");});
test("scarecrow -> scarecrow", function() {deepEqual( Stem("scarecrow"), "scarecrow");});
test("scarecrows -> scarecrow", function() {deepEqual( Stem("scarecrows"), "scarecrow");});
test("scared -> scare", function() {deepEqual( Stem("scared"), "scare");});
test("scarf -> scarf", function() {deepEqual( Stem("scarf"), "scarf");});
test("scarfs -> scarf", function() {deepEqual( Stem("scarfs"), "scarf");});
test("scarlet -> scarlet", function() {deepEqual( Stem("scarlet"), "scarlet");});
test("scarred -> scar", function() {deepEqual( Stem("scarred"), "scar");});
test("scars -> scar", function() {deepEqual( Stem("scars"), "scar");});
test("scarum -> scarum", function() {deepEqual( Stem("scarum"), "scarum");});
test("scarus -> scarus", function() {deepEqual( Stem("scarus"), "scarus");});
test("scatter -> scatter", function() {deepEqual( Stem("scatter"), "scatter");});
test("scattered -> scatter", function() {deepEqual( Stem("scattered"), "scatter");});
test("scattering -> scatter", function() {deepEqual( Stem("scattering"), "scatter");});
test("scavengers -> scaveng", function() {deepEqual( Stem("scavengers"), "scaveng");});
test("scelidotherium -> scelidotherium", function() {deepEqual( Stem("scelidotherium"), "scelidotherium");});
test("scene -> scene", function() {deepEqual( Stem("scene"), "scene");});
test("scenery -> sceneri", function() {deepEqual( Stem("scenery"), "sceneri");});
test("scenes -> scene", function() {deepEqual( Stem("scenes"), "scene");});
test("scent -> scent", function() {deepEqual( Stem("scent"), "scent");});
test("scented -> scent", function() {deepEqual( Stem("scented"), "scent");});
test("scentless -> scentless", function() {deepEqual( Stem("scentless"), "scentless");});
test("scents -> scent", function() {deepEqual( Stem("scents"), "scent");});
test("sceptic -> sceptic", function() {deepEqual( Stem("sceptic"), "sceptic");});
test("sceptical -> sceptic", function() {deepEqual( Stem("sceptical"), "sceptic");});
test("sceptics -> sceptic", function() {deepEqual( Stem("sceptics"), "sceptic");});
test("schedule -> schedul", function() {deepEqual( Stem("schedule"), "schedul");});
test("schegolskoy -> schegolskoy", function() {deepEqual( Stem("schegolskoy"), "schegolskoy");});
test("scheme -> scheme", function() {deepEqual( Stem("scheme"), "scheme");});
test("schemer -> schemer", function() {deepEqual( Stem("schemer"), "schemer");});
test("schemes -> scheme", function() {deepEqual( Stem("schemes"), "scheme");});
test("scheming -> scheme", function() {deepEqual( Stem("scheming"), "scheme");});
test("schiller -> schiller", function() {deepEqual( Stem("schiller"), "schiller");});
test("schilleresque -> schilleresqu", function() {deepEqual( Stem("schilleresque"), "schilleresqu");});
test("schirdel -> schirdel", function() {deepEqual( Stem("schirdel"), "schirdel");});
test("schleswig -> schleswig", function() {deepEqual( Stem("schleswig"), "schleswig");});
test("scholar -> scholar", function() {deepEqual( Stem("scholar"), "scholar");});
test("scholarly -> scholar", function() {deepEqual( Stem("scholarly"), "scholar");});
test("scholars -> scholar", function() {deepEqual( Stem("scholars"), "scholar");});
test("scholarship -> scholarship", function() {deepEqual( Stem("scholarship"), "scholarship");});
test("scholastic -> scholast", function() {deepEqual( Stem("scholastic"), "scholast");});
test("schone -> schone", function() {deepEqual( Stem("schone"), "schone");});
test("schonsten -> schonsten", function() {deepEqual( Stem("schonsten"), "schonsten");});
test("school -> school", function() {deepEqual( Stem("school"), "school");});
test("schoolboy -> schoolboy", function() {deepEqual( Stem("schoolboy"), "schoolboy");});
test("schooldays -> schoolday", function() {deepEqual( Stem("schooldays"), "schoolday");});
test("schooled -> school", function() {deepEqual( Stem("schooled"), "school");});
test("schoolfellow -> schoolfellow", function() {deepEqual( Stem("schoolfellow"), "schoolfellow");});
test("schoolfellows -> schoolfellow", function() {deepEqual( Stem("schoolfellows"), "schoolfellow");});
test("schooling -> school", function() {deepEqual( Stem("schooling"), "school");});
test("schoolmaster -> schoolmast", function() {deepEqual( Stem("schoolmaster"), "schoolmast");});
test("schoolmasters -> schoolmast", function() {deepEqual( Stem("schoolmasters"), "schoolmast");});
test("schoolmate -> schoolmat", function() {deepEqual( Stem("schoolmate"), "schoolmat");});
test("schoolmeasther -> schoolmeasth", function() {deepEqual( Stem("schoolmeasther"), "schoolmeasth");});
test("schoolroom -> schoolroom", function() {deepEqual( Stem("schoolroom"), "schoolroom");});
test("schools -> school", function() {deepEqual( Stem("schools"), "school");});
test("schooner -> schooner", function() {deepEqual( Stem("schooner"), "schooner");});
test("schwach -> schwach", function() {deepEqual( Stem("schwach"), "schwach");});
test("scienc -> scienc", function() {deepEqual( Stem("scienc"), "scienc");});
test("science -> scienc", function() {deepEqual( Stem("science"), "scienc");});
test("sciences -> scienc", function() {deepEqual( Stem("sciences"), "scienc");});
test("scientific -> scientif", function() {deepEqual( Stem("scientific"), "scientif");});
test("scimitar -> scimitar", function() {deepEqual( Stem("scimitar"), "scimitar");});
test("scintillate -> scintil", function() {deepEqual( Stem("scintillate"), "scintil");});
test("scintillation -> scintil", function() {deepEqual( Stem("scintillation"), "scintil");});
test("scions -> scion", function() {deepEqual( Stem("scions"), "scion");});
test("scissor -> scissor", function() {deepEqual( Stem("scissor"), "scissor");});
test("scissors -> scissor", function() {deepEqual( Stem("scissors"), "scissor");});
test("sclater -> sclater", function() {deepEqual( Stem("sclater"), "sclater");});
test("scoff -> scoff", function() {deepEqual( Stem("scoff"), "scoff");});
test("scoffed -> scof", function() {deepEqual( Stem("scoffed"), "scof");});
test("scoffers -> scoffer", function() {deepEqual( Stem("scoffers"), "scoffer");});
test("scold -> scold", function() {deepEqual( Stem("scold"), "scold");});
test("scolded -> scold", function() {deepEqual( Stem("scolded"), "scold");});
test("scolding -> scold", function() {deepEqual( Stem("scolding"), "scold");});
test("scolds -> scold", function() {deepEqual( Stem("scolds"), "scold");});
test("scoondrel -> scoondrel", function() {deepEqual( Stem("scoondrel"), "scoondrel");});
test("scoondrels -> scoondrel", function() {deepEqual( Stem("scoondrels"), "scoondrel");});
test("scoop -> scoop", function() {deepEqual( Stem("scoop"), "scoop");});
test("scooped -> scoop", function() {deepEqual( Stem("scooped"), "scoop");});
test("scooping -> scoop", function() {deepEqual( Stem("scooping"), "scoop");});
test("scoops -> scoop", function() {deepEqual( Stem("scoops"), "scoop");});
test("scope -> scope", function() {deepEqual( Stem("scope"), "scope");});
test("scorch -> scorch", function() {deepEqual( Stem("scorch"), "scorch");});
test("scorched -> scorch", function() {deepEqual( Stem("scorched"), "scorch");});
test("scorches -> scorch", function() {deepEqual( Stem("scorches"), "scorch");});
test("scorching -> scorch", function() {deepEqual( Stem("scorching"), "scorch");});
test("scorchingly -> scorch", function() {deepEqual( Stem("scorchingly"), "scorch");});
test("score -> score", function() {deepEqual( Stem("score"), "score");});
test("scored -> score", function() {deepEqual( Stem("scored"), "score");});
test("scores -> score", function() {deepEqual( Stem("scores"), "score");});
test("scoresby -> scoresbi", function() {deepEqual( Stem("scoresby"), "scoresbi");});
test("scoriaceous -> scoriac", function() {deepEqual( Stem("scoriaceous"), "scoriac");});
test("scoriae -> scoria", function() {deepEqual( Stem("scoriae"), "scoria");});
test("scorn -> scorn", function() {deepEqual( Stem("scorn"), "scorn");});
test("scorned -> scorn", function() {deepEqual( Stem("scorned"), "scorn");});
test("scornful -> scorn", function() {deepEqual( Stem("scornful"), "scorn");});
test("scornfully -> scorn", function() {deepEqual( Stem("scornfully"), "scorn");});
test("scorning -> scorn", function() {deepEqual( Stem("scorning"), "scorn");});
test("scorns -> scorn", function() {deepEqual( Stem("scorns"), "scorn");});
test("scorpion -> scorpion", function() {deepEqual( Stem("scorpion"), "scorpion");});
test("scorpions -> scorpion", function() {deepEqual( Stem("scorpions"), "scorpion");});
test("scot -> scot", function() {deepEqual( Stem("scot"), "scot");});
test("scotch -> scotch", function() {deepEqual( Stem("scotch"), "scotch");});
test("scotched -> scotch", function() {deepEqual( Stem("scotched"), "scotch");});
test("scotland -> scotland", function() {deepEqual( Stem("scotland"), "scotland");});
test("scott -> scott", function() {deepEqual( Stem("scott"), "scott");});
test("scoundrel -> scoundrel", function() {deepEqual( Stem("scoundrel"), "scoundrel");});
test("scoundrelly -> scoundrelli", function() {deepEqual( Stem("scoundrelly"), "scoundrelli");});
test("scoundrels -> scoundrel", function() {deepEqual( Stem("scoundrels"), "scoundrel");});
test("scour -> scour", function() {deepEqual( Stem("scour"), "scour");});
test("scoured -> scour", function() {deepEqual( Stem("scoured"), "scour");});
test("scourge -> scourg", function() {deepEqual( Stem("scourge"), "scourg");});
test("scourges -> scourg", function() {deepEqual( Stem("scourges"), "scourg");});
test("scouring -> scour", function() {deepEqual( Stem("scouring"), "scour");});
test("scours -> scour", function() {deepEqual( Stem("scours"), "scour");});
test("scout -> scout", function() {deepEqual( Stem("scout"), "scout");});
test("scouted -> scout", function() {deepEqual( Stem("scouted"), "scout");});
test("scouts -> scout", function() {deepEqual( Stem("scouts"), "scout");});
test("scowl -> scowl", function() {deepEqual( Stem("scowl"), "scowl");});
test("scowled -> scowl", function() {deepEqual( Stem("scowled"), "scowl");});
test("scowling -> scowl", function() {deepEqual( Stem("scowling"), "scowl");});
test("scowls -> scowl", function() {deepEqual( Stem("scowls"), "scowl");});
test("scramble -> scrambl", function() {deepEqual( Stem("scramble"), "scrambl");});
test("scrambled -> scrambl", function() {deepEqual( Stem("scrambled"), "scrambl");});
test("scrambling -> scrambl", function() {deepEqual( Stem("scrambling"), "scrambl");});
test("scrap -> scrap", function() {deepEqual( Stem("scrap"), "scrap");});
test("scrapbook -> scrapbook", function() {deepEqual( Stem("scrapbook"), "scrapbook");});
test("scrape -> scrape", function() {deepEqual( Stem("scrape"), "scrape");});
test("scraped -> scrape", function() {deepEqual( Stem("scraped"), "scrape");});
test("scraper -> scraper", function() {deepEqual( Stem("scraper"), "scraper");});
test("scrapes -> scrape", function() {deepEqual( Stem("scrapes"), "scrape");});
test("scraping -> scrape", function() {deepEqual( Stem("scraping"), "scrape");});
test("scraps -> scrap", function() {deepEqual( Stem("scraps"), "scrap");});
test("scratch -> scratch", function() {deepEqual( Stem("scratch"), "scratch");});
test("scratched -> scratch", function() {deepEqual( Stem("scratched"), "scratch");});
test("scratches -> scratch", function() {deepEqual( Stem("scratches"), "scratch");});
test("scratching -> scratch", function() {deepEqual( Stem("scratching"), "scratch");});
test("scrawl -> scrawl", function() {deepEqual( Stem("scrawl"), "scrawl");});
test("scrawled -> scrawl", function() {deepEqual( Stem("scrawled"), "scrawl");});
test("scrawls -> scrawl", function() {deepEqual( Stem("scrawls"), "scrawl");});
test("scream -> scream", function() {deepEqual( Stem("scream"), "scream");});
test("screamed -> scream", function() {deepEqual( Stem("screamed"), "scream");});
test("screaming -> scream", function() {deepEqual( Stem("screaming"), "scream");});
test("screams -> scream", function() {deepEqual( Stem("screams"), "scream");});
test("screeched -> screech", function() {deepEqual( Stem("screeched"), "screech");});
test("screeches -> screech", function() {deepEqual( Stem("screeches"), "screech");});
test("screeching -> screech", function() {deepEqual( Stem("screeching"), "screech");});
test("screen -> screen", function() {deepEqual( Stem("screen"), "screen");});
test("screened -> screen", function() {deepEqual( Stem("screened"), "screen");});
test("screening -> screen", function() {deepEqual( Stem("screening"), "screen");});
test("screens -> screen", function() {deepEqual( Stem("screens"), "screen");});
test("screw -> screw", function() {deepEqual( Stem("screw"), "screw");});
test("screwdriver -> screwdriv", function() {deepEqual( Stem("screwdriver"), "screwdriv");});
test("screwdrivers -> screwdriv", function() {deepEqual( Stem("screwdrivers"), "screwdriv");});
test("screwed -> screw", function() {deepEqual( Stem("screwed"), "screw");});
test("screwing -> screw", function() {deepEqual( Stem("screwing"), "screw");});
test("screws -> screw", function() {deepEqual( Stem("screws"), "screw");});
test("scribble -> scribbl", function() {deepEqual( Stem("scribble"), "scribbl");});
test("scribbled -> scribbl", function() {deepEqual( Stem("scribbled"), "scribbl");});
test("scribe -> scribe", function() {deepEqual( Stem("scribe"), "scribe");});
test("scrip -> scrip", function() {deepEqual( Stem("scrip"), "scrip");});
test("scripter -> scripter", function() {deepEqual( Stem("scripter"), "scripter");});
test("scriptural -> scriptur", function() {deepEqual( Stem("scriptural"), "scriptur");});
test("scripture -> scriptur", function() {deepEqual( Stem("scripture"), "scriptur");});
test("scrivener -> scriven", function() {deepEqual( Stem("scrivener"), "scriven");});
test("scrofulous -> scroful", function() {deepEqual( Stem("scrofulous"), "scroful");});
test("scrolls -> scroll", function() {deepEqual( Stem("scrolls"), "scroll");});
test("scrope -> scrope", function() {deepEqual( Stem("scrope"), "scrope");});
test("scrub -> scrub", function() {deepEqual( Stem("scrub"), "scrub");});
test("scrubbed -> scrub", function() {deepEqual( Stem("scrubbed"), "scrub");});
test("scrubbing -> scrub", function() {deepEqual( Stem("scrubbing"), "scrub");});
test("scrubbs -> scrubb", function() {deepEqual( Stem("scrubbs"), "scrubb");});
test("scrubby -> scrubbi", function() {deepEqual( Stem("scrubby"), "scrubbi");});
test("scrubs -> scrub", function() {deepEqual( Stem("scrubs"), "scrub");});
test("scruple -> scrupl", function() {deepEqual( Stem("scruple"), "scrupl");});
test("scruples -> scrupl", function() {deepEqual( Stem("scruples"), "scrupl");});
test("scrupulous -> scrupul", function() {deepEqual( Stem("scrupulous"), "scrupul");});
test("scrupulously -> scrupul", function() {deepEqual( Stem("scrupulously"), "scrupul");});
test("scrutinise -> scrutinis", function() {deepEqual( Stem("scrutinise"), "scrutinis");});
test("scrutinised -> scrutinis", function() {deepEqual( Stem("scrutinised"), "scrutinis");});
test("scrutinising -> scrutinis", function() {deepEqual( Stem("scrutinising"), "scrutinis");});
test("scrutinizing -> scrutin", function() {deepEqual( Stem("scrutinizing"), "scrutin");});
test("scrutiny -> scrutini", function() {deepEqual( Stem("scrutiny"), "scrutini");});
test("scudded -> scud", function() {deepEqual( Stem("scudded"), "scud");});
test("scuffle -> scuffl", function() {deepEqual( Stem("scuffle"), "scuffl");});
test("scuffling -> scuffl", function() {deepEqual( Stem("scuffling"), "scuffl");});
test("scullery -> sculleri", function() {deepEqual( Stem("scullery"), "sculleri");});
test("scullions -> scullion", function() {deepEqual( Stem("scullions"), "scullion");});
test("sculptor -> sculptor", function() {deepEqual( Stem("sculptor"), "sculptor");});
test("sculptured -> sculptur", function() {deepEqual( Stem("sculptured"), "sculptur");});
test("sculptures -> sculptur", function() {deepEqual( Stem("sculptures"), "sculptur");});
test("scum -> scum", function() {deepEqual( Stem("scum"), "scum");});
test("scurvy -> scurvi", function() {deepEqual( Stem("scurvy"), "scurvi");});
test("scuttle -> scuttl", function() {deepEqual( Stem("scuttle"), "scuttl");});
test("scuttling -> scuttl", function() {deepEqual( Stem("scuttling"), "scuttl");});
test("scytalopus -> scytalopus", function() {deepEqual( Stem("scytalopus"), "scytalopus");});
test("se -> se", function() {deepEqual( Stem("se"), "se");});
test("sea -> sea", function() {deepEqual( Stem("sea"), "sea");});
test("seacoast -> seacoast", function() {deepEqual( Stem("seacoast"), "seacoast");});
test("seafowl -> seafowl", function() {deepEqual( Stem("seafowl"), "seafowl");});
test("seal -> seal", function() {deepEqual( Stem("seal"), "seal");});
test("sealed -> seal", function() {deepEqual( Stem("sealed"), "seal");});
test("sealer -> sealer", function() {deepEqual( Stem("sealer"), "sealer");});
test("sealers -> sealer", function() {deepEqual( Stem("sealers"), "sealer");});
test("sealing -> seal", function() {deepEqual( Stem("sealing"), "seal");});
test("seals -> seal", function() {deepEqual( Stem("seals"), "seal");});
test("seaman -> seaman", function() {deepEqual( Stem("seaman"), "seaman");});
test("seame -> seam", function() {deepEqual( Stem("seame"), "seam");});
test("seamed -> seam", function() {deepEqual( Stem("seamed"), "seam");});
test("seamen -> seamen", function() {deepEqual( Stem("seamen"), "seamen");});
test("seams -> seam", function() {deepEqual( Stem("seams"), "seam");});
test("seaport -> seaport", function() {deepEqual( Stem("seaport"), "seaport");});
test("sear -> sear", function() {deepEqual( Stem("sear"), "sear");});
test("search -> search", function() {deepEqual( Stem("search"), "search");});
test("searched -> search", function() {deepEqual( Stem("searched"), "search");});
test("searches -> search", function() {deepEqual( Stem("searches"), "search");});
test("searching -> search", function() {deepEqual( Stem("searching"), "search");});
test("seas -> sea", function() {deepEqual( Stem("seas"), "sea");});
test("seashells -> seashel", function() {deepEqual( Stem("seashells"), "seashel");});
test("seaside -> seasid", function() {deepEqual( Stem("seaside"), "seasid");});
test("season -> season", function() {deepEqual( Stem("season"), "season");});
test("seasoned -> season", function() {deepEqual( Stem("seasoned"), "season");});
test("seasons -> season", function() {deepEqual( Stem("seasons"), "season");});
test("seat -> seat", function() {deepEqual( Stem("seat"), "seat");});
test("seated -> seat", function() {deepEqual( Stem("seated"), "seat");});
test("seating -> seat", function() {deepEqual( Stem("seating"), "seat");});
test("seats -> seat", function() {deepEqual( Stem("seats"), "seat");});
test("seaward -> seaward", function() {deepEqual( Stem("seaward"), "seaward");});
test("seawards -> seaward", function() {deepEqual( Stem("seawards"), "seaward");});
test("seaweed -> seawe", function() {deepEqual( Stem("seaweed"), "seawe");});
test("secede -> seced", function() {deepEqual( Stem("secede"), "seced");});
test("secession -> secess", function() {deepEqual( Stem("secession"), "secess");});
test("seclude -> seclud", function() {deepEqual( Stem("seclude"), "seclud");});
test("secluded -> seclud", function() {deepEqual( Stem("secluded"), "seclud");});
test("seclusion -> seclus", function() {deepEqual( Stem("seclusion"), "seclus");});
test("seco -> seco", function() {deepEqual( Stem("seco"), "seco");});
test("second -> second", function() {deepEqual( Stem("second"), "second");});
test("secondary -> secondari", function() {deepEqual( Stem("secondary"), "secondari");});
test("seconded -> second", function() {deepEqual( Stem("seconded"), "second");});
test("secondly -> second", function() {deepEqual( Stem("secondly"), "second");});
test("seconds -> second", function() {deepEqual( Stem("seconds"), "second");});
test("secrecy -> secreci", function() {deepEqual( Stem("secrecy"), "secreci");});
test("secret -> secret", function() {deepEqual( Stem("secret"), "secret");});
test("secretaries -> secretari", function() {deepEqual( Stem("secretaries"), "secretari");});
test("secretary -> secretari", function() {deepEqual( Stem("secretary"), "secretari");});
test("secretaryship -> secretaryship", function() {deepEqual( Stem("secretaryship"), "secretaryship");});
test("secretaryships -> secretaryship", function() {deepEqual( Stem("secretaryships"), "secretaryship");});
test("secrete -> secret", function() {deepEqual( Stem("secrete"), "secret");});
test("secreted -> secret", function() {deepEqual( Stem("secreted"), "secret");});
test("secretes -> secret", function() {deepEqual( Stem("secretes"), "secret");});
test("secreting -> secret", function() {deepEqual( Stem("secreting"), "secret");});
test("secretion -> secret", function() {deepEqual( Stem("secretion"), "secret");});
test("secretly -> secret", function() {deepEqual( Stem("secretly"), "secret");});
test("secrets -> secret", function() {deepEqual( Stem("secrets"), "secret");});
test("sect -> sect", function() {deepEqual( Stem("sect"), "sect");});
test("sectio -> sectio", function() {deepEqual( Stem("sectio"), "sectio");});
test("section -> section", function() {deepEqual( Stem("section"), "section");});
test("sections -> section", function() {deepEqual( Stem("sections"), "section");});
test("secular -> secular", function() {deepEqual( Stem("secular"), "secular");});
test("secure -> secur", function() {deepEqual( Stem("secure"), "secur");});
test("secured -> secur", function() {deepEqual( Stem("secured"), "secur");});
test("securely -> secur", function() {deepEqual( Stem("securely"), "secur");});
test("secures -> secur", function() {deepEqual( Stem("secures"), "secur");});
test("securing -> secur", function() {deepEqual( Stem("securing"), "secur");});
test("securities -> secur", function() {deepEqual( Stem("securities"), "secur");});
test("security -> secur", function() {deepEqual( Stem("security"), "secur");});
test("sed -> sed", function() {deepEqual( Stem("sed"), "sed");});
test("sedate -> sedat", function() {deepEqual( Stem("sedate"), "sedat");});
test("sedately -> sedat", function() {deepEqual( Stem("sedately"), "sedat");});
test("sedateness -> sedat", function() {deepEqual( Stem("sedateness"), "sedat");});
test("sedative -> sedat", function() {deepEqual( Stem("sedative"), "sedat");});
test("sedentary -> sedentari", function() {deepEqual( Stem("sedentary"), "sedentari");});
test("sedes -> sede", function() {deepEqual( Stem("sedes"), "sede");});
test("sedge -> sedg", function() {deepEqual( Stem("sedge"), "sedg");});
test("sediment -> sediment", function() {deepEqual( Stem("sediment"), "sediment");});
test("sedimentary -> sedimentari", function() {deepEqual( Stem("sedimentary"), "sedimentari");});
test("sediments -> sediment", function() {deepEqual( Stem("sediments"), "sediment");});
test("sedley -> sedley", function() {deepEqual( Stem("sedley"), "sedley");});
test("seduced -> seduc", function() {deepEqual( Stem("seduced"), "seduc");});
test("seducer -> seduc", function() {deepEqual( Stem("seducer"), "seduc");});
test("seductive -> seduct", function() {deepEqual( Stem("seductive"), "seduct");});
test("seductively -> seduct", function() {deepEqual( Stem("seductively"), "seduct");});
test("sedulous -> sedul", function() {deepEqual( Stem("sedulous"), "sedul");});
test("sedulously -> sedul", function() {deepEqual( Stem("sedulously"), "sedul");});
test("see -> see", function() {deepEqual( Stem("see"), "see");});
test("seed -> seed", function() {deepEqual( Stem("seed"), "seed");});
test("seeds -> seed", function() {deepEqual( Stem("seeds"), "seed");});
test("seeing -> see", function() {deepEqual( Stem("seeing"), "see");});
test("seek -> seek", function() {deepEqual( Stem("seek"), "seek");});
test("seeker -> seeker", function() {deepEqual( Stem("seeker"), "seeker");});
test("seekers -> seeker", function() {deepEqual( Stem("seekers"), "seeker");});
test("seeking -> seek", function() {deepEqual( Stem("seeking"), "seek");});
test("seeks -> seek", function() {deepEqual( Stem("seeks"), "seek");});
test("seem -> seem", function() {deepEqual( Stem("seem"), "seem");});
test("seeme -> seem", function() {deepEqual( Stem("seeme"), "seem");});
test("seemed -> seem", function() {deepEqual( Stem("seemed"), "seem");});
test("seeming -> seem", function() {deepEqual( Stem("seeming"), "seem");});
test("seemingly -> seem", function() {deepEqual( Stem("seemingly"), "seem");});
test("seems -> seem", function() {deepEqual( Stem("seems"), "seem");});
test("seen -> seen", function() {deepEqual( Stem("seen"), "seen");});
test("sees -> see", function() {deepEqual( Stem("sees"), "see");});
test("seetzen -> seetzen", function() {deepEqual( Stem("seetzen"), "seetzen");});
test("segment -> segment", function() {deepEqual( Stem("segment"), "segment");});
test("segments -> segment", function() {deepEqual( Stem("segments"), "segment");});
test("sehr -> sehr", function() {deepEqual( Stem("sehr"), "sehr");});
test("sein -> sein", function() {deepEqual( Stem("sein"), "sein");});
test("seize -> seiz", function() {deepEqual( Stem("seize"), "seiz");});
test("seized -> seiz", function() {deepEqual( Stem("seized"), "seiz");});
test("seizes -> seiz", function() {deepEqual( Stem("seizes"), "seiz");});
test("seizing -> seiz", function() {deepEqual( Stem("seizing"), "seiz");});
test("seizure -> seizur", function() {deepEqual( Stem("seizure"), "seizur");});
test("seldom -> seldom", function() {deepEqual( Stem("seldom"), "seldom");});
test("select -> select", function() {deepEqual( Stem("select"), "select");});
test("selected -> select", function() {deepEqual( Stem("selected"), "select");});
test("selecting -> select", function() {deepEqual( Stem("selecting"), "select");});
test("selection -> select", function() {deepEqual( Stem("selection"), "select");});
test("selections -> select", function() {deepEqual( Stem("selections"), "select");});
test("self -> self", function() {deepEqual( Stem("self"), "self");});
test("selfish -> selfish", function() {deepEqual( Stem("selfish"), "selfish");});
test("selfishness -> selfish", function() {deepEqual( Stem("selfishness"), "selfish");});
test("sell -> sell", function() {deepEqual( Stem("sell"), "sell");});
test("seller -> seller", function() {deepEqual( Stem("seller"), "seller");});
test("sellers -> seller", function() {deepEqual( Stem("sellers"), "seller");});
test("selling -> sell", function() {deepEqual( Stem("selling"), "sell");});
test("sellings -> sell", function() {deepEqual( Stem("sellings"), "sell");});
test("sells -> sell", function() {deepEqual( Stem("sells"), "sell");});
test("selves -> selv", function() {deepEqual( Stem("selves"), "selv");});
test("semblance -> semblanc", function() {deepEqual( Stem("semblance"), "semblanc");});
test("semblances -> semblanc", function() {deepEqual( Stem("semblances"), "semblanc");});
test("semi -> semi", function() {deepEqual( Stem("semi"), "semi");});
test("semicircle -> semicircl", function() {deepEqual( Stem("semicircle"), "semicircl");});
test("semicircular -> semicircular", function() {deepEqual( Stem("semicircular"), "semicircular");});
test("seminal -> semin", function() {deepEqual( Stem("seminal"), "semin");});
test("seminarists -> seminarist", function() {deepEqual( Stem("seminarists"), "seminarist");});
test("semyon -> semyon", function() {deepEqual( Stem("semyon"), "semyon");});
test("semyonova -> semyonova", function() {deepEqual( Stem("semyonova"), "semyonova");});
test("semyonovitch -> semyonovitch", function() {deepEqual( Stem("semyonovitch"), "semyonovitch");});
test("semyonovna -> semyonovna", function() {deepEqual( Stem("semyonovna"), "semyonovna");});
test("semyonovsky -> semyonovski", function() {deepEqual( Stem("semyonovsky"), "semyonovski");});
test("senate -> senat", function() {deepEqual( Stem("senate"), "senat");});
test("senator -> senat", function() {deepEqual( Stem("senator"), "senat");});
test("senatorial -> senatori", function() {deepEqual( Stem("senatorial"), "senatori");});
test("senators -> senat", function() {deepEqual( Stem("senators"), "senat");});
test("send -> send", function() {deepEqual( Stem("send"), "send");});
test("sender -> sender", function() {deepEqual( Stem("sender"), "sender");});
test("sending -> send", function() {deepEqual( Stem("sending"), "send");});
test("sends -> send", function() {deepEqual( Stem("sends"), "send");});
test("senhor -> senhor", function() {deepEqual( Stem("senhor"), "senhor");});
test("senile -> senil", function() {deepEqual( Stem("senile"), "senil");});
test("senior -> senior", function() {deepEqual( Stem("senior"), "senior");});
test("seniority -> senior", function() {deepEqual( Stem("seniority"), "senior");});
test("seniors -> senior", function() {deepEqual( Stem("seniors"), "senior");});
test("senor -> senor", function() {deepEqual( Stem("senor"), "senor");});
test("senoritas -> senorita", function() {deepEqual( Stem("senoritas"), "senorita");});
test("sensation -> sensat", function() {deepEqual( Stem("sensation"), "sensat");});
test("sensational -> sensat", function() {deepEqual( Stem("sensational"), "sensat");});
test("sensations -> sensat", function() {deepEqual( Stem("sensations"), "sensat");});
test("sense -> sens", function() {deepEqual( Stem("sense"), "sens");});
test("senseless -> senseless", function() {deepEqual( Stem("senseless"), "senseless");});
test("senses -> sens", function() {deepEqual( Stem("senses"), "sens");});
test("sensibilities -> sensibl", function() {deepEqual( Stem("sensibilities"), "sensibl");});
test("sensibility -> sensibl", function() {deepEqual( Stem("sensibility"), "sensibl");});
test("sensible -> sensibl", function() {deepEqual( Stem("sensible"), "sensibl");});
test("sensibly -> sensibl", function() {deepEqual( Stem("sensibly"), "sensibl");});
test("sensitive -> sensit", function() {deepEqual( Stem("sensitive"), "sensit");});
test("sensitiveness -> sensit", function() {deepEqual( Stem("sensitiveness"), "sensit");});
test("sensual -> sensual", function() {deepEqual( Stem("sensual"), "sensual");});
test("sensualist -> sensualist", function() {deepEqual( Stem("sensualist"), "sensualist");});
test("sensuality -> sensual", function() {deepEqual( Stem("sensuality"), "sensual");});
test("sent -> sent", function() {deepEqual( Stem("sent"), "sent");});
test("sentence -> sentenc", function() {deepEqual( Stem("sentence"), "sentenc");});
test("sentenced -> sentenc", function() {deepEqual( Stem("sentenced"), "sentenc");});
test("sentences -> sentenc", function() {deepEqual( Stem("sentences"), "sentenc");});
test("sententiously -> sententi", function() {deepEqual( Stem("sententiously"), "sententi");});
test("sentiment -> sentiment", function() {deepEqual( Stem("sentiment"), "sentiment");});
test("sentimental -> sentiment", function() {deepEqual( Stem("sentimental"), "sentiment");});
test("sentimentalism -> sentiment", function() {deepEqual( Stem("sentimentalism"), "sentiment");});
test("sentimentality -> sentiment", function() {deepEqual( Stem("sentimentality"), "sentiment");});
test("sentimentally -> sentiment", function() {deepEqual( Stem("sentimentally"), "sentiment");});
test("sentiments -> sentiment", function() {deepEqual( Stem("sentiments"), "sentiment");});
test("sentinel -> sentinel", function() {deepEqual( Stem("sentinel"), "sentinel");});
test("sentinels -> sentinel", function() {deepEqual( Stem("sentinels"), "sentinel");});
test("sentries -> sentri", function() {deepEqual( Stem("sentries"), "sentri");});
test("sentry -> sentri", function() {deepEqual( Stem("sentry"), "sentri");});
test("separate -> separ", function() {deepEqual( Stem("separate"), "separ");});
test("separated -> separ", function() {deepEqual( Stem("separated"), "separ");});
test("separately -> separ", function() {deepEqual( Stem("separately"), "separ");});
test("separates -> separ", function() {deepEqual( Stem("separates"), "separ");});
test("separating -> separ", function() {deepEqual( Stem("separating"), "separ");});
test("separation -> separ", function() {deepEqual( Stem("separation"), "separ");});
test("sept -> sept", function() {deepEqual( Stem("sept"), "sept");});
test("septa -> septa", function() {deepEqual( Stem("septa"), "septa");});
test("september -> septemb", function() {deepEqual( Stem("september"), "septemb");});
test("septuagenarian -> septuagenarian", function() {deepEqual( Stem("septuagenarian"), "septuagenarian");});
test("septum -> septum", function() {deepEqual( Stem("septum"), "septum");});
test("sepulchral -> sepulchr", function() {deepEqual( Stem("sepulchral"), "sepulchr");});
test("sepulchre -> sepulchr", function() {deepEqual( Stem("sepulchre"), "sepulchr");});
test("sepultus -> sepultus", function() {deepEqual( Stem("sepultus"), "sepultus");});
test("sequel -> sequel", function() {deepEqual( Stem("sequel"), "sequel");});
test("sequence -> sequenc", function() {deepEqual( Stem("sequence"), "sequenc");});
test("sequestered -> sequest", function() {deepEqual( Stem("sequestered"), "sequest");});
test("ser -> ser", function() {deepEqual( Stem("ser"), "ser");});
test("seraph -> seraph", function() {deepEqual( Stem("seraph"), "seraph");});
test("seraphically -> seraph", function() {deepEqual( Stem("seraphically"), "seraph");});
test("seraphim -> seraphim", function() {deepEqual( Stem("seraphim"), "seraphim");});
test("serces -> serc", function() {deepEqual( Stem("serces"), "serc");});
test("serenades -> serenad", function() {deepEqual( Stem("serenades"), "serenad");});
test("serene -> seren", function() {deepEqual( Stem("serene"), "seren");});
test("serenely -> seren", function() {deepEqual( Stem("serenely"), "seren");});
test("serenity -> seren", function() {deepEqual( Stem("serenity"), "seren");});
test("serf -> serf", function() {deepEqual( Stem("serf"), "serf");});
test("serfdom -> serfdom", function() {deepEqual( Stem("serfdom"), "serfdom");});
test("serfs -> serf", function() {deepEqual( Stem("serfs"), "serf");});
test("sergeant -> sergeant", function() {deepEqual( Stem("sergeant"), "sergeant");});
test("seriatim -> seriatim", function() {deepEqual( Stem("seriatim"), "seriatim");});
test("series -> seri", function() {deepEqual( Stem("series"), "seri");});
test("serio -> serio", function() {deepEqual( Stem("serio"), "serio");});
test("serious -> serious", function() {deepEqual( Stem("serious"), "serious");});
test("seriously -> serious", function() {deepEqual( Stem("seriously"), "serious");});
test("seriousness -> serious", function() {deepEqual( Stem("seriousness"), "serious");});
test("serjeant -> serjeant", function() {deepEqual( Stem("serjeant"), "serjeant");});
test("serjeants -> serjeant", function() {deepEqual( Stem("serjeants"), "serjeant");});
test("sermon -> sermon", function() {deepEqual( Stem("sermon"), "sermon");});
test("sermonizing -> sermon", function() {deepEqual( Stem("sermonizing"), "sermon");});
test("serpent -> serpent", function() {deepEqual( Stem("serpent"), "serpent");});
test("serpentine -> serpentin", function() {deepEqual( Stem("serpentine"), "serpentin");});
test("serpents -> serpent", function() {deepEqual( Stem("serpents"), "serpent");});
test("serpulae -> serpula", function() {deepEqual( Stem("serpulae"), "serpula");});
test("serrated -> serrat", function() {deepEqual( Stem("serrated"), "serrat");});
test("sertularia -> sertularia", function() {deepEqual( Stem("sertularia"), "sertularia");});
test("servant -> servant", function() {deepEqual( Stem("servant"), "servant");});
test("servants -> servant", function() {deepEqual( Stem("servants"), "servant");});
test("serve -> serv", function() {deepEqual( Stem("serve"), "serv");});
test("served -> serv", function() {deepEqual( Stem("served"), "serv");});
test("server -> server", function() {deepEqual( Stem("server"), "server");});
test("serves -> serv", function() {deepEqual( Stem("serves"), "serv");});
test("service -> servic", function() {deepEqual( Stem("service"), "servic");});
test("serviceable -> servic", function() {deepEqual( Stem("serviceable"), "servic");});
test("serviceably -> servic", function() {deepEqual( Stem("serviceably"), "servic");});
test("services -> servic", function() {deepEqual( Stem("services"), "servic");});
test("servile -> servil", function() {deepEqual( Stem("servile"), "servil");});
test("servility -> servil", function() {deepEqual( Stem("servility"), "servil");});
test("serving -> serv", function() {deepEqual( Stem("serving"), "serv");});
test("servitor -> servitor", function() {deepEqual( Stem("servitor"), "servitor");});
test("servitude -> servitud", function() {deepEqual( Stem("servitude"), "servitud");});
test("servts -> servt", function() {deepEqual( Stem("servts"), "servt");});
test("ses -> ses", function() {deepEqual( Stem("ses"), "ses");});
test("session -> session", function() {deepEqual( Stem("session"), "session");});
test("sessions -> session", function() {deepEqual( Stem("sessions"), "session");});
test("set -> set", function() {deepEqual( Stem("set"), "set");});
test("sets -> set", function() {deepEqual( Stem("sets"), "set");});
test("setten -> setten", function() {deepEqual( Stem("setten"), "setten");});
test("setting -> set", function() {deepEqual( Stem("setting"), "set");});
test("settle -> settl", function() {deepEqual( Stem("settle"), "settl");});
test("settled -> settl", function() {deepEqual( Stem("settled"), "settl");});
test("settlement -> settlement", function() {deepEqual( Stem("settlement"), "settlement");});
test("settlements -> settlement", function() {deepEqual( Stem("settlements"), "settlement");});
test("settler -> settler", function() {deepEqual( Stem("settler"), "settler");});
test("settlers -> settler", function() {deepEqual( Stem("settlers"), "settler");});
test("settles -> settl", function() {deepEqual( Stem("settles"), "settl");});
test("settling -> settl", function() {deepEqual( Stem("settling"), "settl");});
test("seul -> seul", function() {deepEqual( Stem("seul"), "seul");});
test("sevastopol -> sevastopol", function() {deepEqual( Stem("sevastopol"), "sevastopol");});
test("seven -> seven", function() {deepEqual( Stem("seven"), "seven");});
test("sevenpence -> sevenp", function() {deepEqual( Stem("sevenpence"), "sevenp");});
test("sevens -> seven", function() {deepEqual( Stem("sevens"), "seven");});
test("seventeen -> seventeen", function() {deepEqual( Stem("seventeen"), "seventeen");});
test("seventeenth -> seventeenth", function() {deepEqual( Stem("seventeenth"), "seventeenth");});
test("seventh -> seventh", function() {deepEqual( Stem("seventh"), "seventh");});
test("seventhly -> seventh", function() {deepEqual( Stem("seventhly"), "seventh");});
test("seventy -> seventi", function() {deepEqual( Stem("seventy"), "seventi");});
test("seventysix -> seventysix", function() {deepEqual( Stem("seventysix"), "seventysix");});
test("sever -> sever", function() {deepEqual( Stem("sever"), "sever");});
test("severa -> severa", function() {deepEqual( Stem("severa"), "severa");});
test("several -> sever", function() {deepEqual( Stem("several"), "sever");});
test("severally -> sever", function() {deepEqual( Stem("severally"), "sever");});
test("severe -> sever", function() {deepEqual( Stem("severe"), "sever");});
test("severed -> sever", function() {deepEqual( Stem("severed"), "sever");});
test("severely -> sever", function() {deepEqual( Stem("severely"), "sever");});
test("severer -> sever", function() {deepEqual( Stem("severer"), "sever");});
test("severest -> severest", function() {deepEqual( Stem("severest"), "severest");});
test("severity -> sever", function() {deepEqual( Stem("severity"), "sever");});
test("severn -> severn", function() {deepEqual( Stem("severn"), "severn");});
test("sevres -> sevr", function() {deepEqual( Stem("sevres"), "sevr");});
test("sew -> sew", function() {deepEqual( Stem("sew"), "sew");});
test("sewed -> sew", function() {deepEqual( Stem("sewed"), "sew");});
test("sewerage -> sewerag", function() {deepEqual( Stem("sewerage"), "sewerag");});
test("sewerely -> sewer", function() {deepEqual( Stem("sewerely"), "sewer");});
test("sewing -> sew", function() {deepEqual( Stem("sewing"), "sew");});
test("sex -> sex", function() {deepEqual( Stem("sex"), "sex");});
test("sexes -> sex", function() {deepEqual( Stem("sexes"), "sex");});
test("sexton -> sexton", function() {deepEqual( Stem("sexton"), "sexton");});
test("sextus -> sextus", function() {deepEqual( Stem("sextus"), "sextus");});
test("sexty -> sexti", function() {deepEqual( Stem("sexty"), "sexti");});
test("seychelle -> seychell", function() {deepEqual( Stem("seychelle"), "seychell");});
test("seychelles -> seychell", function() {deepEqual( Stem("seychelles"), "seychell");});
test("sh -> sh", function() {deepEqual( Stem("sh"), "sh");});
test("sha -> sha", function() {deepEqual( Stem("sha"), "sha");});
test("shabbily -> shabbili", function() {deepEqual( Stem("shabbily"), "shabbili");});
test("shabbiness -> shabbi", function() {deepEqual( Stem("shabbiness"), "shabbi");});
test("shabby -> shabbi", function() {deepEqual( Stem("shabby"), "shabbi");});
test("shade -> shade", function() {deepEqual( Stem("shade"), "shade");});
test("shaded -> shade", function() {deepEqual( Stem("shaded"), "shade");});
test("shades -> shade", function() {deepEqual( Stem("shades"), "shade");});
test("shading -> shade", function() {deepEqual( Stem("shading"), "shade");});
test("shadow -> shadow", function() {deepEqual( Stem("shadow"), "shadow");});
test("shadowed -> shadow", function() {deepEqual( Stem("shadowed"), "shadow");});
test("shadowless -> shadowless", function() {deepEqual( Stem("shadowless"), "shadowless");});
test("shadows -> shadow", function() {deepEqual( Stem("shadows"), "shadow");});
test("shadowy -> shadowi", function() {deepEqual( Stem("shadowy"), "shadowi");});
test("shady -> shadi", function() {deepEqual( Stem("shady"), "shadi");});
test("shaft -> shaft", function() {deepEqual( Stem("shaft"), "shaft");});
test("shafts -> shaft", function() {deepEqual( Stem("shafts"), "shaft");});
test("shaggy -> shaggi", function() {deepEqual( Stem("shaggy"), "shaggi");});
test("shak -> shak", function() {deepEqual( Stem("shak"), "shak");});
test("shake -> shake", function() {deepEqual( Stem("shake"), "shake");});
test("shaken -> shaken", function() {deepEqual( Stem("shaken"), "shaken");});
test("shakes -> shake", function() {deepEqual( Stem("shakes"), "shake");});
test("shakespeare -> shakespear", function() {deepEqual( Stem("shakespeare"), "shakespear");});
test("shaking -> shake", function() {deepEqual( Stem("shaking"), "shake");});
test("shakings -> shake", function() {deepEqual( Stem("shakings"), "shake");});
test("shakspeare -> shakspear", function() {deepEqual( Stem("shakspeare"), "shakspear");});
test("shal -> shal", function() {deepEqual( Stem("shal"), "shal");});
test("shall -> shall", function() {deepEqual( Stem("shall"), "shall");});
test("shallow -> shallow", function() {deepEqual( Stem("shallow"), "shallow");});
test("shallowest -> shallowest", function() {deepEqual( Stem("shallowest"), "shallowest");});
test("shallows -> shallow", function() {deepEqual( Stem("shallows"), "shallow");});
test("shalt -> shalt", function() {deepEqual( Stem("shalt"), "shalt");});
test("sham -> sham", function() {deepEqual( Stem("sham"), "sham");});
test("shambled -> shambl", function() {deepEqual( Stem("shambled"), "shambl");});
test("shambles -> shambl", function() {deepEqual( Stem("shambles"), "shambl");});
test("shambling -> shambl", function() {deepEqual( Stem("shambling"), "shambl");});
test("shame -> shame", function() {deepEqual( Stem("shame"), "shame");});
test("shamed -> shame", function() {deepEqual( Stem("shamed"), "shame");});
test("shamefaced -> shamefac", function() {deepEqual( Stem("shamefaced"), "shamefac");});
test("shameful -> shame", function() {deepEqual( Stem("shameful"), "shame");});
test("shamefully -> shame", function() {deepEqual( Stem("shamefully"), "shame");});
test("shameless -> shameless", function() {deepEqual( Stem("shameless"), "shameless");});
test("shamelessly -> shameless", function() {deepEqual( Stem("shamelessly"), "shameless");});
test("shamming -> sham", function() {deepEqual( Stem("shamming"), "sham");});
test("shan -> shan", function() {deepEqual( Stem("shan"), "shan");});
test("shanks -> shank", function() {deepEqual( Stem("shanks"), "shank");});
test("shanties -> shanti", function() {deepEqual( Stem("shanties"), "shanti");});
test("shape -> shape", function() {deepEqual( Stem("shape"), "shape");});
test("shaped -> shape", function() {deepEqual( Stem("shaped"), "shape");});
test("shapeless -> shapeless", function() {deepEqual( Stem("shapeless"), "shapeless");});
test("shapely -> shape", function() {deepEqual( Stem("shapely"), "shape");});
test("shapes -> shape", function() {deepEqual( Stem("shapes"), "shape");});
test("shaping -> shape", function() {deepEqual( Stem("shaping"), "shape");});
test("shar -> shar", function() {deepEqual( Stem("shar"), "shar");});
test("share -> share", function() {deepEqual( Stem("share"), "share");});
test("shared -> share", function() {deepEqual( Stem("shared"), "share");});
test("shareholder -> sharehold", function() {deepEqual( Stem("shareholder"), "sharehold");});
test("shareholders -> sharehold", function() {deepEqual( Stem("shareholders"), "sharehold");});
test("sharer -> sharer", function() {deepEqual( Stem("sharer"), "sharer");});
test("shares -> share", function() {deepEqual( Stem("shares"), "share");});
test("sharing -> share", function() {deepEqual( Stem("sharing"), "share");});
test("shark -> shark", function() {deepEqual( Stem("shark"), "shark");});
test("sharking -> shark", function() {deepEqual( Stem("sharking"), "shark");});
test("sharks -> shark", function() {deepEqual( Stem("sharks"), "shark");});
test("sharmer -> sharmer", function() {deepEqual( Stem("sharmer"), "sharmer");});
test("sharp -> sharp", function() {deepEqual( Stem("sharp"), "sharp");});
test("sharpen -> sharpen", function() {deepEqual( Stem("sharpen"), "sharpen");});
test("sharpened -> sharpen", function() {deepEqual( Stem("sharpened"), "sharpen");});
test("sharpening -> sharpen", function() {deepEqual( Stem("sharpening"), "sharpen");});
test("sharpens -> sharpen", function() {deepEqual( Stem("sharpens"), "sharpen");});
test("sharper -> sharper", function() {deepEqual( Stem("sharper"), "sharper");});
test("sharpers -> sharper", function() {deepEqual( Stem("sharpers"), "sharper");});
test("sharpest -> sharpest", function() {deepEqual( Stem("sharpest"), "sharpest");});
test("sharply -> sharpli", function() {deepEqual( Stem("sharply"), "sharpli");});
test("sharpness -> sharp", function() {deepEqual( Stem("sharpness"), "sharp");});
test("sharpshooters -> sharpshoot", function() {deepEqual( Stem("sharpshooters"), "sharpshoot");});
test("shattered -> shatter", function() {deepEqual( Stem("shattered"), "shatter");});
test("shave -> shave", function() {deepEqual( Stem("shave"), "shave");});
test("shaved -> shave", function() {deepEqual( Stem("shaved"), "shave");});
test("shaven -> shaven", function() {deepEqual( Stem("shaven"), "shaven");});
test("shaver -> shaver", function() {deepEqual( Stem("shaver"), "shaver");});
test("shaves -> shave", function() {deepEqual( Stem("shaves"), "shave");});
test("shaving -> shave", function() {deepEqual( Stem("shaving"), "shave");});
test("shaw -> shaw", function() {deepEqual( Stem("shaw"), "shaw");});
test("shawl -> shawl", function() {deepEqual( Stem("shawl"), "shawl");});
test("shawls -> shawl", function() {deepEqual( Stem("shawls"), "shawl");});
test("she -> she", function() {deepEqual( Stem("she"), "she");});
test("sheake -> sheak", function() {deepEqual( Stem("sheake"), "sheak");});
test("sheame -> sheam", function() {deepEqual( Stem("sheame"), "sheam");});
test("shearing -> shear", function() {deepEqual( Stem("shearing"), "shear");});
test("sheath -> sheath", function() {deepEqual( Stem("sheath"), "sheath");});
test("sheaves -> sheav", function() {deepEqual( Stem("sheaves"), "sheav");});
test("shed -> shed", function() {deepEqual( Stem("shed"), "shed");});
test("shedding -> shed", function() {deepEqual( Stem("shedding"), "shed");});
test("sheds -> shed", function() {deepEqual( Stem("sheds"), "shed");});
test("sheen -> sheen", function() {deepEqual( Stem("sheen"), "sheen");});
test("sheep -> sheep", function() {deepEqual( Stem("sheep"), "sheep");});
test("sheepish -> sheepish", function() {deepEqual( Stem("sheepish"), "sheepish");});
test("sheepskin -> sheepskin", function() {deepEqual( Stem("sheepskin"), "sheepskin");});
test("sheer -> sheer", function() {deepEqual( Stem("sheer"), "sheer");});
test("sheet -> sheet", function() {deepEqual( Stem("sheet"), "sheet");});
test("sheets -> sheet", function() {deepEqual( Stem("sheets"), "sheet");});
test("sheik -> sheik", function() {deepEqual( Stem("sheik"), "sheik");});
test("shelf -> shelf", function() {deepEqual( Stem("shelf"), "shelf");});
test("shell -> shell", function() {deepEqual( Stem("shell"), "shell");});
test("shelley -> shelley", function() {deepEqual( Stem("shelley"), "shelley");});
test("shellfish -> shellfish", function() {deepEqual( Stem("shellfish"), "shellfish");});
test("shellfuls -> shell", function() {deepEqual( Stem("shellfuls"), "shell");});
test("shells -> shell", function() {deepEqual( Stem("shells"), "shell");});
test("shelly -> shelli", function() {deepEqual( Stem("shelly"), "shelli");});
test("shelopaev -> shelopaev", function() {deepEqual( Stem("shelopaev"), "shelopaev");});
test("shelter -> shelter", function() {deepEqual( Stem("shelter"), "shelter");});
test("sheltered -> shelter", function() {deepEqual( Stem("sheltered"), "shelter");});
test("sheltering -> shelter", function() {deepEqual( Stem("sheltering"), "shelter");});
test("shelters -> shelter", function() {deepEqual( Stem("shelters"), "shelter");});
test("shelves -> shelv", function() {deepEqual( Stem("shelves"), "shelv");});
test("shelving -> shelv", function() {deepEqual( Stem("shelving"), "shelv");});
test("shepherd -> shepherd", function() {deepEqual( Stem("shepherd"), "shepherd");});
test("shepherdess -> shepherdess", function() {deepEqual( Stem("shepherdess"), "shepherdess");});
test("shepherdesses -> shepherdess", function() {deepEqual( Stem("shepherdesses"), "shepherdess");});
test("shepherds -> shepherd", function() {deepEqual( Stem("shepherds"), "shepherd");});
test("sheriff -> sheriff", function() {deepEqual( Stem("sheriff"), "sheriff");});
test("sherry -> sherri", function() {deepEqual( Stem("sherry"), "sherri");});
test("shetland -> shetland", function() {deepEqual( Stem("shetland"), "shetland");});
test("shh -> shh", function() {deepEqual( Stem("shh"), "shh");});
test("shibboleth -> shibboleth", function() {deepEqual( Stem("shibboleth"), "shibboleth");});
test("shied -> shi", function() {deepEqual( Stem("shied"), "shi");});
test("shield -> shield", function() {deepEqual( Stem("shield"), "shield");});
test("shielded -> shield", function() {deepEqual( Stem("shielded"), "shield");});
test("shielding -> shield", function() {deepEqual( Stem("shielding"), "shield");});
test("shields -> shield", function() {deepEqual( Stem("shields"), "shield");});
test("shies -> shi", function() {deepEqual( Stem("shies"), "shi");});
test("shift -> shift", function() {deepEqual( Stem("shift"), "shift");});
test("shifted -> shift", function() {deepEqual( Stem("shifted"), "shift");});
test("shifting -> shift", function() {deepEqual( Stem("shifting"), "shift");});
test("shiftings -> shift", function() {deepEqual( Stem("shiftings"), "shift");});
test("shifts -> shift", function() {deepEqual( Stem("shifts"), "shift");});
test("shil -> shil", function() {deepEqual( Stem("shil"), "shil");});
test("shilling -> shill", function() {deepEqual( Stem("shilling"), "shill");});
test("shillings -> shill", function() {deepEqual( Stem("shillings"), "shill");});
test("shin -> shin", function() {deepEqual( Stem("shin"), "shin");});
test("shine -> shine", function() {deepEqual( Stem("shine"), "shine");});
test("shines -> shine", function() {deepEqual( Stem("shines"), "shine");});
test("shingle -> shingl", function() {deepEqual( Stem("shingle"), "shingl");});
test("shining -> shine", function() {deepEqual( Stem("shining"), "shine");});
test("shiny -> shini", function() {deepEqual( Stem("shiny"), "shini");});
test("ship -> ship", function() {deepEqual( Stem("ship"), "ship");});
test("shipbuilder -> shipbuild", function() {deepEqual( Stem("shipbuilder"), "shipbuild");});
test("shiploads -> shipload", function() {deepEqual( Stem("shiploads"), "shipload");});
test("shipped -> ship", function() {deepEqual( Stem("shipped"), "ship");});
test("shipping -> ship", function() {deepEqual( Stem("shipping"), "ship");});
test("ships -> ship", function() {deepEqual( Stem("ships"), "ship");});
test("shipton -> shipton", function() {deepEqual( Stem("shipton"), "shipton");});
test("shipwreck -> shipwreck", function() {deepEqual( Stem("shipwreck"), "shipwreck");});
test("shipwrecked -> shipwreck", function() {deepEqual( Stem("shipwrecked"), "shipwreck");});
test("shipwrecks -> shipwreck", function() {deepEqual( Stem("shipwrecks"), "shipwreck");});
test("shire -> shire", function() {deepEqual( Stem("shire"), "shire");});
test("shirk -> shirk", function() {deepEqual( Stem("shirk"), "shirk");});
test("shirked -> shirk", function() {deepEqual( Stem("shirked"), "shirk");});
test("shirking -> shirk", function() {deepEqual( Stem("shirking"), "shirk");});
test("shirt -> shirt", function() {deepEqual( Stem("shirt"), "shirt");});
test("shirts -> shirt", function() {deepEqual( Stem("shirts"), "shirt");});
test("shiver -> shiver", function() {deepEqual( Stem("shiver"), "shiver");});
test("shivered -> shiver", function() {deepEqual( Stem("shivered"), "shiver");});
test("shivering -> shiver", function() {deepEqual( Stem("shivering"), "shiver");});
test("shivers -> shiver", function() {deepEqual( Stem("shivers"), "shiver");});
test("shoal -> shoal", function() {deepEqual( Stem("shoal"), "shoal");});
test("shoaler -> shoaler", function() {deepEqual( Stem("shoaler"), "shoaler");});
test("shoalness -> shoal", function() {deepEqual( Stem("shoalness"), "shoal");});
test("shoals -> shoal", function() {deepEqual( Stem("shoals"), "shoal");});
test("shock -> shock", function() {deepEqual( Stem("shock"), "shock");});
test("shocked -> shock", function() {deepEqual( Stem("shocked"), "shock");});
test("shocking -> shock", function() {deepEqual( Stem("shocking"), "shock");});
test("shockingly -> shock", function() {deepEqual( Stem("shockingly"), "shock");});
test("shocks -> shock", function() {deepEqual( Stem("shocks"), "shock");});
test("shod -> shod", function() {deepEqual( Stem("shod"), "shod");});
test("shoe -> shoe", function() {deepEqual( Stem("shoe"), "shoe");});
test("shoed -> sho", function() {deepEqual( Stem("shoed"), "sho");});
test("shoeless -> shoeless", function() {deepEqual( Stem("shoeless"), "shoeless");});
test("shoemaker -> shoemak", function() {deepEqual( Stem("shoemaker"), "shoemak");});
test("shoemakers -> shoemak", function() {deepEqual( Stem("shoemakers"), "shoemak");});
test("shoes -> shoe", function() {deepEqual( Stem("shoes"), "shoe");});
test("shone -> shone", function() {deepEqual( Stem("shone"), "shone");});
test("shongi -> shongi", function() {deepEqual( Stem("shongi"), "shongi");});
test("shoohoo -> shoohoo", function() {deepEqual( Stem("shoohoo"), "shoohoo");});
test("shook -> shook", function() {deepEqual( Stem("shook"), "shook");});
test("shoon -> shoon", function() {deepEqual( Stem("shoon"), "shoon");});
test("shoot -> shoot", function() {deepEqual( Stem("shoot"), "shoot");});
test("shooters -> shooter", function() {deepEqual( Stem("shooters"), "shooter");});
test("shooting -> shoot", function() {deepEqual( Stem("shooting"), "shoot");});
test("shoots -> shoot", function() {deepEqual( Stem("shoots"), "shoot");});
test("shop -> shop", function() {deepEqual( Stem("shop"), "shop");});
test("shopkeeper -> shopkeep", function() {deepEqual( Stem("shopkeeper"), "shopkeep");});
test("shopkeepers -> shopkeep", function() {deepEqual( Stem("shopkeepers"), "shopkeep");});
test("shopman -> shopman", function() {deepEqual( Stem("shopman"), "shopman");});
test("shopmen -> shopmen", function() {deepEqual( Stem("shopmen"), "shopmen");});
test("shopofwomen -> shopofwomen", function() {deepEqual( Stem("shopofwomen"), "shopofwomen");});
test("shops -> shop", function() {deepEqual( Stem("shops"), "shop");});
test("shore -> shore", function() {deepEqual( Stem("shore"), "shore");});
test("shoreham -> shoreham", function() {deepEqual( Stem("shoreham"), "shoreham");});
test("shores -> shore", function() {deepEqual( Stem("shores"), "shore");});
test("shorn -> shorn", function() {deepEqual( Stem("shorn"), "shorn");});
test("short -> short", function() {deepEqual( Stem("short"), "short");});
test("shortcoming -> shortcom", function() {deepEqual( Stem("shortcoming"), "shortcom");});
test("shortcomings -> shortcom", function() {deepEqual( Stem("shortcomings"), "shortcom");});
test("shorten -> shorten", function() {deepEqual( Stem("shorten"), "shorten");});
test("shortened -> shorten", function() {deepEqual( Stem("shortened"), "shorten");});
test("shortening -> shorten", function() {deepEqual( Stem("shortening"), "shorten");});
test("shortens -> shorten", function() {deepEqual( Stem("shortens"), "shorten");});
test("shorter -> shorter", function() {deepEqual( Stem("shorter"), "shorter");});
test("shortest -> shortest", function() {deepEqual( Stem("shortest"), "shortest");});
test("shortly -> short", function() {deepEqual( Stem("shortly"), "short");});
test("shortness -> short", function() {deepEqual( Stem("shortness"), "short");});
test("shorts -> short", function() {deepEqual( Stem("shorts"), "short");});
test("shot -> shot", function() {deepEqual( Stem("shot"), "shot");});
test("shots -> shot", function() {deepEqual( Stem("shots"), "shot");});
test("should -> should", function() {deepEqual( Stem("should"), "should");});
test("shoulder -> shoulder", function() {deepEqual( Stem("shoulder"), "shoulder");});
test("shouldered -> shoulder", function() {deepEqual( Stem("shouldered"), "shoulder");});
test("shouldering -> shoulder", function() {deepEqual( Stem("shouldering"), "shoulder");});
test("shoulders -> shoulder", function() {deepEqual( Stem("shoulders"), "shoulder");});
test("shouldest -> shouldest", function() {deepEqual( Stem("shouldest"), "shouldest");});
test("shouldn -> shouldn", function() {deepEqual( Stem("shouldn"), "shouldn");});
test("shouldst -> shouldst", function() {deepEqual( Stem("shouldst"), "shouldst");});
test("shout -> shout", function() {deepEqual( Stem("shout"), "shout");});
test("shouted -> shout", function() {deepEqual( Stem("shouted"), "shout");});
test("shouting -> shout", function() {deepEqual( Stem("shouting"), "shout");});
test("shouts -> shout", function() {deepEqual( Stem("shouts"), "shout");});
test("shove -> shove", function() {deepEqual( Stem("shove"), "shove");});
test("shoved -> shove", function() {deepEqual( Stem("shoved"), "shove");});
test("shovel -> shovel", function() {deepEqual( Stem("shovel"), "shovel");});
test("shoving -> shove", function() {deepEqual( Stem("shoving"), "shove");});
test("show -> show", function() {deepEqual( Stem("show"), "show");});
test("showd -> showd", function() {deepEqual( Stem("showd"), "showd");});
test("showed -> show", function() {deepEqual( Stem("showed"), "show");});
test("shower -> shower", function() {deepEqual( Stem("shower"), "shower");});
test("showered -> shower", function() {deepEqual( Stem("showered"), "shower");});
test("showering -> shower", function() {deepEqual( Stem("showering"), "shower");});
test("showers -> shower", function() {deepEqual( Stem("showers"), "shower");});
test("showery -> showeri", function() {deepEqual( Stem("showery"), "showeri");});
test("showing -> show", function() {deepEqual( Stem("showing"), "show");});
test("shown -> shown", function() {deepEqual( Stem("shown"), "shown");});
test("shows -> show", function() {deepEqual( Stem("shows"), "show");});
test("showy -> showi", function() {deepEqual( Stem("showy"), "showi");});
test("shrank -> shrank", function() {deepEqual( Stem("shrank"), "shrank");});
test("shreds -> shred", function() {deepEqual( Stem("shreds"), "shred");});
test("shrew -> shrew", function() {deepEqual( Stem("shrew"), "shrew");});
test("shrewd -> shrewd", function() {deepEqual( Stem("shrewd"), "shrewd");});
test("shrewdly -> shrewd", function() {deepEqual( Stem("shrewdly"), "shrewd");});
test("shrewdness -> shrewd", function() {deepEqual( Stem("shrewdness"), "shrewd");});
test("shriek -> shriek", function() {deepEqual( Stem("shriek"), "shriek");});
test("shrieked -> shriek", function() {deepEqual( Stem("shrieked"), "shriek");});
test("shrieking -> shriek", function() {deepEqual( Stem("shrieking"), "shriek");});
test("shrieks -> shriek", function() {deepEqual( Stem("shrieks"), "shriek");});
test("shrikes -> shrike", function() {deepEqual( Stem("shrikes"), "shrike");});
test("shrill -> shrill", function() {deepEqual( Stem("shrill"), "shrill");});
test("shrillest -> shrillest", function() {deepEqual( Stem("shrillest"), "shrillest");});
test("shrillness -> shrill", function() {deepEqual( Stem("shrillness"), "shrill");});
test("shrilly -> shrilli", function() {deepEqual( Stem("shrilly"), "shrilli");});
test("shrimp -> shrimp", function() {deepEqual( Stem("shrimp"), "shrimp");});
test("shrimps -> shrimp", function() {deepEqual( Stem("shrimps"), "shrimp");});
test("shrine -> shrine", function() {deepEqual( Stem("shrine"), "shrine");});
test("shrink -> shrink", function() {deepEqual( Stem("shrink"), "shrink");});
test("shrinking -> shrink", function() {deepEqual( Stem("shrinking"), "shrink");});
test("shrinks -> shrink", function() {deepEqual( Stem("shrinks"), "shrink");});
test("shrivel -> shrivel", function() {deepEqual( Stem("shrivel"), "shrivel");});
test("shrivelled -> shrivel", function() {deepEqual( Stem("shrivelled"), "shrivel");});
test("shropshire -> shropshir", function() {deepEqual( Stem("shropshire"), "shropshir");});
test("shroud -> shroud", function() {deepEqual( Stem("shroud"), "shroud");});
test("shrouded -> shroud", function() {deepEqual( Stem("shrouded"), "shroud");});
test("shrub -> shrub", function() {deepEqual( Stem("shrub"), "shrub");});
test("shrubberies -> shrubberi", function() {deepEqual( Stem("shrubberies"), "shrubberi");});
test("shrubbery -> shrubberi", function() {deepEqual( Stem("shrubbery"), "shrubberi");});
test("shrubs -> shrub", function() {deepEqual( Stem("shrubs"), "shrub");});
test("shrug -> shrug", function() {deepEqual( Stem("shrug"), "shrug");});
test("shrugged -> shrug", function() {deepEqual( Stem("shrugged"), "shrug");});
test("shrugging -> shrug", function() {deepEqual( Stem("shrugging"), "shrug");});
test("shrugs -> shrug", function() {deepEqual( Stem("shrugs"), "shrug");});
test("shrunk -> shrunk", function() {deepEqual( Stem("shrunk"), "shrunk");});
test("shrunken -> shrunken", function() {deepEqual( Stem("shrunken"), "shrunken");});
test("shudder -> shudder", function() {deepEqual( Stem("shudder"), "shudder");});
test("shuddered -> shudder", function() {deepEqual( Stem("shuddered"), "shudder");});
test("shuddering -> shudder", function() {deepEqual( Stem("shuddering"), "shudder");});
test("shudders -> shudder", function() {deepEqual( Stem("shudders"), "shudder");});
test("shuffle -> shuffl", function() {deepEqual( Stem("shuffle"), "shuffl");});
test("shuffled -> shuffl", function() {deepEqual( Stem("shuffled"), "shuffl");});
test("shufflers -> shuffler", function() {deepEqual( Stem("shufflers"), "shuffler");});
test("shuffles -> shuffl", function() {deepEqual( Stem("shuffles"), "shuffl");});
test("shuffling -> shuffl", function() {deepEqual( Stem("shuffling"), "shuffl");});
test("shufflings -> shuffl", function() {deepEqual( Stem("shufflings"), "shuffl");});
test("shuflle -> shufll", function() {deepEqual( Stem("shuflle"), "shufll");});
test("shun -> shun", function() {deepEqual( Stem("shun"), "shun");});
test("shunned -> shun", function() {deepEqual( Stem("shunned"), "shun");});
test("shunning -> shun", function() {deepEqual( Stem("shunning"), "shun");});
test("shut -> shut", function() {deepEqual( Stem("shut"), "shut");});
test("shuts -> shut", function() {deepEqual( Stem("shuts"), "shut");});
test("shutter -> shutter", function() {deepEqual( Stem("shutter"), "shutter");});
test("shutters -> shutter", function() {deepEqual( Stem("shutters"), "shutter");});
test("shutting -> shut", function() {deepEqual( Stem("shutting"), "shut");});
test("shy -> shi", function() {deepEqual( Stem("shy"), "shi");});
test("shyer -> shyer", function() {deepEqual( Stem("shyer"), "shyer");});
test("shyest -> shyest", function() {deepEqual( Stem("shyest"), "shyest");});
test("shylock -> shylock", function() {deepEqual( Stem("shylock"), "shylock");});
test("shyly -> shyli", function() {deepEqual( Stem("shyly"), "shyli");});
test("shyness -> shyness", function() {deepEqual( Stem("shyness"), "shyness");});
test("si -> si", function() {deepEqual( Stem("si"), "si");});
test("siamese -> siames", function() {deepEqual( Stem("siamese"), "siames");});
test("siberia -> siberia", function() {deepEqual( Stem("siberia"), "siberia");});
test("siberian -> siberian", function() {deepEqual( Stem("siberian"), "siberian");});
test("sich -> sich", function() {deepEqual( Stem("sich"), "sich");});
test("sick -> sick", function() {deepEqual( Stem("sick"), "sick");});
test("sickened -> sicken", function() {deepEqual( Stem("sickened"), "sicken");});
test("sickening -> sicken", function() {deepEqual( Stem("sickening"), "sicken");});
test("sickens -> sicken", function() {deepEqual( Stem("sickens"), "sicken");});
test("sickliness -> sickli", function() {deepEqual( Stem("sickliness"), "sickli");});
test("sickly -> sick", function() {deepEqual( Stem("sickly"), "sick");});
test("sickness -> sick", function() {deepEqual( Stem("sickness"), "sick");});
test("side -> side", function() {deepEqual( Stem("side"), "side");});
test("sideboard -> sideboard", function() {deepEqual( Stem("sideboard"), "sideboard");});
test("sided -> side", function() {deepEqual( Stem("sided"), "side");});
test("sidelong -> sidelong", function() {deepEqual( Stem("sidelong"), "sidelong");});
test("sides -> side", function() {deepEqual( Stem("sides"), "side");});
test("sideway -> sideway", function() {deepEqual( Stem("sideway"), "sideway");});
test("sideways -> sideway", function() {deepEqual( Stem("sideways"), "sideway");});
test("sidewise -> sidewis", function() {deepEqual( Stem("sidewise"), "sidewis");});
test("sidings -> side", function() {deepEqual( Stem("sidings"), "side");});
test("sidle -> sidl", function() {deepEqual( Stem("sidle"), "sidl");});
test("sidled -> sidl", function() {deepEqual( Stem("sidled"), "sidl");});
test("sidles -> sidl", function() {deepEqual( Stem("sidles"), "sidl");});
test("sidling -> sidl", function() {deepEqual( Stem("sidling"), "sidl");});
test("siege -> sieg", function() {deepEqual( Stem("siege"), "sieg");});
test("sierra -> sierra", function() {deepEqual( Stem("sierra"), "sierra");});
test("sieve -> siev", function() {deepEqual( Stem("sieve"), "siev");});
test("sift -> sift", function() {deepEqual( Stem("sift"), "sift");});
test("sifter -> sifter", function() {deepEqual( Stem("sifter"), "sifter");});
test("sigh -> sigh", function() {deepEqual( Stem("sigh"), "sigh");});
test("sighed -> sigh", function() {deepEqual( Stem("sighed"), "sigh");});
test("sighing -> sigh", function() {deepEqual( Stem("sighing"), "sigh");});
test("sighs -> sigh", function() {deepEqual( Stem("sighs"), "sigh");});
test("sight -> sight", function() {deepEqual( Stem("sight"), "sight");});
test("sighted -> sight", function() {deepEqual( Stem("sighted"), "sight");});
test("sightedness -> sighted", function() {deepEqual( Stem("sightedness"), "sighted");});
test("sightless -> sightless", function() {deepEqual( Stem("sightless"), "sightless");});
test("sights -> sight", function() {deepEqual( Stem("sights"), "sight");});
test("sightseer -> sightseer", function() {deepEqual( Stem("sightseer"), "sightseer");});
test("sign -> sign", function() {deepEqual( Stem("sign"), "sign");});
test("signal -> signal", function() {deepEqual( Stem("signal"), "signal");});
test("signalised -> signalis", function() {deepEqual( Stem("signalised"), "signalis");});
test("signalize -> signal", function() {deepEqual( Stem("signalize"), "signal");});
test("signalling -> signal", function() {deepEqual( Stem("signalling"), "signal");});
test("signally -> signal", function() {deepEqual( Stem("signally"), "signal");});
test("signals -> signal", function() {deepEqual( Stem("signals"), "signal");});
test("signature -> signatur", function() {deepEqual( Stem("signature"), "signatur");});
test("signatures -> signatur", function() {deepEqual( Stem("signatures"), "signatur");});
test("signed -> sign", function() {deepEqual( Stem("signed"), "sign");});
test("significance -> signific", function() {deepEqual( Stem("significance"), "signific");});
test("significancy -> signific", function() {deepEqual( Stem("significancy"), "signific");});
test("significant -> signific", function() {deepEqual( Stem("significant"), "signific");});
test("significantly -> signific", function() {deepEqual( Stem("significantly"), "signific");});
test("signification -> signif", function() {deepEqual( Stem("signification"), "signif");});
test("signified -> signifi", function() {deepEqual( Stem("signified"), "signifi");});
test("signifies -> signifi", function() {deepEqual( Stem("signifies"), "signifi");});
test("signifieth -> signifieth", function() {deepEqual( Stem("signifieth"), "signifieth");});
test("signify -> signifi", function() {deepEqual( Stem("signify"), "signifi");});
test("signifying -> signifi", function() {deepEqual( Stem("signifying"), "signifi");});
test("signing -> sign", function() {deepEqual( Stem("signing"), "sign");});
test("signoritas -> signorita", function() {deepEqual( Stem("signoritas"), "signorita");});
test("signs -> sign", function() {deepEqual( Stem("signs"), "sign");});
test("sike -> sike", function() {deepEqual( Stem("sike"), "sike");});
test("silence -> silenc", function() {deepEqual( Stem("silence"), "silenc");});
test("silenced -> silenc", function() {deepEqual( Stem("silenced"), "silenc");});
test("silencing -> silenc", function() {deepEqual( Stem("silencing"), "silenc");});
test("silent -> silent", function() {deepEqual( Stem("silent"), "silent");});
test("silently -> silent", function() {deepEqual( Stem("silently"), "silent");});
test("silex -> silex", function() {deepEqual( Stem("silex"), "silex");});
test("siliceous -> silic", function() {deepEqual( Stem("siliceous"), "silic");});
test("silicified -> silicifi", function() {deepEqual( Stem("silicified"), "silicifi");});
test("silk -> silk", function() {deepEqual( Stem("silk"), "silk");});
test("silken -> silken", function() {deepEqual( Stem("silken"), "silken");});
test("silkiness -> silki", function() {deepEqual( Stem("silkiness"), "silki");});
test("silks -> silk", function() {deepEqual( Stem("silks"), "silk");});
test("silkworm -> silkworm", function() {deepEqual( Stem("silkworm"), "silkworm");});
test("silky -> silki", function() {deepEqual( Stem("silky"), "silki");});
test("sill -> sill", function() {deepEqual( Stem("sill"), "sill");});
test("sillier -> sillier", function() {deepEqual( Stem("sillier"), "sillier");});
test("sillies -> silli", function() {deepEqual( Stem("sillies"), "silli");});
test("silliest -> silliest", function() {deepEqual( Stem("silliest"), "silliest");});
test("silliman -> silliman", function() {deepEqual( Stem("silliman"), "silliman");});
test("silliness -> silli", function() {deepEqual( Stem("silliness"), "silli");});
test("sills -> sill", function() {deepEqual( Stem("sills"), "sill");});
test("silly -> silli", function() {deepEqual( Stem("silly"), "silli");});
test("silurian -> silurian", function() {deepEqual( Stem("silurian"), "silurian");});
test("silurus -> silurus", function() {deepEqual( Stem("silurus"), "silurus");});
test("silver -> silver", function() {deepEqual( Stem("silver"), "silver");});
test("silverbridge -> silverbridg", function() {deepEqual( Stem("silverbridge"), "silverbridg");});
test("silvered -> silver", function() {deepEqual( Stem("silvered"), "silver");});
test("silversmith -> silversmith", function() {deepEqual( Stem("silversmith"), "silversmith");});
test("silvery -> silveri", function() {deepEqual( Stem("silvery"), "silveri");});
test("silworth -> silworth", function() {deepEqual( Stem("silworth"), "silworth");});
test("similar -> similar", function() {deepEqual( Stem("similar"), "similar");});
test("similarity -> similar", function() {deepEqual( Stem("similarity"), "similar");});
test("similarly -> similar", function() {deepEqual( Stem("similarly"), "similar");});
test("simile -> simil", function() {deepEqual( Stem("simile"), "simil");});
test("similes -> simil", function() {deepEqual( Stem("similes"), "simil");});
test("similitude -> similitud", function() {deepEqual( Stem("similitude"), "similitud");});
test("simmering -> simmer", function() {deepEqual( Stem("simmering"), "simmer");});
test("simmonds -> simmond", function() {deepEqual( Stem("simmonds"), "simmond");});
test("simper -> simper", function() {deepEqual( Stem("simper"), "simper");});
test("simpered -> simper", function() {deepEqual( Stem("simpered"), "simper");});
test("simpering -> simper", function() {deepEqual( Stem("simpering"), "simper");});
test("simple -> simpl", function() {deepEqual( Stem("simple"), "simpl");});
test("simpler -> simpler", function() {deepEqual( Stem("simpler"), "simpler");});
test("simplest -> simplest", function() {deepEqual( Stem("simplest"), "simplest");});
test("simpleton -> simpleton", function() {deepEqual( Stem("simpleton"), "simpleton");});
test("simpletons -> simpleton", function() {deepEqual( Stem("simpletons"), "simpleton");});
test("simplex -> simplex", function() {deepEqual( Stem("simplex"), "simplex");});
test("simplicity -> simplic", function() {deepEqual( Stem("simplicity"), "simplic");});
test("simplified -> simplifi", function() {deepEqual( Stem("simplified"), "simplifi");});
test("simplon -> simplon", function() {deepEqual( Stem("simplon"), "simplon");});
test("simply -> simpli", function() {deepEqual( Stem("simply"), "simpli");});
test("simpson -> simpson", function() {deepEqual( Stem("simpson"), "simpson");});
test("simul -> simul", function() {deepEqual( Stem("simul"), "simul");});
test("simultaneous -> simultan", function() {deepEqual( Stem("simultaneous"), "simultan");});
test("simultaneously -> simultan", function() {deepEqual( Stem("simultaneously"), "simultan");});
test("sin -> sin", function() {deepEqual( Stem("sin"), "sin");});
test("sinai -> sinai", function() {deepEqual( Stem("sinai"), "sinai");});
test("sinbad -> sinbad", function() {deepEqual( Stem("sinbad"), "sinbad");});
test("since -> sinc", function() {deepEqual( Stem("since"), "sinc");});
test("sincere -> sincer", function() {deepEqual( Stem("sincere"), "sincer");});
test("sincerely -> sincer", function() {deepEqual( Stem("sincerely"), "sincer");});
test("sincerest -> sincerest", function() {deepEqual( Stem("sincerest"), "sincerest");});
test("sincerity -> sincer", function() {deepEqual( Stem("sincerity"), "sincer");});
test("sinecure -> sinecur", function() {deepEqual( Stem("sinecure"), "sinecur");});
test("sinew -> sinew", function() {deepEqual( Stem("sinew"), "sinew");});
test("sinews -> sinew", function() {deepEqual( Stem("sinews"), "sinew");});
test("sinewy -> sinewi", function() {deepEqual( Stem("sinewy"), "sinewi");});
test("sinful -> sin", function() {deepEqual( Stem("sinful"), "sin");});
test("sinfulness -> sin", function() {deepEqual( Stem("sinfulness"), "sin");});
test("sing -> sing", function() {deepEqual( Stem("sing"), "sing");});
test("singapore -> singapor", function() {deepEqual( Stem("singapore"), "singapor");});
test("singed -> sing", function() {deepEqual( Stem("singed"), "sing");});
test("singeing -> sing", function() {deepEqual( Stem("singeing"), "sing");});
test("singer -> singer", function() {deepEqual( Stem("singer"), "singer");});
test("singers -> singer", function() {deepEqual( Stem("singers"), "singer");});
test("singing -> sing", function() {deepEqual( Stem("singing"), "sing");});
test("single -> singl", function() {deepEqual( Stem("single"), "singl");});
test("singleness -> singl", function() {deepEqual( Stem("singleness"), "singl");});
test("singling -> singl", function() {deepEqual( Stem("singling"), "singl");});
test("singly -> singl", function() {deepEqual( Stem("singly"), "singl");});
test("sings -> sing", function() {deepEqual( Stem("sings"), "sing");});
test("singula -> singula", function() {deepEqual( Stem("singula"), "singula");});
test("singular -> singular", function() {deepEqual( Stem("singular"), "singular");});
test("singularities -> singular", function() {deepEqual( Stem("singularities"), "singular");});
test("singularity -> singular", function() {deepEqual( Stem("singularity"), "singular");});
test("singularly -> singular", function() {deepEqual( Stem("singularly"), "singular");});
test("sinister -> sinist", function() {deepEqual( Stem("sinister"), "sinist");});
test("sink -> sink", function() {deepEqual( Stem("sink"), "sink");});
test("sinking -> sink", function() {deepEqual( Stem("sinking"), "sink");});
test("sinks -> sink", function() {deepEqual( Stem("sinks"), "sink");});
test("sinless -> sinless", function() {deepEqual( Stem("sinless"), "sinless");});
test("sinlessly -> sinless", function() {deepEqual( Stem("sinlessly"), "sinless");});
test("sinned -> sin", function() {deepEqual( Stem("sinned"), "sin");});
test("sinner -> sinner", function() {deepEqual( Stem("sinner"), "sinner");});
test("sinners -> sinner", function() {deepEqual( Stem("sinners"), "sinner");});
test("sinning -> sin", function() {deepEqual( Stem("sinning"), "sin");});
test("sins -> sin", function() {deepEqual( Stem("sins"), "sin");});
test("sinuous -> sinuous", function() {deepEqual( Stem("sinuous"), "sinuous");});
test("sip -> sip", function() {deepEqual( Stem("sip"), "sip");});
test("siphon -> siphon", function() {deepEqual( Stem("siphon"), "siphon");});
test("sipped -> sip", function() {deepEqual( Stem("sipped"), "sip");});
test("sipping -> sip", function() {deepEqual( Stem("sipping"), "sip");});
test("sips -> sip", function() {deepEqual( Stem("sips"), "sip");});
test("sir -> sir", function() {deepEqual( Stem("sir"), "sir");});
test("sire -> sire", function() {deepEqual( Stem("sire"), "sire");});
test("siren -> siren", function() {deepEqual( Stem("siren"), "siren");});
test("sirocco -> sirocco", function() {deepEqual( Stem("sirocco"), "sirocco");});
test("sirrah -> sirrah", function() {deepEqual( Stem("sirrah"), "sirrah");});
test("sister -> sister", function() {deepEqual( Stem("sister"), "sister");});
test("sisterhood -> sisterhood", function() {deepEqual( Stem("sisterhood"), "sisterhood");});
test("sisterly -> sister", function() {deepEqual( Stem("sisterly"), "sister");});
test("sisters -> sister", function() {deepEqual( Stem("sisters"), "sister");});
test("sistine -> sistin", function() {deepEqual( Stem("sistine"), "sistin");});
test("sit -> sit", function() {deepEqual( Stem("sit"), "sit");});
test("site -> site", function() {deepEqual( Stem("site"), "site");});
test("sites -> site", function() {deepEqual( Stem("sites"), "site");});
test("sitiwation -> sitiw", function() {deepEqual( Stem("sitiwation"), "sitiw");});
test("sitiwations -> sitiw", function() {deepEqual( Stem("sitiwations"), "sitiw");});
test("sits -> sit", function() {deepEqual( Stem("sits"), "sit");});
test("sitter -> sitter", function() {deepEqual( Stem("sitter"), "sitter");});
test("sitters -> sitter", function() {deepEqual( Stem("sitters"), "sitter");});
test("sittin -> sittin", function() {deepEqual( Stem("sittin"), "sittin");});
test("sitting -> sit", function() {deepEqual( Stem("sitting"), "sit");});
test("sittings -> sit", function() {deepEqual( Stem("sittings"), "sit");});
test("situ -> situ", function() {deepEqual( Stem("situ"), "situ");});
test("situate -> situat", function() {deepEqual( Stem("situate"), "situat");});
test("situated -> situat", function() {deepEqual( Stem("situated"), "situat");});
test("situation -> situat", function() {deepEqual( Stem("situation"), "situat");});
test("situations -> situat", function() {deepEqual( Stem("situations"), "situat");});
test("siunmerson -> siunmerson", function() {deepEqual( Stem("siunmerson"), "siunmerson");});
test("sivatherium -> sivatherium", function() {deepEqual( Stem("sivatherium"), "sivatherium");});
test("six -> six", function() {deepEqual( Stem("six"), "six");});
test("sixes -> six", function() {deepEqual( Stem("sixes"), "six");});
test("sixieme -> sixiem", function() {deepEqual( Stem("sixieme"), "sixiem");});
test("sixpen -> sixpen", function() {deepEqual( Stem("sixpen"), "sixpen");});
test("sixpence -> sixpenc", function() {deepEqual( Stem("sixpence"), "sixpenc");});
test("sixpences -> sixpenc", function() {deepEqual( Stem("sixpences"), "sixpenc");});
test("sixpenny -> sixpenni", function() {deepEqual( Stem("sixpenny"), "sixpenni");});
test("sixteen -> sixteen", function() {deepEqual( Stem("sixteen"), "sixteen");});
test("sixteenth -> sixteenth", function() {deepEqual( Stem("sixteenth"), "sixteenth");});
test("sixth -> sixth", function() {deepEqual( Stem("sixth"), "sixth");});
test("sixthly -> sixth", function() {deepEqual( Stem("sixthly"), "sixth");});
test("sixty -> sixti", function() {deepEqual( Stem("sixty"), "sixti");});
test("size -> size", function() {deepEqual( Stem("size"), "size");});
test("sized -> size", function() {deepEqual( Stem("sized"), "size");});
test("sizes -> size", function() {deepEqual( Stem("sizes"), "size");});
test("skampling -> skampl", function() {deepEqual( Stem("skampling"), "skampl");});
test("skate -> skate", function() {deepEqual( Stem("skate"), "skate");});
test("skaters -> skater", function() {deepEqual( Stem("skaters"), "skater");});
test("skating -> skate", function() {deepEqual( Stem("skating"), "skate");});
test("skeen -> skeen", function() {deepEqual( Stem("skeen"), "skeen");});
test("skein -> skein", function() {deepEqual( Stem("skein"), "skein");});
test("skeleto -> skeleto", function() {deepEqual( Stem("skeleto"), "skeleto");});
test("skeleton -> skeleton", function() {deepEqual( Stem("skeleton"), "skeleton");});
test("skeletons -> skeleton", function() {deepEqual( Stem("skeletons"), "skeleton");});
test("sketch -> sketch", function() {deepEqual( Stem("sketch"), "sketch");});
test("sketched -> sketch", function() {deepEqual( Stem("sketched"), "sketch");});
test("sketches -> sketch", function() {deepEqual( Stem("sketches"), "sketch");});
test("sketchily -> sketchili", function() {deepEqual( Stem("sketchily"), "sketchili");});
test("sketching -> sketch", function() {deepEqual( Stem("sketching"), "sketch");});
test("skewer -> skewer", function() {deepEqual( Stem("skewer"), "skewer");});
test("skiddaw -> skiddaw", function() {deepEqual( Stem("skiddaw"), "skiddaw");});
test("skies -> sky", function() {deepEqual( Stem("skies"), "sky");});
test("skilful -> skil", function() {deepEqual( Stem("skilful"), "skil");});
test("skilfully -> skil", function() {deepEqual( Stem("skilfully"), "skil");});
test("skilfulness -> skil", function() {deepEqual( Stem("skilfulness"), "skil");});
test("skill -> skill", function() {deepEqual( Stem("skill"), "skill");});
test("skilled -> skill", function() {deepEqual( Stem("skilled"), "skill");});
test("skilly -> skilli", function() {deepEqual( Stem("skilly"), "skilli");});
test("skim -> skim", function() {deepEqual( Stem("skim"), "skim");});
test("skimmed -> skim", function() {deepEqual( Stem("skimmed"), "skim");});
test("skimming -> skim", function() {deepEqual( Stem("skimming"), "skim");});
test("skimpole -> skimpol", function() {deepEqual( Stem("skimpole"), "skimpol");});
test("skims -> skim", function() {deepEqual( Stem("skims"), "skim");});
test("skin -> skin", function() {deepEqual( Stem("skin"), "skin");});
test("skinned -> skin", function() {deepEqual( Stem("skinned"), "skin");});
test("skinning -> skin", function() {deepEqual( Stem("skinning"), "skin");});
test("skinny -> skinni", function() {deepEqual( Stem("skinny"), "skinni");});
test("skins -> skin", function() {deepEqual( Stem("skins"), "skin");});
test("skip -> skip", function() {deepEqual( Stem("skip"), "skip");});
test("skipped -> skip", function() {deepEqual( Stem("skipped"), "skip");});
test("skipper -> skipper", function() {deepEqual( Stem("skipper"), "skipper");});
test("skipping -> skip", function() {deepEqual( Stem("skipping"), "skip");});
test("skips -> skip", function() {deepEqual( Stem("skips"), "skip");});
test("skirmish -> skirmish", function() {deepEqual( Stem("skirmish"), "skirmish");});
test("skirmished -> skirmish", function() {deepEqual( Stem("skirmished"), "skirmish");});
test("skirmishes -> skirmish", function() {deepEqual( Stem("skirmishes"), "skirmish");});
test("skirmishing -> skirmish", function() {deepEqual( Stem("skirmishing"), "skirmish");});
test("skirt -> skirt", function() {deepEqual( Stem("skirt"), "skirt");});
test("skirted -> skirt", function() {deepEqual( Stem("skirted"), "skirt");});
test("skirts -> skirt", function() {deepEqual( Stem("skirts"), "skirt");});
test("skittish -> skittish", function() {deepEqual( Stem("skittish"), "skittish");});
test("skittle -> skittl", function() {deepEqual( Stem("skittle"), "skittl");});
test("skittles -> skittl", function() {deepEqual( Stem("skittles"), "skittl");});
test("skrimmage -> skrimmag", function() {deepEqual( Stem("skrimmage"), "skrimmag");});
test("skul -> skul", function() {deepEqual( Stem("skul"), "skul");});
test("skulk -> skulk", function() {deepEqual( Stem("skulk"), "skulk");});
test("skulking -> skulk", function() {deepEqual( Stem("skulking"), "skulk");});
test("skulks -> skulk", function() {deepEqual( Stem("skulks"), "skulk");});
test("skull -> skull", function() {deepEqual( Stem("skull"), "skull");});
test("skulls -> skull", function() {deepEqual( Stem("skulls"), "skull");});
test("skumpling -> skumpl", function() {deepEqual( Stem("skumpling"), "skumpl");});
test("skunks -> skunk", function() {deepEqual( Stem("skunks"), "skunk");});
test("skurry -> skurri", function() {deepEqual( Stem("skurry"), "skurri");});
test("skuttle -> skuttl", function() {deepEqual( Stem("skuttle"), "skuttl");});
test("sky -> sky", function() {deepEqual( Stem("sky"), "sky");});
test("skye -> skye", function() {deepEqual( Stem("skye"), "skye");});
test("skylark -> skylark", function() {deepEqual( Stem("skylark"), "skylark");});
test("skylight -> skylight", function() {deepEqual( Stem("skylight"), "skylight");});
test("skylights -> skylight", function() {deepEqual( Stem("skylights"), "skylight");});
test("slab -> slab", function() {deepEqual( Stem("slab"), "slab");});
test("slabs -> slab", function() {deepEqual( Stem("slabs"), "slab");});
test("slack -> slack", function() {deepEqual( Stem("slack"), "slack");});
test("slacken -> slacken", function() {deepEqual( Stem("slacken"), "slacken");});
test("slackened -> slacken", function() {deepEqual( Stem("slackened"), "slacken");});
test("slackness -> slack", function() {deepEqual( Stem("slackness"), "slack");});
test("sladdery -> sladderi", function() {deepEqual( Stem("sladdery"), "sladderi");});
test("slags -> slag", function() {deepEqual( Stem("slags"), "slag");});
test("slain -> slain", function() {deepEqual( Stem("slain"), "slain");});
test("slaked -> slake", function() {deepEqual( Stem("slaked"), "slake");});
test("slam -> slam", function() {deepEqual( Stem("slam"), "slam");});
test("slammed -> slam", function() {deepEqual( Stem("slammed"), "slam");});
test("slammons -> slammon", function() {deepEqual( Stem("slammons"), "slammon");});
test("slander -> slander", function() {deepEqual( Stem("slander"), "slander");});
test("slandered -> slander", function() {deepEqual( Stem("slandered"), "slander");});
test("slanderer -> slander", function() {deepEqual( Stem("slanderer"), "slander");});
test("slanderers -> slander", function() {deepEqual( Stem("slanderers"), "slander");});
test("slandering -> slander", function() {deepEqual( Stem("slandering"), "slander");});
test("slang -> slang", function() {deepEqual( Stem("slang"), "slang");});
test("slangular -> slangular", function() {deepEqual( Stem("slangular"), "slangular");});
test("slanting -> slant", function() {deepEqual( Stem("slanting"), "slant");});
test("slap -> slap", function() {deepEqual( Stem("slap"), "slap");});
test("slapped -> slap", function() {deepEqual( Stem("slapped"), "slap");});
test("slapping -> slap", function() {deepEqual( Stem("slapping"), "slap");});
test("slaps -> slap", function() {deepEqual( Stem("slaps"), "slap");});
test("slash -> slash", function() {deepEqual( Stem("slash"), "slash");});
test("slashing -> slash", function() {deepEqual( Stem("slashing"), "slash");});
test("slat -> slat", function() {deepEqual( Stem("slat"), "slat");});
test("slate -> slate", function() {deepEqual( Stem("slate"), "slate");});
test("slatternly -> slattern", function() {deepEqual( Stem("slatternly"), "slattern");});
test("slaughter -> slaughter", function() {deepEqual( Stem("slaughter"), "slaughter");});
test("slaughtered -> slaughter", function() {deepEqual( Stem("slaughtered"), "slaughter");});
test("slaughtering -> slaughter", function() {deepEqual( Stem("slaughtering"), "slaughter");});
test("slaughterous -> slaughter", function() {deepEqual( Stem("slaughterous"), "slaughter");});
test("slave -> slave", function() {deepEqual( Stem("slave"), "slave");});
test("slaved -> slave", function() {deepEqual( Stem("slaved"), "slave");});
test("slavery -> slaveri", function() {deepEqual( Stem("slavery"), "slaveri");});
test("slaves -> slave", function() {deepEqual( Stem("slaves"), "slave");});
test("slavish -> slavish", function() {deepEqual( Stem("slavish"), "slavish");});
test("slavishly -> slavish", function() {deepEqual( Stem("slavishly"), "slavish");});
test("slay -> slay", function() {deepEqual( Stem("slay"), "slay");});
test("sledge -> sledg", function() {deepEqual( Stem("sledge"), "sledg");});
test("sleek -> sleek", function() {deepEqual( Stem("sleek"), "sleek");});
test("sleep -> sleep", function() {deepEqual( Stem("sleep"), "sleep");});
test("sleeper -> sleeper", function() {deepEqual( Stem("sleeper"), "sleeper");});
test("sleepers -> sleeper", function() {deepEqual( Stem("sleepers"), "sleeper");});
test("sleepily -> sleepili", function() {deepEqual( Stem("sleepily"), "sleepili");});
test("sleepiness -> sleepi", function() {deepEqual( Stem("sleepiness"), "sleepi");});
test("sleeping -> sleep", function() {deepEqual( Stem("sleeping"), "sleep");});
test("sleepless -> sleepless", function() {deepEqual( Stem("sleepless"), "sleepless");});
test("sleeps -> sleep", function() {deepEqual( Stem("sleeps"), "sleep");});
test("sleepy -> sleepi", function() {deepEqual( Stem("sleepy"), "sleepi");});
test("sleet -> sleet", function() {deepEqual( Stem("sleet"), "sleet");});
test("sleeve -> sleev", function() {deepEqual( Stem("sleeve"), "sleev");});
test("sleeved -> sleev", function() {deepEqual( Stem("sleeved"), "sleev");});
test("sleeves -> sleev", function() {deepEqual( Stem("sleeves"), "sleev");});
test("sleight -> sleight", function() {deepEqual( Stem("sleight"), "sleight");});
test("slender -> slender", function() {deepEqual( Stem("slender"), "slender");});
test("slenderer -> slender", function() {deepEqual( Stem("slenderer"), "slender");});
test("slenderly -> slender", function() {deepEqual( Stem("slenderly"), "slender");});
test("slep -> slep", function() {deepEqual( Stem("slep"), "slep");});
test("slept -> slept", function() {deepEqual( Stem("slept"), "slept");});
test("slice -> slice", function() {deepEqual( Stem("slice"), "slice");});
test("sliced -> slice", function() {deepEqual( Stem("sliced"), "slice");});
test("slices -> slice", function() {deepEqual( Stem("slices"), "slice");});
test("slicing -> slice", function() {deepEqual( Stem("slicing"), "slice");});
test("slid -> slid", function() {deepEqual( Stem("slid"), "slid");});
test("slide -> slide", function() {deepEqual( Stem("slide"), "slide");});
test("slider -> slider", function() {deepEqual( Stem("slider"), "slider");});
test("sliders -> slider", function() {deepEqual( Stem("sliders"), "slider");});
test("sliderskew -> sliderskew", function() {deepEqual( Stem("sliderskew"), "sliderskew");});
test("slides -> slide", function() {deepEqual( Stem("slides"), "slide");});
test("sliding -> slide", function() {deepEqual( Stem("sliding"), "slide");});
test("slight -> slight", function() {deepEqual( Stem("slight"), "slight");});
test("slighted -> slight", function() {deepEqual( Stem("slighted"), "slight");});
test("slighter -> slighter", function() {deepEqual( Stem("slighter"), "slighter");});
test("slightest -> slightest", function() {deepEqual( Stem("slightest"), "slightest");});
test("slighting -> slight", function() {deepEqual( Stem("slighting"), "slight");});
test("slightly -> slight", function() {deepEqual( Stem("slightly"), "slight");});
test("slights -> slight", function() {deepEqual( Stem("slights"), "slight");});
test("slim -> slim", function() {deepEqual( Stem("slim"), "slim");});
test("slime -> slime", function() {deepEqual( Stem("slime"), "slime");});
test("slimy -> slimi", function() {deepEqual( Stem("slimy"), "slimi");});
test("sling -> sling", function() {deepEqual( Stem("sling"), "sling");});
test("slings -> sling", function() {deepEqual( Stem("slings"), "sling");});
test("slinking -> slink", function() {deepEqual( Stem("slinking"), "slink");});
test("slip -> slip", function() {deepEqual( Stem("slip"), "slip");});
test("slipped -> slip", function() {deepEqual( Stem("slipped"), "slip");});
test("slipper -> slipper", function() {deepEqual( Stem("slipper"), "slipper");});
test("slippered -> slipper", function() {deepEqual( Stem("slippered"), "slipper");});
test("slippers -> slipper", function() {deepEqual( Stem("slippers"), "slipper");});
test("slippery -> slipperi", function() {deepEqual( Stem("slippery"), "slipperi");});
test("slipping -> slip", function() {deepEqual( Stem("slipping"), "slip");});
test("slips -> slip", function() {deepEqual( Stem("slips"), "slip");});
test("slipshod -> slipshod", function() {deepEqual( Stem("slipshod"), "slipshod");});
test("slit -> slit", function() {deepEqual( Stem("slit"), "slit");});
test("slits -> slit", function() {deepEqual( Stem("slits"), "slit");});
test("sloane -> sloan", function() {deepEqual( Stem("sloane"), "sloan");});
test("slocomb -> slocomb", function() {deepEqual( Stem("slocomb"), "slocomb");});
test("slongs -> slong", function() {deepEqual( Stem("slongs"), "slong");});
test("slope -> slope", function() {deepEqual( Stem("slope"), "slope");});
test("sloped -> slope", function() {deepEqual( Stem("sloped"), "slope");});
test("slopes -> slope", function() {deepEqual( Stem("slopes"), "slope");});
test("sloping -> slope", function() {deepEqual( Stem("sloping"), "slope");});
test("sloppy -> sloppi", function() {deepEqual( Stem("sloppy"), "sloppi");});
test("slopseller -> slopsel", function() {deepEqual( Stem("slopseller"), "slopsel");});
test("sloth -> sloth", function() {deepEqual( Stem("sloth"), "sloth");});
test("sloths -> sloth", function() {deepEqual( Stem("sloths"), "sloth");});
test("slouch -> slouch", function() {deepEqual( Stem("slouch"), "slouch");});
test("slouching -> slouch", function() {deepEqual( Stem("slouching"), "slouch");});
test("sloven -> sloven", function() {deepEqual( Stem("sloven"), "sloven");});
test("slovenly -> sloven", function() {deepEqual( Stem("slovenly"), "sloven");});
test("slow -> slow", function() {deepEqual( Stem("slow"), "slow");});
test("slower -> slower", function() {deepEqual( Stem("slower"), "slower");});
test("slowly -> slowli", function() {deepEqual( Stem("slowly"), "slowli");});
test("slowness -> slow", function() {deepEqual( Stem("slowness"), "slow");});
test("sludge -> sludg", function() {deepEqual( Stem("sludge"), "sludg");});
test("slug -> slug", function() {deepEqual( Stem("slug"), "slug");});
test("sluggish -> sluggish", function() {deepEqual( Stem("sluggish"), "sluggish");});
test("slugs -> slug", function() {deepEqual( Stem("slugs"), "slug");});
test("sluices -> sluic", function() {deepEqual( Stem("sluices"), "sluic");});
test("slumber -> slumber", function() {deepEqual( Stem("slumber"), "slumber");});
test("slumbered -> slumber", function() {deepEqual( Stem("slumbered"), "slumber");});
test("slumbering -> slumber", function() {deepEqual( Stem("slumbering"), "slumber");});
test("slumbers -> slumber", function() {deepEqual( Stem("slumbers"), "slumber");});
test("slung -> slung", function() {deepEqual( Stem("slung"), "slung");});
test("slunk -> slunk", function() {deepEqual( Stem("slunk"), "slunk");});
test("slurring -> slur", function() {deepEqual( Stem("slurring"), "slur");});
test("slush -> slush", function() {deepEqual( Stem("slush"), "slush");});
test("slut -> slut", function() {deepEqual( Stem("slut"), "slut");});
test("sly -> sli", function() {deepEqual( Stem("sly"), "sli");});
test("slyboots -> slyboot", function() {deepEqual( Stem("slyboots"), "slyboot");});
test("slyly -> slyli", function() {deepEqual( Stem("slyly"), "slyli");});
test("slyness -> slyness", function() {deepEqual( Stem("slyness"), "slyness");});
test("smack -> smack", function() {deepEqual( Stem("smack"), "smack");});
test("smacked -> smack", function() {deepEqual( Stem("smacked"), "smack");});
test("smacking -> smack", function() {deepEqual( Stem("smacking"), "smack");});
test("smacks -> smack", function() {deepEqual( Stem("smacks"), "smack");});
test("smal -> smal", function() {deepEqual( Stem("smal"), "smal");});
test("small -> small", function() {deepEqual( Stem("small"), "small");});
test("smallclothes -> smallcloth", function() {deepEqual( Stem("smallclothes"), "smallcloth");});
test("smaller -> smaller", function() {deepEqual( Stem("smaller"), "smaller");});
test("smallest -> smallest", function() {deepEqual( Stem("smallest"), "smallest");});
test("smallness -> small", function() {deepEqual( Stem("smallness"), "small");});
test("smalls -> small", function() {deepEqual( Stem("smalls"), "small");});
test("smallweed -> smallwe", function() {deepEqual( Stem("smallweed"), "smallwe");});
test("smallweeds -> smallwe", function() {deepEqual( Stem("smallweeds"), "smallwe");});
test("smallweedy -> smallweedi", function() {deepEqual( Stem("smallweedy"), "smallweedi");});
test("smart -> smart", function() {deepEqual( Stem("smart"), "smart");});
test("smartened -> smarten", function() {deepEqual( Stem("smartened"), "smarten");});
test("smarting -> smart", function() {deepEqual( Stem("smarting"), "smart");});
test("smartly -> smart", function() {deepEqual( Stem("smartly"), "smart");});
test("smartness -> smart", function() {deepEqual( Stem("smartness"), "smart");});
test("smartnesses -> smart", function() {deepEqual( Stem("smartnesses"), "smart");});
test("smarts -> smart", function() {deepEqual( Stem("smarts"), "smart");});
test("smash -> smash", function() {deepEqual( Stem("smash"), "smash");});
test("smashed -> smash", function() {deepEqual( Stem("smashed"), "smash");});
test("smashing -> smash", function() {deepEqual( Stem("smashing"), "smash");});
test("smattering -> smatter", function() {deepEqual( Stem("smattering"), "smatter");});
test("smear -> smear", function() {deepEqual( Stem("smear"), "smear");});
test("smeared -> smear", function() {deepEqual( Stem("smeared"), "smear");});
test("smearing -> smear", function() {deepEqual( Stem("smearing"), "smear");});
test("smears -> smear", function() {deepEqual( Stem("smears"), "smear");});
test("smell -> smell", function() {deepEqual( Stem("smell"), "smell");});
test("smelling -> smell", function() {deepEqual( Stem("smelling"), "smell");});
test("smells -> smell", function() {deepEqual( Stem("smells"), "smell");});
test("smelt -> smelt", function() {deepEqual( Stem("smelt"), "smelt");});
test("smelted -> smelt", function() {deepEqual( Stem("smelted"), "smelt");});
test("smelting -> smelt", function() {deepEqual( Stem("smelting"), "smelt");});
test("smiffeld -> smiffeld", function() {deepEqual( Stem("smiffeld"), "smiffeld");});
test("smifligate -> smiflig", function() {deepEqual( Stem("smifligate"), "smiflig");});
test("smifligation -> smiflig", function() {deepEqual( Stem("smifligation"), "smiflig");});
test("smifser -> smifser", function() {deepEqual( Stem("smifser"), "smifser");});
test("smike -> smike", function() {deepEqual( Stem("smike"), "smike");});
test("smile -> smile", function() {deepEqual( Stem("smile"), "smile");});
test("smiled -> smile", function() {deepEqual( Stem("smiled"), "smile");});
test("smiles -> smile", function() {deepEqual( Stem("smiles"), "smile");});
test("smilin -> smilin", function() {deepEqual( Stem("smilin"), "smilin");});
test("smiling -> smile", function() {deepEqual( Stem("smiling"), "smile");});
test("smilingly -> smile", function() {deepEqual( Stem("smilingly"), "smile");});
test("smirched -> smirch", function() {deepEqual( Stem("smirched"), "smirch");});
test("smirk -> smirk", function() {deepEqual( Stem("smirk"), "smirk");});
test("smirking -> smirk", function() {deepEqual( Stem("smirking"), "smirk");});
test("smith -> smith", function() {deepEqual( Stem("smith"), "smith");});
test("smithers -> smither", function() {deepEqual( Stem("smithers"), "smither");});
test("smithfield -> smithfield", function() {deepEqual( Stem("smithfield"), "smithfield");});
test("smithson -> smithson", function() {deepEqual( Stem("smithson"), "smithson");});
test("smiting -> smite", function() {deepEqual( Stem("smiting"), "smite");});
test("smitten -> smitten", function() {deepEqual( Stem("smitten"), "smitten");});
test("smock -> smock", function() {deepEqual( Stem("smock"), "smock");});
test("smoke -> smoke", function() {deepEqual( Stem("smoke"), "smoke");});
test("smoked -> smoke", function() {deepEqual( Stem("smoked"), "smoke");});
test("smoker -> smoker", function() {deepEqual( Stem("smoker"), "smoker");});
test("smokes -> smoke", function() {deepEqual( Stem("smokes"), "smoke");});
test("smoking -> smoke", function() {deepEqual( Stem("smoking"), "smoke");});
test("smokings -> smoke", function() {deepEqual( Stem("smokings"), "smoke");});
test("smoky -> smoki", function() {deepEqual( Stem("smoky"), "smoki");});
test("smoldering -> smolder", function() {deepEqual( Stem("smoldering"), "smolder");});
test("smooth -> smooth", function() {deepEqual( Stem("smooth"), "smooth");});
test("smoothed -> smooth", function() {deepEqual( Stem("smoothed"), "smooth");});
test("smoother -> smoother", function() {deepEqual( Stem("smoother"), "smoother");});
test("smoothing -> smooth", function() {deepEqual( Stem("smoothing"), "smooth");});
test("smoothingly -> smooth", function() {deepEqual( Stem("smoothingly"), "smooth");});
test("smoothings -> smooth", function() {deepEqual( Stem("smoothings"), "smooth");});
test("smoothly -> smooth", function() {deepEqual( Stem("smoothly"), "smooth");});
test("smoothness -> smooth", function() {deepEqual( Stem("smoothness"), "smooth");});
test("smooths -> smooth", function() {deepEqual( Stem("smooths"), "smooth");});
test("smote -> smote", function() {deepEqual( Stem("smote"), "smote");});
test("smothered -> smother", function() {deepEqual( Stem("smothered"), "smother");});
test("smothering -> smother", function() {deepEqual( Stem("smothering"), "smother");});
test("smothers -> smother", function() {deepEqual( Stem("smothers"), "smother");});
test("smouldering -> smoulder", function() {deepEqual( Stem("smouldering"), "smoulder");});
test("smuggle -> smuggl", function() {deepEqual( Stem("smuggle"), "smuggl");});
test("smuggler -> smuggler", function() {deepEqual( Stem("smuggler"), "smuggler");});
test("smut -> smut", function() {deepEqual( Stem("smut"), "smut");});
test("smutty -> smutti", function() {deepEqual( Stem("smutty"), "smutti");});
test("snagsby -> snagsbi", function() {deepEqual( Stem("snagsby"), "snagsbi");});
test("snail -> snail", function() {deepEqual( Stem("snail"), "snail");});
test("snails -> snail", function() {deepEqual( Stem("snails"), "snail");});
test("snake -> snake", function() {deepEqual( Stem("snake"), "snake");});
test("snakes -> snake", function() {deepEqual( Stem("snakes"), "snake");});
test("snap -> snap", function() {deepEqual( Stem("snap"), "snap");});
test("snapped -> snap", function() {deepEqual( Stem("snapped"), "snap");});
test("snapper -> snapper", function() {deepEqual( Stem("snapper"), "snapper");});
test("snapping -> snap", function() {deepEqual( Stem("snapping"), "snap");});
test("snappish -> snappish", function() {deepEqual( Stem("snappish"), "snappish");});
test("snappishly -> snappish", function() {deepEqual( Stem("snappishly"), "snappish");});
test("snaps -> snap", function() {deepEqual( Stem("snaps"), "snap");});
test("snare -> snare", function() {deepEqual( Stem("snare"), "snare");});
test("snares -> snare", function() {deepEqual( Stem("snares"), "snare");});
test("snarl -> snarl", function() {deepEqual( Stem("snarl"), "snarl");});
test("snarled -> snarl", function() {deepEqual( Stem("snarled"), "snarl");});
test("snarling -> snarl", function() {deepEqual( Stem("snarling"), "snarl");});
test("snarls -> snarl", function() {deepEqual( Stem("snarls"), "snarl");});
test("snatch -> snatch", function() {deepEqual( Stem("snatch"), "snatch");});
test("snatched -> snatch", function() {deepEqual( Stem("snatched"), "snatch");});
test("snatches -> snatch", function() {deepEqual( Stem("snatches"), "snatch");});
test("snatching -> snatch", function() {deepEqual( Stem("snatching"), "snatch");});
test("snawley -> snawley", function() {deepEqual( Stem("snawley"), "snawley");});
test("sneak -> sneak", function() {deepEqual( Stem("sneak"), "sneak");});
test("sneaked -> sneak", function() {deepEqual( Stem("sneaked"), "sneak");});
test("sneaking -> sneak", function() {deepEqual( Stem("sneaking"), "sneak");});
test("sneaks -> sneak", function() {deepEqual( Stem("sneaks"), "sneak");});
test("sneer -> sneer", function() {deepEqual( Stem("sneer"), "sneer");});
test("sneered -> sneer", function() {deepEqual( Stem("sneered"), "sneer");});
test("sneering -> sneer", function() {deepEqual( Stem("sneering"), "sneer");});
test("sneers -> sneer", function() {deepEqual( Stem("sneers"), "sneer");});
test("sneeze -> sneez", function() {deepEqual( Stem("sneeze"), "sneez");});
test("sneezed -> sneez", function() {deepEqual( Stem("sneezed"), "sneez");});
test("sneezing -> sneez", function() {deepEqual( Stem("sneezing"), "sneez");});
test("snevellicci -> snevellicci", function() {deepEqual( Stem("snevellicci"), "snevellicci");});
test("snewkes -> snewk", function() {deepEqual( Stem("snewkes"), "snewk");});
test("sniff -> sniff", function() {deepEqual( Stem("sniff"), "sniff");});
test("sniffed -> snif", function() {deepEqual( Stem("sniffed"), "snif");});
test("sniffing -> snif", function() {deepEqual( Stem("sniffing"), "snif");});
test("sniffs -> sniff", function() {deepEqual( Stem("sniffs"), "sniff");});
test("snigger -> snigger", function() {deepEqual( Stem("snigger"), "snigger");});
test("sniggered -> snigger", function() {deepEqual( Stem("sniggered"), "snigger");});
test("sniggering -> snigger", function() {deepEqual( Stem("sniggering"), "snigger");});
test("snipe -> snipe", function() {deepEqual( Stem("snipe"), "snipe");});
test("snipping -> snip", function() {deepEqual( Stem("snipping"), "snip");});
test("snittle -> snittl", function() {deepEqual( Stem("snittle"), "snittl");});
test("snobb -> snobb", function() {deepEqual( Stem("snobb"), "snobb");});
test("snoog -> snoog", function() {deepEqual( Stem("snoog"), "snoog");});
test("snooks -> snook", function() {deepEqual( Stem("snooks"), "snook");});
test("snore -> snore", function() {deepEqual( Stem("snore"), "snore");});
test("snores -> snore", function() {deepEqual( Stem("snores"), "snore");});
test("snoring -> snore", function() {deepEqual( Stem("snoring"), "snore");});
test("snort -> snort", function() {deepEqual( Stem("snort"), "snort");});
test("snorted -> snort", function() {deepEqual( Stem("snorted"), "snort");});
test("snorting -> snort", function() {deepEqual( Stem("snorting"), "snort");});
test("snorts -> snort", function() {deepEqual( Stem("snorts"), "snort");});
test("snout -> snout", function() {deepEqual( Stem("snout"), "snout");});
test("snow -> snow", function() {deepEqual( Stem("snow"), "snow");});
test("snowed -> snow", function() {deepEqual( Stem("snowed"), "snow");});
test("snowflakes -> snowflak", function() {deepEqual( Stem("snowflakes"), "snowflak");});
test("snowing -> snow", function() {deepEqual( Stem("snowing"), "snow");});
test("snowstorm -> snowstorm", function() {deepEqual( Stem("snowstorm"), "snowstorm");});
test("snowstorms -> snowstorm", function() {deepEqual( Stem("snowstorms"), "snowstorm");});
test("snowy -> snowi", function() {deepEqual( Stem("snowy"), "snowi");});
test("snub -> snub", function() {deepEqual( Stem("snub"), "snub");});
test("snubbed -> snub", function() {deepEqual( Stem("snubbed"), "snub");});
test("snubbing -> snub", function() {deepEqual( Stem("snubbing"), "snub");});
test("snubs -> snub", function() {deepEqual( Stem("snubs"), "snub");});
test("snuff -> snuff", function() {deepEqual( Stem("snuff"), "snuff");});
test("snuffed -> snuf", function() {deepEqual( Stem("snuffed"), "snuf");});
test("snuffers -> snuffer", function() {deepEqual( Stem("snuffers"), "snuffer");});
test("snuffim -> snuffim", function() {deepEqual( Stem("snuffim"), "snuffim");});
test("snuffing -> snuf", function() {deepEqual( Stem("snuffing"), "snuf");});
test("snuffling -> snuffl", function() {deepEqual( Stem("snuffling"), "snuffl");});
test("snuffy -> snuffi", function() {deepEqual( Stem("snuffy"), "snuffi");});
test("snug -> snug", function() {deepEqual( Stem("snug"), "snug");});
test("snugly -> snug", function() {deepEqual( Stem("snugly"), "snug");});
test("so -> so", function() {deepEqual( Stem("so"), "so");});
test("soaked -> soak", function() {deepEqual( Stem("soaked"), "soak");});
test("soaking -> soak", function() {deepEqual( Stem("soaking"), "soak");});
test("soap -> soap", function() {deepEqual( Stem("soap"), "soap");});
test("soar -> soar", function() {deepEqual( Stem("soar"), "soar");});
test("soared -> soar", function() {deepEqual( Stem("soared"), "soar");});
test("soaring -> soar", function() {deepEqual( Stem("soaring"), "soar");});
test("soars -> soar", function() {deepEqual( Stem("soars"), "soar");});
test("sob -> sob", function() {deepEqual( Stem("sob"), "sob");});
test("sobbed -> sob", function() {deepEqual( Stem("sobbed"), "sob");});
test("sobbing -> sob", function() {deepEqual( Stem("sobbing"), "sob");});
test("sobbings -> sob", function() {deepEqual( Stem("sobbings"), "sob");});
test("sober -> sober", function() {deepEqual( Stem("sober"), "sober");});
test("sobered -> sober", function() {deepEqual( Stem("sobered"), "sober");});
test("sobering -> sober", function() {deepEqual( Stem("sobering"), "sober");});
test("soberly -> sober", function() {deepEqual( Stem("soberly"), "sober");});
test("sobre -> sobr", function() {deepEqual( Stem("sobre"), "sobr");});
test("sobriety -> sobrieti", function() {deepEqual( Stem("sobriety"), "sobrieti");});
test("sobs -> sob", function() {deepEqual( Stem("sobs"), "sob");});
test("soc -> soc", function() {deepEqual( Stem("soc"), "soc");});
test("socego -> socego", function() {deepEqual( Stem("socego"), "socego");});
test("sociable -> sociabl", function() {deepEqual( Stem("sociable"), "sociabl");});
test("social -> social", function() {deepEqual( Stem("social"), "social");});
test("socialist -> socialist", function() {deepEqual( Stem("socialist"), "socialist");});
test("socialists -> socialist", function() {deepEqual( Stem("socialists"), "socialist");});
test("sociality -> social", function() {deepEqual( Stem("sociality"), "social");});
test("socially -> social", function() {deepEqual( Stem("socially"), "social");});
test("society -> societi", function() {deepEqual( Stem("society"), "societi");});
test("sock -> sock", function() {deepEqual( Stem("sock"), "sock");});
test("socket -> socket", function() {deepEqual( Stem("socket"), "socket");});
test("sockets -> socket", function() {deepEqual( Stem("sockets"), "socket");});
test("socks -> sock", function() {deepEqual( Stem("socks"), "sock");});
test("soda -> soda", function() {deepEqual( Stem("soda"), "soda");});
test("sodden -> sodden", function() {deepEqual( Stem("sodden"), "sodden");});
test("soever -> soever", function() {deepEqual( Stem("soever"), "soever");});
test("sofa -> sofa", function() {deepEqual( Stem("sofa"), "sofa");});
test("sofas -> sofa", function() {deepEqual( Stem("sofas"), "sofa");});
test("soft -> soft", function() {deepEqual( Stem("soft"), "soft");});
test("soften -> soften", function() {deepEqual( Stem("soften"), "soften");});
test("softened -> soften", function() {deepEqual( Stem("softened"), "soften");});
test("softeners -> soften", function() {deepEqual( Stem("softeners"), "soften");});
test("softening -> soften", function() {deepEqual( Stem("softening"), "soften");});
test("softens -> soften", function() {deepEqual( Stem("softens"), "soften");});
test("softer -> softer", function() {deepEqual( Stem("softer"), "softer");});
test("softest -> softest", function() {deepEqual( Stem("softest"), "softest");});
test("softly -> soft", function() {deepEqual( Stem("softly"), "soft");});
test("softness -> soft", function() {deepEqual( Stem("softness"), "soft");});
test("sofy -> sofi", function() {deepEqual( Stem("sofy"), "sofi");});
test("sofya -> sofya", function() {deepEqual( Stem("sofya"), "sofya");});
test("soho -> soho", function() {deepEqual( Stem("soho"), "soho");});
test("soie -> soie", function() {deepEqual( Stem("soie"), "soie");});
test("soight -> soight", function() {deepEqual( Stem("soight"), "soight");});
test("soil -> soil", function() {deepEqual( Stem("soil"), "soil");});
test("soiled -> soil", function() {deepEqual( Stem("soiled"), "soil");});
test("soiree -> soire", function() {deepEqual( Stem("soiree"), "soire");});
test("soirees -> soire", function() {deepEqual( Stem("soirees"), "soire");});
test("soizable -> soizabl", function() {deepEqual( Stem("soizable"), "soizabl");});
test("soizes -> soiz", function() {deepEqual( Stem("soizes"), "soiz");});
test("sojourn -> sojourn", function() {deepEqual( Stem("sojourn"), "sojourn");});
test("sojourners -> sojourn", function() {deepEqual( Stem("sojourners"), "sojourn");});
test("sojourning -> sojourn", function() {deepEqual( Stem("sojourning"), "sojourn");});
test("sol -> sol", function() {deepEqual( Stem("sol"), "sol");});
test("solace -> solac", function() {deepEqual( Stem("solace"), "solac");});
test("solaced -> solac", function() {deepEqual( Stem("solaced"), "solac");});
test("solaces -> solac", function() {deepEqual( Stem("solaces"), "solac");});
test("solacing -> solac", function() {deepEqual( Stem("solacing"), "solac");});
test("solander -> soland", function() {deepEqual( Stem("solander"), "soland");});
test("solar -> solar", function() {deepEqual( Stem("solar"), "solar");});
test("sold -> sold", function() {deepEqual( Stem("sold"), "sold");});
test("soldier -> soldier", function() {deepEqual( Stem("soldier"), "soldier");});
test("soldiering -> soldier", function() {deepEqual( Stem("soldiering"), "soldier");});
test("soldierly -> soldier", function() {deepEqual( Stem("soldierly"), "soldier");});
test("soldiers -> soldier", function() {deepEqual( Stem("soldiers"), "soldier");});
test("sole -> sole", function() {deepEqual( Stem("sole"), "sole");});
test("solecisms -> solec", function() {deepEqual( Stem("solecisms"), "solec");});
test("solely -> sole", function() {deepEqual( Stem("solely"), "sole");});
test("solemn -> solemn", function() {deepEqual( Stem("solemn"), "solemn");});
test("solemnest -> solemnest", function() {deepEqual( Stem("solemnest"), "solemnest");});
test("solemnities -> solemn", function() {deepEqual( Stem("solemnities"), "solemn");});
test("solemnity -> solemn", function() {deepEqual( Stem("solemnity"), "solemn");});
test("solemnly -> solemn", function() {deepEqual( Stem("solemnly"), "solemn");});
test("solen -> solen", function() {deepEqual( Stem("solen"), "solen");});
test("solent -> solent", function() {deepEqual( Stem("solent"), "solent");});
test("soles -> sole", function() {deepEqual( Stem("soles"), "sole");});
test("solicitation -> solicit", function() {deepEqual( Stem("solicitation"), "solicit");});
test("solicitations -> solicit", function() {deepEqual( Stem("solicitations"), "solicit");});
test("solicited -> solicit", function() {deepEqual( Stem("solicited"), "solicit");});
test("soliciting -> solicit", function() {deepEqual( Stem("soliciting"), "solicit");});
test("solicitor -> solicitor", function() {deepEqual( Stem("solicitor"), "solicitor");});
test("solicitors -> solicitor", function() {deepEqual( Stem("solicitors"), "solicitor");});
test("solicitous -> solicit", function() {deepEqual( Stem("solicitous"), "solicit");});
test("solicitously -> solicit", function() {deepEqual( Stem("solicitously"), "solicit");});
test("solicits -> solicit", function() {deepEqual( Stem("solicits"), "solicit");});
test("solicitude -> solicitud", function() {deepEqual( Stem("solicitude"), "solicitud");});
test("solid -> solid", function() {deepEqual( Stem("solid"), "solid");});
test("solidified -> solidifi", function() {deepEqual( Stem("solidified"), "solidifi");});
test("solidities -> solid", function() {deepEqual( Stem("solidities"), "solid");});
test("solidity -> solid", function() {deepEqual( Stem("solidity"), "solid");});
test("solidness -> solid", function() {deepEqual( Stem("solidness"), "solid");});
test("soliloquies -> soliloqui", function() {deepEqual( Stem("soliloquies"), "soliloqui");});
test("soliloquised -> soliloquis", function() {deepEqual( Stem("soliloquised"), "soliloquis");});
test("soliloquize -> soliloqu", function() {deepEqual( Stem("soliloquize"), "soliloqu");});
test("soliloquized -> soliloqu", function() {deepEqual( Stem("soliloquized"), "soliloqu");});
test("soliloquy -> soliloquy", function() {deepEqual( Stem("soliloquy"), "soliloquy");});
test("solitaries -> solitari", function() {deepEqual( Stem("solitaries"), "solitari");});
test("solitary -> solitari", function() {deepEqual( Stem("solitary"), "solitari");});
test("solitude -> solitud", function() {deepEqual( Stem("solitude"), "solitud");});
test("solitudes -> solitud", function() {deepEqual( Stem("solitudes"), "solitud");});
test("solo -> solo", function() {deepEqual( Stem("solo"), "solo");});
test("solomon -> solomon", function() {deepEqual( Stem("solomon"), "solomon");});
test("solon -> solon", function() {deepEqual( Stem("solon"), "solon");});
test("solstice -> solstic", function() {deepEqual( Stem("solstice"), "solstic");});
test("soluble -> solubl", function() {deepEqual( Stem("soluble"), "solubl");});
test("solution -> solut", function() {deepEqual( Stem("solution"), "solut");});
test("solve -> solv", function() {deepEqual( Stem("solve"), "solv");});
test("solved -> solv", function() {deepEqual( Stem("solved"), "solv");});
test("solvent -> solvent", function() {deepEqual( Stem("solvent"), "solvent");});
test("solves -> solv", function() {deepEqual( Stem("solves"), "solv");});
test("som -> som", function() {deepEqual( Stem("som"), "som");});
test("sombre -> sombr", function() {deepEqual( Stem("sombre"), "sombr");});
test("sombrero -> sombrero", function() {deepEqual( Stem("sombrero"), "sombrero");});
test("some -> some", function() {deepEqual( Stem("some"), "some");});
test("somebodies -> somebodi", function() {deepEqual( Stem("somebodies"), "somebodi");});
test("somebody -> somebodi", function() {deepEqual( Stem("somebody"), "somebodi");});
test("someday -> someday", function() {deepEqual( Stem("someday"), "someday");});
test("somehow -> somehow", function() {deepEqual( Stem("somehow"), "somehow");});
test("someone -> someon", function() {deepEqual( Stem("someone"), "someon");});
test("somers -> somer", function() {deepEqual( Stem("somers"), "somer");});
test("something -> someth", function() {deepEqual( Stem("something"), "someth");});
test("somethings -> someth", function() {deepEqual( Stem("somethings"), "someth");});
test("somethink -> somethink", function() {deepEqual( Stem("somethink"), "somethink");});
test("sometime -> sometim", function() {deepEqual( Stem("sometime"), "sometim");});
test("sometimes -> sometim", function() {deepEqual( Stem("sometimes"), "sometim");});
test("someway -> someway", function() {deepEqual( Stem("someway"), "someway");});
test("somewhat -> somewhat", function() {deepEqual( Stem("somewhat"), "somewhat");});
test("somewhere -> somewher", function() {deepEqual( Stem("somewhere"), "somewher");});
test("somewheres -> somewher", function() {deepEqual( Stem("somewheres"), "somewher");});
test("somewhither -> somewhith", function() {deepEqual( Stem("somewhither"), "somewhith");});
test("somnolent -> somnol", function() {deepEqual( Stem("somnolent"), "somnol");});
test("somnum -> somnum", function() {deepEqual( Stem("somnum"), "somnum");});
test("son -> son", function() {deepEqual( Stem("son"), "son");});
test("sondern -> sondern", function() {deepEqual( Stem("sondern"), "sondern");});
test("sone -> sone", function() {deepEqual( Stem("sone"), "sone");});
test("song -> song", function() {deepEqual( Stem("song"), "song");});
test("songs -> song", function() {deepEqual( Stem("songs"), "song");});
test("sonia -> sonia", function() {deepEqual( Stem("sonia"), "sonia");});
test("sonnets -> sonnet", function() {deepEqual( Stem("sonnets"), "sonnet");});
test("sonorous -> sonor", function() {deepEqual( Stem("sonorous"), "sonor");});
test("sonorously -> sonor", function() {deepEqual( Stem("sonorously"), "sonor");});
test("sonourous -> sonour", function() {deepEqual( Stem("sonourous"), "sonour");});
test("sons -> son", function() {deepEqual( Stem("sons"), "son");});
test("soobjact -> soobjact", function() {deepEqual( Stem("soobjact"), "soobjact");});
test("soodden -> soodden", function() {deepEqual( Stem("soodden"), "soodden");});
test("sooffer -> sooffer", function() {deepEqual( Stem("sooffer"), "sooffer");});
test("soom -> soom", function() {deepEqual( Stem("soom"), "soom");});
test("soomat -> soomat", function() {deepEqual( Stem("soomat"), "soomat");});
test("soon -> soon", function() {deepEqual( Stem("soon"), "soon");});
test("sooner -> sooner", function() {deepEqual( Stem("sooner"), "sooner");});
test("soonest -> soonest", function() {deepEqual( Stem("soonest"), "soonest");});
test("soop -> soop", function() {deepEqual( Stem("soop"), "soop");});
test("sooper -> sooper", function() {deepEqual( Stem("sooper"), "sooper");});
test("soot -> soot", function() {deepEqual( Stem("soot"), "soot");});
test("sooth -> sooth", function() {deepEqual( Stem("sooth"), "sooth");});
test("soothe -> sooth", function() {deepEqual( Stem("soothe"), "sooth");});
test("soothed -> sooth", function() {deepEqual( Stem("soothed"), "sooth");});
test("soothing -> sooth", function() {deepEqual( Stem("soothing"), "sooth");});
test("soothingly -> sooth", function() {deepEqual( Stem("soothingly"), "sooth");});
test("sooty -> sooti", function() {deepEqual( Stem("sooty"), "sooti");});
test("sop -> sop", function() {deepEqual( Stem("sop"), "sop");});
test("sophistry -> sophistri", function() {deepEqual( Stem("sophistry"), "sophistri");});
test("soporific -> soporif", function() {deepEqual( Stem("soporific"), "soporif");});
test("sopped -> sop", function() {deepEqual( Stem("sopped"), "sop");});
test("sorcery -> sorceri", function() {deepEqual( Stem("sorcery"), "sorceri");});
test("sordid -> sordid", function() {deepEqual( Stem("sordid"), "sordid");});
test("sore -> sore", function() {deepEqual( Stem("sore"), "sore");});
test("sorely -> sore", function() {deepEqual( Stem("sorely"), "sore");});
test("soreness -> sore", function() {deepEqual( Stem("soreness"), "sore");});
test("sores -> sore", function() {deepEqual( Stem("sores"), "sore");});
test("sorest -> sorest", function() {deepEqual( Stem("sorest"), "sorest");});
test("sorrel -> sorrel", function() {deepEqual( Stem("sorrel"), "sorrel");});
test("sorrow -> sorrow", function() {deepEqual( Stem("sorrow"), "sorrow");});
test("sorrowful -> sorrow", function() {deepEqual( Stem("sorrowful"), "sorrow");});
test("sorrowfully -> sorrow", function() {deepEqual( Stem("sorrowfully"), "sorrow");});
test("sorrowing -> sorrow", function() {deepEqual( Stem("sorrowing"), "sorrow");});
test("sorrows -> sorrow", function() {deepEqual( Stem("sorrows"), "sorrow");});
test("sorry -> sorri", function() {deepEqual( Stem("sorry"), "sorri");});
test("sort -> sort", function() {deepEqual( Stem("sort"), "sort");});
test("sorted -> sort", function() {deepEqual( Stem("sorted"), "sort");});
test("sorting -> sort", function() {deepEqual( Stem("sorting"), "sort");});
test("sorts -> sort", function() {deepEqual( Stem("sorts"), "sort");});
test("sotto -> sotto", function() {deepEqual( Stem("sotto"), "sotto");});
test("sought -> sought", function() {deepEqual( Stem("sought"), "sought");});
test("soul -> soul", function() {deepEqual( Stem("soul"), "soul");});
test("souled -> soul", function() {deepEqual( Stem("souled"), "soul");});
test("souls -> soul", function() {deepEqual( Stem("souls"), "soul");});
test("soun -> soun", function() {deepEqual( Stem("soun"), "soun");});
test("sound -> sound", function() {deepEqual( Stem("sound"), "sound");});
test("sounded -> sound", function() {deepEqual( Stem("sounded"), "sound");});
test("sounder -> sounder", function() {deepEqual( Stem("sounder"), "sounder");});
test("sounding -> sound", function() {deepEqual( Stem("sounding"), "sound");});
test("soundings -> sound", function() {deepEqual( Stem("soundings"), "sound");});
test("soundly -> sound", function() {deepEqual( Stem("soundly"), "sound");});
test("soundness -> sound", function() {deepEqual( Stem("soundness"), "sound");});
test("sounds -> sound", function() {deepEqual( Stem("sounds"), "sound");});
test("soup -> soup", function() {deepEqual( Stem("soup"), "soup");});
test("sour -> sour", function() {deepEqual( Stem("sour"), "sour");});
test("source -> sourc", function() {deepEqual( Stem("source"), "sourc");});
test("sources -> sourc", function() {deepEqual( Stem("sources"), "sourc");});
test("soured -> sour", function() {deepEqual( Stem("soured"), "sour");});
test("souring -> sour", function() {deepEqual( Stem("souring"), "sour");});
test("sourly -> sour", function() {deepEqual( Stem("sourly"), "sour");});
test("sous -> sous", function() {deepEqual( Stem("sous"), "sous");});
test("soused -> sous", function() {deepEqual( Stem("soused"), "sous");});
test("sousing -> sous", function() {deepEqual( Stem("sousing"), "sous");});
test("sout -> sout", function() {deepEqual( Stem("sout"), "sout");});
test("south -> south", function() {deepEqual( Stem("south"), "south");});
test("southampton -> southampton", function() {deepEqual( Stem("southampton"), "southampton");});
test("southerly -> souther", function() {deepEqual( Stem("southerly"), "souther");});
test("southern -> southern", function() {deepEqual( Stem("southern"), "southern");});
test("southfront -> southfront", function() {deepEqual( Stem("southfront"), "southfront");});
test("southward -> southward", function() {deepEqual( Stem("southward"), "southward");});
test("southwards -> southward", function() {deepEqual( Stem("southwards"), "southward");});
test("southwestern -> southwestern", function() {deepEqual( Stem("southwestern"), "southwestern");});
test("sov -> sov", function() {deepEqual( Stem("sov"), "sov");});
test("sovereign -> sovereign", function() {deepEqual( Stem("sovereign"), "sovereign");});
test("sovereignest -> sovereignest", function() {deepEqual( Stem("sovereignest"), "sovereignest");});
test("sovereigns -> sovereign", function() {deepEqual( Stem("sovereigns"), "sovereign");});
test("sovereignty -> sovereignti", function() {deepEqual( Stem("sovereignty"), "sovereignti");});
test("sow -> sow", function() {deepEqual( Stem("sow"), "sow");});
test("sowed -> sow", function() {deepEqual( Stem("sowed"), "sow");});
test("sowerby -> sowerbi", function() {deepEqual( Stem("sowerby"), "sowerbi");});
test("sowing -> sow", function() {deepEqual( Stem("sowing"), "sow");});
test("sown -> sown", function() {deepEqual( Stem("sown"), "sown");});
test("sows -> sow", function() {deepEqual( Stem("sows"), "sow");});
test("space -> space", function() {deepEqual( Stem("space"), "space");});
test("spaces -> space", function() {deepEqual( Stem("spaces"), "space");});
test("spacious -> spacious", function() {deepEqual( Stem("spacious"), "spacious");});
test("spade -> spade", function() {deepEqual( Stem("spade"), "spade");});
test("spain -> spain", function() {deepEqual( Stem("spain"), "spain");});
test("spak -> spak", function() {deepEqual( Stem("spak"), "spak");});
test("spake -> spake", function() {deepEqual( Stem("spake"), "spake");});
test("spaletro -> spaletro", function() {deepEqual( Stem("spaletro"), "spaletro");});
test("span -> span", function() {deepEqual( Stem("span"), "span");});
test("spangled -> spangl", function() {deepEqual( Stem("spangled"), "spangl");});
test("spaniard -> spaniard", function() {deepEqual( Stem("spaniard"), "spaniard");});
test("spaniards -> spaniard", function() {deepEqual( Stem("spaniards"), "spaniard");});
test("spaniels -> spaniel", function() {deepEqual( Stem("spaniels"), "spaniel");});
test("spanish -> spanish", function() {deepEqual( Stem("spanish"), "spanish");});
test("spanned -> span", function() {deepEqual( Stem("spanned"), "span");});
test("spar -> spar", function() {deepEqual( Stem("spar"), "spar");});
test("spare -> spare", function() {deepEqual( Stem("spare"), "spare");});
test("spared -> spare", function() {deepEqual( Stem("spared"), "spare");});
test("spares -> spare", function() {deepEqual( Stem("spares"), "spare");});
test("sparing -> spare", function() {deepEqual( Stem("sparing"), "spare");});
test("sparingly -> spare", function() {deepEqual( Stem("sparingly"), "spare");});
test("spark -> spark", function() {deepEqual( Stem("spark"), "spark");});
test("sparking -> spark", function() {deepEqual( Stem("sparking"), "spark");});
test("sparkle -> sparkl", function() {deepEqual( Stem("sparkle"), "sparkl");});
test("sparkled -> sparkl", function() {deepEqual( Stem("sparkled"), "sparkl");});
test("sparklers -> sparkler", function() {deepEqual( Stem("sparklers"), "sparkler");});
test("sparkles -> sparkl", function() {deepEqual( Stem("sparkles"), "sparkl");});
test("sparkling -> sparkl", function() {deepEqual( Stem("sparkling"), "sparkl");});
test("sparks -> spark", function() {deepEqual( Stem("sparks"), "spark");});
test("sparring -> spar", function() {deepEqual( Stem("sparring"), "spar");});
test("sparrow -> sparrow", function() {deepEqual( Stem("sparrow"), "sparrow");});
test("sparrows -> sparrow", function() {deepEqual( Stem("sparrows"), "sparrow");});
test("spartan -> spartan", function() {deepEqual( Stem("spartan"), "spartan");});
test("spasm -> spasm", function() {deepEqual( Stem("spasm"), "spasm");});
test("spasmodic -> spasmod", function() {deepEqual( Stem("spasmodic"), "spasmod");});
test("spasmodically -> spasmod", function() {deepEqual( Stem("spasmodically"), "spasmod");});
test("spasms -> spasm", function() {deepEqual( Stem("spasms"), "spasm");});
test("spat -> spat", function() {deepEqual( Stem("spat"), "spat");});
test("spattered -> spatter", function() {deepEqual( Stem("spattered"), "spatter");});
test("spawn -> spawn", function() {deepEqual( Stem("spawn"), "spawn");});
test("speak -> speak", function() {deepEqual( Stem("speak"), "speak");});
test("speaker -> speaker", function() {deepEqual( Stem("speaker"), "speaker");});
test("speaketh -> speaketh", function() {deepEqual( Stem("speaketh"), "speaketh");});
test("speakin -> speakin", function() {deepEqual( Stem("speakin"), "speakin");});
test("speaking -> speak", function() {deepEqual( Stem("speaking"), "speak");});
test("speaks -> speak", function() {deepEqual( Stem("speaks"), "speak");});
test("spear -> spear", function() {deepEqual( Stem("spear"), "spear");});
test("spearhead -> spearhead", function() {deepEqual( Stem("spearhead"), "spearhead");});
test("spearing -> spear", function() {deepEqual( Stem("spearing"), "spear");});
test("spears -> spear", function() {deepEqual( Stem("spears"), "spear");});
test("spec -> spec", function() {deepEqual( Stem("spec"), "spec");});
test("special -> special", function() {deepEqual( Stem("special"), "special");});
test("specialist -> specialist", function() {deepEqual( Stem("specialist"), "specialist");});
test("speciality -> special", function() {deepEqual( Stem("speciality"), "special");});
test("specially -> special", function() {deepEqual( Stem("specially"), "special");});
test("specialty -> specialti", function() {deepEqual( Stem("specialty"), "specialti");});
test("species -> speci", function() {deepEqual( Stem("species"), "speci");});
test("specific -> specif", function() {deepEqual( Stem("specific"), "specif");});
test("specifically -> specif", function() {deepEqual( Stem("specifically"), "specif");});
test("specified -> specifi", function() {deepEqual( Stem("specified"), "specifi");});
test("specify -> specifi", function() {deepEqual( Stem("specify"), "specifi");});
test("specimen -> specimen", function() {deepEqual( Stem("specimen"), "specimen");});
test("specimens -> specimen", function() {deepEqual( Stem("specimens"), "specimen");});
test("specious -> specious", function() {deepEqual( Stem("specious"), "specious");});
test("speck -> speck", function() {deepEqual( Stem("speck"), "speck");});
test("speckelation -> speckel", function() {deepEqual( Stem("speckelation"), "speckel");});
test("speckled -> speckl", function() {deepEqual( Stem("speckled"), "speckl");});
test("specks -> speck", function() {deepEqual( Stem("specks"), "speck");});
test("spectacle -> spectacl", function() {deepEqual( Stem("spectacle"), "spectacl");});
test("spectacled -> spectacl", function() {deepEqual( Stem("spectacled"), "spectacl");});
test("spectacles -> spectacl", function() {deepEqual( Stem("spectacles"), "spectacl");});
test("spectator -> spectat", function() {deepEqual( Stem("spectator"), "spectat");});
test("spectators -> spectat", function() {deepEqual( Stem("spectators"), "spectat");});
test("spectral -> spectral", function() {deepEqual( Stem("spectral"), "spectral");});
test("spectre -> spectr", function() {deepEqual( Stem("spectre"), "spectr");});
test("speculate -> specul", function() {deepEqual( Stem("speculate"), "specul");});
test("speculated -> specul", function() {deepEqual( Stem("speculated"), "specul");});
test("speculates -> specul", function() {deepEqual( Stem("speculates"), "specul");});
test("speculating -> specul", function() {deepEqual( Stem("speculating"), "specul");});
test("speculation -> specul", function() {deepEqual( Stem("speculation"), "specul");});
test("speculations -> specul", function() {deepEqual( Stem("speculations"), "specul");});
test("speculative -> specul", function() {deepEqual( Stem("speculative"), "specul");});
test("speculator -> specul", function() {deepEqual( Stem("speculator"), "specul");});
test("speculators -> specul", function() {deepEqual( Stem("speculators"), "specul");});
test("sped -> sped", function() {deepEqual( Stem("sped"), "sped");});
test("speech -> speech", function() {deepEqual( Stem("speech"), "speech");});
test("speeches -> speech", function() {deepEqual( Stem("speeches"), "speech");});
test("speechifying -> speechifi", function() {deepEqual( Stem("speechifying"), "speechifi");});
test("speechless -> speechless", function() {deepEqual( Stem("speechless"), "speechless");});
test("speechlessly -> speechless", function() {deepEqual( Stem("speechlessly"), "speechless");});
test("speed -> speed", function() {deepEqual( Stem("speed"), "speed");});
test("speediest -> speediest", function() {deepEqual( Stem("speediest"), "speediest");});
test("speedily -> speedili", function() {deepEqual( Stem("speedily"), "speedili");});
test("speedy -> speedi", function() {deepEqual( Stem("speedy"), "speedi");});
test("spell -> spell", function() {deepEqual( Stem("spell"), "spell");});
test("spelling -> spell", function() {deepEqual( Stem("spelling"), "spell");});
test("spells -> spell", function() {deepEqual( Stem("spells"), "spell");});
test("spelt -> spelt", function() {deepEqual( Stem("spelt"), "spelt");});
test("spence -> spenc", function() {deepEqual( Stem("spence"), "spenc");});
test("spencer -> spencer", function() {deepEqual( Stem("spencer"), "spencer");});
test("spend -> spend", function() {deepEqual( Stem("spend"), "spend");});
test("spending -> spend", function() {deepEqual( Stem("spending"), "spend");});
test("spends -> spend", function() {deepEqual( Stem("spends"), "spend");});
test("spendthrift -> spendthrift", function() {deepEqual( Stem("spendthrift"), "spendthrift");});
test("spent -> spent", function() {deepEqual( Stem("spent"), "spent");});
test("spermaceti -> spermaceti", function() {deepEqual( Stem("spermaceti"), "spermaceti");});
test("sphere -> sphere", function() {deepEqual( Stem("sphere"), "sphere");});
test("spheres -> sphere", function() {deepEqual( Stem("spheres"), "sphere");});
test("spherical -> spheric", function() {deepEqual( Stem("spherical"), "spheric");});
test("sphex -> sphex", function() {deepEqual( Stem("sphex"), "sphex");});
test("sphinx -> sphinx", function() {deepEqual( Stem("sphinx"), "sphinx");});
test("sphinxes -> sphinx", function() {deepEqual( Stem("sphinxes"), "sphinx");});
test("spice -> spice", function() {deepEqual( Stem("spice"), "spice");});
test("spick -> spick", function() {deepEqual( Stem("spick"), "spick");});
test("spicula -> spicula", function() {deepEqual( Stem("spicula"), "spicula");});
test("spicy -> spici", function() {deepEqual( Stem("spicy"), "spici");});
test("spider -> spider", function() {deepEqual( Stem("spider"), "spider");});
test("spiders -> spider", function() {deepEqual( Stem("spiders"), "spider");});
test("spied -> spi", function() {deepEqual( Stem("spied"), "spi");});
test("spies -> spi", function() {deepEqual( Stem("spies"), "spi");});
test("spigwiffin -> spigwiffin", function() {deepEqual( Stem("spigwiffin"), "spigwiffin");});
test("spiked -> spike", function() {deepEqual( Stem("spiked"), "spike");});
test("spikes -> spike", function() {deepEqual( Stem("spikes"), "spike");});
test("spileing -> spile", function() {deepEqual( Stem("spileing"), "spile");});
test("spill -> spill", function() {deepEqual( Stem("spill"), "spill");});
test("spilled -> spill", function() {deepEqual( Stem("spilled"), "spill");});
test("spilling -> spill", function() {deepEqual( Stem("spilling"), "spill");});
test("spilt -> spilt", function() {deepEqual( Stem("spilt"), "spilt");});
test("spin -> spin", function() {deepEqual( Stem("spin"), "spin");});
test("spinach -> spinach", function() {deepEqual( Stem("spinach"), "spinach");});
test("spinal -> spinal", function() {deepEqual( Stem("spinal"), "spinal");});
test("spindle -> spindl", function() {deepEqual( Stem("spindle"), "spindl");});
test("spine -> spine", function() {deepEqual( Stem("spine"), "spine");});
test("spines -> spine", function() {deepEqual( Stem("spines"), "spine");});
test("spinners -> spinner", function() {deepEqual( Stem("spinners"), "spinner");});
test("spinnies -> spinni", function() {deepEqual( Stem("spinnies"), "spinni");});
test("spinning -> spin", function() {deepEqual( Stem("spinning"), "spin");});
test("spinster -> spinster", function() {deepEqual( Stem("spinster"), "spinster");});
test("spiny -> spini", function() {deepEqual( Stem("spiny"), "spini");});
test("spiral -> spiral", function() {deepEqual( Stem("spiral"), "spiral");});
test("spirally -> spiral", function() {deepEqual( Stem("spirally"), "spiral");});
test("spire -> spire", function() {deepEqual( Stem("spire"), "spire");});
test("spires -> spire", function() {deepEqual( Stem("spires"), "spire");});
test("spirit -> spirit", function() {deepEqual( Stem("spirit"), "spirit");});
test("spirited -> spirit", function() {deepEqual( Stem("spirited"), "spirit");});
test("spiritless -> spiritless", function() {deepEqual( Stem("spiritless"), "spiritless");});
test("spirits -> spirit", function() {deepEqual( Stem("spirits"), "spirit");});
test("spiritual -> spiritu", function() {deepEqual( Stem("spiritual"), "spiritu");});
test("spirituous -> spiritu", function() {deepEqual( Stem("spirituous"), "spiritu");});
test("spirt -> spirt", function() {deepEqual( Stem("spirt"), "spirt");});
test("spirted -> spirt", function() {deepEqual( Stem("spirted"), "spirt");});
test("spit -> spit", function() {deepEqual( Stem("spit"), "spit");});
test("spite -> spite", function() {deepEqual( Stem("spite"), "spite");});
test("spiteful -> spite", function() {deepEqual( Stem("spiteful"), "spite");});
test("spitefully -> spite", function() {deepEqual( Stem("spitefully"), "spite");});
test("spitefulness -> spite", function() {deepEqual( Stem("spitefulness"), "spite");});
test("spithead -> spithead", function() {deepEqual( Stem("spithead"), "spithead");});
test("spits -> spit", function() {deepEqual( Stem("spits"), "spit");});
test("spitting -> spit", function() {deepEqual( Stem("spitting"), "spit");});
test("spittoon -> spittoon", function() {deepEqual( Stem("spittoon"), "spittoon");});
test("spittoons -> spittoon", function() {deepEqual( Stem("spittoons"), "spittoon");});
test("spitzbergen -> spitzbergen", function() {deepEqual( Stem("spitzbergen"), "spitzbergen");});
test("splash -> splash", function() {deepEqual( Stem("splash"), "splash");});
test("splashed -> splash", function() {deepEqual( Stem("splashed"), "splash");});
test("splashes -> splash", function() {deepEqual( Stem("splashes"), "splash");});
test("splashin -> splashin", function() {deepEqual( Stem("splashin"), "splashin");});
test("splashing -> splash", function() {deepEqual( Stem("splashing"), "splash");});
test("spleen -> spleen", function() {deepEqual( Stem("spleen"), "spleen");});
test("splendid -> splendid", function() {deepEqual( Stem("splendid"), "splendid");});
test("splendidly -> splendid", function() {deepEqual( Stem("splendidly"), "splendid");});
test("splendour -> splendour", function() {deepEqual( Stem("splendour"), "splendour");});
test("splendours -> splendour", function() {deepEqual( Stem("splendours"), "splendour");});
test("splenetic -> splenet", function() {deepEqual( Stem("splenetic"), "splenet");});
test("splinter -> splinter", function() {deepEqual( Stem("splinter"), "splinter");});
test("split -> split", function() {deepEqual( Stem("split"), "split");});
test("splitting -> split", function() {deepEqual( Stem("splitting"), "split");});
test("sploiced -> sploic", function() {deepEqual( Stem("sploiced"), "sploic");});
test("splutter -> splutter", function() {deepEqual( Stem("splutter"), "splutter");});
test("spluttering -> splutter", function() {deepEqual( Stem("spluttering"), "splutter");});
test("spo -> spo", function() {deepEqual( Stem("spo"), "spo");});
test("spoil -> spoil", function() {deepEqual( Stem("spoil"), "spoil");});
test("spoiled -> spoil", function() {deepEqual( Stem("spoiled"), "spoil");});
test("spoiling -> spoil", function() {deepEqual( Stem("spoiling"), "spoil");});
test("spoils -> spoil", function() {deepEqual( Stem("spoils"), "spoil");});
test("spoilt -> spoilt", function() {deepEqual( Stem("spoilt"), "spoilt");});
test("spoke -> spoke", function() {deepEqual( Stem("spoke"), "spoke");});
test("spoken -> spoken", function() {deepEqual( Stem("spoken"), "spoken");});
test("spokesman -> spokesman", function() {deepEqual( Stem("spokesman"), "spokesman");});
test("spoliation -> spoliat", function() {deepEqual( Stem("spoliation"), "spoliat");});
test("sponge -> spong", function() {deepEqual( Stem("sponge"), "spong");});
test("spongey -> spongey", function() {deepEqual( Stem("spongey"), "spongey");});
test("sponsor -> sponsor", function() {deepEqual( Stem("sponsor"), "sponsor");});
test("sponsorial -> sponsori", function() {deepEqual( Stem("sponsorial"), "sponsori");});
test("sponsors -> sponsor", function() {deepEqual( Stem("sponsors"), "sponsor");});
test("spontaneous -> spontan", function() {deepEqual( Stem("spontaneous"), "spontan");});
test("spontaneously -> spontan", function() {deepEqual( Stem("spontaneously"), "spontan");});
test("spoon -> spoon", function() {deepEqual( Stem("spoon"), "spoon");});
test("spoonbill -> spoonbil", function() {deepEqual( Stem("spoonbill"), "spoonbil");});
test("spoonful -> spoon", function() {deepEqual( Stem("spoonful"), "spoon");});
test("spoonfuls -> spoon", function() {deepEqual( Stem("spoonfuls"), "spoon");});
test("spoons -> spoon", function() {deepEqual( Stem("spoons"), "spoon");});
test("sport -> sport", function() {deepEqual( Stem("sport"), "sport");});
test("sported -> sport", function() {deepEqual( Stem("sported"), "sport");});
test("sporting -> sport", function() {deepEqual( Stem("sporting"), "sport");});
test("sportive -> sportiv", function() {deepEqual( Stem("sportive"), "sportiv");});
test("sportiveness -> sportiv", function() {deepEqual( Stem("sportiveness"), "sportiv");});
test("sports -> sport", function() {deepEqual( Stem("sports"), "sport");});
test("sportsman -> sportsman", function() {deepEqual( Stem("sportsman"), "sportsman");});
test("sportsmen -> sportsmen", function() {deepEqual( Stem("sportsmen"), "sportsmen");});
test("sporules -> sporul", function() {deepEqual( Stem("sporules"), "sporul");});
test("spot -> spot", function() {deepEqual( Stem("spot"), "spot");});
test("spotless -> spotless", function() {deepEqual( Stem("spotless"), "spotless");});
test("spots -> spot", function() {deepEqual( Stem("spots"), "spot");});
test("spotted -> spot", function() {deepEqual( Stem("spotted"), "spot");});
test("spotty -> spotti", function() {deepEqual( Stem("spotty"), "spotti");});
test("spouse -> spous", function() {deepEqual( Stem("spouse"), "spous");});
test("spout -> spout", function() {deepEqual( Stem("spout"), "spout");});
test("spouting -> spout", function() {deepEqual( Stem("spouting"), "spout");});
test("spouts -> spout", function() {deepEqual( Stem("spouts"), "spout");});
test("spraining -> sprain", function() {deepEqual( Stem("spraining"), "sprain");});
test("sprang -> sprang", function() {deepEqual( Stem("sprang"), "sprang");});
test("sprawler -> sprawler", function() {deepEqual( Stem("sprawler"), "sprawler");});
test("sprawls -> sprawl", function() {deepEqual( Stem("sprawls"), "sprawl");});
test("spray -> spray", function() {deepEqual( Stem("spray"), "spray");});
test("spread -> spread", function() {deepEqual( Stem("spread"), "spread");});
test("spreading -> spread", function() {deepEqual( Stem("spreading"), "spread");});
test("spreads -> spread", function() {deepEqual( Stem("spreads"), "spread");});
test("spree -> spree", function() {deepEqual( Stem("spree"), "spree");});
test("sprightliness -> sprightli", function() {deepEqual( Stem("sprightliness"), "sprightli");});
test("sprightly -> spright", function() {deepEqual( Stem("sprightly"), "spright");});
test("spring -> spring", function() {deepEqual( Stem("spring"), "spring");});
test("springing -> spring", function() {deepEqual( Stem("springing"), "spring");});
test("springs -> spring", function() {deepEqual( Stem("springs"), "spring");});
test("sprinkle -> sprinkl", function() {deepEqual( Stem("sprinkle"), "sprinkl");});
test("sprinkled -> sprinkl", function() {deepEqual( Stem("sprinkled"), "sprinkl");});
test("sprinkling -> sprinkl", function() {deepEqual( Stem("sprinkling"), "sprinkl");});
test("sprite -> sprite", function() {deepEqual( Stem("sprite"), "sprite");});
test("sprott -> sprott", function() {deepEqual( Stem("sprott"), "sprott");});
test("sprout -> sprout", function() {deepEqual( Stem("sprout"), "sprout");});
test("sprouter -> sprouter", function() {deepEqual( Stem("sprouter"), "sprouter");});
test("sprouts -> sprout", function() {deepEqual( Stem("sprouts"), "sprout");});
test("spruce -> spruce", function() {deepEqual( Stem("spruce"), "spruce");});
test("sprucely -> spruce", function() {deepEqual( Stem("sprucely"), "spruce");});
test("sprugeon -> sprugeon", function() {deepEqual( Stem("sprugeon"), "sprugeon");});
test("sprugeons -> sprugeon", function() {deepEqual( Stem("sprugeons"), "sprugeon");});
test("sprung -> sprung", function() {deepEqual( Stem("sprung"), "sprung");});
test("spun -> spun", function() {deepEqual( Stem("spun"), "spun");});
test("spur -> spur", function() {deepEqual( Stem("spur"), "spur");});
test("spurn -> spurn", function() {deepEqual( Stem("spurn"), "spurn");});
test("spurned -> spurn", function() {deepEqual( Stem("spurned"), "spurn");});
test("spurred -> spur", function() {deepEqual( Stem("spurred"), "spur");});
test("spurs -> spur", function() {deepEqual( Stem("spurs"), "spur");});
test("spy -> spi", function() {deepEqual( Stem("spy"), "spi");});
test("spying -> spi", function() {deepEqual( Stem("spying"), "spi");});
test("squabble -> squabbl", function() {deepEqual( Stem("squabble"), "squabbl");});
test("squabbles -> squabbl", function() {deepEqual( Stem("squabbles"), "squabbl");});
test("squabbling -> squabbl", function() {deepEqual( Stem("squabbling"), "squabbl");});
test("squabs -> squab", function() {deepEqual( Stem("squabs"), "squab");});
test("squalid -> squalid", function() {deepEqual( Stem("squalid"), "squalid");});
test("squall -> squall", function() {deepEqual( Stem("squall"), "squall");});
test("squallingest -> squallingest", function() {deepEqual( Stem("squallingest"), "squallingest");});
test("squalls -> squall", function() {deepEqual( Stem("squalls"), "squall");});
test("squally -> squalli", function() {deepEqual( Stem("squally"), "squalli");});
test("squalor -> squalor", function() {deepEqual( Stem("squalor"), "squalor");});
test("squander -> squander", function() {deepEqual( Stem("squander"), "squander");});
test("squandered -> squander", function() {deepEqual( Stem("squandered"), "squander");});
test("squandering -> squander", function() {deepEqual( Stem("squandering"), "squander");});
test("square -> squar", function() {deepEqual( Stem("square"), "squar");});
test("squared -> squar", function() {deepEqual( Stem("squared"), "squar");});
test("squarely -> squar", function() {deepEqual( Stem("squarely"), "squar");});
test("squarer -> squarer", function() {deepEqual( Stem("squarer"), "squarer");});
test("squares -> squar", function() {deepEqual( Stem("squares"), "squar");});
test("squaring -> squar", function() {deepEqual( Stem("squaring"), "squar");});
test("squashed -> squash", function() {deepEqual( Stem("squashed"), "squash");});
test("squat -> squat", function() {deepEqual( Stem("squat"), "squat");});
test("squatted -> squat", function() {deepEqual( Stem("squatted"), "squat");});
test("squatters -> squatter", function() {deepEqual( Stem("squatters"), "squatter");});
test("squatting -> squat", function() {deepEqual( Stem("squatting"), "squat");});
test("squeak -> squeak", function() {deepEqual( Stem("squeak"), "squeak");});
test("squeaked -> squeak", function() {deepEqual( Stem("squeaked"), "squeak");});
test("squeal -> squeal", function() {deepEqual( Stem("squeal"), "squeal");});
test("squealed -> squeal", function() {deepEqual( Stem("squealed"), "squeal");});
test("squealing -> squeal", function() {deepEqual( Stem("squealing"), "squeal");});
test("squeals -> squeal", function() {deepEqual( Stem("squeals"), "squeal");});
test("squeamishly -> squeamish", function() {deepEqual( Stem("squeamishly"), "squeamish");});
test("squeamishness -> squeamish", function() {deepEqual( Stem("squeamishness"), "squeamish");});
test("squeedged -> squeedg", function() {deepEqual( Stem("squeedged"), "squeedg");});
test("squeedgin -> squeedgin", function() {deepEqual( Stem("squeedgin"), "squeedgin");});
test("squeer -> squeer", function() {deepEqual( Stem("squeer"), "squeer");});
test("squeers -> squeer", function() {deepEqual( Stem("squeers"), "squeer");});
test("squeerses -> squeers", function() {deepEqual( Stem("squeerses"), "squeers");});
test("squeery -> squeeri", function() {deepEqual( Stem("squeery"), "squeeri");});
test("squeeze -> squeez", function() {deepEqual( Stem("squeeze"), "squeez");});
test("squeezed -> squeez", function() {deepEqual( Stem("squeezed"), "squeez");});
test("squeezes -> squeez", function() {deepEqual( Stem("squeezes"), "squeez");});
test("squeezing -> squeez", function() {deepEqual( Stem("squeezing"), "squeez");});
test("squib -> squib", function() {deepEqual( Stem("squib"), "squib");});
test("squint -> squint", function() {deepEqual( Stem("squint"), "squint");});
test("squire -> squir", function() {deepEqual( Stem("squire"), "squir");});
test("squirearchy -> squirearchi", function() {deepEqual( Stem("squirearchy"), "squirearchi");});
test("squires -> squir", function() {deepEqual( Stem("squires"), "squir");});
test("squiress -> squiress", function() {deepEqual( Stem("squiress"), "squiress");});
test("squirt -> squirt", function() {deepEqual( Stem("squirt"), "squirt");});
test("squod -> squod", function() {deepEqual( Stem("squod"), "squod");});
test("st -> st", function() {deepEqual( Stem("st"), "st");});
test("stab -> stab", function() {deepEqual( Stem("stab"), "stab");});
test("stabbed -> stab", function() {deepEqual( Stem("stabbed"), "stab");});
test("stabbing -> stab", function() {deepEqual( Stem("stabbing"), "stab");});
test("stability -> stabil", function() {deepEqual( Stem("stability"), "stabil");});
test("stable -> stabl", function() {deepEqual( Stem("stable"), "stabl");});
test("stabled -> stabl", function() {deepEqual( Stem("stabled"), "stabl");});
test("stables -> stabl", function() {deepEqual( Stem("stables"), "stabl");});
test("stablewards -> stableward", function() {deepEqual( Stem("stablewards"), "stableward");});
test("stabling -> stabl", function() {deepEqual( Stem("stabling"), "stabl");});
test("stack -> stack", function() {deepEqual( Stem("stack"), "stack");});
test("stacks -> stack", function() {deepEqual( Stem("stacks"), "stack");});
test("staff -> staff", function() {deepEqual( Stem("staff"), "staff");});
test("staffordshire -> staffordshir", function() {deepEqual( Stem("staffordshire"), "staffordshir");});
test("staffs -> staff", function() {deepEqual( Stem("staffs"), "staff");});
test("stag -> stag", function() {deepEqual( Stem("stag"), "stag");});
test("stage -> stage", function() {deepEqual( Stem("stage"), "stage");});
test("stagecoach -> stagecoach", function() {deepEqual( Stem("stagecoach"), "stagecoach");});
test("stager -> stager", function() {deepEqual( Stem("stager"), "stager");});
test("stages -> stage", function() {deepEqual( Stem("stages"), "stage");});
test("stagger -> stagger", function() {deepEqual( Stem("stagger"), "stagger");});
test("staggered -> stagger", function() {deepEqual( Stem("staggered"), "stagger");});
test("staggering -> stagger", function() {deepEqual( Stem("staggering"), "stagger");});
test("staggers -> stagger", function() {deepEqual( Stem("staggers"), "stagger");});
test("stagnant -> stagnant", function() {deepEqual( Stem("stagnant"), "stagnant");});
test("stagnating -> stagnat", function() {deepEqual( Stem("stagnating"), "stagnat");});
test("stagnation -> stagnat", function() {deepEqual( Stem("stagnation"), "stagnat");});
test("stags -> stag", function() {deepEqual( Stem("stags"), "stag");});
test("staid -> staid", function() {deepEqual( Stem("staid"), "staid");});
test("staidness -> staid", function() {deepEqual( Stem("staidness"), "staid");});
test("stain -> stain", function() {deepEqual( Stem("stain"), "stain");});
test("stained -> stain", function() {deepEqual( Stem("stained"), "stain");});
test("stains -> stain", function() {deepEqual( Stem("stains"), "stain");});
test("stair -> stair", function() {deepEqual( Stem("stair"), "stair");});
test("staircase -> staircas", function() {deepEqual( Stem("staircase"), "staircas");});
test("staircases -> staircas", function() {deepEqual( Stem("staircases"), "staircas");});
test("stairs -> stair", function() {deepEqual( Stem("stairs"), "stair");});
test("stake -> stake", function() {deepEqual( Stem("stake"), "stake");});
test("staked -> stake", function() {deepEqual( Stem("staked"), "stake");});
test("stakes -> stake", function() {deepEqual( Stem("stakes"), "stake");});
test("staking -> stake", function() {deepEqual( Stem("staking"), "stake");});
test("stalactical -> stalact", function() {deepEqual( Stem("stalactical"), "stalact");});
test("stalactitic -> stalactit", function() {deepEqual( Stem("stalactitic"), "stalactit");});
test("stale -> stale", function() {deepEqual( Stem("stale"), "stale");});
test("staled -> stale", function() {deepEqual( Stem("staled"), "stale");});
test("stalk -> stalk", function() {deepEqual( Stem("stalk"), "stalk");});
test("stalked -> stalk", function() {deepEqual( Stem("stalked"), "stalk");});
test("stalking -> stalk", function() {deepEqual( Stem("stalking"), "stalk");});
test("stalks -> stalk", function() {deepEqual( Stem("stalks"), "stalk");});
test("stall -> stall", function() {deepEqual( Stem("stall"), "stall");});
test("stallion -> stallion", function() {deepEqual( Stem("stallion"), "stallion");});
test("stallions -> stallion", function() {deepEqual( Stem("stallions"), "stallion");});
test("stalwart -> stalwart", function() {deepEqual( Stem("stalwart"), "stalwart");});
test("stamens -> stamen", function() {deepEqual( Stem("stamens"), "stamen");});
test("stamford -> stamford", function() {deepEqual( Stem("stamford"), "stamford");});
test("stammer -> stammer", function() {deepEqual( Stem("stammer"), "stammer");});
test("stammered -> stammer", function() {deepEqual( Stem("stammered"), "stammer");});
test("stammering -> stammer", function() {deepEqual( Stem("stammering"), "stammer");});
test("stammers -> stammer", function() {deepEqual( Stem("stammers"), "stammer");});
test("stamp -> stamp", function() {deepEqual( Stem("stamp"), "stamp");});
test("stamped -> stamp", function() {deepEqual( Stem("stamped"), "stamp");});
test("stamping -> stamp", function() {deepEqual( Stem("stamping"), "stamp");});
test("stamps -> stamp", function() {deepEqual( Stem("stamps"), "stamp");});
test("stan -> stan", function() {deepEqual( Stem("stan"), "stan");});
test("stanch -> stanch", function() {deepEqual( Stem("stanch"), "stanch");});
test("stand -> stand", function() {deepEqual( Stem("stand"), "stand");});
test("standaloft -> standaloft", function() {deepEqual( Stem("standaloft"), "standaloft");});
test("standard -> standard", function() {deepEqual( Stem("standard"), "standard");});
test("standing -> stand", function() {deepEqual( Stem("standing"), "stand");});
test("stands -> stand", function() {deepEqual( Stem("stands"), "stand");});
test("standstill -> standstil", function() {deepEqual( Stem("standstill"), "standstil");});
test("stanza -> stanza", function() {deepEqual( Stem("stanza"), "stanza");});
test("staphylinidae -> staphylinida", function() {deepEqual( Stem("staphylinidae"), "staphylinida");});
test("staple -> stapl", function() {deepEqual( Stem("staple"), "stapl");});
test("star -> star", function() {deepEqual( Stem("star"), "star");});
test("starch -> starch", function() {deepEqual( Stem("starch"), "starch");});
test("starched -> starch", function() {deepEqual( Stem("starched"), "starch");});
test("stare -> stare", function() {deepEqual( Stem("stare"), "stare");});
test("stared -> stare", function() {deepEqual( Stem("stared"), "stare");});
test("stares -> stare", function() {deepEqual( Stem("stares"), "stare");});
test("staring -> stare", function() {deepEqual( Stem("staring"), "stare");});
test("staringly -> stare", function() {deepEqual( Stem("staringly"), "stare");});
test("stark -> stark", function() {deepEqual( Stem("stark"), "stark");});
test("starlight -> starlight", function() {deepEqual( Stem("starlight"), "starlight");});
test("starling -> starl", function() {deepEqual( Stem("starling"), "starl");});
test("starn -> starn", function() {deepEqual( Stem("starn"), "starn");});
test("starred -> star", function() {deepEqual( Stem("starred"), "star");});
test("starry -> starri", function() {deepEqual( Stem("starry"), "starri");});
test("stars -> star", function() {deepEqual( Stem("stars"), "star");});
test("start -> start", function() {deepEqual( Stem("start"), "start");});
test("starte -> start", function() {deepEqual( Stem("starte"), "start");});
test("started -> start", function() {deepEqual( Stem("started"), "start");});
test("starting -> start", function() {deepEqual( Stem("starting"), "start");});
test("startings -> start", function() {deepEqual( Stem("startings"), "start");});
test("startle -> startl", function() {deepEqual( Stem("startle"), "startl");});
test("startled -> startl", function() {deepEqual( Stem("startled"), "startl");});
test("startles -> startl", function() {deepEqual( Stem("startles"), "startl");});
test("startling -> startl", function() {deepEqual( Stem("startling"), "startl");});
test("starts -> start", function() {deepEqual( Stem("starts"), "start");});
test("starvation -> starvat", function() {deepEqual( Stem("starvation"), "starvat");});
test("starve -> starv", function() {deepEqual( Stem("starve"), "starv");});
test("starved -> starv", function() {deepEqual( Stem("starved"), "starv");});
test("starvin -> starvin", function() {deepEqual( Stem("starvin"), "starvin");});
test("starving -> starv", function() {deepEqual( Stem("starving"), "starv");});
test("starwation -> starwat", function() {deepEqual( Stem("starwation"), "starwat");});
test("state -> state", function() {deepEqual( Stem("state"), "state");});
test("statecraft -> statecraft", function() {deepEqual( Stem("statecraft"), "statecraft");});
test("stated -> state", function() {deepEqual( Stem("stated"), "state");});
test("stateliness -> stateli", function() {deepEqual( Stem("stateliness"), "stateli");});
test("stately -> state", function() {deepEqual( Stem("stately"), "state");});
test("statement -> statement", function() {deepEqual( Stem("statement"), "statement");});
test("statements -> statement", function() {deepEqual( Stem("statements"), "statement");});
test("statenland -> statenland", function() {deepEqual( Stem("statenland"), "statenland");});
test("states -> state", function() {deepEqual( Stem("states"), "state");});
test("statesman -> statesman", function() {deepEqual( Stem("statesman"), "statesman");});
test("statesmanlike -> statesmanlik", function() {deepEqual( Stem("statesmanlike"), "statesmanlik");});
test("statesmen -> statesmen", function() {deepEqual( Stem("statesmen"), "statesmen");});
test("stating -> state", function() {deepEqual( Stem("stating"), "state");});
test("station -> station", function() {deepEqual( Stem("station"), "station");});
test("stationary -> stationari", function() {deepEqual( Stem("stationary"), "stationari");});
test("stationed -> station", function() {deepEqual( Stem("stationed"), "station");});
test("stationer -> station", function() {deepEqual( Stem("stationer"), "station");});
test("stationering -> station", function() {deepEqual( Stem("stationering"), "station");});
test("stationers -> station", function() {deepEqual( Stem("stationers"), "station");});
test("stationery -> stationeri", function() {deepEqual( Stem("stationery"), "stationeri");});
test("stations -> station", function() {deepEqual( Stem("stations"), "station");});
test("statu -> statu", function() {deepEqual( Stem("statu"), "statu");});
test("statuary -> statuari", function() {deepEqual( Stem("statuary"), "statuari");});
test("statue -> statu", function() {deepEqual( Stem("statue"), "statu");});
test("statues -> statu", function() {deepEqual( Stem("statues"), "statu");});
test("stature -> statur", function() {deepEqual( Stem("stature"), "statur");});
test("status -> status", function() {deepEqual( Stem("status"), "status");});
test("statute -> statut", function() {deepEqual( Stem("statute"), "statut");});
test("staunch -> staunch", function() {deepEqual( Stem("staunch"), "staunch");});
test("staunchly -> staunch", function() {deepEqual( Stem("staunchly"), "staunch");});
test("staunchness -> staunch", function() {deepEqual( Stem("staunchness"), "staunch");});
test("stave -> stave", function() {deepEqual( Stem("stave"), "stave");});
test("staved -> stave", function() {deepEqual( Stem("staved"), "stave");});
test("staves -> stave", function() {deepEqual( Stem("staves"), "stave");});
test("staving -> stave", function() {deepEqual( Stem("staving"), "stave");});
test("stay -> stay", function() {deepEqual( Stem("stay"), "stay");});
test("stayed -> stay", function() {deepEqual( Stem("stayed"), "stay");});
test("staying -> stay", function() {deepEqual( Stem("staying"), "stay");});
test("staylace -> staylac", function() {deepEqual( Stem("staylace"), "staylac");});
test("stays -> stay", function() {deepEqual( Stem("stays"), "stay");});
test("stead -> stead", function() {deepEqual( Stem("stead"), "stead");});
test("steadfast -> steadfast", function() {deepEqual( Stem("steadfast"), "steadfast");});
test("steadfastly -> steadfast", function() {deepEqual( Stem("steadfastly"), "steadfast");});
test("steadfastness -> steadfast", function() {deepEqual( Stem("steadfastness"), "steadfast");});
test("steadied -> steadi", function() {deepEqual( Stem("steadied"), "steadi");});
test("steadier -> steadier", function() {deepEqual( Stem("steadier"), "steadier");});
test("steadily -> steadili", function() {deepEqual( Stem("steadily"), "steadili");});
test("steadiness -> steadi", function() {deepEqual( Stem("steadiness"), "steadi");});
test("steady -> steadi", function() {deepEqual( Stem("steady"), "steadi");});
test("steak -> steak", function() {deepEqual( Stem("steak"), "steak");});
test("steal -> steal", function() {deepEqual( Stem("steal"), "steal");});
test("stealing -> steal", function() {deepEqual( Stem("stealing"), "steal");});
test("stealings -> steal", function() {deepEqual( Stem("stealings"), "steal");});
test("steals -> steal", function() {deepEqual( Stem("steals"), "steal");});
test("stealth -> stealth", function() {deepEqual( Stem("stealth"), "stealth");});
test("stealthily -> stealthili", function() {deepEqual( Stem("stealthily"), "stealthili");});
test("stealthy -> stealthi", function() {deepEqual( Stem("stealthy"), "stealthi");});
test("steam -> steam", function() {deepEqual( Stem("steam"), "steam");});
test("steamboat -> steamboat", function() {deepEqual( Stem("steamboat"), "steamboat");});
test("steamboats -> steamboat", function() {deepEqual( Stem("steamboats"), "steamboat");});
test("steamed -> steam", function() {deepEqual( Stem("steamed"), "steam");});
test("steamer -> steamer", function() {deepEqual( Stem("steamer"), "steamer");});
test("steamers -> steamer", function() {deepEqual( Stem("steamers"), "steamer");});
test("steaming -> steam", function() {deepEqual( Stem("steaming"), "steam");});
test("steams -> steam", function() {deepEqual( Stem("steams"), "steam");});
test("steddy -> steddi", function() {deepEqual( Stem("steddy"), "steddi");});
test("stee -> stee", function() {deepEqual( Stem("stee"), "stee");});
test("steed -> steed", function() {deepEqual( Stem("steed"), "steed");});
test("steeds -> steed", function() {deepEqual( Stem("steeds"), "steed");});
test("steel -> steel", function() {deepEqual( Stem("steel"), "steel");});
test("steeled -> steel", function() {deepEqual( Stem("steeled"), "steel");});
test("steep -> steep", function() {deepEqual( Stem("steep"), "steep");});
test("steeped -> steep", function() {deepEqual( Stem("steeped"), "steep");});
test("steeper -> steeper", function() {deepEqual( Stem("steeper"), "steeper");});
test("steepest -> steepest", function() {deepEqual( Stem("steepest"), "steepest");});
test("steeple -> steepl", function() {deepEqual( Stem("steeple"), "steepl");});
test("steeplechase -> steeplechas", function() {deepEqual( Stem("steeplechase"), "steeplechas");});
test("steepled -> steepl", function() {deepEqual( Stem("steepled"), "steepl");});
test("steeples -> steepl", function() {deepEqual( Stem("steeples"), "steepl");});
test("steeply -> steepli", function() {deepEqual( Stem("steeply"), "steepli");});
test("steepness -> steep", function() {deepEqual( Stem("steepness"), "steep");});
test("steer -> steer", function() {deepEqual( Stem("steer"), "steer");});
test("steered -> steer", function() {deepEqual( Stem("steered"), "steer");});
test("steering -> steer", function() {deepEqual( Stem("steering"), "steer");});
test("stem -> stem", function() {deepEqual( Stem("stem"), "stem");});
test("stemming -> stem", function() {deepEqual( Stem("stemming"), "stem");});
test("stems -> stem", function() {deepEqual( Stem("stems"), "stem");});
test("stench -> stench", function() {deepEqual( Stem("stench"), "stench");});
test("stentorian -> stentorian", function() {deepEqual( Stem("stentorian"), "stentorian");});
test("step -> step", function() {deepEqual( Stem("step"), "step");});
test("stepdaughter -> stepdaught", function() {deepEqual( Stem("stepdaughter"), "stepdaught");});
test("stephenson -> stephenson", function() {deepEqual( Stem("stephenson"), "stephenson");});
test("stepmother -> stepmoth", function() {deepEqual( Stem("stepmother"), "stepmoth");});
test("steppe -> stepp", function() {deepEqual( Stem("steppe"), "stepp");});
test("stepped -> step", function() {deepEqual( Stem("stepped"), "step");});
test("steppes -> stepp", function() {deepEqual( Stem("steppes"), "stepp");});
test("stepping -> step", function() {deepEqual( Stem("stepping"), "step");});
test("steps -> step", function() {deepEqual( Stem("steps"), "step");});
test("stepson -> stepson", function() {deepEqual( Stem("stepson"), "stepson");});
test("stercovorous -> stercovor", function() {deepEqual( Stem("stercovorous"), "stercovor");});
test("sterile -> steril", function() {deepEqual( Stem("sterile"), "steril");});
test("sterilit -> sterilit", function() {deepEqual( Stem("sterilit"), "sterilit");});
test("sterility -> steril", function() {deepEqual( Stem("sterility"), "steril");});
test("sterling -> sterl", function() {deepEqual( Stem("sterling"), "sterl");});
test("stern -> stern", function() {deepEqual( Stem("stern"), "stern");});
test("sterne -> stern", function() {deepEqual( Stem("sterne"), "stern");});
test("sterner -> sterner", function() {deepEqual( Stem("sterner"), "sterner");});
test("sternest -> sternest", function() {deepEqual( Stem("sternest"), "sternest");});
test("sternly -> stern", function() {deepEqual( Stem("sternly"), "stern");});
test("sternness -> stern", function() {deepEqual( Stem("sternness"), "stern");});
test("stertorous -> stertor", function() {deepEqual( Stem("stertorous"), "stertor");});
test("stertorously -> stertor", function() {deepEqual( Stem("stertorously"), "stertor");});
test("stethoscope -> stethoscop", function() {deepEqual( Stem("stethoscope"), "stethoscop");});
test("stew -> stew", function() {deepEqual( Stem("stew"), "stew");});
test("stewam -> stewam", function() {deepEqual( Stem("stewam"), "stewam");});
test("steward -> steward", function() {deepEqual( Stem("steward"), "steward");});
test("stewardship -> stewardship", function() {deepEqual( Stem("stewardship"), "stewardship");});
test("stewart -> stewart", function() {deepEqual( Stem("stewart"), "stewart");});
test("stewing -> stew", function() {deepEqual( Stem("stewing"), "stew");});
test("stic -> stic", function() {deepEqual( Stem("stic"), "stic");});
test("stick -> stick", function() {deepEqual( Stem("stick"), "stick");});
test("sticker -> sticker", function() {deepEqual( Stem("sticker"), "sticker");});
test("sticking -> stick", function() {deepEqual( Stem("sticking"), "stick");});
test("stickler -> stickler", function() {deepEqual( Stem("stickler"), "stickler");});
test("sticks -> stick", function() {deepEqual( Stem("sticks"), "stick");});
test("sticky -> sticki", function() {deepEqual( Stem("sticky"), "sticki");});
test("stif -> stif", function() {deepEqual( Stem("stif"), "stif");});
test("stiff -> stiff", function() {deepEqual( Stem("stiff"), "stiff");});
test("stiffer -> stiffer", function() {deepEqual( Stem("stiffer"), "stiffer");});
test("stiffest -> stiffest", function() {deepEqual( Stem("stiffest"), "stiffest");});
test("stiffly -> stiffli", function() {deepEqual( Stem("stiffly"), "stiffli");});
test("stiffness -> stiff", function() {deepEqual( Stem("stiffness"), "stiff");});
test("stifle -> stifl", function() {deepEqual( Stem("stifle"), "stifl");});
test("stifled -> stifl", function() {deepEqual( Stem("stifled"), "stifl");});
test("stifling -> stifl", function() {deepEqual( Stem("stifling"), "stifl");});
test("stigmatised -> stigmatis", function() {deepEqual( Stem("stigmatised"), "stigmatis");});
test("stigmatize -> stigmat", function() {deepEqual( Stem("stigmatize"), "stigmat");});
test("stigmatizing -> stigmat", function() {deepEqual( Stem("stigmatizing"), "stigmat");});
test("still -> still", function() {deepEqual( Stem("still"), "still");});
test("stillest -> stillest", function() {deepEqual( Stem("stillest"), "stillest");});
test("stillness -> still", function() {deepEqual( Stem("stillness"), "still");});
test("stilt -> stilt", function() {deepEqual( Stem("stilt"), "stilt");});
test("stilts -> stilt", function() {deepEqual( Stem("stilts"), "stilt");});
test("stimulant -> stimul", function() {deepEqual( Stem("stimulant"), "stimul");});
test("stimulants -> stimul", function() {deepEqual( Stem("stimulants"), "stimul");});
test("stimulate -> stimul", function() {deepEqual( Stem("stimulate"), "stimul");});
test("stimulated -> stimul", function() {deepEqual( Stem("stimulated"), "stimul");});
test("stimulates -> stimul", function() {deepEqual( Stem("stimulates"), "stimul");});
test("stimulating -> stimul", function() {deepEqual( Stem("stimulating"), "stimul");});
test("stimulation -> stimul", function() {deepEqual( Stem("stimulation"), "stimul");});
test("stimulus -> stimulus", function() {deepEqual( Stem("stimulus"), "stimulus");});
test("sting -> sting", function() {deepEqual( Stem("sting"), "sting");});
test("stinginess -> stingi", function() {deepEqual( Stem("stinginess"), "stingi");});
test("stinging -> sting", function() {deepEqual( Stem("stinging"), "sting");});
test("stings -> sting", function() {deepEqual( Stem("stings"), "sting");});
test("stinketh -> stinketh", function() {deepEqual( Stem("stinketh"), "stinketh");});
test("stinking -> stink", function() {deepEqual( Stem("stinking"), "stink");});
test("stinks -> stink", function() {deepEqual( Stem("stinks"), "stink");});
test("stipend -> stipend", function() {deepEqual( Stem("stipend"), "stipend");});
test("stipendiaries -> stipendiari", function() {deepEqual( Stem("stipendiaries"), "stipendiari");});
test("stipulate -> stipul", function() {deepEqual( Stem("stipulate"), "stipul");});
test("stipulated -> stipul", function() {deepEqual( Stem("stipulated"), "stipul");});
test("stipulating -> stipul", function() {deepEqual( Stem("stipulating"), "stipul");});
test("stipulation -> stipul", function() {deepEqual( Stem("stipulation"), "stipul");});
test("stipulations -> stipul", function() {deepEqual( Stem("stipulations"), "stipul");});
test("stir -> stir", function() {deepEqual( Stem("stir"), "stir");});
test("stirred -> stir", function() {deepEqual( Stem("stirred"), "stir");});
test("stirring -> stir", function() {deepEqual( Stem("stirring"), "stir");});
test("stirrup -> stirrup", function() {deepEqual( Stem("stirrup"), "stirrup");});
test("stirrups -> stirrup", function() {deepEqual( Stem("stirrups"), "stirrup");});
test("stirs -> stir", function() {deepEqual( Stem("stirs"), "stir");});
test("stitch -> stitch", function() {deepEqual( Stem("stitch"), "stitch");});
test("stitched -> stitch", function() {deepEqual( Stem("stitched"), "stitch");});
test("stitches -> stitch", function() {deepEqual( Stem("stitches"), "stitch");});
test("stitching -> stitch", function() {deepEqual( Stem("stitching"), "stitch");});
test("stock -> stock", function() {deepEqual( Stem("stock"), "stock");});
test("stockade -> stockad", function() {deepEqual( Stem("stockade"), "stockad");});
test("stockbroker -> stockbrok", function() {deepEqual( Stem("stockbroker"), "stockbrok");});
test("stocked -> stock", function() {deepEqual( Stem("stocked"), "stock");});
test("stocking -> stock", function() {deepEqual( Stem("stocking"), "stock");});
test("stockingless -> stockingless", function() {deepEqual( Stem("stockingless"), "stockingless");});
test("stockings -> stock", function() {deepEqual( Stem("stockings"), "stock");});
test("stocks -> stock", function() {deepEqual( Stem("stocks"), "stock");});
test("stokes -> stoke", function() {deepEqual( Stem("stokes"), "stoke");});
test("stolbuns -> stolbun", function() {deepEqual( Stem("stolbuns"), "stolbun");});
test("stole -> stole", function() {deepEqual( Stem("stole"), "stole");});
test("stolen -> stolen", function() {deepEqual( Stem("stolen"), "stolen");});
test("stolid -> stolid", function() {deepEqual( Stem("stolid"), "stolid");});
test("stolidity -> stolid", function() {deepEqual( Stem("stolidity"), "stolid");});
test("stolidly -> stolid", function() {deepEqual( Stem("stolidly"), "stolid");});
test("stomach -> stomach", function() {deepEqual( Stem("stomach"), "stomach");});
test("stomached -> stomach", function() {deepEqual( Stem("stomached"), "stomach");});
test("stomacher -> stomach", function() {deepEqual( Stem("stomacher"), "stomach");});
test("stomachic -> stomach", function() {deepEqual( Stem("stomachic"), "stomach");});
test("stomachs -> stomach", function() {deepEqual( Stem("stomachs"), "stomach");});
test("stond -> stond", function() {deepEqual( Stem("stond"), "stond");});
test("stone -> stone", function() {deepEqual( Stem("stone"), "stone");});
test("stoned -> stone", function() {deepEqual( Stem("stoned"), "stone");});
test("stones -> stone", function() {deepEqual( Stem("stones"), "stone");});
test("stony -> stoni", function() {deepEqual( Stem("stony"), "stoni");});
test("stood -> stood", function() {deepEqual( Stem("stood"), "stood");});
test("stool -> stool", function() {deepEqual( Stem("stool"), "stool");});
test("stools -> stool", function() {deepEqual( Stem("stools"), "stool");});
test("stoop -> stoop", function() {deepEqual( Stem("stoop"), "stoop");});
test("stooped -> stoop", function() {deepEqual( Stem("stooped"), "stoop");});
test("stooping -> stoop", function() {deepEqual( Stem("stooping"), "stoop");});
test("stoops -> stoop", function() {deepEqual( Stem("stoops"), "stoop");});
test("stop -> stop", function() {deepEqual( Stem("stop"), "stop");});
test("stoppage -> stoppag", function() {deepEqual( Stem("stoppage"), "stoppag");});
test("stoppages -> stoppag", function() {deepEqual( Stem("stoppages"), "stoppag");});
test("stopped -> stop", function() {deepEqual( Stem("stopped"), "stop");});
test("stopper -> stopper", function() {deepEqual( Stem("stopper"), "stopper");});
test("stopping -> stop", function() {deepEqual( Stem("stopping"), "stop");});
test("stops -> stop", function() {deepEqual( Stem("stops"), "stop");});
test("store -> store", function() {deepEqual( Stem("store"), "store");});
test("stored -> store", function() {deepEqual( Stem("stored"), "store");});
test("storehouse -> storehous", function() {deepEqual( Stem("storehouse"), "storehous");});
test("storehouses -> storehous", function() {deepEqual( Stem("storehouses"), "storehous");});
test("stores -> store", function() {deepEqual( Stem("stores"), "store");});
test("storey -> storey", function() {deepEqual( Stem("storey"), "storey");});
test("storeys -> storey", function() {deepEqual( Stem("storeys"), "storey");});
test("storied -> stori", function() {deepEqual( Stem("storied"), "stori");});
test("stories -> stori", function() {deepEqual( Stem("stories"), "stori");});
test("storing -> store", function() {deepEqual( Stem("storing"), "store");});
test("stork -> stork", function() {deepEqual( Stem("stork"), "stork");});
test("storks -> stork", function() {deepEqual( Stem("storks"), "stork");});
test("storm -> storm", function() {deepEqual( Stem("storm"), "storm");});
test("stormed -> storm", function() {deepEqual( Stem("stormed"), "storm");});
test("storming -> storm", function() {deepEqual( Stem("storming"), "storm");});
test("storms -> storm", function() {deepEqual( Stem("storms"), "storm");});
test("stormy -> stormi", function() {deepEqual( Stem("stormy"), "stormi");});
test("storr -> storr", function() {deepEqual( Stem("storr"), "storr");});
test("story -> stori", function() {deepEqual( Stem("story"), "stori");});
test("storybook -> storybook", function() {deepEqual( Stem("storybook"), "storybook");});
test("stout -> stout", function() {deepEqual( Stem("stout"), "stout");});
test("stouter -> stouter", function() {deepEqual( Stem("stouter"), "stouter");});
test("stoutest -> stoutest", function() {deepEqual( Stem("stoutest"), "stoutest");});
test("stoutish -> stoutish", function() {deepEqual( Stem("stoutish"), "stoutish");});
test("stoutly -> stout", function() {deepEqual( Stem("stoutly"), "stout");});
test("stove -> stove", function() {deepEqual( Stem("stove"), "stove");});
test("stoves -> stove", function() {deepEqual( Stem("stoves"), "stove");});
test("stow -> stow", function() {deepEqual( Stem("stow"), "stow");});
test("stowed -> stow", function() {deepEqual( Stem("stowed"), "stow");});
test("strack -> strack", function() {deepEqual( Stem("strack"), "strack");});
test("straggle -> straggl", function() {deepEqual( Stem("straggle"), "straggl");});
test("straggled -> straggl", function() {deepEqual( Stem("straggled"), "straggl");});
test("straggler -> straggler", function() {deepEqual( Stem("straggler"), "straggler");});
test("stragglers -> straggler", function() {deepEqual( Stem("stragglers"), "straggler");});
test("straggling -> straggl", function() {deepEqual( Stem("straggling"), "straggl");});
test("straight -> straight", function() {deepEqual( Stem("straight"), "straight");});
test("straightening -> straighten", function() {deepEqual( Stem("straightening"), "straighten");});
test("straightforward -> straightforward", function() {deepEqual( Stem("straightforward"), "straightforward");});
test("straightly -> straight", function() {deepEqual( Stem("straightly"), "straight");});
test("straightway -> straightway", function() {deepEqual( Stem("straightway"), "straightway");});
test("strain -> strain", function() {deepEqual( Stem("strain"), "strain");});
test("strained -> strain", function() {deepEqual( Stem("strained"), "strain");});
test("straining -> strain", function() {deepEqual( Stem("straining"), "strain");});
test("strains -> strain", function() {deepEqual( Stem("strains"), "strain");});
test("strait -> strait", function() {deepEqual( Stem("strait"), "strait");});
test("straitened -> straiten", function() {deepEqual( Stem("straitened"), "straiten");});
test("straits -> strait", function() {deepEqual( Stem("straits"), "strait");});
test("strand -> strand", function() {deepEqual( Stem("strand"), "strand");});
test("stranded -> strand", function() {deepEqual( Stem("stranded"), "strand");});
test("stranding -> strand", function() {deepEqual( Stem("stranding"), "strand");});
test("strange -> strang", function() {deepEqual( Stem("strange"), "strang");});
test("strangely -> strang", function() {deepEqual( Stem("strangely"), "strang");});
test("strangeness -> strang", function() {deepEqual( Stem("strangeness"), "strang");});
test("stranger -> stranger", function() {deepEqual( Stem("stranger"), "stranger");});
test("strangers -> stranger", function() {deepEqual( Stem("strangers"), "stranger");});
test("strangest -> strangest", function() {deepEqual( Stem("strangest"), "strangest");});
test("strangle -> strangl", function() {deepEqual( Stem("strangle"), "strangl");});
test("strangled -> strangl", function() {deepEqual( Stem("strangled"), "strangl");});
test("strangling -> strangl", function() {deepEqual( Stem("strangling"), "strangl");});
test("strangulation -> strangul", function() {deepEqual( Stem("strangulation"), "strangul");});
test("strap -> strap", function() {deepEqual( Stem("strap"), "strap");});
test("strapped -> strap", function() {deepEqual( Stem("strapped"), "strap");});
test("straps -> strap", function() {deepEqual( Stem("straps"), "strap");});
test("strata -> strata", function() {deepEqual( Stem("strata"), "strata");});
test("stratagem -> stratagem", function() {deepEqual( Stem("stratagem"), "stratagem");});
test("strategy -> strategi", function() {deepEqual( Stem("strategy"), "strategi");});
test("stratford -> stratford", function() {deepEqual( Stem("stratford"), "stratford");});
test("stratification -> stratif", function() {deepEqual( Stem("stratification"), "stratif");});
test("stratified -> stratifi", function() {deepEqual( Stem("stratified"), "stratifi");});
test("stratum -> stratum", function() {deepEqual( Stem("stratum"), "stratum");});
test("straw -> straw", function() {deepEqual( Stem("straw"), "straw");});
test("strawberries -> strawberri", function() {deepEqual( Stem("strawberries"), "strawberri");});
test("straws -> straw", function() {deepEqual( Stem("straws"), "straw");});
test("stray -> stray", function() {deepEqual( Stem("stray"), "stray");});
test("strayed -> stray", function() {deepEqual( Stem("strayed"), "stray");});
test("straying -> stray", function() {deepEqual( Stem("straying"), "stray");});
test("streak -> streak", function() {deepEqual( Stem("streak"), "streak");});
test("streaked -> streak", function() {deepEqual( Stem("streaked"), "streak");});
test("streaks -> streak", function() {deepEqual( Stem("streaks"), "streak");});
test("stream -> stream", function() {deepEqual( Stem("stream"), "stream");});
test("streamed -> stream", function() {deepEqual( Stem("streamed"), "stream");});
test("streamer -> streamer", function() {deepEqual( Stem("streamer"), "streamer");});
test("streaming -> stream", function() {deepEqual( Stem("streaming"), "stream");});
test("streamlet -> streamlet", function() {deepEqual( Stem("streamlet"), "streamlet");});
test("streamlets -> streamlet", function() {deepEqual( Stem("streamlets"), "streamlet");});
test("streams -> stream", function() {deepEqual( Stem("streams"), "stream");});
test("street -> street", function() {deepEqual( Stem("street"), "street");});
test("streetdoor -> streetdoor", function() {deepEqual( Stem("streetdoor"), "streetdoor");});
test("streets -> street", function() {deepEqual( Stem("streets"), "street");});
test("strength -> strength", function() {deepEqual( Stem("strength"), "strength");});
test("strengthen -> strengthen", function() {deepEqual( Stem("strengthen"), "strengthen");});
test("strengthened -> strengthen", function() {deepEqual( Stem("strengthened"), "strengthen");});
test("strengthening -> strengthen", function() {deepEqual( Stem("strengthening"), "strengthen");});
test("strenuously -> strenuous", function() {deepEqual( Stem("strenuously"), "strenuous");});
test("stress -> stress", function() {deepEqual( Stem("stress"), "stress");});
test("stretch -> stretch", function() {deepEqual( Stem("stretch"), "stretch");});
test("stretched -> stretch", function() {deepEqual( Stem("stretched"), "stretch");});
test("stretches -> stretch", function() {deepEqual( Stem("stretches"), "stretch");});
test("stretching -> stretch", function() {deepEqual( Stem("stretching"), "stretch");});
test("stretchings -> stretch", function() {deepEqual( Stem("stretchings"), "stretch");});
test("strew -> strew", function() {deepEqual( Stem("strew"), "strew");});
test("strewed -> strew", function() {deepEqual( Stem("strewed"), "strew");});
test("strewn -> strewn", function() {deepEqual( Stem("strewn"), "strewn");});
test("stricken -> stricken", function() {deepEqual( Stem("stricken"), "stricken");});
test("strickland -> strickland", function() {deepEqual( Stem("strickland"), "strickland");});
test("strict -> strict", function() {deepEqual( Stem("strict"), "strict");});
test("stricter -> stricter", function() {deepEqual( Stem("stricter"), "stricter");});
test("strictest -> strictest", function() {deepEqual( Stem("strictest"), "strictest");});
test("strictly -> strict", function() {deepEqual( Stem("strictly"), "strict");});
test("strictness -> strict", function() {deepEqual( Stem("strictness"), "strict");});
test("stride -> stride", function() {deepEqual( Stem("stride"), "stride");});
test("strides -> stride", function() {deepEqual( Stem("strides"), "stride");});
test("striding -> stride", function() {deepEqual( Stem("striding"), "stride");});
test("strife -> strife", function() {deepEqual( Stem("strife"), "strife");});
test("strike -> strike", function() {deepEqual( Stem("strike"), "strike");});
test("strikes -> strike", function() {deepEqual( Stem("strikes"), "strike");});
test("striking -> strike", function() {deepEqual( Stem("striking"), "strike");});
test("strikingly -> strike", function() {deepEqual( Stem("strikingly"), "strike");});
test("string -> string", function() {deepEqual( Stem("string"), "string");});
test("strings -> string", function() {deepEqual( Stem("strings"), "string");});
test("strip -> strip", function() {deepEqual( Stem("strip"), "strip");});
test("striped -> stripe", function() {deepEqual( Stem("striped"), "stripe");});
test("stripes -> stripe", function() {deepEqual( Stem("stripes"), "stripe");});
test("stripling -> stripl", function() {deepEqual( Stem("stripling"), "stripl");});
test("stripped -> strip", function() {deepEqual( Stem("stripped"), "strip");});
test("stripping -> strip", function() {deepEqual( Stem("stripping"), "strip");});
test("strips -> strip", function() {deepEqual( Stem("strips"), "strip");});
test("stritched -> stritch", function() {deepEqual( Stem("stritched"), "stritch");});
test("strive -> strive", function() {deepEqual( Stem("strive"), "strive");});
test("striven -> striven", function() {deepEqual( Stem("striven"), "striven");});
test("striving -> strive", function() {deepEqual( Stem("striving"), "strive");});
test("strix -> strix", function() {deepEqual( Stem("strix"), "strix");});
test("strode -> strode", function() {deepEqual( Stem("strode"), "strode");});
test("stroke -> stroke", function() {deepEqual( Stem("stroke"), "stroke");});
test("stroked -> stroke", function() {deepEqual( Stem("stroked"), "stroke");});
test("strokes -> stroke", function() {deepEqual( Stem("strokes"), "stroke");});
test("stroking -> stroke", function() {deepEqual( Stem("stroking"), "stroke");});
test("strokings -> stroke", function() {deepEqual( Stem("strokings"), "stroke");});
test("stroll -> stroll", function() {deepEqual( Stem("stroll"), "stroll");});
test("strolled -> stroll", function() {deepEqual( Stem("strolled"), "stroll");});
test("strolling -> stroll", function() {deepEqual( Stem("strolling"), "stroll");});
test("strolls -> stroll", function() {deepEqual( Stem("strolls"), "stroll");});
test("strong -> strong", function() {deepEqual( Stem("strong"), "strong");});
test("stronger -> stronger", function() {deepEqual( Stem("stronger"), "stronger");});
test("strongest -> strongest", function() {deepEqual( Stem("strongest"), "strongest");});
test("strongholds -> stronghold", function() {deepEqual( Stem("strongholds"), "stronghold");});
test("strongly -> strong", function() {deepEqual( Stem("strongly"), "strong");});
test("strongylus -> strongylus", function() {deepEqual( Stem("strongylus"), "strongylus");});
test("strop -> strop", function() {deepEqual( Stem("strop"), "strop");});
test("strove -> strove", function() {deepEqual( Stem("strove"), "strove");});
test("struck -> struck", function() {deepEqual( Stem("struck"), "struck");});
test("structure -> structur", function() {deepEqual( Stem("structure"), "structur");});
test("structures -> structur", function() {deepEqual( Stem("structures"), "structur");});
test("struggle -> struggl", function() {deepEqual( Stem("struggle"), "struggl");});
test("struggled -> struggl", function() {deepEqual( Stem("struggled"), "struggl");});
test("struggler -> struggler", function() {deepEqual( Stem("struggler"), "struggler");});
test("strugglers -> struggler", function() {deepEqual( Stem("strugglers"), "struggler");});
test("struggles -> struggl", function() {deepEqual( Stem("struggles"), "struggl");});
test("struggling -> struggl", function() {deepEqual( Stem("struggling"), "struggl");});
test("strum -> strum", function() {deepEqual( Stem("strum"), "strum");});
test("strung -> strung", function() {deepEqual( Stem("strung"), "strung");});
test("struthio -> struthio", function() {deepEqual( Stem("struthio"), "struthio");});
test("strzelecki -> strzelecki", function() {deepEqual( Stem("strzelecki"), "strzelecki");});
test("stuart -> stuart", function() {deepEqual( Stem("stuart"), "stuart");});
test("stubb -> stubb", function() {deepEqual( Stem("stubb"), "stubb");});
test("stubble -> stubbl", function() {deepEqual( Stem("stubble"), "stubbl");});
test("stubbly -> stubbl", function() {deepEqual( Stem("stubbly"), "stubbl");});
test("stubborn -> stubborn", function() {deepEqual( Stem("stubborn"), "stubborn");});
test("stubbornly -> stubborn", function() {deepEqual( Stem("stubbornly"), "stubborn");});
test("stubbornness -> stubborn", function() {deepEqual( Stem("stubbornness"), "stubborn");});
test("stubbs -> stubb", function() {deepEqual( Stem("stubbs"), "stubb");});
test("stuck -> stuck", function() {deepEqual( Stem("stuck"), "stuck");});
test("stud -> stud", function() {deepEqual( Stem("stud"), "stud");});
test("studded -> stud", function() {deepEqual( Stem("studded"), "stud");});
test("student -> student", function() {deepEqual( Stem("student"), "student");});
test("students -> student", function() {deepEqual( Stem("students"), "student");});
test("studied -> studi", function() {deepEqual( Stem("studied"), "studi");});
test("studies -> studi", function() {deepEqual( Stem("studies"), "studi");});
test("studio -> studio", function() {deepEqual( Stem("studio"), "studio");});
test("studious -> studious", function() {deepEqual( Stem("studious"), "studious");});
test("studiously -> studious", function() {deepEqual( Stem("studiously"), "studious");});
test("studiousness -> studious", function() {deepEqual( Stem("studiousness"), "studious");});
test("study -> studi", function() {deepEqual( Stem("study"), "studi");});
test("studying -> studi", function() {deepEqual( Stem("studying"), "studi");});
test("stuff -> stuff", function() {deepEqual( Stem("stuff"), "stuff");});
test("stuffed -> stuf", function() {deepEqual( Stem("stuffed"), "stuf");});
test("stuffing -> stuf", function() {deepEqual( Stem("stuffing"), "stuf");});
test("stuffs -> stuff", function() {deepEqual( Stem("stuffs"), "stuff");});
test("stuffy -> stuffi", function() {deepEqual( Stem("stuffy"), "stuffi");});
test("stumble -> stumbl", function() {deepEqual( Stem("stumble"), "stumbl");});
test("stumbled -> stumbl", function() {deepEqual( Stem("stumbled"), "stumbl");});
test("stumbles -> stumbl", function() {deepEqual( Stem("stumbles"), "stumbl");});
test("stumbling -> stumbl", function() {deepEqual( Stem("stumbling"), "stumbl");});
test("stump -> stump", function() {deepEqual( Stem("stump"), "stump");});
test("stumps -> stump", function() {deepEqual( Stem("stumps"), "stump");});
test("stung -> stung", function() {deepEqual( Stem("stung"), "stung");});
test("stunned -> stun", function() {deepEqual( Stem("stunned"), "stun");});
test("stunning -> stun", function() {deepEqual( Stem("stunning"), "stun");});
test("stunted -> stunt", function() {deepEqual( Stem("stunted"), "stunt");});
test("stupefaction -> stupefact", function() {deepEqual( Stem("stupefaction"), "stupefact");});
test("stupefied -> stupefi", function() {deepEqual( Stem("stupefied"), "stupefi");});
test("stupendous -> stupend", function() {deepEqual( Stem("stupendous"), "stupend");});
test("stupid -> stupid", function() {deepEqual( Stem("stupid"), "stupid");});
test("stupider -> stupid", function() {deepEqual( Stem("stupider"), "stupid");});
test("stupidity -> stupid", function() {deepEqual( Stem("stupidity"), "stupid");});
test("stupidly -> stupid", function() {deepEqual( Stem("stupidly"), "stupid");});
test("stupids -> stupid", function() {deepEqual( Stem("stupids"), "stupid");});
test("stupor -> stupor", function() {deepEqual( Stem("stupor"), "stupor");});
test("sturdiest -> sturdiest", function() {deepEqual( Stem("sturdiest"), "sturdiest");});
test("sturdily -> sturdili", function() {deepEqual( Stem("sturdily"), "sturdili");});
test("sturdy -> sturdi", function() {deepEqual( Stem("sturdy"), "sturdi");});
test("sturt -> sturt", function() {deepEqual( Stem("sturt"), "sturt");});
test("stuttered -> stutter", function() {deepEqual( Stem("stuttered"), "stutter");});
test("style -> style", function() {deepEqual( Stem("style"), "style");});
test("styles -> style", function() {deepEqual( Stem("styles"), "style");});
test("stylifer -> stylif", function() {deepEqual( Stem("stylifer"), "stylif");});
test("stylish -> stylish", function() {deepEqual( Stem("stylish"), "stylish");});
test("suadiva -> suadiva", function() {deepEqual( Stem("suadiva"), "suadiva");});
test("suavity -> suaviti", function() {deepEqual( Stem("suavity"), "suaviti");});
test("sub -> sub", function() {deepEqual( Stem("sub"), "sub");});
test("subacid -> subacid", function() {deepEqual( Stem("subacid"), "subacid");});
test("subaqueous -> subaqu", function() {deepEqual( Stem("subaqueous"), "subaqu");});
test("subcostal -> subcost", function() {deepEqual( Stem("subcostal"), "subcost");});
test("subdue -> subdu", function() {deepEqual( Stem("subdue"), "subdu");});
test("subdued -> subdu", function() {deepEqual( Stem("subdued"), "subdu");});
test("subduer -> subduer", function() {deepEqual( Stem("subduer"), "subduer");});
test("subdues -> subdu", function() {deepEqual( Stem("subdues"), "subdu");});
test("subduing -> subdu", function() {deepEqual( Stem("subduing"), "subdu");});
test("subgroup -> subgroup", function() {deepEqual( Stem("subgroup"), "subgroup");});
test("subgroups -> subgroup", function() {deepEqual( Stem("subgroups"), "subgroup");});
test("subject -> subject", function() {deepEqual( Stem("subject"), "subject");});
test("subjected -> subject", function() {deepEqual( Stem("subjected"), "subject");});
test("subjecting -> subject", function() {deepEqual( Stem("subjecting"), "subject");});
test("subjection -> subject", function() {deepEqual( Stem("subjection"), "subject");});
test("subjects -> subject", function() {deepEqual( Stem("subjects"), "subject");});
test("subjugating -> subjug", function() {deepEqual( Stem("subjugating"), "subjug");});
test("sublime -> sublim", function() {deepEqual( Stem("sublime"), "sublim");});
test("sublimity -> sublim", function() {deepEqual( Stem("sublimity"), "sublim");});
test("submarine -> submarin", function() {deepEqual( Stem("submarine"), "submarin");});
test("submerged -> submerg", function() {deepEqual( Stem("submerged"), "submerg");});
test("submergence -> submerg", function() {deepEqual( Stem("submergence"), "submerg");});
test("submission -> submiss", function() {deepEqual( Stem("submission"), "submiss");});
test("submissive -> submiss", function() {deepEqual( Stem("submissive"), "submiss");});
test("submissively -> submiss", function() {deepEqual( Stem("submissively"), "submiss");});
test("submissiveness -> submiss", function() {deepEqual( Stem("submissiveness"), "submiss");});
test("submit -> submit", function() {deepEqual( Stem("submit"), "submit");});
test("submits -> submit", function() {deepEqual( Stem("submits"), "submit");});
test("submitted -> submit", function() {deepEqual( Stem("submitted"), "submit");});
test("submitting -> submit", function() {deepEqual( Stem("submitting"), "submit");});
test("subordinate -> subordin", function() {deepEqual( Stem("subordinate"), "subordin");});
test("subordinates -> subordin", function() {deepEqual( Stem("subordinates"), "subordin");});
test("subordination -> subordin", function() {deepEqual( Stem("subordination"), "subordin");});
test("suborned -> suborn", function() {deepEqual( Stem("suborned"), "suborn");});
test("suborning -> suborn", function() {deepEqual( Stem("suborning"), "suborn");});
test("subscribe -> subscrib", function() {deepEqual( Stem("subscribe"), "subscrib");});
test("subscribed -> subscrib", function() {deepEqual( Stem("subscribed"), "subscrib");});
test("subscribing -> subscrib", function() {deepEqual( Stem("subscribing"), "subscrib");});
test("subscription -> subscript", function() {deepEqual( Stem("subscription"), "subscript");});
test("subscriptions -> subscript", function() {deepEqual( Stem("subscriptions"), "subscript");});
test("subsequent -> subsequ", function() {deepEqual( Stem("subsequent"), "subsequ");});
test("subsequently -> subsequ", function() {deepEqual( Stem("subsequently"), "subsequ");});
test("subservience -> subservi", function() {deepEqual( Stem("subservience"), "subservi");});
test("subserviences -> subservi", function() {deepEqual( Stem("subserviences"), "subservi");});
test("subservient -> subservi", function() {deepEqual( Stem("subservient"), "subservi");});
test("subside -> subsid", function() {deepEqual( Stem("subside"), "subsid");});
test("subsided -> subsid", function() {deepEqual( Stem("subsided"), "subsid");});
test("subsidence -> subsid", function() {deepEqual( Stem("subsidence"), "subsid");});
test("subsides -> subsid", function() {deepEqual( Stem("subsides"), "subsid");});
test("subsidiary -> subsidiari", function() {deepEqual( Stem("subsidiary"), "subsidiari");});
test("subsiding -> subsid", function() {deepEqual( Stem("subsiding"), "subsid");});
test("subsidized -> subsid", function() {deepEqual( Stem("subsidized"), "subsid");});
test("subsist -> subsist", function() {deepEqual( Stem("subsist"), "subsist");});
test("subsisted -> subsist", function() {deepEqual( Stem("subsisted"), "subsist");});
test("subsistence -> subsist", function() {deepEqual( Stem("subsistence"), "subsist");});
test("subsoil -> subsoil", function() {deepEqual( Stem("subsoil"), "subsoil");});
test("substance -> substanc", function() {deepEqual( Stem("substance"), "substanc");});
test("substances -> substanc", function() {deepEqual( Stem("substances"), "substanc");});
test("substantial -> substanti", function() {deepEqual( Stem("substantial"), "substanti");});
test("substantially -> substanti", function() {deepEqual( Stem("substantially"), "substanti");});
test("substantials -> substanti", function() {deepEqual( Stem("substantials"), "substanti");});
test("substantiate -> substanti", function() {deepEqual( Stem("substantiate"), "substanti");});
test("substantive -> substant", function() {deepEqual( Stem("substantive"), "substant");});
test("substitute -> substitut", function() {deepEqual( Stem("substitute"), "substitut");});
test("substituted -> substitut", function() {deepEqual( Stem("substituted"), "substitut");});
test("substitutes -> substitut", function() {deepEqual( Stem("substitutes"), "substitut");});
test("substituting -> substitut", function() {deepEqual( Stem("substituting"), "substitut");});
test("substracted -> substract", function() {deepEqual( Stem("substracted"), "substract");});
test("substratum -> substratum", function() {deepEqual( Stem("substratum"), "substratum");});
test("subterfuge -> subterfug", function() {deepEqual( Stem("subterfuge"), "subterfug");});
test("subterfuges -> subterfug", function() {deepEqual( Stem("subterfuges"), "subterfug");});
test("subterranean -> subterranean", function() {deepEqual( Stem("subterranean"), "subterranean");});
test("subtile -> subtil", function() {deepEqual( Stem("subtile"), "subtil");});
test("subtle -> subtl", function() {deepEqual( Stem("subtle"), "subtl");});
test("subtlety -> subtleti", function() {deepEqual( Stem("subtlety"), "subtleti");});
test("subtracted -> subtract", function() {deepEqual( Stem("subtracted"), "subtract");});
test("subtracting -> subtract", function() {deepEqual( Stem("subtracting"), "subtract");});
test("suburb -> suburb", function() {deepEqual( Stem("suburb"), "suburb");});
test("suburban -> suburban", function() {deepEqual( Stem("suburban"), "suburban");});
test("suburbs -> suburb", function() {deepEqual( Stem("suburbs"), "suburb");});
test("subversive -> subvers", function() {deepEqual( Stem("subversive"), "subvers");});
test("subverted -> subvert", function() {deepEqual( Stem("subverted"), "subvert");});
test("suc -> suc", function() {deepEqual( Stem("suc"), "suc");});
test("succeed -> succeed", function() {deepEqual( Stem("succeed"), "succeed");});
test("succeeded -> succeed", function() {deepEqual( Stem("succeeded"), "succeed");});
test("succeeding -> succeed", function() {deepEqual( Stem("succeeding"), "succeed");});
test("succeeds -> succeed", function() {deepEqual( Stem("succeeds"), "succeed");});
test("success -> success", function() {deepEqual( Stem("success"), "success");});
test("successes -> success", function() {deepEqual( Stem("successes"), "success");});
test("successful -> success", function() {deepEqual( Stem("successful"), "success");});
test("successfully -> success", function() {deepEqual( Stem("successfully"), "success");});
test("succession -> success", function() {deepEqual( Stem("succession"), "success");});
test("successions -> success", function() {deepEqual( Stem("successions"), "success");});
test("successive -> success", function() {deepEqual( Stem("successive"), "success");});
test("successively -> success", function() {deepEqual( Stem("successively"), "success");});
test("successor -> successor", function() {deepEqual( Stem("successor"), "successor");});
test("successors -> successor", function() {deepEqual( Stem("successors"), "successor");});
test("succinea -> succinea", function() {deepEqual( Stem("succinea"), "succinea");});
test("succour -> succour", function() {deepEqual( Stem("succour"), "succour");});
test("succulent -> succul", function() {deepEqual( Stem("succulent"), "succul");});
test("succumbed -> succumb", function() {deepEqual( Stem("succumbed"), "succumb");});
test("succumbing -> succumb", function() {deepEqual( Stem("succumbing"), "succumb");});
test("such -> such", function() {deepEqual( Stem("such"), "such");});
test("suck -> suck", function() {deepEqual( Stem("suck"), "suck");});
test("sucked -> suck", function() {deepEqual( Stem("sucked"), "suck");});
test("sucker -> sucker", function() {deepEqual( Stem("sucker"), "sucker");});
test("suckers -> sucker", function() {deepEqual( Stem("suckers"), "sucker");});
test("sucking -> suck", function() {deepEqual( Stem("sucking"), "suck");});
test("suckle -> suckl", function() {deepEqual( Stem("suckle"), "suckl");});
test("suckling -> suckl", function() {deepEqual( Stem("suckling"), "suckl");});
test("suction -> suction", function() {deepEqual( Stem("suction"), "suction");});
test("sudden -> sudden", function() {deepEqual( Stem("sudden"), "sudden");});
test("suddenl -> suddenl", function() {deepEqual( Stem("suddenl"), "suddenl");});
test("suddenly -> sudden", function() {deepEqual( Stem("suddenly"), "sudden");});
test("suddenness -> sudden", function() {deepEqual( Stem("suddenness"), "sudden");});
test("suds -> sud", function() {deepEqual( Stem("suds"), "sud");});
test("sued -> su", function() {deepEqual( Stem("sued"), "su");});
test("suffer -> suffer", function() {deepEqual( Stem("suffer"), "suffer");});
test("sufferance -> suffer", function() {deepEqual( Stem("sufferance"), "suffer");});
test("suffered -> suffer", function() {deepEqual( Stem("suffered"), "suffer");});
test("sufferer -> suffer", function() {deepEqual( Stem("sufferer"), "suffer");});
test("sufferers -> suffer", function() {deepEqual( Stem("sufferers"), "suffer");});
test("suffering -> suffer", function() {deepEqual( Stem("suffering"), "suffer");});
test("sufferings -> suffer", function() {deepEqual( Stem("sufferings"), "suffer");});
test("suffers -> suffer", function() {deepEqual( Stem("suffers"), "suffer");});
test("suffice -> suffic", function() {deepEqual( Stem("suffice"), "suffic");});
test("sufficed -> suffic", function() {deepEqual( Stem("sufficed"), "suffic");});
test("sufficiency -> suffici", function() {deepEqual( Stem("sufficiency"), "suffici");});
test("sufficient -> suffici", function() {deepEqual( Stem("sufficient"), "suffici");});
test("sufficiently -> suffici", function() {deepEqual( Stem("sufficiently"), "suffici");});
test("sufficing -> suffic", function() {deepEqual( Stem("sufficing"), "suffic");});
test("sufflciently -> sufflcient", function() {deepEqual( Stem("sufflciently"), "sufflcient");});
test("suffocated -> suffoc", function() {deepEqual( Stem("suffocated"), "suffoc");});
test("suffocating -> suffoc", function() {deepEqual( Stem("suffocating"), "suffoc");});
test("suffocation -> suffoc", function() {deepEqual( Stem("suffocation"), "suffoc");});
test("suffolk -> suffolk", function() {deepEqual( Stem("suffolk"), "suffolk");});
test("suffrage -> suffrag", function() {deepEqual( Stem("suffrage"), "suffrag");});
test("suffrages -> suffrag", function() {deepEqual( Stem("suffrages"), "suffrag");});
test("suffused -> suffus", function() {deepEqual( Stem("suffused"), "suffus");});
test("sugar -> sugar", function() {deepEqual( Stem("sugar"), "sugar");});
test("sugarscaps -> sugarscap", function() {deepEqual( Stem("sugarscaps"), "sugarscap");});
test("sugarscraps -> sugarscrap", function() {deepEqual( Stem("sugarscraps"), "sugarscrap");});
test("suggest -> suggest", function() {deepEqual( Stem("suggest"), "suggest");});
test("suggested -> suggest", function() {deepEqual( Stem("suggested"), "suggest");});
test("suggesting -> suggest", function() {deepEqual( Stem("suggesting"), "suggest");});
test("suggestion -> suggest", function() {deepEqual( Stem("suggestion"), "suggest");});
test("suggestions -> suggest", function() {deepEqual( Stem("suggestions"), "suggest");});
test("suggestive -> suggest", function() {deepEqual( Stem("suggestive"), "suggest");});
test("suggests -> suggest", function() {deepEqual( Stem("suggests"), "suggest");});
test("suicidal -> suicid", function() {deepEqual( Stem("suicidal"), "suicid");});
test("suicide -> suicid", function() {deepEqual( Stem("suicide"), "suicid");});
test("suicides -> suicid", function() {deepEqual( Stem("suicides"), "suicid");});
test("suing -> su", function() {deepEqual( Stem("suing"), "su");});
test("suit -> suit", function() {deepEqual( Stem("suit"), "suit");});
test("suitability -> suitabl", function() {deepEqual( Stem("suitability"), "suitabl");});
test("suitable -> suitabl", function() {deepEqual( Stem("suitable"), "suitabl");});
test("suitably -> suitabl", function() {deepEqual( Stem("suitably"), "suitabl");});
test("suite -> suit", function() {deepEqual( Stem("suite"), "suit");});
test("suited -> suit", function() {deepEqual( Stem("suited"), "suit");});
test("suites -> suit", function() {deepEqual( Stem("suites"), "suit");});
test("suiting -> suit", function() {deepEqual( Stem("suiting"), "suit");});
test("suitor -> suitor", function() {deepEqual( Stem("suitor"), "suitor");});
test("suitors -> suitor", function() {deepEqual( Stem("suitors"), "suitor");});
test("suits -> suit", function() {deepEqual( Stem("suits"), "suit");});
test("sulivan -> sulivan", function() {deepEqual( Stem("sulivan"), "sulivan");});
test("sulk -> sulk", function() {deepEqual( Stem("sulk"), "sulk");});
test("sulked -> sulk", function() {deepEqual( Stem("sulked"), "sulk");});
test("sulkily -> sulkili", function() {deepEqual( Stem("sulkily"), "sulkili");});
test("sulkiness -> sulki", function() {deepEqual( Stem("sulkiness"), "sulki");});
test("sulks -> sulk", function() {deepEqual( Stem("sulks"), "sulk");});
test("sulky -> sulki", function() {deepEqual( Stem("sulky"), "sulki");});
test("sullen -> sullen", function() {deepEqual( Stem("sullen"), "sullen");});
test("sullenly -> sullen", function() {deepEqual( Stem("sullenly"), "sullen");});
test("sullenness -> sullen", function() {deepEqual( Stem("sullenness"), "sullen");});
test("sully -> sulli", function() {deepEqual( Stem("sully"), "sulli");});
test("sulphate -> sulphat", function() {deepEqual( Stem("sulphate"), "sulphat");});
test("sulphates -> sulphat", function() {deepEqual( Stem("sulphates"), "sulphat");});
test("sulphur -> sulphur", function() {deepEqual( Stem("sulphur"), "sulphur");});
test("sulphuratus -> sulphuratus", function() {deepEqual( Stem("sulphuratus"), "sulphuratus");});
test("sulphureous -> sulphur", function() {deepEqual( Stem("sulphureous"), "sulphur");});
test("sulphuric -> sulphur", function() {deepEqual( Stem("sulphuric"), "sulphur");});
test("sultan -> sultan", function() {deepEqual( Stem("sultan"), "sultan");});
test("sultry -> sultri", function() {deepEqual( Stem("sultry"), "sultri");});
test("sum -> sum", function() {deepEqual( Stem("sum"), "sum");});
test("sumatra -> sumatra", function() {deepEqual( Stem("sumatra"), "sumatra");});
test("sumhoo -> sumhoo", function() {deepEqual( Stem("sumhoo"), "sumhoo");});
test("summarily -> summarili", function() {deepEqual( Stem("summarily"), "summarili");});
test("summary -> summari", function() {deepEqual( Stem("summary"), "summari");});
test("summat -> summat", function() {deepEqual( Stem("summat"), "summat");});
test("summer -> summer", function() {deepEqual( Stem("summer"), "summer");});
test("summers -> summer", function() {deepEqual( Stem("summers"), "summer");});
test("summerson -> summerson", function() {deepEqual( Stem("summerson"), "summerson");});
test("summertime -> summertim", function() {deepEqual( Stem("summertime"), "summertim");});
test("summing -> sum", function() {deepEqual( Stem("summing"), "sum");});
test("summit -> summit", function() {deepEqual( Stem("summit"), "summit");});
test("summits -> summit", function() {deepEqual( Stem("summits"), "summit");});
test("summon -> summon", function() {deepEqual( Stem("summon"), "summon");});
test("summoned -> summon", function() {deepEqual( Stem("summoned"), "summon");});
test("summoning -> summon", function() {deepEqual( Stem("summoning"), "summon");});
test("summons -> summon", function() {deepEqual( Stem("summons"), "summon");});
test("summonses -> summons", function() {deepEqual( Stem("summonses"), "summons");});
test("summonsizzing -> summonsizz", function() {deepEqual( Stem("summonsizzing"), "summonsizz");});
test("sumptuous -> sumptuous", function() {deepEqual( Stem("sumptuous"), "sumptuous");});
test("sumptuously -> sumptuous", function() {deepEqual( Stem("sumptuously"), "sumptuous");});
test("sums -> sum", function() {deepEqual( Stem("sums"), "sum");});
test("sun -> sun", function() {deepEqual( Stem("sun"), "sun");});
test("sunbeam -> sunbeam", function() {deepEqual( Stem("sunbeam"), "sunbeam");});
test("sunburnt -> sunburnt", function() {deepEqual( Stem("sunburnt"), "sunburnt");});
test("sunday -> sunday", function() {deepEqual( Stem("sunday"), "sunday");});
test("sundays -> sunday", function() {deepEqual( Stem("sundays"), "sunday");});
test("sundries -> sundri", function() {deepEqual( Stem("sundries"), "sundri");});
test("sundry -> sundri", function() {deepEqual( Stem("sundry"), "sundri");});
test("sunflowers -> sunflow", function() {deepEqual( Stem("sunflowers"), "sunflow");});
test("sung -> sung", function() {deepEqual( Stem("sung"), "sung");});
test("sunk -> sunk", function() {deepEqual( Stem("sunk"), "sunk");});
test("sunken -> sunken", function() {deepEqual( Stem("sunken"), "sunken");});
test("sunlight -> sunlight", function() {deepEqual( Stem("sunlight"), "sunlight");});
test("sunning -> sun", function() {deepEqual( Stem("sunning"), "sun");});
test("sunny -> sunni", function() {deepEqual( Stem("sunny"), "sunni");});
test("sunrise -> sunris", function() {deepEqual( Stem("sunrise"), "sunris");});
test("suns -> sun", function() {deepEqual( Stem("suns"), "sun");});
test("sunset -> sunset", function() {deepEqual( Stem("sunset"), "sunset");});
test("sunsets -> sunset", function() {deepEqual( Stem("sunsets"), "sunset");});
test("sunshine -> sunshin", function() {deepEqual( Stem("sunshine"), "sunshin");});
test("sunshiny -> sunshini", function() {deepEqual( Stem("sunshiny"), "sunshini");});
test("sup -> sup", function() {deepEqual( Stem("sup"), "sup");});
test("superabundant -> superabund", function() {deepEqual( Stem("superabundant"), "superabund");});
test("superadded -> superad", function() {deepEqual( Stem("superadded"), "superad");});
test("superadding -> superad", function() {deepEqual( Stem("superadding"), "superad");});
test("superannuated -> superannu", function() {deepEqual( Stem("superannuated"), "superannu");});
test("superannuating -> superannu", function() {deepEqual( Stem("superannuating"), "superannu");});
test("superb -> superb", function() {deepEqual( Stem("superb"), "superb");});
test("superbly -> superbl", function() {deepEqual( Stem("superbly"), "superbl");});
test("supercilious -> supercili", function() {deepEqual( Stem("supercilious"), "supercili");});
test("superciliously -> supercili", function() {deepEqual( Stem("superciliously"), "supercili");});
test("superciliousness -> supercili", function() {deepEqual( Stem("superciliousness"), "supercili");});
test("superficial -> superfici", function() {deepEqual( Stem("superficial"), "superfici");});
test("superficially -> superfici", function() {deepEqual( Stem("superficially"), "superfici");});
test("superfluities -> superflu", function() {deepEqual( Stem("superfluities"), "superflu");});
test("superfluity -> superflu", function() {deepEqual( Stem("superfluity"), "superflu");});
test("superfluous -> superflu", function() {deepEqual( Stem("superfluous"), "superflu");});
test("superhuman -> superhuman", function() {deepEqual( Stem("superhuman"), "superhuman");});
test("superincumbent -> superincumb", function() {deepEqual( Stem("superincumbent"), "superincumb");});
test("superinduced -> superinduc", function() {deepEqual( Stem("superinduced"), "superinduc");});
test("superintend -> superintend", function() {deepEqual( Stem("superintend"), "superintend");});
test("superintended -> superintend", function() {deepEqual( Stem("superintended"), "superintend");});
test("superintendence -> superintend", function() {deepEqual( Stem("superintendence"), "superintend");});
test("superintendent -> superintend", function() {deepEqual( Stem("superintendent"), "superintend");});
test("superintending -> superintend", function() {deepEqual( Stem("superintending"), "superintend");});
test("superintends -> superintend", function() {deepEqual( Stem("superintends"), "superintend");});
test("superior -> superior", function() {deepEqual( Stem("superior"), "superior");});
test("superiority -> superior", function() {deepEqual( Stem("superiority"), "superior");});
test("superiors -> superior", function() {deepEqual( Stem("superiors"), "superior");});
test("superlative -> superl", function() {deepEqual( Stem("superlative"), "superl");});
test("superlatives -> superl", function() {deepEqual( Stem("superlatives"), "superl");});
test("superlativest -> superlativest", function() {deepEqual( Stem("superlativest"), "superlativest");});
test("supernatural -> supernatur", function() {deepEqual( Stem("supernatural"), "supernatur");});
test("supernumeraries -> supernumerari", function() {deepEqual( Stem("supernumeraries"), "supernumerari");});
test("superscription -> superscript", function() {deepEqual( Stem("superscription"), "superscript");});
test("supersede -> supersed", function() {deepEqual( Stem("supersede"), "supersed");});
test("superseded -> supersed", function() {deepEqual( Stem("superseded"), "supersed");});
test("superstition -> superstit", function() {deepEqual( Stem("superstition"), "superstit");});
test("superstitious -> superstiti", function() {deepEqual( Stem("superstitious"), "superstiti");});
test("superstitiously -> superstiti", function() {deepEqual( Stem("superstitiously"), "superstiti");});
test("supervene -> superven", function() {deepEqual( Stem("supervene"), "superven");});
test("supervision -> supervis", function() {deepEqual( Stem("supervision"), "supervis");});
test("supped -> sup", function() {deepEqual( Stem("supped"), "sup");});
test("supper -> supper", function() {deepEqual( Stem("supper"), "supper");});
test("suppers -> supper", function() {deepEqual( Stem("suppers"), "supper");});
test("supplanted -> supplant", function() {deepEqual( Stem("supplanted"), "supplant");});
test("supple -> suppl", function() {deepEqual( Stem("supple"), "suppl");});
test("supplementary -> supplementari", function() {deepEqual( Stem("supplementary"), "supplementari");});
test("suppleness -> suppl", function() {deepEqual( Stem("suppleness"), "suppl");});
test("suppliant -> suppliant", function() {deepEqual( Stem("suppliant"), "suppliant");});
test("supplication -> supplic", function() {deepEqual( Stem("supplication"), "supplic");});
test("supplications -> supplic", function() {deepEqual( Stem("supplications"), "supplic");});
test("supplied -> suppli", function() {deepEqual( Stem("supplied"), "suppli");});
test("supplies -> suppli", function() {deepEqual( Stem("supplies"), "suppli");});
test("supply -> suppli", function() {deepEqual( Stem("supply"), "suppli");});
test("supplying -> suppli", function() {deepEqual( Stem("supplying"), "suppli");});
test("suppor -> suppor", function() {deepEqual( Stem("suppor"), "suppor");});
test("support -> support", function() {deepEqual( Stem("support"), "support");});
test("supported -> support", function() {deepEqual( Stem("supported"), "support");});
test("supporter -> support", function() {deepEqual( Stem("supporter"), "support");});
test("supporters -> support", function() {deepEqual( Stem("supporters"), "support");});
test("supporting -> support", function() {deepEqual( Stem("supporting"), "support");});
test("supports -> support", function() {deepEqual( Stem("supports"), "support");});
test("suppose -> suppos", function() {deepEqual( Stem("suppose"), "suppos");});
test("supposed -> suppos", function() {deepEqual( Stem("supposed"), "suppos");});
test("supposes -> suppos", function() {deepEqual( Stem("supposes"), "suppos");});
test("supposing -> suppos", function() {deepEqual( Stem("supposing"), "suppos");});
test("supposition -> supposit", function() {deepEqual( Stem("supposition"), "supposit");});
test("suppositions -> supposit", function() {deepEqual( Stem("suppositions"), "supposit");});
test("supposititious -> supposititi", function() {deepEqual( Stem("supposititious"), "supposititi");});
test("suppress -> suppress", function() {deepEqual( Stem("suppress"), "suppress");});
test("suppressed -> suppress", function() {deepEqual( Stem("suppressed"), "suppress");});
test("suppressing -> suppress", function() {deepEqual( Stem("suppressing"), "suppress");});
test("suppression -> suppress", function() {deepEqual( Stem("suppression"), "suppress");});
test("suppurated -> suppur", function() {deepEqual( Stem("suppurated"), "suppur");});
test("supremacy -> supremaci", function() {deepEqual( Stem("supremacy"), "supremaci");});
test("supreme -> suprem", function() {deepEqual( Stem("supreme"), "suprem");});
test("supremely -> suprem", function() {deepEqual( Stem("supremely"), "suprem");});
test("supremest -> supremest", function() {deepEqual( Stem("supremest"), "supremest");});
test("sups -> sup", function() {deepEqual( Stem("sups"), "sup");});
test("sur -> sur", function() {deepEqual( Stem("sur"), "sur");});
test("surcingle -> surcingl", function() {deepEqual( Stem("surcingle"), "surcingl");});
test("sure -> sure", function() {deepEqual( Stem("sure"), "sure");});
test("surely -> sure", function() {deepEqual( Stem("surely"), "sure");});
test("surest -> surest", function() {deepEqual( Stem("surest"), "surest");});
test("surf -> surf", function() {deepEqual( Stem("surf"), "surf");});
test("surfac -> surfac", function() {deepEqual( Stem("surfac"), "surfac");});
test("surface -> surfac", function() {deepEqual( Stem("surface"), "surfac");});
test("surfaces -> surfac", function() {deepEqual( Stem("surfaces"), "surfac");});
test("surge -> surg", function() {deepEqual( Stem("surge"), "surg");});
test("surged -> surg", function() {deepEqual( Stem("surged"), "surg");});
test("surgeon -> surgeon", function() {deepEqual( Stem("surgeon"), "surgeon");});
test("surgeons -> surgeon", function() {deepEqual( Stem("surgeons"), "surgeon");});
test("surgery -> surgeri", function() {deepEqual( Stem("surgery"), "surgeri");});
test("surging -> surg", function() {deepEqual( Stem("surging"), "surg");});
test("surly -> sur", function() {deepEqual( Stem("surly"), "sur");});
test("surmise -> surmis", function() {deepEqual( Stem("surmise"), "surmis");});
test("surmised -> surmis", function() {deepEqual( Stem("surmised"), "surmis");});
test("surmises -> surmis", function() {deepEqual( Stem("surmises"), "surmis");});
test("surmising -> surmis", function() {deepEqual( Stem("surmising"), "surmis");});
test("surmount -> surmount", function() {deepEqual( Stem("surmount"), "surmount");});
test("surmounted -> surmount", function() {deepEqual( Stem("surmounted"), "surmount");});
test("surmounting -> surmount", function() {deepEqual( Stem("surmounting"), "surmount");});
test("surname -> surnam", function() {deepEqual( Stem("surname"), "surnam");});
test("surnames -> surnam", function() {deepEqual( Stem("surnames"), "surnam");});
test("surpass -> surpass", function() {deepEqual( Stem("surpass"), "surpass");});
test("surpassed -> surpass", function() {deepEqual( Stem("surpassed"), "surpass");});
test("surpasses -> surpass", function() {deepEqual( Stem("surpasses"), "surpass");});
test("surpassing -> surpass", function() {deepEqual( Stem("surpassing"), "surpass");});
test("surplus -> surplus", function() {deepEqual( Stem("surplus"), "surplus");});
test("surprise -> surpris", function() {deepEqual( Stem("surprise"), "surpris");});
test("surprised -> surpris", function() {deepEqual( Stem("surprised"), "surpris");});
test("surprises -> surpris", function() {deepEqual( Stem("surprises"), "surpris");});
test("surprising -> surpris", function() {deepEqual( Stem("surprising"), "surpris");});
test("surprisingly -> surpris", function() {deepEqual( Stem("surprisingly"), "surpris");});
test("surrender -> surrend", function() {deepEqual( Stem("surrender"), "surrend");});
test("surrendered -> surrend", function() {deepEqual( Stem("surrendered"), "surrend");});
test("surrendering -> surrend", function() {deepEqual( Stem("surrendering"), "surrend");});
test("surreptitiously -> surreptiti", function() {deepEqual( Stem("surreptitiously"), "surreptiti");});
test("surrey -> surrey", function() {deepEqual( Stem("surrey"), "surrey");});
test("surround -> surround", function() {deepEqual( Stem("surround"), "surround");});
test("surrounded -> surround", function() {deepEqual( Stem("surrounded"), "surround");});
test("surrounding -> surround", function() {deepEqual( Stem("surrounding"), "surround");});
test("surroundings -> surround", function() {deepEqual( Stem("surroundings"), "surround");});
test("surry -> surri", function() {deepEqual( Stem("surry"), "surri");});
test("surveillance -> surveil", function() {deepEqual( Stem("surveillance"), "surveil");});
test("survey -> survey", function() {deepEqual( Stem("survey"), "survey");});
test("surveyed -> survey", function() {deepEqual( Stem("surveyed"), "survey");});
test("surveying -> survey", function() {deepEqual( Stem("surveying"), "survey");});
test("surveyor -> surveyor", function() {deepEqual( Stem("surveyor"), "surveyor");});
test("surveyors -> surveyor", function() {deepEqual( Stem("surveyors"), "surveyor");});
test("surveys -> survey", function() {deepEqual( Stem("surveys"), "survey");});
test("survive -> surviv", function() {deepEqual( Stem("survive"), "surviv");});
test("survived -> surviv", function() {deepEqual( Stem("survived"), "surviv");});
test("surviving -> surviv", function() {deepEqual( Stem("surviving"), "surviv");});
test("survivor -> survivor", function() {deepEqual( Stem("survivor"), "survivor");});
test("survivors -> survivor", function() {deepEqual( Stem("survivors"), "survivor");});
test("surweys -> surwey", function() {deepEqual( Stem("surweys"), "surwey");});
test("susan -> susan", function() {deepEqual( Stem("susan"), "susan");});
test("susceptibility -> suscept", function() {deepEqual( Stem("susceptibility"), "suscept");});
test("susceptible -> suscept", function() {deepEqual( Stem("susceptible"), "suscept");});
test("suspect -> suspect", function() {deepEqual( Stem("suspect"), "suspect");});
test("suspected -> suspect", function() {deepEqual( Stem("suspected"), "suspect");});
test("suspecting -> suspect", function() {deepEqual( Stem("suspecting"), "suspect");});
test("suspects -> suspect", function() {deepEqual( Stem("suspects"), "suspect");});
test("suspended -> suspend", function() {deepEqual( Stem("suspended"), "suspend");});
test("suspending -> suspend", function() {deepEqual( Stem("suspending"), "suspend");});
test("suspense -> suspens", function() {deepEqual( Stem("suspense"), "suspens");});
test("suspension -> suspens", function() {deepEqual( Stem("suspension"), "suspens");});
test("suspicion -> suspicion", function() {deepEqual( Stem("suspicion"), "suspicion");});
test("suspicions -> suspicion", function() {deepEqual( Stem("suspicions"), "suspicion");});
test("suspicious -> suspici", function() {deepEqual( Stem("suspicious"), "suspici");});
test("suspiciously -> suspici", function() {deepEqual( Stem("suspiciously"), "suspici");});
test("suspiciousness -> suspici", function() {deepEqual( Stem("suspiciousness"), "suspici");});
test("sustain -> sustain", function() {deepEqual( Stem("sustain"), "sustain");});
test("sustained -> sustain", function() {deepEqual( Stem("sustained"), "sustain");});
test("sustaining -> sustain", function() {deepEqual( Stem("sustaining"), "sustain");});
test("sustenance -> susten", function() {deepEqual( Stem("sustenance"), "susten");});
test("svidrigailov -> svidrigailov", function() {deepEqual( Stem("svidrigailov"), "svidrigailov");});
test("svidrigailovs -> svidrigailov", function() {deepEqual( Stem("svidrigailovs"), "svidrigailov");});
test("svidrigrailovs -> svidrigrailov", function() {deepEqual( Stem("svidrigrailovs"), "svidrigrailov");});
test("svirbey -> svirbey", function() {deepEqual( Stem("svirbey"), "svirbey");});
test("swab -> swab", function() {deepEqual( Stem("swab"), "swab");});
test("swaddling -> swaddl", function() {deepEqual( Stem("swaddling"), "swaddl");});
test("swagger -> swagger", function() {deepEqual( Stem("swagger"), "swagger");});
test("swaggered -> swagger", function() {deepEqual( Stem("swaggered"), "swagger");});
test("swaggering -> swagger", function() {deepEqual( Stem("swaggering"), "swagger");});
test("swaggerings -> swagger", function() {deepEqual( Stem("swaggerings"), "swagger");});
test("swain -> swain", function() {deepEqual( Stem("swain"), "swain");});
test("swains -> swain", function() {deepEqual( Stem("swains"), "swain");});
test("swainson -> swainson", function() {deepEqual( Stem("swainson"), "swainson");});
test("swaller -> swaller", function() {deepEqual( Stem("swaller"), "swaller");});
test("swallering -> swaller", function() {deepEqual( Stem("swallering"), "swaller");});
test("swallow -> swallow", function() {deepEqual( Stem("swallow"), "swallow");});
test("swallowed -> swallow", function() {deepEqual( Stem("swallowed"), "swallow");});
test("swallower -> swallow", function() {deepEqual( Stem("swallower"), "swallow");});
test("swallowing -> swallow", function() {deepEqual( Stem("swallowing"), "swallow");});
test("swallows -> swallow", function() {deepEqual( Stem("swallows"), "swallow");});
test("swam -> swam", function() {deepEqual( Stem("swam"), "swam");});
test("swamp -> swamp", function() {deepEqual( Stem("swamp"), "swamp");});
test("swamps -> swamp", function() {deepEqual( Stem("swamps"), "swamp");});
test("swampy -> swampi", function() {deepEqual( Stem("swampy"), "swampi");});
test("swan -> swan", function() {deepEqual( Stem("swan"), "swan");});
test("swans -> swan", function() {deepEqual( Stem("swans"), "swan");});
test("swansea -> swansea", function() {deepEqual( Stem("swansea"), "swansea");});
test("sward -> sward", function() {deepEqual( Stem("sward"), "sward");});
test("swarm -> swarm", function() {deepEqual( Stem("swarm"), "swarm");});
test("swarmed -> swarm", function() {deepEqual( Stem("swarmed"), "swarm");});
test("swarming -> swarm", function() {deepEqual( Stem("swarming"), "swarm");});
test("swarms -> swarm", function() {deepEqual( Stem("swarms"), "swarm");});
test("swart -> swart", function() {deepEqual( Stem("swart"), "swart");});
test("swarthy -> swarthi", function() {deepEqual( Stem("swarthy"), "swarthi");});
test("sway -> sway", function() {deepEqual( Stem("sway"), "sway");});
test("swayed -> sway", function() {deepEqual( Stem("swayed"), "sway");});
test("swaying -> sway", function() {deepEqual( Stem("swaying"), "sway");});
test("swear -> swear", function() {deepEqual( Stem("swear"), "swear");});
test("swearing -> swear", function() {deepEqual( Stem("swearing"), "swear");});
test("swears -> swear", function() {deepEqual( Stem("swears"), "swear");});
test("sweat -> sweat", function() {deepEqual( Stem("sweat"), "sweat");});
test("sweden -> sweden", function() {deepEqual( Stem("sweden"), "sweden");});
test("sweep -> sweep", function() {deepEqual( Stem("sweep"), "sweep");});
test("sweeper -> sweeper", function() {deepEqual( Stem("sweeper"), "sweeper");});
test("sweepers -> sweeper", function() {deepEqual( Stem("sweepers"), "sweeper");});
test("sweeping -> sweep", function() {deepEqual( Stem("sweeping"), "sweep");});
test("sweeps -> sweep", function() {deepEqual( Stem("sweeps"), "sweep");});
test("sweet -> sweet", function() {deepEqual( Stem("sweet"), "sweet");});
test("sweetbread -> sweetbread", function() {deepEqual( Stem("sweetbread"), "sweetbread");});
test("sweetbrier -> sweetbrier", function() {deepEqual( Stem("sweetbrier"), "sweetbrier");});
test("sweeten -> sweeten", function() {deepEqual( Stem("sweeten"), "sweeten");});
test("sweetened -> sweeten", function() {deepEqual( Stem("sweetened"), "sweeten");});
test("sweetener -> sweeten", function() {deepEqual( Stem("sweetener"), "sweeten");});
test("sweeter -> sweeter", function() {deepEqual( Stem("sweeter"), "sweeter");});
test("sweetest -> sweetest", function() {deepEqual( Stem("sweetest"), "sweetest");});
test("sweetheart -> sweetheart", function() {deepEqual( Stem("sweetheart"), "sweetheart");});
test("sweethearts -> sweetheart", function() {deepEqual( Stem("sweethearts"), "sweetheart");});
test("sweetie -> sweeti", function() {deepEqual( Stem("sweetie"), "sweeti");});
test("sweetly -> sweet", function() {deepEqual( Stem("sweetly"), "sweet");});
test("sweetmeat -> sweetmeat", function() {deepEqual( Stem("sweetmeat"), "sweetmeat");});
test("sweetness -> sweet", function() {deepEqual( Stem("sweetness"), "sweet");});
test("sweets -> sweet", function() {deepEqual( Stem("sweets"), "sweet");});
test("swell -> swell", function() {deepEqual( Stem("swell"), "swell");});
test("swelled -> swell", function() {deepEqual( Stem("swelled"), "swell");});
test("swelling -> swell", function() {deepEqual( Stem("swelling"), "swell");});
test("swellings -> swell", function() {deepEqual( Stem("swellings"), "swell");});
test("swells -> swell", function() {deepEqual( Stem("swells"), "swell");});
test("sweltering -> swelter", function() {deepEqual( Stem("sweltering"), "swelter");});
test("swept -> swept", function() {deepEqual( Stem("swept"), "swept");});
test("swerve -> swerv", function() {deepEqual( Stem("swerve"), "swerv");});
test("swerved -> swerv", function() {deepEqual( Stem("swerved"), "swerv");});
test("swift -> swift", function() {deepEqual( Stem("swift"), "swift");});
test("swifter -> swifter", function() {deepEqual( Stem("swifter"), "swifter");});
test("swiftest -> swiftest", function() {deepEqual( Stem("swiftest"), "swiftest");});
test("swiftly -> swift", function() {deepEqual( Stem("swiftly"), "swift");});
test("swiftness -> swift", function() {deepEqual( Stem("swiftness"), "swift");});
test("swig -> swig", function() {deepEqual( Stem("swig"), "swig");});
test("swillenhausen -> swillenhausen", function() {deepEqual( Stem("swillenhausen"), "swillenhausen");});
test("swillenhausens -> swillenhausen", function() {deepEqual( Stem("swillenhausens"), "swillenhausen");});
test("swills -> swill", function() {deepEqual( Stem("swills"), "swill");});
test("swim -> swim", function() {deepEqual( Stem("swim"), "swim");});
test("swimming -> swim", function() {deepEqual( Stem("swimming"), "swim");});
test("swims -> swim", function() {deepEqual( Stem("swims"), "swim");});
test("swindle -> swindl", function() {deepEqual( Stem("swindle"), "swindl");});
test("swindled -> swindl", function() {deepEqual( Stem("swindled"), "swindl");});
test("swindler -> swindler", function() {deepEqual( Stem("swindler"), "swindler");});
test("swindlers -> swindler", function() {deepEqual( Stem("swindlers"), "swindler");});
test("swindling -> swindl", function() {deepEqual( Stem("swindling"), "swindl");});
test("swine -> swine", function() {deepEqual( Stem("swine"), "swine");});
test("swing -> swing", function() {deepEqual( Stem("swing"), "swing");});
test("swinging -> swing", function() {deepEqual( Stem("swinging"), "swing");});
test("swings -> swing", function() {deepEqual( Stem("swings"), "swing");});
test("swinishness -> swinish", function() {deepEqual( Stem("swinishness"), "swinish");});
test("swipes -> swipe", function() {deepEqual( Stem("swipes"), "swipe");});
test("swirling -> swirl", function() {deepEqual( Stem("swirling"), "swirl");});
test("switch -> switch", function() {deepEqual( Stem("switch"), "switch");});
test("switches -> switch", function() {deepEqual( Stem("switches"), "switch");});
test("switzerland -> switzerland", function() {deepEqual( Stem("switzerland"), "switzerland");});
test("swollen -> swollen", function() {deepEqual( Stem("swollen"), "swollen");});
test("swoln -> swoln", function() {deepEqual( Stem("swoln"), "swoln");});
test("swoon -> swoon", function() {deepEqual( Stem("swoon"), "swoon");});
test("swooned -> swoon", function() {deepEqual( Stem("swooned"), "swoon");});
test("swooning -> swoon", function() {deepEqual( Stem("swooning"), "swoon");});
test("swoop -> swoop", function() {deepEqual( Stem("swoop"), "swoop");});
test("swooped -> swoop", function() {deepEqual( Stem("swooped"), "swoop");});
test("sword -> sword", function() {deepEqual( Stem("sword"), "sword");});
test("swords -> sword", function() {deepEqual( Stem("swords"), "sword");});
test("swordsman -> swordsman", function() {deepEqual( Stem("swordsman"), "swordsman");});
test("swordsmanship -> swordsmanship", function() {deepEqual( Stem("swordsmanship"), "swordsmanship");});
test("swordsmen -> swordsmen", function() {deepEqual( Stem("swordsmen"), "swordsmen");});
test("swore -> swore", function() {deepEqual( Stem("swore"), "swore");});
test("sworn -> sworn", function() {deepEqual( Stem("sworn"), "sworn");});
test("swosser -> swosser", function() {deepEqual( Stem("swosser"), "swosser");});
test("swung -> swung", function() {deepEqual( Stem("swung"), "swung");});
test("sycophancy -> sycoph", function() {deepEqual( Stem("sycophancy"), "sycoph");});
test("sydney -> sydney", function() {deepEqual( Stem("sydney"), "sydney");});
test("syenite -> syenit", function() {deepEqual( Stem("syenite"), "syenit");});
test("syenitic -> syenit", function() {deepEqual( Stem("syenitic"), "syenit");});
test("syllable -> syllabl", function() {deepEqual( Stem("syllable"), "syllabl");});
test("syllogism -> syllog", function() {deepEqual( Stem("syllogism"), "syllog");});
test("sylph -> sylph", function() {deepEqual( Stem("sylph"), "sylph");});
test("symbol -> symbol", function() {deepEqual( Stem("symbol"), "symbol");});
test("symbolic -> symbol", function() {deepEqual( Stem("symbolic"), "symbol");});
test("symbolism -> symbol", function() {deepEqual( Stem("symbolism"), "symbol");});
test("symbols -> symbol", function() {deepEqual( Stem("symbols"), "symbol");});
test("symes -> syme", function() {deepEqual( Stem("symes"), "syme");});
test("symmetrical -> symmetr", function() {deepEqual( Stem("symmetrical"), "symmetr");});
test("symmetrically -> symmetr", function() {deepEqual( Stem("symmetrically"), "symmetr");});
test("symmetry -> symmetri", function() {deepEqual( Stem("symmetry"), "symmetri");});
test("symond -> symond", function() {deepEqual( Stem("symond"), "symond");});
test("symonds -> symond", function() {deepEqual( Stem("symonds"), "symond");});
test("sympathetic -> sympathet", function() {deepEqual( Stem("sympathetic"), "sympathet");});
test("sympathetically -> sympathet", function() {deepEqual( Stem("sympathetically"), "sympathet");});
test("sympathies -> sympathi", function() {deepEqual( Stem("sympathies"), "sympathi");});
test("sympathise -> sympathis", function() {deepEqual( Stem("sympathise"), "sympathis");});
test("sympathised -> sympathis", function() {deepEqual( Stem("sympathised"), "sympathis");});
test("sympathising -> sympathis", function() {deepEqual( Stem("sympathising"), "sympathis");});
test("sympathize -> sympath", function() {deepEqual( Stem("sympathize"), "sympath");});
test("sympathized -> sympath", function() {deepEqual( Stem("sympathized"), "sympath");});
test("sympathizers -> sympath", function() {deepEqual( Stem("sympathizers"), "sympath");});
test("sympathizing -> sympath", function() {deepEqual( Stem("sympathizing"), "sympath");});
test("sympathy -> sympathi", function() {deepEqual( Stem("sympathy"), "sympathi");});
test("symptom -> symptom", function() {deepEqual( Stem("symptom"), "symptom");});
test("symptomatic -> symptomat", function() {deepEqual( Stem("symptomatic"), "symptomat");});
test("symptoms -> symptom", function() {deepEqual( Stem("symptoms"), "symptom");});
test("synetheres -> synether", function() {deepEqual( Stem("synetheres"), "synether");});
test("synod -> synod", function() {deepEqual( Stem("synod"), "synod");});
test("synonymous -> synonym", function() {deepEqual( Stem("synonymous"), "synonym");});
test("syria -> syria", function() {deepEqual( Stem("syria"), "syria");});
test("syriac -> syriac", function() {deepEqual( Stem("syriac"), "syriac");});
test("syrphus -> syrphus", function() {deepEqual( Stem("syrphus"), "syrphus");});
test("system -> system", function() {deepEqual( Stem("system"), "system");});
test("systematic -> systemat", function() {deepEqual( Stem("systematic"), "systemat");});
test("systems -> system", function() {deepEqual( Stem("systems"), "system");});
test("t -> t", function() {deepEqual( Stem("t"), "t");});
test("ta -> ta", function() {deepEqual( Stem("ta"), "ta");});
test("tabanus -> tabanus", function() {deepEqual( Stem("tabanus"), "tabanus");});
test("tabby -> tabbi", function() {deepEqual( Stem("tabby"), "tabbi");});
test("table -> tabl", function() {deepEqual( Stem("table"), "tabl");});
test("tableau -> tableau", function() {deepEqual( Stem("tableau"), "tableau");});
test("tablecloth -> tablecloth", function() {deepEqual( Stem("tablecloth"), "tablecloth");});
test("tablecloths -> tablecloth", function() {deepEqual( Stem("tablecloths"), "tablecloth");});
test("tables -> tabl", function() {deepEqual( Stem("tables"), "tabl");});
test("tabooed -> taboo", function() {deepEqual( Stem("tabooed"), "taboo");});
test("tabor -> tabor", function() {deepEqual( Stem("tabor"), "tabor");});
test("tacit -> tacit", function() {deepEqual( Stem("tacit"), "tacit");});
test("tacitly -> tacit", function() {deepEqual( Stem("tacitly"), "tacit");});
test("taciturn -> taciturn", function() {deepEqual( Stem("taciturn"), "taciturn");});
test("taciturnity -> taciturn", function() {deepEqual( Stem("taciturnity"), "taciturn");});
test("tack -> tack", function() {deepEqual( Stem("tack"), "tack");});
test("tacking -> tack", function() {deepEqual( Stem("tacking"), "tack");});
test("tackle -> tackl", function() {deepEqual( Stem("tackle"), "tackl");});
test("tacks -> tack", function() {deepEqual( Stem("tacks"), "tack");});
test("tacna -> tacna", function() {deepEqual( Stem("tacna"), "tacna");});
test("tact -> tact", function() {deepEqual( Stem("tact"), "tact");});
test("tactics -> tactic", function() {deepEqual( Stem("tactics"), "tactic");});
test("tags -> tag", function() {deepEqual( Stem("tags"), "tag");});
test("tagua -> tagua", function() {deepEqual( Stem("tagua"), "tagua");});
test("tahiti -> tahiti", function() {deepEqual( Stem("tahiti"), "tahiti");});
test("tahitian -> tahitian", function() {deepEqual( Stem("tahitian"), "tahitian");});
test("tahitians -> tahitian", function() {deepEqual( Stem("tahitians"), "tahitian");});
test("tail -> tail", function() {deepEqual( Stem("tail"), "tail");});
test("tailed -> tail", function() {deepEqual( Stem("tailed"), "tail");});
test("tailor -> tailor", function() {deepEqual( Stem("tailor"), "tailor");});
test("tailors -> tailor", function() {deepEqual( Stem("tailors"), "tailor");});
test("tails -> tail", function() {deepEqual( Stem("tails"), "tail");});
test("tain -> tain", function() {deepEqual( Stem("tain"), "tain");});
test("taint -> taint", function() {deepEqual( Stem("taint"), "taint");});
test("tainted -> taint", function() {deepEqual( Stem("tainted"), "taint");});
test("tainting -> taint", function() {deepEqual( Stem("tainting"), "taint");});
test("taints -> taint", function() {deepEqual( Stem("taints"), "taint");});
test("tak -> tak", function() {deepEqual( Stem("tak"), "tak");});
test("take -> take", function() {deepEqual( Stem("take"), "take");});
test("taken -> taken", function() {deepEqual( Stem("taken"), "taken");});
test("taker -> taker", function() {deepEqual( Stem("taker"), "taker");});
test("takes -> take", function() {deepEqual( Stem("takes"), "take");});
test("taketh -> taketh", function() {deepEqual( Stem("taketh"), "taketh");});
test("taking -> take", function() {deepEqual( Stem("taking"), "take");});
test("takken -> takken", function() {deepEqual( Stem("takken"), "takken");});
test("takkin -> takkin", function() {deepEqual( Stem("takkin"), "takkin");});
test("talbot -> talbot", function() {deepEqual( Stem("talbot"), "talbot");});
test("talcahuano -> talcahuano", function() {deepEqual( Stem("talcahuano"), "talcahuano");});
test("tale -> tale", function() {deepEqual( Stem("tale"), "tale");});
test("talent -> talent", function() {deepEqual( Stem("talent"), "talent");});
test("talented -> talent", function() {deepEqual( Stem("talented"), "talent");});
test("talents -> talent", function() {deepEqual( Stem("talents"), "talent");});
test("tales -> tale", function() {deepEqual( Stem("tales"), "tale");});
test("talguen -> talguen", function() {deepEqual( Stem("talguen"), "talguen");});
test("talisman -> talisman", function() {deepEqual( Stem("talisman"), "talisman");});
test("talk -> talk", function() {deepEqual( Stem("talk"), "talk");});
test("talkative -> talkat", function() {deepEqual( Stem("talkative"), "talkat");});
test("talked -> talk", function() {deepEqual( Stem("talked"), "talk");});
test("talker -> talker", function() {deepEqual( Stem("talker"), "talker");});
test("talkers -> talker", function() {deepEqual( Stem("talkers"), "talker");});
test("talkin -> talkin", function() {deepEqual( Stem("talkin"), "talkin");});
test("talking -> talk", function() {deepEqual( Stem("talking"), "talk");});
test("talks -> talk", function() {deepEqual( Stem("talks"), "talk");});
test("tall -> tall", function() {deepEqual( Stem("tall"), "tall");});
test("taller -> taller", function() {deepEqual( Stem("taller"), "taller");});
test("tallest -> tallest", function() {deepEqual( Stem("tallest"), "tallest");});
test("tallied -> talli", function() {deepEqual( Stem("tallied"), "talli");});
test("tallow -> tallow", function() {deepEqual( Stem("tallow"), "tallow");});
test("tally -> talli", function() {deepEqual( Stem("tally"), "talli");});
test("talus -> talus", function() {deepEqual( Stem("talus"), "talus");});
test("tam -> tam", function() {deepEqual( Stem("tam"), "tam");});
test("tambillos -> tambillo", function() {deepEqual( Stem("tambillos"), "tambillo");});
test("tambour -> tambour", function() {deepEqual( Stem("tambour"), "tambour");});
test("tambourine -> tambourin", function() {deepEqual( Stem("tambourine"), "tambourin");});
test("tame -> tame", function() {deepEqual( Stem("tame"), "tame");});
test("tamed -> tame", function() {deepEqual( Stem("tamed"), "tame");});
test("tamely -> tame", function() {deepEqual( Stem("tamely"), "tame");});
test("tameness -> tame", function() {deepEqual( Stem("tameness"), "tame");});
test("tamer -> tamer", function() {deepEqual( Stem("tamer"), "tamer");});
test("taming -> tame", function() {deepEqual( Stem("taming"), "tame");});
test("tamper -> tamper", function() {deepEqual( Stem("tamper"), "tamper");});
test("tampered -> tamper", function() {deepEqual( Stem("tampered"), "tamper");});
test("tampering -> tamper", function() {deepEqual( Stem("tampering"), "tamper");});
test("tampers -> tamper", function() {deepEqual( Stem("tampers"), "tamper");});
test("tan -> tan", function() {deepEqual( Stem("tan"), "tan");});
test("tandeel -> tandeel", function() {deepEqual( Stem("tandeel"), "tandeel");});
test("tangible -> tangibl", function() {deepEqual( Stem("tangible"), "tangibl");});
test("tangle -> tangl", function() {deepEqual( Stem("tangle"), "tangl");});
test("tangled -> tangl", function() {deepEqual( Stem("tangled"), "tangl");});
test("tankard -> tankard", function() {deepEqual( Stem("tankard"), "tankard");});
test("tanks -> tank", function() {deepEqual( Stem("tanks"), "tank");});
test("tanned -> tan", function() {deepEqual( Stem("tanned"), "tan");});
test("tanqui -> tanqui", function() {deepEqual( Stem("tanqui"), "tanqui");});
test("tantalisation -> tantalis", function() {deepEqual( Stem("tantalisation"), "tantalis");});
test("tantalised -> tantalis", function() {deepEqual( Stem("tantalised"), "tantalis");});
test("tantalising -> tantalis", function() {deepEqual( Stem("tantalising"), "tantalis");});
test("tantalizing -> tantal", function() {deepEqual( Stem("tantalizing"), "tantal");});
test("tantamount -> tantamount", function() {deepEqual( Stem("tantamount"), "tantamount");});
test("tantrums -> tantrum", function() {deepEqual( Stem("tantrums"), "tantrum");});
test("tap -> tap", function() {deepEqual( Stem("tap"), "tap");});
test("tapacolo -> tapacolo", function() {deepEqual( Stem("tapacolo"), "tapacolo");});
test("tapalguen -> tapalguen", function() {deepEqual( Stem("tapalguen"), "tapalguen");});
test("tape -> tape", function() {deepEqual( Stem("tape"), "tape");});
test("taper -> taper", function() {deepEqual( Stem("taper"), "taper");});
test("tapering -> taper", function() {deepEqual( Stem("tapering"), "taper");});
test("tapers -> taper", function() {deepEqual( Stem("tapers"), "taper");});
test("tapes -> tape", function() {deepEqual( Stem("tapes"), "tape");});
test("tapir -> tapir", function() {deepEqual( Stem("tapir"), "tapir");});
test("tapirs -> tapir", function() {deepEqual( Stem("tapirs"), "tapir");});
test("tapis -> tapi", function() {deepEqual( Stem("tapis"), "tapi");});
test("tapn -> tapn", function() {deepEqual( Stem("tapn"), "tapn");});
test("tapped -> tap", function() {deepEqual( Stem("tapped"), "tap");});
test("tapping -> tap", function() {deepEqual( Stem("tapping"), "tap");});
test("taps -> tap", function() {deepEqual( Stem("taps"), "tap");});
test("tapster -> tapster", function() {deepEqual( Stem("tapster"), "tapster");});
test("taradiddle -> taradiddl", function() {deepEqual( Stem("taradiddle"), "taradiddl");});
test("tardily -> tardili", function() {deepEqual( Stem("tardily"), "tardili");});
test("tardiness -> tardi", function() {deepEqual( Stem("tardiness"), "tardi");});
test("tardy -> tardi", function() {deepEqual( Stem("tardy"), "tardi");});
test("tares -> tare", function() {deepEqual( Stem("tares"), "tare");});
test("target -> target", function() {deepEqual( Stem("target"), "target");});
test("targets -> target", function() {deepEqual( Stem("targets"), "target");});
test("tarn -> tarn", function() {deepEqual( Stem("tarn"), "tarn");});
test("tarnii -> tarnii", function() {deepEqual( Stem("tarnii"), "tarnii");});
test("tarnish -> tarnish", function() {deepEqual( Stem("tarnish"), "tarnish");});
test("tarnished -> tarnish", function() {deepEqual( Stem("tarnished"), "tarnish");});
test("tarpaulins -> tarpaulin", function() {deepEqual( Stem("tarpaulins"), "tarpaulin");});
test("tarradiddles -> tarradiddl", function() {deepEqual( Stem("tarradiddles"), "tarradiddl");});
test("tarred -> tar", function() {deepEqual( Stem("tarred"), "tar");});
test("tarry -> tarri", function() {deepEqual( Stem("tarry"), "tarri");});
test("tart -> tart", function() {deepEqual( Stem("tart"), "tart");});
test("tartan -> tartan", function() {deepEqual( Stem("tartan"), "tartan");});
test("tartar -> tartar", function() {deepEqual( Stem("tartar"), "tartar");});
test("tartary -> tartari", function() {deepEqual( Stem("tartary"), "tartari");});
test("tartly -> tart", function() {deepEqual( Stem("tartly"), "tart");});
test("tarts -> tart", function() {deepEqual( Stem("tarts"), "tart");});
test("task -> task", function() {deepEqual( Stem("task"), "task");});
test("tasking -> task", function() {deepEqual( Stem("tasking"), "task");});
test("tasks -> task", function() {deepEqual( Stem("tasks"), "task");});
test("tasman -> tasman", function() {deepEqual( Stem("tasman"), "tasman");});
test("tasmania -> tasmania", function() {deepEqual( Stem("tasmania"), "tasmania");});
test("tassel -> tassel", function() {deepEqual( Stem("tassel"), "tassel");});
test("tasselled -> tassel", function() {deepEqual( Stem("tasselled"), "tassel");});
test("tassels -> tassel", function() {deepEqual( Stem("tassels"), "tassel");});
test("tasso -> tasso", function() {deepEqual( Stem("tasso"), "tasso");});
test("taste -> tast", function() {deepEqual( Stem("taste"), "tast");});
test("tasted -> tast", function() {deepEqual( Stem("tasted"), "tast");});
test("tasteful -> tast", function() {deepEqual( Stem("tasteful"), "tast");});
test("tastefully -> tast", function() {deepEqual( Stem("tastefully"), "tast");});
test("tasteless -> tasteless", function() {deepEqual( Stem("tasteless"), "tasteless");});
test("tastes -> tast", function() {deepEqual( Stem("tastes"), "tast");});
test("tasting -> tast", function() {deepEqual( Stem("tasting"), "tast");});
test("tat -> tat", function() {deepEqual( Stem("tat"), "tat");});
test("tata -> tata", function() {deepEqual( Stem("tata"), "tata");});
test("tattered -> tatter", function() {deepEqual( Stem("tattered"), "tatter");});
test("tatters -> tatter", function() {deepEqual( Stem("tatters"), "tatter");});
test("tattoo -> tattoo", function() {deepEqual( Stem("tattoo"), "tattoo");});
test("tattooed -> tattoo", function() {deepEqual( Stem("tattooed"), "tattoo");});
test("tattooing -> tattoo", function() {deepEqual( Stem("tattooing"), "tattoo");});
test("taught -> taught", function() {deepEqual( Stem("taught"), "taught");});
test("taunt -> taunt", function() {deepEqual( Stem("taunt"), "taunt");});
test("taunted -> taunt", function() {deepEqual( Stem("taunted"), "taunt");});
test("taunting -> taunt", function() {deepEqual( Stem("taunting"), "taunt");});
test("taunto -> taunto", function() {deepEqual( Stem("taunto"), "taunto");});
test("taunton -> taunton", function() {deepEqual( Stem("taunton"), "taunton");});
test("taunts -> taunt", function() {deepEqual( Stem("taunts"), "taunt");});
test("tavern -> tavern", function() {deepEqual( Stem("tavern"), "tavern");});
test("taverns -> tavern", function() {deepEqual( Stem("taverns"), "tavern");});
test("tawdry -> tawdri", function() {deepEqual( Stem("tawdry"), "tawdri");});
test("tawny -> tawni", function() {deepEqual( Stem("tawny"), "tawni");});
test("tax -> tax", function() {deepEqual( Stem("tax"), "tax");});
test("taxation -> taxat", function() {deepEqual( Stem("taxation"), "taxat");});
test("taxed -> tax", function() {deepEqual( Stem("taxed"), "tax");});
test("taxes -> tax", function() {deepEqual( Stem("taxes"), "tax");});
test("taylor -> taylor", function() {deepEqual( Stem("taylor"), "taylor");});
test("tbe -> tbe", function() {deepEqual( Stem("tbe"), "tbe");});
test("tchebarov -> tchebarov", function() {deepEqual( Stem("tchebarov"), "tchebarov");});
test("te -> te", function() {deepEqual( Stem("te"), "te");});
test("tea -> tea", function() {deepEqual( Stem("tea"), "tea");});
test("teach -> teach", function() {deepEqual( Stem("teach"), "teach");});
test("teacher -> teacher", function() {deepEqual( Stem("teacher"), "teacher");});
test("teachers -> teacher", function() {deepEqual( Stem("teachers"), "teacher");});
test("teaches -> teach", function() {deepEqual( Stem("teaches"), "teach");});
test("teaching -> teach", function() {deepEqual( Stem("teaching"), "teach");});
test("teachings -> teach", function() {deepEqual( Stem("teachings"), "teach");});
test("teacups -> teacup", function() {deepEqual( Stem("teacups"), "teacup");});
test("teak -> teak", function() {deepEqual( Stem("teak"), "teak");});
test("team -> team", function() {deepEqual( Stem("team"), "team");});
test("teapot -> teapot", function() {deepEqual( Stem("teapot"), "teapot");});
test("tear -> tear", function() {deepEqual( Stem("tear"), "tear");});
test("teardrop -> teardrop", function() {deepEqual( Stem("teardrop"), "teardrop");});
test("tearful -> tear", function() {deepEqual( Stem("tearful"), "tear");});
test("tearfully -> tear", function() {deepEqual( Stem("tearfully"), "tear");});
test("tearing -> tear", function() {deepEqual( Stem("tearing"), "tear");});
test("tearless -> tearless", function() {deepEqual( Stem("tearless"), "tearless");});
test("tears -> tear", function() {deepEqual( Stem("tears"), "tear");});
test("tease -> teas", function() {deepEqual( Stem("tease"), "teas");});
test("teased -> teas", function() {deepEqual( Stem("teased"), "teas");});
test("teasing -> teas", function() {deepEqual( Stem("teasing"), "teas");});
test("teaspoon -> teaspoon", function() {deepEqual( Stem("teaspoon"), "teaspoon");});
test("teaspoons -> teaspoon", function() {deepEqual( Stem("teaspoons"), "teaspoon");});
test("teatime -> teatim", function() {deepEqual( Stem("teatime"), "teatim");});
test("technicalities -> technic", function() {deepEqual( Stem("technicalities"), "technic");});
test("tedious -> tedious", function() {deepEqual( Stem("tedious"), "tedious");});
test("tediousness -> tedious", function() {deepEqual( Stem("tediousness"), "tedious");});
test("tedium -> tedium", function() {deepEqual( Stem("tedium"), "tedium");});
test("tee -> tee", function() {deepEqual( Stem("tee"), "tee");});
test("teel -> teel", function() {deepEqual( Stem("teel"), "teel");});
test("teeming -> teem", function() {deepEqual( Stem("teeming"), "teem");});
test("teems -> teem", function() {deepEqual( Stem("teems"), "teem");});
test("teens -> teen", function() {deepEqual( Stem("teens"), "teen");});
test("teeth -> teeth", function() {deepEqual( Stem("teeth"), "teeth");});
test("tehuelches -> tehuelch", function() {deepEqual( Stem("tehuelches"), "tehuelch");});
test("tekenika -> tekenika", function() {deepEqual( Stem("tekenika"), "tekenika");});
test("telegram -> telegram", function() {deepEqual( Stem("telegram"), "telegram");});
test("telegrams -> telegram", function() {deepEqual( Stem("telegrams"), "telegram");});
test("telegraph -> telegraph", function() {deepEqual( Stem("telegraph"), "telegraph");});
test("telegraphed -> telegraph", function() {deepEqual( Stem("telegraphed"), "telegraph");});
test("telegraphic -> telegraph", function() {deepEqual( Stem("telegraphic"), "telegraph");});
test("telegraphing -> telegraph", function() {deepEqual( Stem("telegraphing"), "telegraph");});
test("telemachus -> telemachus", function() {deepEqual( Stem("telemachus"), "telemachus");});
test("telephoridae -> telephorida", function() {deepEqual( Stem("telephoridae"), "telephorida");});
test("telescope -> telescop", function() {deepEqual( Stem("telescope"), "telescop");});
test("telescopes -> telescop", function() {deepEqual( Stem("telescopes"), "telescop");});
test("telescopic -> telescop", function() {deepEqual( Stem("telescopic"), "telescop");});
test("tell -> tell", function() {deepEqual( Stem("tell"), "tell");});
test("tellee -> telle", function() {deepEqual( Stem("tellee"), "telle");});
test("teller -> teller", function() {deepEqual( Stem("teller"), "teller");});
test("telling -> tell", function() {deepEqual( Stem("telling"), "tell");});
test("tells -> tell", function() {deepEqual( Stem("tells"), "tell");});
test("temminckii -> temminckii", function() {deepEqual( Stem("temminckii"), "temminckii");});
test("temp -> temp", function() {deepEqual( Stem("temp"), "temp");});
test("temper -> temper", function() {deepEqual( Stem("temper"), "temper");});
test("temperament -> tempera", function() {deepEqual( Stem("temperament"), "tempera");});
test("temperaments -> tempera", function() {deepEqual( Stem("temperaments"), "tempera");});
test("temperance -> temper", function() {deepEqual( Stem("temperance"), "temper");});
test("temperate -> temper", function() {deepEqual( Stem("temperate"), "temper");});
test("temperature -> temperatur", function() {deepEqual( Stem("temperature"), "temperatur");});
test("tempered -> temper", function() {deepEqual( Stem("tempered"), "temper");});
test("tempers -> temper", function() {deepEqual( Stem("tempers"), "temper");});
test("tempest -> tempest", function() {deepEqual( Stem("tempest"), "tempest");});
test("tempestuous -> tempestu", function() {deepEqual( Stem("tempestuous"), "tempestu");});
test("temple -> templ", function() {deepEqual( Stem("temple"), "templ");});
test("temples -> templ", function() {deepEqual( Stem("temples"), "templ");});
test("temporal -> tempor", function() {deepEqual( Stem("temporal"), "tempor");});
test("temporary -> temporari", function() {deepEqual( Stem("temporary"), "temporari");});
test("tempt -> tempt", function() {deepEqual( Stem("tempt"), "tempt");});
test("temptation -> temptat", function() {deepEqual( Stem("temptation"), "temptat");});
test("temptations -> temptat", function() {deepEqual( Stem("temptations"), "temptat");});
test("tempted -> tempt", function() {deepEqual( Stem("tempted"), "tempt");});
test("tempter -> tempter", function() {deepEqual( Stem("tempter"), "tempter");});
test("tempting -> tempt", function() {deepEqual( Stem("tempting"), "tempt");});
test("tempts -> tempt", function() {deepEqual( Stem("tempts"), "tempt");});
test("ten -> ten", function() {deepEqual( Stem("ten"), "ten");});
test("tenacious -> tenaci", function() {deepEqual( Stem("tenacious"), "tenaci");});
test("tenaciously -> tenaci", function() {deepEqual( Stem("tenaciously"), "tenaci");});
test("tenacity -> tenac", function() {deepEqual( Stem("tenacity"), "tenac");});
test("tenant -> tenant", function() {deepEqual( Stem("tenant"), "tenant");});
test("tenanted -> tenant", function() {deepEqual( Stem("tenanted"), "tenant");});
test("tenantry -> tenantri", function() {deepEqual( Stem("tenantry"), "tenantri");});
test("tenants -> tenant", function() {deepEqual( Stem("tenants"), "tenant");});
test("tend -> tend", function() {deepEqual( Stem("tend"), "tend");});
test("tended -> tend", function() {deepEqual( Stem("tended"), "tend");});
test("tendencies -> tendenc", function() {deepEqual( Stem("tendencies"), "tendenc");});
test("tendency -> tendenc", function() {deepEqual( Stem("tendency"), "tendenc");});
test("tender -> tender", function() {deepEqual( Stem("tender"), "tender");});
test("tendered -> tender", function() {deepEqual( Stem("tendered"), "tender");});
test("tenderer -> tender", function() {deepEqual( Stem("tenderer"), "tender");});
test("tenderest -> tenderest", function() {deepEqual( Stem("tenderest"), "tenderest");});
test("tendering -> tender", function() {deepEqual( Stem("tendering"), "tender");});
test("tenderly -> tender", function() {deepEqual( Stem("tenderly"), "tender");});
test("tenderness -> tender", function() {deepEqual( Stem("tenderness"), "tender");});
test("tending -> tend", function() {deepEqual( Stem("tending"), "tend");});
test("tendinous -> tendin", function() {deepEqual( Stem("tendinous"), "tendin");});
test("tendon -> tendon", function() {deepEqual( Stem("tendon"), "tendon");});
test("tends -> tend", function() {deepEqual( Stem("tends"), "tend");});
test("tenement -> tenement", function() {deepEqual( Stem("tenement"), "tenement");});
test("tenements -> tenement", function() {deepEqual( Stem("tenements"), "tenement");});
test("teneriffe -> teneriff", function() {deepEqual( Stem("teneriffe"), "teneriff");});
test("tenez -> tenez", function() {deepEqual( Stem("tenez"), "tenez");});
test("tenfold -> tenfold", function() {deepEqual( Stem("tenfold"), "tenfold");});
test("tennyson -> tennyson", function() {deepEqual( Stem("tennyson"), "tennyson");});
test("tenor -> tenor", function() {deepEqual( Stem("tenor"), "tenor");});
test("tens -> ten", function() {deepEqual( Stem("tens"), "ten");});
test("tense -> tens", function() {deepEqual( Stem("tense"), "tens");});
test("tension -> tension", function() {deepEqual( Stem("tension"), "tension");});
test("tensions -> tension", function() {deepEqual( Stem("tensions"), "tension");});
test("tent -> tent", function() {deepEqual( Stem("tent"), "tent");});
test("tentacula -> tentacula", function() {deepEqual( Stem("tentacula"), "tentacula");});
test("tentative -> tentat", function() {deepEqual( Stem("tentative"), "tentat");});
test("tentatively -> tentat", function() {deepEqual( Stem("tentatively"), "tentat");});
test("tenth -> tenth", function() {deepEqual( Stem("tenth"), "tenth");});
test("tenths -> tenth", function() {deepEqual( Stem("tenths"), "tenth");});
test("tents -> tent", function() {deepEqual( Stem("tents"), "tent");});
test("tenure -> tenur", function() {deepEqual( Stem("tenure"), "tenur");});
test("tenway -> tenway", function() {deepEqual( Stem("tenway"), "tenway");});
test("ter -> ter", function() {deepEqual( Stem("ter"), "ter");});
test("tercero -> tercero", function() {deepEqual( Stem("tercero"), "tercero");});
test("terebra -> terebra", function() {deepEqual( Stem("terebra"), "terebra");});
test("terebyeva -> terebyeva", function() {deepEqual( Stem("terebyeva"), "terebyeva");});
test("terewth -> terewth", function() {deepEqual( Stem("terewth"), "terewth");});
test("term -> term", function() {deepEqual( Stem("term"), "term");});
test("termagant -> termag", function() {deepEqual( Stem("termagant"), "termag");});
test("termed -> term", function() {deepEqual( Stem("termed"), "term");});
test("terminal -> termin", function() {deepEqual( Stem("terminal"), "termin");});
test("terminate -> termin", function() {deepEqual( Stem("terminate"), "termin");});
test("terminated -> termin", function() {deepEqual( Stem("terminated"), "termin");});
test("terminates -> termin", function() {deepEqual( Stem("terminates"), "termin");});
test("terminating -> termin", function() {deepEqual( Stem("terminating"), "termin");});
test("termination -> termin", function() {deepEqual( Stem("termination"), "termin");});
test("terms -> term", function() {deepEqual( Stem("terms"), "term");});
test("tern -> tern", function() {deepEqual( Stem("tern"), "tern");});
test("terns -> tern", function() {deepEqual( Stem("terns"), "tern");});
test("tero -> tero", function() {deepEqual( Stem("tero"), "tero");});
test("terra -> terra", function() {deepEqual( Stem("terra"), "terra");});
test("terrace -> terrac", function() {deepEqual( Stem("terrace"), "terrac");});
test("terraces -> terrac", function() {deepEqual( Stem("terraces"), "terrac");});
test("terres -> terr", function() {deepEqual( Stem("terres"), "terr");});
test("terrestrial -> terrestri", function() {deepEqual( Stem("terrestrial"), "terrestri");});
test("terrible -> terribl", function() {deepEqual( Stem("terrible"), "terribl");});
test("terribly -> terribl", function() {deepEqual( Stem("terribly"), "terribl");});
test("terrier -> terrier", function() {deepEqual( Stem("terrier"), "terrier");});
test("terriers -> terrier", function() {deepEqual( Stem("terriers"), "terrier");});
test("terrific -> terrif", function() {deepEqual( Stem("terrific"), "terrif");});
test("terrified -> terrifi", function() {deepEqual( Stem("terrified"), "terrifi");});
test("terrify -> terrifi", function() {deepEqual( Stem("terrify"), "terrifi");});
test("terrifying -> terrifi", function() {deepEqual( Stem("terrifying"), "terrifi");});
test("territorial -> territori", function() {deepEqual( Stem("territorial"), "territori");});
test("territories -> territori", function() {deepEqual( Stem("territories"), "territori");});
test("territory -> territori", function() {deepEqual( Stem("territory"), "territori");});
test("terror -> terror", function() {deepEqual( Stem("terror"), "terror");});
test("terrors -> terror", function() {deepEqual( Stem("terrors"), "terror");});
test("terse -> ters", function() {deepEqual( Stem("terse"), "ters");});
test("terseness -> ters", function() {deepEqual( Stem("terseness"), "ters");});
test("tertiary -> tertiari", function() {deepEqual( Stem("tertiary"), "tertiari");});
test("teru -> teru", function() {deepEqual( Stem("teru"), "teru");});
test("tesselated -> tessel", function() {deepEqual( Stem("tesselated"), "tessel");});
test("test -> test", function() {deepEqual( Stem("test"), "test");});
test("testacea -> testacea", function() {deepEqual( Stem("testacea"), "testacea");});
test("testament -> testament", function() {deepEqual( Stem("testament"), "testament");});
test("testamentary -> testamentari", function() {deepEqual( Stem("testamentary"), "testamentari");});
test("testator -> testat", function() {deepEqual( Stem("testator"), "testat");});
test("tested -> test", function() {deepEqual( Stem("tested"), "test");});
test("testified -> testifi", function() {deepEqual( Stem("testified"), "testifi");});
test("testifies -> testifi", function() {deepEqual( Stem("testifies"), "testifi");});
test("testifled -> testifl", function() {deepEqual( Stem("testifled"), "testifl");});
test("testify -> testifi", function() {deepEqual( Stem("testify"), "testifi");});
test("testifying -> testifi", function() {deepEqual( Stem("testifying"), "testifi");});
test("testily -> testili", function() {deepEqual( Stem("testily"), "testili");});
test("testimonial -> testimoni", function() {deepEqual( Stem("testimonial"), "testimoni");});
test("testimony -> testimoni", function() {deepEqual( Stem("testimony"), "testimoni");});
test("testiness -> testi", function() {deepEqual( Stem("testiness"), "testi");});
test("tests -> test", function() {deepEqual( Stem("tests"), "test");});
test("testudo -> testudo", function() {deepEqual( Stem("testudo"), "testudo");});
test("testy -> testi", function() {deepEqual( Stem("testy"), "testi");});
test("tete -> tete", function() {deepEqual( Stem("tete"), "tete");});
test("tetes -> tete", function() {deepEqual( Stem("tetes"), "tete");});
test("teutons -> teuton", function() {deepEqual( Stem("teutons"), "teuton");});
test("tew -> tew", function() {deepEqual( Stem("tew"), "tew");});
test("text -> text", function() {deepEqual( Stem("text"), "text");});
test("texture -> textur", function() {deepEqual( Stem("texture"), "textur");});
test("tfoo -> tfoo", function() {deepEqual( Stem("tfoo"), "tfoo");});
test("th -> th", function() {deepEqual( Stem("th"), "th");});
test("tha -> tha", function() {deepEqual( Stem("tha"), "tha");});
test("thames -> thame", function() {deepEqual( Stem("thames"), "thame");});
test("than -> than", function() {deepEqual( Stem("than"), "than");});
test("thank -> thank", function() {deepEqual( Stem("thank"), "thank");});
test("thanked -> thank", function() {deepEqual( Stem("thanked"), "thank");});
test("thankee -> thanke", function() {deepEqual( Stem("thankee"), "thanke");});
test("thankful -> thank", function() {deepEqual( Stem("thankful"), "thank");});
test("thankfully -> thank", function() {deepEqual( Stem("thankfully"), "thank");});
test("thankfulness -> thank", function() {deepEqual( Stem("thankfulness"), "thank");});
test("thanking -> thank", function() {deepEqual( Stem("thanking"), "thank");});
test("thankless -> thankless", function() {deepEqual( Stem("thankless"), "thankless");});
test("thanks -> thank", function() {deepEqual( Stem("thanks"), "thank");});
test("thanksgiving -> thanksgiv", function() {deepEqual( Stem("thanksgiving"), "thanksgiv");});
test("thanksgivings -> thanksgiv", function() {deepEqual( Stem("thanksgivings"), "thanksgiv");});
test("thanyou -> thanyou", function() {deepEqual( Stem("thanyou"), "thanyou");});
test("that -> that", function() {deepEqual( Stem("that"), "that");});
test("thatch -> thatch", function() {deepEqual( Stem("thatch"), "thatch");});
test("thatched -> thatch", function() {deepEqual( Stem("thatched"), "thatch");});
test("thavies -> thavi", function() {deepEqual( Stem("thavies"), "thavi");});
test("thaw -> thaw", function() {deepEqual( Stem("thaw"), "thaw");});
test("thawed -> thaw", function() {deepEqual( Stem("thawed"), "thaw");});
test("thawing -> thaw", function() {deepEqual( Stem("thawing"), "thaw");});
test("the -> the", function() {deepEqual( Stem("the"), "the");});
test("theatre -> theatr", function() {deepEqual( Stem("theatre"), "theatr");});
test("theatres -> theatr", function() {deepEqual( Stem("theatres"), "theatr");});
test("theatrical -> theatric", function() {deepEqual( Stem("theatrical"), "theatric");});
test("theatrically -> theatric", function() {deepEqual( Stem("theatrically"), "theatric");});
test("theatricals -> theatric", function() {deepEqual( Stem("theatricals"), "theatric");});
test("theayter -> theayter", function() {deepEqual( Stem("theayter"), "theayter");});
test("thee -> thee", function() {deepEqual( Stem("thee"), "thee");});
test("theer -> theer", function() {deepEqual( Stem("theer"), "theer");});
test("theeself -> theeself", function() {deepEqual( Stem("theeself"), "theeself");});
test("theft -> theft", function() {deepEqual( Stem("theft"), "theft");});
test("thei -> thei", function() {deepEqual( Stem("thei"), "thei");});
test("theils -> theil", function() {deepEqual( Stem("theils"), "theil");});
test("their -> their", function() {deepEqual( Stem("their"), "their");});
test("theirs -> their", function() {deepEqual( Stem("theirs"), "their");});
test("theirselves -> theirselv", function() {deepEqual( Stem("theirselves"), "theirselv");});
test("them -> them", function() {deepEqual( Stem("them"), "them");});
test("theme -> theme", function() {deepEqual( Stem("theme"), "theme");});
test("themes -> theme", function() {deepEqual( Stem("themes"), "theme");});
test("themselves -> themselv", function() {deepEqual( Stem("themselves"), "themselv");});
test("then -> then", function() {deepEqual( Stem("then"), "then");});
test("thence -> thenc", function() {deepEqual( Stem("thence"), "thenc");});
test("thenceforth -> thenceforth", function() {deepEqual( Stem("thenceforth"), "thenceforth");});
test("theodolite -> theodolit", function() {deepEqual( Stem("theodolite"), "theodolit");});
test("theodora -> theodora", function() {deepEqual( Stem("theodora"), "theodora");});
test("theodoras -> theodora", function() {deepEqual( Stem("theodoras"), "theodora");});
test("theodore -> theodor", function() {deepEqual( Stem("theodore"), "theodor");});
test("theoretical -> theoret", function() {deepEqual( Stem("theoretical"), "theoret");});
test("theoretically -> theoret", function() {deepEqual( Stem("theoretically"), "theoret");});
test("theorie -> theori", function() {deepEqual( Stem("theorie"), "theori");});
test("theories -> theori", function() {deepEqual( Stem("theories"), "theori");});
test("theorize -> theoriz", function() {deepEqual( Stem("theorize"), "theoriz");});
test("theory -> theori", function() {deepEqual( Stem("theory"), "theori");});
test("ther -> ther", function() {deepEqual( Stem("ther"), "ther");});
test("there -> there", function() {deepEqual( Stem("there"), "there");});
test("thereabout -> thereabout", function() {deepEqual( Stem("thereabout"), "thereabout");});
test("thereabouts -> thereabout", function() {deepEqual( Stem("thereabouts"), "thereabout");});
test("thereafter -> thereaft", function() {deepEqual( Stem("thereafter"), "thereaft");});
test("thereby -> therebi", function() {deepEqual( Stem("thereby"), "therebi");});
test("therefore -> therefor", function() {deepEqual( Stem("therefore"), "therefor");});
test("therefrom -> therefrom", function() {deepEqual( Stem("therefrom"), "therefrom");});
test("therein -> therein", function() {deepEqual( Stem("therein"), "therein");});
test("thereof -> thereof", function() {deepEqual( Stem("thereof"), "thereof");});
test("thereon -> thereon", function() {deepEqual( Stem("thereon"), "thereon");});
test("theresa -> theresa", function() {deepEqual( Stem("theresa"), "theresa");});
test("thereto -> thereto", function() {deepEqual( Stem("thereto"), "thereto");});
test("thereunto -> thereunto", function() {deepEqual( Stem("thereunto"), "thereunto");});
test("thereupon -> thereupon", function() {deepEqual( Stem("thereupon"), "thereupon");});
test("therewith -> therewith", function() {deepEqual( Stem("therewith"), "therewith");});
test("theridion -> theridion", function() {deepEqual( Stem("theridion"), "theridion");});
test("theristicus -> theristicus", function() {deepEqual( Stem("theristicus"), "theristicus");});
test("thermometer -> thermomet", function() {deepEqual( Stem("thermometer"), "thermomet");});
test("thes -> thes", function() {deepEqual( Stem("thes"), "thes");});
test("these -> these", function() {deepEqual( Stem("these"), "these");});
test("they -> they", function() {deepEqual( Stem("they"), "they");});
test("thi -> thi", function() {deepEqual( Stem("thi"), "thi");});
test("thick -> thick", function() {deepEqual( Stem("thick"), "thick");});
test("thicken -> thicken", function() {deepEqual( Stem("thicken"), "thicken");});
test("thickened -> thicken", function() {deepEqual( Stem("thickened"), "thicken");});
test("thickening -> thicken", function() {deepEqual( Stem("thickening"), "thicken");});
test("thicker -> thicker", function() {deepEqual( Stem("thicker"), "thicker");});
test("thickest -> thickest", function() {deepEqual( Stem("thickest"), "thickest");});
test("thicket -> thicket", function() {deepEqual( Stem("thicket"), "thicket");});
test("thickets -> thicket", function() {deepEqual( Stem("thickets"), "thicket");});
test("thickly -> thick", function() {deepEqual( Stem("thickly"), "thick");});
test("thickness -> thick", function() {deepEqual( Stem("thickness"), "thick");});
test("thief -> thief", function() {deepEqual( Stem("thief"), "thief");});
test("thier -> thier", function() {deepEqual( Stem("thier"), "thier");});
test("thieved -> thiev", function() {deepEqual( Stem("thieved"), "thiev");});
test("thieves -> thiev", function() {deepEqual( Stem("thieves"), "thiev");});
test("thigh -> thigh", function() {deepEqual( Stem("thigh"), "thigh");});
test("thighs -> thigh", function() {deepEqual( Stem("thighs"), "thigh");});
test("thimble -> thimbl", function() {deepEqual( Stem("thimble"), "thimbl");});
test("thin -> thin", function() {deepEqual( Stem("thin"), "thin");});
test("thine -> thine", function() {deepEqual( Stem("thine"), "thine");});
test("thing -> thing", function() {deepEqual( Stem("thing"), "thing");});
test("things -> thing", function() {deepEqual( Stem("things"), "thing");});
test("think -> think", function() {deepEqual( Stem("think"), "think");});
test("thinkable -> thinkabl", function() {deepEqual( Stem("thinkable"), "thinkabl");});
test("thinker -> thinker", function() {deepEqual( Stem("thinker"), "thinker");});
test("thinkin -> thinkin", function() {deepEqual( Stem("thinkin"), "thinkin");});
test("thinking -> think", function() {deepEqual( Stem("thinking"), "think");});
test("thinks -> think", function() {deepEqual( Stem("thinks"), "think");});
test("thinly -> thin", function() {deepEqual( Stem("thinly"), "thin");});
test("thinned -> thin", function() {deepEqual( Stem("thinned"), "thin");});
test("thinner -> thinner", function() {deepEqual( Stem("thinner"), "thinner");});
test("thinness -> thin", function() {deepEqual( Stem("thinness"), "thin");});
test("thinning -> thin", function() {deepEqual( Stem("thinning"), "thin");});
test("thins -> thin", function() {deepEqual( Stem("thins"), "thin");});
test("third -> third", function() {deepEqual( Stem("third"), "third");});
test("thirdly -> third", function() {deepEqual( Stem("thirdly"), "third");});
test("thirds -> third", function() {deepEqual( Stem("thirds"), "third");});
test("thirst -> thirst", function() {deepEqual( Stem("thirst"), "thirst");});
test("thirstier -> thirstier", function() {deepEqual( Stem("thirstier"), "thirstier");});
test("thirsting -> thirst", function() {deepEqual( Stem("thirsting"), "thirst");});
test("thirsty -> thirsti", function() {deepEqual( Stem("thirsty"), "thirsti");});
test("thirteen -> thirteen", function() {deepEqual( Stem("thirteen"), "thirteen");});
test("thirteenth -> thirteenth", function() {deepEqual( Stem("thirteenth"), "thirteenth");});
test("thirtieth -> thirtieth", function() {deepEqual( Stem("thirtieth"), "thirtieth");});
test("thirty -> thirti", function() {deepEqual( Stem("thirty"), "thirti");});
test("this -> this", function() {deepEqual( Stem("this"), "this");});
test("thistle -> thistl", function() {deepEqual( Stem("thistle"), "thistl");});
test("thistles -> thistl", function() {deepEqual( Stem("thistles"), "thistl");});
test("thither -> thither", function() {deepEqual( Stem("thither"), "thither");});
test("tho -> tho", function() {deepEqual( Stem("tho"), "tho");});
test("thomas -> thoma", function() {deepEqual( Stem("thomas"), "thoma");});
test("thong -> thong", function() {deepEqual( Stem("thong"), "thong");});
test("thongs -> thong", function() {deepEqual( Stem("thongs"), "thong");});
test("thorax -> thorax", function() {deepEqual( Stem("thorax"), "thorax");});
test("thorn -> thorn", function() {deepEqual( Stem("thorn"), "thorn");});
test("thorns -> thorn", function() {deepEqual( Stem("thorns"), "thorn");});
test("thorny -> thorni", function() {deepEqual( Stem("thorny"), "thorni");});
test("thorough -> thorough", function() {deepEqual( Stem("thorough"), "thorough");});
test("thoroughbred -> thoroughbr", function() {deepEqual( Stem("thoroughbred"), "thoroughbr");});
test("thoroughfare -> thoroughfar", function() {deepEqual( Stem("thoroughfare"), "thoroughfar");});
test("thoroughfares -> thoroughfar", function() {deepEqual( Stem("thoroughfares"), "thoroughfar");});
test("thoroughgoing -> thoroughgo", function() {deepEqual( Stem("thoroughgoing"), "thoroughgo");});
test("thoroughly -> thorough", function() {deepEqual( Stem("thoroughly"), "thorough");});
test("those -> those", function() {deepEqual( Stem("those"), "those");});
test("thot -> thot", function() {deepEqual( Stem("thot"), "thot");});
test("thou -> thou", function() {deepEqual( Stem("thou"), "thou");});
test("though -> though", function() {deepEqual( Stem("though"), "though");});
test("thought -> thought", function() {deepEqual( Stem("thought"), "thought");});
test("thoughtful -> thought", function() {deepEqual( Stem("thoughtful"), "thought");});
test("thoughtfully -> thought", function() {deepEqual( Stem("thoughtfully"), "thought");});
test("thoughtfulness -> thought", function() {deepEqual( Stem("thoughtfulness"), "thought");});
test("thoughtless -> thoughtless", function() {deepEqual( Stem("thoughtless"), "thoughtless");});
test("thoughtlessness -> thoughtless", function() {deepEqual( Stem("thoughtlessness"), "thoughtless");});
test("thoughts -> thought", function() {deepEqual( Stem("thoughts"), "thought");});
test("thoughy -> thoughi", function() {deepEqual( Stem("thoughy"), "thoughi");});
test("thousand -> thousand", function() {deepEqual( Stem("thousand"), "thousand");});
test("thousandfold -> thousandfold", function() {deepEqual( Stem("thousandfold"), "thousandfold");});
test("thousands -> thousand", function() {deepEqual( Stem("thousands"), "thousand");});
test("thousandth -> thousandth", function() {deepEqual( Stem("thousandth"), "thousandth");});
test("thousandths -> thousandth", function() {deepEqual( Stem("thousandths"), "thousandth");});
test("thousing -> thous", function() {deepEqual( Stem("thousing"), "thous");});
test("thout -> thout", function() {deepEqual( Stem("thout"), "thout");});
test("thraldom -> thraldom", function() {deepEqual( Stem("thraldom"), "thraldom");});
test("thrash -> thrash", function() {deepEqual( Stem("thrash"), "thrash");});
test("thrashed -> thrash", function() {deepEqual( Stem("thrashed"), "thrash");});
test("thrashing -> thrash", function() {deepEqual( Stem("thrashing"), "thrash");});
test("thre -> thre", function() {deepEqual( Stem("thre"), "thre");});
test("thread -> thread", function() {deepEqual( Stem("thread"), "thread");});
test("threadbare -> threadbar", function() {deepEqual( Stem("threadbare"), "threadbar");});
test("threaded -> thread", function() {deepEqual( Stem("threaded"), "thread");});
test("threading -> thread", function() {deepEqual( Stem("threading"), "thread");});
test("threadneedle -> threadneedl", function() {deepEqual( Stem("threadneedle"), "threadneedl");});
test("threads -> thread", function() {deepEqual( Stem("threads"), "thread");});
test("threat -> threat", function() {deepEqual( Stem("threat"), "threat");});
test("threaten -> threaten", function() {deepEqual( Stem("threaten"), "threaten");});
test("threatened -> threaten", function() {deepEqual( Stem("threatened"), "threaten");});
test("threatening -> threaten", function() {deepEqual( Stem("threatening"), "threaten");});
test("threatenings -> threaten", function() {deepEqual( Stem("threatenings"), "threaten");});
test("threatens -> threaten", function() {deepEqual( Stem("threatens"), "threaten");});
test("threats -> threat", function() {deepEqual( Stem("threats"), "threat");});
test("three -> three", function() {deepEqual( Stem("three"), "three");});
test("threepence -> threepenc", function() {deepEqual( Stem("threepence"), "threepenc");});
test("threes -> three", function() {deepEqual( Stem("threes"), "three");});
test("threescore -> threescor", function() {deepEqual( Stem("threescore"), "threescor");});
test("threshed -> thresh", function() {deepEqual( Stem("threshed"), "thresh");});
test("threshold -> threshold", function() {deepEqual( Stem("threshold"), "threshold");});
test("threw -> threw", function() {deepEqual( Stem("threw"), "threw");});
test("thrice -> thrice", function() {deepEqual( Stem("thrice"), "thrice");});
test("thried -> thri", function() {deepEqual( Stem("thried"), "thri");});
test("thrift -> thrift", function() {deepEqual( Stem("thrift"), "thrift");});
test("thriftless -> thriftless", function() {deepEqual( Stem("thriftless"), "thriftless");});
test("thrill -> thrill", function() {deepEqual( Stem("thrill"), "thrill");});
test("thrilled -> thrill", function() {deepEqual( Stem("thrilled"), "thrill");});
test("thrilling -> thrill", function() {deepEqual( Stem("thrilling"), "thrill");});
test("thrills -> thrill", function() {deepEqual( Stem("thrills"), "thrill");});
test("thrive -> thrive", function() {deepEqual( Stem("thrive"), "thrive");});
test("thriven -> thriven", function() {deepEqual( Stem("thriven"), "thriven");});
test("thrives -> thrive", function() {deepEqual( Stem("thrives"), "thrive");});
test("thriving -> thrive", function() {deepEqual( Stem("thriving"), "thrive");});
test("throat -> throat", function() {deepEqual( Stem("throat"), "throat");});
test("throats -> throat", function() {deepEqual( Stem("throats"), "throat");});
test("throb -> throb", function() {deepEqual( Stem("throb"), "throb");});
test("throbbed -> throb", function() {deepEqual( Stem("throbbed"), "throb");});
test("throbbing -> throb", function() {deepEqual( Stem("throbbing"), "throb");});
test("throne -> throne", function() {deepEqual( Stem("throne"), "throne");});
test("throng -> throng", function() {deepEqual( Stem("throng"), "throng");});
test("thronged -> throng", function() {deepEqual( Stem("thronged"), "throng");});
test("thronging -> throng", function() {deepEqual( Stem("thronging"), "throng");});
test("throngs -> throng", function() {deepEqual( Stem("throngs"), "throng");});
test("throttled -> throttl", function() {deepEqual( Stem("throttled"), "throttl");});
test("throug -> throug", function() {deepEqual( Stem("throug"), "throug");});
test("through -> through", function() {deepEqual( Stem("through"), "through");});
test("throughout -> throughout", function() {deepEqual( Stem("throughout"), "throughout");});
test("throve -> throve", function() {deepEqual( Stem("throve"), "throve");});
test("throw -> throw", function() {deepEqual( Stem("throw"), "throw");});
test("throwed -> throw", function() {deepEqual( Stem("throwed"), "throw");});
test("throwing -> throw", function() {deepEqual( Stem("throwing"), "throw");});
test("thrown -> thrown", function() {deepEqual( Stem("thrown"), "thrown");});
test("throws -> throw", function() {deepEqual( Stem("throws"), "throw");});
test("thrush -> thrush", function() {deepEqual( Stem("thrush"), "thrush");});
test("thrushes -> thrush", function() {deepEqual( Stem("thrushes"), "thrush");});
test("thrust -> thrust", function() {deepEqual( Stem("thrust"), "thrust");});
test("thrusting -> thrust", function() {deepEqual( Stem("thrusting"), "thrust");});
test("thrusts -> thrust", function() {deepEqual( Stem("thrusts"), "thrust");});
test("thrveydrop -> thrveydrop", function() {deepEqual( Stem("thrveydrop"), "thrveydrop");});
test("thu -> thu", function() {deepEqual( Stem("thu"), "thu");});
test("thud -> thud", function() {deepEqual( Stem("thud"), "thud");});
test("thuds -> thud", function() {deepEqual( Stem("thuds"), "thud");});
test("thumb -> thumb", function() {deepEqual( Stem("thumb"), "thumb");});
test("thumbed -> thumb", function() {deepEqual( Stem("thumbed"), "thumb");});
test("thumbs -> thumb", function() {deepEqual( Stem("thumbs"), "thumb");});
test("thump -> thump", function() {deepEqual( Stem("thump"), "thump");});
test("thumped -> thump", function() {deepEqual( Stem("thumped"), "thump");});
test("thumping -> thump", function() {deepEqual( Stem("thumping"), "thump");});
test("thumps -> thump", function() {deepEqual( Stem("thumps"), "thump");});
test("thunder -> thunder", function() {deepEqual( Stem("thunder"), "thunder");});
test("thunderbolt -> thunderbolt", function() {deepEqual( Stem("thunderbolt"), "thunderbolt");});
test("thunderclap -> thunderclap", function() {deepEqual( Stem("thunderclap"), "thunderclap");});
test("thundered -> thunder", function() {deepEqual( Stem("thundered"), "thunder");});
test("thundering -> thunder", function() {deepEqual( Stem("thundering"), "thunder");});
test("thunderings -> thunder", function() {deepEqual( Stem("thunderings"), "thunder");});
test("thunderstorm -> thunderstorm", function() {deepEqual( Stem("thunderstorm"), "thunderstorm");});
test("thunderstorms -> thunderstorm", function() {deepEqual( Stem("thunderstorms"), "thunderstorm");});
test("thunderstruck -> thunderstruck", function() {deepEqual( Stem("thunderstruck"), "thunderstruck");});
test("thundery -> thunderi", function() {deepEqual( Stem("thundery"), "thunderi");});
test("thursday -> thursday", function() {deepEqual( Stem("thursday"), "thursday");});
test("thursdays -> thursday", function() {deepEqual( Stem("thursdays"), "thursday");});
test("thus -> thus", function() {deepEqual( Stem("thus"), "thus");});
test("thwart -> thwart", function() {deepEqual( Stem("thwart"), "thwart");});
test("thwarted -> thwart", function() {deepEqual( Stem("thwarted"), "thwart");});
test("thwarting -> thwart", function() {deepEqual( Stem("thwarting"), "thwart");});
test("thy -> thi", function() {deepEqual( Stem("thy"), "thi");});
test("thyself -> thyself", function() {deepEqual( Stem("thyself"), "thyself");});
test("ti -> ti", function() {deepEqual( Stem("ti"), "ti");});
test("tiaauru -> tiaauru", function() {deepEqual( Stem("tiaauru"), "tiaauru");});
test("tial -> tial", function() {deepEqual( Stem("tial"), "tial");});
test("tibby -> tibbi", function() {deepEqual( Stem("tibby"), "tibbi");});
test("tibiae -> tibia", function() {deepEqual( Stem("tibiae"), "tibia");});
test("tick -> tick", function() {deepEqual( Stem("tick"), "tick");});
test("ticked -> tick", function() {deepEqual( Stem("ticked"), "tick");});
test("ticket -> ticket", function() {deepEqual( Stem("ticket"), "ticket");});
test("ticketed -> ticket", function() {deepEqual( Stem("ticketed"), "ticket");});
test("tickets -> ticket", function() {deepEqual( Stem("tickets"), "ticket");});
test("ticking -> tick", function() {deepEqual( Stem("ticking"), "tick");});
test("tickings -> tick", function() {deepEqual( Stem("tickings"), "tick");});
test("tickle -> tickl", function() {deepEqual( Stem("tickle"), "tickl");});
test("tickled -> tickl", function() {deepEqual( Stem("tickled"), "tickl");});
test("tickles -> tickl", function() {deepEqual( Stem("tickles"), "tickl");});
test("tickling -> tickl", function() {deepEqual( Stem("tickling"), "tickl");});
test("ticklish -> ticklish", function() {deepEqual( Stem("ticklish"), "ticklish");});
test("ticks -> tick", function() {deepEqual( Stem("ticks"), "tick");});
test("tidal -> tidal", function() {deepEqual( Stem("tidal"), "tidal");});
test("tiddler -> tiddler", function() {deepEqual( Stem("tiddler"), "tiddler");});
test("tide -> tide", function() {deepEqual( Stem("tide"), "tide");});
test("tides -> tide", function() {deepEqual( Stem("tides"), "tide");});
test("tidied -> tidi", function() {deepEqual( Stem("tidied"), "tidi");});
test("tidily -> tidili", function() {deepEqual( Stem("tidily"), "tidili");});
test("tidings -> tide", function() {deepEqual( Stem("tidings"), "tide");});
test("tidy -> tidi", function() {deepEqual( Stem("tidy"), "tidi");});
test("tie -> tie", function() {deepEqual( Stem("tie"), "tie");});
test("tied -> tie", function() {deepEqual( Stem("tied"), "tie");});
test("tierra -> tierra", function() {deepEqual( Stem("tierra"), "tierra");});
test("tiers -> tier", function() {deepEqual( Stem("tiers"), "tier");});
test("ties -> tie", function() {deepEqual( Stem("ties"), "tie");});
test("tiff -> tiff", function() {deepEqual( Stem("tiff"), "tiff");});
test("tiger -> tiger", function() {deepEqual( Stem("tiger"), "tiger");});
test("tigerish -> tigerish", function() {deepEqual( Stem("tigerish"), "tigerish");});
test("tigers -> tiger", function() {deepEqual( Stem("tigers"), "tiger");});
test("tight -> tight", function() {deepEqual( Stem("tight"), "tight");});
test("tighten -> tighten", function() {deepEqual( Stem("tighten"), "tighten");});
test("tightened -> tighten", function() {deepEqual( Stem("tightened"), "tighten");});
test("tighter -> tighter", function() {deepEqual( Stem("tighter"), "tighter");});
test("tightly -> tight", function() {deepEqual( Stem("tightly"), "tight");});
test("tightness -> tight", function() {deepEqual( Stem("tightness"), "tight");});
test("tights -> tight", function() {deepEqual( Stem("tights"), "tight");});
test("tigre -> tigr", function() {deepEqual( Stem("tigre"), "tigr");});
test("tigress -> tigress", function() {deepEqual( Stem("tigress"), "tigress");});
test("til -> til", function() {deepEqual( Stem("til"), "til");});
test("tilda -> tilda", function() {deepEqual( Stem("tilda"), "tilda");});
test("tile -> tile", function() {deepEqual( Stem("tile"), "tile");});
test("tiles -> tile", function() {deepEqual( Stem("tiles"), "tile");});
test("tiliareus -> tiliareus", function() {deepEqual( Stem("tiliareus"), "tiliareus");});
test("till -> till", function() {deepEqual( Stem("till"), "till");});
test("tillage -> tillag", function() {deepEqual( Stem("tillage"), "tillag");});
test("tilled -> till", function() {deepEqual( Stem("tilled"), "till");});
test("tilly -> tilli", function() {deepEqual( Stem("tilly"), "tilli");});
test("tilted -> tilt", function() {deepEqual( Stem("tilted"), "tilt");});
test("tilting -> tilt", function() {deepEqual( Stem("tilting"), "tilt");});
test("tilts -> tilt", function() {deepEqual( Stem("tilts"), "tilt");});
test("tim -> tim", function() {deepEqual( Stem("tim"), "tim");});
test("timber -> timber", function() {deepEqual( Stem("timber"), "timber");});
test("timberry -> timberri", function() {deepEqual( Stem("timberry"), "timberri");});
test("timbers -> timber", function() {deepEqual( Stem("timbers"), "timber");});
test("timbrel -> timbrel", function() {deepEqual( Stem("timbrel"), "timbrel");});
test("time -> time", function() {deepEqual( Stem("time"), "time");});
test("timed -> time", function() {deepEqual( Stem("timed"), "time");});
test("timely -> time", function() {deepEqual( Stem("timely"), "time");});
test("times -> time", function() {deepEqual( Stem("times"), "time");});
test("timid -> timid", function() {deepEqual( Stem("timid"), "timid");});
test("timidity -> timid", function() {deepEqual( Stem("timidity"), "timid");});
test("timidly -> timid", function() {deepEqual( Stem("timidly"), "timid");});
test("timorous -> timor", function() {deepEqual( Stem("timorous"), "timor");});
test("timorously -> timor", function() {deepEqual( Stem("timorously"), "timor");});
test("timothy -> timothi", function() {deepEqual( Stem("timothy"), "timothi");});
test("timour -> timour", function() {deepEqual( Stem("timour"), "timour");});
test("tin -> tin", function() {deepEqual( Stem("tin"), "tin");});
test("tinae -> tina", function() {deepEqual( Stem("tinae"), "tina");});
test("tinamus -> tinamus", function() {deepEqual( Stem("tinamus"), "tinamus");});
test("tinder -> tinder", function() {deepEqual( Stem("tinder"), "tinder");});
test("tinderidica -> tinderidica", function() {deepEqual( Stem("tinderidica"), "tinderidica");});
test("tinge -> ting", function() {deepEqual( Stem("tinge"), "ting");});
test("tinged -> ting", function() {deepEqual( Stem("tinged"), "ting");});
test("tingle -> tingl", function() {deepEqual( Stem("tingle"), "tingl");});
test("tingled -> tingl", function() {deepEqual( Stem("tingled"), "tingl");});
test("tingling -> tingl", function() {deepEqual( Stem("tingling"), "tingl");});
test("tiniest -> tiniest", function() {deepEqual( Stem("tiniest"), "tiniest");});
test("tinker -> tinker", function() {deepEqual( Stem("tinker"), "tinker");});
test("tinkers -> tinker", function() {deepEqual( Stem("tinkers"), "tinker");});
test("tinkle -> tinkl", function() {deepEqual( Stem("tinkle"), "tinkl");});
test("tinkled -> tinkl", function() {deepEqual( Stem("tinkled"), "tinkl");});
test("tinkling -> tinkl", function() {deepEqual( Stem("tinkling"), "tinkl");});
test("tinochorus -> tinochorus", function() {deepEqual( Stem("tinochorus"), "tinochorus");});
test("tint -> tint", function() {deepEqual( Stem("tint"), "tint");});
test("tinted -> tint", function() {deepEqual( Stem("tinted"), "tint");});
test("tinting -> tint", function() {deepEqual( Stem("tinting"), "tint");});
test("tints -> tint", function() {deepEqual( Stem("tints"), "tint");});
test("tiny -> tini", function() {deepEqual( Stem("tiny"), "tini");});
test("tion -> tion", function() {deepEqual( Stem("tion"), "tion");});
test("tip -> tip", function() {deepEqual( Stem("tip"), "tip");});
test("tipped -> tip", function() {deepEqual( Stem("tipped"), "tip");});
test("tipperary -> tipperari", function() {deepEqual( Stem("tipperary"), "tipperari");});
test("tippets -> tippet", function() {deepEqual( Stem("tippets"), "tippet");});
test("tippy -> tippi", function() {deepEqual( Stem("tippy"), "tippi");});
test("tips -> tip", function() {deepEqual( Stem("tips"), "tip");});
test("tipsily -> tipsili", function() {deepEqual( Stem("tipsily"), "tipsili");});
test("tipslark -> tipslark", function() {deepEqual( Stem("tipslark"), "tipslark");});
test("tipsy -> tipsi", function() {deepEqual( Stem("tipsy"), "tipsi");});
test("tiptoe -> tipto", function() {deepEqual( Stem("tiptoe"), "tipto");});
test("tiptop -> tiptop", function() {deepEqual( Stem("tiptop"), "tiptop");});
test("tirade -> tirad", function() {deepEqual( Stem("tirade"), "tirad");});
test("tire -> tire", function() {deepEqual( Stem("tire"), "tire");});
test("tired -> tire", function() {deepEqual( Stem("tired"), "tire");});
test("tires -> tire", function() {deepEqual( Stem("tires"), "tire");});
test("tiresome -> tiresom", function() {deepEqual( Stem("tiresome"), "tiresom");});
test("tiring -> tire", function() {deepEqual( Stem("tiring"), "tire");});
test("tis -> tis", function() {deepEqual( Stem("tis"), "tis");});
test("tissue -> tissu", function() {deepEqual( Stem("tissue"), "tissu");});
test("tit -> tit", function() {deepEqual( Stem("tit"), "tit");});
test("tithe -> tith", function() {deepEqual( Stem("tithe"), "tith");});
test("titian -> titian", function() {deepEqual( Stem("titian"), "titian");});
test("titlark -> titlark", function() {deepEqual( Stem("titlark"), "titlark");});
test("title -> titl", function() {deepEqual( Stem("title"), "titl");});
test("titled -> titl", function() {deepEqual( Stem("titled"), "titl");});
test("titles -> titl", function() {deepEqual( Stem("titles"), "titl");});
test("titmouse -> titmous", function() {deepEqual( Stem("titmouse"), "titmous");});
test("tittered -> titter", function() {deepEqual( Stem("tittered"), "titter");});
test("tittering -> titter", function() {deepEqual( Stem("tittering"), "titter");});
test("titular -> titular", function() {deepEqual( Stem("titular"), "titular");});
test("tiv -> tiv", function() {deepEqual( Stem("tiv"), "tiv");});
test("tix -> tix", function() {deepEqual( Stem("tix"), "tix");});
test("tle -> tle", function() {deepEqual( Stem("tle"), "tle");});
test("to -> to", function() {deepEqual( Stem("to"), "to");});
test("toad -> toad", function() {deepEqual( Stem("toad"), "toad");});
test("toads -> toad", function() {deepEqual( Stem("toads"), "toad");});
test("toast -> toast", function() {deepEqual( Stem("toast"), "toast");});
test("toasted -> toast", function() {deepEqual( Stem("toasted"), "toast");});
test("toasting -> toast", function() {deepEqual( Stem("toasting"), "toast");});
test("tobacco -> tobacco", function() {deepEqual( Stem("tobacco"), "tobacco");});
test("tobacconist -> tobacconist", function() {deepEqual( Stem("tobacconist"), "tobacconist");});
test("tockahoopo -> tockahoopo", function() {deepEqual( Stem("tockahoopo"), "tockahoopo");});
test("today -> today", function() {deepEqual( Stem("today"), "today");});
test("toddy -> toddi", function() {deepEqual( Stem("toddy"), "toddi");});
test("toe -> toe", function() {deepEqual( Stem("toe"), "toe");});
test("toes -> toe", function() {deepEqual( Stem("toes"), "toe");});
test("together -> togeth", function() {deepEqual( Stem("together"), "togeth");});
test("togezzer -> togezz", function() {deepEqual( Stem("togezzer"), "togezz");});
test("toight -> toight", function() {deepEqual( Stem("toight"), "toight");});
test("toil -> toil", function() {deepEqual( Stem("toil"), "toil");});
test("toiled -> toil", function() {deepEqual( Stem("toiled"), "toil");});
test("toiler -> toiler", function() {deepEqual( Stem("toiler"), "toiler");});
test("toilet -> toilet", function() {deepEqual( Stem("toilet"), "toilet");});
test("toilette -> toilett", function() {deepEqual( Stem("toilette"), "toilett");});
test("toiling -> toil", function() {deepEqual( Stem("toiling"), "toil");});
test("toils -> toil", function() {deepEqual( Stem("toils"), "toil");});
test("toilsome -> toilsom", function() {deepEqual( Stem("toilsome"), "toilsom");});
test("toity -> toiti", function() {deepEqual( Stem("toity"), "toiti");});
test("token -> token", function() {deepEqual( Stem("token"), "token");});
test("tokens -> token", function() {deepEqual( Stem("tokens"), "token");});
test("tol -> tol", function() {deepEqual( Stem("tol"), "tol");});
test("told -> told", function() {deepEqual( Stem("told"), "told");});
test("toldos -> toldo", function() {deepEqual( Stem("toldos"), "toldo");});
test("tolerable -> toler", function() {deepEqual( Stem("tolerable"), "toler");});
test("tolerably -> toler", function() {deepEqual( Stem("tolerably"), "toler");});
test("tolerate -> toler", function() {deepEqual( Stem("tolerate"), "toler");});
test("tolerated -> toler", function() {deepEqual( Stem("tolerated"), "toler");});
test("toleration -> toler", function() {deepEqual( Stem("toleration"), "toler");});
test("toll -> toll", function() {deepEqual( Stem("toll"), "toll");});
test("tolled -> toll", function() {deepEqual( Stem("tolled"), "toll");});
test("tolling -> toll", function() {deepEqual( Stem("tolling"), "toll");});
test("tolstyakov -> tolstyakov", function() {deepEqual( Stem("tolstyakov"), "tolstyakov");});
test("tom -> tom", function() {deepEqual( Stem("tom"), "tom");});
test("tomahawk -> tomahawk", function() {deepEqual( Stem("tomahawk"), "tomahawk");});
test("tomahawked -> tomahawk", function() {deepEqual( Stem("tomahawked"), "tomahawk");});
test("tomb -> tomb", function() {deepEqual( Stem("tomb"), "tomb");});
test("tombs -> tomb", function() {deepEqual( Stem("tombs"), "tomb");});
test("tombstone -> tombston", function() {deepEqual( Stem("tombstone"), "tombston");});
test("tombstones -> tombston", function() {deepEqual( Stem("tombstones"), "tombston");});
test("tomkins -> tomkin", function() {deepEqual( Stem("tomkins"), "tomkin");});
test("tommy -> tommi", function() {deepEqual( Stem("tommy"), "tommi");});
test("tomorrow -> tomorrow", function() {deepEqual( Stem("tomorrow"), "tomorrow");});
test("ton -> ton", function() {deepEqual( Stem("ton"), "ton");});
test("tone -> tone", function() {deepEqual( Stem("tone"), "tone");});
test("toned -> tone", function() {deepEqual( Stem("toned"), "tone");});
test("tones -> tone", function() {deepEqual( Stem("tones"), "tone");});
test("tongs -> tong", function() {deepEqual( Stem("tongs"), "tong");});
test("tongue -> tongu", function() {deepEqual( Stem("tongue"), "tongu");});
test("tongued -> tongu", function() {deepEqual( Stem("tongued"), "tongu");});
test("tongues -> tongu", function() {deepEqual( Stem("tongues"), "tongu");});
test("tonight -> tonight", function() {deepEqual( Stem("tonight"), "tonight");});
test("tons -> ton", function() {deepEqual( Stem("tons"), "ton");});
test("tony -> toni", function() {deepEqual( Stem("tony"), "toni");});
test("too -> too", function() {deepEqual( Stem("too"), "too");});
test("toogather -> toogath", function() {deepEqual( Stem("toogather"), "toogath");});
test("took -> took", function() {deepEqual( Stem("took"), "took");});
test("tool -> tool", function() {deepEqual( Stem("tool"), "tool");});
test("tools -> tool", function() {deepEqual( Stem("tools"), "tool");});
test("toomultuous -> toomultu", function() {deepEqual( Stem("toomultuous"), "toomultu");});
test("toon -> toon", function() {deepEqual( Stem("toon"), "toon");});
test("tooth -> tooth", function() {deepEqual( Stem("tooth"), "tooth");});
test("toothed -> tooth", function() {deepEqual( Stem("toothed"), "tooth");});
test("toothful -> tooth", function() {deepEqual( Stem("toothful"), "tooth");});
test("toothpick -> toothpick", function() {deepEqual( Stem("toothpick"), "toothpick");});
test("toothpicks -> toothpick", function() {deepEqual( Stem("toothpicks"), "toothpick");});
test("tooting -> toot", function() {deepEqual( Stem("tooting"), "toot");});
test("top -> top", function() {deepEqual( Stem("top"), "top");});
test("topic -> topic", function() {deepEqual( Stem("topic"), "topic");});
test("topics -> topic", function() {deepEqual( Stem("topics"), "topic");});
test("topped -> top", function() {deepEqual( Stem("topped"), "top");});
test("topping -> top", function() {deepEqual( Stem("topping"), "top");});
test("toppling -> toppl", function() {deepEqual( Stem("toppling"), "toppl");});
test("tops -> top", function() {deepEqual( Stem("tops"), "top");});
test("topsail -> topsail", function() {deepEqual( Stem("topsail"), "topsail");});
test("topsel -> topsel", function() {deepEqual( Stem("topsel"), "topsel");});
test("topsy -> topsi", function() {deepEqual( Stem("topsy"), "topsi");});
test("tor -> tor", function() {deepEqual( Stem("tor"), "tor");});
test("torches -> torch", function() {deepEqual( Stem("torches"), "torch");});
test("torchlight -> torchlight", function() {deepEqual( Stem("torchlight"), "torchlight");});
test("tore -> tore", function() {deepEqual( Stem("tore"), "tore");});
test("torment -> torment", function() {deepEqual( Stem("torment"), "torment");});
test("tormented -> torment", function() {deepEqual( Stem("tormented"), "torment");});
test("tormenting -> torment", function() {deepEqual( Stem("tormenting"), "torment");});
test("tormentor -> tormentor", function() {deepEqual( Stem("tormentor"), "tormentor");});
test("tormentors -> tormentor", function() {deepEqual( Stem("tormentors"), "tormentor");});
test("torments -> torment", function() {deepEqual( Stem("torments"), "torment");});
test("torn -> torn", function() {deepEqual( Stem("torn"), "torn");});
test("torpid -> torpid", function() {deepEqual( Stem("torpid"), "torpid");});
test("torpor -> torpor", function() {deepEqual( Stem("torpor"), "torpor");});
test("torrent -> torrent", function() {deepEqual( Stem("torrent"), "torrent");});
test("torrents -> torrent", function() {deepEqual( Stem("torrents"), "torrent");});
test("torrid -> torrid", function() {deepEqual( Stem("torrid"), "torrid");});
test("tortershell -> tortershel", function() {deepEqual( Stem("tortershell"), "tortershel");});
test("tortoise -> tortois", function() {deepEqual( Stem("tortoise"), "tortois");});
test("tortoises -> tortois", function() {deepEqual( Stem("tortoises"), "tortois");});
test("tortuous -> tortuous", function() {deepEqual( Stem("tortuous"), "tortuous");});
test("torture -> tortur", function() {deepEqual( Stem("torture"), "tortur");});
test("tortured -> tortur", function() {deepEqual( Stem("tortured"), "tortur");});
test("torturer -> tortur", function() {deepEqual( Stem("torturer"), "tortur");});
test("tortures -> tortur", function() {deepEqual( Stem("tortures"), "tortur");});
test("torturing -> tortur", function() {deepEqual( Stem("torturing"), "tortur");});
test("tory -> tori", function() {deepEqual( Stem("tory"), "tori");});
test("toryism -> toryism", function() {deepEqual( Stem("toryism"), "toryism");});
test("toss -> toss", function() {deepEqual( Stem("toss"), "toss");});
test("tossed -> toss", function() {deepEqual( Stem("tossed"), "toss");});
test("tosses -> toss", function() {deepEqual( Stem("tosses"), "toss");});
test("tossing -> toss", function() {deepEqual( Stem("tossing"), "toss");});
test("tossings -> toss", function() {deepEqual( Stem("tossings"), "toss");});
test("total -> total", function() {deepEqual( Stem("total"), "total");});
test("totally -> total", function() {deepEqual( Stem("totally"), "total");});
test("totanus -> totanus", function() {deepEqual( Stem("totanus"), "totanus");});
test("tottenham -> tottenham", function() {deepEqual( Stem("tottenham"), "tottenham");});
test("tottered -> totter", function() {deepEqual( Stem("tottered"), "totter");});
test("tottering -> totter", function() {deepEqual( Stem("tottering"), "totter");});
test("totum -> totum", function() {deepEqual( Stem("totum"), "totum");});
test("toucans -> toucan", function() {deepEqual( Stem("toucans"), "toucan");});
test("touch -> touch", function() {deepEqual( Stem("touch"), "touch");});
test("touched -> touch", function() {deepEqual( Stem("touched"), "touch");});
test("toucher -> toucher", function() {deepEqual( Stem("toucher"), "toucher");});
test("touches -> touch", function() {deepEqual( Stem("touches"), "touch");});
test("touching -> touch", function() {deepEqual( Stem("touching"), "touch");});
test("touchingly -> touch", function() {deepEqual( Stem("touchingly"), "touch");});
test("touchstone -> touchston", function() {deepEqual( Stem("touchstone"), "touchston");});
test("touchwood -> touchwood", function() {deepEqual( Stem("touchwood"), "touchwood");});
test("tough -> tough", function() {deepEqual( Stem("tough"), "tough");});
test("tougher -> tougher", function() {deepEqual( Stem("tougher"), "tougher");});
test("toughey -> toughey", function() {deepEqual( Stem("toughey"), "toughey");});
test("toughness -> tough", function() {deepEqual( Stem("toughness"), "tough");});
test("toughy -> toughi", function() {deepEqual( Stem("toughy"), "toughi");});
test("toulon -> toulon", function() {deepEqual( Stem("toulon"), "toulon");});
test("tour -> tour", function() {deepEqual( Stem("tour"), "tour");});
test("tourists -> tourist", function() {deepEqual( Stem("tourists"), "tourist");});
test("tours -> tour", function() {deepEqual( Stem("tours"), "tour");});
test("tout -> tout", function() {deepEqual( Stem("tout"), "tout");});
test("toutes -> tout", function() {deepEqual( Stem("toutes"), "tout");});
test("touts -> tout", function() {deepEqual( Stem("touts"), "tout");});
test("toward -> toward", function() {deepEqual( Stem("toward"), "toward");});
test("towards -> toward", function() {deepEqual( Stem("towards"), "toward");});
test("towed -> tow", function() {deepEqual( Stem("towed"), "tow");});
test("towel -> towel", function() {deepEqual( Stem("towel"), "towel");});
test("towelling -> towel", function() {deepEqual( Stem("towelling"), "towel");});
test("towels -> towel", function() {deepEqual( Stem("towels"), "towel");});
test("tower -> tower", function() {deepEqual( Stem("tower"), "tower");});
test("towered -> tower", function() {deepEqual( Stem("towered"), "tower");});
test("towering -> tower", function() {deepEqual( Stem("towering"), "tower");});
test("towers -> tower", function() {deepEqual( Stem("towers"), "tower");});
test("town -> town", function() {deepEqual( Stem("town"), "town");});
test("towns -> town", function() {deepEqual( Stem("towns"), "town");});
test("township -> township", function() {deepEqual( Stem("township"), "township");});
test("townsman -> townsman", function() {deepEqual( Stem("townsman"), "townsman");});
test("townsmen -> townsmen", function() {deepEqual( Stem("townsmen"), "townsmen");});
test("townspeople -> townspeopl", function() {deepEqual( Stem("townspeople"), "townspeopl");});
test("toxodon -> toxodon", function() {deepEqual( Stem("toxodon"), "toxodon");});
test("toy -> toy", function() {deepEqual( Stem("toy"), "toy");});
test("toyed -> toy", function() {deepEqual( Stem("toyed"), "toy");});
test("toying -> toy", function() {deepEqual( Stem("toying"), "toy");});
test("toys -> toy", function() {deepEqual( Stem("toys"), "toy");});
test("trace -> trace", function() {deepEqual( Stem("trace"), "trace");});
test("traceable -> traceabl", function() {deepEqual( Stem("traceable"), "traceabl");});
test("traced -> trace", function() {deepEqual( Stem("traced"), "trace");});
test("tracery -> traceri", function() {deepEqual( Stem("tracery"), "traceri");});
test("traces -> trace", function() {deepEqual( Stem("traces"), "trace");});
test("tracing -> trace", function() {deepEqual( Stem("tracing"), "trace");});
test("track -> track", function() {deepEqual( Stem("track"), "track");});
test("tracked -> track", function() {deepEqual( Stem("tracked"), "track");});
test("tracking -> track", function() {deepEqual( Stem("tracking"), "track");});
test("trackless -> trackless", function() {deepEqual( Stem("trackless"), "trackless");});
test("tracks -> track", function() {deepEqual( Stem("tracks"), "track");});
test("tract -> tract", function() {deepEqual( Stem("tract"), "tract");});
test("tractable -> tractabl", function() {deepEqual( Stem("tractable"), "tractabl");});
test("tracts -> tract", function() {deepEqual( Stem("tracts"), "tract");});
test("trade -> trade", function() {deepEqual( Stem("trade"), "trade");});
test("trader -> trader", function() {deepEqual( Stem("trader"), "trader");});
test("traders -> trader", function() {deepEqual( Stem("traders"), "trader");});
test("trades -> trade", function() {deepEqual( Stem("trades"), "trade");});
test("tradesfolk -> tradesfolk", function() {deepEqual( Stem("tradesfolk"), "tradesfolk");});
test("tradesman -> tradesman", function() {deepEqual( Stem("tradesman"), "tradesman");});
test("tradesmen -> tradesmen", function() {deepEqual( Stem("tradesmen"), "tradesmen");});
test("tradespeople -> tradespeopl", function() {deepEqual( Stem("tradespeople"), "tradespeopl");});
test("trading -> trade", function() {deepEqual( Stem("trading"), "trade");});
test("tradition -> tradit", function() {deepEqual( Stem("tradition"), "tradit");});
test("traditional -> tradit", function() {deepEqual( Stem("traditional"), "tradit");});
test("traditionally -> tradit", function() {deepEqual( Stem("traditionally"), "tradit");});
test("traditions -> tradit", function() {deepEqual( Stem("traditions"), "tradit");});
test("traducer -> traduc", function() {deepEqual( Stem("traducer"), "traduc");});
test("traducers -> traduc", function() {deepEqual( Stem("traducers"), "traduc");});
test("trafalgar -> trafalgar", function() {deepEqual( Stem("trafalgar"), "trafalgar");});
test("traffic -> traffic", function() {deepEqual( Stem("traffic"), "traffic");});
test("tragedian -> tragedian", function() {deepEqual( Stem("tragedian"), "tragedian");});
test("tragedies -> tragedi", function() {deepEqual( Stem("tragedies"), "tragedi");});
test("tragedy -> tragedi", function() {deepEqual( Stem("tragedy"), "tragedi");});
test("tragic -> tragic", function() {deepEqual( Stem("tragic"), "tragic");});
test("tragical -> tragic", function() {deepEqual( Stem("tragical"), "tragic");});
test("trail -> trail", function() {deepEqual( Stem("trail"), "trail");});
test("trailed -> trail", function() {deepEqual( Stem("trailed"), "trail");});
test("trailing -> trail", function() {deepEqual( Stem("trailing"), "trail");});
test("trails -> trail", function() {deepEqual( Stem("trails"), "trail");});
test("train -> train", function() {deepEqual( Stem("train"), "train");});
test("trained -> train", function() {deepEqual( Stem("trained"), "train");});
test("trainer -> trainer", function() {deepEqual( Stem("trainer"), "trainer");});
test("training -> train", function() {deepEqual( Stem("training"), "train");});
test("trains -> train", function() {deepEqual( Stem("trains"), "train");});
test("trait -> trait", function() {deepEqual( Stem("trait"), "trait");});
test("traitent -> traitent", function() {deepEqual( Stem("traitent"), "traitent");});
test("traitor -> traitor", function() {deepEqual( Stem("traitor"), "traitor");});
test("traitorous -> traitor", function() {deepEqual( Stem("traitorous"), "traitor");});
test("traitors -> traitor", function() {deepEqual( Stem("traitors"), "traitor");});
test("traits -> trait", function() {deepEqual( Stem("traits"), "trait");});
test("trammels -> trammel", function() {deepEqual( Stem("trammels"), "trammel");});
test("tramp -> tramp", function() {deepEqual( Stem("tramp"), "tramp");});
test("tramped -> tramp", function() {deepEqual( Stem("tramped"), "tramp");});
test("tramping -> tramp", function() {deepEqual( Stem("tramping"), "tramp");});
test("trample -> trampl", function() {deepEqual( Stem("trample"), "trampl");});
test("trampled -> trampl", function() {deepEqual( Stem("trampled"), "trampl");});
test("trampling -> trampl", function() {deepEqual( Stem("trampling"), "trampl");});
test("tramps -> tramp", function() {deepEqual( Stem("tramps"), "tramp");});
test("trance -> tranc", function() {deepEqual( Stem("trance"), "tranc");});
test("tranquil -> tranquil", function() {deepEqual( Stem("tranquil"), "tranquil");});
test("tranquillity -> tranquil", function() {deepEqual( Stem("tranquillity"), "tranquil");});
test("tranquillize -> tranquil", function() {deepEqual( Stem("tranquillize"), "tranquil");});
test("tranquillized -> tranquil", function() {deepEqual( Stem("tranquillized"), "tranquil");});
test("tranquilly -> tranquilli", function() {deepEqual( Stem("tranquilly"), "tranquilli");});
test("trans -> tran", function() {deepEqual( Stem("trans"), "tran");});
test("transact -> transact", function() {deepEqual( Stem("transact"), "transact");});
test("transacted -> transact", function() {deepEqual( Stem("transacted"), "transact");});
test("transaction -> transact", function() {deepEqual( Stem("transaction"), "transact");});
test("transactions -> transact", function() {deepEqual( Stem("transactions"), "transact");});
test("transcendent -> transcend", function() {deepEqual( Stem("transcendent"), "transcend");});
test("transfer -> transfer", function() {deepEqual( Stem("transfer"), "transfer");});
test("transferred -> transfer", function() {deepEqual( Stem("transferred"), "transfer");});
test("transferring -> transfer", function() {deepEqual( Stem("transferring"), "transfer");});
test("transfers -> transfer", function() {deepEqual( Stem("transfers"), "transfer");});
test("transfigured -> transfigur", function() {deepEqual( Stem("transfigured"), "transfigur");});
test("transfixed -> transfix", function() {deepEqual( Stem("transfixed"), "transfix");});
test("transform -> transform", function() {deepEqual( Stem("transform"), "transform");});
test("transformation -> transform", function() {deepEqual( Stem("transformation"), "transform");});
test("transformed -> transform", function() {deepEqual( Stem("transformed"), "transform");});
test("transgress -> transgress", function() {deepEqual( Stem("transgress"), "transgress");});
test("transgressed -> transgress", function() {deepEqual( Stem("transgressed"), "transgress");});
test("transgressing -> transgress", function() {deepEqual( Stem("transgressing"), "transgress");});
test("transgression -> transgress", function() {deepEqual( Stem("transgression"), "transgress");});
test("transient -> transient", function() {deepEqual( Stem("transient"), "transient");});
test("transit -> transit", function() {deepEqual( Stem("transit"), "transit");});
test("transition -> transit", function() {deepEqual( Stem("transition"), "transit");});
test("transitory -> transitori", function() {deepEqual( Stem("transitory"), "transitori");});
test("translate -> translat", function() {deepEqual( Stem("translate"), "translat");});
test("translated -> translat", function() {deepEqual( Stem("translated"), "translat");});
test("translating -> translat", function() {deepEqual( Stem("translating"), "translat");});
test("translation -> translat", function() {deepEqual( Stem("translation"), "translat");});
test("translator -> translat", function() {deepEqual( Stem("translator"), "translat");});
test("translucency -> transluc", function() {deepEqual( Stem("translucency"), "transluc");});
test("transmission -> transmiss", function() {deepEqual( Stem("transmission"), "transmiss");});
test("transmits -> transmit", function() {deepEqual( Stem("transmits"), "transmit");});
test("transmitted -> transmit", function() {deepEqual( Stem("transmitted"), "transmit");});
test("transmutes -> transmut", function() {deepEqual( Stem("transmutes"), "transmut");});
test("transparency -> transpar", function() {deepEqual( Stem("transparency"), "transpar");});
test("transparenfly -> transparenfli", function() {deepEqual( Stem("transparenfly"), "transparenfli");});
test("transparent -> transpar", function() {deepEqual( Stem("transparent"), "transpar");});
test("transpire -> transpir", function() {deepEqual( Stem("transpire"), "transpir");});
test("transpired -> transpir", function() {deepEqual( Stem("transpired"), "transpir");});
test("transplant -> transplant", function() {deepEqual( Stem("transplant"), "transplant");});
test("transplanted -> transplant", function() {deepEqual( Stem("transplanted"), "transplant");});
test("transplanting -> transplant", function() {deepEqual( Stem("transplanting"), "transplant");});
test("transport -> transport", function() {deepEqual( Stem("transport"), "transport");});
test("transportable -> transport", function() {deepEqual( Stem("transportable"), "transport");});
test("transportal -> transport", function() {deepEqual( Stem("transportal"), "transport");});
test("transportation -> transport", function() {deepEqual( Stem("transportation"), "transport");});
test("transported -> transport", function() {deepEqual( Stem("transported"), "transport");});
test("transporting -> transport", function() {deepEqual( Stem("transporting"), "transport");});
test("transports -> transport", function() {deepEqual( Stem("transports"), "transport");});
test("transposing -> transpos", function() {deepEqual( Stem("transposing"), "transpos");});
test("transverse -> transvers", function() {deepEqual( Stem("transverse"), "transvers");});
test("transversely -> transvers", function() {deepEqual( Stem("transversely"), "transvers");});
test("trap -> trap", function() {deepEqual( Stem("trap"), "trap");});
test("trappe -> trapp", function() {deepEqual( Stem("trappe"), "trapp");});
test("trapped -> trap", function() {deepEqual( Stem("trapped"), "trap");});
test("trappings -> trap", function() {deepEqual( Stem("trappings"), "trap");});
test("traps -> trap", function() {deepEqual( Stem("traps"), "trap");});
test("trash -> trash", function() {deepEqual( Stem("trash"), "trash");});
test("trashy -> trashi", function() {deepEqual( Stem("trashy"), "trashi");});
test("travel -> travel", function() {deepEqual( Stem("travel"), "travel");});
test("travelers -> travel", function() {deepEqual( Stem("travelers"), "travel");});
test("travelled -> travel", function() {deepEqual( Stem("travelled"), "travel");});
test("traveller -> travel", function() {deepEqual( Stem("traveller"), "travel");});
test("travellers -> travel", function() {deepEqual( Stem("travellers"), "travel");});
test("travelling -> travel", function() {deepEqual( Stem("travelling"), "travel");});
test("travels -> travel", function() {deepEqual( Stem("travels"), "travel");});
test("traverse -> travers", function() {deepEqual( Stem("traverse"), "travers");});
test("traversed -> travers", function() {deepEqual( Stem("traversed"), "travers");});
test("traversia -> traversia", function() {deepEqual( Stem("traversia"), "traversia");});
test("traversing -> travers", function() {deepEqual( Stem("traversing"), "travers");});
test("travertin -> travertin", function() {deepEqual( Stem("travertin"), "travertin");});
test("tray -> tray", function() {deepEqual( Stem("tray"), "tray");});
test("trays -> tray", function() {deepEqual( Stem("trays"), "tray");});
test("treaces -> treac", function() {deepEqual( Stem("treaces"), "treac");});
test("treacherous -> treacher", function() {deepEqual( Stem("treacherous"), "treacher");});
test("treachery -> treacheri", function() {deepEqual( Stem("treachery"), "treacheri");});
test("treacle -> treacl", function() {deepEqual( Stem("treacle"), "treacl");});
test("treacled -> treacl", function() {deepEqual( Stem("treacled"), "treacl");});
test("tread -> tread", function() {deepEqual( Stem("tread"), "tread");});
test("treadin -> treadin", function() {deepEqual( Stem("treadin"), "treadin");});
test("treading -> tread", function() {deepEqual( Stem("treading"), "tread");});
test("treadmills -> treadmil", function() {deepEqual( Stem("treadmills"), "treadmil");});
test("treads -> tread", function() {deepEqual( Stem("treads"), "tread");});
test("treason -> treason", function() {deepEqual( Stem("treason"), "treason");});
test("treasur -> treasur", function() {deepEqual( Stem("treasur"), "treasur");});
test("treasure -> treasur", function() {deepEqual( Stem("treasure"), "treasur");});
test("treasured -> treasur", function() {deepEqual( Stem("treasured"), "treasur");});
test("treasures -> treasur", function() {deepEqual( Stem("treasures"), "treasur");});
test("treasuring -> treasur", function() {deepEqual( Stem("treasuring"), "treasur");});
test("treasury -> treasuri", function() {deepEqual( Stem("treasury"), "treasuri");});
test("treat -> treat", function() {deepEqual( Stem("treat"), "treat");});
test("treated -> treat", function() {deepEqual( Stem("treated"), "treat");});
test("treating -> treat", function() {deepEqual( Stem("treating"), "treat");});
test("treatise -> treatis", function() {deepEqual( Stem("treatise"), "treatis");});
test("treatises -> treatis", function() {deepEqual( Stem("treatises"), "treatis");});
test("treatment -> treatment", function() {deepEqual( Stem("treatment"), "treatment");});
test("treats -> treat", function() {deepEqual( Stem("treats"), "treat");});
test("treaty -> treati", function() {deepEqual( Stem("treaty"), "treati");});
test("treble -> trebl", function() {deepEqual( Stem("treble"), "trebl");});
test("trebled -> trebl", function() {deepEqual( Stem("trebled"), "trebl");});
test("tree -> tree", function() {deepEqual( Stem("tree"), "tree");});
test("trees -> tree", function() {deepEqual( Stem("trees"), "tree");});
test("trellis -> trelli", function() {deepEqual( Stem("trellis"), "trelli");});
test("trellised -> trellis", function() {deepEqual( Stem("trellised"), "trellis");});
test("tremble -> trembl", function() {deepEqual( Stem("tremble"), "trembl");});
test("trembled -> trembl", function() {deepEqual( Stem("trembled"), "trembl");});
test("trembles -> trembl", function() {deepEqual( Stem("trembles"), "trembl");});
test("trembling -> trembl", function() {deepEqual( Stem("trembling"), "trembl");});
test("tremblingly -> trembl", function() {deepEqual( Stem("tremblingly"), "trembl");});
test("tremblings -> trembl", function() {deepEqual( Stem("tremblings"), "trembl");});
test("tremendous -> tremend", function() {deepEqual( Stem("tremendous"), "tremend");});
test("tremendously -> tremend", function() {deepEqual( Stem("tremendously"), "tremend");});
test("tremenjous -> tremenj", function() {deepEqual( Stem("tremenjous"), "tremenj");});
test("tremor -> tremor", function() {deepEqual( Stem("tremor"), "tremor");});
test("tremors -> tremor", function() {deepEqual( Stem("tremors"), "tremor");});
test("tremulous -> tremul", function() {deepEqual( Stem("tremulous"), "tremul");});
test("tremulously -> tremul", function() {deepEqual( Stem("tremulously"), "tremul");});
test("trenchant -> trenchant", function() {deepEqual( Stem("trenchant"), "trenchant");});
test("trenched -> trench", function() {deepEqual( Stem("trenched"), "trench");});
test("trenches -> trench", function() {deepEqual( Stem("trenches"), "trench");});
test("trenching -> trench", function() {deepEqual( Stem("trenching"), "trench");});
test("trenham -> trenham", function() {deepEqual( Stem("trenham"), "trenham");});
test("trepanned -> trepan", function() {deepEqual( Stem("trepanned"), "trepan");});
test("trepidation -> trepid", function() {deepEqual( Stem("trepidation"), "trepid");});
test("tres -> tres", function() {deepEqual( Stem("tres"), "tres");});
test("trespass -> trespass", function() {deepEqual( Stem("trespass"), "trespass");});
test("tress -> tress", function() {deepEqual( Stem("tress"), "tress");});
test("tresses -> tress", function() {deepEqual( Stem("tresses"), "tress");});
test("trial -> trial", function() {deepEqual( Stem("trial"), "trial");});
test("trials -> trial", function() {deepEqual( Stem("trials"), "trial");});
test("triangle -> triangl", function() {deepEqual( Stem("triangle"), "triangl");});
test("triangular -> triangular", function() {deepEqual( Stem("triangular"), "triangular");});
test("triangularity -> triangular", function() {deepEqual( Stem("triangularity"), "triangular");});
test("tribe -> tribe", function() {deepEqual( Stem("tribe"), "tribe");});
test("tribes -> tribe", function() {deepEqual( Stem("tribes"), "tribe");});
test("tribulation -> tribul", function() {deepEqual( Stem("tribulation"), "tribul");});
test("tributaries -> tributari", function() {deepEqual( Stem("tributaries"), "tributari");});
test("tributary -> tributari", function() {deepEqual( Stem("tributary"), "tributari");});
test("tribute -> tribut", function() {deepEqual( Stem("tribute"), "tribut");});
test("trice -> trice", function() {deepEqual( Stem("trice"), "trice");});
test("trichodactylus -> trichodactylus", function() {deepEqual( Stem("trichodactylus"), "trichodactylus");});
test("trichodesmium -> trichodesmium", function() {deepEqual( Stem("trichodesmium"), "trichodesmium");});
test("trichomanes -> trichoman", function() {deepEqual( Stem("trichomanes"), "trichoman");});
test("trick -> trick", function() {deepEqual( Stem("trick"), "trick");});
test("tricked -> trick", function() {deepEqual( Stem("tricked"), "trick");});
test("trickery -> trickeri", function() {deepEqual( Stem("trickery"), "trickeri");});
test("trickled -> trickl", function() {deepEqual( Stem("trickled"), "trickl");});
test("trickles -> trickl", function() {deepEqual( Stem("trickles"), "trickl");});
test("trickling -> trickl", function() {deepEqual( Stem("trickling"), "trickl");});
test("tricks -> trick", function() {deepEqual( Stem("tricks"), "trick");});
test("tricksters -> trickster", function() {deepEqual( Stem("tricksters"), "trickster");});
test("tried -> tri", function() {deepEqual( Stem("tried"), "tri");});
test("triermain -> triermain", function() {deepEqual( Stem("triermain"), "triermain");});
test("tries -> tri", function() {deepEqual( Stem("tries"), "tri");});
test("trifasciatus -> trifasciatus", function() {deepEqual( Stem("trifasciatus"), "trifasciatus");});
test("trifle -> trifl", function() {deepEqual( Stem("trifle"), "trifl");});
test("trifled -> trifl", function() {deepEqual( Stem("trifled"), "trifl");});
test("trifles -> trifl", function() {deepEqual( Stem("trifles"), "trifl");});
test("trifling -> trifl", function() {deepEqual( Stem("trifling"), "trifl");});
test("trigger -> trigger", function() {deepEqual( Stem("trigger"), "trigger");});
test("trigonocephalus -> trigonocephalus", function() {deepEqual( Stem("trigonocephalus"), "trigonocephalus");});
test("trigonometry -> trigonometri", function() {deepEqual( Stem("trigonometry"), "trigonometri");});
test("trigonomical -> trigonom", function() {deepEqual( Stem("trigonomical"), "trigonom");});
test("trigonomics -> trigonom", function() {deepEqual( Stem("trigonomics"), "trigonom");});
test("trilled -> trill", function() {deepEqual( Stem("trilled"), "trill");});
test("trilling -> trill", function() {deepEqual( Stem("trilling"), "trill");});
test("trim -> trim", function() {deepEqual( Stem("trim"), "trim");});
test("trimly -> trim", function() {deepEqual( Stem("trimly"), "trim");});
test("trimmed -> trim", function() {deepEqual( Stem("trimmed"), "trim");});
test("trimmers -> trimmer", function() {deepEqual( Stem("trimmers"), "trimmer");});
test("trimming -> trim", function() {deepEqual( Stem("trimming"), "trim");});
test("trimmings -> trim", function() {deepEqual( Stem("trimmings"), "trim");});
test("trinity -> triniti", function() {deepEqual( Stem("trinity"), "triniti");});
test("trinket -> trinket", function() {deepEqual( Stem("trinket"), "trinket");});
test("trinkets -> trinket", function() {deepEqual( Stem("trinkets"), "trinket");});
test("trio -> trio", function() {deepEqual( Stem("trio"), "trio");});
test("trip -> trip", function() {deepEqual( Stem("trip"), "trip");});
test("tripod -> tripod", function() {deepEqual( Stem("tripod"), "tripod");});
test("tripods -> tripod", function() {deepEqual( Stem("tripods"), "tripod");});
test("tripped -> trip", function() {deepEqual( Stem("tripped"), "trip");});
test("tripping -> trip", function() {deepEqual( Stem("tripping"), "trip");});
test("trippingly -> trip", function() {deepEqual( Stem("trippingly"), "trip");});
test("tristan -> tristan", function() {deepEqual( Stem("tristan"), "tristan");});
test("tristram -> tristram", function() {deepEqual( Stem("tristram"), "tristram");});
test("triturated -> tritur", function() {deepEqual( Stem("triturated"), "tritur");});
test("triumph -> triumph", function() {deepEqual( Stem("triumph"), "triumph");});
test("triumphal -> triumphal", function() {deepEqual( Stem("triumphal"), "triumphal");});
test("triumphant -> triumphant", function() {deepEqual( Stem("triumphant"), "triumphant");});
test("triumphantly -> triumphant", function() {deepEqual( Stem("triumphantly"), "triumphant");});
test("triumphed -> triumph", function() {deepEqual( Stem("triumphed"), "triumph");});
test("triumphing -> triumph", function() {deepEqual( Stem("triumphing"), "triumph");});
test("triumphs -> triumph", function() {deepEqual( Stem("triumphs"), "triumph");});
test("triumvirate -> triumvir", function() {deepEqual( Stem("triumvirate"), "triumvir");});
test("trivets -> trivet", function() {deepEqual( Stem("trivets"), "trivet");});
test("trivial -> trivial", function() {deepEqual( Stem("trivial"), "trivial");});
test("trivialities -> trivial", function() {deepEqual( Stem("trivialities"), "trivial");});
test("trochi -> trochi", function() {deepEqual( Stem("trochi"), "trochi");});
test("trochilus -> trochilus", function() {deepEqual( Stem("trochilus"), "trochilus");});
test("trochus -> trochus", function() {deepEqual( Stem("trochus"), "trochus");});
test("trod -> trod", function() {deepEqual( Stem("trod"), "trod");});
test("trodden -> trodden", function() {deepEqual( Stem("trodden"), "trodden");});
test("troifling -> troifl", function() {deepEqual( Stem("troifling"), "troifl");});
test("trois -> troi", function() {deepEqual( Stem("trois"), "troi");});
test("trolling -> troll", function() {deepEqual( Stem("trolling"), "troll");});
test("trollope -> trollop", function() {deepEqual( Stem("trollope"), "trollop");});
test("troop -> troop", function() {deepEqual( Stem("troop"), "troop");});
test("trooped -> troop", function() {deepEqual( Stem("trooped"), "troop");});
test("trooper -> trooper", function() {deepEqual( Stem("trooper"), "trooper");});
test("troops -> troop", function() {deepEqual( Stem("troops"), "troop");});
test("trophies -> trophi", function() {deepEqual( Stem("trophies"), "trophi");});
test("trophy -> trophi", function() {deepEqual( Stem("trophy"), "trophi");});
test("tropic -> tropic", function() {deepEqual( Stem("tropic"), "tropic");});
test("tropical -> tropic", function() {deepEqual( Stem("tropical"), "tropic");});
test("tropics -> tropic", function() {deepEqual( Stem("tropics"), "tropic");});
test("tropillas -> tropilla", function() {deepEqual( Stem("tropillas"), "tropilla");});
test("trot -> trot", function() {deepEqual( Stem("trot"), "trot");});
test("trotted -> trot", function() {deepEqual( Stem("trotted"), "trot");});
test("trotting -> trot", function() {deepEqual( Stem("trotting"), "trot");});
test("trotty -> trotti", function() {deepEqual( Stem("trotty"), "trotti");});
test("trouble -> troubl", function() {deepEqual( Stem("trouble"), "troubl");});
test("troubled -> troubl", function() {deepEqual( Stem("troubled"), "troubl");});
test("troubles -> troubl", function() {deepEqual( Stem("troubles"), "troubl");});
test("troublesome -> troublesom", function() {deepEqual( Stem("troublesome"), "troublesom");});
test("troubling -> troubl", function() {deepEqual( Stem("troubling"), "troubl");});
test("troublous -> troublous", function() {deepEqual( Stem("troublous"), "troublous");});
test("troughs -> trough", function() {deepEqual( Stem("troughs"), "trough");});
test("trouser -> trouser", function() {deepEqual( Stem("trouser"), "trouser");});
test("trousers -> trouser", function() {deepEqual( Stem("trousers"), "trouser");});
test("trousseau -> trousseau", function() {deepEqual( Stem("trousseau"), "trousseau");});
test("trout -> trout", function() {deepEqual( Stem("trout"), "trout");});
test("trouve -> trouv", function() {deepEqual( Stem("trouve"), "trouv");});
test("trowel -> trowel", function() {deepEqual( Stem("trowel"), "trowel");});
test("trowels -> trowel", function() {deepEqual( Stem("trowels"), "trowel");});
test("truant -> truant", function() {deepEqual( Stem("truant"), "truant");});
test("trudged -> trudg", function() {deepEqual( Stem("trudged"), "trudg");});
test("trudges -> trudg", function() {deepEqual( Stem("trudges"), "trudg");});
test("trudging -> trudg", function() {deepEqual( Stem("trudging"), "trudg");});
test("true -> true", function() {deepEqual( Stem("true"), "true");});
test("truer -> truer", function() {deepEqual( Stem("truer"), "truer");});
test("truest -> truest", function() {deepEqual( Stem("truest"), "truest");});
test("truly -> truli", function() {deepEqual( Stem("truly"), "truli");});
test("trump -> trump", function() {deepEqual( Stem("trump"), "trump");});
test("trumpery -> trumperi", function() {deepEqual( Stem("trumpery"), "trumperi");});
test("trumpet -> trumpet", function() {deepEqual( Stem("trumpet"), "trumpet");});
test("trumpeters -> trumpet", function() {deepEqual( Stem("trumpeters"), "trumpet");});
test("trumpets -> trumpet", function() {deepEqual( Stem("trumpets"), "trumpet");});
test("trumps -> trump", function() {deepEqual( Stem("trumps"), "trump");});
test("truncate -> truncat", function() {deepEqual( Stem("truncate"), "truncat");});
test("truncated -> truncat", function() {deepEqual( Stem("truncated"), "truncat");});
test("truncheon -> truncheon", function() {deepEqual( Stem("truncheon"), "truncheon");});
test("truncheons -> truncheon", function() {deepEqual( Stem("truncheons"), "truncheon");});
test("trunk -> trunk", function() {deepEqual( Stem("trunk"), "trunk");});
test("trunks -> trunk", function() {deepEqual( Stem("trunks"), "trunk");});
test("trusses -> truss", function() {deepEqual( Stem("trusses"), "truss");});
test("trust -> trust", function() {deepEqual( Stem("trust"), "trust");});
test("trusted -> trust", function() {deepEqual( Stem("trusted"), "trust");});
test("trustees -> truste", function() {deepEqual( Stem("trustees"), "truste");});
test("trustful -> trust", function() {deepEqual( Stem("trustful"), "trust");});
test("trustiest -> trustiest", function() {deepEqual( Stem("trustiest"), "trustiest");});
test("trusting -> trust", function() {deepEqual( Stem("trusting"), "trust");});
test("trusts -> trust", function() {deepEqual( Stem("trusts"), "trust");});
test("trustworthy -> trustworthi", function() {deepEqual( Stem("trustworthy"), "trustworthi");});
test("trusty -> trusti", function() {deepEqual( Stem("trusty"), "trusti");});
test("truth -> truth", function() {deepEqual( Stem("truth"), "truth");});
test("truthful -> truth", function() {deepEqual( Stem("truthful"), "truth");});
test("truthlike -> truthlik", function() {deepEqual( Stem("truthlike"), "truthlik");});
test("truths -> truth", function() {deepEqual( Stem("truths"), "truth");});
test("try -> tri", function() {deepEqual( Stem("try"), "tri");});
test("trying -> tri", function() {deepEqual( Stem("trying"), "tri");});
test("tryst -> tryst", function() {deepEqual( Stem("tryst"), "tryst");});
test("tsar -> tsar", function() {deepEqual( Stem("tsar"), "tsar");});
test("tschudi -> tschudi", function() {deepEqual( Stem("tschudi"), "tschudi");});
test("tsetup -> tsetup", function() {deepEqual( Stem("tsetup"), "tsetup");});
test("tsubmit -> tsubmit", function() {deepEqual( Stem("tsubmit"), "tsubmit");});
test("tub -> tub", function() {deepEqual( Stem("tub"), "tub");});
test("tube -> tube", function() {deepEqual( Stem("tube"), "tube");});
test("tubercles -> tubercl", function() {deepEqual( Stem("tubercles"), "tubercl");});
test("tuberculata -> tuberculata", function() {deepEqual( Stem("tuberculata"), "tuberculata");});
test("tubers -> tuber", function() {deepEqual( Stem("tubers"), "tuber");});
test("tubes -> tube", function() {deepEqual( Stem("tubes"), "tube");});
test("tubs -> tub", function() {deepEqual( Stem("tubs"), "tub");});
test("tuck -> tuck", function() {deepEqual( Stem("tuck"), "tuck");});
test("tucked -> tuck", function() {deepEqual( Stem("tucked"), "tuck");});
test("tucker -> tucker", function() {deepEqual( Stem("tucker"), "tucker");});
test("tuckered -> tucker", function() {deepEqual( Stem("tuckered"), "tucker");});
test("tucking -> tuck", function() {deepEqual( Stem("tucking"), "tuck");});
test("tucks -> tuck", function() {deepEqual( Stem("tucks"), "tuck");});
test("tucuman -> tucuman", function() {deepEqual( Stem("tucuman"), "tucuman");});
test("tucutuco -> tucutuco", function() {deepEqual( Stem("tucutuco"), "tucutuco");});
test("tucutucos -> tucutuco", function() {deepEqual( Stem("tucutucos"), "tucutuco");});
test("tuesday -> tuesday", function() {deepEqual( Stem("tuesday"), "tuesday");});
test("tufaceous -> tufac", function() {deepEqual( Stem("tufaceous"), "tufac");});
test("tuff -> tuff", function() {deepEqual( Stem("tuff"), "tuff");});
test("tuft -> tuft", function() {deepEqual( Stem("tuft"), "tuft");});
test("tufted -> tuft", function() {deepEqual( Stem("tufted"), "tuft");});
test("tufts -> tuft", function() {deepEqual( Stem("tufts"), "tuft");});
test("tugged -> tug", function() {deepEqual( Stem("tugged"), "tug");});
test("tugging -> tug", function() {deepEqual( Stem("tugging"), "tug");});
test("tuition -> tuition", function() {deepEqual( Stem("tuition"), "tuition");});
test("tul -> tul", function() {deepEqual( Stem("tul"), "tul");});
test("tulip -> tulip", function() {deepEqual( Stem("tulip"), "tulip");});
test("tulkinghorn -> tulkinghorn", function() {deepEqual( Stem("tulkinghorn"), "tulkinghorn");});
test("tumble -> tumbl", function() {deepEqual( Stem("tumble"), "tumbl");});
test("tumbled -> tumbl", function() {deepEqual( Stem("tumbled"), "tumbl");});
test("tumbler -> tumbler", function() {deepEqual( Stem("tumbler"), "tumbler");});
test("tumblers -> tumbler", function() {deepEqual( Stem("tumblers"), "tumbler");});
test("tumbles -> tumbl", function() {deepEqual( Stem("tumbles"), "tumbl");});
test("tumbling -> tumbl", function() {deepEqual( Stem("tumbling"), "tumbl");});
test("tumblings -> tumbl", function() {deepEqual( Stem("tumblings"), "tumbl");});
test("tumbrils -> tumbril", function() {deepEqual( Stem("tumbrils"), "tumbril");});
test("tuming -> tume", function() {deepEqual( Stem("tuming"), "tume");});
test("tumley -> tumley", function() {deepEqual( Stem("tumley"), "tumley");});
test("tumult -> tumult", function() {deepEqual( Stem("tumult"), "tumult");});
test("tumultuous -> tumultu", function() {deepEqual( Stem("tumultuous"), "tumultu");});
test("tumultuously -> tumultu", function() {deepEqual( Stem("tumultuously"), "tumultu");});
test("tunbridge -> tunbridg", function() {deepEqual( Stem("tunbridge"), "tunbridg");});
test("tune -> tune", function() {deepEqual( Stem("tune"), "tune");});
test("tunes -> tune", function() {deepEqual( Stem("tunes"), "tune");});
test("tunic -> tunic", function() {deepEqual( Stem("tunic"), "tunic");});
test("tuning -> tune", function() {deepEqual( Stem("tuning"), "tune");});
test("tunnel -> tunnel", function() {deepEqual( Stem("tunnel"), "tunnel");});
test("tunnels -> tunnel", function() {deepEqual( Stem("tunnels"), "tunnel");});
test("tupinieri -> tupinieri", function() {deepEqual( Stem("tupinieri"), "tupinieri");});
test("tupungato -> tupungato", function() {deepEqual( Stem("tupungato"), "tupungato");});
test("turban -> turban", function() {deepEqual( Stem("turban"), "turban");});
test("turbans -> turban", function() {deepEqual( Stem("turbans"), "turban");});
test("turbid -> turbid", function() {deepEqual( Stem("turbid"), "turbid");});
test("turbo -> turbo", function() {deepEqual( Stem("turbo"), "turbo");});
test("turbulence -> turbul", function() {deepEqual( Stem("turbulence"), "turbul");});
test("turbulent -> turbul", function() {deepEqual( Stem("turbulent"), "turbul");});
test("turco -> turco", function() {deepEqual( Stem("turco"), "turco");});
test("tureen -> tureen", function() {deepEqual( Stem("tureen"), "tureen");});
test("turf -> turf", function() {deepEqual( Stem("turf"), "turf");});
test("turgenev -> turgenev", function() {deepEqual( Stem("turgenev"), "turgenev");});
test("turgid -> turgid", function() {deepEqual( Stem("turgid"), "turgid");});
test("turing -> ture", function() {deepEqual( Stem("turing"), "ture");});
test("turk -> turk", function() {deepEqual( Stem("turk"), "turk");});
test("turkey -> turkey", function() {deepEqual( Stem("turkey"), "turkey");});
test("turkish -> turkish", function() {deepEqual( Stem("turkish"), "turkish");});
test("turks -> turk", function() {deepEqual( Stem("turks"), "turk");});
test("turmoil -> turmoil", function() {deepEqual( Stem("turmoil"), "turmoil");});
test("turmoils -> turmoil", function() {deepEqual( Stem("turmoils"), "turmoil");});
test("turn -> turn", function() {deepEqual( Stem("turn"), "turn");});
test("turnbull -> turnbul", function() {deepEqual( Stem("turnbull"), "turnbul");});
test("turned -> turn", function() {deepEqual( Stem("turned"), "turn");});
test("turner -> turner", function() {deepEqual( Stem("turner"), "turner");});
test("turning -> turn", function() {deepEqual( Stem("turning"), "turn");});
test("turnings -> turn", function() {deepEqual( Stem("turnings"), "turn");});
test("turnip -> turnip", function() {deepEqual( Stem("turnip"), "turnip");});
test("turnips -> turnip", function() {deepEqual( Stem("turnips"), "turnip");});
test("turnout -> turnout", function() {deepEqual( Stem("turnout"), "turnout");});
test("turnpike -> turnpik", function() {deepEqual( Stem("turnpike"), "turnpik");});
test("turns -> turn", function() {deepEqual( Stem("turns"), "turn");});
test("turnstile -> turnstil", function() {deepEqual( Stem("turnstile"), "turnstil");});
test("turpentining -> turpentin", function() {deepEqual( Stem("turpentining"), "turpentin");});
test("turpin -> turpin", function() {deepEqual( Stem("turpin"), "turpin");});
test("turret -> turret", function() {deepEqual( Stem("turret"), "turret");});
test("turreted -> turret", function() {deepEqual( Stem("turreted"), "turret");});
test("turrets -> turret", function() {deepEqual( Stem("turrets"), "turret");});
test("turtle -> turtl", function() {deepEqual( Stem("turtle"), "turtl");});
test("turtledoves -> turtledov", function() {deepEqual( Stem("turtledoves"), "turtledov");});
test("turtles -> turtl", function() {deepEqual( Stem("turtles"), "turtl");});
test("turveydrop -> turveydrop", function() {deepEqual( Stem("turveydrop"), "turveydrop");});
test("turveydrops -> turveydrop", function() {deepEqual( Stem("turveydrops"), "turveydrop");});
test("turvy -> turvi", function() {deepEqual( Stem("turvy"), "turvi");});
test("tusks -> tusk", function() {deepEqual( Stem("tusks"), "tusk");});
test("tussocks -> tussock", function() {deepEqual( Stem("tussocks"), "tussock");});
test("tut -> tut", function() {deepEqual( Stem("tut"), "tut");});
test("tutbury -> tutburi", function() {deepEqual( Stem("tutbury"), "tutburi");});
test("tutor -> tutor", function() {deepEqual( Stem("tutor"), "tutor");});
test("tw -> tw", function() {deepEqual( Stem("tw"), "tw");});
test("twain -> twain", function() {deepEqual( Stem("twain"), "twain");});
test("twang -> twang", function() {deepEqual( Stem("twang"), "twang");});
test("twas -> twas", function() {deepEqual( Stem("twas"), "twas");});
test("tweak -> tweak", function() {deepEqual( Stem("tweak"), "tweak");});
test("tweaking -> tweak", function() {deepEqual( Stem("tweaking"), "tweak");});
test("twelfth -> twelfth", function() {deepEqual( Stem("twelfth"), "twelfth");});
test("twelve -> twelv", function() {deepEqual( Stem("twelve"), "twelv");});
test("twelvemonth -> twelvemonth", function() {deepEqual( Stem("twelvemonth"), "twelvemonth");});
test("twelvemonths -> twelvemonth", function() {deepEqual( Stem("twelvemonths"), "twelvemonth");});
test("twenties -> twenti", function() {deepEqual( Stem("twenties"), "twenti");});
test("twentieth -> twentieth", function() {deepEqual( Stem("twentieth"), "twentieth");});
test("twenty -> twenti", function() {deepEqual( Stem("twenty"), "twenti");});
test("twice -> twice", function() {deepEqual( Stem("twice"), "twice");});
test("twickenham -> twickenham", function() {deepEqual( Stem("twickenham"), "twickenham");});
test("twig -> twig", function() {deepEqual( Stem("twig"), "twig");});
test("twigs -> twig", function() {deepEqual( Stem("twigs"), "twig");});
test("twilight -> twilight", function() {deepEqual( Stem("twilight"), "twilight");});
test("twin -> twin", function() {deepEqual( Stem("twin"), "twin");});
test("twine -> twine", function() {deepEqual( Stem("twine"), "twine");});
test("twined -> twine", function() {deepEqual( Stem("twined"), "twine");});
test("twinge -> twing", function() {deepEqual( Stem("twinge"), "twing");});
test("twining -> twine", function() {deepEqual( Stem("twining"), "twine");});
test("twinkle -> twinkl", function() {deepEqual( Stem("twinkle"), "twinkl");});
test("twinkled -> twinkl", function() {deepEqual( Stem("twinkled"), "twinkl");});
test("twinkling -> twinkl", function() {deepEqual( Stem("twinkling"), "twinkl");});
test("twinklings -> twinkl", function() {deepEqual( Stem("twinklings"), "twinkl");});
test("twins -> twin", function() {deepEqual( Stem("twins"), "twin");});
test("twirl -> twirl", function() {deepEqual( Stem("twirl"), "twirl");});
test("twirled -> twirl", function() {deepEqual( Stem("twirled"), "twirl");});
test("twirling -> twirl", function() {deepEqual( Stem("twirling"), "twirl");});
test("twirls -> twirl", function() {deepEqual( Stem("twirls"), "twirl");});
test("twist -> twist", function() {deepEqual( Stem("twist"), "twist");});
test("twisted -> twist", function() {deepEqual( Stem("twisted"), "twist");});
test("twisting -> twist", function() {deepEqual( Stem("twisting"), "twist");});
test("twistings -> twist", function() {deepEqual( Stem("twistings"), "twist");});
test("twists -> twist", function() {deepEqual( Stem("twists"), "twist");});
test("twitch -> twitch", function() {deepEqual( Stem("twitch"), "twitch");});
test("twitched -> twitch", function() {deepEqual( Stem("twitched"), "twitch");});
test("twitching -> twitch", function() {deepEqual( Stem("twitching"), "twitch");});
test("twitchings -> twitch", function() {deepEqual( Stem("twitchings"), "twitch");});
test("twitted -> twit", function() {deepEqual( Stem("twitted"), "twit");});
test("twitter -> twitter", function() {deepEqual( Stem("twitter"), "twitter");});
test("twittering -> twitter", function() {deepEqual( Stem("twittering"), "twitter");});
test("twixt -> twixt", function() {deepEqual( Stem("twixt"), "twixt");});
test("two -> two", function() {deepEqual( Stem("two"), "two");});
test("twofold -> twofold", function() {deepEqual( Stem("twofold"), "twofold");});
test("twolve -> twolv", function() {deepEqual( Stem("twolve"), "twolv");});
test("twonty -> twonti", function() {deepEqual( Stem("twonty"), "twonti");});
test("twopence -> twopenc", function() {deepEqual( Stem("twopence"), "twopenc");});
test("twopenn -> twopenn", function() {deepEqual( Stem("twopenn"), "twopenn");});
test("twopenny -> twopenni", function() {deepEqual( Stem("twopenny"), "twopenni");});
test("twos -> twos", function() {deepEqual( Stem("twos"), "twos");});
test("twould -> twould", function() {deepEqual( Stem("twould"), "twould");});
test("ty -> ty", function() {deepEqual( Stem("ty"), "ty");});
test("tybalt -> tybalt", function() {deepEqual( Stem("tybalt"), "tybalt");});
test("tyerman -> tyerman", function() {deepEqual( Stem("tyerman"), "tyerman");});
test("tying -> tie", function() {deepEqual( Stem("tying"), "tie");});
test("tyler -> tyler", function() {deepEqual( Stem("tyler"), "tyler");});
test("tylerish -> tylerish", function() {deepEqual( Stem("tylerish"), "tylerish");});
test("type -> type", function() {deepEqual( Stem("type"), "type");});
test("types -> type", function() {deepEqual( Stem("types"), "type");});
test("typhus -> typhus", function() {deepEqual( Stem("typhus"), "typhus");});
test("typical -> typic", function() {deepEqual( Stem("typical"), "typic");});
test("tyrannical -> tyrann", function() {deepEqual( Stem("tyrannical"), "tyrann");});
test("tyrannized -> tyrann", function() {deepEqual( Stem("tyrannized"), "tyrann");});
test("tyrannus -> tyrannus", function() {deepEqual( Stem("tyrannus"), "tyrannus");});
test("tyranny -> tyranni", function() {deepEqual( Stem("tyranny"), "tyranni");});
test("tyrant -> tyrant", function() {deepEqual( Stem("tyrant"), "tyrant");});
test("tyrants -> tyrant", function() {deepEqual( Stem("tyrants"), "tyrant");});
test("tyrolese -> tyroles", function() {deepEqual( Stem("tyrolese"), "tyroles");});
test("tyrone -> tyron", function() {deepEqual( Stem("tyrone"), "tyron");});
test("u -> u", function() {deepEqual( Stem("u"), "u");});
test("ud -> ud", function() {deepEqual( Stem("ud"), "ud");});
test("ugh -> ugh", function() {deepEqual( Stem("ugh"), "ugh");});
test("uglier -> uglier", function() {deepEqual( Stem("uglier"), "uglier");});
test("ugliness -> ugli", function() {deepEqual( Stem("ugliness"), "ugli");});
test("ugly -> ugli", function() {deepEqual( Stem("ugly"), "ugli");});
test("uji -> uji", function() {deepEqual( Stem("uji"), "uji");});
test("ulloa -> ulloa", function() {deepEqual( Stem("ulloa"), "ulloa");});
test("ulterior -> ulterior", function() {deepEqual( Stem("ulterior"), "ulterior");});
test("ultimate -> ultim", function() {deepEqual( Stem("ultimate"), "ultim");});
test("ultimately -> ultim", function() {deepEqual( Stem("ultimately"), "ultim");});
test("ultra -> ultra", function() {deepEqual( Stem("ultra"), "ultra");});
test("ulvae -> ulva", function() {deepEqual( Stem("ulvae"), "ulva");});
test("um -> um", function() {deepEqual( Stem("um"), "um");});
test("umb -> umb", function() {deepEqual( Stem("umb"), "umb");});
test("umbilical -> umbil", function() {deepEqual( Stem("umbilical"), "umbil");});
test("umbrageous -> umbrag", function() {deepEqual( Stem("umbrageous"), "umbrag");});
test("umbrella -> umbrella", function() {deepEqual( Stem("umbrella"), "umbrella");});
test("umbrellas -> umbrella", function() {deepEqual( Stem("umbrellas"), "umbrella");});
test("umsonst -> umsonst", function() {deepEqual( Stem("umsonst"), "umsonst");});
test("un -> un", function() {deepEqual( Stem("un"), "un");});
test("unabashed -> unabash", function() {deepEqual( Stem("unabashed"), "unabash");});
test("unabated -> unab", function() {deepEqual( Stem("unabated"), "unab");});
test("unable -> unabl", function() {deepEqual( Stem("unable"), "unabl");});
test("unaccompanied -> unaccompani", function() {deepEqual( Stem("unaccompanied"), "unaccompani");});
test("unaccountable -> unaccount", function() {deepEqual( Stem("unaccountable"), "unaccount");});
test("unaccountably -> unaccount", function() {deepEqual( Stem("unaccountably"), "unaccount");});
test("unaccustomed -> unaccustom", function() {deepEqual( Stem("unaccustomed"), "unaccustom");});
test("unacknowledged -> unacknowledg", function() {deepEqual( Stem("unacknowledged"), "unacknowledg");});
test("unacquainted -> unacquaint", function() {deepEqual( Stem("unacquainted"), "unacquaint");});
test("unadorned -> unadorn", function() {deepEqual( Stem("unadorned"), "unadorn");});
test("unaffected -> unaffect", function() {deepEqual( Stem("unaffected"), "unaffect");});
test("unaffectedly -> unaffect", function() {deepEqual( Stem("unaffectedly"), "unaffect");});
test("unaided -> unaid", function() {deepEqual( Stem("unaided"), "unaid");});
test("unallowable -> unallow", function() {deepEqual( Stem("unallowable"), "unallow");});
test("unalloyed -> unalloy", function() {deepEqual( Stem("unalloyed"), "unalloy");});
test("unalluring -> unallur", function() {deepEqual( Stem("unalluring"), "unallur");});
test("unaltered -> unalt", function() {deepEqual( Stem("unaltered"), "unalt");});
test("unambitious -> unambiti", function() {deepEqual( Stem("unambitious"), "unambiti");});
test("unanimous -> unanim", function() {deepEqual( Stem("unanimous"), "unanim");});
test("unanimously -> unanim", function() {deepEqual( Stem("unanimously"), "unanim");});
test("unanswerable -> unanswer", function() {deepEqual( Stem("unanswerable"), "unanswer");});
test("unanswered -> unansw", function() {deepEqual( Stem("unanswered"), "unansw");});
test("unanue -> unanu", function() {deepEqual( Stem("unanue"), "unanu");});
test("unappeasable -> unappeas", function() {deepEqual( Stem("unappeasable"), "unappeas");});
test("unappeased -> unappeas", function() {deepEqual( Stem("unappeased"), "unappeas");});
test("unapproachable -> unapproach", function() {deepEqual( Stem("unapproachable"), "unapproach");});
test("unasked -> unask", function() {deepEqual( Stem("unasked"), "unask");});
test("unassailable -> unassail", function() {deepEqual( Stem("unassailable"), "unassail");});
test("unassisted -> unassist", function() {deepEqual( Stem("unassisted"), "unassist");});
test("unassuming -> unassum", function() {deepEqual( Stem("unassuming"), "unassum");});
test("unattached -> unattach", function() {deepEqual( Stem("unattached"), "unattach");});
test("unattainable -> unattain", function() {deepEqual( Stem("unattainable"), "unattain");});
test("unattempted -> unattempt", function() {deepEqual( Stem("unattempted"), "unattempt");});
test("unavailing -> unavail", function() {deepEqual( Stem("unavailing"), "unavail");});
test("unavailingly -> unavail", function() {deepEqual( Stem("unavailingly"), "unavail");});
test("unavoidable -> unavoid", function() {deepEqual( Stem("unavoidable"), "unavoid");});
test("unavoidably -> unavoid", function() {deepEqual( Stem("unavoidably"), "unavoid");});
test("unaware -> unawar", function() {deepEqual( Stem("unaware"), "unawar");});
test("unawares -> unawar", function() {deepEqual( Stem("unawares"), "unawar");});
test("unbear -> unbear", function() {deepEqual( Stem("unbear"), "unbear");});
test("unbearable -> unbear", function() {deepEqual( Stem("unbearable"), "unbear");});
test("unbearably -> unbear", function() {deepEqual( Stem("unbearably"), "unbear");});
test("unbecoming -> unbecom", function() {deepEqual( Stem("unbecoming"), "unbecom");});
test("unbelieving -> unbeliev", function() {deepEqual( Stem("unbelieving"), "unbeliev");});
test("unbending -> unbend", function() {deepEqual( Stem("unbending"), "unbend");});
test("unbent -> unbent", function() {deepEqual( Stem("unbent"), "unbent");});
test("unbiassed -> unbiass", function() {deepEqual( Stem("unbiassed"), "unbiass");});
test("unbidden -> unbidden", function() {deepEqual( Stem("unbidden"), "unbidden");});
test("unblemished -> unblemish", function() {deepEqual( Stem("unblemished"), "unblemish");});
test("unblotted -> unblot", function() {deepEqual( Stem("unblotted"), "unblot");});
test("unblushing -> unblush", function() {deepEqual( Stem("unblushing"), "unblush");});
test("unblushingly -> unblush", function() {deepEqual( Stem("unblushingly"), "unblush");});
test("unbolted -> unbolt", function() {deepEqual( Stem("unbolted"), "unbolt");});
test("unbonneted -> unbonnet", function() {deepEqual( Stem("unbonneted"), "unbonnet");});
test("unborn -> unborn", function() {deepEqual( Stem("unborn"), "unborn");});
test("unbound -> unbound", function() {deepEqual( Stem("unbound"), "unbound");});
test("unbounded -> unbound", function() {deepEqual( Stem("unbounded"), "unbound");});
test("unbroken -> unbroken", function() {deepEqual( Stem("unbroken"), "unbroken");});
test("unbrushed -> unbrush", function() {deepEqual( Stem("unbrushed"), "unbrush");});
test("unburdening -> unburden", function() {deepEqual( Stem("unburdening"), "unburden");});
test("unburied -> unburi", function() {deepEqual( Stem("unburied"), "unburi");});
test("unbusiness -> unbusi", function() {deepEqual( Stem("unbusiness"), "unbusi");});
test("unbuttoned -> unbutton", function() {deepEqual( Stem("unbuttoned"), "unbutton");});
test("uncalculating -> uncalcul", function() {deepEqual( Stem("uncalculating"), "uncalcul");});
test("uncalled -> uncal", function() {deepEqual( Stem("uncalled"), "uncal");});
test("uncandid -> uncandid", function() {deepEqual( Stem("uncandid"), "uncandid");});
test("uncanny -> uncanni", function() {deepEqual( Stem("uncanny"), "uncanni");});
test("uncared -> uncar", function() {deepEqual( Stem("uncared"), "uncar");});
test("uncarried -> uncarri", function() {deepEqual( Stem("uncarried"), "uncarri");});
test("unceasing -> unceas", function() {deepEqual( Stem("unceasing"), "unceas");});
test("unceasingly -> unceas", function() {deepEqual( Stem("unceasingly"), "unceas");});
test("uncensorious -> uncensori", function() {deepEqual( Stem("uncensorious"), "uncensori");});
test("unceremonious -> unceremoni", function() {deepEqual( Stem("unceremonious"), "unceremoni");});
test("unceremoniously -> unceremoni", function() {deepEqual( Stem("unceremoniously"), "unceremoni");});
test("uncertain -> uncertain", function() {deepEqual( Stem("uncertain"), "uncertain");});
test("uncertainly -> uncertain", function() {deepEqual( Stem("uncertainly"), "uncertain");});
test("uncertainties -> uncertainti", function() {deepEqual( Stem("uncertainties"), "uncertainti");});
test("uncertainty -> uncertainti", function() {deepEqual( Stem("uncertainty"), "uncertainti");});
test("unchain -> unchain", function() {deepEqual( Stem("unchain"), "unchain");});
test("unchallengeable -> unchalleng", function() {deepEqual( Stem("unchallengeable"), "unchalleng");});
test("unchangeable -> unchang", function() {deepEqual( Stem("unchangeable"), "unchang");});
test("unchangeably -> unchang", function() {deepEqual( Stem("unchangeably"), "unchang");});
test("unchanged -> unchang", function() {deepEqual( Stem("unchanged"), "unchang");});
test("unchanging -> unchang", function() {deepEqual( Stem("unchanging"), "unchang");});
test("uncharitable -> uncharit", function() {deepEqual( Stem("uncharitable"), "uncharit");});
test("unchastened -> unchasten", function() {deepEqual( Stem("unchastened"), "unchasten");});
test("unchecked -> uncheck", function() {deepEqual( Stem("unchecked"), "uncheck");});
test("uncherished -> uncherish", function() {deepEqual( Stem("uncherished"), "uncherish");});
test("unchild -> unchild", function() {deepEqual( Stem("unchild"), "unchild");});
test("unchildish -> unchildish", function() {deepEqual( Stem("unchildish"), "unchildish");});
test("unchildlike -> unchildlik", function() {deepEqual( Stem("unchildlike"), "unchildlik");});
test("uncivil -> uncivil", function() {deepEqual( Stem("uncivil"), "uncivil");});
test("uncivilized -> uncivil", function() {deepEqual( Stem("uncivilized"), "uncivil");});
test("unclaimed -> unclaim", function() {deepEqual( Stem("unclaimed"), "unclaim");});
test("unclasp -> unclasp", function() {deepEqual( Stem("unclasp"), "unclasp");});
test("unclasped -> unclasp", function() {deepEqual( Stem("unclasped"), "unclasp");});
test("unclasping -> unclasp", function() {deepEqual( Stem("unclasping"), "unclasp");});
test("unclassified -> unclassifi", function() {deepEqual( Stem("unclassified"), "unclassifi");});
test("uncle -> uncl", function() {deepEqual( Stem("uncle"), "uncl");});
test("unclean -> unclean", function() {deepEqual( Stem("unclean"), "unclean");});
test("uncleanliness -> uncleanli", function() {deepEqual( Stem("uncleanliness"), "uncleanli");});
test("uncleanness -> unclean", function() {deepEqual( Stem("uncleanness"), "unclean");});
test("uncleared -> unclear", function() {deepEqual( Stem("uncleared"), "unclear");});
test("uncles -> uncl", function() {deepEqual( Stem("uncles"), "uncl");});
test("unclose -> unclos", function() {deepEqual( Stem("unclose"), "unclos");});
test("unclouded -> uncloud", function() {deepEqual( Stem("unclouded"), "uncloud");});
test("uncoile -> uncoil", function() {deepEqual( Stem("uncoile"), "uncoil");});
test("uncoils -> uncoil", function() {deepEqual( Stem("uncoils"), "uncoil");});
test("uncomfortable -> uncomfort", function() {deepEqual( Stem("uncomfortable"), "uncomfort");});
test("uncomfortably -> uncomfort", function() {deepEqual( Stem("uncomfortably"), "uncomfort");});
test("uncommon -> uncommon", function() {deepEqual( Stem("uncommon"), "uncommon");});
test("uncommonly -> uncommon", function() {deepEqual( Stem("uncommonly"), "uncommon");});
test("uncommunicative -> uncommun", function() {deepEqual( Stem("uncommunicative"), "uncommun");});
test("uncompanionable -> uncompanion", function() {deepEqual( Stem("uncompanionable"), "uncompanion");});
test("uncomplaining -> uncomplain", function() {deepEqual( Stem("uncomplaining"), "uncomplain");});
test("uncompleted -> uncomplet", function() {deepEqual( Stem("uncompleted"), "uncomplet");});
test("uncomplimentary -> uncomplimentari", function() {deepEqual( Stem("uncomplimentary"), "uncomplimentari");});
test("uncomprehended -> uncomprehend", function() {deepEqual( Stem("uncomprehended"), "uncomprehend");});
test("uncompressed -> uncompress", function() {deepEqual( Stem("uncompressed"), "uncompress");});
test("uncompromising -> uncompromis", function() {deepEqual( Stem("uncompromising"), "uncompromis");});
test("unconcealed -> unconc", function() {deepEqual( Stem("unconcealed"), "unconc");});
test("unconcern -> unconcern", function() {deepEqual( Stem("unconcern"), "unconcern");});
test("unconcerned -> unconcern", function() {deepEqual( Stem("unconcerned"), "unconcern");});
test("unconcernedly -> unconcern", function() {deepEqual( Stem("unconcernedly"), "unconcern");});
test("unconfinable -> unconfin", function() {deepEqual( Stem("unconfinable"), "unconfin");});
test("unconfined -> unconfin", function() {deepEqual( Stem("unconfined"), "unconfin");});
test("uncongenial -> uncongeni", function() {deepEqual( Stem("uncongenial"), "uncongeni");});
test("unconnected -> unconnect", function() {deepEqual( Stem("unconnected"), "unconnect");});
test("unconquerable -> unconquer", function() {deepEqual( Stem("unconquerable"), "unconquer");});
test("unconscious -> unconsci", function() {deepEqual( Stem("unconscious"), "unconsci");});
test("unconsciously -> unconsci", function() {deepEqual( Stem("unconsciously"), "unconsci");});
test("unconsciousness -> unconsci", function() {deepEqual( Stem("unconsciousness"), "unconsci");});
test("unconsidered -> unconsid", function() {deepEqual( Stem("unconsidered"), "unconsid");});
test("unconstitutional -> unconstitut", function() {deepEqual( Stem("unconstitutional"), "unconstitut");});
test("unconstitutionally -> unconstitut", function() {deepEqual( Stem("unconstitutionally"), "unconstitut");});
test("unconstrained -> unconstrain", function() {deepEqual( Stem("unconstrained"), "unconstrain");});
test("uncontaminated -> uncontamin", function() {deepEqual( Stem("uncontaminated"), "uncontamin");});
test("uncontradicted -> uncontradict", function() {deepEqual( Stem("uncontradicted"), "uncontradict");});
test("uncontrollable -> uncontrol", function() {deepEqual( Stem("uncontrollable"), "uncontrol");});
test("uncontrollably -> uncontrol", function() {deepEqual( Stem("uncontrollably"), "uncontrol");});
test("uncontrolled -> uncontrol", function() {deepEqual( Stem("uncontrolled"), "uncontrol");});
test("unconvinced -> unconvinc", function() {deepEqual( Stem("unconvinced"), "unconvinc");});
test("uncorked -> uncork", function() {deepEqual( Stem("uncorked"), "uncork");});
test("uncourteous -> uncourt", function() {deepEqual( Stem("uncourteous"), "uncourt");});
test("uncouth -> uncouth", function() {deepEqual( Stem("uncouth"), "uncouth");});
test("uncover -> uncov", function() {deepEqual( Stem("uncover"), "uncov");});
test("uncovered -> uncov", function() {deepEqual( Stem("uncovered"), "uncov");});
test("uncritically -> uncrit", function() {deepEqual( Stem("uncritically"), "uncrit");});
test("uncrossed -> uncross", function() {deepEqual( Stem("uncrossed"), "uncross");});
test("uncrossing -> uncross", function() {deepEqual( Stem("uncrossing"), "uncross");});
test("unction -> unction", function() {deepEqual( Stem("unction"), "unction");});
test("uncultivated -> uncultiv", function() {deepEqual( Stem("uncultivated"), "uncultiv");});
test("uncut -> uncut", function() {deepEqual( Stem("uncut"), "uncut");});
test("und -> und", function() {deepEqual( Stem("und"), "und");});
test("undaunted -> undaunt", function() {deepEqual( Stem("undaunted"), "undaunt");});
test("undeceive -> undec", function() {deepEqual( Stem("undeceive"), "undec");});
test("undeceived -> undeceiv", function() {deepEqual( Stem("undeceived"), "undeceiv");});
test("undeceiving -> undeceiv", function() {deepEqual( Stem("undeceiving"), "undeceiv");});
test("undecided -> undecid", function() {deepEqual( Stem("undecided"), "undecid");});
test("undefaced -> undefac", function() {deepEqual( Stem("undefaced"), "undefac");});
test("undefinable -> undefin", function() {deepEqual( Stem("undefinable"), "undefin");});
test("undefined -> undefin", function() {deepEqual( Stem("undefined"), "undefin");});
test("undeniable -> undeni", function() {deepEqual( Stem("undeniable"), "undeni");});
test("under -> under", function() {deepEqual( Stem("under"), "under");});
test("underbred -> underbr", function() {deepEqual( Stem("underbred"), "underbr");});
test("undercliff -> undercliff", function() {deepEqual( Stem("undercliff"), "undercliff");});
test("underclothes -> undercloth", function() {deepEqual( Stem("underclothes"), "undercloth");});
test("underdone -> underdon", function() {deepEqual( Stem("underdone"), "underdon");});
test("underfoot -> underfoot", function() {deepEqual( Stem("underfoot"), "underfoot");});
test("undergo -> undergo", function() {deepEqual( Stem("undergo"), "undergo");});
test("undergoes -> undergo", function() {deepEqual( Stem("undergoes"), "undergo");});
test("undergoing -> undergo", function() {deepEqual( Stem("undergoing"), "undergo");});
test("undergone -> undergon", function() {deepEqual( Stem("undergone"), "undergon");});
test("undergraduate -> undergradu", function() {deepEqual( Stem("undergraduate"), "undergradu");});
test("underground -> underground", function() {deepEqual( Stem("underground"), "underground");});
test("underhand -> underhand", function() {deepEqual( Stem("underhand"), "underhand");});
test("underhanded -> underhand", function() {deepEqual( Stem("underhanded"), "underhand");});
test("underling -> underl", function() {deepEqual( Stem("underling"), "underl");});
test("underlip -> underlip", function() {deepEqual( Stem("underlip"), "underlip");});
test("underlying -> under", function() {deepEqual( Stem("underlying"), "under");});
test("undermine -> undermin", function() {deepEqual( Stem("undermine"), "undermin");});
test("undermined -> undermin", function() {deepEqual( Stem("undermined"), "undermin");});
test("undermining -> undermin", function() {deepEqual( Stem("undermining"), "undermin");});
test("underneath -> underneath", function() {deepEqual( Stem("underneath"), "underneath");});
test("underrated -> underr", function() {deepEqual( Stem("underrated"), "underr");});
test("underscored -> underscor", function() {deepEqual( Stem("underscored"), "underscor");});
test("undersecretary -> undersecretari", function() {deepEqual( Stem("undersecretary"), "undersecretari");});
test("underserving -> underserv", function() {deepEqual( Stem("underserving"), "underserv");});
test("undersoil -> undersoil", function() {deepEqual( Stem("undersoil"), "undersoil");});
test("understand -> understand", function() {deepEqual( Stem("understand"), "understand");});
test("understanding -> understand", function() {deepEqual( Stem("understanding"), "understand");});
test("understands -> understand", function() {deepEqual( Stem("understands"), "understand");});
test("understood -> understood", function() {deepEqual( Stem("understood"), "understood");});
test("understrapper -> understrapp", function() {deepEqual( Stem("understrapper"), "understrapp");});
test("understrappers -> understrapp", function() {deepEqual( Stem("understrappers"), "understrapp");});
test("undertake -> undertak", function() {deepEqual( Stem("undertake"), "undertak");});
test("undertaken -> undertaken", function() {deepEqual( Stem("undertaken"), "undertaken");});
test("undertaker -> undertak", function() {deepEqual( Stem("undertaker"), "undertak");});
test("undertakers -> undertak", function() {deepEqual( Stem("undertakers"), "undertak");});
test("undertakes -> undertak", function() {deepEqual( Stem("undertakes"), "undertak");});
test("undertaking -> undertak", function() {deepEqual( Stem("undertaking"), "undertak");});
test("undertakings -> undertak", function() {deepEqual( Stem("undertakings"), "undertak");});
test("undertone -> underton", function() {deepEqual( Stem("undertone"), "underton");});
test("undertook -> undertook", function() {deepEqual( Stem("undertook"), "undertook");});
test("undervalue -> undervalu", function() {deepEqual( Stem("undervalue"), "undervalu");});
test("underwent -> underw", function() {deepEqual( Stem("underwent"), "underw");});
test("underwood -> underwood", function() {deepEqual( Stem("underwood"), "underwood");});
test("undescribed -> undescrib", function() {deepEqual( Stem("undescribed"), "undescrib");});
test("undeserved -> undeserv", function() {deepEqual( Stem("undeserved"), "undeserv");});
test("undeservedly -> undeserv", function() {deepEqual( Stem("undeservedly"), "undeserv");});
test("undesigning -> undesign", function() {deepEqual( Stem("undesigning"), "undesign");});
test("undesirable -> undesir", function() {deepEqual( Stem("undesirable"), "undesir");});
test("undetermined -> undetermin", function() {deepEqual( Stem("undetermined"), "undetermin");});
test("undeviating -> undevi", function() {deepEqual( Stem("undeviating"), "undevi");});
test("undid -> undid", function() {deepEqual( Stem("undid"), "undid");});
test("undignified -> undignifi", function() {deepEqual( Stem("undignified"), "undignifi");});
test("undiminished -> undiminish", function() {deepEqual( Stem("undiminished"), "undiminish");});
test("undimmed -> undim", function() {deepEqual( Stem("undimmed"), "undim");});
test("undisfigured -> undisfigur", function() {deepEqual( Stem("undisfigured"), "undisfigur");});
test("undisguisable -> undisguis", function() {deepEqual( Stem("undisguisable"), "undisguis");});
test("undisguised -> undisguis", function() {deepEqual( Stem("undisguised"), "undisguis");});
test("undisguisedly -> undisguis", function() {deepEqual( Stem("undisguisedly"), "undisguis");});
test("undismayed -> undismay", function() {deepEqual( Stem("undismayed"), "undismay");});
test("undisposed -> undispos", function() {deepEqual( Stem("undisposed"), "undispos");});
test("undistinguishable -> undistinguish", function() {deepEqual( Stem("undistinguishable"), "undistinguish");});
test("undisturbed -> undisturb", function() {deepEqual( Stem("undisturbed"), "undisturb");});
test("undivided -> undivid", function() {deepEqual( Stem("undivided"), "undivid");});
test("undivulged -> undivulg", function() {deepEqual( Stem("undivulged"), "undivulg");});
test("undo -> undo", function() {deepEqual( Stem("undo"), "undo");});
test("undoing -> undo", function() {deepEqual( Stem("undoing"), "undo");});
test("undone -> undon", function() {deepEqual( Stem("undone"), "undon");});
test("undoubted -> undoubt", function() {deepEqual( Stem("undoubted"), "undoubt");});
test("undoubtedly -> undoubt", function() {deepEqual( Stem("undoubtedly"), "undoubt");});
test("undrained -> undrain", function() {deepEqual( Stem("undrained"), "undrain");});
test("undraws -> undraw", function() {deepEqual( Stem("undraws"), "undraw");});
test("undress -> undress", function() {deepEqual( Stem("undress"), "undress");});
test("undressed -> undress", function() {deepEqual( Stem("undressed"), "undress");});
test("undressing -> undress", function() {deepEqual( Stem("undressing"), "undress");});
test("undue -> undu", function() {deepEqual( Stem("undue"), "undu");});
test("undulating -> undul", function() {deepEqual( Stem("undulating"), "undul");});
test("undulation -> undul", function() {deepEqual( Stem("undulation"), "undul");});
test("undulations -> undul", function() {deepEqual( Stem("undulations"), "undul");});
test("undulatory -> undulatori", function() {deepEqual( Stem("undulatory"), "undulatori");});
test("undutiful -> unduti", function() {deepEqual( Stem("undutiful"), "unduti");});
test("undying -> undi", function() {deepEqual( Stem("undying"), "undi");});
test("une -> une", function() {deepEqual( Stem("une"), "une");});
test("unearthed -> unearth", function() {deepEqual( Stem("unearthed"), "unearth");});
test("unearthly -> unearth", function() {deepEqual( Stem("unearthly"), "unearth");});
test("uneasily -> uneasili", function() {deepEqual( Stem("uneasily"), "uneasili");});
test("uneasiness -> uneasi", function() {deepEqual( Stem("uneasiness"), "uneasi");});
test("uneasy -> uneasi", function() {deepEqual( Stem("uneasy"), "uneasi");});
test("uneatable -> uneat", function() {deepEqual( Stem("uneatable"), "uneat");});
test("uneducated -> uneduc", function() {deepEqual( Stem("uneducated"), "uneduc");});
test("unembarrassed -> unembarrass", function() {deepEqual( Stem("unembarrassed"), "unembarrass");});
test("unemployed -> unemploy", function() {deepEqual( Stem("unemployed"), "unemploy");});
test("unencumbered -> unencumb", function() {deepEqual( Stem("unencumbered"), "unencumb");});
test("unendurable -> unendur", function() {deepEqual( Stem("unendurable"), "unendur");});
test("unenviable -> unenvi", function() {deepEqual( Stem("unenviable"), "unenvi");});
test("unequal -> unequ", function() {deepEqual( Stem("unequal"), "unequ");});
test("unequalled -> unequal", function() {deepEqual( Stem("unequalled"), "unequal");});
test("unequally -> unequ", function() {deepEqual( Stem("unequally"), "unequ");});
test("unequivocal -> unequivoc", function() {deepEqual( Stem("unequivocal"), "unequivoc");});
test("unequivocally -> unequivoc", function() {deepEqual( Stem("unequivocally"), "unequivoc");});
test("unerring -> uner", function() {deepEqual( Stem("unerring"), "uner");});
test("unes -> une", function() {deepEqual( Stem("unes"), "une");});
test("uneven -> uneven", function() {deepEqual( Stem("uneven"), "uneven");});
test("uneventful -> unev", function() {deepEqual( Stem("uneventful"), "unev");});
test("unexamined -> unexamin", function() {deepEqual( Stem("unexamined"), "unexamin");});
test("unexampled -> unexampl", function() {deepEqual( Stem("unexampled"), "unexampl");});
test("unexceptionable -> unexception", function() {deepEqual( Stem("unexceptionable"), "unexception");});
test("unexciting -> unexcit", function() {deepEqual( Stem("unexciting"), "unexcit");});
test("unexpected -> unexpect", function() {deepEqual( Stem("unexpected"), "unexpect");});
test("unexpectedly -> unexpect", function() {deepEqual( Stem("unexpectedly"), "unexpect");});
test("unexplained -> unexplain", function() {deepEqual( Stem("unexplained"), "unexplain");});
test("unexplored -> unexplor", function() {deepEqual( Stem("unexplored"), "unexplor");});
test("unexpressed -> unexpress", function() {deepEqual( Stem("unexpressed"), "unexpress");});
test("unfailing -> unfail", function() {deepEqual( Stem("unfailing"), "unfail");});
test("unfair -> unfair", function() {deepEqual( Stem("unfair"), "unfair");});
test("unfairly -> unfair", function() {deepEqual( Stem("unfairly"), "unfair");});
test("unfaithfulness -> unfaith", function() {deepEqual( Stem("unfaithfulness"), "unfaith");});
test("unfamiliar -> unfamiliar", function() {deepEqual( Stem("unfamiliar"), "unfamiliar");});
test("unfamiliarity -> unfamiliar", function() {deepEqual( Stem("unfamiliarity"), "unfamiliar");});
test("unfashionable -> unfashion", function() {deepEqual( Stem("unfashionable"), "unfashion");});
test("unfastened -> unfasten", function() {deepEqual( Stem("unfastened"), "unfasten");});
test("unfathomable -> unfathom", function() {deepEqual( Stem("unfathomable"), "unfathom");});
test("unfavourable -> unfavour", function() {deepEqual( Stem("unfavourable"), "unfavour");});
test("unfeeling -> unfeel", function() {deepEqual( Stem("unfeeling"), "unfeel");});
test("unfeelingly -> unfeel", function() {deepEqual( Stem("unfeelingly"), "unfeel");});
test("unfeigned -> unfeign", function() {deepEqual( Stem("unfeigned"), "unfeign");});
test("unfeignedly -> unfeign", function() {deepEqual( Stem("unfeignedly"), "unfeign");});
test("unfeminine -> unfeminin", function() {deepEqual( Stem("unfeminine"), "unfeminin");});
test("unfilled -> unfil", function() {deepEqual( Stem("unfilled"), "unfil");});
test("unfinished -> unfinish", function() {deepEqual( Stem("unfinished"), "unfinish");});
test("unfit -> unfit", function() {deepEqual( Stem("unfit"), "unfit");});
test("unfitness -> unfit", function() {deepEqual( Stem("unfitness"), "unfit");});
test("unfitted -> unfit", function() {deepEqual( Stem("unfitted"), "unfit");});
test("unfitting -> unfit", function() {deepEqual( Stem("unfitting"), "unfit");});
test("unflinching -> unflinch", function() {deepEqual( Stem("unflinching"), "unflinch");});
test("unflinchingly -> unflinch", function() {deepEqual( Stem("unflinchingly"), "unflinch");});
test("unfold -> unfold", function() {deepEqual( Stem("unfold"), "unfold");});
test("unfolded -> unfold", function() {deepEqual( Stem("unfolded"), "unfold");});
test("unfolding -> unfold", function() {deepEqual( Stem("unfolding"), "unfold");});
test("unfolds -> unfold", function() {deepEqual( Stem("unfolds"), "unfold");});
test("unforeseen -> unforeseen", function() {deepEqual( Stem("unforeseen"), "unforeseen");});
test("unforgiving -> unforgiv", function() {deepEqual( Stem("unforgiving"), "unforgiv");});
test("unformed -> unform", function() {deepEqual( Stem("unformed"), "unform");});
test("unfort -> unfort", function() {deepEqual( Stem("unfort"), "unfort");});
test("unfortnet -> unfortnet", function() {deepEqual( Stem("unfortnet"), "unfortnet");});
test("unfortunate -> unfortun", function() {deepEqual( Stem("unfortunate"), "unfortun");});
test("unfortunately -> unfortun", function() {deepEqual( Stem("unfortunately"), "unfortun");});
test("unfortunates -> unfortun", function() {deepEqual( Stem("unfortunates"), "unfortun");});
test("unfounded -> unfound", function() {deepEqual( Stem("unfounded"), "unfound");});
test("unfrequent -> unfrequ", function() {deepEqual( Stem("unfrequent"), "unfrequ");});
test("unfrequented -> unfrequ", function() {deepEqual( Stem("unfrequented"), "unfrequ");});
test("unfrequently -> unfrequ", function() {deepEqual( Stem("unfrequently"), "unfrequ");});
test("unfresh -> unfresh", function() {deepEqual( Stem("unfresh"), "unfresh");});
test("unfriended -> unfriend", function() {deepEqual( Stem("unfriended"), "unfriend");});
test("unfriendly -> unfriend", function() {deepEqual( Stem("unfriendly"), "unfriend");});
test("unfulfilled -> unfulfil", function() {deepEqual( Stem("unfulfilled"), "unfulfil");});
test("unfurled -> unfurl", function() {deepEqual( Stem("unfurled"), "unfurl");});
test("ungainly -> ungain", function() {deepEqual( Stem("ungainly"), "ungain");});
test("ungallant -> ungal", function() {deepEqual( Stem("ungallant"), "ungal");});
test("ungenerous -> ungener", function() {deepEqual( Stem("ungenerous"), "ungener");});
test("ungenial -> ungeni", function() {deepEqual( Stem("ungenial"), "ungeni");});
test("ungenteel -> ungenteel", function() {deepEqual( Stem("ungenteel"), "ungenteel");});
test("ungentlemanly -> ungentleman", function() {deepEqual( Stem("ungentlemanly"), "ungentleman");});
test("ungirdles -> ungirdl", function() {deepEqual( Stem("ungirdles"), "ungirdl");});
test("ungovernable -> ungovern", function() {deepEqual( Stem("ungovernable"), "ungovern");});
test("ungracious -> ungraci", function() {deepEqual( Stem("ungracious"), "ungraci");});
test("ungraciously -> ungraci", function() {deepEqual( Stem("ungraciously"), "ungraci");});
test("ungraciousness -> ungraci", function() {deepEqual( Stem("ungraciousness"), "ungraci");});
test("ungrateful -> ungrat", function() {deepEqual( Stem("ungrateful"), "ungrat");});
test("ungratefully -> ungrat", function() {deepEqual( Stem("ungratefully"), "ungrat");});
test("ungratified -> ungratifi", function() {deepEqual( Stem("ungratified"), "ungratifi");});
test("ungrown -> ungrown", function() {deepEqual( Stem("ungrown"), "ungrown");});
test("unguarded -> unguard", function() {deepEqual( Stem("unguarded"), "unguard");});
test("unhand -> unhand", function() {deepEqual( Stem("unhand"), "unhand");});
test("unhandsome -> unhandsom", function() {deepEqual( Stem("unhandsome"), "unhandsom");});
test("unhappier -> unhappi", function() {deepEqual( Stem("unhappier"), "unhappi");});
test("unhappily -> unhappili", function() {deepEqual( Stem("unhappily"), "unhappili");});
test("unhappiness -> unhappi", function() {deepEqual( Stem("unhappiness"), "unhappi");});
test("unhappy -> unhappi", function() {deepEqual( Stem("unhappy"), "unhappi");});
test("unharnessing -> unhar", function() {deepEqual( Stem("unharnessing"), "unhar");});
test("unhealed -> unheal", function() {deepEqual( Stem("unhealed"), "unheal");});
test("unhealthy -> unhealthi", function() {deepEqual( Stem("unhealthy"), "unhealthi");});
test("unheard -> unheard", function() {deepEqual( Stem("unheard"), "unheard");});
test("unheeded -> unheed", function() {deepEqual( Stem("unheeded"), "unheed");});
test("unheeding -> unheed", function() {deepEqual( Stem("unheeding"), "unheed");});
test("unhesitatingly -> unhesit", function() {deepEqual( Stem("unhesitatingly"), "unhesit");});
test("unhewn -> unhewn", function() {deepEqual( Stem("unhewn"), "unhewn");});
test("unhinged -> unhing", function() {deepEqual( Stem("unhinged"), "unhing");});
test("unholy -> unholi", function() {deepEqual( Stem("unholy"), "unholi");});
test("unhonoured -> unhonour", function() {deepEqual( Stem("unhonoured"), "unhonour");});
test("unhooking -> unhook", function() {deepEqual( Stem("unhooking"), "unhook");});
test("unhorsed -> unhors", function() {deepEqual( Stem("unhorsed"), "unhors");});
test("unhurried -> unhurri", function() {deepEqual( Stem("unhurried"), "unhurri");});
test("unhurt -> unhurt", function() {deepEqual( Stem("unhurt"), "unhurt");});
test("unifor -> unifor", function() {deepEqual( Stem("unifor"), "unifor");});
test("uniform -> uniform", function() {deepEqual( Stem("uniform"), "uniform");});
test("uniformity -> uniform", function() {deepEqual( Stem("uniformity"), "uniform");});
test("uniformly -> uniform", function() {deepEqual( Stem("uniformly"), "uniform");});
test("uniforms -> uniform", function() {deepEqual( Stem("uniforms"), "uniform");});
test("unimaginable -> unimagin", function() {deepEqual( Stem("unimaginable"), "unimagin");});
test("unimagined -> unimagin", function() {deepEqual( Stem("unimagined"), "unimagin");});
test("unimpaired -> unimpair", function() {deepEqual( Stem("unimpaired"), "unimpair");});
test("unimpeachable -> unimpeach", function() {deepEqual( Stem("unimpeachable"), "unimpeach");});
test("unimpeached -> unimpeach", function() {deepEqual( Stem("unimpeached"), "unimpeach");});
test("unimportant -> unimport", function() {deepEqual( Stem("unimportant"), "unimport");});
test("unimprovable -> unimprov", function() {deepEqual( Stem("unimprovable"), "unimprov");});
test("unimproved -> unimprov", function() {deepEqual( Stem("unimproved"), "unimprov");});
test("uninfluenced -> uninfluenc", function() {deepEqual( Stem("uninfluenced"), "uninfluenc");});
test("uninhabited -> uninhabit", function() {deepEqual( Stem("uninhabited"), "uninhabit");});
test("uninitiated -> uniniti", function() {deepEqual( Stem("uninitiated"), "uniniti");});
test("uninjured -> uninjur", function() {deepEqual( Stem("uninjured"), "uninjur");});
test("unintellectual -> unintellectu", function() {deepEqual( Stem("unintellectual"), "unintellectu");});
test("unintelligible -> unintellig", function() {deepEqual( Stem("unintelligible"), "unintellig");});
test("unintentional -> unintent", function() {deepEqual( Stem("unintentional"), "unintent");});
test("unintentionally -> unintent", function() {deepEqual( Stem("unintentionally"), "unintent");});
test("uninterested -> uninterest", function() {deepEqual( Stem("uninterested"), "uninterest");});
test("uninteresting -> uninterest", function() {deepEqual( Stem("uninteresting"), "uninterest");});
test("uninterrupted -> uninterrupt", function() {deepEqual( Stem("uninterrupted"), "uninterrupt");});
test("uninterruptedly -> uninterrupt", function() {deepEqual( Stem("uninterruptedly"), "uninterrupt");});
test("uninvited -> uninvit", function() {deepEqual( Stem("uninvited"), "uninvit");});
test("uninviting -> uninvit", function() {deepEqual( Stem("uninviting"), "uninvit");});
test("union -> union", function() {deepEqual( Stem("union"), "union");});
test("unions -> union", function() {deepEqual( Stem("unions"), "union");});
test("unique -> uniqu", function() {deepEqual( Stem("unique"), "uniqu");});
test("unison -> unison", function() {deepEqual( Stem("unison"), "unison");});
test("unit -> unit", function() {deepEqual( Stem("unit"), "unit");});
test("unite -> unit", function() {deepEqual( Stem("unite"), "unit");});
test("united -> unit", function() {deepEqual( Stem("united"), "unit");});
test("unites -> unit", function() {deepEqual( Stem("unites"), "unit");});
test("unities -> uniti", function() {deepEqual( Stem("unities"), "uniti");});
test("uniting -> unit", function() {deepEqual( Stem("uniting"), "unit");});
test("units -> unit", function() {deepEqual( Stem("units"), "unit");});
test("unity -> uniti", function() {deepEqual( Stem("unity"), "uniti");});
test("universal -> univers", function() {deepEqual( Stem("universal"), "univers");});
test("universally -> univers", function() {deepEqual( Stem("universally"), "univers");});
test("universe -> univers", function() {deepEqual( Stem("universe"), "univers");});
test("university -> univers", function() {deepEqual( Stem("university"), "univers");});
test("unjoyous -> unjoy", function() {deepEqual( Stem("unjoyous"), "unjoy");});
test("unjust -> unjust", function() {deepEqual( Stem("unjust"), "unjust");});
test("unjustifiable -> unjustifi", function() {deepEqual( Stem("unjustifiable"), "unjustifi");});
test("unjustly -> unjust", function() {deepEqual( Stem("unjustly"), "unjust");});
test("unkempt -> unkempt", function() {deepEqual( Stem("unkempt"), "unkempt");});
test("unkind -> unkind", function() {deepEqual( Stem("unkind"), "unkind");});
test("unkindly -> unkind", function() {deepEqual( Stem("unkindly"), "unkind");});
test("unkindness -> unkind", function() {deepEqual( Stem("unkindness"), "unkind");});
test("unkiver -> unkiv", function() {deepEqual( Stem("unkiver"), "unkiv");});
test("unknowing -> unknow", function() {deepEqual( Stem("unknowing"), "unknow");});
test("unknowingly -> unknow", function() {deepEqual( Stem("unknowingly"), "unknow");});
test("unknown -> unknown", function() {deepEqual( Stem("unknown"), "unknown");});
test("unladylike -> unladylik", function() {deepEqual( Stem("unladylike"), "unladylik");});
test("unlatched -> unlatch", function() {deepEqual( Stem("unlatched"), "unlatch");});
test("unlawful -> unlaw", function() {deepEqual( Stem("unlawful"), "unlaw");});
test("unlawfully -> unlaw", function() {deepEqual( Stem("unlawfully"), "unlaw");});
test("unlearn -> unlearn", function() {deepEqual( Stem("unlearn"), "unlearn");});
test("unlearnt -> unlearnt", function() {deepEqual( Stem("unlearnt"), "unlearnt");});
test("unless -> unless", function() {deepEqual( Stem("unless"), "unless");});
test("unlicensed -> unlicens", function() {deepEqual( Stem("unlicensed"), "unlicens");});
test("unlike -> unlik", function() {deepEqual( Stem("unlike"), "unlik");});
test("unlikely -> unlik", function() {deepEqual( Stem("unlikely"), "unlik");});
test("unlimited -> unlimit", function() {deepEqual( Stem("unlimited"), "unlimit");});
test("unliquidated -> unliquid", function() {deepEqual( Stem("unliquidated"), "unliquid");});
test("unload -> unload", function() {deepEqual( Stem("unload"), "unload");});
test("unloaded -> unload", function() {deepEqual( Stem("unloaded"), "unload");});
test("unloading -> unload", function() {deepEqual( Stem("unloading"), "unload");});
test("unlock -> unlock", function() {deepEqual( Stem("unlock"), "unlock");});
test("unlocked -> unlock", function() {deepEqual( Stem("unlocked"), "unlock");});
test("unlocking -> unlock", function() {deepEqual( Stem("unlocking"), "unlock");});
test("unlocks -> unlock", function() {deepEqual( Stem("unlocks"), "unlock");});
test("unlooked -> unlook", function() {deepEqual( Stem("unlooked"), "unlook");});
test("unloosed -> unloos", function() {deepEqual( Stem("unloosed"), "unloos");});
test("unloosened -> unloosen", function() {deepEqual( Stem("unloosened"), "unloosen");});
test("unlovable -> unlov", function() {deepEqual( Stem("unlovable"), "unlov");});
test("unloved -> unlov", function() {deepEqual( Stem("unloved"), "unlov");});
test("unlovely -> unlov", function() {deepEqual( Stem("unlovely"), "unlov");});
test("unloving -> unlov", function() {deepEqual( Stem("unloving"), "unlov");});
test("unluckily -> unluckili", function() {deepEqual( Stem("unluckily"), "unluckili");});
test("unlucky -> unlucki", function() {deepEqual( Stem("unlucky"), "unlucki");});
test("unmade -> unmad", function() {deepEqual( Stem("unmade"), "unmad");});
test("unmake -> unmak", function() {deepEqual( Stem("unmake"), "unmak");});
test("unmanageable -> unmanag", function() {deepEqual( Stem("unmanageable"), "unmanag");});
test("unmanly -> unman", function() {deepEqual( Stem("unmanly"), "unman");});
test("unmanned -> unman", function() {deepEqual( Stem("unmanned"), "unman");});
test("unmans -> unman", function() {deepEqual( Stem("unmans"), "unman");});
test("unmarked -> unmark", function() {deepEqual( Stem("unmarked"), "unmark");});
test("unmarried -> unmarri", function() {deepEqual( Stem("unmarried"), "unmarri");});
test("unmasked -> unmask", function() {deepEqual( Stem("unmasked"), "unmask");});
test("unmatched -> unmatch", function() {deepEqual( Stem("unmatched"), "unmatch");});
test("unmeaning -> unmean", function() {deepEqual( Stem("unmeaning"), "unmean");});
test("unmentionable -> unmention", function() {deepEqual( Stem("unmentionable"), "unmention");});
test("unmerciful -> unmerci", function() {deepEqual( Stem("unmerciful"), "unmerci");});
test("unmercifully -> unmerci", function() {deepEqual( Stem("unmercifully"), "unmerci");});
test("unmerited -> unmerit", function() {deepEqual( Stem("unmerited"), "unmerit");});
test("unmindful -> unmind", function() {deepEqual( Stem("unmindful"), "unmind");});
test("unmistakable -> unmistak", function() {deepEqual( Stem("unmistakable"), "unmistak");});
test("unmistakably -> unmistak", function() {deepEqual( Stem("unmistakably"), "unmistak");});
test("unmitigated -> unmitig", function() {deepEqual( Stem("unmitigated"), "unmitig");});
test("unmixed -> unmix", function() {deepEqual( Stem("unmixed"), "unmix");});
test("unmolested -> unmolest", function() {deepEqual( Stem("unmolested"), "unmolest");});
test("unmoved -> unmov", function() {deepEqual( Stem("unmoved"), "unmov");});
test("unnamed -> unnam", function() {deepEqual( Stem("unnamed"), "unnam");});
test("unnat -> unnat", function() {deepEqual( Stem("unnat"), "unnat");});
test("unnatural -> unnatur", function() {deepEqual( Stem("unnatural"), "unnatur");});
test("unnaturally -> unnatur", function() {deepEqual( Stem("unnaturally"), "unnatur");});
test("unnecessarily -> unnecessarili", function() {deepEqual( Stem("unnecessarily"), "unnecessarili");});
test("unnecessary -> unnecessari", function() {deepEqual( Stem("unnecessary"), "unnecessari");});
test("unnerved -> unnerv", function() {deepEqual( Stem("unnerved"), "unnerv");});
test("unnoticed -> unnot", function() {deepEqual( Stem("unnoticed"), "unnot");});
test("unobjectionable -> unobjection", function() {deepEqual( Stem("unobjectionable"), "unobjection");});
test("unobservant -> unobserv", function() {deepEqual( Stem("unobservant"), "unobserv");});
test("unobserved -> unobserv", function() {deepEqual( Stem("unobserved"), "unobserv");});
test("unobtrusive -> unobtrus", function() {deepEqual( Stem("unobtrusive"), "unobtrus");});
test("unoccupied -> unoccupi", function() {deepEqual( Stem("unoccupied"), "unoccupi");});
test("unoffending -> unoffend", function() {deepEqual( Stem("unoffending"), "unoffend");});
test("unopenable -> unopen", function() {deepEqual( Stem("unopenable"), "unopen");});
test("unopened -> unopen", function() {deepEqual( Stem("unopened"), "unopen");});
test("unowned -> unown", function() {deepEqual( Stem("unowned"), "unown");});
test("unpack -> unpack", function() {deepEqual( Stem("unpack"), "unpack");});
test("unpacked -> unpack", function() {deepEqual( Stem("unpacked"), "unpack");});
test("unpacking -> unpack", function() {deepEqual( Stem("unpacking"), "unpack");});
test("unpaid -> unpaid", function() {deepEqual( Stem("unpaid"), "unpaid");});
test("unpainted -> unpaint", function() {deepEqual( Stem("unpainted"), "unpaint");});
test("unpalatable -> unpalat", function() {deepEqual( Stem("unpalatable"), "unpalat");});
test("unparalleled -> unparallel", function() {deepEqual( Stem("unparalleled"), "unparallel");});
test("unpardonable -> unpardon", function() {deepEqual( Stem("unpardonable"), "unpardon");});
test("unpardonably -> unpardon", function() {deepEqual( Stem("unpardonably"), "unpardon");});
test("unpaved -> unpav", function() {deepEqual( Stem("unpaved"), "unpav");});
test("unpensioning -> unpens", function() {deepEqual( Stem("unpensioning"), "unpens");});
test("unperformed -> unperform", function() {deepEqual( Stem("unperformed"), "unperform");});
test("unpersuadable -> unpersuad", function() {deepEqual( Stem("unpersuadable"), "unpersuad");});
test("unperturbable -> unperturb", function() {deepEqual( Stem("unperturbable"), "unperturb");});
test("unpicturesque -> unpicturesqu", function() {deepEqual( Stem("unpicturesque"), "unpicturesqu");});
test("unpitying -> unpiti", function() {deepEqual( Stem("unpitying"), "unpiti");});
test("unplaced -> unplac", function() {deepEqual( Stem("unplaced"), "unplac");});
test("unpleasant -> unpleas", function() {deepEqual( Stem("unpleasant"), "unpleas");});
test("unpleasantly -> unpleas", function() {deepEqual( Stem("unpleasantly"), "unpleas");});
test("unpleasantness -> unpleas", function() {deepEqual( Stem("unpleasantness"), "unpleas");});
test("unpleasantnesses -> unpleas", function() {deepEqual( Stem("unpleasantnesses"), "unpleas");});
test("unpleasing -> unpleas", function() {deepEqual( Stem("unpleasing"), "unpleas");});
test("unpleasingly -> unpleas", function() {deepEqual( Stem("unpleasingly"), "unpleas");});
test("unpolite -> unpolit", function() {deepEqual( Stem("unpolite"), "unpolit");});
test("unpolitely -> unpolit", function() {deepEqual( Stem("unpolitely"), "unpolit");});
test("unpoliteness -> unpolit", function() {deepEqual( Stem("unpoliteness"), "unpolit");});
test("unpopular -> unpopular", function() {deepEqual( Stem("unpopular"), "unpopular");});
test("unpractical -> unpract", function() {deepEqual( Stem("unpractical"), "unpract");});
test("unpractised -> unpractis", function() {deepEqual( Stem("unpractised"), "unpractis");});
test("unprecedented -> unpreced", function() {deepEqual( Stem("unprecedented"), "unpreced");});
test("unpremeditated -> unpremedit", function() {deepEqual( Stem("unpremeditated"), "unpremedit");});
test("unprepared -> unprepar", function() {deepEqual( Stem("unprepared"), "unprepar");});
test("unpretending -> unpretend", function() {deepEqual( Stem("unpretending"), "unpretend");});
test("unpretendingly -> unpretend", function() {deepEqual( Stem("unpretendingly"), "unpretend");});
test("unprevaricating -> unprevar", function() {deepEqual( Stem("unprevaricating"), "unprevar");});
test("unprincipled -> unprincipl", function() {deepEqual( Stem("unprincipled"), "unprincipl");});
test("unproducible -> unproduc", function() {deepEqual( Stem("unproducible"), "unproduc");});
test("unproductive -> unproduct", function() {deepEqual( Stem("unproductive"), "unproduct");});
test("unprofitable -> unprofit", function() {deepEqual( Stem("unprofitable"), "unprofit");});
test("unpromising -> unpromis", function() {deepEqual( Stem("unpromising"), "unpromis");});
test("unprosperous -> unprosper", function() {deepEqual( Stem("unprosperous"), "unprosper");});
test("unprotected -> unprotect", function() {deepEqual( Stem("unprotected"), "unprotect");});
test("unprovided -> unprovid", function() {deepEqual( Stem("unprovided"), "unprovid");});
test("unpublished -> unpublish", function() {deepEqual( Stem("unpublished"), "unpublish");});
test("unpunctual -> unpunctu", function() {deepEqual( Stem("unpunctual"), "unpunctu");});
test("unpunished -> unpunish", function() {deepEqual( Stem("unpunished"), "unpunish");});
test("unqualified -> unqualifi", function() {deepEqual( Stem("unqualified"), "unqualifi");});
test("unquestionable -> unquestion", function() {deepEqual( Stem("unquestionable"), "unquestion");});
test("unquestionably -> unquestion", function() {deepEqual( Stem("unquestionably"), "unquestion");});
test("unquiet -> unquiet", function() {deepEqual( Stem("unquiet"), "unquiet");});
test("unravel -> unravel", function() {deepEqual( Stem("unravel"), "unravel");});
test("unravelling -> unravel", function() {deepEqual( Stem("unravelling"), "unravel");});
test("unravelment -> unravel", function() {deepEqual( Stem("unravelment"), "unravel");});
test("unread -> unread", function() {deepEqual( Stem("unread"), "unread");});
test("unreal -> unreal", function() {deepEqual( Stem("unreal"), "unreal");});
test("unreason -> unreason", function() {deepEqual( Stem("unreason"), "unreason");});
test("unreasonable -> unreason", function() {deepEqual( Stem("unreasonable"), "unreason");});
test("unreasonableness -> unreason", function() {deepEqual( Stem("unreasonableness"), "unreason");});
test("unreasonably -> unreason", function() {deepEqual( Stem("unreasonably"), "unreason");});
test("unreasoning -> unreason", function() {deepEqual( Stem("unreasoning"), "unreason");});
test("unreclaimed -> unreclaim", function() {deepEqual( Stem("unreclaimed"), "unreclaim");});
test("unrecognised -> unrecognis", function() {deepEqual( Stem("unrecognised"), "unrecognis");});
test("unredeemed -> unredeem", function() {deepEqual( Stem("unredeemed"), "unredeem");});
test("unrelenting -> unrel", function() {deepEqual( Stem("unrelenting"), "unrel");});
test("unrelieved -> unreliev", function() {deepEqual( Stem("unrelieved"), "unreliev");});
test("unremitting -> unremit", function() {deepEqual( Stem("unremitting"), "unremit");});
test("unrepining -> unrepin", function() {deepEqual( Stem("unrepining"), "unrepin");});
test("unrequited -> unrequit", function() {deepEqual( Stem("unrequited"), "unrequit");});
test("unreserved -> unreserv", function() {deepEqual( Stem("unreserved"), "unreserv");});
test("unresisting -> unresist", function() {deepEqual( Stem("unresisting"), "unresist");});
test("unrest -> unrest", function() {deepEqual( Stem("unrest"), "unrest");});
test("unrestrained -> unrestrain", function() {deepEqual( Stem("unrestrained"), "unrestrain");});
test("unrestrainedly -> unrestrain", function() {deepEqual( Stem("unrestrainedly"), "unrestrain");});
test("unriddling -> unriddl", function() {deepEqual( Stem("unriddling"), "unriddl");});
test("unripe -> unrip", function() {deepEqual( Stem("unripe"), "unrip");});
test("unrivalled -> unrival", function() {deepEqual( Stem("unrivalled"), "unrival");});
test("unroofed -> unroof", function() {deepEqual( Stem("unroofed"), "unroof");});
test("unruly -> unruli", function() {deepEqual( Stem("unruly"), "unruli");});
test("unsaddle -> unsaddl", function() {deepEqual( Stem("unsaddle"), "unsaddl");});
test("unsaddled -> unsaddl", function() {deepEqual( Stem("unsaddled"), "unsaddl");});
test("unsafe -> unsaf", function() {deepEqual( Stem("unsafe"), "unsaf");});
test("unsatisfactory -> unsatisfactori", function() {deepEqual( Stem("unsatisfactory"), "unsatisfactori");});
test("unsatisfied -> unsatisfi", function() {deepEqual( Stem("unsatisfied"), "unsatisfi");});
test("unsavoury -> unsavouri", function() {deepEqual( Stem("unsavoury"), "unsavouri");});
test("unsay -> unsay", function() {deepEqual( Stem("unsay"), "unsay");});
test("unschooled -> unschool", function() {deepEqual( Stem("unschooled"), "unschool");});
test("unscratched -> unscratch", function() {deepEqual( Stem("unscratched"), "unscratch");});
test("unscrews -> unscrew", function() {deepEqual( Stem("unscrews"), "unscrew");});
test("unscrupulous -> unscrupul", function() {deepEqual( Stem("unscrupulous"), "unscrupul");});
test("unscrupulously -> unscrupul", function() {deepEqual( Stem("unscrupulously"), "unscrupul");});
test("unseasonable -> unseason", function() {deepEqual( Stem("unseasonable"), "unseason");});
test("unseemly -> unseem", function() {deepEqual( Stem("unseemly"), "unseem");});
test("unseen -> unseen", function() {deepEqual( Stem("unseen"), "unseen");});
test("unselfish -> unselfish", function() {deepEqual( Stem("unselfish"), "unselfish");});
test("unselfishly -> unselfish", function() {deepEqual( Stem("unselfishly"), "unselfish");});
test("unselfishness -> unselfish", function() {deepEqual( Stem("unselfishness"), "unselfish");});
test("unsettle -> unsettl", function() {deepEqual( Stem("unsettle"), "unsettl");});
test("unsettled -> unsettl", function() {deepEqual( Stem("unsettled"), "unsettl");});
test("unsettles -> unsettl", function() {deepEqual( Stem("unsettles"), "unsettl");});
test("unsettling -> unsettl", function() {deepEqual( Stem("unsettling"), "unsettl");});
test("unshackled -> unshackl", function() {deepEqual( Stem("unshackled"), "unshackl");});
test("unshadowed -> unshadow", function() {deepEqual( Stem("unshadowed"), "unshadow");});
test("unshaken -> unshaken", function() {deepEqual( Stem("unshaken"), "unshaken");});
test("unshaved -> unshav", function() {deepEqual( Stem("unshaved"), "unshav");});
test("unshaven -> unshaven", function() {deepEqual( Stem("unshaven"), "unshaven");});
test("unsheltered -> unshelt", function() {deepEqual( Stem("unsheltered"), "unshelt");});
test("unshod -> unshod", function() {deepEqual( Stem("unshod"), "unshod");});
test("unsightly -> unsight", function() {deepEqual( Stem("unsightly"), "unsight");});
test("unskilful -> unskil", function() {deepEqual( Stem("unskilful"), "unskil");});
test("unsoftened -> unsoften", function() {deepEqual( Stem("unsoftened"), "unsoften");});
test("unsolicited -> unsolicit", function() {deepEqual( Stem("unsolicited"), "unsolicit");});
test("unsolved -> unsolv", function() {deepEqual( Stem("unsolved"), "unsolv");});
test("unsophisticated -> unsophist", function() {deepEqual( Stem("unsophisticated"), "unsophist");});
test("unsparing -> unspar", function() {deepEqual( Stem("unsparing"), "unspar");});
test("unspeakable -> unspeak", function() {deepEqual( Stem("unspeakable"), "unspeak");});
test("unspeakably -> unspeak", function() {deepEqual( Stem("unspeakably"), "unspeak");});
test("unspoilt -> unspoilt", function() {deepEqual( Stem("unspoilt"), "unspoilt");});
test("unspoken -> unspoken", function() {deepEqual( Stem("unspoken"), "unspoken");});
test("unstable -> unstabl", function() {deepEqual( Stem("unstable"), "unstabl");});
test("unsteadier -> unsteadi", function() {deepEqual( Stem("unsteadier"), "unsteadi");});
test("unsteadily -> unsteadili", function() {deepEqual( Stem("unsteadily"), "unsteadili");});
test("unsteadiness -> unsteadi", function() {deepEqual( Stem("unsteadiness"), "unsteadi");});
test("unsteady -> unsteadi", function() {deepEqual( Stem("unsteady"), "unsteadi");});
test("unstratified -> unstratifi", function() {deepEqual( Stem("unstratified"), "unstratifi");});
test("unstrung -> unstrung", function() {deepEqual( Stem("unstrung"), "unstrung");});
test("unstudied -> unstudi", function() {deepEqual( Stem("unstudied"), "unstudi");});
test("unsubstantial -> unsubstanti", function() {deepEqual( Stem("unsubstantial"), "unsubstanti");});
test("unsuccessful -> unsuccess", function() {deepEqual( Stem("unsuccessful"), "unsuccess");});
test("unsuccessfully -> unsuccess", function() {deepEqual( Stem("unsuccessfully"), "unsuccess");});
test("unsuitable -> unsuit", function() {deepEqual( Stem("unsuitable"), "unsuit");});
test("unsuited -> unsuit", function() {deepEqual( Stem("unsuited"), "unsuit");});
test("unsullied -> unsulli", function() {deepEqual( Stem("unsullied"), "unsulli");});
test("unsupportable -> unsupport", function() {deepEqual( Stem("unsupportable"), "unsupport");});
test("unsupported -> unsupport", function() {deepEqual( Stem("unsupported"), "unsupport");});
test("unsuspecting -> unsuspect", function() {deepEqual( Stem("unsuspecting"), "unsuspect");});
test("unsuspicious -> unsuspici", function() {deepEqual( Stem("unsuspicious"), "unsuspici");});
test("unsustainable -> unsustain", function() {deepEqual( Stem("unsustainable"), "unsustain");});
test("unsymmetrical -> unsymmetr", function() {deepEqual( Stem("unsymmetrical"), "unsymmetr");});
test("unsympathetic -> unsympathet", function() {deepEqual( Stem("unsympathetic"), "unsympathet");});
test("untainted -> untaint", function() {deepEqual( Stem("untainted"), "untaint");});
test("untamed -> untam", function() {deepEqual( Stem("untamed"), "untam");});
test("untarnished -> untarnish", function() {deepEqual( Stem("untarnished"), "untarnish");});
test("untasted -> untast", function() {deepEqual( Stem("untasted"), "untast");});
test("untaxed -> untax", function() {deepEqual( Stem("untaxed"), "untax");});
test("untenable -> unten", function() {deepEqual( Stem("untenable"), "unten");});
test("untenanted -> unten", function() {deepEqual( Stem("untenanted"), "unten");});
test("untended -> untend", function() {deepEqual( Stem("untended"), "untend");});
test("unthankful -> unthank", function() {deepEqual( Stem("unthankful"), "unthank");});
test("unthankfulness -> unthank", function() {deepEqual( Stem("unthankfulness"), "unthank");});
test("unthinkable -> unthink", function() {deepEqual( Stem("unthinkable"), "unthink");});
test("unthought -> unthought", function() {deepEqual( Stem("unthought"), "unthought");});
test("unthrifty -> unthrifti", function() {deepEqual( Stem("unthrifty"), "unthrifti");});
test("untidily -> untidili", function() {deepEqual( Stem("untidily"), "untidili");});
test("untidy -> untidi", function() {deepEqual( Stem("untidy"), "untidi");});
test("untie -> unti", function() {deepEqual( Stem("untie"), "unti");});
test("untied -> unti", function() {deepEqual( Stem("untied"), "unti");});
test("unties -> unti", function() {deepEqual( Stem("unties"), "unti");});
test("until -> until", function() {deepEqual( Stem("until"), "until");});
test("untimely -> untim", function() {deepEqual( Stem("untimely"), "untim");});
test("untiring -> untir", function() {deepEqual( Stem("untiring"), "untir");});
test("unto -> unto", function() {deepEqual( Stem("unto"), "unto");});
test("untold -> untold", function() {deepEqual( Stem("untold"), "untold");});
test("untouched -> untouch", function() {deepEqual( Stem("untouched"), "untouch");});
test("untoward -> untoward", function() {deepEqual( Stem("untoward"), "untoward");});
test("untrammelled -> untrammel", function() {deepEqual( Stem("untrammelled"), "untrammel");});
test("untranslatable -> untranslat", function() {deepEqual( Stem("untranslatable"), "untranslat");});
test("untried -> untri", function() {deepEqual( Stem("untried"), "untri");});
test("untrimmed -> untrim", function() {deepEqual( Stem("untrimmed"), "untrim");});
test("untroubled -> untroubl", function() {deepEqual( Stem("untroubled"), "untroubl");});
test("untrue -> untru", function() {deepEqual( Stem("untrue"), "untru");});
test("untrustworthy -> untrustworthi", function() {deepEqual( Stem("untrustworthy"), "untrustworthi");});
test("unturned -> unturn", function() {deepEqual( Stem("unturned"), "unturn");});
test("untwisting -> untwist", function() {deepEqual( Stem("untwisting"), "untwist");});
test("untying -> unti", function() {deepEqual( Stem("untying"), "unti");});
test("unused -> unus", function() {deepEqual( Stem("unused"), "unus");});
test("unusual -> unusu", function() {deepEqual( Stem("unusual"), "unusu");});
test("unusually -> unusu", function() {deepEqual( Stem("unusually"), "unusu");});
test("unutterable -> unutter", function() {deepEqual( Stem("unutterable"), "unutter");});
test("unuttered -> unutt", function() {deepEqual( Stem("unuttered"), "unutt");});
test("unvaried -> unvari", function() {deepEqual( Stem("unvaried"), "unvari");});
test("unvarying -> unvari", function() {deepEqual( Stem("unvarying"), "unvari");});
test("unveil -> unveil", function() {deepEqual( Stem("unveil"), "unveil");});
test("unveiling -> unveil", function() {deepEqual( Stem("unveiling"), "unveil");});
test("unventilated -> unventil", function() {deepEqual( Stem("unventilated"), "unventil");});
test("unverified -> unverifi", function() {deepEqual( Stem("unverified"), "unverifi");});
test("unwarily -> unwarili", function() {deepEqual( Stem("unwarily"), "unwarili");});
test("unwary -> unwari", function() {deepEqual( Stem("unwary"), "unwari");});
test("unwashed -> unwash", function() {deepEqual( Stem("unwashed"), "unwash");});
test("unwearied -> unweari", function() {deepEqual( Stem("unwearied"), "unweari");});
test("unwearying -> unweari", function() {deepEqual( Stem("unwearying"), "unweari");});
test("unwelcome -> unwelcom", function() {deepEqual( Stem("unwelcome"), "unwelcom");});
test("unwell -> unwel", function() {deepEqual( Stem("unwell"), "unwel");});
test("unwhitewashed -> unwhitewash", function() {deepEqual( Stem("unwhitewashed"), "unwhitewash");});
test("unwholesome -> unwholesom", function() {deepEqual( Stem("unwholesome"), "unwholesom");});
test("unwieldy -> unwieldi", function() {deepEqual( Stem("unwieldy"), "unwieldi");});
test("unwilling -> unwil", function() {deepEqual( Stem("unwilling"), "unwil");});
test("unwillingly -> unwil", function() {deepEqual( Stem("unwillingly"), "unwil");});
test("unwillingness -> unwilling", function() {deepEqual( Stem("unwillingness"), "unwilling");});
test("unwinding -> unwind", function() {deepEqual( Stem("unwinding"), "unwind");});
test("unwise -> unwis", function() {deepEqual( Stem("unwise"), "unwis");});
test("unwisely -> unwis", function() {deepEqual( Stem("unwisely"), "unwis");});
test("unwittingly -> unwit", function() {deepEqual( Stem("unwittingly"), "unwit");});
test("unwonted -> unwont", function() {deepEqual( Stem("unwonted"), "unwont");});
test("unworldly -> unworld", function() {deepEqual( Stem("unworldly"), "unworld");});
test("unworthily -> unworthili", function() {deepEqual( Stem("unworthily"), "unworthili");});
test("unworthiness -> unworthi", function() {deepEqual( Stem("unworthiness"), "unworthi");});
test("unworthy -> unworthi", function() {deepEqual( Stem("unworthy"), "unworthi");});
test("unwound -> unwound", function() {deepEqual( Stem("unwound"), "unwound");});
test("unwritten -> unwritten", function() {deepEqual( Stem("unwritten"), "unwritten");});
test("unwrung -> unwrung", function() {deepEqual( Stem("unwrung"), "unwrung");});
test("unyielding -> unyield", function() {deepEqual( Stem("unyielding"), "unyield");});
test("up -> up", function() {deepEqual( Stem("up"), "up");});
test("upas -> upa", function() {deepEqual( Stem("upas"), "upa");});
test("upbearing -> upbear", function() {deepEqual( Stem("upbearing"), "upbear");});
test("upbraid -> upbraid", function() {deepEqual( Stem("upbraid"), "upbraid");});
test("upbraiding -> upbraid", function() {deepEqual( Stem("upbraiding"), "upbraid");});
test("upheaval -> upheav", function() {deepEqual( Stem("upheaval"), "upheav");});
test("upheavals -> upheav", function() {deepEqual( Stem("upheavals"), "upheav");});
test("upheaved -> upheav", function() {deepEqual( Stem("upheaved"), "upheav");});
test("upheaving -> upheav", function() {deepEqual( Stem("upheaving"), "upheav");});
test("upheld -> upheld", function() {deepEqual( Stem("upheld"), "upheld");});
test("uphill -> uphil", function() {deepEqual( Stem("uphill"), "uphil");});
test("uphold -> uphold", function() {deepEqual( Stem("uphold"), "uphold");});
test("upholding -> uphold", function() {deepEqual( Stem("upholding"), "uphold");});
test("upholstered -> upholst", function() {deepEqual( Stem("upholstered"), "upholst");});
test("upholsterer -> upholster", function() {deepEqual( Stem("upholsterer"), "upholster");});
test("upholsterers -> upholster", function() {deepEqual( Stem("upholsterers"), "upholster");});
test("upholstery -> upholsteri", function() {deepEqual( Stem("upholstery"), "upholsteri");});
test("upjohn -> upjohn", function() {deepEqual( Stem("upjohn"), "upjohn");});
test("uplan -> uplan", function() {deepEqual( Stem("uplan"), "uplan");});
test("upland -> upland", function() {deepEqual( Stem("upland"), "upland");});
test("uplift -> uplift", function() {deepEqual( Stem("uplift"), "uplift");});
test("uplifted -> uplift", function() {deepEqual( Stem("uplifted"), "uplift");});
test("uplifting -> uplift", function() {deepEqual( Stem("uplifting"), "uplift");});
test("upliftings -> uplift", function() {deepEqual( Stem("upliftings"), "uplift");});
test("upon -> upon", function() {deepEqual( Stem("upon"), "upon");});
test("upper -> upper", function() {deepEqual( Stem("upper"), "upper");});
test("uppermost -> uppermost", function() {deepEqual( Stem("uppermost"), "uppermost");});
test("upraised -> uprais", function() {deepEqual( Stem("upraised"), "uprais");});
test("upright -> upright", function() {deepEqual( Stem("upright"), "upright");});
test("uprightness -> upright", function() {deepEqual( Stem("uprightness"), "upright");});
test("uprising -> upris", function() {deepEqual( Stem("uprising"), "upris");});
test("uprisings -> upris", function() {deepEqual( Stem("uprisings"), "upris");});
test("uproar -> uproar", function() {deepEqual( Stem("uproar"), "uproar");});
test("uproarious -> uproari", function() {deepEqual( Stem("uproarious"), "uproari");});
test("uproariously -> uproari", function() {deepEqual( Stem("uproariously"), "uproari");});
test("uproot -> uproot", function() {deepEqual( Stem("uproot"), "uproot");});
test("uprooting -> uproot", function() {deepEqual( Stem("uprooting"), "uproot");});
test("uprose -> upros", function() {deepEqual( Stem("uprose"), "upros");});
test("ups -> up", function() {deepEqual( Stem("ups"), "up");});
test("upsallata -> upsallata", function() {deepEqual( Stem("upsallata"), "upsallata");});
test("upset -> upset", function() {deepEqual( Stem("upset"), "upset");});
test("upsets -> upset", function() {deepEqual( Stem("upsets"), "upset");});
test("upsetting -> upset", function() {deepEqual( Stem("upsetting"), "upset");});
test("upshot -> upshot", function() {deepEqual( Stem("upshot"), "upshot");});
test("upside -> upsid", function() {deepEqual( Stem("upside"), "upsid");});
test("upstairs -> upstair", function() {deepEqual( Stem("upstairs"), "upstair");});
test("upstart -> upstart", function() {deepEqual( Stem("upstart"), "upstart");});
test("upstarts -> upstart", function() {deepEqual( Stem("upstarts"), "upstart");});
test("upturned -> upturn", function() {deepEqual( Stem("upturned"), "upturn");});
test("upward -> upward", function() {deepEqual( Stem("upward"), "upward");});
test("upwards -> upward", function() {deepEqual( Stem("upwards"), "upward");});
test("urbane -> urban", function() {deepEqual( Stem("urbane"), "urban");});
test("urbanity -> urban", function() {deepEqual( Stem("urbanity"), "urban");});
test("urchin -> urchin", function() {deepEqual( Stem("urchin"), "urchin");});
test("urge -> urg", function() {deepEqual( Stem("urge"), "urg");});
test("urged -> urg", function() {deepEqual( Stem("urged"), "urg");});
test("urgency -> urgenc", function() {deepEqual( Stem("urgency"), "urgenc");});
test("urgent -> urgent", function() {deepEqual( Stem("urgent"), "urgent");});
test("urgently -> urgent", function() {deepEqual( Stem("urgently"), "urgent");});
test("urges -> urg", function() {deepEqual( Stem("urges"), "urg");});
test("urging -> urg", function() {deepEqual( Stem("urging"), "urg");});
test("urinary -> urinari", function() {deepEqual( Stem("urinary"), "urinari");});
test("urn -> urn", function() {deepEqual( Stem("urn"), "urn");});
test("ursula -> ursula", function() {deepEqual( Stem("ursula"), "ursula");});
test("uruguay -> uruguay", function() {deepEqual( Stem("uruguay"), "uruguay");});
test("us -> us", function() {deepEqual( Stem("us"), "us");});
test("usage -> usag", function() {deepEqual( Stem("usage"), "usag");});
test("usborne -> usborn", function() {deepEqual( Stem("usborne"), "usborn");});
test("use -> use", function() {deepEqual( Stem("use"), "use");});
test("used -> use", function() {deepEqual( Stem("used"), "use");});
test("useful -> use", function() {deepEqual( Stem("useful"), "use");});
test("usefully -> use", function() {deepEqual( Stem("usefully"), "use");});
test("usefulness -> use", function() {deepEqual( Stem("usefulness"), "use");});
test("useless -> useless", function() {deepEqual( Stem("useless"), "useless");});
test("uselessly -> useless", function() {deepEqual( Stem("uselessly"), "useless");});
test("uselessness -> useless", function() {deepEqual( Stem("uselessness"), "useless");});
test("uses -> use", function() {deepEqual( Stem("uses"), "use");});
test("usher -> usher", function() {deepEqual( Stem("usher"), "usher");});
test("ushered -> usher", function() {deepEqual( Stem("ushered"), "usher");});
test("ushering -> usher", function() {deepEqual( Stem("ushering"), "usher");});
test("ushers -> usher", function() {deepEqual( Stem("ushers"), "usher");});
test("using -> use", function() {deepEqual( Stem("using"), "use");});
test("usnera -> usnera", function() {deepEqual( Stem("usnera"), "usnera");});
test("uspallata -> uspallata", function() {deepEqual( Stem("uspallata"), "uspallata");});
test("usual -> usual", function() {deepEqual( Stem("usual"), "usual");});
test("usually -> usual", function() {deepEqual( Stem("usually"), "usual");});
test("usurer -> usur", function() {deepEqual( Stem("usurer"), "usur");});
test("usurers -> usur", function() {deepEqual( Stem("usurers"), "usur");});
test("usurp -> usurp", function() {deepEqual( Stem("usurp"), "usurp");});
test("utamme -> utamm", function() {deepEqual( Stem("utamme"), "utamm");});
test("utensils -> utensil", function() {deepEqual( Stem("utensils"), "utensil");});
test("utilitarianism -> utilitarian", function() {deepEqual( Stem("utilitarianism"), "utilitarian");});
test("utility -> util", function() {deepEqual( Stem("utility"), "util");});
test("utilize -> util", function() {deepEqual( Stem("utilize"), "util");});
test("utilized -> util", function() {deepEqual( Stem("utilized"), "util");});
test("utmost -> utmost", function() {deepEqual( Stem("utmost"), "utmost");});
test("utter -> utter", function() {deepEqual( Stem("utter"), "utter");});
test("utterance -> utter", function() {deepEqual( Stem("utterance"), "utter");});
test("uttered -> utter", function() {deepEqual( Stem("uttered"), "utter");});
test("uttering -> utter", function() {deepEqual( Stem("uttering"), "utter");});
test("utterly -> utter", function() {deepEqual( Stem("utterly"), "utter");});
test("utters -> utter", function() {deepEqual( Stem("utters"), "utter");});
test("v -> v", function() {deepEqual( Stem("v"), "v");});
test("va -> va", function() {deepEqual( Stem("va"), "va");});
test("vacancies -> vacanc", function() {deepEqual( Stem("vacancies"), "vacanc");});
test("vacancy -> vacanc", function() {deepEqual( Stem("vacancy"), "vacanc");});
test("vacant -> vacant", function() {deepEqual( Stem("vacant"), "vacant");});
test("vacantly -> vacant", function() {deepEqual( Stem("vacantly"), "vacant");});
test("vacas -> vaca", function() {deepEqual( Stem("vacas"), "vaca");});
test("vacate -> vacat", function() {deepEqual( Stem("vacate"), "vacat");});
test("vacated -> vacat", function() {deepEqual( Stem("vacated"), "vacat");});
test("vacation -> vacat", function() {deepEqual( Stem("vacation"), "vacat");});
test("vacations -> vacat", function() {deepEqual( Stem("vacations"), "vacat");});
test("vacillated -> vacil", function() {deepEqual( Stem("vacillated"), "vacil");});
test("vacillating -> vacil", function() {deepEqual( Stem("vacillating"), "vacil");});
test("vacillations -> vacil", function() {deepEqual( Stem("vacillations"), "vacil");});
test("vacillatory -> vacillatori", function() {deepEqual( Stem("vacillatory"), "vacillatori");});
test("vade -> vade", function() {deepEqual( Stem("vade"), "vade");});
test("vagabond -> vagabond", function() {deepEqual( Stem("vagabond"), "vagabond");});
test("vagabondizing -> vagabond", function() {deepEqual( Stem("vagabondizing"), "vagabond");});
test("vagabonds -> vagabond", function() {deepEqual( Stem("vagabonds"), "vagabond");});
test("vagaries -> vagari", function() {deepEqual( Stem("vagaries"), "vagari");});
test("vagary -> vagari", function() {deepEqual( Stem("vagary"), "vagari");});
test("vagrant -> vagrant", function() {deepEqual( Stem("vagrant"), "vagrant");});
test("vagrants -> vagrant", function() {deepEqual( Stem("vagrants"), "vagrant");});
test("vague -> vagu", function() {deepEqual( Stem("vague"), "vagu");});
test("vaguely -> vagu", function() {deepEqual( Stem("vaguely"), "vagu");});
test("vagueness -> vagu", function() {deepEqual( Stem("vagueness"), "vagu");});
test("vahrushin -> vahrushin", function() {deepEqual( Stem("vahrushin"), "vahrushin");});
test("vain -> vain", function() {deepEqual( Stem("vain"), "vain");});
test("vainer -> vainer", function() {deepEqual( Stem("vainer"), "vainer");});
test("vainest -> vainest", function() {deepEqual( Stem("vainest"), "vainest");});
test("vainglory -> vainglori", function() {deepEqual( Stem("vainglory"), "vainglori");});
test("vainly -> vain", function() {deepEqual( Stem("vainly"), "vain");});
test("vaiuly -> vaiuli", function() {deepEqual( Stem("vaiuly"), "vaiuli");});
test("valdes -> vald", function() {deepEqual( Stem("valdes"), "vald");});
test("valdivia -> valdivia", function() {deepEqual( Stem("valdivia"), "valdivia");});
test("vale -> vale", function() {deepEqual( Stem("vale"), "vale");});
test("valet -> valet", function() {deepEqual( Stem("valet"), "valet");});
test("valets -> valet", function() {deepEqual( Stem("valets"), "valet");});
test("valiantly -> valiant", function() {deepEqual( Stem("valiantly"), "valiant");});
test("valid -> valid", function() {deepEqual( Stem("valid"), "valid");});
test("validity -> valid", function() {deepEqual( Stem("validity"), "valid");});
test("valise -> valis", function() {deepEqual( Stem("valise"), "valis");});
test("valle -> vall", function() {deepEqual( Stem("valle"), "vall");});
test("valley -> valley", function() {deepEqual( Stem("valley"), "valley");});
test("valleys -> valley", function() {deepEqual( Stem("valleys"), "valley");});
test("valour -> valour", function() {deepEqual( Stem("valour"), "valour");});
test("valparaiso -> valparaiso", function() {deepEqual( Stem("valparaiso"), "valparaiso");});
test("valuable -> valuabl", function() {deepEqual( Stem("valuable"), "valuabl");});
test("valuables -> valuabl", function() {deepEqual( Stem("valuables"), "valuabl");});
test("valuation -> valuat", function() {deepEqual( Stem("valuation"), "valuat");});
test("value -> valu", function() {deepEqual( Stem("value"), "valu");});
test("valued -> valu", function() {deepEqual( Stem("valued"), "valu");});
test("valueless -> valueless", function() {deepEqual( Stem("valueless"), "valueless");});
test("valve -> valv", function() {deepEqual( Stem("valve"), "valv");});
test("vamp -> vamp", function() {deepEqual( Stem("vamp"), "vamp");});
test("vampire -> vampir", function() {deepEqual( Stem("vampire"), "vampir");});
test("van -> van", function() {deepEqual( Stem("van"), "van");});
test("vancouver -> vancouv", function() {deepEqual( Stem("vancouver"), "vancouv");});
test("vane -> vane", function() {deepEqual( Stem("vane"), "vane");});
test("vanellus -> vanellus", function() {deepEqual( Stem("vanellus"), "vanellus");});
test("vanes -> vane", function() {deepEqual( Stem("vanes"), "vane");});
test("vanessa -> vanessa", function() {deepEqual( Stem("vanessa"), "vanessa");});
test("vanikoro -> vanikoro", function() {deepEqual( Stem("vanikoro"), "vanikoro");});
test("vanish -> vanish", function() {deepEqual( Stem("vanish"), "vanish");});
test("vanished -> vanish", function() {deepEqual( Stem("vanished"), "vanish");});
test("vanishes -> vanish", function() {deepEqual( Stem("vanishes"), "vanish");});
test("vanishing -> vanish", function() {deepEqual( Stem("vanishing"), "vanish");});
test("vanities -> vaniti", function() {deepEqual( Stem("vanities"), "vaniti");});
test("vanity -> vaniti", function() {deepEqual( Stem("vanity"), "vaniti");});
test("vans -> van", function() {deepEqual( Stem("vans"), "van");});
test("vapid -> vapid", function() {deepEqual( Stem("vapid"), "vapid");});
test("vapidity -> vapid", function() {deepEqual( Stem("vapidity"), "vapid");});
test("vaporous -> vapor", function() {deepEqual( Stem("vaporous"), "vapor");});
test("vapour -> vapour", function() {deepEqual( Stem("vapour"), "vapour");});
test("vapouring -> vapour", function() {deepEqual( Stem("vapouring"), "vapour");});
test("vapourings -> vapour", function() {deepEqual( Stem("vapourings"), "vapour");});
test("vapours -> vapour", function() {deepEqual( Stem("vapours"), "vapour");});
test("vapoury -> vapouri", function() {deepEqual( Stem("vapoury"), "vapouri");});
test("vara -> vara", function() {deepEqual( Stem("vara"), "vara");});
test("varents -> varent", function() {deepEqual( Stem("varents"), "varent");});
test("variable -> variabl", function() {deepEqual( Stem("variable"), "variabl");});
test("variance -> varianc", function() {deepEqual( Stem("variance"), "varianc");});
test("variation -> variat", function() {deepEqual( Stem("variation"), "variat");});
test("variations -> variat", function() {deepEqual( Stem("variations"), "variat");});
test("varie -> vari", function() {deepEqual( Stem("varie"), "vari");});
test("varied -> vari", function() {deepEqual( Stem("varied"), "vari");});
test("variegated -> varieg", function() {deepEqual( Stem("variegated"), "varieg");});
test("varies -> vari", function() {deepEqual( Stem("varies"), "vari");});
test("varieties -> varieti", function() {deepEqual( Stem("varieties"), "varieti");});
test("variety -> varieti", function() {deepEqual( Stem("variety"), "varieti");});
test("various -> various", function() {deepEqual( Stem("various"), "various");});
test("variously -> various", function() {deepEqual( Stem("variously"), "various");});
test("varnish -> varnish", function() {deepEqual( Stem("varnish"), "varnish");});
test("varnished -> varnish", function() {deepEqual( Stem("varnished"), "varnish");});
test("vary -> vari", function() {deepEqual( Stem("vary"), "vari");});
test("varying -> vari", function() {deepEqual( Stem("varying"), "vari");});
test("vase -> vase", function() {deepEqual( Stem("vase"), "vase");});
test("vases -> vase", function() {deepEqual( Stem("vases"), "vase");});
test("vassal -> vassal", function() {deepEqual( Stem("vassal"), "vassal");});
test("vassalage -> vassalag", function() {deepEqual( Stem("vassalage"), "vassalag");});
test("vassilitch -> vassilitch", function() {deepEqual( Stem("vassilitch"), "vassilitch");});
test("vassily -> vassili", function() {deepEqual( Stem("vassily"), "vassili");});
test("vassilyevsky -> vassilyevski", function() {deepEqual( Stem("vassilyevsky"), "vassilyevski");});
test("vast -> vast", function() {deepEqual( Stem("vast"), "vast");});
test("vastly -> vast", function() {deepEqual( Stem("vastly"), "vast");});
test("vastness -> vast", function() {deepEqual( Stem("vastness"), "vast");});
test("vasya -> vasya", function() {deepEqual( Stem("vasya"), "vasya");});
test("vater -> vater", function() {deepEqual( Stem("vater"), "vater");});
test("vaughans -> vaughan", function() {deepEqual( Stem("vaughans"), "vaughan");});
test("vault -> vault", function() {deepEqual( Stem("vault"), "vault");});
test("vaulted -> vault", function() {deepEqual( Stem("vaulted"), "vault");});
test("vaulting -> vault", function() {deepEqual( Stem("vaulting"), "vault");});
test("vaults -> vault", function() {deepEqual( Stem("vaults"), "vault");});
test("vaunt -> vaunt", function() {deepEqual( Stem("vaunt"), "vaunt");});
test("vauxhall -> vauxhal", function() {deepEqual( Stem("vauxhall"), "vauxhal");});
test("vayli -> vayli", function() {deepEqual( Stem("vayli"), "vayli");});
test("ve -> ve", function() {deepEqual( Stem("ve"), "ve");});
test("veal -> veal", function() {deepEqual( Stem("veal"), "veal");});
test("veals -> veal", function() {deepEqual( Stem("veals"), "veal");});
test("veer -> veer", function() {deepEqual( Stem("veer"), "veer");});
test("veered -> veer", function() {deepEqual( Stem("veered"), "veer");});
test("veering -> veer", function() {deepEqual( Stem("veering"), "veer");});
test("vegetabl -> vegetabl", function() {deepEqual( Stem("vegetabl"), "vegetabl");});
test("vegetable -> veget", function() {deepEqual( Stem("vegetable"), "veget");});
test("vegetables -> veget", function() {deepEqual( Stem("vegetables"), "veget");});
test("vegetate -> veget", function() {deepEqual( Stem("vegetate"), "veget");});
test("vegetation -> veget", function() {deepEqual( Stem("vegetation"), "veget");});
test("vehemence -> vehem", function() {deepEqual( Stem("vehemence"), "vehem");});
test("vehement -> vehement", function() {deepEqual( Stem("vehement"), "vehement");});
test("vehemently -> vehement", function() {deepEqual( Stem("vehemently"), "vehement");});
test("vehicle -> vehicl", function() {deepEqual( Stem("vehicle"), "vehicl");});
test("vehicles -> vehicl", function() {deepEqual( Stem("vehicles"), "vehicl");});
test("veil -> veil", function() {deepEqual( Stem("veil"), "veil");});
test("veiled -> veil", function() {deepEqual( Stem("veiled"), "veil");});
test("veils -> veil", function() {deepEqual( Stem("veils"), "veil");});
test("vein -> vein", function() {deepEqual( Stem("vein"), "vein");});
test("veined -> vein", function() {deepEqual( Stem("veined"), "vein");});
test("veinous -> veinous", function() {deepEqual( Stem("veinous"), "veinous");});
test("veins -> vein", function() {deepEqual( Stem("veins"), "vein");});
test("vellum -> vellum", function() {deepEqual( Stem("vellum"), "vellum");});
test("velocity -> veloc", function() {deepEqual( Stem("velocity"), "veloc");});
test("velvet -> velvet", function() {deepEqual( Stem("velvet"), "velvet");});
test("velvets -> velvet", function() {deepEqual( Stem("velvets"), "velvet");});
test("venda -> venda", function() {deepEqual( Stem("venda"), "venda");});
test("vendome -> vendom", function() {deepEqual( Stem("vendome"), "vendom");});
test("vendor -> vendor", function() {deepEqual( Stem("vendor"), "vendor");});
test("vendors -> vendor", function() {deepEqual( Stem("vendors"), "vendor");});
test("venerable -> vener", function() {deepEqual( Stem("venerable"), "vener");});
test("veneration -> vener", function() {deepEqual( Stem("veneration"), "vener");});
test("venetian -> venetian", function() {deepEqual( Stem("venetian"), "venetian");});
test("vengeance -> vengeanc", function() {deepEqual( Stem("vengeance"), "vengeanc");});
test("venice -> venic", function() {deepEqual( Stem("venice"), "venic");});
test("veniso -> veniso", function() {deepEqual( Stem("veniso"), "veniso");});
test("venom -> venom", function() {deepEqual( Stem("venom"), "venom");});
test("venomous -> venom", function() {deepEqual( Stem("venomous"), "venom");});
test("vent -> vent", function() {deepEqual( Stem("vent"), "vent");});
test("ventana -> ventana", function() {deepEqual( Stem("ventana"), "ventana");});
test("vented -> vent", function() {deepEqual( Stem("vented"), "vent");});
test("ventilated -> ventil", function() {deepEqual( Stem("ventilated"), "ventil");});
test("ventilation -> ventil", function() {deepEqual( Stem("ventilation"), "ventil");});
test("ventilator -> ventil", function() {deepEqual( Stem("ventilator"), "ventil");});
test("venting -> vent", function() {deepEqual( Stem("venting"), "vent");});
test("ventnor -> ventnor", function() {deepEqual( Stem("ventnor"), "ventnor");});
test("ventriloquists -> ventriloquist", function() {deepEqual( Stem("ventriloquists"), "ventriloquist");});
test("vents -> vent", function() {deepEqual( Stem("vents"), "vent");});
test("venture -> ventur", function() {deepEqual( Stem("venture"), "ventur");});
test("ventured -> ventur", function() {deepEqual( Stem("ventured"), "ventur");});
test("ventures -> ventur", function() {deepEqual( Stem("ventures"), "ventur");});
test("venturesome -> venturesom", function() {deepEqual( Stem("venturesome"), "venturesom");});
test("venturing -> ventur", function() {deepEqual( Stem("venturing"), "ventur");});
test("venus -> venus", function() {deepEqual( Stem("venus"), "venus");});
test("veo -> veo", function() {deepEqual( Stem("veo"), "veo");});
test("ver -> ver", function() {deepEqual( Stem("ver"), "ver");});
test("vera -> vera", function() {deepEqual( Stem("vera"), "vera");});
test("veracious -> veraci", function() {deepEqual( Stem("veracious"), "veraci");});
test("veracity -> verac", function() {deepEqual( Stem("veracity"), "verac");});
test("veranda -> veranda", function() {deepEqual( Stem("veranda"), "veranda");});
test("verandah -> verandah", function() {deepEqual( Stem("verandah"), "verandah");});
test("verandahs -> verandah", function() {deepEqual( Stem("verandahs"), "verandah");});
test("verb -> verb", function() {deepEqual( Stem("verb"), "verb");});
test("verbal -> verbal", function() {deepEqual( Stem("verbal"), "verbal");});
test("verbally -> verbal", function() {deepEqual( Stem("verbally"), "verbal");});
test("verbena -> verbena", function() {deepEqual( Stem("verbena"), "verbena");});
test("verbenas -> verbena", function() {deepEqual( Stem("verbenas"), "verbena");});
test("verbose -> verbos", function() {deepEqual( Stem("verbose"), "verbos");});
test("verd -> verd", function() {deepEqual( Stem("verd"), "verd");});
test("verdant -> verdant", function() {deepEqual( Stem("verdant"), "verdant");});
test("verdict -> verdict", function() {deepEqual( Stem("verdict"), "verdict");});
test("verdigris -> verdigri", function() {deepEqual( Stem("verdigris"), "verdigri");});
test("verds -> verd", function() {deepEqual( Stem("verds"), "verd");});
test("verdure -> verdur", function() {deepEqual( Stem("verdure"), "verdur");});
test("vere -> vere", function() {deepEqual( Stem("vere"), "vere");});
test("verge -> verg", function() {deepEqual( Stem("verge"), "verg");});
test("verging -> verg", function() {deepEqual( Stem("verging"), "verg");});
test("verified -> verifi", function() {deepEqual( Stem("verified"), "verifi");});
test("verify -> verifi", function() {deepEqual( Stem("verify"), "verifi");});
test("verily -> verili", function() {deepEqual( Stem("verily"), "verili");});
test("verisopht -> verisopht", function() {deepEqual( Stem("verisopht"), "verisopht");});
test("veritably -> verit", function() {deepEqual( Stem("veritably"), "verit");});
test("verite -> verit", function() {deepEqual( Stem("verite"), "verit");});
test("vermiform -> vermiform", function() {deepEqual( Stem("vermiform"), "vermiform");});
test("vermilion -> vermilion", function() {deepEqual( Stem("vermilion"), "vermilion");});
test("vermin -> vermin", function() {deepEqual( Stem("vermin"), "vermin");});
test("verona -> verona", function() {deepEqual( Stem("verona"), "verona");});
test("versailles -> versaill", function() {deepEqual( Stem("versailles"), "versaill");});
test("versatile -> versatil", function() {deepEqual( Stem("versatile"), "versatil");});
test("verse -> vers", function() {deepEqual( Stem("verse"), "vers");});
test("versed -> vers", function() {deepEqual( Stem("versed"), "vers");});
test("verses -> vers", function() {deepEqual( Stem("verses"), "vers");});
test("versification -> versif", function() {deepEqual( Stem("versification"), "versif");});
test("version -> version", function() {deepEqual( Stem("version"), "version");});
test("versions -> version", function() {deepEqual( Stem("versions"), "version");});
test("versts -> verst", function() {deepEqual( Stem("versts"), "verst");});
test("vertebrae -> vertebra", function() {deepEqual( Stem("vertebrae"), "vertebra");});
test("vertical -> vertic", function() {deepEqual( Stem("vertical"), "vertic");});
test("vertically -> vertic", function() {deepEqual( Stem("vertically"), "vertic");});
test("vertu -> vertu", function() {deepEqual( Stem("vertu"), "vertu");});
test("verulam -> verulam", function() {deepEqual( Stem("verulam"), "verulam");});
test("very -> veri", function() {deepEqual( Stem("very"), "veri");});
test("vesicles -> vesicl", function() {deepEqual( Stem("vesicles"), "vesicl");});
test("vessel -> vessel", function() {deepEqual( Stem("vessel"), "vessel");});
test("vessels -> vessel", function() {deepEqual( Stem("vessels"), "vessel");});
test("vestal -> vestal", function() {deepEqual( Stem("vestal"), "vestal");});
test("vestige -> vestig", function() {deepEqual( Stem("vestige"), "vestig");});
test("vestiges -> vestig", function() {deepEqual( Stem("vestiges"), "vestig");});
test("vestigia -> vestigia", function() {deepEqual( Stem("vestigia"), "vestigia");});
test("vestry -> vestri", function() {deepEqual( Stem("vestry"), "vestri");});
test("vesuvius -> vesuvius", function() {deepEqual( Stem("vesuvius"), "vesuvius");});
test("veteran -> veteran", function() {deepEqual( Stem("veteran"), "veteran");});
test("veterinary -> veterinari", function() {deepEqual( Stem("veterinary"), "veterinari");});
test("veto -> veto", function() {deepEqual( Stem("veto"), "veto");});
test("vex -> vex", function() {deepEqual( Stem("vex"), "vex");});
test("vexation -> vexat", function() {deepEqual( Stem("vexation"), "vexat");});
test("vexations -> vexat", function() {deepEqual( Stem("vexations"), "vexat");});
test("vexatious -> vexati", function() {deepEqual( Stem("vexatious"), "vexati");});
test("vexed -> vex", function() {deepEqual( Stem("vexed"), "vex");});
test("vexes -> vex", function() {deepEqual( Stem("vexes"), "vex");});
test("vexing -> vex", function() {deepEqual( Stem("vexing"), "vex");});
test("vholes -> vhole", function() {deepEqual( Stem("vholes"), "vhole");});
test("vholeses -> vholes", function() {deepEqual( Stem("vholeses"), "vholes");});
test("vi -> vi", function() {deepEqual( Stem("vi"), "vi");});
test("via -> via", function() {deepEqual( Stem("via"), "via");});
test("viands -> viand", function() {deepEqual( Stem("viands"), "viand");});
test("viazemsky -> viazemski", function() {deepEqual( Stem("viazemsky"), "viazemski");});
test("vibrate -> vibrat", function() {deepEqual( Stem("vibrate"), "vibrat");});
test("vibrated -> vibrat", function() {deepEqual( Stem("vibrated"), "vibrat");});
test("vibrates -> vibrat", function() {deepEqual( Stem("vibrates"), "vibrat");});
test("vibrating -> vibrat", function() {deepEqual( Stem("vibrating"), "vibrat");});
test("vibration -> vibrat", function() {deepEqual( Stem("vibration"), "vibrat");});
test("vibrations -> vibrat", function() {deepEqual( Stem("vibrations"), "vibrat");});
test("vibratory -> vibratori", function() {deepEqual( Stem("vibratory"), "vibratori");});
test("vicar -> vicar", function() {deepEqual( Stem("vicar"), "vicar");});
test("vicarage -> vicarag", function() {deepEqual( Stem("vicarage"), "vicarag");});
test("vicarious -> vicari", function() {deepEqual( Stem("vicarious"), "vicari");});
test("vicariously -> vicari", function() {deepEqual( Stem("vicariously"), "vicari");});
test("vice -> vice", function() {deepEqual( Stem("vice"), "vice");});
test("vicencio -> vicencio", function() {deepEqual( Stem("vicencio"), "vicencio");});
test("viceroys -> viceroy", function() {deepEqual( Stem("viceroys"), "viceroy");});
test("vices -> vice", function() {deepEqual( Stem("vices"), "vice");});
test("vicinity -> vicin", function() {deepEqual( Stem("vicinity"), "vicin");});
test("vicious -> vicious", function() {deepEqual( Stem("vicious"), "vicious");});
test("viciously -> vicious", function() {deepEqual( Stem("viciously"), "vicious");});
test("viciousness -> vicious", function() {deepEqual( Stem("viciousness"), "vicious");});
test("vicissitudes -> vicissitud", function() {deepEqual( Stem("vicissitudes"), "vicissitud");});
test("victim -> victim", function() {deepEqual( Stem("victim"), "victim");});
test("victimized -> victim", function() {deepEqual( Stem("victimized"), "victim");});
test("victims -> victim", function() {deepEqual( Stem("victims"), "victim");});
test("victoria -> victoria", function() {deepEqual( Stem("victoria"), "victoria");});
test("victories -> victori", function() {deepEqual( Stem("victories"), "victori");});
test("victorious -> victori", function() {deepEqual( Stem("victorious"), "victori");});
test("victory -> victori", function() {deepEqual( Stem("victory"), "victori");});
test("victualled -> victual", function() {deepEqual( Stem("victualled"), "victual");});
test("victuals -> victual", function() {deepEqual( Stem("victuals"), "victual");});
test("vicuna -> vicuna", function() {deepEqual( Stem("vicuna"), "vicuna");});
test("vide -> vide", function() {deepEqual( Stem("vide"), "vide");});
test("video -> video", function() {deepEqual( Stem("video"), "video");});
test("vie -> vie", function() {deepEqual( Stem("vie"), "vie");});
test("vied -> vie", function() {deepEqual( Stem("vied"), "vie");});
test("vienna -> vienna", function() {deepEqual( Stem("vienna"), "vienna");});
test("view -> view", function() {deepEqual( Stem("view"), "view");});
test("viewed -> view", function() {deepEqual( Stem("viewed"), "view");});
test("viewing -> view", function() {deepEqual( Stem("viewing"), "view");});
test("views -> view", function() {deepEqual( Stem("views"), "view");});
test("vigil -> vigil", function() {deepEqual( Stem("vigil"), "vigil");});
test("vigilance -> vigil", function() {deepEqual( Stem("vigilance"), "vigil");});
test("vigilant -> vigil", function() {deepEqual( Stem("vigilant"), "vigil");});
test("vigilantly -> vigil", function() {deepEqual( Stem("vigilantly"), "vigil");});
test("vigorous -> vigor", function() {deepEqual( Stem("vigorous"), "vigor");});
test("vigorously -> vigor", function() {deepEqual( Stem("vigorously"), "vigor");});
test("vigour -> vigour", function() {deepEqual( Stem("vigour"), "vigour");});
test("vii -> vii", function() {deepEqual( Stem("vii"), "vii");});
test("viii -> viii", function() {deepEqual( Stem("viii"), "viii");});
test("vil -> vil", function() {deepEqual( Stem("vil"), "vil");});
test("vile -> vile", function() {deepEqual( Stem("vile"), "vile");});
test("vilely -> vile", function() {deepEqual( Stem("vilely"), "vile");});
test("vileness -> vile", function() {deepEqual( Stem("vileness"), "vile");});
test("viler -> viler", function() {deepEqual( Stem("viler"), "viler");});
test("vilest -> vilest", function() {deepEqual( Stem("vilest"), "vilest");});
test("vilified -> vilifi", function() {deepEqual( Stem("vilified"), "vilifi");});
test("vilinco -> vilinco", function() {deepEqual( Stem("vilinco"), "vilinco");});
test("vilipilli -> vilipilli", function() {deepEqual( Stem("vilipilli"), "vilipilli");});
test("villa -> villa", function() {deepEqual( Stem("villa"), "villa");});
test("village -> villag", function() {deepEqual( Stem("village"), "villag");});
test("villagers -> villag", function() {deepEqual( Stem("villagers"), "villag");});
test("villages -> villag", function() {deepEqual( Stem("villages"), "villag");});
test("villain -> villain", function() {deepEqual( Stem("villain"), "villain");});
test("villainous -> villain", function() {deepEqual( Stem("villainous"), "villain");});
test("villains -> villain", function() {deepEqual( Stem("villains"), "villain");});
test("villainy -> villaini", function() {deepEqual( Stem("villainy"), "villaini");});
test("villarica -> villarica", function() {deepEqual( Stem("villarica"), "villarica");});
test("villas -> villa", function() {deepEqual( Stem("villas"), "villa");});
test("villechardouin -> villechardouin", function() {deepEqual( Stem("villechardouin"), "villechardouin");});
test("villosus -> villosus", function() {deepEqual( Stem("villosus"), "villosus");});
test("vilna -> vilna", function() {deepEqual( Stem("vilna"), "vilna");});
test("vin -> vin", function() {deepEqual( Stem("vin"), "vin");});
test("vincent -> vincent", function() {deepEqual( Stem("vincent"), "vincent");});
test("vindicate -> vindic", function() {deepEqual( Stem("vindicate"), "vindic");});
test("vindicated -> vindic", function() {deepEqual( Stem("vindicated"), "vindic");});
test("vindication -> vindic", function() {deepEqual( Stem("vindication"), "vindic");});
test("vindictive -> vindict", function() {deepEqual( Stem("vindictive"), "vindict");});
test("vindictively -> vindict", function() {deepEqual( Stem("vindictively"), "vindict");});
test("vindictiveness -> vindict", function() {deepEqual( Stem("vindictiveness"), "vindict");});
test("vine -> vine", function() {deepEqual( Stem("vine"), "vine");});
test("vinegar -> vinegar", function() {deepEqual( Stem("vinegar"), "vinegar");});
test("vines -> vine", function() {deepEqual( Stem("vines"), "vine");});
test("vineyards -> vineyard", function() {deepEqual( Stem("vineyards"), "vineyard");});
test("vino -> vino", function() {deepEqual( Stem("vino"), "vino");});
test("vinoque -> vinoqu", function() {deepEqual( Stem("vinoque"), "vinoqu");});
test("vintems -> vintem", function() {deepEqual( Stem("vintems"), "vintem");});
test("viola -> viola", function() {deepEqual( Stem("viola"), "viola");});
test("violate -> violat", function() {deepEqual( Stem("violate"), "violat");});
test("violated -> violat", function() {deepEqual( Stem("violated"), "violat");});
test("violates -> violat", function() {deepEqual( Stem("violates"), "violat");});
test("violation -> violat", function() {deepEqual( Stem("violation"), "violat");});
test("violence -> violenc", function() {deepEqual( Stem("violence"), "violenc");});
test("violent -> violent", function() {deepEqual( Stem("violent"), "violent");});
test("violently -> violent", function() {deepEqual( Stem("violently"), "violent");});
test("violet -> violet", function() {deepEqual( Stem("violet"), "violet");});
test("violets -> violet", function() {deepEqual( Stem("violets"), "violet");});
test("violin -> violin", function() {deepEqual( Stem("violin"), "violin");});
test("violins -> violin", function() {deepEqual( Stem("violins"), "violin");});
test("violoncello -> violoncello", function() {deepEqual( Stem("violoncello"), "violoncello");});
test("violoncellos -> violoncello", function() {deepEqual( Stem("violoncellos"), "violoncello");});
test("viper -> viper", function() {deepEqual( Stem("viper"), "viper");});
test("vire -> vire", function() {deepEqual( Stem("vire"), "vire");});
test("virgin -> virgin", function() {deepEqual( Stem("virgin"), "virgin");});
test("virginian -> virginian", function() {deepEqual( Stem("virginian"), "virginian");});
test("virgularia -> virgularia", function() {deepEqual( Stem("virgularia"), "virgularia");});
test("virtually -> virtual", function() {deepEqual( Stem("virtually"), "virtual");});
test("virtue -> virtu", function() {deepEqual( Stem("virtue"), "virtu");});
test("virtues -> virtu", function() {deepEqual( Stem("virtues"), "virtu");});
test("virtuous -> virtuous", function() {deepEqual( Stem("virtuous"), "virtuous");});
test("virtuously -> virtuous", function() {deepEqual( Stem("virtuously"), "virtuous");});
test("virulence -> virul", function() {deepEqual( Stem("virulence"), "virul");});
test("vis -> vis", function() {deepEqual( Stem("vis"), "vis");});
test("visage -> visag", function() {deepEqual( Stem("visage"), "visag");});
test("visaged -> visag", function() {deepEqual( Stem("visaged"), "visag");});
test("viscid -> viscid", function() {deepEqual( Stem("viscid"), "viscid");});
test("vise -> vise", function() {deepEqual( Stem("vise"), "vise");});
test("vish -> vish", function() {deepEqual( Stem("vish"), "vish");});
test("vishera -> vishera", function() {deepEqual( Stem("vishera"), "vishera");});
test("visible -> visibl", function() {deepEqual( Stem("visible"), "visibl");});
test("visibly -> visibl", function() {deepEqual( Stem("visibly"), "visibl");});
test("vision -> vision", function() {deepEqual( Stem("vision"), "vision");});
test("visionary -> visionari", function() {deepEqual( Stem("visionary"), "visionari");});
test("visions -> vision", function() {deepEqual( Stem("visions"), "vision");});
test("visit -> visit", function() {deepEqual( Stem("visit"), "visit");});
test("visitation -> visit", function() {deepEqual( Stem("visitation"), "visit");});
test("visitations -> visit", function() {deepEqual( Stem("visitations"), "visit");});
test("visited -> visit", function() {deepEqual( Stem("visited"), "visit");});
test("visiting -> visit", function() {deepEqual( Stem("visiting"), "visit");});
test("visitor -> visitor", function() {deepEqual( Stem("visitor"), "visitor");});
test("visitors -> visitor", function() {deepEqual( Stem("visitors"), "visitor");});
test("visits -> visit", function() {deepEqual( Stem("visits"), "visit");});
test("vista -> vista", function() {deepEqual( Stem("vista"), "vista");});
test("vitae -> vita", function() {deepEqual( Stem("vitae"), "vita");});
test("vital -> vital", function() {deepEqual( Stem("vital"), "vital");});
test("vitality -> vital", function() {deepEqual( Stem("vitality"), "vital");});
test("vitally -> vital", function() {deepEqual( Stem("vitally"), "vital");});
test("vitals -> vital", function() {deepEqual( Stem("vitals"), "vital");});
test("vith -> vith", function() {deepEqual( Stem("vith"), "vith");});
test("vithout -> vithout", function() {deepEqual( Stem("vithout"), "vithout");});
test("vitiated -> vitiat", function() {deepEqual( Stem("vitiated"), "vitiat");});
test("vitrified -> vitrifi", function() {deepEqual( Stem("vitrified"), "vitrifi");});
test("vittles -> vittl", function() {deepEqual( Stem("vittles"), "vittl");});
test("vituperation -> vituper", function() {deepEqual( Stem("vituperation"), "vituper");});
test("vituperative -> vitup", function() {deepEqual( Stem("vituperative"), "vitup");});
test("vivacious -> vivaci", function() {deepEqual( Stem("vivacious"), "vivaci");});
test("vivacity -> vivac", function() {deepEqual( Stem("vivacity"), "vivac");});
test("vive -> vive", function() {deepEqual( Stem("vive"), "vive");});
test("vivid -> vivid", function() {deepEqual( Stem("vivid"), "vivid");});
test("vividly -> vivid", function() {deepEqual( Stem("vividly"), "vivid");});
test("vividness -> vivid", function() {deepEqual( Stem("vividness"), "vivid");});
test("vivisecting -> vivisect", function() {deepEqual( Stem("vivisecting"), "vivisect");});
test("vivoras -> vivora", function() {deepEqual( Stem("vivoras"), "vivora");});
test("vixen -> vixen", function() {deepEqual( Stem("vixen"), "vixen");});
test("vixenish -> vixenish", function() {deepEqual( Stem("vixenish"), "vixenish");});
test("viz -> viz", function() {deepEqual( Stem("viz"), "viz");});
test("vizier -> vizier", function() {deepEqual( Stem("vizier"), "vizier");});
test("vm -> vm", function() {deepEqual( Stem("vm"), "vm");});
test("vocabulary -> vocabulari", function() {deepEqual( Stem("vocabulary"), "vocabulari");});
test("vocal -> vocal", function() {deepEqual( Stem("vocal"), "vocal");});
test("vocalist -> vocalist", function() {deepEqual( Stem("vocalist"), "vocalist");});
test("vocalists -> vocalist", function() {deepEqual( Stem("vocalists"), "vocalist");});
test("vocation -> vocat", function() {deepEqual( Stem("vocation"), "vocat");});
test("voce -> voce", function() {deepEqual( Stem("voce"), "voce");});
test("vociferates -> vocifer", function() {deepEqual( Stem("vociferates"), "vocifer");});
test("vociferous -> vocifer", function() {deepEqual( Stem("vociferous"), "vocifer");});
test("vodka -> vodka", function() {deepEqual( Stem("vodka"), "vodka");});
test("vogue -> vogu", function() {deepEqual( Stem("vogue"), "vogu");});
test("voice -> voic", function() {deepEqual( Stem("voice"), "voic");});
test("voiced -> voic", function() {deepEqual( Stem("voiced"), "voic");});
test("voices -> voic", function() {deepEqual( Stem("voices"), "voic");});
test("void -> void", function() {deepEqual( Stem("void"), "void");});
test("voir -> voir", function() {deepEqual( Stem("voir"), "voir");});
test("vol -> vol", function() {deepEqual( Stem("vol"), "vol");});
test("volatile -> volatil", function() {deepEqual( Stem("volatile"), "volatil");});
test("volatilized -> volatil", function() {deepEqual( Stem("volatilized"), "volatil");});
test("volcanic -> volcan", function() {deepEqual( Stem("volcanic"), "volcan");});
test("volcano -> volcano", function() {deepEqual( Stem("volcano"), "volcano");});
test("volcanoes -> volcano", function() {deepEqual( Stem("volcanoes"), "volcano");});
test("volcanos -> volcano", function() {deepEqual( Stem("volcanos"), "volcano");});
test("volley -> volley", function() {deepEqual( Stem("volley"), "volley");});
test("volleys -> volley", function() {deepEqual( Stem("volleys"), "volley");});
test("volney -> volney", function() {deepEqual( Stem("volney"), "volney");});
test("volte -> volt", function() {deepEqual( Stem("volte"), "volt");});
test("volubility -> volubl", function() {deepEqual( Stem("volubility"), "volubl");});
test("voluble -> volubl", function() {deepEqual( Stem("voluble"), "volubl");});
test("volubly -> volubl", function() {deepEqual( Stem("volubly"), "volubl");});
test("volume -> volum", function() {deepEqual( Stem("volume"), "volum");});
test("volumes -> volum", function() {deepEqual( Stem("volumes"), "volum");});
test("voluminous -> volumin", function() {deepEqual( Stem("voluminous"), "volumin");});
test("volumnia -> volumnia", function() {deepEqual( Stem("volumnia"), "volumnia");});
test("volumnias -> volumnia", function() {deepEqual( Stem("volumnias"), "volumnia");});
test("voluntarily -> voluntarili", function() {deepEqual( Stem("voluntarily"), "voluntarili");});
test("voluntary -> voluntari", function() {deepEqual( Stem("voluntary"), "voluntari");});
test("volunteer -> volunt", function() {deepEqual( Stem("volunteer"), "volunt");});
test("volunteered -> volunt", function() {deepEqual( Stem("volunteered"), "volunt");});
test("volunteering -> volunt", function() {deepEqual( Stem("volunteering"), "volunt");});
test("voluptuous -> voluptu", function() {deepEqual( Stem("voluptuous"), "voluptu");});
test("voluta -> voluta", function() {deepEqual( Stem("voluta"), "voluta");});
test("volutas -> voluta", function() {deepEqual( Stem("volutas"), "voluta");});
test("volute -> volut", function() {deepEqual( Stem("volute"), "volut");});
test("vom -> vom", function() {deepEqual( Stem("vom"), "vom");});
test("vomit -> vomit", function() {deepEqual( Stem("vomit"), "vomit");});
test("von -> von", function() {deepEqual( Stem("von"), "von");});
test("voraciously -> voraci", function() {deepEqual( Stem("voraciously"), "voraci");});
test("vortex -> vortex", function() {deepEqual( Stem("vortex"), "vortex");});
test("vorticose -> vorticos", function() {deepEqual( Stem("vorticose"), "vorticos");});
test("voskresensky -> voskresenski", function() {deepEqual( Stem("voskresensky"), "voskresenski");});
test("votaries -> votari", function() {deepEqual( Stem("votaries"), "votari");});
test("vote -> vote", function() {deepEqual( Stem("vote"), "vote");});
test("voted -> vote", function() {deepEqual( Stem("voted"), "vote");});
test("voter -> voter", function() {deepEqual( Stem("voter"), "voter");});
test("voters -> voter", function() {deepEqual( Stem("voters"), "voter");});
test("votes -> vote", function() {deepEqual( Stem("votes"), "vote");});
test("voting -> vote", function() {deepEqual( Stem("voting"), "vote");});
test("vouch -> vouch", function() {deepEqual( Stem("vouch"), "vouch");});
test("vouches -> vouch", function() {deepEqual( Stem("vouches"), "vouch");});
test("vouchsafe -> vouchsaf", function() {deepEqual( Stem("vouchsafe"), "vouchsaf");});
test("vouchsafed -> vouchsaf", function() {deepEqual( Stem("vouchsafed"), "vouchsaf");});
test("vouchsafing -> vouchsaf", function() {deepEqual( Stem("vouchsafing"), "vouchsaf");});
test("vous -> vous", function() {deepEqual( Stem("vous"), "vous");});
test("vow -> vow", function() {deepEqual( Stem("vow"), "vow");});
test("vowed -> vow", function() {deepEqual( Stem("vowed"), "vow");});
test("vowing -> vow", function() {deepEqual( Stem("vowing"), "vow");});
test("vows -> vow", function() {deepEqual( Stem("vows"), "vow");});
test("voyage -> voyag", function() {deepEqual( Stem("voyage"), "voyag");});
test("voyager -> voyag", function() {deepEqual( Stem("voyager"), "voyag");});
test("voyagers -> voyag", function() {deepEqual( Stem("voyagers"), "voyag");});
test("voyages -> voyag", function() {deepEqual( Stem("voyages"), "voyag");});
test("voznesensky -> voznesenski", function() {deepEqual( Stem("voznesensky"), "voznesenski");});
test("vrazumihin -> vrazumihin", function() {deepEqual( Stem("vrazumihin"), "vrazumihin");});
test("vremya -> vremya", function() {deepEqual( Stem("vremya"), "vremya");});
test("vrow -> vrow", function() {deepEqual( Stem("vrow"), "vrow");});
test("vue -> vue", function() {deepEqual( Stem("vue"), "vue");});
test("vulgar -> vulgar", function() {deepEqual( Stem("vulgar"), "vulgar");});
test("vulgarest -> vulgarest", function() {deepEqual( Stem("vulgarest"), "vulgarest");});
test("vulgarise -> vulgaris", function() {deepEqual( Stem("vulgarise"), "vulgaris");});
test("vulgarity -> vulgar", function() {deepEqual( Stem("vulgarity"), "vulgar");});
test("vultur -> vultur", function() {deepEqual( Stem("vultur"), "vultur");});
test("vulture -> vultur", function() {deepEqual( Stem("vulture"), "vultur");});
test("vultures -> vultur", function() {deepEqual( Stem("vultures"), "vultur");});
test("w -> w", function() {deepEqual( Stem("w"), "w");});
test("wa -> wa", function() {deepEqual( Stem("wa"), "wa");});
test("waa -> waa", function() {deepEqual( Stem("waa"), "waa");});
test("waants -> waant", function() {deepEqual( Stem("waants"), "waant");});
test("waat -> waat", function() {deepEqual( Stem("waat"), "waat");});
test("wackford -> wackford", function() {deepEqual( Stem("wackford"), "wackford");});
test("wackfords -> wackford", function() {deepEqual( Stem("wackfords"), "wackford");});
test("wadded -> wad", function() {deepEqual( Stem("wadded"), "wad");});
test("wadding -> wad", function() {deepEqual( Stem("wadding"), "wad");});
test("waddling -> waddl", function() {deepEqual( Stem("waddling"), "waddl");});
test("wade -> wade", function() {deepEqual( Stem("wade"), "wade");});
test("waded -> wade", function() {deepEqual( Stem("waded"), "wade");});
test("waders -> wader", function() {deepEqual( Stem("waders"), "wader");});
test("wading -> wade", function() {deepEqual( Stem("wading"), "wade");});
test("wafer -> wafer", function() {deepEqual( Stem("wafer"), "wafer");});
test("wafered -> wafer", function() {deepEqual( Stem("wafered"), "wafer");});
test("wafers -> wafer", function() {deepEqual( Stem("wafers"), "wafer");});
test("waft -> waft", function() {deepEqual( Stem("waft"), "waft");});
test("wafted -> waft", function() {deepEqual( Stem("wafted"), "waft");});
test("wage -> wage", function() {deepEqual( Stem("wage"), "wage");});
test("waged -> wage", function() {deepEqual( Stem("waged"), "wage");});
test("wager -> wager", function() {deepEqual( Stem("wager"), "wager");});
test("wagers -> wager", function() {deepEqual( Stem("wagers"), "wager");});
test("wages -> wage", function() {deepEqual( Stem("wages"), "wage");});
test("wagged -> wag", function() {deepEqual( Stem("wagged"), "wag");});
test("wagging -> wag", function() {deepEqual( Stem("wagging"), "wag");});
test("waggish -> waggish", function() {deepEqual( Stem("waggish"), "waggish");});
test("waggishly -> waggish", function() {deepEqual( Stem("waggishly"), "waggish");});
test("waggon -> waggon", function() {deepEqual( Stem("waggon"), "waggon");});
test("waggoner -> waggon", function() {deepEqual( Stem("waggoner"), "waggon");});
test("waggons -> waggon", function() {deepEqual( Stem("waggons"), "waggon");});
test("wagner -> wagner", function() {deepEqual( Stem("wagner"), "wagner");});
test("wagon -> wagon", function() {deepEqual( Stem("wagon"), "wagon");});
test("wai -> wai", function() {deepEqual( Stem("wai"), "wai");});
test("wail -> wail", function() {deepEqual( Stem("wail"), "wail");});
test("wailed -> wail", function() {deepEqual( Stem("wailed"), "wail");});
test("wailing -> wail", function() {deepEqual( Stem("wailing"), "wail");});
test("wailings -> wail", function() {deepEqual( Stem("wailings"), "wail");});
test("wails -> wail", function() {deepEqual( Stem("wails"), "wail");});
test("waimate -> waimat", function() {deepEqual( Stem("waimate"), "waimat");});
test("wainscot -> wainscot", function() {deepEqual( Stem("wainscot"), "wainscot");});
test("wainscotting -> wainscot", function() {deepEqual( Stem("wainscotting"), "wainscot");});
test("waiomio -> waiomio", function() {deepEqual( Stem("waiomio"), "waiomio");});
test("waist -> waist", function() {deepEqual( Stem("waist"), "waist");});
test("waistcoat -> waistcoat", function() {deepEqual( Stem("waistcoat"), "waistcoat");});
test("waistcoats -> waistcoat", function() {deepEqual( Stem("waistcoats"), "waistcoat");});
test("waisted -> waist", function() {deepEqual( Stem("waisted"), "waist");});
test("waists -> waist", function() {deepEqual( Stem("waists"), "waist");});
test("wait -> wait", function() {deepEqual( Stem("wait"), "wait");});
test("waited -> wait", function() {deepEqual( Stem("waited"), "wait");});
test("waiter -> waiter", function() {deepEqual( Stem("waiter"), "waiter");});
test("waiters -> waiter", function() {deepEqual( Stem("waiters"), "waiter");});
test("waither -> waither", function() {deepEqual( Stem("waither"), "waither");});
test("waiting -> wait", function() {deepEqual( Stem("waiting"), "wait");});
test("waitress -> waitress", function() {deepEqual( Stem("waitress"), "waitress");});
test("waits -> wait", function() {deepEqual( Stem("waits"), "wait");});
test("wake -> wake", function() {deepEqual( Stem("wake"), "wake");});
test("waked -> wake", function() {deepEqual( Stem("waked"), "wake");});
test("wakeful -> wake", function() {deepEqual( Stem("wakeful"), "wake");});
test("wakefulness -> wake", function() {deepEqual( Stem("wakefulness"), "wake");});
test("wakened -> waken", function() {deepEqual( Stem("wakened"), "waken");});
test("wakening -> waken", function() {deepEqual( Stem("wakening"), "waken");});
test("wakes -> wake", function() {deepEqual( Stem("wakes"), "wake");});
test("waking -> wake", function() {deepEqual( Stem("waking"), "wake");});
test("wakken -> wakken", function() {deepEqual( Stem("wakken"), "wakken");});
test("walckanaer -> walckana", function() {deepEqual( Stem("walckanaer"), "walckana");});
test("walcot -> walcot", function() {deepEqual( Stem("walcot"), "walcot");});
test("wale -> wale", function() {deepEqual( Stem("wale"), "wale");});
test("walerawang -> walerawang", function() {deepEqual( Stem("walerawang"), "walerawang");});
test("wales -> wale", function() {deepEqual( Stem("wales"), "wale");});
test("walk -> walk", function() {deepEqual( Stem("walk"), "walk");});
test("walked -> walk", function() {deepEqual( Stem("walked"), "walk");});
test("walker -> walker", function() {deepEqual( Stem("walker"), "walker");});
test("walketh -> walketh", function() {deepEqual( Stem("walketh"), "walketh");});
test("walking -> walk", function() {deepEqual( Stem("walking"), "walk");});
test("walks -> walk", function() {deepEqual( Stem("walks"), "walk");});
test("wall -> wall", function() {deepEqual( Stem("wall"), "wall");});
test("walled -> wall", function() {deepEqual( Stem("walled"), "wall");});
test("walleechu -> walleechu", function() {deepEqual( Stem("walleechu"), "walleechu");});
test("wallenstein -> wallenstein", function() {deepEqual( Stem("wallenstein"), "wallenstein");});
test("wallflower -> wallflow", function() {deepEqual( Stem("wallflower"), "wallflow");});
test("wallflowers -> wallflow", function() {deepEqual( Stem("wallflowers"), "wallflow");});
test("wallow -> wallow", function() {deepEqual( Stem("wallow"), "wallow");});
test("wallowing -> wallow", function() {deepEqual( Stem("wallowing"), "wallow");});
test("walls -> wall", function() {deepEqual( Stem("walls"), "wall");});
test("walnut -> walnut", function() {deepEqual( Stem("walnut"), "walnut");});
test("walpole -> walpol", function() {deepEqual( Stem("walpole"), "walpol");});
test("walter -> walter", function() {deepEqual( Stem("walter"), "walter");});
test("walting -> walt", function() {deepEqual( Stem("walting"), "walt");});
test("waltz -> waltz", function() {deepEqual( Stem("waltz"), "waltz");});
test("waltzed -> waltz", function() {deepEqual( Stem("waltzed"), "waltz");});
test("waltzes -> waltz", function() {deepEqual( Stem("waltzes"), "waltz");});
test("waltzing -> waltz", function() {deepEqual( Stem("waltzing"), "waltz");});
test("wan -> wan", function() {deepEqual( Stem("wan"), "wan");});
test("wand -> wand", function() {deepEqual( Stem("wand"), "wand");});
test("wander -> wander", function() {deepEqual( Stem("wander"), "wander");});
test("wandered -> wander", function() {deepEqual( Stem("wandered"), "wander");});
test("wanderer -> wander", function() {deepEqual( Stem("wanderer"), "wander");});
test("wanderers -> wander", function() {deepEqual( Stem("wanderers"), "wander");});
test("wandering -> wander", function() {deepEqual( Stem("wandering"), "wander");});
test("wanderings -> wander", function() {deepEqual( Stem("wanderings"), "wander");});
test("wanders -> wander", function() {deepEqual( Stem("wanders"), "wander");});
test("wands -> wand", function() {deepEqual( Stem("wands"), "wand");});
test("wane -> wane", function() {deepEqual( Stem("wane"), "wane");});
test("waned -> wane", function() {deepEqual( Stem("waned"), "wane");});
test("wanness -> wan", function() {deepEqual( Stem("wanness"), "wan");});
test("wanst -> wanst", function() {deepEqual( Stem("wanst"), "wanst");});
test("want -> want", function() {deepEqual( Stem("want"), "want");});
test("wanted -> want", function() {deepEqual( Stem("wanted"), "want");});
test("wanting -> want", function() {deepEqual( Stem("wanting"), "want");});
test("wanton -> wanton", function() {deepEqual( Stem("wanton"), "wanton");});
test("wantonly -> wanton", function() {deepEqual( Stem("wantonly"), "wanton");});
test("wantonness -> wanton", function() {deepEqual( Stem("wantonness"), "wanton");});
test("wants -> want", function() {deepEqual( Stem("wants"), "want");});
test("war -> war", function() {deepEqual( Stem("war"), "war");});
test("warbler -> warbler", function() {deepEqual( Stem("warbler"), "warbler");});
test("warbling -> warbl", function() {deepEqual( Stem("warbling"), "warbl");});
test("warburton -> warburton", function() {deepEqual( Stem("warburton"), "warburton");});
test("ward -> ward", function() {deepEqual( Stem("ward"), "ward");});
test("warded -> ward", function() {deepEqual( Stem("warded"), "ward");});
test("warder -> warder", function() {deepEqual( Stem("warder"), "warder");});
test("warding -> ward", function() {deepEqual( Stem("warding"), "ward");});
test("wardrobe -> wardrob", function() {deepEqual( Stem("wardrobe"), "wardrob");});
test("wardrobes -> wardrob", function() {deepEqual( Stem("wardrobes"), "wardrob");});
test("wards -> ward", function() {deepEqual( Stem("wards"), "ward");});
test("ware -> ware", function() {deepEqual( Stem("ware"), "ware");});
test("warehouse -> warehous", function() {deepEqual( Stem("warehouse"), "warehous");});
test("warehousemen -> warehousemen", function() {deepEqual( Stem("warehousemen"), "warehousemen");});
test("warehouses -> warehous", function() {deepEqual( Stem("warehouses"), "warehous");});
test("wares -> ware", function() {deepEqual( Stem("wares"), "ware");});
test("warfare -> warfar", function() {deepEqual( Stem("warfare"), "warfar");});
test("warhorse -> warhors", function() {deepEqual( Stem("warhorse"), "warhors");});
test("warily -> warili", function() {deepEqual( Stem("warily"), "warili");});
test("warking -> wark", function() {deepEqual( Stem("warking"), "wark");});
test("warlike -> warlik", function() {deepEqual( Stem("warlike"), "warlik");});
test("warm -> warm", function() {deepEqual( Stem("warm"), "warm");});
test("warmed -> warm", function() {deepEqual( Stem("warmed"), "warm");});
test("warmer -> warmer", function() {deepEqual( Stem("warmer"), "warmer");});
test("warmest -> warmest", function() {deepEqual( Stem("warmest"), "warmest");});
test("warmhearted -> warmheart", function() {deepEqual( Stem("warmhearted"), "warmheart");});
test("warming -> warm", function() {deepEqual( Stem("warming"), "warm");});
test("warmly -> warm", function() {deepEqual( Stem("warmly"), "warm");});
test("warms -> warm", function() {deepEqual( Stem("warms"), "warm");});
test("warmth -> warmth", function() {deepEqual( Stem("warmth"), "warmth");});
test("warn -> warn", function() {deepEqual( Stem("warn"), "warn");});
test("warned -> warn", function() {deepEqual( Stem("warned"), "warn");});
test("warning -> warn", function() {deepEqual( Stem("warning"), "warn");});
test("warnings -> warn", function() {deepEqual( Stem("warnings"), "warn");});
test("warped -> warp", function() {deepEqual( Stem("warped"), "warp");});
test("warrant -> warrant", function() {deepEqual( Stem("warrant"), "warrant");});
test("warranted -> warrant", function() {deepEqual( Stem("warranted"), "warrant");});
test("warrants -> warrant", function() {deepEqual( Stem("warrants"), "warrant");});
test("warrens -> warren", function() {deepEqual( Stem("warrens"), "warren");});
test("warring -> war", function() {deepEqual( Stem("warring"), "war");});
test("warrior -> warrior", function() {deepEqual( Stem("warrior"), "warrior");});
test("warriors -> warrior", function() {deepEqual( Stem("warriors"), "warrior");});
test("warrn -> warrn", function() {deepEqual( Stem("warrn"), "warrn");});
test("wars -> war", function() {deepEqual( Stem("wars"), "war");});
test("wart -> wart", function() {deepEqual( Stem("wart"), "wart");});
test("warted -> wart", function() {deepEqual( Stem("warted"), "wart");});
test("warts -> wart", function() {deepEqual( Stem("warts"), "wart");});
test("warwick -> warwick", function() {deepEqual( Stem("warwick"), "warwick");});
test("wary -> wari", function() {deepEqual( Stem("wary"), "wari");});
test("was -> was", function() {deepEqual( Stem("was"), "was");});
test("wasche -> wasch", function() {deepEqual( Stem("wasche"), "wasch");});
test("wash -> wash", function() {deepEqual( Stem("wash"), "wash");});
test("washed -> wash", function() {deepEqual( Stem("washed"), "wash");});
test("washerwoman -> washerwoman", function() {deepEqual( Stem("washerwoman"), "washerwoman");});
test("washery -> washeri", function() {deepEqual( Stem("washery"), "washeri");});
test("washes -> wash", function() {deepEqual( Stem("washes"), "wash");});
test("washin -> washin", function() {deepEqual( Stem("washin"), "washin");});
test("washing -> wash", function() {deepEqual( Stem("washing"), "wash");});
test("washings -> wash", function() {deepEqual( Stem("washings"), "wash");});
test("wasn -> wasn", function() {deepEqual( Stem("wasn"), "wasn");});
test("wasp -> wasp", function() {deepEqual( Stem("wasp"), "wasp");});
test("waste -> wast", function() {deepEqual( Stem("waste"), "wast");});
test("wasted -> wast", function() {deepEqual( Stem("wasted"), "wast");});
test("wasteful -> wast", function() {deepEqual( Stem("wasteful"), "wast");});
test("wastefulness -> wast", function() {deepEqual( Stem("wastefulness"), "wast");});
test("wastes -> wast", function() {deepEqual( Stem("wastes"), "wast");});
test("wasting -> wast", function() {deepEqual( Stem("wasting"), "wast");});
test("wat -> wat", function() {deepEqual( Stem("wat"), "wat");});
test("watch -> watch", function() {deepEqual( Stem("watch"), "watch");});
test("watched -> watch", function() {deepEqual( Stem("watched"), "watch");});
test("watcher -> watcher", function() {deepEqual( Stem("watcher"), "watcher");});
test("watchers -> watcher", function() {deepEqual( Stem("watchers"), "watcher");});
test("watches -> watch", function() {deepEqual( Stem("watches"), "watch");});
test("watchful -> watch", function() {deepEqual( Stem("watchful"), "watch");});
test("watchfully -> watch", function() {deepEqual( Stem("watchfully"), "watch");});
test("watchfulness -> watch", function() {deepEqual( Stem("watchfulness"), "watch");});
test("watching -> watch", function() {deepEqual( Stem("watching"), "watch");});
test("watchings -> watch", function() {deepEqual( Stem("watchings"), "watch");});
test("watchmaker -> watchmak", function() {deepEqual( Stem("watchmaker"), "watchmak");});
test("watchman -> watchman", function() {deepEqual( Stem("watchman"), "watchman");});
test("watchmen -> watchmen", function() {deepEqual( Stem("watchmen"), "watchmen");});
test("water -> water", function() {deepEqual( Stem("water"), "water");});
test("watercourse -> watercours", function() {deepEqual( Stem("watercourse"), "watercours");});
test("watered -> water", function() {deepEqual( Stem("watered"), "water");});
test("waterfall -> waterfal", function() {deepEqual( Stem("waterfall"), "waterfal");});
test("waterfalls -> waterfal", function() {deepEqual( Stem("waterfalls"), "waterfal");});
test("waterfloods -> waterflood", function() {deepEqual( Stem("waterfloods"), "waterflood");});
test("waterfowl -> waterfowl", function() {deepEqual( Stem("waterfowl"), "waterfowl");});
test("waterhouse -> waterhous", function() {deepEqual( Stem("waterhouse"), "waterhous");});
test("watering -> water", function() {deepEqual( Stem("watering"), "water");});
test("waterloo -> waterloo", function() {deepEqual( Stem("waterloo"), "waterloo");});
test("waterproof -> waterproof", function() {deepEqual( Stem("waterproof"), "waterproof");});
test("waters -> water", function() {deepEqual( Stem("waters"), "water");});
test("watershed -> watersh", function() {deepEqual( Stem("watershed"), "watersh");});
test("waterside -> watersid", function() {deepEqual( Stem("waterside"), "watersid");});
test("waterwheel -> waterwheel", function() {deepEqual( Stem("waterwheel"), "waterwheel");});
test("waterworn -> waterworn", function() {deepEqual( Stem("waterworn"), "waterworn");});
test("watery -> wateri", function() {deepEqual( Stem("watery"), "wateri");});
test("wather -> wather", function() {deepEqual( Stem("wather"), "wather");});
test("watkins -> watkin", function() {deepEqual( Stem("watkins"), "watkin");});
test("watt -> watt", function() {deepEqual( Stem("watt"), "watt");});
test("watts -> watt", function() {deepEqual( Stem("watts"), "watt");});
test("wave -> wave", function() {deepEqual( Stem("wave"), "wave");});
test("waved -> wave", function() {deepEqual( Stem("waved"), "wave");});
test("wavered -> waver", function() {deepEqual( Stem("wavered"), "waver");});
test("wavering -> waver", function() {deepEqual( Stem("wavering"), "waver");});
test("waves -> wave", function() {deepEqual( Stem("waves"), "wave");});
test("waving -> wave", function() {deepEqual( Stem("waving"), "wave");});
test("wavy -> wavi", function() {deepEqual( Stem("wavy"), "wavi");});
test("wax -> wax", function() {deepEqual( Stem("wax"), "wax");});
test("waxed -> wax", function() {deepEqual( Stem("waxed"), "wax");});
test("waxen -> waxen", function() {deepEqual( Stem("waxen"), "waxen");});
test("waxing -> wax", function() {deepEqual( Stem("waxing"), "wax");});
test("waxy -> waxi", function() {deepEqual( Stem("waxy"), "waxi");});
test("way -> way", function() {deepEqual( Stem("way"), "way");});
test("wayfarer -> wayfar", function() {deepEqual( Stem("wayfarer"), "wayfar");});
test("wayfarers -> wayfar", function() {deepEqual( Stem("wayfarers"), "wayfar");});
test("waylaid -> waylaid", function() {deepEqual( Stem("waylaid"), "waylaid");});
test("waylay -> waylay", function() {deepEqual( Stem("waylay"), "waylay");});
test("ways -> way", function() {deepEqual( Stem("ways"), "way");});
test("wayside -> waysid", function() {deepEqual( Stem("wayside"), "waysid");});
test("wayward -> wayward", function() {deepEqual( Stem("wayward"), "wayward");});
test("waywardness -> wayward", function() {deepEqual( Stem("waywardness"), "wayward");});
test("we -> we", function() {deepEqual( Stem("we"), "we");});
test("weak -> weak", function() {deepEqual( Stem("weak"), "weak");});
test("weaken -> weaken", function() {deepEqual( Stem("weaken"), "weaken");});
test("weakened -> weaken", function() {deepEqual( Stem("weakened"), "weaken");});
test("weakening -> weaken", function() {deepEqual( Stem("weakening"), "weaken");});
test("weaker -> weaker", function() {deepEqual( Stem("weaker"), "weaker");});
test("weakest -> weakest", function() {deepEqual( Stem("weakest"), "weakest");});
test("weakly -> weak", function() {deepEqual( Stem("weakly"), "weak");});
test("weakness -> weak", function() {deepEqual( Stem("weakness"), "weak");});
test("weaknesses -> weak", function() {deepEqual( Stem("weaknesses"), "weak");});
test("weals -> weal", function() {deepEqual( Stem("weals"), "weal");});
test("wealth -> wealth", function() {deepEqual( Stem("wealth"), "wealth");});
test("wealthy -> wealthi", function() {deepEqual( Stem("wealthy"), "wealthi");});
test("wean -> wean", function() {deepEqual( Stem("wean"), "wean");});
test("weaning -> wean", function() {deepEqual( Stem("weaning"), "wean");});
test("weapon -> weapon", function() {deepEqual( Stem("weapon"), "weapon");});
test("weapons -> weapon", function() {deepEqual( Stem("weapons"), "weapon");});
test("wear -> wear", function() {deepEqual( Stem("wear"), "wear");});
test("wearer -> wearer", function() {deepEqual( Stem("wearer"), "wearer");});
test("wearers -> wearer", function() {deepEqual( Stem("wearers"), "wearer");});
test("wearied -> weari", function() {deepEqual( Stem("wearied"), "weari");});
test("wearily -> wearili", function() {deepEqual( Stem("wearily"), "wearili");});
test("weariness -> weari", function() {deepEqual( Stem("weariness"), "weari");});
test("wearing -> wear", function() {deepEqual( Stem("wearing"), "wear");});
test("wearisome -> wearisom", function() {deepEqual( Stem("wearisome"), "wearisom");});
test("wears -> wear", function() {deepEqual( Stem("wears"), "wear");});
test("weary -> weari", function() {deepEqual( Stem("weary"), "weari");});
test("wearying -> weari", function() {deepEqual( Stem("wearying"), "weari");});
test("weasen -> weasen", function() {deepEqual( Stem("weasen"), "weasen");});
test("weather -> weather", function() {deepEqual( Stem("weather"), "weather");});
test("weatherboard -> weatherboard", function() {deepEqual( Stem("weatherboard"), "weatherboard");});
test("weathercock -> weathercock", function() {deepEqual( Stem("weathercock"), "weathercock");});
test("weathered -> weather", function() {deepEqual( Stem("weathered"), "weather");});
test("weathers -> weather", function() {deepEqual( Stem("weathers"), "weather");});
test("weave -> weav", function() {deepEqual( Stem("weave"), "weav");});
test("weavers -> weaver", function() {deepEqual( Stem("weavers"), "weaver");});
test("weaving -> weav", function() {deepEqual( Stem("weaving"), "weav");});
test("weazen -> weazen", function() {deepEqual( Stem("weazen"), "weazen");});
test("weazened -> weazen", function() {deepEqual( Stem("weazened"), "weazen");});
test("web -> web", function() {deepEqual( Stem("web"), "web");});
test("webb -> webb", function() {deepEqual( Stem("webb"), "webb");});
test("webbed -> web", function() {deepEqual( Stem("webbed"), "web");});
test("webs -> web", function() {deepEqual( Stem("webs"), "web");});
test("webster -> webster", function() {deepEqual( Stem("webster"), "webster");});
test("wed -> wed", function() {deepEqual( Stem("wed"), "wed");});
test("wedded -> wed", function() {deepEqual( Stem("wedded"), "wed");});
test("weddin -> weddin", function() {deepEqual( Stem("weddin"), "weddin");});
test("wedding -> wed", function() {deepEqual( Stem("wedding"), "wed");});
test("weddings -> wed", function() {deepEqual( Stem("weddings"), "wed");});
test("wedge -> wedg", function() {deepEqual( Stem("wedge"), "wedg");});
test("wedged -> wedg", function() {deepEqual( Stem("wedged"), "wedg");});
test("wedges -> wedg", function() {deepEqual( Stem("wedges"), "wedg");});
test("wedlock -> wedlock", function() {deepEqual( Stem("wedlock"), "wedlock");});
test("wednesday -> wednesday", function() {deepEqual( Stem("wednesday"), "wednesday");});
test("wednesdays -> wednesday", function() {deepEqual( Stem("wednesdays"), "wednesday");});
test("weed -> weed", function() {deepEqual( Stem("weed"), "weed");});
test("weeding -> weed", function() {deepEqual( Stem("weeding"), "weed");});
test("weeds -> weed", function() {deepEqual( Stem("weeds"), "weed");});
test("weedur -> weedur", function() {deepEqual( Stem("weedur"), "weedur");});
test("weedy -> weedi", function() {deepEqual( Stem("weedy"), "weedi");});
test("week -> week", function() {deepEqual( Stem("week"), "week");});
test("weekly -> week", function() {deepEqual( Stem("weekly"), "week");});
test("weeks -> week", function() {deepEqual( Stem("weeks"), "week");});
test("weel -> weel", function() {deepEqual( Stem("weel"), "weel");});
test("weep -> weep", function() {deepEqual( Stem("weep"), "weep");});
test("weepers -> weeper", function() {deepEqual( Stem("weepers"), "weeper");});
test("weeping -> weep", function() {deepEqual( Stem("weeping"), "weep");});
test("weeps -> weep", function() {deepEqual( Stem("weeps"), "weep");});
test("weevle -> weevl", function() {deepEqual( Stem("weevle"), "weevl");});
test("wehr -> wehr", function() {deepEqual( Stem("wehr"), "wehr");});
test("weigh -> weigh", function() {deepEqual( Stem("weigh"), "weigh");});
test("weighed -> weigh", function() {deepEqual( Stem("weighed"), "weigh");});
test("weighing -> weigh", function() {deepEqual( Stem("weighing"), "weigh");});
test("weighs -> weigh", function() {deepEqual( Stem("weighs"), "weigh");});
test("weight -> weight", function() {deepEqual( Stem("weight"), "weight");});
test("weightily -> weightili", function() {deepEqual( Stem("weightily"), "weightili");});
test("weights -> weight", function() {deepEqual( Stem("weights"), "weight");});
test("weighty -> weighti", function() {deepEqual( Stem("weighty"), "weighti");});
test("weir -> weir", function() {deepEqual( Stem("weir"), "weir");});
test("weird -> weird", function() {deepEqual( Stem("weird"), "weird");});
test("weirs -> weir", function() {deepEqual( Stem("weirs"), "weir");});
test("weise -> weis", function() {deepEqual( Stem("weise"), "weis");});
test("welcome -> welcom", function() {deepEqual( Stem("welcome"), "welcom");});
test("welcomed -> welcom", function() {deepEqual( Stem("welcomed"), "welcom");});
test("welcomer -> welcom", function() {deepEqual( Stem("welcomer"), "welcom");});
test("welcomes -> welcom", function() {deepEqual( Stem("welcomes"), "welcom");});
test("welcoming -> welcom", function() {deepEqual( Stem("welcoming"), "welcom");});
test("welfare -> welfar", function() {deepEqual( Stem("welfare"), "welfar");});
test("well -> well", function() {deepEqual( Stem("well"), "well");});
test("wellington -> wellington", function() {deepEqual( Stem("wellington"), "wellington");});
test("wells -> well", function() {deepEqual( Stem("wells"), "well");});
test("welsh -> welsh", function() {deepEqual( Stem("welsh"), "welsh");});
test("weltering -> welter", function() {deepEqual( Stem("weltering"), "welter");});
test("welveteen -> welveteen", function() {deepEqual( Stem("welveteen"), "welveteen");});
test("wen -> wen", function() {deepEqual( Stem("wen"), "wen");});
test("wench -> wench", function() {deepEqual( Stem("wench"), "wench");});
test("wenches -> wench", function() {deepEqual( Stem("wenches"), "wench");});
test("wend -> wend", function() {deepEqual( Stem("wend"), "wend");});
test("wended -> wend", function() {deepEqual( Stem("wended"), "wend");});
test("wending -> wend", function() {deepEqual( Stem("wending"), "wend");});
test("wengeance -> wengeanc", function() {deepEqual( Stem("wengeance"), "wengeanc");});
test("went -> went", function() {deepEqual( Stem("went"), "went");});
test("weobly -> weobli", function() {deepEqual( Stem("weobly"), "weobli");});
test("wepping -> wep", function() {deepEqual( Stem("wepping"), "wep");});
test("wept -> wept", function() {deepEqual( Stem("wept"), "wept");});
test("wer -> wer", function() {deepEqual( Stem("wer"), "wer");});
test("were -> were", function() {deepEqual( Stem("were"), "were");});
test("weren -> weren", function() {deepEqual( Stem("weren"), "weren");});
test("werry -> werri", function() {deepEqual( Stem("werry"), "werri");});
test("wery -> weri", function() {deepEqual( Stem("wery"), "weri");});
test("wessel -> wessel", function() {deepEqual( Stem("wessel"), "wessel");});
test("west -> west", function() {deepEqual( Stem("west"), "west");});
test("westerly -> wester", function() {deepEqual( Stem("westerly"), "wester");});
test("western -> western", function() {deepEqual( Stem("western"), "western");});
test("westminster -> westminst", function() {deepEqual( Stem("westminster"), "westminst");});
test("westmoreland -> westmoreland", function() {deepEqual( Stem("westmoreland"), "westmoreland");});
test("westward -> westward", function() {deepEqual( Stem("westward"), "westward");});
test("westwood -> westwood", function() {deepEqual( Stem("westwood"), "westwood");});
test("wet -> wet", function() {deepEqual( Stem("wet"), "wet");});
test("wets -> wet", function() {deepEqual( Stem("wets"), "wet");});
test("wetted -> wet", function() {deepEqual( Stem("wetted"), "wet");});
test("wettest -> wettest", function() {deepEqual( Stem("wettest"), "wettest");});
test("wetting -> wet", function() {deepEqual( Stem("wetting"), "wet");});
test("wexed -> wex", function() {deepEqual( Stem("wexed"), "wex");});
test("wha -> wha", function() {deepEqual( Stem("wha"), "wha");});
test("whale -> whale", function() {deepEqual( Stem("whale"), "whale");});
test("whalebones -> whalebon", function() {deepEqual( Stem("whalebones"), "whalebon");});
test("whaler -> whaler", function() {deepEqual( Stem("whaler"), "whaler");});
test("whalers -> whaler", function() {deepEqual( Stem("whalers"), "whaler");});
test("whalery -> whaleri", function() {deepEqual( Stem("whalery"), "whaleri");});
test("whales -> whale", function() {deepEqual( Stem("whales"), "whale");});
test("whaling -> whale", function() {deepEqual( Stem("whaling"), "whale");});
test("wharf -> wharf", function() {deepEqual( Stem("wharf"), "wharf");});
test("wharton -> wharton", function() {deepEqual( Stem("wharton"), "wharton");});
test("whartons -> wharton", function() {deepEqual( Stem("whartons"), "wharton");});
test("wharves -> wharv", function() {deepEqual( Stem("wharves"), "wharv");});
test("what -> what", function() {deepEqual( Stem("what"), "what");});
test("whate -> whate", function() {deepEqual( Stem("whate"), "whate");});
test("whatever -> whatev", function() {deepEqual( Stem("whatever"), "whatev");});
test("whatsername -> whatsernam", function() {deepEqual( Stem("whatsername"), "whatsernam");});
test("whatsoever -> whatsoev", function() {deepEqual( Stem("whatsoever"), "whatsoev");});
test("whe -> whe", function() {deepEqual( Stem("whe"), "whe");});
test("wheat -> wheat", function() {deepEqual( Stem("wheat"), "wheat");});
test("wheedled -> wheedl", function() {deepEqual( Stem("wheedled"), "wheedl");});
test("wheedlin -> wheedlin", function() {deepEqual( Stem("wheedlin"), "wheedlin");});
test("wheel -> wheel", function() {deepEqual( Stem("wheel"), "wheel");});
test("wheelbarrow -> wheelbarrow", function() {deepEqual( Stem("wheelbarrow"), "wheelbarrow");});
test("wheelbarrowful -> wheelbarrow", function() {deepEqual( Stem("wheelbarrowful"), "wheelbarrow");});
test("wheeled -> wheel", function() {deepEqual( Stem("wheeled"), "wheel");});
test("wheeling -> wheel", function() {deepEqual( Stem("wheeling"), "wheel");});
test("wheels -> wheel", function() {deepEqual( Stem("wheels"), "wheel");});
test("wheelwright -> wheelwright", function() {deepEqual( Stem("wheelwright"), "wheelwright");});
test("wheeze -> wheez", function() {deepEqual( Stem("wheeze"), "wheez");});
test("wheezing -> wheez", function() {deepEqual( Stem("wheezing"), "wheez");});
test("when -> when", function() {deepEqual( Stem("when"), "when");});
test("whence -> whenc", function() {deepEqual( Stem("whence"), "whenc");});
test("whenever -> whenev", function() {deepEqual( Stem("whenever"), "whenev");});
test("whensoever -> whensoev", function() {deepEqual( Stem("whensoever"), "whensoev");});
test("wher -> wher", function() {deepEqual( Stem("wher"), "wher");});
test("where -> where", function() {deepEqual( Stem("where"), "where");});
test("whereabout -> whereabout", function() {deepEqual( Stem("whereabout"), "whereabout");});
test("whereabouts -> whereabout", function() {deepEqual( Stem("whereabouts"), "whereabout");});
test("whereas -> wherea", function() {deepEqual( Stem("whereas"), "wherea");});
test("whereat -> whereat", function() {deepEqual( Stem("whereat"), "whereat");});
test("whereby -> wherebi", function() {deepEqual( Stem("whereby"), "wherebi");});
test("wherefore -> wherefor", function() {deepEqual( Stem("wherefore"), "wherefor");});
test("wherein -> wherein", function() {deepEqual( Stem("wherein"), "wherein");});
test("whereof -> whereof", function() {deepEqual( Stem("whereof"), "whereof");});
test("whereon -> whereon", function() {deepEqual( Stem("whereon"), "whereon");});
test("wheresoever -> wheresoev", function() {deepEqual( Stem("wheresoever"), "wheresoev");});
test("whereupon -> whereupon", function() {deepEqual( Stem("whereupon"), "whereupon");});
test("whereve -> wherev", function() {deepEqual( Stem("whereve"), "wherev");});
test("wherever -> wherev", function() {deepEqual( Stem("wherever"), "wherev");});
test("wherewith -> wherewith", function() {deepEqual( Stem("wherewith"), "wherewith");});
test("whet -> whet", function() {deepEqual( Stem("whet"), "whet");});
test("whethe -> wheth", function() {deepEqual( Stem("whethe"), "wheth");});
test("whether -> whether", function() {deepEqual( Stem("whether"), "whether");});
test("whew -> whew", function() {deepEqual( Stem("whew"), "whew");});
test("whey -> whey", function() {deepEqual( Stem("whey"), "whey");});
test("whic -> whic", function() {deepEqual( Stem("whic"), "whic");});
test("which -> which", function() {deepEqual( Stem("which"), "which");});
test("whichever -> whichev", function() {deepEqual( Stem("whichever"), "whichev");});
test("whichsoever -> whichsoev", function() {deepEqual( Stem("whichsoever"), "whichsoev");});
test("whiff -> whiff", function() {deepEqual( Stem("whiff"), "whiff");});
test("whig -> whig", function() {deepEqual( Stem("whig"), "whig");});
test("whigs -> whig", function() {deepEqual( Stem("whigs"), "whig");});
test("while -> while", function() {deepEqual( Stem("while"), "while");});
test("whiles -> while", function() {deepEqual( Stem("whiles"), "while");});
test("whilst -> whilst", function() {deepEqual( Stem("whilst"), "whilst");});
test("whim -> whim", function() {deepEqual( Stem("whim"), "whim");});
test("whimper -> whimper", function() {deepEqual( Stem("whimper"), "whimper");});
test("whimpered -> whimper", function() {deepEqual( Stem("whimpered"), "whimper");});
test("whimpering -> whimper", function() {deepEqual( Stem("whimpering"), "whimper");});
test("whimpers -> whimper", function() {deepEqual( Stem("whimpers"), "whimper");});
test("whims -> whim", function() {deepEqual( Stem("whims"), "whim");});
test("whimsical -> whimsic", function() {deepEqual( Stem("whimsical"), "whimsic");});
test("whimsically -> whimsic", function() {deepEqual( Stem("whimsically"), "whimsic");});
test("whined -> whine", function() {deepEqual( Stem("whined"), "whine");});
test("whines -> whine", function() {deepEqual( Stem("whines"), "whine");});
test("whining -> whine", function() {deepEqual( Stem("whining"), "whine");});
test("whinstone -> whinston", function() {deepEqual( Stem("whinstone"), "whinston");});
test("whip -> whip", function() {deepEqual( Stem("whip"), "whip");});
test("whipcord -> whipcord", function() {deepEqual( Stem("whipcord"), "whipcord");});
test("whipped -> whip", function() {deepEqual( Stem("whipped"), "whip");});
test("whipper -> whipper", function() {deepEqual( Stem("whipper"), "whipper");});
test("whipping -> whip", function() {deepEqual( Stem("whipping"), "whip");});
test("whips -> whip", function() {deepEqual( Stem("whips"), "whip");});
test("whipster -> whipster", function() {deepEqual( Stem("whipster"), "whipster");});
test("whipt -> whipt", function() {deepEqual( Stem("whipt"), "whipt");});
test("whirl -> whirl", function() {deepEqual( Stem("whirl"), "whirl");});
test("whirled -> whirl", function() {deepEqual( Stem("whirled"), "whirl");});
test("whirling -> whirl", function() {deepEqual( Stem("whirling"), "whirl");});
test("whirlpool -> whirlpool", function() {deepEqual( Stem("whirlpool"), "whirlpool");});
test("whirls -> whirl", function() {deepEqual( Stem("whirls"), "whirl");});
test("whirlwind -> whirlwind", function() {deepEqual( Stem("whirlwind"), "whirlwind");});
test("whirr -> whirr", function() {deepEqual( Stem("whirr"), "whirr");});
test("whish -> whish", function() {deepEqual( Stem("whish"), "whish");});
test("whisk -> whisk", function() {deepEqual( Stem("whisk"), "whisk");});
test("whisked -> whisk", function() {deepEqual( Stem("whisked"), "whisk");});
test("whisker -> whisker", function() {deepEqual( Stem("whisker"), "whisker");});
test("whiskered -> whisker", function() {deepEqual( Stem("whiskered"), "whisker");});
test("whiskers -> whisker", function() {deepEqual( Stem("whiskers"), "whisker");});
test("whisking -> whisk", function() {deepEqual( Stem("whisking"), "whisk");});
test("whisky -> whiski", function() {deepEqual( Stem("whisky"), "whiski");});
test("whisper -> whisper", function() {deepEqual( Stem("whisper"), "whisper");});
test("whispered -> whisper", function() {deepEqual( Stem("whispered"), "whisper");});
test("whisperers -> whisper", function() {deepEqual( Stem("whisperers"), "whisper");});
test("whispering -> whisper", function() {deepEqual( Stem("whispering"), "whisper");});
test("whisperings -> whisper", function() {deepEqual( Stem("whisperings"), "whisper");});
test("whisperirig -> whisperirig", function() {deepEqual( Stem("whisperirig"), "whisperirig");});
test("whispers -> whisper", function() {deepEqual( Stem("whispers"), "whisper");});
test("whist -> whist", function() {deepEqual( Stem("whist"), "whist");});
test("whistle -> whistl", function() {deepEqual( Stem("whistle"), "whistl");});
test("whistled -> whistl", function() {deepEqual( Stem("whistled"), "whistl");});
test("whistles -> whistl", function() {deepEqual( Stem("whistles"), "whistl");});
test("whistling -> whistl", function() {deepEqual( Stem("whistling"), "whistl");});
test("whit -> whit", function() {deepEqual( Stem("whit"), "whit");});
test("white -> white", function() {deepEqual( Stem("white"), "white");});
test("whitechapel -> whitechapel", function() {deepEqual( Stem("whitechapel"), "whitechapel");});
test("whiteford -> whiteford", function() {deepEqual( Stem("whiteford"), "whiteford");});
test("whitefriars -> whitefriar", function() {deepEqual( Stem("whitefriars"), "whitefriar");});
test("whitened -> whiten", function() {deepEqual( Stem("whitened"), "whiten");});
test("whiteness -> white", function() {deepEqual( Stem("whiteness"), "white");});
test("whitening -> whiten", function() {deepEqual( Stem("whitening"), "whiten");});
test("whiter -> whiter", function() {deepEqual( Stem("whiter"), "whiter");});
test("whites -> white", function() {deepEqual( Stem("whites"), "white");});
test("whitest -> whitest", function() {deepEqual( Stem("whitest"), "whitest");});
test("whitewash -> whitewash", function() {deepEqual( Stem("whitewash"), "whitewash");});
test("whitewashed -> whitewash", function() {deepEqual( Stem("whitewashed"), "whitewash");});
test("whitewashing -> whitewash", function() {deepEqual( Stem("whitewashing"), "whitewash");});
test("whitey -> whitey", function() {deepEqual( Stem("whitey"), "whitey");});
test("whitford -> whitford", function() {deepEqual( Stem("whitford"), "whitford");});
test("whither -> whither", function() {deepEqual( Stem("whither"), "whither");});
test("whitish -> whitish", function() {deepEqual( Stem("whitish"), "whitish");});
test("whitsunday -> whitsunday", function() {deepEqual( Stem("whitsunday"), "whitsunday");});
test("whitsuntide -> whitsuntid", function() {deepEqual( Stem("whitsuntide"), "whitsuntid");});
test("whittington -> whittington", function() {deepEqual( Stem("whittington"), "whittington");});
test("whity -> whiti", function() {deepEqual( Stem("whity"), "whiti");});
test("who -> who", function() {deepEqual( Stem("who"), "who");});
test("whoam -> whoam", function() {deepEqual( Stem("whoam"), "whoam");});
test("whoever -> whoever", function() {deepEqual( Stem("whoever"), "whoever");});
test("whol -> whol", function() {deepEqual( Stem("whol"), "whol");});
test("whole -> whole", function() {deepEqual( Stem("whole"), "whole");});
test("wholesale -> wholesal", function() {deepEqual( Stem("wholesale"), "wholesal");});
test("wholesome -> wholesom", function() {deepEqual( Stem("wholesome"), "wholesom");});
test("wholesomely -> wholesom", function() {deepEqual( Stem("wholesomely"), "wholesom");});
test("wholesomer -> wholesom", function() {deepEqual( Stem("wholesomer"), "wholesom");});
test("wholly -> wholli", function() {deepEqual( Stem("wholly"), "wholli");});
test("whom -> whom", function() {deepEqual( Stem("whom"), "whom");});
test("whomsoever -> whomsoev", function() {deepEqual( Stem("whomsoever"), "whomsoev");});
test("whoo -> whoo", function() {deepEqual( Stem("whoo"), "whoo");});
test("whooping -> whoop", function() {deepEqual( Stem("whooping"), "whoop");});
test("whoosh -> whoosh", function() {deepEqual( Stem("whoosh"), "whoosh");});
test("whose -> whose", function() {deepEqual( Stem("whose"), "whose");});
test("whosoever -> whosoev", function() {deepEqual( Stem("whosoever"), "whosoev");});
test("why -> whi", function() {deepEqual( Stem("why"), "whi");});
test("whytorseller -> whytorsel", function() {deepEqual( Stem("whytorseller"), "whytorsel");});
test("wi -> wi", function() {deepEqual( Stem("wi"), "wi");});
test("wice -> wice", function() {deepEqual( Stem("wice"), "wice");});
test("wicious -> wicious", function() {deepEqual( Stem("wicious"), "wicious");});
test("wick -> wick", function() {deepEqual( Stem("wick"), "wick");});
test("wicked -> wick", function() {deepEqual( Stem("wicked"), "wick");});
test("wickedest -> wickedest", function() {deepEqual( Stem("wickedest"), "wickedest");});
test("wickedly -> wick", function() {deepEqual( Stem("wickedly"), "wick");});
test("wickedness -> wicked", function() {deepEqual( Stem("wickedness"), "wicked");});
test("wicker -> wicker", function() {deepEqual( Stem("wicker"), "wicker");});
test("wicket -> wicket", function() {deepEqual( Stem("wicket"), "wicket");});
test("wickham -> wickham", function() {deepEqual( Stem("wickham"), "wickham");});
test("widder -> widder", function() {deepEqual( Stem("widder"), "widder");});
test("wide -> wide", function() {deepEqual( Stem("wide"), "wide");});
test("widely -> wide", function() {deepEqual( Stem("widely"), "wide");});
test("widened -> widen", function() {deepEqual( Stem("widened"), "widen");});
test("wider -> wider", function() {deepEqual( Stem("wider"), "wider");});
test("widespread -> widespread", function() {deepEqual( Stem("widespread"), "widespread");});
test("widest -> widest", function() {deepEqual( Stem("widest"), "widest");});
test("widow -> widow", function() {deepEqual( Stem("widow"), "widow");});
test("widowed -> widow", function() {deepEqual( Stem("widowed"), "widow");});
test("widower -> widow", function() {deepEqual( Stem("widower"), "widow");});
test("widowhood -> widowhood", function() {deepEqual( Stem("widowhood"), "widowhood");});
test("widows -> widow", function() {deepEqual( Stem("widows"), "widow");});
test("width -> width", function() {deepEqual( Stem("width"), "width");});
test("widths -> width", function() {deepEqual( Stem("widths"), "width");});
test("wield -> wield", function() {deepEqual( Stem("wield"), "wield");});
test("wielded -> wield", function() {deepEqual( Stem("wielded"), "wield");});
test("wife -> wife", function() {deepEqual( Stem("wife"), "wife");});
test("wig -> wig", function() {deepEqual( Stem("wig"), "wig");});
test("wight -> wight", function() {deepEqual( Stem("wight"), "wight");});
test("wiglomeration -> wiglomer", function() {deepEqual( Stem("wiglomeration"), "wiglomer");});
test("wigmaker -> wigmak", function() {deepEqual( Stem("wigmaker"), "wigmak");});
test("wigmore -> wigmor", function() {deepEqual( Stem("wigmore"), "wigmor");});
test("wigs -> wig", function() {deepEqual( Stem("wigs"), "wig");});
test("wigwam -> wigwam", function() {deepEqual( Stem("wigwam"), "wigwam");});
test("wigwams -> wigwam", function() {deepEqual( Stem("wigwams"), "wigwam");});
test("wil -> wil", function() {deepEqual( Stem("wil"), "wil");});
test("wild -> wild", function() {deepEqual( Stem("wild"), "wild");});
test("wilder -> wilder", function() {deepEqual( Stem("wilder"), "wilder");});
test("wilderness -> wilder", function() {deepEqual( Stem("wilderness"), "wilder");});
test("wildest -> wildest", function() {deepEqual( Stem("wildest"), "wildest");});
test("wildly -> wild", function() {deepEqual( Stem("wildly"), "wild");});
test("wildness -> wild", function() {deepEqual( Stem("wildness"), "wild");});
test("wile -> wile", function() {deepEqual( Stem("wile"), "wile");});
test("wiled -> wile", function() {deepEqual( Stem("wiled"), "wile");});
test("wiles -> wile", function() {deepEqual( Stem("wiles"), "wile");});
test("wilful -> wil", function() {deepEqual( Stem("wilful"), "wil");});
test("wilfully -> wil", function() {deepEqual( Stem("wilfully"), "wil");});
test("wilfulness -> wil", function() {deepEqual( Stem("wilfulness"), "wil");});
test("wilheim -> wilheim", function() {deepEqual( Stem("wilheim"), "wilheim");});
test("will -> will", function() {deepEqual( Stem("will"), "will");});
test("willage -> willag", function() {deepEqual( Stem("willage"), "willag");});
test("willed -> will", function() {deepEqual( Stem("willed"), "will");});
test("william -> william", function() {deepEqual( Stem("william"), "william");});
test("williams -> william", function() {deepEqual( Stem("williams"), "william");});
test("willin -> willin", function() {deepEqual( Stem("willin"), "willin");});
test("willing -> will", function() {deepEqual( Stem("willing"), "will");});
test("willingiy -> willingiy", function() {deepEqual( Stem("willingiy"), "willingiy");});
test("willingly -> will", function() {deepEqual( Stem("willingly"), "will");});
test("willingness -> willing", function() {deepEqual( Stem("willingness"), "willing");});
test("willinwodd -> willinwodd", function() {deepEqual( Stem("willinwodd"), "willinwodd");});
test("willl -> willl", function() {deepEqual( Stem("willl"), "willl");});
test("willow -> willow", function() {deepEqual( Stem("willow"), "willow");});
test("willows -> willow", function() {deepEqual( Stem("willows"), "willow");});
test("wills -> will", function() {deepEqual( Stem("wills"), "will");});
test("willst -> willst", function() {deepEqual( Stem("willst"), "willst");});
test("willy -> willi", function() {deepEqual( Stem("willy"), "willi");});
test("wilmot -> wilmot", function() {deepEqual( Stem("wilmot"), "wilmot");});
test("wilson -> wilson", function() {deepEqual( Stem("wilson"), "wilson");});
test("wilt -> wilt", function() {deepEqual( Stem("wilt"), "wilt");});
test("wily -> wili", function() {deepEqual( Stem("wily"), "wili");});
test("win -> win", function() {deepEqual( Stem("win"), "win");});
test("winced -> winc", function() {deepEqual( Stem("winced"), "winc");});
test("winchester -> winchest", function() {deepEqual( Stem("winchester"), "winchest");});
test("wincing -> winc", function() {deepEqual( Stem("wincing"), "winc");});
test("wind -> wind", function() {deepEqual( Stem("wind"), "wind");});
test("winded -> wind", function() {deepEqual( Stem("winded"), "wind");});
test("winder -> winder", function() {deepEqual( Stem("winder"), "winder");});
test("winders -> winder", function() {deepEqual( Stem("winders"), "winder");});
test("winding -> wind", function() {deepEqual( Stem("winding"), "wind");});
test("windings -> wind", function() {deepEqual( Stem("windings"), "wind");});
test("windlass -> windlass", function() {deepEqual( Stem("windlass"), "windlass");});
test("windmill -> windmil", function() {deepEqual( Stem("windmill"), "windmil");});
test("windmills -> windmil", function() {deepEqual( Stem("windmills"), "windmil");});
test("window -> window", function() {deepEqual( Stem("window"), "window");});
test("windowed -> window", function() {deepEqual( Stem("windowed"), "window");});
test("windows -> window", function() {deepEqual( Stem("windows"), "window");});
test("windpipe -> windpip", function() {deepEqual( Stem("windpipe"), "windpip");});
test("winds -> wind", function() {deepEqual( Stem("winds"), "wind");});
test("windsor -> windsor", function() {deepEqual( Stem("windsor"), "windsor");});
test("windward -> windward", function() {deepEqual( Stem("windward"), "windward");});
test("windy -> windi", function() {deepEqual( Stem("windy"), "windi");});
test("wine -> wine", function() {deepEqual( Stem("wine"), "wine");});
test("wineglassful -> wineglass", function() {deepEqual( Stem("wineglassful"), "wineglass");});
test("wines -> wine", function() {deepEqual( Stem("wines"), "wine");});
test("wing -> wing", function() {deepEqual( Stem("wing"), "wing");});
test("winged -> wing", function() {deepEqual( Stem("winged"), "wing");});
test("wingfield -> wingfield", function() {deepEqual( Stem("wingfield"), "wingfield");});
test("wingless -> wingless", function() {deepEqual( Stem("wingless"), "wingless");});
test("wings -> wing", function() {deepEqual( Stem("wings"), "wing");});
test("wink -> wink", function() {deepEqual( Stem("wink"), "wink");});
test("winked -> wink", function() {deepEqual( Stem("winked"), "wink");});
test("winking -> wink", function() {deepEqual( Stem("winking"), "wink");});
test("winkles -> winkl", function() {deepEqual( Stem("winkles"), "winkl");});
test("winks -> wink", function() {deepEqual( Stem("winks"), "wink");});
test("winner -> winner", function() {deepEqual( Stem("winner"), "winner");});
test("winning -> win", function() {deepEqual( Stem("winning"), "win");});
test("winnings -> win", function() {deepEqual( Stem("winnings"), "win");});
test("winnowing -> winnow", function() {deepEqual( Stem("winnowing"), "winnow");});
test("wins -> win", function() {deepEqual( Stem("wins"), "win");});
test("winter -> winter", function() {deepEqual( Stem("winter"), "winter");});
test("winters -> winter", function() {deepEqual( Stem("winters"), "winter");});
test("wintry -> wintri", function() {deepEqual( Stem("wintry"), "wintri");});
test("wiolinceller -> wiolincel", function() {deepEqual( Stem("wiolinceller"), "wiolincel");});
test("wiolincellers -> wiolincel", function() {deepEqual( Stem("wiolincellers"), "wiolincel");});
test("wipe -> wipe", function() {deepEqual( Stem("wipe"), "wipe");});
test("wiped -> wipe", function() {deepEqual( Stem("wiped"), "wipe");});
test("wipes -> wipe", function() {deepEqual( Stem("wipes"), "wipe");});
test("wiping -> wipe", function() {deepEqual( Stem("wiping"), "wipe");});
test("wire -> wire", function() {deepEqual( Stem("wire"), "wire");});
test("wires -> wire", function() {deepEqual( Stem("wires"), "wire");});
test("wiry -> wiri", function() {deepEqual( Stem("wiry"), "wiri");});
test("wis -> wis", function() {deepEqual( Stem("wis"), "wis");});
test("wisdom -> wisdom", function() {deepEqual( Stem("wisdom"), "wisdom");});
test("wise -> wise", function() {deepEqual( Stem("wise"), "wise");});
test("wisely -> wise", function() {deepEqual( Stem("wisely"), "wise");});
test("wiser -> wiser", function() {deepEqual( Stem("wiser"), "wiser");});
test("wisest -> wisest", function() {deepEqual( Stem("wisest"), "wisest");});
test("wish -> wish", function() {deepEqual( Stem("wish"), "wish");});
test("wished -> wish", function() {deepEqual( Stem("wished"), "wish");});
test("wisher -> wisher", function() {deepEqual( Stem("wisher"), "wisher");});
test("wishermaydie -> wishermaydi", function() {deepEqual( Stem("wishermaydie"), "wishermaydi");});
test("wishes -> wish", function() {deepEqual( Stem("wishes"), "wish");});
test("wishful -> wish", function() {deepEqual( Stem("wishful"), "wish");});
test("wishing -> wish", function() {deepEqual( Stem("wishing"), "wish");});
test("wisit -> wisit", function() {deepEqual( Stem("wisit"), "wisit");});
test("wisitation -> wisit", function() {deepEqual( Stem("wisitation"), "wisit");});
test("wisitations -> wisit", function() {deepEqual( Stem("wisitations"), "wisit");});
test("wisitin -> wisitin", function() {deepEqual( Stem("wisitin"), "wisitin");});
test("wisiting -> wisit", function() {deepEqual( Stem("wisiting"), "wisit");});
test("wisk -> wisk", function() {deepEqual( Stem("wisk"), "wisk");});
test("wisp -> wisp", function() {deepEqual( Stem("wisp"), "wisp");});
test("wiss -> wiss", function() {deepEqual( Stem("wiss"), "wiss");});
test("wissen -> wissen", function() {deepEqual( Stem("wissen"), "wissen");});
test("wistful -> wist", function() {deepEqual( Stem("wistful"), "wist");});
test("wistfully -> wist", function() {deepEqual( Stem("wistfully"), "wist");});
test("wit -> wit", function() {deepEqual( Stem("wit"), "wit");});
test("witch -> witch", function() {deepEqual( Stem("witch"), "witch");});
test("witchcraft -> witchcraft", function() {deepEqual( Stem("witchcraft"), "witchcraft");});
test("witchery -> witcheri", function() {deepEqual( Stem("witchery"), "witcheri");});
test("witches -> witch", function() {deepEqual( Stem("witches"), "witch");});
test("with -> with", function() {deepEqual( Stem("with"), "with");});
test("withal -> withal", function() {deepEqual( Stem("withal"), "withal");});
test("withdraw -> withdraw", function() {deepEqual( Stem("withdraw"), "withdraw");});
test("withdrawal -> withdraw", function() {deepEqual( Stem("withdrawal"), "withdraw");});
test("withdrawed -> withdraw", function() {deepEqual( Stem("withdrawed"), "withdraw");});
test("withdrawing -> withdraw", function() {deepEqual( Stem("withdrawing"), "withdraw");});
test("withdrawn -> withdrawn", function() {deepEqual( Stem("withdrawn"), "withdrawn");});
test("withdraws -> withdraw", function() {deepEqual( Stem("withdraws"), "withdraw");});
test("withdrew -> withdrew", function() {deepEqual( Stem("withdrew"), "withdrew");});
test("wither -> wither", function() {deepEqual( Stem("wither"), "wither");});
test("withered -> wither", function() {deepEqual( Stem("withered"), "wither");});
test("withering -> wither", function() {deepEqual( Stem("withering"), "wither");});
test("withers -> wither", function() {deepEqual( Stem("withers"), "wither");});
test("withheld -> withheld", function() {deepEqual( Stem("withheld"), "withheld");});
test("withhold -> withhold", function() {deepEqual( Stem("withhold"), "withhold");});
test("withi -> withi", function() {deepEqual( Stem("withi"), "withi");});
test("within -> within", function() {deepEqual( Stem("within"), "within");});
test("withou -> withou", function() {deepEqual( Stem("withou"), "withou");});
test("without -> without", function() {deepEqual( Stem("without"), "without");});
test("withstand -> withstand", function() {deepEqual( Stem("withstand"), "withstand");});
test("withstood -> withstood", function() {deepEqual( Stem("withstood"), "withstood");});
test("wititterly -> wititt", function() {deepEqual( Stem("wititterly"), "wititt");});
test("wititterlys -> wititt", function() {deepEqual( Stem("wititterlys"), "wititt");});
test("witness -> wit", function() {deepEqual( Stem("witness"), "wit");});
test("witnessed -> wit", function() {deepEqual( Stem("witnessed"), "wit");});
test("witnesses -> wit", function() {deepEqual( Stem("witnesses"), "wit");});
test("witnessing -> wit", function() {deepEqual( Stem("witnessing"), "wit");});
test("wits -> wit", function() {deepEqual( Stem("wits"), "wit");});
test("witted -> wit", function() {deepEqual( Stem("witted"), "wit");});
test("witticism -> wittic", function() {deepEqual( Stem("witticism"), "wittic");});
test("witticisms -> wittic", function() {deepEqual( Stem("witticisms"), "wittic");});
test("wittier -> wittier", function() {deepEqual( Stem("wittier"), "wittier");});
test("wittily -> wittili", function() {deepEqual( Stem("wittily"), "wittili");});
test("wittles -> wittl", function() {deepEqual( Stem("wittles"), "wittl");});
test("witty -> witti", function() {deepEqual( Stem("witty"), "witti");});
test("wives -> wive", function() {deepEqual( Stem("wives"), "wive");});
test("wizard -> wizard", function() {deepEqual( Stem("wizard"), "wizard");});
test("wizened -> wizen", function() {deepEqual( Stem("wizened"), "wizen");});
test("wlll -> wlll", function() {deepEqual( Stem("wlll"), "wlll");});
test("wo -> wo", function() {deepEqual( Stem("wo"), "wo");});
test("woa -> woa", function() {deepEqual( Stem("woa"), "woa");});
test("woe -> woe", function() {deepEqual( Stem("woe"), "woe");});
test("woebegone -> woebegon", function() {deepEqual( Stem("woebegone"), "woebegon");});
test("woeful -> woeful", function() {deepEqual( Stem("woeful"), "woeful");});
test("woes -> woe", function() {deepEqual( Stem("woes"), "woe");});
test("woful -> woful", function() {deepEqual( Stem("woful"), "woful");});
test("wofully -> wofulli", function() {deepEqual( Stem("wofully"), "wofulli");});
test("woice -> woic", function() {deepEqual( Stem("woice"), "woic");});
test("woices -> woic", function() {deepEqual( Stem("woices"), "woic");});
test("woke -> woke", function() {deepEqual( Stem("woke"), "woke");});
test("wold -> wold", function() {deepEqual( Stem("wold"), "wold");});
test("wolds -> wold", function() {deepEqual( Stem("wolds"), "wold");});
test("wolf -> wolf", function() {deepEqual( Stem("wolf"), "wolf");});
test("wolgan -> wolgan", function() {deepEqual( Stem("wolgan"), "wolgan");});
test("wollaston -> wollaston", function() {deepEqual( Stem("wollaston"), "wollaston");});
test("wolsey -> wolsey", function() {deepEqual( Stem("wolsey"), "wolsey");});
test("wolves -> wolv", function() {deepEqual( Stem("wolves"), "wolv");});
test("woman -> woman", function() {deepEqual( Stem("woman"), "woman");});
test("womanhood -> womanhood", function() {deepEqual( Stem("womanhood"), "womanhood");});
test("womanish -> womanish", function() {deepEqual( Stem("womanish"), "womanish");});
test("womankind -> womankind", function() {deepEqual( Stem("womankind"), "womankind");});
test("womanly -> woman", function() {deepEqual( Stem("womanly"), "woman");});
test("women -> women", function() {deepEqual( Stem("women"), "women");});
test("won -> won", function() {deepEqual( Stem("won"), "won");});
test("wonder -> wonder", function() {deepEqual( Stem("wonder"), "wonder");});
test("wondered -> wonder", function() {deepEqual( Stem("wondered"), "wonder");});
test("wonderful -> wonder", function() {deepEqual( Stem("wonderful"), "wonder");});
test("wonderfully -> wonder", function() {deepEqual( Stem("wonderfully"), "wonder");});
test("wondering -> wonder", function() {deepEqual( Stem("wondering"), "wonder");});
test("wonderingly -> wonder", function() {deepEqual( Stem("wonderingly"), "wonder");});
test("wonderment -> wonder", function() {deepEqual( Stem("wonderment"), "wonder");});
test("wonders -> wonder", function() {deepEqual( Stem("wonders"), "wonder");});
test("wondrous -> wondrous", function() {deepEqual( Stem("wondrous"), "wondrous");});
test("wonld -> wonld", function() {deepEqual( Stem("wonld"), "wonld");});
test("wont -> wont", function() {deepEqual( Stem("wont"), "wont");});
test("wonted -> wont", function() {deepEqual( Stem("wonted"), "wont");});
test("woo -> woo", function() {deepEqual( Stem("woo"), "woo");});
test("wood -> wood", function() {deepEqual( Stem("wood"), "wood");});
test("woodbine -> woodbin", function() {deepEqual( Stem("woodbine"), "woodbin");});
test("woodchips -> woodchip", function() {deepEqual( Stem("woodchips"), "woodchip");});
test("woodcot -> woodcot", function() {deepEqual( Stem("woodcot"), "woodcot");});
test("woodcourt -> woodcourt", function() {deepEqual( Stem("woodcourt"), "woodcourt");});
test("woodcut -> woodcut", function() {deepEqual( Stem("woodcut"), "woodcut");});
test("wooded -> wood", function() {deepEqual( Stem("wooded"), "wood");});
test("wooden -> wooden", function() {deepEqual( Stem("wooden"), "wooden");});
test("woodland -> woodland", function() {deepEqual( Stem("woodland"), "woodland");});
test("woodlouse -> woodlous", function() {deepEqual( Stem("woodlouse"), "woodlous");});
test("woodman -> woodman", function() {deepEqual( Stem("woodman"), "woodman");});
test("woodpecker -> woodpeck", function() {deepEqual( Stem("woodpecker"), "woodpeck");});
test("woods -> wood", function() {deepEqual( Stem("woods"), "wood");});
test("woodwork -> woodwork", function() {deepEqual( Stem("woodwork"), "woodwork");});
test("woody -> woodi", function() {deepEqual( Stem("woody"), "woodi");});
test("wooed -> woo", function() {deepEqual( Stem("wooed"), "woo");});
test("wool -> wool", function() {deepEqual( Stem("wool"), "wool");});
test("woolen -> woolen", function() {deepEqual( Stem("woolen"), "woolen");});
test("woollen -> woollen", function() {deepEqual( Stem("woollen"), "woollen");});
test("woolly -> woolli", function() {deepEqual( Stem("woolly"), "woolli");});
test("woollya -> woollya", function() {deepEqual( Stem("woollya"), "woollya");});
test("woolsack -> woolsack", function() {deepEqual( Stem("woolsack"), "woolsack");});
test("woolwich -> woolwich", function() {deepEqual( Stem("woolwich"), "woolwich");});
test("wooman -> wooman", function() {deepEqual( Stem("wooman"), "wooman");});
test("wor -> wor", function() {deepEqual( Stem("wor"), "wor");});
test("word -> word", function() {deepEqual( Stem("word"), "word");});
test("worded -> word", function() {deepEqual( Stem("worded"), "word");});
test("wording -> word", function() {deepEqual( Stem("wording"), "word");});
test("words -> word", function() {deepEqual( Stem("words"), "word");});
test("wordsworth -> wordsworth", function() {deepEqual( Stem("wordsworth"), "wordsworth");});
test("wordy -> wordi", function() {deepEqual( Stem("wordy"), "wordi");});
test("wore -> wore", function() {deepEqual( Stem("wore"), "wore");});
test("worid -> worid", function() {deepEqual( Stem("worid"), "worid");});
test("work -> work", function() {deepEqual( Stem("work"), "work");});
test("workaday -> workaday", function() {deepEqual( Stem("workaday"), "workaday");});
test("workbox -> workbox", function() {deepEqual( Stem("workbox"), "workbox");});
test("worked -> work", function() {deepEqual( Stem("worked"), "work");});
test("worker -> worker", function() {deepEqual( Stem("worker"), "worker");});
test("workers -> worker", function() {deepEqual( Stem("workers"), "worker");});
test("workhouse -> workhous", function() {deepEqual( Stem("workhouse"), "workhous");});
test("working -> work", function() {deepEqual( Stem("working"), "work");});
test("workings -> work", function() {deepEqual( Stem("workings"), "work");});
test("workman -> workman", function() {deepEqual( Stem("workman"), "workman");});
test("workmanlike -> workmanlik", function() {deepEqual( Stem("workmanlike"), "workmanlik");});
test("workmanship -> workmanship", function() {deepEqual( Stem("workmanship"), "workmanship");});
test("workmen -> workmen", function() {deepEqual( Stem("workmen"), "workmen");});
test("workroom -> workroom", function() {deepEqual( Stem("workroom"), "workroom");});
test("works -> work", function() {deepEqual( Stem("works"), "work");});
test("workshop -> workshop", function() {deepEqual( Stem("workshop"), "workshop");});
test("workshops -> workshop", function() {deepEqual( Stem("workshops"), "workshop");});
test("world -> world", function() {deepEqual( Stem("world"), "world");});
test("worldliness -> worldli", function() {deepEqual( Stem("worldliness"), "worldli");});
test("worldlings -> worldl", function() {deepEqual( Stem("worldlings"), "worldl");});
test("worldly -> world", function() {deepEqual( Stem("worldly"), "world");});
test("worlds -> world", function() {deepEqual( Stem("worlds"), "world");});
test("worm -> worm", function() {deepEqual( Stem("worm"), "worm");});
test("worming -> worm", function() {deepEqual( Stem("worming"), "worm");});
test("worms -> worm", function() {deepEqual( Stem("worms"), "worm");});
test("wormwood -> wormwood", function() {deepEqual( Stem("wormwood"), "wormwood");});
test("worn -> worn", function() {deepEqual( Stem("worn"), "worn");});
test("worried -> worri", function() {deepEqual( Stem("worried"), "worri");});
test("worries -> worri", function() {deepEqual( Stem("worries"), "worri");});
test("worrit -> worrit", function() {deepEqual( Stem("worrit"), "worrit");});
test("worrited -> worrit", function() {deepEqual( Stem("worrited"), "worrit");});
test("worritted -> worrit", function() {deepEqual( Stem("worritted"), "worrit");});
test("worry -> worri", function() {deepEqual( Stem("worry"), "worri");});
test("worrying -> worri", function() {deepEqual( Stem("worrying"), "worri");});
test("worse -> wors", function() {deepEqual( Stem("worse"), "wors");});
test("worship -> worship", function() {deepEqual( Stem("worship"), "worship");});
test("worshipped -> worship", function() {deepEqual( Stem("worshipped"), "worship");});
test("worshippers -> worshipp", function() {deepEqual( Stem("worshippers"), "worshipp");});
test("worships -> worship", function() {deepEqual( Stem("worships"), "worship");});
test("worst -> worst", function() {deepEqual( Stem("worst"), "worst");});
test("worsted -> worst", function() {deepEqual( Stem("worsted"), "worst");});
test("worsteds -> worst", function() {deepEqual( Stem("worsteds"), "worst");});
test("worth -> worth", function() {deepEqual( Stem("worth"), "worth");});
test("worthbourne -> worthbourn", function() {deepEqual( Stem("worthbourne"), "worthbourn");});
test("worthier -> worthier", function() {deepEqual( Stem("worthier"), "worthier");});
test("worthies -> worthi", function() {deepEqual( Stem("worthies"), "worthi");});
test("worthily -> worthili", function() {deepEqual( Stem("worthily"), "worthili");});
test("worthless -> worthless", function() {deepEqual( Stem("worthless"), "worthless");});
test("worthlessness -> worthless", function() {deepEqual( Stem("worthlessness"), "worthless");});
test("worthwhile -> worthwhil", function() {deepEqual( Stem("worthwhile"), "worthwhil");});
test("worthy -> worthi", function() {deepEqual( Stem("worthy"), "worthi");});
test("wos -> wos", function() {deepEqual( Stem("wos"), "wos");});
test("wot -> wot", function() {deepEqual( Stem("wot"), "wot");});
test("woul -> woul", function() {deepEqual( Stem("woul"), "woul");});
test("would -> would", function() {deepEqual( Stem("would"), "would");});
test("wouldest -> wouldest", function() {deepEqual( Stem("wouldest"), "wouldest");});
test("wouldn -> wouldn", function() {deepEqual( Stem("wouldn"), "wouldn");});
test("wound -> wound", function() {deepEqual( Stem("wound"), "wound");});
test("wounded -> wound", function() {deepEqual( Stem("wounded"), "wound");});
test("wounding -> wound", function() {deepEqual( Stem("wounding"), "wound");});
test("wounds -> wound", function() {deepEqual( Stem("wounds"), "wound");});
test("woven -> woven", function() {deepEqual( Stem("woven"), "woven");});
test("wow -> wow", function() {deepEqual( Stem("wow"), "wow");});
test("wows -> wow", function() {deepEqual( Stem("wows"), "wow");});
test("wrangerton -> wrangerton", function() {deepEqual( Stem("wrangerton"), "wrangerton");});
test("wrangle -> wrangl", function() {deepEqual( Stem("wrangle"), "wrangl");});
test("wrangling -> wrangl", function() {deepEqual( Stem("wrangling"), "wrangl");});
test("wrap -> wrap", function() {deepEqual( Stem("wrap"), "wrap");});
test("wrapped -> wrap", function() {deepEqual( Stem("wrapped"), "wrap");});
test("wrapper -> wrapper", function() {deepEqual( Stem("wrapper"), "wrapper");});
test("wrappers -> wrapper", function() {deepEqual( Stem("wrappers"), "wrapper");});
test("wrapping -> wrap", function() {deepEqual( Stem("wrapping"), "wrap");});
test("wrappings -> wrap", function() {deepEqual( Stem("wrappings"), "wrap");});
test("wrapt -> wrapt", function() {deepEqual( Stem("wrapt"), "wrapt");});
test("wrath -> wrath", function() {deepEqual( Stem("wrath"), "wrath");});
test("wrathful -> wrath", function() {deepEqual( Stem("wrathful"), "wrath");});
test("wrathfully -> wrath", function() {deepEqual( Stem("wrathfully"), "wrath");});
test("wreaked -> wreak", function() {deepEqual( Stem("wreaked"), "wreak");});
test("wreaking -> wreak", function() {deepEqual( Stem("wreaking"), "wreak");});
test("wreath -> wreath", function() {deepEqual( Stem("wreath"), "wreath");});
test("wreathed -> wreath", function() {deepEqual( Stem("wreathed"), "wreath");});
test("wreathes -> wreath", function() {deepEqual( Stem("wreathes"), "wreath");});
test("wreathing -> wreath", function() {deepEqual( Stem("wreathing"), "wreath");});
test("wreaths -> wreath", function() {deepEqual( Stem("wreaths"), "wreath");});
test("wreck -> wreck", function() {deepEqual( Stem("wreck"), "wreck");});
test("wrecked -> wreck", function() {deepEqual( Stem("wrecked"), "wreck");});
test("wren -> wren", function() {deepEqual( Stem("wren"), "wren");});
test("wrench -> wrench", function() {deepEqual( Stem("wrench"), "wrench");});
test("wrenched -> wrench", function() {deepEqual( Stem("wrenched"), "wrench");});
test("wrenching -> wrench", function() {deepEqual( Stem("wrenching"), "wrench");});
test("wrens -> wren", function() {deepEqual( Stem("wrens"), "wren");});
test("wrested -> wrest", function() {deepEqual( Stem("wrested"), "wrest");});
test("wresting -> wrest", function() {deepEqual( Stem("wresting"), "wrest");});
test("wrestle -> wrestl", function() {deepEqual( Stem("wrestle"), "wrestl");});
test("wrestling -> wrestl", function() {deepEqual( Stem("wrestling"), "wrestl");});
test("wretch -> wretch", function() {deepEqual( Stem("wretch"), "wretch");});
test("wretched -> wretch", function() {deepEqual( Stem("wretched"), "wretch");});
test("wretchedest -> wretchedest", function() {deepEqual( Stem("wretchedest"), "wretchedest");});
test("wretchedly -> wretch", function() {deepEqual( Stem("wretchedly"), "wretch");});
test("wretchedness -> wretched", function() {deepEqual( Stem("wretchedness"), "wretched");});
test("wretches -> wretch", function() {deepEqual( Stem("wretches"), "wretch");});
test("wriggling -> wriggl", function() {deepEqual( Stem("wriggling"), "wriggl");});
test("wring -> wring", function() {deepEqual( Stem("wring"), "wring");});
test("wringing -> wring", function() {deepEqual( Stem("wringing"), "wring");});
test("wrings -> wring", function() {deepEqual( Stem("wrings"), "wring");});
test("wrinkle -> wrinkl", function() {deepEqual( Stem("wrinkle"), "wrinkl");});
test("wrinkled -> wrinkl", function() {deepEqual( Stem("wrinkled"), "wrinkl");});
test("wrinkles -> wrinkl", function() {deepEqual( Stem("wrinkles"), "wrinkl");});
test("wrinkling -> wrinkl", function() {deepEqual( Stem("wrinkling"), "wrinkl");});
test("wrist -> wrist", function() {deepEqual( Stem("wrist"), "wrist");});
test("wristbands -> wristband", function() {deepEqual( Stem("wristbands"), "wristband");});
test("wrists -> wrist", function() {deepEqual( Stem("wrists"), "wrist");});
test("writ -> writ", function() {deepEqual( Stem("writ"), "writ");});
test("write -> write", function() {deepEqual( Stem("write"), "write");});
test("writer -> writer", function() {deepEqual( Stem("writer"), "writer");});
test("writers -> writer", function() {deepEqual( Stem("writers"), "writer");});
test("writes -> write", function() {deepEqual( Stem("writes"), "write");});
test("writhe -> writh", function() {deepEqual( Stem("writhe"), "writh");});
test("writhed -> writh", function() {deepEqual( Stem("writhed"), "writh");});
test("writhing -> writh", function() {deepEqual( Stem("writhing"), "writh");});
test("writhings -> writh", function() {deepEqual( Stem("writhings"), "writh");});
test("writin -> writin", function() {deepEqual( Stem("writin"), "writin");});
test("writing -> write", function() {deepEqual( Stem("writing"), "write");});
test("writings -> write", function() {deepEqual( Stem("writings"), "write");});
test("written -> written", function() {deepEqual( Stem("written"), "written");});
test("wrong -> wrong", function() {deepEqual( Stem("wrong"), "wrong");});
test("wrongdoing -> wrongdo", function() {deepEqual( Stem("wrongdoing"), "wrongdo");});
test("wronged -> wrong", function() {deepEqual( Stem("wronged"), "wrong");});
test("wrongfully -> wrong", function() {deepEqual( Stem("wrongfully"), "wrong");});
test("wronging -> wrong", function() {deepEqual( Stem("wronging"), "wrong");});
test("wrongly -> wrong", function() {deepEqual( Stem("wrongly"), "wrong");});
test("wrongs -> wrong", function() {deepEqual( Stem("wrongs"), "wrong");});
test("wrote -> wrote", function() {deepEqual( Stem("wrote"), "wrote");});
test("wroth -> wroth", function() {deepEqual( Stem("wroth"), "wroth");});
test("wrought -> wrought", function() {deepEqual( Stem("wrought"), "wrought");});
test("wrung -> wrung", function() {deepEqual( Stem("wrung"), "wrung");});
test("wry -> wri", function() {deepEqual( Stem("wry"), "wri");});
test("wrymug -> wrymug", function() {deepEqual( Stem("wrymug"), "wrymug");});
test("wull -> wull", function() {deepEqual( Stem("wull"), "wull");});
test("wuns -> wun", function() {deepEqual( Stem("wuns"), "wun");});
test("wunst -> wunst", function() {deepEqual( Stem("wunst"), "wunst");});
test("wur -> wur", function() {deepEqual( Stem("wur"), "wur");});
test("wurd -> wurd", function() {deepEqual( Stem("wurd"), "wurd");});
test("wye -> wye", function() {deepEqual( Stem("wye"), "wye");});
test("wyelands -> wyeland", function() {deepEqual( Stem("wyelands"), "wyeland");});
test("wyndham -> wyndham", function() {deepEqual( Stem("wyndham"), "wyndham");});
test("x -> x", function() {deepEqual( Stem("x"), "x");});
test("xi -> xi", function() {deepEqual( Stem("xi"), "xi");});
test("xii -> xii", function() {deepEqual( Stem("xii"), "xii");});
test("xiii -> xiii", function() {deepEqual( Stem("xiii"), "xiii");});
test("xiv -> xiv", function() {deepEqual( Stem("xiv"), "xiv");});
test("xix -> xix", function() {deepEqual( Stem("xix"), "xix");});
test("xl -> xl", function() {deepEqual( Stem("xl"), "xl");});
test("xli -> xli", function() {deepEqual( Stem("xli"), "xli");});
test("xlii -> xlii", function() {deepEqual( Stem("xlii"), "xlii");});
test("xliii -> xliii", function() {deepEqual( Stem("xliii"), "xliii");});
test("xliv -> xliv", function() {deepEqual( Stem("xliv"), "xliv");});
test("xlix -> xlix", function() {deepEqual( Stem("xlix"), "xlix");});
test("xlv -> xlv", function() {deepEqual( Stem("xlv"), "xlv");});
test("xlvi -> xlvi", function() {deepEqual( Stem("xlvi"), "xlvi");});
test("xlvii -> xlvii", function() {deepEqual( Stem("xlvii"), "xlvii");});
test("xlviii -> xlviii", function() {deepEqual( Stem("xlviii"), "xlviii");});
test("xv -> xv", function() {deepEqual( Stem("xv"), "xv");});
test("xvi -> xvi", function() {deepEqual( Stem("xvi"), "xvi");});
test("xvii -> xvii", function() {deepEqual( Stem("xvii"), "xvii");});
test("xviii -> xviii", function() {deepEqual( Stem("xviii"), "xviii");});
test("xx -> xx", function() {deepEqual( Stem("xx"), "xx");});
test("xxi -> xxi", function() {deepEqual( Stem("xxi"), "xxi");});
test("xxii -> xxii", function() {deepEqual( Stem("xxii"), "xxii");});
test("xxiii -> xxiii", function() {deepEqual( Stem("xxiii"), "xxiii");});
test("xxiv -> xxiv", function() {deepEqual( Stem("xxiv"), "xxiv");});
test("xxix -> xxix", function() {deepEqual( Stem("xxix"), "xxix");});
test("xxv -> xxv", function() {deepEqual( Stem("xxv"), "xxv");});
test("xxvi -> xxvi", function() {deepEqual( Stem("xxvi"), "xxvi");});
test("xxvii -> xxvii", function() {deepEqual( Stem("xxvii"), "xxvii");});
test("xxviii -> xxviii", function() {deepEqual( Stem("xxviii"), "xxviii");});
test("xxx -> xxx", function() {deepEqual( Stem("xxx"), "xxx");});
test("xxxi -> xxxi", function() {deepEqual( Stem("xxxi"), "xxxi");});
test("xxxii -> xxxii", function() {deepEqual( Stem("xxxii"), "xxxii");});
test("xxxiii -> xxxiii", function() {deepEqual( Stem("xxxiii"), "xxxiii");});
test("xxxiv -> xxxiv", function() {deepEqual( Stem("xxxiv"), "xxxiv");});
test("xxxix -> xxxix", function() {deepEqual( Stem("xxxix"), "xxxix");});
test("xxxv -> xxxv", function() {deepEqual( Stem("xxxv"), "xxxv");});
test("xxxvi -> xxxvi", function() {deepEqual( Stem("xxxvi"), "xxxvi");});
test("xxxvii -> xxxvii", function() {deepEqual( Stem("xxxvii"), "xxxvii");});
test("xxxviii -> xxxviii", function() {deepEqual( Stem("xxxviii"), "xxxviii");});
test("y -> y", function() {deepEqual( Stem("y"), "y");});
test("ya -> ya", function() {deepEqual( Stem("ya"), "ya");});
test("yacht -> yacht", function() {deepEqual( Stem("yacht"), "yacht");});
test("yachting -> yacht", function() {deepEqual( Stem("yachting"), "yacht");});
test("yagouaroundi -> yagouaroundi", function() {deepEqual( Stem("yagouaroundi"), "yagouaroundi");});
test("yam -> yam", function() {deepEqual( Stem("yam"), "yam");});
test("yammerschooner -> yammerschoon", function() {deepEqual( Stem("yammerschooner"), "yammerschoon");});
test("yammerschoonering -> yammerschoon", function() {deepEqual( Stem("yammerschoonering"), "yammerschoon");});
test("yams -> yam", function() {deepEqual( Stem("yams"), "yam");});
test("yan -> yan", function() {deepEqual( Stem("yan"), "yan");});
test("yankee -> yanke", function() {deepEqual( Stem("yankee"), "yanke");});
test("yaquil -> yaquil", function() {deepEqual( Stem("yaquil"), "yaquil");});
test("yard -> yard", function() {deepEqual( Stem("yard"), "yard");});
test("yards -> yard", function() {deepEqual( Stem("yards"), "yard");});
test("yarn -> yarn", function() {deepEqual( Stem("yarn"), "yarn");});
test("yataghan -> yataghan", function() {deepEqual( Stem("yataghan"), "yataghan");});
test("yawl -> yawl", function() {deepEqual( Stem("yawl"), "yawl");});
test("yawn -> yawn", function() {deepEqual( Stem("yawn"), "yawn");});
test("yawned -> yawn", function() {deepEqual( Stem("yawned"), "yawn");});
test("yawning -> yawn", function() {deepEqual( Stem("yawning"), "yawn");});
test("yawns -> yawn", function() {deepEqual( Stem("yawns"), "yawn");});
test("ye -> ye", function() {deepEqual( Stem("ye"), "ye");});
test("yea -> yea", function() {deepEqual( Stem("yea"), "yea");});
test("year -> year", function() {deepEqual( Stem("year"), "year");});
test("yearly -> year", function() {deepEqual( Stem("yearly"), "year");});
test("yearned -> yearn", function() {deepEqual( Stem("yearned"), "yearn");});
test("yearning -> yearn", function() {deepEqual( Stem("yearning"), "yearn");});
test("yearnings -> yearn", function() {deepEqual( Stem("yearnings"), "yearn");});
test("years -> year", function() {deepEqual( Stem("years"), "year");});
test("yegorovna -> yegorovna", function() {deepEqual( Stem("yegorovna"), "yegorovna");});
test("yell -> yell", function() {deepEqual( Stem("yell"), "yell");});
test("yelled -> yell", function() {deepEqual( Stem("yelled"), "yell");});
test("yelling -> yell", function() {deepEqual( Stem("yelling"), "yell");});
test("yellow -> yellow", function() {deepEqual( Stem("yellow"), "yellow");});
test("yellowed -> yellow", function() {deepEqual( Stem("yellowed"), "yellow");});
test("yellower -> yellow", function() {deepEqual( Stem("yellower"), "yellow");});
test("yellowish -> yellowish", function() {deepEqual( Stem("yellowish"), "yellowish");});
test("yells -> yell", function() {deepEqual( Stem("yells"), "yell");});
test("yelping -> yelp", function() {deepEqual( Stem("yelping"), "yelp");});
test("yeoman -> yeoman", function() {deepEqual( Stem("yeoman"), "yeoman");});
test("yerba -> yerba", function() {deepEqual( Stem("yerba"), "yerba");});
test("yes -> yes", function() {deepEqual( Stem("yes"), "yes");});
test("yesday -> yesday", function() {deepEqual( Stem("yesday"), "yesday");});
test("yeso -> yeso", function() {deepEqual( Stem("yeso"), "yeso");});
test("yesterday -> yesterday", function() {deepEqual( Stem("yesterday"), "yesterday");});
test("yet -> yet", function() {deepEqual( Stem("yet"), "yet");});
test("yew -> yew", function() {deepEqual( Stem("yew"), "yew");});
test("yield -> yield", function() {deepEqual( Stem("yield"), "yield");});
test("yielded -> yield", function() {deepEqual( Stem("yielded"), "yield");});
test("yielding -> yield", function() {deepEqual( Stem("yielding"), "yield");});
test("yields -> yield", function() {deepEqual( Stem("yields"), "yield");});
test("yinder -> yinder", function() {deepEqual( Stem("yinder"), "yinder");});
test("yit -> yit", function() {deepEqual( Stem("yit"), "yit");});
test("yo -> yo", function() {deepEqual( Stem("yo"), "yo");});
test("yoke -> yoke", function() {deepEqual( Stem("yoke"), "yoke");});
test("yokes -> yoke", function() {deepEqual( Stem("yokes"), "yoke");});
test("yolk -> yolk", function() {deepEqual( Stem("yolk"), "yolk");});
test("yon -> yon", function() {deepEqual( Stem("yon"), "yon");});
test("yonder -> yonder", function() {deepEqual( Stem("yonder"), "yonder");});
test("yonge -> yong", function() {deepEqual( Stem("yonge"), "yong");});
test("yoong -> yoong", function() {deepEqual( Stem("yoong"), "yoong");});
test("yoongster -> yoongster", function() {deepEqual( Stem("yoongster"), "yoongster");});
test("yore -> yore", function() {deepEqual( Stem("yore"), "yore");});
test("yorick -> yorick", function() {deepEqual( Stem("yorick"), "yorick");});
test("york -> york", function() {deepEqual( Stem("york"), "york");});
test("yorkshire -> yorkshir", function() {deepEqual( Stem("yorkshire"), "yorkshir");});
test("yorkshireman -> yorkshireman", function() {deepEqual( Stem("yorkshireman"), "yorkshireman");});
test("you -> you", function() {deepEqual( Stem("you"), "you");});
test("youn -> youn", function() {deepEqual( Stem("youn"), "youn");});
test("young -> young", function() {deepEqual( Stem("young"), "young");});
test("younger -> younger", function() {deepEqual( Stem("younger"), "younger");});
test("youngest -> youngest", function() {deepEqual( Stem("youngest"), "youngest");});
test("youngster -> youngster", function() {deepEqual( Stem("youngster"), "youngster");});
test("youngsters -> youngster", function() {deepEqual( Stem("youngsters"), "youngster");});
test("your -> your", function() {deepEqual( Stem("your"), "your");});
test("yours -> your", function() {deepEqual( Stem("yours"), "your");});
test("yourself -> yourself", function() {deepEqual( Stem("yourself"), "yourself");});
test("yourselves -> yourselv", function() {deepEqual( Stem("yourselves"), "yourselv");});
test("youth -> youth", function() {deepEqual( Stem("youth"), "youth");});
test("youthful -> youth", function() {deepEqual( Stem("youthful"), "youth");});
test("youthfully -> youth", function() {deepEqual( Stem("youthfully"), "youth");});
test("youthfulness -> youth", function() {deepEqual( Stem("youthfulness"), "youth");});
test("youths -> youth", function() {deepEqual( Stem("youths"), "youth");});
test("yquem -> yquem", function() {deepEqual( Stem("yquem"), "yquem");});
test("yseulte -> yseult", function() {deepEqual( Stem("yseulte"), "yseult");});
test("yucca -> yucca", function() {deepEqual( Stem("yucca"), "yucca");});
test("yushin -> yushin", function() {deepEqual( Stem("yushin"), "yushin");});
test("yusupov -> yusupov", function() {deepEqual( Stem("yusupov"), "yusupov");});
test("z -> z", function() {deepEqual( Stem("z"), "z");});
test("zag -> zag", function() {deepEqual( Stem("zag"), "zag");});
test("zaharovitch -> zaharovitch", function() {deepEqual( Stem("zaharovitch"), "zaharovitch");});
test("zametov -> zametov", function() {deepEqual( Stem("zametov"), "zametov");});
test("zample -> zampl", function() {deepEqual( Stem("zample"), "zampl");});
test("zaraisk -> zaraisk", function() {deepEqual( Stem("zaraisk"), "zaraisk");});
test("zaraisky -> zaraiski", function() {deepEqual( Stem("zaraisky"), "zaraiski");});
test("zarnitsyn -> zarnitsyn", function() {deepEqual( Stem("zarnitsyn"), "zarnitsyn");});
test("zeal -> zeal", function() {deepEqual( Stem("zeal"), "zeal");});
test("zealand -> zealand", function() {deepEqual( Stem("zealand"), "zealand");});
test("zealander -> zealand", function() {deepEqual( Stem("zealander"), "zealand");});
test("zealanders -> zealand", function() {deepEqual( Stem("zealanders"), "zealand");});
test("zealous -> zealous", function() {deepEqual( Stem("zealous"), "zealous");});
test("zebras -> zebra", function() {deepEqual( Stem("zebras"), "zebra");});
test("zelandiae -> zelandia", function() {deepEqual( Stem("zelandiae"), "zelandia");});
test("zelinda -> zelinda", function() {deepEqual( Stem("zelinda"), "zelinda");});
test("zenaida -> zenaida", function() {deepEqual( Stem("zenaida"), "zenaida");});
test("zenith -> zenith", function() {deepEqual( Stem("zenith"), "zenith");});
test("zest -> zest", function() {deepEqual( Stem("zest"), "zest");});
test("zeus -> zeus", function() {deepEqual( Stem("zeus"), "zeus");});
test("zig -> zig", function() {deepEqual( Stem("zig"), "zig");});
test("zigzag -> zigzag", function() {deepEqual( Stem("zigzag"), "zigzag");});
test("zigzags -> zigzag", function() {deepEqual( Stem("zigzags"), "zigzag");});
test("zimmerman -> zimmerman", function() {deepEqual( Stem("zimmerman"), "zimmerman");});
test("zone -> zone", function() {deepEqual( Stem("zone"), "zone");});
test("zones -> zone", function() {deepEqual( Stem("zones"), "zone");});
test("zonotrichia -> zonotrichia", function() {deepEqual( Stem("zonotrichia"), "zonotrichia");});
test("zoo -> zoo", function() {deepEqual( Stem("zoo"), "zoo");});
test("zoodle -> zoodl", function() {deepEqual( Stem("zoodle"), "zoodl");});
test("zooks -> zook", function() {deepEqual( Stem("zooks"), "zook");});
test("zoolog -> zoolog", function() {deepEqual( Stem("zoolog"), "zoolog");});
test("zoological -> zoolog", function() {deepEqual( Stem("zoological"), "zoolog");});
test("zoologically -> zoolog", function() {deepEqual( Stem("zoologically"), "zoolog");});
test("zoology -> zoolog", function() {deepEqual( Stem("zoology"), "zoolog");});
test("zoophyt -> zoophyt", function() {deepEqual( Stem("zoophyt"), "zoophyt");});
test("zoophyte -> zoophyt", function() {deepEqual( Stem("zoophyte"), "zoophyt");});
test("zoophytes -> zoophyt", function() {deepEqual( Stem("zoophytes"), "zoophyt");});
test("zorillo -> zorillo", function() {deepEqual( Stem("zorillo"), "zorillo");});
test("zorillos -> zorillo", function() {deepEqual( Stem("zorillos"), "zorillo");});
test("zossimov -> zossimov", function() {deepEqual( Stem("zossimov"), "zossimov");});
test("zu -> zu", function() {deepEqual( Stem("zu"), "zu");});

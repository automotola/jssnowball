QUnit.config.hidepassed = true;
var Stem = snowballFactory.newStemmer('norwegian').stem;
test("a -> a", function() {deepEqual( Stem("a"), "a");});
test("aabakken -> aabakk", function() {deepEqual( Stem("aabakken"), "aabakk");});
test("aabakkens -> aabakk", function() {deepEqual( Stem("aabakkens"), "aabakk");});
test("aarbakke -> aarbakk", function() {deepEqual( Stem("aarbakke"), "aarbakk");});
test("aarum -> aarum", function() {deepEqual( Stem("aarum"), "aarum");});
test("aase -> aas", function() {deepEqual( Stem("aase"), "aas");});
test("ab -> ab", function() {deepEqual( Stem("ab"), "ab");});
test("abitanti -> abitanti", function() {deepEqual( Stem("abitanti"), "abitanti");});
test("abitazione -> abitazion", function() {deepEqual( Stem("abitazione"), "abitazion");});
test("ablegøyer -> ablegøy", function() {deepEqual( Stem("ablegøyer"), "ablegøy");});
test("absolutt -> absolutt", function() {deepEqual( Stem("absolutt"), "absolutt");});
test("absorberes -> absorber", function() {deepEqual( Stem("absorberes"), "absorber");});
test("ad -> ad", function() {deepEqual( Stem("ad"), "ad");});
test("adgang -> adgang", function() {deepEqual( Stem("adgang"), "adgang");});
test("adgangen -> adgang", function() {deepEqual( Stem("adgangen"), "adgang");});
test("adkomst -> adkomst", function() {deepEqual( Stem("adkomst"), "adkomst");});
test("adkomstdokument -> adkomstdokument", function() {deepEqual( Stem("adkomstdokument"), "adkomstdokument");});
test("adkomstdokumenter -> adkomstdokument", function() {deepEqual( Stem("adkomstdokumenter"), "adkomstdokument");});
test("adkomsten -> adkomst", function() {deepEqual( Stem("adkomsten"), "adkomst");});
test("adlyde -> adlyd", function() {deepEqual( Stem("adlyde"), "adlyd");});
test("adlyder -> adlyd", function() {deepEqual( Stem("adlyder"), "adlyd");});
test("adm -> adm", function() {deepEqual( Stem("adm"), "adm");});
test("administrasjon -> administrasjon", function() {deepEqual( Stem("administrasjon"), "administrasjon");});
test("administrasjonen -> administrasjon", function() {deepEqual( Stem("administrasjonen"), "administrasjon");});
test("administrasjonsdepartementet -> administrasjonsdepartement", function() {deepEqual( Stem("administrasjonsdepartementet"), "administrasjonsdepartement");});
test("administrasjonskostnadene -> administrasjonskostnad", function() {deepEqual( Stem("administrasjonskostnadene"), "administrasjonskostnad");});
test("administrativ -> administrativ", function() {deepEqual( Stem("administrativ"), "administrativ");});
test("administrative -> administrativ", function() {deepEqual( Stem("administrative"), "administrativ");});
test("administrativt -> administrativ", function() {deepEqual( Stem("administrativt"), "administrativ");});
test("administrere -> administrer", function() {deepEqual( Stem("administrere"), "administrer");});
test("administrerende -> administrer", function() {deepEqual( Stem("administrerende"), "administrer");});
test("administreres -> administrer", function() {deepEqual( Stem("administreres"), "administrer");});
test("administrert -> administrer", function() {deepEqual( Stem("administrert"), "administrer");});
test("adopsjon -> adopsjon", function() {deepEqual( Stem("adopsjon"), "adopsjon");});
test("adopsjonspenger -> adopsjonspeng", function() {deepEqual( Stem("adopsjonspenger"), "adopsjonspeng");});
test("adresse -> adress", function() {deepEqual( Stem("adresse"), "adress");});
test("adresser -> adress", function() {deepEqual( Stem("adresser"), "adress");});
test("adskillelse -> adskill", function() {deepEqual( Stem("adskillelse"), "adskill");});
test("adskilt -> adskilt", function() {deepEqual( Stem("adskilt"), "adskilt");});
test("advare -> advar", function() {deepEqual( Stem("advare"), "advar");});
test("advarselen -> advarsel", function() {deepEqual( Stem("advarselen"), "advarsel");});
test("advart -> advart", function() {deepEqual( Stem("advart"), "advart");});
test("advokat -> advokat", function() {deepEqual( Stem("advokat"), "advokat");});
test("advokatar -> advokat", function() {deepEqual( Stem("advokatar"), "advokat");});
test("advokatfirmaet -> advokatfirma", function() {deepEqual( Stem("advokatfirmaet"), "advokatfirma");});
test("advokatfullmektig -> advokatfullmekt", function() {deepEqual( Stem("advokatfullmektig"), "advokatfullmekt");});
test("agder -> agd", function() {deepEqual( Stem("agder"), "agd");});
test("agenter -> agent", function() {deepEqual( Stem("agenter"), "agent");});
test("agenturer -> agentur", function() {deepEqual( Stem("agenturer"), "agentur");});
test("aggregeres -> aggreger", function() {deepEqual( Stem("aggregeres"), "aggreger");});
test("aggregert -> aggreger", function() {deepEqual( Stem("aggregert"), "aggreger");});
test("agn -> agn", function() {deepEqual( Stem("agn"), "agn");});
test("agnar -> agn", function() {deepEqual( Stem("agnar"), "agn");});
test("agreement -> agreement", function() {deepEqual( Stem("agreement"), "agreement");});
test("ajourføring -> ajourføring", function() {deepEqual( Stem("ajourføring"), "ajourføring");});
test("akademikerne -> akademikern", function() {deepEqual( Stem("akademikerne"), "akademikern");});
test("akademikernes -> akademikern", function() {deepEqual( Stem("akademikernes"), "akademikern");});
test("ake -> ake", function() {deepEqual( Stem("ake"), "ake");});
test("akershus -> akershus", function() {deepEqual( Stem("akershus"), "akershus");});
test("akkord -> akkord", function() {deepEqual( Stem("akkord"), "akkord");});
test("akkumulerte -> akkumuler", function() {deepEqual( Stem("akkumulerte"), "akkumuler");});
test("akkurat -> akkurat", function() {deepEqual( Stem("akkurat"), "akkurat");});
test("aksept -> aksept", function() {deepEqual( Stem("aksept"), "aksept");});
test("akseptabel -> akseptabel", function() {deepEqual( Stem("akseptabel"), "akseptabel");});
test("akseptabelt -> akseptabelt", function() {deepEqual( Stem("akseptabelt"), "akseptabelt");});
test("akseptable -> akseptabl", function() {deepEqual( Stem("akseptable"), "akseptabl");});
test("aksepterast -> aksepter", function() {deepEqual( Stem("aksepterast"), "aksepter");});
test("akseptere -> aksepter", function() {deepEqual( Stem("akseptere"), "aksepter");});
test("aksepteres -> aksepter", function() {deepEqual( Stem("aksepteres"), "aksepter");});
test("akseptert -> aksepter", function() {deepEqual( Stem("akseptert"), "aksepter");});
test("aksjane -> aksj", function() {deepEqual( Stem("aksjane"), "aksj");});
test("aksjar -> aksj", function() {deepEqual( Stem("aksjar"), "aksj");});
test("aksje -> aksj", function() {deepEqual( Stem("aksje"), "aksj");});
test("aksjeandel -> aksjeandel", function() {deepEqual( Stem("aksjeandel"), "aksjeandel");});
test("aksjeavkastning -> aksjeavkastning", function() {deepEqual( Stem("aksjeavkastning"), "aksjeavkastning");});
test("aksjebrev -> aksjebrev", function() {deepEqual( Stem("aksjebrev"), "aksjebrev");});
test("aksjebustader -> aksjebustad", function() {deepEqual( Stem("aksjebustader"), "aksjebustad");});
test("aksjeeigar -> aksje", function() {deepEqual( Stem("aksjeeigar"), "aksje");});
test("aksjeeigarane -> aksjeeigar", function() {deepEqual( Stem("aksjeeigarane"), "aksjeeigar");});
test("aksjeeigarar -> aksjeeigar", function() {deepEqual( Stem("aksjeeigarar"), "aksjeeigar");});
test("aksjeeigaravtale -> aksjeeigaravtal", function() {deepEqual( Stem("aksjeeigaravtale"), "aksjeeigaravtal");});
test("aksjeeigaren -> aksjeeigar", function() {deepEqual( Stem("aksjeeigaren"), "aksjeeigar");});
test("aksjegevinster -> aksjegevinst", function() {deepEqual( Stem("aksjegevinster"), "aksjegevinst");});
test("aksjeinnskot -> aksjeinnskot", function() {deepEqual( Stem("aksjeinnskot"), "aksjeinnskot");});
test("aksjekapital -> aksjekapital", function() {deepEqual( Stem("aksjekapital"), "aksjekapital");});
test("aksjekapitalen -> aksjekapital", function() {deepEqual( Stem("aksjekapitalen"), "aksjekapital");});
test("aksjelov -> aksj", function() {deepEqual( Stem("aksjelov"), "aksj");});
test("aksjelova -> aksj", function() {deepEqual( Stem("aksjelova"), "aksj");});
test("aksjeloven -> aksj", function() {deepEqual( Stem("aksjeloven"), "aksj");});
test("aksjelovens -> aksj", function() {deepEqual( Stem("aksjelovens"), "aksj");});
test("aksjelovgjeving -> aksjelovgjeving", function() {deepEqual( Stem("aksjelovgjeving"), "aksjelovgjeving");});
test("aksjelovgjevinga -> aksjelovgjeving", function() {deepEqual( Stem("aksjelovgjevinga"), "aksjelovgjeving");});
test("aksjer -> aksj", function() {deepEqual( Stem("aksjer"), "aksj");});
test("aksjerettslig -> aksjeretts", function() {deepEqual( Stem("aksjerettslig"), "aksjeretts");});
test("aksjeselskap -> aksjeselskap", function() {deepEqual( Stem("aksjeselskap"), "aksjeselskap");});
test("aksjeselskaper -> aksjeselskap", function() {deepEqual( Stem("aksjeselskaper"), "aksjeselskap");});
test("aksjeselskapet -> aksjeselskap", function() {deepEqual( Stem("aksjeselskapet"), "aksjeselskap");});
test("aksjeselskapsformen -> aksjeselskapsform", function() {deepEqual( Stem("aksjeselskapsformen"), "aksjeselskapsform");});
test("aksjeselskapsrettslege -> aksjeselskapsretts", function() {deepEqual( Stem("aksjeselskapsrettslege"), "aksjeselskapsretts");});
test("aksjonær -> aksjonær", function() {deepEqual( Stem("aksjonær"), "aksjonær");});
test("aksjonæroppgaver -> aksjonæroppgav", function() {deepEqual( Stem("aksjonæroppgaver"), "aksjonæroppgav");});
test("aktersetet -> akterset", function() {deepEqual( Stem("aktersetet"), "akterset");});
test("aktes -> akt", function() {deepEqual( Stem("aktes"), "akt");});
test("aktiv -> aktiv", function() {deepEqual( Stem("aktiv"), "aktiv");});
test("aktiva -> aktiv", function() {deepEqual( Stem("aktiva"), "aktiv");});
test("aktivaklasser -> aktivaklass", function() {deepEqual( Stem("aktivaklasser"), "aktivaklass");});
test("aktivasammensetning -> aktivasammensetning", function() {deepEqual( Stem("aktivasammensetning"), "aktivasammensetning");});
test("aktive -> aktiv", function() {deepEqual( Stem("aktive"), "aktiv");});
test("aktivitet -> aktivit", function() {deepEqual( Stem("aktivitet"), "aktivit");});
test("aktivitetane -> aktivitet", function() {deepEqual( Stem("aktivitetane"), "aktivitet");});
test("aktivitetar -> aktivitet", function() {deepEqual( Stem("aktivitetar"), "aktivitet");});
test("aktiviteten -> aktivitet", function() {deepEqual( Stem("aktiviteten"), "aktivitet");});
test("aktivitetene -> aktivitet", function() {deepEqual( Stem("aktivitetene"), "aktivitet");});
test("aktiviteter -> aktivitet", function() {deepEqual( Stem("aktiviteter"), "aktivitet");});
test("aktivitetsøkning -> aktivitetsøkning", function() {deepEqual( Stem("aktivitetsøkning"), "aktivitetsøkning");});
test("aktivt -> aktiv", function() {deepEqual( Stem("aktivt"), "aktiv");});
test("aktlaust -> aktlaust", function() {deepEqual( Stem("aktlaust"), "aktlaust");});
test("aktløyse -> aktløys", function() {deepEqual( Stem("aktløyse"), "aktløys");});
test("aktsemd -> aktsemd", function() {deepEqual( Stem("aktsemd"), "aktsemd");});
test("aktsemdplikta -> aktsemdplikt", function() {deepEqual( Stem("aktsemdplikta"), "aktsemdplikt");});
test("aktualisere -> aktualiser", function() {deepEqual( Stem("aktualisere"), "aktualiser");});
test("aktuar -> aktu", function() {deepEqual( Stem("aktuar"), "aktu");});
test("aktuell -> aktuell", function() {deepEqual( Stem("aktuell"), "aktuell");});
test("aktuelle -> aktuell", function() {deepEqual( Stem("aktuelle"), "aktuell");});
test("aktuelt -> aktuelt", function() {deepEqual( Stem("aktuelt"), "aktuelt");});
test("aktør -> aktør", function() {deepEqual( Stem("aktør"), "aktør");});
test("aktørane -> aktør", function() {deepEqual( Stem("aktørane"), "aktør");});
test("aktørar -> aktør", function() {deepEqual( Stem("aktørar"), "aktør");});
test("aktørene -> aktør", function() {deepEqual( Stem("aktørene"), "aktør");});
test("aktørenes -> aktør", function() {deepEqual( Stem("aktørenes"), "aktør");});
test("aktørens -> aktør", function() {deepEqual( Stem("aktørens"), "aktør");});
test("aktører -> aktør", function() {deepEqual( Stem("aktører"), "aktør");});
test("aktørers -> aktør", function() {deepEqual( Stem("aktørers"), "aktør");});
test("aktørgruppe -> aktørgrupp", function() {deepEqual( Stem("aktørgruppe"), "aktørgrupp");});
test("aku -> aku", function() {deepEqual( Stem("aku"), "aku");});
test("alarmsignalet -> alarmsignal", function() {deepEqual( Stem("alarmsignalet"), "alarmsignal");});
test("aldeles -> aldel", function() {deepEqual( Stem("aldeles"), "aldel");});
test("alder -> ald", function() {deepEqual( Stem("alder"), "ald");});
test("alderdom -> alderdom", function() {deepEqual( Stem("alderdom"), "alderdom");});
test("alderdommen -> alderdomm", function() {deepEqual( Stem("alderdommen"), "alderdomm");});
test("alderen -> alder", function() {deepEqual( Stem("alderen"), "alder");});
test("alderkilde -> alderkild", function() {deepEqual( Stem("alderkilde"), "alderkild");});
test("alderpensjonen -> alderpensjon", function() {deepEqual( Stem("alderpensjonen"), "alderpensjon");});
test("alderpensjonskapital -> alderpensjonskapital", function() {deepEqual( Stem("alderpensjonskapital"), "alderpensjonskapital");});
test("alders -> ald", function() {deepEqual( Stem("alders"), "ald");});
test("aldersdifferanse -> aldersdifferans", function() {deepEqual( Stem("aldersdifferanse"), "aldersdifferans");});
test("aldersforskjellen -> aldersforskjell", function() {deepEqual( Stem("aldersforskjellen"), "aldersforskjell");});
test("aldersgrense -> aldersgrens", function() {deepEqual( Stem("aldersgrense"), "aldersgrens");});
test("aldersgrensen -> aldersgrens", function() {deepEqual( Stem("aldersgrensen"), "aldersgrens");});
test("aldersgrensene -> aldersgrens", function() {deepEqual( Stem("aldersgrensene"), "aldersgrens");});
test("aldersgrupper -> aldersgrupp", function() {deepEqual( Stem("aldersgrupper"), "aldersgrupp");});
test("alderspensjon -> alderspensjon", function() {deepEqual( Stem("alderspensjon"), "alderspensjon");});
test("alderspensjonen -> alderspensjon", function() {deepEqual( Stem("alderspensjonen"), "alderspensjon");});
test("alderspensjoner -> alderspensjon", function() {deepEqual( Stem("alderspensjoner"), "alderspensjon");});
test("alderspensjonist -> alderspensjonist", function() {deepEqual( Stem("alderspensjonist"), "alderspensjonist");});
test("alderspensjonistene -> alderspensjonist", function() {deepEqual( Stem("alderspensjonistene"), "alderspensjonist");});
test("alderspensjonister -> alderspensjonist", function() {deepEqual( Stem("alderspensjonister"), "alderspensjonist");});
test("alderspensjonsforsikring -> alderspensjonsforsikring", function() {deepEqual( Stem("alderspensjonsforsikring"), "alderspensjonsforsikring");});
test("alderspensjonsforsikringen -> alderspensjonsforsikring", function() {deepEqual( Stem("alderspensjonsforsikringen"), "alderspensjonsforsikring");});
test("alderspensjonsforsikringsavtale -> alderspensjonsforsikringsavtal", function() {deepEqual( Stem("alderspensjonsforsikringsavtale"), "alderspensjonsforsikringsavtal");});
test("alderspensjonsforsikringsavtaler -> alderspensjonsforsikringsavtal", function() {deepEqual( Stem("alderspensjonsforsikringsavtaler"), "alderspensjonsforsikringsavtal");});
test("alderspensjonskapital -> alderspensjonskapital", function() {deepEqual( Stem("alderspensjonskapital"), "alderspensjonskapital");});
test("alderspensjonskapitalbevis -> alderspensjonskapitalbevis", function() {deepEqual( Stem("alderspensjonskapitalbevis"), "alderspensjonskapitalbevis");});
test("alderspensjonskapitalen -> alderspensjonskapital", function() {deepEqual( Stem("alderspensjonskapitalen"), "alderspensjonskapital");});
test("alderspensjonskapitalens -> alderspensjonskapital", function() {deepEqual( Stem("alderspensjonskapitalens"), "alderspensjonskapital");});
test("alderspensjonskapitalkontoen -> alderspensjonskapitalkonto", function() {deepEqual( Stem("alderspensjonskapitalkontoen"), "alderspensjonskapitalkonto");});
test("alderspensjonskonti -> alderspensjonskonti", function() {deepEqual( Stem("alderspensjonskonti"), "alderspensjonskonti");});
test("alderspensjonskonto -> alderspensjonskonto", function() {deepEqual( Stem("alderspensjonskonto"), "alderspensjonskonto");});
test("alderspensjonskontoen -> alderspensjonskonto", function() {deepEqual( Stem("alderspensjonskontoen"), "alderspensjonskonto");});
test("alderspensjonsnivå -> alderspensjonsnivå", function() {deepEqual( Stem("alderspensjonsnivå"), "alderspensjonsnivå");});
test("alderspensjonsordning -> alderspensjonsordning", function() {deepEqual( Stem("alderspensjonsordning"), "alderspensjonsordning");});
test("alderspensjonsordninger -> alderspensjonsordning", function() {deepEqual( Stem("alderspensjonsordninger"), "alderspensjonsordning");});
test("alderspensjonsrettigheter -> alderspensjonsrett", function() {deepEqual( Stem("alderspensjonsrettigheter"), "alderspensjonsrett");});
test("alderspensjonsspareavtale -> alderspensjonsspareavtal", function() {deepEqual( Stem("alderspensjonsspareavtale"), "alderspensjonsspareavtal");});
test("alderspensjonsytelse -> alderspensjonsyt", function() {deepEqual( Stem("alderspensjonsytelse"), "alderspensjonsyt");});
test("alderssamansetjinga -> alderssamansetjing", function() {deepEqual( Stem("alderssamansetjinga"), "alderssamansetjing");});
test("aldre -> aldr", function() {deepEqual( Stem("aldre"), "aldr");});
test("aldri -> aldri", function() {deepEqual( Stem("aldri"), "aldri");});
test("aldringen -> aldring", function() {deepEqual( Stem("aldringen"), "aldring");});
test("aleine -> alein", function() {deepEqual( Stem("aleine"), "alein");});
test("alene -> alen", function() {deepEqual( Stem("alene"), "alen");});
test("alf -> alf", function() {deepEqual( Stem("alf"), "alf");});
test("alfhild -> alfhild", function() {deepEqual( Stem("alfhild"), "alfhild");});
test("all -> all", function() {deepEqual( Stem("all"), "all");});
test("alldeles -> alldel", function() {deepEqual( Stem("alldeles"), "alldel");});
test("alle -> all", function() {deepEqual( Stem("alle"), "all");});
test("aller -> all", function() {deepEqual( Stem("aller"), "all");});
test("allerede -> aller", function() {deepEqual( Stem("allerede"), "aller");});
test("allereie -> allerei", function() {deepEqual( Stem("allereie"), "allerei");});
test("alles -> all", function() {deepEqual( Stem("alles"), "all");});
test("allfader -> allfad", function() {deepEqual( Stem("allfader"), "allfad");});
test("alliance -> allianc", function() {deepEqual( Stem("alliance"), "allianc");});
test("alliansen -> allians", function() {deepEqual( Stem("alliansen"), "allians");});
test("allianser -> allians", function() {deepEqual( Stem("allianser"), "allians");});
test("allierte -> allier", function() {deepEqual( Stem("allierte"), "allier");});
test("allmannyttiga -> allmannytt", function() {deepEqual( Stem("allmannyttiga"), "allmannytt");});
test("allmektig -> allmekt", function() {deepEqual( Stem("allmektig"), "allmekt");});
test("allmen -> allm", function() {deepEqual( Stem("allmen"), "allm");});
test("allmenn -> allmenn", function() {deepEqual( Stem("allmenn"), "allmenn");});
test("allmennaksjelova -> allmennaksj", function() {deepEqual( Stem("allmennaksjelova"), "allmennaksj");});
test("allmennaksjeloven -> allmennaksj", function() {deepEqual( Stem("allmennaksjeloven"), "allmennaksj");});
test("allmennaksjeselskap -> allmennaksjeselskap", function() {deepEqual( Stem("allmennaksjeselskap"), "allmennaksjeselskap");});
test("allmennaksjeselskaper -> allmennaksjeselskap", function() {deepEqual( Stem("allmennaksjeselskaper"), "allmennaksjeselskap");});
test("allmenne -> allmenn", function() {deepEqual( Stem("allmenne"), "allmenn");});
test("allmennhetens -> allmenn", function() {deepEqual( Stem("allmennhetens"), "allmenn");});
test("allmennspråket -> allmennspråk", function() {deepEqual( Stem("allmennspråket"), "allmennspråk");});
test("allmennyttiga -> allmennytt", function() {deepEqual( Stem("allmennyttiga"), "allmennytt");});
test("allmennyttige -> allmennytt", function() {deepEqual( Stem("allmennyttige"), "allmennytt");});
test("allment -> allment", function() {deepEqual( Stem("allment"), "allment");});
test("allmugen -> allmug", function() {deepEqual( Stem("allmugen"), "allmug");});
test("allsidige -> allsid", function() {deepEqual( Stem("allsidige"), "allsid");});
test("alltid -> alltid", function() {deepEqual( Stem("alltid"), "alltid");});
test("alltids -> alltid", function() {deepEqual( Stem("alltids"), "alltid");});
test("allting -> allting", function() {deepEqual( Stem("allting"), "allting");});
test("almen -> alm", function() {deepEqual( Stem("almen"), "alm");});
test("almene -> alm", function() {deepEqual( Stem("almene"), "alm");});
test("almenmerknadene -> almenmerknad", function() {deepEqual( Stem("almenmerknadene"), "almenmerknad");});
test("almennaksjelovens -> almennaksj", function() {deepEqual( Stem("almennaksjelovens"), "almennaksj");});
test("almennyttig -> almennytt", function() {deepEqual( Stem("almennyttig"), "almennytt");});
test("alminnelig -> alminn", function() {deepEqual( Stem("alminnelig"), "alminn");});
test("alminnelige -> alminn", function() {deepEqual( Stem("alminnelige"), "alminn");});
test("alminnelighet -> alminn", function() {deepEqual( Stem("alminnelighet"), "alminn");});
test("alnabru -> alnabru", function() {deepEqual( Stem("alnabru"), "alnabru");});
test("alt -> alt", function() {deepEqual( Stem("alt"), "alt");});
test("alta -> alt", function() {deepEqual( Stem("alta"), "alt");});
test("alternativ -> alternativ", function() {deepEqual( Stem("alternativ"), "alternativ");});
test("alternative -> alternativ", function() {deepEqual( Stem("alternative"), "alternativ");});
test("alternativene -> alternativ", function() {deepEqual( Stem("alternativene"), "alternativ");});
test("alternativer -> alternativ", function() {deepEqual( Stem("alternativer"), "alternativ");});
test("alternativet -> alternativ", function() {deepEqual( Stem("alternativet"), "alternativ");});
test("alternativt -> alternativ", function() {deepEqual( Stem("alternativt"), "alternativ");});
test("alternerer -> alterner", function() {deepEqual( Stem("alternerer"), "alterner");});
test("altfor -> altfor", function() {deepEqual( Stem("altfor"), "altfor");});
test("altoverveiende -> altovervei", function() {deepEqual( Stem("altoverveiende"), "altovervei");});
test("altså -> altså", function() {deepEqual( Stem("altså"), "altså");});
test("aluminium -> aluminium", function() {deepEqual( Stem("aluminium"), "aluminium");});
test("alvalde -> alvald", function() {deepEqual( Stem("alvalde"), "alvald");});
test("alvene -> alv", function() {deepEqual( Stem("alvene"), "alv");});
test("alvenes -> alv", function() {deepEqual( Stem("alvenes"), "alv");});
test("alver -> alv", function() {deepEqual( Stem("alver"), "alv");});
test("alveslekt -> alveslekt", function() {deepEqual( Stem("alveslekt"), "alveslekt");});
test("alvheim -> alvheim", function() {deepEqual( Stem("alvheim"), "alvheim");});
test("alvim -> alvim", function() {deepEqual( Stem("alvim"), "alvim");});
test("alvor -> alvor", function() {deepEqual( Stem("alvor"), "alvor");});
test("alvorleg -> alvor", function() {deepEqual( Stem("alvorleg"), "alvor");});
test("alvorlege -> alvor", function() {deepEqual( Stem("alvorlege"), "alvor");});
test("alvorlig -> alvor", function() {deepEqual( Stem("alvorlig"), "alvor");});
test("ambisjonsnivået -> ambisjonsnivå", function() {deepEqual( Stem("ambisjonsnivået"), "ambisjonsnivå");});
test("amma -> amm", function() {deepEqual( Stem("amma"), "amm");});
test("ammas -> amm", function() {deepEqual( Stem("ammas"), "amm");});
test("amsterdam -> amsterdam", function() {deepEqual( Stem("amsterdam"), "amsterdam");});
test("amtmannsvingen -> amtmannsving", function() {deepEqual( Stem("amtmannsvingen"), "amtmannsving");});
test("an -> an", function() {deepEqual( Stem("an"), "an");});
test("analogt -> analogt", function() {deepEqual( Stem("analogt"), "analogt");});
test("analyse -> analys", function() {deepEqual( Stem("analyse"), "analys");});
test("analysen -> analys", function() {deepEqual( Stem("analysen"), "analys");});
test("analysene -> analys", function() {deepEqual( Stem("analysene"), "analys");});
test("analyser -> analys", function() {deepEqual( Stem("analyser"), "analys");});
test("analysere -> analyser", function() {deepEqual( Stem("analysere"), "analyser");});
test("analysert -> analyser", function() {deepEqual( Stem("analysert"), "analyser");});
test("anbefaler -> anbefal", function() {deepEqual( Stem("anbefaler"), "anbefal");});
test("anbefales -> anbefal", function() {deepEqual( Stem("anbefales"), "anbefal");});
test("anbefaling -> anbefaling", function() {deepEqual( Stem("anbefaling"), "anbefaling");});
test("anbefalingene -> anbefaling", function() {deepEqual( Stem("anbefalingene"), "anbefaling");});
test("anbefalinger -> anbefaling", function() {deepEqual( Stem("anbefalinger"), "anbefaling");});
test("anbefalt -> anbefalt", function() {deepEqual( Stem("anbefalt"), "anbefalt");});
test("anbefalte -> anbefalt", function() {deepEqual( Stem("anbefalte"), "anbefalt");});
test("and -> and", function() {deepEqual( Stem("and"), "and");});
test("andamål -> andamål", function() {deepEqual( Stem("andamål"), "andamål");});
test("andamålsenlig -> andamålsen", function() {deepEqual( Stem("andamålsenlig"), "andamålsen");});
test("andel -> andel", function() {deepEqual( Stem("andel"), "andel");});
test("andelane -> andel", function() {deepEqual( Stem("andelane"), "andel");});
test("andelar -> andel", function() {deepEqual( Stem("andelar"), "andel");});
test("andeleigar -> andel", function() {deepEqual( Stem("andeleigar"), "andel");});
test("andeleigarane -> andeleigar", function() {deepEqual( Stem("andeleigarane"), "andeleigar");});
test("andeleigarbok -> andeleigarbok", function() {deepEqual( Stem("andeleigarbok"), "andeleigarbok");});
test("andelen -> andel", function() {deepEqual( Stem("andelen"), "andel");});
test("andelene -> andel", function() {deepEqual( Stem("andelene"), "andel");});
test("andeler -> andel", function() {deepEqual( Stem("andeler"), "andel");});
test("andelsbevis -> andelsbevis", function() {deepEqual( Stem("andelsbevis"), "andelsbevis");});
test("andelsbok -> andelsbok", function() {deepEqual( Stem("andelsbok"), "andelsbok");});
test("andelsboka -> andelsbok", function() {deepEqual( Stem("andelsboka"), "andelsbok");});
test("andelsboligforening -> andelsboligforening", function() {deepEqual( Stem("andelsboligforening"), "andelsboligforening");});
test("andelsboligforeninger -> andelsboligforening", function() {deepEqual( Stem("andelsboligforeninger"), "andelsboligforening");});
test("andelsboligorganisation -> andelsboligorganisation", function() {deepEqual( Stem("andelsboligorganisation"), "andelsboligorganisation");});
test("andelsboligorganisationer -> andelsboligorganisation", function() {deepEqual( Stem("andelsboligorganisationer"), "andelsboligorganisation");});
test("andelsbrev -> andelsbrev", function() {deepEqual( Stem("andelsbrev"), "andelsbrev");});
test("andelsbrevet -> andelsbrev", function() {deepEqual( Stem("andelsbrevet"), "andelsbrev");});
test("andelsdokument -> andelsdokument", function() {deepEqual( Stem("andelsdokument"), "andelsdokument");});
test("andelseier -> andelsei", function() {deepEqual( Stem("andelseier"), "andelsei");});
test("andelseiere -> andelseier", function() {deepEqual( Stem("andelseiere"), "andelseier");});
test("andelseierne -> andelseiern", function() {deepEqual( Stem("andelseierne"), "andelseiern");});
test("andelseiernes -> andelseiern", function() {deepEqual( Stem("andelseiernes"), "andelseiern");});
test("andelseigar -> andels", function() {deepEqual( Stem("andelseigar"), "andels");});
test("andelseigarane -> andelseigar", function() {deepEqual( Stem("andelseigarane"), "andelseigar");});
test("andelseigarar -> andelseigar", function() {deepEqual( Stem("andelseigarar"), "andelseigar");});
test("andelseigarbok -> andelseigarbok", function() {deepEqual( Stem("andelseigarbok"), "andelseigarbok");});
test("andelseigarboka -> andelseigarbok", function() {deepEqual( Stem("andelseigarboka"), "andelseigarbok");});
test("andelseigaren -> andelseigar", function() {deepEqual( Stem("andelseigaren"), "andelseigar");});
test("andelseigarens -> andelseigar", function() {deepEqual( Stem("andelseigarens"), "andelseigar");});
test("andelseigarforholdet -> andelseigarforhold", function() {deepEqual( Stem("andelseigarforholdet"), "andelseigarforhold");});
test("andelseigarposisjonen -> andelseigarposisjon", function() {deepEqual( Stem("andelseigarposisjonen"), "andelseigarposisjon");});
test("andelseigarregister -> andelseigarregist", function() {deepEqual( Stem("andelseigarregister"), "andelseigarregist");});
test("andelseigartal -> andelseigartal", function() {deepEqual( Stem("andelseigartal"), "andelseigartal");});
test("andelshaver -> andelshav", function() {deepEqual( Stem("andelshaver"), "andelshav");});
test("andelshavers -> andelshav", function() {deepEqual( Stem("andelshavers"), "andelshav");});
test("andelsinnskot -> andelsinnskot", function() {deepEqual( Stem("andelsinnskot"), "andelsinnskot");});
test("andelsinnskotet -> andelsinnskot", function() {deepEqual( Stem("andelsinnskotet"), "andelsinnskot");});
test("andelsinnskottet -> andelsinnskott", function() {deepEqual( Stem("andelsinnskottet"), "andelsinnskott");});
test("andelskapital -> andelskapital", function() {deepEqual( Stem("andelskapital"), "andelskapital");});
test("andelskapitalen -> andelskapital", function() {deepEqual( Stem("andelskapitalen"), "andelskapital");});
test("andelslag -> andelslag", function() {deepEqual( Stem("andelslag"), "andelslag");});
test("andelslaget -> andelslag", function() {deepEqual( Stem("andelslaget"), "andelslag");});
test("andelsobligasjonane -> andelsobligasjon", function() {deepEqual( Stem("andelsobligasjonane"), "andelsobligasjon");});
test("andelsobligasjonar -> andelsobligasjon", function() {deepEqual( Stem("andelsobligasjonar"), "andelsobligasjon");});
test("andelsrett -> andelsrett", function() {deepEqual( Stem("andelsrett"), "andelsrett");});
test("andelsselskaber -> andelsselskab", function() {deepEqual( Stem("andelsselskaber"), "andelsselskab");});
test("andelsselskapa -> andelsselskap", function() {deepEqual( Stem("andelsselskapa"), "andelsselskap");});
test("andelssum -> andelssum", function() {deepEqual( Stem("andelssum"), "andelssum");});
test("andelssummen -> andelssumm", function() {deepEqual( Stem("andelssummen"), "andelssumm");});
test("andelsteikning -> andelsteikning", function() {deepEqual( Stem("andelsteikning"), "andelsteikning");});
test("andelsteikninga -> andelsteikning", function() {deepEqual( Stem("andelsteikninga"), "andelsteikning");});
test("anders -> and", function() {deepEqual( Stem("anders"), "and");});
test("anderssen -> anderss", function() {deepEqual( Stem("anderssen"), "anderss");});
test("andra -> andr", function() {deepEqual( Stem("andra"), "andr");});
test("andre -> andr", function() {deepEqual( Stem("andre"), "andr");});
test("andres -> andr", function() {deepEqual( Stem("andres"), "andr");});
test("andrimne -> andrimn", function() {deepEqual( Stem("andrimne"), "andrimn");});
test("andsynes -> andsyn", function() {deepEqual( Stem("andsynes"), "andsyn");});
test("andvare -> andvar", function() {deepEqual( Stem("andvare"), "andvar");});
test("andvarefoss -> andvarefoss", function() {deepEqual( Stem("andvarefoss"), "andvarefoss");});
test("aner -> aner", function() {deepEqual( Stem("aner"), "aner");});
test("anerkjenne -> anerkjenn", function() {deepEqual( Stem("anerkjenne"), "anerkjenn");});
test("anerkjente -> anerkjent", function() {deepEqual( Stem("anerkjente"), "anerkjent");});
test("anføre -> anfør", function() {deepEqual( Stem("anføre"), "anfør");});
test("anfører -> anfør", function() {deepEqual( Stem("anfører"), "anfør");});
test("anføres -> anfør", function() {deepEqual( Stem("anføres"), "anfør");});
test("anført -> anført", function() {deepEqual( Stem("anført"), "anført");});
test("angerboda -> angerbod", function() {deepEqual( Stem("angerboda"), "angerbod");});
test("angi -> angi", function() {deepEqual( Stem("angi"), "angi");});
test("angir -> angir", function() {deepEqual( Stem("angir"), "angir");});
test("angis -> angis", function() {deepEqual( Stem("angis"), "angis");});
test("angitt -> angitt", function() {deepEqual( Stem("angitt"), "angitt");});
test("angitte -> angitt", function() {deepEqual( Stem("angitte"), "angitt");});
test("angivelse -> angiv", function() {deepEqual( Stem("angivelse"), "angiv");});
test("angjeldende -> angjeld", function() {deepEqual( Stem("angjeldende"), "angjeld");});
test("angre -> angr", function() {deepEqual( Stem("angre"), "angr");});
test("angrefrist -> angrefrist", function() {deepEqual( Stem("angrefrist"), "angrefrist");});
test("angrep -> angrep", function() {deepEqual( Stem("angrep"), "angrep");});
test("angrepet -> angrep", function() {deepEqual( Stem("angrepet"), "angrep");});
test("angrer -> angr", function() {deepEqual( Stem("angrer"), "angr");});
test("angret -> angr", function() {deepEqual( Stem("angret"), "angr");});
test("angripe -> angrip", function() {deepEqual( Stem("angripe"), "angrip");});
test("angriper -> angrip", function() {deepEqual( Stem("angriper"), "angrip");});
test("angst -> angst", function() {deepEqual( Stem("angst"), "angst");});
test("angt -> angt", function() {deepEqual( Stem("angt"), "angt");});
test("angår -> angår", function() {deepEqual( Stem("angår"), "angår");});
test("ankler -> ankl", function() {deepEqual( Stem("ankler"), "ankl");});
test("ankommer -> ankomm", function() {deepEqual( Stem("ankommer"), "ankomm");});
test("ankre -> ankr", function() {deepEqual( Stem("ankre"), "ankr");});
test("anledning -> anledning", function() {deepEqual( Stem("anledning"), "anledning");});
test("anledninger -> anledning", function() {deepEqual( Stem("anledninger"), "anledning");});
test("anlegg -> anlegg", function() {deepEqual( Stem("anlegg"), "anlegg");});
test("anleggene -> anlegg", function() {deepEqual( Stem("anleggene"), "anlegg");});
test("anlegget -> anlegg", function() {deepEqual( Stem("anlegget"), "anlegg");});
test("anleggsmessig -> anleggsmess", function() {deepEqual( Stem("anleggsmessig"), "anleggsmess");});
test("anleggsmidler -> anleggsmidl", function() {deepEqual( Stem("anleggsmidler"), "anleggsmidl");});
test("anliggende -> anligg", function() {deepEqual( Stem("anliggende"), "anligg");});
test("anløp -> anløp", function() {deepEqual( Stem("anløp"), "anløp");});
test("anløpe -> anløp", function() {deepEqual( Stem("anløpe"), "anløp");});
test("anløpene -> anløp", function() {deepEqual( Stem("anløpene"), "anløp");});
test("anløper -> anløp", function() {deepEqual( Stem("anløper"), "anløp");});
test("anløpes -> anløp", function() {deepEqual( Stem("anløpes"), "anløp");});
test("anløpsavgift -> anløpsavgift", function() {deepEqual( Stem("anløpsavgift"), "anløpsavgift");});
test("anløpsfrekvens -> anløpsfrekv", function() {deepEqual( Stem("anløpsfrekvens"), "anløpsfrekv");});
test("anløpshavn -> anløpshavn", function() {deepEqual( Stem("anløpshavn"), "anløpshavn");});
test("anløpshavner -> anløpshavn", function() {deepEqual( Stem("anløpshavner"), "anløpshavn");});
test("anløpshyppighet -> anløpshypp", function() {deepEqual( Stem("anløpshyppighet"), "anløpshypp");});
test("anløpsmønster -> anløpsmønst", function() {deepEqual( Stem("anløpsmønster"), "anløpsmønst");});
test("anløpsmønstre -> anløpsmønstr", function() {deepEqual( Stem("anløpsmønstre"), "anløpsmønstr");});
test("anløpspunkter -> anløpspunkt", function() {deepEqual( Stem("anløpspunkter"), "anløpspunkt");});
test("anløpssteder -> anløpssted", function() {deepEqual( Stem("anløpssteder"), "anløpssted");});
test("anløpsutgiftene -> anløpsutgift", function() {deepEqual( Stem("anløpsutgiftene"), "anløpsutgift");});
test("anmodet -> anmod", function() {deepEqual( Stem("anmodet"), "anmod");});
test("anna -> ann", function() {deepEqual( Stem("anna"), "ann");});
test("annan -> annan", function() {deepEqual( Stem("annan"), "annan");});
test("annaniassen -> annaniass", function() {deepEqual( Stem("annaniassen"), "annaniass");});
test("annat -> annat", function() {deepEqual( Stem("annat"), "annat");});
test("anne -> ann", function() {deepEqual( Stem("anne"), "ann");});
test("annen -> ann", function() {deepEqual( Stem("annen"), "ann");});
test("annenhver -> annenhv", function() {deepEqual( Stem("annenhver"), "annenhv");});
test("annenhvert -> annenhver", function() {deepEqual( Stem("annenhvert"), "annenhver");});
test("annens -> ann", function() {deepEqual( Stem("annens"), "ann");});
test("annerledes -> annerl", function() {deepEqual( Stem("annerledes"), "annerl");});
test("annet -> ann", function() {deepEqual( Stem("annet"), "ann");});
test("annleis -> annleis", function() {deepEqual( Stem("annleis"), "annleis");});
test("ansatt -> ansatt", function() {deepEqual( Stem("ansatt"), "ansatt");});
test("ansatte -> ansatt", function() {deepEqual( Stem("ansatte"), "ansatt");});
test("ansattes -> ansatt", function() {deepEqual( Stem("ansattes"), "ansatt");});
test("anse -> ans", function() {deepEqual( Stem("anse"), "ans");});
test("ansees -> anse", function() {deepEqual( Stem("ansees"), "anse");});
test("anser -> ans", function() {deepEqual( Stem("anser"), "ans");});
test("anses -> ans", function() {deepEqual( Stem("anses"), "ans");});
test("ansett -> ansett", function() {deepEqual( Stem("ansett"), "ansett");});
test("ansettelse -> ansett", function() {deepEqual( Stem("ansettelse"), "ansett");});
test("ansettelsen -> ansett", function() {deepEqual( Stem("ansettelsen"), "ansett");});
test("ansettelsesforhold -> ansettelsesforhold", function() {deepEqual( Stem("ansettelsesforhold"), "ansettelsesforhold");});
test("ansettelsesforholdet -> ansettelsesforhold", function() {deepEqual( Stem("ansettelsesforholdet"), "ansettelsesforhold");});
test("ansettelseskrav -> ansettelseskrav", function() {deepEqual( Stem("ansettelseskrav"), "ansettelseskrav");});
test("ansettelsestid -> ansettelsestid", function() {deepEqual( Stem("ansettelsestid"), "ansettelsestid");});
test("ansettes -> ansett", function() {deepEqual( Stem("ansettes"), "ansett");});
test("ansiennitet -> ansiennit", function() {deepEqual( Stem("ansiennitet"), "ansiennit");});
test("ansienniteten -> ansiennitet", function() {deepEqual( Stem("ansienniteten"), "ansiennitet");});
test("ansiennitetsreglar -> ansiennitetsregl", function() {deepEqual( Stem("ansiennitetsreglar"), "ansiennitetsregl");});
test("ansikt -> ansikt", function() {deepEqual( Stem("ansikt"), "ansikt");});
test("ansiktet -> ansikt", function() {deepEqual( Stem("ansiktet"), "ansikt");});
test("anskaffelse -> anskaff", function() {deepEqual( Stem("anskaffelse"), "anskaff");});
test("anslag -> anslag", function() {deepEqual( Stem("anslag"), "anslag");});
test("anslagene -> anslag", function() {deepEqual( Stem("anslagene"), "anslag");});
test("anslaget -> anslag", function() {deepEqual( Stem("anslaget"), "anslag");});
test("anslagsvis -> anslagsvis", function() {deepEqual( Stem("anslagsvis"), "anslagsvis");});
test("anslå -> anslå", function() {deepEqual( Stem("anslå"), "anslå");});
test("anslår -> anslår", function() {deepEqual( Stem("anslår"), "anslår");});
test("anslås -> anslås", function() {deepEqual( Stem("anslås"), "anslås");});
test("anslått -> anslått", function() {deepEqual( Stem("anslått"), "anslått");});
test("anslåtte -> anslått", function() {deepEqual( Stem("anslåtte"), "anslått");});
test("anstrenger -> anstreng", function() {deepEqual( Stem("anstrenger"), "anstreng");});
test("ansvar -> ansv", function() {deepEqual( Stem("ansvar"), "ansv");});
test("ansvaret -> ansvar", function() {deepEqual( Stem("ansvaret"), "ansvar");});
test("ansvarleg -> ansvar", function() {deepEqual( Stem("ansvarleg"), "ansvar");});
test("ansvarlege -> ansvar", function() {deepEqual( Stem("ansvarlege"), "ansvar");});
test("ansvarlig -> ansvar", function() {deepEqual( Stem("ansvarlig"), "ansvar");});
test("ansvarlige -> ansvar", function() {deepEqual( Stem("ansvarlige"), "ansvar");});
test("ansvarliges -> ansvar", function() {deepEqual( Stem("ansvarliges"), "ansvar");});
test("ansvarsavgrensing -> ansvarsavgrensing", function() {deepEqual( Stem("ansvarsavgrensing"), "ansvarsavgrensing");});
test("ansvarsavgrensinga -> ansvarsavgrensing", function() {deepEqual( Stem("ansvarsavgrensinga"), "ansvarsavgrensing");});
test("ansvarsfri -> ansvarsfri", function() {deepEqual( Stem("ansvarsfri"), "ansvarsfri");});
test("ansvarsfritak -> ansvarsfritak", function() {deepEqual( Stem("ansvarsfritak"), "ansvarsfritak");});
test("ansvarsfråskrivingar -> ansvarsfråskriving", function() {deepEqual( Stem("ansvarsfråskrivingar"), "ansvarsfråskriving");});
test("ansvarsgrunnlaget -> ansvarsgrunnlag", function() {deepEqual( Stem("ansvarsgrunnlaget"), "ansvarsgrunnlag");});
test("ansvarsinnskot -> ansvarsinnskot", function() {deepEqual( Stem("ansvarsinnskot"), "ansvarsinnskot");});
test("ansvarskapital -> ansvarskapital", function() {deepEqual( Stem("ansvarskapital"), "ansvarskapital");});
test("ansvarsområde -> ansvarsområd", function() {deepEqual( Stem("ansvarsområde"), "ansvarsområd");});
test("ansvarspulverisering -> ansvarspulverisering", function() {deepEqual( Stem("ansvarspulverisering"), "ansvarspulverisering");});
test("ansvarsregel -> ansvarsregel", function() {deepEqual( Stem("ansvarsregel"), "ansvarsregel");});
test("ansvarsreglar -> ansvarsregl", function() {deepEqual( Stem("ansvarsreglar"), "ansvarsregl");});
test("ansvarsreguleringa -> ansvarsregulering", function() {deepEqual( Stem("ansvarsreguleringa"), "ansvarsregulering");});
test("ansvarsspørsmåla -> ansvarsspørsmål", function() {deepEqual( Stem("ansvarsspørsmåla"), "ansvarsspørsmål");});
test("ant -> ant", function() {deepEqual( Stem("ant"), "ant");});
test("anta -> ant", function() {deepEqual( Stem("anta"), "ant");});
test("antagelig -> antag", function() {deepEqual( Stem("antagelig"), "antag");});
test("antakelig -> antak", function() {deepEqual( Stem("antakelig"), "antak");});
test("antakelse -> antak", function() {deepEqual( Stem("antakelse"), "antak");});
test("antakelsen -> antak", function() {deepEqual( Stem("antakelsen"), "antak");});
test("antakelsene -> antak", function() {deepEqual( Stem("antakelsene"), "antak");});
test("antakelser -> antak", function() {deepEqual( Stem("antakelser"), "antak");});
test("antall -> antall", function() {deepEqual( Stem("antall"), "antall");});
test("antallet -> antall", function() {deepEqual( Stem("antallet"), "antall");});
test("antar -> ant", function() {deepEqual( Stem("antar"), "ant");});
test("antas -> ant", function() {deepEqual( Stem("antas"), "ant");});
test("antatt -> antatt", function() {deepEqual( Stem("antatt"), "antatt");});
test("antatte -> antatt", function() {deepEqual( Stem("antatte"), "antatt");});
test("anten -> ant", function() {deepEqual( Stem("anten"), "ant");});
test("antenne -> antenn", function() {deepEqual( Stem("antenne"), "antenn");});
test("antenneanlegg -> antenneanlegg", function() {deepEqual( Stem("antenneanlegg"), "antenneanlegg");});
test("antitetisk -> antitetisk", function() {deepEqual( Stem("antitetisk"), "antitetisk");});
test("antwerpen -> antwerp", function() {deepEqual( Stem("antwerpen"), "antwerp");});
test("antydede -> antyd", function() {deepEqual( Stem("antydede"), "antyd");});
test("antyder -> antyd", function() {deepEqual( Stem("antyder"), "antyd");});
test("antydes -> antyd", function() {deepEqual( Stem("antydes"), "antyd");});
test("antydet -> antyd", function() {deepEqual( Stem("antydet"), "antyd");});
test("anvende -> anv", function() {deepEqual( Stem("anvende"), "anv");});
test("anvendelse -> anvend", function() {deepEqual( Stem("anvendelse"), "anvend");});
test("anvendelsen -> anvend", function() {deepEqual( Stem("anvendelsen"), "anvend");});
test("anvendelser -> anvend", function() {deepEqual( Stem("anvendelser"), "anvend");});
test("anvendelsesområde -> anvendelsesområd", function() {deepEqual( Stem("anvendelsesområde"), "anvendelsesområd");});
test("anvendelsesområder -> anvendelsesområd", function() {deepEqual( Stem("anvendelsesområder"), "anvendelsesområd");});
test("anvender -> anvend", function() {deepEqual( Stem("anvender"), "anvend");});
test("anvendes -> anv", function() {deepEqual( Stem("anvendes"), "anv");});
test("anvendt -> anvend", function() {deepEqual( Stem("anvendt"), "anvend");});
test("anviser -> anvis", function() {deepEqual( Stem("anviser"), "anvis");});
test("anvisning -> anvisning", function() {deepEqual( Stem("anvisning"), "anvisning");});
test("ap -> ap", function() {deepEqual( Stem("ap"), "ap");});
test("apparat -> apparat", function() {deepEqual( Stem("apparat"), "apparat");});
test("april -> april", function() {deepEqual( Stem("april"), "april");});
test("ar -> ar", function() {deepEqual( Stem("ar"), "ar");});
test("arbeid -> arbeid", function() {deepEqual( Stem("arbeid"), "arbeid");});
test("arbeidast -> arbeid", function() {deepEqual( Stem("arbeidast"), "arbeid");});
test("arbeidde -> arbeidd", function() {deepEqual( Stem("arbeidde"), "arbeidd");});
test("arbeide -> arbeid", function() {deepEqual( Stem("arbeide"), "arbeid");});
test("arbeider -> arbeid", function() {deepEqual( Stem("arbeider"), "arbeid");});
test("arbeidere -> arbeider", function() {deepEqual( Stem("arbeidere"), "arbeider");});
test("arbeiderpartiet -> arbeiderparti", function() {deepEqual( Stem("arbeiderpartiet"), "arbeiderparti");});
test("arbeides -> arbeid", function() {deepEqual( Stem("arbeides"), "arbeid");});
test("arbeidet -> arbeid", function() {deepEqual( Stem("arbeidet"), "arbeid");});
test("arbeidgiver -> arbeidgiv", function() {deepEqual( Stem("arbeidgiver"), "arbeidgiv");});
test("arbeids -> arbeid", function() {deepEqual( Stem("arbeids"), "arbeid");});
test("arbeidsavtale -> arbeidsavtal", function() {deepEqual( Stem("arbeidsavtale"), "arbeidsavtal");});
test("arbeidsavtalen -> arbeidsavtal", function() {deepEqual( Stem("arbeidsavtalen"), "arbeidsavtal");});
test("arbeidsavtalene -> arbeidsavtal", function() {deepEqual( Stem("arbeidsavtalene"), "arbeidsavtal");});
test("arbeidsavtalenes -> arbeidsavtal", function() {deepEqual( Stem("arbeidsavtalenes"), "arbeidsavtal");});
test("arbeidsavtaler -> arbeidsavtal", function() {deepEqual( Stem("arbeidsavtaler"), "arbeidsavtal");});
test("arbeidsdag -> arbeidsdag", function() {deepEqual( Stem("arbeidsdag"), "arbeidsdag");});
test("arbeidsdeling -> arbeidsdeling", function() {deepEqual( Stem("arbeidsdeling"), "arbeidsdeling");});
test("arbeidsdelinga -> arbeidsdeling", function() {deepEqual( Stem("arbeidsdelinga"), "arbeidsdeling");});
test("arbeidsdelingen -> arbeidsdeling", function() {deepEqual( Stem("arbeidsdelingen"), "arbeidsdeling");});
test("arbeidsdepartementet -> arbeidsdepartement", function() {deepEqual( Stem("arbeidsdepartementet"), "arbeidsdepartement");});
test("arbeidsforhold -> arbeidsforhold", function() {deepEqual( Stem("arbeidsforhold"), "arbeidsforhold");});
test("arbeidsforholdet -> arbeidsforhold", function() {deepEqual( Stem("arbeidsforholdet"), "arbeidsforhold");});
test("arbeidsfør -> arbeidsfør", function() {deepEqual( Stem("arbeidsfør"), "arbeidsfør");});
test("arbeidsgiver -> arbeidsgiv", function() {deepEqual( Stem("arbeidsgiver"), "arbeidsgiv");});
test("arbeidsgiveravgift -> arbeidsgiveravgift", function() {deepEqual( Stem("arbeidsgiveravgift"), "arbeidsgiveravgift");});
test("arbeidsgiveravgiften -> arbeidsgiveravgift", function() {deepEqual( Stem("arbeidsgiveravgiften"), "arbeidsgiveravgift");});
test("arbeidsgivere -> arbeidsgiver", function() {deepEqual( Stem("arbeidsgivere"), "arbeidsgiver");});
test("arbeidsgiveren -> arbeidsgiver", function() {deepEqual( Stem("arbeidsgiveren"), "arbeidsgiver");});
test("arbeidsgiverens -> arbeidsgiver", function() {deepEqual( Stem("arbeidsgiverens"), "arbeidsgiver");});
test("arbeidsgiverfinansiert -> arbeidsgiverfinansier", function() {deepEqual( Stem("arbeidsgiverfinansiert"), "arbeidsgiverfinansier");});
test("arbeidsgiverne -> arbeidsgivern", function() {deepEqual( Stem("arbeidsgiverne"), "arbeidsgivern");});
test("arbeidsgiverorganisasjoner -> arbeidsgiverorganisasjon", function() {deepEqual( Stem("arbeidsgiverorganisasjoner"), "arbeidsgiverorganisasjon");});
test("arbeidsgivers -> arbeidsgiv", function() {deepEqual( Stem("arbeidsgivers"), "arbeidsgiv");});
test("arbeidsgjevar -> arbeidsgjev", function() {deepEqual( Stem("arbeidsgjevar"), "arbeidsgjev");});
test("arbeidsgrunnlag -> arbeidsgrunnlag", function() {deepEqual( Stem("arbeidsgrunnlag"), "arbeidsgrunnlag");});
test("arbeidsgruppa -> arbeidsgrupp", function() {deepEqual( Stem("arbeidsgruppa"), "arbeidsgrupp");});
test("arbeidsgruppas -> arbeidsgrupp", function() {deepEqual( Stem("arbeidsgruppas"), "arbeidsgrupp");});
test("arbeidsgruppe -> arbeidsgrupp", function() {deepEqual( Stem("arbeidsgruppe"), "arbeidsgrupp");});
test("arbeidsgruppen -> arbeidsgrupp", function() {deepEqual( Stem("arbeidsgruppen"), "arbeidsgrupp");});
test("arbeidsgruppens -> arbeidsgrupp", function() {deepEqual( Stem("arbeidsgruppens"), "arbeidsgrupp");});
test("arbeidsinnsats -> arbeidsinnsat", function() {deepEqual( Stem("arbeidsinnsats"), "arbeidsinnsat");});
test("arbeidsinntekt -> arbeidsinntekt", function() {deepEqual( Stem("arbeidsinntekt"), "arbeidsinntekt");});
test("arbeidskapasitet -> arbeidskapasit", function() {deepEqual( Stem("arbeidskapasitet"), "arbeidskapasit");});
test("arbeidskonflikter -> arbeidskonflikt", function() {deepEqual( Stem("arbeidskonflikter"), "arbeidskonflikt");});
test("arbeidskontrakt -> arbeidskontrakt", function() {deepEqual( Stem("arbeidskontrakt"), "arbeidskontrakt");});
test("arbeidskraft -> arbeidskraft", function() {deepEqual( Stem("arbeidskraft"), "arbeidskraft");});
test("arbeidskraftens -> arbeidskraft", function() {deepEqual( Stem("arbeidskraftens"), "arbeidskraft");});
test("arbeidskraftsundersøkelse -> arbeidskraftsundersøk", function() {deepEqual( Stem("arbeidskraftsundersøkelse"), "arbeidskraftsundersøk");});
test("arbeidsliv -> arbeidsliv", function() {deepEqual( Stem("arbeidsliv"), "arbeidsliv");});
test("arbeidslivet -> arbeidsliv", function() {deepEqual( Stem("arbeidslivet"), "arbeidsliv");});
test("arbeidslivets -> arbeidsliv", function() {deepEqual( Stem("arbeidslivets"), "arbeidsliv");});
test("arbeidsløyse -> arbeidsløys", function() {deepEqual( Stem("arbeidsløyse"), "arbeidsløys");});
test("arbeidsmarkedet -> arbeidsmarked", function() {deepEqual( Stem("arbeidsmarkedet"), "arbeidsmarked");});
test("arbeidsmarkedsbidrag -> arbeidsmarkedsbidrag", function() {deepEqual( Stem("arbeidsmarkedsbidrag"), "arbeidsmarkedsbidrag");});
test("arbeidsmarkedspensjoner -> arbeidsmarkedspensjon", function() {deepEqual( Stem("arbeidsmarkedspensjoner"), "arbeidsmarkedspensjon");});
test("arbeidsmengda -> arbeidsmengd", function() {deepEqual( Stem("arbeidsmengda"), "arbeidsmengd");});
test("arbeidsmiljøloven -> arbeidsmiljø", function() {deepEqual( Stem("arbeidsmiljøloven"), "arbeidsmiljø");});
test("arbeidsmåte -> arbeidsmåt", function() {deepEqual( Stem("arbeidsmåte"), "arbeidsmåt");});
test("arbeidsmøter -> arbeidsmøt", function() {deepEqual( Stem("arbeidsmøter"), "arbeidsmøt");});
test("arbeidsområde -> arbeidsområd", function() {deepEqual( Stem("arbeidsområde"), "arbeidsområd");});
test("arbeidsoppgaver -> arbeidsoppgav", function() {deepEqual( Stem("arbeidsoppgaver"), "arbeidsoppgav");});
test("arbeidsoppgåver -> arbeidsoppgåv", function() {deepEqual( Stem("arbeidsoppgåver"), "arbeidsoppgåv");});
test("arbeidsopplegg -> arbeidsopplegg", function() {deepEqual( Stem("arbeidsopplegg"), "arbeidsopplegg");});
test("arbeidsopplegget -> arbeidsopplegg", function() {deepEqual( Stem("arbeidsopplegget"), "arbeidsopplegg");});
test("arbeidsperioden -> arbeidsperiod", function() {deepEqual( Stem("arbeidsperioden"), "arbeidsperiod");});
test("arbeidsplassar -> arbeidsplass", function() {deepEqual( Stem("arbeidsplassar"), "arbeidsplass");});
test("arbeidsplasser -> arbeidsplass", function() {deepEqual( Stem("arbeidsplasser"), "arbeidsplass");});
test("arbeidsrelaterte -> arbeidsrelater", function() {deepEqual( Stem("arbeidsrelaterte"), "arbeidsrelater");});
test("arbeidsrettslig -> arbeidsretts", function() {deepEqual( Stem("arbeidsrettslig"), "arbeidsretts");});
test("arbeidsrettslige -> arbeidsretts", function() {deepEqual( Stem("arbeidsrettslige"), "arbeidsretts");});
test("arbeidssammenheng -> arbeidssammenheng", function() {deepEqual( Stem("arbeidssammenheng"), "arbeidssammenheng");});
test("arbeidsstokken -> arbeidsstokk", function() {deepEqual( Stem("arbeidsstokken"), "arbeidsstokk");});
test("arbeidssøkere -> arbeidssøker", function() {deepEqual( Stem("arbeidssøkere"), "arbeidssøker");});
test("arbeidstagere -> arbeidstager", function() {deepEqual( Stem("arbeidstagere"), "arbeidstager");});
test("arbeidstakar -> arbeidstak", function() {deepEqual( Stem("arbeidstakar"), "arbeidstak");});
test("arbeidstakarane -> arbeidstakar", function() {deepEqual( Stem("arbeidstakarane"), "arbeidstakar");});
test("arbeidstakaren -> arbeidstakar", function() {deepEqual( Stem("arbeidstakaren"), "arbeidstakar");});
test("arbeidstaker -> arbeidstak", function() {deepEqual( Stem("arbeidstaker"), "arbeidstak");});
test("arbeidstakere -> arbeidstaker", function() {deepEqual( Stem("arbeidstakere"), "arbeidstaker");});
test("arbeidstakeren -> arbeidstaker", function() {deepEqual( Stem("arbeidstakeren"), "arbeidstaker");});
test("arbeidstakerens -> arbeidstaker", function() {deepEqual( Stem("arbeidstakerens"), "arbeidstaker");});
test("arbeidstakeres -> arbeidstaker", function() {deepEqual( Stem("arbeidstakeres"), "arbeidstaker");});
test("arbeidstakergrupper -> arbeidstakergrupp", function() {deepEqual( Stem("arbeidstakergrupper"), "arbeidstakergrupp");});
test("arbeidstakerhold -> arbeidstakerhold", function() {deepEqual( Stem("arbeidstakerhold"), "arbeidstakerhold");});
test("arbeidstakerne -> arbeidstakern", function() {deepEqual( Stem("arbeidstakerne"), "arbeidstakern");});
test("arbeidstakernes -> arbeidstakern", function() {deepEqual( Stem("arbeidstakernes"), "arbeidstakern");});
test("arbeidstakerorganisasjonene -> arbeidstakerorganisasjon", function() {deepEqual( Stem("arbeidstakerorganisasjonene"), "arbeidstakerorganisasjon");});
test("arbeidstakers -> arbeidstak", function() {deepEqual( Stem("arbeidstakers"), "arbeidstak");});
test("arbeidstid -> arbeidstid", function() {deepEqual( Stem("arbeidstid"), "arbeidstid");});
test("arbeidstilhøve -> arbeidstilhøv", function() {deepEqual( Stem("arbeidstilhøve"), "arbeidstilhøv");});
test("arbeidsuke -> arbeidsuk", function() {deepEqual( Stem("arbeidsuke"), "arbeidsuk");});
test("arbeidsutvalg -> arbeidsutvalg", function() {deepEqual( Stem("arbeidsutvalg"), "arbeidsutvalg");});
test("arbeidsvilkår -> arbeidsvilkår", function() {deepEqual( Stem("arbeidsvilkår"), "arbeidsvilkår");});
test("arbeidsvilkårene -> arbeidsvilkår", function() {deepEqual( Stem("arbeidsvilkårene"), "arbeidsvilkår");});
test("arbetsinsats -> arbetsinsat", function() {deepEqual( Stem("arbetsinsats"), "arbetsinsat");});
test("areal -> areal", function() {deepEqual( Stem("areal"), "areal");});
test("arealanvendelse -> arealanvend", function() {deepEqual( Stem("arealanvendelse"), "arealanvend");});
test("arealbehov -> arealbehov", function() {deepEqual( Stem("arealbehov"), "arealbehov");});
test("arealbehovet -> arealbehov", function() {deepEqual( Stem("arealbehovet"), "arealbehov");});
test("arealbruk -> arealbruk", function() {deepEqual( Stem("arealbruk"), "arealbruk");});
test("arealbruken -> arealbruk", function() {deepEqual( Stem("arealbruken"), "arealbruk");});
test("arealbruksendring -> arealbruksendring", function() {deepEqual( Stem("arealbruksendring"), "arealbruksendring");});
test("arealbrukskonfliktene -> arealbrukskonflikt", function() {deepEqual( Stem("arealbrukskonfliktene"), "arealbrukskonflikt");});
test("arealdel -> arealdel", function() {deepEqual( Stem("arealdel"), "arealdel");});
test("arealdelen -> arealdel", function() {deepEqual( Stem("arealdelen"), "arealdel");});
test("arealdelplan -> arealdelplan", function() {deepEqual( Stem("arealdelplan"), "arealdelplan");});
test("arealdelplanen -> arealdelplan", function() {deepEqual( Stem("arealdelplanen"), "arealdelplan");});
test("arealdisponering -> arealdisponering", function() {deepEqual( Stem("arealdisponering"), "arealdisponering");});
test("arealeffektiviserende -> arealeffektiviser", function() {deepEqual( Stem("arealeffektiviserende"), "arealeffektiviser");});
test("arealeffektivisering -> arealeffektivisering", function() {deepEqual( Stem("arealeffektivisering"), "arealeffektivisering");});
test("arealeffektivitet -> arealeffektivit", function() {deepEqual( Stem("arealeffektivitet"), "arealeffektivit");});
test("arealene -> areal", function() {deepEqual( Stem("arealene"), "areal");});
test("arealer -> areal", function() {deepEqual( Stem("arealer"), "areal");});
test("arealervervelser -> arealerverv", function() {deepEqual( Stem("arealervervelser"), "arealerverv");});
test("arealet -> areal", function() {deepEqual( Stem("arealet"), "areal");});
test("arealforhold -> arealforhold", function() {deepEqual( Stem("arealforhold"), "arealforhold");});
test("arealintensiv -> arealintensiv", function() {deepEqual( Stem("arealintensiv"), "arealintensiv");});
test("arealkapasiteten -> arealkapasitet", function() {deepEqual( Stem("arealkapasiteten"), "arealkapasitet");});
test("arealknapphet -> arealknapp", function() {deepEqual( Stem("arealknapphet"), "arealknapp");});
test("arealkonflikter -> arealkonflikt", function() {deepEqual( Stem("arealkonflikter"), "arealkonflikt");});
test("arealkostnadene -> arealkostnad", function() {deepEqual( Stem("arealkostnadene"), "arealkostnad");});
test("arealkostnader -> arealkostnad", function() {deepEqual( Stem("arealkostnader"), "arealkostnad");});
test("arealkrevende -> arealkrev", function() {deepEqual( Stem("arealkrevende"), "arealkrev");});
test("arealmessig -> arealmess", function() {deepEqual( Stem("arealmessig"), "arealmess");});
test("arealmessige -> arealmess", function() {deepEqual( Stem("arealmessige"), "arealmess");});
test("arealplanen -> arealplan", function() {deepEqual( Stem("arealplanen"), "arealplan");});
test("arealplaner -> arealplan", function() {deepEqual( Stem("arealplaner"), "arealplan");});
test("arealplanlegging -> arealplanlegging", function() {deepEqual( Stem("arealplanlegging"), "arealplanlegging");});
test("arealpolitikk -> arealpolitikk", function() {deepEqual( Stem("arealpolitikk"), "arealpolitikk");});
test("arealpolitikken -> arealpolitikk", function() {deepEqual( Stem("arealpolitikken"), "arealpolitikk");});
test("arealproduktivitet -> arealproduktivit", function() {deepEqual( Stem("arealproduktivitet"), "arealproduktivit");});
test("arealreguleringstiltak -> arealreguleringstiltak", function() {deepEqual( Stem("arealreguleringstiltak"), "arealreguleringstiltak");});
test("arealreservene -> arealreserv", function() {deepEqual( Stem("arealreservene"), "arealreserv");});
test("arealressurser -> arealressurs", function() {deepEqual( Stem("arealressurser"), "arealressurs");});
test("arealsituasjon -> arealsituasjon", function() {deepEqual( Stem("arealsituasjon"), "arealsituasjon");});
test("arealsituasjonen -> arealsituasjon", function() {deepEqual( Stem("arealsituasjonen"), "arealsituasjon");});
test("arealspørsmål -> arealspørsmål", function() {deepEqual( Stem("arealspørsmål"), "arealspørsmål");});
test("arealtilgang -> arealtilgang", function() {deepEqual( Stem("arealtilgang"), "arealtilgang");});
test("arealtilgangen -> arealtilgang", function() {deepEqual( Stem("arealtilgangen"), "arealtilgang");});
test("arealtilganger -> arealtilgang", function() {deepEqual( Stem("arealtilganger"), "arealtilgang");});
test("arealtilgjengelighet -> arealtilgjeng", function() {deepEqual( Stem("arealtilgjengelighet"), "arealtilgjeng");});
test("arealtilskot -> arealtilskot", function() {deepEqual( Stem("arealtilskot"), "arealtilskot");});
test("arealutnyttelse -> arealutnytt", function() {deepEqual( Stem("arealutnyttelse"), "arealutnytt");});
test("arealutnyttelsen -> arealutnytt", function() {deepEqual( Stem("arealutnyttelsen"), "arealutnytt");});
test("arealutvidelser -> arealutvid", function() {deepEqual( Stem("arealutvidelser"), "arealutvid");});
test("arealutvidelsesmuligheter -> arealutvidelsesmu", function() {deepEqual( Stem("arealutvidelsesmuligheter"), "arealutvidelsesmu");});
test("arealverdien -> arealverdi", function() {deepEqual( Stem("arealverdien"), "arealverdi");});
test("arealøkning -> arealøkning", function() {deepEqual( Stem("arealøkning"), "arealøkning");});
test("arena -> aren", function() {deepEqual( Stem("arena"), "aren");});
test("argeste -> argest", function() {deepEqual( Stem("argeste"), "argest");});
test("argument -> argument", function() {deepEqual( Stem("argument"), "argument");});
test("argumentasjon -> argumentasjon", function() {deepEqual( Stem("argumentasjon"), "argumentasjon");});
test("argumentasjonen -> argumentasjon", function() {deepEqual( Stem("argumentasjonen"), "argumentasjon");});
test("argumentene -> argument", function() {deepEqual( Stem("argumentene"), "argument");});
test("argumenter -> argument", function() {deepEqual( Stem("argumenter"), "argument");});
test("argumenterer -> argumenter", function() {deepEqual( Stem("argumenterer"), "argumenter");});
test("argumenteres -> argumenter", function() {deepEqual( Stem("argumenteres"), "argumenter");});
test("argumentet -> argument", function() {deepEqual( Stem("argumentet"), "argument");});
test("arm -> arm", function() {deepEqual( Stem("arm"), "arm");});
test("armbåndet -> armbånd", function() {deepEqual( Stem("armbåndet"), "armbånd");});
test("armen -> arm", function() {deepEqual( Stem("armen"), "arm");});
test("armene -> arm", function() {deepEqual( Stem("armene"), "arm");});
test("armer -> arm", function() {deepEqual( Stem("armer"), "arm");});
test("armhulen -> armhul", function() {deepEqual( Stem("armhulen"), "armhul");});
test("armring -> armring", function() {deepEqual( Stem("armring"), "armring");});
test("armringer -> armring", function() {deepEqual( Stem("armringer"), "armring");});
test("arne -> arn", function() {deepEqual( Stem("arne"), "arn");});
test("arnhild -> arnhild", function() {deepEqual( Stem("arnhild"), "arnhild");});
test("arrangerte -> arranger", function() {deepEqual( Stem("arrangerte"), "arranger");});
test("arrest -> arrest", function() {deepEqual( Stem("arrest"), "arrest");});
test("arresten -> arrest", function() {deepEqual( Stem("arresten"), "arrest");});
test("art -> art", function() {deepEqual( Stem("art"), "art");});
test("arte -> art", function() {deepEqual( Stem("arte"), "art");});
test("arten -> art", function() {deepEqual( Stem("arten"), "art");});
test("arter -> art", function() {deepEqual( Stem("arter"), "art");});
test("artikkel -> artikkel", function() {deepEqual( Stem("artikkel"), "artikkel");});
test("artikkelen -> artikkel", function() {deepEqual( Stem("artikkelen"), "artikkel");});
test("artiklene -> artikl", function() {deepEqual( Stem("artiklene"), "artikl");});
test("arv -> arv", function() {deepEqual( Stem("arv"), "arv");});
test("arveavgift -> arveavgift", function() {deepEqual( Stem("arveavgift"), "arveavgift");});
test("arveavgiftslov -> arveavgift", function() {deepEqual( Stem("arveavgiftslov"), "arveavgift");});
test("arveavgiftsloven -> arveavgift", function() {deepEqual( Stem("arveavgiftsloven"), "arveavgift");});
test("arveavgiftslovgivningen -> arveavgiftslovgivning", function() {deepEqual( Stem("arveavgiftslovgivningen"), "arveavgiftslovgivning");});
test("arveavgiftsmessige -> arveavgiftsmess", function() {deepEqual( Stem("arveavgiftsmessige"), "arveavgiftsmess");});
test("arveavgiftsreglene -> arveavgiftsregl", function() {deepEqual( Stem("arveavgiftsreglene"), "arveavgiftsregl");});
test("arveavgiftsutvalgets -> arveavgiftsutvalg", function() {deepEqual( Stem("arveavgiftsutvalgets"), "arveavgiftsutvalg");});
test("arvebuet -> arvebu", function() {deepEqual( Stem("arvebuet"), "arvebu");});
test("arvede -> arv", function() {deepEqual( Stem("arvede"), "arv");});
test("arvefall -> arvefall", function() {deepEqual( Stem("arvefall"), "arvefall");});
test("arvefallet -> arvefall", function() {deepEqual( Stem("arvefallet"), "arvefall");});
test("arvegangsreglene -> arvegangsregl", function() {deepEqual( Stem("arvegangsreglene"), "arvegangsregl");});
test("arvegangsregler -> arvegangsregl", function() {deepEqual( Stem("arvegangsregler"), "arvegangsregl");});
test("arveloven -> arv", function() {deepEqual( Stem("arveloven"), "arv");});
test("arven -> arv", function() {deepEqual( Stem("arven"), "arv");});
test("arveovergangen -> arveovergang", function() {deepEqual( Stem("arveovergangen"), "arveovergang");});
test("arvet -> arv", function() {deepEqual( Stem("arvet"), "arv");});
test("arvetilfella -> arvetilfell", function() {deepEqual( Stem("arvetilfella"), "arvetilfell");});
test("arving -> arving", function() {deepEqual( Stem("arving"), "arving");});
test("arvingane -> arving", function() {deepEqual( Stem("arvingane"), "arving");});
test("arvingar -> arving", function() {deepEqual( Stem("arvingar"), "arving");});
test("arvingen -> arving", function() {deepEqual( Stem("arvingen"), "arving");});
test("arvinger -> arving", function() {deepEqual( Stem("arvinger"), "arving");});
test("arvlataren -> arvlatar", function() {deepEqual( Stem("arvlataren"), "arvlatar");});
test("as -> as", function() {deepEqual( Stem("as"), "as");});
test("asia -> asi", function() {deepEqual( Stem("asia"), "asi");});
test("asiatiske -> asiatisk", function() {deepEqual( Stem("asiatiske"), "asiatisk");});
test("ask -> ask", function() {deepEqual( Stem("ask"), "ask");});
test("aske -> ask", function() {deepEqual( Stem("aske"), "ask");});
test("askelut -> askelut", function() {deepEqual( Stem("askelut"), "askelut");});
test("asken -> ask", function() {deepEqual( Stem("asken"), "ask");});
test("asker -> ask", function() {deepEqual( Stem("asker"), "ask");});
test("asketreet -> asketre", function() {deepEqual( Stem("asketreet"), "asketre");});
test("asl -> asl", function() {deepEqual( Stem("asl"), "asl");});
test("aspekt -> aspekt", function() {deepEqual( Stem("aspekt"), "aspekt");});
test("aspekter -> aspekt", function() {deepEqual( Stem("aspekter"), "aspekt");});
test("aspektet -> aspekt", function() {deepEqual( Stem("aspektet"), "aspekt");});
test("assev -> assev", function() {deepEqual( Stem("assev"), "assev");});
test("associazione -> associazion", function() {deepEqual( Stem("associazione"), "associazion");});
test("assosiasjoner -> assosiasjon", function() {deepEqual( Stem("assosiasjoner"), "assosiasjon");});
test("assosierte -> assosier", function() {deepEqual( Stem("assosierte"), "assosier");});
test("asylsøkjarar -> asylsøkjar", function() {deepEqual( Stem("asylsøkjarar"), "asylsøkjar");});
test("asymmetrien -> asymmetri", function() {deepEqual( Stem("asymmetrien"), "asymmetri");});
test("at -> at", function() {deepEqual( Stem("at"), "at");});
test("atferden -> atferd", function() {deepEqual( Stem("atferden"), "atferd");});
test("atkomstdokument -> atkomstdokument", function() {deepEqual( Stem("atkomstdokument"), "atkomstdokument");});
test("atkomstdokumentene -> atkomstdokument", function() {deepEqual( Stem("atkomstdokumentene"), "atkomstdokument");});
test("atkomstdokumentet -> atkomstdokument", function() {deepEqual( Stem("atkomstdokumentet"), "atkomstdokument");});
test("atskillelse -> atskill", function() {deepEqual( Stem("atskillelse"), "atskill");});
test("atskilt -> atskilt", function() {deepEqual( Stem("atskilt"), "atskilt");});
test("att -> att", function() {deepEqual( Stem("att"), "att");});
test("atten -> att", function() {deepEqual( Stem("atten"), "att");});
test("attende -> att", function() {deepEqual( Stem("attende"), "att");});
test("attendebetaling -> attendebetaling", function() {deepEqual( Stem("attendebetaling"), "attendebetaling");});
test("attendebetalt -> attendebetalt", function() {deepEqual( Stem("attendebetalt"), "attendebetalt");});
test("attendeføring -> attendeføring", function() {deepEqual( Stem("attendeføring"), "attendeføring");});
test("attendekalling -> attendekalling", function() {deepEqual( Stem("attendekalling"), "attendekalling");});
test("attendelevering -> attendelevering", function() {deepEqual( Stem("attendelevering"), "attendelevering");});
test("atterhald -> atterhald", function() {deepEqual( Stem("atterhald"), "atterhald");});
test("atterhaldet -> atterhald", function() {deepEqual( Stem("atterhaldet"), "atterhald");});
test("attest -> attest", function() {deepEqual( Stem("attest"), "attest");});
test("attestasjonar -> attestasjon", function() {deepEqual( Stem("attestasjonar"), "attestasjon");});
test("attestert -> attester", function() {deepEqual( Stem("attestert"), "attester");});
test("attgjevast -> attgjev", function() {deepEqual( Stem("attgjevast"), "attgjev");});
test("attom -> attom", function() {deepEqual( Stem("attom"), "attom");});
test("attraktiv -> attraktiv", function() {deepEqual( Stem("attraktiv"), "attraktiv");});
test("attraktive -> attraktiv", function() {deepEqual( Stem("attraktive"), "attraktiv");});
test("attraktivitet -> attraktivit", function() {deepEqual( Stem("attraktivitet"), "attraktivit");});
test("attraktivt -> attraktiv", function() {deepEqual( Stem("attraktivt"), "attraktiv");});
test("attval -> attval", function() {deepEqual( Stem("attval"), "attval");});
test("au -> au", function() {deepEqual( Stem("au"), "au");});
test("aud -> aud", function() {deepEqual( Stem("aud"), "aud");});
test("audhumla -> audhuml", function() {deepEqual( Stem("audhumla"), "audhuml");});
test("august -> august", function() {deepEqual( Stem("august"), "august");});
test("auka -> auk", function() {deepEqual( Stem("auka"), "auk");});
test("aukande -> auk", function() {deepEqual( Stem("aukande"), "auk");});
test("aukar -> auk", function() {deepEqual( Stem("aukar"), "auk");});
test("aukast -> auk", function() {deepEqual( Stem("aukast"), "auk");});
test("auke -> auk", function() {deepEqual( Stem("auke"), "auk");});
test("auprema -> auprem", function() {deepEqual( Stem("auprema"), "auprem");});
test("aurvandil -> aurvandil", function() {deepEqual( Stem("aurvandil"), "aurvandil");});
test("aurvandils -> aurvandil", function() {deepEqual( Stem("aurvandils"), "aurvandil");});
test("australia -> australi", function() {deepEqual( Stem("australia"), "australi");});
test("automatisk -> automatisk", function() {deepEqual( Stem("automatisk"), "automatisk");});
test("autorisasjon -> autorisasjon", function() {deepEqual( Stem("autorisasjon"), "autorisasjon");});
test("autorisasjonen -> autorisasjon", function() {deepEqual( Stem("autorisasjonen"), "autorisasjon");});
test("autorisasjonsordning -> autorisasjonsordning", function() {deepEqual( Stem("autorisasjonsordning"), "autorisasjonsordning");});
test("autoriserte -> autoriser", function() {deepEqual( Stem("autoriserte"), "autoriser");});
test("av -> av", function() {deepEqual( Stem("av"), "av");});
test("avbrot -> avbrot", function() {deepEqual( Stem("avbrot"), "avbrot");});
test("avbroten -> avbrot", function() {deepEqual( Stem("avbroten"), "avbrot");});
test("avbrytast -> avbryt", function() {deepEqual( Stem("avbrytast"), "avbryt");});
test("avbryte -> avbryt", function() {deepEqual( Stem("avbryte"), "avbryt");});
test("avbryter -> avbryt", function() {deepEqual( Stem("avbryter"), "avbryt");});
test("avbøtende -> avbøt", function() {deepEqual( Stem("avbøtende"), "avbøt");});
test("avdekke -> avdekk", function() {deepEqual( Stem("avdekke"), "avdekk");});
test("avdekker -> avdekk", function() {deepEqual( Stem("avdekker"), "avdekk");});
test("avdekket -> avdekk", function() {deepEqual( Stem("avdekket"), "avdekk");});
test("avdeling -> avdeling", function() {deepEqual( Stem("avdeling"), "avdeling");});
test("avdelingane -> avdeling", function() {deepEqual( Stem("avdelingane"), "avdeling");});
test("avdelingar -> avdeling", function() {deepEqual( Stem("avdelingar"), "avdeling");});
test("avdelingsdirektør -> avdelingsdirektør", function() {deepEqual( Stem("avdelingsdirektør"), "avdelingsdirektør");});
test("avdempet -> avdemp", function() {deepEqual( Stem("avdempet"), "avdemp");});
test("avdrag -> avdrag", function() {deepEqual( Stem("avdrag"), "avdrag");});
test("avdraga -> avdrag", function() {deepEqual( Stem("avdraga"), "avdrag");});
test("avdragsplanen -> avdragsplan", function() {deepEqual( Stem("avdragsplanen"), "avdragsplan");});
test("avdød -> avdød", function() {deepEqual( Stem("avdød"), "avdød");});
test("avdødes -> avdød", function() {deepEqual( Stem("avdødes"), "avdød");});
test("averterer -> averter", function() {deepEqual( Stem("averterer"), "averter");});
test("avfall -> avfall", function() {deepEqual( Stem("avfall"), "avfall");});
test("avfallshandtering -> avfallshandtering", function() {deepEqual( Stem("avfallshandtering"), "avfallshandtering");});
test("avga -> avg", function() {deepEqual( Stem("avga"), "avg");});
test("avgang -> avgang", function() {deepEqual( Stem("avgang"), "avgang");});
test("avgangsalder -> avgangsald", function() {deepEqual( Stem("avgangsalder"), "avgangsald");});
test("avgangstider -> avgangstid", function() {deepEqual( Stem("avgangstider"), "avgangstid");});
test("avgi -> avgi", function() {deepEqual( Stem("avgi"), "avgi");});
test("avgifer -> avgif", function() {deepEqual( Stem("avgifer"), "avgif");});
test("avgift -> avgift", function() {deepEqual( Stem("avgift"), "avgift");});
test("avgiften -> avgift", function() {deepEqual( Stem("avgiften"), "avgift");});
test("avgiftene -> avgift", function() {deepEqual( Stem("avgiftene"), "avgift");});
test("avgifter -> avgift", function() {deepEqual( Stem("avgifter"), "avgift");});
test("avgiftsbestemmelsene -> avgiftsbestemm", function() {deepEqual( Stem("avgiftsbestemmelsene"), "avgiftsbestemm");});
test("avgiftsforskrifter -> avgiftsforskrift", function() {deepEqual( Stem("avgiftsforskrifter"), "avgiftsforskrift");});
test("avgiftsfrie -> avgiftsfri", function() {deepEqual( Stem("avgiftsfrie"), "avgiftsfri");});
test("avgiftsfritt -> avgiftsfritt", function() {deepEqual( Stem("avgiftsfritt"), "avgiftsfritt");});
test("avgiftsinnkreving -> avgiftsinnkreving", function() {deepEqual( Stem("avgiftsinnkreving"), "avgiftsinnkreving");});
test("avgiftsinntektene -> avgiftsinntekt", function() {deepEqual( Stem("avgiftsinntektene"), "avgiftsinntekt");});
test("avgiftsmessig -> avgiftsmess", function() {deepEqual( Stem("avgiftsmessig"), "avgiftsmess");});
test("avgiftsmessige -> avgiftsmess", function() {deepEqual( Stem("avgiftsmessige"), "avgiftsmess");});
test("avgiftsmidlene -> avgiftsmidl", function() {deepEqual( Stem("avgiftsmidlene"), "avgiftsmidl");});
test("avgiftsmidler -> avgiftsmidl", function() {deepEqual( Stem("avgiftsmidler"), "avgiftsmidl");});
test("avgiftsnivået -> avgiftsnivå", function() {deepEqual( Stem("avgiftsnivået"), "avgiftsnivå");});
test("avgiftsområder -> avgiftsområd", function() {deepEqual( Stem("avgiftsområder"), "avgiftsområd");});
test("avgiftsplikt -> avgiftsplikt", function() {deepEqual( Stem("avgiftsplikt"), "avgiftsplikt");});
test("avgiftspliktig -> avgiftsplikt", function() {deepEqual( Stem("avgiftspliktig"), "avgiftsplikt");});
test("avgiftsreglene -> avgiftsregl", function() {deepEqual( Stem("avgiftsreglene"), "avgiftsregl");});
test("avgiftsregulativene -> avgiftsregulativ", function() {deepEqual( Stem("avgiftsregulativene"), "avgiftsregulativ");});
test("avgiftsregulativer -> avgiftsregulativ", function() {deepEqual( Stem("avgiftsregulativer"), "avgiftsregulativ");});
test("avgiftsspørsmål -> avgiftsspørsmål", function() {deepEqual( Stem("avgiftsspørsmål"), "avgiftsspørsmål");});
test("avgiftssystem -> avgiftssystem", function() {deepEqual( Stem("avgiftssystem"), "avgiftssystem");});
test("avgiftstyper -> avgiftstyp", function() {deepEqual( Stem("avgiftstyper"), "avgiftstyp");});
test("avgir -> avgir", function() {deepEqual( Stem("avgir"), "avgir");});
test("avgis -> avgis", function() {deepEqual( Stem("avgis"), "avgis");});
test("avgitt -> avgitt", function() {deepEqual( Stem("avgitt"), "avgitt");});
test("avgivelse -> avgiv", function() {deepEqual( Stem("avgivelse"), "avgiv");});
test("avgjer -> avgj", function() {deepEqual( Stem("avgjer"), "avgj");});
test("avgjerande -> avgjer", function() {deepEqual( Stem("avgjerande"), "avgjer");});
test("avgjerast -> avgjer", function() {deepEqual( Stem("avgjerast"), "avgjer");});
test("avgjerd -> avgjerd", function() {deepEqual( Stem("avgjerd"), "avgjerd");});
test("avgjerda -> avgjerd", function() {deepEqual( Stem("avgjerda"), "avgjerd");});
test("avgjerdene -> avgjerd", function() {deepEqual( Stem("avgjerdene"), "avgjerd");});
test("avgjerder -> avgjerd", function() {deepEqual( Stem("avgjerder"), "avgjerd");});
test("avgjerdskompetansen -> avgjerdskompetans", function() {deepEqual( Stem("avgjerdskompetansen"), "avgjerdskompetans");});
test("avgjere -> avgjer", function() {deepEqual( Stem("avgjere"), "avgjer");});
test("avgjord -> avgjord", function() {deepEqual( Stem("avgjord"), "avgjord");});
test("avgjort -> avgjort", function() {deepEqual( Stem("avgjort"), "avgjort");});
test("avgjør -> avgjør", function() {deepEqual( Stem("avgjør"), "avgjør");});
test("avgjøre -> avgjør", function() {deepEqual( Stem("avgjøre"), "avgjør");});
test("avgjørelse -> avgjør", function() {deepEqual( Stem("avgjørelse"), "avgjør");});
test("avgjørelsen -> avgjør", function() {deepEqual( Stem("avgjørelsen"), "avgjør");});
test("avgjørelsene -> avgjør", function() {deepEqual( Stem("avgjørelsene"), "avgjør");});
test("avgjørelser -> avgjør", function() {deepEqual( Stem("avgjørelser"), "avgjør");});
test("avgjørelsesmyndighet -> avgjørelsesmynd", function() {deepEqual( Stem("avgjørelsesmyndighet"), "avgjørelsesmynd");});
test("avgjørende -> avgjør", function() {deepEqual( Stem("avgjørende"), "avgjør");});
test("avgjøres -> avgjør", function() {deepEqual( Stem("avgjøres"), "avgjør");});
test("avgrensa -> avgrens", function() {deepEqual( Stem("avgrensa"), "avgrens");});
test("avgrensar -> avgrens", function() {deepEqual( Stem("avgrensar"), "avgrens");});
test("avgrensast -> avgrens", function() {deepEqual( Stem("avgrensast"), "avgrens");});
test("avgrense -> avgrens", function() {deepEqual( Stem("avgrense"), "avgrens");});
test("avgrenser -> avgrens", function() {deepEqual( Stem("avgrenser"), "avgrens");});
test("avgrenses -> avgrens", function() {deepEqual( Stem("avgrenses"), "avgrens");});
test("avgrenset -> avgrens", function() {deepEqual( Stem("avgrenset"), "avgrens");});
test("avgrensing -> avgrensing", function() {deepEqual( Stem("avgrensing"), "avgrensing");});
test("avgrensinga -> avgrensing", function() {deepEqual( Stem("avgrensinga"), "avgrensing");});
test("avgrensingane -> avgrensing", function() {deepEqual( Stem("avgrensingane"), "avgrensing");});
test("avgrensingar -> avgrensing", function() {deepEqual( Stem("avgrensingar"), "avgrensing");});
test("avgrensinger -> avgrensing", function() {deepEqual( Stem("avgrensinger"), "avgrensing");});
test("avgrensning -> avgrensning", function() {deepEqual( Stem("avgrensning"), "avgrensning");});
test("avgrunnen -> avgrunn", function() {deepEqual( Stem("avgrunnen"), "avgrunn");});
test("avhenda -> avhend", function() {deepEqual( Stem("avhenda"), "avhend");});
test("avhendar -> avhend", function() {deepEqual( Stem("avhendar"), "avhend");});
test("avhendaren -> avhendar", function() {deepEqual( Stem("avhendaren"), "avhendar");});
test("avhendast -> avhend", function() {deepEqual( Stem("avhendast"), "avhend");});
test("avhende -> avh", function() {deepEqual( Stem("avhende"), "avh");});
test("avhending -> avhending", function() {deepEqual( Stem("avhending"), "avhending");});
test("avhendinga -> avhending", function() {deepEqual( Stem("avhendinga"), "avhending");});
test("avhendingslova -> avhending", function() {deepEqual( Stem("avhendingslova"), "avhending");});
test("avhenge -> avheng", function() {deepEqual( Stem("avhenge"), "avheng");});
test("avhenger -> avheng", function() {deepEqual( Stem("avhenger"), "avheng");});
test("avhengig -> avheng", function() {deepEqual( Stem("avhengig"), "avheng");});
test("avhengige -> avheng", function() {deepEqual( Stem("avhengige"), "avheng");});
test("avhengighet -> avheng", function() {deepEqual( Stem("avhengighet"), "avheng");});
test("avhjelpast -> avhjelp", function() {deepEqual( Stem("avhjelpast"), "avhjelp");});
test("avhl -> avhl", function() {deepEqual( Stem("avhl"), "avhl");});
test("avholdt -> avhold", function() {deepEqual( Stem("avholdt"), "avhold");});
test("avhugget -> avhugg", function() {deepEqual( Stem("avhugget"), "avhugg");});
test("avis -> avis", function() {deepEqual( Stem("avis"), "avis");});
test("avisa -> avis", function() {deepEqual( Stem("avisa"), "avis");});
test("avisrom -> avisrom", function() {deepEqual( Stem("avisrom"), "avisrom");});
test("avkall -> avkall", function() {deepEqual( Stem("avkall"), "avkall");});
test("avkasting -> avkasting", function() {deepEqual( Stem("avkasting"), "avkasting");});
test("avkastning -> avkastning", function() {deepEqual( Stem("avkastning"), "avkastning");});
test("avkastningen -> avkastning", function() {deepEqual( Stem("avkastningen"), "avkastning");});
test("avkastningprosent -> avkastningprosent", function() {deepEqual( Stem("avkastningprosent"), "avkastningprosent");});
test("avkastningsavhengig -> avkastningsavheng", function() {deepEqual( Stem("avkastningsavhengig"), "avkastningsavheng");});
test("avkastningsdeling -> avkastningsdeling", function() {deepEqual( Stem("avkastningsdeling"), "avkastningsdeling");});
test("avkastningsgaranti -> avkastningsgaranti", function() {deepEqual( Stem("avkastningsgaranti"), "avkastningsgaranti");});
test("avkastningsgarantier -> avkastningsgaranti", function() {deepEqual( Stem("avkastningsgarantier"), "avkastningsgaranti");});
test("avkastningsgrense -> avkastningsgrens", function() {deepEqual( Stem("avkastningsgrense"), "avkastningsgrens");});
test("avkastningskatt -> avkastningskatt", function() {deepEqual( Stem("avkastningskatt"), "avkastningskatt");});
test("avkastningsnivå -> avkastningsnivå", function() {deepEqual( Stem("avkastningsnivå"), "avkastningsnivå");});
test("avkastningsnivåer -> avkastningsnivå", function() {deepEqual( Stem("avkastningsnivåer"), "avkastningsnivå");});
test("avkastningsnivået -> avkastningsnivå", function() {deepEqual( Stem("avkastningsnivået"), "avkastningsnivå");});
test("avkastningsprosent -> avkastningsprosent", function() {deepEqual( Stem("avkastningsprosent"), "avkastningsprosent");});
test("avkastningsprosenten -> avkastningsprosent", function() {deepEqual( Stem("avkastningsprosenten"), "avkastningsprosent");});
test("avkastningsrater -> avkastningsrat", function() {deepEqual( Stem("avkastningsrater"), "avkastningsrat");});
test("avkastningsrisiko -> avkastningsrisiko", function() {deepEqual( Stem("avkastningsrisiko"), "avkastningsrisiko");});
test("avkastningsskatt -> avkastningsskatt", function() {deepEqual( Stem("avkastningsskatt"), "avkastningsskatt");});
test("avkastningsskatten -> avkastningsskatt", function() {deepEqual( Stem("avkastningsskatten"), "avkastningsskatt");});
test("avkastningsusikkerheten -> avkastningsusikker", function() {deepEqual( Stem("avkastningsusikkerheten"), "avkastningsusikker");});
test("avkjøring -> avkjøring", function() {deepEqual( Stem("avkjøring"), "avkjøring");});
test("avklare -> avklar", function() {deepEqual( Stem("avklare"), "avklar");});
test("avklaring -> avklaring", function() {deepEqual( Stem("avklaring"), "avklaring");});
test("avklart -> avklart", function() {deepEqual( Stem("avklart"), "avklart");});
test("avklårast -> avklår", function() {deepEqual( Stem("avklårast"), "avklår");});
test("avklåre -> avklår", function() {deepEqual( Stem("avklåre"), "avklår");});
test("avklåring -> avklåring", function() {deepEqual( Stem("avklåring"), "avklåring");});
test("avklåringa -> avklåring", function() {deepEqual( Stem("avklåringa"), "avklåring");});
test("avklårt -> avklårt", function() {deepEqual( Stem("avklårt"), "avklårt");});
test("avkortes -> avkort", function() {deepEqual( Stem("avkortes"), "avkort");});
test("avkorting -> avkorting", function() {deepEqual( Stem("avkorting"), "avkorting");});
test("avkortinga -> avkorting", function() {deepEqual( Stem("avkortinga"), "avkorting");});
test("avkuttede -> avkutt", function() {deepEqual( Stem("avkuttede"), "avkutt");});
test("avlaste -> avlast", function() {deepEqual( Stem("avlaste"), "avlast");});
test("avlaster -> avlast", function() {deepEqual( Stem("avlaster"), "avlast");});
test("avlastning -> avlastning", function() {deepEqual( Stem("avlastning"), "avlastning");});
test("avlastningsbehov -> avlastningsbehov", function() {deepEqual( Stem("avlastningsbehov"), "avlastningsbehov");});
test("avlastningsbehovet -> avlastningsbehov", function() {deepEqual( Stem("avlastningsbehovet"), "avlastningsbehov");});
test("avlastningshavn -> avlastningshavn", function() {deepEqual( Stem("avlastningshavn"), "avlastningshavn");});
test("avlastningshavner -> avlastningshavn", function() {deepEqual( Stem("avlastningshavner"), "avlastningshavn");});
test("avlastningsløsninger -> avlastningsløsning", function() {deepEqual( Stem("avlastningsløsninger"), "avlastningsløsning");});
test("avlastningstilbudet -> avlastningstilbud", function() {deepEqual( Stem("avlastningstilbudet"), "avlastningstilbud");});
test("avlastningsveg -> avlastningsveg", function() {deepEqual( Stem("avlastningsveg"), "avlastningsveg");});
test("avledes -> avl", function() {deepEqual( Stem("avledes"), "avl");});
test("avledet -> avled", function() {deepEqual( Stem("avledet"), "avled");});
test("avleggjast -> avleggj", function() {deepEqual( Stem("avleggjast"), "avleggj");});
test("avleidde -> avleidd", function() {deepEqual( Stem("avleidde"), "avleidd");});
test("avlen -> avl", function() {deepEqual( Stem("avlen"), "avl");});
test("avleverte -> avlever", function() {deepEqual( Stem("avleverte"), "avlever");});
test("avling -> avling", function() {deepEqual( Stem("avling"), "avling");});
test("avlønning -> avlønning", function() {deepEqual( Stem("avlønning"), "avlønning");});
test("avløse -> avløs", function() {deepEqual( Stem("avløse"), "avløs");});
test("avløsningsbeløp -> avløsningsbeløp", function() {deepEqual( Stem("avløsningsbeløp"), "avløsningsbeløp");});
test("avløyst -> avløyst", function() {deepEqual( Stem("avløyst"), "avløyst");});
test("avregningen -> avregning", function() {deepEqual( Stem("avregningen"), "avregning");});
test("avregninger -> avregning", function() {deepEqual( Stem("avregninger"), "avregning");});
test("avsa -> avs", function() {deepEqual( Stem("avsa"), "avs");});
test("avsatt -> avsatt", function() {deepEqual( Stem("avsatt"), "avsatt");});
test("avse -> avs", function() {deepEqual( Stem("avse"), "avs");});
test("avsender -> avsend", function() {deepEqual( Stem("avsender"), "avsend");});
test("avsendere -> avsender", function() {deepEqual( Stem("avsendere"), "avsender");});
test("avsenderfylke -> avsenderfylk", function() {deepEqual( Stem("avsenderfylke"), "avsenderfylk");});
test("avsendersted -> avsendersted", function() {deepEqual( Stem("avsendersted"), "avsendersted");});
test("avsendinga -> avsending", function() {deepEqual( Stem("avsendinga"), "avsending");});
test("avsetjast -> avsetj", function() {deepEqual( Stem("avsetjast"), "avsetj");});
test("avsetjing -> avsetjing", function() {deepEqual( Stem("avsetjing"), "avsetjing");});
test("avsetjinga -> avsetjing", function() {deepEqual( Stem("avsetjinga"), "avsetjing");});
test("avsetning -> avsetning", function() {deepEqual( Stem("avsetning"), "avsetning");});
test("avsetningar -> avsetning", function() {deepEqual( Stem("avsetningar"), "avsetning");});
test("avsetningen -> avsetning", function() {deepEqual( Stem("avsetningen"), "avsetning");});
test("avsetninger -> avsetning", function() {deepEqual( Stem("avsetninger"), "avsetning");});
test("avsetningsadgang -> avsetningsadgang", function() {deepEqual( Stem("avsetningsadgang"), "avsetningsadgang");});
test("avsettes -> avsett", function() {deepEqual( Stem("avsettes"), "avsett");});
test("avsindig -> avsind", function() {deepEqual( Stem("avsindig"), "avsind");});
test("avskiper -> avskip", function() {deepEqual( Stem("avskiper"), "avskip");});
test("avskipere -> avskiper", function() {deepEqual( Stem("avskipere"), "avskiper");});
test("avskipssted -> avskipssted", function() {deepEqual( Stem("avskipssted"), "avskipssted");});
test("avskjere -> avskjer", function() {deepEqual( Stem("avskjere"), "avskjer");});
test("avskjære -> avskjær", function() {deepEqual( Stem("avskjære"), "avskjær");});
test("avskriving -> avskriving", function() {deepEqual( Stem("avskriving"), "avskriving");});
test("avskrivninger -> avskrivning", function() {deepEqual( Stem("avskrivninger"), "avskrivning");});
test("avsky -> avsky", function() {deepEqual( Stem("avsky"), "avsky");});
test("avslag -> avslag", function() {deepEqual( Stem("avslag"), "avslag");});
test("avslege -> avs", function() {deepEqual( Stem("avslege"), "avs");});
test("avslutningsfase -> avslutningsfas", function() {deepEqual( Stem("avslutningsfase"), "avslutningsfas");});
test("avslutta -> avslutt", function() {deepEqual( Stem("avslutta"), "avslutt");});
test("avsluttar -> avslutt", function() {deepEqual( Stem("avsluttar"), "avslutt");});
test("avsluttast -> avslutt", function() {deepEqual( Stem("avsluttast"), "avslutt");});
test("avslutte -> avslutt", function() {deepEqual( Stem("avslutte"), "avslutt");});
test("avslutter -> avslutt", function() {deepEqual( Stem("avslutter"), "avslutt");});
test("avsluttes -> avslutt", function() {deepEqual( Stem("avsluttes"), "avslutt");});
test("avsluttet -> avslutt", function() {deepEqual( Stem("avsluttet"), "avslutt");});
test("avslå -> avslå", function() {deepEqual( Stem("avslå"), "avslå");});
test("avsnitt -> avsnitt", function() {deepEqual( Stem("avsnitt"), "avsnitt");});
test("avsnittene -> avsnitt", function() {deepEqual( Stem("avsnittene"), "avsnitt");});
test("avsnittet -> avsnitt", function() {deepEqual( Stem("avsnittet"), "avsnitt");});
test("avspeile -> avspeil", function() {deepEqual( Stem("avspeile"), "avspeil");});
test("avspeiler -> avspeil", function() {deepEqual( Stem("avspeiler"), "avspeil");});
test("avstand -> avstand", function() {deepEqual( Stem("avstand"), "avstand");});
test("avstanden -> avstand", function() {deepEqual( Stem("avstanden"), "avstand");});
test("avstander -> avstand", function() {deepEqual( Stem("avstander"), "avstand");});
test("avsted -> avsted", function() {deepEqual( Stem("avsted"), "avsted");});
test("avstedkommer -> avstedkomm", function() {deepEqual( Stem("avstedkommer"), "avstedkomm");});
test("avstemming -> avstemming", function() {deepEqual( Stem("avstemming"), "avstemming");});
test("avstemt -> avstemt", function() {deepEqual( Stem("avstemt"), "avstemt");});
test("avstå -> avstå", function() {deepEqual( Stem("avstå"), "avstå");});
test("avstår -> avstår", function() {deepEqual( Stem("avstår"), "avstår");});
test("avta -> avt", function() {deepEqual( Stem("avta"), "avt");});
test("avtakende -> avtak", function() {deepEqual( Stem("avtakende"), "avtak");});
test("avtala -> avtal", function() {deepEqual( Stem("avtala"), "avtal");});
test("avtalane -> avtal", function() {deepEqual( Stem("avtalane"), "avtal");});
test("avtalar -> avtal", function() {deepEqual( Stem("avtalar"), "avtal");});
test("avtalast -> avtal", function() {deepEqual( Stem("avtalast"), "avtal");});
test("avtale -> avtal", function() {deepEqual( Stem("avtale"), "avtal");});
test("avtalebrot -> avtalebrot", function() {deepEqual( Stem("avtalebrot"), "avtalebrot");});
test("avtaleelementet -> avtaleelement", function() {deepEqual( Stem("avtaleelementet"), "avtaleelement");});
test("avtaleerverv -> avtaleerverv", function() {deepEqual( Stem("avtaleerverv"), "avtaleerverv");});
test("avtaleervervarar -> avtaleervervar", function() {deepEqual( Stem("avtaleervervarar"), "avtaleervervar");});
test("avtaleervervaren -> avtaleervervar", function() {deepEqual( Stem("avtaleervervaren"), "avtaleervervar");});
test("avtalefestede -> avtalefest", function() {deepEqual( Stem("avtalefestede"), "avtalefest");});
test("avtaleforhold -> avtaleforhold", function() {deepEqual( Stem("avtaleforhold"), "avtaleforhold");});
test("avtaleforholdet -> avtaleforhold", function() {deepEqual( Stem("avtaleforholdet"), "avtaleforhold");});
test("avtalefriheten -> avtalefri", function() {deepEqual( Stem("avtalefriheten"), "avtalefri");});
test("avtaleklausul -> avtaleklausul", function() {deepEqual( Stem("avtaleklausul"), "avtaleklausul");});
test("avtaleliknande -> avtalelikn", function() {deepEqual( Stem("avtaleliknande"), "avtalelikn");});
test("avtalelova -> avtal", function() {deepEqual( Stem("avtalelova"), "avtal");});
test("avtalen -> avtal", function() {deepEqual( Stem("avtalen"), "avtal");});
test("avtalene -> avtal", function() {deepEqual( Stem("avtalene"), "avtal");});
test("avtalens -> avtal", function() {deepEqual( Stem("avtalens"), "avtal");});
test("avtaleområdet -> avtaleområd", function() {deepEqual( Stem("avtaleområdet"), "avtaleområd");});
test("avtalepant -> avtalepant", function() {deepEqual( Stem("avtalepant"), "avtalepant");});
test("avtalepanthavarar -> avtalepanthavar", function() {deepEqual( Stem("avtalepanthavarar"), "avtalepanthavar");});
test("avtalepart -> avtalepart", function() {deepEqual( Stem("avtalepart"), "avtalepart");});
test("avtalepartar -> avtalepart", function() {deepEqual( Stem("avtalepartar"), "avtalepart");});
test("avtalepartene -> avtalepart", function() {deepEqual( Stem("avtalepartene"), "avtalepart");});
test("avtalepraksis -> avtalepraksis", function() {deepEqual( Stem("avtalepraksis"), "avtalepraksis");});
test("avtaler -> avtal", function() {deepEqual( Stem("avtaler"), "avtal");});
test("avtalereglane -> avtaleregl", function() {deepEqual( Stem("avtalereglane"), "avtaleregl");});
test("avtalerett -> avtalerett", function() {deepEqual( Stem("avtalerett"), "avtalerett");});
test("avtalerettslege -> avtaleretts", function() {deepEqual( Stem("avtalerettslege"), "avtaleretts");});
test("avtales -> avtal", function() {deepEqual( Stem("avtales"), "avtal");});
test("avtalesituasjonen -> avtalesituasjon", function() {deepEqual( Stem("avtalesituasjonen"), "avtalesituasjon");});
test("avtaletida -> avtaletid", function() {deepEqual( Stem("avtaletida"), "avtaletid");});
test("avtaletidspunktet -> avtaletidspunkt", function() {deepEqual( Stem("avtaletidspunktet"), "avtaletidspunkt");});
test("avtaletypar -> avtaletyp", function() {deepEqual( Stem("avtaletypar"), "avtaletyp");});
test("avtalpension -> avtalpension", function() {deepEqual( Stem("avtalpension"), "avtalpension");});
test("avtalt -> avtalt", function() {deepEqual( Stem("avtalt"), "avtalt");});
test("avtalte -> avtalt", function() {deepEqual( Stem("avtalte"), "avtalt");});
test("avtar -> avt", function() {deepEqual( Stem("avtar"), "avt");});
test("avveging -> avveging", function() {deepEqual( Stem("avveging"), "avveging");});
test("avveginga -> avveging", function() {deepEqual( Stem("avveginga"), "avveging");});
test("avveining -> avveining", function() {deepEqual( Stem("avveining"), "avveining");});
test("avveiningen -> avveining", function() {deepEqual( Stem("avveiningen"), "avveining");});
test("avvente -> avvent", function() {deepEqual( Stem("avvente"), "avvent");});
test("avvik -> avvik", function() {deepEqual( Stem("avvik"), "avvik");});
test("avvikande -> avvik", function() {deepEqual( Stem("avvikande"), "avvik");});
test("avvike -> avvik", function() {deepEqual( Stem("avvike"), "avvik");});
test("avvikene -> avvik", function() {deepEqual( Stem("avvikene"), "avvik");});
test("avviker -> avvik", function() {deepEqual( Stem("avviker"), "avvik");});
test("avviket -> avvik", function() {deepEqual( Stem("avviket"), "avvik");});
test("avvikla -> avvikl", function() {deepEqual( Stem("avvikla"), "avvikl");});
test("avviklast -> avvikl", function() {deepEqual( Stem("avviklast"), "avvikl");});
test("avvikle -> avvikl", function() {deepEqual( Stem("avvikle"), "avvikl");});
test("avvikler -> avvikl", function() {deepEqual( Stem("avvikler"), "avvikl");});
test("avvikles -> avvikl", function() {deepEqual( Stem("avvikles"), "avvikl");});
test("avviklet -> avvikl", function() {deepEqual( Stem("avviklet"), "avvikl");});
test("avvikling -> avvikling", function() {deepEqual( Stem("avvikling"), "avvikling");});
test("avviklinga -> avvikling", function() {deepEqual( Stem("avviklinga"), "avvikling");});
test("avviklingen -> avvikling", function() {deepEqual( Stem("avviklingen"), "avvikling");});
test("avviklingsbalanse -> avviklingsbalans", function() {deepEqual( Stem("avviklingsbalanse"), "avviklingsbalans");});
test("avviklingsbuet -> avviklingsbu", function() {deepEqual( Stem("avviklingsbuet"), "avviklingsbu");});
test("avviklingsperioden -> avviklingsperiod", function() {deepEqual( Stem("avviklingsperioden"), "avviklingsperiod");});
test("avviklingsstyre -> avviklingsstyr", function() {deepEqual( Stem("avviklingsstyre"), "avviklingsstyr");});
test("avviklingsstyret -> avviklingsstyr", function() {deepEqual( Stem("avviklingsstyret"), "avviklingsstyr");});
test("avviklingstida -> avviklingstid", function() {deepEqual( Stem("avviklingstida"), "avviklingstid");});
test("avviklingstyret -> avviklingstyr", function() {deepEqual( Stem("avviklingstyret"), "avviklingstyr");});
test("avviklingsvedtak -> avviklingsvedtak", function() {deepEqual( Stem("avviklingsvedtak"), "avviklingsvedtak");});
test("avvisast -> avvis", function() {deepEqual( Stem("avvisast"), "avvis");});
test("avvist -> avvist", function() {deepEqual( Stem("avvist"), "avvist");});
test("avviste -> avvist", function() {deepEqual( Stem("avviste"), "avvist");});
test("b -> b", function() {deepEqual( Stem("b"), "b");});
test("ba -> ba", function() {deepEqual( Stem("ba"), "ba");});
test("babler -> babl", function() {deepEqual( Stem("babler"), "babl");});
test("bachmann -> bachmann", function() {deepEqual( Stem("bachmann"), "bachmann");});
test("bad -> bad", function() {deepEqual( Stem("bad"), "bad");});
test("baderom -> baderom", function() {deepEqual( Stem("baderom"), "baderom");});
test("baderomsgolv -> baderomsgolv", function() {deepEqual( Stem("baderomsgolv"), "baderomsgolv");});
test("badet -> bad", function() {deepEqual( Stem("badet"), "bad");});
test("badstue -> badstu", function() {deepEqual( Stem("badstue"), "badstu");});
test("badstuen -> badstu", function() {deepEqual( Stem("badstuen"), "badstu");});
test("bak -> bak", function() {deepEqual( Stem("bak"), "bak");});
test("bakbena -> bakben", function() {deepEqual( Stem("bakbena"), "bakben");});
test("baken -> bak", function() {deepEqual( Stem("baken"), "bak");});
test("bakenfor -> bakenfor", function() {deepEqual( Stem("bakenfor"), "bakenfor");});
test("bakenforliggende -> bakenforligg", function() {deepEqual( Stem("bakenforliggende"), "bakenforligg");});
test("bakfoten -> bakfot", function() {deepEqual( Stem("bakfoten"), "bakfot");});
test("bakgrunn -> bakgrunn", function() {deepEqual( Stem("bakgrunn"), "bakgrunn");});
test("bakgrunnen -> bakgrunn", function() {deepEqual( Stem("bakgrunnen"), "bakgrunn");});
test("bakgrunnsarbeid -> bakgrunnsarbeid", function() {deepEqual( Stem("bakgrunnsarbeid"), "bakgrunnsarbeid");});
test("bakgrunnsmaterialet -> bakgrunnsmaterial", function() {deepEqual( Stem("bakgrunnsmaterialet"), "bakgrunnsmaterial");});
test("bakgrunnsregel -> bakgrunnsregel", function() {deepEqual( Stem("bakgrunnsregel"), "bakgrunnsregel");});
test("bakgrunnsreglane -> bakgrunnsregl", function() {deepEqual( Stem("bakgrunnsreglane"), "bakgrunnsregl");});
test("bakgrunnsreglar -> bakgrunnsregl", function() {deepEqual( Stem("bakgrunnsreglar"), "bakgrunnsregl");});
test("bakhand -> bakhand", function() {deepEqual( Stem("bakhand"), "bakhand");});
test("bakke -> bakk", function() {deepEqual( Stem("bakke"), "bakk");});
test("bakkekontakt -> bakkekontakt", function() {deepEqual( Stem("bakkekontakt"), "bakkekontakt");});
test("bakken -> bakk", function() {deepEqual( Stem("bakken"), "bakk");});
test("bakkene -> bakk", function() {deepEqual( Stem("bakkene"), "bakk");});
test("bakkete -> bakket", function() {deepEqual( Stem("bakkete"), "bakket");});
test("bakketopp -> bakketopp", function() {deepEqual( Stem("bakketopp"), "bakketopp");});
test("baklandet -> bakland", function() {deepEqual( Stem("baklandet"), "bakland");});
test("baklengs -> bakleng", function() {deepEqual( Stem("baklengs"), "bakleng");});
test("bakover -> bakov", function() {deepEqual( Stem("bakover"), "bakov");});
test("bakre -> bakr", function() {deepEqual( Stem("bakre"), "bakr");});
test("bakrus -> bakrus", function() {deepEqual( Stem("bakrus"), "bakrus");});
test("bakser -> baks", function() {deepEqual( Stem("bakser"), "baks");});
test("bakveien -> bakvei", function() {deepEqual( Stem("bakveien"), "bakvei");});
test("balanse -> balans", function() {deepEqual( Stem("balanse"), "balans");});
test("balansen -> balans", function() {deepEqual( Stem("balansen"), "balans");});
test("balansere -> balanser", function() {deepEqual( Stem("balansere"), "balanser");});
test("balanserer -> balanser", function() {deepEqual( Stem("balanserer"), "balanser");});
test("balansert -> balanser", function() {deepEqual( Stem("balansert"), "balanser");});
test("balanserte -> balanser", function() {deepEqual( Stem("balanserte"), "balanser");});
test("balder -> bald", function() {deepEqual( Stem("balder"), "bald");});
test("balders -> bald", function() {deepEqual( Stem("balders"), "bald");});
test("balkong -> balkong", function() {deepEqual( Stem("balkong"), "balkong");});
test("balkongar -> balkong", function() {deepEqual( Stem("balkongar"), "balkong");});
test("ball -> ball", function() {deepEqual( Stem("ball"), "ball");});
test("ballonger -> ballong", function() {deepEqual( Stem("ballonger"), "ballong");});
test("bamble -> bambl", function() {deepEqual( Stem("bamble"), "bambl");});
test("band -> band", function() {deepEqual( Stem("band"), "band");});
test("banda -> band", function() {deepEqual( Stem("banda"), "band");});
test("bandt -> band", function() {deepEqual( Stem("bandt"), "band");});
test("bane -> ban", function() {deepEqual( Stem("bane"), "ban");});
test("baneforbindelse -> baneforbind", function() {deepEqual( Stem("baneforbindelse"), "baneforbind");});
test("banekorridorene -> banekorridor", function() {deepEqual( Stem("banekorridorene"), "banekorridor");});
test("banekorridorer -> banekorridor", function() {deepEqual( Stem("banekorridorer"), "banekorridor");});
test("banemann -> banemann", function() {deepEqual( Stem("banemann"), "banemann");});
test("banenett -> banenett", function() {deepEqual( Stem("banenett"), "banenett");});
test("banenettet -> banenett", function() {deepEqual( Stem("banenettet"), "banenett");});
test("banetilknytning -> banetilknytning", function() {deepEqual( Stem("banetilknytning"), "banetilknytning");});
test("banetransport -> banetransport", function() {deepEqual( Stem("banetransport"), "banetransport");});
test("bank -> bank", function() {deepEqual( Stem("bank"), "bank");});
test("bankar -> bank", function() {deepEqual( Stem("bankar"), "bank");});
test("banken -> bank", function() {deepEqual( Stem("banken"), "bank");});
test("bankenes -> bank", function() {deepEqual( Stem("bankenes"), "bank");});
test("banker -> bank", function() {deepEqual( Stem("banker"), "bank");});
test("bankforening -> bankforening", function() {deepEqual( Stem("bankforening"), "bankforening");});
test("bankgaranti -> bankgaranti", function() {deepEqual( Stem("bankgaranti"), "bankgaranti");});
test("bankinnskot -> bankinnskot", function() {deepEqual( Stem("bankinnskot"), "bankinnskot");});
test("bankinnskudd -> bankinnskudd", function() {deepEqual( Stem("bankinnskudd"), "bankinnskudd");});
test("bankinnskuddene -> bankinnskudd", function() {deepEqual( Stem("bankinnskuddene"), "bankinnskudd");});
test("bankinnskuddet -> bankinnskudd", function() {deepEqual( Stem("bankinnskuddet"), "bankinnskudd");});
test("bankkonto -> bankkonto", function() {deepEqual( Stem("bankkonto"), "bankkonto");});
test("banklovgivingen -> banklovgiving", function() {deepEqual( Stem("banklovgivingen"), "banklovgiving");});
test("banklovkommisjonen -> banklovkommisjon", function() {deepEqual( Stem("banklovkommisjonen"), "banklovkommisjon");});
test("banksparing -> banksparing", function() {deepEqual( Stem("banksparing"), "banksparing");});
test("banksystemet -> banksystem", function() {deepEqual( Stem("banksystemet"), "banksystem");});
test("banner -> bann", function() {deepEqual( Stem("banner"), "bann");});
test("barbent -> barbent", function() {deepEqual( Stem("barbent"), "barbent");});
test("barber -> barb", function() {deepEqual( Stem("barber"), "barb");});
test("bare -> bar", function() {deepEqual( Stem("bare"), "bar");});
test("barfot -> barfot", function() {deepEqual( Stem("barfot"), "barfot");});
test("barkebit -> barkebit", function() {deepEqual( Stem("barkebit"), "barkebit");});
test("barkebiten -> barkebit", function() {deepEqual( Stem("barkebiten"), "barkebit");});
test("barken -> bark", function() {deepEqual( Stem("barken"), "bark");});
test("barlaup -> barlaup", function() {deepEqual( Stem("barlaup"), "barlaup");});
test("barn -> barn", function() {deepEqual( Stem("barn"), "barn");});
test("barna -> barn", function() {deepEqual( Stem("barna"), "barn");});
test("barnas -> barn", function() {deepEqual( Stem("barnas"), "barn");});
test("barndomstraktene -> barndomstrakt", function() {deepEqual( Stem("barndomstraktene"), "barndomstrakt");});
test("barne -> barn", function() {deepEqual( Stem("barne"), "barn");});
test("barnebarn -> barnebarn", function() {deepEqual( Stem("barnebarn"), "barnebarn");});
test("barnebarns -> barnebarn", function() {deepEqual( Stem("barnebarns"), "barnebarn");});
test("barnefamiliar -> barnefamili", function() {deepEqual( Stem("barnefamiliar"), "barnefamili");});
test("barnehagar -> barnehag", function() {deepEqual( Stem("barnehagar"), "barnehag");});
test("barnehage -> barnehag", function() {deepEqual( Stem("barnehage"), "barnehag");});
test("barnehager -> barnehag", function() {deepEqual( Stem("barnehager"), "barnehag");});
test("barnepass -> barnepass", function() {deepEqual( Stem("barnepass"), "barnepass");});
test("barnepensjon -> barnepensjon", function() {deepEqual( Stem("barnepensjon"), "barnepensjon");});
test("barnepensjonen -> barnepensjon", function() {deepEqual( Stem("barnepensjonen"), "barnepensjon");});
test("barnepensjonens -> barnepensjon", function() {deepEqual( Stem("barnepensjonens"), "barnepensjon");});
test("barnet -> barn", function() {deepEqual( Stem("barnet"), "barn");});
test("barnetrygd -> barnetrygd", function() {deepEqual( Stem("barnetrygd"), "barnetrygd");});
test("barnets -> barn", function() {deepEqual( Stem("barnets"), "barn");});
test("barnløse -> barnløs", function() {deepEqual( Stem("barnløse"), "barnløs");});
test("barre -> barr", function() {deepEqual( Stem("barre"), "barr");});
test("barten -> bart", function() {deepEqual( Stem("barten"), "bart");});
test("basbelopp -> basbelopp", function() {deepEqual( Stem("basbelopp"), "basbelopp");});
test("basehavn -> basehavn", function() {deepEqual( Stem("basehavn"), "basehavn");});
test("basen -> bas", function() {deepEqual( Stem("basen"), "bas");});
test("basere -> baser", function() {deepEqual( Stem("basere"), "baser");});
test("baserer -> baser", function() {deepEqual( Stem("baserer"), "baser");});
test("baseres -> baser", function() {deepEqual( Stem("baseres"), "baser");});
test("basert -> baser", function() {deepEqual( Stem("basert"), "baser");});
test("baserte -> baser", function() {deepEqual( Stem("baserte"), "baser");});
test("basis -> basis", function() {deepEqual( Stem("basis"), "basis");});
test("basisalternativet -> basisalternativ", function() {deepEqual( Stem("basisalternativet"), "basisalternativ");});
test("basisår -> basisår", function() {deepEqual( Stem("basisår"), "basisår");});
test("basisåret -> basisår", function() {deepEqual( Stem("basisåret"), "basisår");});
test("basketak -> basketak", function() {deepEqual( Stem("basketak"), "basketak");});
test("bassenget -> basseng", function() {deepEqual( Stem("bassenget"), "basseng");});
test("bastet -> bast", function() {deepEqual( Stem("bastet"), "bast");});
test("baten -> bat", function() {deepEqual( Stem("baten"), "bat");});
test("bauge -> baug", function() {deepEqual( Stem("bauge"), "baug");});
test("baugen -> baug", function() {deepEqual( Stem("baugen"), "baug");});
test("bauges -> baug", function() {deepEqual( Stem("bauges"), "baug");});
test("bbl -> bbl", function() {deepEqual( Stem("bbl"), "bbl");});
test("be -> be", function() {deepEqual( Stem("be"), "be");});
test("bearbeidede -> bearbeid", function() {deepEqual( Stem("bearbeidede"), "bearbeid");});
test("beboerdemokrati -> beboerdemokrati", function() {deepEqual( Stem("beboerdemokrati"), "beboerdemokrati");});
test("beboerkantiner -> beboerkantin", function() {deepEqual( Stem("beboerkantiner"), "beboerkantin");});
test("bebuarane -> bebuar", function() {deepEqual( Stem("bebuarane"), "bebuar");});
test("bebuarar -> bebuar", function() {deepEqual( Stem("bebuarar"), "bebuar");});
test("bebuardemokrati -> bebuardemokrati", function() {deepEqual( Stem("bebuardemokrati"), "bebuardemokrati");});
test("bebuaren -> bebuar", function() {deepEqual( Stem("bebuaren"), "bebuar");});
test("bebudede -> bebud", function() {deepEqual( Stem("bebudede"), "bebud");});
test("bebyggelsen -> bebygg", function() {deepEqual( Stem("bebyggelsen"), "bebygg");});
test("bebygget -> bebygg", function() {deepEqual( Stem("bebygget"), "bebygg");});
test("bede -> bed", function() {deepEqual( Stem("bede"), "bed");});
test("bedre -> bedr", function() {deepEqual( Stem("bedre"), "bedr");});
test("bedres -> bedr", function() {deepEqual( Stem("bedres"), "bedr");});
test("bedret -> bedr", function() {deepEqual( Stem("bedret"), "bedr");});
test("bedrift -> bedrift", function() {deepEqual( Stem("bedrift"), "bedrift");});
test("bedrifta -> bedrift", function() {deepEqual( Stem("bedrifta"), "bedrift");});
test("bedriften -> bedrift", function() {deepEqual( Stem("bedriften"), "bedrift");});
test("bedriftene -> bedrift", function() {deepEqual( Stem("bedriftene"), "bedrift");});
test("bedriftenes -> bedrift", function() {deepEqual( Stem("bedriftenes"), "bedrift");});
test("bedriftens -> bedrift", function() {deepEqual( Stem("bedriftens"), "bedrift");});
test("bedrifter -> bedrift", function() {deepEqual( Stem("bedrifter"), "bedrift");});
test("bedrifters -> bedrift", function() {deepEqual( Stem("bedrifters"), "bedrift");});
test("bedriftsforsamling -> bedriftsforsamling", function() {deepEqual( Stem("bedriftsforsamling"), "bedriftsforsamling");});
test("bedriftsinterne -> bedriftsintern", function() {deepEqual( Stem("bedriftsinterne"), "bedriftsintern");});
test("bedriftsordningen -> bedriftsordning", function() {deepEqual( Stem("bedriftsordningen"), "bedriftsordning");});
test("bedriftsstørrelser -> bedriftsstørr", function() {deepEqual( Stem("bedriftsstørrelser"), "bedriftsstørr");});
test("bedring -> bedring", function() {deepEqual( Stem("bedring"), "bedring");});
test("bedrivas -> bedriv", function() {deepEqual( Stem("bedrivas"), "bedriv");});
test("bedt -> bedt", function() {deepEqual( Stem("bedt"), "bedt");});
test("bedømme -> bedømm", function() {deepEqual( Stem("bedømme"), "bedømm");});
test("bedømminga -> bedømming", function() {deepEqual( Stem("bedømminga"), "bedømming");});
test("bedømt -> bedømt", function() {deepEqual( Stem("bedømt"), "bedømt");});
test("befaler -> befal", function() {deepEqual( Stem("befaler"), "befal");});
test("befaringene -> befaring", function() {deepEqual( Stem("befaringene"), "befaring");});
test("befaringer -> befaring", function() {deepEqual( Stem("befaringer"), "befaring");});
test("befinne -> befinn", function() {deepEqual( Stem("befinne"), "befinn");});
test("befinner -> befinn", function() {deepEqual( Stem("befinner"), "befinn");});
test("befolkede -> befolk", function() {deepEqual( Stem("befolkede"), "befolk");});
test("befolkningen -> befolkning", function() {deepEqual( Stem("befolkningen"), "befolkning");});
test("befolkningens -> befolkning", function() {deepEqual( Stem("befolkningens"), "befolkning");});
test("befolkningskonsentrasjon -> befolkningskonsentrasjon", function() {deepEqual( Stem("befolkningskonsentrasjon"), "befolkningskonsentrasjon");});
test("befolkningsvekst -> befolkningsvekst", function() {deepEqual( Stem("befolkningsvekst"), "befolkningsvekst");});
test("befri -> befri", function() {deepEqual( Stem("befri"), "befri");});
test("begagna -> begagn", function() {deepEqual( Stem("begagna"), "begagn");});
test("begeistret -> begeistr", function() {deepEqual( Stem("begeistret"), "begeistr");});
test("beger -> beg", function() {deepEqual( Stem("beger"), "beg");});
test("begeret -> beger", function() {deepEqual( Stem("begeret"), "beger");});
test("begge -> begg", function() {deepEqual( Stem("begge"), "begg");});
test("begivenhet -> begiven", function() {deepEqual( Stem("begivenhet"), "begiven");});
test("begjæring -> begjæring", function() {deepEqual( Stem("begjæring"), "begjæring");});
test("begjært -> begjært", function() {deepEqual( Stem("begjært"), "begjært");});
test("begrense -> begrens", function() {deepEqual( Stem("begrense"), "begrens");});
test("begrensede -> begrens", function() {deepEqual( Stem("begrensede"), "begrens");});
test("begrenser -> begrens", function() {deepEqual( Stem("begrenser"), "begrens");});
test("begrenses -> begrens", function() {deepEqual( Stem("begrenses"), "begrens");});
test("begrenset -> begrens", function() {deepEqual( Stem("begrenset"), "begrens");});
test("begrensete -> begrenset", function() {deepEqual( Stem("begrensete"), "begrenset");});
test("begrensing -> begrensing", function() {deepEqual( Stem("begrensing"), "begrensing");});
test("begrensinger -> begrensing", function() {deepEqual( Stem("begrensinger"), "begrensing");});
test("begrensning -> begrensning", function() {deepEqual( Stem("begrensning"), "begrensning");});
test("begrensningene -> begrensning", function() {deepEqual( Stem("begrensningene"), "begrensning");});
test("begrensninger -> begrensning", function() {deepEqual( Stem("begrensninger"), "begrensning");});
test("begrensningsregler -> begrensningsregl", function() {deepEqual( Stem("begrensningsregler"), "begrensningsregl");});
test("begrep -> begrep", function() {deepEqual( Stem("begrep"), "begrep");});
test("begrepene -> begrep", function() {deepEqual( Stem("begrepene"), "begrep");});
test("begreper -> begrep", function() {deepEqual( Stem("begreper"), "begrep");});
test("begrepet -> begrep", function() {deepEqual( Stem("begrepet"), "begrep");});
test("begrepsbruk -> begrepsbruk", function() {deepEqual( Stem("begrepsbruk"), "begrepsbruk");});
test("begriper -> begrip", function() {deepEqual( Stem("begriper"), "begrip");});
test("begrunne -> begrunn", function() {deepEqual( Stem("begrunne"), "begrunn");});
test("begrunnede -> begrunn", function() {deepEqual( Stem("begrunnede"), "begrunn");});
test("begrunnelse -> begrunn", function() {deepEqual( Stem("begrunnelse"), "begrunn");});
test("begrunnelsen -> begrunn", function() {deepEqual( Stem("begrunnelsen"), "begrunn");});
test("begrunnelsene -> begrunn", function() {deepEqual( Stem("begrunnelsene"), "begrunn");});
test("begrunnelser -> begrunn", function() {deepEqual( Stem("begrunnelser"), "begrunn");});
test("begrunner -> begrunn", function() {deepEqual( Stem("begrunner"), "begrunn");});
test("begrunnet -> begrunn", function() {deepEqual( Stem("begrunnet"), "begrunn");});
test("begunstigede -> begunst", function() {deepEqual( Stem("begunstigede"), "begunst");});
test("begunstigedes -> begunst", function() {deepEqual( Stem("begunstigedes"), "begunst");});
test("begunstiget -> begunst", function() {deepEqual( Stem("begunstiget"), "begunst");});
test("begynne -> begynn", function() {deepEqual( Stem("begynne"), "begynn");});
test("begynnelse -> begynn", function() {deepEqual( Stem("begynnelse"), "begynn");});
test("begynnelsen -> begynn", function() {deepEqual( Stem("begynnelsen"), "begynn");});
test("begynnende -> begynn", function() {deepEqual( Stem("begynnende"), "begynn");});
test("begynner -> begynn", function() {deepEqual( Stem("begynner"), "begynn");});
test("begynt -> begynt", function() {deepEqual( Stem("begynt"), "begynt");});
test("begynte -> begynt", function() {deepEqual( Stem("begynte"), "begynt");});
test("behag -> behag", function() {deepEqual( Stem("behag"), "behag");});
test("behandla -> behandl", function() {deepEqual( Stem("behandla"), "behandl");});
test("behandlar -> behandl", function() {deepEqual( Stem("behandlar"), "behandl");});
test("behandlast -> behandl", function() {deepEqual( Stem("behandlast"), "behandl");});
test("behandle -> behandl", function() {deepEqual( Stem("behandle"), "behandl");});
test("behandler -> behandl", function() {deepEqual( Stem("behandler"), "behandl");});
test("behandles -> behandl", function() {deepEqual( Stem("behandles"), "behandl");});
test("behandlet -> behandl", function() {deepEqual( Stem("behandlet"), "behandl");});
test("behandling -> behandling", function() {deepEqual( Stem("behandling"), "behandling");});
test("behandlinga -> behandling", function() {deepEqual( Stem("behandlinga"), "behandling");});
test("behandlingen -> behandling", function() {deepEqual( Stem("behandlingen"), "behandling");});
test("behandlingsmåte -> behandlingsmåt", function() {deepEqual( Stem("behandlingsmåte"), "behandlingsmåt");});
test("behandlingspunkter -> behandlingspunkt", function() {deepEqual( Stem("behandlingspunkter"), "behandlingspunkt");});
test("beheftet -> beheft", function() {deepEqual( Stem("beheftet"), "beheft");});
test("beherske -> behersk", function() {deepEqual( Stem("beherske"), "behersk");});
test("behersker -> behersk", function() {deepEqual( Stem("behersker"), "behersk");});
test("behold -> behold", function() {deepEqual( Stem("behold"), "behold");});
test("beholde -> behold", function() {deepEqual( Stem("beholde"), "behold");});
test("beholder -> behold", function() {deepEqual( Stem("beholder"), "behold");});
test("beholdes -> behold", function() {deepEqual( Stem("beholdes"), "behold");});
test("beholdning -> beholdning", function() {deepEqual( Stem("beholdning"), "beholdning");});
test("behov -> behov", function() {deepEqual( Stem("behov"), "behov");});
test("behova -> behov", function() {deepEqual( Stem("behova"), "behov");});
test("behovene -> behov", function() {deepEqual( Stem("behovene"), "behov");});
test("behovet -> behov", function() {deepEqual( Stem("behovet"), "behov");});
test("behovsprøvet -> behovsprøv", function() {deepEqual( Stem("behovsprøvet"), "behovsprøv");});
test("behøver -> behøv", function() {deepEqual( Stem("behøver"), "behøv");});
test("behøves -> behøv", function() {deepEqual( Stem("behøves"), "behøv");});
test("beinkrok -> beinkrok", function() {deepEqual( Stem("beinkrok"), "beinkrok");});
test("beist -> beist", function() {deepEqual( Stem("beist"), "beist");});
test("beistet -> beist", function() {deepEqual( Stem("beistet"), "beist");});
test("beitemarker -> beitemark", function() {deepEqual( Stem("beitemarker"), "beitemark");});
test("beitet -> beit", function() {deepEqual( Stem("beitet"), "beit");});
test("bekjempe -> bekjemp", function() {deepEqual( Stem("bekjempe"), "bekjemp");});
test("bekk -> bekk", function() {deepEqual( Stem("bekk"), "bekk");});
test("bekkelaget -> bekkelag", function() {deepEqual( Stem("bekkelaget"), "bekkelag");});
test("bekkelagskai -> bekkelagskai", function() {deepEqual( Stem("bekkelagskai"), "bekkelagskai");});
test("bekkelagskaia -> bekkelagskai", function() {deepEqual( Stem("bekkelagskaia"), "bekkelagskai");});
test("bekkelagskaiene -> bekkelagskai", function() {deepEqual( Stem("bekkelagskaiene"), "bekkelagskai");});
test("bekkelagsområdet -> bekkelagsområd", function() {deepEqual( Stem("bekkelagsområdet"), "bekkelagsområd");});
test("bekostning -> bekostning", function() {deepEqual( Stem("bekostning"), "bekostning");});
test("bekreftelse -> bekreft", function() {deepEqual( Stem("bekreftelse"), "bekreft");});
test("bekrefter -> bekreft", function() {deepEqual( Stem("bekrefter"), "bekreft");});
test("bekymrer -> bekymr", function() {deepEqual( Stem("bekymrer"), "bekymr");});
test("bekymret -> bekymr", function() {deepEqual( Stem("bekymret"), "bekymr");});
test("belaste -> belast", function() {deepEqual( Stem("belaste"), "belast");});
test("belastede -> belast", function() {deepEqual( Stem("belastede"), "belast");});
test("belastende -> belast", function() {deepEqual( Stem("belastende"), "belast");});
test("belaster -> belast", function() {deepEqual( Stem("belaster"), "belast");});
test("belastes -> belast", function() {deepEqual( Stem("belastes"), "belast");});
test("belastet -> belast", function() {deepEqual( Stem("belastet"), "belast");});
test("belastning -> belastning", function() {deepEqual( Stem("belastning"), "belastning");});
test("belastningen -> belastning", function() {deepEqual( Stem("belastningen"), "belastning");});
test("belastningene -> belastning", function() {deepEqual( Stem("belastningene"), "belastning");});
test("belastninger -> belastning", function() {deepEqual( Stem("belastninger"), "belastning");});
test("belgen -> belg", function() {deepEqual( Stem("belgen"), "belg");});
test("beliggenhet -> beliggen", function() {deepEqual( Stem("beliggenhet"), "beliggen");});
test("beltestedet -> beltested", function() {deepEqual( Stem("beltestedet"), "beltested");});
test("beltet -> belt", function() {deepEqual( Stem("beltet"), "belt");});
test("belyse -> belys", function() {deepEqual( Stem("belyse"), "belys");});
test("belyses -> belys", function() {deepEqual( Stem("belyses"), "belys");});
test("belyst -> belyst", function() {deepEqual( Stem("belyst"), "belyst");});
test("belønne -> belønn", function() {deepEqual( Stem("belønne"), "belønn");});
test("beløp -> beløp", function() {deepEqual( Stem("beløp"), "beløp");});
test("beløpe -> beløp", function() {deepEqual( Stem("beløpe"), "beløp");});
test("beløpene -> beløp", function() {deepEqual( Stem("beløpene"), "beløp");});
test("beløpet -> beløp", function() {deepEqual( Stem("beløpet"), "beløp");});
test("beløpets -> beløp", function() {deepEqual( Stem("beløpets"), "beløp");});
test("beløpsbegrenset -> beløpsbegrens", function() {deepEqual( Stem("beløpsbegrenset"), "beløpsbegrens");});
test("beløpsgrense -> beløpsgrens", function() {deepEqual( Stem("beløpsgrense"), "beløpsgrens");});
test("beløpsmessig -> beløpsmess", function() {deepEqual( Stem("beløpsmessig"), "beløpsmess");});
test("bemerke -> bemerk", function() {deepEqual( Stem("bemerke"), "bemerk");});
test("bemerker -> bemerk", function() {deepEqual( Stem("bemerker"), "bemerk");});
test("bemerket -> bemerk", function() {deepEqual( Stem("bemerket"), "bemerk");});
test("ben -> ben", function() {deepEqual( Stem("ben"), "ben");});
test("bena -> ben", function() {deepEqual( Stem("bena"), "ben");});
test("benefits -> benefit", function() {deepEqual( Stem("benefits"), "benefit");});
test("benevnes -> benevn", function() {deepEqual( Stem("benevnes"), "benevn");});
test("benevningene -> benevning", function() {deepEqual( Stem("benevningene"), "benevning");});
test("benevnt -> benevnt", function() {deepEqual( Stem("benevnt"), "benevnt");});
test("benkene -> benk", function() {deepEqual( Stem("benkene"), "benk");});
test("benkepryd -> benkepryd", function() {deepEqual( Stem("benkepryd"), "benkepryd");});
test("benker -> benk", function() {deepEqual( Stem("benker"), "benk");});
test("benkeradene -> benkerad", function() {deepEqual( Stem("benkeradene"), "benkerad");});
test("benket -> benk", function() {deepEqual( Stem("benket"), "benk");});
test("benrester -> benrest", function() {deepEqual( Stem("benrester"), "benrest");});
test("bensin -> bensin", function() {deepEqual( Stem("bensin"), "bensin");});
test("bensplinter -> bensplint", function() {deepEqual( Stem("bensplinter"), "bensplint");});
test("bent -> bent", function() {deepEqual( Stem("bent"), "bent");});
test("benytte -> benytt", function() {deepEqual( Stem("benytte"), "benytt");});
test("benytter -> benytt", function() {deepEqual( Stem("benytter"), "benytt");});
test("benyttes -> benytt", function() {deepEqual( Stem("benyttes"), "benytt");});
test("benyttet -> benytt", function() {deepEqual( Stem("benyttet"), "benytt");});
test("ber -> ber", function() {deepEqual( Stem("ber"), "ber");});
test("berande -> ber", function() {deepEqual( Stem("berande"), "ber");});
test("berar -> ber", function() {deepEqual( Stem("berar"), "ber");});
test("berast -> ber", function() {deepEqual( Stem("berast"), "ber");});
test("berdal -> berdal", function() {deepEqual( Stem("berdal"), "berdal");});
test("bere -> ber", function() {deepEqual( Stem("bere"), "ber");});
test("beredskap -> beredskap", function() {deepEqual( Stem("beredskap"), "beredskap");});
test("beredskapsarbeidet -> beredskapsarbeid", function() {deepEqual( Stem("beredskapsarbeidet"), "beredskapsarbeid");});
test("beredskapshensyn -> beredskapshensyn", function() {deepEqual( Stem("beredskapshensyn"), "beredskapshensyn");});
test("beredskapsmessig -> beredskapsmess", function() {deepEqual( Stem("beredskapsmessig"), "beredskapsmess");});
test("beredskapsmessige -> beredskapsmess", function() {deepEqual( Stem("beredskapsmessige"), "beredskapsmess");});
test("beredskapsplanlegging -> beredskapsplanlegging", function() {deepEqual( Stem("beredskapsplanlegging"), "beredskapsplanlegging");});
test("bereevne -> bereevn", function() {deepEqual( Stem("bereevne"), "bereevn");});
test("beregne -> beregn", function() {deepEqual( Stem("beregne"), "beregn");});
test("beregnede -> beregn", function() {deepEqual( Stem("beregnede"), "beregn");});
test("beregner -> beregn", function() {deepEqual( Stem("beregner"), "beregn");});
test("beregnes -> beregn", function() {deepEqual( Stem("beregnes"), "beregn");});
test("beregnet -> beregn", function() {deepEqual( Stem("beregnet"), "beregn");});
test("beregning -> beregning", function() {deepEqual( Stem("beregning"), "beregning");});
test("beregningen -> beregning", function() {deepEqual( Stem("beregningen"), "beregning");});
test("beregningene -> beregning", function() {deepEqual( Stem("beregningene"), "beregning");});
test("beregninger -> beregning", function() {deepEqual( Stem("beregninger"), "beregning");});
test("beregningsarbeidet -> beregningsarbeid", function() {deepEqual( Stem("beregningsarbeidet"), "beregningsarbeid");});
test("beregningsgrunnlag -> beregningsgrunnlag", function() {deepEqual( Stem("beregningsgrunnlag"), "beregningsgrunnlag");});
test("beregningsgrunnlaget -> beregningsgrunnlag", function() {deepEqual( Stem("beregningsgrunnlaget"), "beregningsgrunnlag");});
test("beregningsmessig -> beregningsmess", function() {deepEqual( Stem("beregningsmessig"), "beregningsmess");});
test("beregningsprinsippet -> beregningsprinsipp", function() {deepEqual( Stem("beregningsprinsippet"), "beregningsprinsipp");});
test("beregningsrenten -> beregningsrent", function() {deepEqual( Stem("beregningsrenten"), "beregningsrent");});
test("beregningsresultatene -> beregningsresultat", function() {deepEqual( Stem("beregningsresultatene"), "beregningsresultat");});
test("beregningsteknisk -> beregningsteknisk", function() {deepEqual( Stem("beregningsteknisk"), "beregningsteknisk");});
test("beregningstidspunktet -> beregningstidspunkt", function() {deepEqual( Stem("beregningstidspunktet"), "beregningstidspunkt");});
test("berekraftig -> berekraft", function() {deepEqual( Stem("berekraftig"), "berekraft");});
test("beretninger -> beretning", function() {deepEqual( Stem("beretninger"), "beretning");});
test("berette -> berett", function() {deepEqual( Stem("berette"), "berett");});
test("beretter -> berett", function() {deepEqual( Stem("beretter"), "berett");});
test("berettige -> berett", function() {deepEqual( Stem("berettige"), "berett");});
test("berettigede -> berett", function() {deepEqual( Stem("berettigede"), "berett");});
test("berettiger -> berett", function() {deepEqual( Stem("berettiger"), "berett");});
test("berettiget -> berett", function() {deepEqual( Stem("berettiget"), "berett");});
test("berg -> berg", function() {deepEqual( Stem("berg"), "berg");});
test("berge -> berg", function() {deepEqual( Stem("berge"), "berg");});
test("bergelmer -> bergelm", function() {deepEqual( Stem("bergelmer"), "bergelm");});
test("bergen -> berg", function() {deepEqual( Stem("bergen"), "berg");});
test("berget -> berg", function() {deepEqual( Stem("berget"), "berg");});
test("bergets -> berg", function() {deepEqual( Stem("bergets"), "berg");});
test("bergknauser -> bergknaus", function() {deepEqual( Stem("bergknauser"), "bergknaus");});
test("bergrise -> bergris", function() {deepEqual( Stem("bergrise"), "bergris");});
test("bergriser -> bergris", function() {deepEqual( Stem("bergriser"), "bergris");});
test("bergtatt -> bergtatt", function() {deepEqual( Stem("bergtatt"), "bergtatt");});
test("bero -> bero", function() {deepEqual( Stem("bero"), "bero");});
test("beror -> beror", function() {deepEqual( Stem("beror"), "beror");});
test("berre -> berr", function() {deepEqual( Stem("berre"), "berr");});
test("berserk -> berserk", function() {deepEqual( Stem("berserk"), "berserk");});
test("beruset -> berus", function() {deepEqual( Stem("beruset"), "berus");});
test("berømmelse -> berømm", function() {deepEqual( Stem("berømmelse"), "berømm");});
test("berømt -> berømt", function() {deepEqual( Stem("berømt"), "berømt");});
test("berøre -> berør", function() {deepEqual( Stem("berøre"), "berør");});
test("berører -> berør", function() {deepEqual( Stem("berører"), "berør");});
test("berøres -> berør", function() {deepEqual( Stem("berøres"), "berør");});
test("berørt -> berørt", function() {deepEqual( Stem("berørt"), "berørt");});
test("berørte -> berørt", function() {deepEqual( Stem("berørte"), "berørt");});
test("bes -> bes", function() {deepEqual( Stem("bes"), "bes");});
test("beseiret -> beseir", function() {deepEqual( Stem("beseiret"), "beseir");});
test("besk -> besk", function() {deepEqual( Stem("besk"), "besk");});
test("beskatning -> beskatning", function() {deepEqual( Stem("beskatning"), "beskatning");});
test("beskatningen -> beskatning", function() {deepEqual( Stem("beskatningen"), "beskatning");});
test("beskatningsmyndigheten -> beskatningsmynd", function() {deepEqual( Stem("beskatningsmyndigheten"), "beskatningsmynd");});
test("beskatningsprinsipp -> beskatningsprinsipp", function() {deepEqual( Stem("beskatningsprinsipp"), "beskatningsprinsipp");});
test("beskatningsprinsippet -> beskatningsprinsipp", function() {deepEqual( Stem("beskatningsprinsippet"), "beskatningsprinsipp");});
test("beskatte -> beskatt", function() {deepEqual( Stem("beskatte"), "beskatt");});
test("beskattede -> beskatt", function() {deepEqual( Stem("beskattede"), "beskatt");});
test("beskattes -> beskatt", function() {deepEqual( Stem("beskattes"), "beskatt");});
test("beskattet -> beskatt", function() {deepEqual( Stem("beskattet"), "beskatt");});
test("beskjed -> beskjed", function() {deepEqual( Stem("beskjed"), "beskjed");});
test("beskjeden -> beskjed", function() {deepEqual( Stem("beskjeden"), "beskjed");});
test("beskjedent -> beskjedent", function() {deepEqual( Stem("beskjedent"), "beskjedent");});
test("beskjedne -> beskjedn", function() {deepEqual( Stem("beskjedne"), "beskjedn");});
test("beskrankninger -> beskrankning", function() {deepEqual( Stem("beskrankninger"), "beskrankning");});
test("beskrevet -> beskrev", function() {deepEqual( Stem("beskrevet"), "beskrev");});
test("beskrivast -> beskriv", function() {deepEqual( Stem("beskrivast"), "beskriv");});
test("beskrive -> beskriv", function() {deepEqual( Stem("beskrive"), "beskriv");});
test("beskrivelse -> beskriv", function() {deepEqual( Stem("beskrivelse"), "beskriv");});
test("beskrivelser -> beskriv", function() {deepEqual( Stem("beskrivelser"), "beskriv");});
test("beskrivende -> beskriv", function() {deepEqual( Stem("beskrivende"), "beskriv");});
test("beskriver -> beskriv", function() {deepEqual( Stem("beskriver"), "beskriv");});
test("beskrives -> beskriv", function() {deepEqual( Stem("beskrives"), "beskriv");});
test("beskrivingar -> beskriving", function() {deepEqual( Stem("beskrivingar"), "beskriving");});
test("beskytte -> beskytt", function() {deepEqual( Stem("beskytte"), "beskytt");});
test("beskytter -> beskytt", function() {deepEqual( Stem("beskytter"), "beskytt");});
test("beslag -> beslag", function() {deepEqual( Stem("beslag"), "beslag");});
test("beslutning -> beslutning", function() {deepEqual( Stem("beslutning"), "beslutning");});
test("beslutningen -> beslutning", function() {deepEqual( Stem("beslutningen"), "beslutning");});
test("beslutningene -> beslutning", function() {deepEqual( Stem("beslutningene"), "beslutning");});
test("beslutninger -> beslutning", function() {deepEqual( Stem("beslutninger"), "beslutning");});
test("beslutningsgrunnlag -> beslutningsgrunnlag", function() {deepEqual( Stem("beslutningsgrunnlag"), "beslutningsgrunnlag");});
test("beslutningskjeden -> beslutningskjed", function() {deepEqual( Stem("beslutningskjeden"), "beslutningskjed");});
test("beslutningsmyndighet -> beslutningsmynd", function() {deepEqual( Stem("beslutningsmyndighet"), "beslutningsmynd");});
test("beslutningsorganer -> beslutningsorgan", function() {deepEqual( Stem("beslutningsorganer"), "beslutningsorgan");});
test("beslutningsproblem -> beslutningsproblem", function() {deepEqual( Stem("beslutningsproblem"), "beslutningsproblem");});
test("beslutningsprosess -> beslutningsprosess", function() {deepEqual( Stem("beslutningsprosess"), "beslutningsprosess");});
test("beslutningsprosessen -> beslutningsprosess", function() {deepEqual( Stem("beslutningsprosessen"), "beslutningsprosess");});
test("beslutningsrekkefølgen -> beslutningsrekkefølg", function() {deepEqual( Stem("beslutningsrekkefølgen"), "beslutningsrekkefølg");});
test("beslutningsrekkene -> beslutningsrekk", function() {deepEqual( Stem("beslutningsrekkene"), "beslutningsrekk");});
test("beslutningstaker -> beslutningstak", function() {deepEqual( Stem("beslutningstaker"), "beslutningstak");});
test("beslutningsvariabel -> beslutningsvariabel", function() {deepEqual( Stem("beslutningsvariabel"), "beslutningsvariabel");});
test("beslutningsvariabelen -> beslutningsvariabel", function() {deepEqual( Stem("beslutningsvariabelen"), "beslutningsvariabel");});
test("beslutte -> beslutt", function() {deepEqual( Stem("beslutte"), "beslutt");});
test("besluttende -> beslutt", function() {deepEqual( Stem("besluttende"), "beslutt");});
test("beslutter -> beslutt", function() {deepEqual( Stem("beslutter"), "beslutt");});
test("best -> best", function() {deepEqual( Stem("best"), "best");});
test("bestandig -> bestand", function() {deepEqual( Stem("bestandig"), "bestand");});
test("beste -> best", function() {deepEqual( Stem("beste"), "best");});
test("besteme -> bestem", function() {deepEqual( Stem("besteme"), "bestem");});
test("bestemme -> bestemm", function() {deepEqual( Stem("bestemme"), "bestemm");});
test("bestemmelse -> bestemm", function() {deepEqual( Stem("bestemmelse"), "bestemm");});
test("bestemmelsen -> bestemm", function() {deepEqual( Stem("bestemmelsen"), "bestemm");});
test("bestemmelsene -> bestemm", function() {deepEqual( Stem("bestemmelsene"), "bestemm");});
test("bestemmelsens -> bestemm", function() {deepEqual( Stem("bestemmelsens"), "bestemm");});
test("bestemmelser -> bestemm", function() {deepEqual( Stem("bestemmelser"), "bestemm");});
test("bestemmelseshavn -> bestemmelseshavn", function() {deepEqual( Stem("bestemmelseshavn"), "bestemmelseshavn");});
test("bestemmer -> bestemm", function() {deepEqual( Stem("bestemmer"), "bestemm");});
test("bestemmes -> bestemm", function() {deepEqual( Stem("bestemmes"), "bestemm");});
test("bestemor -> bestemor", function() {deepEqual( Stem("bestemor"), "bestemor");});
test("bestemt -> bestemt", function() {deepEqual( Stem("bestemt"), "bestemt");});
test("bestemte -> bestemt", function() {deepEqual( Stem("bestemte"), "bestemt");});
test("bestevilkårsprinsippet -> bestevilkårsprinsipp", function() {deepEqual( Stem("bestevilkårsprinsippet"), "bestevilkårsprinsipp");});
test("bestille -> bestill", function() {deepEqual( Stem("bestille"), "bestill");});
test("bestilling -> bestilling", function() {deepEqual( Stem("bestilling"), "bestilling");});
test("bestla -> bestl", function() {deepEqual( Stem("bestla"), "bestl");});
test("besto -> besto", function() {deepEqual( Stem("besto"), "besto");});
test("bestod -> bestod", function() {deepEqual( Stem("bestod"), "bestod");});
test("bestå -> bestå", function() {deepEqual( Stem("bestå"), "bestå");});
test("bestående -> bestå", function() {deepEqual( Stem("bestående"), "bestå");});
test("består -> består", function() {deepEqual( Stem("består"), "består");});
test("bestått -> bestått", function() {deepEqual( Stem("bestått"), "bestått");});
test("besvare -> besvar", function() {deepEqual( Stem("besvare"), "besvar");});
test("besvart -> besvart", function() {deepEqual( Stem("besvart"), "besvart");});
test("besvergelser -> besverg", function() {deepEqual( Stem("besvergelser"), "besverg");});
test("besvimer -> besvim", function() {deepEqual( Stem("besvimer"), "besvim");});
test("besøk -> besøk", function() {deepEqual( Stem("besøk"), "besøk");});
test("besøke -> besøk", function() {deepEqual( Stem("besøke"), "besøk");});
test("besøker -> besøk", function() {deepEqual( Stem("besøker"), "besøk");});
test("besøket -> besøk", function() {deepEqual( Stem("besøket"), "besøk");});
test("bet -> bet", function() {deepEqual( Stem("bet"), "bet");});
test("betalast -> betal", function() {deepEqual( Stem("betalast"), "betal");});
test("betale -> betal", function() {deepEqual( Stem("betale"), "betal");});
test("betaler -> betal", function() {deepEqual( Stem("betaler"), "betal");});
test("betales -> betal", function() {deepEqual( Stem("betales"), "betal");});
test("betaling -> betaling", function() {deepEqual( Stem("betaling"), "betaling");});
test("betalinga -> betaling", function() {deepEqual( Stem("betalinga"), "betaling");});
test("betalingen -> betaling", function() {deepEqual( Stem("betalingen"), "betaling");});
test("betalingsblankettar -> betalingsblankett", function() {deepEqual( Stem("betalingsblankettar"), "betalingsblankett");});
test("betalingsevne -> betalingsevn", function() {deepEqual( Stem("betalingsevne"), "betalingsevn");});
test("betalingsforpliktelser -> betalingsforplikt", function() {deepEqual( Stem("betalingsforpliktelser"), "betalingsforplikt");});
test("betalingsmishaldet -> betalingsmishald", function() {deepEqual( Stem("betalingsmishaldet"), "betalingsmishald");});
test("betalingsperioder -> betalingsperiod", function() {deepEqual( Stem("betalingsperioder"), "betalingsperiod");});
test("betalingsplikt -> betalingsplikt", function() {deepEqual( Stem("betalingsplikt"), "betalingsplikt");});
test("betalingssystema -> betalingssystem", function() {deepEqual( Stem("betalingssystema"), "betalingssystem");});
test("betalingstid -> betalingstid", function() {deepEqual( Stem("betalingstid"), "betalingstid");});
test("betalt -> betalt", function() {deepEqual( Stem("betalt"), "betalt");});
test("betalte -> betalt", function() {deepEqual( Stem("betalte"), "betalt");});
test("betegnelse -> betegn", function() {deepEqual( Stem("betegnelse"), "betegn");});
test("betegnelsen -> betegn", function() {deepEqual( Stem("betegnelsen"), "betegn");});
test("betegner -> betegn", function() {deepEqual( Stem("betegner"), "betegn");});
test("betegnes -> betegn", function() {deepEqual( Stem("betegnes"), "betegn");});
test("betegnet -> betegn", function() {deepEqual( Stem("betegnet"), "betegn");});
test("betenkte -> betenkt", function() {deepEqual( Stem("betenkte"), "betenkt");});
test("betingede -> beting", function() {deepEqual( Stem("betingede"), "beting");});
test("betingelse -> beting", function() {deepEqual( Stem("betingelse"), "beting");});
test("betingelsene -> beting", function() {deepEqual( Stem("betingelsene"), "beting");});
test("betingelser -> beting", function() {deepEqual( Stem("betingelser"), "beting");});
test("betinger -> beting", function() {deepEqual( Stem("betinger"), "beting");});
test("betinget -> beting", function() {deepEqual( Stem("betinget"), "beting");});
test("betjene -> betj", function() {deepEqual( Stem("betjene"), "betj");});
test("betjener -> betjen", function() {deepEqual( Stem("betjener"), "betjen");});
test("betjenes -> betj", function() {deepEqual( Stem("betjenes"), "betj");});
test("betjening -> betjening", function() {deepEqual( Stem("betjening"), "betjening");});
test("betjeningen -> betjening", function() {deepEqual( Stem("betjeningen"), "betjening");});
test("betrakte -> betrakt", function() {deepEqual( Stem("betrakte"), "betrakt");});
test("betraktelig -> betrakt", function() {deepEqual( Stem("betraktelig"), "betrakt");});
test("betraktelige -> betrakt", function() {deepEqual( Stem("betraktelige"), "betrakt");});
test("betrakter -> betrakt", function() {deepEqual( Stem("betrakter"), "betrakt");});
test("betraktes -> betrakt", function() {deepEqual( Stem("betraktes"), "betrakt");});
test("betraktning -> betraktning", function() {deepEqual( Stem("betraktning"), "betraktning");});
test("betraktningen -> betraktning", function() {deepEqual( Stem("betraktningen"), "betraktning");});
test("betraktninger -> betraktning", function() {deepEqual( Stem("betraktninger"), "betraktning");});
test("betraktningsmåte -> betraktningsmåt", function() {deepEqual( Stem("betraktningsmåte"), "betraktningsmåt");});
test("betraktningsmåten -> betraktningsmåt", function() {deepEqual( Stem("betraktningsmåten"), "betraktningsmåt");});
test("betre -> betr", function() {deepEqual( Stem("betre"), "betr");});
test("betreffend -> betreffend", function() {deepEqual( Stem("betreffend"), "betreffend");});
test("betrodde -> betrodd", function() {deepEqual( Stem("betrodde"), "betrodd");});
test("betror -> betror", function() {deepEqual( Stem("betror"), "betror");});
test("betryggende -> betrygg", function() {deepEqual( Stem("betryggende"), "betrygg");});
test("bety -> bety", function() {deepEqual( Stem("bety"), "bety");});
test("betydeleg -> betyd", function() {deepEqual( Stem("betydeleg"), "betyd");});
test("betydelig -> betyd", function() {deepEqual( Stem("betydelig"), "betyd");});
test("betydelige -> betyd", function() {deepEqual( Stem("betydelige"), "betyd");});
test("betydning -> betydning", function() {deepEqual( Stem("betydning"), "betydning");});
test("betydningen -> betydning", function() {deepEqual( Stem("betydningen"), "betydning");});
test("betydninger -> betydning", function() {deepEqual( Stem("betydninger"), "betydning");});
test("betyr -> betyr", function() {deepEqual( Stem("betyr"), "betyr");});
test("beundrer -> beundr", function() {deepEqual( Stem("beundrer"), "beundr");});
test("beuthien -> beuthi", function() {deepEqual( Stem("beuthien"), "beuthi");});
test("bevegelse -> beveg", function() {deepEqual( Stem("bevegelse"), "beveg");});
test("bevegelsene -> beveg", function() {deepEqual( Stem("bevegelsene"), "beveg");});
test("beveger -> beveg", function() {deepEqual( Stem("beveger"), "beveg");});
test("bevilge -> bevilg", function() {deepEqual( Stem("bevilge"), "bevilg");});
test("bevilgede -> bevilg", function() {deepEqual( Stem("bevilgede"), "bevilg");});
test("bevis -> bevis", function() {deepEqual( Stem("bevis"), "bevis");});
test("beviset -> bevis", function() {deepEqual( Stem("beviset"), "bevis");});
test("bevisreglar -> bevisregl", function() {deepEqual( Stem("bevisreglar"), "bevisregl");});
test("bevisstløs -> bevisstløs", function() {deepEqual( Stem("bevisstløs"), "bevisstløs");});
test("bevøkollen -> bevøkoll", function() {deepEqual( Stem("bevøkollen"), "bevøkoll");});
test("bezwecken -> bezweck", function() {deepEqual( Stem("bezwecken"), "bezweck");});
test("bhv -> bhv", function() {deepEqual( Stem("bhv"), "bhv");});
test("bhvs -> bhvs", function() {deepEqual( Stem("bhvs"), "bhvs");});
test("bibeholder -> bibehold", function() {deepEqual( Stem("bibeholder"), "bibehold");});
test("bibliotek -> bibliotek", function() {deepEqual( Stem("bibliotek"), "bibliotek");});
test("bidra -> bidr", function() {deepEqual( Stem("bidra"), "bidr");});
test("bidrag -> bidrag", function() {deepEqual( Stem("bidrag"), "bidrag");});
test("bidraget -> bidrag", function() {deepEqual( Stem("bidraget"), "bidrag");});
test("bidrar -> bidr", function() {deepEqual( Stem("bidrar"), "bidr");});
test("bidratt -> bidratt", function() {deepEqual( Stem("bidratt"), "bidratt");});
test("bidro -> bidro", function() {deepEqual( Stem("bidro"), "bidro");});
test("biene -> bien", function() {deepEqual( Stem("biene"), "bien");});
test("bifrost -> bifrost", function() {deepEqual( Stem("bifrost"), "bifrost");});
test("bikkje -> bikkj", function() {deepEqual( Stem("bikkje"), "bikkj");});
test("bikkjer -> bikkj", function() {deepEqual( Stem("bikkjer"), "bikkj");});
test("bil -> bil", function() {deepEqual( Stem("bil"), "bil");});
test("bilde -> bild", function() {deepEqual( Stem("bilde"), "bild");});
test("bildene -> bild", function() {deepEqual( Stem("bildene"), "bild");});
test("bilder -> bild", function() {deepEqual( Stem("bilder"), "bild");});
test("bildet -> bild", function() {deepEqual( Stem("bildet"), "bild");});
test("biled -> biled", function() {deepEqual( Stem("biled"), "biled");});
test("biler -> bil", function() {deepEqual( Stem("biler"), "bil");});
test("biletet -> bilet", function() {deepEqual( Stem("biletet"), "bilet");});
test("bilferjer -> bilferj", function() {deepEqual( Stem("bilferjer"), "bilferj");});
test("bilimport -> bilimport", function() {deepEqual( Stem("bilimport"), "bilimport");});
test("bilindustrien -> bilindustri", function() {deepEqual( Stem("bilindustrien"), "bilindustri");});
test("billedspråk -> billedspråk", function() {deepEqual( Stem("billedspråk"), "billedspråk");});
test("billeg -> bil", function() {deepEqual( Stem("billeg"), "bil");});
test("billettsalg -> billettsalg", function() {deepEqual( Stem("billettsalg"), "billettsalg");});
test("billig -> bil", function() {deepEqual( Stem("billig"), "bil");});
test("billigere -> billiger", function() {deepEqual( Stem("billigere"), "billiger");});
test("billing -> billing", function() {deepEqual( Stem("billing"), "billing");});
test("billings -> billing", function() {deepEqual( Stem("billings"), "billing");});
test("bilskirne -> bilskirn", function() {deepEqual( Stem("bilskirne"), "bilskirn");});
test("biltrafikk -> biltrafikk", function() {deepEqual( Stem("biltrafikk"), "biltrafikk");});
test("biltransport -> biltransport", function() {deepEqual( Stem("biltransport"), "biltransport");});
test("bindande -> bind", function() {deepEqual( Stem("bindande"), "bind");});
test("binde -> bind", function() {deepEqual( Stem("binde"), "bind");});
test("bindende -> bind", function() {deepEqual( Stem("bindende"), "bind");});
test("binder -> bind", function() {deepEqual( Stem("binder"), "bind");});
test("bindes -> bind", function() {deepEqual( Stem("bindes"), "bind");});
test("bindinga -> binding", function() {deepEqual( Stem("bindinga"), "binding");});
test("bindingen -> binding", function() {deepEqual( Stem("bindingen"), "binding");});
test("bindingsliste -> bindingslist", function() {deepEqual( Stem("bindingsliste"), "bindingslist");});
test("bindingslister -> bindingslist", function() {deepEqual( Stem("bindingslister"), "bindingslist");});
test("bindingstid -> bindingstid", function() {deepEqual( Stem("bindingstid"), "bindingstid");});
test("bindingstida -> bindingstid", function() {deepEqual( Stem("bindingstida"), "bindingstid");});
test("bindingstider -> bindingstid", function() {deepEqual( Stem("bindingstider"), "bindingstid");});
test("bingen -> bing", function() {deepEqual( Stem("bingen"), "bing");});
test("biologisk -> biologisk", function() {deepEqual( Stem("biologisk"), "biologisk");});
test("bisk -> bisk", function() {deepEqual( Stem("bisk"), "bisk");});
test("bispevika -> bispevik", function() {deepEqual( Stem("bispevika"), "bispevik");});
test("bisselet -> bissel", function() {deepEqual( Stem("bisselet"), "bissel");});
test("bistand -> bistand", function() {deepEqual( Stem("bistand"), "bistand");});
test("bistert -> bister", function() {deepEqual( Stem("bistert"), "bister");});
test("bistå -> bistå", function() {deepEqual( Stem("bistå"), "bistå");});
test("bit -> bit", function() {deepEqual( Stem("bit"), "bit");});
test("bite -> bit", function() {deepEqual( Stem("bite"), "bit");});
test("bitene -> bit", function() {deepEqual( Stem("bitene"), "bit");});
test("biter -> bit", function() {deepEqual( Stem("biter"), "bit");});
test("bitre -> bitr", function() {deepEqual( Stem("bitre"), "bitr");});
test("bitt -> bitt", function() {deepEqual( Stem("bitt"), "bitt");});
test("bitte -> bitt", function() {deepEqual( Stem("bitte"), "bitt");});
test("bitter -> bitt", function() {deepEqual( Stem("bitter"), "bitt");});
test("bittert -> bitter", function() {deepEqual( Stem("bittert"), "bitter");});
test("bjeff -> bjeff", function() {deepEqual( Stem("bjeff"), "bjeff");});
test("bjeffer -> bjeff", function() {deepEqual( Stem("bjeffer"), "bjeff");});
test("bjelkelag -> bjelkelag", function() {deepEqual( Stem("bjelkelag"), "bjelkelag");});
test("bjelker -> bjelk", function() {deepEqual( Stem("bjelker"), "bjelk");});
test("bjelkeveggene -> bjelkevegg", function() {deepEqual( Stem("bjelkeveggene"), "bjelkevegg");});
test("bjella -> bjell", function() {deepEqual( Stem("bjella"), "bjell");});
test("bjerkeris -> bjerkeris", function() {deepEqual( Stem("bjerkeris"), "bjerkeris");});
test("bjørn -> bjørn", function() {deepEqual( Stem("bjørn"), "bjørn");});
test("bjørnens -> bjørn", function() {deepEqual( Stem("bjørnens"), "bjørn");});
test("bjørvika -> bjørvik", function() {deepEqual( Stem("bjørvika"), "bjørvik");});
test("bjørvikatunnelen -> bjørvikatunnel", function() {deepEqual( Stem("bjørvikatunnelen"), "bjørvikatunnel");});
test("bl -> bl", function() {deepEqual( Stem("bl"), "bl");});
test("bladene -> blad", function() {deepEqual( Stem("bladene"), "blad");});
test("blader -> blad", function() {deepEqual( Stem("blader"), "blad");});
test("blanda -> bland", function() {deepEqual( Stem("blanda"), "bland");});
test("blandast -> bland", function() {deepEqual( Stem("blandast"), "bland");});
test("blande -> bland", function() {deepEqual( Stem("blande"), "bland");});
test("blander -> bland", function() {deepEqual( Stem("blander"), "bland");});
test("blandet -> bland", function() {deepEqual( Stem("blandet"), "bland");});
test("blandingen -> blanding", function() {deepEqual( Stem("blandingen"), "blanding");});
test("blandingsforma -> blandingsform", function() {deepEqual( Stem("blandingsforma"), "blandingsform");});
test("blandingsformer -> blandingsform", function() {deepEqual( Stem("blandingsformer"), "blandingsform");});
test("blandt -> bland", function() {deepEqual( Stem("blandt"), "bland");});
test("blanke -> blank", function() {deepEqual( Stem("blanke"), "blank");});
test("blankettar -> blankett", function() {deepEqual( Stem("blankettar"), "blankett");});
test("blant -> blant", function() {deepEqual( Stem("blant"), "blant");});
test("ble -> ble", function() {deepEqual( Stem("ble"), "ble");});
test("blek -> blek", function() {deepEqual( Stem("blek"), "blek");});
test("bleke -> blek", function() {deepEqual( Stem("bleke"), "blek");});
test("blekksprut -> blekksprut", function() {deepEqual( Stem("blekksprut"), "blekksprut");});
test("blekner -> blekn", function() {deepEqual( Stem("blekner"), "blekn");});
test("bli -> bli", function() {deepEqual( Stem("bli"), "bli");});
test("blikk -> blikk", function() {deepEqual( Stem("blikk"), "blikk");});
test("blikket -> blikk", function() {deepEqual( Stem("blikket"), "blikk");});
test("blind -> blind", function() {deepEqual( Stem("blind"), "blind");});
test("blinde -> blind", function() {deepEqual( Stem("blinde"), "blind");});
test("blink -> blink", function() {deepEqual( Stem("blink"), "blink");});
test("blinker -> blink", function() {deepEqual( Stem("blinker"), "blink");});
test("blir -> blir", function() {deepEqual( Stem("blir"), "blir");});
test("blitt -> blitt", function() {deepEqual( Stem("blitt"), "blitt");});
test("blod -> blod", function() {deepEqual( Stem("blod"), "blod");});
test("blodbadet -> blodbad", function() {deepEqual( Stem("blodbadet"), "blodbad");});
test("blodet -> blod", function() {deepEqual( Stem("blodet"), "blod");});
test("blodfeide -> blodfeid", function() {deepEqual( Stem("blodfeide"), "blodfeid");});
test("blodig -> blod", function() {deepEqual( Stem("blodig"), "blod");});
test("blodige -> blod", function() {deepEqual( Stem("blodige"), "blod");});
test("blodighov -> blodighov", function() {deepEqual( Stem("blodighov"), "blodighov");});
test("blodskutte -> blodskutt", function() {deepEqual( Stem("blodskutte"), "blodskutt");});
test("blodsprengte -> blodsprengt", function() {deepEqual( Stem("blodsprengte"), "blodsprengt");});
test("blokka -> blokk", function() {deepEqual( Stem("blokka"), "blokk");});
test("blokker -> blokk", function() {deepEqual( Stem("blokker"), "blokk");});
test("blokkstein -> blokkstein", function() {deepEqual( Stem("blokkstein"), "blokkstein");});
test("blokktog -> blokktog", function() {deepEqual( Stem("blokktog"), "blokktog");});
test("blokktogavganger -> blokktogavgang", function() {deepEqual( Stem("blokktogavganger"), "blokktogavgang");});
test("blokktogforbindelse -> blokktogforbind", function() {deepEqual( Stem("blokktogforbindelse"), "blokktogforbind");});
test("blomst -> blomst", function() {deepEqual( Stem("blomst"), "blomst");});
test("blomster -> blomst", function() {deepEqual( Stem("blomster"), "blomst");});
test("blomsterkranser -> blomsterkrans", function() {deepEqual( Stem("blomsterkranser"), "blomsterkrans");});
test("blond -> blond", function() {deepEqual( Stem("blond"), "blond");});
test("blunker -> blunk", function() {deepEqual( Stem("blunker"), "blunk");});
test("blå -> blå", function() {deepEqual( Stem("blå"), "blå");});
test("blåfrosne -> blåfrosn", function() {deepEqual( Stem("blåfrosne"), "blåfrosn");});
test("blåklokker -> blåklokk", function() {deepEqual( Stem("blåklokker"), "blåklokk");});
test("blåmalte -> blåmalt", function() {deepEqual( Stem("blåmalte"), "blåmalt");});
test("blåner -> blån", function() {deepEqual( Stem("blåner"), "blån");});
test("blåse -> blås", function() {deepEqual( Stem("blåse"), "blås");});
test("blåsebelgen -> blåsebelg", function() {deepEqual( Stem("blåsebelgen"), "blåsebelg");});
test("blåser -> blås", function() {deepEqual( Stem("blåser"), "blås");});
test("blåsingen -> blåsing", function() {deepEqual( Stem("blåsingen"), "blåsing");});
test("blåst -> blåst", function() {deepEqual( Stem("blåst"), "blåst");});
test("blåsvart -> blåsvart", function() {deepEqual( Stem("blåsvart"), "blåsvart");});
test("blør -> blør", function() {deepEqual( Stem("blør"), "blør");});
test("bløt -> bløt", function() {deepEqual( Stem("bløt"), "bløt");});
test("bnp -> bnp", function() {deepEqual( Stem("bnp"), "bnp");});
test("bo -> bo", function() {deepEqual( Stem("bo"), "bo");});
test("board -> board", function() {deepEqual( Stem("board"), "board");});
test("bob -> bob", function() {deepEqual( Stem("bob"), "bob");});
test("bobler -> bobl", function() {deepEqual( Stem("bobler"), "bobl");});
test("bod -> bod", function() {deepEqual( Stem("bod"), "bod");});
test("bodd -> bodd", function() {deepEqual( Stem("bodd"), "bodd");});
test("bodet -> bod", function() {deepEqual( Stem("bodet"), "bod");});
test("bodrunden -> bodrund", function() {deepEqual( Stem("bodrunden"), "bodrund");});
test("bodø -> bodø", function() {deepEqual( Stem("bodø"), "bodø");});
test("boende -> boend", function() {deepEqual( Stem("boende"), "boend");});
test("boet -> boet", function() {deepEqual( Stem("boet"), "boet");});
test("boets -> boet", function() {deepEqual( Stem("boets"), "boet");});
test("boforhold -> boforhold", function() {deepEqual( Stem("boforhold"), "boforhold");});
test("boforholdsundersøkelsen -> boforholdsundersøk", function() {deepEqual( Stem("boforholdsundersøkelsen"), "boforholdsundersøk");});
test("boger -> bog", function() {deepEqual( Stem("boger"), "bog");});
test("boh -> boh", function() {deepEqual( Stem("boh"), "boh");});
test("bointeresser -> bointeress", function() {deepEqual( Stem("bointeresser"), "bointeress");});
test("boka -> bok", function() {deepEqual( Stem("boka"), "bok");});
test("bokn -> bokn", function() {deepEqual( Stem("bokn"), "bokn");});
test("bokreserver -> bokreserv", function() {deepEqual( Stem("bokreserver"), "bokreserv");});
test("boks -> boks", function() {deepEqual( Stem("boks"), "boks");});
test("bokstav -> bokstav", function() {deepEqual( Stem("bokstav"), "bokstav");});
test("bokstaver -> bokstav", function() {deepEqual( Stem("bokstaver"), "bokstav");});
test("bokstavlig -> bokstav", function() {deepEqual( Stem("bokstavlig"), "bokstav");});
test("bokstavtro -> bokstavtro", function() {deepEqual( Stem("bokstavtro"), "bokstavtro");});
test("bol -> bol", function() {deepEqual( Stem("bol"), "bol");});
test("bolig -> bol", function() {deepEqual( Stem("bolig"), "bol");});
test("boligarealer -> boligareal", function() {deepEqual( Stem("boligarealer"), "boligareal");});
test("boligbebyggelse -> boligbebygg", function() {deepEqual( Stem("boligbebyggelse"), "boligbebygg");});
test("boligbygg -> boligbygg", function() {deepEqual( Stem("boligbygg"), "boligbygg");});
test("boligbyggelag -> boligbyggelag", function() {deepEqual( Stem("boligbyggelag"), "boligbyggelag");});
test("boligbyggelaget -> boligbyggelag", function() {deepEqual( Stem("boligbyggelaget"), "boligbyggelag");});
test("boligbyggelags -> boligbyggelag", function() {deepEqual( Stem("boligbyggelags"), "boligbyggelag");});
test("boligbyggelagsloven -> boligbyggelag", function() {deepEqual( Stem("boligbyggelagsloven"), "boligbyggelag");});
test("boligdekning -> boligdekning", function() {deepEqual( Stem("boligdekning"), "boligdekning");});
test("boligen -> bol", function() {deepEqual( Stem("boligen"), "bol");});
test("boligene -> bol", function() {deepEqual( Stem("boligene"), "bol");});
test("boliger -> bol", function() {deepEqual( Stem("boliger"), "bol");});
test("boligetablering -> boligetablering", function() {deepEqual( Stem("boligetablering"), "boligetablering");});
test("boligfeltet -> boligfelt", function() {deepEqual( Stem("boligfeltet"), "boligfelt");});
test("boligfordeling -> boligfordeling", function() {deepEqual( Stem("boligfordeling"), "boligfordeling");});
test("boligforetak -> boligforetak", function() {deepEqual( Stem("boligforetak"), "boligforetak");});
test("boligfællesskaber -> boligfællesskab", function() {deepEqual( Stem("boligfællesskaber"), "boligfællesskab");});
test("boligkonsentrasjoner -> boligkonsentrasjon", function() {deepEqual( Stem("boligkonsentrasjoner"), "boligkonsentrasjon");});
test("boliglov -> bolig", function() {deepEqual( Stem("boliglov"), "bolig");});
test("boliglover -> bolig", function() {deepEqual( Stem("boliglover"), "bolig");});
test("boligmarkedet -> boligmarked", function() {deepEqual( Stem("boligmarkedet"), "boligmarked");});
test("boligmassen -> boligmass", function() {deepEqual( Stem("boligmassen"), "boligmass");});
test("boligområdene -> boligområd", function() {deepEqual( Stem("boligområdene"), "boligområd");});
test("boligområder -> boligområd", function() {deepEqual( Stem("boligområder"), "boligområd");});
test("boligområdet -> boligområd", function() {deepEqual( Stem("boligområdet"), "boligområd");});
test("boligpolitikk -> boligpolitikk", function() {deepEqual( Stem("boligpolitikk"), "boligpolitikk");});
test("boligpolitikken -> boligpolitikk", function() {deepEqual( Stem("boligpolitikken"), "boligpolitikk");});
test("boligpolitiske -> boligpolitisk", function() {deepEqual( Stem("boligpolitiske"), "boligpolitisk");});
test("boligsameier -> boligsamei", function() {deepEqual( Stem("boligsameier"), "boligsamei");});
test("boligsamvirket -> boligsamvirk", function() {deepEqual( Stem("boligsamvirket"), "boligsamvirk");});
test("boligsektoren -> boligsektor", function() {deepEqual( Stem("boligsektoren"), "boligsektor");});
test("boligselskabernes -> boligselskabern", function() {deepEqual( Stem("boligselskabernes"), "boligselskabern");});
test("boligselskap -> boligselskap", function() {deepEqual( Stem("boligselskap"), "boligselskap");});
test("boligselskaper -> boligselskap", function() {deepEqual( Stem("boligselskaper"), "boligselskap");});
test("boligsjef -> boligsjef", function() {deepEqual( Stem("boligsjef"), "boligsjef");});
test("bollingmo -> bollingmo", function() {deepEqual( Stem("bollingmo"), "bollingmo");});
test("bolt -> bolt", function() {deepEqual( Stem("bolt"), "bolt");});
test("bolten -> bolt", function() {deepEqual( Stem("bolten"), "bolt");});
test("boltet -> bolt", function() {deepEqual( Stem("boltet"), "bolt");});
test("boltorns -> boltorn", function() {deepEqual( Stem("boltorns"), "boltorn");});
test("bolverk -> bolverk", function() {deepEqual( Stem("bolverk"), "bolverk");});
test("bom -> bom", function() {deepEqual( Stem("bom"), "bom");});
test("bombinga -> bombing", function() {deepEqual( Stem("bombinga"), "bombing");});
test("bomiljø -> bomiljø", function() {deepEqual( Stem("bomiljø"), "bomiljø");});
test("bomiljøer -> bomiljø", function() {deepEqual( Stem("bomiljøer"), "bomiljø");});
test("bomiljøet -> bomiljø", function() {deepEqual( Stem("bomiljøet"), "bomiljø");});
test("bommestad -> bommestad", function() {deepEqual( Stem("bommestad"), "bommestad");});
test("bompenger -> bompeng", function() {deepEqual( Stem("bompenger"), "bompeng");});
test("bondekone -> bondekon", function() {deepEqual( Stem("bondekone"), "bondekon");});
test("bonden -> bond", function() {deepEqual( Stem("bonden"), "bond");});
test("bondens -> bond", function() {deepEqual( Stem("bondens"), "bond");});
test("boområder -> boområd", function() {deepEqual( Stem("boområder"), "boområd");});
test("boområdet -> boområd", function() {deepEqual( Stem("boområdet"), "boområd");});
test("bopel -> bopel", function() {deepEqual( Stem("bopel"), "bopel");});
test("bor -> bor", function() {deepEqual( Stem("bor"), "bor");});
test("bord -> bord", function() {deepEqual( Stem("bord"), "bord");});
test("bordene -> bord", function() {deepEqual( Stem("bordene"), "bord");});
test("bordet -> bord", function() {deepEqual( Stem("bordet"), "bord");});
test("bordkant -> bordkant", function() {deepEqual( Stem("bordkant"), "bordkant");});
test("bordplaten -> bordplat", function() {deepEqual( Stem("bordplaten"), "bordplat");});
test("bords -> bord", function() {deepEqual( Stem("bords"), "bord");});
test("bore -> bor", function() {deepEqual( Stem("bore"), "bor");});
test("borealis -> borealis", function() {deepEqual( Stem("borealis"), "borealis");});
test("borehullet -> borehull", function() {deepEqual( Stem("borehullet"), "borehull");});
test("boret -> bor", function() {deepEqual( Stem("boret"), "bor");});
test("borettshaverne -> borettshavern", function() {deepEqual( Stem("borettshaverne"), "borettshavern");});
test("borettslag -> borettslag", function() {deepEqual( Stem("borettslag"), "borettslag");});
test("borettslagene -> borettslag", function() {deepEqual( Stem("borettslagene"), "borettslag");});
test("borettslagenes -> borettslag", function() {deepEqual( Stem("borettslagenes"), "borettslag");});
test("borettslaget -> borettslag", function() {deepEqual( Stem("borettslaget"), "borettslag");});
test("borettslagsandel -> borettslagsandel", function() {deepEqual( Stem("borettslagsandel"), "borettslagsandel");});
test("borettslagsandelen -> borettslagsandel", function() {deepEqual( Stem("borettslagsandelen"), "borettslagsandel");});
test("borettslagsloven -> borettslag", function() {deepEqual( Stem("borettslagsloven"), "borettslag");});
test("borettsloven -> borett", function() {deepEqual( Stem("borettsloven"), "borett");});
test("borettslovene -> borett", function() {deepEqual( Stem("borettslovene"), "borett");});
test("borettslovkomiteen -> borettslovkomite", function() {deepEqual( Stem("borettslovkomiteen"), "borettslovkomite");});
test("borettslovutvalget -> borettslovutvalg", function() {deepEqual( Stem("borettslovutvalget"), "borettslovutvalg");});
test("borettsregister -> borettsregist", function() {deepEqual( Stem("borettsregister"), "borettsregist");});
test("borettsregisteret -> borettsregister", function() {deepEqual( Stem("borettsregisteret"), "borettsregister");});
test("borg -> borg", function() {deepEqual( Stem("borg"), "borg");});
test("borge -> borg", function() {deepEqual( Stem("borge"), "borg");});
test("borgen -> borg", function() {deepEqual( Stem("borgen"), "borg");});
test("borgere -> borger", function() {deepEqual( Stem("borgere"), "borger");});
test("borgerne -> borgern", function() {deepEqual( Stem("borgerne"), "borgern");});
test("borgestad -> borgestad", function() {deepEqual( Stem("borgestad"), "borgestad");});
test("borgmuren -> borgmur", function() {deepEqual( Stem("borgmuren"), "borgmur");});
test("borgporten -> borgport", function() {deepEqual( Stem("borgporten"), "borgport");});
test("borgs -> borg", function() {deepEqual( Stem("borgs"), "borg");});
test("born -> born", function() {deepEqual( Stem("born"), "born");});
test("borna -> born", function() {deepEqual( Stem("borna"), "born");});
test("borre -> borr", function() {deepEqual( Stem("borre"), "borr");});
test("borregaard -> borregaard", function() {deepEqual( Stem("borregaard"), "borregaard");});
test("bort -> bort", function() {deepEqual( Stem("bort"), "bort");});
test("borte -> bort", function() {deepEqual( Stem("borte"), "bort");});
test("bortenfor -> bortenfor", function() {deepEqual( Stem("bortenfor"), "bortenfor");});
test("bortfall -> bortfall", function() {deepEqual( Stem("bortfall"), "bortfall");});
test("bortfaller -> bortfall", function() {deepEqual( Stem("bortfaller"), "bortfall");});
test("bortfallet -> bortfall", function() {deepEqual( Stem("bortfallet"), "bortfall");});
test("bortforklare -> bortforklar", function() {deepEqual( Stem("bortforklare"), "bortforklar");});
test("borti -> borti", function() {deepEqual( Stem("borti"), "borti");});
test("bortkomne -> bortkomn", function() {deepEqual( Stem("bortkomne"), "bortkomn");});
test("bortleige -> bortl", function() {deepEqual( Stem("bortleige"), "bortl");});
test("bortlån -> bortlån", function() {deepEqual( Stem("bortlån"), "bortlån");});
test("bortsett -> bortsett", function() {deepEqual( Stem("bortsett"), "bortsett");});
test("borttaking -> borttaking", function() {deepEqual( Stem("borttaking"), "borttaking");});
test("bosetter -> bosett", function() {deepEqual( Stem("bosetter"), "bosett");});
test("bosetting -> bosetting", function() {deepEqual( Stem("bosetting"), "bosetting");});
test("bosettingen -> bosetting", function() {deepEqual( Stem("bosettingen"), "bosetting");});
test("bosettingsmønsteret -> bosettingsmønster", function() {deepEqual( Stem("bosettingsmønsteret"), "bosettingsmønster");});
test("bostadrattsforeningar -> bostadrattsforening", function() {deepEqual( Stem("bostadrattsforeningar"), "bostadrattsforening");});
test("bostadrattsforeninger -> bostadrattsforening", function() {deepEqual( Stem("bostadrattsforeninger"), "bostadrattsforening");});
test("bostadsforeningars -> bostadsforeningar", function() {deepEqual( Stem("bostadsforeningars"), "bostadsforeningar");});
test("bostadsforetag -> bostadsforetag", function() {deepEqual( Stem("bostadsforetag"), "bostadsforetag");});
test("bostadsforetags -> bostadsforetag", function() {deepEqual( Stem("bostadsforetags"), "bostadsforetag");});
test("bostadsratt -> bostadsratt", function() {deepEqual( Stem("bostadsratt"), "bostadsratt");});
test("bostadsratter -> bostadsratt", function() {deepEqual( Stem("bostadsratter"), "bostadsratt");});
test("bostadsrattforeningar -> bostadsrattforening", function() {deepEqual( Stem("bostadsrattforeningar"), "bostadsrattforening");});
test("bostadsratthavare -> bostadsratthavar", function() {deepEqual( Stem("bostadsratthavare"), "bostadsratthavar");});
test("bostadsrattsforening -> bostadsrattsforening", function() {deepEqual( Stem("bostadsrattsforening"), "bostadsrattsforening");});
test("bostadsrattsforeningar -> bostadsrattsforening", function() {deepEqual( Stem("bostadsrattsforeningar"), "bostadsrattsforening");});
test("bostadsrattsforeningarna -> bostadsrattsforeningarn", function() {deepEqual( Stem("bostadsrattsforeningarna"), "bostadsrattsforeningarn");});
test("bostadsrattsforeningen -> bostadsrattsforening", function() {deepEqual( Stem("bostadsrattsforeningen"), "bostadsrattsforening");});
test("bostadsrattsforeninger -> bostadsrattsforening", function() {deepEqual( Stem("bostadsrattsforeninger"), "bostadsrattsforening");});
test("bostadsrattshavarna -> bostadsrattshavarn", function() {deepEqual( Stem("bostadsrattshavarna"), "bostadsrattshavarn");});
test("bostadsrattslagen -> bostadsrattslag", function() {deepEqual( Stem("bostadsrattslagen"), "bostadsrattslag");});
test("bostadsrattsregister -> bostadsrattsregist", function() {deepEqual( Stem("bostadsrattsregister"), "bostadsrattsregist");});
test("bostadsrattsutredningen -> bostadsrattsutredning", function() {deepEqual( Stem("bostadsrattsutredningen"), "bostadsrattsutredning");});
test("bostadsrettsforening -> bostadsrettsforening", function() {deepEqual( Stem("bostadsrettsforening"), "bostadsrettsforening");});
test("bot -> bot", function() {deepEqual( Stem("bot"), "bot");});
test("boten -> bot", function() {deepEqual( Stem("boten"), "bot");});
test("botnen -> botn", function() {deepEqual( Stem("botnen"), "botn");});
test("botrygghet -> botrygg", function() {deepEqual( Stem("botrygghet"), "botrygg");});
test("bottom -> bottom", function() {deepEqual( Stem("bottom"), "bottom");});
test("bra -> bra", function() {deepEqual( Stem("bra"), "bra");});
test("brage -> brag", function() {deepEqual( Stem("brage"), "brag");});
test("bragernesløpet -> bragernesløp", function() {deepEqual( Stem("bragernesløpet"), "bragernesløp");});
test("bragernesutløpet -> bragernesutløp", function() {deepEqual( Stem("bragernesutløpet"), "bragernesutløp");});
test("bragt -> bragt", function() {deepEqual( Stem("bragt"), "bragt");});
test("brak -> brak", function() {deepEqual( Stem("brak"), "brak");});
test("brakerøya -> brakerøy", function() {deepEqual( Stem("brakerøya"), "brakerøy");});
test("brakkvann -> brakkvann", function() {deepEqual( Stem("brakkvann"), "brakkvann");});
test("brann -> brann", function() {deepEqual( Stem("brann"), "brann");});
test("brannsår -> brannsår", function() {deepEqual( Stem("brannsår"), "brannsår");});
test("branntomt -> branntomt", function() {deepEqual( Stem("branntomt"), "branntomt");});
test("bransjenemnder -> bransjenemnd", function() {deepEqual( Stem("bransjenemnder"), "bransjenemnd");});
test("bransjeorganisasjoner -> bransjeorganisasjon", function() {deepEqual( Stem("bransjeorganisasjoner"), "bransjeorganisasjon");});
test("bransjer -> bransj", function() {deepEqual( Stem("bransjer"), "bransj");});
test("bratsbergbanen -> bratsbergban", function() {deepEqual( Stem("bratsbergbanen"), "bratsbergban");});
test("bratte -> bratt", function() {deepEqual( Stem("bratte"), "bratt");});
test("brattegard -> brattegard", function() {deepEqual( Stem("brattegard"), "brattegard");});
test("brattstrom -> brattstrom", function() {deepEqual( Stem("brattstrom"), "brattstrom");});
test("bred -> bred", function() {deepEqual( Stem("bred"), "bred");});
test("bredbent -> bredbent", function() {deepEqual( Stem("bredbent"), "bredbent");});
test("bredde -> bredd", function() {deepEqual( Stem("bredde"), "bredd");});
test("bredden -> bredd", function() {deepEqual( Stem("bredden"), "bredd");});
test("brede -> bred", function() {deepEqual( Stem("brede"), "bred");});
test("bredere -> breder", function() {deepEqual( Stem("bredere"), "breder");});
test("bredt -> bredt", function() {deepEqual( Stem("bredt"), "bredt");});
test("brei -> brei", function() {deepEqual( Stem("brei"), "brei");});
test("breidablikk -> breidablikk", function() {deepEqual( Stem("breidablikk"), "breidablikk");});
test("breidd -> breidd", function() {deepEqual( Stem("breidd"), "breidd");});
test("breidda -> breidd", function() {deepEqual( Stem("breidda"), "breidd");});
test("breie -> breie", function() {deepEqual( Stem("breie"), "breie");});
test("breitt -> breitt", function() {deepEqual( Stem("breitt"), "breitt");});
test("breker -> brek", function() {deepEqual( Stem("breker"), "brek");});
test("brekke -> brekk", function() {deepEqual( Stem("brekke"), "brekk");});
test("bremerhaven -> bremerhav", function() {deepEqual( Stem("bremerhaven"), "bremerhav");});
test("brenn -> brenn", function() {deepEqual( Stem("brenn"), "brenn");});
test("brenne -> brenn", function() {deepEqual( Stem("brenne"), "brenn");});
test("brennende -> brenn", function() {deepEqual( Stem("brennende"), "brenn");});
test("brenner -> brenn", function() {deepEqual( Stem("brenner"), "brenn");});
test("brent -> brent", function() {deepEqual( Stem("brent"), "brent");});
test("brer -> brer", function() {deepEqual( Stem("brer"), "brer");});
test("brett -> brett", function() {deepEqual( Stem("brett"), "brett");});
test("bretter -> brett", function() {deepEqual( Stem("bretter"), "brett");});
test("brev -> brev", function() {deepEqual( Stem("brev"), "brev");});
test("breva -> brev", function() {deepEqual( Stem("breva"), "brev");});
test("brevik -> brevik", function() {deepEqual( Stem("brevik"), "brevik");});
test("breviksterminalen -> breviksterminal", function() {deepEqual( Stem("breviksterminalen"), "breviksterminal");});
test("brevikstrømmen -> brevikstrømm", function() {deepEqual( Stem("brevikstrømmen"), "brevikstrømm");});
test("brevikterminalen -> brevikterminal", function() {deepEqual( Stem("brevikterminalen"), "brevikterminal");});
test("brime -> brim", function() {deepEqual( Stem("brime"), "brim");});
test("bring -> bring", function() {deepEqual( Stem("bring"), "bring");});
test("bringe -> bring", function() {deepEqual( Stem("bringe"), "bring");});
test("bringer -> bring", function() {deepEqual( Stem("bringer"), "bring");});
test("bringes -> bring", function() {deepEqual( Stem("bringes"), "bring");});
test("bringsværd -> bringsværd", function() {deepEqual( Stem("bringsværd"), "bringsværd");});
test("brisinga -> brising", function() {deepEqual( Stem("brisinga"), "brising");});
test("briste -> brist", function() {deepEqual( Stem("briste"), "brist");});
test("brister -> brist", function() {deepEqual( Stem("brister"), "brist");});
test("britiske -> britisk", function() {deepEqual( Stem("britiske"), "britisk");});
test("brl -> brl", function() {deepEqual( Stem("brl"), "brl");});
test("bro -> bro", function() {deepEqual( Stem("bro"), "bro");});
test("broen -> broen", function() {deepEqual( Stem("broen"), "broen");});
test("brokk -> brokk", function() {deepEqual( Stem("brokk"), "brokk");});
test("brokks -> brokk", function() {deepEqual( Stem("brokks"), "brokk");});
test("bror -> bror", function() {deepEqual( Stem("bror"), "bror");});
test("broren -> bror", function() {deepEqual( Stem("broren"), "bror");});
test("brorparten -> brorpart", function() {deepEqual( Stem("brorparten"), "brorpart");});
test("brors -> bror", function() {deepEqual( Stem("brors"), "bror");});
test("brot -> brot", function() {deepEqual( Stem("brot"), "brot");});
test("broten -> brot", function() {deepEqual( Stem("broten"), "brot");});
test("bru -> bru", function() {deepEqual( Stem("bru"), "bru");});
test("brua -> brua", function() {deepEqual( Stem("brua"), "brua");});
test("brualternativet -> brualternativ", function() {deepEqual( Stem("brualternativet"), "brualternativ");});
test("brud -> brud", function() {deepEqual( Stem("brud"), "brud");});
test("brudd -> brudd", function() {deepEqual( Stem("brudd"), "brudd");});
test("brudeferd -> brudeferd", function() {deepEqual( Stem("brudeferd"), "brudeferd");});
test("brudegave -> brudegav", function() {deepEqual( Stem("brudegave"), "brudegav");});
test("brudelin -> brudelin", function() {deepEqual( Stem("brudelin"), "brudelin");});
test("brudelinet -> brudelin", function() {deepEqual( Stem("brudelinet"), "brudelin");});
test("bruden -> brud", function() {deepEqual( Stem("bruden"), "brud");});
test("brudens -> brud", function() {deepEqual( Stem("brudens"), "brud");});
test("brudeparet -> brudepar", function() {deepEqual( Stem("brudeparet"), "brudepar");});
test("brudepike -> brudepik", function() {deepEqual( Stem("brudepike"), "brudepik");});
test("brudepiken -> brudepik", function() {deepEqual( Stem("brudepiken"), "brudepik");});
test("bruer -> bruer", function() {deepEqual( Stem("bruer"), "bruer");});
test("brugsforeninger -> brugsforening", function() {deepEqual( Stem("brugsforeninger"), "brugsforening");});
test("bruk -> bruk", function() {deepEqual( Stem("bruk"), "bruk");});
test("brukar -> bruk", function() {deepEqual( Stem("brukar"), "bruk");});
test("brukarane -> brukar", function() {deepEqual( Stem("brukarane"), "brukar");});
test("brukarar -> brukar", function() {deepEqual( Stem("brukarar"), "brukar");});
test("brukareige -> brukar", function() {deepEqual( Stem("brukareige"), "brukar");});
test("brukareigeprinsipp -> brukareigeprinsipp", function() {deepEqual( Stem("brukareigeprinsipp"), "brukareigeprinsipp");});
test("brukareigeprinsippet -> brukareigeprinsipp", function() {deepEqual( Stem("brukareigeprinsippet"), "brukareigeprinsipp");});
test("brukaren -> brukar", function() {deepEqual( Stem("brukaren"), "brukar");});
test("brukarens -> brukar", function() {deepEqual( Stem("brukarens"), "brukar");});
test("brukarhusstanden -> brukarhusstand", function() {deepEqual( Stem("brukarhusstanden"), "brukarhusstand");});
test("brukast -> bruk", function() {deepEqual( Stem("brukast"), "bruk");});
test("brukbar -> brukb", function() {deepEqual( Stem("brukbar"), "brukb");});
test("brukbart -> brukbart", function() {deepEqual( Stem("brukbart"), "brukbart");});
test("bruke -> bruk", function() {deepEqual( Stem("bruke"), "bruk");});
test("bruken -> bruk", function() {deepEqual( Stem("bruken"), "bruk");});
test("bruker -> bruk", function() {deepEqual( Stem("bruker"), "bruk");});
test("brukeravgiftene -> brukeravgift", function() {deepEqual( Stem("brukeravgiftene"), "brukeravgift");});
test("brukere -> bruker", function() {deepEqual( Stem("brukere"), "bruker");});
test("brukeren -> bruker", function() {deepEqual( Stem("brukeren"), "bruker");});
test("brukergrupper -> brukergrupp", function() {deepEqual( Stem("brukergrupper"), "brukergrupp");});
test("brukerinteressene -> brukerinteress", function() {deepEqual( Stem("brukerinteressene"), "brukerinteress");});
test("brukerne -> brukern", function() {deepEqual( Stem("brukerne"), "brukern");});
test("brukerorganisasjonene -> brukerorganisasjon", function() {deepEqual( Stem("brukerorganisasjonene"), "brukerorganisasjon");});
test("brukerrepresentanter -> brukerrepresentant", function() {deepEqual( Stem("brukerrepresentanter"), "brukerrepresentant");});
test("brukes -> bruk", function() {deepEqual( Stem("brukes"), "bruk");});
test("brukseining -> brukseining", function() {deepEqual( Stem("brukseining"), "brukseining");});
test("bruksnummer -> bruksnumm", function() {deepEqual( Stem("bruksnummer"), "bruksnumm");});
test("bruksoverlating -> bruksoverlating", function() {deepEqual( Stem("bruksoverlating"), "bruksoverlating");});
test("bruksoverlatinga -> bruksoverlating", function() {deepEqual( Stem("bruksoverlatinga"), "bruksoverlating");});
test("bruksovertaking -> bruksovertaking", function() {deepEqual( Stem("bruksovertaking"), "bruksovertaking");});
test("bruksregulering -> bruksregulering", function() {deepEqual( Stem("bruksregulering"), "bruksregulering");});
test("bruksrett -> bruksrett", function() {deepEqual( Stem("bruksrett"), "bruksrett");});
test("bruksrettane -> bruksrett", function() {deepEqual( Stem("bruksrettane"), "bruksrett");});
test("bruksrettar -> bruksrett", function() {deepEqual( Stem("bruksrettar"), "bruksrett");});
test("bruksretten -> bruksrett", function() {deepEqual( Stem("bruksretten"), "bruksrett");});
test("bruksrettsforhold -> bruksrettsforhold", function() {deepEqual( Stem("bruksrettsforhold"), "bruksrettsforhold");});
test("bruksrettsforholdet -> bruksrettsforhold", function() {deepEqual( Stem("bruksrettsforholdet"), "bruksrettsforhold");});
test("brukt -> brukt", function() {deepEqual( Stem("brukt"), "brukt");});
test("brukte -> brukt", function() {deepEqual( Stem("brukte"), "brukt");});
test("brummer -> brumm", function() {deepEqual( Stem("brummer"), "brumm");});
test("brundtland -> brundtland", function() {deepEqual( Stem("brundtland"), "brundtland");});
test("brune -> brun", function() {deepEqual( Stem("brune"), "brun");});
test("brunrøde -> brunrød", function() {deepEqual( Stem("brunrøde"), "brunrød");});
test("brunst -> brunst", function() {deepEqual( Stem("brunst"), "brunst");});
test("brutto -> brutto", function() {deepEqual( Stem("brutto"), "brutto");});
test("bruttobeskattes -> bruttobeskatt", function() {deepEqual( Stem("bruttobeskattes"), "bruttobeskatt");});
test("bruttoformue -> bruttoformu", function() {deepEqual( Stem("bruttoformue"), "bruttoformu");});
test("bry -> bry", function() {deepEqual( Stem("bry"), "bry");});
test("brydd -> brydd", function() {deepEqual( Stem("brydd"), "brydd");});
test("bryet -> bryet", function() {deepEqual( Stem("bryet"), "bryet");});
test("brygge -> brygg", function() {deepEqual( Stem("brygge"), "brygg");});
test("bryggekar -> bryggek", function() {deepEqual( Stem("bryggekar"), "bryggek");});
test("bryggekaret -> bryggekar", function() {deepEqual( Stem("bryggekaret"), "bryggekar");});
test("brygger -> brygg", function() {deepEqual( Stem("brygger"), "brygg");});
test("brygget -> brygg", function() {deepEqual( Stem("brygget"), "brygg");});
test("bryllups -> bryllup", function() {deepEqual( Stem("bryllups"), "bryllup");});
test("bryllupsgjest -> bryllupsgjest", function() {deepEqual( Stem("bryllupsgjest"), "bryllupsgjest");});
test("bryllupsgjestene -> bryllupsgjest", function() {deepEqual( Stem("bryllupsgjestene"), "bryllupsgjest");});
test("bryllupsreise -> bryllupsreis", function() {deepEqual( Stem("bryllupsreise"), "bryllupsreis");});
test("bryn -> bryn", function() {deepEqual( Stem("bryn"), "bryn");});
test("bryne -> bryn", function() {deepEqual( Stem("bryne"), "bryn");});
test("brynene -> bryn", function() {deepEqual( Stem("brynene"), "bryn");});
test("brynestein -> brynestein", function() {deepEqual( Stem("brynestein"), "brynestein");});
test("brynesten -> brynest", function() {deepEqual( Stem("brynesten"), "brynest");});
test("brynestenen -> brynesten", function() {deepEqual( Stem("brynestenen"), "brynesten");});
test("brynet -> bryn", function() {deepEqual( Stem("brynet"), "bryn");});
test("brynje -> brynj", function() {deepEqual( Stem("brynje"), "brynj");});
test("brynjekledde -> brynjekledd", function() {deepEqual( Stem("brynjekledde"), "brynjekledd");});
test("brynjer -> brynj", function() {deepEqual( Stem("brynjer"), "brynj");});
test("brynjulv -> brynjulv", function() {deepEqual( Stem("brynjulv"), "brynjulv");});
test("bryr -> bryr", function() {deepEqual( Stem("bryr"), "bryr");});
test("bryst -> bryst", function() {deepEqual( Stem("bryst"), "bryst");});
test("brystene -> bryst", function() {deepEqual( Stem("brystene"), "bryst");});
test("bryster -> bryst", function() {deepEqual( Stem("bryster"), "bryst");});
test("brystet -> bryst", function() {deepEqual( Stem("brystet"), "bryst");});
test("bryte -> bryt", function() {deepEqual( Stem("bryte"), "bryt");});
test("brytekamp -> brytekamp", function() {deepEqual( Stem("brytekamp"), "brytekamp");});
test("brytekampen -> brytekamp", function() {deepEqual( Stem("brytekampen"), "brytekamp");});
test("bryter -> bryt", function() {deepEqual( Stem("bryter"), "bryt");});
test("brytes -> bryt", function() {deepEqual( Stem("brytes"), "bryt");});
test("brå -> brå", function() {deepEqual( Stem("brå"), "brå");});
test("bråk -> bråk", function() {deepEqual( Stem("bråk"), "bråk");});
test("bråker -> bråk", function() {deepEqual( Stem("bråker"), "bråk");});
test("bråket -> bråk", function() {deepEqual( Stem("bråket"), "bråk");});
test("bråsinte -> bråsint", function() {deepEqual( Stem("bråsinte"), "bråsint");});
test("bråthen -> bråth", function() {deepEqual( Stem("bråthen"), "bråth");});
test("brått -> brått", function() {deepEqual( Stem("brått"), "brått");});
test("bråvender -> bråvend", function() {deepEqual( Stem("bråvender"), "bråvend");});
test("bråvåkner -> bråvåkn", function() {deepEqual( Stem("bråvåkner"), "bråvåkn");});
test("brød -> brød", function() {deepEqual( Stem("brød"), "brød");});
test("brødre -> brødr", function() {deepEqual( Stem("brødre"), "brødr");});
test("brødrene -> brødr", function() {deepEqual( Stem("brødrene"), "brødr");});
test("brøkdel -> brøkdel", function() {deepEqual( Stem("brøkdel"), "brøkdel");});
test("brøken -> brøk", function() {deepEqual( Stem("brøken"), "brøk");});
test("brøle -> brøl", function() {deepEqual( Stem("brøle"), "brøl");});
test("brøler -> brøl", function() {deepEqual( Stem("brøler"), "brøl");});
test("brønn -> brønn", function() {deepEqual( Stem("brønn"), "brønn");});
test("brønnen -> brønn", function() {deepEqual( Stem("brønnen"), "brønn");});
test("brønner -> brønn", function() {deepEqual( Stem("brønner"), "brønn");});
test("brønnøysundregistra -> brønnøysundregistr", function() {deepEqual( Stem("brønnøysundregistra"), "brønnøysundregistr");});
test("brøt -> brøt", function() {deepEqual( Stem("brøt"), "brøt");});
test("bu -> bu", function() {deepEqual( Stem("bu"), "bu");});
test("buande -> buand", function() {deepEqual( Stem("buande"), "buand");});
test("bud -> bud", function() {deepEqual( Stem("bud"), "bud");});
test("budde -> budd", function() {deepEqual( Stem("budde"), "budd");});
test("budsjett -> budsjett", function() {deepEqual( Stem("budsjett"), "budsjett");});
test("budsjettere -> budsjetter", function() {deepEqual( Stem("budsjettere"), "budsjetter");});
test("budsjetteringa -> budsjettering", function() {deepEqual( Stem("budsjetteringa"), "budsjettering");});
test("budsjettet -> budsjett", function() {deepEqual( Stem("budsjettet"), "budsjett");});
test("budsjettproposisjonane -> budsjettproposisjon", function() {deepEqual( Stem("budsjettproposisjonane"), "budsjettproposisjon");});
test("budsjettsaker -> budsjettsak", function() {deepEqual( Stem("budsjettsaker"), "budsjettsak");});
test("budskapet -> budskap", function() {deepEqual( Stem("budskapet"), "budskap");});
test("budt -> budt", function() {deepEqual( Stem("budt"), "budt");});
test("budtjeneste -> budtjenest", function() {deepEqual( Stem("budtjeneste"), "budtjenest");});
test("bue -> bue", function() {deepEqual( Stem("bue"), "bue");});
test("buen -> buen", function() {deepEqual( Stem("buen"), "buen");});
test("buer -> buer", function() {deepEqual( Stem("buer"), "buer");});
test("bueskyting -> bueskyting", function() {deepEqual( Stem("bueskyting"), "bueskyting");});
test("bueskytter -> bueskytt", function() {deepEqual( Stem("bueskytter"), "bueskytt");});
test("buestrengen -> buestreng", function() {deepEqual( Stem("buestrengen"), "buestreng");});
test("buet -> buet", function() {deepEqual( Stem("buet"), "buet");});
test("buffer -> buff", function() {deepEqual( Stem("buffer"), "buff");});
test("buffere -> buffer", function() {deepEqual( Stem("buffere"), "buffer");});
test("buform -> buform", function() {deepEqual( Stem("buform"), "buform");});
test("buformer -> buform", function() {deepEqual( Stem("buformer"), "buform");});
test("buinteressene -> buinteress", function() {deepEqual( Stem("buinteressene"), "buinteress");});
test("buinteresser -> buinteress", function() {deepEqual( Stem("buinteresser"), "buinteress");});
test("bukke -> bukk", function() {deepEqual( Stem("bukke"), "bukk");});
test("bukkekjerra -> bukkekjerr", function() {deepEqual( Stem("bukkekjerra"), "bukkekjerr");});
test("bukkene -> bukk", function() {deepEqual( Stem("bukkene"), "bukk");});
test("bukker -> bukk", function() {deepEqual( Stem("bukker"), "bukk");});
test("bukkeskinnene -> bukkeskinn", function() {deepEqual( Stem("bukkeskinnene"), "bukkeskinn");});
test("bukostnadene -> bukostnad", function() {deepEqual( Stem("bukostnadene"), "bukostnad");});
test("buktende -> bukt", function() {deepEqual( Stem("buktende"), "bukt");});
test("bukter -> bukt", function() {deepEqual( Stem("bukter"), "bukt");});
test("buktet -> bukt", function() {deepEqual( Stem("buktet"), "bukt");});
test("buldrende -> buldr", function() {deepEqual( Stem("buldrende"), "buldr");});
test("buldrer -> buldr", function() {deepEqual( Stem("buldrer"), "buldr");});
test("bulk -> bulk", function() {deepEqual( Stem("bulk"), "bulk");});
test("bulkanlegg -> bulkanlegg", function() {deepEqual( Stem("bulkanlegg"), "bulkanlegg");});
test("bulkfartøyer -> bulkfartøy", function() {deepEqual( Stem("bulkfartøyer"), "bulkfartøy");});
test("bulkgods -> bulkgod", function() {deepEqual( Stem("bulkgods"), "bulkgod");});
test("bulkhavn -> bulkhavn", function() {deepEqual( Stem("bulkhavn"), "bulkhavn");});
test("bulkklassifiserte -> bulkklassifiser", function() {deepEqual( Stem("bulkklassifiserte"), "bulkklassifiser");});
test("bulklast -> bulkl", function() {deepEqual( Stem("bulklast"), "bulkl");});
test("bulklaster -> bulklast", function() {deepEqual( Stem("bulklaster"), "bulklast");});
test("bulkprodukter -> bulkprodukt", function() {deepEqual( Stem("bulkprodukter"), "bulkprodukt");});
test("bulktrafikken -> bulktrafikk", function() {deepEqual( Stem("bulktrafikken"), "bulktrafikk");});
test("bulktransporter -> bulktransport", function() {deepEqual( Stem("bulktransporter"), "bulktransport");});
test("bulkvare -> bulkvar", function() {deepEqual( Stem("bulkvare"), "bulkvar");});
test("bulkvarer -> bulkvar", function() {deepEqual( Stem("bulkvarer"), "bulkvar");});
test("bulmeurt -> bulmeurt", function() {deepEqual( Stem("bulmeurt"), "bulmeurt");});
test("bumiljø -> bumiljø", function() {deepEqual( Stem("bumiljø"), "bumiljø");});
test("bumiljøarbeid -> bumiljøarbeid", function() {deepEqual( Stem("bumiljøarbeid"), "bumiljøarbeid");});
test("bumiljøet -> bumiljø", function() {deepEqual( Stem("bumiljøet"), "bumiljø");});
test("bumiljøtiltak -> bumiljøtiltak", function() {deepEqual( Stem("bumiljøtiltak"), "bumiljøtiltak");});
test("bunde -> bund", function() {deepEqual( Stem("bunde"), "bund");});
test("bunden -> bund", function() {deepEqual( Stem("bunden"), "bund");});
test("bundesverband -> bundesverband", function() {deepEqual( Stem("bundesverband"), "bundesverband");});
test("bundet -> bund", function() {deepEqual( Stem("bundet"), "bund");});
test("bundne -> bundn", function() {deepEqual( Stem("bundne"), "bundn");});
test("bunnen -> bunn", function() {deepEqual( Stem("bunnen"), "bunn");});
test("bunner -> bunn", function() {deepEqual( Stem("bunner"), "bunn");});
test("bunnfradraget -> bunnfradrag", function() {deepEqual( Stem("bunnfradraget"), "bunnfradrag");});
test("bunnløst -> bunnløst", function() {deepEqual( Stem("bunnløst"), "bunnløst");});
test("bunns -> bunn", function() {deepEqual( Stem("bunns"), "bunn");});
test("buofl -> buofl", function() {deepEqual( Stem("buofl"), "buofl");});
test("buplikt -> buplikt", function() {deepEqual( Stem("buplikt"), "buplikt");});
test("bur -> bur", function() {deepEqual( Stem("bur"), "bur");});
test("burde -> burd", function() {deepEqual( Stem("burde"), "burd");});
test("bure -> bur", function() {deepEqual( Stem("bure"), "bur");});
test("bures -> bur", function() {deepEqual( Stem("bures"), "bur");});
test("burett -> burett", function() {deepEqual( Stem("burett"), "burett");});
test("buretten -> burett", function() {deepEqual( Stem("buretten"), "burett");});
test("burettsbustader -> burettsbustad", function() {deepEqual( Stem("burettsbustader"), "burettsbustad");});
test("burettshavar -> burettshav", function() {deepEqual( Stem("burettshavar"), "burettshav");});
test("burettshavarane -> burettshavar", function() {deepEqual( Stem("burettshavarane"), "burettshavar");});
test("burettshavarar -> burettshavar", function() {deepEqual( Stem("burettshavarar"), "burettshavar");});
test("burettshavaren -> burettshavar", function() {deepEqual( Stem("burettshavaren"), "burettshavar");});
test("burettshavarinteressene -> burettshavarinteress", function() {deepEqual( Stem("burettshavarinteressene"), "burettshavarinteress");});
test("burettsinnskot -> burettsinnskot", function() {deepEqual( Stem("burettsinnskot"), "burettsinnskot");});
test("burettsinnskota -> burettsinnskot", function() {deepEqual( Stem("burettsinnskota"), "burettsinnskot");});
test("burettslag -> burettslag", function() {deepEqual( Stem("burettslag"), "burettslag");});
test("burettslaga -> burettslag", function() {deepEqual( Stem("burettslaga"), "burettslag");});
test("burettslagandel -> burettslagandel", function() {deepEqual( Stem("burettslagandel"), "burettslagandel");});
test("burettslagbustader -> burettslagbustad", function() {deepEqual( Stem("burettslagbustader"), "burettslagbustad");});
test("burettslaget -> burettslag", function() {deepEqual( Stem("burettslaget"), "burettslag");});
test("burettslagets -> burettslag", function() {deepEqual( Stem("burettslagets"), "burettslag");});
test("burettslagsandel -> burettslagsandel", function() {deepEqual( Stem("burettslagsandel"), "burettslagsandel");});
test("burettslagsandelane -> burettslagsandel", function() {deepEqual( Stem("burettslagsandelane"), "burettslagsandel");});
test("burettslagsandelar -> burettslagsandel", function() {deepEqual( Stem("burettslagsandelar"), "burettslagsandel");});
test("burettslagsandelen -> burettslagsandel", function() {deepEqual( Stem("burettslagsandelen"), "burettslagsandel");});
test("burettslagsbustad -> burettslagsbustad", function() {deepEqual( Stem("burettslagsbustad"), "burettslagsbustad");});
test("burettslagsbustadene -> burettslagsbustad", function() {deepEqual( Stem("burettslagsbustadene"), "burettslagsbustad");});
test("burettslagsbustader -> burettslagsbustad", function() {deepEqual( Stem("burettslagsbustader"), "burettslagsbustad");});
test("burettslagsforhold -> burettslagsforhold", function() {deepEqual( Stem("burettslagsforhold"), "burettslagsforhold");});
test("burettslagsforma -> burettslagsform", function() {deepEqual( Stem("burettslagsforma"), "burettslagsform");});
test("burettslagslov -> burettslag", function() {deepEqual( Stem("burettslagslov"), "burettslag");});
test("burettslagslova -> burettslag", function() {deepEqual( Stem("burettslagslova"), "burettslag");});
test("burettslagsmidlar -> burettslagsmidl", function() {deepEqual( Stem("burettslagsmidlar"), "burettslagsmidl");});
test("burettslagsmodell -> burettslagsmodell", function() {deepEqual( Stem("burettslagsmodell"), "burettslagsmodell");});
test("burettslagsmodellen -> burettslagsmodell", function() {deepEqual( Stem("burettslagsmodellen"), "burettslagsmodell");});
test("burettslov -> burett", function() {deepEqual( Stem("burettslov"), "burett");});
test("burettslovene -> burett", function() {deepEqual( Stem("burettslovene"), "burett");});
test("burettslovgjeving -> burettslovgjeving", function() {deepEqual( Stem("burettslovgjeving"), "burettslovgjeving");});
test("burettslovgjevinga -> burettslovgjeving", function() {deepEqual( Stem("burettslovgjevinga"), "burettslovgjeving");});
test("burettslovutvalet -> burettslovutval", function() {deepEqual( Stem("burettslovutvalet"), "burettslovutval");});
test("burettsregister -> burettsregist", function() {deepEqual( Stem("burettsregister"), "burettsregist");});
test("burettsregisteret -> burettsregister", function() {deepEqual( Stem("burettsregisteret"), "burettsregister");});
test("buseti -> buseti", function() {deepEqual( Stem("buseti"), "buseti");});
test("busituasjon -> busituasjon", function() {deepEqual( Stem("busituasjon"), "busituasjon");});
test("busituasjonen -> busituasjon", function() {deepEqual( Stem("busituasjonen"), "busituasjon");});
test("busk -> busk", function() {deepEqual( Stem("busk"), "busk");});
test("buskapen -> buskap", function() {deepEqual( Stem("buskapen"), "buskap");});
test("busker -> busk", function() {deepEqual( Stem("busker"), "busk");});
test("buskerud -> buskerud", function() {deepEqual( Stem("buskerud"), "buskerud");});
test("bustad -> bustad", function() {deepEqual( Stem("bustad"), "bustad");});
test("bustadaksjeselskap -> bustadaksjeselskap", function() {deepEqual( Stem("bustadaksjeselskap"), "bustadaksjeselskap");});
test("bustadaksjeselskapet -> bustadaksjeselskap", function() {deepEqual( Stem("bustadaksjeselskapet"), "bustadaksjeselskap");});
test("bustadar -> bustad", function() {deepEqual( Stem("bustadar"), "bustad");});
test("bustadbank -> bustadbank", function() {deepEqual( Stem("bustadbank"), "bustadbank");});
test("bustadbehov -> bustadbehov", function() {deepEqual( Stem("bustadbehov"), "bustadbehov");});
test("bustadbehova -> bustadbehov", function() {deepEqual( Stem("bustadbehova"), "bustadbehov");});
test("bustadbygg -> bustadbygg", function() {deepEqual( Stem("bustadbygg"), "bustadbygg");});
test("bustadbygga -> bustadbygg", function() {deepEqual( Stem("bustadbygga"), "bustadbygg");});
test("bustadbygging -> bustadbygging", function() {deepEqual( Stem("bustadbygging"), "bustadbygging");});
test("bustadbygginga -> bustadbygging", function() {deepEqual( Stem("bustadbygginga"), "bustadbygging");});
test("bustadbyggjelag -> bustadbyggjelag", function() {deepEqual( Stem("bustadbyggjelag"), "bustadbyggjelag");});
test("bustadbyggjelaga -> bustadbyggjelag", function() {deepEqual( Stem("bustadbyggjelaga"), "bustadbyggjelag");});
test("bustadbyggjelaget -> bustadbyggjelag", function() {deepEqual( Stem("bustadbyggjelaget"), "bustadbyggjelag");});
test("bustadbyggjelagsforma -> bustadbyggjelagsform", function() {deepEqual( Stem("bustadbyggjelagsforma"), "bustadbyggjelagsform");});
test("bustadbyggjelagslov -> bustadbyggjelag", function() {deepEqual( Stem("bustadbyggjelagslov"), "bustadbyggjelag");});
test("bustadbyggjelagslova -> bustadbyggjelag", function() {deepEqual( Stem("bustadbyggjelagslova"), "bustadbyggjelag");});
test("bustadbyte -> bustadbyt", function() {deepEqual( Stem("bustadbyte"), "bustadbyt");});
test("bustadeigarar -> bustadeigar", function() {deepEqual( Stem("bustadeigarar"), "bustadeigar");});
test("bustadeigedom -> bustadeigedom", function() {deepEqual( Stem("bustadeigedom"), "bustadeigedom");});
test("bustaden -> bustad", function() {deepEqual( Stem("bustaden"), "bustad");});
test("bustadene -> bustad", function() {deepEqual( Stem("bustadene"), "bustad");});
test("bustadeneburetten -> bustadeneburett", function() {deepEqual( Stem("bustadeneburetten"), "bustadeneburett");});
test("bustader -> bustad", function() {deepEqual( Stem("bustader"), "bustad");});
test("bustadetablering -> bustadetablering", function() {deepEqual( Stem("bustadetablering"), "bustadetablering");});
test("bustadfellesskapar -> bustadfellesskap", function() {deepEqual( Stem("bustadfellesskapar"), "bustadfellesskap");});
test("bustadfellesskapen -> bustadfellesskap", function() {deepEqual( Stem("bustadfellesskapen"), "bustadfellesskap");});
test("bustadfinansieringa -> bustadfinansiering", function() {deepEqual( Stem("bustadfinansieringa"), "bustadfinansiering");});
test("bustadforbruket -> bustadforbruk", function() {deepEqual( Stem("bustadforbruket"), "bustadforbruk");});
test("bustadfordelinga -> bustadfordeling", function() {deepEqual( Stem("bustadfordelinga"), "bustadfordeling");});
test("bustadforhold -> bustadforhold", function() {deepEqual( Stem("bustadforhold"), "bustadforhold");});
test("bustadform -> bustadform", function() {deepEqual( Stem("bustadform"), "bustadform");});
test("bustadformene -> bustadform", function() {deepEqual( Stem("bustadformene"), "bustadform");});
test("bustadformer -> bustadform", function() {deepEqual( Stem("bustadformer"), "bustadform");});
test("bustadfornying -> bustadfornying", function() {deepEqual( Stem("bustadfornying"), "bustadfornying");});
test("bustadforsyning -> bustadforsyning", function() {deepEqual( Stem("bustadforsyning"), "bustadforsyning");});
test("bustadforsyninga -> bustadforsyning", function() {deepEqual( Stem("bustadforsyninga"), "bustadforsyning");});
test("bustadforvaltning -> bustadforvaltning", function() {deepEqual( Stem("bustadforvaltning"), "bustadforvaltning");});
test("bustadforvaltninga -> bustadforvaltning", function() {deepEqual( Stem("bustadforvaltninga"), "bustadforvaltning");});
test("bustadføremål -> bustadføremål", function() {deepEqual( Stem("bustadføremål"), "bustadføremål");});
test("bustadføremålet -> bustadføremål", function() {deepEqual( Stem("bustadføremålet"), "bustadføremål");});
test("bustadføretak -> bustadføretak", function() {deepEqual( Stem("bustadføretak"), "bustadføretak");});
test("bustadføretaka -> bustadføretak", function() {deepEqual( Stem("bustadføretaka"), "bustadføretak");});
test("bustadinndelinga -> bustadinndeling", function() {deepEqual( Stem("bustadinndelinga"), "bustadinndeling");});
test("bustadinteressentane -> bustadinteressent", function() {deepEqual( Stem("bustadinteressentane"), "bustadinteressent");});
test("bustadinteressenten -> bustadinteressent", function() {deepEqual( Stem("bustadinteressenten"), "bustadinteressent");});
test("bustadinteressentskap -> bustadinteressentskap", function() {deepEqual( Stem("bustadinteressentskap"), "bustadinteressentskap");});
test("bustadkjøparar -> bustadkjøpar", function() {deepEqual( Stem("bustadkjøparar"), "bustadkjøpar");});
test("bustadkonsumet -> bustadkonsum", function() {deepEqual( Stem("bustadkonsumet"), "bustadkonsum");});
test("bustadkooperasjonen -> bustadkooperasjon", function() {deepEqual( Stem("bustadkooperasjonen"), "bustadkooperasjon");});
test("bustadkooperativ -> bustadkooperativ", function() {deepEqual( Stem("bustadkooperativ"), "bustadkooperativ");});
test("bustadkooperativa -> bustadkooperativ", function() {deepEqual( Stem("bustadkooperativa"), "bustadkooperativ");});
test("bustadkooperative -> bustadkooperativ", function() {deepEqual( Stem("bustadkooperative"), "bustadkooperativ");});
test("bustadkooperativet -> bustadkooperativ", function() {deepEqual( Stem("bustadkooperativet"), "bustadkooperativ");});
test("bustadkooperativt -> bustadkooperativ", function() {deepEqual( Stem("bustadkooperativt"), "bustadkooperativ");});
test("bustadlause -> bustadlaus", function() {deepEqual( Stem("bustadlause"), "bustadlaus");});
test("bustadleige -> bustadl", function() {deepEqual( Stem("bustadleige"), "bustadl");});
test("bustadlov -> bustad", function() {deepEqual( Stem("bustadlov"), "bustad");});
test("bustadlovene -> bustad", function() {deepEqual( Stem("bustadlovene"), "bustad");});
test("bustadlovgjevinga -> bustadlovgjeving", function() {deepEqual( Stem("bustadlovgjevinga"), "bustadlovgjeving");});
test("bustadmarknad -> bustadmarknad", function() {deepEqual( Stem("bustadmarknad"), "bustadmarknad");});
test("bustadmarknaden -> bustadmarknad", function() {deepEqual( Stem("bustadmarknaden"), "bustadmarknad");});
test("bustadmasse -> bustadmass", function() {deepEqual( Stem("bustadmasse"), "bustadmass");});
test("bustadmeldingane -> bustadmelding", function() {deepEqual( Stem("bustadmeldingane"), "bustadmelding");});
test("bustadmiljø -> bustadmiljø", function() {deepEqual( Stem("bustadmiljø"), "bustadmiljø");});
test("bustadområde -> bustadområd", function() {deepEqual( Stem("bustadområde"), "bustadområd");});
test("bustadområdet -> bustadområd", function() {deepEqual( Stem("bustadområdet"), "bustadområd");});
test("bustadomsetninga -> bustadomsetning", function() {deepEqual( Stem("bustadomsetninga"), "bustadomsetning");});
test("bustadoppføringslova -> bustadoppføring", function() {deepEqual( Stem("bustadoppføringslova"), "bustadoppføring");});
test("bustadorganisasjon -> bustadorganisasjon", function() {deepEqual( Stem("bustadorganisasjon"), "bustadorganisasjon");});
test("bustadorganisasjonane -> bustadorganisasjon", function() {deepEqual( Stem("bustadorganisasjonane"), "bustadorganisasjon");});
test("bustadorganisasjonar -> bustadorganisasjon", function() {deepEqual( Stem("bustadorganisasjonar"), "bustadorganisasjon");});
test("bustadorganisering -> bustadorganisering", function() {deepEqual( Stem("bustadorganisering"), "bustadorganisering");});
test("bustadpolitikk -> bustadpolitikk", function() {deepEqual( Stem("bustadpolitikk"), "bustadpolitikk");});
test("bustadpolitikken -> bustadpolitikk", function() {deepEqual( Stem("bustadpolitikken"), "bustadpolitikk");});
test("bustadpolitiske -> bustadpolitisk", function() {deepEqual( Stem("bustadpolitiske"), "bustadpolitisk");});
test("bustadprisane -> bustadpris", function() {deepEqual( Stem("bustadprisane"), "bustadpris");});
test("bustadproduksjon -> bustadproduksjon", function() {deepEqual( Stem("bustadproduksjon"), "bustadproduksjon");});
test("bustadproduksjonen -> bustadproduksjon", function() {deepEqual( Stem("bustadproduksjonen"), "bustadproduksjon");});
test("bustadprosjekt -> bustadprosjekt", function() {deepEqual( Stem("bustadprosjekt"), "bustadprosjekt");});
test("bustadreglane -> bustadregl", function() {deepEqual( Stem("bustadreglane"), "bustadregl");});
test("bustadrett -> bustadrett", function() {deepEqual( Stem("bustadrett"), "bustadrett");});
test("bustadsamanslutningane -> bustadsamanslutning", function() {deepEqual( Stem("bustadsamanslutningane"), "bustadsamanslutning");});
test("bustadsameiger -> bustadsam", function() {deepEqual( Stem("bustadsameiger"), "bustadsam");});
test("bustadsamvirke -> bustadsamvirk", function() {deepEqual( Stem("bustadsamvirke"), "bustadsamvirk");});
test("bustadsamvirket -> bustadsamvirk", function() {deepEqual( Stem("bustadsamvirket"), "bustadsamvirk");});
test("bustadsamvirkets -> bustadsamvirk", function() {deepEqual( Stem("bustadsamvirkets"), "bustadsamvirk");});
test("bustadseksjon -> bustadseksjon", function() {deepEqual( Stem("bustadseksjon"), "bustadseksjon");});
test("bustadseksjonane -> bustadseksjon", function() {deepEqual( Stem("bustadseksjonane"), "bustadseksjon");});
test("bustadseksjonar -> bustadseksjon", function() {deepEqual( Stem("bustadseksjonar"), "bustadseksjon");});
test("bustadsituasjon -> bustadsituasjon", function() {deepEqual( Stem("bustadsituasjon"), "bustadsituasjon");});
test("bustadskaffing -> bustadskaffing", function() {deepEqual( Stem("bustadskaffing"), "bustadskaffing");});
test("bustadsosiale -> bustadsosial", function() {deepEqual( Stem("bustadsosiale"), "bustadsosial");});
test("bustadspørsmåla -> bustadspørsmål", function() {deepEqual( Stem("bustadspørsmåla"), "bustadspørsmål");});
test("bustadstiftingar -> bustadstifting", function() {deepEqual( Stem("bustadstiftingar"), "bustadstifting");});
test("bustadtilbod -> bustadtilbod", function() {deepEqual( Stem("bustadtilbod"), "bustadtilbod");});
test("bustadverksemd -> bustadverksemd", function() {deepEqual( Stem("bustadverksemd"), "bustadverksemd");});
test("bustehode -> bustehod", function() {deepEqual( Stem("bustehode"), "bustehod");});
test("busten -> bust", function() {deepEqual( Stem("busten"), "bust");});
test("bustønad -> bustønad", function() {deepEqual( Stem("bustønad"), "bustønad");});
test("butikkar -> butikk", function() {deepEqual( Stem("butikkar"), "butikk");});
test("butilhøva -> butilhøv", function() {deepEqual( Stem("butilhøva"), "butilhøv");});
test("butilhøve -> butilhøv", function() {deepEqual( Stem("butilhøve"), "butilhøv");});
test("butt -> butt", function() {deepEqual( Stem("butt"), "butt");});
test("buutgifter -> buutgift", function() {deepEqual( Stem("buutgifter"), "buutgift");});
test("by -> by", function() {deepEqual( Stem("by"), "by");});
test("byane -> byan", function() {deepEqual( Stem("byane"), "byan");});
test("byar -> byar", function() {deepEqual( Stem("byar"), "byar");});
test("bybroen -> bybro", function() {deepEqual( Stem("bybroen"), "bybro");});
test("bydel -> bydel", function() {deepEqual( Stem("bydel"), "bydel");});
test("byen -> byen", function() {deepEqual( Stem("byen"), "byen");});
test("byene -> byen", function() {deepEqual( Stem("byene"), "byen");});
test("byenes -> byen", function() {deepEqual( Stem("byenes"), "byen");});
test("byens -> byen", function() {deepEqual( Stem("byens"), "byen");});
test("byer -> byer", function() {deepEqual( Stem("byer"), "byer");});
test("byformål -> byformål", function() {deepEqual( Stem("byformål"), "byformål");});
test("byfornying -> byfornying", function() {deepEqual( Stem("byfornying"), "byfornying");});
test("byfornyinga -> byfornying", function() {deepEqual( Stem("byfornyinga"), "byfornying");});
test("byfunksjoner -> byfunksjon", function() {deepEqual( Stem("byfunksjoner"), "byfunksjon");});
test("bygd -> bygd", function() {deepEqual( Stem("bygd"), "bygd");});
test("bygda -> bygd", function() {deepEqual( Stem("bygda"), "bygd");});
test("bygde -> bygd", function() {deepEqual( Stem("bygde"), "bygd");});
test("bygder -> bygd", function() {deepEqual( Stem("bygder"), "bygd");});
test("bygg -> bygg", function() {deepEqual( Stem("bygg"), "bygg");});
test("bygga -> bygg", function() {deepEqual( Stem("bygga"), "bygg");});
test("bygge -> bygg", function() {deepEqual( Stem("bygge"), "bygg");});
test("byggemarked -> byggemarked", function() {deepEqual( Stem("byggemarked"), "byggemarked");});
test("bygger -> bygg", function() {deepEqual( Stem("bygger"), "bygg");});
test("bygges -> bygg", function() {deepEqual( Stem("bygges"), "bygg");});
test("byggesoner -> byggeson", function() {deepEqual( Stem("byggesoner"), "byggeson");});
test("bygget -> bygg", function() {deepEqual( Stem("bygget"), "bygg");});
test("byggetrinn -> byggetrinn", function() {deepEqual( Stem("byggetrinn"), "byggetrinn");});
test("byggevirksomhet -> byggevirksom", function() {deepEqual( Stem("byggevirksomhet"), "byggevirksom");});
test("byggherre -> byggherr", function() {deepEqual( Stem("byggherre"), "byggherr");});
test("byggherrecentral -> byggherrecentral", function() {deepEqual( Stem("byggherrecentral"), "byggherrecentral");});
test("byggherren -> byggherr", function() {deepEqual( Stem("byggherren"), "byggherr");});
test("byggherreombod -> byggherreombod", function() {deepEqual( Stem("byggherreombod"), "byggherreombod");});
test("byggherresida -> byggherresid", function() {deepEqual( Stem("byggherresida"), "byggherresid");});
test("bygging -> bygging", function() {deepEqual( Stem("bygging"), "bygging");});
test("bygginga -> bygging", function() {deepEqual( Stem("bygginga"), "bygging");});
test("byggjast -> byggj", function() {deepEqual( Stem("byggjast"), "byggj");});
test("byggje -> byggj", function() {deepEqual( Stem("byggje"), "byggj");});
test("byggjebudsjett -> byggjebudsjett", function() {deepEqual( Stem("byggjebudsjett"), "byggjebudsjett");});
test("byggjebudsjettet -> byggjebudsjett", function() {deepEqual( Stem("byggjebudsjettet"), "byggjebudsjett");});
test("byggjefeil -> byggjefeil", function() {deepEqual( Stem("byggjefeil"), "byggjefeil");});
test("byggjefelt -> byggjefelt", function() {deepEqual( Stem("byggjefelt"), "byggjefelt");});
test("byggjeforskriftene -> byggjeforskrift", function() {deepEqual( Stem("byggjeforskriftene"), "byggjeforskrift");});
test("byggjeklare -> byggjeklar", function() {deepEqual( Stem("byggjeklare"), "byggjeklar");});
test("byggjekostnader -> byggjekostnad", function() {deepEqual( Stem("byggjekostnader"), "byggjekostnad");});
test("byggjelån -> byggjelån", function() {deepEqual( Stem("byggjelån"), "byggjelån");});
test("byggjematerialar -> byggjematerial", function() {deepEqual( Stem("byggjematerialar"), "byggjematerial");});
test("byggjeoppdrag -> byggjeoppdrag", function() {deepEqual( Stem("byggjeoppdrag"), "byggjeoppdrag");});
test("byggjeperioden -> byggjeperiod", function() {deepEqual( Stem("byggjeperioden"), "byggjeperiod");});
test("byggjeprosess -> byggjeprosess", function() {deepEqual( Stem("byggjeprosess"), "byggjeprosess");});
test("byggjeprosessen -> byggjeprosess", function() {deepEqual( Stem("byggjeprosessen"), "byggjeprosess");});
test("byggjeprosjekt -> byggjeprosjekt", function() {deepEqual( Stem("byggjeprosjekt"), "byggjeprosjekt");});
test("byggjeprosjekta -> byggjeprosjekt", function() {deepEqual( Stem("byggjeprosjekta"), "byggjeprosjekt");});
test("byggjeprosjektet -> byggjeprosjekt", function() {deepEqual( Stem("byggjeprosjektet"), "byggjeprosjekt");});
test("byggjer -> byggj", function() {deepEqual( Stem("byggjer"), "byggj");});
test("byggjerekneskapen -> byggjerekneskap", function() {deepEqual( Stem("byggjerekneskapen"), "byggjerekneskap");});
test("byggjesak -> byggjesak", function() {deepEqual( Stem("byggjesak"), "byggjesak");});
test("byggjesaka -> byggjesak", function() {deepEqual( Stem("byggjesaka"), "byggjesak");});
test("byggjeskikk -> byggjeskikk", function() {deepEqual( Stem("byggjeskikk"), "byggjeskikk");});
test("byggjestyret -> byggjestyr", function() {deepEqual( Stem("byggjestyret"), "byggjestyr");});
test("byggjetekniske -> byggjeteknisk", function() {deepEqual( Stem("byggjetekniske"), "byggjeteknisk");});
test("byggjetida -> byggjetid", function() {deepEqual( Stem("byggjetida"), "byggjetid");});
test("byggjeverksemda -> byggjeverksemd", function() {deepEqual( Stem("byggjeverksemda"), "byggjeverksemd");});
test("byggkvalitet -> byggkvalit", function() {deepEqual( Stem("byggkvalitet"), "byggkvalit");});
test("byggmester -> byggmest", function() {deepEqual( Stem("byggmester"), "byggmest");});
test("byggmesteren -> byggmester", function() {deepEqual( Stem("byggmesteren"), "byggmester");});
test("byggnadsforening -> byggnadsforening", function() {deepEqual( Stem("byggnadsforening"), "byggnadsforening");});
test("byggøkonomi -> byggøkonomi", function() {deepEqual( Stem("byggøkonomi"), "byggøkonomi");});
test("bygning -> bygning", function() {deepEqual( Stem("bygning"), "bygning");});
test("bygningar -> bygning", function() {deepEqual( Stem("bygningar"), "bygning");});
test("bygningen -> bygning", function() {deepEqual( Stem("bygningen"), "bygning");});
test("bygninger -> bygning", function() {deepEqual( Stem("bygninger"), "bygning");});
test("bygningsetaten -> bygningsetat", function() {deepEqual( Stem("bygningsetaten"), "bygningsetat");});
test("bygningsetatens -> bygningsetat", function() {deepEqual( Stem("bygningsetatens"), "bygningsetat");});
test("bygningskrav -> bygningskrav", function() {deepEqual( Stem("bygningskrav"), "bygningskrav");});
test("bygningsloven -> bygning", function() {deepEqual( Stem("bygningsloven"), "bygning");});
test("bygningslovens -> bygning", function() {deepEqual( Stem("bygningslovens"), "bygning");});
test("bygningslovgjevinga -> bygningslovgjeving", function() {deepEqual( Stem("bygningslovgjevinga"), "bygningslovgjeving");});
test("bygningsmateriale -> bygningsmaterial", function() {deepEqual( Stem("bygningsmateriale"), "bygningsmaterial");});
test("bygt -> bygt", function() {deepEqual( Stem("bygt"), "bygt");});
test("bykassen -> bykass", function() {deepEqual( Stem("bykassen"), "bykass");});
test("bykjernen -> bykjern", function() {deepEqual( Stem("bykjernen"), "bykjern");});
test("byleist -> byleist", function() {deepEqual( Stem("byleist"), "byleist");});
test("bymessig -> bymess", function() {deepEqual( Stem("bymessig"), "bymess");});
test("bymiljø -> bymiljø", function() {deepEqual( Stem("bymiljø"), "bymiljø");});
test("byområdene -> byområd", function() {deepEqual( Stem("byområdene"), "byområd");});
test("byområder -> byområd", function() {deepEqual( Stem("byområder"), "byområd");});
test("byområdet -> byområd", function() {deepEqual( Stem("byområdet"), "byområd");});
test("bypass -> bypass", function() {deepEqual( Stem("bypass"), "bypass");});
test("byr -> byr", function() {deepEqual( Stem("byr"), "byr");});
test("byrden -> byrd", function() {deepEqual( Stem("byrden"), "byrd");});
test("byrelaterte -> byrelater", function() {deepEqual( Stem("byrelaterte"), "byrelater");});
test("byrett -> byrett", function() {deepEqual( Stem("byrett"), "byrett");});
test("byrje -> byrj", function() {deepEqual( Stem("byrje"), "byrj");});
test("byrådet -> byråd", function() {deepEqual( Stem("byrådet"), "byråd");});
test("byrådsbehandling -> byrådsbehandling", function() {deepEqual( Stem("byrådsbehandling"), "byrådsbehandling");});
test("byrådsmøte -> byrådsmøt", function() {deepEqual( Stem("byrådsmøte"), "byrådsmøt");});
test("byrådssak -> byrådssak", function() {deepEqual( Stem("byrådssak"), "byrådssak");});
test("byrådsvedtak -> byrådsvedtak", function() {deepEqual( Stem("byrådsvedtak"), "byrådsvedtak");});
test("bys -> bys", function() {deepEqual( Stem("bys"), "bys");});
test("bysamfunn -> bysamfunn", function() {deepEqual( Stem("bysamfunn"), "bysamfunn");});
test("bysamfunnene -> bysamfunn", function() {deepEqual( Stem("bysamfunnene"), "bysamfunn");});
test("bysamfunnet -> bysamfunn", function() {deepEqual( Stem("bysamfunnet"), "bysamfunn");});
test("bysentraene -> bysentra", function() {deepEqual( Stem("bysentraene"), "bysentra");});
test("byspredning -> byspredning", function() {deepEqual( Stem("byspredning"), "byspredning");});
test("bystruktur -> bystruktur", function() {deepEqual( Stem("bystruktur"), "bystruktur");});
test("bystrøk -> bystrøk", function() {deepEqual( Stem("bystrøk"), "bystrøk");});
test("bystyre -> bystyr", function() {deepEqual( Stem("bystyre"), "bystyr");});
test("bystyret -> bystyr", function() {deepEqual( Stem("bystyret"), "bystyr");});
test("bystyrevedtak -> bystyrevedtak", function() {deepEqual( Stem("bystyrevedtak"), "bystyrevedtak");});
test("bystyrevedtaket -> bystyrevedtak", function() {deepEqual( Stem("bystyrevedtaket"), "bystyrevedtak");});
test("bytast -> byt", function() {deepEqual( Stem("bytast"), "byt");});
test("byte -> byt", function() {deepEqual( Stem("byte"), "byt");});
test("byteforhold -> byteforhold", function() {deepEqual( Stem("byteforhold"), "byteforhold");});
test("bytte -> bytt", function() {deepEqual( Stem("bytte"), "bytt");});
test("byttet -> bytt", function() {deepEqual( Stem("byttet"), "bytt");});
test("byutvikling -> byutvikling", function() {deepEqual( Stem("byutvikling"), "byutvikling");});
test("byutviklingen -> byutvikling", function() {deepEqual( Stem("byutviklingen"), "byutvikling");});
test("byutviklings -> byutvikling", function() {deepEqual( Stem("byutviklings"), "byutvikling");});
test("byutviklingsformål -> byutviklingsformål", function() {deepEqual( Stem("byutviklingsformål"), "byutviklingsformål");});
test("byutviklingsmønster -> byutviklingsmønst", function() {deepEqual( Stem("byutviklingsmønster"), "byutviklingsmønst");});
test("byutviklingsområder -> byutviklingsområd", function() {deepEqual( Stem("byutviklingsområder"), "byutviklingsområd");});
test("byutviklingsplaner -> byutviklingsplan", function() {deepEqual( Stem("byutviklingsplaner"), "byutviklingsplan");});
test("byutviklingstankegang -> byutviklingstankegang", function() {deepEqual( Stem("byutviklingstankegang"), "byutviklingstankegang");});
test("både -> båd", function() {deepEqual( Stem("både"), "båd");});
test("bål -> bål", function() {deepEqual( Stem("bål"), "bål");});
test("bålene -> bål", function() {deepEqual( Stem("bålene"), "bål");});
test("bålet -> bål", function() {deepEqual( Stem("bålet"), "bål");});
test("bålferden -> bålferd", function() {deepEqual( Stem("bålferden"), "bålferd");});
test("båløyg -> båløyg", function() {deepEqual( Stem("båløyg"), "båløyg");});
test("bånd -> bånd", function() {deepEqual( Stem("bånd"), "bånd");});
test("båndet -> bånd", function() {deepEqual( Stem("båndet"), "bånd");});
test("båret -> bår", function() {deepEqual( Stem("båret"), "bår");});
test("båt -> båt", function() {deepEqual( Stem("båt"), "båt");});
test("båten -> båt", function() {deepEqual( Stem("båten"), "båt");});
test("båter -> båt", function() {deepEqual( Stem("båter"), "båt");});
test("båtplass -> båtplass", function() {deepEqual( Stem("båtplass"), "båtplass");});
test("båtripa -> båtrip", function() {deepEqual( Stem("båtripa"), "båtrip");});
test("bære -> bær", function() {deepEqual( Stem("bære"), "bær");});
test("bærebjelker -> bærebjelk", function() {deepEqual( Stem("bærebjelker"), "bærebjelk");});
test("bæreevne -> bæreevn", function() {deepEqual( Stem("bæreevne"), "bæreevn");});
test("bærekraftig -> bærekraft", function() {deepEqual( Stem("bærekraftig"), "bærekraft");});
test("bærende -> bær", function() {deepEqual( Stem("bærende"), "bær");});
test("bærer -> bær", function() {deepEqual( Stem("bærer"), "bær");});
test("bæres -> bær", function() {deepEqual( Stem("bæres"), "bær");});
test("bærum -> bærum", function() {deepEqual( Stem("bærum"), "bærum");});
test("bøe -> bøe", function() {deepEqual( Stem("bøe"), "bøe");});
test("bøen -> bøen", function() {deepEqual( Stem("bøen"), "bøen");});
test("bøkene -> bøk", function() {deepEqual( Stem("bøkene"), "bøk");});
test("bøker -> bøk", function() {deepEqual( Stem("bøker"), "bøk");});
test("bølgene -> bølg", function() {deepEqual( Stem("bølgene"), "bølg");});
test("bølger -> bølg", function() {deepEqual( Stem("bølger"), "bølg");});
test("bølgje -> bølgj", function() {deepEqual( Stem("bølgje"), "bølgj");});
test("bønder -> bønd", function() {deepEqual( Stem("bønder"), "bønd");});
test("bønnfaller -> bønnfall", function() {deepEqual( Stem("bønnfaller"), "bønnfall");});
test("bønnfalt -> bønnfalt", function() {deepEqual( Stem("bønnfalt"), "bønnfalt");});
test("bør -> bør", function() {deepEqual( Stem("bør"), "bør");});
test("børge -> børg", function() {deepEqual( Stem("børge"), "børg");});
test("børs -> bør", function() {deepEqual( Stem("børs"), "bør");});
test("børstet -> børst", function() {deepEqual( Stem("børstet"), "børst");});
test("bøte -> bøt", function() {deepEqual( Stem("bøte"), "bøt");});
test("bøter -> bøt", function() {deepEqual( Stem("bøter"), "bøt");});
test("bøtter -> bøtt", function() {deepEqual( Stem("bøtter"), "bøtt");});
test("bøyd -> bøyd", function() {deepEqual( Stem("bøyd"), "bøyd");});
test("bøye -> bøye", function() {deepEqual( Stem("bøye"), "bøye");});
test("bøyer -> bøyer", function() {deepEqual( Stem("bøyer"), "bøyer");});
test("bøyes -> bøyes", function() {deepEqual( Stem("bøyes"), "bøyes");});
test("bøyet -> bøyet", function() {deepEqual( Stem("bøyet"), "bøyet");});
test("bøyla -> bøyl", function() {deepEqual( Stem("bøyla"), "bøyl");});
test("c -> c", function() {deepEqual( Stem("c"), "c");});
test("ca -> ca", function() {deepEqual( Stem("ca"), "ca");});
test("cargo -> cargo", function() {deepEqual( Stem("cargo"), "cargo");});
test("cargos -> cargo", function() {deepEqual( Stem("cargos"), "cargo");});
test("carl -> carl", function() {deepEqual( Stem("carl"), "carl");});
test("cecodhas -> cecodh", function() {deepEqual( Stem("cecodhas"), "cecodh");});
test("cellulose -> cellulos", function() {deepEqual( Stem("cellulose"), "cellulos");});
test("centralforening -> centralforening", function() {deepEqual( Stem("centralforening"), "centralforening");});
test("chilenske -> chilensk", function() {deepEqual( Stem("chilenske"), "chilensk");});
test("christina -> christin", function() {deepEqual( Stem("christina"), "christin");});
test("christine -> christin", function() {deepEqual( Stem("christine"), "christin");});
test("cif -> cif", function() {deepEqual( Stem("cif"), "cif");});
test("clay -> clay", function() {deepEqual( Stem("clay"), "clay");});
test("cluster -> clust", function() {deepEqual( Stem("cluster"), "clust");});
test("clusteret -> cluster", function() {deepEqual( Stem("clusteret"), "cluster");});
test("co -> co", function() {deepEqual( Stem("co"), "co");});
test("coloroll -> coloroll", function() {deepEqual( Stem("coloroll"), "coloroll");});
test("com -> com", function() {deepEqual( Stem("com"), "com");});
test("comite -> comit", function() {deepEqual( Stem("comite"), "comit");});
test("common -> common", function() {deepEqual( Stem("common"), "common");});
test("compensation -> compensation", function() {deepEqual( Stem("compensation"), "compensation");});
test("confederazione -> confederazion", function() {deepEqual( Stem("confederazione"), "confederazion");});
test("container -> contain", function() {deepEqual( Stem("container"), "contain");});
test("containeraktivitet -> containeraktivit", function() {deepEqual( Stem("containeraktivitet"), "containeraktivit");});
test("containeraktivitetene -> containeraktivitet", function() {deepEqual( Stem("containeraktivitetene"), "containeraktivitet");});
test("containerareal -> containerareal", function() {deepEqual( Stem("containerareal"), "containerareal");});
test("containerarealene -> containerareal", function() {deepEqual( Stem("containerarealene"), "containerareal");});
test("containerarealer -> containerareal", function() {deepEqual( Stem("containerarealer"), "containerareal");});
test("containerarealet -> containerareal", function() {deepEqual( Stem("containerarealet"), "containerareal");});
test("containerdepotene -> containerdepot", function() {deepEqual( Stem("containerdepotene"), "containerdepot");});
test("containere -> container", function() {deepEqual( Stem("containere"), "container");});
test("containeren -> container", function() {deepEqual( Stem("containeren"), "container");});
test("containerfordeling -> containerfordeling", function() {deepEqual( Stem("containerfordeling"), "containerfordeling");});
test("containergods -> containergod", function() {deepEqual( Stem("containergods"), "containergod");});
test("containergodset -> containergods", function() {deepEqual( Stem("containergodset"), "containergods");});
test("containerhavn -> containerhavn", function() {deepEqual( Stem("containerhavn"), "containerhavn");});
test("containerhavnen -> containerhavn", function() {deepEqual( Stem("containerhavnen"), "containerhavn");});
test("containerhavnene -> containerhavn", function() {deepEqual( Stem("containerhavnene"), "containerhavn");});
test("containerhavner -> containerhavn", function() {deepEqual( Stem("containerhavner"), "containerhavn");});
test("containerhåndtering -> containerhåndtering", function() {deepEqual( Stem("containerhåndtering"), "containerhåndtering");});
test("containerhåndteringen -> containerhåndtering", function() {deepEqual( Stem("containerhåndteringen"), "containerhåndtering");});
test("containerhåndteringskapasitet -> containerhåndteringskapasit", function() {deepEqual( Stem("containerhåndteringskapasitet"), "containerhåndteringskapasit");});
test("containerhåndteringsområdet -> containerhåndteringsområd", function() {deepEqual( Stem("containerhåndteringsområdet"), "containerhåndteringsområd");});
test("containerisere -> containeriser", function() {deepEqual( Stem("containerisere"), "containeriser");});
test("containerisering -> containerisering", function() {deepEqual( Stem("containerisering"), "containerisering");});
test("containeriseringsgrad -> containeriseringsgrad", function() {deepEqual( Stem("containeriseringsgrad"), "containeriseringsgrad");});
test("containeriseringsgraden -> containeriseringsgrad", function() {deepEqual( Stem("containeriseringsgraden"), "containeriseringsgrad");});
test("containerisert -> containeriser", function() {deepEqual( Stem("containerisert"), "containeriser");});
test("containeriserte -> containeriser", function() {deepEqual( Stem("containeriserte"), "containeriser");});
test("containerkapasitet -> containerkapasit", function() {deepEqual( Stem("containerkapasitet"), "containerkapasit");});
test("containerkraner -> containerkran", function() {deepEqual( Stem("containerkraner"), "containerkran");});
test("containerlast -> containerl", function() {deepEqual( Stem("containerlast"), "containerl");});
test("containermarkedet -> containermarked", function() {deepEqual( Stem("containermarkedet"), "containermarked");});
test("containerne -> containern", function() {deepEqual( Stem("containerne"), "containern");});
test("containernes -> containern", function() {deepEqual( Stem("containernes"), "containern");});
test("containeromlasting -> containeromlasting", function() {deepEqual( Stem("containeromlasting"), "containeromlasting");});
test("containeromsetning -> containeromsetning", function() {deepEqual( Stem("containeromsetning"), "containeromsetning");});
test("containeromslag -> containeromslag", function() {deepEqual( Stem("containeromslag"), "containeromslag");});
test("containeromslaget -> containeromslag", function() {deepEqual( Stem("containeromslaget"), "containeromslag");});
test("containerrederiene -> containerrederi", function() {deepEqual( Stem("containerrederiene"), "containerrederi");});
test("containerruter -> containerrut", function() {deepEqual( Stem("containerruter"), "containerrut");});
test("containerskip -> containerskip", function() {deepEqual( Stem("containerskip"), "containerskip");});
test("containerskipene -> containerskip", function() {deepEqual( Stem("containerskipene"), "containerskip");});
test("containerskipenes -> containerskip", function() {deepEqual( Stem("containerskipenes"), "containerskip");});
test("containerterminal -> containerterminal", function() {deepEqual( Stem("containerterminal"), "containerterminal");});
test("containerterminalen -> containerterminal", function() {deepEqual( Stem("containerterminalen"), "containerterminal");});
test("containerterminalene -> containerterminal", function() {deepEqual( Stem("containerterminalene"), "containerterminal");});
test("containerterminaler -> containerterminal", function() {deepEqual( Stem("containerterminaler"), "containerterminal");});
test("containertrafikk -> containertrafikk", function() {deepEqual( Stem("containertrafikk"), "containertrafikk");});
test("containertrafikken -> containertrafikk", function() {deepEqual( Stem("containertrafikken"), "containertrafikk");});
test("containertransport -> containertransport", function() {deepEqual( Stem("containertransport"), "containertransport");});
test("containertransporten -> containertransport", function() {deepEqual( Stem("containertransporten"), "containertransport");});
test("containertransporter -> containertransport", function() {deepEqual( Stem("containertransporter"), "containertransport");});
test("containerutstyret -> containerutstyr", function() {deepEqual( Stem("containerutstyret"), "containerutstyr");});
test("containervekst -> containervekst", function() {deepEqual( Stem("containervekst"), "containervekst");});
test("containerveksten -> containervekst", function() {deepEqual( Stem("containerveksten"), "containervekst");});
test("containervirksomhet -> containervirksom", function() {deepEqual( Stem("containervirksomhet"), "containervirksom");});
test("containervirksomheten -> containervirksom", function() {deepEqual( Stem("containervirksomheten"), "containervirksom");});
test("containervolum -> containervolum", function() {deepEqual( Stem("containervolum"), "containervolum");});
test("containervolumene -> containervolum", function() {deepEqual( Stem("containervolumene"), "containervolum");});
test("containervolumer -> containervolum", function() {deepEqual( Stem("containervolumer"), "containervolum");});
test("cooperative -> cooperativ", function() {deepEqual( Stem("cooperative"), "cooperativ");});
test("coordination -> coordination", function() {deepEqual( Stem("coordination"), "coordination");});
test("cost -> cost", function() {deepEqual( Stem("cost"), "cost");});
test("cruise -> cruis", function() {deepEqual( Stem("cruise"), "cruis");});
test("ctse -> ctse", function() {deepEqual( Stem("ctse"), "ctse");});
test("d -> d", function() {deepEqual( Stem("d"), "d");});
test("da -> da", function() {deepEqual( Stem("da"), "da");});
test("dag -> dag", function() {deepEqual( Stem("dag"), "dag");});
test("dagar -> dag", function() {deepEqual( Stem("dagar"), "dag");});
test("dagbok -> dagbok", function() {deepEqual( Stem("dagbok"), "dagbok");});
test("dagen -> dag", function() {deepEqual( Stem("dagen"), "dag");});
test("dagene -> dag", function() {deepEqual( Stem("dagene"), "dag");});
test("dagens -> dag", function() {deepEqual( Stem("dagens"), "dag");});
test("dager -> dag", function() {deepEqual( Stem("dager"), "dag");});
test("dagfinn -> dagfinn", function() {deepEqual( Stem("dagfinn"), "dagfinn");});
test("daggry -> daggry", function() {deepEqual( Stem("daggry"), "daggry");});
test("daghjem -> daghjem", function() {deepEqual( Stem("daghjem"), "daghjem");});
test("dagjeldande -> dagjeld", function() {deepEqual( Stem("dagjeldande"), "dagjeld");});
test("dagjeldende -> dagjeld", function() {deepEqual( Stem("dagjeldende"), "dagjeld");});
test("dagleg -> dag", function() {deepEqual( Stem("dagleg"), "dag");});
test("daglege -> dag", function() {deepEqual( Stem("daglege"), "dag");});
test("daglig -> dag", function() {deepEqual( Stem("daglig"), "dag");});
test("daglige -> dag", function() {deepEqual( Stem("daglige"), "dag");});
test("dagligliv -> dagligliv", function() {deepEqual( Stem("dagligliv"), "dagligliv");});
test("dagliglivet -> dagligliv", function() {deepEqual( Stem("dagliglivet"), "dagligliv");});
test("dagligvarer -> dagligvar", function() {deepEqual( Stem("dagligvarer"), "dagligvar");});
test("dagmulkt -> dagmulkt", function() {deepEqual( Stem("dagmulkt"), "dagmulkt");});
test("dagslys -> dagsly", function() {deepEqual( Stem("dagslys"), "dagsly");});
test("dagslysbegrensninger -> dagslysbegrensning", function() {deepEqual( Stem("dagslysbegrensninger"), "dagslysbegrensning");});
test("dagslyset -> dagslys", function() {deepEqual( Stem("dagslyset"), "dagslys");});
test("dagtid -> dagtid", function() {deepEqual( Stem("dagtid"), "dagtid");});
test("dal -> dal", function() {deepEqual( Stem("dal"), "dal");});
test("dalarnas -> dalarn", function() {deepEqual( Stem("dalarnas"), "dalarn");});
test("dale -> dal", function() {deepEqual( Stem("dale"), "dal");});
test("daler -> dal", function() {deepEqual( Stem("daler"), "dal");});
test("dalsøkk -> dalsøkk", function() {deepEqual( Stem("dalsøkk"), "dalsøkk");});
test("dam -> dam", function() {deepEqual( Stem("dam"), "dam");});
test("damper -> damp", function() {deepEqual( Stem("damper"), "damp");});
test("danielsen -> dani", function() {deepEqual( Stem("danielsen"), "dani");});
test("danmark -> danmark", function() {deepEqual( Stem("danmark"), "danmark");});
test("danmarks -> danmark", function() {deepEqual( Stem("danmarks"), "danmark");});
test("danne -> dann", function() {deepEqual( Stem("danne"), "dann");});
test("dannelsen -> dann", function() {deepEqual( Stem("dannelsen"), "dann");});
test("danner -> dann", function() {deepEqual( Stem("danner"), "dann");});
test("dannes -> dann", function() {deepEqual( Stem("dannes"), "dann");});
test("dannet -> dann", function() {deepEqual( Stem("dannet"), "dann");});
test("dansen -> dans", function() {deepEqual( Stem("dansen"), "dans");});
test("danser -> dans", function() {deepEqual( Stem("danser"), "dans");});
test("danset -> dans", function() {deepEqual( Stem("danset"), "dans");});
test("dansk -> dansk", function() {deepEqual( Stem("dansk"), "dansk");});
test("danske -> dansk", function() {deepEqual( Stem("danske"), "dansk");});
test("data -> dat", function() {deepEqual( Stem("data"), "dat");});
test("database -> databas", function() {deepEqual( Stem("database"), "databas");});
test("dataene -> data", function() {deepEqual( Stem("dataene"), "data");});
test("datainnsamlingsmetode -> datainnsamlingsmetod", function() {deepEqual( Stem("datainnsamlingsmetode"), "datainnsamlingsmetod");});
test("datamateriale -> datamaterial", function() {deepEqual( Stem("datamateriale"), "datamaterial");});
test("datasystem -> datasystem", function() {deepEqual( Stem("datasystem"), "datasystem");});
test("datasystema -> datasystem", function() {deepEqual( Stem("datasystema"), "datasystem");});
test("daterast -> dater", function() {deepEqual( Stem("daterast"), "dater");});
test("datere -> dater", function() {deepEqual( Stem("datere"), "dater");});
test("datert -> dater", function() {deepEqual( Stem("datert"), "dater");});
test("dato -> dato", function() {deepEqual( Stem("dato"), "dato");});
test("datoen -> dato", function() {deepEqual( Stem("datoen"), "dato");});
test("datter -> datt", function() {deepEqual( Stem("datter"), "datt");});
test("datteren -> datter", function() {deepEqual( Stem("datteren"), "datter");});
test("datterselskap -> datterselskap", function() {deepEqual( Stem("datterselskap"), "datterselskap");});
test("datterselskaper -> datterselskap", function() {deepEqual( Stem("datterselskaper"), "datterselskap");});
test("daværende -> davær", function() {deepEqual( Stem("daværende"), "davær");});
test("de -> de", function() {deepEqual( Stem("de"), "de");});
test("debatt -> debatt", function() {deepEqual( Stem("debatt"), "debatt");});
test("debatten -> debatt", function() {deepEqual( Stem("debatten"), "debatt");});
test("debitert -> debiter", function() {deepEqual( Stem("debitert"), "debiter");});
test("debitor -> debitor", function() {deepEqual( Stem("debitor"), "debitor");});
test("dedikerte -> dediker", function() {deepEqual( Stem("dedikerte"), "dediker");});
test("defekte -> defekt", function() {deepEqual( Stem("defekte"), "defekt");});
test("definere -> definer", function() {deepEqual( Stem("definere"), "definer");});
test("definerer -> definer", function() {deepEqual( Stem("definerer"), "definer");});
test("defineres -> definer", function() {deepEqual( Stem("defineres"), "definer");});
test("definert -> definer", function() {deepEqual( Stem("definert"), "definer");});
test("definerte -> definer", function() {deepEqual( Stem("definerte"), "definer");});
test("definisjon -> definisjon", function() {deepEqual( Stem("definisjon"), "definisjon");});
test("definisjonane -> definisjon", function() {deepEqual( Stem("definisjonane"), "definisjon");});
test("definisjonar -> definisjon", function() {deepEqual( Stem("definisjonar"), "definisjon");});
test("definisjonen -> definisjon", function() {deepEqual( Stem("definisjonen"), "definisjon");});
test("definisjonene -> definisjon", function() {deepEqual( Stem("definisjonene"), "definisjon");});
test("definisjoner -> definisjon", function() {deepEqual( Stem("definisjoner"), "definisjon");});
test("definitive -> definitiv", function() {deepEqual( Stem("definitive"), "definitiv");});
test("definitivt -> definitiv", function() {deepEqual( Stem("definitivt"), "definitiv");});
test("deg -> deg", function() {deepEqual( Stem("deg"), "deg");});
test("dei -> dei", function() {deepEqual( Stem("dei"), "dei");});
test("deig -> deig", function() {deepEqual( Stem("deig"), "deig");});
test("deilig -> deil", function() {deepEqual( Stem("deilig"), "deil");});
test("deilige -> deil", function() {deepEqual( Stem("deilige"), "deil");});
test("deiligste -> deiligst", function() {deepEqual( Stem("deiligste"), "deiligst");});
test("deira -> deir", function() {deepEqual( Stem("deira"), "deir");});
test("deiser -> deis", function() {deepEqual( Stem("deiser"), "deis");});
test("dekar -> dek", function() {deepEqual( Stem("dekar"), "dek");});
test("dekk -> dekk", function() {deepEqual( Stem("dekk"), "dekk");});
test("dekke -> dekk", function() {deepEqual( Stem("dekke"), "dekk");});
test("dekkende -> dekk", function() {deepEqual( Stem("dekkende"), "dekk");});
test("dekker -> dekk", function() {deepEqual( Stem("dekker"), "dekk");});
test("dekkes -> dekk", function() {deepEqual( Stem("dekkes"), "dekk");});
test("dekket -> dekk", function() {deepEqual( Stem("dekket"), "dekk");});
test("dekkjast -> dekkj", function() {deepEqual( Stem("dekkjast"), "dekkj");});
test("dekkje -> dekkj", function() {deepEqual( Stem("dekkje"), "dekkj");});
test("dekkjer -> dekkj", function() {deepEqual( Stem("dekkjer"), "dekkj");});
test("dekkshøyde -> dekkshøyd", function() {deepEqual( Stem("dekkshøyde"), "dekkshøyd");});
test("dekning -> dekning", function() {deepEqual( Stem("dekning"), "dekning");});
test("dekninga -> dekning", function() {deepEqual( Stem("dekninga"), "dekning");});
test("dekningen -> dekning", function() {deepEqual( Stem("dekningen"), "dekning");});
test("dekningslova -> dekning", function() {deepEqual( Stem("dekningslova"), "dekning");});
test("dekningsområde -> dekningsområd", function() {deepEqual( Stem("dekningsområde"), "dekningsområd");});
test("dekningsprosent -> dekningsprosent", function() {deepEqual( Stem("dekningsprosent"), "dekningsprosent");});
test("dekningsrett -> dekningsrett", function() {deepEqual( Stem("dekningsrett"), "dekningsrett");});
test("dekt -> dekt", function() {deepEqual( Stem("dekt"), "dekt");});
test("dekte -> dekt", function() {deepEqual( Stem("dekte"), "dekt");});
test("del -> del", function() {deepEqual( Stem("del"), "del");});
test("delar -> del", function() {deepEqual( Stem("delar"), "del");});
test("delast -> del", function() {deepEqual( Stem("delast"), "del");});
test("dele -> del", function() {deepEqual( Stem("dele"), "del");});
test("delegasjon -> delegasjon", function() {deepEqual( Stem("delegasjon"), "delegasjon");});
test("delegere -> deleger", function() {deepEqual( Stem("delegere"), "deleger");});
test("delegering -> delegering", function() {deepEqual( Stem("delegering"), "delegering");});
test("delegert -> deleger", function() {deepEqual( Stem("delegert"), "deleger");});
test("delegerte -> deleger", function() {deepEqual( Stem("delegerte"), "deleger");});
test("delegertforsamling -> delegertforsamling", function() {deepEqual( Stem("delegertforsamling"), "delegertforsamling");});
test("delegertordning -> delegertordning", function() {deepEqual( Stem("delegertordning"), "delegertordning");});
test("delegertordningar -> delegertordning", function() {deepEqual( Stem("delegertordningar"), "delegertordning");});
test("deleige -> del", function() {deepEqual( Stem("deleige"), "del");});
test("delen -> del", function() {deepEqual( Stem("delen"), "del");});
test("delene -> del", function() {deepEqual( Stem("delene"), "del");});
test("delentreprisar -> delentrepris", function() {deepEqual( Stem("delentreprisar"), "delentrepris");});
test("deler -> del", function() {deepEqual( Stem("deler"), "del");});
test("deles -> del", function() {deepEqual( Stem("deles"), "del");});
test("deling -> deling", function() {deepEqual( Stem("deling"), "deling");});
test("delinga -> deling", function() {deepEqual( Stem("delinga"), "deling");});
test("delingen -> deling", function() {deepEqual( Stem("delingen"), "deling");});
test("delingsforholdet -> delingsforhold", function() {deepEqual( Stem("delingsforholdet"), "delingsforhold");});
test("delingsreglene -> delingsregl", function() {deepEqual( Stem("delingsreglene"), "delingsregl");});
test("delingsregler -> delingsregl", function() {deepEqual( Stem("delingsregler"), "delingsregl");});
test("delingstilfella -> delingstilfell", function() {deepEqual( Stem("delingstilfella"), "delingstilfell");});
test("delingsåret -> delingsår", function() {deepEqual( Stem("delingsåret"), "delingsår");});
test("delje -> delj", function() {deepEqual( Stem("delje"), "delj");});
test("delkapittel -> delkapittel", function() {deepEqual( Stem("delkapittel"), "delkapittel");});
test("della -> dell", function() {deepEqual( Stem("della"), "dell");});
test("delle -> dell", function() {deepEqual( Stem("delle"), "dell");});
test("delling -> delling", function() {deepEqual( Stem("delling"), "delling");});
test("delmål -> delmål", function() {deepEqual( Stem("delmål"), "delmål");});
test("delmålene -> delmål", function() {deepEqual( Stem("delmålene"), "delmål");});
test("delområder -> delområd", function() {deepEqual( Stem("delområder"), "delområd");});
test("delplanarbeidet -> delplanarbeid", function() {deepEqual( Stem("delplanarbeidet"), "delplanarbeid");});
test("delrapport -> delrapport", function() {deepEqual( Stem("delrapport"), "delrapport");});
test("delrapporter -> delrapport", function() {deepEqual( Stem("delrapporter"), "delrapport");});
test("dels -> del", function() {deepEqual( Stem("dels"), "del");});
test("delsystemet -> delsystem", function() {deepEqual( Stem("delsystemet"), "delsystem");});
test("delt -> delt", function() {deepEqual( Stem("delt"), "delt");});
test("delta -> delt", function() {deepEqual( Stem("delta"), "delt");});
test("deltagelse -> deltag", function() {deepEqual( Stem("deltagelse"), "deltag");});
test("deltagende -> deltag", function() {deepEqual( Stem("deltagende"), "deltag");});
test("deltager -> deltag", function() {deepEqual( Stem("deltager"), "deltag");});
test("deltagerforhold -> deltagerforhold", function() {deepEqual( Stem("deltagerforhold"), "deltagerforhold");});
test("deltagerkommunene -> deltagerkommun", function() {deepEqual( Stem("deltagerkommunene"), "deltagerkommun");});
test("deltagerkommunenes -> deltagerkommun", function() {deepEqual( Stem("deltagerkommunenes"), "deltagerkommun");});
test("deltakar -> deltak", function() {deepEqual( Stem("deltakar"), "deltak");});
test("deltakarane -> deltakar", function() {deepEqual( Stem("deltakarane"), "deltakar");});
test("deltakarar -> deltakar", function() {deepEqual( Stem("deltakarar"), "deltakar");});
test("deltakartal -> deltakartal", function() {deepEqual( Stem("deltakartal"), "deltakartal");});
test("deltakelse -> deltak", function() {deepEqual( Stem("deltakelse"), "deltak");});
test("deltakende -> deltak", function() {deepEqual( Stem("deltakende"), "deltak");});
test("deltaker -> deltak", function() {deepEqual( Stem("deltaker"), "deltak");});
test("deltakere -> deltaker", function() {deepEqual( Stem("deltakere"), "deltaker");});
test("deltakerforhold -> deltakerforhold", function() {deepEqual( Stem("deltakerforhold"), "deltakerforhold");});
test("deltakerkommunene -> deltakerkommun", function() {deepEqual( Stem("deltakerkommunene"), "deltakerkommun");});
test("deltakerkommunenes -> deltakerkommun", function() {deepEqual( Stem("deltakerkommunenes"), "deltakerkommun");});
test("deltakerlignende -> deltakerlign", function() {deepEqual( Stem("deltakerlignende"), "deltakerlign");});
test("deltakerne -> deltakern", function() {deepEqual( Stem("deltakerne"), "deltakern");});
test("deltaking -> deltaking", function() {deepEqual( Stem("deltaking"), "deltaking");});
test("deltakinga -> deltaking", function() {deepEqual( Stem("deltakinga"), "deltaking");});
test("deltar -> delt", function() {deepEqual( Stem("deltar"), "delt");});
test("deltatt -> deltatt", function() {deepEqual( Stem("deltatt"), "deltatt");});
test("delte -> delt", function() {deepEqual( Stem("delte"), "delt");});
test("deltid -> deltid", function() {deepEqual( Stem("deltid"), "deltid");});
test("deltids -> deltid", function() {deepEqual( Stem("deltids"), "deltid");});
test("deltidsandel -> deltidsandel", function() {deepEqual( Stem("deltidsandel"), "deltidsandel");});
test("deltidsansatte -> deltidsansatt", function() {deepEqual( Stem("deltidsansatte"), "deltidsansatt");});
test("deltidsansattes -> deltidsansatt", function() {deepEqual( Stem("deltidsansattes"), "deltidsansatt");});
test("deltidsarbeidere -> deltidsarbeider", function() {deepEqual( Stem("deltidsarbeidere"), "deltidsarbeider");});
test("deltidsstilling -> deltidsstilling", function() {deepEqual( Stem("deltidsstilling"), "deltidsstilling");});
test("deltok -> deltok", function() {deepEqual( Stem("deltok"), "deltok");});
test("delutredning -> delutredning", function() {deepEqual( Stem("delutredning"), "delutredning");});
test("delutredninger -> delutredning", function() {deepEqual( Stem("delutredninger"), "delutredning");});
test("delvis -> delvis", function() {deepEqual( Stem("delvis"), "delvis");});
test("dem -> dem", function() {deepEqual( Stem("dem"), "dem");});
test("demmes -> demm", function() {deepEqual( Stem("demmes"), "demm");});
test("demokrati -> demokrati", function() {deepEqual( Stem("demokrati"), "demokrati");});
test("demokratisk -> demokratisk", function() {deepEqual( Stem("demokratisk"), "demokratisk");});
test("demokratiske -> demokratisk", function() {deepEqual( Stem("demokratiske"), "demokratisk");});
test("demper -> demp", function() {deepEqual( Stem("demper"), "demp");});
test("demre -> demr", function() {deepEqual( Stem("demre"), "demr");});
test("den -> den", function() {deepEqual( Stem("den"), "den");});
test("denger -> deng", function() {deepEqual( Stem("denger"), "deng");});
test("denne -> denn", function() {deepEqual( Stem("denne"), "denn");});
test("dennes -> denn", function() {deepEqual( Stem("dennes"), "denn");});
test("denofa -> denof", function() {deepEqual( Stem("denofa"), "denof");});
test("dens -> den", function() {deepEqual( Stem("dens"), "den");});
test("departement -> departement", function() {deepEqual( Stem("departement"), "departement");});
test("departementene -> departement", function() {deepEqual( Stem("departementene"), "departement");});
test("departementer -> departement", function() {deepEqual( Stem("departementer"), "departement");});
test("departementet -> departement", function() {deepEqual( Stem("departementet"), "departement");});
test("departementets -> departement", function() {deepEqual( Stem("departementets"), "departement");});
test("deponerast -> deponer", function() {deepEqual( Stem("deponerast"), "deponer");});
test("deponere -> deponer", function() {deepEqual( Stem("deponere"), "deponer");});
test("deponerer -> deponer", function() {deepEqual( Stem("deponerer"), "deponer");});
test("deponering -> deponering", function() {deepEqual( Stem("deponering"), "deponering");});
test("deponeringslova -> deponering", function() {deepEqual( Stem("deponeringslova"), "deponering");});
test("deponeringsordning -> deponeringsordning", function() {deepEqual( Stem("deponeringsordning"), "deponeringsordning");});
test("depot -> depot", function() {deepEqual( Stem("depot"), "depot");});
test("depoter -> depot", function() {deepEqual( Stem("depoter"), "depot");});
test("depothold -> depothold", function() {deepEqual( Stem("depothold"), "depothold");});
test("depotholdet -> depothold", function() {deepEqual( Stem("depotholdet"), "depothold");});
test("depotsted -> depotsted", function() {deepEqual( Stem("depotsted"), "depotsted");});
test("der -> der", function() {deepEqual( Stem("der"), "der");});
test("dere -> der", function() {deepEqual( Stem("dere"), "der");});
test("deres -> der", function() {deepEqual( Stem("deres"), "der");});
test("deretter -> derett", function() {deepEqual( Stem("deretter"), "derett");});
test("derfor -> derfor", function() {deepEqual( Stem("derfor"), "derfor");});
test("derfra -> derfr", function() {deepEqual( Stem("derfra"), "derfr");});
test("derfrå -> derfrå", function() {deepEqual( Stem("derfrå"), "derfrå");});
test("derigjennom -> derigjennom", function() {deepEqual( Stem("derigjennom"), "derigjennom");});
test("derimot -> derimot", function() {deepEqual( Stem("derimot"), "derimot");});
test("dermed -> dermed", function() {deepEqual( Stem("dermed"), "dermed");});
test("dernest -> dernest", function() {deepEqual( Stem("dernest"), "dernest");});
test("dersom -> dersom", function() {deepEqual( Stem("dersom"), "dersom");});
test("dertil -> dertil", function() {deepEqual( Stem("dertil"), "dertil");});
test("derunder -> derund", function() {deepEqual( Stem("derunder"), "derund");});
test("derved -> derved", function() {deepEqual( Stem("derved"), "derved");});
test("des -> des", function() {deepEqual( Stem("des"), "des");});
test("desember -> desemb", function() {deepEqual( Stem("desember"), "desemb");});
test("desentralisert -> desentraliser", function() {deepEqual( Stem("desentralisert"), "desentraliser");});
test("desse -> dess", function() {deepEqual( Stem("desse"), "dess");});
test("dessutan -> dessutan", function() {deepEqual( Stem("dessutan"), "dessutan");});
test("dessuten -> dessut", function() {deepEqual( Stem("dessuten"), "dessut");});
test("destinasjon -> destinasjon", function() {deepEqual( Stem("destinasjon"), "destinasjon");});
test("destinasjoner -> destinasjon", function() {deepEqual( Stem("destinasjoner"), "destinasjon");});
test("destinasjonsmønstre -> destinasjonsmønstr", function() {deepEqual( Stem("destinasjonsmønstre"), "destinasjonsmønstr");});
test("desto -> desto", function() {deepEqual( Stem("desto"), "desto");});
test("det -> det", function() {deepEqual( Stem("det"), "det");});
test("detalj -> detalj", function() {deepEqual( Stem("detalj"), "detalj");});
test("detaljane -> detalj", function() {deepEqual( Stem("detaljane"), "detalj");});
test("detaljeringsgrad -> detaljeringsgrad", function() {deepEqual( Stem("detaljeringsgrad"), "detaljeringsgrad");});
test("detaljert -> detaljer", function() {deepEqual( Stem("detaljert"), "detaljer");});
test("detaljerte -> detaljer", function() {deepEqual( Stem("detaljerte"), "detaljer");});
test("detaljleddet -> detaljledd", function() {deepEqual( Stem("detaljleddet"), "detaljledd");});
test("detaljregulere -> detaljreguler", function() {deepEqual( Stem("detaljregulere"), "detaljreguler");});
test("detaljregulert -> detaljreguler", function() {deepEqual( Stem("detaljregulert"), "detaljreguler");});
test("dets -> det", function() {deepEqual( Stem("dets"), "det");});
test("detta -> dett", function() {deepEqual( Stem("detta"), "dett");});
test("dette -> dett", function() {deepEqual( Stem("dette"), "dett");});
test("deutscher -> deutsch", function() {deepEqual( Stem("deutscher"), "deutsch");});
test("dfds -> dfds", function() {deepEqual( Stem("dfds"), "dfds");});
test("dh -> dh", function() {deepEqual( Stem("dh"), "dh");});
test("di -> di", function() {deepEqual( Stem("di"), "di");});
test("dialog -> dialog", function() {deepEqual( Stem("dialog"), "dialog");});
test("die -> die", function() {deepEqual( Stem("die"), "die");});
test("differanse -> differans", function() {deepEqual( Stem("differanse"), "differans");});
test("differansen -> differans", function() {deepEqual( Stem("differansen"), "differans");});
test("differanser -> differans", function() {deepEqual( Stem("differanser"), "differans");});
test("differensierte -> differensier", function() {deepEqual( Stem("differensierte"), "differensier");});
test("diger -> dig", function() {deepEqual( Stem("diger"), "dig");});
test("digert -> diger", function() {deepEqual( Stem("digert"), "diger");});
test("digre -> digr", function() {deepEqual( Stem("digre"), "digr");});
test("dikte -> dikt", function() {deepEqual( Stem("dikte"), "dikt");});
test("diktere -> dikter", function() {deepEqual( Stem("diktere"), "dikter");});
test("dikteren -> dikter", function() {deepEqual( Stem("dikteren"), "dikter");});
test("dikteres -> dikter", function() {deepEqual( Stem("dikteres"), "dikter");});
test("dikterkunstens -> dikterkunst", function() {deepEqual( Stem("dikterkunstens"), "dikterkunst");});
test("dilemma -> dilemm", function() {deepEqual( Stem("dilemma"), "dilemm");});
test("diltende -> dilt", function() {deepEqual( Stem("diltende"), "dilt");});
test("dimensjoner -> dimensjon", function() {deepEqual( Stem("dimensjoner"), "dimensjon");});
test("dimensjonerende -> dimensjoner", function() {deepEqual( Stem("dimensjonerende"), "dimensjoner");});
test("dimensjonering -> dimensjonering", function() {deepEqual( Stem("dimensjonering"), "dimensjonering");});
test("din -> din", function() {deepEqual( Stem("din"), "din");});
test("dine -> din", function() {deepEqual( Stem("dine"), "din");});
test("dingler -> dingl", function() {deepEqual( Stem("dingler"), "dingl");});
test("dir -> dir", function() {deepEqual( Stem("dir"), "dir");});
test("direkte -> direkt", function() {deepEqual( Stem("direkte"), "direkt");});
test("direktekrav -> direktekrav", function() {deepEqual( Stem("direktekrav"), "direktekrav");});
test("direktekravsregel -> direktekravsregel", function() {deepEqual( Stem("direktekravsregel"), "direktekravsregel");});
test("direkteutdelingar -> direkteutdeling", function() {deepEqual( Stem("direkteutdelingar"), "direkteutdeling");});
test("direktiv -> direktiv", function() {deepEqual( Stem("direktiv"), "direktiv");});
test("direktivbestemmelsen -> direktivbestemm", function() {deepEqual( Stem("direktivbestemmelsen"), "direktivbestemm");});
test("direktivet -> direktiv", function() {deepEqual( Stem("direktivet"), "direktiv");});
test("direktivets -> direktiv", function() {deepEqual( Stem("direktivets"), "direktiv");});
test("direktør -> direktør", function() {deepEqual( Stem("direktør"), "direktør");});
test("dirigerer -> diriger", function() {deepEqual( Stem("dirigerer"), "diriger");});
test("dirigeres -> diriger", function() {deepEqual( Stem("dirigeres"), "diriger");});
test("dirre -> dirr", function() {deepEqual( Stem("dirre"), "dirr");});
test("dirrer -> dirr", function() {deepEqual( Stem("dirrer"), "dirr");});
test("disaggregert -> disaggreger", function() {deepEqual( Stem("disaggregert"), "disaggreger");});
test("diskriminerande -> diskriminer", function() {deepEqual( Stem("diskriminerande"), "diskriminer");});
test("diskriminere -> diskriminer", function() {deepEqual( Stem("diskriminere"), "diskriminer");});
test("diskriminering -> diskriminering", function() {deepEqual( Stem("diskriminering"), "diskriminering");});
test("diskrimineringsforbod -> diskrimineringsforbod", function() {deepEqual( Stem("diskrimineringsforbod"), "diskrimineringsforbod");});
test("diskusjon -> diskusjon", function() {deepEqual( Stem("diskusjon"), "diskusjon");});
test("diskusjonar -> diskusjon", function() {deepEqual( Stem("diskusjonar"), "diskusjon");});
test("diskusjonen -> diskusjon", function() {deepEqual( Stem("diskusjonen"), "diskusjon");});
test("diskutere -> diskuter", function() {deepEqual( Stem("diskutere"), "diskuter");});
test("diskuteres -> diskuter", function() {deepEqual( Stem("diskuteres"), "diskuter");});
test("diskutert -> diskuter", function() {deepEqual( Stem("diskutert"), "diskuter");});
test("dispensasjon -> dispensasjon", function() {deepEqual( Stem("dispensasjon"), "dispensasjon");});
test("dispensasjoner -> dispensasjon", function() {deepEqual( Stem("dispensasjoner"), "dispensasjon");});
test("disponere -> disponer", function() {deepEqual( Stem("disponere"), "disponer");});
test("disponerer -> disponer", function() {deepEqual( Stem("disponerer"), "disponer");});
test("disponeres -> disponer", function() {deepEqual( Stem("disponeres"), "disponer");});
test("disponering -> disponering", function() {deepEqual( Stem("disponering"), "disponering");});
test("disponeringen -> disponering", function() {deepEqual( Stem("disponeringen"), "disponering");});
test("disponert -> disponer", function() {deepEqual( Stem("disponert"), "disponer");});
test("disponerte -> disponer", function() {deepEqual( Stem("disponerte"), "disponer");});
test("disposisjon -> disposisjon", function() {deepEqual( Stem("disposisjon"), "disposisjon");});
test("disposisjonane -> disposisjon", function() {deepEqual( Stem("disposisjonane"), "disposisjon");});
test("disposisjonar -> disposisjon", function() {deepEqual( Stem("disposisjonar"), "disposisjon");});
test("disposisjonen -> disposisjon", function() {deepEqual( Stem("disposisjonen"), "disposisjon");});
test("disposisjoner -> disposisjon", function() {deepEqual( Stem("disposisjoner"), "disposisjon");});
test("disposisjonsrett -> disposisjonsrett", function() {deepEqual( Stem("disposisjonsrett"), "disposisjonsrett");});
test("disposisjonsretten -> disposisjonsrett", function() {deepEqual( Stem("disposisjonsretten"), "disposisjonsrett");});
test("disse -> diss", function() {deepEqual( Stem("disse"), "diss");});
test("dissens -> diss", function() {deepEqual( Stem("dissens"), "diss");});
test("dissensen -> dissens", function() {deepEqual( Stem("dissensen"), "dissens");});
test("disses -> diss", function() {deepEqual( Stem("disses"), "diss");});
test("distanse -> distans", function() {deepEqual( Stem("distanse"), "distans");});
test("distanseavhengige -> distanseavheng", function() {deepEqual( Stem("distanseavhengige"), "distanseavheng");});
test("distansen -> distans", function() {deepEqual( Stem("distansen"), "distans");});
test("distanser -> distans", function() {deepEqual( Stem("distanser"), "distans");});
test("distribuerer -> distribuer", function() {deepEqual( Stem("distribuerer"), "distribuer");});
test("distribueres -> distribuer", function() {deepEqual( Stem("distribueres"), "distribuer");});
test("distribusjon -> distribusjon", function() {deepEqual( Stem("distribusjon"), "distribusjon");});
test("distribusjonen -> distribusjon", function() {deepEqual( Stem("distribusjonen"), "distribusjon");});
test("distribusjonsbiler -> distribusjonsbil", function() {deepEqual( Stem("distribusjonsbiler"), "distribusjonsbil");});
test("distribusjonsdistanser -> distribusjonsdistans", function() {deepEqual( Stem("distribusjonsdistanser"), "distribusjonsdistans");});
test("distribusjonsenhet -> distribusjonsen", function() {deepEqual( Stem("distribusjonsenhet"), "distribusjonsen");});
test("distribusjonsfunksjonen -> distribusjonsfunksjon", function() {deepEqual( Stem("distribusjonsfunksjonen"), "distribusjonsfunksjon");});
test("distribusjonsfunksjoner -> distribusjonsfunksjon", function() {deepEqual( Stem("distribusjonsfunksjoner"), "distribusjonsfunksjon");});
test("distribusjonskanalene -> distribusjonskanal", function() {deepEqual( Stem("distribusjonskanalene"), "distribusjonskanal");});
test("distribusjonskanaler -> distribusjonskanal", function() {deepEqual( Stem("distribusjonskanaler"), "distribusjonskanal");});
test("distribusjonslagre -> distribusjonslagr", function() {deepEqual( Stem("distribusjonslagre"), "distribusjonslagr");});
test("distribusjonsløsningene -> distribusjonsløsning", function() {deepEqual( Stem("distribusjonsløsningene"), "distribusjonsløsning");});
test("distribusjonsløsninger -> distribusjonsløsning", function() {deepEqual( Stem("distribusjonsløsninger"), "distribusjonsløsning");});
test("distribusjonsmønsteret -> distribusjonsmønster", function() {deepEqual( Stem("distribusjonsmønsteret"), "distribusjonsmønster");});
test("distribusjonsmønstre -> distribusjonsmønstr", function() {deepEqual( Stem("distribusjonsmønstre"), "distribusjonsmønstr");});
test("distribusjonsroller -> distribusjonsroll", function() {deepEqual( Stem("distribusjonsroller"), "distribusjonsroll");});
test("distribusjonsselskaper -> distribusjonsselskap", function() {deepEqual( Stem("distribusjonsselskaper"), "distribusjonsselskap");});
test("distribusjonssentraler -> distribusjonssentral", function() {deepEqual( Stem("distribusjonssentraler"), "distribusjonssentral");});
test("distribusjonssentrum -> distribusjonssentrum", function() {deepEqual( Stem("distribusjonssentrum"), "distribusjonssentrum");});
test("distribusjonssystemene -> distribusjonssystem", function() {deepEqual( Stem("distribusjonssystemene"), "distribusjonssystem");});
test("distribusjonsterminaler -> distribusjonsterminal", function() {deepEqual( Stem("distribusjonsterminaler"), "distribusjonsterminal");});
test("distribusjonstransporter -> distribusjonstransport", function() {deepEqual( Stem("distribusjonstransporter"), "distribusjonstransport");});
test("distribusjonsvirksomheten -> distribusjonsvirksom", function() {deepEqual( Stem("distribusjonsvirksomheten"), "distribusjonsvirksom");});
test("distributører -> distributør", function() {deepEqual( Stem("distributører"), "distributør");});
test("distriktene -> distrikt", function() {deepEqual( Stem("distriktene"), "distrikt");});
test("distrikts -> distrikt", function() {deepEqual( Stem("distrikts"), "distrikt");});
test("dit -> dit", function() {deepEqual( Stem("dit"), "dit");});
test("ditt -> ditt", function() {deepEqual( Stem("ditt"), "ditt");});
test("diverse -> divers", function() {deepEqual( Stem("diverse"), "divers");});
test("diversifisering -> diversifisering", function() {deepEqual( Stem("diversifisering"), "diversifisering");});
test("diversifisert -> diversifiser", function() {deepEqual( Stem("diversifisert"), "diversifiser");});
test("djerv -> djerv", function() {deepEqual( Stem("djerv"), "djerv");});
test("djervere -> djerver", function() {deepEqual( Stem("djervere"), "djerver");});
test("dkk -> dkk", function() {deepEqual( Stem("dkk"), "dkk");});
test("dobbel -> dobbel", function() {deepEqual( Stem("dobbel"), "dobbel");});
test("dobbelt -> dobbelt", function() {deepEqual( Stem("dobbelt"), "dobbelt");});
test("dobbeltbeskatning -> dobbeltbeskatning", function() {deepEqual( Stem("dobbeltbeskatning"), "dobbeltbeskatning");});
test("dobbelte -> dobbelt", function() {deepEqual( Stem("dobbelte"), "dobbelt");});
test("dobbeltpantsetjing -> dobbeltpantsetjing", function() {deepEqual( Stem("dobbeltpantsetjing"), "dobbeltpantsetjing");});
test("dobbeltrolle -> dobbeltroll", function() {deepEqual( Stem("dobbeltrolle"), "dobbeltroll");});
test("dobbeltrøyst -> dobbeltrøyst", function() {deepEqual( Stem("dobbeltrøyst"), "dobbeltrøyst");});
test("dobbeltsal -> dobbeltsal", function() {deepEqual( Stem("dobbeltsal"), "dobbeltsal");});
test("dobbeltspor -> dobbeltspor", function() {deepEqual( Stem("dobbeltspor"), "dobbeltspor");});
test("dobbeltsporet -> dobbeltspor", function() {deepEqual( Stem("dobbeltsporet"), "dobbeltspor");});
test("doble -> dobl", function() {deepEqual( Stem("doble"), "dobl");});
test("dobles -> dobl", function() {deepEqual( Stem("dobles"), "dobl");});
test("dobling -> dobling", function() {deepEqual( Stem("dobling"), "dobling");});
test("dog -> dog", function() {deepEqual( Stem("dog"), "dog");});
test("dokument -> dokument", function() {deepEqual( Stem("dokument"), "dokument");});
test("dokumenta -> dokument", function() {deepEqual( Stem("dokumenta"), "dokument");});
test("dokumentasjon -> dokumentasjon", function() {deepEqual( Stem("dokumentasjon"), "dokumentasjon");});
test("dokumentavgift -> dokumentavgift", function() {deepEqual( Stem("dokumentavgift"), "dokumentavgift");});
test("dokumenteigenskapar -> dokumenteigenskap", function() {deepEqual( Stem("dokumenteigenskapar"), "dokumenteigenskap");});
test("dokumentene -> dokument", function() {deepEqual( Stem("dokumentene"), "dokument");});
test("dokumenter -> dokument", function() {deepEqual( Stem("dokumenter"), "dokument");});
test("dokumentert -> dokumenter", function() {deepEqual( Stem("dokumentert"), "dokumenter");});
test("dokumentet -> dokument", function() {deepEqual( Stem("dokumentet"), "dokument");});
test("dokumenthandtering -> dokumenthandtering", function() {deepEqual( Stem("dokumenthandtering"), "dokumenthandtering");});
test("dom -> dom", function() {deepEqual( Stem("dom"), "dom");});
test("dominans -> dominan", function() {deepEqual( Stem("dominans"), "dominan");});
test("dominerande -> dominer", function() {deepEqual( Stem("dominerande"), "dominer");});
test("dominere -> dominer", function() {deepEqual( Stem("dominere"), "dominer");});
test("dominerende -> dominer", function() {deepEqual( Stem("dominerende"), "dominer");});
test("dominerer -> dominer", function() {deepEqual( Stem("dominerer"), "dominer");});
test("domineres -> dominer", function() {deepEqual( Stem("domineres"), "dominer");});
test("dominert -> dominer", function() {deepEqual( Stem("dominert"), "dominer");});
test("dommarar -> dommar", function() {deepEqual( Stem("dommarar"), "dommar");});
test("dommen -> domm", function() {deepEqual( Stem("dommen"), "domm");});
test("dommene -> domm", function() {deepEqual( Stem("dommene"), "domm");});
test("dommer -> domm", function() {deepEqual( Stem("dommer"), "domm");});
test("dommere -> dommer", function() {deepEqual( Stem("dommere"), "dommer");});
test("domstolane -> domstol", function() {deepEqual( Stem("domstolane"), "domstol");});
test("domstolar -> domstol", function() {deepEqual( Stem("domstolar"), "domstol");});
test("domstolen -> domstol", function() {deepEqual( Stem("domstolen"), "domstol");});
test("domstolens -> domstol", function() {deepEqual( Stem("domstolens"), "domstol");});
test("domstolslova -> domstol", function() {deepEqual( Stem("domstolslova"), "domstol");});
test("dotter -> dott", function() {deepEqual( Stem("dotter"), "dott");});
test("dotterforetag -> dotterforetag", function() {deepEqual( Stem("dotterforetag"), "dotterforetag");});
test("dotterselskap -> dotterselskap", function() {deepEqual( Stem("dotterselskap"), "dotterselskap");});
test("dotterselskapet -> dotterselskap", function() {deepEqual( Stem("dotterselskapet"), "dotterselskap");});
test("dottertiltak -> dottertiltak", function() {deepEqual( Stem("dottertiltak"), "dottertiltak");});
test("doven -> dov", function() {deepEqual( Stem("doven"), "dov");});
test("dovent -> dovent", function() {deepEqual( Stem("dovent"), "dovent");});
test("dovne -> dovn", function() {deepEqual( Stem("dovne"), "dovn");});
test("down -> down", function() {deepEqual( Stem("down"), "down");});
test("dra -> dra", function() {deepEqual( Stem("dra"), "dra");});
test("drabelig -> drab", function() {deepEqual( Stem("drabelig"), "drab");});
test("drabelige -> drab", function() {deepEqual( Stem("drabelige"), "drab");});
test("drag -> drag", function() {deepEqual( Stem("drag"), "drag");});
test("draga -> drag", function() {deepEqual( Stem("draga"), "drag");});
test("drage -> drag", function() {deepEqual( Stem("drage"), "drag");});
test("dragehodet -> dragehod", function() {deepEqual( Stem("dragehodet"), "dragehod");});
test("dragen -> drag", function() {deepEqual( Stem("dragen"), "drag");});
test("drager -> drag", function() {deepEqual( Stem("drager"), "drag");});
test("dragsug -> dragsug", function() {deepEqual( Stem("dragsug"), "dragsug");});
test("drakk -> drakk", function() {deepEqual( Stem("drakk"), "drakk");});
test("dramatisk -> dramatisk", function() {deepEqual( Stem("dramatisk"), "dramatisk");});
test("drammen -> dramm", function() {deepEqual( Stem("drammen"), "dramm");});
test("drammenselva -> drammenselv", function() {deepEqual( Stem("drammenselva"), "drammenselv");});
test("drammensfjorden -> drammensfjord", function() {deepEqual( Stem("drammensfjorden"), "drammensfjord");});
test("drammensregionens -> drammensregion", function() {deepEqual( Stem("drammensregionens"), "drammensregion");});
test("drapet -> drap", function() {deepEqual( Stem("drapet"), "drap");});
test("drar -> drar", function() {deepEqual( Stem("drar"), "drar");});
test("drasil -> drasil", function() {deepEqual( Stem("drasil"), "drasil");});
test("drastisk -> drastisk", function() {deepEqual( Stem("drastisk"), "drastisk");});
test("dratt -> dratt", function() {deepEqual( Stem("dratt"), "dratt");});
test("draug -> draug", function() {deepEqual( Stem("draug"), "draug");});
test("draupne -> draupn", function() {deepEqual( Stem("draupne"), "draupn");});
test("dreide -> dreid", function() {deepEqual( Stem("dreide"), "dreid");});
test("dreie -> dreie", function() {deepEqual( Stem("dreie"), "dreie");});
test("dreier -> dreier", function() {deepEqual( Stem("dreier"), "dreier");});
test("dreining -> dreining", function() {deepEqual( Stem("dreining"), "dreining");});
test("drepe -> drep", function() {deepEqual( Stem("drepe"), "drep");});
test("dreper -> drep", function() {deepEqual( Stem("dreper"), "drep");});
test("drept -> drept", function() {deepEqual( Stem("drept"), "drept");});
test("drepte -> drept", function() {deepEqual( Stem("drepte"), "drept");});
test("dressmann -> dressmann", function() {deepEqual( Stem("dressmann"), "dressmann");});
test("drev -> drev", function() {deepEqual( Stem("drev"), "drev");});
test("drevet -> drev", function() {deepEqual( Stem("drevet"), "drev");});
test("drift -> drift", function() {deepEqual( Stem("drift"), "drift");});
test("drifta -> drift", function() {deepEqual( Stem("drifta"), "drift");});
test("driften -> drift", function() {deepEqual( Stem("driften"), "drift");});
test("driftoversikt -> driftoversikt", function() {deepEqual( Stem("driftoversikt"), "driftoversikt");});
test("driftsansvar -> driftsansv", function() {deepEqual( Stem("driftsansvar"), "driftsansv");});
test("driftsansvaret -> driftsansvar", function() {deepEqual( Stem("driftsansvaret"), "driftsansvar");});
test("driftsbudsjett -> driftsbudsjett", function() {deepEqual( Stem("driftsbudsjett"), "driftsbudsjett");});
test("driftsformer -> driftsform", function() {deepEqual( Stem("driftsformer"), "driftsform");});
test("driftsinnskrenkinger -> driftsinnskrenking", function() {deepEqual( Stem("driftsinnskrenkinger"), "driftsinnskrenking");});
test("driftsinnskrenkninger -> driftsinnskrenkning", function() {deepEqual( Stem("driftsinnskrenkninger"), "driftsinnskrenkning");});
test("driftsinntektene -> driftsinntekt", function() {deepEqual( Stem("driftsinntektene"), "driftsinntekt");});
test("driftskostnader -> driftskostnad", function() {deepEqual( Stem("driftskostnader"), "driftskostnad");});
test("driftsmidler -> driftsmidl", function() {deepEqual( Stem("driftsmidler"), "driftsmidl");});
test("driftsopplegg -> driftsopplegg", function() {deepEqual( Stem("driftsopplegg"), "driftsopplegg");});
test("driftsoversikt -> driftsoversikt", function() {deepEqual( Stem("driftsoversikt"), "driftsoversikt");});
test("driftsoverskotet -> driftsoverskot", function() {deepEqual( Stem("driftsoverskotet"), "driftsoverskot");});
test("driftsselskapet -> driftsselskap", function() {deepEqual( Stem("driftsselskapet"), "driftsselskap");});
test("driftssystemer -> driftssystem", function() {deepEqual( Stem("driftssystemer"), "driftssystem");});
test("drikk -> drikk", function() {deepEqual( Stem("drikk"), "drikk");});
test("drikke -> drikk", function() {deepEqual( Stem("drikke"), "drikk");});
test("drikkegilde -> drikkegild", function() {deepEqual( Stem("drikkegilde"), "drikkegild");});
test("drikkehorn -> drikkehorn", function() {deepEqual( Stem("drikkehorn"), "drikkehorn");});
test("drikkehornet -> drikkehorn", function() {deepEqual( Stem("drikkehornet"), "drikkehorn");});
test("drikken -> drikk", function() {deepEqual( Stem("drikken"), "drikk");});
test("drikker -> drikk", function() {deepEqual( Stem("drikker"), "drikk");});
test("dristig -> drist", function() {deepEqual( Stem("dristig"), "drist");});
test("dristige -> drist", function() {deepEqual( Stem("dristige"), "drist");});
test("driv -> driv", function() {deepEqual( Stem("driv"), "driv");});
test("drivast -> driv", function() {deepEqual( Stem("drivast"), "driv");});
test("drive -> driv", function() {deepEqual( Stem("drive"), "driv");});
test("driven -> driv", function() {deepEqual( Stem("driven"), "driv");});
test("drivende -> driv", function() {deepEqual( Stem("drivende"), "driv");});
test("driver -> driv", function() {deepEqual( Stem("driver"), "driv");});
test("drives -> driv", function() {deepEqual( Stem("drives"), "driv");});
test("drivkrefter -> drivkreft", function() {deepEqual( Stem("drivkrefter"), "drivkreft");});
test("drivne -> drivn", function() {deepEqual( Stem("drivne"), "drivn");});
test("dro -> dro", function() {deepEqual( Stem("dro"), "dro");});
test("dronning -> dronning", function() {deepEqual( Stem("dronning"), "dronning");});
test("dronningen -> dronning", function() {deepEqual( Stem("dronningen"), "dronning");});
test("drukket -> drukk", function() {deepEqual( Stem("drukket"), "drukk");});
test("drukne -> drukn", function() {deepEqual( Stem("drukne"), "drukn");});
test("druknede -> drukn", function() {deepEqual( Stem("druknede"), "drukn");});
test("drukner -> drukn", function() {deepEqual( Stem("drukner"), "drukn");});
test("druknet -> drukn", function() {deepEqual( Stem("druknet"), "drukn");});
test("dryppe -> drypp", function() {deepEqual( Stem("dryppe"), "drypp");});
test("drypper -> drypp", function() {deepEqual( Stem("drypper"), "drypp");});
test("dråpe -> dråp", function() {deepEqual( Stem("dråpe"), "dråp");});
test("dråpene -> dråp", function() {deepEqual( Stem("dråpene"), "dråp");});
test("drøbak -> drøbak", function() {deepEqual( Stem("drøbak"), "drøbak");});
test("drøbaksundet -> drøbaksund", function() {deepEqual( Stem("drøbaksundet"), "drøbaksund");});
test("drøfta -> drøft", function() {deepEqual( Stem("drøfta"), "drøft");});
test("drøftast -> drøft", function() {deepEqual( Stem("drøftast"), "drøft");});
test("drøfte -> drøft", function() {deepEqual( Stem("drøfte"), "drøft");});
test("drøftelsen -> drøft", function() {deepEqual( Stem("drøftelsen"), "drøft");});
test("drøfter -> drøft", function() {deepEqual( Stem("drøfter"), "drøft");});
test("drøftes -> drøft", function() {deepEqual( Stem("drøftes"), "drøft");});
test("drøftet -> drøft", function() {deepEqual( Stem("drøftet"), "drøft");});
test("drøfting -> drøfting", function() {deepEqual( Stem("drøfting"), "drøfting");});
test("drøftinga -> drøfting", function() {deepEqual( Stem("drøftinga"), "drøfting");});
test("drøftingar -> drøfting", function() {deepEqual( Stem("drøftingar"), "drøfting");});
test("drøftingen -> drøfting", function() {deepEqual( Stem("drøftingen"), "drøfting");});
test("drøftinger -> drøfting", function() {deepEqual( Stem("drøftinger"), "drøfting");});
test("drøm -> drøm", function() {deepEqual( Stem("drøm"), "drøm");});
test("drømme -> drømm", function() {deepEqual( Stem("drømme"), "drømm");});
test("drømmene -> drømm", function() {deepEqual( Stem("drømmene"), "drømm");});
test("drømmer -> drømm", function() {deepEqual( Stem("drømmer"), "drømm");});
test("drømt -> drømt", function() {deepEqual( Stem("drømt"), "drømt");});
test("drønnende -> drønn", function() {deepEqual( Stem("drønnende"), "drønn");});
test("drønner -> drønn", function() {deepEqual( Stem("drønner"), "drønn");});
test("drøy -> drøy", function() {deepEqual( Stem("drøy"), "drøy");});
test("drøye -> drøye", function() {deepEqual( Stem("drøye"), "drøye");});
test("drøyt -> drøyt", function() {deepEqual( Stem("drøyt"), "drøyt");});
test("du -> du", function() {deepEqual( Stem("du"), "du");});
test("duger -> dug", function() {deepEqual( Stem("duger"), "dug");});
test("duggen -> dugg", function() {deepEqual( Stem("duggen"), "dugg");});
test("duk -> duk", function() {deepEqual( Stem("duk"), "duk");});
test("dukker -> dukk", function() {deepEqual( Stem("dukker"), "dukk");});
test("dukket -> dukk", function() {deepEqual( Stem("dukket"), "dukk");});
test("dulter -> dult", function() {deepEqual( Stem("dulter"), "dult");});
test("dum -> dum", function() {deepEqual( Stem("dum"), "dum");});
test("dumme -> dumm", function() {deepEqual( Stem("dumme"), "dumm");});
test("dummer -> dumm", function() {deepEqual( Stem("dummer"), "dumm");});
test("dummere -> dummer", function() {deepEqual( Stem("dummere"), "dummer");});
test("dummeste -> dummest", function() {deepEqual( Stem("dummeste"), "dummest");});
test("dummet -> dumm", function() {deepEqual( Stem("dummet"), "dumm");});
test("dumt -> dumt", function() {deepEqual( Stem("dumt"), "dumt");});
test("dun -> dun", function() {deepEqual( Stem("dun"), "dun");});
test("dunder -> dund", function() {deepEqual( Stem("dunder"), "dund");});
test("dundrende -> dundr", function() {deepEqual( Stem("dundrende"), "dundr");});
test("dundrer -> dundr", function() {deepEqual( Stem("dundrer"), "dundr");});
test("dunker -> dunk", function() {deepEqual( Stem("dunker"), "dunk");});
test("dur -> dur", function() {deepEqual( Stem("dur"), "dur");});
test("durer -> dur", function() {deepEqual( Stem("durer"), "dur");});
test("dverg -> dverg", function() {deepEqual( Stem("dverg"), "dverg");});
test("dvergen -> dverg", function() {deepEqual( Stem("dvergen"), "dverg");});
test("dvergene -> dverg", function() {deepEqual( Stem("dvergene"), "dverg");});
test("dvergenes -> dverg", function() {deepEqual( Stem("dvergenes"), "dverg");});
test("dvergens -> dverg", function() {deepEqual( Stem("dvergens"), "dverg");});
test("dverger -> dverg", function() {deepEqual( Stem("dverger"), "dverg");});
test("dvergers -> dverg", function() {deepEqual( Stem("dvergers"), "dverg");});
test("dvergeslekt -> dvergeslekt", function() {deepEqual( Stem("dvergeslekt"), "dvergeslekt");});
test("dvergsten -> dvergst", function() {deepEqual( Stem("dvergsten"), "dvergst");});
test("dvs -> dvs", function() {deepEqual( Stem("dvs"), "dvs");});
test("dy -> dy", function() {deepEqual( Stem("dy"), "dy");});
test("dybde -> dybd", function() {deepEqual( Stem("dybde"), "dybd");});
test("dybdeproblemer -> dybdeproblem", function() {deepEqual( Stem("dybdeproblemer"), "dybdeproblem");});
test("dybedal -> dybedal", function() {deepEqual( Stem("dybedal"), "dybedal");});
test("dykker -> dykk", function() {deepEqual( Stem("dykker"), "dykk");});
test("dyktig -> dykt", function() {deepEqual( Stem("dyktig"), "dykt");});
test("dyktighet -> dykt", function() {deepEqual( Stem("dyktighet"), "dykt");});
test("dynamikk -> dynamikk", function() {deepEqual( Stem("dynamikk"), "dynamikk");});
test("dynamisk -> dynamisk", function() {deepEqual( Stem("dynamisk"), "dynamisk");});
test("dynke -> dynk", function() {deepEqual( Stem("dynke"), "dynk");});
test("dyp -> dyp", function() {deepEqual( Stem("dyp"), "dyp");});
test("dype -> dyp", function() {deepEqual( Stem("dype"), "dyp");});
test("dypere -> dyper", function() {deepEqual( Stem("dypere"), "dyper");});
test("dypeskaten -> dypeskat", function() {deepEqual( Stem("dypeskaten"), "dypeskat");});
test("dypest -> dypest", function() {deepEqual( Stem("dypest"), "dypest");});
test("dypet -> dyp", function() {deepEqual( Stem("dypet"), "dyp");});
test("dypgående -> dypgå", function() {deepEqual( Stem("dypgående"), "dypgå");});
test("dyppes -> dypp", function() {deepEqual( Stem("dyppes"), "dypp");});
test("dypt -> dypt", function() {deepEqual( Stem("dypt"), "dypt");});
test("dyr -> dyr", function() {deepEqual( Stem("dyr"), "dyr");});
test("dyrare -> dyrar", function() {deepEqual( Stem("dyrare"), "dyrar");});
test("dyre -> dyr", function() {deepEqual( Stem("dyre"), "dyr");});
test("dyrebare -> dyrebar", function() {deepEqual( Stem("dyrebare"), "dyrebar");});
test("dyrehald -> dyrehald", function() {deepEqual( Stem("dyrehald"), "dyrehald");});
test("dyrehaldet -> dyrehald", function() {deepEqual( Stem("dyrehaldet"), "dyrehald");});
test("dyrere -> dyrer", function() {deepEqual( Stem("dyrere"), "dyrer");});
test("dyret -> dyr", function() {deepEqual( Stem("dyret"), "dyr");});
test("dyrt -> dyrt", function() {deepEqual( Stem("dyrt"), "dyrt");});
test("dystert -> dyster", function() {deepEqual( Stem("dystert"), "dyster");});
test("dystre -> dystr", function() {deepEqual( Stem("dystre"), "dystr");});
test("dåres -> dår", function() {deepEqual( Stem("dåres"), "dår");});
test("dårleg -> dår", function() {deepEqual( Stem("dårleg"), "dår");});
test("dårlegare -> dårlegar", function() {deepEqual( Stem("dårlegare"), "dårlegar");});
test("dårlig -> dår", function() {deepEqual( Stem("dårlig"), "dår");});
test("dårlige -> dår", function() {deepEqual( Stem("dårlige"), "dår");});
test("dårligere -> dårliger", function() {deepEqual( Stem("dårligere"), "dårliger");});
test("dø -> dø", function() {deepEqual( Stem("dø"), "dø");});
test("død -> død", function() {deepEqual( Stem("død"), "død");});
test("døde -> død", function() {deepEqual( Stem("døde"), "død");});
test("dødelighet -> død", function() {deepEqual( Stem("dødelighet"), "død");});
test("dødelighetsarv -> dødelighetsarv", function() {deepEqual( Stem("dødelighetsarv"), "dødelighetsarv");});
test("dødelighetsarven -> dødelighetsarv", function() {deepEqual( Stem("dødelighetsarven"), "dødelighetsarv");});
test("døden -> død", function() {deepEqual( Stem("døden"), "død");});
test("dødes -> død", function() {deepEqual( Stem("dødes"), "død");});
test("dødning -> dødning", function() {deepEqual( Stem("dødning"), "dødning");});
test("dødningene -> dødning", function() {deepEqual( Stem("dødningene"), "dødning");});
test("dødninger -> dødning", function() {deepEqual( Stem("dødninger"), "dødning");});
test("dødningeskaller -> dødningeskall", function() {deepEqual( Stem("dødningeskaller"), "dødningeskall");});
test("dødsbo -> dødsbo", function() {deepEqual( Stem("dødsbo"), "dødsbo");});
test("dødsboet -> dødsbo", function() {deepEqual( Stem("dødsboet"), "dødsbo");});
test("dødsfall -> dødsfall", function() {deepEqual( Stem("dødsfall"), "dødsfall");});
test("dødsfallet -> dødsfall", function() {deepEqual( Stem("dødsfallet"), "dødsfall");});
test("dødsfallstidspunktet -> dødsfallstidspunkt", function() {deepEqual( Stem("dødsfallstidspunktet"), "dødsfallstidspunkt");});
test("dødsriket -> dødsrik", function() {deepEqual( Stem("dødsriket"), "dødsrik");});
test("dødsrikets -> dødsrik", function() {deepEqual( Stem("dødsrikets"), "dødsrik");});
test("dødsrisiko -> dødsrisiko", function() {deepEqual( Stem("dødsrisiko"), "dødsrisiko");});
test("dødt -> dødt", function() {deepEqual( Stem("dødt"), "dødt");});
test("døgn -> døgn", function() {deepEqual( Stem("døgn"), "døgn");});
test("døgnet -> døgn", function() {deepEqual( Stem("døgnet"), "døgn");});
test("døgnets -> døgn", function() {deepEqual( Stem("døgnets"), "døgn");});
test("døma -> døm", function() {deepEqual( Stem("døma"), "døm");});
test("døme -> døm", function() {deepEqual( Stem("døme"), "døm");});
test("dømes -> døm", function() {deepEqual( Stem("dømes"), "døm");});
test("dømet -> døm", function() {deepEqual( Stem("dømet"), "døm");});
test("dømme -> dømm", function() {deepEqual( Stem("dømme"), "dømm");});
test("dømmer -> dømm", function() {deepEqual( Stem("dømmer"), "dømm");});
test("dønn -> dønn", function() {deepEqual( Stem("dønn"), "dønn");});
test("dør -> dør", function() {deepEqual( Stem("dør"), "dør");});
test("døren -> dør", function() {deepEqual( Stem("døren"), "dør");});
test("dørene -> dør", function() {deepEqual( Stem("dørene"), "dør");});
test("dører -> dør", function() {deepEqual( Stem("dører"), "dør");});
test("dørgende -> dørg", function() {deepEqual( Stem("dørgende"), "dørg");});
test("dørhellen -> dørhell", function() {deepEqual( Stem("dørhellen"), "dørhell");});
test("dørsprekken -> dørsprekk", function() {deepEqual( Stem("dørsprekken"), "dørsprekk");});
test("døråpningen -> døråpning", function() {deepEqual( Stem("døråpningen"), "døråpning");});
test("døtre -> døtr", function() {deepEqual( Stem("døtre"), "døtr");});
test("døtrene -> døtr", function() {deepEqual( Stem("døtrene"), "døtr");});
test("e -> e", function() {deepEqual( Stem("e"), "e");});
test("econ -> econ", function() {deepEqual( Stem("econ"), "econ");});
test("econs -> econ", function() {deepEqual( Stem("econs"), "econ");});
test("ed -> ed", function() {deepEqual( Stem("ed"), "ed");});
test("edda -> edd", function() {deepEqual( Stem("edda"), "edd");});
test("eddas -> edd", function() {deepEqual( Stem("eddas"), "edd");});
test("edderkopper -> edderkopp", function() {deepEqual( Stem("edderkopper"), "edderkopp");});
test("edel -> edel", function() {deepEqual( Stem("edel"), "edel");});
test("eder -> eder", function() {deepEqual( Stem("eder"), "eder");});
test("edilizie -> edilizi", function() {deepEqual( Stem("edilizie"), "edilizi");});
test("edw -> edw", function() {deepEqual( Stem("edw"), "edw");});
test("edward -> edward", function() {deepEqual( Stem("edward"), "edward");});
test("ef -> ef", function() {deepEqual( Stem("ef"), "ef");});
test("effekt -> effekt", function() {deepEqual( Stem("effekt"), "effekt");});
test("effekten -> effekt", function() {deepEqual( Stem("effekten"), "effekt");});
test("effekter -> effekt", function() {deepEqual( Stem("effekter"), "effekt");});
test("effektiv -> effektiv", function() {deepEqual( Stem("effektiv"), "effektiv");});
test("effektive -> effektiv", function() {deepEqual( Stem("effektive"), "effektiv");});
test("effektivisering -> effektivisering", function() {deepEqual( Stem("effektivisering"), "effektivisering");});
test("effektiviseringprinsippene -> effektiviseringprinsipp", function() {deepEqual( Stem("effektiviseringprinsippene"), "effektiviseringprinsipp");});
test("effektiviseringsgevinster -> effektiviseringsgevinst", function() {deepEqual( Stem("effektiviseringsgevinster"), "effektiviseringsgevinst");});
test("effektivitet -> effektivit", function() {deepEqual( Stem("effektivitet"), "effektivit");});
test("effektiviteten -> effektivitet", function() {deepEqual( Stem("effektiviteten"), "effektivitet");});
test("effektivitetshensyn -> effektivitetshensyn", function() {deepEqual( Stem("effektivitetshensyn"), "effektivitetshensyn");});
test("effektivitetskrav -> effektivitetskrav", function() {deepEqual( Stem("effektivitetskrav"), "effektivitetskrav");});
test("effektivt -> effektiv", function() {deepEqual( Stem("effektivt"), "effektiv");});
test("efta -> eft", function() {deepEqual( Stem("efta"), "eft");});
test("egalitær -> egalitær", function() {deepEqual( Stem("egalitær"), "egalitær");});
test("egen -> egen", function() {deepEqual( Stem("egen"), "egen");});
test("egenandel -> egenandel", function() {deepEqual( Stem("egenandel"), "egenandel");});
test("egene -> egen", function() {deepEqual( Stem("egene"), "egen");});
test("egenkapital -> egenkapital", function() {deepEqual( Stem("egenkapital"), "egenkapital");});
test("egenkapitalen -> egenkapital", function() {deepEqual( Stem("egenkapitalen"), "egenkapital");});
test("egenskapen -> egenskap", function() {deepEqual( Stem("egenskapen"), "egenskap");});
test("egenskaper -> egenskap", function() {deepEqual( Stem("egenskaper"), "egenskap");});
test("egentlig -> egent", function() {deepEqual( Stem("egentlig"), "egent");});
test("eget -> eget", function() {deepEqual( Stem("eget"), "eget");});
test("egge -> egg", function() {deepEqual( Stem("egge"), "egg");});
test("egger -> egg", function() {deepEqual( Stem("egger"), "egg");});
test("eggeskall -> eggeskall", function() {deepEqual( Stem("eggeskall"), "eggeskall");});
test("egget -> egg", function() {deepEqual( Stem("egget"), "egg");});
test("eggum -> eggum", function() {deepEqual( Stem("eggum"), "eggum");});
test("egil -> egil", function() {deepEqual( Stem("egil"), "egil");});
test("egils -> egil", function() {deepEqual( Stem("egils"), "egil");});
test("egne -> egn", function() {deepEqual( Stem("egne"), "egn");});
test("egnede -> egn", function() {deepEqual( Stem("egnede"), "egn");});
test("egner -> egn", function() {deepEqual( Stem("egner"), "egn");});
test("egnet -> egn", function() {deepEqual( Stem("egnet"), "egn");});
test("ei -> ei", function() {deepEqual( Stem("ei"), "ei");});
test("eid -> eid", function() {deepEqual( Stem("eid"), "eid");});
test("eidanger -> eidang", function() {deepEqual( Stem("eidanger"), "eidang");});
test("eidangerfjorden -> eidangerfjord", function() {deepEqual( Stem("eidangerfjorden"), "eidangerfjord");});
test("eide -> eid", function() {deepEqual( Stem("eide"), "eid");});
test("eie -> eie", function() {deepEqual( Stem("eie"), "eie");});
test("eiendelene -> eiendel", function() {deepEqual( Stem("eiendelene"), "eiendel");});
test("eiendeler -> eiendel", function() {deepEqual( Stem("eiendeler"), "eiendel");});
test("eiendom -> eiendom", function() {deepEqual( Stem("eiendom"), "eiendom");});
test("eiendommen -> eiendomm", function() {deepEqual( Stem("eiendommen"), "eiendomm");});
test("eiendommene -> eiendomm", function() {deepEqual( Stem("eiendommene"), "eiendomm");});
test("eiendommer -> eiendomm", function() {deepEqual( Stem("eiendommer"), "eiendomm");});
test("eiendomserverv -> eiendomserverv", function() {deepEqual( Stem("eiendomserverv"), "eiendomserverv");});
test("eiendomsmegling -> eiendomsmegling", function() {deepEqual( Stem("eiendomsmegling"), "eiendomsmegling");});
test("eiendomspriser -> eiendomspris", function() {deepEqual( Stem("eiendomspriser"), "eiendomspris");});
test("eiendomsrett -> eiendomsrett", function() {deepEqual( Stem("eiendomsrett"), "eiendomsrett");});
test("eiendomsretten -> eiendomsrett", function() {deepEqual( Stem("eiendomsretten"), "eiendomsrett");});
test("eier -> eier", function() {deepEqual( Stem("eier"), "eier");});
test("eierandel -> eierandel", function() {deepEqual( Stem("eierandel"), "eierandel");});
test("eierandeler -> eierandel", function() {deepEqual( Stem("eierandeler"), "eierandel");});
test("eiere -> eier", function() {deepEqual( Stem("eiere"), "eier");});
test("eierforhold -> eierforhold", function() {deepEqual( Stem("eierforhold"), "eierforhold");});
test("eierforholdet -> eierforhold", function() {deepEqual( Stem("eierforholdet"), "eierforhold");});
test("eierinteresse -> eierinteress", function() {deepEqual( Stem("eierinteresse"), "eierinteress");});
test("eierinteresser -> eierinteress", function() {deepEqual( Stem("eierinteresser"), "eierinteress");});
test("eierkommune -> eierkommun", function() {deepEqual( Stem("eierkommune"), "eierkommun");});
test("eierkommunene -> eierkommun", function() {deepEqual( Stem("eierkommunene"), "eierkommun");});
test("eierkommunenes -> eierkommun", function() {deepEqual( Stem("eierkommunenes"), "eierkommun");});
test("eierne -> eiern", function() {deepEqual( Stem("eierne"), "eiern");});
test("eierseksjoner -> eierseksjon", function() {deepEqual( Stem("eierseksjoner"), "eierseksjon");});
test("eierseksjonsloven -> eierseksjon", function() {deepEqual( Stem("eierseksjonsloven"), "eierseksjon");});
test("eierseksjonssameier -> eierseksjonssamei", function() {deepEqual( Stem("eierseksjonssameier"), "eierseksjonssamei");});
test("eierskap -> eierskap", function() {deepEqual( Stem("eierskap"), "eierskap");});
test("eiersl -> eiersl", function() {deepEqual( Stem("eiersl"), "eiersl");});
test("eies -> eies", function() {deepEqual( Stem("eies"), "eies");});
test("eiet -> eiet", function() {deepEqual( Stem("eiet"), "eiet");});
test("eig -> eig", function() {deepEqual( Stem("eig"), "eig");});
test("eiga -> eig", function() {deepEqual( Stem("eiga"), "eig");});
test("eigar -> eig", function() {deepEqual( Stem("eigar"), "eig");});
test("eigarane -> eigar", function() {deepEqual( Stem("eigarane"), "eigar");});
test("eigarar -> eigar", function() {deepEqual( Stem("eigarar"), "eigar");});
test("eigarbrøk -> eigarbrøk", function() {deepEqual( Stem("eigarbrøk"), "eigarbrøk");});
test("eigarbustad -> eigarbustad", function() {deepEqual( Stem("eigarbustad"), "eigarbustad");});
test("eigarbustadene -> eigarbustad", function() {deepEqual( Stem("eigarbustadene"), "eigarbustad");});
test("eigarbustader -> eigarbustad", function() {deepEqual( Stem("eigarbustader"), "eigarbustad");});
test("eigardelar -> eigardel", function() {deepEqual( Stem("eigardelar"), "eigardel");});
test("eigaren -> eigar", function() {deepEqual( Stem("eigaren"), "eigar");});
test("eigarens -> eigar", function() {deepEqual( Stem("eigarens"), "eigar");});
test("eigarforhold -> eigarforhold", function() {deepEqual( Stem("eigarforhold"), "eigarforhold");});
test("eigarforholdet -> eigarforhold", function() {deepEqual( Stem("eigarforholdet"), "eigarforhold");});
test("eigarinteressa -> eigarinteress", function() {deepEqual( Stem("eigarinteressa"), "eigarinteress");});
test("eigarinteresse -> eigarinteress", function() {deepEqual( Stem("eigarinteresse"), "eigarinteress");});
test("eigarinteressene -> eigarinteress", function() {deepEqual( Stem("eigarinteressene"), "eigarinteress");});
test("eigarinteresser -> eigarinteress", function() {deepEqual( Stem("eigarinteresser"), "eigarinteress");});
test("eigarleilegheiter -> eigarleilegheit", function() {deepEqual( Stem("eigarleilegheiter"), "eigarleilegheit");});
test("eigarpart -> eigarpart", function() {deepEqual( Stem("eigarpart"), "eigarpart");});
test("eigarpartane -> eigarpart", function() {deepEqual( Stem("eigarpartane"), "eigarpart");});
test("eigarposisjonen -> eigarposisjon", function() {deepEqual( Stem("eigarposisjonen"), "eigarposisjon");});
test("eigarpreg -> eigarpreg", function() {deepEqual( Stem("eigarpreg"), "eigarpreg");});
test("eigarrisikoen -> eigarrisiko", function() {deepEqual( Stem("eigarrisikoen"), "eigarrisiko");});
test("eigarsamanslutningar -> eigarsamanslutning", function() {deepEqual( Stem("eigarsamanslutningar"), "eigarsamanslutning");});
test("eigarseksjon -> eigarseksjon", function() {deepEqual( Stem("eigarseksjon"), "eigarseksjon");});
test("eigarseksjonar -> eigarseksjon", function() {deepEqual( Stem("eigarseksjonar"), "eigarseksjon");});
test("eigarseksjonsforma -> eigarseksjonsform", function() {deepEqual( Stem("eigarseksjonsforma"), "eigarseksjonsform");});
test("eigarseksjonslov -> eigarseksjon", function() {deepEqual( Stem("eigarseksjonslov"), "eigarseksjon");});
test("eigarseksjonslova -> eigarseksjon", function() {deepEqual( Stem("eigarseksjonslova"), "eigarseksjon");});
test("eigarseksjonssameiger -> eigarseksjonssam", function() {deepEqual( Stem("eigarseksjonssameiger"), "eigarseksjonssam");});
test("eigarskifte -> eigarskift", function() {deepEqual( Stem("eigarskifte"), "eigarskift");});
test("eigarskifteforsikring -> eigarskifteforsikring", function() {deepEqual( Stem("eigarskifteforsikring"), "eigarskifteforsikring");});
test("eigarskiftet -> eigarskift", function() {deepEqual( Stem("eigarskiftet"), "eigarskift");});
test("eigarstatusen -> eigarstatus", function() {deepEqual( Stem("eigarstatusen"), "eigarstatus");});
test("eigast -> eig", function() {deepEqual( Stem("eigast"), "eig");});
test("eige -> eig", function() {deepEqual( Stem("eige"), "eig");});
test("eigeansvar -> eigeansv", function() {deepEqual( Stem("eigeansvar"), "eigeansv");});
test("eigedom -> eigedom", function() {deepEqual( Stem("eigedom"), "eigedom");});
test("eigedommane -> eigedomm", function() {deepEqual( Stem("eigedommane"), "eigedomm");});
test("eigedommar -> eigedomm", function() {deepEqual( Stem("eigedommar"), "eigedomm");});
test("eigedommen -> eigedomm", function() {deepEqual( Stem("eigedommen"), "eigedomm");});
test("eigedomseiningar -> eigedomseining", function() {deepEqual( Stem("eigedomseiningar"), "eigedomseining");});
test("eigedomsforhold -> eigedomsforhold", function() {deepEqual( Stem("eigedomsforhold"), "eigedomsforhold");});
test("eigedomsformidling -> eigedomsformidling", function() {deepEqual( Stem("eigedomsformidling"), "eigedomsformidling");});
test("eigedomsforvaltning -> eigedomsforvaltning", function() {deepEqual( Stem("eigedomsforvaltning"), "eigedomsforvaltning");});
test("eigedomskjøp -> eigedomskjøp", function() {deepEqual( Stem("eigedomskjøp"), "eigedomskjøp");});
test("eigedomsmeklar -> eigedomsmekl", function() {deepEqual( Stem("eigedomsmeklar"), "eigedomsmekl");});
test("eigedomsmeklarar -> eigedomsmeklar", function() {deepEqual( Stem("eigedomsmeklarar"), "eigedomsmeklar");});
test("eigedomsmekling -> eigedomsmekling", function() {deepEqual( Stem("eigedomsmekling"), "eigedomsmekling");});
test("eigedomsmeklingslova -> eigedomsmekling", function() {deepEqual( Stem("eigedomsmeklingslova"), "eigedomsmekling");});
test("eigedomsmeklingsløyve -> eigedomsmeklingsløyv", function() {deepEqual( Stem("eigedomsmeklingsløyve"), "eigedomsmeklingsløyv");});
test("eigedomsovergangen -> eigedomsovergang", function() {deepEqual( Stem("eigedomsovergangen"), "eigedomsovergang");});
test("eigedomsrett -> eigedomsrett", function() {deepEqual( Stem("eigedomsrett"), "eigedomsrett");});
test("eigedomsretten -> eigedomsrett", function() {deepEqual( Stem("eigedomsretten"), "eigedomsrett");});
test("eigedomsselskap -> eigedomsselskap", function() {deepEqual( Stem("eigedomsselskap"), "eigedomsselskap");});
test("eigedomssjefen -> eigedomssjef", function() {deepEqual( Stem("eigedomssjefen"), "eigedomssjef");});
test("eigeform -> eigeform", function() {deepEqual( Stem("eigeform"), "eigeform");});
test("eigeformene -> eigeform", function() {deepEqual( Stem("eigeformene"), "eigeform");});
test("eigeformer -> eigeform", function() {deepEqual( Stem("eigeformer"), "eigeform");});
test("eigen -> eig", function() {deepEqual( Stem("eigen"), "eig");});
test("eigendelar -> eigendel", function() {deepEqual( Stem("eigendelar"), "eigendel");});
test("eigenkapital -> eigenkapital", function() {deepEqual( Stem("eigenkapital"), "eigenkapital");});
test("eigenkapitalbeitragen -> eigenkapitalbeitrag", function() {deepEqual( Stem("eigenkapitalbeitragen"), "eigenkapitalbeitrag");});
test("eigenkapitalen -> eigenkapital", function() {deepEqual( Stem("eigenkapitalen"), "eigenkapital");});
test("eigenkapitalinnskot -> eigenkapitalinnskot", function() {deepEqual( Stem("eigenkapitalinnskot"), "eigenkapitalinnskot");});
test("eigenskap -> eigenskap", function() {deepEqual( Stem("eigenskap"), "eigenskap");});
test("eigentleg -> eigent", function() {deepEqual( Stem("eigentleg"), "eigent");});
test("eigentlege -> eigent", function() {deepEqual( Stem("eigentlege"), "eigent");});
test("eigne -> eign", function() {deepEqual( Stem("eigne"), "eign");});
test("eignedelane -> eignedel", function() {deepEqual( Stem("eignedelane"), "eignedel");});
test("eignedelar -> eignedel", function() {deepEqual( Stem("eignedelar"), "eignedel");});
test("eik -> eik", function() {deepEqual( Stem("eik"), "eik");});
test("eika -> eik", function() {deepEqual( Stem("eika"), "eik");});
test("eikenøtt -> eikenøtt", function() {deepEqual( Stem("eikenøtt"), "eikenøtt");});
test("eiketre -> eiketr", function() {deepEqual( Stem("eiketre"), "eiketr");});
test("eikrem -> eikrem", function() {deepEqual( Stem("eikrem"), "eikrem");});
test("ein -> ein", function() {deepEqual( Stem("ein"), "ein");});
test("einaste -> einast", function() {deepEqual( Stem("einaste"), "einast");});
test("eine -> ein", function() {deepEqual( Stem("eine"), "ein");});
test("einebustad -> einebustad", function() {deepEqual( Stem("einebustad"), "einebustad");});
test("einebustader -> einebustad", function() {deepEqual( Stem("einebustader"), "einebustad");});
test("eineeigar -> eine", function() {deepEqual( Stem("eineeigar"), "eine");});
test("eineeige -> eine", function() {deepEqual( Stem("eineeige"), "eine");});
test("einerett -> einerett", function() {deepEqual( Stem("einerett"), "einerett");});
test("eineretten -> einerett", function() {deepEqual( Stem("eineretten"), "einerett");});
test("einerådande -> eineråd", function() {deepEqual( Stem("einerådande"), "eineråd");});
test("eingong -> eingong", function() {deepEqual( Stem("eingong"), "eingong");});
test("eingongsbetalingar -> eingongsbetaling", function() {deepEqual( Stem("eingongsbetalingar"), "eingongsbetaling");});
test("eingongsinnbetalingar -> eingongsinnbetaling", function() {deepEqual( Stem("eingongsinnbetalingar"), "eingongsinnbetaling");});
test("einherjene -> einherj", function() {deepEqual( Stem("einherjene"), "einherj");});
test("einherjer -> einherj", function() {deepEqual( Stem("einherjer"), "einherj");});
test("einherjers -> einherj", function() {deepEqual( Stem("einherjers"), "einherj");});
test("eining -> eining", function() {deepEqual( Stem("eining"), "eining");});
test("einingar -> eining", function() {deepEqual( Stem("einingar"), "eining");});
test("einingsregisteret -> einingsregister", function() {deepEqual( Stem("einingsregisteret"), "einingsregister");});
test("eins -> ein", function() {deepEqual( Stem("eins"), "ein");});
test("einsidig -> einsid", function() {deepEqual( Stem("einsidig"), "einsid");});
test("einskapen -> einskap", function() {deepEqual( Stem("einskapen"), "einskap");});
test("einskild -> einskild", function() {deepEqual( Stem("einskild"), "einskild");});
test("einskildbustader -> einskildbustad", function() {deepEqual( Stem("einskildbustader"), "einskildbustad");});
test("einskilde -> einskild", function() {deepEqual( Stem("einskilde"), "einskild");});
test("einskildmedlemmer -> einskildmedlemm", function() {deepEqual( Stem("einskildmedlemmer"), "einskildmedlemm");});
test("einskildpersonar -> einskildperson", function() {deepEqual( Stem("einskildpersonar"), "einskildperson");});
test("einskildsaker -> einskildsak", function() {deepEqual( Stem("einskildsaker"), "einskildsak");});
test("einslege -> eins", function() {deepEqual( Stem("einslege"), "eins");});
test("eintydig -> eintyd", function() {deepEqual( Stem("eintydig"), "eintyd");});
test("eit -> eit", function() {deepEqual( Stem("eit"), "eit");});
test("eiter -> eit", function() {deepEqual( Stem("eiter"), "eit");});
test("eiterdryppet -> eiterdrypp", function() {deepEqual( Stem("eiterdryppet"), "eiterdrypp");});
test("eiteren -> eiter", function() {deepEqual( Stem("eiteren"), "eiter");});
test("eiterorm -> eiterorm", function() {deepEqual( Stem("eiterorm"), "eiterorm");});
test("eiterormen -> eiterorm", function() {deepEqual( Stem("eiterormen"), "eiterorm");});
test("eitrende -> eitr", function() {deepEqual( Stem("eitrende"), "eitr");});
test("eitt -> eitt", function() {deepEqual( Stem("eitt"), "eitt");});
test("eittårsfristen -> eittårsfrist", function() {deepEqual( Stem("eittårsfristen"), "eittårsfrist");});
test("ejerlejligheder -> ejerlejlighed", function() {deepEqual( Stem("ejerlejligheder"), "ejerlejlighed");});
test("ekeberganleggene -> ekeberganlegg", function() {deepEqual( Stem("ekeberganleggene"), "ekeberganlegg");});
test("ekebergtunnelen -> ekebergtunnel", function() {deepEqual( Stem("ekebergtunnelen"), "ekebergtunnel");});
test("ekebergåsen -> ekebergås", function() {deepEqual( Stem("ekebergåsen"), "ekebergås");});
test("ekle -> ekl", function() {deepEqual( Stem("ekle"), "ekl");});
test("ekonomisk -> ekonomisk", function() {deepEqual( Stem("ekonomisk"), "ekonomisk");});
test("ekonomiska -> ekonomisk", function() {deepEqual( Stem("ekonomiska"), "ekonomisk");});
test("ekornet -> ekorn", function() {deepEqual( Stem("ekornet"), "ekorn");});
test("eks -> eks", function() {deepEqual( Stem("eks"), "eks");});
test("eksakt -> eksakt", function() {deepEqual( Stem("eksakt"), "eksakt");});
test("eksakte -> eksakt", function() {deepEqual( Stem("eksakte"), "eksakt");});
test("eksempel -> eksempel", function() {deepEqual( Stem("eksempel"), "eksempel");});
test("eksempelvis -> eksempelvis", function() {deepEqual( Stem("eksempelvis"), "eksempelvis");});
test("eksemplene -> eksempl", function() {deepEqual( Stem("eksemplene"), "eksempl");});
test("eksempler -> eksempl", function() {deepEqual( Stem("eksempler"), "eksempl");});
test("eksemplet -> eksempl", function() {deepEqual( Stem("eksemplet"), "eksempl");});
test("eksistensen -> eksistens", function() {deepEqual( Stem("eksistensen"), "eksistens");});
test("eksisterande -> eksister", function() {deepEqual( Stem("eksisterande"), "eksister");});
test("eksistere -> eksister", function() {deepEqual( Stem("eksistere"), "eksister");});
test("eksisterende -> eksister", function() {deepEqual( Stem("eksisterende"), "eksister");});
test("eksisterer -> eksister", function() {deepEqual( Stem("eksisterer"), "eksister");});
test("ekskl -> ekskl", function() {deepEqual( Stem("ekskl"), "ekskl");});
test("eksklusiv -> eksklusiv", function() {deepEqual( Stem("eksklusiv"), "eksklusiv");});
test("eksklusive -> eksklusiv", function() {deepEqual( Stem("eksklusive"), "eksklusiv");});
test("eksmemplene -> eksmempl", function() {deepEqual( Stem("eksmemplene"), "eksmempl");});
test("eksogent -> eksogent", function() {deepEqual( Stem("eksogent"), "eksogent");});
test("ekspansjon -> ekspansjon", function() {deepEqual( Stem("ekspansjon"), "ekspansjon");});
test("ekspederes -> ekspeder", function() {deepEqual( Stem("ekspederes"), "ekspeder");});
test("eksperthjelp -> eksperthjelp", function() {deepEqual( Stem("eksperthjelp"), "eksperthjelp");});
test("ekspertisen -> ekspertis", function() {deepEqual( Stem("ekspertisen"), "ekspertis");});
test("eksplisitt -> eksplisitt", function() {deepEqual( Stem("eksplisitt"), "eksplisitt");});
test("eksponeringa -> eksponering", function() {deepEqual( Stem("eksponeringa"), "eksponering");});
test("eksponert -> eksponer", function() {deepEqual( Stem("eksponert"), "eksponer");});
test("eksport -> eksport", function() {deepEqual( Stem("eksport"), "eksport");});
test("eksportbedrifter -> eksportbedrift", function() {deepEqual( Stem("eksportbedrifter"), "eksportbedrift");});
test("eksportbedrifters -> eksportbedrift", function() {deepEqual( Stem("eksportbedrifters"), "eksportbedrift");});
test("eksportcontainere -> eksportcontainer", function() {deepEqual( Stem("eksportcontainere"), "eksportcontainer");});
test("eksporten -> eksport", function() {deepEqual( Stem("eksporten"), "eksport");});
test("eksporterer -> eksporter", function() {deepEqual( Stem("eksporterer"), "eksporter");});
test("eksporteres -> eksporter", function() {deepEqual( Stem("eksporteres"), "eksporter");});
test("eksportert -> eksporter", function() {deepEqual( Stem("eksportert"), "eksporter");});
test("eksporterte -> eksporter", function() {deepEqual( Stem("eksporterte"), "eksporter");});
test("eksportfunksjonene -> eksportfunksjon", function() {deepEqual( Stem("eksportfunksjonene"), "eksportfunksjon");});
test("eksportfylke -> eksportfylk", function() {deepEqual( Stem("eksportfylke"), "eksportfylk");});
test("eksportgods -> eksportgod", function() {deepEqual( Stem("eksportgods"), "eksportgod");});
test("eksportgodset -> eksportgods", function() {deepEqual( Stem("eksportgodset"), "eksportgods");});
test("eksporthavnene -> eksporthavn", function() {deepEqual( Stem("eksporthavnene"), "eksporthavn");});
test("eksporthavner -> eksporthavn", function() {deepEqual( Stem("eksporthavner"), "eksporthavn");});
test("eksportkundenes -> eksportkund", function() {deepEqual( Stem("eksportkundenes"), "eksportkund");});
test("eksportlaster -> eksportlast", function() {deepEqual( Stem("eksportlaster"), "eksportlast");});
test("eksportmengden -> eksportmengd", function() {deepEqual( Stem("eksportmengden"), "eksportmengd");});
test("eksportnæringer -> eksportnæring", function() {deepEqual( Stem("eksportnæringer"), "eksportnæring");});
test("eksportorienterte -> eksportorienter", function() {deepEqual( Stem("eksportorienterte"), "eksportorienter");});
test("eksportoverskudd -> eksportoverskudd", function() {deepEqual( Stem("eksportoverskudd"), "eksportoverskudd");});
test("eksportprofil -> eksportprofil", function() {deepEqual( Stem("eksportprofil"), "eksportprofil");});
test("eksportrettede -> eksportrett", function() {deepEqual( Stem("eksportrettede"), "eksportrett");});
test("eksportrettet -> eksportrett", function() {deepEqual( Stem("eksportrettet"), "eksportrett");});
test("eksportsammenheng -> eksportsammenheng", function() {deepEqual( Stem("eksportsammenheng"), "eksportsammenheng");});
test("eksportsiden -> eksportsid", function() {deepEqual( Stem("eksportsiden"), "eksportsid");});
test("eksporttransportene -> eksporttransport", function() {deepEqual( Stem("eksporttransportene"), "eksporttransport");});
test("eksporttransporter -> eksporttransport", function() {deepEqual( Stem("eksporttransporter"), "eksporttransport");});
test("eksportutvikling -> eksportutvikling", function() {deepEqual( Stem("eksportutvikling"), "eksportutvikling");});
test("eksportvarer -> eksportvar", function() {deepEqual( Stem("eksportvarer"), "eksportvar");});
test("eksportvekst -> eksportvekst", function() {deepEqual( Stem("eksportvekst"), "eksportvekst");});
test("eksportveksten -> eksportvekst", function() {deepEqual( Stem("eksportveksten"), "eksportvekst");});
test("eksportverdi -> eksportverdi", function() {deepEqual( Stem("eksportverdi"), "eksportverdi");});
test("eksportvolum -> eksportvolum", function() {deepEqual( Stem("eksportvolum"), "eksportvolum");});
test("eksportvolumene -> eksportvolum", function() {deepEqual( Stem("eksportvolumene"), "eksportvolum");});
test("eksportvolumer -> eksportvolum", function() {deepEqual( Stem("eksportvolumer"), "eksportvolum");});
test("eksportvolumet -> eksportvolum", function() {deepEqual( Stem("eksportvolumet"), "eksportvolum");});
test("ekstern -> ekstern", function() {deepEqual( Stem("ekstern"), "ekstern");});
test("eksterne -> ekstern", function() {deepEqual( Stem("eksterne"), "ekstern");});
test("ekstingverte -> ekstingver", function() {deepEqual( Stem("ekstingverte"), "ekstingver");});
test("ekstinksjon -> ekstinksjon", function() {deepEqual( Stem("ekstinksjon"), "ekstinksjon");});
test("ekstinksjonen -> ekstinksjon", function() {deepEqual( Stem("ekstinksjonen"), "ekstinksjon");});
test("ekstinksjonsregelen -> ekstinksjonsregel", function() {deepEqual( Stem("ekstinksjonsregelen"), "ekstinksjonsregel");});
test("ekstra -> ekstr", function() {deepEqual( Stem("ekstra"), "ekstr");});
test("ekstrakostnader -> ekstrakostnad", function() {deepEqual( Stem("ekstrakostnader"), "ekstrakostnad");});
test("ekstraordinær -> ekstraordinær", function() {deepEqual( Stem("ekstraordinær"), "ekstraordinær");});
test("ekstraordinære -> ekstraordinær", function() {deepEqual( Stem("ekstraordinære"), "ekstraordinær");});
test("ekstremt -> ekstremt", function() {deepEqual( Stem("ekstremt"), "ekstremt");});
test("ekte -> ekt", function() {deepEqual( Stem("ekte"), "ekt");});
test("ektefelle -> ektefell", function() {deepEqual( Stem("ektefelle"), "ektefell");});
test("ektefellen -> ektefell", function() {deepEqual( Stem("ektefellen"), "ektefell");});
test("ektefellepensjon -> ektefellepensjon", function() {deepEqual( Stem("ektefellepensjon"), "ektefellepensjon");});
test("ektefellepensjonens -> ektefellepensjon", function() {deepEqual( Stem("ektefellepensjonens"), "ektefellepensjon");});
test("ektefeller -> ektefell", function() {deepEqual( Stem("ektefeller"), "ektefell");});
test("ektefelles -> ektefell", function() {deepEqual( Stem("ektefelles"), "ektefell");});
test("ektemakar -> ektemak", function() {deepEqual( Stem("ektemakar"), "ektemak");});
test("ektemake -> ektemak", function() {deepEqual( Stem("ektemake"), "ektemak");});
test("ektemaken -> ektemak", function() {deepEqual( Stem("ektemaken"), "ektemak");});
test("ektemakens -> ektemak", function() {deepEqual( Stem("ektemakens"), "ektemak");});
test("ektemann -> ektemann", function() {deepEqual( Stem("ektemann"), "ektemann");});
test("ektepar -> ektep", function() {deepEqual( Stem("ektepar"), "ektep");});
test("ekteparet -> ektepar", function() {deepEqual( Stem("ekteparet"), "ektepar");});
test("ekteskap -> ekteskap", function() {deepEqual( Stem("ekteskap"), "ekteskap");});
test("ekteskapet -> ekteskap", function() {deepEqual( Stem("ekteskapet"), "ekteskap");});
test("ekteskaps -> ekteskap", function() {deepEqual( Stem("ekteskaps"), "ekteskap");});
test("ekteskapslova -> ekteskap", function() {deepEqual( Stem("ekteskapslova"), "ekteskap");});
test("ekteskapslovgivningen -> ekteskapslovgivning", function() {deepEqual( Stem("ekteskapslovgivningen"), "ekteskapslovgivning");});
test("el -> el", function() {deepEqual( Stem("el"), "el");});
test("eld -> eld", function() {deepEqual( Stem("eld"), "eld");});
test("elde -> eld", function() {deepEqual( Stem("elde"), "eld");});
test("eldre -> eldr", function() {deepEqual( Stem("eldre"), "eldr");});
test("eldrebustader -> eldrebustad", function() {deepEqual( Stem("eldrebustader"), "eldrebustad");});
test("eldst -> eldst", function() {deepEqual( Stem("eldst"), "eldst");});
test("eldste -> eldst", function() {deepEqual( Stem("eldste"), "eldst");});
test("elektrisk -> elektrisk", function() {deepEqual( Stem("elektrisk"), "elektrisk");});
test("elektronisk -> elektronisk", function() {deepEqual( Stem("elektronisk"), "elektronisk");});
test("elektroniske -> elektronisk", function() {deepEqual( Stem("elektroniske"), "elektronisk");});
test("element -> element", function() {deepEqual( Stem("element"), "element");});
test("elementa -> element", function() {deepEqual( Stem("elementa"), "element");});
test("elementene -> element", function() {deepEqual( Stem("elementene"), "element");});
test("elementer -> element", function() {deepEqual( Stem("elementer"), "element");});
test("elementet -> element", function() {deepEqual( Stem("elementet"), "element");});
test("elendig -> elend", function() {deepEqual( Stem("elendig"), "elend");});
test("elendige -> elend", function() {deepEqual( Stem("elendige"), "elend");});
test("elendighet -> elend", function() {deepEqual( Stem("elendighet"), "elend");});
test("elg -> elg", function() {deepEqual( Stem("elg"), "elg");});
test("elgar -> elg", function() {deepEqual( Stem("elgar"), "elg");});
test("eliminere -> eliminer", function() {deepEqual( Stem("eliminere"), "eliminer");});
test("elisabeth -> elisabeth", function() {deepEqual( Stem("elisabeth"), "elisabeth");});
test("eljudne -> eljudn", function() {deepEqual( Stem("eljudne"), "eljudn");});
test("elkem -> elkem", function() {deepEqual( Stem("elkem"), "elkem");});
test("elkjøp -> elkjøp", function() {deepEqual( Stem("elkjøp"), "elkjøp");});
test("elle -> ell", function() {deepEqual( Stem("elle"), "ell");});
test("eller -> ell", function() {deepEqual( Stem("eller"), "ell");});
test("ellers -> ell", function() {deepEqual( Stem("ellers"), "ell");});
test("elles -> ell", function() {deepEqual( Stem("elles"), "ell");});
test("elleve -> ellev", function() {deepEqual( Stem("elleve"), "ellev");});
test("ellingsen -> ellings", function() {deepEqual( Stem("ellingsen"), "ellings");});
test("elsk -> elsk", function() {deepEqual( Stem("elsk"), "elsk");});
test("elske -> elsk", function() {deepEqual( Stem("elske"), "elsk");});
test("elsker -> elsk", function() {deepEqual( Stem("elsker"), "elsk");});
test("elsket -> elsk", function() {deepEqual( Stem("elsket"), "elsk");});
test("elskovssyk -> elskovssyk", function() {deepEqual( Stem("elskovssyk"), "elskovssyk");});
test("elv -> elv", function() {deepEqual( Stem("elv"), "elv");});
test("elva -> elv", function() {deepEqual( Stem("elva"), "elv");});
test("elveløpet -> elveløp", function() {deepEqual( Stem("elveløpet"), "elveløp");});
test("elven -> elv", function() {deepEqual( Stem("elven"), "elv");});
test("elver -> elv", function() {deepEqual( Stem("elver"), "elv");});
test("elvevegen -> elveveg", function() {deepEqual( Stem("elvevegen"), "elveveg");});
test("embla -> embl", function() {deepEqual( Stem("embla"), "embl");});
test("emden -> emd", function() {deepEqual( Stem("emden"), "emd");});
test("emne -> emn", function() {deepEqual( Stem("emne"), "emn");});
test("empirisk -> empirisk", function() {deepEqual( Stem("empirisk"), "empirisk");});
test("en -> en", function() {deepEqual( Stem("en"), "en");});
test("enda -> end", function() {deepEqual( Stem("enda"), "end");});
test("endar -> end", function() {deepEqual( Stem("endar"), "end");});
test("ende -> end", function() {deepEqual( Stem("ende"), "end");});
test("endeleg -> end", function() {deepEqual( Stem("endeleg"), "end");});
test("endelege -> end", function() {deepEqual( Stem("endelege"), "end");});
test("endelig -> end", function() {deepEqual( Stem("endelig"), "end");});
test("endelige -> end", function() {deepEqual( Stem("endelige"), "end");});
test("enden -> end", function() {deepEqual( Stem("enden"), "end");});
test("endepunkt -> endepunkt", function() {deepEqual( Stem("endepunkt"), "endepunkt");});
test("ender -> end", function() {deepEqual( Stem("ender"), "end");});
test("endevendt -> endevend", function() {deepEqual( Stem("endevendt"), "endevend");});
test("endingar -> ending", function() {deepEqual( Stem("endingar"), "ending");});
test("endr -> endr", function() {deepEqual( Stem("endr"), "endr");});
test("endra -> endr", function() {deepEqual( Stem("endra"), "endr");});
test("endrar -> endr", function() {deepEqual( Stem("endrar"), "endr");});
test("endrast -> endr", function() {deepEqual( Stem("endrast"), "endr");});
test("endre -> endr", function() {deepEqual( Stem("endre"), "endr");});
test("endrede -> endr", function() {deepEqual( Stem("endrede"), "endr");});
test("endrer -> endr", function() {deepEqual( Stem("endrer"), "endr");});
test("endres -> endr", function() {deepEqual( Stem("endres"), "endr");});
test("endret -> endr", function() {deepEqual( Stem("endret"), "endr");});
test("endrete -> endret", function() {deepEqual( Stem("endrete"), "endret");});
test("endring -> endring", function() {deepEqual( Stem("endring"), "endring");});
test("endringa -> endring", function() {deepEqual( Stem("endringa"), "endring");});
test("endringane -> endring", function() {deepEqual( Stem("endringane"), "endring");});
test("endringar -> endring", function() {deepEqual( Stem("endringar"), "endring");});
test("endringen -> endring", function() {deepEqual( Stem("endringen"), "endring");});
test("endringene -> endring", function() {deepEqual( Stem("endringene"), "endring");});
test("endringer -> endring", function() {deepEqual( Stem("endringer"), "endring");});
test("endringsarbeid -> endringsarbeid", function() {deepEqual( Stem("endringsarbeid"), "endringsarbeid");});
test("endringsavtale -> endringsavtal", function() {deepEqual( Stem("endringsavtale"), "endringsavtal");});
test("endringsdirektivets -> endringsdirektiv", function() {deepEqual( Stem("endringsdirektivets"), "endringsdirektiv");});
test("endringsforslag -> endringsforslag", function() {deepEqual( Stem("endringsforslag"), "endringsforslag");});
test("endringslov -> endring", function() {deepEqual( Stem("endringslov"), "endring");});
test("endringstidspunktet -> endringstidspunkt", function() {deepEqual( Stem("endringstidspunktet"), "endringstidspunkt");});
test("endt -> endt", function() {deepEqual( Stem("endt"), "endt");});
test("endte -> endt", function() {deepEqual( Stem("endte"), "endt");});
test("ene -> ene", function() {deepEqual( Stem("ene"), "ene");});
test("eneansvarlig -> eneansvar", function() {deepEqual( Stem("eneansvarlig"), "eneansvar");});
test("enearving -> enearving", function() {deepEqual( Stem("enearving"), "enearving");});
test("enerett -> enerett", function() {deepEqual( Stem("enerett"), "enerett");});
test("energi -> energi", function() {deepEqual( Stem("energi"), "energi");});
test("energieffektivisering -> energieffektivisering", function() {deepEqual( Stem("energieffektivisering"), "energieffektivisering");});
test("energiøkonomi -> energiøkonomi", function() {deepEqual( Stem("energiøkonomi"), "energiøkonomi");});
test("enerom -> enerom", function() {deepEqual( Stem("enerom"), "enerom");});
test("eneste -> enest", function() {deepEqual( Stem("eneste"), "enest");});
test("enestående -> enestå", function() {deepEqual( Stem("enestående"), "enestå");});
test("eng -> eng", function() {deepEqual( Stem("eng"), "eng");});
test("engangs -> engang", function() {deepEqual( Stem("engangs"), "engang");});
test("engangsbeløp -> engangsbeløp", function() {deepEqual( Stem("engangsbeløp"), "engangsbeløp");});
test("engangsbeløpet -> engangsbeløp", function() {deepEqual( Stem("engangsbeløpet"), "engangsbeløp");});
test("engangsinnbetalinger -> engangsinnbetaling", function() {deepEqual( Stem("engangsinnbetalinger"), "engangsinnbetaling");});
test("engangspremie -> engangspremi", function() {deepEqual( Stem("engangspremie"), "engangspremi");});
test("engangspremier -> engangspremi", function() {deepEqual( Stem("engangspremier"), "engangspremi");});
test("engangssum -> engangssum", function() {deepEqual( Stem("engangssum"), "engangssum");});
test("engangsutbetaling -> engangsutbetaling", function() {deepEqual( Stem("engangsutbetaling"), "engangsutbetaling");});
test("engangsutbetalinger -> engangsutbetaling", function() {deepEqual( Stem("engangsutbetalinger"), "engangsutbetaling");});
test("engangsutbetalt -> engangsutbetalt", function() {deepEqual( Stem("engangsutbetalt"), "engangsutbetalt");});
test("engangsutgifter -> engangsutgift", function() {deepEqual( Stem("engangsutgifter"), "engangsutgift");});
test("engangsytelse -> engangsyt", function() {deepEqual( Stem("engangsytelse"), "engangsyt");});
test("engangsytelsen -> engangsyt", function() {deepEqual( Stem("engangsytelsen"), "engangsyt");});
test("engangsytelser -> engangsyt", function() {deepEqual( Stem("engangsytelser"), "engangsyt");});
test("engasjement -> engasjement", function() {deepEqual( Stem("engasjement"), "engasjement");});
test("engasjert -> engasjer", function() {deepEqual( Stem("engasjert"), "engasjer");});
test("engelske -> engelsk", function() {deepEqual( Stem("engelske"), "engelsk");});
test("england -> england", function() {deepEqual( Stem("england"), "england");});
test("engroslagre -> engroslagr", function() {deepEqual( Stem("engroslagre"), "engroslagr");});
test("engrosvirksomhet -> engrosvirksom", function() {deepEqual( Stem("engrosvirksomhet"), "engrosvirksom");});
test("engsoleie -> engsolei", function() {deepEqual( Stem("engsoleie"), "engsolei");});
test("engstelig -> engst", function() {deepEqual( Stem("engstelig"), "engst");});
test("engstet -> engst", function() {deepEqual( Stem("engstet"), "engst");});
test("enhet -> enh", function() {deepEqual( Stem("enhet"), "enh");});
test("enheter -> enhet", function() {deepEqual( Stem("enheter"), "enhet");});
test("enheterisering -> enheterisering", function() {deepEqual( Stem("enheterisering"), "enheterisering");});
test("enheterisert -> enheteriser", function() {deepEqual( Stem("enheterisert"), "enheteriser");});
test("enhetlig -> enhet", function() {deepEqual( Stem("enhetlig"), "enhet");});
test("enhetlige -> enhet", function() {deepEqual( Stem("enhetlige"), "enhet");});
test("enhetsgods -> enhetsgod", function() {deepEqual( Stem("enhetsgods"), "enhetsgod");});
test("enhetslaster -> enhetslast", function() {deepEqual( Stem("enhetslaster"), "enhetslast");});
test("enhetslasteskip -> enhetslasteskip", function() {deepEqual( Stem("enhetslasteskip"), "enhetslasteskip");});
test("enhetslastet -> enhetslast", function() {deepEqual( Stem("enhetslastet"), "enhetslast");});
test("enhetslasthavner -> enhetslasthavn", function() {deepEqual( Stem("enhetslasthavner"), "enhetslasthavn");});
test("enhetslasthåndtering -> enhetslasthåndtering", function() {deepEqual( Stem("enhetslasthåndtering"), "enhetslasthåndtering");});
test("enhetslasttrafikk -> enhetslasttrafikk", function() {deepEqual( Stem("enhetslasttrafikk"), "enhetslasttrafikk");});
test("enhetslasttrafikken -> enhetslasttrafikk", function() {deepEqual( Stem("enhetslasttrafikken"), "enhetslasttrafikk");});
test("enhver -> enhv", function() {deepEqual( Stem("enhver"), "enhv");});
test("enig -> enig", function() {deepEqual( Stem("enig"), "enig");});
test("enige -> enig", function() {deepEqual( Stem("enige"), "enig");});
test("enkel -> enkel", function() {deepEqual( Stem("enkel"), "enkel");});
test("enkelhet -> enkel", function() {deepEqual( Stem("enkelhet"), "enkel");});
test("enkelt -> enkelt", function() {deepEqual( Stem("enkelt"), "enkelt");});
test("enkeltaksjer -> enkeltaksj", function() {deepEqual( Stem("enkeltaksjer"), "enkeltaksj");});
test("enkeltaktørene -> enkeltaktør", function() {deepEqual( Stem("enkeltaktørene"), "enkeltaktør");});
test("enkelte -> enkelt", function() {deepEqual( Stem("enkelte"), "enkelt");});
test("enkeltengasjementer -> enkeltengasjement", function() {deepEqual( Stem("enkeltengasjementer"), "enkeltengasjement");});
test("enkeltes -> enkelt", function() {deepEqual( Stem("enkeltes"), "enkelt");});
test("enkeltforetak -> enkeltforetak", function() {deepEqual( Stem("enkeltforetak"), "enkeltforetak");});
test("enkeltforhold -> enkeltforhold", function() {deepEqual( Stem("enkeltforhold"), "enkeltforhold");});
test("enkeltforslag -> enkeltforslag", function() {deepEqual( Stem("enkeltforslag"), "enkeltforslag");});
test("enkelthavner -> enkelthavn", function() {deepEqual( Stem("enkelthavner"), "enkelthavn");});
test("enkeltkommuners -> enkeltkommun", function() {deepEqual( Stem("enkeltkommuners"), "enkeltkommun");});
test("enkeltlandenes -> enkeltland", function() {deepEqual( Stem("enkeltlandenes"), "enkeltland");});
test("enkeltmannsforetak -> enkeltmannsforetak", function() {deepEqual( Stem("enkeltmannsforetak"), "enkeltmannsforetak");});
test("enkeltmannsføretak -> enkeltmannsføretak", function() {deepEqual( Stem("enkeltmannsføretak"), "enkeltmannsføretak");});
test("enkeltmannsføretaket -> enkeltmannsføretak", function() {deepEqual( Stem("enkeltmannsføretaket"), "enkeltmannsføretak");});
test("enkeltområder -> enkeltområd", function() {deepEqual( Stem("enkeltområder"), "enkeltområd");});
test("enkeltpersoner -> enkeltperson", function() {deepEqual( Stem("enkeltpersoner"), "enkeltperson");});
test("enkeltprosjekter -> enkeltprosjekt", function() {deepEqual( Stem("enkeltprosjekter"), "enkeltprosjekt");});
test("enkeltsaker -> enkeltsak", function() {deepEqual( Stem("enkeltsaker"), "enkeltsak");});
test("enkeltsaksbehandlingen -> enkeltsaksbehandling", function() {deepEqual( Stem("enkeltsaksbehandlingen"), "enkeltsaksbehandling");});
test("enkeltspørsmål -> enkeltspørsmål", function() {deepEqual( Stem("enkeltspørsmål"), "enkeltspørsmål");});
test("enkeltvalg -> enkeltvalg", function() {deepEqual( Stem("enkeltvalg"), "enkeltvalg");});
test("enkeltvedtak -> enkeltvedtak", function() {deepEqual( Stem("enkeltvedtak"), "enkeltvedtak");});
test("enkeltvis -> enkeltvis", function() {deepEqual( Stem("enkeltvis"), "enkeltvis");});
test("enkeltår -> enkeltår", function() {deepEqual( Stem("enkeltår"), "enkeltår");});
test("enkemann -> enkemann", function() {deepEqual( Stem("enkemann"), "enkemann");});
test("enklare -> enklar", function() {deepEqual( Stem("enklare"), "enklar");});
test("enklaste -> enklast", function() {deepEqual( Stem("enklaste"), "enklast");});
test("enkle -> enkl", function() {deepEqual( Stem("enkle"), "enkl");});
test("enklere -> enkler", function() {deepEqual( Stem("enklere"), "enkler");});
test("enkleste -> enklest", function() {deepEqual( Stem("enkleste"), "enklest");});
test("enn -> enn", function() {deepEqual( Stem("enn"), "enn");});
test("enno -> enno", function() {deepEqual( Stem("enno"), "enno");});
test("ennå -> ennå", function() {deepEqual( Stem("ennå"), "ennå");});
test("enorme -> enorm", function() {deepEqual( Stem("enorme"), "enorm");});
test("ensbetydende -> ensbetyd", function() {deepEqual( Stem("ensbetydende"), "ensbetyd");});
test("enser -> ens", function() {deepEqual( Stem("enser"), "ens");});
test("ensidig -> ensid", function() {deepEqual( Stem("ensidig"), "ensid");});
test("enslig -> ens", function() {deepEqual( Stem("enslig"), "ens");});
test("enslige -> ens", function() {deepEqual( Stem("enslige"), "ens");});
test("ensom -> ensom", function() {deepEqual( Stem("ensom"), "ensom");});
test("enten -> ent", function() {deepEqual( Stem("enten"), "ent");});
test("entreprenør -> entreprenør", function() {deepEqual( Stem("entreprenør"), "entreprenør");});
test("entreprenørar -> entreprenør", function() {deepEqual( Stem("entreprenørar"), "entreprenør");});
test("entreprenøren -> entreprenør", function() {deepEqual( Stem("entreprenøren"), "entreprenør");});
test("entreprenørføretak -> entreprenørføretak", function() {deepEqual( Stem("entreprenørføretak"), "entreprenørføretak");});
test("entreprise -> entrepris", function() {deepEqual( Stem("entreprise"), "entrepris");});
test("entydig -> entyd", function() {deepEqual( Stem("entydig"), "entyd");});
test("enøyd -> enøyd", function() {deepEqual( Stem("enøyd"), "enøyd");});
test("enøyde -> enøyd", function() {deepEqual( Stem("enøyde"), "enøyd");});
test("epes -> epes", function() {deepEqual( Stem("epes"), "epes");});
test("eple -> epl", function() {deepEqual( Stem("eple"), "epl");});
test("eplene -> epl", function() {deepEqual( Stem("eplene"), "epl");});
test("epler -> epl", function() {deepEqual( Stem("epler"), "epl");});
test("eplet -> epl", function() {deepEqual( Stem("eplet"), "epl");});
test("epletrær -> epletrær", function() {deepEqual( Stem("epletrær"), "epletrær");});
test("equivalent -> equivalent", function() {deepEqual( Stem("equivalent"), "equivalent");});
test("er -> er", function() {deepEqual( Stem("er"), "er");});
test("erfaren -> erfar", function() {deepEqual( Stem("erfaren"), "erfar");});
test("erfaring -> erfaring", function() {deepEqual( Stem("erfaring"), "erfaring");});
test("erfaringene -> erfaring", function() {deepEqual( Stem("erfaringene"), "erfaring");});
test("erfaringer -> erfaring", function() {deepEqual( Stem("erfaringer"), "erfaring");});
test("erfaringsmateriale -> erfaringsmaterial", function() {deepEqual( Stem("erfaringsmateriale"), "erfaringsmaterial");});
test("erfaringstall -> erfaringstall", function() {deepEqual( Stem("erfaringstall"), "erfaringstall");});
test("ergerlig -> erger", function() {deepEqual( Stem("ergerlig"), "erger");});
test("ergerlige -> erger", function() {deepEqual( Stem("ergerlige"), "erger");});
test("ergrelse -> ergr", function() {deepEqual( Stem("ergrelse"), "ergr");});
test("erik -> erik", function() {deepEqual( Stem("erik"), "erik");});
test("erkjennelse -> erkjenn", function() {deepEqual( Stem("erkjennelse"), "erkjenn");});
test("erling -> erling", function() {deepEqual( Stem("erling"), "erling");});
test("erstatning -> erstatning", function() {deepEqual( Stem("erstatning"), "erstatning");});
test("erstatningsansvaret -> erstatningsansvar", function() {deepEqual( Stem("erstatningsansvaret"), "erstatningsansvar");});
test("erstatte -> erstatt", function() {deepEqual( Stem("erstatte"), "erstatt");});
test("erstattes -> erstatt", function() {deepEqual( Stem("erstattes"), "erstatt");});
test("erstattet -> erstatt", function() {deepEqual( Stem("erstattet"), "erstatt");});
test("erte -> ert", function() {deepEqual( Stem("erte"), "ert");});
test("erter -> ert", function() {deepEqual( Stem("erter"), "ert");});
test("ertet -> ert", function() {deepEqual( Stem("ertet"), "ert");});
test("erverv -> erverv", function() {deepEqual( Stem("erverv"), "erverv");});
test("erverva -> erverv", function() {deepEqual( Stem("erverva"), "erverv");});
test("ervervar -> erverv", function() {deepEqual( Stem("ervervar"), "erverv");});
test("ervervarane -> ervervar", function() {deepEqual( Stem("ervervarane"), "ervervar");});
test("ervervarar -> ervervar", function() {deepEqual( Stem("ervervarar"), "ervervar");});
test("ervervaren -> ervervar", function() {deepEqual( Stem("ervervaren"), "ervervar");});
test("ervervarens -> ervervar", function() {deepEqual( Stem("ervervarens"), "ervervar");});
test("erverve -> erverv", function() {deepEqual( Stem("erverve"), "erverv");});
test("ervervede -> erverv", function() {deepEqual( Stem("ervervede"), "erverv");});
test("ervervet -> erverv", function() {deepEqual( Stem("ervervet"), "erverv");});
test("ervervsevnen -> ervervsevn", function() {deepEqual( Stem("ervervsevnen"), "ervervsevn");});
test("ervervsfasen -> ervervsfas", function() {deepEqual( Stem("ervervsfasen"), "ervervsfas");});
test("ervervsinntekt -> ervervsinntekt", function() {deepEqual( Stem("ervervsinntekt"), "ervervsinntekt");});
test("ervervskostnadene -> ervervskostnad", function() {deepEqual( Stem("ervervskostnadene"), "ervervskostnad");});
test("ervervsmessig -> ervervsmess", function() {deepEqual( Stem("ervervsmessig"), "ervervsmess");});
test("ervervsprøves -> ervervsprøv", function() {deepEqual( Stem("ervervsprøves"), "ervervsprøv");});
test("ervervsprøving -> ervervsprøving", function() {deepEqual( Stem("ervervsprøving"), "ervervsprøving");});
test("ervervsprøvingen -> ervervsprøving", function() {deepEqual( Stem("ervervsprøvingen"), "ervervsprøving");});
test("erwerbes -> erwerb", function() {deepEqual( Stem("erwerbes"), "erwerb");});
test("erwerbs -> erwerb", function() {deepEqual( Stem("erwerbs"), "erwerb");});
test("estetikk -> estetikk", function() {deepEqual( Stem("estetikk"), "estetikk");});
test("estetiske -> estetisk", function() {deepEqual( Stem("estetiske"), "estetisk");});
test("estimert -> estimer", function() {deepEqual( Stem("estimert"), "estimer");});
test("et -> et", function() {deepEqual( Stem("et"), "et");});
test("etablerast -> etabler", function() {deepEqual( Stem("etablerast"), "etabler");});
test("etablere -> etabler", function() {deepEqual( Stem("etablere"), "etabler");});
test("etablerer -> etabler", function() {deepEqual( Stem("etablerer"), "etabler");});
test("etableres -> etabler", function() {deepEqual( Stem("etableres"), "etabler");});
test("etablering -> etablering", function() {deepEqual( Stem("etablering"), "etablering");});
test("etableringa -> etablering", function() {deepEqual( Stem("etableringa"), "etablering");});
test("etableringen -> etablering", function() {deepEqual( Stem("etableringen"), "etablering");});
test("etableringsadgangen -> etableringsadgang", function() {deepEqual( Stem("etableringsadgangen"), "etableringsadgang");});
test("etableringshorisont -> etableringshorisont", function() {deepEqual( Stem("etableringshorisont"), "etableringshorisont");});
test("etableringsproblem -> etableringsproblem", function() {deepEqual( Stem("etableringsproblem"), "etableringsproblem");});
test("etableringsstaten -> etableringsstat", function() {deepEqual( Stem("etableringsstaten"), "etableringsstat");});
test("etablert -> etabler", function() {deepEqual( Stem("etablert"), "etabler");});
test("etablerte -> etabler", function() {deepEqual( Stem("etablerte"), "etabler");});
test("etappe -> etapp", function() {deepEqual( Stem("etappe"), "etapp");});
test("etappen -> etapp", function() {deepEqual( Stem("etappen"), "etapp");});
test("etapper -> etapp", function() {deepEqual( Stem("etapper"), "etapp");});
test("etappevis -> etappevis", function() {deepEqual( Stem("etappevis"), "etappevis");});
test("etappevise -> etappevis", function() {deepEqual( Stem("etappevise"), "etappevis");});
test("etasje -> etasj", function() {deepEqual( Stem("etasje"), "etasj");});
test("etat -> etat", function() {deepEqual( Stem("etat"), "etat");});
test("etatar -> etat", function() {deepEqual( Stem("etatar"), "etat");});
test("etaten -> etat", function() {deepEqual( Stem("etaten"), "etat");});
test("etatene -> etat", function() {deepEqual( Stem("etatene"), "etat");});
test("etatens -> etat", function() {deepEqual( Stem("etatens"), "etat");});
test("etc -> etc", function() {deepEqual( Stem("etc"), "etc");});
test("ete -> ete", function() {deepEqual( Stem("ete"), "ete");});
test("eter -> eter", function() {deepEqual( Stem("eter"), "eter");});
test("ethvert -> ethver", function() {deepEqual( Stem("ethvert"), "ethver");});
test("etiske -> etisk", function() {deepEqual( Stem("etiske"), "etisk");});
test("etla -> etl", function() {deepEqual( Stem("etla"), "etl");});
test("etnisk -> etnisk", function() {deepEqual( Stem("etnisk"), "etnisk");});
test("ett -> ett", function() {deepEqual( Stem("ett"), "ett");});
test("etter -> ett", function() {deepEqual( Stem("etter"), "ett");});
test("etterarbeid -> etterarbeid", function() {deepEqual( Stem("etterarbeid"), "etterarbeid");});
test("etterfølgende -> etterfølg", function() {deepEqual( Stem("etterfølgende"), "etterfølg");});
test("etterkome -> etterkom", function() {deepEqual( Stem("etterkome"), "etterkom");});
test("etterkomme -> etterkomm", function() {deepEqual( Stem("etterkomme"), "etterkomm");});
test("etterkommere -> etterkommer", function() {deepEqual( Stem("etterkommere"), "etterkommer");});
test("etterkommes -> etterkomm", function() {deepEqual( Stem("etterkommes"), "etterkomm");});
test("etterkrigstida -> etterkrigstid", function() {deepEqual( Stem("etterkrigstida"), "etterkrigstid");});
test("etterlate -> etterlat", function() {deepEqual( Stem("etterlate"), "etterlat");});
test("etterlatt -> etterlatt", function() {deepEqual( Stem("etterlatt"), "etterlatt");});
test("etterlatte -> etterlatt", function() {deepEqual( Stem("etterlatte"), "etterlatt");});
test("etterlattedekning -> etterlattedekning", function() {deepEqual( Stem("etterlattedekning"), "etterlattedekning");});
test("etterlattepensjon -> etterlattepensjon", function() {deepEqual( Stem("etterlattepensjon"), "etterlattepensjon");});
test("etterlattepensjonenes -> etterlattepensjon", function() {deepEqual( Stem("etterlattepensjonenes"), "etterlattepensjon");});
test("etterlattepensjoner -> etterlattepensjon", function() {deepEqual( Stem("etterlattepensjoner"), "etterlattepensjon");});
test("etterlattes -> etterlatt", function() {deepEqual( Stem("etterlattes"), "etterlatt");});
test("etterlatteytelsene -> etterlatteyt", function() {deepEqual( Stem("etterlatteytelsene"), "etterlatteyt");});
test("etterlatteytelser -> etterlatteyt", function() {deepEqual( Stem("etterlatteytelser"), "etterlatteyt");});
test("etterlattforsikring -> etterlattforsikring", function() {deepEqual( Stem("etterlattforsikring"), "etterlattforsikring");});
test("etterlattpensjon -> etterlattpensjon", function() {deepEqual( Stem("etterlattpensjon"), "etterlattpensjon");});
test("etterlattpensjoner -> etterlattpensjon", function() {deepEqual( Stem("etterlattpensjoner"), "etterlattpensjon");});
test("etterleving -> etterleving", function() {deepEqual( Stem("etterleving"), "etterleving");});
test("ettermiddag -> ettermiddag", function() {deepEqual( Stem("ettermiddag"), "ettermiddag");});
test("ettermiddagen -> ettermiddag", function() {deepEqual( Stem("ettermiddagen"), "ettermiddag");});
test("ettermæle -> ettermæl", function() {deepEqual( Stem("ettermæle"), "ettermæl");});
test("etterprioriterte -> etterprioriter", function() {deepEqual( Stem("etterprioriterte"), "etterprioriter");});
test("etterprøve -> etterprøv", function() {deepEqual( Stem("etterprøve"), "etterprøv");});
test("etterpå -> etterpå", function() {deepEqual( Stem("etterpå"), "etterpå");});
test("etterskot -> etterskot", function() {deepEqual( Stem("etterskot"), "etterskot");});
test("etterskotsvis -> etterskotsvis", function() {deepEqual( Stem("etterskotsvis"), "etterskotsvis");});
test("etterslepseffekten -> etterslepseffekt", function() {deepEqual( Stem("etterslepseffekten"), "etterslepseffekt");});
test("ettersom -> ettersom", function() {deepEqual( Stem("ettersom"), "ettersom");});
test("etterspurde -> etterspurd", function() {deepEqual( Stem("etterspurde"), "etterspurd");});
test("etterspurnad -> etterspurnad", function() {deepEqual( Stem("etterspurnad"), "etterspurnad");});
test("etterspurnaden -> etterspurnad", function() {deepEqual( Stem("etterspurnaden"), "etterspurnad");});
test("etterspør -> etterspør", function() {deepEqual( Stem("etterspør"), "etterspør");});
test("etterspørelsen -> etterspør", function() {deepEqual( Stem("etterspørelsen"), "etterspør");});
test("etterspørsel -> etterspørsel", function() {deepEqual( Stem("etterspørsel"), "etterspørsel");});
test("etterspørselen -> etterspørsel", function() {deepEqual( Stem("etterspørselen"), "etterspørsel");});
test("etterspørselens -> etterspørsel", function() {deepEqual( Stem("etterspørselens"), "etterspørsel");});
test("etterspørselsregulering -> etterspørselsregulering", function() {deepEqual( Stem("etterspørselsregulering"), "etterspørselsregulering");});
test("etterspørselssiden -> etterspørselssid", function() {deepEqual( Stem("etterspørselssiden"), "etterspørselssid");});
test("etterspørselsvekst -> etterspørselsvekst", function() {deepEqual( Stem("etterspørselsvekst"), "etterspørselsvekst");});
test("etterspørselsveksten -> etterspørselsvekst", function() {deepEqual( Stem("etterspørselsveksten"), "etterspørselsvekst");});
test("etterståande -> etterstå", function() {deepEqual( Stem("etterståande"), "etterstå");});
test("ettersyn -> ettersyn", function() {deepEqual( Stem("ettersyn"), "ettersyn");});
test("ettertid -> ettertid", function() {deepEqual( Stem("ettertid"), "ettertid");});
test("etterutluting -> etterutluting", function() {deepEqual( Stem("etterutluting"), "etterutluting");});
test("ettårige -> ettår", function() {deepEqual( Stem("ettårige"), "ettår");});
test("eu -> eu", function() {deepEqual( Stem("eu"), "eu");});
test("euro -> euro", function() {deepEqual( Stem("euro"), "euro");});
test("europa -> europ", function() {deepEqual( Stem("europa"), "europ");});
test("europaparlaments -> europaparlament", function() {deepEqual( Stem("europaparlaments"), "europaparlament");});
test("europas -> europ", function() {deepEqual( Stem("europas"), "europ");});
test("european -> european", function() {deepEqual( Stem("european"), "european");});
test("europeen -> europe", function() {deepEqual( Stem("europeen"), "europe");});
test("europeisk -> europeisk", function() {deepEqual( Stem("europeisk"), "europeisk");});
test("europeiske -> europeisk", function() {deepEqual( Stem("europeiske"), "europeisk");});
test("eus -> eus", function() {deepEqual( Stem("eus"), "eus");});
test("eventuell -> eventuell", function() {deepEqual( Stem("eventuell"), "eventuell");});
test("eventuelle -> eventuell", function() {deepEqual( Stem("eventuelle"), "eventuell");});
test("eventuelt -> eventuelt", function() {deepEqual( Stem("eventuelt"), "eventuelt");});
test("eventyr -> eventyr", function() {deepEqual( Stem("eventyr"), "eventyr");});
test("eventyrene -> eventyr", function() {deepEqual( Stem("eventyrene"), "eventyr");});
test("eventyret -> eventyr", function() {deepEqual( Stem("eventyret"), "eventyr");});
test("evig -> evig", function() {deepEqual( Stem("evig"), "evig");});
test("evige -> evig", function() {deepEqual( Stem("evige"), "evig");});
test("eviggrønne -> eviggrønn", function() {deepEqual( Stem("eviggrønne"), "eviggrønn");});
test("evighet -> evig", function() {deepEqual( Stem("evighet"), "evig");});
test("evne -> evn", function() {deepEqual( Stem("evne"), "evn");});
test("evnen -> evn", function() {deepEqual( Stem("evnen"), "evn");});
test("evt -> evt", function() {deepEqual( Stem("evt"), "evt");});
test("eøf -> eøf", function() {deepEqual( Stem("eøf"), "eøf");});
test("eøs -> eøs", function() {deepEqual( Stem("eøs"), "eøs");});
test("f -> f", function() {deepEqual( Stem("f"), "f");});
test("fabrikker -> fabrikk", function() {deepEqual( Stem("fabrikker"), "fabrikk");});
test("fact -> fact", function() {deepEqual( Stem("fact"), "fact");});
test("fager -> fag", function() {deepEqual( Stem("fager"), "fag");});
test("fagforeining -> fagforeining", function() {deepEqual( Stem("fagforeining"), "fagforeining");});
test("fagforeiningar -> fagforeining", function() {deepEqual( Stem("fagforeiningar"), "fagforeining");});
test("faggrupper -> faggrupp", function() {deepEqual( Stem("faggrupper"), "faggrupp");});
test("fagleg -> fag", function() {deepEqual( Stem("fagleg"), "fag");});
test("faglig -> fag", function() {deepEqual( Stem("faglig"), "fag");});
test("faglige -> fag", function() {deepEqual( Stem("faglige"), "fag");});
test("fagmyndigheter -> fagmynd", function() {deepEqual( Stem("fagmyndigheter"), "fagmynd");});
test("fagorganisasjonar -> fagorganisasjon", function() {deepEqual( Stem("fagorganisasjonar"), "fagorganisasjon");});
test("fagrest -> fagrest", function() {deepEqual( Stem("fagrest"), "fagrest");});
test("fakkeltog -> fakkeltog", function() {deepEqual( Stem("fakkeltog"), "fakkeltog");});
test("fakket -> fakk", function() {deepEqual( Stem("fakket"), "fakk");});
test("fakler -> fakl", function() {deepEqual( Stem("fakler"), "fakl");});
test("faktisk -> faktisk", function() {deepEqual( Stem("faktisk"), "faktisk");});
test("faktiske -> faktisk", function() {deepEqual( Stem("faktiske"), "faktisk");});
test("faktor -> faktor", function() {deepEqual( Stem("faktor"), "faktor");});
test("faktorar -> faktor", function() {deepEqual( Stem("faktorar"), "faktor");});
test("faktorene -> faktor", function() {deepEqual( Stem("faktorene"), "faktor");});
test("faktorer -> faktor", function() {deepEqual( Stem("faktorer"), "faktor");});
test("faktoringpant -> faktoringpant", function() {deepEqual( Stem("faktoringpant"), "faktoringpant");});
test("faktum -> faktum", function() {deepEqual( Stem("faktum"), "faktum");});
test("fakulteta -> fakultet", function() {deepEqual( Stem("fakulteta"), "fakultet");});
test("falk -> falk", function() {deepEqual( Stem("falk"), "falk");});
test("falke -> falk", function() {deepEqual( Stem("falke"), "falk");});
test("falkehammen -> falkehamm", function() {deepEqual( Stem("falkehammen"), "falkehamm");});
test("falkemannen -> falkemann", function() {deepEqual( Stem("falkemannen"), "falkemann");});
test("falken -> falk", function() {deepEqual( Stem("falken"), "falk");});
test("fall -> fall", function() {deepEqual( Stem("fall"), "fall");});
test("falle -> fall", function() {deepEqual( Stem("falle"), "fall");});
test("falleferdig -> falleferd", function() {deepEqual( Stem("falleferdig"), "falleferd");});
test("fallen -> fall", function() {deepEqual( Stem("fallen"), "fall");});
test("faller -> fall", function() {deepEqual( Stem("faller"), "fall");});
test("fallet -> fall", function() {deepEqual( Stem("fallet"), "fall");});
test("falne -> faln", function() {deepEqual( Stem("falne"), "faln");});
test("falnes -> faln", function() {deepEqual( Stem("falnes"), "faln");});
test("falsk -> falsk", function() {deepEqual( Stem("falsk"), "falsk");});
test("falskest -> falskest", function() {deepEqual( Stem("falskest"), "falskest");});
test("falskhet -> falsk", function() {deepEqual( Stem("falskhet"), "falsk");});
test("falt -> falt", function() {deepEqual( Stem("falt"), "falt");});
test("familiane -> famili", function() {deepEqual( Stem("familiane"), "famili");});
test("familie -> famili", function() {deepEqual( Stem("familie"), "famili");});
test("familieforhold -> familieforhold", function() {deepEqual( Stem("familieforhold"), "familieforhold");});
test("familieliv -> familieliv", function() {deepEqual( Stem("familieliv"), "familieliv");});
test("familiemedlemmer -> familiemedlemm", function() {deepEqual( Stem("familiemedlemmer"), "familiemedlemm");});
test("familien -> famili", function() {deepEqual( Stem("familien"), "famili");});
test("familierettslege -> familieretts", function() {deepEqual( Stem("familierettslege"), "familieretts");});
test("familiesituasjon -> familiesituasjon", function() {deepEqual( Stem("familiesituasjon"), "familiesituasjon");});
test("famler -> faml", function() {deepEqual( Stem("famler"), "faml");});
test("fang -> fang", function() {deepEqual( Stem("fang"), "fang");});
test("fanga -> fang", function() {deepEqual( Stem("fanga"), "fang");});
test("fangar -> fang", function() {deepEqual( Stem("fangar"), "fang");});
test("fange -> fang", function() {deepEqual( Stem("fange"), "fang");});
test("fangen -> fang", function() {deepEqual( Stem("fangen"), "fang");});
test("fanger -> fang", function() {deepEqual( Stem("fanger"), "fang");});
test("fanges -> fang", function() {deepEqual( Stem("fanges"), "fang");});
test("fanget -> fang", function() {deepEqual( Stem("fanget"), "fang");});
test("fangst -> fangst", function() {deepEqual( Stem("fangst"), "fangst");});
test("fangsten -> fangst", function() {deepEqual( Stem("fangsten"), "fangst");});
test("fanst -> fanst", function() {deepEqual( Stem("fanst"), "fanst");});
test("fant -> fant", function() {deepEqual( Stem("fant"), "fant");});
test("fanteri -> fanteri", function() {deepEqual( Stem("fanteri"), "fanteri");});
test("fantes -> fant", function() {deepEqual( Stem("fantes"), "fant");});
test("far -> far", function() {deepEqual( Stem("far"), "far");});
test("farbror -> farbror", function() {deepEqual( Stem("farbror"), "farbror");});
test("fare -> far", function() {deepEqual( Stem("fare"), "far");});
test("faren -> far", function() {deepEqual( Stem("faren"), "far");});
test("farende -> far", function() {deepEqual( Stem("farende"), "far");});
test("farer -> far", function() {deepEqual( Stem("farer"), "far");});
test("fargede -> farg", function() {deepEqual( Stem("fargede"), "farg");});
test("farkosten -> farkost", function() {deepEqual( Stem("farkosten"), "farkost");});
test("farleden -> farled", function() {deepEqual( Stem("farleden"), "farled");});
test("farledene -> farled", function() {deepEqual( Stem("farledene"), "farled");});
test("farleder -> farled", function() {deepEqual( Stem("farleder"), "farled");});
test("farledsnettet -> farledsnett", function() {deepEqual( Stem("farledsnettet"), "farledsnett");});
test("farledssektoren -> farledssektor", function() {deepEqual( Stem("farledssektoren"), "farledssektor");});
test("farlig -> far", function() {deepEqual( Stem("farlig"), "far");});
test("farlige -> far", function() {deepEqual( Stem("farlige"), "far");});
test("farligere -> farliger", function() {deepEqual( Stem("farligere"), "farliger");});
test("farligste -> farligst", function() {deepEqual( Stem("farligste"), "farligst");});
test("farmasøyt -> farmasøyt", function() {deepEqual( Stem("farmasøyt"), "farmasøyt");});
test("farmasøytiske -> farmasøytisk", function() {deepEqual( Stem("farmasøytiske"), "farmasøytisk");});
test("farriseidet -> farriseid", function() {deepEqual( Stem("farriseidet"), "farriseid");});
test("fars -> far", function() {deepEqual( Stem("fars"), "far");});
test("fart -> fart", function() {deepEqual( Stem("fart"), "fart");});
test("farten -> fart", function() {deepEqual( Stem("farten"), "fart");});
test("fartsdempende -> fartsdemp", function() {deepEqual( Stem("fartsdempende"), "fartsdemp");});
test("fartøy -> fartøy", function() {deepEqual( Stem("fartøy"), "fartøy");});
test("fartøyene -> fartøy", function() {deepEqual( Stem("fartøyene"), "fartøy");});
test("fartøyer -> fartøy", function() {deepEqual( Stem("fartøyer"), "fartøy");});
test("fartøystørrelse -> fartøystørr", function() {deepEqual( Stem("fartøystørrelse"), "fartøystørr");});
test("farvann -> farvann", function() {deepEqual( Stem("farvann"), "farvann");});
test("farvannet -> farvann", function() {deepEqual( Stem("farvannet"), "farvann");});
test("farvannets -> farvann", function() {deepEqual( Stem("farvannets"), "farvann");});
test("farvannslov -> farvann", function() {deepEqual( Stem("farvannslov"), "farvann");});
test("farvannsloven -> farvann", function() {deepEqual( Stem("farvannsloven"), "farvann");});
test("farvannslovens -> farvann", function() {deepEqual( Stem("farvannslovens"), "farvann");});
test("farvannssaker -> farvannssak", function() {deepEqual( Stem("farvannssaker"), "farvannssak");});
test("farve -> farv", function() {deepEqual( Stem("farve"), "farv");});
test("farvel -> farvel", function() {deepEqual( Stem("farvel"), "farvel");});
test("farvene -> farv", function() {deepEqual( Stem("farvene"), "farv");});
test("fascinerer -> fasciner", function() {deepEqual( Stem("fascinerer"), "fasciner");});
test("fase -> fas", function() {deepEqual( Stem("fase"), "fas");});
test("fasen -> fas", function() {deepEqual( Stem("fasen"), "fas");});
test("fasiliteter -> fasilitet", function() {deepEqual( Stem("fasiliteter"), "fasilitet");});
test("fast -> fast", function() {deepEqual( Stem("fast"), "fast");});
test("faste -> fast", function() {deepEqual( Stem("faste"), "fast");});
test("fastere -> faster", function() {deepEqual( Stem("fastere"), "faster");});
test("fastlagt -> fastlagt", function() {deepEqual( Stem("fastlagt"), "fastlagt");});
test("fastlandet -> fastland", function() {deepEqual( Stem("fastlandet"), "fastland");});
test("fastlands -> fastland", function() {deepEqual( Stem("fastlands"), "fastland");});
test("fastlege -> fast", function() {deepEqual( Stem("fastlege"), "fast");});
test("fastlegge -> fastlegg", function() {deepEqual( Stem("fastlegge"), "fastlegg");});
test("fastlegger -> fastlegg", function() {deepEqual( Stem("fastlegger"), "fastlegg");});
test("fastlegges -> fastlegg", function() {deepEqual( Stem("fastlegges"), "fastlegg");});
test("fastlegging -> fastlegging", function() {deepEqual( Stem("fastlegging"), "fastlegging");});
test("fastlegginga -> fastlegging", function() {deepEqual( Stem("fastlegginga"), "fastlegging");});
test("fastleggjast -> fastleggj", function() {deepEqual( Stem("fastleggjast"), "fastleggj");});
test("fastleggje -> fastleggj", function() {deepEqual( Stem("fastleggje"), "fastleggj");});
test("fastlåst -> fastlåst", function() {deepEqual( Stem("fastlåst"), "fastlåst");});
test("fastprisavtalar -> fastprisavtal", function() {deepEqual( Stem("fastprisavtalar"), "fastprisavtal");});
test("fastrenteinnskudd -> fastrenteinnskudd", function() {deepEqual( Stem("fastrenteinnskudd"), "fastrenteinnskudd");});
test("fastrentelån -> fastrentelån", function() {deepEqual( Stem("fastrentelån"), "fastrentelån");});
test("fastsatt -> fastsatt", function() {deepEqual( Stem("fastsatt"), "fastsatt");});
test("fastsatte -> fastsatt", function() {deepEqual( Stem("fastsatte"), "fastsatt");});
test("fastset -> fasts", function() {deepEqual( Stem("fastset"), "fasts");});
test("fastsetjast -> fastsetj", function() {deepEqual( Stem("fastsetjast"), "fastsetj");});
test("fastsetje -> fastsetj", function() {deepEqual( Stem("fastsetje"), "fastsetj");});
test("fastsetjing -> fastsetjing", function() {deepEqual( Stem("fastsetjing"), "fastsetjing");});
test("fastsetjinga -> fastsetjing", function() {deepEqual( Stem("fastsetjinga"), "fastsetjing");});
test("fastsetjingsdom -> fastsetjingsdom", function() {deepEqual( Stem("fastsetjingsdom"), "fastsetjingsdom");});
test("fastsett -> fastsett", function() {deepEqual( Stem("fastsett"), "fastsett");});
test("fastsette -> fastsett", function() {deepEqual( Stem("fastsette"), "fastsett");});
test("fastsettelse -> fastsett", function() {deepEqual( Stem("fastsettelse"), "fastsett");});
test("fastsettelsen -> fastsett", function() {deepEqual( Stem("fastsettelsen"), "fastsett");});
test("fastsetter -> fastsett", function() {deepEqual( Stem("fastsetter"), "fastsett");});
test("fastsettes -> fastsett", function() {deepEqual( Stem("fastsettes"), "fastsett");});
test("fastslege -> fasts", function() {deepEqual( Stem("fastslege"), "fasts");});
test("fastslo -> fastslo", function() {deepEqual( Stem("fastslo"), "fastslo");});
test("fastslå -> fastslå", function() {deepEqual( Stem("fastslå"), "fastslå");});
test("fastslår -> fastslår", function() {deepEqual( Stem("fastslår"), "fastslår");});
test("fastslås -> fastslås", function() {deepEqual( Stem("fastslås"), "fastslås");});
test("fat -> fat", function() {deepEqual( Stem("fat"), "fat");});
test("fatet -> fat", function() {deepEqual( Stem("fatet"), "fat");});
test("fatt -> fatt", function() {deepEqual( Stem("fatt"), "fatt");});
test("fatte -> fatt", function() {deepEqual( Stem("fatte"), "fatt");});
test("fatter -> fatt", function() {deepEqual( Stem("fatter"), "fatt");});
test("fattes -> fatt", function() {deepEqual( Stem("fattes"), "fatt");});
test("fattet -> fatt", function() {deepEqual( Stem("fattet"), "fatt");});
test("fattig -> fatt", function() {deepEqual( Stem("fattig"), "fatt");});
test("fattigdom -> fattigdom", function() {deepEqual( Stem("fattigdom"), "fattigdom");});
test("fauna -> faun", function() {deepEqual( Stem("fauna"), "faun");});
test("favne -> favn", function() {deepEqual( Stem("favne"), "favn");});
test("favnen -> favn", function() {deepEqual( Stem("favnen"), "favn");});
test("favner -> favn", function() {deepEqual( Stem("favner"), "favn");});
test("favntak -> favntak", function() {deepEqual( Stem("favntak"), "favntak");});
test("favoriserer -> favoriser", function() {deepEqual( Stem("favoriserer"), "favoriser");});
test("favorisering -> favorisering", function() {deepEqual( Stem("favorisering"), "favorisering");});
test("favoriseringen -> favorisering", function() {deepEqual( Stem("favoriseringen"), "favorisering");});
test("favør -> favør", function() {deepEqual( Stem("favør"), "favør");});
test("fdb -> fdb", function() {deepEqual( Stem("fdb"), "fdb");});
test("fe -> fe", function() {deepEqual( Stem("fe"), "fe");});
test("februar -> febru", function() {deepEqual( Stem("februar"), "febru");});
test("federabitazione -> federabitazion", function() {deepEqual( Stem("federabitazione"), "federabitazion");});
test("federazione -> federazion", function() {deepEqual( Stem("federazione"), "federazion");});
test("feederbåter -> feederbåt", function() {deepEqual( Stem("feederbåter"), "feederbåt");});
test("feederhavner -> feederhavn", function() {deepEqual( Stem("feederhavner"), "feederhavn");});
test("feederløsninger -> feederløsning", function() {deepEqual( Stem("feederløsninger"), "feederløsning");});
test("feedernettet -> feedernett", function() {deepEqual( Stem("feedernettet"), "feedernett");});
test("feederrederiene -> feederrederi", function() {deepEqual( Stem("feederrederiene"), "feederrederi");});
test("feederskip -> feederskip", function() {deepEqual( Stem("feederskip"), "feederskip");});
test("feedersystem -> feedersystem", function() {deepEqual( Stem("feedersystem"), "feedersystem");});
test("feedertrafikk -> feedertrafikk", function() {deepEqual( Stem("feedertrafikk"), "feedertrafikk");});
test("feedertrafikken -> feedertrafikk", function() {deepEqual( Stem("feedertrafikken"), "feedertrafikk");});
test("feedertransport -> feedertransport", function() {deepEqual( Stem("feedertransport"), "feedertransport");});
test("feedertransportene -> feedertransport", function() {deepEqual( Stem("feedertransportene"), "feedertransport");});
test("feedertransporter -> feedertransport", function() {deepEqual( Stem("feedertransporter"), "feedertransport");});
test("feedervolumer -> feedervolum", function() {deepEqual( Stem("feedervolumer"), "feedervolum");});
test("feeedertransport -> feeedertransport", function() {deepEqual( Stem("feeedertransport"), "feeedertransport");});
test("feier -> feier", function() {deepEqual( Stem("feier"), "feier");});
test("feig -> feig", function() {deepEqual( Stem("feig"), "feig");});
test("feige -> feig", function() {deepEqual( Stem("feige"), "feig");});
test("feigeste -> feigest", function() {deepEqual( Stem("feigeste"), "feigest");});
test("feil -> feil", function() {deepEqual( Stem("feil"), "feil");});
test("feilen -> feil", function() {deepEqual( Stem("feilen"), "feil");});
test("feiler -> feil", function() {deepEqual( Stem("feiler"), "feil");});
test("feilkalkylar -> feilkalkyl", function() {deepEqual( Stem("feilkalkylar"), "feilkalkyl");});
test("feire -> feir", function() {deepEqual( Stem("feire"), "feir");});
test("fekk -> fekk", function() {deepEqual( Stem("fekk"), "fekk");});
test("fekter -> fekt", function() {deepEqual( Stem("fekter"), "fekt");});
test("fektet -> fekt", function() {deepEqual( Stem("fektet"), "fekt");});
test("felixstowe -> felixstow", function() {deepEqual( Stem("felixstowe"), "felixstow");});
test("fell -> fell", function() {deepEqual( Stem("fell"), "fell");});
test("felle -> fell", function() {deepEqual( Stem("felle"), "fell");});
test("fellen -> fell", function() {deepEqual( Stem("fellen"), "fell");});
test("feller -> fell", function() {deepEqual( Stem("feller"), "fell");});
test("felles -> fell", function() {deepEqual( Stem("felles"), "fell");});
test("fellesareal -> fellesareal", function() {deepEqual( Stem("fellesareal"), "fellesareal");});
test("fellesareala -> fellesareal", function() {deepEqual( Stem("fellesareala"), "fellesareal");});
test("fellesbestemmelser -> fellesbestemm", function() {deepEqual( Stem("fellesbestemmelser"), "fellesbestemm");});
test("felleseiga -> felles", function() {deepEqual( Stem("felleseiga"), "felles");});
test("fellesfinansiering -> fellesfinansiering", function() {deepEqual( Stem("fellesfinansiering"), "fellesfinansiering");});
test("fellesfond -> fellesfond", function() {deepEqual( Stem("fellesfond"), "fellesfond");});
test("fellesformue -> fellesformu", function() {deepEqual( Stem("fellesformue"), "fellesformu");});
test("fellesforvaltninga -> fellesforvaltning", function() {deepEqual( Stem("fellesforvaltninga"), "fellesforvaltning");});
test("fellesgjeld -> fellesgjeld", function() {deepEqual( Stem("fellesgjeld"), "fellesgjeld");});
test("fellesgjelda -> fellesgjeld", function() {deepEqual( Stem("fellesgjelda"), "fellesgjeld");});
test("felleshavn -> felleshavn", function() {deepEqual( Stem("felleshavn"), "felleshavn");});
test("fellesinstallasjonar -> fellesinstallasjon", function() {deepEqual( Stem("fellesinstallasjonar"), "fellesinstallasjon");});
test("felleskapital -> felleskapital", function() {deepEqual( Stem("felleskapital"), "felleskapital");});
test("felleskapitalen -> felleskapital", function() {deepEqual( Stem("felleskapitalen"), "felleskapital");});
test("felleskonto -> felleskonto", function() {deepEqual( Stem("felleskonto"), "felleskonto");});
test("felleskontor -> felleskontor", function() {deepEqual( Stem("felleskontor"), "felleskontor");});
test("felleskostnadene -> felleskostnad", function() {deepEqual( Stem("felleskostnadene"), "felleskostnad");});
test("felleskostnader -> felleskostnad", function() {deepEqual( Stem("felleskostnader"), "felleskostnad");});
test("felleskostnder -> felleskostnd", function() {deepEqual( Stem("felleskostnder"), "felleskostnd");});
test("felleslån -> felleslån", function() {deepEqual( Stem("felleslån"), "felleslån");});
test("felleslåna -> felleslån", function() {deepEqual( Stem("felleslåna"), "felleslån");});
test("felleslångjevaren -> felleslångjevar", function() {deepEqual( Stem("felleslångjevaren"), "felleslångjevar");});
test("fellesnevneren -> fellesnevner", function() {deepEqual( Stem("fellesnevneren"), "fellesnevner");});
test("fellesobligasjon -> fellesobligasjon", function() {deepEqual( Stem("fellesobligasjon"), "fellesobligasjon");});
test("fellesoppgåve -> fellesoppgåv", function() {deepEqual( Stem("fellesoppgåve"), "fellesoppgåv");});
test("fellesoppgåver -> fellesoppgåv", function() {deepEqual( Stem("fellesoppgåver"), "fellesoppgåv");});
test("fellesorganisasjon -> fellesorganisasjon", function() {deepEqual( Stem("fellesorganisasjon"), "fellesorganisasjon");});
test("fellesskap -> fellesskap", function() {deepEqual( Stem("fellesskap"), "fellesskap");});
test("fellesskapar -> fellesskap", function() {deepEqual( Stem("fellesskapar"), "fellesskap");});
test("fellesskapen -> fellesskap", function() {deepEqual( Stem("fellesskapen"), "fellesskap");});
test("fellesskapet -> fellesskap", function() {deepEqual( Stem("fellesskapet"), "fellesskap");});
test("fellesskapsretten -> fellesskapsrett", function() {deepEqual( Stem("fellesskapsretten"), "fellesskapsrett");});
test("fellesskyldnader -> fellesskyldnad", function() {deepEqual( Stem("fellesskyldnader"), "fellesskyldnad");});
test("fellestenester -> fellestenest", function() {deepEqual( Stem("fellestenester"), "fellestenest");});
test("fellestiltak -> fellestiltak", function() {deepEqual( Stem("fellestiltak"), "fellestiltak");});
test("fellestiltaka -> fellestiltak", function() {deepEqual( Stem("fellestiltaka"), "fellestiltak");});
test("fellestrekk -> fellestrekk", function() {deepEqual( Stem("fellestrekk"), "fellestrekk");});
test("felt -> felt", function() {deepEqual( Stem("felt"), "felt");});
test("felter -> felt", function() {deepEqual( Stem("felter"), "felt");});
test("fem -> fem", function() {deepEqual( Stem("fem"), "fem");});
test("femdel -> femdel", function() {deepEqual( Stem("femdel"), "femdel");});
test("femdels -> femdel", function() {deepEqual( Stem("femdels"), "femdel");});
test("femne -> femn", function() {deepEqual( Stem("femne"), "femn");});
test("femner -> femn", function() {deepEqual( Stem("femner"), "femn");});
test("femte -> femt", function() {deepEqual( Stem("femte"), "femt");});
test("femtedel -> femtedel", function() {deepEqual( Stem("femtedel"), "femtedel");});
test("femten -> femt", function() {deepEqual( Stem("femten"), "femt");});
test("femteparten -> femtepart", function() {deepEqual( Stem("femteparten"), "femtepart");});
test("femti -> femti", function() {deepEqual( Stem("femti"), "femti");});
test("femårsperioden -> femårsperiod", function() {deepEqual( Stem("femårsperioden"), "femårsperiod");});
test("fenja -> fenj", function() {deepEqual( Stem("fenja"), "fenj");});
test("fenre -> fenr", function() {deepEqual( Stem("fenre"), "fenr");});
test("fenrisulven -> fenrisulv", function() {deepEqual( Stem("fenrisulven"), "fenrisulv");});
test("ferd -> ferd", function() {deepEqual( Stem("ferd"), "ferd");});
test("ferde -> ferd", function() {deepEqual( Stem("ferde"), "ferd");});
test("ferden -> ferd", function() {deepEqual( Stem("ferden"), "ferd");});
test("ferdes -> ferd", function() {deepEqual( Stem("ferdes"), "ferd");});
test("ferdig -> ferd", function() {deepEqual( Stem("ferdig"), "ferd");});
test("ferdige -> ferd", function() {deepEqual( Stem("ferdige"), "ferd");});
test("ferdiggjering -> ferdiggjering", function() {deepEqual( Stem("ferdiggjering"), "ferdiggjering");});
test("ferdigheter -> ferd", function() {deepEqual( Stem("ferdigheter"), "ferd");});
test("ferdigstillast -> ferdigstill", function() {deepEqual( Stem("ferdigstillast"), "ferdigstill");});
test("ferdigstilles -> ferdigstill", function() {deepEqual( Stem("ferdigstilles"), "ferdigstill");});
test("ferdigstilling -> ferdigstilling", function() {deepEqual( Stem("ferdigstilling"), "ferdigstilling");});
test("ferdigstillinga -> ferdigstilling", function() {deepEqual( Stem("ferdigstillinga"), "ferdigstilling");});
test("ferdigstilt -> ferdigstilt", function() {deepEqual( Stem("ferdigstilt"), "ferdigstilt");});
test("ferdigstilte -> ferdigstilt", function() {deepEqual( Stem("ferdigstilte"), "ferdigstilt");});
test("ferdigvarer -> ferdigvar", function() {deepEqual( Stem("ferdigvarer"), "ferdigvar");});
test("ferdsel -> ferdsel", function() {deepEqual( Stem("ferdsel"), "ferdsel");});
test("fergen -> ferg", function() {deepEqual( Stem("fergen"), "ferg");});
test("fergene -> ferg", function() {deepEqual( Stem("fergene"), "ferg");});
test("ferger -> ferg", function() {deepEqual( Stem("ferger"), "ferg");});
test("fergetilbud -> fergetilbud", function() {deepEqual( Stem("fergetilbud"), "fergetilbud");});
test("fergetrafikk -> fergetrafikk", function() {deepEqual( Stem("fergetrafikk"), "fergetrafikk");});
test("fergetrafikken -> fergetrafikk", function() {deepEqual( Stem("fergetrafikken"), "fergetrafikk");});
test("ferje -> ferj", function() {deepEqual( Stem("ferje"), "ferj");});
test("ferjeankomstene -> ferjeankomst", function() {deepEqual( Stem("ferjeankomstene"), "ferjeankomst");});
test("ferjefartens -> ferjefart", function() {deepEqual( Stem("ferjefartens"), "ferjefart");});
test("ferjeforbindelsen -> ferjeforbind", function() {deepEqual( Stem("ferjeforbindelsen"), "ferjeforbind");});
test("ferjeforbindelsene -> ferjeforbind", function() {deepEqual( Stem("ferjeforbindelsene"), "ferjeforbind");});
test("ferjehavnen -> ferjehavn", function() {deepEqual( Stem("ferjehavnen"), "ferjehavn");});
test("ferjehavner -> ferjehavn", function() {deepEqual( Stem("ferjehavner"), "ferjehavn");});
test("ferjekai -> ferjekai", function() {deepEqual( Stem("ferjekai"), "ferjekai");});
test("ferjelinjene -> ferjelinj", function() {deepEqual( Stem("ferjelinjene"), "ferjelinj");});
test("ferjelinjer -> ferjelinj", function() {deepEqual( Stem("ferjelinjer"), "ferjelinj");});
test("ferjen -> ferj", function() {deepEqual( Stem("ferjen"), "ferj");});
test("ferjene -> ferj", function() {deepEqual( Stem("ferjene"), "ferj");});
test("ferjer -> ferj", function() {deepEqual( Stem("ferjer"), "ferj");});
test("ferjerederiene -> ferjerederi", function() {deepEqual( Stem("ferjerederiene"), "ferjerederi");});
test("ferjerederier -> ferjerederi", function() {deepEqual( Stem("ferjerederier"), "ferjerederi");});
test("ferjeruten -> ferjerut", function() {deepEqual( Stem("ferjeruten"), "ferjerut");});
test("ferjerutene -> ferjerut", function() {deepEqual( Stem("ferjerutene"), "ferjerut");});
test("ferjeruter -> ferjerut", function() {deepEqual( Stem("ferjeruter"), "ferjerut");});
test("ferjeterminalene -> ferjeterminal", function() {deepEqual( Stem("ferjeterminalene"), "ferjeterminal");});
test("ferjeterminaler -> ferjeterminal", function() {deepEqual( Stem("ferjeterminaler"), "ferjeterminal");});
test("ferjetrafikk -> ferjetrafikk", function() {deepEqual( Stem("ferjetrafikk"), "ferjetrafikk");});
test("ferjetrafikken -> ferjetrafikk", function() {deepEqual( Stem("ferjetrafikken"), "ferjetrafikk");});
test("ferrosilisium -> ferrosilisium", function() {deepEqual( Stem("ferrosilisium"), "ferrosilisium");});
test("ferskere -> fersker", function() {deepEqual( Stem("ferskere"), "fersker");});
test("ferskvann -> ferskvann", function() {deepEqual( Stem("ferskvann"), "ferskvann");});
test("ferskvannsgehalten -> ferskvannsgehalt", function() {deepEqual( Stem("ferskvannsgehalten"), "ferskvannsgehalt");});
test("ferskvannstilførselen -> ferskvannstilførsel", function() {deepEqual( Stem("ferskvannstilførselen"), "ferskvannstilførsel");});
test("fersum -> fersum", function() {deepEqual( Stem("fersum"), "fersum");});
test("fest -> fest", function() {deepEqual( Stem("fest"), "fest");});
test("festa -> fest", function() {deepEqual( Stem("festa"), "fest");});
test("festar -> fest", function() {deepEqual( Stem("festar"), "fest");});
test("feste -> fest", function() {deepEqual( Stem("feste"), "fest");});
test("festen -> fest", function() {deepEqual( Stem("festen"), "fest");});
test("fester -> fest", function() {deepEqual( Stem("fester"), "fest");});
test("festet -> fest", function() {deepEqual( Stem("festet"), "fest");});
test("festning -> festning", function() {deepEqual( Stem("festning"), "festning");});
test("festningen -> festning", function() {deepEqual( Stem("festningen"), "festning");});
test("festningstunnelen -> festningstunnel", function() {deepEqual( Stem("festningstunnelen"), "festningstunnel");});
test("festningsverket -> festningsverk", function() {deepEqual( Stem("festningsverket"), "festningsverk");});
test("festsal -> festsal", function() {deepEqual( Stem("festsal"), "festsal");});
test("festsalen -> festsal", function() {deepEqual( Stem("festsalen"), "festsal");});
test("festsaler -> festsal", function() {deepEqual( Stem("festsaler"), "festsal");});
test("fet -> fet", function() {deepEqual( Stem("fet"), "fet");});
test("fett -> fett", function() {deepEqual( Stem("fett"), "fett");});
test("fid -> fid", function() {deepEqual( Stem("fid"), "fid");});
test("fiende -> fiend", function() {deepEqual( Stem("fiende"), "fiend");});
test("fiendeføtter -> fiendeføtt", function() {deepEqual( Stem("fiendeføtter"), "fiendeføtt");});
test("fiendehæren -> fiendehær", function() {deepEqual( Stem("fiendehæren"), "fiendehær");});
test("fienden -> fiend", function() {deepEqual( Stem("fienden"), "fiend");});
test("fiendene -> fiend", function() {deepEqual( Stem("fiendene"), "fiend");});
test("fiendens -> fiend", function() {deepEqual( Stem("fiendens"), "fiend");});
test("fiender -> fiend", function() {deepEqual( Stem("fiender"), "fiend");});
test("fiendskap -> fiendskap", function() {deepEqual( Stem("fiendskap"), "fiendskap");});
test("fiendtlig -> fiendt", function() {deepEqual( Stem("fiendtlig"), "fiendt");});
test("figur -> figur", function() {deepEqual( Stem("figur"), "figur");});
test("figurbetraktninger -> figurbetraktning", function() {deepEqual( Stem("figurbetraktninger"), "figurbetraktning");});
test("figuren -> figur", function() {deepEqual( Stem("figuren"), "figur");});
test("figurene -> figur", function() {deepEqual( Stem("figurene"), "figur");});
test("fikk -> fikk", function() {deepEqual( Stem("fikk"), "fikk");});
test("fiktive -> fiktiv", function() {deepEqual( Stem("fiktive"), "fiktiv");});
test("filial -> filial", function() {deepEqual( Stem("filial"), "filial");});
test("filialer -> filial", function() {deepEqual( Stem("filialer"), "filial");});
test("filialetablering -> filialetablering", function() {deepEqual( Stem("filialetablering"), "filialetablering");});
test("filialvirksomhet -> filialvirksom", function() {deepEqual( Stem("filialvirksomhet"), "filialvirksom");});
test("fililaler -> fililal", function() {deepEqual( Stem("fililaler"), "fililal");});
test("filipstad -> filipstad", function() {deepEqual( Stem("filipstad"), "filipstad");});
test("filipstadområdet -> filipstadområd", function() {deepEqual( Stem("filipstadområdet"), "filipstadområd");});
test("filipstadterminalen -> filipstadterminal", function() {deepEqual( Stem("filipstadterminalen"), "filipstadterminal");});
test("filipstadutbygging -> filipstadutbygging", function() {deepEqual( Stem("filipstadutbygging"), "filipstadutbygging");});
test("fillehaug -> fillehaug", function() {deepEqual( Stem("fillehaug"), "fillehaug");});
test("fillene -> fill", function() {deepEqual( Stem("fillene"), "fill");});
test("filler -> fill", function() {deepEqual( Stem("filler"), "fill");});
test("fillete -> fillet", function() {deepEqual( Stem("fillete"), "fillet");});
test("fimafeng -> fimafeng", function() {deepEqual( Stem("fimafeng"), "fimafeng");});
test("fimbul -> fimbul", function() {deepEqual( Stem("fimbul"), "fimbul");});
test("fin -> fin", function() {deepEqual( Stem("fin"), "fin");});
test("final -> final", function() {deepEqual( Stem("final"), "final");});
test("finans -> finan", function() {deepEqual( Stem("finans"), "finan");});
test("finansdepartementet -> finansdepartement", function() {deepEqual( Stem("finansdepartementet"), "finansdepartement");});
test("finansdepartementets -> finansdepartement", function() {deepEqual( Stem("finansdepartementets"), "finansdepartement");});
test("finanseringsvirksomhetsloven -> finanseringsvirksom", function() {deepEqual( Stem("finanseringsvirksomhetsloven"), "finanseringsvirksom");});
test("finansforetak -> finansforetak", function() {deepEqual( Stem("finansforetak"), "finansforetak");});
test("finansiell -> finansiell", function() {deepEqual( Stem("finansiell"), "finansiell");});
test("finansielle -> finansiell", function() {deepEqual( Stem("finansielle"), "finansiell");});
test("finansielt -> finansielt", function() {deepEqual( Stem("finansielt"), "finansielt");});
test("finansierast -> finansier", function() {deepEqual( Stem("finansierast"), "finansier");});
test("finansiere -> finansier", function() {deepEqual( Stem("finansiere"), "finansier");});
test("finansieres -> finansier", function() {deepEqual( Stem("finansieres"), "finansier");});
test("finansiering -> finansiering", function() {deepEqual( Stem("finansiering"), "finansiering");});
test("finansieringa -> finansiering", function() {deepEqual( Stem("finansieringa"), "finansiering");});
test("finansieringen -> finansiering", function() {deepEqual( Stem("finansieringen"), "finansiering");});
test("finansierings -> finansiering", function() {deepEqual( Stem("finansierings"), "finansiering");});
test("finansieringsføretak -> finansieringsføretak", function() {deepEqual( Stem("finansieringsføretak"), "finansieringsføretak");});
test("finansieringskilde -> finansieringskild", function() {deepEqual( Stem("finansieringskilde"), "finansieringskild");});
test("finansieringsordning -> finansieringsordning", function() {deepEqual( Stem("finansieringsordning"), "finansieringsordning");});
test("finansieringsordningar -> finansieringsordning", function() {deepEqual( Stem("finansieringsordningar"), "finansieringsordning");});
test("finansieringsplan -> finansieringsplan", function() {deepEqual( Stem("finansieringsplan"), "finansieringsplan");});
test("finansieringsplanen -> finansieringsplan", function() {deepEqual( Stem("finansieringsplanen"), "finansieringsplan");});
test("finansieringsverksemd -> finansieringsverksemd", function() {deepEqual( Stem("finansieringsverksemd"), "finansieringsverksemd");});
test("finansieringsverksemdslova -> finansieringsverksemd", function() {deepEqual( Stem("finansieringsverksemdslova"), "finansieringsverksemd");});
test("finansieringsvirksomhet -> finansieringsvirksom", function() {deepEqual( Stem("finansieringsvirksomhet"), "finansieringsvirksom");});
test("finansieringsvirksomhetsloven -> finansieringsvirksom", function() {deepEqual( Stem("finansieringsvirksomhetsloven"), "finansieringsvirksom");});
test("finansiert -> finansier", function() {deepEqual( Stem("finansiert"), "finansier");});
test("finansinnstillingen -> finansinnstilling", function() {deepEqual( Stem("finansinnstillingen"), "finansinnstilling");});
test("finansinntekter -> finansinntekt", function() {deepEqual( Stem("finansinntekter"), "finansinntekt");});
test("finansinstitusjon -> finansinstitusjon", function() {deepEqual( Stem("finansinstitusjon"), "finansinstitusjon");});
test("finansinstitusjonar -> finansinstitusjon", function() {deepEqual( Stem("finansinstitusjonar"), "finansinstitusjon");});
test("finansinstitusjonens -> finansinstitusjon", function() {deepEqual( Stem("finansinstitusjonens"), "finansinstitusjon");});
test("finansinstitusjoner -> finansinstitusjon", function() {deepEqual( Stem("finansinstitusjoner"), "finansinstitusjon");});
test("finanskomiteen -> finanskomite", function() {deepEqual( Stem("finanskomiteen"), "finanskomite");});
test("finanskomiteens -> finanskomite", function() {deepEqual( Stem("finanskomiteens"), "finanskomite");});
test("finansmarkedet -> finansmarked", function() {deepEqual( Stem("finansmarkedet"), "finansmarked");});
test("finansmatematikk -> finansmatematikk", function() {deepEqual( Stem("finansmatematikk"), "finansmatematikk");});
test("finansnæringen -> finansnæring", function() {deepEqual( Stem("finansnæringen"), "finansnæring");});
test("finanspolitikk -> finanspolitikk", function() {deepEqual( Stem("finanspolitikk"), "finanspolitikk");});
test("finanssparing -> finanssparing", function() {deepEqual( Stem("finanssparing"), "finanssparing");});
test("fine -> fin", function() {deepEqual( Stem("fine"), "fin");});
test("finere -> finer", function() {deepEqual( Stem("finere"), "finer");});
test("fineste -> finest", function() {deepEqual( Stem("fineste"), "finest");});
test("finger -> fing", function() {deepEqual( Stem("finger"), "fing");});
test("fingre -> fingr", function() {deepEqual( Stem("fingre"), "fingr");});
test("fingrene -> fingr", function() {deepEqual( Stem("fingrene"), "fingr");});
test("finland -> finland", function() {deepEqual( Stem("finland"), "finland");});
test("finn -> finn", function() {deepEqual( Stem("finn"), "finn");});
test("finnast -> finn", function() {deepEqual( Stem("finnast"), "finn");});
test("finne -> finn", function() {deepEqual( Stem("finne"), "finn");});
test("finnenes -> finn", function() {deepEqual( Stem("finnenes"), "finn");});
test("finner -> finn", function() {deepEqual( Stem("finner"), "finn");});
test("finnes -> finn", function() {deepEqual( Stem("finnes"), "finn");});
test("finnmark -> finnmark", function() {deepEqual( Stem("finnmark"), "finnmark");});
test("finrekne -> finrekn", function() {deepEqual( Stem("finrekne"), "finrekn");});
test("finst -> finst", function() {deepEqual( Stem("finst"), "finst");});
test("fint -> fint", function() {deepEqual( Stem("fint"), "fint");});
test("fire -> fir", function() {deepEqual( Stem("fire"), "fir");});
test("firedel -> firedel", function() {deepEqual( Stem("firedel"), "firedel");});
test("firedelar -> firedel", function() {deepEqual( Stem("firedelar"), "firedel");});
test("firefelts -> firefelt", function() {deepEqual( Stem("firefelts"), "firefelt");});
test("firkantede -> firkant", function() {deepEqual( Stem("firkantede"), "firkant");});
test("firma -> firm", function() {deepEqual( Stem("firma"), "firm");});
test("firmaattest -> firmaattest", function() {deepEqual( Stem("firmaattest"), "firmaattest");});
test("firmaet -> firma", function() {deepEqual( Stem("firmaet"), "firma");});
test("firmateiknar -> firmateikn", function() {deepEqual( Stem("firmateiknar"), "firmateikn");});
test("fisjon -> fisjon", function() {deepEqual( Stem("fisjon"), "fisjon");});
test("fisjoner -> fisjon", function() {deepEqual( Stem("fisjoner"), "fisjon");});
test("fisk -> fisk", function() {deepEqual( Stem("fisk"), "fisk");});
test("fiskarlag -> fiskarlag", function() {deepEqual( Stem("fiskarlag"), "fiskarlag");});
test("fiske -> fisk", function() {deepEqual( Stem("fiske"), "fisk");});
test("fiskeeksport -> fiskeeksport", function() {deepEqual( Stem("fiskeeksport"), "fiskeeksport");});
test("fiskelykke -> fiskelykk", function() {deepEqual( Stem("fiskelykke"), "fiskelykk");});
test("fisken -> fisk", function() {deepEqual( Stem("fisken"), "fisk");});
test("fiskens -> fisk", function() {deepEqual( Stem("fiskens"), "fisk");});
test("fiskeolje -> fiskeolj", function() {deepEqual( Stem("fiskeolje"), "fiskeolj");});
test("fisker -> fisk", function() {deepEqual( Stem("fisker"), "fisk");});
test("fiskere -> fisker", function() {deepEqual( Stem("fiskere"), "fisker");});
test("fiskeren -> fisker", function() {deepEqual( Stem("fiskeren"), "fisker");});
test("fiskeridepartementet -> fiskeridepartement", function() {deepEqual( Stem("fiskeridepartementet"), "fiskeridepartement");});
test("fiskeridepartementets -> fiskeridepartement", function() {deepEqual( Stem("fiskeridepartementets"), "fiskeridepartement");});
test("fiskerihavner -> fiskerihavn", function() {deepEqual( Stem("fiskerihavner"), "fiskerihavn");});
test("fiskerileder -> fiskeriled", function() {deepEqual( Stem("fiskerileder"), "fiskeriled");});
test("fiskeriministeren -> fiskeriminister", function() {deepEqual( Stem("fiskeriministeren"), "fiskeriminister");});
test("fiskerinæringen -> fiskerinæring", function() {deepEqual( Stem("fiskerinæringen"), "fiskerinæring");});
test("fiskesalslaga -> fiskesalslag", function() {deepEqual( Stem("fiskesalslaga"), "fiskesalslag");});
test("fiskeskjell -> fiskeskjell", function() {deepEqual( Stem("fiskeskjell"), "fiskeskjell");});
test("fiskestang -> fiskestang", function() {deepEqual( Stem("fiskestang"), "fiskestang");});
test("fiskestangen -> fiskestang", function() {deepEqual( Stem("fiskestangen"), "fiskestang");});
test("fiskestenger -> fiskesteng", function() {deepEqual( Stem("fiskestenger"), "fiskesteng");});
test("fisketur -> fisketur", function() {deepEqual( Stem("fisketur"), "fisketur");});
test("fisketuren -> fisketur", function() {deepEqual( Stem("fisketuren"), "fisketur");});
test("fiskeværene -> fiskevær", function() {deepEqual( Stem("fiskeværene"), "fiskevær");});
test("fisks -> fisk", function() {deepEqual( Stem("fisks"), "fisk");});
test("fistelstemme -> fistelstemm", function() {deepEqual( Stem("fistelstemme"), "fistelstemm");});
test("fjalar -> fjal", function() {deepEqual( Stem("fjalar"), "fjal");});
test("fjas -> fjas", function() {deepEqual( Stem("fjas"), "fjas");});
test("fjell -> fjell", function() {deepEqual( Stem("fjell"), "fjell");});
test("fjellanlegg -> fjellanlegg", function() {deepEqual( Stem("fjellanlegg"), "fjellanlegg");});
test("fjellene -> fjell", function() {deepEqual( Stem("fjellene"), "fjell");});
test("fjellet -> fjell", function() {deepEqual( Stem("fjellet"), "fjell");});
test("fjellfestningen -> fjellfestning", function() {deepEqual( Stem("fjellfestningen"), "fjellfestning");});
test("fjellgård -> fjellgård", function() {deepEqual( Stem("fjellgård"), "fjellgård");});
test("fjellkløft -> fjellkløft", function() {deepEqual( Stem("fjellkløft"), "fjellkløft");});
test("fjellknauser -> fjellknaus", function() {deepEqual( Stem("fjellknauser"), "fjellknaus");});
test("fjells -> fjell", function() {deepEqual( Stem("fjells"), "fjell");});
test("fjellsiden -> fjellsid", function() {deepEqual( Stem("fjellsiden"), "fjellsid");});
test("fjellsider -> fjellsid", function() {deepEqual( Stem("fjellsider"), "fjellsid");});
test("fjerde -> fjerd", function() {deepEqual( Stem("fjerde"), "fjerd");});
test("fjerdeparten -> fjerdepart", function() {deepEqual( Stem("fjerdeparten"), "fjerdepart");});
test("fjern -> fjern", function() {deepEqual( Stem("fjern"), "fjern");});
test("fjerne -> fjern", function() {deepEqual( Stem("fjerne"), "fjern");});
test("fjerning -> fjerning", function() {deepEqual( Stem("fjerning"), "fjerning");});
test("fjeset -> fjes", function() {deepEqual( Stem("fjeset"), "fjes");});
test("fjollete -> fjollet", function() {deepEqual( Stem("fjollete"), "fjollet");});
test("fjord -> fjord", function() {deepEqual( Stem("fjord"), "fjord");});
test("fjordane -> fjord", function() {deepEqual( Stem("fjordane"), "fjord");});
test("fjordarm -> fjordarm", function() {deepEqual( Stem("fjordarm"), "fjordarm");});
test("fjordby -> fjordby", function() {deepEqual( Stem("fjordby"), "fjordby");});
test("fjordbyen -> fjordby", function() {deepEqual( Stem("fjordbyen"), "fjordby");});
test("fjordbyløsningen -> fjordbyløsning", function() {deepEqual( Stem("fjordbyløsningen"), "fjordbyløsning");});
test("fjordbyscenariet -> fjordbyscenari", function() {deepEqual( Stem("fjordbyscenariet"), "fjordbyscenari");});
test("fjorden -> fjord", function() {deepEqual( Stem("fjorden"), "fjord");});
test("fjorten -> fjort", function() {deepEqual( Stem("fjorten"), "fjort");});
test("fjær -> fjær", function() {deepEqual( Stem("fjær"), "fjær");});
test("fjæresteinene -> fjærestein", function() {deepEqual( Stem("fjæresteinene"), "fjærestein");});
test("fjærhammen -> fjærhamm", function() {deepEqual( Stem("fjærhammen"), "fjærhamm");});
test("fjøset -> fjøs", function() {deepEqual( Stem("fjøset"), "fjøs");});
test("fjøskone -> fjøskon", function() {deepEqual( Stem("fjøskone"), "fjøskon");});
test("fl -> fl", function() {deepEqual( Stem("fl"), "fl");});
test("flak -> flak", function() {deepEqual( Stem("flak"), "flak");});
test("flakket -> flakk", function() {deepEqual( Stem("flakket"), "flakk");});
test("flakse -> flaks", function() {deepEqual( Stem("flakse"), "flaks");});
test("flaksende -> flaks", function() {deepEqual( Stem("flaksende"), "flaks");});
test("flakser -> flaks", function() {deepEqual( Stem("flakser"), "flaks");});
test("flakvarp -> flakvarp", function() {deepEqual( Stem("flakvarp"), "flakvarp");});
test("flakvarpområdet -> flakvarpområd", function() {deepEqual( Stem("flakvarpområdet"), "flakvarpområd");});
test("flammende -> flamm", function() {deepEqual( Stem("flammende"), "flamm");});
test("flammene -> flamm", function() {deepEqual( Stem("flammene"), "flamm");});
test("flammer -> flamm", function() {deepEqual( Stem("flammer"), "flamm");});
test("flammesverd -> flammesverd", function() {deepEqual( Stem("flammesverd"), "flammesverd");});
test("flammesverdet -> flammesverd", function() {deepEqual( Stem("flammesverdet"), "flammesverd");});
test("flaskehalsen -> flaskehals", function() {deepEqual( Stem("flaskehalsen"), "flaskehals");});
test("flaskehalser -> flaskehals", function() {deepEqual( Stem("flaskehalser"), "flaskehals");});
test("flat -> flat", function() {deepEqual( Stem("flat"), "flat");});
test("flate -> flat", function() {deepEqual( Stem("flate"), "flat");});
test("flater -> flat", function() {deepEqual( Stem("flater"), "flat");});
test("flatt -> flatt", function() {deepEqual( Stem("flatt"), "flatt");});
test("flaum -> flaum", function() {deepEqual( Stem("flaum"), "flaum");});
test("fleirbustadbustadhus -> fleirbustadbustadhus", function() {deepEqual( Stem("fleirbustadbustadhus"), "fleirbustadbustadhus");});
test("fleirbustadhus -> fleirbustadhus", function() {deepEqual( Stem("fleirbustadhus"), "fleirbustadhus");});
test("fleire -> fleir", function() {deepEqual( Stem("fleire"), "fleir");});
test("fleirtal -> fleirtal", function() {deepEqual( Stem("fleirtal"), "fleirtal");});
test("fleirtalet -> fleirtal", function() {deepEqual( Stem("fleirtalet"), "fleirtal");});
test("fleirtalskompetanse -> fleirtalskompetans", function() {deepEqual( Stem("fleirtalskompetanse"), "fleirtalskompetans");});
test("fleirtalskrav -> fleirtalskrav", function() {deepEqual( Stem("fleirtalskrav"), "fleirtalskrav");});
test("fleirtalskrava -> fleirtalskrav", function() {deepEqual( Stem("fleirtalskrava"), "fleirtalskrav");});
test("fleirtalskravet -> fleirtalskrav", function() {deepEqual( Stem("fleirtalskravet"), "fleirtalskrav");});
test("fleirtalsmakt -> fleirtalsmakt", function() {deepEqual( Stem("fleirtalsmakt"), "fleirtalsmakt");});
test("fleirtalsmisbruk -> fleirtalsmisbruk", function() {deepEqual( Stem("fleirtalsmisbruk"), "fleirtalsmisbruk");});
test("fleirtalsmynde -> fleirtalsmynd", function() {deepEqual( Stem("fleirtalsmynde"), "fleirtalsmynd");});
test("fleirtalsregelen -> fleirtalsregel", function() {deepEqual( Stem("fleirtalsregelen"), "fleirtalsregel");});
test("fleirtalsvedtak -> fleirtalsvedtak", function() {deepEqual( Stem("fleirtalsvedtak"), "fleirtalsvedtak");});
test("flekken -> flekk", function() {deepEqual( Stem("flekken"), "flekk");});
test("flekker -> flekk", function() {deepEqual( Stem("flekker"), "flekk");});
test("flekkete -> flekket", function() {deepEqual( Stem("flekkete"), "flekket");});
test("fleksibel -> fleksibel", function() {deepEqual( Stem("fleksibel"), "fleksibel");});
test("fleksibelt -> fleksibelt", function() {deepEqual( Stem("fleksibelt"), "fleksibelt");});
test("fleksibilitet -> fleksibilit", function() {deepEqual( Stem("fleksibilitet"), "fleksibilit");});
test("fleksibiliteten -> fleksibilitet", function() {deepEqual( Stem("fleksibiliteten"), "fleksibilitet");});
test("fleksible -> fleksibl", function() {deepEqual( Stem("fleksible"), "fleksibl");});
test("flenger -> fleng", function() {deepEqual( Stem("flenger"), "fleng");});
test("flere -> fler", function() {deepEqual( Stem("flere"), "fler");});
test("flertall -> flertall", function() {deepEqual( Stem("flertall"), "flertall");});
test("flertallet -> flertall", function() {deepEqual( Stem("flertallet"), "flertall");});
test("flertallets -> flertall", function() {deepEqual( Stem("flertallets"), "flertall");});
test("flertallsregelen -> flertallsregel", function() {deepEqual( Stem("flertallsregelen"), "flertallsregel");});
test("flesk -> flesk", function() {deepEqual( Stem("flesk"), "flesk");});
test("flest -> flest", function() {deepEqual( Stem("flest"), "flest");});
test("fleste -> flest", function() {deepEqual( Stem("fleste"), "flest");});
test("fletter -> flett", function() {deepEqual( Stem("fletter"), "flett");});
test("flettet -> flett", function() {deepEqual( Stem("flettet"), "flett");});
test("flg -> flg", function() {deepEqual( Stem("flg"), "flg");});
test("flight -> flight", function() {deepEqual( Stem("flight"), "flight");});
test("flimrer -> flimr", function() {deepEqual( Stem("flimrer"), "flimr");});
test("flink -> flink", function() {deepEqual( Stem("flink"), "flink");});
test("flirer -> flir", function() {deepEqual( Stem("flirer"), "flir");});
test("flis -> flis", function() {deepEqual( Stem("flis"), "flis");});
test("fliser -> flis", function() {deepEqual( Stem("fliser"), "flis");});
test("flodbølge -> flodbølg", function() {deepEqual( Stem("flodbølge"), "flodbølg");});
test("flokete -> floket", function() {deepEqual( Stem("flokete"), "floket");});
test("flokk -> flokk", function() {deepEqual( Stem("flokk"), "flokk");});
test("flokken -> flokk", function() {deepEqual( Stem("flokken"), "flokk");});
test("flokker -> flokk", function() {deepEqual( Stem("flokker"), "flokk");});
test("flora -> flor", function() {deepEqual( Stem("flora"), "flor");});
test("flott -> flott", function() {deepEqual( Stem("flott"), "flott");});
test("flotteste -> flottest", function() {deepEqual( Stem("flotteste"), "flottest");});
test("flua -> flua", function() {deepEqual( Stem("flua"), "flua");});
test("flue -> flue", function() {deepEqual( Stem("flue"), "flue");});
test("fluer -> fluer", function() {deepEqual( Stem("fluer"), "fluer");});
test("flukt -> flukt", function() {deepEqual( Stem("flukt"), "flukt");});
test("fly -> fly", function() {deepEqual( Stem("fly"), "fly");});
test("flydrivstoff -> flydrivstoff", function() {deepEqual( Stem("flydrivstoff"), "flydrivstoff");});
test("flykte -> flykt", function() {deepEqual( Stem("flykte"), "flykt");});
test("flykter -> flykt", function() {deepEqual( Stem("flykter"), "flykt");});
test("flyktningar -> flyktning", function() {deepEqual( Stem("flyktningar"), "flyktning");});
test("flyplasser -> flyplass", function() {deepEqual( Stem("flyplasser"), "flyplass");});
test("flyr -> flyr", function() {deepEqual( Stem("flyr"), "flyr");});
test("flyt -> flyt", function() {deepEqual( Stem("flyt"), "flyt");});
test("flytende -> flyt", function() {deepEqual( Stem("flytende"), "flyt");});
test("flyter -> flyt", function() {deepEqual( Stem("flyter"), "flyt");});
test("flytrafikk -> flytrafikk", function() {deepEqual( Stem("flytrafikk"), "flytrafikk");});
test("flytransport -> flytransport", function() {deepEqual( Stem("flytransport"), "flytransport");});
test("flytta -> flytt", function() {deepEqual( Stem("flytta"), "flytt");});
test("flyttar -> flytt", function() {deepEqual( Stem("flyttar"), "flytt");});
test("flyttbar -> flyttb", function() {deepEqual( Stem("flyttbar"), "flyttb");});
test("flyttbare -> flyttbar", function() {deepEqual( Stem("flyttbare"), "flyttbar");});
test("flyttbart -> flyttbart", function() {deepEqual( Stem("flyttbart"), "flyttbart");});
test("flytte -> flytt", function() {deepEqual( Stem("flytte"), "flytt");});
test("flytteadgang -> flytteadgang", function() {deepEqual( Stem("flytteadgang"), "flytteadgang");});
test("flyttebestemmelse -> flyttebestemm", function() {deepEqual( Stem("flyttebestemmelse"), "flyttebestemm");});
test("flytteforskriften -> flytteforskrift", function() {deepEqual( Stem("flytteforskriften"), "flytteforskrift");});
test("flytter -> flytt", function() {deepEqual( Stem("flytter"), "flytt");});
test("flytterett -> flytterett", function() {deepEqual( Stem("flytterett"), "flytterett");});
test("flyttes -> flytt", function() {deepEqual( Stem("flyttes"), "flytt");});
test("flyttet -> flytt", function() {deepEqual( Stem("flyttet"), "flytt");});
test("flytting -> flytting", function() {deepEqual( Stem("flytting"), "flytting");});
test("flyttingen -> flytting", function() {deepEqual( Stem("flyttingen"), "flytting");});
test("flyvende -> flyv", function() {deepEqual( Stem("flyvende"), "flyv");});
test("flådd -> flådd", function() {deepEqual( Stem("flådd"), "flådd");});
test("flår -> flår", function() {deepEqual( Stem("flår"), "flår");});
test("flåte -> flåt", function() {deepEqual( Stem("flåte"), "flåt");});
test("flåter -> flåt", function() {deepEqual( Stem("flåter"), "flåt");});
test("fløy -> fløy", function() {deepEqual( Stem("fløy"), "fløy");});
test("fnis -> fnis", function() {deepEqual( Stem("fnis"), "fnis");});
test("fnise -> fnis", function() {deepEqual( Stem("fnise"), "fnis");});
test("fnisende -> fnis", function() {deepEqual( Stem("fnisende"), "fnis");});
test("fniser -> fnis", function() {deepEqual( Stem("fniser"), "fnis");});
test("fnyser -> fnys", function() {deepEqual( Stem("fnyser"), "fnys");});
test("fob -> fob", function() {deepEqual( Stem("fob"), "fob");});
test("fokus -> fokus", function() {deepEqual( Stem("fokus"), "fokus");});
test("fokuserast -> fokuser", function() {deepEqual( Stem("fokuserast"), "fokuser");});
test("fokusere -> fokuser", function() {deepEqual( Stem("fokusere"), "fokuser");});
test("fokuserer -> fokuser", function() {deepEqual( Stem("fokuserer"), "fokuser");});
test("fokuseres -> fokuser", function() {deepEqual( Stem("fokuseres"), "fokuser");});
test("fokusert -> fokuser", function() {deepEqual( Stem("fokusert"), "fokuser");});
test("folde -> fold", function() {deepEqual( Stem("folde"), "fold");});
test("fole -> fol", function() {deepEqual( Stem("fole"), "fol");});
test("folk -> folk", function() {deepEqual( Stem("folk"), "folk");});
test("folkene -> folk", function() {deepEqual( Stem("folkene"), "folk");});
test("folkeparti -> folkeparti", function() {deepEqual( Stem("folkeparti"), "folkeparti");});
test("folket -> folk", function() {deepEqual( Stem("folket"), "folk");});
test("folketrygd -> folketrygd", function() {deepEqual( Stem("folketrygd"), "folketrygd");});
test("folketrygda -> folketrygd", function() {deepEqual( Stem("folketrygda"), "folketrygd");});
test("folketrygden -> folketrygd", function() {deepEqual( Stem("folketrygden"), "folketrygd");});
test("folketrygdens -> folketrygd", function() {deepEqual( Stem("folketrygdens"), "folketrygd");});
test("folketrygdloven -> folketrygd", function() {deepEqual( Stem("folketrygdloven"), "folketrygd");});
test("folketrygdlovens -> folketrygd", function() {deepEqual( Stem("folketrygdlovens"), "folketrygd");});
test("folketrygdpensjon -> folketrygdpensjon", function() {deepEqual( Stem("folketrygdpensjon"), "folketrygdpensjon");});
test("folketrygdpensjonen -> folketrygdpensjon", function() {deepEqual( Stem("folketrygdpensjonen"), "folketrygdpensjon");});
test("folketrygdytelse -> folketrygdyt", function() {deepEqual( Stem("folketrygdytelse"), "folketrygdyt");});
test("folketrygdytelsen -> folketrygdyt", function() {deepEqual( Stem("folketrygdytelsen"), "folketrygdyt");});
test("folkevalgte -> folkevalgt", function() {deepEqual( Stem("folkevalgte"), "folkevalgt");});
test("folksomt -> folksomt", function() {deepEqual( Stem("folksomt"), "folksomt");});
test("folkvang -> folkvang", function() {deepEqual( Stem("folkvang"), "folkvang");});
test("follo -> follo", function() {deepEqual( Stem("follo"), "follo");});
test("fond -> fond", function() {deepEqual( Stem("fond"), "fond");});
test("fondene -> fond", function() {deepEqual( Stem("fondene"), "fond");});
test("fondering -> fondering", function() {deepEqual( Stem("fondering"), "fondering");});
test("fondert -> fonder", function() {deepEqual( Stem("fondert"), "fonder");});
test("fondet -> fond", function() {deepEqual( Stem("fondet"), "fond");});
test("fondets -> fond", function() {deepEqual( Stem("fondets"), "fond");});
test("fonds -> fond", function() {deepEqual( Stem("fonds"), "fond");});
test("fondsandeler -> fondsandel", function() {deepEqual( Stem("fondsandeler"), "fondsandel");});
test("fondsavkastning -> fondsavkastning", function() {deepEqual( Stem("fondsavkastning"), "fondsavkastning");});
test("fondsinnskudd -> fondsinnskudd", function() {deepEqual( Stem("fondsinnskudd"), "fondsinnskudd");});
test("fondskonstruksjoner -> fondskonstruksjon", function() {deepEqual( Stem("fondskonstruksjoner"), "fondskonstruksjon");});
test("fondsoppbyggede -> fondsoppbygg", function() {deepEqual( Stem("fondsoppbyggede"), "fondsoppbygg");});
test("fondsoppbygging -> fondsoppbygging", function() {deepEqual( Stem("fondsoppbygging"), "fondsoppbygging");});
test("fonner -> fonn", function() {deepEqual( Stem("fonner"), "fonn");});
test("foot -> foot", function() {deepEqual( Stem("foot"), "foot");});
test("for -> for", function() {deepEqual( Stem("for"), "for");});
test("forakter -> forakt", function() {deepEqual( Stem("forakter"), "forakt");});
test("foran -> foran", function() {deepEqual( Stem("foran"), "foran");});
test("forandre -> forandr", function() {deepEqual( Stem("forandre"), "forandr");});
test("forandres -> forandr", function() {deepEqual( Stem("forandres"), "forandr");});
test("forandret -> forandr", function() {deepEqual( Stem("forandret"), "forandr");});
test("forankrast -> forankr", function() {deepEqual( Stem("forankrast"), "forankr");});
test("forankring -> forankring", function() {deepEqual( Stem("forankring"), "forankring");});
test("forannevnte -> forannevnt", function() {deepEqual( Stem("forannevnte"), "forannevnt");});
test("forarbeidene -> forarbeid", function() {deepEqual( Stem("forarbeidene"), "forarbeid");});
test("forarbeidet -> forarbeid", function() {deepEqual( Stem("forarbeidet"), "forarbeid");});
test("forargelse -> forarg", function() {deepEqual( Stem("forargelse"), "forarg");});
test("forarget -> forarg", function() {deepEqual( Stem("forarget"), "forarg");});
test("forbannelse -> forbann", function() {deepEqual( Stem("forbannelse"), "forbann");});
test("forbannelsen -> forbann", function() {deepEqual( Stem("forbannelsen"), "forbann");});
test("forbannelser -> forbann", function() {deepEqual( Stem("forbannelser"), "forbann");});
test("forbannet -> forbann", function() {deepEqual( Stem("forbannet"), "forbann");});
test("forbauselse -> forbaus", function() {deepEqual( Stem("forbauselse"), "forbaus");});
test("forbedre -> forbedr", function() {deepEqual( Stem("forbedre"), "forbedr");});
test("forbedres -> forbedr", function() {deepEqual( Stem("forbedres"), "forbedr");});
test("forbedret -> forbedr", function() {deepEqual( Stem("forbedret"), "forbedr");});
test("forbedring -> forbedring", function() {deepEqual( Stem("forbedring"), "forbedring");});
test("forbedringene -> forbedring", function() {deepEqual( Stem("forbedringene"), "forbedring");});
test("forbedringer -> forbedring", function() {deepEqual( Stem("forbedringer"), "forbedring");});
test("forbehold -> forbehold", function() {deepEqual( Stem("forbehold"), "forbehold");});
test("forberede -> forber", function() {deepEqual( Stem("forberede"), "forber");});
test("forberedelse -> forbered", function() {deepEqual( Stem("forberedelse"), "forbered");});
test("forbereder -> forbered", function() {deepEqual( Stem("forbereder"), "forbered");});
test("forberedt -> forbered", function() {deepEqual( Stem("forberedt"), "forbered");});
test("forbi -> forbi", function() {deepEqual( Stem("forbi"), "forbi");});
test("forbigått -> forbigått", function() {deepEqual( Stem("forbigått"), "forbigått");});
test("forbindelse -> forbind", function() {deepEqual( Stem("forbindelse"), "forbind");});
test("forbindelsen -> forbind", function() {deepEqual( Stem("forbindelsen"), "forbind");});
test("forbindelser -> forbind", function() {deepEqual( Stem("forbindelser"), "forbind");});
test("forbinder -> forbind", function() {deepEqual( Stem("forbinder"), "forbind");});
test("forbli -> forbli", function() {deepEqual( Stem("forbli"), "forbli");});
test("forblir -> forblir", function() {deepEqual( Stem("forblir"), "forblir");});
test("forblitt -> forblitt", function() {deepEqual( Stem("forblitt"), "forblitt");});
test("forblåste -> forblåst", function() {deepEqual( Stem("forblåste"), "forblåst");});
test("forbod -> forbod", function() {deepEqual( Stem("forbod"), "forbod");});
test("forboden -> forbod", function() {deepEqual( Stem("forboden"), "forbod");});
test("forbodet -> forbod", function() {deepEqual( Stem("forbodet"), "forbod");});
test("forbrente -> forbrent", function() {deepEqual( Stem("forbrente"), "forbrent");});
test("forbruk -> forbruk", function() {deepEqual( Stem("forbruk"), "forbruk");});
test("forbrukar -> forbruk", function() {deepEqual( Stem("forbrukar"), "forbruk");});
test("forbrukarane -> forbrukar", function() {deepEqual( Stem("forbrukarane"), "forbrukar");});
test("forbrukarar -> forbrukar", function() {deepEqual( Stem("forbrukarar"), "forbrukar");});
test("forbrukaravtalar -> forbrukaravtal", function() {deepEqual( Stem("forbrukaravtalar"), "forbrukaravtal");});
test("forbrukare -> forbrukar", function() {deepEqual( Stem("forbrukare"), "forbrukar");});
test("forbrukaren -> forbrukar", function() {deepEqual( Stem("forbrukaren"), "forbrukar");});
test("forbrukarforhold -> forbrukarforhold", function() {deepEqual( Stem("forbrukarforhold"), "forbrukarforhold");});
test("forbrukarkjøp -> forbrukarkjøp", function() {deepEqual( Stem("forbrukarkjøp"), "forbrukarkjøp");});
test("forbrukarkontor -> forbrukarkontor", function() {deepEqual( Stem("forbrukarkontor"), "forbrukarkontor");});
test("forbrukarkooperative -> forbrukarkooperativ", function() {deepEqual( Stem("forbrukarkooperative"), "forbrukarkooperativ");});
test("forbrukarlovgjeving -> forbrukarlovgjeving", function() {deepEqual( Stem("forbrukarlovgjeving"), "forbrukarlovgjeving");});
test("forbrukarlovgjevinga -> forbrukarlovgjeving", function() {deepEqual( Stem("forbrukarlovgjevinga"), "forbrukarlovgjeving");});
test("forbrukarombodet -> forbrukarombod", function() {deepEqual( Stem("forbrukarombodet"), "forbrukarombod");});
test("forbrukarorganisasjonar -> forbrukarorganisasjon", function() {deepEqual( Stem("forbrukarorganisasjonar"), "forbrukarorganisasjon");});
test("forbrukarpolitikk -> forbrukarpolitikk", function() {deepEqual( Stem("forbrukarpolitikk"), "forbrukarpolitikk");});
test("forbrukarrådet -> forbrukarråd", function() {deepEqual( Stem("forbrukarrådet"), "forbrukarråd");});
test("forbrukarsamvirke -> forbrukarsamvirk", function() {deepEqual( Stem("forbrukarsamvirke"), "forbrukarsamvirk");});
test("forbrukarsamvirkelag -> forbrukarsamvirkelag", function() {deepEqual( Stem("forbrukarsamvirkelag"), "forbrukarsamvirkelag");});
test("forbrukarsamvirkelaga -> forbrukarsamvirkelag", function() {deepEqual( Stem("forbrukarsamvirkelaga"), "forbrukarsamvirkelag");});
test("forbrukarsamvirket -> forbrukarsamvirk", function() {deepEqual( Stem("forbrukarsamvirket"), "forbrukarsamvirk");});
test("forbrukarstyrte -> forbrukarstyrt", function() {deepEqual( Stem("forbrukarstyrte"), "forbrukarstyrt");});
test("forbrukartilhøve -> forbrukartilhøv", function() {deepEqual( Stem("forbrukartilhøve"), "forbrukartilhøv");});
test("forbrukartvistar -> forbrukartvist", function() {deepEqual( Stem("forbrukartvistar"), "forbrukartvist");});
test("forbrukartvistutval -> forbrukartvistutval", function() {deepEqual( Stem("forbrukartvistutval"), "forbrukartvistutval");});
test("forbrukartvistutvalet -> forbrukartvistutval", function() {deepEqual( Stem("forbrukartvistutvalet"), "forbrukartvistutval");});
test("forbrukermarkeder -> forbrukermarked", function() {deepEqual( Stem("forbrukermarkeder"), "forbrukermarked");});
test("forbruket -> forbruk", function() {deepEqual( Stem("forbruket"), "forbruk");});
test("forbruksavhengige -> forbruksavheng", function() {deepEqual( Stem("forbruksavhengige"), "forbruksavheng");});
test("forbruksmessige -> forbruksmess", function() {deepEqual( Stem("forbruksmessige"), "forbruksmess");});
test("forbruksvarer -> forbruksvar", function() {deepEqual( Stem("forbruksvarer"), "forbruksvar");});
test("forbud -> forbud", function() {deepEqual( Stem("forbud"), "forbud");});
test("forbudet -> forbud", function() {deepEqual( Stem("forbudet"), "forbud");});
test("forbudt -> forbud", function() {deepEqual( Stem("forbudt"), "forbud");});
test("forbundet -> forbund", function() {deepEqual( Stem("forbundet"), "forbund");});
test("forby -> forby", function() {deepEqual( Stem("forby"), "forby");});
test("forbyr -> forbyr", function() {deepEqual( Stem("forbyr"), "forbyr");});
test("fordel -> fordel", function() {deepEqual( Stem("fordel"), "fordel");});
test("fordelaktig -> fordelakt", function() {deepEqual( Stem("fordelaktig"), "fordelakt");});
test("fordelane -> fordel", function() {deepEqual( Stem("fordelane"), "fordel");});
test("fordelar -> fordel", function() {deepEqual( Stem("fordelar"), "fordel");});
test("fordelast -> fordel", function() {deepEqual( Stem("fordelast"), "fordel");});
test("fordele -> fordel", function() {deepEqual( Stem("fordele"), "fordel");});
test("fordelen -> fordel", function() {deepEqual( Stem("fordelen"), "fordel");});
test("fordelene -> fordel", function() {deepEqual( Stem("fordelene"), "fordel");});
test("fordeler -> fordel", function() {deepEqual( Stem("fordeler"), "fordel");});
test("fordeles -> fordel", function() {deepEqual( Stem("fordeles"), "fordel");});
test("fordeling -> fordeling", function() {deepEqual( Stem("fordeling"), "fordeling");});
test("fordelinga -> fordeling", function() {deepEqual( Stem("fordelinga"), "fordeling");});
test("fordelingen -> fordeling", function() {deepEqual( Stem("fordelingen"), "fordeling");});
test("fordelinger -> fordeling", function() {deepEqual( Stem("fordelinger"), "fordeling");});
test("fordelingsmekanisme -> fordelingsmekanism", function() {deepEqual( Stem("fordelingsmekanisme"), "fordelingsmekanism");});
test("fordelingsmessig -> fordelingsmess", function() {deepEqual( Stem("fordelingsmessig"), "fordelingsmess");});
test("fordelingsmessige -> fordelingsmess", function() {deepEqual( Stem("fordelingsmessige"), "fordelingsmess");});
test("fordelingsnøkkel -> fordelingsnøkkel", function() {deepEqual( Stem("fordelingsnøkkel"), "fordelingsnøkkel");});
test("fordelingsoppgaver -> fordelingsoppgav", function() {deepEqual( Stem("fordelingsoppgaver"), "fordelingsoppgav");});
test("fordelingspolitikken -> fordelingspolitikk", function() {deepEqual( Stem("fordelingspolitikken"), "fordelingspolitikk");});
test("fordelingspolitiske -> fordelingspolitisk", function() {deepEqual( Stem("fordelingspolitiske"), "fordelingspolitisk");});
test("fordelingsprofil -> fordelingsprofil", function() {deepEqual( Stem("fordelingsprofil"), "fordelingsprofil");});
test("fordelingsprofilen -> fordelingsprofil", function() {deepEqual( Stem("fordelingsprofilen"), "fordelingsprofil");});
test("fordelingsreglane -> fordelingsregl", function() {deepEqual( Stem("fordelingsreglane"), "fordelingsregl");});
test("fordelingsreglene -> fordelingsregl", function() {deepEqual( Stem("fordelingsreglene"), "fordelingsregl");});
test("fordelingsscenarier -> fordelingsscenari", function() {deepEqual( Stem("fordelingsscenarier"), "fordelingsscenari");});
test("fordelingsspørsmåla -> fordelingsspørsmål", function() {deepEqual( Stem("fordelingsspørsmåla"), "fordelingsspørsmål");});
test("fordelingsvirkninger -> fordelingsvirkning", function() {deepEqual( Stem("fordelingsvirkninger"), "fordelingsvirkning");});
test("fordelsbeskattes -> fordelsbeskatt", function() {deepEqual( Stem("fordelsbeskattes"), "fordelsbeskatt");});
test("fordelt -> fordelt", function() {deepEqual( Stem("fordelt"), "fordelt");});
test("fordelte -> fordelt", function() {deepEqual( Stem("fordelte"), "fordelt");});
test("forderung -> forderung", function() {deepEqual( Stem("forderung"), "forderung");});
test("fordervelse -> forderv", function() {deepEqual( Stem("fordervelse"), "forderv");});
test("fordi -> fordi", function() {deepEqual( Stem("fordi"), "fordi");});
test("fordobling -> fordobling", function() {deepEqual( Stem("fordobling"), "fordobling");});
test("fordre -> fordr", function() {deepEqual( Stem("fordre"), "fordr");});
test("fordring -> fordring", function() {deepEqual( Stem("fordring"), "fordring");});
test("fordringer -> fordring", function() {deepEqual( Stem("fordringer"), "fordring");});
test("fordringshavernes -> fordringshavern", function() {deepEqual( Stem("fordringshavernes"), "fordringshavern");});
test("fordyrende -> fordyr", function() {deepEqual( Stem("fordyrende"), "fordyr");});
test("fordømte -> fordømt", function() {deepEqual( Stem("fordømte"), "fordømt");});
test("foredle -> foredl", function() {deepEqual( Stem("foredle"), "foredl");});
test("foredling -> foredling", function() {deepEqual( Stem("foredling"), "foredling");});
test("foredlingsrad -> foredlingsrad", function() {deepEqual( Stem("foredlingsrad"), "foredlingsrad");});
test("foredlingsverksemder -> foredlingsverksemd", function() {deepEqual( Stem("foredlingsverksemder"), "foredlingsverksemd");});
test("foregå -> foregå", function() {deepEqual( Stem("foregå"), "foregå");});
test("foregående -> foregå", function() {deepEqual( Stem("foregående"), "foregå");});
test("foregår -> foregår", function() {deepEqual( Stem("foregår"), "foregår");});
test("foregått -> foregått", function() {deepEqual( Stem("foregått"), "foregått");});
test("foreining -> foreining", function() {deepEqual( Stem("foreining"), "foreining");});
test("foreininga -> foreining", function() {deepEqual( Stem("foreininga"), "foreining");});
test("foreiningane -> foreining", function() {deepEqual( Stem("foreiningane"), "foreining");});
test("foreiningar -> foreining", function() {deepEqual( Stem("foreiningar"), "foreining");});
test("foreiningskassa -> foreiningskass", function() {deepEqual( Stem("foreiningskassa"), "foreiningskass");});
test("foreiningsreglane -> foreiningsregl", function() {deepEqual( Stem("foreiningsreglane"), "foreiningsregl");});
test("forekomme -> forekomm", function() {deepEqual( Stem("forekomme"), "forekomm");});
test("forekommer -> forekomm", function() {deepEqual( Stem("forekommer"), "forekomm");});
test("forekommet -> forekomm", function() {deepEqual( Stem("forekommet"), "forekomm");});
test("forelagt -> forelagt", function() {deepEqual( Stem("forelagt"), "forelagt");});
test("forelda -> foreld", function() {deepEqual( Stem("forelda"), "foreld");});
test("forelding -> forelding", function() {deepEqual( Stem("forelding"), "forelding");});
test("foreldinga -> forelding", function() {deepEqual( Stem("foreldinga"), "forelding");});
test("foreldingsfrist -> foreldingsfrist", function() {deepEqual( Stem("foreldingsfrist"), "foreldingsfrist");});
test("foreldingsfristen -> foreldingsfrist", function() {deepEqual( Stem("foreldingsfristen"), "foreldingsfrist");});
test("foreldingsregelen -> foreldingsregel", function() {deepEqual( Stem("foreldingsregelen"), "foreldingsregel");});
test("foreldre -> foreldr", function() {deepEqual( Stem("foreldre"), "foreldr");});
test("foreldrene -> foreldr", function() {deepEqual( Stem("foreldrene"), "foreldr");});
test("forelegg -> forelegg", function() {deepEqual( Stem("forelegg"), "forelegg");});
test("forelegges -> forelegg", function() {deepEqual( Stem("forelegges"), "forelegg");});
test("foreligge -> foreligg", function() {deepEqual( Stem("foreligge"), "foreligg");});
test("foreliggende -> foreligg", function() {deepEqual( Stem("foreliggende"), "foreligg");});
test("foreligger -> foreligg", function() {deepEqual( Stem("foreligger"), "foreligg");});
test("forelskelser -> forelsk", function() {deepEqual( Stem("forelskelser"), "forelsk");});
test("forelsker -> forelsk", function() {deepEqual( Stem("forelsker"), "forelsk");});
test("forelsket -> forelsk", function() {deepEqual( Stem("forelsket"), "forelsk");});
test("forelå -> forelå", function() {deepEqual( Stem("forelå"), "forelå");});
test("foreløbig -> foreløb", function() {deepEqual( Stem("foreløbig"), "foreløb");});
test("foreløpig -> foreløp", function() {deepEqual( Stem("foreløpig"), "foreløp");});
test("forene -> for", function() {deepEqual( Stem("forene"), "for");});
test("forening -> forening", function() {deepEqual( Stem("forening"), "forening");});
test("foreningar -> forening", function() {deepEqual( Stem("foreningar"), "forening");});
test("foreningen -> forening", function() {deepEqual( Stem("foreningen"), "forening");});
test("foreningens -> forening", function() {deepEqual( Stem("foreningens"), "forening");});
test("foreninger -> forening", function() {deepEqual( Stem("foreninger"), "forening");});
test("forenings -> forening", function() {deepEqual( Stem("forenings"), "forening");});
test("foreningsandel -> foreningsandel", function() {deepEqual( Stem("foreningsandel"), "foreningsandel");});
test("foreningsliv -> foreningsliv", function() {deepEqual( Stem("foreningsliv"), "foreningsliv");});
test("forenkla -> forenkl", function() {deepEqual( Stem("forenkla"), "forenkl");});
test("forenklende -> forenkl", function() {deepEqual( Stem("forenklende"), "forenkl");});
test("forenklet -> forenkl", function() {deepEqual( Stem("forenklet"), "forenkl");});
test("forenkling -> forenkling", function() {deepEqual( Stem("forenkling"), "forenkling");});
test("forenklingar -> forenkling", function() {deepEqual( Stem("forenklingar"), "forenkling");});
test("forenlig -> foren", function() {deepEqual( Stem("forenlig"), "foren");});
test("foreskrivs -> foreskriv", function() {deepEqual( Stem("foreskrivs"), "foreskriv");});
test("foreslo -> foreslo", function() {deepEqual( Stem("foreslo"), "foreslo");});
test("foreslå -> foreslå", function() {deepEqual( Stem("foreslå"), "foreslå");});
test("foreslår -> foreslår", function() {deepEqual( Stem("foreslår"), "foreslår");});
test("foreslås -> foreslås", function() {deepEqual( Stem("foreslås"), "foreslås");});
test("foreslått -> foreslått", function() {deepEqual( Stem("foreslått"), "foreslått");});
test("foreslåtte -> foreslått", function() {deepEqual( Stem("foreslåtte"), "foreslått");});
test("forestille -> forestill", function() {deepEqual( Stem("forestille"), "forestill");});
test("forestå -> forestå", function() {deepEqual( Stem("forestå"), "forestå");});
test("forestående -> forestå", function() {deepEqual( Stem("forestående"), "forestå");});
test("forestår -> forestår", function() {deepEqual( Stem("forestår"), "forestår");});
test("foresvinner -> foresvinn", function() {deepEqual( Stem("foresvinner"), "foresvinn");});
test("foreta -> foret", function() {deepEqual( Stem("foreta"), "foret");});
test("foretak -> foretak", function() {deepEqual( Stem("foretak"), "foretak");});
test("foretakene -> foretak", function() {deepEqual( Stem("foretakene"), "foretak");});
test("foretakenes -> foretak", function() {deepEqual( Stem("foretakenes"), "foretak");});
test("foretaket -> foretak", function() {deepEqual( Stem("foretaket"), "foretak");});
test("foretakets -> foretak", function() {deepEqual( Stem("foretakets"), "foretak");});
test("foretakpensjonsordninger -> foretakpensjonsordning", function() {deepEqual( Stem("foretakpensjonsordninger"), "foretakpensjonsordning");});
test("foretaks -> foretaks", function() {deepEqual( Stem("foretaks"), "foretaks");});
test("foretaksendringer -> foretaksendring", function() {deepEqual( Stem("foretaksendringer"), "foretaksendring");});
test("foretaksopprettet -> foretaksopprett", function() {deepEqual( Stem("foretaksopprettet"), "foretaksopprett");});
test("foretaksordning -> foretaksordning", function() {deepEqual( Stem("foretaksordning"), "foretaksordning");});
test("foretaksordningen -> foretaksordning", function() {deepEqual( Stem("foretaksordningen"), "foretaksordning");});
test("foretaksorganisert -> foretaksorganiser", function() {deepEqual( Stem("foretaksorganisert"), "foretaksorganiser");});
test("foretakspensjon -> foretakspensjon", function() {deepEqual( Stem("foretakspensjon"), "foretakspensjon");});
test("foretakspensjonen -> foretakspensjon", function() {deepEqual( Stem("foretakspensjonen"), "foretakspensjon");});
test("foretakspensjoner -> foretakspensjon", function() {deepEqual( Stem("foretakspensjoner"), "foretakspensjon");});
test("foretakspensjonsforsikring -> foretakspensjonsforsikring", function() {deepEqual( Stem("foretakspensjonsforsikring"), "foretakspensjonsforsikring");});
test("foretakspensjonsordning -> foretakspensjonsordning", function() {deepEqual( Stem("foretakspensjonsordning"), "foretakspensjonsordning");});
test("foretakspensjonsordningen -> foretakspensjonsordning", function() {deepEqual( Stem("foretakspensjonsordningen"), "foretakspensjonsordning");});
test("foretakspensjonsordningene -> foretakspensjonsordning", function() {deepEqual( Stem("foretakspensjonsordningene"), "foretakspensjonsordning");});
test("foretakspensjonsordninger -> foretakspensjonsordning", function() {deepEqual( Stem("foretakspensjonsordninger"), "foretakspensjonsordning");});
test("foretakspensjonsordningers -> foretakspensjonsordning", function() {deepEqual( Stem("foretakspensjonsordningers"), "foretakspensjonsordning");});
test("foretaksstørrelse -> foretaksstørr", function() {deepEqual( Stem("foretaksstørrelse"), "foretaksstørr");});
test("foretar -> foret", function() {deepEqual( Stem("foretar"), "foret");});
test("foretas -> foret", function() {deepEqual( Stem("foretas"), "foret");});
test("foretatt -> foretatt", function() {deepEqual( Stem("foretatt"), "foretatt");});
test("foretatte -> foretatt", function() {deepEqual( Stem("foretatte"), "foretatt");});
test("foretrekke -> foretrekk", function() {deepEqual( Stem("foretrekke"), "foretrekk");});
test("forfall -> forfall", function() {deepEqual( Stem("forfall"), "forfall");});
test("forfalle -> forfall", function() {deepEqual( Stem("forfalle"), "forfall");});
test("forfallen -> forfall", function() {deepEqual( Stem("forfallen"), "forfall");});
test("forfallsdagen -> forfallsdag", function() {deepEqual( Stem("forfallsdagen"), "forfallsdag");});
test("forfallstid -> forfallstid", function() {deepEqual( Stem("forfallstid"), "forfallstid");});
test("forfallstidspunktet -> forfallstidspunkt", function() {deepEqual( Stem("forfallstidspunktet"), "forfallstidspunkt");});
test("forfalne -> forfaln", function() {deepEqual( Stem("forfalne"), "forfaln");});
test("forfalska -> forfalsk", function() {deepEqual( Stem("forfalska"), "forfalsk");});
test("forfalsking -> forfalsking", function() {deepEqual( Stem("forfalsking"), "forfalsking");});
test("forfalte -> forfalt", function() {deepEqual( Stem("forfalte"), "forfalt");});
test("forfattarverksemd -> forfattarverksemd", function() {deepEqual( Stem("forfattarverksemd"), "forfattarverksemd");});
test("forfedre -> forfedr", function() {deepEqual( Stem("forfedre"), "forfedr");});
test("forfell -> forfell", function() {deepEqual( Stem("forfell"), "forfell");});
test("forferdet -> forferd", function() {deepEqual( Stem("forferdet"), "forferd");});
test("forfordelte -> forfordelt", function() {deepEqual( Stem("forfordelte"), "forfordelt");});
test("forfulgt -> forfulgt", function() {deepEqual( Stem("forfulgt"), "forfulgt");});
test("forfølger -> forfølg", function() {deepEqual( Stem("forfølger"), "forfølg");});
test("forføye -> forføy", function() {deepEqual( Stem("forføye"), "forføy");});
test("forføyer -> forføy", function() {deepEqual( Stem("forføyer"), "forføy");});
test("forgjeves -> forgjev", function() {deepEqual( Stem("forgjeves"), "forgjev");});
test("forgreininger -> forgreining", function() {deepEqual( Stem("forgreininger"), "forgreining");});
test("forhandla -> forhandl", function() {deepEqual( Stem("forhandla"), "forhandl");});
test("forhandle -> forhandl", function() {deepEqual( Stem("forhandle"), "forhandl");});
test("forhandler -> forhandl", function() {deepEqual( Stem("forhandler"), "forhandl");});
test("forhandlet -> forhandl", function() {deepEqual( Stem("forhandlet"), "forhandl");});
test("forhandling -> forhandling", function() {deepEqual( Stem("forhandling"), "forhandling");});
test("forhandlingar -> forhandling", function() {deepEqual( Stem("forhandlingar"), "forhandling");});
test("forhandlinger -> forhandling", function() {deepEqual( Stem("forhandlinger"), "forhandling");});
test("forhandlingssituasjon -> forhandlingssituasjon", function() {deepEqual( Stem("forhandlingssituasjon"), "forhandlingssituasjon");});
test("forhandlingsspørsmål -> forhandlingsspørsmål", function() {deepEqual( Stem("forhandlingsspørsmål"), "forhandlingsspørsmål");});
test("forhekselse -> forheks", function() {deepEqual( Stem("forhekselse"), "forheks");});
test("forhindre -> forhindr", function() {deepEqual( Stem("forhindre"), "forhindr");});
test("forhindrer -> forhindr", function() {deepEqual( Stem("forhindrer"), "forhindr");});
test("forhindret -> forhindr", function() {deepEqual( Stem("forhindret"), "forhindr");});
test("forhold -> forhold", function() {deepEqual( Stem("forhold"), "forhold");});
test("forholda -> forhold", function() {deepEqual( Stem("forholda"), "forhold");});
test("forholde -> forhold", function() {deepEqual( Stem("forholde"), "forhold");});
test("forholdene -> forhold", function() {deepEqual( Stem("forholdene"), "forhold");});
test("forholder -> forhold", function() {deepEqual( Stem("forholder"), "forhold");});
test("forholdet -> forhold", function() {deepEqual( Stem("forholdet"), "forhold");});
test("forholdsmessig -> forholdsmess", function() {deepEqual( Stem("forholdsmessig"), "forholdsmess");});
test("forholdsmessige -> forholdsmess", function() {deepEqual( Stem("forholdsmessige"), "forholdsmess");});
test("forholdsmessighet -> forholdsmess", function() {deepEqual( Stem("forholdsmessighet"), "forholdsmess");});
test("forholdsmessighetprinsippet -> forholdsmessighetprinsipp", function() {deepEqual( Stem("forholdsmessighetprinsippet"), "forholdsmessighetprinsipp");});
test("forholdsmessighetskriterier -> forholdsmessighetskriteri", function() {deepEqual( Stem("forholdsmessighetskriterier"), "forholdsmessighetskriteri");});
test("forholdsmessighetsprinsipp -> forholdsmessighetsprinsipp", function() {deepEqual( Stem("forholdsmessighetsprinsipp"), "forholdsmessighetsprinsipp");});
test("forholdsmessighetsprinsippet -> forholdsmessighetsprinsipp", function() {deepEqual( Stem("forholdsmessighetsprinsippet"), "forholdsmessighetsprinsipp");});
test("forholdsvis -> forholdsvis", function() {deepEqual( Stem("forholdsvis"), "forholdsvis");});
test("forholdt -> forhold", function() {deepEqual( Stem("forholdt"), "forhold");});
test("forhånd -> forhånd", function() {deepEqual( Stem("forhånd"), "forhånd");});
test("forhåndsavgjørelse -> forhåndsavgjør", function() {deepEqual( Stem("forhåndsavgjørelse"), "forhåndsavgjør");});
test("forhåndsavgjørelser -> forhåndsavgjør", function() {deepEqual( Stem("forhåndsavgjørelser"), "forhåndsavgjør");});
test("forhåndsfinansieres -> forhåndsfinansier", function() {deepEqual( Stem("forhåndsfinansieres"), "forhåndsfinansier");});
test("forhåndsfinansiert -> forhåndsfinansier", function() {deepEqual( Stem("forhåndsfinansiert"), "forhåndsfinansier");});
test("forhåndssikres -> forhåndssikr", function() {deepEqual( Stem("forhåndssikres"), "forhåndssikr");});
test("forhøye -> forhøy", function() {deepEqual( Stem("forhøye"), "forhøy");});
test("forhøyes -> forhøy", function() {deepEqual( Stem("forhøyes"), "forhøy");});
test("forhøyet -> forhøy", function() {deepEqual( Stem("forhøyet"), "forhøy");});
test("forkant -> forkant", function() {deepEqual( Stem("forkant"), "forkant");});
test("forkasta -> forkast", function() {deepEqual( Stem("forkasta"), "forkast");});
test("forkaste -> forkast", function() {deepEqual( Stem("forkaste"), "forkast");});
test("forkastet -> forkast", function() {deepEqual( Stem("forkastet"), "forkast");});
test("forkasting -> forkasting", function() {deepEqual( Stem("forkasting"), "forkasting");});
test("forkjøpsrett -> forkjøpsrett", function() {deepEqual( Stem("forkjøpsrett"), "forkjøpsrett");});
test("forkjøpsrettane -> forkjøpsrett", function() {deepEqual( Stem("forkjøpsrettane"), "forkjøpsrett");});
test("forkjøpsrettar -> forkjøpsrett", function() {deepEqual( Stem("forkjøpsrettar"), "forkjøpsrett");});
test("forkjøpsretten -> forkjøpsrett", function() {deepEqual( Stem("forkjøpsretten"), "forkjøpsrett");});
test("forkjøpsretthavaren -> forkjøpsretthavar", function() {deepEqual( Stem("forkjøpsretthavaren"), "forkjøpsretthavar");});
test("forkjøpsrettshavar -> forkjøpsrettshav", function() {deepEqual( Stem("forkjøpsrettshavar"), "forkjøpsrettshav");});
test("forkjøpsrettshavarane -> forkjøpsrettshavar", function() {deepEqual( Stem("forkjøpsrettshavarane"), "forkjøpsrettshavar");});
test("forkjøpsrettshavarar -> forkjøpsrettshavar", function() {deepEqual( Stem("forkjøpsrettshavarar"), "forkjøpsrettshavar");});
test("forkjøpsrettshavaren -> forkjøpsrettshavar", function() {deepEqual( Stem("forkjøpsrettshavaren"), "forkjøpsrettshavar");});
test("forkjøpsspørsmålet -> forkjøpsspørsmål", function() {deepEqual( Stem("forkjøpsspørsmålet"), "forkjøpsspørsmål");});
test("forklare -> forklar", function() {deepEqual( Stem("forklare"), "forklar");});
test("forklarer -> forklar", function() {deepEqual( Stem("forklarer"), "forklar");});
test("forklares -> forklar", function() {deepEqual( Stem("forklares"), "forklar");});
test("forklaring -> forklaring", function() {deepEqual( Stem("forklaring"), "forklaring");});
test("forklaringer -> forklaring", function() {deepEqual( Stem("forklaringer"), "forklaring");});
test("forklart -> forklart", function() {deepEqual( Stem("forklart"), "forklart");});
test("forkledd -> forkledd", function() {deepEqual( Stem("forkledd"), "forkledd");});
test("forkledning -> forkledning", function() {deepEqual( Stem("forkledning"), "forkledning");});
test("forkledningen -> forkledning", function() {deepEqual( Stem("forkledningen"), "forkledning");});
test("forkledninger -> forkledning", function() {deepEqual( Stem("forkledninger"), "forkledning");});
test("forkler -> forkl", function() {deepEqual( Stem("forkler"), "forkl");});
test("forklet -> forkl", function() {deepEqual( Stem("forklet"), "forkl");});
test("forklåre -> forklår", function() {deepEqual( Stem("forklåre"), "forklår");});
test("forklåring -> forklåring", function() {deepEqual( Stem("forklåring"), "forklåring");});
test("forklåringa -> forklåring", function() {deepEqual( Stem("forklåringa"), "forklåring");});
test("forkortes -> forkort", function() {deepEqual( Stem("forkortes"), "forkort");});
test("forlag -> forlag", function() {deepEqual( Stem("forlag"), "forlag");});
test("forlaget -> forlag", function() {deepEqual( Stem("forlaget"), "forlag");});
test("forlagsinsatser -> forlagsinsats", function() {deepEqual( Stem("forlagsinsatser"), "forlagsinsats");});
test("forlagskapital -> forlagskapital", function() {deepEqual( Stem("forlagskapital"), "forlagskapital");});
test("forlagt -> forlagt", function() {deepEqual( Stem("forlagt"), "forlagt");});
test("forlangast -> forlang", function() {deepEqual( Stem("forlangast"), "forlang");});
test("forlanger -> forlang", function() {deepEqual( Stem("forlanger"), "forlang");});
test("forlate -> forlat", function() {deepEqual( Stem("forlate"), "forlat");});
test("forlatt -> forlatt", function() {deepEqual( Stem("forlatt"), "forlatt");});
test("forleden -> forled", function() {deepEqual( Stem("forleden"), "forled");});
test("forlengede -> forleng", function() {deepEqual( Stem("forlengede"), "forleng");});
test("forlengelse -> forleng", function() {deepEqual( Stem("forlengelse"), "forleng");});
test("forlengelsen -> forleng", function() {deepEqual( Stem("forlengelsen"), "forleng");});
test("forlenget -> forleng", function() {deepEqual( Stem("forlenget"), "forleng");});
test("forlik -> forlik", function() {deepEqual( Stem("forlik"), "forlik");});
test("forliksråda -> forliksråd", function() {deepEqual( Stem("forliksråda"), "forliksråd");});
test("forliksrådet -> forliksråd", function() {deepEqual( Stem("forliksrådet"), "forliksråd");});
test("forlikt -> forlikt", function() {deepEqual( Stem("forlikt"), "forlikt");});
test("forlikte -> forlikt", function() {deepEqual( Stem("forlikte"), "forlikt");});
test("forlot -> forlot", function() {deepEqual( Stem("forlot"), "forlot");});
test("forløp -> forløp", function() {deepEqual( Stem("forløp"), "forløp");});
test("form -> form", function() {deepEqual( Stem("form"), "form");});
test("forma -> form", function() {deepEqual( Stem("forma"), "form");});
test("formalia -> formali", function() {deepEqual( Stem("formalia"), "formali");});
test("formalisering -> formalisering", function() {deepEqual( Stem("formalisering"), "formalisering");});
test("formalisert -> formaliser", function() {deepEqual( Stem("formalisert"), "formaliser");});
test("formaliserte -> formaliser", function() {deepEqual( Stem("formaliserte"), "formaliser");});
test("formannskap -> formannskap", function() {deepEqual( Stem("formannskap"), "formannskap");});
test("formannskapet -> formannskap", function() {deepEqual( Stem("formannskapet"), "formannskap");});
test("formannskapets -> formannskap", function() {deepEqual( Stem("formannskapets"), "formannskap");});
test("forme -> form", function() {deepEqual( Stem("forme"), "form");});
test("formell -> formell", function() {deepEqual( Stem("formell"), "formell");});
test("formelle -> formell", function() {deepEqual( Stem("formelle"), "formell");});
test("formelt -> formelt", function() {deepEqual( Stem("formelt"), "formelt");});
test("formen -> form", function() {deepEqual( Stem("formen"), "form");});
test("formene -> form", function() {deepEqual( Stem("formene"), "form");});
test("former -> form", function() {deepEqual( Stem("former"), "form");});
test("formet -> form", function() {deepEqual( Stem("formet"), "form");});
test("formidabel -> formidabel", function() {deepEqual( Stem("formidabel"), "formidabel");});
test("formidable -> formidabl", function() {deepEqual( Stem("formidable"), "formidabl");});
test("formidla -> formidl", function() {deepEqual( Stem("formidla"), "formidl");});
test("formidlar -> formidl", function() {deepEqual( Stem("formidlar"), "formidl");});
test("formidlarane -> formidlar", function() {deepEqual( Stem("formidlarane"), "formidlar");});
test("formidlarar -> formidlar", function() {deepEqual( Stem("formidlarar"), "formidlar");});
test("formidler -> formidl", function() {deepEqual( Stem("formidler"), "formidl");});
test("formidling -> formidling", function() {deepEqual( Stem("formidling"), "formidling");});
test("formidlinga -> formidling", function() {deepEqual( Stem("formidlinga"), "formidling");});
test("formidlingsoppdrag -> formidlingsoppdrag", function() {deepEqual( Stem("formidlingsoppdrag"), "formidlingsoppdrag");});
test("formidlingsverksemd -> formidlingsverksemd", function() {deepEqual( Stem("formidlingsverksemd"), "formidlingsverksemd");});
test("formidlingsverksemda -> formidlingsverksemd", function() {deepEqual( Stem("formidlingsverksemda"), "formidlingsverksemd");});
test("formkrav -> formkrav", function() {deepEqual( Stem("formkrav"), "formkrav");});
test("formodentlig -> formodent", function() {deepEqual( Stem("formodentlig"), "formodent");});
test("formodning -> formodning", function() {deepEqual( Stem("formodning"), "formodning");});
test("formodningen -> formodning", function() {deepEqual( Stem("formodningen"), "formodning");});
test("formue -> formu", function() {deepEqual( Stem("formue"), "formu");});
test("formueforvaltning -> formueforvaltning", function() {deepEqual( Stem("formueforvaltning"), "formueforvaltning");});
test("formueforvaltninga -> formueforvaltning", function() {deepEqual( Stem("formueforvaltninga"), "formueforvaltning");});
test("formuen -> formu", function() {deepEqual( Stem("formuen"), "formu");});
test("formuesbeskatning -> formuesbeskatning", function() {deepEqual( Stem("formuesbeskatning"), "formuesbeskatning");});
test("formuesbeskattes -> formuesbeskatt", function() {deepEqual( Stem("formuesbeskattes"), "formuesbeskatt");});
test("formuesdata -> formuesdat", function() {deepEqual( Stem("formuesdata"), "formuesdat");});
test("formueselementer -> formueselement", function() {deepEqual( Stem("formueselementer"), "formueselement");});
test("formuesforøkelse -> formuesforøk", function() {deepEqual( Stem("formuesforøkelse"), "formuesforøk");});
test("formuesgoda -> formuesgod", function() {deepEqual( Stem("formuesgoda"), "formuesgod");});
test("formuesgode -> formuesgod", function() {deepEqual( Stem("formuesgode"), "formuesgod");});
test("formuesgoder -> formuesgod", function() {deepEqual( Stem("formuesgoder"), "formuesgod");});
test("formuesgodet -> formuesgod", function() {deepEqual( Stem("formuesgodet"), "formuesgod");});
test("formuesgrupper -> formuesgrupp", function() {deepEqual( Stem("formuesgrupper"), "formuesgrupp");});
test("formuesmasse -> formuesmass", function() {deepEqual( Stem("formuesmasse"), "formuesmass");});
test("formuesobjekt -> formuesobjekt", function() {deepEqual( Stem("formuesobjekt"), "formuesobjekt");});
test("formuesoppbygginga -> formuesoppbygging", function() {deepEqual( Stem("formuesoppbygginga"), "formuesoppbygging");});
test("formuesskatt -> formuesskatt", function() {deepEqual( Stem("formuesskatt"), "formuesskatt");});
test("formuesskattegrunnlaget -> formuesskattegrunnlag", function() {deepEqual( Stem("formuesskattegrunnlaget"), "formuesskattegrunnlag");});
test("formuesskatten -> formuesskatt", function() {deepEqual( Stem("formuesskatten"), "formuesskatt");});
test("formuesskatteplikt -> formuesskatteplikt", function() {deepEqual( Stem("formuesskatteplikt"), "formuesskatteplikt");});
test("formuesskattepliktig -> formuesskatteplikt", function() {deepEqual( Stem("formuesskattepliktig"), "formuesskatteplikt");});
test("formuesverdien -> formuesverdi", function() {deepEqual( Stem("formuesverdien"), "formuesverdi");});
test("formuesøkning -> formuesøkning", function() {deepEqual( Stem("formuesøkning"), "formuesøkning");});
test("formuesøkningen -> formuesøkning", function() {deepEqual( Stem("formuesøkningen"), "formuesøkning");});
test("formulerast -> formuler", function() {deepEqual( Stem("formulerast"), "formuler");});
test("formulering -> formulering", function() {deepEqual( Stem("formulering"), "formulering");});
test("formuleringa -> formulering", function() {deepEqual( Stem("formuleringa"), "formulering");});
test("formuleringar -> formulering", function() {deepEqual( Stem("formuleringar"), "formulering");});
test("formuleringen -> formulering", function() {deepEqual( Stem("formuleringen"), "formulering");});
test("formulert -> formuler", function() {deepEqual( Stem("formulert"), "formuler");});
test("formulerte -> formuler", function() {deepEqual( Stem("formulerte"), "formuler");});
test("formynderargument -> formynderargument", function() {deepEqual( Stem("formynderargument"), "formynderargument");});
test("formål -> formål", function() {deepEqual( Stem("formål"), "formål");});
test("formålet -> formål", function() {deepEqual( Stem("formålet"), "formål");});
test("formålstjenlige -> formålstjen", function() {deepEqual( Stem("formålstjenlige"), "formålstjen");});
test("fornemmer -> fornemm", function() {deepEqual( Stem("fornemmer"), "fornemm");});
test("fornuft -> fornuft", function() {deepEqual( Stem("fornuft"), "fornuft");});
test("fornuftens -> fornuft", function() {deepEqual( Stem("fornuftens"), "fornuft");});
test("fornuftig -> fornuft", function() {deepEqual( Stem("fornuftig"), "fornuft");});
test("fornuftsmessige -> fornuftsmess", function() {deepEqual( Stem("fornuftsmessige"), "fornuftsmess");});
test("fornyelse -> forny", function() {deepEqual( Stem("fornyelse"), "forny");});
test("fornyet -> forny", function() {deepEqual( Stem("fornyet"), "forny");});
test("fornying -> fornying", function() {deepEqual( Stem("fornying"), "fornying");});
test("fornærmer -> fornærm", function() {deepEqual( Stem("fornærmer"), "fornærm");});
test("fornærmet -> fornærm", function() {deepEqual( Stem("fornærmet"), "fornærm");});
test("fornøyd -> fornøyd", function() {deepEqual( Stem("fornøyd"), "fornøyd");});
test("fornøyde -> fornøyd", function() {deepEqual( Stem("fornøyde"), "fornøyd");});
test("forpinte -> forpint", function() {deepEqual( Stem("forpinte"), "forpint");});
test("forplikta -> forplikt", function() {deepEqual( Stem("forplikta"), "forplikt");});
test("forpliktar -> forplikt", function() {deepEqual( Stem("forpliktar"), "forplikt");});
test("forpliktelse -> forplikt", function() {deepEqual( Stem("forpliktelse"), "forplikt");});
test("forpliktelsene -> forplikt", function() {deepEqual( Stem("forpliktelsene"), "forplikt");});
test("forpliktelser -> forplikt", function() {deepEqual( Stem("forpliktelser"), "forplikt");});
test("forpliktende -> forplikt", function() {deepEqual( Stem("forpliktende"), "forplikt");});
test("forpliktet -> forplikt", function() {deepEqual( Stem("forpliktet"), "forplikt");});
test("forrang -> forrang", function() {deepEqual( Stem("forrang"), "forrang");});
test("forrenta -> forrent", function() {deepEqual( Stem("forrenta"), "forrent");});
test("forrentast -> forrent", function() {deepEqual( Stem("forrentast"), "forrent");});
test("forrenting -> forrenting", function() {deepEqual( Stem("forrenting"), "forrenting");});
test("forresten -> forrest", function() {deepEqual( Stem("forresten"), "forrest");});
test("forretningsbygg -> forretningsbygg", function() {deepEqual( Stem("forretningsbygg"), "forretningsbygg");});
test("forretningsdrift -> forretningsdrift", function() {deepEqual( Stem("forretningsdrift"), "forretningsdrift");});
test("forretningseigedommar -> forretningseigedomm", function() {deepEqual( Stem("forretningseigedommar"), "forretningseigedomm");});
test("forretningsførar -> forretningsfør", function() {deepEqual( Stem("forretningsførar"), "forretningsfør");});
test("forretningsførarane -> forretningsførar", function() {deepEqual( Stem("forretningsførarane"), "forretningsførar");});
test("forretningsførarar -> forretningsførar", function() {deepEqual( Stem("forretningsførarar"), "forretningsførar");});
test("forretningsføraravtalane -> forretningsføraravtal", function() {deepEqual( Stem("forretningsføraravtalane"), "forretningsføraravtal");});
test("forretningsføraravtalar -> forretningsføraravtal", function() {deepEqual( Stem("forretningsføraravtalar"), "forretningsføraravtal");});
test("forretningsføraravtale -> forretningsføraravtal", function() {deepEqual( Stem("forretningsføraravtale"), "forretningsføraravtal");});
test("forretningsføraravtalen -> forretningsføraravtal", function() {deepEqual( Stem("forretningsføraravtalen"), "forretningsføraravtal");});
test("forretningsføraren -> forretningsførar", function() {deepEqual( Stem("forretningsføraren"), "forretningsførar");});
test("forretningsførarforhold -> forretningsførarforhold", function() {deepEqual( Stem("forretningsførarforhold"), "forretningsførarforhold");});
test("forretningsførarhonorar -> forretningsførarhonor", function() {deepEqual( Stem("forretningsførarhonorar"), "forretningsførarhonor");});
test("forretningsførarhonoraret -> forretningsførarhonorar", function() {deepEqual( Stem("forretningsførarhonoraret"), "forretningsførarhonorar");});
test("forretningsførarkontraktar -> forretningsførarkontrakt", function() {deepEqual( Stem("forretningsførarkontraktar"), "forretningsførarkontrakt");});
test("forretningsføraroppdraga -> forretningsføraroppdrag", function() {deepEqual( Stem("forretningsføraroppdraga"), "forretningsføraroppdrag");});
test("forretningsføraroppgåver -> forretningsføraroppgåv", function() {deepEqual( Stem("forretningsføraroppgåver"), "forretningsføraroppgåv");});
test("forretningsførarstyre -> forretningsførarstyr", function() {deepEqual( Stem("forretningsførarstyre"), "forretningsførarstyr");});
test("forretningsførarverksemda -> forretningsførarverksemd", function() {deepEqual( Stem("forretningsførarverksemda"), "forretningsførarverksemd");});
test("forretningsføretak -> forretningsføretak", function() {deepEqual( Stem("forretningsføretak"), "forretningsføretak");});
test("forretningsførsel -> forretningsførsel", function() {deepEqual( Stem("forretningsførsel"), "forretningsførsel");});
test("forretningsførselen -> forretningsførsel", function() {deepEqual( Stem("forretningsførselen"), "forretningsførsel");});
test("forretningskommunar -> forretningskommun", function() {deepEqual( Stem("forretningskommunar"), "forretningskommun");});
test("forretningskontor -> forretningskontor", function() {deepEqual( Stem("forretningskontor"), "forretningskontor");});
test("forretningskontoret -> forretningskontor", function() {deepEqual( Stem("forretningskontoret"), "forretningskontor");});
test("forretningslokale -> forretningslokal", function() {deepEqual( Stem("forretningslokale"), "forretningslokal");});
test("forretningsmessig -> forretningsmess", function() {deepEqual( Stem("forretningsmessig"), "forretningsmess");});
test("forretningsmessige -> forretningsmess", function() {deepEqual( Stem("forretningsmessige"), "forretningsmess");});
test("forretningsområda -> forretningsområd", function() {deepEqual( Stem("forretningsområda"), "forretningsområd");});
test("forretningspraksis -> forretningspraksis", function() {deepEqual( Stem("forretningspraksis"), "forretningspraksis");});
test("forretningsstaden -> forretningsstad", function() {deepEqual( Stem("forretningsstaden"), "forretningsstad");});
test("forretningssted -> forretningssted", function() {deepEqual( Stem("forretningssted"), "forretningssted");});
test("forretningsverksemd -> forretningsverksemd", function() {deepEqual( Stem("forretningsverksemd"), "forretningsverksemd");});
test("forrige -> forr", function() {deepEqual( Stem("forrige"), "forr");});
test("forringa -> forring", function() {deepEqual( Stem("forringa"), "forring");});
test("forringelse -> forring", function() {deepEqual( Stem("forringelse"), "forring");});
test("forringing -> forringing", function() {deepEqual( Stem("forringing"), "forringing");});
test("forrykking -> forrykking", function() {deepEqual( Stem("forrykking"), "forrykking");});
test("forrykkje -> forrykkj", function() {deepEqual( Stem("forrykkje"), "forrykkj");});
test("forrykkjer -> forrykkj", function() {deepEqual( Stem("forrykkjer"), "forrykkj");});
test("forråtnelse -> forråtn", function() {deepEqual( Stem("forråtnelse"), "forråtn");});
test("forsamlingar -> forsamling", function() {deepEqual( Stem("forsamlingar"), "forsamling");});
test("forseinka -> forseink", function() {deepEqual( Stem("forseinka"), "forseink");});
test("forseinking -> forseinking", function() {deepEqual( Stem("forseinking"), "forseinking");});
test("forseinkingsrente -> forseinkingsrent", function() {deepEqual( Stem("forseinkingsrente"), "forseinkingsrent");});
test("forseinkingstilfelle -> forseinkingstilfell", function() {deepEqual( Stem("forseinkingstilfelle"), "forseinkingstilfell");});
test("forsendelsene -> forsend", function() {deepEqual( Stem("forsendelsene"), "forsend");});
test("forsendelser -> forsend", function() {deepEqual( Stem("forsendelser"), "forsend");});
test("forseres -> forser", function() {deepEqual( Stem("forseres"), "forser");});
test("forseringer -> forsering", function() {deepEqual( Stem("forseringer"), "forsering");});
test("forsert -> forser", function() {deepEqual( Stem("forsert"), "forser");});
test("forsete -> forset", function() {deepEqual( Stem("forsete"), "forset");});
test("forsettleg -> forsett", function() {deepEqual( Stem("forsettleg"), "forsett");});
test("forsettlege -> forsett", function() {deepEqual( Stem("forsettlege"), "forsett");});
test("forsikre -> forsikr", function() {deepEqual( Stem("forsikre"), "forsikr");});
test("forsikrede -> forsikr", function() {deepEqual( Stem("forsikrede"), "forsikr");});
test("forsikrer -> forsikr", function() {deepEqual( Stem("forsikrer"), "forsikr");});
test("forsikring -> forsikring", function() {deepEqual( Stem("forsikring"), "forsikring");});
test("forsikringa -> forsikring", function() {deepEqual( Stem("forsikringa"), "forsikring");});
test("forsikringane -> forsikring", function() {deepEqual( Stem("forsikringane"), "forsikring");});
test("forsikringar -> forsikring", function() {deepEqual( Stem("forsikringar"), "forsikring");});
test("forsikringen -> forsikring", function() {deepEqual( Stem("forsikringen"), "forsikring");});
test("forsikringene -> forsikring", function() {deepEqual( Stem("forsikringene"), "forsikring");});
test("forsikringens -> forsikring", function() {deepEqual( Stem("forsikringens"), "forsikring");});
test("forsikringer -> forsikring", function() {deepEqual( Stem("forsikringer"), "forsikring");});
test("forsikrings -> forsikring", function() {deepEqual( Stem("forsikrings"), "forsikring");});
test("forsikringsavtale -> forsikringsavtal", function() {deepEqual( Stem("forsikringsavtale"), "forsikringsavtal");});
test("forsikringsavtaleloven -> forsikringsavtal", function() {deepEqual( Stem("forsikringsavtaleloven"), "forsikringsavtal");});
test("forsikringsavtalen -> forsikringsavtal", function() {deepEqual( Stem("forsikringsavtalen"), "forsikringsavtal");});
test("forsikringsavtalene -> forsikringsavtal", function() {deepEqual( Stem("forsikringsavtalene"), "forsikringsavtal");});
test("forsikringsavtaler -> forsikringsavtal", function() {deepEqual( Stem("forsikringsavtaler"), "forsikringsavtal");});
test("forsikringsbasert -> forsikringsbaser", function() {deepEqual( Stem("forsikringsbasert"), "forsikringsbaser");});
test("forsikringsbaserte -> forsikringsbaser", function() {deepEqual( Stem("forsikringsbaserte"), "forsikringsbaser");});
test("forsikringsbeløpet -> forsikringsbeløp", function() {deepEqual( Stem("forsikringsbeløpet"), "forsikringsbeløp");});
test("forsikringsbransjen -> forsikringsbransj", function() {deepEqual( Stem("forsikringsbransjen"), "forsikringsbransj");});
test("forsikringselement -> forsikringselement", function() {deepEqual( Stem("forsikringselement"), "forsikringselement");});
test("forsikringselementer -> forsikringselement", function() {deepEqual( Stem("forsikringselementer"), "forsikringselement");});
test("forsikringsfond -> forsikringsfond", function() {deepEqual( Stem("forsikringsfond"), "forsikringsfond");});
test("forsikringsfondet -> forsikringsfond", function() {deepEqual( Stem("forsikringsfondet"), "forsikringsfond");});
test("forsikringsforbund -> forsikringsforbund", function() {deepEqual( Stem("forsikringsforbund"), "forsikringsforbund");});
test("forsikringsform -> forsikringsform", function() {deepEqual( Stem("forsikringsform"), "forsikringsform");});
test("forsikringsformer -> forsikringsform", function() {deepEqual( Stem("forsikringsformer"), "forsikringsform");});
test("forsikringsforpliktelser -> forsikringsforplikt", function() {deepEqual( Stem("forsikringsforpliktelser"), "forsikringsforplikt");});
test("forsikringsgaranti -> forsikringsgaranti", function() {deepEqual( Stem("forsikringsgaranti"), "forsikringsgaranti");});
test("forsikringsinstitusjoner -> forsikringsinstitusjon", function() {deepEqual( Stem("forsikringsinstitusjoner"), "forsikringsinstitusjon");});
test("forsikringskapital -> forsikringskapital", function() {deepEqual( Stem("forsikringskapital"), "forsikringskapital");});
test("forsikringsklasser -> forsikringsklass", function() {deepEqual( Stem("forsikringsklasser"), "forsikringsklass");});
test("forsikringskollektiv -> forsikringskollektiv", function() {deepEqual( Stem("forsikringskollektiv"), "forsikringskollektiv");});
test("forsikringskollektivet -> forsikringskollektiv", function() {deepEqual( Stem("forsikringskollektivet"), "forsikringskollektiv");});
test("forsikringskontrakt -> forsikringskontrakt", function() {deepEqual( Stem("forsikringskontrakt"), "forsikringskontrakt");});
test("forsikringskontraktene -> forsikringskontrakt", function() {deepEqual( Stem("forsikringskontraktene"), "forsikringskontrakt");});
test("forsikringskontrakter -> forsikringskontrakt", function() {deepEqual( Stem("forsikringskontrakter"), "forsikringskontrakt");});
test("forsikringsløsning -> forsikringsløsning", function() {deepEqual( Stem("forsikringsløsning"), "forsikringsløsning");});
test("forsikringsløsninger -> forsikringsløsning", function() {deepEqual( Stem("forsikringsløsninger"), "forsikringsløsning");});
test("forsikringsmekanismen -> forsikringsmekanism", function() {deepEqual( Stem("forsikringsmekanismen"), "forsikringsmekanism");});
test("forsikringsmeklarar -> forsikringsmeklar", function() {deepEqual( Stem("forsikringsmeklarar"), "forsikringsmeklar");});
test("forsikringsmessig -> forsikringsmess", function() {deepEqual( Stem("forsikringsmessig"), "forsikringsmess");});
test("forsikringsmessige -> forsikringsmess", function() {deepEqual( Stem("forsikringsmessige"), "forsikringsmess");});
test("forsikringsmuligheter -> forsikringsmu", function() {deepEqual( Stem("forsikringsmuligheter"), "forsikringsmu");});
test("forsikringsområdet -> forsikringsområd", function() {deepEqual( Stem("forsikringsområdet"), "forsikringsområd");});
test("forsikringsordning -> forsikringsordning", function() {deepEqual( Stem("forsikringsordning"), "forsikringsordning");});
test("forsikringsordninger -> forsikringsordning", function() {deepEqual( Stem("forsikringsordninger"), "forsikringsordning");});
test("forsikringsorganisert -> forsikringsorganiser", function() {deepEqual( Stem("forsikringsorganisert"), "forsikringsorganiser");});
test("forsikringspoliser -> forsikringspolis", function() {deepEqual( Stem("forsikringspoliser"), "forsikringspolis");});
test("forsikringspremiar -> forsikringspremi", function() {deepEqual( Stem("forsikringspremiar"), "forsikringspremi");});
test("forsikringsprodukt -> forsikringsprodukt", function() {deepEqual( Stem("forsikringsprodukt"), "forsikringsprodukt");});
test("forsikringsprodukter -> forsikringsprodukt", function() {deepEqual( Stem("forsikringsprodukter"), "forsikringsprodukt");});
test("forsikringsrisiko -> forsikringsrisiko", function() {deepEqual( Stem("forsikringsrisiko"), "forsikringsrisiko");});
test("forsikringsselskap -> forsikringsselskap", function() {deepEqual( Stem("forsikringsselskap"), "forsikringsselskap");});
test("forsikringsselskapene -> forsikringsselskap", function() {deepEqual( Stem("forsikringsselskapene"), "forsikringsselskap");});
test("forsikringsselskaper -> forsikringsselskap", function() {deepEqual( Stem("forsikringsselskaper"), "forsikringsselskap");});
test("forsikringsselskapers -> forsikringsselskap", function() {deepEqual( Stem("forsikringsselskapers"), "forsikringsselskap");});
test("forsikringsselskapet -> forsikringsselskap", function() {deepEqual( Stem("forsikringsselskapet"), "forsikringsselskap");});
test("forsikringsspørsmål -> forsikringsspørsmål", function() {deepEqual( Stem("forsikringsspørsmål"), "forsikringsspørsmål");});
test("forsikringssum -> forsikringssum", function() {deepEqual( Stem("forsikringssum"), "forsikringssum");});
test("forsikringstaker -> forsikringstak", function() {deepEqual( Stem("forsikringstaker"), "forsikringstak");});
test("forsikringstakeren -> forsikringstaker", function() {deepEqual( Stem("forsikringstakeren"), "forsikringstaker");});
test("forsikringstakerne -> forsikringstakern", function() {deepEqual( Stem("forsikringstakerne"), "forsikringstakern");});
test("forsikringsteknisk -> forsikringsteknisk", function() {deepEqual( Stem("forsikringsteknisk"), "forsikringsteknisk");});
test("forsikringstekniske -> forsikringsteknisk", function() {deepEqual( Stem("forsikringstekniske"), "forsikringsteknisk");});
test("forsikringstid -> forsikringstid", function() {deepEqual( Stem("forsikringstid"), "forsikringstid");});
test("forsikringstiden -> forsikringstid", function() {deepEqual( Stem("forsikringstiden"), "forsikringstid");});
test("forsikringstilfellet -> forsikringstilfell", function() {deepEqual( Stem("forsikringstilfellet"), "forsikringstilfell");});
test("forsikringsvilkårene -> forsikringsvilkår", function() {deepEqual( Stem("forsikringsvilkårene"), "forsikringsvilkår");});
test("forsikringsvirksomhet -> forsikringsvirksom", function() {deepEqual( Stem("forsikringsvirksomhet"), "forsikringsvirksom");});
test("forsikringsvirksomhetsloven -> forsikringsvirksom", function() {deepEqual( Stem("forsikringsvirksomhetsloven"), "forsikringsvirksom");});
test("forsikringsvirksomhetslovens -> forsikringsvirksom", function() {deepEqual( Stem("forsikringsvirksomhetslovens"), "forsikringsvirksom");});
test("forsikringsytelsen -> forsikringsyt", function() {deepEqual( Stem("forsikringsytelsen"), "forsikringsyt");});
test("forsikringsytelsene -> forsikringsyt", function() {deepEqual( Stem("forsikringsytelsene"), "forsikringsyt");});
test("forsiktig -> forsikt", function() {deepEqual( Stem("forsiktig"), "forsikt");});
test("forsiktige -> forsikt", function() {deepEqual( Stem("forsiktige"), "forsikt");});
test("forsiktighet -> forsikt", function() {deepEqual( Stem("forsiktighet"), "forsikt");});
test("forsiktighetshensyn -> forsiktighetshensyn", function() {deepEqual( Stem("forsiktighetshensyn"), "forsiktighetshensyn");});
test("forsinkelser -> forsink", function() {deepEqual( Stem("forsinkelser"), "forsink");});
test("forsinket -> forsink", function() {deepEqual( Stem("forsinket"), "forsink");});
test("forsker -> forsk", function() {deepEqual( Stem("forsker"), "forsk");});
test("forskjell -> forskjell", function() {deepEqual( Stem("forskjell"), "forskjell");});
test("forskjellen -> forskjell", function() {deepEqual( Stem("forskjellen"), "forskjell");});
test("forskjellene -> forskjell", function() {deepEqual( Stem("forskjellene"), "forskjell");});
test("forskjeller -> forskjell", function() {deepEqual( Stem("forskjeller"), "forskjell");});
test("forskjellig -> forskjel", function() {deepEqual( Stem("forskjellig"), "forskjel");});
test("forskjellige -> forskjel", function() {deepEqual( Stem("forskjellige"), "forskjel");});
test("forskjellsbehandle -> forskjellsbehandl", function() {deepEqual( Stem("forskjellsbehandle"), "forskjellsbehandl");});
test("forskjellsbehandling -> forskjellsbehandling", function() {deepEqual( Stem("forskjellsbehandling"), "forskjellsbehandling");});
test("forskning -> forskning", function() {deepEqual( Stem("forskning"), "forskning");});
test("forskningsinstitutter -> forskningsinstitutt", function() {deepEqual( Stem("forskningsinstitutter"), "forskningsinstitutt");});
test("forskot -> forskot", function() {deepEqual( Stem("forskot"), "forskot");});
test("forskota -> forskot", function() {deepEqual( Stem("forskota"), "forskot");});
test("forskotet -> forskot", function() {deepEqual( Stem("forskotet"), "forskot");});
test("forskotsbetaling -> forskotsbetaling", function() {deepEqual( Stem("forskotsbetaling"), "forskotsbetaling");});
test("forskrekket -> forskrekk", function() {deepEqual( Stem("forskrekket"), "forskrekk");});
test("forskrift -> forskrift", function() {deepEqual( Stem("forskrift"), "forskrift");});
test("forskrifta -> forskrift", function() {deepEqual( Stem("forskrifta"), "forskrift");});
test("forskriften -> forskrift", function() {deepEqual( Stem("forskriften"), "forskrift");});
test("forskriftene -> forskrift", function() {deepEqual( Stem("forskriftene"), "forskrift");});
test("forskriftens -> forskrift", function() {deepEqual( Stem("forskriftens"), "forskrift");});
test("forskrifter -> forskrift", function() {deepEqual( Stem("forskrifter"), "forskrift");});
test("forskrifts -> forskrift", function() {deepEqual( Stem("forskrifts"), "forskrift");});
test("forskriftshjemmel -> forskriftshjemmel", function() {deepEqual( Stem("forskriftshjemmel"), "forskriftshjemmel");});
test("forskriftsverket -> forskriftsverk", function() {deepEqual( Stem("forskriftsverket"), "forskriftsverk");});
test("forskuddsbetaling -> forskuddsbetaling", function() {deepEqual( Stem("forskuddsbetaling"), "forskuddsbetaling");});
test("forskuddsbetalt -> forskuddsbetalt", function() {deepEqual( Stem("forskuddsbetalt"), "forskuddsbetalt");});
test("forskuddsfinansierte -> forskuddsfinansier", function() {deepEqual( Stem("forskuddsfinansierte"), "forskuddsfinansier");});
test("forskuddsinnskudd -> forskuddsinnskudd", function() {deepEqual( Stem("forskuddsinnskudd"), "forskuddsinnskudd");});
test("forskuddspremie -> forskuddspremi", function() {deepEqual( Stem("forskuddspremie"), "forskuddspremi");});
test("forskuddsvis -> forskuddsvis", function() {deepEqual( Stem("forskuddsvis"), "forskuddsvis");});
test("forskyvning -> forskyvning", function() {deepEqual( Stem("forskyvning"), "forskyvning");});
test("forslag -> forslag", function() {deepEqual( Stem("forslag"), "forslag");});
test("forslagene -> forslag", function() {deepEqual( Stem("forslagene"), "forslag");});
test("forslaget -> forslag", function() {deepEqual( Stem("forslaget"), "forslag");});
test("forslagets -> forslag", function() {deepEqual( Stem("forslagets"), "forslag");});
test("forslitte -> forslitt", function() {deepEqual( Stem("forslitte"), "forslitt");});
test("forslår -> forslår", function() {deepEqual( Stem("forslår"), "forslår");});
test("forsprang -> forsprang", function() {deepEqual( Stem("forsprang"), "forsprang");});
test("forspranget -> forsprang", function() {deepEqual( Stem("forspranget"), "forsprang");});
test("forstand -> forstand", function() {deepEqual( Stem("forstand"), "forstand");});
test("forstandardskapet -> forstandardskap", function() {deepEqual( Stem("forstandardskapet"), "forstandardskap");});
test("forstandarskapet -> forstandarskap", function() {deepEqual( Stem("forstandarskapet"), "forstandarskap");});
test("forstanden -> forstand", function() {deepEqual( Stem("forstanden"), "forstand");});
test("forstarkt -> forstarkt", function() {deepEqual( Stem("forstarkt"), "forstarkt");});
test("forsterke -> forsterk", function() {deepEqual( Stem("forsterke"), "forsterk");});
test("forsterker -> forsterk", function() {deepEqual( Stem("forsterker"), "forsterk");});
test("forsterkes -> forsterk", function() {deepEqual( Stem("forsterkes"), "forsterk");});
test("forsterket -> forsterk", function() {deepEqual( Stem("forsterket"), "forsterk");});
test("forsto -> forsto", function() {deepEqual( Stem("forsto"), "forsto");});
test("forstod -> forstod", function() {deepEqual( Stem("forstod"), "forstod");});
test("forstoffer -> forstoff", function() {deepEqual( Stem("forstoffer"), "forstoff");});
test("forstsetter -> forstsett", function() {deepEqual( Stem("forstsetter"), "forstsett");});
test("forstyrre -> forstyrr", function() {deepEqual( Stem("forstyrre"), "forstyrr");});
test("forstyrrelser -> forstyrr", function() {deepEqual( Stem("forstyrrelser"), "forstyrr");});
test("forstå -> forstå", function() {deepEqual( Stem("forstå"), "forstå");});
test("forståelig -> forstå", function() {deepEqual( Stem("forståelig"), "forstå");});
test("forståelse -> forstå", function() {deepEqual( Stem("forståelse"), "forstå");});
test("forståelsen -> forstå", function() {deepEqual( Stem("forståelsen"), "forstå");});
test("forståelsesfull -> forståelsesfull", function() {deepEqual( Stem("forståelsesfull"), "forståelsesfull");});
test("forståing -> forståing", function() {deepEqual( Stem("forståing"), "forståing");});
test("forståinga -> forståing", function() {deepEqual( Stem("forståinga"), "forståing");});
test("forstår -> forstår", function() {deepEqual( Stem("forstår"), "forstår");});
test("forstås -> forstås", function() {deepEqual( Stem("forstås"), "forstås");});
test("forstått -> forstått", function() {deepEqual( Stem("forstått"), "forstått");});
test("forstørrelsesglass -> forstørrelsesglass", function() {deepEqual( Stem("forstørrelsesglass"), "forstørrelsesglass");});
test("forsvant -> forsvant", function() {deepEqual( Stem("forsvant"), "forsvant");});
test("forsvarar -> forsvar", function() {deepEqual( Stem("forsvarar"), "forsvar");});
test("forsvarast -> forsvar", function() {deepEqual( Stem("forsvarast"), "forsvar");});
test("forsvare -> forsvar", function() {deepEqual( Stem("forsvare"), "forsvar");});
test("forsvarer -> forsvar", function() {deepEqual( Stem("forsvarer"), "forsvar");});
test("forsvares -> forsvar", function() {deepEqual( Stem("forsvares"), "forsvar");});
test("forsvaret -> forsvar", function() {deepEqual( Stem("forsvaret"), "forsvar");});
test("forsvarleg -> forsvar", function() {deepEqual( Stem("forsvarleg"), "forsvar");});
test("forsvarlege -> forsvar", function() {deepEqual( Stem("forsvarlege"), "forsvar");});
test("forsvarlig -> forsvar", function() {deepEqual( Stem("forsvarlig"), "forsvar");});
test("forsvarsmessig -> forsvarsmess", function() {deepEqual( Stem("forsvarsmessig"), "forsvarsmess");});
test("forsvart -> forsvart", function() {deepEqual( Stem("forsvart"), "forsvart");});
test("forsvinne -> forsvinn", function() {deepEqual( Stem("forsvinne"), "forsvinn");});
test("forsvinner -> forsvinn", function() {deepEqual( Stem("forsvinner"), "forsvinn");});
test("forsvunnet -> forsvunn", function() {deepEqual( Stem("forsvunnet"), "forsvunn");});
test("forsyningsberedskap -> forsyningsberedskap", function() {deepEqual( Stem("forsyningsberedskap"), "forsyningsberedskap");});
test("forsyningsberedskapen -> forsyningsberedskap", function() {deepEqual( Stem("forsyningsberedskapen"), "forsyningsberedskap");});
test("forsøk -> forsøk", function() {deepEqual( Stem("forsøk"), "forsøk");});
test("forsøke -> forsøk", function() {deepEqual( Stem("forsøke"), "forsøk");});
test("forsøker -> forsøk", function() {deepEqual( Stem("forsøker"), "forsøk");});
test("forsøksordningar -> forsøksordning", function() {deepEqual( Stem("forsøksordningar"), "forsøksordning");});
test("forsøkt -> forsøkt", function() {deepEqual( Stem("forsøkt"), "forsøkt");});
test("forsøme -> forsøm", function() {deepEqual( Stem("forsøme"), "forsøm");});
test("forsømer -> forsøm", function() {deepEqual( Stem("forsømer"), "forsøm");});
test("forsøming -> forsøming", function() {deepEqual( Stem("forsøming"), "forsøming");});
test("forsømt -> forsømt", function() {deepEqual( Stem("forsømt"), "forsømt");});
test("forsørge -> forsørg", function() {deepEqual( Stem("forsørge"), "forsørg");});
test("forsørgelsesbyrdene -> forsørgelsesbyrd", function() {deepEqual( Stem("forsørgelsesbyrdene"), "forsørgelsesbyrd");});
test("forsørget -> forsørg", function() {deepEqual( Stem("forsørget"), "forsørg");});
test("fort -> fort", function() {deepEqual( Stem("fort"), "fort");});
test("fortalt -> fortalt", function() {deepEqual( Stem("fortalt"), "fortalt");});
test("fortalte -> fortalt", function() {deepEqual( Stem("fortalte"), "fortalt");});
test("fortell -> fortell", function() {deepEqual( Stem("fortell"), "fortell");});
test("fortelle -> fortell", function() {deepEqual( Stem("fortelle"), "fortell");});
test("forteller -> fortell", function() {deepEqual( Stem("forteller"), "fortell");});
test("forteneste -> fortenest", function() {deepEqual( Stem("forteneste"), "fortenest");});
test("fortere -> forter", function() {deepEqual( Stem("fortere"), "forter");});
test("fortid -> fortid", function() {deepEqual( Stem("fortid"), "fortid");});
test("fortjener -> fortjen", function() {deepEqual( Stem("fortjener"), "fortjen");});
test("fortjent -> fortjent", function() {deepEqual( Stem("fortjent"), "fortjent");});
test("fortolkinga -> fortolking", function() {deepEqual( Stem("fortolkinga"), "fortolking");});
test("fortolkning -> fortolkning", function() {deepEqual( Stem("fortolkning"), "fortolkning");});
test("fortolles -> fortoll", function() {deepEqual( Stem("fortolles"), "fortoll");});
test("fortollet -> fortoll", function() {deepEqual( Stem("fortollet"), "fortoll");});
test("fortolling -> fortolling", function() {deepEqual( Stem("fortolling"), "fortolling");});
test("fortollingssted -> fortollingssted", function() {deepEqual( Stem("fortollingssted"), "fortollingssted");});
test("fortrengde -> fortrengd", function() {deepEqual( Stem("fortrengde"), "fortrengd");});
test("fortrenger -> fortreng", function() {deepEqual( Stem("fortrenger"), "fortreng");});
test("fortrengje -> fortrengj", function() {deepEqual( Stem("fortrengje"), "fortrengj");});
test("fortrengning -> fortrengning", function() {deepEqual( Stem("fortrengning"), "fortrengning");});
test("fortrinn -> fortrinn", function() {deepEqual( Stem("fortrinn"), "fortrinn");});
test("fortrinnsvis -> fortrinnsvis", function() {deepEqual( Stem("fortrinnsvis"), "fortrinnsvis");});
test("fortrolige -> fortro", function() {deepEqual( Stem("fortrolige"), "fortro");});
test("fortrolighet -> fortro", function() {deepEqual( Stem("fortrolighet"), "fortro");});
test("fortsatt -> fortsatt", function() {deepEqual( Stem("fortsatt"), "fortsatt");});
test("fortsatte -> fortsatt", function() {deepEqual( Stem("fortsatte"), "fortsatt");});
test("fortsette -> fortsett", function() {deepEqual( Stem("fortsette"), "fortsett");});
test("fortsettelse -> fortsett", function() {deepEqual( Stem("fortsettelse"), "fortsett");});
test("fortsettelsesforsikring -> fortsettelsesforsikring", function() {deepEqual( Stem("fortsettelsesforsikring"), "fortsettelsesforsikring");});
test("fortsettelsesforsikringen -> fortsettelsesforsikring", function() {deepEqual( Stem("fortsettelsesforsikringen"), "fortsettelsesforsikring");});
test("fortsettelsesforsikringer -> fortsettelsesforsikring", function() {deepEqual( Stem("fortsettelsesforsikringer"), "fortsettelsesforsikring");});
test("fortsettelsessikring -> fortsettelsessikring", function() {deepEqual( Stem("fortsettelsessikring"), "fortsettelsessikring");});
test("fortsetter -> fortsett", function() {deepEqual( Stem("fortsetter"), "fortsett");});
test("fortumlet -> fortuml", function() {deepEqual( Stem("fortumlet"), "fortuml");});
test("fortvilelse -> fortvil", function() {deepEqual( Stem("fortvilelse"), "fortvil");});
test("fortvilet -> fortvil", function() {deepEqual( Stem("fortvilet"), "fortvil");});
test("fortærende -> fortær", function() {deepEqual( Stem("fortærende"), "fortær");});
test("fortøyningene -> fortøyning", function() {deepEqual( Stem("fortøyningene"), "fortøyning");});
test("fortøyninger -> fortøyning", function() {deepEqual( Stem("fortøyninger"), "fortøyning");});
test("forum -> forum", function() {deepEqual( Stem("forum"), "forum");});
test("forunderlig -> forunder", function() {deepEqual( Stem("forunderlig"), "forunder");});
test("forunderlige -> forunder", function() {deepEqual( Stem("forunderlige"), "forunder");});
test("forundret -> forundr", function() {deepEqual( Stem("forundret"), "forundr");});
test("forundring -> forundring", function() {deepEqual( Stem("forundring"), "forundring");});
test("forureining -> forureining", function() {deepEqual( Stem("forureining"), "forureining");});
test("forurensing -> forurensing", function() {deepEqual( Stem("forurensing"), "forurensing");});
test("forurensingsmål -> forurensingsmål", function() {deepEqual( Stem("forurensingsmål"), "forurensingsmål");});
test("forurensning -> forurensning", function() {deepEqual( Stem("forurensning"), "forurensning");});
test("forut -> forut", function() {deepEqual( Stem("forut"), "forut");});
test("forutberegnelighet -> forutberegn", function() {deepEqual( Stem("forutberegnelighet"), "forutberegn");});
test("foruten -> forut", function() {deepEqual( Stem("foruten"), "forut");});
test("forutgående -> forutgå", function() {deepEqual( Stem("forutgående"), "forutgå");});
test("forutsatt -> forutsatt", function() {deepEqual( Stem("forutsatt"), "forutsatt");});
test("forutsatte -> forutsatt", function() {deepEqual( Stem("forutsatte"), "forutsatt");});
test("forutseielege -> forutsei", function() {deepEqual( Stem("forutseielege"), "forutsei");});
test("forutses -> foruts", function() {deepEqual( Stem("forutses"), "foruts");});
test("forutsetning -> forutsetning", function() {deepEqual( Stem("forutsetning"), "forutsetning");});
test("forutsetningen -> forutsetning", function() {deepEqual( Stem("forutsetningen"), "forutsetning");});
test("forutsetningene -> forutsetning", function() {deepEqual( Stem("forutsetningene"), "forutsetning");});
test("forutsetninger -> forutsetning", function() {deepEqual( Stem("forutsetninger"), "forutsetning");});
test("forutsetningsvis -> forutsetningsvis", function() {deepEqual( Stem("forutsetningsvis"), "forutsetningsvis");});
test("forutsette -> forutsett", function() {deepEqual( Stem("forutsette"), "forutsett");});
test("forutsetter -> forutsett", function() {deepEqual( Stem("forutsetter"), "forutsett");});
test("forutsettes -> forutsett", function() {deepEqual( Stem("forutsettes"), "forutsett");});
test("forutsies -> forutsi", function() {deepEqual( Stem("forutsies"), "forutsi");});
test("forutsigbar -> forutsigb", function() {deepEqual( Stem("forutsigbar"), "forutsigb");});
test("forutsigbarhet -> forutsigbar", function() {deepEqual( Stem("forutsigbarhet"), "forutsigbar");});
test("forvalta -> forvalt", function() {deepEqual( Stem("forvalta"), "forvalt");});
test("forvaltar -> forvalt", function() {deepEqual( Stem("forvaltar"), "forvalt");});
test("forvaltarar -> forvaltar", function() {deepEqual( Stem("forvaltarar"), "forvaltar");});
test("forvaltaren -> forvaltar", function() {deepEqual( Stem("forvaltaren"), "forvaltar");});
test("forvaltarrolle -> forvaltarroll", function() {deepEqual( Stem("forvaltarrolle"), "forvaltarroll");});
test("forvaltast -> forvalt", function() {deepEqual( Stem("forvaltast"), "forvalt");});
test("forvalte -> forvalt", function() {deepEqual( Stem("forvalte"), "forvalt");});
test("forvalter -> forvalt", function() {deepEqual( Stem("forvalter"), "forvalt");});
test("forvalterens -> forvalter", function() {deepEqual( Stem("forvalterens"), "forvalter");});
test("forvaltes -> forvalt", function() {deepEqual( Stem("forvaltes"), "forvalt");});
test("forvaltet -> forvalt", function() {deepEqual( Stem("forvaltet"), "forvalt");});
test("forvaltinga -> forvalting", function() {deepEqual( Stem("forvaltinga"), "forvalting");});
test("forvaltning -> forvaltning", function() {deepEqual( Stem("forvaltning"), "forvaltning");});
test("forvaltninga -> forvaltning", function() {deepEqual( Stem("forvaltninga"), "forvaltning");});
test("forvaltningen -> forvaltning", function() {deepEqual( Stem("forvaltningen"), "forvaltning");});
test("forvaltningsalternativene -> forvaltningsalternativ", function() {deepEqual( Stem("forvaltningsalternativene"), "forvaltningsalternativ");});
test("forvaltningsavtalar -> forvaltningsavtal", function() {deepEqual( Stem("forvaltningsavtalar"), "forvaltningsavtal");});
test("forvaltningsenhet -> forvaltningsen", function() {deepEqual( Stem("forvaltningsenhet"), "forvaltningsen");});
test("forvaltningsforetak -> forvaltningsforetak", function() {deepEqual( Stem("forvaltningsforetak"), "forvaltningsforetak");});
test("forvaltningsinstitusjon -> forvaltningsinstitusjon", function() {deepEqual( Stem("forvaltningsinstitusjon"), "forvaltningsinstitusjon");});
test("forvaltningsinstitusjonen -> forvaltningsinstitusjon", function() {deepEqual( Stem("forvaltningsinstitusjonen"), "forvaltningsinstitusjon");});
test("forvaltningsinstitusjonens -> forvaltningsinstitusjon", function() {deepEqual( Stem("forvaltningsinstitusjonens"), "forvaltningsinstitusjon");});
test("forvaltningskapital -> forvaltningskapital", function() {deepEqual( Stem("forvaltningskapital"), "forvaltningskapital");});
test("forvaltningskontrakt -> forvaltningskontrakt", function() {deepEqual( Stem("forvaltningskontrakt"), "forvaltningskontrakt");});
test("forvaltningskostnader -> forvaltningskostnad", function() {deepEqual( Stem("forvaltningskostnader"), "forvaltningskostnad");});
test("forvaltningslova -> forvaltning", function() {deepEqual( Stem("forvaltningslova"), "forvaltning");});
test("forvaltningsloven -> forvaltning", function() {deepEqual( Stem("forvaltningsloven"), "forvaltning");});
test("forvaltningsmessige -> forvaltningsmess", function() {deepEqual( Stem("forvaltningsmessige"), "forvaltningsmess");});
test("forvaltningsoppdraget -> forvaltningsoppdrag", function() {deepEqual( Stem("forvaltningsoppdraget"), "forvaltningsoppdrag");});
test("forvaltningsoppgåve -> forvaltningsoppgåv", function() {deepEqual( Stem("forvaltningsoppgåve"), "forvaltningsoppgåv");});
test("forvaltningsoppgåvene -> forvaltningsoppgåv", function() {deepEqual( Stem("forvaltningsoppgåvene"), "forvaltningsoppgåv");});
test("forvaltningsoppgåver -> forvaltningsoppgåv", function() {deepEqual( Stem("forvaltningsoppgåver"), "forvaltningsoppgåv");});
test("forvaltningsorgan -> forvaltningsorgan", function() {deepEqual( Stem("forvaltningsorgan"), "forvaltningsorgan");});
test("forvaltningspraksis -> forvaltningspraksis", function() {deepEqual( Stem("forvaltningspraksis"), "forvaltningspraksis");});
test("forvaltningsprodukter -> forvaltningsprodukt", function() {deepEqual( Stem("forvaltningsprodukter"), "forvaltningsprodukt");});
test("forvaltningsrettane -> forvaltningsrett", function() {deepEqual( Stem("forvaltningsrettane"), "forvaltningsrett");});
test("forvaltningsrettar -> forvaltningsrett", function() {deepEqual( Stem("forvaltningsrettar"), "forvaltningsrett");});
test("forvaltningsselskap -> forvaltningsselskap", function() {deepEqual( Stem("forvaltningsselskap"), "forvaltningsselskap");});
test("forvaltningsselskaper -> forvaltningsselskap", function() {deepEqual( Stem("forvaltningsselskaper"), "forvaltningsselskap");});
test("forvaltningsselskapet -> forvaltningsselskap", function() {deepEqual( Stem("forvaltningsselskapet"), "forvaltningsselskap");});
test("forvaltningsspørsmålet -> forvaltningsspørsmål", function() {deepEqual( Stem("forvaltningsspørsmålet"), "forvaltningsspørsmål");});
test("forvaltningstenestene -> forvaltningstenest", function() {deepEqual( Stem("forvaltningstenestene"), "forvaltningstenest");});
test("forvaltningstenester -> forvaltningstenest", function() {deepEqual( Stem("forvaltningstenester"), "forvaltningstenest");});
test("forvaltningsverksemd -> forvaltningsverksemd", function() {deepEqual( Stem("forvaltningsverksemd"), "forvaltningsverksemd");});
test("forvaltningsverksemda -> forvaltningsverksemd", function() {deepEqual( Stem("forvaltningsverksemda"), "forvaltningsverksemd");});
test("forvandler -> forvandl", function() {deepEqual( Stem("forvandler"), "forvandl");});
test("forvandles -> forvandl", function() {deepEqual( Stem("forvandles"), "forvandl");});
test("forvandlet -> forvandl", function() {deepEqual( Stem("forvandlet"), "forvandl");});
test("forvandling -> forvandling", function() {deepEqual( Stem("forvandling"), "forvandling");});
test("forvente -> forvent", function() {deepEqual( Stem("forvente"), "forvent");});
test("forventede -> forvent", function() {deepEqual( Stem("forventede"), "forvent");});
test("forventer -> forvent", function() {deepEqual( Stem("forventer"), "forvent");});
test("forventes -> forvent", function() {deepEqual( Stem("forventes"), "forvent");});
test("forventet -> forvent", function() {deepEqual( Stem("forventet"), "forvent");});
test("forventninger -> forventning", function() {deepEqual( Stem("forventninger"), "forventning");});
test("forvirret -> forvirr", function() {deepEqual( Stem("forvirret"), "forvirr");});
test("forvirring -> forvirring", function() {deepEqual( Stem("forvirring"), "forvirring");});
test("forvirringens -> forvirring", function() {deepEqual( Stem("forvirringens"), "forvirring");});
test("forårsaket -> forårsak", function() {deepEqual( Stem("forårsaket"), "forårsak");});
test("forøvrig -> forøvr", function() {deepEqual( Stem("forøvrig"), "forøvr");});
test("foss -> foss", function() {deepEqual( Stem("foss"), "foss");});
test("fossefall -> fossefall", function() {deepEqual( Stem("fossefall"), "fossefall");});
test("fossen -> foss", function() {deepEqual( Stem("fossen"), "foss");});
test("fosser -> foss", function() {deepEqual( Stem("fosser"), "foss");});
test("fosset -> foss", function() {deepEqual( Stem("fosset"), "foss");});
test("fosterbarn -> fosterbarn", function() {deepEqual( Stem("fosterbarn"), "fosterbarn");});
test("fosterborn -> fosterborn", function() {deepEqual( Stem("fosterborn"), "fosterborn");});
test("fosterbror -> fosterbror", function() {deepEqual( Stem("fosterbror"), "fosterbror");});
test("fosterbroren -> fosterbror", function() {deepEqual( Stem("fosterbroren"), "fosterbror");});
test("fosterfar -> fosterf", function() {deepEqual( Stem("fosterfar"), "fosterf");});
test("fostermoren -> fostermor", function() {deepEqual( Stem("fostermoren"), "fostermor");});
test("fostersønn -> fostersønn", function() {deepEqual( Stem("fostersønn"), "fostersønn");});
test("fostre -> fostr", function() {deepEqual( Stem("fostre"), "fostr");});
test("fostret -> fostr", function() {deepEqual( Stem("fostret"), "fostr");});
test("fot -> fot", function() {deepEqual( Stem("fot"), "fot");});
test("foten -> fot", function() {deepEqual( Stem("foten"), "fot");});
test("fotnote -> fotnot", function() {deepEqual( Stem("fotnote"), "fotnot");});
test("fotografere -> fotografer", function() {deepEqual( Stem("fotografere"), "fotografer");});
test("fots -> fot", function() {deepEqual( Stem("fots"), "fot");});
test("fotside -> fotsid", function() {deepEqual( Stem("fotside"), "fotsid");});
test("fottøyet -> fottøy", function() {deepEqual( Stem("fottøyet"), "fottøy");});
test("fra -> fra", function() {deepEqual( Stem("fra"), "fra");});
test("fradrag -> fradrag", function() {deepEqual( Stem("fradrag"), "fradrag");});
test("fradraget -> fradrag", function() {deepEqual( Stem("fradraget"), "fradrag");});
test("fradragsbegrensning -> fradragsbegrensning", function() {deepEqual( Stem("fradragsbegrensning"), "fradragsbegrensning");});
test("fradragsberettigede -> fradragsberett", function() {deepEqual( Stem("fradragsberettigede"), "fradragsberett");});
test("fradragsberettiget -> fradragsberett", function() {deepEqual( Stem("fradragsberettiget"), "fradragsberett");});
test("fradragshjemmel -> fradragshjemmel", function() {deepEqual( Stem("fradragshjemmel"), "fradragshjemmel");});
test("fradragsramme -> fradragsramm", function() {deepEqual( Stem("fradragsramme"), "fradragsramm");});
test("fradragsrammen -> fradragsramm", function() {deepEqual( Stem("fradragsrammen"), "fradragsramm");});
test("fradragsrammer -> fradragsramm", function() {deepEqual( Stem("fradragsrammer"), "fradragsramm");});
test("fradragsreglene -> fradragsregl", function() {deepEqual( Stem("fradragsreglene"), "fradragsregl");});
test("fradragsregler -> fradragsregl", function() {deepEqual( Stem("fradragsregler"), "fradragsregl");});
test("fradragsrett -> fradragsrett", function() {deepEqual( Stem("fradragsrett"), "fradragsrett");});
test("fradragsretten -> fradragsrett", function() {deepEqual( Stem("fradragsretten"), "fradragsrett");});
test("fraflyttede -> fraflytt", function() {deepEqual( Stem("fraflyttede"), "fraflytt");});
test("fragmenter -> fragment", function() {deepEqual( Stem("fragmenter"), "fragment");});
test("fragmentert -> fragmenter", function() {deepEqual( Stem("fragmentert"), "fragmenter");});
test("frakt -> frakt", function() {deepEqual( Stem("frakt"), "frakt");});
test("fraktdistansen -> fraktdistans", function() {deepEqual( Stem("fraktdistansen"), "fraktdistans");});
test("frakte -> frakt", function() {deepEqual( Stem("frakte"), "frakt");});
test("frakter -> frakt", function() {deepEqual( Stem("frakter"), "frakt");});
test("fraktes -> frakt", function() {deepEqual( Stem("fraktes"), "frakt");});
test("fraktet -> frakt", function() {deepEqual( Stem("fraktet"), "frakt");});
test("fraktkostnadene -> fraktkostnad", function() {deepEqual( Stem("fraktkostnadene"), "fraktkostnad");});
test("fraktkostnader -> fraktkostnad", function() {deepEqual( Stem("fraktkostnader"), "fraktkostnad");});
test("fraktområdet -> fraktområd", function() {deepEqual( Stem("fraktområdet"), "fraktområd");});
test("fraktraten -> fraktrat", function() {deepEqual( Stem("fraktraten"), "fraktrat");});
test("fraktratene -> fraktrat", function() {deepEqual( Stem("fraktratene"), "fraktrat");});
test("fraktrater -> fraktrat", function() {deepEqual( Stem("fraktrater"), "fraktrat");});
test("fraktruter -> fraktrut", function() {deepEqual( Stem("fraktruter"), "fraktrut");});
test("fraktsammenheng -> fraktsammenheng", function() {deepEqual( Stem("fraktsammenheng"), "fraktsammenheng");});
test("fraktskip -> fraktskip", function() {deepEqual( Stem("fraktskip"), "fraktskip");});
test("fram -> fram", function() {deepEqual( Stem("fram"), "fram");});
test("framfor -> framfor", function() {deepEqual( Stem("framfor"), "framfor");});
test("framføring -> framføring", function() {deepEqual( Stem("framføring"), "framføring");});
test("framføringstid -> framføringstid", function() {deepEqual( Stem("framføringstid"), "framføringstid");});
test("framgangsmåtar -> framgangsmåt", function() {deepEqual( Stem("framgangsmåtar"), "framgangsmåt");});
test("framgangsmåte -> framgangsmåt", function() {deepEqual( Stem("framgangsmåte"), "framgangsmåt");});
test("framgangsmåten -> framgangsmåt", function() {deepEqual( Stem("framgangsmåten"), "framgangsmåt");});
test("framgangsmåter -> framgangsmåt", function() {deepEqual( Stem("framgangsmåter"), "framgangsmåt");});
test("framgå -> framgå", function() {deepEqual( Stem("framgå"), "framgå");});
test("framgår -> framgår", function() {deepEqual( Stem("framgår"), "framgår");});
test("framheva -> framhev", function() {deepEqual( Stem("framheva"), "framhev");});
test("framheve -> framhev", function() {deepEqual( Stem("framheve"), "framhev");});
test("framhever -> framhev", function() {deepEqual( Stem("framhever"), "framhev");});
test("framhevet -> framhev", function() {deepEqual( Stem("framhevet"), "framhev");});
test("framheving -> framheving", function() {deepEqual( Stem("framheving"), "framheving");});
test("framja -> framj", function() {deepEqual( Stem("framja"), "framj");});
test("framkomme -> framkomm", function() {deepEqual( Stem("framkomme"), "framkomm");});
test("framkommelighet -> framkomm", function() {deepEqual( Stem("framkommelighet"), "framkomm");});
test("framkommeligheten -> framkomm", function() {deepEqual( Stem("framkommeligheten"), "framkomm");});
test("framkommer -> framkomm", function() {deepEqual( Stem("framkommer"), "framkomm");});
test("framlegg -> framlegg", function() {deepEqual( Stem("framlegg"), "framlegg");});
test("framlegga -> framlegg", function() {deepEqual( Stem("framlegga"), "framlegg");});
test("framlegge -> framlegg", function() {deepEqual( Stem("framlegge"), "framlegg");});
test("framlegget -> framlegg", function() {deepEqual( Stem("framlegget"), "framlegg");});
test("framleggs -> framlegg", function() {deepEqual( Stem("framleggs"), "framlegg");});
test("framleigar -> framl", function() {deepEqual( Stem("framleigar"), "framl");});
test("framleigarens -> framleigar", function() {deepEqual( Stem("framleigarens"), "framleigar");});
test("framleige -> framl", function() {deepEqual( Stem("framleige"), "framl");});
test("framleigerettar -> framleigerett", function() {deepEqual( Stem("framleigerettar"), "framleigerett");});
test("framleigt -> framleigt", function() {deepEqual( Stem("framleigt"), "framleigt");});
test("framleis -> framleis", function() {deepEqual( Stem("framleis"), "framleis");});
test("framme -> framm", function() {deepEqual( Stem("framme"), "framm");});
test("frammøte -> frammøt", function() {deepEqual( Stem("frammøte"), "frammøt");});
test("frammøtet -> frammøt", function() {deepEqual( Stem("frammøtet"), "frammøt");});
test("frammøtte -> frammøtt", function() {deepEqual( Stem("frammøtte"), "frammøtt");});
test("framom -> framom", function() {deepEqual( Stem("framom"), "framom");});
test("framover -> framov", function() {deepEqual( Stem("framover"), "framov");});
test("framsetjing -> framsetjing", function() {deepEqual( Stem("framsetjing"), "framsetjing");});
test("framsetter -> framsett", function() {deepEqual( Stem("framsetter"), "framsett");});
test("framskaffe -> framskaff", function() {deepEqual( Stem("framskaffe"), "framskaff");});
test("framskaffelse -> framskaff", function() {deepEqual( Stem("framskaffelse"), "framskaff");});
test("framskaffing -> framskaffing", function() {deepEqual( Stem("framskaffing"), "framskaffing");});
test("framskrevet -> framskrev", function() {deepEqual( Stem("framskrevet"), "framskrev");});
test("framskrive -> framskriv", function() {deepEqual( Stem("framskrive"), "framskriv");});
test("framskriving -> framskriving", function() {deepEqual( Stem("framskriving"), "framskriving");});
test("framskrivingen -> framskriving", function() {deepEqual( Stem("framskrivingen"), "framskriving");});
test("framskrivingene -> framskriving", function() {deepEqual( Stem("framskrivingene"), "framskriving");});
test("framskrivinger -> framskriving", function() {deepEqual( Stem("framskrivinger"), "framskriving");});
test("framskrivingsalternativer -> framskrivingsalternativ", function() {deepEqual( Stem("framskrivingsalternativer"), "framskrivingsalternativ");});
test("framskrivingsresultater -> framskrivingsresultat", function() {deepEqual( Stem("framskrivingsresultater"), "framskrivingsresultat");});
test("framskrivning -> framskrivning", function() {deepEqual( Stem("framskrivning"), "framskrivning");});
test("framskynde -> framskynd", function() {deepEqual( Stem("framskynde"), "framskynd");});
test("framstavnen -> framstavn", function() {deepEqual( Stem("framstavnen"), "framstavn");});
test("framstille -> framstill", function() {deepEqual( Stem("framstille"), "framstill");});
test("framstilling -> framstilling", function() {deepEqual( Stem("framstilling"), "framstilling");});
test("framstillinga -> framstilling", function() {deepEqual( Stem("framstillinga"), "framstilling");});
test("framstillingen -> framstilling", function() {deepEqual( Stem("framstillingen"), "framstilling");});
test("framstilt -> framstilt", function() {deepEqual( Stem("framstilt"), "framstilt");});
test("framstå -> framstå", function() {deepEqual( Stem("framstå"), "framstå");});
test("framstår -> framstår", function() {deepEqual( Stem("framstår"), "framstår");});
test("framstått -> framstått", function() {deepEqual( Stem("framstått"), "framstått");});
test("framtid -> framtid", function() {deepEqual( Stem("framtid"), "framtid");});
test("framtida -> framtid", function() {deepEqual( Stem("framtida"), "framtid");});
test("framtidas -> framtid", function() {deepEqual( Stem("framtidas"), "framtid");});
test("framtiden -> framtid", function() {deepEqual( Stem("framtiden"), "framtid");});
test("framtidens -> framtid", function() {deepEqual( Stem("framtidens"), "framtid");});
test("framtidig -> framtid", function() {deepEqual( Stem("framtidig"), "framtid");});
test("framtidige -> framtid", function() {deepEqual( Stem("framtidige"), "framtid");});
test("framtidsbilde -> framtidsbild", function() {deepEqual( Stem("framtidsbilde"), "framtidsbild");});
test("framtidsbildene -> framtidsbild", function() {deepEqual( Stem("framtidsbildene"), "framtidsbild");});
test("framtidsbilder -> framtidsbild", function() {deepEqual( Stem("framtidsbilder"), "framtidsbild");});
test("framtidsbildet -> framtidsbild", function() {deepEqual( Stem("framtidsbildet"), "framtidsbild");});
test("framtredende -> framtred", function() {deepEqual( Stem("framtredende"), "framtred");});
test("framveksten -> framvekst", function() {deepEqual( Stem("framveksten"), "framvekst");});
test("framvising -> framvising", function() {deepEqual( Stem("framvising"), "framvising");});
test("frankrike -> frankrik", function() {deepEqual( Stem("frankrike"), "frankrik");});
test("fraser -> fras", function() {deepEqual( Stem("fraser"), "fras");});
test("fraskrive -> fraskriv", function() {deepEqual( Stem("fraskrive"), "fraskriv");});
test("fratre -> fratr", function() {deepEqual( Stem("fratre"), "fratr");});
test("fratredelse -> fratred", function() {deepEqual( Stem("fratredelse"), "fratred");});
test("fratredelsen -> fratred", function() {deepEqual( Stem("fratredelsen"), "fratred");});
test("fratredelsestidspunktet -> fratredelsestidspunkt", function() {deepEqual( Stem("fratredelsestidspunktet"), "fratredelsestidspunkt");});
test("fratreden -> fratred", function() {deepEqual( Stem("fratreden"), "fratred");});
test("fratrekk -> fratrekk", function() {deepEqual( Stem("fratrekk"), "fratrekk");});
test("fratrer -> fratr", function() {deepEqual( Stem("fratrer"), "fratr");});
test("fratrukket -> fratrukk", function() {deepEqual( Stem("fratrukket"), "fratrukk");});
test("fratrådt -> fratråd", function() {deepEqual( Stem("fratrådt"), "fratråd");});
test("fratrådte -> fratråd", function() {deepEqual( Stem("fratrådte"), "fratråd");});
test("fratrådtes -> fratråd", function() {deepEqual( Stem("fratrådtes"), "fratråd");});
test("fravike -> fravik", function() {deepEqual( Stem("fravike"), "fravik");});
test("fravikes -> fravik", function() {deepEqual( Stem("fravikes"), "fravik");});
test("fred -> fred", function() {deepEqual( Stem("fred"), "fred");});
test("fredelige -> fred", function() {deepEqual( Stem("fredelige"), "fred");});
test("freden -> fred", function() {deepEqual( Stem("freden"), "fred");});
test("frederikshavn -> frederikshavn", function() {deepEqual( Stem("frederikshavn"), "frederikshavn");});
test("fredrikstad -> fredrikstad", function() {deepEqual( Stem("fredrikstad"), "fredrikstad");});
test("fredstid -> fredstid", function() {deepEqual( Stem("fredstid"), "fredstid");});
test("free -> free", function() {deepEqual( Stem("free"), "free");});
test("freight -> freight", function() {deepEqual( Stem("freight"), "freight");});
test("freistnad -> freistnad", function() {deepEqual( Stem("freistnad"), "freistnad");});
test("freke -> frek", function() {deepEqual( Stem("freke"), "frek");});
test("frekvens -> frekv", function() {deepEqual( Stem("frekvens"), "frekv");});
test("frem -> frem", function() {deepEqual( Stem("frem"), "frem");});
test("fremadskuende -> fremadsku", function() {deepEqual( Stem("fremadskuende"), "fremadsku");});
test("fremdeles -> fremdel", function() {deepEqual( Stem("fremdeles"), "fremdel");});
test("fremfor -> fremfor", function() {deepEqual( Stem("fremfor"), "fremfor");});
test("fremgår -> fremgår", function() {deepEqual( Stem("fremgår"), "fremgår");});
test("fremja -> fremj", function() {deepEqual( Stem("fremja"), "fremj");});
test("fremjar -> fremj", function() {deepEqual( Stem("fremjar"), "fremj");});
test("fremjast -> fremj", function() {deepEqual( Stem("fremjast"), "fremj");});
test("fremje -> fremj", function() {deepEqual( Stem("fremje"), "fremj");});
test("fremjing -> fremjing", function() {deepEqual( Stem("fremjing"), "fremjing");});
test("fremleie -> fremlei", function() {deepEqual( Stem("fremleie"), "fremlei");});
test("fremme -> fremm", function() {deepEqual( Stem("fremme"), "fremm");});
test("fremmed -> fremmed", function() {deepEqual( Stem("fremmed"), "fremmed");});
test("fremmede -> fremm", function() {deepEqual( Stem("fremmede"), "fremm");});
test("fremmer -> fremm", function() {deepEqual( Stem("fremmer"), "fremm");});
test("fremmes -> fremm", function() {deepEqual( Stem("fremmes"), "fremm");});
test("fremmet -> fremm", function() {deepEqual( Stem("fremmet"), "fremm");});
test("fremover -> fremov", function() {deepEqual( Stem("fremover"), "fremov");});
test("fremskrittspartiet -> fremskrittsparti", function() {deepEqual( Stem("fremskrittspartiet"), "fremskrittsparti");});
test("fremst -> fremst", function() {deepEqual( Stem("fremst"), "fremst");});
test("fremste -> fremst", function() {deepEqual( Stem("fremste"), "fremst");});
test("fremt -> fremt", function() {deepEqual( Stem("fremt"), "fremt");});
test("fremtid -> fremtid", function() {deepEqual( Stem("fremtid"), "fremtid");});
test("fremtiden -> fremtid", function() {deepEqual( Stem("fremtiden"), "fremtid");});
test("fremtidig -> fremtid", function() {deepEqual( Stem("fremtidig"), "fremtid");});
test("frendedrap -> frendedrap", function() {deepEqual( Stem("frendedrap"), "frendedrap");});
test("frender -> frend", function() {deepEqual( Stem("frender"), "frend");});
test("fresende -> fres", function() {deepEqual( Stem("fresende"), "fres");});
test("freser -> fres", function() {deepEqual( Stem("freser"), "fres");});
test("fri -> fri", function() {deepEqual( Stem("fri"), "fri");});
test("friare -> friar", function() {deepEqual( Stem("friare"), "friar");});
test("fridom -> fridom", function() {deepEqual( Stem("fridom"), "fridom");});
test("friere -> frier", function() {deepEqual( Stem("friere"), "frier");});
test("frierferd -> frierferd", function() {deepEqual( Stem("frierferd"), "frierferd");});
test("frierføtter -> frierføtt", function() {deepEqual( Stem("frierføtter"), "frierføtt");});
test("frieriet -> frieri", function() {deepEqual( Stem("frieriet"), "frieri");});
test("frifunne -> frifunn", function() {deepEqual( Stem("frifunne"), "frifunn");});
test("frigg -> frigg", function() {deepEqual( Stem("frigg"), "frigg");});
test("friggs -> frigg", function() {deepEqual( Stem("friggs"), "frigg");});
test("frigis -> frigis", function() {deepEqual( Stem("frigis"), "frigis");});
test("frigitte -> frigitt", function() {deepEqual( Stem("frigitte"), "frigitt");});
test("frigivelse -> frigiv", function() {deepEqual( Stem("frigivelse"), "frigiv");});
test("frigjort -> frigjort", function() {deepEqual( Stem("frigjort"), "frigjort");});
test("frigjorte -> frigjort", function() {deepEqual( Stem("frigjorte"), "frigjort");});
test("frigjør -> frigjør", function() {deepEqual( Stem("frigjør"), "frigjør");});
test("frigjøre -> frigjør", function() {deepEqual( Stem("frigjøre"), "frigjør");});
test("frigjøres -> frigjør", function() {deepEqual( Stem("frigjøres"), "frigjør");});
test("frigjøring -> frigjøring", function() {deepEqual( Stem("frigjøring"), "frigjøring");});
test("frihavn -> frihavn", function() {deepEqual( Stem("frihavn"), "frihavn");});
test("frihavnen -> frihavn", function() {deepEqual( Stem("frihavnen"), "frihavn");});
test("frihet -> frih", function() {deepEqual( Stem("frihet"), "frih");});
test("frikortgrensen -> frikortgrens", function() {deepEqual( Stem("frikortgrensen"), "frikortgrens");});
test("friluftsinteresser -> friluftsinteress", function() {deepEqual( Stem("friluftsinteresser"), "friluftsinteress");});
test("friluftsliv -> friluftsliv", function() {deepEqual( Stem("friluftsliv"), "friluftsliv");});
test("friluftslivet -> friluftsliv", function() {deepEqual( Stem("friluftslivet"), "friluftsliv");});
test("friluftslivs -> friluftsliv", function() {deepEqual( Stem("friluftslivs"), "friluftsliv");});
test("friområde -> friområd", function() {deepEqual( Stem("friområde"), "friområd");});
test("fripolise -> fripolis", function() {deepEqual( Stem("fripolise"), "fripolis");});
test("fripolisen -> fripolis", function() {deepEqual( Stem("fripolisen"), "fripolis");});
test("fripolisene -> fripolis", function() {deepEqual( Stem("fripolisene"), "fripolis");});
test("fripolisens -> fripolis", function() {deepEqual( Stem("fripolisens"), "fripolis");});
test("fripoliser -> fripolis", function() {deepEqual( Stem("fripoliser"), "fripolis");});
test("fripoliseregisteret -> fripoliseregister", function() {deepEqual( Stem("fripoliseregisteret"), "fripoliseregister");});
test("fripoliserettighetene -> fripoliserett", function() {deepEqual( Stem("fripoliserettighetene"), "fripoliserett");});
test("fripoliserettigheter -> fripoliserett", function() {deepEqual( Stem("fripoliserettigheter"), "fripoliserett");});
test("fripolises -> fripolis", function() {deepEqual( Stem("fripolises"), "fripolis");});
test("frisk -> frisk", function() {deepEqual( Stem("frisk"), "frisk");});
test("friske -> frisk", function() {deepEqual( Stem("friske"), "frisk");});
test("friskt -> friskt", function() {deepEqual( Stem("friskt"), "friskt");});
test("frist -> frist", function() {deepEqual( Stem("frist"), "frist");});
test("fristane -> frist", function() {deepEqual( Stem("fristane"), "frist");});
test("fristar -> frist", function() {deepEqual( Stem("fristar"), "frist");});
test("friste -> frist", function() {deepEqual( Stem("friste"), "frist");});
test("fristed -> fristed", function() {deepEqual( Stem("fristed"), "fristed");});
test("fristen -> frist", function() {deepEqual( Stem("fristen"), "frist");});
test("fristende -> frist", function() {deepEqual( Stem("fristende"), "frist");});
test("frister -> frist", function() {deepEqual( Stem("frister"), "frist");});
test("fristforsøminga -> fristforsøming", function() {deepEqual( Stem("fristforsøminga"), "fristforsøming");});
test("fristille -> fristill", function() {deepEqual( Stem("fristille"), "fristill");});
test("fristoversitjing -> fristoversitjing", function() {deepEqual( Stem("fristoversitjing"), "fristoversitjing");});
test("fristrekning -> fristrekning", function() {deepEqual( Stem("fristrekning"), "fristrekning");});
test("fritak -> fritak", function() {deepEqual( Stem("fritak"), "fritak");});
test("fritaket -> fritak", function() {deepEqual( Stem("fritaket"), "fritak");});
test("fritar -> frit", function() {deepEqual( Stem("fritar"), "frit");});
test("fritas -> frit", function() {deepEqual( Stem("fritas"), "frit");});
test("fritatt -> fritatt", function() {deepEqual( Stem("fritatt"), "fritatt");});
test("friteken -> fritek", function() {deepEqual( Stem("friteken"), "fritek");});
test("fritidsaktivitetar -> fritidsaktivitet", function() {deepEqual( Stem("fritidsaktivitetar"), "fritidsaktivitet");});
test("fritidsaktiviteter -> fritidsaktivitet", function() {deepEqual( Stem("fritidsaktiviteter"), "fritidsaktivitet");});
test("fritidsarealer -> fritidsareal", function() {deepEqual( Stem("fritidsarealer"), "fritidsareal");});
test("fritidsbustad -> fritidsbustad", function() {deepEqual( Stem("fritidsbustad"), "fritidsbustad");});
test("fritidsbustader -> fritidsbustad", function() {deepEqual( Stem("fritidsbustader"), "fritidsbustad");});
test("fritidssysler -> fritidssysl", function() {deepEqual( Stem("fritidssysler"), "fritidssysl");});
test("fritt -> fritt", function() {deepEqual( Stem("fritt"), "fritt");});
test("frittliggjande -> frittliggj", function() {deepEqual( Stem("frittliggjande"), "frittliggj");});
test("frittståande -> frittstå", function() {deepEqual( Stem("frittståande"), "frittstå");});
test("frittstående -> frittstå", function() {deepEqual( Stem("frittstående"), "frittstå");});
test("friviljug -> friviljug", function() {deepEqual( Stem("friviljug"), "friviljug");});
test("friviljuge -> friviljug", function() {deepEqual( Stem("friviljuge"), "friviljug");});
test("frivillig -> frivil", function() {deepEqual( Stem("frivillig"), "frivil");});
test("frivillige -> frivil", function() {deepEqual( Stem("frivillige"), "frivil");});
test("frode -> frod", function() {deepEqual( Stem("frode"), "frod");});
test("frodes -> frod", function() {deepEqual( Stem("frodes"), "frod");});
test("frodig -> frod", function() {deepEqual( Stem("frodig"), "frod");});
test("frogn -> frogn", function() {deepEqual( Stem("frogn"), "frogn");});
test("frognerkilen -> frognerkil", function() {deepEqual( Stem("frognerkilen"), "frognerkil");});
test("frokost -> frokost", function() {deepEqual( Stem("frokost"), "frokost");});
test("frokostbord -> frokostbord", function() {deepEqual( Stem("frokostbord"), "frokostbord");});
test("frosne -> frosn", function() {deepEqual( Stem("frosne"), "frosn");});
test("frosset -> fross", function() {deepEqual( Stem("frosset"), "fross");});
test("frost -> frost", function() {deepEqual( Stem("frost"), "frost");});
test("frukt -> frukt", function() {deepEqual( Stem("frukt"), "frukt");});
test("fruktbare -> fruktbar", function() {deepEqual( Stem("fruktbare"), "fruktbar");});
test("fruktimporten -> fruktimport", function() {deepEqual( Stem("fruktimporten"), "fruktimport");});
test("fryd -> fryd", function() {deepEqual( Stem("fryd"), "fryd");});
test("fryder -> fryd", function() {deepEqual( Stem("fryder"), "fryd");});
test("frydet -> fryd", function() {deepEqual( Stem("frydet"), "fryd");});
test("frykte -> frykt", function() {deepEqual( Stem("frykte"), "frykt");});
test("fryktelig -> frykt", function() {deepEqual( Stem("fryktelig"), "frykt");});
test("frykter -> frykt", function() {deepEqual( Stem("frykter"), "frykt");});
test("fryktet -> frykt", function() {deepEqual( Stem("fryktet"), "frykt");});
test("frynset -> fryns", function() {deepEqual( Stem("frynset"), "fryns");});
test("fryse -> frys", function() {deepEqual( Stem("fryse"), "frys");});
test("fryseboksanlegg -> fryseboksanlegg", function() {deepEqual( Stem("fryseboksanlegg"), "fryseboksanlegg");});
test("fryser -> frys", function() {deepEqual( Stem("fryser"), "frys");});
test("fryses -> frys", function() {deepEqual( Stem("fryses"), "frys");});
test("frå -> frå", function() {deepEqual( Stem("frå"), "frå");});
test("frådelt -> frådelt", function() {deepEqual( Stem("frådelt"), "frådelt");});
test("frådelte -> frådelt", function() {deepEqual( Stem("frådelte"), "frådelt");});
test("fråden -> fråd", function() {deepEqual( Stem("fråden"), "fråd");});
test("frådende -> fråd", function() {deepEqual( Stem("frådende"), "fråd");});
test("frådrag -> frådrag", function() {deepEqual( Stem("frådrag"), "frådrag");});
test("fråfalle -> fråfall", function() {deepEqual( Stem("fråfalle"), "fråfall");});
test("fråflytting -> fråflytting", function() {deepEqual( Stem("fråflytting"), "fråflytting");});
test("fråga -> fråg", function() {deepEqual( Stem("fråga"), "fråg");});
test("frånangersfossen -> frånangersfoss", function() {deepEqual( Stem("frånangersfossen"), "frånangersfoss");});
test("fråsegn -> fråsegn", function() {deepEqual( Stem("fråsegn"), "fråsegn");});
test("fråsegna -> fråsegn", function() {deepEqual( Stem("fråsegna"), "fråsegn");});
test("fråvere -> fråver", function() {deepEqual( Stem("fråvere"), "fråver");});
test("fråvikast -> fråvik", function() {deepEqual( Stem("fråvikast"), "fråvik");});
test("fråvikelege -> fråvik", function() {deepEqual( Stem("fråvikelege"), "fråvik");});
test("fråviking -> fråviking", function() {deepEqual( Stem("fråviking"), "fråviking");});
test("fråvikinga -> fråviking", function() {deepEqual( Stem("fråvikinga"), "fråviking");});
test("fråvikingsklausular -> fråvikingsklausul", function() {deepEqual( Stem("fråvikingsklausular"), "fråvikingsklausul");});
test("frøs -> frøs", function() {deepEqual( Stem("frøs"), "frøs");});
test("frøy -> frøy", function() {deepEqual( Stem("frøy"), "frøy");});
test("frøya -> frøya", function() {deepEqual( Stem("frøya"), "frøya");});
test("frøyas -> frøyas", function() {deepEqual( Stem("frøyas"), "frøyas");});
test("frøys -> frøys", function() {deepEqual( Stem("frøys"), "frøys");});
test("fugl -> fugl", function() {deepEqual( Stem("fugl"), "fugl");});
test("fuglen -> fugl", function() {deepEqual( Stem("fuglen"), "fugl");});
test("fuglene -> fugl", function() {deepEqual( Stem("fuglene"), "fugl");});
test("fuglenes -> fugl", function() {deepEqual( Stem("fuglenes"), "fugl");});
test("fuglens -> fugl", function() {deepEqual( Stem("fuglens"), "fugl");});
test("fugler -> fugl", function() {deepEqual( Stem("fugler"), "fugl");});
test("fuglers -> fugl", function() {deepEqual( Stem("fuglers"), "fugl");});
test("fugleskrik -> fugleskrik", function() {deepEqual( Stem("fugleskrik"), "fugleskrik");});
test("fuglum -> fuglum", function() {deepEqual( Stem("fuglum"), "fuglum");});
test("fukt -> fukt", function() {deepEqual( Stem("fukt"), "fukt");});
test("fuktig -> fukt", function() {deepEqual( Stem("fuktig"), "fukt");});
test("fuktighet -> fukt", function() {deepEqual( Stem("fuktighet"), "fukt");});
test("fulgt -> fulgt", function() {deepEqual( Stem("fulgt"), "fulgt");});
test("fulgte -> fulgt", function() {deepEqual( Stem("fulgte"), "fulgt");});
test("full -> full", function() {deepEqual( Stem("full"), "full");});
test("fulla -> full", function() {deepEqual( Stem("fulla"), "full");});
test("fulle -> full", function() {deepEqual( Stem("fulle"), "full");});
test("fullere -> fuller", function() {deepEqual( Stem("fullere"), "fuller");});
test("fullføring -> fullføring", function() {deepEqual( Stem("fullføring"), "fullføring");});
test("fullført -> fullført", function() {deepEqual( Stem("fullført"), "fullført");});
test("fullførte -> fullført", function() {deepEqual( Stem("fullførte"), "fullført");});
test("fullgod -> fullgod", function() {deepEqual( Stem("fullgod"), "fullgod");});
test("fullmakt -> fullmakt", function() {deepEqual( Stem("fullmakt"), "fullmakt");});
test("fullmakta -> fullmakt", function() {deepEqual( Stem("fullmakta"), "fullmakt");});
test("fullmaktene -> fullmakt", function() {deepEqual( Stem("fullmaktene"), "fullmakt");});
test("fullmakter -> fullmakt", function() {deepEqual( Stem("fullmakter"), "fullmakt");});
test("fullmektig -> fullmekt", function() {deepEqual( Stem("fullmektig"), "fullmekt");});
test("fullmektigen -> fullmekt", function() {deepEqual( Stem("fullmektigen"), "fullmekt");});
test("fullstendig -> fullstend", function() {deepEqual( Stem("fullstendig"), "fullstend");});
test("fullstendige -> fullstend", function() {deepEqual( Stem("fullstendige"), "fullstend");});
test("fullt -> fullt", function() {deepEqual( Stem("fullt"), "fullt");});
test("fulltids -> fulltid", function() {deepEqual( Stem("fulltids"), "fulltid");});
test("fulltidsinnskudd -> fulltidsinnskudd", function() {deepEqual( Stem("fulltidsinnskudd"), "fulltidsinnskudd");});
test("fulltidsstilling -> fulltidsstilling", function() {deepEqual( Stem("fulltidsstilling"), "fulltidsstilling");});
test("fullvoksen -> fullvoks", function() {deepEqual( Stem("fullvoksen"), "fullvoks");});
test("fungere -> funger", function() {deepEqual( Stem("fungere"), "funger");});
test("fungerende -> funger", function() {deepEqual( Stem("fungerende"), "funger");});
test("fungerer -> funger", function() {deepEqual( Stem("fungerer"), "funger");});
test("funkler -> funkl", function() {deepEqual( Stem("funkler"), "funkl");});
test("funksjon -> funksjon", function() {deepEqual( Stem("funksjon"), "funksjon");});
test("funksjonell -> funksjonell", function() {deepEqual( Stem("funksjonell"), "funksjonell");});
test("funksjonelt -> funksjonelt", function() {deepEqual( Stem("funksjonelt"), "funksjonelt");});
test("funksjonen -> funksjon", function() {deepEqual( Stem("funksjonen"), "funksjon");});
test("funksjoner -> funksjon", function() {deepEqual( Stem("funksjoner"), "funksjon");});
test("funksjonshemma -> funksjonshemm", function() {deepEqual( Stem("funksjonshemma"), "funksjonshemm");});
test("funksjonshemmede -> funksjonshemm", function() {deepEqual( Stem("funksjonshemmede"), "funksjonshemm");});
test("funksjonshemming -> funksjonshemming", function() {deepEqual( Stem("funksjonshemming"), "funksjonshemming");});
test("funksjonstida -> funksjonstid", function() {deepEqual( Stem("funksjonstida"), "funksjonstid");});
test("funksjonstiden -> funksjonstid", function() {deepEqual( Stem("funksjonstiden"), "funksjonstid");});
test("funksjonær -> funksjonær", function() {deepEqual( Stem("funksjonær"), "funksjonær");});
test("funksjonærer -> funksjonær", function() {deepEqual( Stem("funksjonærer"), "funksjonær");});
test("funne -> funn", function() {deepEqual( Stem("funne"), "funn");});
test("funnene -> funn", function() {deepEqual( Stem("funnene"), "funn");});
test("funnet -> funn", function() {deepEqual( Stem("funnet"), "funn");});
test("furten -> furt", function() {deepEqual( Stem("furten"), "furt");});
test("fusjon -> fusjon", function() {deepEqual( Stem("fusjon"), "fusjon");});
test("fusjoner -> fusjon", function() {deepEqual( Stem("fusjoner"), "fusjon");});
test("fusjonerast -> fusjoner", function() {deepEqual( Stem("fusjonerast"), "fusjoner");});
test("fusjonsplanen -> fusjonsplan", function() {deepEqual( Stem("fusjonsplanen"), "fusjonsplan");});
test("fyker -> fyk", function() {deepEqual( Stem("fyker"), "fyk");});
test("fyldigare -> fyldigar", function() {deepEqual( Stem("fyldigare"), "fyldigar");});
test("fylgjene -> fylgj", function() {deepEqual( Stem("fylgjene"), "fylgj");});
test("fylke -> fylk", function() {deepEqual( Stem("fylke"), "fylk");});
test("fylkene -> fylk", function() {deepEqual( Stem("fylkene"), "fylk");});
test("fylker -> fylk", function() {deepEqual( Stem("fylker"), "fylk");});
test("fylkes -> fylk", function() {deepEqual( Stem("fylkes"), "fylk");});
test("fylkesdelplan -> fylkesdelplan", function() {deepEqual( Stem("fylkesdelplan"), "fylkesdelplan");});
test("fylkesdelplaner -> fylkesdelplan", function() {deepEqual( Stem("fylkesdelplaner"), "fylkesdelplan");});
test("fylkeskommunal -> fylkeskommunal", function() {deepEqual( Stem("fylkeskommunal"), "fylkeskommunal");});
test("fylkeskommunale -> fylkeskommunal", function() {deepEqual( Stem("fylkeskommunale"), "fylkeskommunal");});
test("fylkeskommunalt -> fylkeskommunalt", function() {deepEqual( Stem("fylkeskommunalt"), "fylkeskommunalt");});
test("fylkeskommunar -> fylkeskommun", function() {deepEqual( Stem("fylkeskommunar"), "fylkeskommun");});
test("fylkeskommune -> fylkeskommun", function() {deepEqual( Stem("fylkeskommune"), "fylkeskommun");});
test("fylkeskommunen -> fylkeskommun", function() {deepEqual( Stem("fylkeskommunen"), "fylkeskommun");});
test("fylkeskommunene -> fylkeskommun", function() {deepEqual( Stem("fylkeskommunene"), "fylkeskommun");});
test("fylkeskommunenes -> fylkeskommun", function() {deepEqual( Stem("fylkeskommunenes"), "fylkeskommun");});
test("fylkeskommuner -> fylkeskommun", function() {deepEqual( Stem("fylkeskommuner"), "fylkeskommun");});
test("fylkesmannen -> fylkesmann", function() {deepEqual( Stem("fylkesmannen"), "fylkesmann");});
test("fylkesmannens -> fylkesmann", function() {deepEqual( Stem("fylkesmannens"), "fylkesmann");});
test("fylkesmiljøvernsjef -> fylkesmiljøvernsjef", function() {deepEqual( Stem("fylkesmiljøvernsjef"), "fylkesmiljøvernsjef");});
test("fylkesplanen -> fylkesplan", function() {deepEqual( Stem("fylkesplanen"), "fylkesplan");});
test("fylkesplanlegging -> fylkesplanlegging", function() {deepEqual( Stem("fylkesplanlegging"), "fylkesplanlegging");});
test("fylkesting -> fylkesting", function() {deepEqual( Stem("fylkesting"), "fylkesting");});
test("fylkesveg -> fylkesveg", function() {deepEqual( Stem("fylkesveg"), "fylkesveg");});
test("fylkesvis -> fylkesvis", function() {deepEqual( Stem("fylkesvis"), "fylkesvis");});
test("fylket -> fylk", function() {deepEqual( Stem("fylket"), "fylk");});
test("fylkinger -> fylking", function() {deepEqual( Stem("fylkinger"), "fylking");});
test("fylle -> fyll", function() {deepEqual( Stem("fylle"), "fyll");});
test("fyller -> fyll", function() {deepEqual( Stem("fyller"), "fyll");});
test("fylles -> fyll", function() {deepEqual( Stem("fylles"), "fyll");});
test("fyllprat -> fyllprat", function() {deepEqual( Stem("fyllprat"), "fyllprat");});
test("fylt -> fylt", function() {deepEqual( Stem("fylt"), "fylt");});
test("fylte -> fylt", function() {deepEqual( Stem("fylte"), "fylt");});
test("fyr -> fyr", function() {deepEqual( Stem("fyr"), "fyr");});
test("fyrbelysning -> fyrbelysning", function() {deepEqual( Stem("fyrbelysning"), "fyrbelysning");});
test("fyrer -> fyr", function() {deepEqual( Stem("fyrer"), "fyr");});
test("fyrste -> fyrst", function() {deepEqual( Stem("fyrste"), "fyrst");});
test("fyrtjenestens -> fyrtjenest", function() {deepEqual( Stem("fyrtjenestens"), "fyrtjenest");});
test("fysisk -> fysisk", function() {deepEqual( Stem("fysisk"), "fysisk");});
test("fysiske -> fysisk", function() {deepEqual( Stem("fysiske"), "fysisk");});
test("få -> få", function() {deepEqual( Stem("få"), "få");});
test("fåmælt -> fåmælt", function() {deepEqual( Stem("fåmælt"), "fåmælt");});
test("fåmælte -> fåmælt", function() {deepEqual( Stem("fåmælte"), "fåmælt");});
test("får -> får", function() {deepEqual( Stem("får"), "får");});
test("fårbaute -> fårbaut", function() {deepEqual( Stem("fårbaute"), "fårbaut");});
test("fåtall -> fåtall", function() {deepEqual( Stem("fåtall"), "fåtall");});
test("fått -> fått", function() {deepEqual( Stem("fått"), "fått");});
test("fåvne -> fåvn", function() {deepEqual( Stem("fåvne"), "fåvn");});
test("fåvnes -> fåvn", function() {deepEqual( Stem("fåvnes"), "fåvn");});
test("fåvnesbane -> fåvnesb", function() {deepEqual( Stem("fåvnesbane"), "fåvnesb");});
test("fæl -> fæl", function() {deepEqual( Stem("fæl"), "fæl");});
test("fællesforbund -> fællesforbund", function() {deepEqual( Stem("fællesforbund"), "fællesforbund");});
test("fællesforeningen -> fællesforening", function() {deepEqual( Stem("fællesforeningen"), "fællesforening");});
test("fælt -> fælt", function() {deepEqual( Stem("fælt"), "fælt");});
test("færder -> færd", function() {deepEqual( Stem("færder"), "færd");});
test("færre -> færr", function() {deepEqual( Stem("færre"), "færr");});
test("færrest -> færrest", function() {deepEqual( Stem("færrest"), "færrest");});
test("føde -> fød", function() {deepEqual( Stem("føde"), "fød");});
test("føder -> fød", function() {deepEqual( Stem("føder"), "fød");});
test("føderåd -> føderåd", function() {deepEqual( Stem("føderåd"), "føderåd");});
test("fødes -> fød", function() {deepEqual( Stem("fødes"), "fød");});
test("fødsels -> fødsel", function() {deepEqual( Stem("fødsels"), "fødsel");});
test("fødselsdato -> fødselsdato", function() {deepEqual( Stem("fødselsdato"), "fødselsdato");});
test("fødselsgave -> fødselsgav", function() {deepEqual( Stem("fødselsgave"), "fødselsgav");});
test("fødselsnummer -> fødselsnumm", function() {deepEqual( Stem("fødselsnummer"), "fødselsnumm");});
test("født -> født", function() {deepEqual( Stem("født"), "født");});
test("fødte -> født", function() {deepEqual( Stem("fødte"), "født");});
test("føle -> føl", function() {deepEqual( Stem("føle"), "føl");});
test("følelser -> føl", function() {deepEqual( Stem("følelser"), "føl");});
test("føler -> føl", function() {deepEqual( Stem("føler"), "føl");});
test("følg -> følg", function() {deepEqual( Stem("følg"), "følg");});
test("følgde -> følgd", function() {deepEqual( Stem("følgde"), "følgd");});
test("følge -> følg", function() {deepEqual( Stem("følge"), "følg");});
test("følgelig -> følg", function() {deepEqual( Stem("følgelig"), "følg");});
test("følgende -> følg", function() {deepEqual( Stem("følgende"), "følg");});
test("følgene -> følg", function() {deepEqual( Stem("følgene"), "følg");});
test("følger -> følg", function() {deepEqual( Stem("følger"), "følg");});
test("følges -> følg", function() {deepEqual( Stem("følges"), "følg");});
test("følgesvenn -> følgesvenn", function() {deepEqual( Stem("følgesvenn"), "følgesvenn");});
test("følgja -> følgj", function() {deepEqual( Stem("følgja"), "følgj");});
test("følgjande -> følgj", function() {deepEqual( Stem("følgjande"), "følgj");});
test("følgjast -> følgj", function() {deepEqual( Stem("følgjast"), "følgj");});
test("følgje -> følgj", function() {deepEqual( Stem("følgje"), "følgj");});
test("følgjene -> følgj", function() {deepEqual( Stem("følgjene"), "følgj");});
test("følgjer -> følgj", function() {deepEqual( Stem("følgjer"), "følgj");});
test("følgt -> følgt", function() {deepEqual( Stem("følgt"), "følgt");});
test("føll -> føll", function() {deepEqual( Stem("føll"), "føll");});
test("føllet -> føll", function() {deepEqual( Stem("føllet"), "føll");});
test("følsomhet -> følsom", function() {deepEqual( Stem("følsomhet"), "følsom");});
test("følsomheten -> følsom", function() {deepEqual( Stem("følsomheten"), "følsom");});
test("følsomme -> følsomm", function() {deepEqual( Stem("følsomme"), "følsomm");});
test("før -> før", function() {deepEqual( Stem("før"), "før");});
test("førarhund -> førarhund", function() {deepEqual( Stem("førarhund"), "førarhund");});
test("førast -> før", function() {deepEqual( Stem("førast"), "før");});
test("føre -> før", function() {deepEqual( Stem("føre"), "før");});
test("førearbeida -> førearbeid", function() {deepEqual( Stem("førearbeida"), "førearbeid");});
test("førebels -> førebel", function() {deepEqual( Stem("førebels"), "førebel");});
test("førebu -> førebu", function() {deepEqual( Stem("førebu"), "førebu");});
test("førebuast -> førebu", function() {deepEqual( Stem("førebuast"), "førebu");});
test("førebudd -> førebudd", function() {deepEqual( Stem("førebudd"), "førebudd");});
test("førebudde -> førebudd", function() {deepEqual( Stem("førebudde"), "førebudd");});
test("førebuing -> førebuing", function() {deepEqual( Stem("førebuing"), "førebuing");});
test("førebuinga -> førebuing", function() {deepEqual( Stem("førebuinga"), "førebuing");});
test("førebur -> førebur", function() {deepEqual( Stem("førebur"), "førebur");});
test("førehand -> førehand", function() {deepEqual( Stem("førehand"), "førehand");});
test("førehandsavtale -> førehandsavtal", function() {deepEqual( Stem("førehandsavtale"), "førehandsavtal");});
test("førehandsgodkjenning -> førehandsgodkjenning", function() {deepEqual( Stem("førehandsgodkjenning"), "førehandsgodkjenning");});
test("førehandssamtykke -> førehandssamtykk", function() {deepEqual( Stem("førehandssamtykke"), "førehandssamtykk");});
test("førehandsvarsel -> førehandsvarsel", function() {deepEqual( Stem("førehandsvarsel"), "førehandsvarsel");});
test("førehaving -> førehaving", function() {deepEqual( Stem("førehaving"), "førehaving");});
test("føremonene -> føremon", function() {deepEqual( Stem("føremonene"), "føremon");});
test("føremoner -> føremon", function() {deepEqual( Stem("føremoner"), "føremon");});
test("føremål -> føremål", function() {deepEqual( Stem("føremål"), "føremål");});
test("føremåla -> føremål", function() {deepEqual( Stem("føremåla"), "føremål");});
test("føremålet -> føremål", function() {deepEqual( Stem("føremålet"), "føremål");});
test("føremålstenleg -> føremålsten", function() {deepEqual( Stem("føremålstenleg"), "føremålsten");});
test("førende -> før", function() {deepEqual( Stem("førende"), "før");});
test("fører -> før", function() {deepEqual( Stem("fører"), "før");});
test("førerett -> førerett", function() {deepEqual( Stem("førerett"), "førerett");});
test("føreretten -> førerett", function() {deepEqual( Stem("føreretten"), "førerett");});
test("føres -> før", function() {deepEqual( Stem("føres"), "før");});
test("føresegn -> føresegn", function() {deepEqual( Stem("føresegn"), "føresegn");});
test("føresegna -> føresegn", function() {deepEqual( Stem("føresegna"), "føresegn");});
test("føresegnene -> føresegn", function() {deepEqual( Stem("føresegnene"), "føresegn");});
test("føresegner -> føresegn", function() {deepEqual( Stem("føresegner"), "føresegn");});
test("føreset -> føres", function() {deepEqual( Stem("føreset"), "føres");});
test("føresetnad -> føresetnad", function() {deepEqual( Stem("føresetnad"), "føresetnad");});
test("føresetnaden -> føresetnad", function() {deepEqual( Stem("føresetnaden"), "føresetnad");});
test("førespurnaden -> førespurnad", function() {deepEqual( Stem("førespurnaden"), "førespurnad");});
test("føretak -> føretak", function() {deepEqual( Stem("føretak"), "føretak");});
test("føretaka -> føretak", function() {deepEqual( Stem("føretaka"), "føretak");});
test("føretaket -> føretak", function() {deepEqual( Stem("føretaket"), "føretak");});
test("føretaksform -> føretaksform", function() {deepEqual( Stem("føretaksform"), "føretaksform");});
test("føretaksformer -> føretaksform", function() {deepEqual( Stem("føretaksformer"), "føretaksform");});
test("føretaksregisteret -> føretaksregister", function() {deepEqual( Stem("føretaksregisteret"), "føretaksregister");});
test("føretaksregistret -> føretaksregistr", function() {deepEqual( Stem("føretaksregistret"), "føretaksregistr");});
test("førevegen -> føreveg", function() {deepEqual( Stem("førevegen"), "føreveg");});
test("føring -> føring", function() {deepEqual( Stem("føring"), "føring");});
test("føringa -> føring", function() {deepEqual( Stem("føringa"), "føring");});
test("føringer -> føring", function() {deepEqual( Stem("føringer"), "føring");});
test("førre -> førr", function() {deepEqual( Stem("førre"), "førr");});
test("først -> først", function() {deepEqual( Stem("først"), "først");});
test("første -> først", function() {deepEqual( Stem("første"), "først");});
test("førsteamanuensis -> førsteamanuensis", function() {deepEqual( Stem("førsteamanuensis"), "førsteamanuensis");});
test("førstedestinasjon -> førstedestinasjon", function() {deepEqual( Stem("førstedestinasjon"), "førstedestinasjon");});
test("førstegongs -> førstegong", function() {deepEqual( Stem("førstegongs"), "førstegong");});
test("førstekonsulent -> førstekonsulent", function() {deepEqual( Stem("førstekonsulent"), "førstekonsulent");});
test("førstemottakere -> førstemottaker", function() {deepEqual( Stem("førstemottakere"), "førstemottaker");});
test("førstkomande -> førstkom", function() {deepEqual( Stem("førstkomande"), "førstkom");});
test("førstnevnte -> førstnevnt", function() {deepEqual( Stem("førstnevnte"), "førstnevnt");});
test("førstnevntes -> førstnevnt", function() {deepEqual( Stem("førstnevntes"), "førstnevnt");});
test("ført -> ført", function() {deepEqual( Stem("ført"), "ført");});
test("førte -> ført", function() {deepEqual( Stem("førte"), "ført");});
test("førti -> førti", function() {deepEqual( Stem("førti"), "førti");});
test("førtidspensjon -> førtidspensjon", function() {deepEqual( Stem("førtidspensjon"), "førtidspensjon");});
test("førtidspensjoner -> førtidspensjon", function() {deepEqual( Stem("førtidspensjoner"), "førtidspensjon");});
test("førtidspensjoneringen -> førtidspensjonering", function() {deepEqual( Stem("førtidspensjoneringen"), "førtidspensjonering");});
test("førtidspensjonert -> førtidspensjoner", function() {deepEqual( Stem("førtidspensjonert"), "førtidspensjoner");});
test("førtidspensjonerte -> førtidspensjoner", function() {deepEqual( Stem("førtidspensjonerte"), "førtidspensjoner");});
test("førtidspensjonister -> førtidspensjonist", function() {deepEqual( Stem("førtidspensjonister"), "førtidspensjonist");});
test("førutset -> føruts", function() {deepEqual( Stem("førutset"), "føruts");});
test("føttene -> føtt", function() {deepEqual( Stem("føttene"), "føtt");});
test("føtter -> føtt", function() {deepEqual( Stem("føtter"), "føtt");});
test("føyd -> føyd", function() {deepEqual( Stem("føyd"), "føyd");});
test("føye -> føye", function() {deepEqual( Stem("føye"), "føye");});
test("føyelig -> føyel", function() {deepEqual( Stem("føyelig"), "føyel");});
test("føyer -> føyer", function() {deepEqual( Stem("føyer"), "føyer");});
test("g -> g", function() {deepEqual( Stem("g"), "g");});
test("ga -> ga", function() {deepEqual( Stem("ga"), "ga");});
test("gagn -> gagn", function() {deepEqual( Stem("gagn"), "gagn");});
test("gagnråd -> gagnråd", function() {deepEqual( Stem("gagnråd"), "gagnråd");});
test("gal -> gal", function() {deepEqual( Stem("gal"), "gal");});
test("galar -> gal", function() {deepEqual( Stem("galar"), "gal");});
test("galder -> gald", function() {deepEqual( Stem("galder"), "gald");});
test("galdrer -> galdr", function() {deepEqual( Stem("galdrer"), "galdr");});
test("galdt -> gald", function() {deepEqual( Stem("galdt"), "gald");});
test("gale -> gal", function() {deepEqual( Stem("gale"), "gal");});
test("galer -> gal", function() {deepEqual( Stem("galer"), "gal");});
test("galge -> galg", function() {deepEqual( Stem("galge"), "galg");});
test("galopperende -> galopper", function() {deepEqual( Stem("galopperende"), "galopper");});
test("galskap -> galskap", function() {deepEqual( Stem("galskap"), "galskap");});
test("galt -> galt", function() {deepEqual( Stem("galt"), "galt");});
test("galte -> galt", function() {deepEqual( Stem("galte"), "galt");});
test("galten -> galt", function() {deepEqual( Stem("galten"), "galt");});
test("gambara -> gambar", function() {deepEqual( Stem("gambara"), "gambar");});
test("gamle -> gaml", function() {deepEqual( Stem("gamle"), "gaml");});
test("gamlingene -> gamling", function() {deepEqual( Stem("gamlingene"), "gamling");});
test("gammal -> gammal", function() {deepEqual( Stem("gammal"), "gammal");});
test("gammel -> gammel", function() {deepEqual( Stem("gammel"), "gammel");});
test("gammelt -> gammelt", function() {deepEqual( Stem("gammelt"), "gammelt");});
test("gang -> gang", function() {deepEqual( Stem("gang"), "gang");});
test("gangen -> gang", function() {deepEqual( Stem("gangen"), "gang");});
test("gangene -> gang", function() {deepEqual( Stem("gangene"), "gang");});
test("ganger -> gang", function() {deepEqual( Stem("ganger"), "gang");});
test("ganske -> gansk", function() {deepEqual( Stem("ganske"), "gansk");});
test("gantry -> gantry", function() {deepEqual( Stem("gantry"), "gantry");});
test("gantrykran -> gantrykran", function() {deepEqual( Stem("gantrykran"), "gantrykran");});
test("gap -> gap", function() {deepEqual( Stem("gap"), "gap");});
test("gape -> gap", function() {deepEqual( Stem("gape"), "gap");});
test("gaper -> gap", function() {deepEqual( Stem("gaper"), "gap");});
test("gapet -> gap", function() {deepEqual( Stem("gapet"), "gap");});
test("gaphals -> gaphal", function() {deepEqual( Stem("gaphals"), "gaphal");});
test("gapskratter -> gapskratt", function() {deepEqual( Stem("gapskratter"), "gapskratt");});
test("gapte -> gapt", function() {deepEqual( Stem("gapte"), "gapt");});
test("garaas -> gara", function() {deepEqual( Stem("garaas"), "gara");});
test("garantere -> garanter", function() {deepEqual( Stem("garantere"), "garanter");});
test("garanterer -> garanter", function() {deepEqual( Stem("garanterer"), "garanter");});
test("garanteres -> garanter", function() {deepEqual( Stem("garanteres"), "garanter");});
test("garantert -> garanter", function() {deepEqual( Stem("garantert"), "garanter");});
test("garanterte -> garanter", function() {deepEqual( Stem("garanterte"), "garanter");});
test("garanti -> garanti", function() {deepEqual( Stem("garanti"), "garanti");});
test("garantiane -> garanti", function() {deepEqual( Stem("garantiane"), "garanti");});
test("garantiar -> garanti", function() {deepEqual( Stem("garantiar"), "garanti");});
test("garantien -> garanti", function() {deepEqual( Stem("garantien"), "garanti");});
test("garantier -> garanti", function() {deepEqual( Stem("garantier"), "garanti");});
test("garantikapital -> garantikapital", function() {deepEqual( Stem("garantikapital"), "garantikapital");});
test("garantikostnaden -> garantikostnad", function() {deepEqual( Stem("garantikostnaden"), "garantikostnad");});
test("garantirisikoen -> garantirisiko", function() {deepEqual( Stem("garantirisikoen"), "garantirisiko");});
test("garantistillelse -> garantistill", function() {deepEqual( Stem("garantistillelse"), "garantistill");});
test("garasjar -> garasj", function() {deepEqual( Stem("garasjar"), "garasj");});
test("garasje -> garasj", function() {deepEqual( Stem("garasje"), "garasj");});
test("gardering -> gardering", function() {deepEqual( Stem("gardering"), "gardering");});
test("gardermoen -> gardermo", function() {deepEqual( Stem("gardermoen"), "gardermo");});
test("gards -> gard", function() {deepEqual( Stem("gards"), "gard");});
test("gardsbruk -> gardsbruk", function() {deepEqual( Stem("gardsbruk"), "gardsbruk");});
test("garm -> garm", function() {deepEqual( Stem("garm"), "garm");});
test("garn -> garn", function() {deepEqual( Stem("garn"), "garn");});
test("garnet -> garn", function() {deepEqual( Stem("garnet"), "garn");});
test("garnmaskene -> garnmask", function() {deepEqual( Stem("garnmaskene"), "garnmask");});
test("gass -> gass", function() {deepEqual( Stem("gass"), "gass");});
test("gater -> gat", function() {deepEqual( Stem("gater"), "gat");});
test("gats -> gat", function() {deepEqual( Stem("gats"), "gat");});
test("gatt -> gatt", function() {deepEqual( Stem("gatt"), "gatt");});
test("gauler -> gaul", function() {deepEqual( Stem("gauler"), "gaul");});
test("gaupehetter -> gaupehett", function() {deepEqual( Stem("gaupehetter"), "gaupehett");});
test("gav -> gav", function() {deepEqual( Stem("gav"), "gav");});
test("gave -> gav", function() {deepEqual( Stem("gave"), "gav");});
test("gaven -> gav", function() {deepEqual( Stem("gaven"), "gav");});
test("gavene -> gav", function() {deepEqual( Stem("gavene"), "gav");});
test("gaver -> gav", function() {deepEqual( Stem("gaver"), "gav");});
test("gavmild -> gavmild", function() {deepEqual( Stem("gavmild"), "gavmild");});
test("gdw -> gdw", function() {deepEqual( Stem("gdw"), "gdw");});
test("gebyr -> gebyr", function() {deepEqual( Stem("gebyr"), "gebyr");});
test("gebyra -> gebyr", function() {deepEqual( Stem("gebyra"), "gebyr");});
test("gebyrer -> gebyr", function() {deepEqual( Stem("gebyrer"), "gebyr");});
test("gebyrordning -> gebyrordning", function() {deepEqual( Stem("gebyrordning"), "gebyrordning");});
test("gebyrsystemet -> gebyrsystem", function() {deepEqual( Stem("gebyrsystemet"), "gebyrsystem");});
test("geipe -> geip", function() {deepEqual( Stem("geipe"), "geip");});
test("geirrød -> geirrød", function() {deepEqual( Stem("geirrød"), "geirrød");});
test("geirrøds -> geirrød", function() {deepEqual( Stem("geirrøds"), "geirrød");});
test("geit -> geit", function() {deepEqual( Stem("geit"), "geit");});
test("geita -> geit", function() {deepEqual( Stem("geita"), "geit");});
test("geitebukk -> geitebukk", function() {deepEqual( Stem("geitebukk"), "geitebukk");});
test("geitebukken -> geitebukk", function() {deepEqual( Stem("geitebukken"), "geitebukk");});
test("geitebukker -> geitebukk", function() {deepEqual( Stem("geitebukker"), "geitebukk");});
test("geitene -> geit", function() {deepEqual( Stem("geitene"), "geit");});
test("geitepiss -> geitepiss", function() {deepEqual( Stem("geitepiss"), "geitepiss");});
test("geiteryggen -> geiterygg", function() {deepEqual( Stem("geiteryggen"), "geiterygg");});
test("geiteskinnene -> geiteskinn", function() {deepEqual( Stem("geiteskinnene"), "geiteskinn");});
test("gemeinschaftlichen -> gemeinschaftlich", function() {deepEqual( Stem("gemeinschaftlichen"), "gemeinschaftlich");});
test("general -> general", function() {deepEqual( Stem("general"), "general");});
test("generalforsamling -> generalforsamling", function() {deepEqual( Stem("generalforsamling"), "generalforsamling");});
test("generalforsamlinga -> generalforsamling", function() {deepEqual( Stem("generalforsamlinga"), "generalforsamling");});
test("generalforsamlingaallmenne -> generalforsamlingaallmenn", function() {deepEqual( Stem("generalforsamlingaallmenne"), "generalforsamlingaallmenn");});
test("generalforsamlingane -> generalforsamling", function() {deepEqual( Stem("generalforsamlingane"), "generalforsamling");});
test("generalforsamlingar -> generalforsamling", function() {deepEqual( Stem("generalforsamlingar"), "generalforsamling");});
test("generalforsamlingsvedtak -> generalforsamlingsvedtak", function() {deepEqual( Stem("generalforsamlingsvedtak"), "generalforsamlingsvedtak");});
test("generaliserte -> generaliser", function() {deepEqual( Stem("generaliserte"), "generaliser");});
test("generalklausulen -> generalklausul", function() {deepEqual( Stem("generalklausulen"), "generalklausul");});
test("generasjon -> generasjon", function() {deepEqual( Stem("generasjon"), "generasjon");});
test("generasjonane -> generasjon", function() {deepEqual( Stem("generasjonane"), "generasjon");});
test("generasjonar -> generasjon", function() {deepEqual( Stem("generasjonar"), "generasjon");});
test("generasjoner -> generasjon", function() {deepEqual( Stem("generasjoner"), "generasjon");});
test("generell -> generell", function() {deepEqual( Stem("generell"), "generell");});
test("generelle -> generell", function() {deepEqual( Stem("generelle"), "generell");});
test("generelt -> generelt", function() {deepEqual( Stem("generelt"), "generelt");});
test("genererasjoner -> genererasjon", function() {deepEqual( Stem("genererasjoner"), "genererasjon");});
test("generert -> generer", function() {deepEqual( Stem("generert"), "generer");});
test("genererte -> generer", function() {deepEqual( Stem("genererte"), "generer");});
test("genom -> genom", function() {deepEqual( Stem("genom"), "genom");});
test("genossenschaft -> genossenschaft", function() {deepEqual( Stem("genossenschaft"), "genossenschaft");});
test("gent -> gent", function() {deepEqual( Stem("gent"), "gent");});
test("geografisk -> geografisk", function() {deepEqual( Stem("geografisk"), "geografisk");});
test("geografiske -> geografisk", function() {deepEqual( Stem("geografiske"), "geografisk");});
test("gerd -> gerd", function() {deepEqual( Stem("gerd"), "gerd");});
test("gere -> ger", function() {deepEqual( Stem("gere"), "ger");});
test("geschaftsbetriebes -> geschaftsbetrieb", function() {deepEqual( Stem("geschaftsbetriebes"), "geschaftsbetrieb");});
test("geschlossener -> geschlossen", function() {deepEqual( Stem("geschlossener"), "geschlossen");});
test("gesellschaften -> gesellschaft", function() {deepEqual( Stem("gesellschaften"), "gesellschaft");});
test("gesetz -> gesetz", function() {deepEqual( Stem("gesetz"), "gesetz");});
test("gevinst -> gevinst", function() {deepEqual( Stem("gevinst"), "gevinst");});
test("gevinstbeskatning -> gevinstbeskatning", function() {deepEqual( Stem("gevinstbeskatning"), "gevinstbeskatning");});
test("gevinsten -> gevinst", function() {deepEqual( Stem("gevinsten"), "gevinst");});
test("gevinster -> gevinst", function() {deepEqual( Stem("gevinster"), "gevinst");});
test("geysirer -> geysir", function() {deepEqual( Stem("geysirer"), "geysir");});
test("ghv -> ghv", function() {deepEqual( Stem("ghv"), "ghv");});
test("gi -> gi", function() {deepEqual( Stem("gi"), "gi");});
test("gidder -> gidd", function() {deepEqual( Stem("gidder"), "gidd");});
test("gift -> gift", function() {deepEqual( Stem("gift"), "gift");});
test("gifte -> gift", function() {deepEqual( Stem("gifte"), "gift");});
test("giften -> gift", function() {deepEqual( Stem("giften"), "gift");});
test("gifter -> gift", function() {deepEqual( Stem("gifter"), "gift");});
test("giftet -> gift", function() {deepEqual( Stem("giftet"), "gift");});
test("giftig -> gift", function() {deepEqual( Stem("giftig"), "gift");});
test("giftige -> gift", function() {deepEqual( Stem("giftige"), "gift");});
test("gikk -> gikk", function() {deepEqual( Stem("gikk"), "gikk");});
test("gilde -> gild", function() {deepEqual( Stem("gilde"), "gild");});
test("gildet -> gild", function() {deepEqual( Stem("gildet"), "gild");});
test("gilling -> gilling", function() {deepEqual( Stem("gilling"), "gilling");});
test("gillings -> gilling", function() {deepEqual( Stem("gillings"), "gilling");});
test("gillion -> gillion", function() {deepEqual( Stem("gillion"), "gillion");});
test("ginnunagagap -> ginnunagagap", function() {deepEqual( Stem("ginnunagagap"), "ginnunagagap");});
test("ginnungagap -> ginnungagap", function() {deepEqual( Stem("ginnungagap"), "ginnungagap");});
test("gir -> gir", function() {deepEqual( Stem("gir"), "gir");});
test("gis -> gis", function() {deepEqual( Stem("gis"), "gis");});
test("gisler -> gisl", function() {deepEqual( Stem("gisler"), "gisl");});
test("gissel -> gissel", function() {deepEqual( Stem("gissel"), "gissel");});
test("gitt -> gitt", function() {deepEqual( Stem("gitt"), "gitt");});
test("gitte -> gitt", function() {deepEqual( Stem("gitte"), "gitt");});
test("gjallarbru -> gjallarbru", function() {deepEqual( Stem("gjallarbru"), "gjallarbru");});
test("gjallarbrua -> gjallarbru", function() {deepEqual( Stem("gjallarbrua"), "gjallarbru");});
test("gjallarhorn -> gjallarhorn", function() {deepEqual( Stem("gjallarhorn"), "gjallarhorn");});
test("gjallarhornet -> gjallarhorn", function() {deepEqual( Stem("gjallarhornet"), "gjallarhorn");});
test("gjalp -> gjalp", function() {deepEqual( Stem("gjalp"), "gjalp");});
test("gje -> gje", function() {deepEqual( Stem("gje"), "gje");});
test("gjeddes -> gjedd", function() {deepEqual( Stem("gjeddes"), "gjedd");});
test("gjekk -> gjekk", function() {deepEqual( Stem("gjekk"), "gjekk");});
test("gjeld -> gjeld", function() {deepEqual( Stem("gjeld"), "gjeld");});
test("gjelda -> gjeld", function() {deepEqual( Stem("gjelda"), "gjeld");});
test("gjeldande -> gjeld", function() {deepEqual( Stem("gjeldande"), "gjeld");});
test("gjelde -> gjeld", function() {deepEqual( Stem("gjelde"), "gjeld");});
test("gjeldende -> gjeld", function() {deepEqual( Stem("gjeldende"), "gjeld");});
test("gjelder -> gjeld", function() {deepEqual( Stem("gjelder"), "gjeld");});
test("gjeldsandel -> gjeldsandel", function() {deepEqual( Stem("gjeldsandel"), "gjeldsandel");});
test("gjeldsbrevlova -> gjeldsbrev", function() {deepEqual( Stem("gjeldsbrevlova"), "gjeldsbrev");});
test("gjeldsforhandling -> gjeldsforhandling", function() {deepEqual( Stem("gjeldsforhandling"), "gjeldsforhandling");});
test("gjeldshøve -> gjeldshøv", function() {deepEqual( Stem("gjeldshøve"), "gjeldshøv");});
test("gjeldsinstrumenter -> gjeldsinstrument", function() {deepEqual( Stem("gjeldsinstrumenter"), "gjeldsinstrument");});
test("gjeldsnemnda -> gjeldsnemnd", function() {deepEqual( Stem("gjeldsnemnda"), "gjeldsnemnd");});
test("gjeldssanering -> gjeldssanering", function() {deepEqual( Stem("gjeldssanering"), "gjeldssanering");});
test("gjeldt -> gjeld", function() {deepEqual( Stem("gjeldt"), "gjeld");});
test("gjeller -> gjell", function() {deepEqual( Stem("gjeller"), "gjell");});
test("gjem -> gjem", function() {deepEqual( Stem("gjem"), "gjem");});
test("gjemme -> gjemm", function() {deepEqual( Stem("gjemme"), "gjemm");});
test("gjemmer -> gjemm", function() {deepEqual( Stem("gjemmer"), "gjemm");});
test("gjemt -> gjemt", function() {deepEqual( Stem("gjemt"), "gjemt");});
test("gjenforsikring -> gjenforsikring", function() {deepEqual( Stem("gjenforsikring"), "gjenforsikring");});
test("gjenfortelles -> gjenfortell", function() {deepEqual( Stem("gjenfortelles"), "gjenfortell");});
test("gjengitt -> gjengitt", function() {deepEqual( Stem("gjengitt"), "gjengitt");});
test("gjengjeld -> gjengjeld", function() {deepEqual( Stem("gjengjeld"), "gjengjeld");});
test("gjengs -> gjeng", function() {deepEqual( Stem("gjengs"), "gjeng");});
test("gjenkjøpsverdi -> gjenkjøpsverdi", function() {deepEqual( Stem("gjenkjøpsverdi"), "gjenkjøpsverdi");});
test("gjenlevende -> gjenlev", function() {deepEqual( Stem("gjenlevende"), "gjenlev");});
test("gjenlyd -> gjenlyd", function() {deepEqual( Stem("gjenlyd"), "gjenlyd");});
test("gjennom -> gjennom", function() {deepEqual( Stem("gjennom"), "gjennom");});
test("gjennomboret -> gjennombor", function() {deepEqual( Stem("gjennomboret"), "gjennombor");});
test("gjennomførast -> gjennomfør", function() {deepEqual( Stem("gjennomførast"), "gjennomfør");});
test("gjennomføre -> gjennomfør", function() {deepEqual( Stem("gjennomføre"), "gjennomfør");});
test("gjennomfører -> gjennomfør", function() {deepEqual( Stem("gjennomfører"), "gjennomfør");});
test("gjennomføres -> gjennomfør", function() {deepEqual( Stem("gjennomføres"), "gjennomfør");});
test("gjennomføring -> gjennomføring", function() {deepEqual( Stem("gjennomføring"), "gjennomføring");});
test("gjennomføringa -> gjennomføring", function() {deepEqual( Stem("gjennomføringa"), "gjennomføring");});
test("gjennomføringen -> gjennomføring", function() {deepEqual( Stem("gjennomføringen"), "gjennomføring");});
test("gjennomføringsloven -> gjennomføring", function() {deepEqual( Stem("gjennomføringsloven"), "gjennomføring");});
test("gjennomføringsorganet -> gjennomføringsorgan", function() {deepEqual( Stem("gjennomføringsorganet"), "gjennomføringsorgan");});
test("gjennomført -> gjennomført", function() {deepEqual( Stem("gjennomført"), "gjennomført");});
test("gjennomførte -> gjennomført", function() {deepEqual( Stem("gjennomførte"), "gjennomført");});
test("gjennomgang -> gjennomgang", function() {deepEqual( Stem("gjennomgang"), "gjennomgang");});
test("gjennomgangen -> gjennomgang", function() {deepEqual( Stem("gjennomgangen"), "gjennomgang");});
test("gjennomgangsbustader -> gjennomgangsbustad", function() {deepEqual( Stem("gjennomgangsbustader"), "gjennomgangsbustad");});
test("gjennomgangstrafikk -> gjennomgangstrafikk", function() {deepEqual( Stem("gjennomgangstrafikk"), "gjennomgangstrafikk");});
test("gjennomgangsåre -> gjennomgangsår", function() {deepEqual( Stem("gjennomgangsåre"), "gjennomgangsår");});
test("gjennomgå -> gjennomgå", function() {deepEqual( Stem("gjennomgå"), "gjennomgå");});
test("gjennomgåande -> gjennomgå", function() {deepEqual( Stem("gjennomgåande"), "gjennomgå");});
test("gjennomgående -> gjennomgå", function() {deepEqual( Stem("gjennomgående"), "gjennomgå");});
test("gjennomgåinga -> gjennomgåing", function() {deepEqual( Stem("gjennomgåinga"), "gjennomgåing");});
test("gjennomgås -> gjennomgås", function() {deepEqual( Stem("gjennomgås"), "gjennomgås");});
test("gjennomgått -> gjennomgått", function() {deepEqual( Stem("gjennomgått"), "gjennomgått");});
test("gjennomsiktige -> gjennomsikt", function() {deepEqual( Stem("gjennomsiktige"), "gjennomsikt");});
test("gjennomslag -> gjennomslag", function() {deepEqual( Stem("gjennomslag"), "gjennomslag");});
test("gjennomsnitlig -> gjennomsnit", function() {deepEqual( Stem("gjennomsnitlig"), "gjennomsnit");});
test("gjennomsnitt -> gjennomsnitt", function() {deepEqual( Stem("gjennomsnitt"), "gjennomsnitt");});
test("gjennomsnittet -> gjennomsnitt", function() {deepEqual( Stem("gjennomsnittet"), "gjennomsnitt");});
test("gjennomsnittlig -> gjennomsnitt", function() {deepEqual( Stem("gjennomsnittlig"), "gjennomsnitt");});
test("gjennomsnittlige -> gjennomsnitt", function() {deepEqual( Stem("gjennomsnittlige"), "gjennomsnitt");});
test("gjennomsnittsavkastningen -> gjennomsnittsavkastning", function() {deepEqual( Stem("gjennomsnittsavkastningen"), "gjennomsnittsavkastning");});
test("gjennomsnittsberegninger -> gjennomsnittsberegning", function() {deepEqual( Stem("gjennomsnittsberegninger"), "gjennomsnittsberegning");});
test("gjennomsnittsbetraktninger -> gjennomsnittsbetraktning", function() {deepEqual( Stem("gjennomsnittsbetraktninger"), "gjennomsnittsbetraktning");});
test("gjennomsnittsinnskudd -> gjennomsnittsinnskudd", function() {deepEqual( Stem("gjennomsnittsinnskudd"), "gjennomsnittsinnskudd");});
test("gjennomsnittsinnskuddene -> gjennomsnittsinnskudd", function() {deepEqual( Stem("gjennomsnittsinnskuddene"), "gjennomsnittsinnskudd");});
test("gjennomsnittsinnskuddet -> gjennomsnittsinnskudd", function() {deepEqual( Stem("gjennomsnittsinnskuddet"), "gjennomsnittsinnskudd");});
test("gjennomsnittslønn -> gjennomsnittslønn", function() {deepEqual( Stem("gjennomsnittslønn"), "gjennomsnittslønn");});
test("gjennomsnittssatsen -> gjennomsnittssats", function() {deepEqual( Stem("gjennomsnittssatsen"), "gjennomsnittssats");});
test("gjennomsnittsskattesatsen -> gjennomsnittsskattesats", function() {deepEqual( Stem("gjennomsnittsskattesatsen"), "gjennomsnittsskattesats");});
test("gjennomsnittstall -> gjennomsnittstall", function() {deepEqual( Stem("gjennomsnittstall"), "gjennomsnittstall");});
test("gjennomsnittsverdi -> gjennomsnittsverdi", function() {deepEqual( Stem("gjennomsnittsverdi"), "gjennomsnittsverdi");});
test("gjennomsnittsverdien -> gjennomsnittsverdi", function() {deepEqual( Stem("gjennomsnittsverdien"), "gjennomsnittsverdi");});
test("gjennomsyn -> gjennomsyn", function() {deepEqual( Stem("gjennomsyn"), "gjennomsyn");});
test("gjennomtrekken -> gjennomtrekk", function() {deepEqual( Stem("gjennomtrekken"), "gjennomtrekk");});
test("gjennoppstår -> gjennoppstår", function() {deepEqual( Stem("gjennoppstår"), "gjennoppstår");});
test("gjenom -> gjenom", function() {deepEqual( Stem("gjenom"), "gjenom");});
test("gjenoppta -> gjenoppt", function() {deepEqual( Stem("gjenoppta"), "gjenoppt");});
test("gjenopptagelse -> gjenopptag", function() {deepEqual( Stem("gjenopptagelse"), "gjenopptag");});
test("gjensidig -> gjensid", function() {deepEqual( Stem("gjensidig"), "gjensid");});
test("gjensidige -> gjensid", function() {deepEqual( Stem("gjensidige"), "gjensid");});
test("gjenspeiles -> gjenspeil", function() {deepEqual( Stem("gjenspeiles"), "gjenspeil");});
test("gjenstand -> gjenstand", function() {deepEqual( Stem("gjenstand"), "gjenstand");});
test("gjenstående -> gjenstå", function() {deepEqual( Stem("gjenstående"), "gjenstå");});
test("gjenstår -> gjenstår", function() {deepEqual( Stem("gjenstår"), "gjenstår");});
test("gjensyn -> gjensyn", function() {deepEqual( Stem("gjensyn"), "gjensyn");});
test("gjentar -> gjent", function() {deepEqual( Stem("gjentar"), "gjent");});
test("gjentatt -> gjentatt", function() {deepEqual( Stem("gjentatt"), "gjentatt");});
test("gjenværende -> gjenvær", function() {deepEqual( Stem("gjenværende"), "gjenvær");});
test("gjer -> gjer", function() {deepEqual( Stem("gjer"), "gjer");});
test("gjerast -> gjer", function() {deepEqual( Stem("gjerast"), "gjer");});
test("gjerdene -> gjerd", function() {deepEqual( Stem("gjerdene"), "gjerd");});
test("gjere -> gjer", function() {deepEqual( Stem("gjere"), "gjer");});
test("gjerne -> gjern", function() {deepEqual( Stem("gjerne"), "gjern");});
test("gjerning -> gjerning", function() {deepEqual( Stem("gjerning"), "gjerning");});
test("gjerrige -> gjerr", function() {deepEqual( Stem("gjerrige"), "gjerr");});
test("gjerrigknark -> gjerrigknark", function() {deepEqual( Stem("gjerrigknark"), "gjerrigknark");});
test("gjersem -> gjersem", function() {deepEqual( Stem("gjersem"), "gjersem");});
test("gjerseme -> gjersem", function() {deepEqual( Stem("gjerseme"), "gjersem");});
test("gjest -> gjest", function() {deepEqual( Stem("gjest"), "gjest");});
test("gjestearbeidende -> gjestearbeid", function() {deepEqual( Stem("gjestearbeidende"), "gjestearbeid");});
test("gjestebud -> gjestebud", function() {deepEqual( Stem("gjestebud"), "gjestebud");});
test("gjestehus -> gjestehus", function() {deepEqual( Stem("gjestehus"), "gjestehus");});
test("gjesten -> gjest", function() {deepEqual( Stem("gjesten"), "gjest");});
test("gjestene -> gjest", function() {deepEqual( Stem("gjestene"), "gjest");});
test("gjester -> gjest", function() {deepEqual( Stem("gjester"), "gjest");});
test("gjesterom -> gjesterom", function() {deepEqual( Stem("gjesterom"), "gjesterom");});
test("gjestfrihet -> gjestfri", function() {deepEqual( Stem("gjestfrihet"), "gjestfri");});
test("gjestfrihetens -> gjestfri", function() {deepEqual( Stem("gjestfrihetens"), "gjestfri");});
test("gjette -> gjett", function() {deepEqual( Stem("gjette"), "gjett");});
test("gjev -> gjev", function() {deepEqual( Stem("gjev"), "gjev");});
test("gjevast -> gjev", function() {deepEqual( Stem("gjevast"), "gjev");});
test("gjeve -> gjev", function() {deepEqual( Stem("gjeve"), "gjev");});
test("gjeven -> gjev", function() {deepEqual( Stem("gjeven"), "gjev");});
test("gjevjon -> gjevjon", function() {deepEqual( Stem("gjevjon"), "gjevjon");});
test("gjevne -> gjevn", function() {deepEqual( Stem("gjevne"), "gjevn");});
test("gjoll -> gjoll", function() {deepEqual( Stem("gjoll"), "gjoll");});
test("gjord -> gjord", function() {deepEqual( Stem("gjord"), "gjord");});
test("gjorde -> gjord", function() {deepEqual( Stem("gjorde"), "gjord");});
test("gjort -> gjort", function() {deepEqual( Stem("gjort"), "gjort");});
test("gjærer -> gjær", function() {deepEqual( Stem("gjærer"), "gjær");});
test("gjødning -> gjødning", function() {deepEqual( Stem("gjødning"), "gjødning");});
test("gjødsel -> gjødsel", function() {deepEqual( Stem("gjødsel"), "gjødsel");});
test("gjør -> gjør", function() {deepEqual( Stem("gjør"), "gjør");});
test("gjøre -> gjør", function() {deepEqual( Stem("gjøre"), "gjør");});
test("gjøres -> gjør", function() {deepEqual( Stem("gjøres"), "gjør");});
test("glad -> glad", function() {deepEqual( Stem("glad"), "glad");});
test("glade -> glad", function() {deepEqual( Stem("glade"), "glad");});
test("gladsheim -> gladsheim", function() {deepEqual( Stem("gladsheim"), "gladsheim");});
test("glasruter -> glasrut", function() {deepEqual( Stem("glasruter"), "glasrut");});
test("glassperler -> glassperl", function() {deepEqual( Stem("glassperler"), "glassperl");});
test("glassverk -> glassverk", function() {deepEqual( Stem("glassverk"), "glassverk");});
test("glatt -> glatt", function() {deepEqual( Stem("glatt"), "glatt");});
test("glatte -> glatt", function() {deepEqual( Stem("glatte"), "glatt");});
test("glede -> gled", function() {deepEqual( Stem("glede"), "gled");});
test("gleden -> gled", function() {deepEqual( Stem("gleden"), "gled");});
test("gleder -> gled", function() {deepEqual( Stem("gleder"), "gled");});
test("glefser -> glefs", function() {deepEqual( Stem("glefser"), "glefs");});
test("gleipne -> gleipn", function() {deepEqual( Stem("gleipne"), "gleipn");});
test("glem -> glem", function() {deepEqual( Stem("glem"), "glem");});
test("glemmer -> glemm", function() {deepEqual( Stem("glemmer"), "glemm");});
test("glemsel -> glemsel", function() {deepEqual( Stem("glemsel"), "glemsel");});
test("glemselsfuglen -> glemselsfugl", function() {deepEqual( Stem("glemselsfuglen"), "glemselsfugl");});
test("glemt -> glemt", function() {deepEqual( Stem("glemt"), "glemt");});
test("glemte -> glemt", function() {deepEqual( Stem("glemte"), "glemt");});
test("glipp -> glipp", function() {deepEqual( Stem("glipp"), "glipp");});
test("glir -> glir", function() {deepEqual( Stem("glir"), "glir");});
test("glitrende -> glitr", function() {deepEqual( Stem("glitrende"), "glitr");});
test("glitrer -> glitr", function() {deepEqual( Stem("glitrer"), "glitr");});
test("glitter -> glitt", function() {deepEqual( Stem("glitter"), "glitt");});
test("globale -> global", function() {deepEqual( Stem("globale"), "global");});
test("globalisering -> globalisering", function() {deepEqual( Stem("globalisering"), "globalisering");});
test("globalt -> globalt", function() {deepEqual( Stem("globalt"), "globalt");});
test("globe -> glob", function() {deepEqual( Stem("globe"), "glob");});
test("globes -> glob", function() {deepEqual( Stem("globes"), "glob");});
test("glohete -> glohet", function() {deepEqual( Stem("glohete"), "glohet");});
test("glomma -> glomm", function() {deepEqual( Stem("glomma"), "glomm");});
test("glommafarvannet -> glommafarvann", function() {deepEqual( Stem("glommafarvannet"), "glommafarvann");});
test("glugge -> glugg", function() {deepEqual( Stem("glugge"), "glugg");});
test("gluggen -> glugg", function() {deepEqual( Stem("gluggen"), "glugg");});
test("glødende -> glød", function() {deepEqual( Stem("glødende"), "glød");});
test("gløder -> glød", function() {deepEqual( Stem("gløder"), "glød");});
test("glør -> glør", function() {deepEqual( Stem("glør"), "glør");});
test("gløttet -> gløtt", function() {deepEqual( Stem("gløttet"), "gløtt");});
test("gnage -> gnag", function() {deepEqual( Stem("gnage"), "gnag");});
test("gnager -> gnag", function() {deepEqual( Stem("gnager"), "gnag");});
test("gni -> gni", function() {deepEqual( Stem("gni"), "gni");});
test("gnir -> gnir", function() {deepEqual( Stem("gnir"), "gnir");});
test("gnist -> gnist", function() {deepEqual( Stem("gnist"), "gnist");});
test("gnister -> gnist", function() {deepEqual( Stem("gnister"), "gnist");});
test("gnistrer -> gnistr", function() {deepEqual( Stem("gnistrer"), "gnistr");});
test("gnitahei -> gnitahei", function() {deepEqual( Stem("gnitahei"), "gnitahei");});
test("gnitaheia -> gnitahei", function() {deepEqual( Stem("gnitaheia"), "gnitahei");});
test("gnå -> gnå", function() {deepEqual( Stem("gnå"), "gnå");});
test("god -> god", function() {deepEqual( Stem("god"), "god");});
test("godbit -> godbit", function() {deepEqual( Stem("godbit"), "godbit");});
test("gode -> god", function() {deepEqual( Stem("gode"), "god");});
test("godet -> god", function() {deepEqual( Stem("godet"), "god");});
test("godkjend -> godkjend", function() {deepEqual( Stem("godkjend"), "godkjend");});
test("godkjende -> godkj", function() {deepEqual( Stem("godkjende"), "godkj");});
test("godkjennast -> godkjenn", function() {deepEqual( Stem("godkjennast"), "godkjenn");});
test("godkjenne -> godkjenn", function() {deepEqual( Stem("godkjenne"), "godkjenn");});
test("godkjenner -> godkjenn", function() {deepEqual( Stem("godkjenner"), "godkjenn");});
test("godkjennes -> godkjenn", function() {deepEqual( Stem("godkjennes"), "godkjenn");});
test("godkjenning -> godkjenning", function() {deepEqual( Stem("godkjenning"), "godkjenning");});
test("godkjenninga -> godkjenning", function() {deepEqual( Stem("godkjenninga"), "godkjenning");});
test("godkjenningsinstans -> godkjenningsinstan", function() {deepEqual( Stem("godkjenningsinstans"), "godkjenningsinstan");});
test("godkjenningsinstansen -> godkjenningsinstans", function() {deepEqual( Stem("godkjenningsinstansen"), "godkjenningsinstans");});
test("godkjenningskompetanse -> godkjenningskompetans", function() {deepEqual( Stem("godkjenningskompetanse"), "godkjenningskompetans");});
test("godkjenningsnekting -> godkjenningsnekting", function() {deepEqual( Stem("godkjenningsnekting"), "godkjenningsnekting");});
test("godkjenningsnektinga -> godkjenningsnekting", function() {deepEqual( Stem("godkjenningsnektinga"), "godkjenningsnekting");});
test("godkjenningsordning -> godkjenningsordning", function() {deepEqual( Stem("godkjenningsordning"), "godkjenningsordning");});
test("godkjenningsordninga -> godkjenningsordning", function() {deepEqual( Stem("godkjenningsordninga"), "godkjenningsordning");});
test("godkjenningsregelen -> godkjenningsregel", function() {deepEqual( Stem("godkjenningsregelen"), "godkjenningsregel");});
test("godkjenningsspørsmålet -> godkjenningsspørsmål", function() {deepEqual( Stem("godkjenningsspørsmålet"), "godkjenningsspørsmål");});
test("godkjent -> godkjent", function() {deepEqual( Stem("godkjent"), "godkjent");});
test("godkjente -> godkjent", function() {deepEqual( Stem("godkjente"), "godkjent");});
test("gods -> god", function() {deepEqual( Stem("gods"), "god");});
test("godsaktivitetene -> godsaktivitet", function() {deepEqual( Stem("godsaktivitetene"), "godsaktivitet");});
test("godsaktiviteter -> godsaktivitet", function() {deepEqual( Stem("godsaktiviteter"), "godsaktivitet");});
test("godsbanegården -> godsbanegård", function() {deepEqual( Stem("godsbanegården"), "godsbanegård");});
test("godsbiler -> godsbil", function() {deepEqual( Stem("godsbiler"), "godsbil");});
test("godset -> gods", function() {deepEqual( Stem("godset"), "gods");});
test("godsforsendelse -> godsforsend", function() {deepEqual( Stem("godsforsendelse"), "godsforsend");});
test("godsgrunnlag -> godsgrunnlag", function() {deepEqual( Stem("godsgrunnlag"), "godsgrunnlag");});
test("godsgrunnlaget -> godsgrunnlag", function() {deepEqual( Stem("godsgrunnlaget"), "godsgrunnlag");});
test("godshavna -> godshavn", function() {deepEqual( Stem("godshavna"), "godshavn");});
test("godshavnaktivitet -> godshavnaktivit", function() {deepEqual( Stem("godshavnaktivitet"), "godshavnaktivit");});
test("godshavnen -> godshavn", function() {deepEqual( Stem("godshavnen"), "godshavn");});
test("godshavner -> godshavn", function() {deepEqual( Stem("godshavner"), "godshavn");});
test("godshåndtering -> godshåndtering", function() {deepEqual( Stem("godshåndtering"), "godshåndtering");});
test("godshåndteringen -> godshåndtering", function() {deepEqual( Stem("godshåndteringen"), "godshåndtering");});
test("godshåndteringsutstyr -> godshåndteringsutstyr", function() {deepEqual( Stem("godshåndteringsutstyr"), "godshåndteringsutstyr");});
test("godskapasitet -> godskapasit", function() {deepEqual( Stem("godskapasitet"), "godskapasit");});
test("godskrevet -> godskrev", function() {deepEqual( Stem("godskrevet"), "godskrev");});
test("godskrivast -> godskriv", function() {deepEqual( Stem("godskrivast"), "godskriv");});
test("godskriver -> godskriv", function() {deepEqual( Stem("godskriver"), "godskriv");});
test("godskrives -> godskriv", function() {deepEqual( Stem("godskrives"), "godskriv");});
test("godsmarkedet -> godsmarked", function() {deepEqual( Stem("godsmarkedet"), "godsmarked");});
test("godsmengde -> godsmengd", function() {deepEqual( Stem("godsmengde"), "godsmengd");});
test("godsmengden -> godsmengd", function() {deepEqual( Stem("godsmengden"), "godsmengd");});
test("godsmengdene -> godsmengd", function() {deepEqual( Stem("godsmengdene"), "godsmengd");});
test("godsmengdenes -> godsmengd", function() {deepEqual( Stem("godsmengdenes"), "godsmengd");});
test("godsmengder -> godsmengd", function() {deepEqual( Stem("godsmengder"), "godsmengd");});
test("godsomlasting -> godsomlasting", function() {deepEqual( Stem("godsomlasting"), "godsomlasting");});
test("godsomlastingen -> godsomlasting", function() {deepEqual( Stem("godsomlastingen"), "godsomlasting");});
test("godsomlastingstallene -> godsomlastingstall", function() {deepEqual( Stem("godsomlastingstallene"), "godsomlastingstall");});
test("godsomslag -> godsomslag", function() {deepEqual( Stem("godsomslag"), "godsomslag");});
test("godsomslaget -> godsomslag", function() {deepEqual( Stem("godsomslaget"), "godsomslag");});
test("godsprognosene -> godsprognos", function() {deepEqual( Stem("godsprognosene"), "godsprognos");});
test("godsprognoser -> godsprognos", function() {deepEqual( Stem("godsprognoser"), "godsprognos");});
test("godsspor -> godsspor", function() {deepEqual( Stem("godsspor"), "godsspor");});
test("godssporene -> godsspor", function() {deepEqual( Stem("godssporene"), "godsspor");});
test("godsstrømmen -> godsstrømm", function() {deepEqual( Stem("godsstrømmen"), "godsstrømm");});
test("godsstrømmene -> godsstrømm", function() {deepEqual( Stem("godsstrømmene"), "godsstrømm");});
test("godsstrømmer -> godsstrømm", function() {deepEqual( Stem("godsstrømmer"), "godsstrømm");});
test("godsterminal -> godsterminal", function() {deepEqual( Stem("godsterminal"), "godsterminal");});
test("godsterminalen -> godsterminal", function() {deepEqual( Stem("godsterminalen"), "godsterminal");});
test("godstog -> godstog", function() {deepEqual( Stem("godstog"), "godstog");});
test("godstomlasting -> godstomlasting", function() {deepEqual( Stem("godstomlasting"), "godstomlasting");});
test("godstrafikk -> godstrafikk", function() {deepEqual( Stem("godstrafikk"), "godstrafikk");});
test("godstrafikken -> godstrafikk", function() {deepEqual( Stem("godstrafikken"), "godstrafikk");});
test("godstransport -> godstransport", function() {deepEqual( Stem("godstransport"), "godstransport");});
test("godstransporten -> godstransport", function() {deepEqual( Stem("godstransporten"), "godstransport");});
test("godstransportene -> godstransport", function() {deepEqual( Stem("godstransportene"), "godstransport");});
test("godstransporter -> godstransport", function() {deepEqual( Stem("godstransporter"), "godstransport");});
test("godstransportknutepunkt -> godstransportknutepunkt", function() {deepEqual( Stem("godstransportknutepunkt"), "godstransportknutepunkt");});
test("godstransportkorridorer -> godstransportkorridor", function() {deepEqual( Stem("godstransportkorridorer"), "godstransportkorridor");});
test("godstransportmønstrene -> godstransportmønstr", function() {deepEqual( Stem("godstransportmønstrene"), "godstransportmønstr");});
test("godstransportstrømmene -> godstransportstrømm", function() {deepEqual( Stem("godstransportstrømmene"), "godstransportstrømm");});
test("godstransporttjenester -> godstransporttjenest", function() {deepEqual( Stem("godstransporttjenester"), "godstransporttjenest");});
test("godstrømmene -> godstrømm", function() {deepEqual( Stem("godstrømmene"), "godstrømm");});
test("godstrømmer -> godstrømm", function() {deepEqual( Stem("godstrømmer"), "godstrømm");});
test("godstyper -> godstyp", function() {deepEqual( Stem("godstyper"), "godstyp");});
test("godsvirksomhet -> godsvirksom", function() {deepEqual( Stem("godsvirksomhet"), "godsvirksom");});
test("godsvolum -> godsvolum", function() {deepEqual( Stem("godsvolum"), "godsvolum");});
test("godsvolumene -> godsvolum", function() {deepEqual( Stem("godsvolumene"), "godsvolum");});
test("godsvolumer -> godsvolum", function() {deepEqual( Stem("godsvolumer"), "godsvolum");});
test("godt -> godt", function() {deepEqual( Stem("godt"), "godt");});
test("godta -> godt", function() {deepEqual( Stem("godta"), "godt");});
test("godtakast -> godtak", function() {deepEqual( Stem("godtakast"), "godtak");});
test("godtatt -> godtatt", function() {deepEqual( Stem("godtatt"), "godtatt");});
test("godtek -> godtek", function() {deepEqual( Stem("godtek"), "godtek");});
test("godteke -> godtek", function() {deepEqual( Stem("godteke"), "godtek");});
test("godtgjer -> godtgj", function() {deepEqual( Stem("godtgjer"), "godtgj");});
test("godtgjere -> godtgjer", function() {deepEqual( Stem("godtgjere"), "godtgjer");});
test("godtgjersla -> godtgjersl", function() {deepEqual( Stem("godtgjersla"), "godtgjersl");});
test("godtgjersle -> godtgjersl", function() {deepEqual( Stem("godtgjersle"), "godtgjersl");});
test("godtgjort -> godtgjort", function() {deepEqual( Stem("godtgjort"), "godtgjort");});
test("godtgjørelse -> godtgjør", function() {deepEqual( Stem("godtgjørelse"), "godtgjør");});
test("godtgjørelsene -> godtgjør", function() {deepEqual( Stem("godtgjørelsene"), "godtgjør");});
test("godtgjøres -> godtgjør", function() {deepEqual( Stem("godtgjøres"), "godtgjør");});
test("godtgjøring -> godtgjøring", function() {deepEqual( Stem("godtgjøring"), "godtgjøring");});
test("godtgjøringer -> godtgjøring", function() {deepEqual( Stem("godtgjøringer"), "godtgjøring");});
test("godtok -> godtok", function() {deepEqual( Stem("godtok"), "godtok");});
test("godtruerverv -> godtruerverv", function() {deepEqual( Stem("godtruerverv"), "godtruerverv");});
test("golv -> golv", function() {deepEqual( Stem("golv"), "golv");});
test("golvbelegg -> golvbelegg", function() {deepEqual( Stem("golvbelegg"), "golvbelegg");});
test("golvet -> golv", function() {deepEqual( Stem("golvet"), "golv");});
test("golvteppe -> golvtepp", function() {deepEqual( Stem("golvteppe"), "golvtepp");});
test("gom -> gom", function() {deepEqual( Stem("gom"), "gom");});
test("gomlet -> goml", function() {deepEqual( Stem("gomlet"), "goml");});
test("gommen -> gomm", function() {deepEqual( Stem("gommen"), "gomm");});
test("gommene -> gomm", function() {deepEqual( Stem("gommene"), "gomm");});
test("gong -> gong", function() {deepEqual( Stem("gong"), "gong");});
test("gongen -> gong", function() {deepEqual( Stem("gongen"), "gong");});
test("gonger -> gong", function() {deepEqual( Stem("gonger"), "gong");});
test("gotter -> gott", function() {deepEqual( Stem("gotter"), "gott");});
test("gotterier -> gotteri", function() {deepEqual( Stem("gotterier"), "gotteri");});
test("gottet -> gott", function() {deepEqual( Stem("gottet"), "gott");});
test("grad -> grad", function() {deepEqual( Stem("grad"), "grad");});
test("graden -> grad", function() {deepEqual( Stem("graden"), "grad");});
test("gradert -> grader", function() {deepEqual( Stem("gradert"), "grader");});
test("gradvis -> gradvis", function() {deepEqual( Stem("gradvis"), "gradvis");});
test("gradvise -> gradvis", function() {deepEqual( Stem("gradvise"), "gradvis");});
test("granbar -> granb", function() {deepEqual( Stem("granbar"), "granb");});
test("grane -> gran", function() {deepEqual( Stem("grane"), "gran");});
test("granlegg -> granlegg", function() {deepEqual( Stem("granlegg"), "granlegg");});
test("grann -> grann", function() {deepEqual( Stem("grann"), "grann");});
test("grannar -> grann", function() {deepEqual( Stem("grannar"), "grann");});
test("granneeigedom -> granneeigedom", function() {deepEqual( Stem("granneeigedom"), "granneeigedom");});
test("granskar -> gransk", function() {deepEqual( Stem("granskar"), "gransk");});
test("granskarane -> granskar", function() {deepEqual( Stem("granskarane"), "granskar");});
test("granskarar -> granskar", function() {deepEqual( Stem("granskarar"), "granskar");});
test("gransking -> gransking", function() {deepEqual( Stem("gransking"), "gransking");});
test("granskinga -> gransking", function() {deepEqual( Stem("granskinga"), "gransking");});
test("granskingsrapporten -> granskingsrapport", function() {deepEqual( Stem("granskingsrapporten"), "granskingsrapport");});
test("grantoppene -> grantopp", function() {deepEqual( Stem("grantoppene"), "grantopp");});
test("grantrær -> grantrær", function() {deepEqual( Stem("grantrær"), "grantrær");});
test("gratis -> gratis", function() {deepEqual( Stem("gratis"), "gratis");});
test("grav -> grav", function() {deepEqual( Stem("grav"), "grav");});
test("gravalvorlige -> gravalvor", function() {deepEqual( Stem("gravalvorlige"), "gravalvor");});
test("grave -> grav", function() {deepEqual( Stem("grave"), "grav");});
test("graven -> grav", function() {deepEqual( Stem("graven"), "grav");});
test("graver -> grav", function() {deepEqual( Stem("graver"), "grav");});
test("gravet -> grav", function() {deepEqual( Stem("gravet"), "grav");});
test("gravid -> gravid", function() {deepEqual( Stem("gravid"), "gravid");});
test("gravøl -> gravøl", function() {deepEqual( Stem("gravøl"), "gravøl");});
test("gre -> gre", function() {deepEqual( Stem("gre"), "gre");});
test("green -> green", function() {deepEqual( Stem("green"), "green");});
test("grei -> grei", function() {deepEqual( Stem("grei"), "grei");});
test("greiast -> greiast", function() {deepEqual( Stem("greiast"), "greiast");});
test("greiaste -> greiast", function() {deepEqual( Stem("greiaste"), "greiast");});
test("greid -> greid", function() {deepEqual( Stem("greid"), "greid");});
test("greidd -> greidd", function() {deepEqual( Stem("greidd"), "greidd");});
test("greidde -> greidd", function() {deepEqual( Stem("greidde"), "greidd");});
test("greide -> greid", function() {deepEqual( Stem("greide"), "greid");});
test("greie -> greie", function() {deepEqual( Stem("greie"), "greie");});
test("greier -> greier", function() {deepEqual( Stem("greier"), "greier");});
test("greip -> greip", function() {deepEqual( Stem("greip"), "greip");});
test("greitt -> greitt", function() {deepEqual( Stem("greitt"), "greitt");});
test("gren -> gren", function() {deepEqual( Stem("gren"), "gren");});
test("grendehus -> grendehus", function() {deepEqual( Stem("grendehus"), "grendehus");});
test("grenene -> gren", function() {deepEqual( Stem("grenene"), "gren");});
test("grener -> gren", function() {deepEqual( Stem("grener"), "gren");});
test("grenland -> grenland", function() {deepEqual( Stem("grenland"), "grenland");});
test("grenlandsfarvannet -> grenlandsfarvann", function() {deepEqual( Stem("grenlandsfarvannet"), "grenlandsfarvann");});
test("grenlandsområdet -> grenlandsområd", function() {deepEqual( Stem("grenlandsområdet"), "grenlandsområd");});
test("grensa -> grens", function() {deepEqual( Stem("grensa"), "grens");});
test("grense -> grens", function() {deepEqual( Stem("grense"), "grens");});
test("grensedraging -> grensedraging", function() {deepEqual( Stem("grensedraging"), "grensedraging");});
test("grensedraginga -> grensedraging", function() {deepEqual( Stem("grensedraginga"), "grensedraging");});
test("grensekryssende -> grensekryss", function() {deepEqual( Stem("grensekryssende"), "grensekryss");});
test("grenseland -> grenseland", function() {deepEqual( Stem("grenseland"), "grenseland");});
test("grensen -> grens", function() {deepEqual( Stem("grensen"), "grens");});
test("grensene -> grens", function() {deepEqual( Stem("grensene"), "grens");});
test("grenseoverskridende -> grenseoverskrid", function() {deepEqual( Stem("grenseoverskridende"), "grenseoverskrid");});
test("grensepassering -> grensepassering", function() {deepEqual( Stem("grensepassering"), "grensepassering");});
test("grenser -> grens", function() {deepEqual( Stem("grenser"), "grens");});
test("grenseskogen -> grenseskog", function() {deepEqual( Stem("grenseskogen"), "grenseskog");});
test("grenseverdier -> grenseverdi", function() {deepEqual( Stem("grenseverdier"), "grenseverdi");});
test("grepstad -> grepstad", function() {deepEqual( Stem("grepstad"), "grepstad");});
test("grer -> grer", function() {deepEqual( Stem("grer"), "grer");});
test("gress -> gress", function() {deepEqual( Stem("gress"), "gress");});
test("gressbakke -> gressbakk", function() {deepEqual( Stem("gressbakke"), "gressbakk");});
test("gresser -> gress", function() {deepEqual( Stem("gresser"), "gress");});
test("gresset -> gress", function() {deepEqual( Stem("gresset"), "gress");});
test("gressgangene -> gressgang", function() {deepEqual( Stem("gressgangene"), "gressgang");});
test("gresstorven -> gresstorv", function() {deepEqual( Stem("gresstorven"), "gresstorv");});
test("gretten -> grett", function() {deepEqual( Stem("gretten"), "grett");});
test("grettent -> grettent", function() {deepEqual( Stem("grettent"), "grettent");});
test("gribber -> gribb", function() {deepEqual( Stem("gribber"), "gribb");});
test("grid -> grid", function() {deepEqual( Stem("grid"), "grid");});
test("gridarvol -> gridarvol", function() {deepEqual( Stem("gridarvol"), "gridarvol");});
test("grimase -> grimas", function() {deepEqual( Stem("grimase"), "grimas");});
test("grimne -> grimn", function() {deepEqual( Stem("grimne"), "grimn");});
test("grimsbo -> grimsbo", function() {deepEqual( Stem("grimsbo"), "grimsbo");});
test("grind -> grind", function() {deepEqual( Stem("grind"), "grind");});
test("grinden -> grind", function() {deepEqual( Stem("grinden"), "grind");});
test("griner -> grin", function() {deepEqual( Stem("griner"), "grin");});
test("grini -> grini", function() {deepEqual( Stem("grini"), "grini");});
test("grip -> grip", function() {deepEqual( Stem("grip"), "grip");});
test("gripe -> grip", function() {deepEqual( Stem("gripe"), "grip");});
test("griper -> grip", function() {deepEqual( Stem("griper"), "grip");});
test("gris -> gris", function() {deepEqual( Stem("gris"), "gris");});
test("grisen -> gris", function() {deepEqual( Stem("grisen"), "gris");});
test("grisk -> grisk", function() {deepEqual( Stem("grisk"), "grisk");});
test("griske -> grisk", function() {deepEqual( Stem("griske"), "grisk");});
test("griskheten -> grisk", function() {deepEqual( Stem("griskheten"), "grisk");});
test("grjotunagard -> grjotunagard", function() {deepEqual( Stem("grjotunagard"), "grjotunagard");});
test("gro -> gro", function() {deepEqual( Stem("gro"), "gro");});
test("groa -> groa", function() {deepEqual( Stem("groa"), "groa");});
test("gror -> gror", function() {deepEqual( Stem("gror"), "gror");});
test("groruddalen -> groruddal", function() {deepEqual( Stem("groruddalen"), "groruddal");});
test("groruddalens -> groruddal", function() {deepEqual( Stem("groruddalens"), "groruddal");});
test("grossist -> grossist", function() {deepEqual( Stem("grossist"), "grossist");});
test("grossister -> grossist", function() {deepEqual( Stem("grossister"), "grossist");});
test("grossisters -> grossist", function() {deepEqual( Stem("grossisters"), "grossist");});
test("grossistlagre -> grossistlagr", function() {deepEqual( Stem("grossistlagre"), "grossistlagr");});
test("grossistledd -> grossistledd", function() {deepEqual( Stem("grossistledd"), "grossistledd");});
test("grossistleddet -> grossistledd", function() {deepEqual( Stem("grossistleddet"), "grossistledd");});
test("grossistvirksomheter -> grossistvirksom", function() {deepEqual( Stem("grossistvirksomheter"), "grossistvirksom");});
test("grotte -> grott", function() {deepEqual( Stem("grotte"), "grott");});
test("grotter -> grott", function() {deepEqual( Stem("grotter"), "grott");});
test("grov -> grov", function() {deepEqual( Stem("grov"), "grov");});
test("grove -> grov", function() {deepEqual( Stem("grove"), "grov");});
test("gru -> gru", function() {deepEqual( Stem("gru"), "gru");});
test("grubler -> grubl", function() {deepEqual( Stem("grubler"), "grubl");});
test("gruen -> gruen", function() {deepEqual( Stem("gruen"), "gruen");});
test("gruer -> gruer", function() {deepEqual( Stem("gruer"), "gruer");});
test("grundig -> grund", function() {deepEqual( Stem("grundig"), "grund");});
test("grundigare -> grundigar", function() {deepEqual( Stem("grundigare"), "grundigar");});
test("grunn -> grunn", function() {deepEqual( Stem("grunn"), "grunn");});
test("grunna -> grunn", function() {deepEqual( Stem("grunna"), "grunn");});
test("grunnane -> grunn", function() {deepEqual( Stem("grunnane"), "grunn");});
test("grunnar -> grunn", function() {deepEqual( Stem("grunnar"), "grunn");});
test("grunnareal -> grunnareal", function() {deepEqual( Stem("grunnareal"), "grunnareal");});
test("grunnareala -> grunnareal", function() {deepEqual( Stem("grunnareala"), "grunnareal");});
test("grunnast -> grunn", function() {deepEqual( Stem("grunnast"), "grunn");});
test("grunnbeløp -> grunnbeløp", function() {deepEqual( Stem("grunnbeløp"), "grunnbeløp");});
test("grunnbeløpet -> grunnbeløp", function() {deepEqual( Stem("grunnbeløpet"), "grunnbeløp");});
test("grunnbok -> grunnbok", function() {deepEqual( Stem("grunnbok"), "grunnbok");});
test("grunnboka -> grunnbok", function() {deepEqual( Stem("grunnboka"), "grunnbok");});
test("grunnbokheimel -> grunnbokheimel", function() {deepEqual( Stem("grunnbokheimel"), "grunnbokheimel");});
test("grunndokument -> grunndokument", function() {deepEqual( Stem("grunndokument"), "grunndokument");});
test("grunndraga -> grunndrag", function() {deepEqual( Stem("grunndraga"), "grunndrag");});
test("grunne -> grunn", function() {deepEqual( Stem("grunne"), "grunn");});
test("grunneier -> grunnei", function() {deepEqual( Stem("grunneier"), "grunnei");});
test("grunnen -> grunn", function() {deepEqual( Stem("grunnen"), "grunn");});
test("grunnene -> grunn", function() {deepEqual( Stem("grunnene"), "grunn");});
test("grunner -> grunn", function() {deepEqual( Stem("grunner"), "grunn");});
test("grunnet -> grunn", function() {deepEqual( Stem("grunnet"), "grunn");});
test("grunnfond -> grunnfond", function() {deepEqual( Stem("grunnfond"), "grunnfond");});
test("grunnfondbevis -> grunnfondbevis", function() {deepEqual( Stem("grunnfondbevis"), "grunnfondbevis");});
test("grunnfondet -> grunnfond", function() {deepEqual( Stem("grunnfondet"), "grunnfond");});
test("grunnfondsbevis -> grunnfondsbevis", function() {deepEqual( Stem("grunnfondsbevis"), "grunnfondsbevis");});
test("grunnfondsbevisa -> grunnfondsbevis", function() {deepEqual( Stem("grunnfondsbevisa"), "grunnfondsbevis");});
test("grunnforholdene -> grunnforhold", function() {deepEqual( Stem("grunnforholdene"), "grunnforhold");});
test("grunngje -> grunngj", function() {deepEqual( Stem("grunngje"), "grunngj");});
test("grunngjevast -> grunngjev", function() {deepEqual( Stem("grunngjevast"), "grunngjev");});
test("grunngjeve -> grunngjev", function() {deepEqual( Stem("grunngjeve"), "grunngjev");});
test("grunngjeving -> grunngjeving", function() {deepEqual( Stem("grunngjeving"), "grunngjeving");});
test("grunngjevinga -> grunngjeving", function() {deepEqual( Stem("grunngjevinga"), "grunngjeving");});
test("grunngjevne -> grunngjevn", function() {deepEqual( Stem("grunngjevne"), "grunngjevn");});
test("grunnivået -> grunnivå", function() {deepEqual( Stem("grunnivået"), "grunnivå");});
test("grunnkravene -> grunnkrav", function() {deepEqual( Stem("grunnkravene"), "grunnkrav");});
test("grunnlag -> grunnlag", function() {deepEqual( Stem("grunnlag"), "grunnlag");});
test("grunnlaget -> grunnlag", function() {deepEqual( Stem("grunnlaget"), "grunnlag");});
test("grunnlagselementene -> grunnlagselement", function() {deepEqual( Stem("grunnlagselementene"), "grunnlagselement");});
test("grunnlagselementer -> grunnlagselement", function() {deepEqual( Stem("grunnlagselementer"), "grunnlagselement");});
test("grunnlagsmaterialet -> grunnlagsmaterial", function() {deepEqual( Stem("grunnlagsmaterialet"), "grunnlagsmaterial");});
test("grunnlagsrente -> grunnlagsrent", function() {deepEqual( Stem("grunnlagsrente"), "grunnlagsrent");});
test("grunnlagsrenten -> grunnlagsrent", function() {deepEqual( Stem("grunnlagsrenten"), "grunnlagsrent");});
test("grunnlause -> grunnlaus", function() {deepEqual( Stem("grunnlause"), "grunnlaus");});
test("grunnleggende -> grunnlegg", function() {deepEqual( Stem("grunnleggende"), "grunnlegg");});
test("grunnleggjande -> grunnleggj", function() {deepEqual( Stem("grunnleggjande"), "grunnleggj");});
test("grunnleggjarane -> grunnleggjar", function() {deepEqual( Stem("grunnleggjarane"), "grunnleggjar");});
test("grunnlinjen -> grunnlinj", function() {deepEqual( Stem("grunnlinjen"), "grunnlinj");});
test("grunnlova -> grunn", function() {deepEqual( Stem("grunnlova"), "grunn");});
test("grunnlønn -> grunnlønn", function() {deepEqual( Stem("grunnlønn"), "grunnlønn");});
test("grunnmateriale -> grunnmaterial", function() {deepEqual( Stem("grunnmateriale"), "grunnmaterial");});
test("grunnorganisasjonane -> grunnorganisasjon", function() {deepEqual( Stem("grunnorganisasjonane"), "grunnorganisasjon");});
test("grunnpensjon -> grunnpensjon", function() {deepEqual( Stem("grunnpensjon"), "grunnpensjon");});
test("grunnpensjonen -> grunnpensjon", function() {deepEqual( Stem("grunnpensjonen"), "grunnpensjon");});
test("grunnprinsipp -> grunnprinsipp", function() {deepEqual( Stem("grunnprinsipp"), "grunnprinsipp");});
test("grunnsikring -> grunnsikring", function() {deepEqual( Stem("grunnsikring"), "grunnsikring");});
test("grunnsikringens -> grunnsikring", function() {deepEqual( Stem("grunnsikringens"), "grunnsikring");});
test("grunnstykke -> grunnstykk", function() {deepEqual( Stem("grunnstykke"), "grunnstykk");});
test("grunnstøting -> grunnstøting", function() {deepEqual( Stem("grunnstøting"), "grunnstøting");});
test("grunnstøtinger -> grunnstøting", function() {deepEqual( Stem("grunnstøtinger"), "grunnstøting");});
test("grunnstøtninger -> grunnstøtning", function() {deepEqual( Stem("grunnstøtninger"), "grunnstøtning");});
test("grunnsummen -> grunnsumm", function() {deepEqual( Stem("grunnsummen"), "grunnsumm");});
test("grunnvilkår -> grunnvilkår", function() {deepEqual( Stem("grunnvilkår"), "grunnvilkår");});
test("gruntvannsområder -> gruntvannsområd", function() {deepEqual( Stem("gruntvannsområder"), "gruntvannsområd");});
test("gruppa -> grupp", function() {deepEqual( Stem("gruppa"), "grupp");});
test("gruppe -> grupp", function() {deepEqual( Stem("gruppe"), "grupp");});
test("gruppeinndeling -> gruppeinndeling", function() {deepEqual( Stem("gruppeinndeling"), "gruppeinndeling");});
test("gruppeliv -> gruppeliv", function() {deepEqual( Stem("gruppeliv"), "gruppeliv");});
test("gruppelivsforsikring -> gruppelivsforsikring", function() {deepEqual( Stem("gruppelivsforsikring"), "gruppelivsforsikring");});
test("gruppen -> grupp", function() {deepEqual( Stem("gruppen"), "grupp");});
test("gruppene -> grupp", function() {deepEqual( Stem("gruppene"), "grupp");});
test("gruppens -> grupp", function() {deepEqual( Stem("gruppens"), "grupp");});
test("grupper -> grupp", function() {deepEqual( Stem("grupper"), "grupp");});
test("grupperinger -> gruppering", function() {deepEqual( Stem("grupperinger"), "gruppering");});
test("gruppert -> grupper", function() {deepEqual( Stem("gruppert"), "grupper");});
test("grus -> grus", function() {deepEqual( Stem("grus"), "grus");});
test("grusomme -> grusomm", function() {deepEqual( Stem("grusomme"), "grusomm");});
test("grusomt -> grusomt", function() {deepEqual( Stem("grusomt"), "grusomt");});
test("grynt -> grynt", function() {deepEqual( Stem("grynt"), "grynt");});
test("grynter -> grynt", function() {deepEqual( Stem("grynter"), "grynt");});
test("grytidlig -> grytid", function() {deepEqual( Stem("grytidlig"), "grytid");});
test("grå -> grå", function() {deepEqual( Stem("grå"), "grå");});
test("gråbein -> gråbein", function() {deepEqual( Stem("gråbein"), "gråbein");});
test("gråbeinskikkelse -> gråbeinskikk", function() {deepEqual( Stem("gråbeinskikkelse"), "gråbeinskikk");});
test("grådig -> gråd", function() {deepEqual( Stem("grådig"), "gråd");});
test("grådige -> gråd", function() {deepEqual( Stem("grådige"), "gråd");});
test("grådighet -> gråd", function() {deepEqual( Stem("grådighet"), "gråd");});
test("grålysningen -> grålysning", function() {deepEqual( Stem("grålysningen"), "grålysning");});
test("gråspurv -> gråspurv", function() {deepEqual( Stem("gråspurv"), "gråspurv");});
test("gråt -> gråt", function() {deepEqual( Stem("gråt"), "gråt");});
test("gråte -> gråt", function() {deepEqual( Stem("gråte"), "gråt");});
test("gråtekone -> gråtekon", function() {deepEqual( Stem("gråtekone"), "gråtekon");});
test("gråtende -> gråt", function() {deepEqual( Stem("gråtende"), "gråt");});
test("gråter -> gråt", function() {deepEqual( Stem("gråter"), "gråt");});
test("gråtes -> gråt", function() {deepEqual( Stem("gråtes"), "gråt");});
test("grått -> grått", function() {deepEqual( Stem("grått"), "grått");});
test("grøft -> grøft", function() {deepEqual( Stem("grøft"), "grøft");});
test("grønlia -> grønli", function() {deepEqual( Stem("grønlia"), "grønli");});
test("grønn -> grønn", function() {deepEqual( Stem("grønn"), "grønn");});
test("grønnboken -> grønnbok", function() {deepEqual( Stem("grønnboken"), "grønnbok");});
test("grønne -> grønn", function() {deepEqual( Stem("grønne"), "grønn");});
test("grønnsaker -> grønnsak", function() {deepEqual( Stem("grønnsaker"), "grønnsak");});
test("grønt -> grønt", function() {deepEqual( Stem("grønt"), "grønt");});
test("grøntområde -> grøntområd", function() {deepEqual( Stem("grøntområde"), "grøntområd");});
test("grøsser -> grøss", function() {deepEqual( Stem("grøsser"), "grøss");});
test("grøt -> grøt", function() {deepEqual( Stem("grøt"), "grøt");});
test("gud -> gud", function() {deepEqual( Stem("gud"), "gud");});
test("gudeborgen -> gudeborg", function() {deepEqual( Stem("gudeborgen"), "gudeborg");});
test("gudehøvdingen -> gudehøvding", function() {deepEqual( Stem("gudehøvdingen"), "gudehøvding");});
test("gudekongen -> gudekong", function() {deepEqual( Stem("gudekongen"), "gudekong");});
test("gudekongens -> gudekong", function() {deepEqual( Stem("gudekongens"), "gudekong");});
test("gudekreftene -> gudekreft", function() {deepEqual( Stem("gudekreftene"), "gudekreft");});
test("guden -> gud", function() {deepEqual( Stem("guden"), "gud");});
test("gudene -> gud", function() {deepEqual( Stem("gudene"), "gud");});
test("gudenes -> gud", function() {deepEqual( Stem("gudenes"), "gud");});
test("gudepakket -> gudepakk", function() {deepEqual( Stem("gudepakket"), "gudepakk");});
test("guder -> gud", function() {deepEqual( Stem("guder"), "gud");});
test("gudeslekten -> gudeslekt", function() {deepEqual( Stem("gudeslekten"), "gudeslekt");});
test("gudeslekter -> gudeslekt", function() {deepEqual( Stem("gudeslekter"), "gudeslekt");});
test("gudespytt -> gudespytt", function() {deepEqual( Stem("gudespytt"), "gudespytt");});
test("gudinne -> gudinn", function() {deepEqual( Stem("gudinne"), "gudinn");});
test("gudinnen -> gudinn", function() {deepEqual( Stem("gudinnen"), "gudinn");});
test("gudinnene -> gudinn", function() {deepEqual( Stem("gudinnene"), "gudinn");});
test("gudinner -> gudinn", function() {deepEqual( Stem("gudinner"), "gudinn");});
test("gufse -> gufs", function() {deepEqual( Stem("gufse"), "gufs");});
test("gufser -> gufs", function() {deepEqual( Stem("gufser"), "gufs");});
test("gulating -> gulating", function() {deepEqual( Stem("gulating"), "gulating");});
test("gule -> gul", function() {deepEqual( Stem("gule"), "gul");});
test("gull -> gull", function() {deepEqual( Stem("gull"), "gull");});
test("gullbrikkespill -> gullbrikkespill", function() {deepEqual( Stem("gullbrikkespill"), "gullbrikkespill");});
test("gullbrua -> gullbru", function() {deepEqual( Stem("gullbrua"), "gullbru");});
test("gullbust -> gullbust", function() {deepEqual( Stem("gullbust"), "gullbust");});
test("gullbånd -> gullbånd", function() {deepEqual( Stem("gullbånd"), "gullbånd");});
test("gullet -> gull", function() {deepEqual( Stem("gullet"), "gull");});
test("gullfakse -> gullfaks", function() {deepEqual( Stem("gullfakse"), "gullfaks");});
test("gullhjelmen -> gullhjelm", function() {deepEqual( Stem("gullhjelmen"), "gullhjelm");});
test("gullhorn -> gullhorn", function() {deepEqual( Stem("gullhorn"), "gullhorn");});
test("gullhåret -> gullhår", function() {deepEqual( Stem("gullhåret"), "gullhår");});
test("gullklump -> gullklump", function() {deepEqual( Stem("gullklump"), "gullklump");});
test("gullregn -> gullregn", function() {deepEqual( Stem("gullregn"), "gullregn");});
test("gullringen -> gullring", function() {deepEqual( Stem("gullringen"), "gullring");});
test("gulltennene -> gulltenn", function() {deepEqual( Stem("gulltennene"), "gulltenn");});
test("gulltopp -> gulltopp", function() {deepEqual( Stem("gulltopp"), "gulltopp");});
test("gullveig -> gullv", function() {deepEqual( Stem("gullveig"), "gullv");});
test("gulne -> guln", function() {deepEqual( Stem("gulne"), "guln");});
test("gulv -> gulv", function() {deepEqual( Stem("gulv"), "gulv");});
test("gulvet -> gulv", function() {deepEqual( Stem("gulvet"), "gulv");});
test("gungne -> gungn", function() {deepEqual( Stem("gungne"), "gungn");});
test("gunnlod -> gunnlod", function() {deepEqual( Stem("gunnlod"), "gunnlod");});
test("gunst -> gunst", function() {deepEqual( Stem("gunst"), "gunst");});
test("gunstig -> gunst", function() {deepEqual( Stem("gunstig"), "gunst");});
test("gunstige -> gunst", function() {deepEqual( Stem("gunstige"), "gunst");});
test("gunstigere -> gunstiger", function() {deepEqual( Stem("gunstigere"), "gunstiger");});
test("gusten -> gust", function() {deepEqual( Stem("gusten"), "gust");});
test("gustne -> gustn", function() {deepEqual( Stem("gustne"), "gustn");});
test("gutt -> gutt", function() {deepEqual( Stem("gutt"), "gutt");});
test("guttebarnet -> guttebarn", function() {deepEqual( Stem("guttebarnet"), "guttebarn");});
test("gutten -> gutt", function() {deepEqual( Stem("gutten"), "gutt");});
test("guttene -> gutt", function() {deepEqual( Stem("guttene"), "gutt");});
test("gutter -> gutt", function() {deepEqual( Stem("gutter"), "gutt");});
test("gyger -> gyg", function() {deepEqual( Stem("gyger"), "gyg");});
test("gygra -> gygr", function() {deepEqual( Stem("gygra"), "gygr");});
test("gyldig -> gyld", function() {deepEqual( Stem("gyldig"), "gyld");});
test("gyldige -> gyld", function() {deepEqual( Stem("gyldige"), "gyld");});
test("gyldne -> gyldn", function() {deepEqual( Stem("gyldne"), "gyldn");});
test("gyllenbuste -> gyllenbust", function() {deepEqual( Stem("gyllenbuste"), "gyllenbust");});
test("gylve -> gylv", function() {deepEqual( Stem("gylve"), "gylv");});
test("gymes -> gym", function() {deepEqual( Stem("gymes"), "gym");});
test("gymesdatter -> gymesdatt", function() {deepEqual( Stem("gymesdatter"), "gymesdatt");});
test("gyver -> gyv", function() {deepEqual( Stem("gyver"), "gyv");});
test("gå -> gå", function() {deepEqual( Stem("gå"), "gå");});
test("går -> går", function() {deepEqual( Stem("går"), "går");});
test("gård -> gård", function() {deepEqual( Stem("gård"), "gård");});
test("gården -> gård", function() {deepEqual( Stem("gården"), "gård");});
test("gårder -> gård", function() {deepEqual( Stem("gårder"), "gård");});
test("gårdsfolket -> gårdsfolk", function() {deepEqual( Stem("gårdsfolket"), "gårdsfolk");});
test("gårdshundene -> gårdshund", function() {deepEqual( Stem("gårdshundene"), "gårdshund");});
test("gåsøya -> gåsøy", function() {deepEqual( Stem("gåsøya"), "gåsøy");});
test("gåtefulle -> gåtefull", function() {deepEqual( Stem("gåtefulle"), "gåtefull");});
test("gåtene -> gåt", function() {deepEqual( Stem("gåtene"), "gåt");});
test("gåter -> gåt", function() {deepEqual( Stem("gåter"), "gåt");});
test("gått -> gått", function() {deepEqual( Stem("gått"), "gått");});
test("gåve -> gåv", function() {deepEqual( Stem("gåve"), "gåv");});
test("gåver -> gåv", function() {deepEqual( Stem("gåver"), "gåv");});
test("gøteborg -> gøteborg", function() {deepEqual( Stem("gøteborg"), "gøteborg");});
test("h -> h", function() {deepEqual( Stem("h"), "h");});
test("ha -> ha", function() {deepEqual( Stem("ha"), "ha");});
test("haavind -> haavind", function() {deepEqual( Stem("haavind"), "haavind");});
test("habilitet -> habilit", function() {deepEqual( Stem("habilitet"), "habilit");});
test("habilitetsreglane -> habilitetsregl", function() {deepEqual( Stem("habilitetsreglane"), "habilitetsregl");});
test("habitat -> habitat", function() {deepEqual( Stem("habitat"), "habitat");});
test("hadde -> hadd", function() {deepEqual( Stem("hadde"), "hadd");});
test("hafslund -> hafslund", function() {deepEqual( Stem("hafslund"), "hafslund");});
test("haglskur -> haglskur", function() {deepEqual( Stem("haglskur"), "haglskur");});
test("haken -> hak", function() {deepEqual( Stem("haken"), "hak");});
test("hakk -> hakk", function() {deepEqual( Stem("hakk"), "hakk");});
test("hakon -> hakon", function() {deepEqual( Stem("hakon"), "hakon");});
test("haldast -> hald", function() {deepEqual( Stem("haldast"), "hald");});
test("halde -> hald", function() {deepEqual( Stem("halde"), "hald");});
test("halden -> hald", function() {deepEqual( Stem("halden"), "hald");});
test("haldenleia -> haldenlei", function() {deepEqual( Stem("haldenleia"), "haldenlei");});
test("haldne -> haldn", function() {deepEqual( Stem("haldne"), "haldn");});
test("haldningar -> haldning", function() {deepEqual( Stem("haldningar"), "haldning");});
test("hale -> hal", function() {deepEqual( Stem("hale"), "hal");});
test("halen -> hal", function() {deepEqual( Stem("halen"), "hal");});
test("haler -> hal", function() {deepEqual( Stem("haler"), "hal");});
test("hall -> hall", function() {deepEqual( Stem("hall"), "hall");});
test("hallen -> hall", function() {deepEqual( Stem("hallen"), "hall");});
test("halm -> halm", function() {deepEqual( Stem("halm"), "halm");});
test("hals -> hal", function() {deepEqual( Stem("hals"), "hal");});
test("halse -> hals", function() {deepEqual( Stem("halse"), "hals");});
test("halsen -> hals", function() {deepEqual( Stem("halsen"), "hals");});
test("halset -> hals", function() {deepEqual( Stem("halset"), "hals");});
test("halshugget -> halshugg", function() {deepEqual( Stem("halshugget"), "halshugg");});
test("halsringen -> halsring", function() {deepEqual( Stem("halsringen"), "halsring");});
test("halt -> halt", function() {deepEqual( Stem("halt"), "halt");});
test("haltende -> halt", function() {deepEqual( Stem("haltende"), "halt");});
test("halv -> halv", function() {deepEqual( Stem("halv"), "halv");});
test("halvdel -> halvdel", function() {deepEqual( Stem("halvdel"), "halvdel");});
test("halvdelen -> halvdel", function() {deepEqual( Stem("halvdelen"), "halvdel");});
test("halve -> halv", function() {deepEqual( Stem("halve"), "halv");});
test("halvfabrikata -> halvfabrikat", function() {deepEqual( Stem("halvfabrikata"), "halvfabrikat");});
test("halvgjort -> halvgjort", function() {deepEqual( Stem("halvgjort"), "halvgjort");});
test("halvparten -> halvpart", function() {deepEqual( Stem("halvparten"), "halvpart");});
test("halvsøvne -> halvsøvn", function() {deepEqual( Stem("halvsøvne"), "halvsøvn");});
test("halvt -> halv", function() {deepEqual( Stem("halvt"), "halv");});
test("halvtroll -> halvtroll", function() {deepEqual( Stem("halvtroll"), "halvtroll");});
test("halvveis -> halvveis", function() {deepEqual( Stem("halvveis"), "halvveis");});
test("halvår -> halvår", function() {deepEqual( Stem("halvår"), "halvår");});
test("halvårsvis -> halvårsvis", function() {deepEqual( Stem("halvårsvis"), "halvårsvis");});
test("ham -> ham", function() {deepEqual( Stem("ham"), "ham");});
test("hamburg -> hamburg", function() {deepEqual( Stem("hamburg"), "hamburg");});
test("hammen -> hamm", function() {deepEqual( Stem("hammen"), "hamm");});
test("hammer -> hamm", function() {deepEqual( Stem("hammer"), "hamm");});
test("hammeren -> hammer", function() {deepEqual( Stem("hammeren"), "hammer");});
test("hammerfest -> hammerfest", function() {deepEqual( Stem("hammerfest"), "hammerfest");});
test("hammerskaftet -> hammerskaft", function() {deepEqual( Stem("hammerskaftet"), "hammerskaft");});
test("hammerslag -> hammerslag", function() {deepEqual( Stem("hammerslag"), "hammerslag");});
test("hamrer -> hamr", function() {deepEqual( Stem("hamrer"), "hamr");});
test("hamsdokka -> hamsdokk", function() {deepEqual( Stem("hamsdokka"), "hamsdokk");});
test("han -> han", function() {deepEqual( Stem("han"), "han");});
test("hand -> hand", function() {deepEqual( Stem("hand"), "hand");});
test("handel -> handel", function() {deepEqual( Stem("handel"), "handel");});
test("handeland -> handeland", function() {deepEqual( Stem("handeland"), "handeland");});
test("handelen -> handel", function() {deepEqual( Stem("handelen"), "handel");});
test("handels -> handel", function() {deepEqual( Stem("handels"), "handel");});
test("handelsagenter -> handelsagent", function() {deepEqual( Stem("handelsagenter"), "handelsagent");});
test("handelsbedrifter -> handelsbedrift", function() {deepEqual( Stem("handelsbedrifter"), "handelsbedrift");});
test("handelsdepartementet -> handelsdepartement", function() {deepEqual( Stem("handelsdepartementet"), "handelsdepartement");});
test("handelshindringer -> handelshindring", function() {deepEqual( Stem("handelshindringer"), "handelshindring");});
test("handelsorganisasjon -> handelsorganisasjon", function() {deepEqual( Stem("handelsorganisasjon"), "handelsorganisasjon");});
test("handelspartnere -> handelspartner", function() {deepEqual( Stem("handelspartnere"), "handelspartner");});
test("handheva -> handhev", function() {deepEqual( Stem("handheva"), "handhev");});
test("handheve -> handhev", function() {deepEqual( Stem("handheve"), "handhev");});
test("handhevinga -> handheving", function() {deepEqual( Stem("handhevinga"), "handheving");});
test("handkasser -> handkass", function() {deepEqual( Stem("handkasser"), "handkass");});
test("handla -> handl", function() {deepEqual( Stem("handla"), "handl");});
test("handlar -> handl", function() {deepEqual( Stem("handlar"), "handl");});
test("handle -> handl", function() {deepEqual( Stem("handle"), "handl");});
test("handleevne -> handleevn", function() {deepEqual( Stem("handleevne"), "handleevn");});
test("handlefridom -> handlefridom", function() {deepEqual( Stem("handlefridom"), "handlefridom");});
test("handlefrihet -> handlefri", function() {deepEqual( Stem("handlefrihet"), "handlefri");});
test("handleplikt -> handleplikt", function() {deepEqual( Stem("handleplikt"), "handleplikt");});
test("handles -> handl", function() {deepEqual( Stem("handles"), "handl");});
test("handlet -> handl", function() {deepEqual( Stem("handlet"), "handl");});
test("handling -> handling", function() {deepEqual( Stem("handling"), "handling");});
test("handlinga -> handling", function() {deepEqual( Stem("handlinga"), "handling");});
test("handlinger -> handling", function() {deepEqual( Stem("handlinger"), "handling");});
test("handlingsfrist -> handlingsfrist", function() {deepEqual( Stem("handlingsfrist"), "handlingsfrist");});
test("handlingsprogram -> handlingsprogram", function() {deepEqual( Stem("handlingsprogram"), "handlingsprogram");});
test("handlingsprogrammer -> handlingsprogramm", function() {deepEqual( Stem("handlingsprogrammer"), "handlingsprogramm");});
test("handlingsrom -> handlingsrom", function() {deepEqual( Stem("handlingsrom"), "handlingsrom");});
test("handlingsrommet -> handlingsromm", function() {deepEqual( Stem("handlingsrommet"), "handlingsromm");});
test("handpantsetjing -> handpantsetjing", function() {deepEqual( Stem("handpantsetjing"), "handpantsetjing");});
test("handtering -> handtering", function() {deepEqual( Stem("handtering"), "handtering");});
test("handterleg -> handter", function() {deepEqual( Stem("handterleg"), "handter");});
test("handverkar -> handverk", function() {deepEqual( Stem("handverkar"), "handverk");});
test("handverkarar -> handverkar", function() {deepEqual( Stem("handverkarar"), "handverkar");});
test("handverkartenestelova -> handverkartenest", function() {deepEqual( Stem("handverkartenestelova"), "handverkartenest");});
test("handverkartenester -> handverkartenest", function() {deepEqual( Stem("handverkartenester"), "handverkartenest");});
test("hane -> han", function() {deepEqual( Stem("hane"), "han");});
test("hanegal -> hanegal", function() {deepEqual( Stem("hanegal"), "hanegal");});
test("hanen -> han", function() {deepEqual( Stem("hanen"), "han");});
test("haner -> han", function() {deepEqual( Stem("haner"), "han");});
test("hang -> hang", function() {deepEqual( Stem("hang"), "hang");});
test("hanken -> hank", function() {deepEqual( Stem("hanken"), "hank");});
test("hans -> han", function() {deepEqual( Stem("hans"), "han");});
test("hansker -> hansk", function() {deepEqual( Stem("hansker"), "hansk");});
test("hanstholm -> hanstholm", function() {deepEqual( Stem("hanstholm"), "hanstholm");});
test("har -> har", function() {deepEqual( Stem("har"), "har");});
test("harald -> harald", function() {deepEqual( Stem("harald"), "harald");});
test("hard -> hard", function() {deepEqual( Stem("hard"), "hard");});
test("hardare -> hardar", function() {deepEqual( Stem("hardare"), "hardar");});
test("harde -> hard", function() {deepEqual( Stem("harde"), "hard");});
test("hardere -> harder", function() {deepEqual( Stem("hardere"), "harder");});
test("hardfør -> hardfør", function() {deepEqual( Stem("hardfør"), "hardfør");});
test("hardt -> hard", function() {deepEqual( Stem("hardt"), "hard");});
test("harer -> har", function() {deepEqual( Stem("harer"), "har");});
test("harker -> hark", function() {deepEqual( Stem("harker"), "hark");});
test("harlem -> harlem", function() {deepEqual( Stem("harlem"), "harlem");});
test("harme -> harm", function() {deepEqual( Stem("harme"), "harm");});
test("harmonisere -> harmoniser", function() {deepEqual( Stem("harmonisere"), "harmoniser");});
test("harmonisering -> harmonisering", function() {deepEqual( Stem("harmonisering"), "harmonisering");});
test("harsk -> harsk", function() {deepEqual( Stem("harsk"), "harsk");});
test("harstad -> harstad", function() {deepEqual( Stem("harstad"), "harstad");});
test("hasteordrer -> hasteordr", function() {deepEqual( Stem("hasteordrer"), "hasteordr");});
test("haster -> hast", function() {deepEqual( Stem("haster"), "hast");});
test("hastighet -> hast", function() {deepEqual( Stem("hastighet"), "hast");});
test("hastverk -> hastverk", function() {deepEqual( Stem("hastverk"), "hastverk");});
test("hat -> hat", function() {deepEqual( Stem("hat"), "hat");});
test("hate -> hat", function() {deepEqual( Stem("hate"), "hat");});
test("hater -> hat", function() {deepEqual( Stem("hater"), "hat");});
test("hatet -> hat", function() {deepEqual( Stem("hatet"), "hat");});
test("hatt -> hatt", function() {deepEqual( Stem("hatt"), "hatt");});
test("hattebrem -> hattebrem", function() {deepEqual( Stem("hattebrem"), "hattebrem");});
test("hattebremmen -> hattebremm", function() {deepEqual( Stem("hattebremmen"), "hattebremm");});
test("hatten -> hatt", function() {deepEqual( Stem("hatten"), "hatt");});
test("haug -> haug", function() {deepEqual( Stem("haug"), "haug");});
test("haugen -> haug", function() {deepEqual( Stem("haugen"), "haug");});
test("hauger -> haug", function() {deepEqual( Stem("hauger"), "haug");});
test("haugesund -> haugesund", function() {deepEqual( Stem("haugesund"), "haugesund");});
test("hauk -> hauk", function() {deepEqual( Stem("hauk"), "hauk");});
test("hauker -> hauk", function() {deepEqual( Stem("hauker"), "hauk");});
test("hausten -> haust", function() {deepEqual( Stem("hausten"), "haust");});
test("hav -> hav", function() {deepEqual( Stem("hav"), "hav");});
test("havarer -> havar", function() {deepEqual( Stem("havarer"), "havar");});
test("havarere -> havarer", function() {deepEqual( Stem("havarere"), "havarer");});
test("havet -> hav", function() {deepEqual( Stem("havet"), "hav");});
test("havfolk -> havfolk", function() {deepEqual( Stem("havfolk"), "havfolk");});
test("havfruer -> havfru", function() {deepEqual( Stem("havfruer"), "havfru");});
test("havgapet -> havgap", function() {deepEqual( Stem("havgapet"), "havgap");});
test("havheksen -> havheks", function() {deepEqual( Stem("havheksen"), "havheks");});
test("havkongen -> havkong", function() {deepEqual( Stem("havkongen"), "havkong");});
test("havkongens -> havkong", function() {deepEqual( Stem("havkongens"), "havkong");});
test("havmenn -> havmenn", function() {deepEqual( Stem("havmenn"), "havmenn");});
test("havmennene -> havmenn", function() {deepEqual( Stem("havmennene"), "havmenn");});
test("havn -> havn", function() {deepEqual( Stem("havn"), "havn");});
test("havna -> havn", function() {deepEqual( Stem("havna"), "havn");});
test("havnas -> havn", function() {deepEqual( Stem("havnas"), "havn");});
test("havne -> havn", function() {deepEqual( Stem("havne"), "havn");});
test("havneaktivitetene -> havneaktivitet", function() {deepEqual( Stem("havneaktivitetene"), "havneaktivitet");});
test("havneaktiviteter -> havneaktivitet", function() {deepEqual( Stem("havneaktiviteter"), "havneaktivitet");});
test("havneanlegg -> havneanlegg", function() {deepEqual( Stem("havneanlegg"), "havneanlegg");});
test("havneanløp -> havneanløp", function() {deepEqual( Stem("havneanløp"), "havneanløp");});
test("havneareal -> havneareal", function() {deepEqual( Stem("havneareal"), "havneareal");});
test("havnearealene -> havneareal", function() {deepEqual( Stem("havnearealene"), "havneareal");});
test("havnearealer -> havneareal", function() {deepEqual( Stem("havnearealer"), "havneareal");});
test("havnearealet -> havneareal", function() {deepEqual( Stem("havnearealet"), "havneareal");});
test("havneavgiftene -> havneavgift", function() {deepEqual( Stem("havneavgiftene"), "havneavgift");});
test("havneavgifter -> havneavgift", function() {deepEqual( Stem("havneavgifter"), "havneavgift");});
test("havneavgiftssystemet -> havneavgiftssystem", function() {deepEqual( Stem("havneavgiftssystemet"), "havneavgiftssystem");});
test("havneavsnitt -> havneavsnitt", function() {deepEqual( Stem("havneavsnitt"), "havneavsnitt");});
test("havneavsnittene -> havneavsnitt", function() {deepEqual( Stem("havneavsnittene"), "havneavsnitt");});
test("havneavsnittet -> havneavsnitt", function() {deepEqual( Stem("havneavsnittet"), "havneavsnitt");});
test("havnebassenget -> havnebasseng", function() {deepEqual( Stem("havnebassenget"), "havnebasseng");});
test("havnebehov -> havnebehov", function() {deepEqual( Stem("havnebehov"), "havnebehov");});
test("havnebehovet -> havnebehov", function() {deepEqual( Stem("havnebehovet"), "havnebehov");});
test("havnebruker -> havnebruk", function() {deepEqual( Stem("havnebruker"), "havnebruk");});
test("havneby -> havneby", function() {deepEqual( Stem("havneby"), "havneby");});
test("havnebyen -> havneby", function() {deepEqual( Stem("havnebyen"), "havneby");});
test("havnebyene -> havneby", function() {deepEqual( Stem("havnebyene"), "havneby");});
test("havnebyer -> havneby", function() {deepEqual( Stem("havnebyer"), "havneby");});
test("havnebyscenariet -> havnebyscenari", function() {deepEqual( Stem("havnebyscenariet"), "havnebyscenari");});
test("havnedistrikt -> havnedistrikt", function() {deepEqual( Stem("havnedistrikt"), "havnedistrikt");});
test("havnedistriktene -> havnedistrikt", function() {deepEqual( Stem("havnedistriktene"), "havnedistrikt");});
test("havnedistrikter -> havnedistrikt", function() {deepEqual( Stem("havnedistrikter"), "havnedistrikt");});
test("havnedistriktet -> havnedistrikt", function() {deepEqual( Stem("havnedistriktet"), "havnedistrikt");});
test("havnedistriktets -> havnedistrikt", function() {deepEqual( Stem("havnedistriktets"), "havnedistrikt");});
test("havnedrift -> havnedrift", function() {deepEqual( Stem("havnedrift"), "havnedrift");});
test("havnedriften -> havnedrift", function() {deepEqual( Stem("havnedriften"), "havnedrift");});
test("havneeffektivitet -> havneeffektivit", function() {deepEqual( Stem("havneeffektivitet"), "havneeffektivit");});
test("havneeier -> havneei", function() {deepEqual( Stem("havneeier"), "havneei");});
test("havneeiere -> havneeier", function() {deepEqual( Stem("havneeiere"), "havneeier");});
test("havneenheter -> havneen", function() {deepEqual( Stem("havneenheter"), "havneen");});
test("havneforbund -> havneforbund", function() {deepEqual( Stem("havneforbund"), "havneforbund");});
test("havneforbundets -> havneforbund", function() {deepEqual( Stem("havneforbundets"), "havneforbund");});
test("havneformål -> havneformål", function() {deepEqual( Stem("havneformål"), "havneformål");});
test("havneforvaltningen -> havneforvaltning", function() {deepEqual( Stem("havneforvaltningen"), "havneforvaltning");});
test("havnefunksjonene -> havnefunksjon", function() {deepEqual( Stem("havnefunksjonene"), "havnefunksjon");});
test("havnefunksjoner -> havnefunksjon", function() {deepEqual( Stem("havnefunksjoner"), "havnefunksjon");});
test("havnefylkene -> havnefylk", function() {deepEqual( Stem("havnefylkene"), "havnefylk");});
test("havnefylker -> havnefylk", function() {deepEqual( Stem("havnefylker"), "havnefylk");});
test("havnehagen -> havnehag", function() {deepEqual( Stem("havnehagen"), "havnehag");});
test("havneinfrastrukturen -> havneinfrastruktur", function() {deepEqual( Stem("havneinfrastrukturen"), "havneinfrastruktur");});
test("havneinnretningene -> havneinnretning", function() {deepEqual( Stem("havneinnretningene"), "havneinnretning");});
test("havneinnretninger -> havneinnretning", function() {deepEqual( Stem("havneinnretninger"), "havneinnretning");});
test("havneinteresser -> havneinteress", function() {deepEqual( Stem("havneinteresser"), "havneinteress");});
test("havnekapasitet -> havnekapasit", function() {deepEqual( Stem("havnekapasitet"), "havnekapasit");});
test("havnekassa -> havnekass", function() {deepEqual( Stem("havnekassa"), "havnekass");});
test("havnekasse -> havnekass", function() {deepEqual( Stem("havnekasse"), "havnekass");});
test("havnekassemidler -> havnekassemidl", function() {deepEqual( Stem("havnekassemidler"), "havnekassemidl");});
test("havnekassen -> havnekass", function() {deepEqual( Stem("havnekassen"), "havnekass");});
test("havnekassene -> havnekass", function() {deepEqual( Stem("havnekassene"), "havnekass");});
test("havnekassens -> havnekass", function() {deepEqual( Stem("havnekassens"), "havnekass");});
test("havnelokalisering -> havnelokalisering", function() {deepEqual( Stem("havnelokalisering"), "havnelokalisering");});
test("havneloven -> havn", function() {deepEqual( Stem("havneloven"), "havn");});
test("havnelovens -> havn", function() {deepEqual( Stem("havnelovens"), "havn");});
test("havneløsning -> havneløsning", function() {deepEqual( Stem("havneløsning"), "havneløsning");});
test("havneløsningene -> havneløsning", function() {deepEqual( Stem("havneløsningene"), "havneløsning");});
test("havneløsninger -> havneløsning", function() {deepEqual( Stem("havneløsninger"), "havneløsning");});
test("havnemessig -> havnemess", function() {deepEqual( Stem("havnemessig"), "havnemess");});
test("havnemyndighetene -> havnemynd", function() {deepEqual( Stem("havnemyndighetene"), "havnemynd");});
test("havnemyndigheter -> havnemynd", function() {deepEqual( Stem("havnemyndigheter"), "havnemynd");});
test("havnemønster -> havnemønst", function() {deepEqual( Stem("havnemønster"), "havnemønst");});
test("havnen -> havn", function() {deepEqual( Stem("havnen"), "havn");});
test("havnene -> havn", function() {deepEqual( Stem("havnene"), "havn");});
test("havnenes -> havn", function() {deepEqual( Stem("havnenes"), "havn");});
test("havnens -> havn", function() {deepEqual( Stem("havnens"), "havn");});
test("havneområdene -> havneområd", function() {deepEqual( Stem("havneområdene"), "havneområd");});
test("havneområder -> havneområd", function() {deepEqual( Stem("havneområder"), "havneområd");});
test("havneområdet -> havneområd", function() {deepEqual( Stem("havneområdet"), "havneområd");});
test("havneoperatørene -> havneoperatør", function() {deepEqual( Stem("havneoperatørene"), "havneoperatør");});
test("havneoperatørenes -> havneoperatør", function() {deepEqual( Stem("havneoperatørenes"), "havneoperatør");});
test("havneoperatører -> havneoperatør", function() {deepEqual( Stem("havneoperatører"), "havneoperatør");});
test("havneoppgaver -> havneoppgav", function() {deepEqual( Stem("havneoppgaver"), "havneoppgav");});
test("havneplan -> havneplan", function() {deepEqual( Stem("havneplan"), "havneplan");});
test("havneplanlegging -> havneplanlegging", function() {deepEqual( Stem("havneplanlegging"), "havneplanlegging");});
test("havnepolitikk -> havnepolitikk", function() {deepEqual( Stem("havnepolitikk"), "havnepolitikk");});
test("havnepolitikken -> havnepolitikk", function() {deepEqual( Stem("havnepolitikken"), "havnepolitikk");});
test("havner -> havn", function() {deepEqual( Stem("havner"), "havn");});
test("havnerelatert -> havnerelater", function() {deepEqual( Stem("havnerelatert"), "havnerelater");});
test("havnerettet -> havnerett", function() {deepEqual( Stem("havnerettet"), "havnerett");});
test("havners -> havn", function() {deepEqual( Stem("havners"), "havn");});
test("havneråd -> havneråd", function() {deepEqual( Stem("havneråd"), "havneråd");});
test("havnerådet -> havneråd", function() {deepEqual( Stem("havnerådet"), "havneråd");});
test("havnerådets -> havneråd", function() {deepEqual( Stem("havnerådets"), "havneråd");});
test("havnesaker -> havnesak", function() {deepEqual( Stem("havnesaker"), "havnesak");});
test("havnesamarbeid -> havnesamarbeid", function() {deepEqual( Stem("havnesamarbeid"), "havnesamarbeid");});
test("havnesamarbeide -> havnesamarbeid", function() {deepEqual( Stem("havnesamarbeide"), "havnesamarbeid");});
test("havnesamarbeider -> havnesamarbeid", function() {deepEqual( Stem("havnesamarbeider"), "havnesamarbeid");});
test("havnesamarbeidet -> havnesamarbeid", function() {deepEqual( Stem("havnesamarbeidet"), "havnesamarbeid");});
test("havnesammenheng -> havnesammenheng", function() {deepEqual( Stem("havnesammenheng"), "havnesammenheng");});
test("havnescenariene -> havnescenari", function() {deepEqual( Stem("havnescenariene"), "havnescenari");});
test("havnesektoren -> havnesektor", function() {deepEqual( Stem("havnesektoren"), "havnesektor");});
test("havneselskaper -> havneselskap", function() {deepEqual( Stem("havneselskaper"), "havneselskap");});
test("havnesiden -> havnesid", function() {deepEqual( Stem("havnesiden"), "havnesid");});
test("havnespørsmål -> havnespørsmål", function() {deepEqual( Stem("havnespørsmål"), "havnespørsmål");});
test("havnestatistikk -> havnestatistikk", function() {deepEqual( Stem("havnestatistikk"), "havnestatistikk");});
test("havnestruktur -> havnestruktur", function() {deepEqual( Stem("havnestruktur"), "havnestruktur");});
test("havnestrukturen -> havnestruktur", function() {deepEqual( Stem("havnestrukturen"), "havnestruktur");});
test("havnestrukturer -> havnestruktur", function() {deepEqual( Stem("havnestrukturer"), "havnestruktur");});
test("havnestyre -> havnestyr", function() {deepEqual( Stem("havnestyre"), "havnestyr");});
test("havnestyrer -> havnestyr", function() {deepEqual( Stem("havnestyrer"), "havnestyr");});
test("havnestyret -> havnestyr", function() {deepEqual( Stem("havnestyret"), "havnestyr");});
test("havnestyrets -> havnestyr", function() {deepEqual( Stem("havnestyrets"), "havnestyr");});
test("havnesystem -> havnesystem", function() {deepEqual( Stem("havnesystem"), "havnesystem");});
test("havneterminal -> havneterminal", function() {deepEqual( Stem("havneterminal"), "havneterminal");});
test("havneterminalen -> havneterminal", function() {deepEqual( Stem("havneterminalen"), "havneterminal");});
test("havneterminalene -> havneterminal", function() {deepEqual( Stem("havneterminalene"), "havneterminal");});
test("havnetilbud -> havnetilbud", function() {deepEqual( Stem("havnetilbud"), "havnetilbud");});
test("havnetilbudet -> havnetilbud", function() {deepEqual( Stem("havnetilbudet"), "havnetilbud");});
test("havnetiltakene -> havnetiltak", function() {deepEqual( Stem("havnetiltakene"), "havnetiltak");});
test("havnetjenesten -> havnetjenest", function() {deepEqual( Stem("havnetjenesten"), "havnetjenest");});
test("havnetjenestene -> havnetjenest", function() {deepEqual( Stem("havnetjenestene"), "havnetjenest");});
test("havnetjenester -> havnetjenest", function() {deepEqual( Stem("havnetjenester"), "havnetjenest");});
test("havnetrafikk -> havnetrafikk", function() {deepEqual( Stem("havnetrafikk"), "havnetrafikk");});
test("havnetrafikken -> havnetrafikk", function() {deepEqual( Stem("havnetrafikken"), "havnetrafikk");});
test("havnetyper -> havnetyp", function() {deepEqual( Stem("havnetyper"), "havnetyp");});
test("havneutbygging -> havneutbygging", function() {deepEqual( Stem("havneutbygging"), "havneutbygging");});
test("havneutbyggingen -> havneutbygging", function() {deepEqual( Stem("havneutbyggingen"), "havneutbygging");});
test("havneutflytting -> havneutflytting", function() {deepEqual( Stem("havneutflytting"), "havneutflytting");});
test("havneutvalget -> havneutvalg", function() {deepEqual( Stem("havneutvalget"), "havneutvalg");});
test("havneutvalgets -> havneutvalg", function() {deepEqual( Stem("havneutvalgets"), "havneutvalg");});
test("havneutvikling -> havneutvikling", function() {deepEqual( Stem("havneutvikling"), "havneutvikling");});
test("havneutviklingen -> havneutvikling", function() {deepEqual( Stem("havneutviklingen"), "havneutvikling");});
test("havnevalg -> havnevalg", function() {deepEqual( Stem("havnevalg"), "havnevalg");});
test("havnevesen -> havneves", function() {deepEqual( Stem("havnevesen"), "havneves");});
test("havnevesenet -> havnevesen", function() {deepEqual( Stem("havnevesenet"), "havnevesen");});
test("havnevesenets -> havnevesen", function() {deepEqual( Stem("havnevesenets"), "havnevesen");});
test("havnevesens -> havneves", function() {deepEqual( Stem("havnevesens"), "havneves");});
test("havnevirksomhet -> havnevirksom", function() {deepEqual( Stem("havnevirksomhet"), "havnevirksom");});
test("havnevirksomheten -> havnevirksom", function() {deepEqual( Stem("havnevirksomheten"), "havnevirksom");});
test("havnevirksomhetene -> havnevirksom", function() {deepEqual( Stem("havnevirksomhetene"), "havnevirksom");});
test("havneøkonomi -> havneøkonomi", function() {deepEqual( Stem("havneøkonomi"), "havneøkonomi");});
test("havns -> havn", function() {deepEqual( Stem("havns"), "havn");});
test("havre -> havr", function() {deepEqual( Stem("havre"), "havr");});
test("havs -> hav", function() {deepEqual( Stem("havs"), "hav");});
test("heder -> hed", function() {deepEqual( Stem("heder"), "hed");});
test("hedmark -> hedmark", function() {deepEqual( Stem("hedmark"), "hedmark");});
test("hefta -> heft", function() {deepEqual( Stem("hefta"), "heft");});
test("heftar -> heft", function() {deepEqual( Stem("heftar"), "heft");});
test("heftast -> heft", function() {deepEqual( Stem("heftast"), "heft");});
test("hefte -> heft", function() {deepEqual( Stem("hefte"), "heft");});
test("hefteform -> hefteform", function() {deepEqual( Stem("hefteform"), "hefteform");});
test("hefter -> heft", function() {deepEqual( Stem("hefter"), "heft");});
test("heftet -> heft", function() {deepEqual( Stem("heftet"), "heft");});
test("hei -> hei", function() {deepEqual( Stem("hei"), "hei");});
test("heia -> heia", function() {deepEqual( Stem("heia"), "heia");});
test("heider -> heid", function() {deepEqual( Stem("heider"), "heid");});
test("heidrun -> heidrun", function() {deepEqual( Stem("heidrun"), "heidrun");});
test("heiene -> heien", function() {deepEqual( Stem("heiene"), "heien");});
test("heildagsmøte -> heildagsmøt", function() {deepEqual( Stem("heildagsmøte"), "heildagsmøt");});
test("heile -> heil", function() {deepEqual( Stem("heile"), "heil");});
test("heilskapleg -> heilskap", function() {deepEqual( Stem("heilskapleg"), "heilskap");});
test("heilt -> heilt", function() {deepEqual( Stem("heilt"), "heilt");});
test("heilårsbustader -> heilårsbustad", function() {deepEqual( Stem("heilårsbustader"), "heilårsbustad");});
test("heim -> heim", function() {deepEqual( Stem("heim"), "heim");});
test("heimdall -> heimdall", function() {deepEqual( Stem("heimdall"), "heimdall");});
test("heimdalls -> heimdall", function() {deepEqual( Stem("heimdalls"), "heimdall");});
test("heime -> heim", function() {deepEqual( Stem("heime"), "heim");});
test("heimekontor -> heimekontor", function() {deepEqual( Stem("heimekontor"), "heimekontor");});
test("heimel -> heimel", function() {deepEqual( Stem("heimel"), "heimel");});
test("heimelen -> heimel", function() {deepEqual( Stem("heimelen"), "heimel");});
test("heimelsdokument -> heimelsdokument", function() {deepEqual( Stem("heimelsdokument"), "heimelsdokument");});
test("heimelsdokumenta -> heimelsdokument", function() {deepEqual( Stem("heimelsdokumenta"), "heimelsdokument");});
test("heimelshavar -> heimelshav", function() {deepEqual( Stem("heimelshavar"), "heimelshav");});
test("heimelsoverføring -> heimelsoverføring", function() {deepEqual( Stem("heimelsoverføring"), "heimelsoverføring");});
test("heimelsovergang -> heimelsovergang", function() {deepEqual( Stem("heimelsovergang"), "heimelsovergang");});
test("heimen -> heim", function() {deepEqual( Stem("heimen"), "heim");});
test("heimesider -> heimesid", function() {deepEqual( Stem("heimesider"), "heimesid");});
test("heimlar -> heiml", function() {deepEqual( Stem("heimlar"), "heiml");});
test("heise -> heis", function() {deepEqual( Stem("heise"), "heis");});
test("heisen -> heis", function() {deepEqual( Stem("heisen"), "heis");});
test("heiser -> heis", function() {deepEqual( Stem("heiser"), "heis");});
test("heises -> heis", function() {deepEqual( Stem("heises"), "heis");});
test("heiter -> heit", function() {deepEqual( Stem("heiter"), "heit");});
test("heks -> heks", function() {deepEqual( Stem("heks"), "heks");});
test("heksen -> heks", function() {deepEqual( Stem("heksen"), "heks");});
test("hekser -> heks", function() {deepEqual( Stem("hekser"), "heks");});
test("hel -> hel", function() {deepEqual( Stem("hel"), "hel");});
test("helagt -> helagt", function() {deepEqual( Stem("helagt"), "helagt");});
test("helblinde -> helblind", function() {deepEqual( Stem("helblinde"), "helblind");});
test("held -> held", function() {deepEqual( Stem("held"), "held");});
test("heldagsmøter -> heldagsmøt", function() {deepEqual( Stem("heldagsmøter"), "heldagsmøt");});
test("heldig -> held", function() {deepEqual( Stem("heldig"), "held");});
test("heldige -> held", function() {deepEqual( Stem("heldige"), "held");});
test("heldigvis -> heldigvis", function() {deepEqual( Stem("heldigvis"), "heldigvis");});
test("hele -> hel", function() {deepEqual( Stem("hele"), "hel");});
test("helgedag -> helgedag", function() {deepEqual( Stem("helgedag"), "helgedag");});
test("helgedagar -> helgedag", function() {deepEqual( Stem("helgedagar"), "helgedag");});
test("helhet -> hel", function() {deepEqual( Stem("helhet"), "hel");});
test("helhetlig -> helhet", function() {deepEqual( Stem("helhetlig"), "helhet");});
test("helhetlige -> helhet", function() {deepEqual( Stem("helhetlige"), "helhet");});
test("helhetsvurdering -> helhetsvurdering", function() {deepEqual( Stem("helhetsvurdering"), "helhetsvurdering");});
test("helhunden -> helhund", function() {deepEqual( Stem("helhunden"), "helhund");});
test("hell -> hell", function() {deepEqual( Stem("hell"), "hell");});
test("heller -> hell", function() {deepEqual( Stem("heller"), "hell");});
test("hellet -> hell", function() {deepEqual( Stem("hellet"), "hell");});
test("hellig -> hel", function() {deepEqual( Stem("hellig"), "hel");});
test("hellige -> hel", function() {deepEqual( Stem("hellige"), "hel");});
test("hels -> hel", function() {deepEqual( Stem("hels"), "hel");});
test("helse -> hels", function() {deepEqual( Stem("helse"), "hels");});
test("helsefarlege -> helsefar", function() {deepEqual( Stem("helsefarlege"), "helsefar");});
test("helsesituasjon -> helsesituasjon", function() {deepEqual( Stem("helsesituasjon"), "helsesituasjon");});
test("helst -> helst", function() {deepEqual( Stem("helst"), "helst");});
test("helt -> helt", function() {deepEqual( Stem("helt"), "helt");});
test("heltedåder -> heltedåd", function() {deepEqual( Stem("heltedåder"), "heltedåd");});
test("heltegjerninger -> heltegjerning", function() {deepEqual( Stem("heltegjerninger"), "heltegjerning");});
test("heltene -> helt", function() {deepEqual( Stem("heltene"), "helt");});
test("helter -> helt", function() {deepEqual( Stem("helter"), "helt");});
test("heltidsansatte -> heltidsansatt", function() {deepEqual( Stem("heltidsansatte"), "heltidsansatt");});
test("heltidsstilling -> heltidsstilling", function() {deepEqual( Stem("heltidsstilling"), "heltidsstilling");});
test("helveien -> helvei", function() {deepEqual( Stem("helveien"), "helvei");});
test("hemmelege -> hemm", function() {deepEqual( Stem("hemmelege"), "hemm");});
test("hemmeleghald -> hemmeleghald", function() {deepEqual( Stem("hemmeleghald"), "hemmeleghald");});
test("hemmelig -> hemm", function() {deepEqual( Stem("hemmelig"), "hemm");});
test("hemmelige -> hemm", function() {deepEqual( Stem("hemmelige"), "hemm");});
test("hemmelighet -> hemm", function() {deepEqual( Stem("hemmelighet"), "hemm");});
test("hemmeligheten -> hemm", function() {deepEqual( Stem("hemmeligheten"), "hemm");});
test("hemmeligheter -> hemm", function() {deepEqual( Stem("hemmeligheter"), "hemm");});
test("hemmelighetsfulle -> hemmelighetsfull", function() {deepEqual( Stem("hemmelighetsfulle"), "hemmelighetsfull");});
test("hen -> hen", function() {deepEqual( Stem("hen"), "hen");});
test("hende -> hend", function() {deepEqual( Stem("hende"), "hend");});
test("hendene -> hend", function() {deepEqual( Stem("hendene"), "hend");});
test("hender -> hend", function() {deepEqual( Stem("hender"), "hend");});
test("hending -> hending", function() {deepEqual( Stem("hending"), "hending");});
test("hendt -> hend", function() {deepEqual( Stem("hendt"), "hend");});
test("hendte -> hend", function() {deepEqual( Stem("hendte"), "hend");});
test("henføres -> henfør", function() {deepEqual( Stem("henføres"), "henfør");});
test("henført -> henført", function() {deepEqual( Stem("henført"), "henført");});
test("heng -> heng", function() {deepEqual( Stem("heng"), "heng");});
test("henge -> heng", function() {deepEqual( Stem("henge"), "heng");});
test("hengekjeft -> hengekjeft", function() {deepEqual( Stem("hengekjeft"), "hengekjeft");});
test("hengende -> heng", function() {deepEqual( Stem("hengende"), "heng");});
test("henger -> heng", function() {deepEqual( Stem("henger"), "heng");});
test("henges -> heng", function() {deepEqual( Stem("henges"), "heng");});
test("henhold -> henhold", function() {deepEqual( Stem("henhold"), "henhold");});
test("henholdsvis -> henholdsvis", function() {deepEqual( Stem("henholdsvis"), "henholdsvis");});
test("henne -> henn", function() {deepEqual( Stem("henne"), "henn");});
test("hennes -> henn", function() {deepEqual( Stem("hennes"), "henn");});
test("henning -> henning", function() {deepEqual( Stem("henning"), "henning");});
test("henseende -> hense", function() {deepEqual( Stem("henseende"), "hense");});
test("hensett -> hensett", function() {deepEqual( Stem("hensett"), "hensett");});
test("hensettingsspor -> hensettingsspor", function() {deepEqual( Stem("hensettingsspor"), "hensettingsspor");});
test("hensikt -> hensikt", function() {deepEqual( Stem("hensikt"), "hensikt");});
test("hensikten -> hensikt", function() {deepEqual( Stem("hensikten"), "hensikt");});
test("hensiktsmessig -> hensiktsmess", function() {deepEqual( Stem("hensiktsmessig"), "hensiktsmess");});
test("hensiktsmessige -> hensiktsmess", function() {deepEqual( Stem("hensiktsmessige"), "hensiktsmess");});
test("hensiktsmessighetsnorm -> hensiktsmessighetsnorm", function() {deepEqual( Stem("hensiktsmessighetsnorm"), "hensiktsmessighetsnorm");});
test("hensiktsmessighetssider -> hensiktsmessighetssid", function() {deepEqual( Stem("hensiktsmessighetssider"), "hensiktsmessighetssid");});
test("henstille -> henstill", function() {deepEqual( Stem("henstille"), "henstill");});
test("henstilling -> henstilling", function() {deepEqual( Stem("henstilling"), "henstilling");});
test("hensyn -> hensyn", function() {deepEqual( Stem("hensyn"), "hensyn");});
test("hensynene -> hensyn", function() {deepEqual( Stem("hensynene"), "hensyn");});
test("hensynet -> hensyn", function() {deepEqual( Stem("hensynet"), "hensyn");});
test("hensynsløst -> hensynsløst", function() {deepEqual( Stem("hensynsløst"), "hensynsløst");});
test("hensynta -> hensynt", function() {deepEqual( Stem("hensynta"), "hensynt");});
test("hensyntas -> hensynt", function() {deepEqual( Stem("hensyntas"), "hensynt");});
test("henta -> hent", function() {deepEqual( Stem("henta"), "hent");});
test("hentar -> hent", function() {deepEqual( Stem("hentar"), "hent");});
test("hentast -> hent", function() {deepEqual( Stem("hentast"), "hent");});
test("hente -> hent", function() {deepEqual( Stem("hente"), "hent");});
test("henter -> hent", function() {deepEqual( Stem("henter"), "hent");});
test("hentes -> hent", function() {deepEqual( Stem("hentes"), "hent");});
test("hentet -> hent", function() {deepEqual( Stem("hentet"), "hent");});
test("henting -> henting", function() {deepEqual( Stem("henting"), "henting");});
test("henvendelser -> henvend", function() {deepEqual( Stem("henvendelser"), "henvend");});
test("henviser -> henvis", function() {deepEqual( Stem("henviser"), "henvis");});
test("henvises -> henvis", function() {deepEqual( Stem("henvises"), "henvis");});
test("henvisning -> henvisning", function() {deepEqual( Stem("henvisning"), "henvisning");});
test("henvisningen -> henvisning", function() {deepEqual( Stem("henvisningen"), "henvisning");});
test("henvist -> henvist", function() {deepEqual( Stem("henvist"), "henvist");});
test("her -> her", function() {deepEqual( Stem("her"), "her");});
test("heradsrett -> heradsrett", function() {deepEqual( Stem("heradsrett"), "heradsrett");});
test("herav -> herav", function() {deepEqual( Stem("herav"), "herav");});
test("heretter -> herett", function() {deepEqual( Stem("heretter"), "herett");});
test("herfra -> herfr", function() {deepEqual( Stem("herfra"), "herfr");});
test("hergarten -> hergart", function() {deepEqual( Stem("hergarten"), "hergart");});
test("herjan -> herjan", function() {deepEqual( Stem("herjan"), "herjan");});
test("herje -> herj", function() {deepEqual( Stem("herje"), "herj");});
test("herjer -> herj", function() {deepEqual( Stem("herjer"), "herj");});
test("herjet -> herj", function() {deepEqual( Stem("herjet"), "herj");});
test("herligste -> herligst", function() {deepEqual( Stem("herligste"), "herligst");});
test("hermed -> hermed", function() {deepEqual( Stem("hermed"), "hermed");});
test("hermod -> hermod", function() {deepEqual( Stem("hermod"), "hermod");});
test("herre -> herr", function() {deepEqual( Stem("herre"), "herr");});
test("herrer -> herr", function() {deepEqual( Stem("herrer"), "herr");});
test("herres -> herr", function() {deepEqual( Stem("herres"), "herr");});
test("hersker -> hersk", function() {deepEqual( Stem("hersker"), "hersk");});
test("herunder -> herund", function() {deepEqual( Stem("herunder"), "herund");});
test("herøya -> herøy", function() {deepEqual( Stem("herøya"), "herøy");});
test("hese -> hes", function() {deepEqual( Stem("hese"), "hes");});
test("heslige -> hes", function() {deepEqual( Stem("heslige"), "hes");});
test("hest -> hest", function() {deepEqual( Stem("hest"), "hest");});
test("hestehover -> hestehov", function() {deepEqual( Stem("hestehover"), "hestehov");});
test("hestekar -> hestek", function() {deepEqual( Stem("hestekar"), "hestek");});
test("hesten -> hest", function() {deepEqual( Stem("hesten"), "hest");});
test("hestene -> hest", function() {deepEqual( Stem("hestene"), "hest");});
test("hester -> hest", function() {deepEqual( Stem("hester"), "hest");});
test("hesteryggen -> hesterygg", function() {deepEqual( Stem("hesteryggen"), "hesterygg");});
test("het -> het", function() {deepEqual( Stem("het"), "het");});
test("hete -> het", function() {deepEqual( Stem("hete"), "het");});
test("heter -> het", function() {deepEqual( Stem("heter"), "het");});
test("heva -> hev", function() {deepEqual( Stem("heva"), "hev");});
test("hevast -> hev", function() {deepEqual( Stem("hevast"), "hev");});
test("hevde -> hevd", function() {deepEqual( Stem("hevde"), "hevd");});
test("hevder -> hevd", function() {deepEqual( Stem("hevder"), "hevd");});
test("hevdes -> hevd", function() {deepEqual( Stem("hevdes"), "hevd");});
test("heve -> hev", function() {deepEqual( Stem("heve"), "hev");});
test("heving -> heving", function() {deepEqual( Stem("heving"), "heving");});
test("hevingsregelen -> hevingsregel", function() {deepEqual( Stem("hevingsregelen"), "hevingsregel");});
test("hevingsrett -> hevingsrett", function() {deepEqual( Stem("hevingsrett"), "hevingsrett");});
test("hevn -> hevn", function() {deepEqual( Stem("hevn"), "hevn");});
test("hevne -> hevn", function() {deepEqual( Stem("hevne"), "hevn");});
test("hevnens -> hevn", function() {deepEqual( Stem("hevnens"), "hevn");});
test("hevner -> hevn", function() {deepEqual( Stem("hevner"), "hevn");});
test("hevnes -> hevn", function() {deepEqual( Stem("hevnes"), "hevn");});
test("hevnet -> hevn", function() {deepEqual( Stem("hevnet"), "hevn");});
test("hht -> hht", function() {deepEqual( Stem("hht"), "hht");});
test("hhv -> hhv", function() {deepEqual( Stem("hhv"), "hhv");});
test("hikker -> hikk", function() {deepEqual( Stem("hikker"), "hikk");});
test("hikster -> hikst", function() {deepEqual( Stem("hikster"), "hikst");});
test("hilde -> hild", function() {deepEqual( Stem("hilde"), "hild");});
test("hils -> hil", function() {deepEqual( Stem("hils"), "hil");});
test("hilse -> hils", function() {deepEqual( Stem("hilse"), "hils");});
test("hilser -> hils", function() {deepEqual( Stem("hilser"), "hils");});
test("hilset -> hils", function() {deepEqual( Stem("hilset"), "hils");});
test("himler -> himl", function() {deepEqual( Stem("himler"), "himl");});
test("himling -> himling", function() {deepEqual( Stem("himling"), "himling");});
test("himlingsplater -> himlingsplat", function() {deepEqual( Stem("himlingsplater"), "himlingsplat");});
test("himmel -> himmel", function() {deepEqual( Stem("himmel"), "himmel");});
test("himmelberget -> himmelberg", function() {deepEqual( Stem("himmelberget"), "himmelberg");});
test("himmelen -> himmel", function() {deepEqual( Stem("himmelen"), "himmel");});
test("himmelhvelvingen -> himmelhvelving", function() {deepEqual( Stem("himmelhvelvingen"), "himmelhvelving");});
test("himmelretninger -> himmelretning", function() {deepEqual( Stem("himmelretninger"), "himmelretning");});
test("himmelske -> himmelsk", function() {deepEqual( Stem("himmelske"), "himmelsk");});
test("himmelvogn -> himmelvogn", function() {deepEqual( Stem("himmelvogn"), "himmelvogn");});
test("hindarfjell -> hindarfjell", function() {deepEqual( Stem("hindarfjell"), "hindarfjell");});
test("hinder -> hind", function() {deepEqual( Stem("hinder"), "hind");});
test("hindra -> hindr", function() {deepEqual( Stem("hindra"), "hindr");});
test("hindrar -> hindr", function() {deepEqual( Stem("hindrar"), "hindr");});
test("hindre -> hindr", function() {deepEqual( Stem("hindre"), "hindr");});
test("hindrer -> hindr", function() {deepEqual( Stem("hindrer"), "hindr");});
test("hindring -> hindring", function() {deepEqual( Stem("hindring"), "hindring");});
test("hindringa -> hindring", function() {deepEqual( Stem("hindringa"), "hindring");});
test("hindringer -> hindring", function() {deepEqual( Stem("hindringer"), "hindring");});
test("hingst -> hingst", function() {deepEqual( Stem("hingst"), "hingst");});
test("hingsten -> hingst", function() {deepEqual( Stem("hingsten"), "hingst");});
test("hink -> hink", function() {deepEqual( Stem("hink"), "hink");});
test("hinkende -> hink", function() {deepEqual( Stem("hinkende"), "hink");});
test("hinket -> hink", function() {deepEqual( Stem("hinket"), "hink");});
test("hinne -> hinn", function() {deepEqual( Stem("hinne"), "hinn");});
test("hirtshals -> hirtshal", function() {deepEqual( Stem("hirtshals"), "hirtshal");});
test("hisse -> hiss", function() {deepEqual( Stem("hisse"), "hiss");});
test("hissig -> hiss", function() {deepEqual( Stem("hissig"), "hiss");});
test("historien -> histori", function() {deepEqual( Stem("historien"), "histori");});
test("historier -> histori", function() {deepEqual( Stem("historier"), "histori");});
test("historikk -> historikk", function() {deepEqual( Stem("historikk"), "historikk");});
test("historisk -> historisk", function() {deepEqual( Stem("historisk"), "historisk");});
test("historiske -> historisk", function() {deepEqual( Stem("historiske"), "historisk");});
test("hit -> hit", function() {deepEqual( Stem("hit"), "hit");});
test("hittil -> hittil", function() {deepEqual( Stem("hittil"), "hittil");});
test("hiver -> hiv", function() {deepEqual( Stem("hiver"), "hiv");});
test("hjalp -> hjalp", function() {deepEqual( Stem("hjalp"), "hjalp");});
test("hjel -> hjel", function() {deepEqual( Stem("hjel"), "hjel");});
test("hjelm -> hjelm", function() {deepEqual( Stem("hjelm"), "hjelm");});
test("hjelp -> hjelp", function() {deepEqual( Stem("hjelp"), "hjelp");});
test("hjelpe -> hjelp", function() {deepEqual( Stem("hjelpe"), "hjelp");});
test("hjelpeløs -> hjelpeløs", function() {deepEqual( Stem("hjelpeløs"), "hjelpeløs");});
test("hjelpeløse -> hjelpeløs", function() {deepEqual( Stem("hjelpeløse"), "hjelpeløs");});
test("hjelpemidler -> hjelpemidl", function() {deepEqual( Stem("hjelpemidler"), "hjelpemidl");});
test("hjelper -> hjelp", function() {deepEqual( Stem("hjelper"), "hjelp");});
test("hjelpesmann -> hjelpesmann", function() {deepEqual( Stem("hjelpesmann"), "hjelpesmann");});
test("hjem -> hjem", function() {deepEqual( Stem("hjem"), "hjem");});
test("hjemkomsten -> hjemkomst", function() {deepEqual( Stem("hjemkomsten"), "hjemkomst");});
test("hjemland -> hjemland", function() {deepEqual( Stem("hjemland"), "hjemland");});
test("hjemlandet -> hjemland", function() {deepEqual( Stem("hjemlandet"), "hjemland");});
test("hjemlands -> hjemland", function() {deepEqual( Stem("hjemlands"), "hjemland");});
test("hjemlandskontroll -> hjemlandskontroll", function() {deepEqual( Stem("hjemlandskontroll"), "hjemlandskontroll");});
test("hjemler -> hjeml", function() {deepEqual( Stem("hjemler"), "hjeml");});
test("hjemlet -> hjeml", function() {deepEqual( Stem("hjemlet"), "hjeml");});
test("hjemløs -> hjemløs", function() {deepEqual( Stem("hjemløs"), "hjemløs");});
test("hjemme -> hjemm", function() {deepEqual( Stem("hjemme"), "hjemm");});
test("hjemmehørende -> hjemmehør", function() {deepEqual( Stem("hjemmehørende"), "hjemmehør");});
test("hjemmel -> hjemmel", function() {deepEqual( Stem("hjemmel"), "hjemmel");});
test("hjemmelen -> hjemmel", function() {deepEqual( Stem("hjemmelen"), "hjemmel");});
test("hjemmelsbruken -> hjemmelsbruk", function() {deepEqual( Stem("hjemmelsbruken"), "hjemmelsbruk");});
test("hjemmet -> hjemm", function() {deepEqual( Stem("hjemmet"), "hjemm");});
test("hjemover -> hjemov", function() {deepEqual( Stem("hjemover"), "hjemov");});
test("hjemsøkes -> hjemsøk", function() {deepEqual( Stem("hjemsøkes"), "hjemsøk");});
test("hjemvei -> hjemvei", function() {deepEqual( Stem("hjemvei"), "hjemvei");});
test("hjernen -> hjern", function() {deepEqual( Stem("hjernen"), "hjern");});
test("hjerte -> hjert", function() {deepEqual( Stem("hjerte"), "hjert");});
test("hjerteblod -> hjerteblod", function() {deepEqual( Stem("hjerteblod"), "hjerteblod");});
test("hjertelig -> hjert", function() {deepEqual( Stem("hjertelig"), "hjert");});
test("hjertens -> hjert", function() {deepEqual( Stem("hjertens"), "hjert");});
test("hjertet -> hjert", function() {deepEqual( Stem("hjertet"), "hjert");});
test("hjort -> hjort", function() {deepEqual( Stem("hjort"), "hjort");});
test("hjorter -> hjort", function() {deepEqual( Stem("hjorter"), "hjort");});
test("hjortland -> hjortland", function() {deepEqual( Stem("hjortland"), "hjortland");});
test("hjortnes -> hjortn", function() {deepEqual( Stem("hjortnes"), "hjortn");});
test("hjul -> hjul", function() {deepEqual( Stem("hjul"), "hjul");});
test("hjulene -> hjul", function() {deepEqual( Stem("hjulene"), "hjul");});
test("hjulet -> hjul", function() {deepEqual( Stem("hjulet"), "hjul");});
test("hjå -> hjå", function() {deepEqual( Stem("hjå"), "hjå");});
test("hjørne -> hjørn", function() {deepEqual( Stem("hjørne"), "hjørn");});
test("hjørner -> hjørn", function() {deepEqual( Stem("hjørner"), "hjørn");});
test("hjørnesteinsbedriften -> hjørnesteinsbedrift", function() {deepEqual( Stem("hjørnesteinsbedriften"), "hjørnesteinsbedrift");});
test("hlin -> hlin", function() {deepEqual( Stem("hlin"), "hlin");});
test("hm -> hm", function() {deepEqual( Stem("hm"), "hm");});
test("ho -> ho", function() {deepEqual( Stem("ho"), "ho");});
test("hobbyrom -> hobbyrom", function() {deepEqual( Stem("hobbyrom"), "hobbyrom");});
test("hod -> hod", function() {deepEqual( Stem("hod"), "hod");});
test("hoddmimes -> hoddmim", function() {deepEqual( Stem("hoddmimes"), "hoddmim");});
test("hode -> hod", function() {deepEqual( Stem("hode"), "hod");});
test("hodeduk -> hodeduk", function() {deepEqual( Stem("hodeduk"), "hodeduk");});
test("hodene -> hod", function() {deepEqual( Stem("hodene"), "hod");});
test("hodepine -> hodepin", function() {deepEqual( Stem("hodepine"), "hodepin");});
test("hoder -> hod", function() {deepEqual( Stem("hoder"), "hod");});
test("hodeskalle -> hodeskall", function() {deepEqual( Stem("hodeskalle"), "hodeskall");});
test("hodeskallen -> hodeskall", function() {deepEqual( Stem("hodeskallen"), "hodeskall");});
test("hodet -> hod", function() {deepEqual( Stem("hodet"), "hod");});
test("hods -> hod", function() {deepEqual( Stem("hods"), "hod");});
test("hoffet -> hoff", function() {deepEqual( Stem("hoffet"), "hoff");});
test("hoftene -> hoft", function() {deepEqual( Stem("hoftene"), "hoft");});
test("hofter -> hoft", function() {deepEqual( Stem("hofter"), "hoft");});
test("hoho -> hoho", function() {deepEqual( Stem("hoho"), "hoho");});
test("hoi -> hoi", function() {deepEqual( Stem("hoi"), "hoi");});
test("hold -> hold", function() {deepEqual( Stem("hold"), "hold");});
test("holde -> hold", function() {deepEqual( Stem("holde"), "hold");});
test("holdent -> holdent", function() {deepEqual( Stem("holdent"), "holdent");});
test("holdepunkter -> holdepunkt", function() {deepEqual( Stem("holdepunkter"), "holdepunkt");});
test("holder -> hold", function() {deepEqual( Stem("holder"), "hold");});
test("holdes -> hold", function() {deepEqual( Stem("holdes"), "hold");});
test("holdning -> holdning", function() {deepEqual( Stem("holdning"), "holdning");});
test("holdninger -> holdning", function() {deepEqual( Stem("holdninger"), "holdning");});
test("holdt -> hold", function() {deepEqual( Stem("holdt"), "hold");});
test("holme -> holm", function() {deepEqual( Stem("holme"), "holm");});
test("holmen -> holm", function() {deepEqual( Stem("holmen"), "holm");});
test("holmer -> holm", function() {deepEqual( Stem("holmer"), "holm");});
test("holmestrand -> holmestrand", function() {deepEqual( Stem("holmestrand"), "holmestrand");});
test("holmgang -> holmgang", function() {deepEqual( Stem("holmgang"), "holmgang");});
test("holt -> holt", function() {deepEqual( Stem("holt"), "holt");});
test("homofil -> homofil", function() {deepEqual( Stem("homofil"), "homofil");});
test("homogene -> homog", function() {deepEqual( Stem("homogene"), "homog");});
test("honning -> honning", function() {deepEqual( Stem("honning"), "honning");});
test("honningdugg -> honningdugg", function() {deepEqual( Stem("honningdugg"), "honningdugg");});
test("hop -> hop", function() {deepEqual( Stem("hop"), "hop");});
test("hopar -> hop", function() {deepEqual( Stem("hopar"), "hop");});
test("hoppa -> hopp", function() {deepEqual( Stem("hoppa"), "hopp");});
test("hoppe -> hopp", function() {deepEqual( Stem("hoppe"), "hopp");});
test("hoppende -> hopp", function() {deepEqual( Stem("hoppende"), "hopp");});
test("hopper -> hopp", function() {deepEqual( Stem("hopper"), "hopp");});
test("hoppet -> hopp", function() {deepEqual( Stem("hoppet"), "hopp");});
test("hordaland -> hordaland", function() {deepEqual( Stem("hordaland"), "hordaland");});
test("horisont -> horisont", function() {deepEqual( Stem("horisont"), "horisont");});
test("horisontalt -> horisontalt", function() {deepEqual( Stem("horisontalt"), "horisontalt");});
test("horisonten -> horisont", function() {deepEqual( Stem("horisonten"), "horisont");});
test("horisontår -> horisontår", function() {deepEqual( Stem("horisontår"), "horisontår");});
test("horn -> horn", function() {deepEqual( Stem("horn"), "horn");});
test("hornene -> horn", function() {deepEqual( Stem("hornene"), "horn");});
test("hornet -> horn", function() {deepEqual( Stem("hornet"), "horn");});
test("horten -> hort", function() {deepEqual( Stem("horten"), "hort");});
test("hos -> hos", function() {deepEqual( Stem("hos"), "hos");});
test("hospits -> hospit", function() {deepEqual( Stem("hospits"), "hospit");});
test("housing -> housing", function() {deepEqual( Stem("housing"), "housing");});
test("hovedadresse -> hovedadress", function() {deepEqual( Stem("hovedadresse"), "hovedadress");});
test("hovedaktiviteten -> hovedaktivitet", function() {deepEqual( Stem("hovedaktiviteten"), "hovedaktivitet");});
test("hovedaktør -> hovedaktør", function() {deepEqual( Stem("hovedaktør"), "hovedaktør");});
test("hovedaktørene -> hovedaktør", function() {deepEqual( Stem("hovedaktørene"), "hovedaktør");});
test("hovedalternativ -> hovedalternativ", function() {deepEqual( Stem("hovedalternativ"), "hovedalternativ");});
test("hovedalternativer -> hovedalternativ", function() {deepEqual( Stem("hovedalternativer"), "hovedalternativ");});
test("hovedalternativet -> hovedalternativ", function() {deepEqual( Stem("hovedalternativet"), "hovedalternativ");});
test("hovedandelen -> hovedandel", function() {deepEqual( Stem("hovedandelen"), "hovedandel");});
test("hovedansvaret -> hovedansvar", function() {deepEqual( Stem("hovedansvaret"), "hovedansvar");});
test("hovedargumentet -> hovedargument", function() {deepEqual( Stem("hovedargumentet"), "hovedargument");});
test("hovedavsnitt -> hovedavsnitt", function() {deepEqual( Stem("hovedavsnitt"), "hovedavsnitt");});
test("hoveddelen -> hoveddel", function() {deepEqual( Stem("hoveddelen"), "hoveddel");});
test("hoveddelene -> hoveddel", function() {deepEqual( Stem("hoveddelene"), "hoveddel");});
test("hoveddeler -> hoveddel", function() {deepEqual( Stem("hoveddeler"), "hoveddel");});
test("hoveddepotet -> hoveddepot", function() {deepEqual( Stem("hoveddepotet"), "hoveddepot");});
test("hovedelementer -> hovedelement", function() {deepEqual( Stem("hovedelementer"), "hovedelement");});
test("hovedforbindelse -> hovedforbind", function() {deepEqual( Stem("hovedforbindelse"), "hovedforbind");});
test("hovedforbindelsen -> hovedforbind", function() {deepEqual( Stem("hovedforbindelsen"), "hovedforbind");});
test("hovedformål -> hovedformål", function() {deepEqual( Stem("hovedformål"), "hovedformål");});
test("hovedforutsetning -> hovedforutsetning", function() {deepEqual( Stem("hovedforutsetning"), "hovedforutsetning");});
test("hovedgodsstrømmene -> hovedgodsstrømm", function() {deepEqual( Stem("hovedgodsstrømmene"), "hovedgodsstrømm");});
test("hovedgodsterminal -> hovedgodsterminal", function() {deepEqual( Stem("hovedgodsterminal"), "hovedgodsterminal");});
test("hovedgruppene -> hovedgrupp", function() {deepEqual( Stem("hovedgruppene"), "hovedgrupp");});
test("hovedgrupper -> hovedgrupp", function() {deepEqual( Stem("hovedgrupper"), "hovedgrupp");});
test("hovedhavn -> hovedhavn", function() {deepEqual( Stem("hovedhavn"), "hovedhavn");});
test("hovedhavnen -> hovedhavn", function() {deepEqual( Stem("hovedhavnen"), "hovedhavn");});
test("hovedhavneområder -> hovedhavneområd", function() {deepEqual( Stem("hovedhavneområder"), "hovedhavneområd");});
test("hovedhavner -> hovedhavn", function() {deepEqual( Stem("hovedhavner"), "hovedhavn");});
test("hovedhensyn -> hovedhensyn", function() {deepEqual( Stem("hovedhensyn"), "hovedhensyn");});
test("hovedhensynene -> hovedhensyn", function() {deepEqual( Stem("hovedhensynene"), "hovedhensyn");});
test("hovedinndeling -> hovedinndeling", function() {deepEqual( Stem("hovedinndeling"), "hovedinndeling");});
test("hovedinndelinger -> hovedinndeling", function() {deepEqual( Stem("hovedinndelinger"), "hovedinndeling");});
test("hovedinnfartsvegene -> hovedinnfartsveg", function() {deepEqual( Stem("hovedinnfartsvegene"), "hovedinnfartsveg");});
test("hovedinntekts -> hovedinntekt", function() {deepEqual( Stem("hovedinntekts"), "hovedinntekt");});
test("hovedkonklusjonene -> hovedkonklusjon", function() {deepEqual( Stem("hovedkonklusjonene"), "hovedkonklusjon");});
test("hovedkonklusjoner -> hovedkonklusjon", function() {deepEqual( Stem("hovedkonklusjoner"), "hovedkonklusjon");});
test("hovedkontoradresse -> hovedkontoradress", function() {deepEqual( Stem("hovedkontoradresse"), "hovedkontoradress");});
test("hovedkontoreffekt -> hovedkontoreffekt", function() {deepEqual( Stem("hovedkontoreffekt"), "hovedkontoreffekt");});
test("hovedkorridorene -> hovedkorridor", function() {deepEqual( Stem("hovedkorridorene"), "hovedkorridor");});
test("hovedkravet -> hovedkrav", function() {deepEqual( Stem("hovedkravet"), "hovedkrav");});
test("hovedkriterium -> hovedkriterium", function() {deepEqual( Stem("hovedkriterium"), "hovedkriterium");});
test("hovedled -> hovedled", function() {deepEqual( Stem("hovedled"), "hovedled");});
test("hovedlinjene -> hovedlinj", function() {deepEqual( Stem("hovedlinjene"), "hovedlinj");});
test("hovedmoment -> hovedmoment", function() {deepEqual( Stem("hovedmoment"), "hovedmoment");});
test("hovedmål -> hovedmål", function() {deepEqual( Stem("hovedmål"), "hovedmål");});
test("hovedmålet -> hovedmål", function() {deepEqual( Stem("hovedmålet"), "hovedmål");});
test("hovedmønsteret -> hovedmønster", function() {deepEqual( Stem("hovedmønsteret"), "hovedmønster");});
test("hovedoppgave -> hovedoppgav", function() {deepEqual( Stem("hovedoppgave"), "hovedoppgav");});
test("hovedoppgavene -> hovedoppgav", function() {deepEqual( Stem("hovedoppgavene"), "hovedoppgav");});
test("hovedoppgaver -> hovedoppgav", function() {deepEqual( Stem("hovedoppgaver"), "hovedoppgav");});
test("hovedordning -> hovedordning", function() {deepEqual( Stem("hovedordning"), "hovedordning");});
test("hovedorganisasjon -> hovedorganisasjon", function() {deepEqual( Stem("hovedorganisasjon"), "hovedorganisasjon");});
test("hovedperspektiver -> hovedperspektiv", function() {deepEqual( Stem("hovedperspektiver"), "hovedperspektiv");});
test("hovedplan -> hovedplan", function() {deepEqual( Stem("hovedplan"), "hovedplan");});
test("hovedpoeng -> hovedpoeng", function() {deepEqual( Stem("hovedpoeng"), "hovedpoeng");});
test("hovedpremisser -> hovedpremiss", function() {deepEqual( Stem("hovedpremisser"), "hovedpremiss");});
test("hovedprinsipp -> hovedprinsipp", function() {deepEqual( Stem("hovedprinsipp"), "hovedprinsipp");});
test("hovedprinsipper -> hovedprinsipp", function() {deepEqual( Stem("hovedprinsipper"), "hovedprinsipp");});
test("hovedprinsippet -> hovedprinsipp", function() {deepEqual( Stem("hovedprinsippet"), "hovedprinsipp");});
test("hovedproblemene -> hovedproblem", function() {deepEqual( Stem("hovedproblemene"), "hovedproblem");});
test("hovedproblemstilling -> hovedproblemstilling", function() {deepEqual( Stem("hovedproblemstilling"), "hovedproblemstilling");});
test("hovedproblemstillingen -> hovedproblemstilling", function() {deepEqual( Stem("hovedproblemstillingen"), "hovedproblemstilling");});
test("hovedproblemstillinger -> hovedproblemstilling", function() {deepEqual( Stem("hovedproblemstillinger"), "hovedproblemstilling");});
test("hovedprognose -> hovedprognos", function() {deepEqual( Stem("hovedprognose"), "hovedprognos");});
test("hovedpunkter -> hovedpunkt", function() {deepEqual( Stem("hovedpunkter"), "hovedpunkt");});
test("hovedrapport -> hovedrapport", function() {deepEqual( Stem("hovedrapport"), "hovedrapport");});
test("hovedrapporten -> hovedrapport", function() {deepEqual( Stem("hovedrapporten"), "hovedrapport");});
test("hovedregel -> hovedregel", function() {deepEqual( Stem("hovedregel"), "hovedregel");});
test("hovedregelen -> hovedregel", function() {deepEqual( Stem("hovedregelen"), "hovedregel");});
test("hovedretningslinjer -> hovedretningslinj", function() {deepEqual( Stem("hovedretningslinjer"), "hovedretningslinj");});
test("hovedrolle -> hovedroll", function() {deepEqual( Stem("hovedrolle"), "hovedroll");});
test("hovedsak -> hovedsak", function() {deepEqual( Stem("hovedsak"), "hovedsak");});
test("hovedsakelig -> hovedsak", function() {deepEqual( Stem("hovedsakelig"), "hovedsak");});
test("hovedsamarbeidspartner -> hovedsamarbeidspartn", function() {deepEqual( Stem("hovedsamarbeidspartner"), "hovedsamarbeidspartn");});
test("hovedsammenslutningene -> hovedsammenslutning", function() {deepEqual( Stem("hovedsammenslutningene"), "hovedsammenslutning");});
test("hovedsete -> hovedset", function() {deepEqual( Stem("hovedsete"), "hovedset");});
test("hovedside -> hovedsid", function() {deepEqual( Stem("hovedside"), "hovedsid");});
test("hovedsiden -> hovedsid", function() {deepEqual( Stem("hovedsiden"), "hovedsid");});
test("hovedskipsleia -> hovedskipslei", function() {deepEqual( Stem("hovedskipsleia"), "hovedskipslei");});
test("hovedspørsmål -> hovedspørsmål", function() {deepEqual( Stem("hovedspørsmål"), "hovedspørsmål");});
test("hovedspørsmålene -> hovedspørsmål", function() {deepEqual( Stem("hovedspørsmålene"), "hovedspørsmål");});
test("hovedspørsmålet -> hovedspørsmål", function() {deepEqual( Stem("hovedspørsmålet"), "hovedspørsmål");});
test("hovedstaden -> hovedstad", function() {deepEqual( Stem("hovedstaden"), "hovedstad");});
test("hovedstadsområdet -> hovedstadsområd", function() {deepEqual( Stem("hovedstadsområdet"), "hovedstadsområd");});
test("hovedstadsutvalget -> hovedstadsutvalg", function() {deepEqual( Stem("hovedstadsutvalget"), "hovedstadsutvalg");});
test("hovedstrømmene -> hovedstrømm", function() {deepEqual( Stem("hovedstrømmene"), "hovedstrømm");});
test("hovedsynspunkt -> hovedsynspunkt", function() {deepEqual( Stem("hovedsynspunkt"), "hovedsynspunkt");});
test("hovedtall -> hovedtall", function() {deepEqual( Stem("hovedtall"), "hovedtall");});
test("hovedtanken -> hovedtank", function() {deepEqual( Stem("hovedtanken"), "hovedtank");});
test("hovedtema -> hovedtem", function() {deepEqual( Stem("hovedtema"), "hovedtem");});
test("hovedtemaene -> hovedtema", function() {deepEqual( Stem("hovedtemaene"), "hovedtema");});
test("hovedtemaer -> hovedtema", function() {deepEqual( Stem("hovedtemaer"), "hovedtema");});
test("hovedterminal -> hovedterminal", function() {deepEqual( Stem("hovedterminal"), "hovedterminal");});
test("hovedterminalen -> hovedterminal", function() {deepEqual( Stem("hovedterminalen"), "hovedterminal");});
test("hovedtransportåren -> hovedtransportår", function() {deepEqual( Stem("hovedtransportåren"), "hovedtransportår");});
test("hovedtrekk -> hovedtrekk", function() {deepEqual( Stem("hovedtrekk"), "hovedtrekk");});
test("hovedtrekkene -> hovedtrekk", function() {deepEqual( Stem("hovedtrekkene"), "hovedtrekk");});
test("hovedtrekket -> hovedtrekk", function() {deepEqual( Stem("hovedtrekket"), "hovedtrekk");});
test("hovedtrender -> hovedtrend", function() {deepEqual( Stem("hovedtrender"), "hovedtrend");});
test("hovedtyngden -> hovedtyngd", function() {deepEqual( Stem("hovedtyngden"), "hovedtyngd");});
test("hovedtypene -> hovedtyp", function() {deepEqual( Stem("hovedtypene"), "hovedtyp");});
test("hovedtyper -> hovedtyp", function() {deepEqual( Stem("hovedtyper"), "hovedtyp");});
test("hovedutfordringene -> hovedutfordring", function() {deepEqual( Stem("hovedutfordringene"), "hovedutfordring");});
test("hovedutfyllingene -> hovedutfylling", function() {deepEqual( Stem("hovedutfyllingene"), "hovedutfylling");});
test("hovedvalg -> hovedvalg", function() {deepEqual( Stem("hovedvalg"), "hovedvalg");});
test("hovedvaregrupper -> hovedvaregrupp", function() {deepEqual( Stem("hovedvaregrupper"), "hovedvaregrupp");});
test("hovedvareslag -> hovedvareslag", function() {deepEqual( Stem("hovedvareslag"), "hovedvareslag");});
test("hovedvegnett -> hovedvegnett", function() {deepEqual( Stem("hovedvegnett"), "hovedvegnett");});
test("hovedvegnettet -> hovedvegnett", function() {deepEqual( Stem("hovedvegnettet"), "hovedvegnett");});
test("hovedvegsystem -> hovedvegsystem", function() {deepEqual( Stem("hovedvegsystem"), "hovedvegsystem");});
test("hovedvegsystemet -> hovedvegsystem", function() {deepEqual( Stem("hovedvegsystemet"), "hovedvegsystem");});
test("hovedvekt -> hovedvekt", function() {deepEqual( Stem("hovedvekt"), "hovedvekt");});
test("hovedvirksomheten -> hovedvirksom", function() {deepEqual( Stem("hovedvirksomheten"), "hovedvirksom");});
test("hovedvurderinger -> hovedvurdering", function() {deepEqual( Stem("hovedvurderinger"), "hovedvurdering");});
test("hovedytelse -> hovedyt", function() {deepEqual( Stem("hovedytelse"), "hovedyt");});
test("hovi -> hovi", function() {deepEqual( Stem("hovi"), "hovi");});
test("hovudaktivitetane -> hovudaktivitet", function() {deepEqual( Stem("hovudaktivitetane"), "hovudaktivitet");});
test("hovudalternativ -> hovudalternativ", function() {deepEqual( Stem("hovudalternativ"), "hovudalternativ");});
test("hovudansvaret -> hovudansvar", function() {deepEqual( Stem("hovudansvaret"), "hovudansvar");});
test("hovuddrag -> hovuddrag", function() {deepEqual( Stem("hovuddrag"), "hovuddrag");});
test("hovuddraga -> hovuddrag", function() {deepEqual( Stem("hovuddraga"), "hovuddrag");});
test("hovudformer -> hovudform", function() {deepEqual( Stem("hovudformer"), "hovudform");});
test("hovudføremål -> hovudføremål", function() {deepEqual( Stem("hovudføremål"), "hovudføremål");});
test("hovudføremålet -> hovudføremål", function() {deepEqual( Stem("hovudføremålet"), "hovudføremål");});
test("hovudinnhaldet -> hovudinnhald", function() {deepEqual( Stem("hovudinnhaldet"), "hovudinnhald");});
test("hovudkontor -> hovudkontor", function() {deepEqual( Stem("hovudkontor"), "hovudkontor");});
test("hovudleigar -> hovudl", function() {deepEqual( Stem("hovudleigar"), "hovudl");});
test("hovudliner -> hovudlin", function() {deepEqual( Stem("hovudliner"), "hovudlin");});
test("hovudmål -> hovudmål", function() {deepEqual( Stem("hovudmål"), "hovudmål");});
test("hovudorganisasjonen -> hovudorganisasjon", function() {deepEqual( Stem("hovudorganisasjonen"), "hovudorganisasjon");});
test("hovudpunkt -> hovudpunkt", function() {deepEqual( Stem("hovudpunkt"), "hovudpunkt");});
test("hovudregel -> hovudregel", function() {deepEqual( Stem("hovudregel"), "hovudregel");});
test("hovudregelen -> hovudregel", function() {deepEqual( Stem("hovudregelen"), "hovudregel");});
test("hovudreglane -> hovudregl", function() {deepEqual( Stem("hovudreglane"), "hovudregl");});
test("hovudreglar -> hovudregl", function() {deepEqual( Stem("hovudreglar"), "hovudregl");});
test("hovudsak -> hovudsak", function() {deepEqual( Stem("hovudsak"), "hovudsak");});
test("hovudsakleg -> hovudsak", function() {deepEqual( Stem("hovudsakleg"), "hovudsak");});
test("hovudsaklege -> hovudsak", function() {deepEqual( Stem("hovudsaklege"), "hovudsak");});
test("hovudsamanslutninga -> hovudsamanslutning", function() {deepEqual( Stem("hovudsamanslutninga"), "hovudsamanslutning");});
test("hovudstol -> hovudstol", function() {deepEqual( Stem("hovudstol"), "hovudstol");});
test("hovudsynspunktet -> hovudsynspunkt", function() {deepEqual( Stem("hovudsynspunktet"), "hovudsynspunkt");});
test("hovudtypar -> hovudtyp", function() {deepEqual( Stem("hovudtypar"), "hovudtyp");});
test("hovudvekta -> hovudvekt", function() {deepEqual( Stem("hovudvekta"), "hovudvekt");});
test("hovvarpne -> hovvarpn", function() {deepEqual( Stem("hovvarpne"), "hovvarpn");});
test("hsb -> hsb", function() {deepEqual( Stem("hsb"), "hsb");});
test("hubs -> hub", function() {deepEqual( Stem("hubs"), "hub");});
test("huden -> hud", function() {deepEqual( Stem("huden"), "hud");});
test("hudfarge -> hudfarg", function() {deepEqual( Stem("hudfarge"), "hudfarg");});
test("hudfarve -> hudfarv", function() {deepEqual( Stem("hudfarve"), "hudfarv");});
test("huff -> huff", function() {deepEqual( Stem("huff"), "huff");});
test("huge -> hug", function() {deepEqual( Stem("huge"), "hug");});
test("hugen -> hug", function() {deepEqual( Stem("hugen"), "hug");});
test("hugge -> hugg", function() {deepEqual( Stem("hugge"), "hugg");});
test("hugger -> hugg", function() {deepEqual( Stem("hugger"), "hugg");});
test("hugget -> hugg", function() {deepEqual( Stem("hugget"), "hugg");});
test("huggormer -> huggorm", function() {deepEqual( Stem("huggormer"), "huggorm");});
test("hugin -> hugin", function() {deepEqual( Stem("hugin"), "hugin");});
test("huk -> huk", function() {deepEqual( Stem("huk"), "huk");});
test("huke -> huk", function() {deepEqual( Stem("huke"), "huk");});
test("huldrefolket -> huldrefolk", function() {deepEqual( Stem("huldrefolket"), "huldrefolk");});
test("huldrer -> huldr", function() {deepEqual( Stem("huldrer"), "huldr");});
test("hule -> hul", function() {deepEqual( Stem("hule"), "hul");});
test("huler -> hul", function() {deepEqual( Stem("huler"), "hul");});
test("hulker -> hulk", function() {deepEqual( Stem("hulker"), "hulk");});
test("hull -> hull", function() {deepEqual( Stem("hull"), "hull");});
test("hullet -> hull", function() {deepEqual( Stem("hullet"), "hull");});
test("humanitære -> humanitær", function() {deepEqual( Stem("humanitære"), "humanitær");});
test("humør -> humør", function() {deepEqual( Stem("humør"), "humør");});
test("hun -> hun", function() {deepEqual( Stem("hun"), "hun");});
test("hunaland -> hunaland", function() {deepEqual( Stem("hunaland"), "hunaland");});
test("hund -> hund", function() {deepEqual( Stem("hund"), "hund");});
test("hundehus -> hundehus", function() {deepEqual( Stem("hundehus"), "hundehus");});
test("hunden -> hund", function() {deepEqual( Stem("hunden"), "hund");});
test("hundene -> hund", function() {deepEqual( Stem("hundene"), "hund");});
test("hunder -> hund", function() {deepEqual( Stem("hunder"), "hund");});
test("hundre -> hundr", function() {deepEqual( Stem("hundre"), "hundr");});
test("hundreår -> hundreår", function() {deepEqual( Stem("hundreår"), "hundreår");});
test("hundreåret -> hundreår", function() {deepEqual( Stem("hundreåret"), "hundreår");});
test("hunger -> hung", function() {deepEqual( Stem("hunger"), "hung");});
test("hurtig -> hurt", function() {deepEqual( Stem("hurtig"), "hurt");});
test("hurtige -> hurt", function() {deepEqual( Stem("hurtige"), "hurt");});
test("hurtiggående -> hurtiggå", function() {deepEqual( Stem("hurtiggående"), "hurtiggå");});
test("hurtigruta -> hurtigrut", function() {deepEqual( Stem("hurtigruta"), "hurtigrut");});
test("hurum -> hurum", function() {deepEqual( Stem("hurum"), "hurum");});
test("hus -> hus", function() {deepEqual( Stem("hus"), "hus");});
test("husa -> hus", function() {deepEqual( Stem("husa"), "hus");});
test("husbank -> husbank", function() {deepEqual( Stem("husbank"), "husbank");});
test("husbanken -> husbank", function() {deepEqual( Stem("husbanken"), "husbank");});
test("husbankterminar -> husbanktermin", function() {deepEqual( Stem("husbankterminar"), "husbanktermin");});
test("husbråk -> husbråk", function() {deepEqual( Stem("husbråk"), "husbråk");});
test("huseigarar -> huseigar", function() {deepEqual( Stem("huseigarar"), "huseigar");});
test("husene -> hus", function() {deepEqual( Stem("husene"), "hus");});
test("huset -> hus", function() {deepEqual( Stem("huset"), "hus");});
test("husflid -> husflid", function() {deepEqual( Stem("husflid"), "husflid");});
test("husgeråd -> husgeråd", function() {deepEqual( Stem("husgeråd"), "husgeråd");});
test("hushalda -> hushald", function() {deepEqual( Stem("hushalda"), "hushald");});
test("husholdningene -> husholdning", function() {deepEqual( Stem("husholdningene"), "husholdning");});
test("husholdningenes -> husholdning", function() {deepEqual( Stem("husholdningenes"), "husholdning");});
test("husholdninger -> husholdning", function() {deepEqual( Stem("husholdninger"), "husholdning");});
test("husk -> husk", function() {deepEqual( Stem("husk"), "husk");});
test("huske -> husk", function() {deepEqual( Stem("huske"), "husk");});
test("husker -> husk", function() {deepEqual( Stem("husker"), "husk");});
test("huskes -> husk", function() {deepEqual( Stem("huskes"), "husk");});
test("husleieloven -> huslei", function() {deepEqual( Stem("husleieloven"), "huslei");});
test("husleiereguleringsloven -> husleieregulering", function() {deepEqual( Stem("husleiereguleringsloven"), "husleieregulering");});
test("husleiga -> husl", function() {deepEqual( Stem("husleiga"), "husl");});
test("husleige -> husl", function() {deepEqual( Stem("husleige"), "husl");});
test("husleigeavtalane -> husleigeavtal", function() {deepEqual( Stem("husleigeavtalane"), "husleigeavtal");});
test("husleigeavtale -> husleigeavtal", function() {deepEqual( Stem("husleigeavtale"), "husleigeavtal");});
test("husleigebetaling -> husleigebetaling", function() {deepEqual( Stem("husleigebetaling"), "husleigebetaling");});
test("husleigedomstolar -> husleigedomstol", function() {deepEqual( Stem("husleigedomstolar"), "husleigedomstol");});
test("husleigeforhold -> husleigeforhold", function() {deepEqual( Stem("husleigeforhold"), "husleigeforhold");});
test("husleigeinnkrevjing -> husleigeinnkrevjing", function() {deepEqual( Stem("husleigeinnkrevjing"), "husleigeinnkrevjing");});
test("husleigelova -> husleig", function() {deepEqual( Stem("husleigelova"), "husleig");});
test("husleigelovgjevinga -> husleigelovgjeving", function() {deepEqual( Stem("husleigelovgjevinga"), "husleigelovgjeving");});
test("husleigeretten -> husleigerett", function() {deepEqual( Stem("husleigeretten"), "husleigerett");});
test("husleigerettsleg -> husleigeretts", function() {deepEqual( Stem("husleigerettsleg"), "husleigeretts");});
test("husleigetap -> husleigetap", function() {deepEqual( Stem("husleigetap"), "husleigetap");});
test("husleigetvistar -> husleigetvist", function() {deepEqual( Stem("husleigetvistar"), "husleigetvist");});
test("husleigetvistutval -> husleigetvistutval", function() {deepEqual( Stem("husleigetvistutval"), "husleigetvistutval");});
test("husleigetvistutvala -> husleigetvistutval", function() {deepEqual( Stem("husleigetvistutvala"), "husleigetvistutval");});
test("husordensreglar -> husordensregl", function() {deepEqual( Stem("husordensreglar"), "husordensregl");});
test("husrom -> husrom", function() {deepEqual( Stem("husrom"), "husrom");});
test("husstand -> husstand", function() {deepEqual( Stem("husstand"), "husstand");});
test("husstanden -> husstand", function() {deepEqual( Stem("husstanden"), "husstand");});
test("husstandsfellesskap -> husstandsfellesskap", function() {deepEqual( Stem("husstandsfellesskap"), "husstandsfellesskap");});
test("husstandsfellesskapslova -> husstandsfellesskap", function() {deepEqual( Stem("husstandsfellesskapslova"), "husstandsfellesskap");});
test("husstandsmedlem -> husstandsmedlem", function() {deepEqual( Stem("husstandsmedlem"), "husstandsmedlem");});
test("husstandsmedlemmen -> husstandsmedlemm", function() {deepEqual( Stem("husstandsmedlemmen"), "husstandsmedlemm");});
test("husstandsmedlemmer -> husstandsmedlemm", function() {deepEqual( Stem("husstandsmedlemmer"), "husstandsmedlemm");});
test("hussøkjande -> hussøkj", function() {deepEqual( Stem("hussøkjande"), "hussøkj");});
test("hussøkjarane -> hussøkjar", function() {deepEqual( Stem("hussøkjarane"), "hussøkjar");});
test("hussøkjarar -> hussøkjar", function() {deepEqual( Stem("hussøkjarar"), "hussøkjar");});
test("hussøkjarinteressene -> hussøkjarinteress", function() {deepEqual( Stem("hussøkjarinteressene"), "hussøkjarinteress");});
test("hustelefonsentral -> hustelefonsentral", function() {deepEqual( Stem("hustelefonsentral"), "hustelefonsentral");});
test("hustru -> hustru", function() {deepEqual( Stem("hustru"), "hustru");});
test("husvære -> husvær", function() {deepEqual( Stem("husvære"), "husvær");});
test("hutrende -> hutr", function() {deepEqual( Stem("hutrende"), "hutr");});
test("hutrer -> hutr", function() {deepEqual( Stem("hutrer"), "hutr");});
test("hutte -> hutt", function() {deepEqual( Stem("hutte"), "hutt");});
test("hva -> hva", function() {deepEqual( Stem("hva"), "hva");});
test("hvalene -> hval", function() {deepEqual( Stem("hvalene"), "hval");});
test("hvaler -> hval", function() {deepEqual( Stem("hvaler"), "hval");});
test("hvalp -> hvalp", function() {deepEqual( Stem("hvalp"), "hvalp");});
test("hvasse -> hvass", function() {deepEqual( Stem("hvasse"), "hvass");});
test("hvasst -> hvasst", function() {deepEqual( Stem("hvasst"), "hvasst");});
test("hvelving -> hvelving", function() {deepEqual( Stem("hvelving"), "hvelving");});
test("hvem -> hvem", function() {deepEqual( Stem("hvem"), "hvem");});
test("hver -> hver", function() {deepEqual( Stem("hver"), "hver");});
test("hverandre -> hverandr", function() {deepEqual( Stem("hverandre"), "hverandr");});
test("hverdag -> hverdag", function() {deepEqual( Stem("hverdag"), "hverdag");});
test("hvergelme -> hvergelm", function() {deepEqual( Stem("hvergelme"), "hvergelm");});
test("hverken -> hverk", function() {deepEqual( Stem("hverken"), "hverk");});
test("hvert -> hvert", function() {deepEqual( Stem("hvert"), "hvert");});
test("hvese -> hves", function() {deepEqual( Stem("hvese"), "hves");});
test("hveser -> hves", function() {deepEqual( Stem("hveser"), "hves");});
test("hvil -> hvil", function() {deepEqual( Stem("hvil"), "hvil");});
test("hvile -> hvil", function() {deepEqual( Stem("hvile"), "hvil");});
test("hviler -> hvil", function() {deepEqual( Stem("hviler"), "hvil");});
test("hvilke -> hvilk", function() {deepEqual( Stem("hvilke"), "hvilk");});
test("hvilken -> hvilk", function() {deepEqual( Stem("hvilken"), "hvilk");});
test("hvilket -> hvilk", function() {deepEqual( Stem("hvilket"), "hvilk");});
test("hvirvlende -> hvirvl", function() {deepEqual( Stem("hvirvlende"), "hvirvl");});
test("hvirvler -> hvirvl", function() {deepEqual( Stem("hvirvler"), "hvirvl");});
test("hvis -> hvis", function() {deepEqual( Stem("hvis"), "hvis");});
test("hviske -> hvisk", function() {deepEqual( Stem("hviske"), "hvisk");});
test("hvisker -> hvisk", function() {deepEqual( Stem("hvisker"), "hvisk");});
test("hvisket -> hvisk", function() {deepEqual( Stem("hvisket"), "hvisk");});
test("hvisler -> hvisl", function() {deepEqual( Stem("hvisler"), "hvisl");});
test("hvit -> hvit", function() {deepEqual( Stem("hvit"), "hvit");});
test("hvite -> hvit", function() {deepEqual( Stem("hvite"), "hvit");});
test("hviteste -> hvitest", function() {deepEqual( Stem("hviteste"), "hvitest");});
test("hvitner -> hvitn", function() {deepEqual( Stem("hvitner"), "hvitn");});
test("hvitt -> hvitt", function() {deepEqual( Stem("hvitt"), "hvitt");});
test("hvittensand -> hvittensand", function() {deepEqual( Stem("hvittensand"), "hvittensand");});
test("hvor -> hvor", function() {deepEqual( Stem("hvor"), "hvor");});
test("hvorav -> hvorav", function() {deepEqual( Stem("hvorav"), "hvorav");});
test("hvordan -> hvordan", function() {deepEqual( Stem("hvordan"), "hvordan");});
test("hvoretter -> hvorett", function() {deepEqual( Stem("hvoretter"), "hvorett");});
test("hvorfor -> hvorfor", function() {deepEqual( Stem("hvorfor"), "hvorfor");});
test("hvorledes -> hvorl", function() {deepEqual( Stem("hvorledes"), "hvorl");});
test("hvorvidt -> hvorvid", function() {deepEqual( Stem("hvorvidt"), "hvorvid");});
test("hybelbuarar -> hybelbuar", function() {deepEqual( Stem("hybelbuarar"), "hybelbuar");});
test("hyblar -> hybl", function() {deepEqual( Stem("hyblar"), "hybl");});
test("hydro -> hydro", function() {deepEqual( Stem("hydro"), "hydro");});
test("hydros -> hydro", function() {deepEqual( Stem("hydros"), "hydro");});
test("hyggelig -> hygg", function() {deepEqual( Stem("hyggelig"), "hygg");});
test("hyggeligste -> hyggeligst", function() {deepEqual( Stem("hyggeligste"), "hyggeligst");});
test("hyl -> hyl", function() {deepEqual( Stem("hyl"), "hyl");});
test("hyler -> hyl", function() {deepEqual( Stem("hyler"), "hyl");});
test("hylland -> hylland", function() {deepEqual( Stem("hylland"), "hylland");});
test("hyllandutvalget -> hyllandutvalg", function() {deepEqual( Stem("hyllandutvalget"), "hyllandutvalg");});
test("hylte -> hylt", function() {deepEqual( Stem("hylte"), "hylt");});
test("hyme -> hym", function() {deepEqual( Stem("hyme"), "hym");});
test("hymes -> hym", function() {deepEqual( Stem("hymes"), "hym");});
test("hypotekforeiningar -> hypotekforeining", function() {deepEqual( Stem("hypotekforeiningar"), "hypotekforeining");});
test("hypp -> hypp", function() {deepEqual( Stem("hypp"), "hypp");});
test("hypper -> hypp", function() {deepEqual( Stem("hypper"), "hypp");});
test("hyppige -> hypp", function() {deepEqual( Stem("hyppige"), "hypp");});
test("hyppigere -> hyppiger", function() {deepEqual( Stem("hyppigere"), "hyppiger");});
test("hyre -> hyr", function() {deepEqual( Stem("hyre"), "hyr");});
test("hyresgasternas -> hyresgastern", function() {deepEqual( Stem("hyresgasternas"), "hyresgastern");});
test("hyrrokken -> hyrrokk", function() {deepEqual( Stem("hyrrokken"), "hyrrokk");});
test("hysj -> hysj", function() {deepEqual( Stem("hysj"), "hysj");});
test("hytta -> hytt", function() {deepEqual( Stem("hytta"), "hytt");});
test("hytte -> hytt", function() {deepEqual( Stem("hytte"), "hytt");});
test("hyttefelt -> hyttefelt", function() {deepEqual( Stem("hyttefelt"), "hyttefelt");});
test("hytter -> hytt", function() {deepEqual( Stem("hytter"), "hytt");});
test("hå -> hå", function() {deepEqual( Stem("hå"), "hå");});
test("håkan -> håkan", function() {deepEqual( Stem("håkan"), "håkan");});
test("hånd -> hånd", function() {deepEqual( Stem("hånd"), "hånd");});
test("hånde -> hånd", function() {deepEqual( Stem("hånde"), "hånd");});
test("hånden -> hånd", function() {deepEqual( Stem("hånden"), "hånd");});
test("håndflaten -> håndflat", function() {deepEqual( Stem("håndflaten"), "håndflat");});
test("håndheve -> håndhev", function() {deepEqual( Stem("håndheve"), "håndhev");});
test("håndheving -> håndheving", function() {deepEqual( Stem("håndheving"), "håndheving");});
test("håndkvern -> håndkvern", function() {deepEqual( Stem("håndkvern"), "håndkvern");});
test("håndledd -> håndledd", function() {deepEqual( Stem("håndledd"), "håndledd");});
test("håndleddet -> håndledd", function() {deepEqual( Stem("håndleddet"), "håndledd");});
test("håndslag -> håndslag", function() {deepEqual( Stem("håndslag"), "håndslag");});
test("håndtak -> håndtak", function() {deepEqual( Stem("håndtak"), "håndtak");});
test("håndtere -> håndter", function() {deepEqual( Stem("håndtere"), "håndter");});
test("håndterer -> håndter", function() {deepEqual( Stem("håndterer"), "håndter");});
test("håndteres -> håndter", function() {deepEqual( Stem("håndteres"), "håndter");});
test("håndtering -> håndtering", function() {deepEqual( Stem("håndtering"), "håndtering");});
test("håndteringen -> håndtering", function() {deepEqual( Stem("håndteringen"), "håndtering");});
test("håndteringsevne -> håndteringsevn", function() {deepEqual( Stem("håndteringsevne"), "håndteringsevn");});
test("håndteringsform -> håndteringsform", function() {deepEqual( Stem("håndteringsform"), "håndteringsform");});
test("håndteringskapasitet -> håndteringskapasit", function() {deepEqual( Stem("håndteringskapasitet"), "håndteringskapasit");});
test("håndteringsteknologi -> håndteringsteknologi", function() {deepEqual( Stem("håndteringsteknologi"), "håndteringsteknologi");});
test("håndteringstjenester -> håndteringstjenest", function() {deepEqual( Stem("håndteringstjenester"), "håndteringstjenest");});
test("håndteringsutstyr -> håndteringsutstyr", function() {deepEqual( Stem("håndteringsutstyr"), "håndteringsutstyr");});
test("håndtert -> håndter", function() {deepEqual( Stem("håndtert"), "håndter");});
test("håndterte -> håndter", function() {deepEqual( Stem("håndterte"), "håndter");});
test("håne -> hån", function() {deepEqual( Stem("håne"), "hån");});
test("håner -> hån", function() {deepEqual( Stem("håner"), "hån");});
test("hånlig -> hån", function() {deepEqual( Stem("hånlig"), "hån");});
test("håp -> håp", function() {deepEqual( Stem("håp"), "håp");});
test("håpe -> håp", function() {deepEqual( Stem("håpe"), "håp");});
test("håper -> håp", function() {deepEqual( Stem("håper"), "håp");});
test("håpet -> håp", function() {deepEqual( Stem("håpet"), "håp");});
test("håpløsheten -> håpløs", function() {deepEqual( Stem("håpløsheten"), "håpløs");});
test("hår -> hår", function() {deepEqual( Stem("hår"), "hår");});
test("håret -> hår", function() {deepEqual( Stem("håret"), "hår");});
test("hårete -> håret", function() {deepEqual( Stem("hårete"), "håret");});
test("håvamål -> håvamål", function() {deepEqual( Stem("håvamål"), "håvamål");});
test("hæl -> hæl", function() {deepEqual( Stem("hæl"), "hæl");});
test("hælene -> hæl", function() {deepEqual( Stem("hælene"), "hæl");});
test("hæler -> hæl", function() {deepEqual( Stem("hæler"), "hæl");});
test("hær -> hær", function() {deepEqual( Stem("hær"), "hær");});
test("hæren -> hær", function() {deepEqual( Stem("hæren"), "hær");});
test("hærene -> hær", function() {deepEqual( Stem("hærene"), "hær");});
test("hærfører -> hærfør", function() {deepEqual( Stem("hærfører"), "hærfør");});
test("hærguden -> hærgud", function() {deepEqual( Stem("hærguden"), "hærgud");});
test("hærklær -> hærklær", function() {deepEqual( Stem("hærklær"), "hærklær");});
test("hærskare -> hærskar", function() {deepEqual( Stem("hærskare"), "hærskar");});
test("hærskarer -> hærskar", function() {deepEqual( Stem("hærskarer"), "hærskar");});
test("hæs -> hæs", function() {deepEqual( Stem("hæs"), "hæs");});
test("høflig -> høf", function() {deepEqual( Stem("høflig"), "høf");});
test("høg -> høg", function() {deepEqual( Stem("høg"), "høg");});
test("høgare -> høgar", function() {deepEqual( Stem("høgare"), "høgar");});
test("høgast -> høg", function() {deepEqual( Stem("høgast"), "høg");});
test("høgaste -> høgast", function() {deepEqual( Stem("høgaste"), "høgast");});
test("høge -> høg", function() {deepEqual( Stem("høge"), "høg");});
test("høgst -> høgst", function() {deepEqual( Stem("høgst"), "høgst");});
test("høgste -> høgst", function() {deepEqual( Stem("høgste"), "høgst");});
test("høgsteretts -> høgsterett", function() {deepEqual( Stem("høgsteretts"), "høgsterett");});
test("høgt -> høgt", function() {deepEqual( Stem("høgt"), "høgt");});
test("høilund -> høilund", function() {deepEqual( Stem("høilund"), "høilund");});
test("høne -> høn", function() {deepEqual( Stem("høne"), "høn");});
test("hør -> hør", function() {deepEqual( Stem("hør"), "hør");});
test("høre -> hør", function() {deepEqual( Stem("høre"), "hør");});
test("hører -> hør", function() {deepEqual( Stem("hører"), "hør");});
test("høres -> hør", function() {deepEqual( Stem("høres"), "hør");});
test("høring -> høring", function() {deepEqual( Stem("høring"), "høring");});
test("høringsfrist -> høringsfrist", function() {deepEqual( Stem("høringsfrist"), "høringsfrist");});
test("høringsnotatet -> høringsnotat", function() {deepEqual( Stem("høringsnotatet"), "høringsnotat");});
test("høringsuttalelse -> høringsuttal", function() {deepEqual( Stem("høringsuttalelse"), "høringsuttal");});
test("høringsuttalelsene -> høringsuttal", function() {deepEqual( Stem("høringsuttalelsene"), "høringsuttal");});
test("hørsel -> hørsel", function() {deepEqual( Stem("hørsel"), "hørsel");});
test("hørt -> hørt", function() {deepEqual( Stem("hørt"), "hørt");});
test("hørte -> hørt", function() {deepEqual( Stem("hørte"), "hørt");});
test("høst -> høst", function() {deepEqual( Stem("høst"), "høst");});
test("høste -> høst", function() {deepEqual( Stem("høste"), "høst");});
test("høsten -> høst", function() {deepEqual( Stem("høsten"), "høst");});
test("høststormene -> høststorm", function() {deepEqual( Stem("høststormene"), "høststorm");});
test("høvding -> høvding", function() {deepEqual( Stem("høvding"), "høvding");});
test("høvdingen -> høvding", function() {deepEqual( Stem("høvdingen"), "høvding");});
test("høvdinger -> høvding", function() {deepEqual( Stem("høvdinger"), "høvding");});
test("høvdings -> høvding", function() {deepEqual( Stem("høvdings"), "høvding");});
test("høvdingsetet -> høvdingset", function() {deepEqual( Stem("høvdingsetet"), "høvdingset");});
test("høve -> høv", function() {deepEqual( Stem("høve"), "høv");});
test("høveleg -> høv", function() {deepEqual( Stem("høveleg"), "høv");});
test("høvet -> høv", function() {deepEqual( Stem("høvet"), "høv");});
test("høvik -> høvik", function() {deepEqual( Stem("høvik"), "høvik");});
test("høvisk -> høvisk", function() {deepEqual( Stem("høvisk"), "høvisk");});
test("høy -> høy", function() {deepEqual( Stem("høy"), "høy");});
test("høyavkastningsperiode -> høyavkastningsperiod", function() {deepEqual( Stem("høyavkastningsperiode"), "høyavkastningsperiod");});
test("høyde -> høyd", function() {deepEqual( Stem("høyde"), "høyd");});
test("høydebegrensninger -> høydebegrensning", function() {deepEqual( Stem("høydebegrensninger"), "høydebegrensning");});
test("høyden -> høyd", function() {deepEqual( Stem("høyden"), "høyd");});
test("høye -> høye", function() {deepEqual( Stem("høye"), "høye");});
test("høyere -> høyer", function() {deepEqual( Stem("høyere"), "høyer");});
test("høyes -> høyes", function() {deepEqual( Stem("høyes"), "høyes");});
test("høyest -> høyest", function() {deepEqual( Stem("høyest"), "høyest");});
test("høyeste -> høyest", function() {deepEqual( Stem("høyeste"), "høyest");});
test("høyfrekvent -> høyfrekvent", function() {deepEqual( Stem("høyfrekvent"), "høyfrekvent");});
test("høyfrekvente -> høyfrekvent", function() {deepEqual( Stem("høyfrekvente"), "høyfrekvent");});
test("høyhastighetstog -> høyhastighetstog", function() {deepEqual( Stem("høyhastighetstog"), "høyhastighetstog");});
test("høyinntektsgruppen -> høyinntektsgrupp", function() {deepEqual( Stem("høyinntektsgruppen"), "høyinntektsgrupp");});
test("høyrde -> høyrd", function() {deepEqual( Stem("høyrde"), "høyrd");});
test("høyre -> høyr", function() {deepEqual( Stem("høyre"), "høyr");});
test("høyrer -> høyr", function() {deepEqual( Stem("høyrer"), "høyr");});
test("høyringsmøta -> høyringsmøt", function() {deepEqual( Stem("høyringsmøta"), "høyringsmøt");});
test("høyringsmøte -> høyringsmøt", function() {deepEqual( Stem("høyringsmøte"), "høyringsmøt");});
test("høyringsnotatet -> høyringsnotat", function() {deepEqual( Stem("høyringsnotatet"), "høyringsnotat");});
test("høyringsrunden -> høyringsrund", function() {deepEqual( Stem("høyringsrunden"), "høyringsrund");});
test("høyrt -> høyrt", function() {deepEqual( Stem("høyrt"), "høyrt");});
test("høysete -> høyset", function() {deepEqual( Stem("høysete"), "høyset");});
test("høyseter -> høyset", function() {deepEqual( Stem("høyseter"), "høyset");});
test("høysetet -> høyset", function() {deepEqual( Stem("høysetet"), "høyset");});
test("høyst -> høyst", function() {deepEqual( Stem("høyst"), "høyst");});
test("høyt -> høyt", function() {deepEqual( Stem("høyt"), "høyt");});
test("høytlønte -> høytlønt", function() {deepEqual( Stem("høytlønte"), "høytlønt");});
test("høyvann -> høyvann", function() {deepEqual( Stem("høyvann"), "høyvann");});
test("i -> i", function() {deepEqual( Stem("i"), "i");});
test("iallfall -> iallfall", function() {deepEqual( Stem("iallfall"), "iallfall");});
test("ica -> ica", function() {deepEqual( Stem("ica"), "ica");});
test("ida -> ida", function() {deepEqual( Stem("ida"), "ida");});
test("idag -> idag", function() {deepEqual( Stem("idag"), "idag");});
test("idavollen -> idavoll", function() {deepEqual( Stem("idavollen"), "idavoll");});
test("iddefjorden -> iddefjord", function() {deepEqual( Stem("iddefjorden"), "iddefjord");});
test("ide -> ide", function() {deepEqual( Stem("ide"), "ide");});
test("idealistisk -> idealistisk", function() {deepEqual( Stem("idealistisk"), "idealistisk");});
test("idear -> ide", function() {deepEqual( Stem("idear"), "ide");});
test("ideell -> ideell", function() {deepEqual( Stem("ideell"), "ideell");});
test("ideelle -> ideell", function() {deepEqual( Stem("ideelle"), "ideell");});
test("ideelt -> ideelt", function() {deepEqual( Stem("ideelt"), "ideelt");});
test("ideen -> ide", function() {deepEqual( Stem("ideen"), "ide");});
test("identifiseres -> identifiser", function() {deepEqual( Stem("identifiseres"), "identifiser");});
test("identisk -> identisk", function() {deepEqual( Stem("identisk"), "identisk");});
test("identiske -> identisk", function() {deepEqual( Stem("identiske"), "identisk");});
test("identiteten -> identitet", function() {deepEqual( Stem("identiteten"), "identitet");});
test("idet -> idet", function() {deepEqual( Stem("idet"), "idet");});
test("idretter -> idrett", function() {deepEqual( Stem("idretter"), "idrett");});
test("idretts -> idrett", function() {deepEqual( Stem("idretts"), "idrett");});
test("idunn -> idunn", function() {deepEqual( Stem("idunn"), "idunn");});
test("idunns -> idunn", function() {deepEqual( Stem("idunns"), "idunn");});
test("ifra -> ifr", function() {deepEqual( Stem("ifra"), "ifr");});
test("ifølge -> ifølg", function() {deepEqual( Stem("ifølge"), "ifølg");});
test("igangsatt -> igangsatt", function() {deepEqual( Stem("igangsatt"), "igangsatt");});
test("igangsette -> igangsett", function() {deepEqual( Stem("igangsette"), "igangsett");});
test("igangsettes -> igangsett", function() {deepEqual( Stem("igangsettes"), "igangsett");});
test("igjen -> igj", function() {deepEqual( Stem("igjen"), "igj");});
test("igjennom -> igjennom", function() {deepEqual( Stem("igjennom"), "igjennom");});
test("igår -> igår", function() {deepEqual( Stem("igår"), "igår");});
test("ihjel -> ihjel", function() {deepEqual( Stem("ihjel"), "ihjel");});
test("ihrer -> ihr", function() {deepEqual( Stem("ihrer"), "ihr");});
test("iht -> iht", function() {deepEqual( Stem("iht"), "iht");});
test("ii -> ii", function() {deepEqual( Stem("ii"), "ii");});
test("ikke -> ikk", function() {deepEqual( Stem("ikke"), "ikk");});
test("ikkeeksisterende -> ikkeeksister", function() {deepEqual( Stem("ikkeeksisterende"), "ikkeeksister");});
test("ikkje -> ikkj", function() {deepEqual( Stem("ikkje"), "ikkj");});
test("ikraft -> ikraft", function() {deepEqual( Stem("ikraft"), "ikraft");});
test("ikraftsetjing -> ikraftsetjing", function() {deepEqual( Stem("ikraftsetjing"), "ikraftsetjing");});
test("ikraftsetjinga -> ikraftsetjing", function() {deepEqual( Stem("ikraftsetjinga"), "ikraftsetjing");});
test("ikrafttredelse -> ikrafttred", function() {deepEqual( Stem("ikrafttredelse"), "ikrafttred");});
test("ikrafttreden -> ikrafttred", function() {deepEqual( Stem("ikrafttreden"), "ikrafttred");});
test("iksl -> iksl", function() {deepEqual( Stem("iksl"), "iksl");});
test("ild -> ild", function() {deepEqual( Stem("ild"), "ild");});
test("ilden -> ild", function() {deepEqual( Stem("ilden"), "ild");});
test("ildfolket -> ildfolk", function() {deepEqual( Stem("ildfolket"), "ildfolk");});
test("ildkjempen -> ildkjemp", function() {deepEqual( Stem("ildkjempen"), "ildkjemp");});
test("ildkulen -> ildkul", function() {deepEqual( Stem("ildkulen"), "ildkul");});
test("ildlandet -> ildland", function() {deepEqual( Stem("ildlandet"), "ildland");});
test("ildringen -> ildring", function() {deepEqual( Stem("ildringen"), "ildring");});
test("ildrytterne -> ildryttern", function() {deepEqual( Stem("ildrytterne"), "ildryttern");});
test("ildrød -> ildrød", function() {deepEqual( Stem("ildrød"), "ildrød");});
test("ildsmykket -> ildsmykk", function() {deepEqual( Stem("ildsmykket"), "ildsmykk");});
test("ildstedet -> ildsted", function() {deepEqual( Stem("ildstedet"), "ildsted");});
test("ildstormen -> ildstorm", function() {deepEqual( Stem("ildstormen"), "ildstorm");});
test("ille -> ill", function() {deepEqual( Stem("ille"), "ill");});
test("illeluktende -> illelukt", function() {deepEqual( Stem("illeluktende"), "illelukt");});
test("illusorisk -> illusorisk", function() {deepEqual( Stem("illusorisk"), "illusorisk");});
test("illustrasjon -> illustrasjon", function() {deepEqual( Stem("illustrasjon"), "illustrasjon");});
test("illustrasjonene -> illustrasjon", function() {deepEqual( Stem("illustrasjonene"), "illustrasjon");});
test("illustrasjonens -> illustrasjon", function() {deepEqual( Stem("illustrasjonens"), "illustrasjon");});
test("illustrasjoner -> illustrasjon", function() {deepEqual( Stem("illustrasjoner"), "illustrasjon");});
test("illustrasjonsmessig -> illustrasjonsmess", function() {deepEqual( Stem("illustrasjonsmessig"), "illustrasjonsmess");});
test("illustrere -> illustrer", function() {deepEqual( Stem("illustrere"), "illustrer");});
test("illustrerende -> illustrer", function() {deepEqual( Stem("illustrerende"), "illustrer");});
test("illustrerer -> illustrer", function() {deepEqual( Stem("illustrerer"), "illustrer");});
test("illustreres -> illustrer", function() {deepEqual( Stem("illustreres"), "illustrer");});
test("illustrert -> illustrer", function() {deepEqual( Stem("illustrert"), "illustrer");});
test("ilo -> ilo", function() {deepEqual( Stem("ilo"), "ilo");});
test("iltre -> iltr", function() {deepEqual( Stem("iltre"), "iltr");});
test("imellom -> imellom", function() {deepEqual( Stem("imellom"), "imellom");});
test("imens -> imen", function() {deepEqual( Stem("imens"), "imen");});
test("imidlertid -> imidlertid", function() {deepEqual( Stem("imidlertid"), "imidlertid");});
test("immingham -> immingham", function() {deepEqual( Stem("immingham"), "immingham");});
test("imorgen -> imorg", function() {deepEqual( Stem("imorgen"), "imorg");});
test("imot -> imot", function() {deepEqual( Stem("imot"), "imot");});
test("implementere -> implementer", function() {deepEqual( Stem("implementere"), "implementer");});
test("implementeres -> implementer", function() {deepEqual( Stem("implementeres"), "implementer");});
test("implementert -> implementer", function() {deepEqual( Stem("implementert"), "implementer");});
test("impliserer -> impliser", function() {deepEqual( Stem("impliserer"), "impliser");});
test("implisitt -> implisitt", function() {deepEqual( Stem("implisitt"), "implisitt");});
test("import -> import", function() {deepEqual( Stem("import"), "import");});
test("importanlegg -> importanlegg", function() {deepEqual( Stem("importanlegg"), "importanlegg");});
test("importanløpssteder -> importanløpssted", function() {deepEqual( Stem("importanløpssteder"), "importanløpssted");});
test("importbedrifter -> importbedrift", function() {deepEqual( Stem("importbedrifter"), "importbedrift");});
test("importen -> import", function() {deepEqual( Stem("importen"), "import");});
test("importeres -> importer", function() {deepEqual( Stem("importeres"), "importer");});
test("importert -> importer", function() {deepEqual( Stem("importert"), "importer");});
test("importerte -> importer", function() {deepEqual( Stem("importerte"), "importer");});
test("importgods -> importgod", function() {deepEqual( Stem("importgods"), "importgod");});
test("importgodset -> importgods", function() {deepEqual( Stem("importgodset"), "importgods");});
test("importhavn -> importhavn", function() {deepEqual( Stem("importhavn"), "importhavn");});
test("importhavnen -> importhavn", function() {deepEqual( Stem("importhavnen"), "importhavn");});
test("importlagre -> importlagr", function() {deepEqual( Stem("importlagre"), "importlagr");});
test("importlast -> importl", function() {deepEqual( Stem("importlast"), "importl");});
test("importlasten -> importlast", function() {deepEqual( Stem("importlasten"), "importlast");});
test("importmarkeder -> importmarked", function() {deepEqual( Stem("importmarkeder"), "importmarked");});
test("importoverskudd -> importoverskudd", function() {deepEqual( Stem("importoverskudd"), "importoverskudd");});
test("importsiden -> importsid", function() {deepEqual( Stem("importsiden"), "importsid");});
test("importtilbøyelighet -> importtilbøy", function() {deepEqual( Stem("importtilbøyelighet"), "importtilbøy");});
test("importtransportene -> importtransport", function() {deepEqual( Stem("importtransportene"), "importtransport");});
test("importvarer -> importvar", function() {deepEqual( Stem("importvarer"), "importvar");});
test("importvekst -> importvekst", function() {deepEqual( Stem("importvekst"), "importvekst");});
test("importveksten -> importvekst", function() {deepEqual( Stem("importveksten"), "importvekst");});
test("importverdi -> importverdi", function() {deepEqual( Stem("importverdi"), "importverdi");});
test("importvirksomheter -> importvirksom", function() {deepEqual( Stem("importvirksomheter"), "importvirksom");});
test("importvolum -> importvolum", function() {deepEqual( Stem("importvolum"), "importvolum");});
test("importvolumene -> importvolum", function() {deepEqual( Stem("importvolumene"), "importvolum");});
test("importvolumer -> importvolum", function() {deepEqual( Stem("importvolumer"), "importvolum");});
test("importvolumet -> importvolum", function() {deepEqual( Stem("importvolumet"), "importvolum");});
test("importør -> importør", function() {deepEqual( Stem("importør"), "importør");});
test("importører -> importør", function() {deepEqual( Stem("importører"), "importør");});
test("impulsen -> impuls", function() {deepEqual( Stem("impulsen"), "impuls");});
test("imøtekomme -> imøtekomm", function() {deepEqual( Stem("imøtekomme"), "imøtekomm");});
test("imøtekommer -> imøtekomm", function() {deepEqual( Stem("imøtekommer"), "imøtekomm");});
test("in -> in", function() {deepEqual( Stem("in"), "in");});
test("inatt -> inatt", function() {deepEqual( Stem("inatt"), "inatt");});
test("incitamenter -> incitament", function() {deepEqual( Stem("incitamenter"), "incitament");});
test("indeksen -> indeks", function() {deepEqual( Stem("indeksen"), "indeks");});
test("indeksobligasjoner -> indeksobligasjon", function() {deepEqual( Stem("indeksobligasjoner"), "indeksobligasjon");});
test("indikasjon -> indikasjon", function() {deepEqual( Stem("indikasjon"), "indikasjon");});
test("indikasjoner -> indikasjon", function() {deepEqual( Stem("indikasjoner"), "indikasjon");});
test("indikator -> indikator", function() {deepEqual( Stem("indikator"), "indikator");});
test("indikatorbasert -> indikatorbaser", function() {deepEqual( Stem("indikatorbasert"), "indikatorbaser");});
test("indikatorene -> indikator", function() {deepEqual( Stem("indikatorene"), "indikator");});
test("indikatorer -> indikator", function() {deepEqual( Stem("indikatorer"), "indikator");});
test("indikere -> indiker", function() {deepEqual( Stem("indikere"), "indiker");});
test("indikerer -> indiker", function() {deepEqual( Stem("indikerer"), "indiker");});
test("indirekte -> indirekt", function() {deepEqual( Stem("indirekte"), "indirekt");});
test("individbasert -> individbaser", function() {deepEqual( Stem("individbasert"), "individbaser");});
test("individualisert -> individualiser", function() {deepEqual( Stem("individualisert"), "individualiser");});
test("individualiserte -> individualiser", function() {deepEqual( Stem("individualiserte"), "individualiser");});
test("individuell -> individuell", function() {deepEqual( Stem("individuell"), "individuell");});
test("individuelle -> individuell", function() {deepEqual( Stem("individuelle"), "individuell");});
test("individuelt -> individuelt", function() {deepEqual( Stem("individuelt"), "individuelt");});
test("indre -> indr", function() {deepEqual( Stem("indre"), "indr");});
test("industri -> industri", function() {deepEqual( Stem("industri"), "industri");});
test("industrianlegg -> industrianlegg", function() {deepEqual( Stem("industrianlegg"), "industrianlegg");});
test("industriareal -> industriareal", function() {deepEqual( Stem("industriareal"), "industriareal");});
test("industribedriftene -> industribedrift", function() {deepEqual( Stem("industribedriftene"), "industribedrift");});
test("industribedrifter -> industribedrift", function() {deepEqual( Stem("industribedrifter"), "industribedrift");});
test("industrielle -> industriell", function() {deepEqual( Stem("industrielle"), "industriell");});
test("industrien -> industri", function() {deepEqual( Stem("industrien"), "industri");});
test("industriens -> industri", function() {deepEqual( Stem("industriens"), "industri");});
test("industriforetak -> industriforetak", function() {deepEqual( Stem("industriforetak"), "industriforetak");});
test("industriforetakene -> industriforetak", function() {deepEqual( Stem("industriforetakene"), "industriforetak");});
test("industrigods -> industrigod", function() {deepEqual( Stem("industrigods"), "industrigod");});
test("industrigrupperinger -> industrigruppering", function() {deepEqual( Stem("industrigrupperinger"), "industrigruppering");});
test("industrihavnen -> industrihavn", function() {deepEqual( Stem("industrihavnen"), "industrihavn");});
test("industrihavner -> industrihavn", function() {deepEqual( Stem("industrihavner"), "industrihavn");});
test("industrikaiene -> industrikai", function() {deepEqual( Stem("industrikaiene"), "industrikai");});
test("industrikaier -> industrikai", function() {deepEqual( Stem("industrikaier"), "industrikai");});
test("industriland -> industriland", function() {deepEqual( Stem("industriland"), "industriland");});
test("industrinasjoner -> industrinasjon", function() {deepEqual( Stem("industrinasjoner"), "industrinasjon");});
test("industriområdene -> industriområd", function() {deepEqual( Stem("industriområdene"), "industriområd");});
test("industriproduksjon -> industriproduksjon", function() {deepEqual( Stem("industriproduksjon"), "industriproduksjon");});
test("industris -> industris", function() {deepEqual( Stem("industris"), "industris");});
test("industrivarene -> industrivar", function() {deepEqual( Stem("industrivarene"), "industrivar");});
test("industrivarer -> industrivar", function() {deepEqual( Stem("industrivarer"), "industrivar");});
test("industrivirksomheter -> industrivirksom", function() {deepEqual( Stem("industrivirksomheter"), "industrivirksom");});
test("ineffektiv -> ineffektiv", function() {deepEqual( Stem("ineffektiv"), "ineffektiv");});
test("inflasjon -> inflasjon", function() {deepEqual( Stem("inflasjon"), "inflasjon");});
test("inflasjonen -> inflasjon", function() {deepEqual( Stem("inflasjonen"), "inflasjon");});
test("inflasjonsendringer -> inflasjonsendring", function() {deepEqual( Stem("inflasjonsendringer"), "inflasjonsendring");});
test("inflasjonsrate -> inflasjonsrat", function() {deepEqual( Stem("inflasjonsrate"), "inflasjonsrat");});
test("inflasjonsraten -> inflasjonsrat", function() {deepEqual( Stem("inflasjonsraten"), "inflasjonsrat");});
test("inflasjonssikring -> inflasjonssikring", function() {deepEqual( Stem("inflasjonssikring"), "inflasjonssikring");});
test("influensområde -> influensområd", function() {deepEqual( Stem("influensområde"), "influensområd");});
test("influerer -> influer", function() {deepEqual( Stem("influerer"), "influer");});
test("informasjon -> informasjon", function() {deepEqual( Stem("informasjon"), "informasjon");});
test("informasjoner -> informasjon", function() {deepEqual( Stem("informasjoner"), "informasjon");});
test("informasjons -> informasjon", function() {deepEqual( Stem("informasjons"), "informasjon");});
test("informasjonsansvar -> informasjonsansv", function() {deepEqual( Stem("informasjonsansvar"), "informasjonsansv");});
test("informasjonsgrunnlaget -> informasjonsgrunnlag", function() {deepEqual( Stem("informasjonsgrunnlaget"), "informasjonsgrunnlag");});
test("informasjonskravet -> informasjonskrav", function() {deepEqual( Stem("informasjonskravet"), "informasjonskrav");});
test("informasjonsplikt -> informasjonsplikt", function() {deepEqual( Stem("informasjonsplikt"), "informasjonsplikt");});
test("informasjonsteknologi -> informasjonsteknologi", function() {deepEqual( Stem("informasjonsteknologi"), "informasjonsteknologi");});
test("informasjonsutveksling -> informasjonsutveksling", function() {deepEqual( Stem("informasjonsutveksling"), "informasjonsutveksling");});
test("informere -> informer", function() {deepEqual( Stem("informere"), "informer");});
test("informerer -> informer", function() {deepEqual( Stem("informerer"), "informer");});
test("informert -> informer", function() {deepEqual( Stem("informert"), "informer");});
test("infrastructure -> infrastructur", function() {deepEqual( Stem("infrastructure"), "infrastructur");});
test("infrastruktur -> infrastruktur", function() {deepEqual( Stem("infrastruktur"), "infrastruktur");});
test("infrastrukturbehov -> infrastrukturbehov", function() {deepEqual( Stem("infrastrukturbehov"), "infrastrukturbehov");});
test("infrastrukturelle -> infrastrukturell", function() {deepEqual( Stem("infrastrukturelle"), "infrastrukturell");});
test("infrastrukturen -> infrastruktur", function() {deepEqual( Stem("infrastrukturen"), "infrastruktur");});
test("infrastrukturene -> infrastruktur", function() {deepEqual( Stem("infrastrukturene"), "infrastruktur");});
test("infrastrukturinvesteringer -> infrastrukturinvestering", function() {deepEqual( Stem("infrastrukturinvesteringer"), "infrastrukturinvestering");});
test("infrastrukturproblemer -> infrastrukturproblem", function() {deepEqual( Stem("infrastrukturproblemer"), "infrastrukturproblem");});
test("infrastrukturprosjekter -> infrastrukturprosjekt", function() {deepEqual( Stem("infrastrukturprosjekter"), "infrastrukturprosjekt");});
test("infrastrukturtiltak -> infrastrukturtiltak", function() {deepEqual( Stem("infrastrukturtiltak"), "infrastrukturtiltak");});
test("inga -> ing", function() {deepEqual( Stem("inga"), "ing");});
test("ingen -> ing", function() {deepEqual( Stem("ingen"), "ing");});
test("ingenting -> ingenting", function() {deepEqual( Stem("ingenting"), "ingenting");});
test("inger -> ing", function() {deepEqual( Stem("inger"), "ing");});
test("ingrid -> ingrid", function() {deepEqual( Stem("ingrid"), "ingrid");});
test("inhabil -> inhabil", function() {deepEqual( Stem("inhabil"), "inhabil");});
test("inhabile -> inhabil", function() {deepEqual( Stem("inhabile"), "inhabil");});
test("inhabilitet -> inhabilit", function() {deepEqual( Stem("inhabilitet"), "inhabilit");});
test("inhabilitetsreglane -> inhabilitetsregl", function() {deepEqual( Stem("inhabilitetsreglane"), "inhabilitetsregl");});
test("initiativ -> initiativ", function() {deepEqual( Stem("initiativ"), "initiativ");});
test("initiativene -> initiativ", function() {deepEqual( Stem("initiativene"), "initiativ");});
test("initiativet -> initiativ", function() {deepEqual( Stem("initiativet"), "initiativ");});
test("inkassolova -> inkasso", function() {deepEqual( Stem("inkassolova"), "inkasso");});
test("inkl -> inkl", function() {deepEqual( Stem("inkl"), "inkl");});
test("inkludere -> inkluder", function() {deepEqual( Stem("inkludere"), "inkluder");});
test("inkluderer -> inkluder", function() {deepEqual( Stem("inkluderer"), "inkluder");});
test("inkluderes -> inkluder", function() {deepEqual( Stem("inkluderes"), "inkluder");});
test("inkludert -> inkluder", function() {deepEqual( Stem("inkludert"), "inkluder");});
test("inkluderte -> inkluder", function() {deepEqual( Stem("inkluderte"), "inkluder");});
test("inklusive -> inklusiv", function() {deepEqual( Stem("inklusive"), "inklusiv");});
test("inkonsekvent -> inkonsekvent", function() {deepEqual( Stem("inkonsekvent"), "inkonsekvent");});
test("inn -> inn", function() {deepEqual( Stem("inn"), "inn");});
test("innad -> innad", function() {deepEqual( Stem("innad"), "innad");});
test("innafor -> innafor", function() {deepEqual( Stem("innafor"), "innafor");});
test("innan -> innan", function() {deepEqual( Stem("innan"), "innan");});
test("innarbeidast -> innarbeid", function() {deepEqual( Stem("innarbeidast"), "innarbeid");});
test("innarbeidd -> innarbeidd", function() {deepEqual( Stem("innarbeidd"), "innarbeidd");});
test("innarbeidde -> innarbeidd", function() {deepEqual( Stem("innarbeidde"), "innarbeidd");});
test("innarbeide -> innarbeid", function() {deepEqual( Stem("innarbeide"), "innarbeid");});
test("innarbeides -> innarbeid", function() {deepEqual( Stem("innarbeides"), "innarbeid");});
test("innarbeidet -> innarbeid", function() {deepEqual( Stem("innarbeidet"), "innarbeid");});
test("innbakt -> innbakt", function() {deepEqual( Stem("innbakt"), "innbakt");});
test("innbeding -> innbeding", function() {deepEqual( Stem("innbeding"), "innbeding");});
test("innbefatter -> innbefatt", function() {deepEqual( Stem("innbefatter"), "innbefatt");});
test("innberetning -> innberetning", function() {deepEqual( Stem("innberetning"), "innberetning");});
test("innberette -> innberett", function() {deepEqual( Stem("innberette"), "innberett");});
test("innberettes -> innberett", function() {deepEqual( Stem("innberettes"), "innberett");});
test("innberettet -> innberett", function() {deepEqual( Stem("innberettet"), "innberett");});
test("innbetale -> innbetal", function() {deepEqual( Stem("innbetale"), "innbetal");});
test("innbetaler -> innbetal", function() {deepEqual( Stem("innbetaler"), "innbetal");});
test("innbetales -> innbetal", function() {deepEqual( Stem("innbetales"), "innbetal");});
test("innbetaling -> innbetaling", function() {deepEqual( Stem("innbetaling"), "innbetaling");});
test("innbetalinga -> innbetaling", function() {deepEqual( Stem("innbetalinga"), "innbetaling");});
test("innbetalingane -> innbetaling", function() {deepEqual( Stem("innbetalingane"), "innbetaling");});
test("innbetalingar -> innbetaling", function() {deepEqual( Stem("innbetalingar"), "innbetaling");});
test("innbetalingen -> innbetaling", function() {deepEqual( Stem("innbetalingen"), "innbetaling");});
test("innbetalingene -> innbetaling", function() {deepEqual( Stem("innbetalingene"), "innbetaling");});
test("innbetalinger -> innbetaling", function() {deepEqual( Stem("innbetalinger"), "innbetaling");});
test("innbetalingsperiode -> innbetalingsperiod", function() {deepEqual( Stem("innbetalingsperiode"), "innbetalingsperiod");});
test("innbetalingsperioden -> innbetalingsperiod", function() {deepEqual( Stem("innbetalingsperioden"), "innbetalingsperiod");});
test("innbetalingsprofil -> innbetalingsprofil", function() {deepEqual( Stem("innbetalingsprofil"), "innbetalingsprofil");});
test("innbetalingsprofilen -> innbetalingsprofil", function() {deepEqual( Stem("innbetalingsprofilen"), "innbetalingsprofil");});
test("innbetalingstid -> innbetalingstid", function() {deepEqual( Stem("innbetalingstid"), "innbetalingstid");});
test("innbetalingstiden -> innbetalingstid", function() {deepEqual( Stem("innbetalingstiden"), "innbetalingstid");});
test("innbetalingstidens -> innbetalingstid", function() {deepEqual( Stem("innbetalingstidens"), "innbetalingstid");});
test("innbetalingstidspunktet -> innbetalingstidspunkt", function() {deepEqual( Stem("innbetalingstidspunktet"), "innbetalingstidspunkt");});
test("innbetalingsår -> innbetalingsår", function() {deepEqual( Stem("innbetalingsår"), "innbetalingsår");});
test("innbetalt -> innbetalt", function() {deepEqual( Stem("innbetalt"), "innbetalt");});
test("innbetalte -> innbetalt", function() {deepEqual( Stem("innbetalte"), "innbetalt");});
test("innbille -> innbill", function() {deepEqual( Stem("innbille"), "innbill");});
test("innbringe -> innbring", function() {deepEqual( Stem("innbringe"), "innbring");});
test("innbrot -> innbrot", function() {deepEqual( Stem("innbrot"), "innbrot");});
test("innbu -> innbu", function() {deepEqual( Stem("innbu"), "innbu");});
test("innbyggere -> innbygger", function() {deepEqual( Stem("innbyggere"), "innbygger");});
test("innbyrdes -> innbyrd", function() {deepEqual( Stem("innbyrdes"), "innbyrd");});
test("inndeling -> inndeling", function() {deepEqual( Stem("inndeling"), "inndeling");});
test("inndelinga -> inndeling", function() {deepEqual( Stem("inndelinga"), "inndeling");});
test("inndelingen -> inndeling", function() {deepEqual( Stem("inndelingen"), "inndeling");});
test("inndelinger -> inndeling", function() {deepEqual( Stem("inndelinger"), "inndeling");});
test("inndelt -> inndelt", function() {deepEqual( Stem("inndelt"), "inndelt");});
test("inndrive -> inndriv", function() {deepEqual( Stem("inndrive"), "inndriv");});
test("inndriving -> inndriving", function() {deepEqual( Stem("inndriving"), "inndriving");});
test("inne -> inn", function() {deepEqual( Stem("inne"), "inn");});
test("innebar -> inneb", function() {deepEqual( Stem("innebar"), "inneb");});
test("inneber -> inneb", function() {deepEqual( Stem("inneber"), "inneb");});
test("innebere -> inneber", function() {deepEqual( Stem("innebere"), "inneber");});
test("innebygde -> innebygd", function() {deepEqual( Stem("innebygde"), "innebygd");});
test("innebære -> innebær", function() {deepEqual( Stem("innebære"), "innebær");});
test("innebærer -> innebær", function() {deepEqual( Stem("innebærer"), "innebær");});
test("innefor -> innefor", function() {deepEqual( Stem("innefor"), "innefor");});
test("inneha -> inneh", function() {deepEqual( Stem("inneha"), "inneh");});
test("innehalde -> innehald", function() {deepEqual( Stem("innehalde"), "innehald");});
test("innehar -> inneh", function() {deepEqual( Stem("innehar"), "inneh");});
test("innehavarane -> innehavar", function() {deepEqual( Stem("innehavarane"), "innehavar");});
test("innehavaren -> innehavar", function() {deepEqual( Stem("innehavaren"), "innehavar");});
test("innehaver -> innehav", function() {deepEqual( Stem("innehaver"), "innehav");});
test("innehaveren -> innehaver", function() {deepEqual( Stem("innehaveren"), "innehaver");});
test("inneheld -> inneheld", function() {deepEqual( Stem("inneheld"), "inneheld");});
test("inneholde -> innehold", function() {deepEqual( Stem("inneholde"), "innehold");});
test("inneholder -> innehold", function() {deepEqual( Stem("inneholder"), "innehold");});
test("inneklemt -> inneklemt", function() {deepEqual( Stem("inneklemt"), "inneklemt");});
test("innen -> inn", function() {deepEqual( Stem("innen"), "inn");});
test("innenfor -> innenfor", function() {deepEqual( Stem("innenfor"), "innenfor");});
test("innenlands -> innenland", function() {deepEqual( Stem("innenlands"), "innenland");});
test("innenlandsk -> innenlandsk", function() {deepEqual( Stem("innenlandsk"), "innenlandsk");});
test("innenlandske -> innenlandsk", function() {deepEqual( Stem("innenlandske"), "innenlandsk");});
test("innenlandstrafikk -> innenlandstrafikk", function() {deepEqual( Stem("innenlandstrafikk"), "innenlandstrafikk");});
test("innenriks -> innenriks", function() {deepEqual( Stem("innenriks"), "innenriks");});
test("innenrikstrafikken -> innenrikstrafikk", function() {deepEqual( Stem("innenrikstrafikken"), "innenrikstrafikk");});
test("innenrikstransporter -> innenrikstransport", function() {deepEqual( Stem("innenrikstransporter"), "innenrikstransport");});
test("inneriks -> inneriks", function() {deepEqual( Stem("inneriks"), "inneriks");});
test("innerst -> innerst", function() {deepEqual( Stem("innerst"), "innerst");});
test("inneståande -> innestå", function() {deepEqual( Stem("inneståande"), "innestå");});
test("innestående -> innestå", function() {deepEqual( Stem("innestående"), "innestå");});
test("innestår -> innestår", function() {deepEqual( Stem("innestår"), "innestår");});
test("inneværende -> innevær", function() {deepEqual( Stem("inneværende"), "innevær");});
test("innfart -> innfart", function() {deepEqual( Stem("innfart"), "innfart");});
test("innfartsvegene -> innfartsveg", function() {deepEqual( Stem("innfartsvegene"), "innfartsveg");});
test("innfartsveger -> innfartsveg", function() {deepEqual( Stem("innfartsveger"), "innfartsveg");});
test("innflytelse -> innflyt", function() {deepEqual( Stem("innflytelse"), "innflyt");});
test("innflytting -> innflytting", function() {deepEqual( Stem("innflytting"), "innflytting");});
test("innflyttingsklar -> innflyttingskl", function() {deepEqual( Stem("innflyttingsklar"), "innflyttingskl");});
test("innflyttingsklare -> innflyttingsklar", function() {deepEqual( Stem("innflyttingsklare"), "innflyttingsklar");});
test("innforstått -> innforstått", function() {deepEqual( Stem("innforstått"), "innforstått");});
test("innfortolke -> innfortolk", function() {deepEqual( Stem("innfortolke"), "innfortolk");});
test("innfri -> innfri", function() {deepEqual( Stem("innfri"), "innfri");});
test("innfridd -> innfridd", function() {deepEqual( Stem("innfridd"), "innfridd");});
test("innfriing -> innfriing", function() {deepEqual( Stem("innfriing"), "innfriing");});
test("innfrir -> innfrir", function() {deepEqual( Stem("innfrir"), "innfrir");});
test("innfris -> innfris", function() {deepEqual( Stem("innfris"), "innfris");});
test("innførast -> innfør", function() {deepEqual( Stem("innførast"), "innfør");});
test("innføre -> innfør", function() {deepEqual( Stem("innføre"), "innfør");});
test("innfører -> innfør", function() {deepEqual( Stem("innfører"), "innfør");});
test("innføres -> innfør", function() {deepEqual( Stem("innføres"), "innfør");});
test("innføring -> innføring", function() {deepEqual( Stem("innføring"), "innføring");});
test("innføringa -> innføring", function() {deepEqual( Stem("innføringa"), "innføring");});
test("innføringen -> innføring", function() {deepEqual( Stem("innføringen"), "innføring");});
test("innført -> innført", function() {deepEqual( Stem("innført"), "innført");});
test("innførte -> innført", function() {deepEqual( Stem("innførte"), "innført");});
test("inngang -> inngang", function() {deepEqual( Stem("inngang"), "inngang");});
test("inngangen -> inngang", function() {deepEqual( Stem("inngangen"), "inngang");});
test("inngikk -> inngikk", function() {deepEqual( Stem("inngikk"), "inngikk");});
test("inngis -> inngis", function() {deepEqual( Stem("inngis"), "inngis");});
test("inngrep -> inngrep", function() {deepEqual( Stem("inngrep"), "inngrep");});
test("inngå -> inngå", function() {deepEqual( Stem("inngå"), "inngå");});
test("inngåande -> inngå", function() {deepEqual( Stem("inngåande"), "inngå");});
test("inngåelse -> inngå", function() {deepEqual( Stem("inngåelse"), "inngå");});
test("inngående -> inngå", function() {deepEqual( Stem("inngående"), "inngå");});
test("inngåing -> inngåing", function() {deepEqual( Stem("inngåing"), "inngåing");});
test("inngår -> inngår", function() {deepEqual( Stem("inngår"), "inngår");});
test("inngås -> inngås", function() {deepEqual( Stem("inngås"), "inngås");});
test("inngått -> inngått", function() {deepEqual( Stem("inngått"), "inngått");});
test("innhald -> innhald", function() {deepEqual( Stem("innhald"), "innhald");});
test("innhaldet -> innhald", function() {deepEqual( Stem("innhaldet"), "innhald");});
test("innhaldsrike -> innhaldsrik", function() {deepEqual( Stem("innhaldsrike"), "innhaldsrik");});
test("innhenta -> innhent", function() {deepEqual( Stem("innhenta"), "innhent");});
test("innhente -> innhent", function() {deepEqual( Stem("innhente"), "innhent");});
test("innhentet -> innhent", function() {deepEqual( Stem("innhentet"), "innhent");});
test("innhenting -> innhenting", function() {deepEqual( Stem("innhenting"), "innhenting");});
test("innhold -> innhold", function() {deepEqual( Stem("innhold"), "innhold");});
test("innholdet -> innhold", function() {deepEqual( Stem("innholdet"), "innhold");});
test("innhule -> innhul", function() {deepEqual( Stem("innhule"), "innhul");});
test("innkalling -> innkalling", function() {deepEqual( Stem("innkalling"), "innkalling");});
test("innkallinga -> innkalling", function() {deepEqual( Stem("innkallinga"), "innkalling");});
test("innkallingsplikt -> innkallingsplikt", function() {deepEqual( Stem("innkallingsplikt"), "innkallingsplikt");});
test("innkjøp -> innkjøp", function() {deepEqual( Stem("innkjøp"), "innkjøp");});
test("innkjøpslag -> innkjøpslag", function() {deepEqual( Stem("innkjøpslag"), "innkjøpslag");});
test("innkjøpsmakt -> innkjøpsmakt", function() {deepEqual( Stem("innkjøpsmakt"), "innkjøpsmakt");});
test("innkomne -> innkomn", function() {deepEqual( Stem("innkomne"), "innkomn");});
test("innkrevingssentral -> innkrevingssentral", function() {deepEqual( Stem("innkrevingssentral"), "innkrevingssentral");});
test("innkrevjing -> innkrevjing", function() {deepEqual( Stem("innkrevjing"), "innkrevjing");});
test("innledning -> innledning", function() {deepEqual( Stem("innledning"), "innledning");});
test("innledningen -> innledning", function() {deepEqual( Stem("innledningen"), "innledning");});
test("innledningsvis -> innledningsvis", function() {deepEqual( Stem("innledningsvis"), "innledningsvis");});
test("innleiande -> innlei", function() {deepEqual( Stem("innleiande"), "innlei");});
test("innleiing -> innleiing", function() {deepEqual( Stem("innleiing"), "innleiing");});
test("innleiinga -> innleiing", function() {deepEqual( Stem("innleiinga"), "innleiing");});
test("innlemme -> innlemm", function() {deepEqual( Stem("innlemme"), "innlemm");});
test("innlemmes -> innlemm", function() {deepEqual( Stem("innlemmes"), "innlemm");});
test("innlevering -> innlevering", function() {deepEqual( Stem("innlevering"), "innlevering");});
test("innlosjering -> innlosjering", function() {deepEqual( Stem("innlosjering"), "innlosjering");});
test("innlysande -> innlys", function() {deepEqual( Stem("innlysande"), "innlys");});
test("innlån -> innlån", function() {deepEqual( Stem("innlån"), "innlån");});
test("innlånte -> innlånt", function() {deepEqual( Stem("innlånte"), "innlånt");});
test("innlåsing -> innlåsing", function() {deepEqual( Stem("innlåsing"), "innlåsing");});
test("innløpet -> innløp", function() {deepEqual( Stem("innløpet"), "innløp");});
test("innløsning -> innløsning", function() {deepEqual( Stem("innløsning"), "innløsning");});
test("innløsningsretten -> innløsningsrett", function() {deepEqual( Stem("innløsningsretten"), "innløsningsrett");});
test("innløst -> innløst", function() {deepEqual( Stem("innløst"), "innløst");});
test("innløysing -> innløysing", function() {deepEqual( Stem("innløysing"), "innløysing");});
test("innløysingspapir -> innløysingspapir", function() {deepEqual( Stem("innløysingspapir"), "innløysingspapir");});
test("innløysingsregelen -> innløysingsregel", function() {deepEqual( Stem("innløysingsregelen"), "innløysingsregel");});
test("innløysingssummen -> innløysingssumm", function() {deepEqual( Stem("innløysingssummen"), "innløysingssumm");});
test("innmelde -> innmeld", function() {deepEqual( Stem("innmelde"), "innmeld");});
test("innmeldes -> innmeld", function() {deepEqual( Stem("innmeldes"), "innmeld");});
test("innmelding -> innmelding", function() {deepEqual( Stem("innmelding"), "innmelding");});
test("innom -> innom", function() {deepEqual( Stem("innom"), "innom");});
test("innovativt -> innovativ", function() {deepEqual( Stem("innovativt"), "innovativ");});
test("innover -> innov", function() {deepEqual( Stem("innover"), "innov");});
test("innpasset -> innpass", function() {deepEqual( Stem("innpasset"), "innpass");});
test("innpå -> innpå", function() {deepEqual( Stem("innpå"), "innpå");});
test("innreidde -> innreidd", function() {deepEqual( Stem("innreidde"), "innreidd");});
test("innretning -> innretning", function() {deepEqual( Stem("innretning"), "innretning");});
test("innretningen -> innretning", function() {deepEqual( Stem("innretningen"), "innretning");});
test("innretninger -> innretning", function() {deepEqual( Stem("innretninger"), "innretning");});
test("innretta -> innrett", function() {deepEqual( Stem("innretta"), "innrett");});
test("innrettar -> innrett", function() {deepEqual( Stem("innrettar"), "innrett");});
test("innrette -> innrett", function() {deepEqual( Stem("innrette"), "innrett");});
test("innrettet -> innrett", function() {deepEqual( Stem("innrettet"), "innrett");});
test("innretting -> innretting", function() {deepEqual( Stem("innretting"), "innretting");});
test("innrømme -> innrømm", function() {deepEqual( Stem("innrømme"), "innrømm");});
test("innrømmer -> innrømm", function() {deepEqual( Stem("innrømmer"), "innrømm");});
test("innrømmes -> innrømm", function() {deepEqual( Stem("innrømmes"), "innrømm");});
test("innrømmet -> innrømm", function() {deepEqual( Stem("innrømmet"), "innrømm");});
test("innsamling -> innsamling", function() {deepEqual( Stem("innsamling"), "innsamling");});
test("innsats -> innsat", function() {deepEqual( Stem("innsats"), "innsat");});
test("innsatsfaktorer -> innsatsfaktor", function() {deepEqual( Stem("innsatsfaktorer"), "innsatsfaktor");});
test("innseiling -> innseiling", function() {deepEqual( Stem("innseiling"), "innseiling");});
test("innseilingen -> innseiling", function() {deepEqual( Stem("innseilingen"), "innseiling");});
test("innseilingskorridorene -> innseilingskorridor", function() {deepEqual( Stem("innseilingskorridorene"), "innseilingskorridor");});
test("innseilingsled -> innseilingsled", function() {deepEqual( Stem("innseilingsled"), "innseilingsled");});
test("innseilingsleder -> innseilingsled", function() {deepEqual( Stem("innseilingsleder"), "innseilingsled");});
test("innsende -> inns", function() {deepEqual( Stem("innsende"), "inns");});
test("innsending -> innsending", function() {deepEqual( Stem("innsending"), "innsending");});
test("innser -> inns", function() {deepEqual( Stem("innser"), "inns");});
test("innsida -> innsid", function() {deepEqual( Stem("innsida"), "innsid");});
test("innsiden -> innsid", function() {deepEqual( Stem("innsiden"), "innsid");});
test("innsigelse -> innsig", function() {deepEqual( Stem("innsigelse"), "innsig");});
test("innsigelsen -> innsig", function() {deepEqual( Stem("innsigelsen"), "innsig");});
test("innsigelser -> innsig", function() {deepEqual( Stem("innsigelser"), "innsig");});
test("innsigelses -> innsig", function() {deepEqual( Stem("innsigelses"), "innsig");});
test("innsikt -> innsikt", function() {deepEqual( Stem("innsikt"), "innsikt");});
test("innsjø -> innsjø", function() {deepEqual( Stem("innsjø"), "innsjø");});
test("innsjøer -> innsjø", function() {deepEqual( Stem("innsjøer"), "innsjø");});
test("innskot -> innskot", function() {deepEqual( Stem("innskot"), "innskot");});
test("innskota -> innskot", function() {deepEqual( Stem("innskota"), "innskot");});
test("innskoten -> innskot", function() {deepEqual( Stem("innskoten"), "innskot");});
test("innskotet -> innskot", function() {deepEqual( Stem("innskotet"), "innskot");});
test("innskotsbasert -> innskotsbaser", function() {deepEqual( Stem("innskotsbasert"), "innskotsbaser");});
test("innskotsbaserte -> innskotsbaser", function() {deepEqual( Stem("innskotsbaserte"), "innskotsbaser");});
test("innskotsforma -> innskotsform", function() {deepEqual( Stem("innskotsforma"), "innskotsform");});
test("innskotskapital -> innskotskapital", function() {deepEqual( Stem("innskotskapital"), "innskotskapital");});
test("innskotskapitalen -> innskotskapital", function() {deepEqual( Stem("innskotskapitalen"), "innskotskapital");});
test("innskottsbasert -> innskottsbaser", function() {deepEqual( Stem("innskottsbasert"), "innskottsbaser");});
test("innskrenkende -> innskrenk", function() {deepEqual( Stem("innskrenkende"), "innskrenk");});
test("innskrenker -> innskrenk", function() {deepEqual( Stem("innskrenker"), "innskrenk");});
test("innskrenkes -> innskrenk", function() {deepEqual( Stem("innskrenkes"), "innskrenk");});
test("innskrenking -> innskrenking", function() {deepEqual( Stem("innskrenking"), "innskrenking");});
test("innskrenkning -> innskrenkning", function() {deepEqual( Stem("innskrenkning"), "innskrenkning");});
test("innskrenkningen -> innskrenkning", function() {deepEqual( Stem("innskrenkningen"), "innskrenkning");});
test("innskudd -> innskudd", function() {deepEqual( Stem("innskudd"), "innskudd");});
test("innskuddene -> innskudd", function() {deepEqual( Stem("innskuddene"), "innskudd");});
test("innskuddenes -> innskudd", function() {deepEqual( Stem("innskuddenes"), "innskudd");});
test("innskuddet -> innskudd", function() {deepEqual( Stem("innskuddet"), "innskudd");});
test("innskuddets -> innskudd", function() {deepEqual( Stem("innskuddets"), "innskudd");});
test("innskudds -> innskudd", function() {deepEqual( Stem("innskudds"), "innskudd");});
test("innskuddsalternativer -> innskuddsalternativ", function() {deepEqual( Stem("innskuddsalternativer"), "innskuddsalternativ");});
test("innskuddsatser -> innskuddsats", function() {deepEqual( Stem("innskuddsatser"), "innskuddsats");});
test("innskuddsbasering -> innskuddsbasering", function() {deepEqual( Stem("innskuddsbasering"), "innskuddsbasering");});
test("innskuddsbasert -> innskuddsbaser", function() {deepEqual( Stem("innskuddsbasert"), "innskuddsbaser");});
test("innskuddsbaserte -> innskuddsbaser", function() {deepEqual( Stem("innskuddsbaserte"), "innskuddsbaser");});
test("innskuddsbolig -> innskuddsbo", function() {deepEqual( Stem("innskuddsbolig"), "innskuddsbo");});
test("innskuddsfond -> innskuddsfond", function() {deepEqual( Stem("innskuddsfond"), "innskuddsfond");});
test("innskuddsfondet -> innskuddsfond", function() {deepEqual( Stem("innskuddsfondet"), "innskuddsfond");});
test("innskuddsfondets -> innskuddsfond", function() {deepEqual( Stem("innskuddsfondets"), "innskuddsfond");});
test("innskuddsfondsmidlene -> innskuddsfondsmidl", function() {deepEqual( Stem("innskuddsfondsmidlene"), "innskuddsfondsmidl");});
test("innskuddsfondsmidler -> innskuddsfondsmidl", function() {deepEqual( Stem("innskuddsfondsmidler"), "innskuddsfondsmidl");});
test("innskuddsforskjeller -> innskuddsforskjell", function() {deepEqual( Stem("innskuddsforskjeller"), "innskuddsforskjell");});
test("innskuddsfradrag -> innskuddsfradrag", function() {deepEqual( Stem("innskuddsfradrag"), "innskuddsfradrag");});
test("innskuddsfritak -> innskuddsfritak", function() {deepEqual( Stem("innskuddsfritak"), "innskuddsfritak");});
test("innskuddsfritaket -> innskuddsfritak", function() {deepEqual( Stem("innskuddsfritaket"), "innskuddsfritak");});
test("innskuddsgivende -> innskuddsgiv", function() {deepEqual( Stem("innskuddsgivende"), "innskuddsgiv");});
test("innskuddsgrenser -> innskuddsgrens", function() {deepEqual( Stem("innskuddsgrenser"), "innskuddsgrens");});
test("innskuddskvittering -> innskuddskvittering", function() {deepEqual( Stem("innskuddskvittering"), "innskuddskvittering");});
test("innskuddskvitteringene -> innskuddskvittering", function() {deepEqual( Stem("innskuddskvitteringene"), "innskuddskvittering");});
test("innskuddskvitteringer -> innskuddskvittering", function() {deepEqual( Stem("innskuddskvitteringer"), "innskuddskvittering");});
test("innskuddsordning -> innskuddsordning", function() {deepEqual( Stem("innskuddsordning"), "innskuddsordning");});
test("innskuddsordningen -> innskuddsordning", function() {deepEqual( Stem("innskuddsordningen"), "innskuddsordning");});
test("innskuddsordninger -> innskuddsordning", function() {deepEqual( Stem("innskuddsordninger"), "innskuddsordning");});
test("innskuddsordningers -> innskuddsordning", function() {deepEqual( Stem("innskuddsordningers"), "innskuddsordning");});
test("innskuddsordnings -> innskuddsordning", function() {deepEqual( Stem("innskuddsordnings"), "innskuddsordning");});
test("innskuddspensjon -> innskuddspensjon", function() {deepEqual( Stem("innskuddspensjon"), "innskuddspensjon");});
test("innskuddspensjoner -> innskuddspensjon", function() {deepEqual( Stem("innskuddspensjoner"), "innskuddspensjon");});
test("innskuddspensjonsordning -> innskuddspensjonsordning", function() {deepEqual( Stem("innskuddspensjonsordning"), "innskuddspensjonsordning");});
test("innskuddspensjonsordningen -> innskuddspensjonsordning", function() {deepEqual( Stem("innskuddspensjonsordningen"), "innskuddspensjonsordning");});
test("innskuddspensjonsordningene -> innskuddspensjonsordning", function() {deepEqual( Stem("innskuddspensjonsordningene"), "innskuddspensjonsordning");});
test("innskuddspensjonsordningens -> innskuddspensjonsordning", function() {deepEqual( Stem("innskuddspensjonsordningens"), "innskuddspensjonsordning");});
test("innskuddspensjonsordninger -> innskuddspensjonsordning", function() {deepEqual( Stem("innskuddspensjonsordninger"), "innskuddspensjonsordning");});
test("innskuddspensjonsspesifikke -> innskuddspensjonsspesifikk", function() {deepEqual( Stem("innskuddspensjonsspesifikke"), "innskuddspensjonsspesifikk");});
test("innskuddsplan -> innskuddsplan", function() {deepEqual( Stem("innskuddsplan"), "innskuddsplan");});
test("innskuddsplanen -> innskuddsplan", function() {deepEqual( Stem("innskuddsplanen"), "innskuddsplan");});
test("innskuddsplaner -> innskuddsplan", function() {deepEqual( Stem("innskuddsplaner"), "innskuddsplan");});
test("innskuddsprinsipper -> innskuddsprinsipp", function() {deepEqual( Stem("innskuddsprinsipper"), "innskuddsprinsipp");});
test("innskuddsprofil -> innskuddsprofil", function() {deepEqual( Stem("innskuddsprofil"), "innskuddsprofil");});
test("innskuddsprosent -> innskuddsprosent", function() {deepEqual( Stem("innskuddsprosent"), "innskuddsprosent");});
test("innskuddsprosenten -> innskuddsprosent", function() {deepEqual( Stem("innskuddsprosenten"), "innskuddsprosent");});
test("innskuddsprosentene -> innskuddsprosent", function() {deepEqual( Stem("innskuddsprosentene"), "innskuddsprosent");});
test("innskuddsprosenter -> innskuddsprosent", function() {deepEqual( Stem("innskuddsprosenter"), "innskuddsprosent");});
test("innskuddsrammene -> innskuddsramm", function() {deepEqual( Stem("innskuddsrammene"), "innskuddsramm");});
test("innskuddsreserve -> innskuddsreserv", function() {deepEqual( Stem("innskuddsreserve"), "innskuddsreserv");});
test("innskuddsreserven -> innskuddsreserv", function() {deepEqual( Stem("innskuddsreserven"), "innskuddsreserv");});
test("innskuddssats -> innskuddssat", function() {deepEqual( Stem("innskuddssats"), "innskuddssat");});
test("innskuddssatsen -> innskuddssats", function() {deepEqual( Stem("innskuddssatsen"), "innskuddssats");});
test("innskuddssatsene -> innskuddssats", function() {deepEqual( Stem("innskuddssatsene"), "innskuddssats");});
test("innskuddssatser -> innskuddssats", function() {deepEqual( Stem("innskuddssatser"), "innskuddssats");});
test("innskuddstid -> innskuddstid", function() {deepEqual( Stem("innskuddstid"), "innskuddstid");});
test("innskuddstidspunktet -> innskuddstidspunkt", function() {deepEqual( Stem("innskuddstidspunktet"), "innskuddstidspunkt");});
test("innskuddsvalg -> innskuddsvalg", function() {deepEqual( Stem("innskuddsvalg"), "innskuddsvalg");});
test("innskuddsår -> innskuddsår", function() {deepEqual( Stem("innskuddsår"), "innskuddsår");});
test("innskuddsåret -> innskuddsår", function() {deepEqual( Stem("innskuddsåret"), "innskuddsår");});
test("innskutt -> innskutt", function() {deepEqual( Stem("innskutt"), "innskutt");});
test("innskutte -> innskutt", function() {deepEqual( Stem("innskutte"), "innskutt");});
test("innskytarane -> innskytar", function() {deepEqual( Stem("innskytarane"), "innskytar");});
test("innskytarar -> innskytar", function() {deepEqual( Stem("innskytarar"), "innskytar");});
test("innskytere -> innskyter", function() {deepEqual( Stem("innskytere"), "innskyter");});
test("innskytergaranti -> innskytergaranti", function() {deepEqual( Stem("innskytergaranti"), "innskytergaranti");});
test("innslag -> innslag", function() {deepEqual( Stem("innslag"), "innslag");});
test("innsnevring -> innsnevring", function() {deepEqual( Stem("innsnevring"), "innsnevring");});
test("innsnevringer -> innsnevring", function() {deepEqual( Stem("innsnevringer"), "innsnevring");});
test("innsparing -> innsparing", function() {deepEqual( Stem("innsparing"), "innsparing");});
test("innsparingar -> innsparing", function() {deepEqual( Stem("innsparingar"), "innsparing");});
test("innspill -> innspill", function() {deepEqual( Stem("innspill"), "innspill");});
test("innst -> innst", function() {deepEqual( Stem("innst"), "innst");});
test("innstille -> innstill", function() {deepEqual( Stem("innstille"), "innstill");});
test("innstiller -> innstill", function() {deepEqual( Stem("innstiller"), "innstill");});
test("innstilling -> innstilling", function() {deepEqual( Stem("innstilling"), "innstilling");});
test("innstillingen -> innstilling", function() {deepEqual( Stem("innstillingen"), "innstilling");});
test("innstillingene -> innstilling", function() {deepEqual( Stem("innstillingene"), "innstilling");});
test("innstilt -> innstilt", function() {deepEqual( Stem("innstilt"), "innstilt");});
test("innstilte -> innstilt", function() {deepEqual( Stem("innstilte"), "innstilt");});
test("innstramminga -> innstramming", function() {deepEqual( Stem("innstramminga"), "innstramming");});
test("innsyn -> innsyn", function() {deepEqual( Stem("innsyn"), "innsyn");});
test("innta -> innt", function() {deepEqual( Stem("innta"), "innt");});
test("inntatt -> inntatt", function() {deepEqual( Stem("inntatt"), "inntatt");});
test("inntekstbortfall -> inntekstbortfall", function() {deepEqual( Stem("inntekstbortfall"), "inntekstbortfall");});
test("inntekt -> inntekt", function() {deepEqual( Stem("inntekt"), "inntekt");});
test("inntekta -> inntekt", function() {deepEqual( Stem("inntekta"), "inntekt");});
test("inntekten -> inntekt", function() {deepEqual( Stem("inntekten"), "inntekt");});
test("inntektene -> inntekt", function() {deepEqual( Stem("inntektene"), "inntekt");});
test("inntekter -> inntekt", function() {deepEqual( Stem("inntekter"), "inntekt");});
test("inntekts -> inntekt", function() {deepEqual( Stem("inntekts"), "inntekt");});
test("inntektsbeskatning -> inntektsbeskatning", function() {deepEqual( Stem("inntektsbeskatning"), "inntektsbeskatning");});
test("inntektsbeskattes -> inntektsbeskatt", function() {deepEqual( Stem("inntektsbeskattes"), "inntektsbeskatt");});
test("inntektsbortfall -> inntektsbortfall", function() {deepEqual( Stem("inntektsbortfall"), "inntektsbortfall");});
test("inntektseffekt -> inntektseffekt", function() {deepEqual( Stem("inntektseffekt"), "inntektseffekt");});
test("inntektsfordelinga -> inntektsfordeling", function() {deepEqual( Stem("inntektsfordelinga"), "inntektsfordeling");});
test("inntektsfordelingen -> inntektsfordeling", function() {deepEqual( Stem("inntektsfordelingen"), "inntektsfordeling");});
test("inntektsfradrag -> inntektsfradrag", function() {deepEqual( Stem("inntektsfradrag"), "inntektsfradrag");});
test("inntektsfradraget -> inntektsfradrag", function() {deepEqual( Stem("inntektsfradraget"), "inntektsfradrag");});
test("inntektsfradragets -> inntektsfradrag", function() {deepEqual( Stem("inntektsfradragets"), "inntektsfradrag");});
test("inntektsfrådrag -> inntektsfrådrag", function() {deepEqual( Stem("inntektsfrådrag"), "inntektsfrådrag");});
test("inntektsføres -> inntektsfør", function() {deepEqual( Stem("inntektsføres"), "inntektsfør");});
test("inntektsføring -> inntektsføring", function() {deepEqual( Stem("inntektsføring"), "inntektsføring");});
test("inntektsgrensene -> inntektsgrens", function() {deepEqual( Stem("inntektsgrensene"), "inntektsgrens");});
test("inntektsgrunnlag -> inntektsgrunnlag", function() {deepEqual( Stem("inntektsgrunnlag"), "inntektsgrunnlag");});
test("inntektsintervallene -> inntektsintervall", function() {deepEqual( Stem("inntektsintervallene"), "inntektsintervall");});
test("inntektsintervaller -> inntektsintervall", function() {deepEqual( Stem("inntektsintervaller"), "inntektsintervall");});
test("inntektsintervallet -> inntektsintervall", function() {deepEqual( Stem("inntektsintervallet"), "inntektsintervall");});
test("inntektskilder -> inntektskild", function() {deepEqual( Stem("inntektskilder"), "inntektskild");});
test("inntektsnivå -> inntektsnivå", function() {deepEqual( Stem("inntektsnivå"), "inntektsnivå");});
test("inntektsnivået -> inntektsnivå", function() {deepEqual( Stem("inntektsnivået"), "inntektsnivå");});
test("inntektsprøvet -> inntektsprøv", function() {deepEqual( Stem("inntektsprøvet"), "inntektsprøv");});
test("inntektssikring -> inntektssikring", function() {deepEqual( Stem("inntektssikring"), "inntektssikring");});
test("inntektsstruktur -> inntektsstruktur", function() {deepEqual( Stem("inntektsstruktur"), "inntektsstruktur");});
test("inntektstap -> inntektstap", function() {deepEqual( Stem("inntektstap"), "inntektstap");});
test("inntektstavhengig -> inntektstavheng", function() {deepEqual( Stem("inntektstavhengig"), "inntektstavheng");});
test("inntektsuavhengig -> inntektsuavheng", function() {deepEqual( Stem("inntektsuavhengig"), "inntektsuavheng");});
test("inntektsvilkår -> inntektsvilkår", function() {deepEqual( Stem("inntektsvilkår"), "inntektsvilkår");});
test("inntektsår -> inntektsår", function() {deepEqual( Stem("inntektsår"), "inntektsår");});
test("inntektsåret -> inntektsår", function() {deepEqual( Stem("inntektsåret"), "inntektsår");});
test("inntil -> inntil", function() {deepEqual( Stem("inntil"), "inntil");});
test("inntjening -> inntjening", function() {deepEqual( Stem("inntjening"), "inntjening");});
test("inntransport -> inntransport", function() {deepEqual( Stem("inntransport"), "inntransport");});
test("inntreffe -> inntreff", function() {deepEqual( Stem("inntreffe"), "inntreff");});
test("inntreffer -> inntreff", function() {deepEqual( Stem("inntreffer"), "inntreff");});
test("inntrer -> inntr", function() {deepEqual( Stem("inntrer"), "inntr");});
test("inntrykk -> inntrykk", function() {deepEqual( Stem("inntrykk"), "inntrykk");});
test("inntrykket -> inntrykk", function() {deepEqual( Stem("inntrykket"), "inntrykk");});
test("inntrådt -> inntråd", function() {deepEqual( Stem("inntrådt"), "inntråd");});
test("innunder -> innund", function() {deepEqual( Stem("innunder"), "innund");});
test("innvendast -> innvend", function() {deepEqual( Stem("innvendast"), "innvend");});
test("innvende -> innv", function() {deepEqual( Stem("innvende"), "innv");});
test("innvendig -> innvend", function() {deepEqual( Stem("innvendig"), "innvend");});
test("innvendige -> innvend", function() {deepEqual( Stem("innvendige"), "innvend");});
test("innvending -> innvending", function() {deepEqual( Stem("innvending"), "innvending");});
test("innvendinga -> innvending", function() {deepEqual( Stem("innvendinga"), "innvending");});
test("innvendingane -> innvending", function() {deepEqual( Stem("innvendingane"), "innvending");});
test("innvendingar -> innvending", function() {deepEqual( Stem("innvendingar"), "innvending");});
test("innvendinger -> innvending", function() {deepEqual( Stem("innvendinger"), "innvending");});
test("innverknad -> innverknad", function() {deepEqual( Stem("innverknad"), "innverknad");});
test("innverknaden -> innverknad", function() {deepEqual( Stem("innverknaden"), "innverknad");});
test("innvinne -> innvinn", function() {deepEqual( Stem("innvinne"), "innvinn");});
test("innvinnes -> innvinn", function() {deepEqual( Stem("innvinnes"), "innvinn");});
test("innvinning -> innvinning", function() {deepEqual( Stem("innvinning"), "innvinning");});
test("innvirking -> innvirking", function() {deepEqual( Stem("innvirking"), "innvirking");});
test("innvirkning -> innvirkning", function() {deepEqual( Stem("innvirkning"), "innvirkning");});
test("innvollene -> innvoll", function() {deepEqual( Stem("innvollene"), "innvoll");});
test("innvoller -> innvoll", function() {deepEqual( Stem("innvoller"), "innvoll");});
test("innvunnet -> innvunn", function() {deepEqual( Stem("innvunnet"), "innvunn");});
test("insentivene -> insentiv", function() {deepEqual( Stem("insentivene"), "insentiv");});
test("insentiver -> insentiv", function() {deepEqual( Stem("insentiver"), "insentiv");});
test("insitament -> insitament", function() {deepEqual( Stem("insitament"), "insitament");});
test("insitamenter -> insitament", function() {deepEqual( Stem("insitamenter"), "insitament");});
test("insitamentstrukturen -> insitamentstruktur", function() {deepEqual( Stem("insitamentstrukturen"), "insitamentstruktur");});
test("installasjonar -> installasjon", function() {deepEqual( Stem("installasjonar"), "installasjon");});
test("installeres -> installer", function() {deepEqual( Stem("installeres"), "installer");});
test("installering -> installering", function() {deepEqual( Stem("installering"), "installering");});
test("instans -> instan", function() {deepEqual( Stem("instans"), "instan");});
test("institusjon -> institusjon", function() {deepEqual( Stem("institusjon"), "institusjon");});
test("institusjonar -> institusjon", function() {deepEqual( Stem("institusjonar"), "institusjon");});
test("institusjonen -> institusjon", function() {deepEqual( Stem("institusjonen"), "institusjon");});
test("institusjonene -> institusjon", function() {deepEqual( Stem("institusjonene"), "institusjon");});
test("institusjonenes -> institusjon", function() {deepEqual( Stem("institusjonenes"), "institusjon");});
test("institusjonens -> institusjon", function() {deepEqual( Stem("institusjonens"), "institusjon");});
test("institusjoner -> institusjon", function() {deepEqual( Stem("institusjoner"), "institusjon");});
test("institusjonstilsynet -> institusjonstilsyn", function() {deepEqual( Stem("institusjonstilsynet"), "institusjonstilsyn");});
test("institusjonstype -> institusjonstyp", function() {deepEqual( Stem("institusjonstype"), "institusjonstyp");});
test("institutt -> institutt", function() {deepEqual( Stem("institutt"), "institutt");});
test("instituttet -> institutt", function() {deepEqual( Stem("instituttet"), "institutt");});
test("instituttsjef -> instituttsjef", function() {deepEqual( Stem("instituttsjef"), "instituttsjef");});
test("instruere -> instruer", function() {deepEqual( Stem("instruere"), "instruer");});
test("instruks -> instruks", function() {deepEqual( Stem("instruks"), "instruks");});
test("instruksar -> instruks", function() {deepEqual( Stem("instruksar"), "instruks");});
test("instruksen -> instruks", function() {deepEqual( Stem("instruksen"), "instruks");});
test("instruksjoner -> instruksjon", function() {deepEqual( Stem("instruksjoner"), "instruksjon");});
test("instrumenter -> instrument", function() {deepEqual( Stem("instrumenter"), "instrument");});
test("insurance -> insuranc", function() {deepEqual( Stem("insurance"), "insuranc");});
test("intakt -> intakt", function() {deepEqual( Stem("intakt"), "intakt");});
test("integrasjon -> integrasjon", function() {deepEqual( Stem("integrasjon"), "integrasjon");});
test("integrasjonen -> integrasjon", function() {deepEqual( Stem("integrasjonen"), "integrasjon");});
test("integrere -> integrer", function() {deepEqual( Stem("integrere"), "integrer");});
test("integrering -> integrering", function() {deepEqual( Stem("integrering"), "integrering");});
test("integrert -> integrer", function() {deepEqual( Stem("integrert"), "integrer");});
test("integrerte -> integrer", function() {deepEqual( Stem("integrerte"), "integrer");});
test("intensjonen -> intensjon", function() {deepEqual( Stem("intensjonen"), "intensjon");});
test("intensjonene -> intensjon", function() {deepEqual( Stem("intensjonene"), "intensjon");});
test("intenst -> intenst", function() {deepEqual( Stem("intenst"), "intenst");});
test("inter -> int", function() {deepEqual( Stem("inter"), "int");});
test("interessa -> interess", function() {deepEqual( Stem("interessa"), "interess");});
test("interessant -> interessant", function() {deepEqual( Stem("interessant"), "interessant");});
test("interessante -> interessant", function() {deepEqual( Stem("interessante"), "interessant");});
test("interesse -> interess", function() {deepEqual( Stem("interesse"), "interess");});
test("interesseavveging -> interesseavveging", function() {deepEqual( Stem("interesseavveging"), "interesseavveging");});
test("interessegrupper -> interessegrupp", function() {deepEqual( Stem("interessegrupper"), "interessegrupp");});
test("interessekonflikt -> interessekonflikt", function() {deepEqual( Stem("interessekonflikt"), "interessekonflikt");});
test("interessekonfliktar -> interessekonflikt", function() {deepEqual( Stem("interessekonfliktar"), "interessekonflikt");});
test("interessemotsetnader -> interessemotsetnad", function() {deepEqual( Stem("interessemotsetnader"), "interessemotsetnad");});
test("interessemotsetningar -> interessemotsetning", function() {deepEqual( Stem("interessemotsetningar"), "interessemotsetning");});
test("interessene -> interess", function() {deepEqual( Stem("interessene"), "interess");});
test("interessentane -> interessent", function() {deepEqual( Stem("interessentane"), "interessent");});
test("interessentar -> interessent", function() {deepEqual( Stem("interessentar"), "interessent");});
test("interesseorganisasjon -> interesseorganisasjon", function() {deepEqual( Stem("interesseorganisasjon"), "interesseorganisasjon");});
test("interesseorganisasjonar -> interesseorganisasjon", function() {deepEqual( Stem("interesseorganisasjonar"), "interesseorganisasjon");});
test("interesser -> interess", function() {deepEqual( Stem("interesser"), "interess");});
test("interesserer -> interesser", function() {deepEqual( Stem("interesserer"), "interesser");});
test("interessert -> interesser", function() {deepEqual( Stem("interessert"), "interesser");});
test("interesserte -> interesser", function() {deepEqual( Stem("interesserte"), "interesser");});
test("intereuropeisk -> intereuropeisk", function() {deepEqual( Stem("intereuropeisk"), "intereuropeisk");});
test("interkommunal -> interkommunal", function() {deepEqual( Stem("interkommunal"), "interkommunal");});
test("interkommunale -> interkommunal", function() {deepEqual( Stem("interkommunale"), "interkommunal");});
test("interkommunalt -> interkommunalt", function() {deepEqual( Stem("interkommunalt"), "interkommunalt");});
test("intermodale -> intermodal", function() {deepEqual( Stem("intermodale"), "intermodal");});
test("intern -> intern", function() {deepEqual( Stem("intern"), "intern");});
test("internasjonal -> internasjonal", function() {deepEqual( Stem("internasjonal"), "internasjonal");});
test("internasjonale -> internasjonal", function() {deepEqual( Stem("internasjonale"), "internasjonal");});
test("internasjonalisering -> internasjonalisering", function() {deepEqual( Stem("internasjonalisering"), "internasjonalisering");});
test("internasjonaliseringen -> internasjonalisering", function() {deepEqual( Stem("internasjonaliseringen"), "internasjonalisering");});
test("internasjonalisert -> internasjonaliser", function() {deepEqual( Stem("internasjonalisert"), "internasjonaliser");});
test("internasjonalt -> internasjonalt", function() {deepEqual( Stem("internasjonalt"), "internasjonalt");});
test("international -> international", function() {deepEqual( Stem("international"), "international");});
test("interne -> intern", function() {deepEqual( Stem("interne"), "intern");});
test("internettsider -> internettsid", function() {deepEqual( Stem("internettsider"), "internettsid");});
test("internt -> internt", function() {deepEqual( Stem("internt"), "internt");});
test("interregional -> interregional", function() {deepEqual( Stem("interregional"), "interregional");});
test("intervall -> intervall", function() {deepEqual( Stem("intervall"), "intervall");});
test("intervallene -> intervall", function() {deepEqual( Stem("intervallene"), "intervall");});
test("intervaller -> intervall", function() {deepEqual( Stem("intervaller"), "intervall");});
test("intervallet -> intervall", function() {deepEqual( Stem("intervallet"), "intervall");});
test("intressen -> intress", function() {deepEqual( Stem("intressen"), "intress");});
test("introduksjon -> introduksjon", function() {deepEqual( Stem("introduksjon"), "introduksjon");});
test("inventar -> invent", function() {deepEqual( Stem("inventar"), "invent");});
test("investeres -> invester", function() {deepEqual( Stem("investeres"), "invester");});
test("investering -> investering", function() {deepEqual( Stem("investering"), "investering");});
test("investeringa -> investering", function() {deepEqual( Stem("investeringa"), "investering");});
test("investeringar -> investering", function() {deepEqual( Stem("investeringar"), "investering");});
test("investeringene -> investering", function() {deepEqual( Stem("investeringene"), "investering");});
test("investeringer -> investering", function() {deepEqual( Stem("investeringer"), "investering");});
test("investeringsalternativene -> investeringsalternativ", function() {deepEqual( Stem("investeringsalternativene"), "investeringsalternativ");});
test("investeringsalternativer -> investeringsalternativ", function() {deepEqual( Stem("investeringsalternativer"), "investeringsalternativ");});
test("investeringsbehovet -> investeringsbehov", function() {deepEqual( Stem("investeringsbehovet"), "investeringsbehov");});
test("investeringsbeslutningene -> investeringsbeslutning", function() {deepEqual( Stem("investeringsbeslutningene"), "investeringsbeslutning");});
test("investeringsbeslutninger -> investeringsbeslutning", function() {deepEqual( Stem("investeringsbeslutninger"), "investeringsbeslutning");});
test("investeringskostnader -> investeringskostnad", function() {deepEqual( Stem("investeringskostnader"), "investeringskostnad");});
test("investeringsmidler -> investeringsmidl", function() {deepEqual( Stem("investeringsmidler"), "investeringsmidl");});
test("investeringsobjekter -> investeringsobjekt", function() {deepEqual( Stem("investeringsobjekter"), "investeringsobjekt");});
test("investeringsorienterte -> investeringsorienter", function() {deepEqual( Stem("investeringsorienterte"), "investeringsorienter");});
test("investeringsperiode -> investeringsperiod", function() {deepEqual( Stem("investeringsperiode"), "investeringsperiod");});
test("investeringsportefølje -> investeringsportefølj", function() {deepEqual( Stem("investeringsportefølje"), "investeringsportefølj");});
test("investeringsporteføljen -> investeringsportefølj", function() {deepEqual( Stem("investeringsporteføljen"), "investeringsportefølj");});
test("investeringsporteføljene -> investeringsportefølj", function() {deepEqual( Stem("investeringsporteføljene"), "investeringsportefølj");});
test("investeringsporteføljer -> investeringsportefølj", function() {deepEqual( Stem("investeringsporteføljer"), "investeringsportefølj");});
test("investeringsporteføljes -> investeringsportefølj", function() {deepEqual( Stem("investeringsporteføljes"), "investeringsportefølj");});
test("investeringsstrategier -> investeringsstrategi", function() {deepEqual( Stem("investeringsstrategier"), "investeringsstrategi");});
test("investeringstiltak -> investeringstiltak", function() {deepEqual( Stem("investeringstiltak"), "investeringstiltak");});
test("investeringsvalg -> investeringsvalg", function() {deepEqual( Stem("investeringsvalg"), "investeringsvalg");});
test("investeringsvalget -> investeringsvalg", function() {deepEqual( Stem("investeringsvalget"), "investeringsvalg");});
test("investert -> invester", function() {deepEqual( Stem("investert"), "invester");});
test("investorer -> investor", function() {deepEqual( Stem("investorer"), "investor");});
test("involvere -> involver", function() {deepEqual( Stem("involvere"), "involver");});
test("involverer -> involver", function() {deepEqual( Stem("involverer"), "involver");});
test("iogforseg -> iogforseg", function() {deepEqual( Stem("iogforseg"), "iogforseg");});
test("ipa -> ipa", function() {deepEqual( Stem("ipa"), "ipa");});
test("ir -> ir", function() {deepEqual( Stem("ir"), "ir");});
test("ira -> ira", function() {deepEqual( Stem("ira"), "ira");});
test("irland -> irland", function() {deepEqual( Stem("irland"), "irland");});
test("ironisk -> ironisk", function() {deepEqual( Stem("ironisk"), "ironisk");});
test("irritert -> irriter", function() {deepEqual( Stem("irritert"), "irriter");});
test("is -> is", function() {deepEqual( Stem("is"), "is");});
test("isbreene -> isbre", function() {deepEqual( Stem("isbreene"), "isbre");});
test("isbreer -> isbre", function() {deepEqual( Stem("isbreer"), "isbre");});
test("isen -> isen", function() {deepEqual( Stem("isen"), "isen");});
test("isf -> isf", function() {deepEqual( Stem("isf"), "isf");});
test("isfjell -> isfjell", function() {deepEqual( Stem("isfjell"), "isfjell");});
test("isflak -> isflak", function() {deepEqual( Stem("isflak"), "isflak");});
test("iskalde -> iskald", function() {deepEqual( Stem("iskalde"), "iskald");});
test("iskaldt -> iskald", function() {deepEqual( Stem("iskaldt"), "iskald");});
test("island -> island", function() {deepEqual( Stem("island"), "island");});
test("iso -> iso", function() {deepEqual( Stem("iso"), "iso");});
test("isolert -> isoler", function() {deepEqual( Stem("isolert"), "isoler");});
test("isproblemer -> isproblem", function() {deepEqual( Stem("isproblemer"), "isproblem");});
test("istand -> istand", function() {deepEqual( Stem("istand"), "istand");});
test("istandsetjing -> istandsetjing", function() {deepEqual( Stem("istandsetjing"), "istandsetjing");});
test("istappene -> istapp", function() {deepEqual( Stem("istappene"), "istapp");});
test("istapper -> istapp", function() {deepEqual( Stem("istapper"), "istapp");});
test("istedenfor -> istedenfor", function() {deepEqual( Stem("istedenfor"), "istedenfor");});
test("istedet -> isted", function() {deepEqual( Stem("istedet"), "isted");});
test("istykker -> istykk", function() {deepEqual( Stem("istykker"), "istykk");});
test("isødet -> isød", function() {deepEqual( Stem("isødet"), "isød");});
test("it -> it", function() {deepEqual( Stem("it"), "it");});
test("italia -> itali", function() {deepEqual( Stem("italia"), "itali");});
test("italiane -> itali", function() {deepEqual( Stem("italiane"), "itali");});
test("italiensk -> italiensk", function() {deepEqual( Stem("italiensk"), "italiensk");});
test("italienske -> italiensk", function() {deepEqual( Stem("italienske"), "italiensk");});
test("itp -> itp", function() {deepEqual( Stem("itp"), "itp");});
test("iv -> iv", function() {deepEqual( Stem("iv"), "iv");});
test("ivalde -> ivald", function() {deepEqual( Stem("ivalde"), "ivald");});
test("ivareta -> ivaret", function() {deepEqual( Stem("ivareta"), "ivaret");});
test("ivaretagelse -> ivaretag", function() {deepEqual( Stem("ivaretagelse"), "ivaretag");});
test("ivaretakast -> ivaretak", function() {deepEqual( Stem("ivaretakast"), "ivaretak");});
test("ivaretakelse -> ivaretak", function() {deepEqual( Stem("ivaretakelse"), "ivaretak");});
test("ivaretaking -> ivaretaking", function() {deepEqual( Stem("ivaretaking"), "ivaretaking");});
test("ivaretar -> ivaret", function() {deepEqual( Stem("ivaretar"), "ivaret");});
test("ivaretas -> ivaret", function() {deepEqual( Stem("ivaretas"), "ivaret");});
test("ivaretatt -> ivaretatt", function() {deepEqual( Stem("ivaretatt"), "ivaretatt");});
test("ivareteke -> ivaretek", function() {deepEqual( Stem("ivareteke"), "ivaretek");});
test("ivaretekne -> ivaretekn", function() {deepEqual( Stem("ivaretekne"), "ivaretekn");});
test("iverksatt -> iverksatt", function() {deepEqual( Stem("iverksatt"), "iverksatt");});
test("iverksetjing -> iverksetjing", function() {deepEqual( Stem("iverksetjing"), "iverksetjing");});
test("iverksetjinga -> iverksetjing", function() {deepEqual( Stem("iverksetjinga"), "iverksetjing");});
test("iverksette -> iverksett", function() {deepEqual( Stem("iverksette"), "iverksett");});
test("iverksettelse -> iverksett", function() {deepEqual( Stem("iverksettelse"), "iverksett");});
test("iverksettelsen -> iverksett", function() {deepEqual( Stem("iverksettelsen"), "iverksett");});
test("iverksettes -> iverksett", function() {deepEqual( Stem("iverksettes"), "iverksett");});
test("ivrig -> ivr", function() {deepEqual( Stem("ivrig"), "ivr");});
test("ivrige -> ivr", function() {deepEqual( Stem("ivrige"), "ivr");});
test("ivrigste -> ivrigst", function() {deepEqual( Stem("ivrigste"), "ivrigst");});
test("ja -> ja", function() {deepEqual( Stem("ja"), "ja");});
test("jage -> jag", function() {deepEqual( Stem("jage"), "jag");});
test("jager -> jag", function() {deepEqual( Stem("jager"), "jag");});
test("jakt -> jakt", function() {deepEqual( Stem("jakt"), "jakt");});
test("jaktbikkjene -> jaktbikkj", function() {deepEqual( Stem("jaktbikkjene"), "jaktbikkj");});
test("jakte -> jakt", function() {deepEqual( Stem("jakte"), "jakt");});
test("jakten -> jakt", function() {deepEqual( Stem("jakten"), "jakt");});
test("jakter -> jakt", function() {deepEqual( Stem("jakter"), "jakt");});
test("jaktet -> jakt", function() {deepEqual( Stem("jaktet"), "jakt");});
test("jaktfalk -> jaktfalk", function() {deepEqual( Stem("jaktfalk"), "jaktfalk");});
test("jaktlykke -> jaktlykk", function() {deepEqual( Stem("jaktlykke"), "jaktlykk");});
test("jammen -> jamm", function() {deepEqual( Stem("jammen"), "jamm");});
test("jammer -> jamm", function() {deepEqual( Stem("jammer"), "jamm");});
test("jamrer -> jamr", function() {deepEqual( Stem("jamrer"), "jamr");});
test("jamringen -> jamring", function() {deepEqual( Stem("jamringen"), "jamring");});
test("jamstellast -> jamstell", function() {deepEqual( Stem("jamstellast"), "jamstell");});
test("jamt -> jamt", function() {deepEqual( Stem("jamt"), "jamt");});
test("jan -> jan", function() {deepEqual( Stem("jan"), "jan");});
test("januar -> janu", function() {deepEqual( Stem("januar"), "janu");});
test("jarl -> jarl", function() {deepEqual( Stem("jarl"), "jarl");});
test("jarnsaksa -> jarnsaks", function() {deepEqual( Stem("jarnsaksa"), "jarnsaks");});
test("javel -> javel", function() {deepEqual( Stem("javel"), "javel");});
test("javisst -> javisst", function() {deepEqual( Stem("javisst"), "javisst");});
test("jbv -> jbv", function() {deepEqual( Stem("jbv"), "jbv");});
test("jeg -> jeg", function() {deepEqual( Stem("jeg"), "jeg");});
test("jegeren -> jeger", function() {deepEqual( Stem("jegeren"), "jeger");});
test("jeløya -> jeløy", function() {deepEqual( Stem("jeløya"), "jeløy");});
test("jentene -> jent", function() {deepEqual( Stem("jentene"), "jent");});
test("jenteord -> jenteord", function() {deepEqual( Stem("jenteord"), "jenteord");});
test("jenter -> jent", function() {deepEqual( Stem("jenter"), "jent");});
test("jern -> jern", function() {deepEqual( Stem("jern"), "jern");});
test("jernbane -> jernb", function() {deepEqual( Stem("jernbane"), "jernb");});
test("jernbanebru -> jernbanebru", function() {deepEqual( Stem("jernbanebru"), "jernbanebru");});
test("jernbaneforbindelse -> jernbaneforbind", function() {deepEqual( Stem("jernbaneforbindelse"), "jernbaneforbind");});
test("jernbaneforbindelser -> jernbaneforbind", function() {deepEqual( Stem("jernbaneforbindelser"), "jernbaneforbind");});
test("jernbanefrakt -> jernbanefrakt", function() {deepEqual( Stem("jernbanefrakt"), "jernbanefrakt");});
test("jernbaneknutepunktet -> jernbaneknutepunkt", function() {deepEqual( Stem("jernbaneknutepunktet"), "jernbaneknutepunkt");});
test("jernbaneløsninger -> jernbaneløsning", function() {deepEqual( Stem("jernbaneløsninger"), "jernbaneløsning");});
test("jernbanen -> jernban", function() {deepEqual( Stem("jernbanen"), "jernban");});
test("jernbanenett -> jernbanenett", function() {deepEqual( Stem("jernbanenett"), "jernbanenett");});
test("jernbanenettet -> jernbanenett", function() {deepEqual( Stem("jernbanenettet"), "jernbanenett");});
test("jernbanens -> jernban", function() {deepEqual( Stem("jernbanens"), "jernban");});
test("jernbanespor -> jernbanespor", function() {deepEqual( Stem("jernbanespor"), "jernbanespor");});
test("jernbanestasjon -> jernbanestasjon", function() {deepEqual( Stem("jernbanestasjon"), "jernbanestasjon");});
test("jernbanetilknytning -> jernbanetilknytning", function() {deepEqual( Stem("jernbanetilknytning"), "jernbanetilknytning");});
test("jernbanetilknytningen -> jernbanetilknytning", function() {deepEqual( Stem("jernbanetilknytningen"), "jernbanetilknytning");});
test("jernbanetiltak -> jernbanetiltak", function() {deepEqual( Stem("jernbanetiltak"), "jernbanetiltak");});
test("jernbanetransport -> jernbanetransport", function() {deepEqual( Stem("jernbanetransport"), "jernbanetransport");});
test("jernbanetransportens -> jernbanetransport", function() {deepEqual( Stem("jernbanetransportens"), "jernbanetransport");});
test("jernbanetrase -> jernbanetras", function() {deepEqual( Stem("jernbanetrase"), "jernbanetras");});
test("jernbaneverket -> jernbaneverk", function() {deepEqual( Stem("jernbaneverket"), "jernbaneverk");});
test("jernbanevogn -> jernbanevogn", function() {deepEqual( Stem("jernbanevogn"), "jernbanevogn");});
test("jernbanevogner -> jernbanevogn", function() {deepEqual( Stem("jernbanevogner"), "jernbanevogn");});
test("jernbitene -> jernbit", function() {deepEqual( Stem("jernbitene"), "jernbit");});
test("jernhansker -> jernhansk", function() {deepEqual( Stem("jernhansker"), "jernhansk");});
test("jernlenker -> jernlenk", function() {deepEqual( Stem("jernlenker"), "jernlenk");});
test("jernsakser -> jernsaks", function() {deepEqual( Stem("jernsakser"), "jernsaks");});
test("jernskogen -> jernskog", function() {deepEqual( Stem("jernskogen"), "jernskog");});
test("jernstang -> jernstang", function() {deepEqual( Stem("jernstang"), "jernstang");});
test("jernstenger -> jernsteng", function() {deepEqual( Stem("jernstenger"), "jernsteng");});
test("jernstykke -> jernstykk", function() {deepEqual( Stem("jernstykke"), "jernstykk");});
test("jernstykket -> jernstykk", function() {deepEqual( Stem("jernstykket"), "jernstykk");});
test("jernvotter -> jernvott", function() {deepEqual( Stem("jernvotter"), "jernvott");});
test("jessica -> jessic", function() {deepEqual( Stem("jessica"), "jessic");});
test("jevn -> jevn", function() {deepEqual( Stem("jevn"), "jevn");});
test("jevnbyrdige -> jevnbyrd", function() {deepEqual( Stem("jevnbyrdige"), "jevnbyrd");});
test("jevnere -> jevner", function() {deepEqual( Stem("jevnere"), "jevner");});
test("jevnt -> jevnt", function() {deepEqual( Stem("jevnt"), "jevnt");});
test("jf -> jf", function() {deepEqual( Stem("jf"), "jf");});
test("jo -> jo", function() {deepEqual( Stem("jo"), "jo");});
test("jobb -> jobb", function() {deepEqual( Stem("jobb"), "jobb");});
test("jobbskifte -> jobbskift", function() {deepEqual( Stem("jobbskifte"), "jobbskift");});
test("jobbytte -> jobbytt", function() {deepEqual( Stem("jobbytte"), "jobbytt");});
test("joda -> jod", function() {deepEqual( Stem("joda"), "jod");});
test("johansen -> johans", function() {deepEqual( Stem("johansen"), "johans");});
test("johnstad -> johnstad", function() {deepEqual( Stem("johnstad"), "johnstad");});
test("jomfruer -> jomfru", function() {deepEqual( Stem("jomfruer"), "jomfru");});
test("jord -> jord", function() {deepEqual( Stem("jord"), "jord");});
test("jorden -> jord", function() {deepEqual( Stem("jorden"), "jord");});
test("jorder -> jord", function() {deepEqual( Stem("jorder"), "jord");});
test("jordskjelv -> jordskjelv", function() {deepEqual( Stem("jordskjelv"), "jordskjelv");});
test("jormungand -> jormungand", function() {deepEqual( Stem("jormungand"), "jormungand");});
test("jotnen -> jotn", function() {deepEqual( Stem("jotnen"), "jotn");});
test("jotnene -> jotn", function() {deepEqual( Stem("jotnene"), "jotn");});
test("jotnens -> jotn", function() {deepEqual( Stem("jotnens"), "jotn");});
test("jotner -> jotn", function() {deepEqual( Stem("jotner"), "jotn");});
test("jotun -> jotun", function() {deepEqual( Stem("jotun"), "jotun");});
test("jotunborgen -> jotunborg", function() {deepEqual( Stem("jotunborgen"), "jotunborg");});
test("jotundatter -> jotundatt", function() {deepEqual( Stem("jotundatter"), "jotundatt");});
test("jotundatteren -> jotundatter", function() {deepEqual( Stem("jotundatteren"), "jotundatter");});
test("jotundatters -> jotundatt", function() {deepEqual( Stem("jotundatters"), "jotundatt");});
test("jotundøtrene -> jotundøtr", function() {deepEqual( Stem("jotundøtrene"), "jotundøtr");});
test("jotunfoten -> jotunfot", function() {deepEqual( Stem("jotunfoten"), "jotunfot");});
test("jotunheim -> jotunheim", function() {deepEqual( Stem("jotunheim"), "jotunheim");});
test("jotunhodet -> jotunhod", function() {deepEqual( Stem("jotunhodet"), "jotunhod");});
test("jotunjente -> jotunjent", function() {deepEqual( Stem("jotunjente"), "jotunjent");});
test("jotunkjemper -> jotunkjemp", function() {deepEqual( Stem("jotunkjemper"), "jotunkjemp");});
test("jotunkjerringa -> jotunkjerring", function() {deepEqual( Stem("jotunkjerringa"), "jotunkjerring");});
test("jotunkongen -> jotunkong", function() {deepEqual( Stem("jotunkongen"), "jotunkong");});
test("jotunkvinne -> jotunkvinn", function() {deepEqual( Stem("jotunkvinne"), "jotunkvinn");});
test("jotunkvinnen -> jotunkvinn", function() {deepEqual( Stem("jotunkvinnen"), "jotunkvinn");});
test("jotunkvinner -> jotunkvinn", function() {deepEqual( Stem("jotunkvinner"), "jotunkvinn");});
test("jotunmor -> jotunmor", function() {deepEqual( Stem("jotunmor"), "jotunmor");});
test("jotunsinnet -> jotunsinn", function() {deepEqual( Stem("jotunsinnet"), "jotunsinn");});
test("jotunskalle -> jotunskall", function() {deepEqual( Stem("jotunskalle"), "jotunskall");});
test("jotunskallen -> jotunskall", function() {deepEqual( Stem("jotunskallen"), "jotunskall");});
test("jotunskaller -> jotunskall", function() {deepEqual( Stem("jotunskaller"), "jotunskall");});
test("jotunslekt -> jotunslekt", function() {deepEqual( Stem("jotunslekt"), "jotunslekt");});
test("jotunsønnen -> jotunsønn", function() {deepEqual( Stem("jotunsønnen"), "jotunsønn");});
test("jotunætt -> jotunætt", function() {deepEqual( Stem("jotunætt"), "jotunætt");});
test("journal -> journal", function() {deepEqual( Stem("journal"), "journal");});
test("journalar -> journal", function() {deepEqual( Stem("journalar"), "journal");});
test("jubel -> jubel", function() {deepEqual( Stem("jubel"), "jubel");});
test("jubler -> jubl", function() {deepEqual( Stem("jubler"), "jubl");});
test("juks -> juks", function() {deepEqual( Stem("juks"), "juks");});
test("juli -> juli", function() {deepEqual( Stem("juli"), "juli");});
test("julius -> julius", function() {deepEqual( Stem("julius"), "julius");});
test("juni -> juni", function() {deepEqual( Stem("juni"), "juni");});
test("jur -> jur", function() {deepEqual( Stem("jur"), "jur");});
test("juret -> jur", function() {deepEqual( Stem("juret"), "jur");});
test("juridisk -> juridisk", function() {deepEqual( Stem("juridisk"), "juridisk");});
test("juridiske -> juridisk", function() {deepEqual( Stem("juridiske"), "juridisk");});
test("just -> just", function() {deepEqual( Stem("just"), "just");});
test("justerast -> juster", function() {deepEqual( Stem("justerast"), "juster");});
test("justerbar -> justerb", function() {deepEqual( Stem("justerbar"), "justerb");});
test("justere -> juster", function() {deepEqual( Stem("justere"), "juster");});
test("justerer -> juster", function() {deepEqual( Stem("justerer"), "juster");});
test("justering -> justering", function() {deepEqual( Stem("justering"), "justering");});
test("justert -> juster", function() {deepEqual( Stem("justert"), "juster");});
test("justerte -> juster", function() {deepEqual( Stem("justerte"), "juster");});
test("justisdepartementet -> justisdepartement", function() {deepEqual( Stem("justisdepartementet"), "justisdepartement");});
test("juv -> juv", function() {deepEqual( Stem("juv"), "juv");});
test("juveler -> juvel", function() {deepEqual( Stem("juveler"), "juvel");});
test("juvet -> juv", function() {deepEqual( Stem("juvet"), "juv");});
test("k -> k", function() {deepEqual( Stem("k"), "k");});
test("kabelanlegg -> kabelanlegg", function() {deepEqual( Stem("kabelanlegg"), "kabelanlegg");});
test("kadavere -> kadaver", function() {deepEqual( Stem("kadavere"), "kadaver");});
test("kaholmen -> kaholm", function() {deepEqual( Stem("kaholmen"), "kaholm");});
test("kai -> kai", function() {deepEqual( Stem("kai"), "kai");});
test("kaianlegg -> kaianlegg", function() {deepEqual( Stem("kaianlegg"), "kaianlegg");});
test("kaianlegget -> kaianlegg", function() {deepEqual( Stem("kaianlegget"), "kaianlegg");});
test("kaibygging -> kaibygging", function() {deepEqual( Stem("kaibygging"), "kaibygging");});
test("kaiene -> kaien", function() {deepEqual( Stem("kaiene"), "kaien");});
test("kaier -> kaier", function() {deepEqual( Stem("kaier"), "kaier");});
test("kaifronten -> kaifront", function() {deepEqual( Stem("kaifronten"), "kaifront");});
test("kaifronter -> kaifront", function() {deepEqual( Stem("kaifronter"), "kaifront");});
test("kaikapasiteten -> kaikapasitet", function() {deepEqual( Stem("kaikapasiteten"), "kaikapasitet");});
test("kailengde -> kailengd", function() {deepEqual( Stem("kailengde"), "kailengd");});
test("kaimetre -> kaimetr", function() {deepEqual( Stem("kaimetre"), "kaimetr");});
test("kaiområde -> kaiområd", function() {deepEqual( Stem("kaiområde"), "kaiområd");});
test("kaiområder -> kaiområd", function() {deepEqual( Stem("kaiområder"), "kaiområd");});
test("kakker -> kakk", function() {deepEqual( Stem("kakker"), "kakk");});
test("kald -> kald", function() {deepEqual( Stem("kald"), "kald");});
test("kalde -> kald", function() {deepEqual( Stem("kalde"), "kald");});
test("kaldere -> kalder", function() {deepEqual( Stem("kaldere"), "kalder");});
test("kaldt -> kald", function() {deepEqual( Stem("kaldt"), "kald");});
test("kalenderdagane -> kalenderdag", function() {deepEqual( Stem("kalenderdagane"), "kalenderdag");});
test("kalenderdagar -> kalenderdag", function() {deepEqual( Stem("kalenderdagar"), "kalenderdag");});
test("kalenderår -> kalenderår", function() {deepEqual( Stem("kalenderår"), "kalenderår");});
test("kalk -> kalk", function() {deepEqual( Stem("kalk"), "kalk");});
test("kalkulere -> kalkuler", function() {deepEqual( Stem("kalkulere"), "kalkuler");});
test("kalla -> kall", function() {deepEqual( Stem("kalla"), "kall");});
test("kallar -> kall", function() {deepEqual( Stem("kallar"), "kall");});
test("kallast -> kall", function() {deepEqual( Stem("kallast"), "kall");});
test("kalle -> kall", function() {deepEqual( Stem("kalle"), "kall");});
test("kallen -> kall", function() {deepEqual( Stem("kallen"), "kall");});
test("kaller -> kall", function() {deepEqual( Stem("kaller"), "kall");});
test("kalles -> kall", function() {deepEqual( Stem("kalles"), "kall");});
test("kalt -> kalt", function() {deepEqual( Stem("kalt"), "kalt");});
test("kalte -> kalt", function() {deepEqual( Stem("kalte"), "kalt");});
test("kalvene -> kalv", function() {deepEqual( Stem("kalvene"), "kalv");});
test("kalver -> kalv", function() {deepEqual( Stem("kalver"), "kalv");});
test("kalveskinnsko -> kalveskinnsko", function() {deepEqual( Stem("kalveskinnsko"), "kalveskinnsko");});
test("kam -> kam", function() {deepEqual( Stem("kam"), "kam");});
test("kameratslig -> kamerats", function() {deepEqual( Stem("kameratslig"), "kamerats");});
test("kammerpike -> kammerpik", function() {deepEqual( Stem("kammerpike"), "kammerpik");});
test("kamp -> kamp", function() {deepEqual( Stem("kamp"), "kamp");});
test("kampen -> kamp", function() {deepEqual( Stem("kampen"), "kamp");});
test("kampestener -> kampesten", function() {deepEqual( Stem("kampestener"), "kampesten");});
test("kamptreningen -> kamptrening", function() {deepEqual( Stem("kamptreningen"), "kamptrening");});
test("kan -> kan", function() {deepEqual( Stem("kan"), "kan");});
test("kanalar -> kanal", function() {deepEqual( Stem("kanalar"), "kanal");});
test("kanalen -> kanal", function() {deepEqual( Stem("kanalen"), "kanal");});
test("kanskje -> kanskj", function() {deepEqual( Stem("kanskje"), "kanskj");});
test("kant -> kant", function() {deepEqual( Stem("kant"), "kant");});
test("kanten -> kant", function() {deepEqual( Stem("kanten"), "kant");});
test("kanter -> kant", function() {deepEqual( Stem("kanter"), "kant");});
test("kantre -> kantr", function() {deepEqual( Stem("kantre"), "kantr");});
test("kantrer -> kantr", function() {deepEqual( Stem("kantrer"), "kantr");});
test("kantsatt -> kantsatt", function() {deepEqual( Stem("kantsatt"), "kantsatt");});
test("kap -> kap", function() {deepEqual( Stem("kap"), "kap");});
test("kapasitet -> kapasit", function() {deepEqual( Stem("kapasitet"), "kapasit");});
test("kapasiteten -> kapasitet", function() {deepEqual( Stem("kapasiteten"), "kapasitet");});
test("kapasitetsbegrensninger -> kapasitetsbegrensning", function() {deepEqual( Stem("kapasitetsbegrensninger"), "kapasitetsbegrensning");});
test("kapasitetsbehov -> kapasitetsbehov", function() {deepEqual( Stem("kapasitetsbehov"), "kapasitetsbehov");});
test("kapasitetsbehovet -> kapasitetsbehov", function() {deepEqual( Stem("kapasitetsbehovet"), "kapasitetsbehov");});
test("kapasitetsbeskrankninger -> kapasitetsbeskrankning", function() {deepEqual( Stem("kapasitetsbeskrankninger"), "kapasitetsbeskrankning");});
test("kapasitetsforhold -> kapasitetsforhold", function() {deepEqual( Stem("kapasitetsforhold"), "kapasitetsforhold");});
test("kapasitetsforutsetninger -> kapasitetsforutsetning", function() {deepEqual( Stem("kapasitetsforutsetninger"), "kapasitetsforutsetning");});
test("kapasitetsgrense -> kapasitetsgrens", function() {deepEqual( Stem("kapasitetsgrense"), "kapasitetsgrens");});
test("kapasitetsgrensen -> kapasitetsgrens", function() {deepEqual( Stem("kapasitetsgrensen"), "kapasitetsgrens");});
test("kapasitetsgrenser -> kapasitetsgrens", function() {deepEqual( Stem("kapasitetsgrenser"), "kapasitetsgrens");});
test("kapasitetsmangel -> kapasitetsmangel", function() {deepEqual( Stem("kapasitetsmangel"), "kapasitetsmangel");});
test("kapasitetsmessige -> kapasitetsmess", function() {deepEqual( Stem("kapasitetsmessige"), "kapasitetsmess");});
test("kapasitetsmuligheter -> kapasitetsmu", function() {deepEqual( Stem("kapasitetsmuligheter"), "kapasitetsmu");});
test("kapasitetspotensiale -> kapasitetspotensial", function() {deepEqual( Stem("kapasitetspotensiale"), "kapasitetspotensial");});
test("kapasitetspotensialet -> kapasitetspotensial", function() {deepEqual( Stem("kapasitetspotensialet"), "kapasitetspotensial");});
test("kapasitetspress -> kapasitetspress", function() {deepEqual( Stem("kapasitetspress"), "kapasitetspress");});
test("kapasitetsproblem -> kapasitetsproblem", function() {deepEqual( Stem("kapasitetsproblem"), "kapasitetsproblem");});
test("kapasitetsproblemer -> kapasitetsproblem", function() {deepEqual( Stem("kapasitetsproblemer"), "kapasitetsproblem");});
test("kapasitetsreserver -> kapasitetsreserv", function() {deepEqual( Stem("kapasitetsreserver"), "kapasitetsreserv");});
test("kapasitetssituasjonen -> kapasitetssituasjon", function() {deepEqual( Stem("kapasitetssituasjonen"), "kapasitetssituasjon");});
test("kapasitetsskranker -> kapasitetsskrank", function() {deepEqual( Stem("kapasitetsskranker"), "kapasitetsskrank");});
test("kapasitetsspørsmål -> kapasitetsspørsmål", function() {deepEqual( Stem("kapasitetsspørsmål"), "kapasitetsspørsmål");});
test("kapasitetstall -> kapasitetstall", function() {deepEqual( Stem("kapasitetstall"), "kapasitetstall");});
test("kapasitetstallene -> kapasitetstall", function() {deepEqual( Stem("kapasitetstallene"), "kapasitetstall");});
test("kapasitetsutvidelse -> kapasitetsutvid", function() {deepEqual( Stem("kapasitetsutvidelse"), "kapasitetsutvid");});
test("kapasitetsutvidelser -> kapasitetsutvid", function() {deepEqual( Stem("kapasitetsutvidelser"), "kapasitetsutvid");});
test("kapasitetsutvidelsestiltak -> kapasitetsutvidelsestiltak", function() {deepEqual( Stem("kapasitetsutvidelsestiltak"), "kapasitetsutvidelsestiltak");});
test("kapasitetsutvikling -> kapasitetsutvikling", function() {deepEqual( Stem("kapasitetsutvikling"), "kapasitetsutvikling");});
test("kapasitetsutviklingen -> kapasitetsutvikling", function() {deepEqual( Stem("kapasitetsutviklingen"), "kapasitetsutvikling");});
test("kapasitetsvurderinger -> kapasitetsvurdering", function() {deepEqual( Stem("kapasitetsvurderinger"), "kapasitetsvurdering");});
test("kapasitetsøkende -> kapasitetsøk", function() {deepEqual( Stem("kapasitetsøkende"), "kapasitetsøk");});
test("kapasitetsøkning -> kapasitetsøkning", function() {deepEqual( Stem("kapasitetsøkning"), "kapasitetsøkning");});
test("kapital -> kapital", function() {deepEqual( Stem("kapital"), "kapital");});
test("kapitalavkasting -> kapitalavkasting", function() {deepEqual( Stem("kapitalavkasting"), "kapitalavkasting");});
test("kapitalavkastning -> kapitalavkastning", function() {deepEqual( Stem("kapitalavkastning"), "kapitalavkastning");});
test("kapitalavkastningen -> kapitalavkastning", function() {deepEqual( Stem("kapitalavkastningen"), "kapitalavkastning");});
test("kapitalavsetning -> kapitalavsetning", function() {deepEqual( Stem("kapitalavsetning"), "kapitalavsetning");});
test("kapitalen -> kapital", function() {deepEqual( Stem("kapitalen"), "kapital");});
test("kapitalens -> kapital", function() {deepEqual( Stem("kapitalens"), "kapital");});
test("kapitalforsikring -> kapitalforsikring", function() {deepEqual( Stem("kapitalforsikring"), "kapitalforsikring");});
test("kapitalforsikringene -> kapitalforsikring", function() {deepEqual( Stem("kapitalforsikringene"), "kapitalforsikring");});
test("kapitalforsikringer -> kapitalforsikring", function() {deepEqual( Stem("kapitalforsikringer"), "kapitalforsikring");});
test("kapitalforvaltning -> kapitalforvaltning", function() {deepEqual( Stem("kapitalforvaltning"), "kapitalforvaltning");});
test("kapitalforvaltningen -> kapitalforvaltning", function() {deepEqual( Stem("kapitalforvaltningen"), "kapitalforvaltning");});
test("kapitalforvaltningsforskriften -> kapitalforvaltningsforskrift", function() {deepEqual( Stem("kapitalforvaltningsforskriften"), "kapitalforvaltningsforskrift");});
test("kapitalforvaltningsregler -> kapitalforvaltningsregl", function() {deepEqual( Stem("kapitalforvaltningsregler"), "kapitalforvaltningsregl");});
test("kapitalgrunnlaget -> kapitalgrunnlag", function() {deepEqual( Stem("kapitalgrunnlaget"), "kapitalgrunnlag");});
test("kapitalinnskot -> kapitalinnskot", function() {deepEqual( Stem("kapitalinnskot"), "kapitalinnskot");});
test("kapitalinnskota -> kapitalinnskot", function() {deepEqual( Stem("kapitalinnskota"), "kapitalinnskot");});
test("kapitalinnskudd -> kapitalinnskudd", function() {deepEqual( Stem("kapitalinnskudd"), "kapitalinnskudd");});
test("kapitalinnskytarar -> kapitalinnskytar", function() {deepEqual( Stem("kapitalinnskytarar"), "kapitalinnskytar");});
test("kapitalinntekt -> kapitalinntekt", function() {deepEqual( Stem("kapitalinntekt"), "kapitalinntekt");});
test("kapitaliseringsprodukt -> kapitaliseringsprodukt", function() {deepEqual( Stem("kapitaliseringsprodukt"), "kapitaliseringsprodukt");});
test("kapitaliseringsprodukter -> kapitaliseringsprodukt", function() {deepEqual( Stem("kapitaliseringsprodukter"), "kapitaliseringsprodukt");});
test("kapitaloppbygging -> kapitaloppbygging", function() {deepEqual( Stem("kapitaloppbygging"), "kapitaloppbygging");});
test("kapitaloppbygginga -> kapitaloppbygging", function() {deepEqual( Stem("kapitaloppbygginga"), "kapitaloppbygging");});
test("kapitaloppbyggingen -> kapitaloppbygging", function() {deepEqual( Stem("kapitaloppbyggingen"), "kapitaloppbygging");});
test("kapitaloppsparing -> kapitaloppsparing", function() {deepEqual( Stem("kapitaloppsparing"), "kapitaloppsparing");});
test("kapitalpensjoner -> kapitalpensjon", function() {deepEqual( Stem("kapitalpensjoner"), "kapitalpensjon");});
test("kapitalsamanslutningane -> kapitalsamanslutning", function() {deepEqual( Stem("kapitalsamanslutningane"), "kapitalsamanslutning");});
test("kapitalsamanslutningar -> kapitalsamanslutning", function() {deepEqual( Stem("kapitalsamanslutningar"), "kapitalsamanslutning");});
test("kapitalsituasjonen -> kapitalsituasjon", function() {deepEqual( Stem("kapitalsituasjonen"), "kapitalsituasjon");});
test("kapitalsterke -> kapitalsterk", function() {deepEqual( Stem("kapitalsterke"), "kapitalsterk");});
test("kapitaltilskot -> kapitaltilskot", function() {deepEqual( Stem("kapitaltilskot"), "kapitaltilskot");});
test("kapitalverdien -> kapitalverdi", function() {deepEqual( Stem("kapitalverdien"), "kapitalverdi");});
test("kapitel -> kapitel", function() {deepEqual( Stem("kapitel"), "kapitel");});
test("kapitlene -> kapitl", function() {deepEqual( Stem("kapitlene"), "kapitl");});
test("kapitler -> kapitl", function() {deepEqual( Stem("kapitler"), "kapitl");});
test("kapitlet -> kapitl", function() {deepEqual( Stem("kapitlet"), "kapitl");});
test("kapitlets -> kapitl", function() {deepEqual( Stem("kapitlets"), "kapitl");});
test("kapittel -> kapittel", function() {deepEqual( Stem("kapittel"), "kapittel");});
test("kapittelet -> kapittel", function() {deepEqual( Stem("kapittelet"), "kapittel");});
test("kapp -> kapp", function() {deepEqual( Stem("kapp"), "kapp");});
test("kappdrikker -> kappdrikk", function() {deepEqual( Stem("kappdrikker"), "kappdrikk");});
test("kappe -> kapp", function() {deepEqual( Stem("kappe"), "kapp");});
test("kappen -> kapp", function() {deepEqual( Stem("kappen"), "kapp");});
test("kapper -> kapp", function() {deepEqual( Stem("kapper"), "kapp");});
test("kappri -> kappri", function() {deepEqual( Stem("kappri"), "kappri");});
test("kappridning -> kappridning", function() {deepEqual( Stem("kappridning"), "kappridning");});
test("kar -> kar", function() {deepEqual( Stem("kar"), "kar");});
test("karakter -> karakt", function() {deepEqual( Stem("karakter"), "karakt");});
test("karakteren -> karakter", function() {deepEqual( Stem("karakteren"), "karakter");});
test("karakteriseres -> karakteriser", function() {deepEqual( Stem("karakteriseres"), "karakteriser");});
test("karakteristika -> karakteristik", function() {deepEqual( Stem("karakteristika"), "karakteristik");});
test("karakteristikken -> karakteristikk", function() {deepEqual( Stem("karakteristikken"), "karakteristikk");});
test("karen -> kar", function() {deepEqual( Stem("karen"), "kar");});
test("karene -> kar", function() {deepEqual( Stem("karene"), "kar");});
test("karensperiode -> karensperiod", function() {deepEqual( Stem("karensperiode"), "karensperiod");});
test("karer -> kar", function() {deepEqual( Stem("karer"), "kar");});
test("karet -> kar", function() {deepEqual( Stem("karet"), "kar");});
test("kari -> kari", function() {deepEqual( Stem("kari"), "kari");});
test("karl -> karl", function() {deepEqual( Stem("karl"), "karl");});
test("karmar -> karm", function() {deepEqual( Stem("karmar"), "karm");});
test("karmsund -> karmsund", function() {deepEqual( Stem("karmsund"), "karmsund");});
test("karmøy -> karmøy", function() {deepEqual( Stem("karmøy"), "karmøy");});
test("karre -> karr", function() {deepEqual( Stem("karre"), "karr");});
test("karriere -> karrier", function() {deepEqual( Stem("karriere"), "karrier");});
test("karrieren -> karrier", function() {deepEqual( Stem("karrieren"), "karrier");});
test("karriereutvikling -> karriereutvikling", function() {deepEqual( Stem("karriereutvikling"), "karriereutvikling");});
test("kartlagt -> kartlagt", function() {deepEqual( Stem("kartlagt"), "kartlagt");});
test("kartlegge -> kartlegg", function() {deepEqual( Stem("kartlegge"), "kartlegg");});
test("kartlegging -> kartlegging", function() {deepEqual( Stem("kartlegging"), "kartlegging");});
test("kartleggingen -> kartlegging", function() {deepEqual( Stem("kartleggingen"), "kartlegging");});
test("kartlegginger -> kartlegging", function() {deepEqual( Stem("kartlegginger"), "kartlegging");});
test("kartleggingsarbeidet -> kartleggingsarbeid", function() {deepEqual( Stem("kartleggingsarbeidet"), "kartleggingsarbeid");});
test("kartleggingsfasen -> kartleggingsfas", function() {deepEqual( Stem("kartleggingsfasen"), "kartleggingsfas");});
test("kaserne -> kasern", function() {deepEqual( Stem("kaserne"), "kasern");});
test("kasernebygningen -> kasernebygning", function() {deepEqual( Stem("kasernebygningen"), "kasernebygning");});
test("kasernen -> kasern", function() {deepEqual( Stem("kasernen"), "kasern");});
test("kasse -> kass", function() {deepEqual( Stem("kasse"), "kass");});
test("kast -> kast", function() {deepEqual( Stem("kast"), "kast");});
test("kasta -> kast", function() {deepEqual( Stem("kasta"), "kast");});
test("kastar -> kast", function() {deepEqual( Stem("kastar"), "kast");});
test("kastast -> kast", function() {deepEqual( Stem("kastast"), "kast");});
test("kaste -> kast", function() {deepEqual( Stem("kaste"), "kast");});
test("kaster -> kast", function() {deepEqual( Stem("kaster"), "kast");});
test("kastes -> kast", function() {deepEqual( Stem("kastes"), "kast");});
test("kastet -> kast", function() {deepEqual( Stem("kastet"), "kast");});
test("katalog -> katalog", function() {deepEqual( Stem("katalog"), "katalog");});
test("katalysator -> katalysator", function() {deepEqual( Stem("katalysator"), "katalysator");});
test("kategorien -> kategori", function() {deepEqual( Stem("kategorien"), "kategori");});
test("kategoriene -> kategori", function() {deepEqual( Stem("kategoriene"), "kategori");});
test("kategorier -> kategori", function() {deepEqual( Stem("kategorier"), "kategori");});
test("katt -> katt", function() {deepEqual( Stem("katt"), "katt");});
test("katte -> katt", function() {deepEqual( Stem("katte"), "katt");});
test("katten -> katt", function() {deepEqual( Stem("katten"), "katt");});
test("kattene -> katt", function() {deepEqual( Stem("kattene"), "katt");});
test("kattepoter -> kattepot", function() {deepEqual( Stem("kattepoter"), "kattepot");});
test("katter -> katt", function() {deepEqual( Stem("katter"), "katt");});
test("katteskinn -> katteskinn", function() {deepEqual( Stem("katteskinn"), "katteskinn");});
test("kattunger -> kattung", function() {deepEqual( Stem("kattunger"), "kattung");});
test("kave -> kav", function() {deepEqual( Stem("kave"), "kav");});
test("kaver -> kav", function() {deepEqual( Stem("kaver"), "kav");});
test("kgl -> kgl", function() {deepEqual( Stem("kgl"), "kgl");});
test("kh -> kh", function() {deepEqual( Stem("kh"), "kh");});
test("kiel -> kiel", function() {deepEqual( Stem("kiel"), "kiel");});
test("kikke -> kikk", function() {deepEqual( Stem("kikke"), "kikk");});
test("kikker -> kikk", function() {deepEqual( Stem("kikker"), "kikk");});
test("kilde -> kild", function() {deepEqual( Stem("kilde"), "kild");});
test("kilden -> kild", function() {deepEqual( Stem("kilden"), "kild");});
test("kilder -> kild", function() {deepEqual( Stem("kilder"), "kild");});
test("kildevannet -> kildevann", function() {deepEqual( Stem("kildevannet"), "kildevann");});
test("kiler -> kil", function() {deepEqual( Stem("kiler"), "kil");});
test("kilo -> kilo", function() {deepEqual( Stem("kilo"), "kilo");});
test("kilometer -> kilomet", function() {deepEqual( Stem("kilometer"), "kilomet");});
test("kilometerdistanse -> kilometerdistans", function() {deepEqual( Stem("kilometerdistanse"), "kilometerdistans");});
test("kinn -> kinn", function() {deepEqual( Stem("kinn"), "kinn");});
test("kinnene -> kinn", function() {deepEqual( Stem("kinnene"), "kinn");});
test("kinnet -> kinn", function() {deepEqual( Stem("kinnet"), "kinn");});
test("kinnskjegget -> kinnskjegg", function() {deepEqual( Stem("kinnskjegget"), "kinnskjegg");});
test("kiosk -> kiosk", function() {deepEqual( Stem("kiosk"), "kiosk");});
test("kirkenes -> kirk", function() {deepEqual( Stem("kirkenes"), "kirk");});
test("kiste -> kist", function() {deepEqual( Stem("kiste"), "kist");});
test("kjede -> kjed", function() {deepEqual( Stem("kjede"), "kjed");});
test("kjededannelsene -> kjededann", function() {deepEqual( Stem("kjededannelsene"), "kjededann");});
test("kjededannelser -> kjededann", function() {deepEqual( Stem("kjededannelser"), "kjededann");});
test("kjedegrupperinger -> kjedegruppering", function() {deepEqual( Stem("kjedegrupperinger"), "kjedegruppering");});
test("kjedeintegrasjon -> kjedeintegrasjon", function() {deepEqual( Stem("kjedeintegrasjon"), "kjedeintegrasjon");});
test("kjedelige -> kjed", function() {deepEqual( Stem("kjedelige"), "kjed");});
test("kjedens -> kjed", function() {deepEqual( Stem("kjedens"), "kjed");});
test("kjeder -> kjed", function() {deepEqual( Stem("kjeder"), "kjed");});
test("kjedestrukturene -> kjedestruktur", function() {deepEqual( Stem("kjedestrukturene"), "kjedestruktur");});
test("kjedet -> kjed", function() {deepEqual( Stem("kjedet"), "kjed");});
test("kjeft -> kjeft", function() {deepEqual( Stem("kjeft"), "kjeft");});
test("kjeften -> kjeft", function() {deepEqual( Stem("kjeften"), "kjeft");});
test("kjeftesmella -> kjeftesmell", function() {deepEqual( Stem("kjeftesmella"), "kjeftesmell");});
test("kjekkaseri -> kjekkaseri", function() {deepEqual( Stem("kjekkaseri"), "kjekkaseri");});
test("kjelde -> kjeld", function() {deepEqual( Stem("kjelde"), "kjeld");});
test("kjelder -> kjeld", function() {deepEqual( Stem("kjelder"), "kjeld");});
test("kjele -> kjel", function() {deepEqual( Stem("kjele"), "kjel");});
test("kjelen -> kjel", function() {deepEqual( Stem("kjelen"), "kjel");});
test("kjeler -> kjel", function() {deepEqual( Stem("kjeler"), "kjel");});
test("kjelker -> kjelk", function() {deepEqual( Stem("kjelker"), "kjelk");});
test("kjellar -> kjell", function() {deepEqual( Stem("kjellar"), "kjell");});
test("kjellarar -> kjellar", function() {deepEqual( Stem("kjellarar"), "kjellar");});
test("kjellstad -> kjellstad", function() {deepEqual( Stem("kjellstad"), "kjellstad");});
test("kjem -> kjem", function() {deepEqual( Stem("kjem"), "kjem");});
test("kjemikalier -> kjemikali", function() {deepEqual( Stem("kjemikalier"), "kjemikali");});
test("kjemiske -> kjemisk", function() {deepEqual( Stem("kjemiske"), "kjemisk");});
test("kjemmet -> kjemm", function() {deepEqual( Stem("kjemmet"), "kjemm");});
test("kjempe -> kjemp", function() {deepEqual( Stem("kjempe"), "kjemp");});
test("kjempediger -> kjemped", function() {deepEqual( Stem("kjempediger"), "kjemped");});
test("kjempedigre -> kjempedigr", function() {deepEqual( Stem("kjempedigre"), "kjempedigr");});
test("kjempekrefter -> kjempekreft", function() {deepEqual( Stem("kjempekrefter"), "kjempekreft");});
test("kjempen -> kjemp", function() {deepEqual( Stem("kjempen"), "kjemp");});
test("kjempene -> kjemp", function() {deepEqual( Stem("kjempene"), "kjemp");});
test("kjempens -> kjemp", function() {deepEqual( Stem("kjempens"), "kjemp");});
test("kjemper -> kjemp", function() {deepEqual( Stem("kjemper"), "kjemp");});
test("kjempes -> kjemp", function() {deepEqual( Stem("kjempes"), "kjemp");});
test("kjempestor -> kjempestor", function() {deepEqual( Stem("kjempestor"), "kjempestor");});
test("kjempet -> kjemp", function() {deepEqual( Stem("kjempet"), "kjemp");});
test("kjend -> kjend", function() {deepEqual( Stem("kjend"), "kjend");});
test("kjende -> kjend", function() {deepEqual( Stem("kjende"), "kjend");});
test("kjennast -> kjenn", function() {deepEqual( Stem("kjennast"), "kjenn");});
test("kjenne -> kjenn", function() {deepEqual( Stem("kjenne"), "kjenn");});
test("kjennelse -> kjenn", function() {deepEqual( Stem("kjennelse"), "kjenn");});
test("kjennemerka -> kjennemerk", function() {deepEqual( Stem("kjennemerka"), "kjennemerk");});
test("kjennemerke -> kjennemerk", function() {deepEqual( Stem("kjennemerke"), "kjennemerk");});
test("kjennemerket -> kjennemerk", function() {deepEqual( Stem("kjennemerket"), "kjennemerk");});
test("kjenner -> kjenn", function() {deepEqual( Stem("kjenner"), "kjenn");});
test("kjennes -> kjenn", function() {deepEqual( Stem("kjennes"), "kjenn");});
test("kjennetegner -> kjennetegn", function() {deepEqual( Stem("kjennetegner"), "kjennetegn");});
test("kjennetegnes -> kjennetegn", function() {deepEqual( Stem("kjennetegnes"), "kjennetegn");});
test("kjennetegnet -> kjennetegn", function() {deepEqual( Stem("kjennetegnet"), "kjennetegn");});
test("kjenneteikna -> kjenneteikn", function() {deepEqual( Stem("kjenneteikna"), "kjenneteikn");});
test("kjenneteiknar -> kjenneteikn", function() {deepEqual( Stem("kjenneteiknar"), "kjenneteikn");});
test("kjenneteiknet -> kjenneteikn", function() {deepEqual( Stem("kjenneteiknet"), "kjenneteikn");});
test("kjennskap -> kjennskap", function() {deepEqual( Stem("kjennskap"), "kjennskap");});
test("kjent -> kjent", function() {deepEqual( Stem("kjent"), "kjent");});
test("kjente -> kjent", function() {deepEqual( Stem("kjente"), "kjent");});
test("kjepp -> kjepp", function() {deepEqual( Stem("kjepp"), "kjepp");});
test("kjeppjage -> kjeppjag", function() {deepEqual( Stem("kjeppjage"), "kjeppjag");});
test("kjeppjages -> kjeppjag", function() {deepEqual( Stem("kjeppjages"), "kjeppjag");});
test("kjeppjaget -> kjeppjag", function() {deepEqual( Stem("kjeppjaget"), "kjeppjag");});
test("kjerneaktivitetene -> kjerneaktivitet", function() {deepEqual( Stem("kjerneaktivitetene"), "kjerneaktivitet");});
test("kjerneaktiviteter -> kjerneaktivitet", function() {deepEqual( Stem("kjerneaktiviteter"), "kjerneaktivitet");});
test("kjerneverksemda -> kjerneverksemd", function() {deepEqual( Stem("kjerneverksemda"), "kjerneverksemd");});
test("kjerra -> kjerr", function() {deepEqual( Stem("kjerra"), "kjerr");});
test("kjerre -> kjerr", function() {deepEqual( Stem("kjerre"), "kjerr");});
test("kjerring -> kjerring", function() {deepEqual( Stem("kjerring"), "kjerring");});
test("kjerringa -> kjerring", function() {deepEqual( Stem("kjerringa"), "kjerring");});
test("kjerter -> kjert", function() {deepEqual( Stem("kjerter"), "kjert");});
test("kjettingen -> kjetting", function() {deepEqual( Stem("kjettingen"), "kjetting");});
test("kjevene -> kjev", function() {deepEqual( Stem("kjevene"), "kjev");});
test("kjolen -> kjol", function() {deepEqual( Stem("kjolen"), "kjol");});
test("kjælent -> kjælent", function() {deepEqual( Stem("kjælent"), "kjælent");});
test("kjælne -> kjæln", function() {deepEqual( Stem("kjælne"), "kjæln");});
test("kjære -> kjær", function() {deepEqual( Stem("kjære"), "kjær");});
test("kjæremål -> kjæremål", function() {deepEqual( Stem("kjæremål"), "kjæremål");});
test("kjæremålsutval -> kjæremålsutval", function() {deepEqual( Stem("kjæremålsutval"), "kjæremålsutval");});
test("kjæreste -> kjærest", function() {deepEqual( Stem("kjæreste"), "kjærest");});
test("kjærester -> kjærest", function() {deepEqual( Stem("kjærester"), "kjærest");});
test("kjærlighet -> kjær", function() {deepEqual( Stem("kjærlighet"), "kjær");});
test("kjærligheten -> kjær", function() {deepEqual( Stem("kjærligheten"), "kjær");});
test("kjærlighets -> kjærligh", function() {deepEqual( Stem("kjærlighets"), "kjærligh");});
test("kjærlighetsgudinnen -> kjærlighetsgudinn", function() {deepEqual( Stem("kjærlighetsgudinnen"), "kjærlighetsgudinn");});
test("kjærtegn -> kjærtegn", function() {deepEqual( Stem("kjærtegn"), "kjærtegn");});
test("kjøkenapparat -> kjøkenapparat", function() {deepEqual( Stem("kjøkenapparat"), "kjøkenapparat");});
test("kjøkenbenken -> kjøkenbenk", function() {deepEqual( Stem("kjøkenbenken"), "kjøkenbenk");});
test("kjøkeninnreiing -> kjøkeninnreiing", function() {deepEqual( Stem("kjøkeninnreiing"), "kjøkeninnreiing");});
test("kjøkenvifter -> kjøkenvift", function() {deepEqual( Stem("kjøkenvifter"), "kjøkenvift");});
test("kjøkkenet -> kjøkken", function() {deepEqual( Stem("kjøkkenet"), "kjøkken");});
test("kjøkøsundet -> kjøkøsund", function() {deepEqual( Stem("kjøkøsundet"), "kjøkøsund");});
test("kjøl -> kjøl", function() {deepEqual( Stem("kjøl"), "kjøl");});
test("kjølevarer -> kjølevar", function() {deepEqual( Stem("kjølevarer"), "kjølevar");});
test("kjølvannet -> kjølvann", function() {deepEqual( Stem("kjølvannet"), "kjølvann");});
test("kjønn -> kjønn", function() {deepEqual( Stem("kjønn"), "kjønn");});
test("kjønnene -> kjønn", function() {deepEqual( Stem("kjønnene"), "kjønn");});
test("kjønnsforskjellen -> kjønnsforskjell", function() {deepEqual( Stem("kjønnsforskjellen"), "kjønnsforskjell");});
test("kjønnsforskjellene -> kjønnsforskjell", function() {deepEqual( Stem("kjønnsforskjellene"), "kjønnsforskjell");});
test("kjønnslem -> kjønnslem", function() {deepEqual( Stem("kjønnslem"), "kjønnslem");});
test("kjønnsnøytralt -> kjønnsnøytralt", function() {deepEqual( Stem("kjønnsnøytralt"), "kjønnsnøytralt");});
test("kjøp -> kjøp", function() {deepEqual( Stem("kjøp"), "kjøp");});
test("kjøpar -> kjøp", function() {deepEqual( Stem("kjøpar"), "kjøp");});
test("kjøparar -> kjøpar", function() {deepEqual( Stem("kjøparar"), "kjøpar");});
test("kjøparen -> kjøpar", function() {deepEqual( Stem("kjøparen"), "kjøpar");});
test("kjøpast -> kjøp", function() {deepEqual( Stem("kjøpast"), "kjøp");});
test("kjøpe -> kjøp", function() {deepEqual( Stem("kjøpe"), "kjøp");});
test("kjøpekraft -> kjøpekraft", function() {deepEqual( Stem("kjøpekraft"), "kjøpekraft");});
test("kjøpekraftsforbedring -> kjøpekraftsforbedring", function() {deepEqual( Stem("kjøpekraftsforbedring"), "kjøpekraftsforbedring");});
test("kjøper -> kjøp", function() {deepEqual( Stem("kjøper"), "kjøp");});
test("kjøperett -> kjøperett", function() {deepEqual( Stem("kjøperett"), "kjøperett");});
test("kjøpes -> kjøp", function() {deepEqual( Stem("kjøpes"), "kjøp");});
test("kjøpesenter -> kjøpesent", function() {deepEqual( Stem("kjøpesenter"), "kjøpesent");});
test("kjøpesummen -> kjøpesumm", function() {deepEqual( Stem("kjøpesummen"), "kjøpesumm");});
test("kjøpeutbyte -> kjøpeutbyt", function() {deepEqual( Stem("kjøpeutbyte"), "kjøpeutbyt");});
test("kjøpsavtalar -> kjøpsavtal", function() {deepEqual( Stem("kjøpsavtalar"), "kjøpsavtal");});
test("kjøpsavtale -> kjøpsavtal", function() {deepEqual( Stem("kjøpsavtale"), "kjøpsavtal");});
test("kjøpslova -> kjøp", function() {deepEqual( Stem("kjøpslova"), "kjøp");});
test("kjøpssituasjonen -> kjøpssituasjon", function() {deepEqual( Stem("kjøpssituasjonen"), "kjøpssituasjon");});
test("kjøpt -> kjøpt", function() {deepEqual( Stem("kjøpt"), "kjøpt");});
test("kjøpte -> kjøpt", function() {deepEqual( Stem("kjøpte"), "kjøpt");});
test("kjøre -> kjør", function() {deepEqual( Stem("kjøre"), "kjør");});
test("kjøreavtaler -> kjøreavtal", function() {deepEqual( Stem("kjøreavtaler"), "kjøreavtal");});
test("kjørehastighet -> kjørehast", function() {deepEqual( Stem("kjørehastighet"), "kjørehast");});
test("kjører -> kjør", function() {deepEqual( Stem("kjører"), "kjør");});
test("kjøretøy -> kjøretøy", function() {deepEqual( Stem("kjøretøy"), "kjøretøy");});
test("kjøretøyer -> kjøretøy", function() {deepEqual( Stem("kjøretøyer"), "kjøretøy");});
test("kjørte -> kjørt", function() {deepEqual( Stem("kjørte"), "kjørt");});
test("kjøteren -> kjøter", function() {deepEqual( Stem("kjøteren"), "kjøter");});
test("kjøtt -> kjøtt", function() {deepEqual( Stem("kjøtt"), "kjøtt");});
test("kjøttet -> kjøtt", function() {deepEqual( Stem("kjøttet"), "kjøtt");});
test("klagast -> klag", function() {deepEqual( Stem("klagast"), "klag");});
test("klage -> klag", function() {deepEqual( Stem("klage"), "klag");});
test("klageadgang -> klageadgang", function() {deepEqual( Stem("klageadgang"), "klageadgang");});
test("klagefristen -> klagefrist", function() {deepEqual( Stem("klagefristen"), "klagefrist");});
test("klageinteresse -> klageinteress", function() {deepEqual( Stem("klageinteresse"), "klageinteress");});
test("klagen -> klag", function() {deepEqual( Stem("klagen"), "klag");});
test("klagenemnd -> klagenemnd", function() {deepEqual( Stem("klagenemnd"), "klagenemnd");});
test("klager -> klag", function() {deepEqual( Stem("klager"), "klag");});
test("klagereglane -> klageregl", function() {deepEqual( Stem("klagereglane"), "klageregl");});
test("klagerett -> klagerett", function() {deepEqual( Stem("klagerett"), "klagerett");});
test("klagesaker -> klagesak", function() {deepEqual( Stem("klagesaker"), "klagesak");});
test("klaget -> klag", function() {deepEqual( Stem("klaget"), "klag");});
test("klam -> klam", function() {deepEqual( Stem("klam"), "klam");});
test("klamrer -> klamr", function() {deepEqual( Stem("klamrer"), "klamr");});
test("klang -> klang", function() {deepEqual( Stem("klang"), "klang");});
test("klapper -> klapp", function() {deepEqual( Stem("klapper"), "klapp");});
test("klar -> klar", function() {deepEqual( Stem("klar"), "klar");});
test("klarar -> klar", function() {deepEqual( Stem("klarar"), "klar");});
test("klare -> klar", function() {deepEqual( Stem("klare"), "klar");});
test("klarer -> klar", function() {deepEqual( Stem("klarer"), "klar");});
test("klarere -> klarer", function() {deepEqual( Stem("klarere"), "klarer");});
test("klargjere -> klargjer", function() {deepEqual( Stem("klargjere"), "klargjer");});
test("klargjort -> klargjort", function() {deepEqual( Stem("klargjort"), "klargjort");});
test("klargjør -> klargjør", function() {deepEqual( Stem("klargjør"), "klargjør");});
test("klargjøre -> klargjør", function() {deepEqual( Stem("klargjøre"), "klargjør");});
test("klargjøring -> klargjøring", function() {deepEqual( Stem("klargjøring"), "klargjøring");});
test("klarlagt -> klarlagt", function() {deepEqual( Stem("klarlagt"), "klarlagt");});
test("klarlegge -> klarlegg", function() {deepEqual( Stem("klarlegge"), "klarlegg");});
test("klarsignal -> klarsignal", function() {deepEqual( Stem("klarsignal"), "klarsignal");});
test("klart -> klart", function() {deepEqual( Stem("klart"), "klart");});
test("klasse -> klass", function() {deepEqual( Stem("klasse"), "klass");});
test("klasseforskriften -> klasseforskrift", function() {deepEqual( Stem("klasseforskriften"), "klasseforskrift");});
test("klassen -> klass", function() {deepEqual( Stem("klassen"), "klass");});
test("klassifiseres -> klassifiser", function() {deepEqual( Stem("klassifiseres"), "klassifiser");});
test("klassifisering -> klassifisering", function() {deepEqual( Stem("klassifisering"), "klassifisering");});
test("klassifiseringen -> klassifisering", function() {deepEqual( Stem("klassifiseringen"), "klassifisering");});
test("klassifisert -> klassifiser", function() {deepEqual( Stem("klassifisert"), "klassifiser");});
test("klassifiserte -> klassifiser", function() {deepEqual( Stem("klassifiserte"), "klassifiser");});
test("klatre -> klatr", function() {deepEqual( Stem("klatre"), "klatr");});
test("klatrer -> klatr", function() {deepEqual( Stem("klatrer"), "klatr");});
test("klatret -> klatr", function() {deepEqual( Stem("klatret"), "klatr");});
test("klauslane -> klausl", function() {deepEqual( Stem("klauslane"), "klausl");});
test("klausul -> klausul", function() {deepEqual( Stem("klausul"), "klausul");});
test("klausulane -> klausul", function() {deepEqual( Stem("klausulane"), "klausul");});
test("klausular -> klausul", function() {deepEqual( Stem("klausular"), "klausul");});
test("klausulering -> klausulering", function() {deepEqual( Stem("klausulering"), "klausulering");});
test("klausuleringa -> klausulering", function() {deepEqual( Stem("klausuleringa"), "klausulering");});
test("klausuleringar -> klausulering", function() {deepEqual( Stem("klausuleringar"), "klausulering");});
test("klausulert -> klausuler", function() {deepEqual( Stem("klausulert"), "klausuler");});
test("klausulerte -> klausuler", function() {deepEqual( Stem("klausulerte"), "klausuler");});
test("kle -> kle", function() {deepEqual( Stem("kle"), "kle");});
test("kleberget -> kleberg", function() {deepEqual( Stem("kleberget"), "kleberg");});
test("kledd -> kledd", function() {deepEqual( Stem("kledd"), "kledd");});
test("kledt -> kledt", function() {deepEqual( Stem("kledt"), "kledt");});
test("klegg -> klegg", function() {deepEqual( Stem("klegg"), "klegg");});
test("klem -> klem", function() {deepEqual( Stem("klem"), "klem");});
test("klemmer -> klemm", function() {deepEqual( Stem("klemmer"), "klemm");});
test("kler -> kler", function() {deepEqual( Stem("kler"), "kler");});
test("klevstrand -> klevstrand", function() {deepEqual( Stem("klevstrand"), "klevstrand");});
test("klientkontomodellen -> klientkontomodell", function() {deepEqual( Stem("klientkontomodellen"), "klientkontomodell");});
test("klimaavtale -> klimaavtal", function() {deepEqual( Stem("klimaavtale"), "klimaavtal");});
test("klimagasser -> klimagass", function() {deepEqual( Stem("klimagasser"), "klimagass");});
test("kling -> kling", function() {deepEqual( Stem("kling"), "kling");});
test("klippeblokk -> klippeblokk", function() {deepEqual( Stem("klippeblokk"), "klippeblokk");});
test("klippen -> klipp", function() {deepEqual( Stem("klippen"), "klipp");});
test("klipper -> klipp", function() {deepEqual( Stem("klipper"), "klipp");});
test("klippes -> klipp", function() {deepEqual( Stem("klippes"), "klipp");});
test("klippevegger -> klippevegg", function() {deepEqual( Stem("klippevegger"), "klippevegg");});
test("klirrende -> klirr", function() {deepEqual( Stem("klirrende"), "klirr");});
test("klisjeer -> klisje", function() {deepEqual( Stem("klisjeer"), "klisje");});
test("klok -> klok", function() {deepEqual( Stem("klok"), "klok");});
test("kloke -> klok", function() {deepEqual( Stem("kloke"), "klok");});
test("klokere -> kloker", function() {deepEqual( Stem("klokere"), "kloker");});
test("klokeste -> klokest", function() {deepEqual( Stem("klokeste"), "klokest");});
test("klokkeslett -> klokkeslett", function() {deepEqual( Stem("klokkeslett"), "klokkeslett");});
test("klokskap -> klokskap", function() {deepEqual( Stem("klokskap"), "klokskap");});
test("klokt -> klokt", function() {deepEqual( Stem("klokt"), "klokt");});
test("klorer -> klor", function() {deepEqual( Stem("klorer"), "klor");});
test("klp -> klp", function() {deepEqual( Stem("klp"), "klp");});
test("klps -> klps", function() {deepEqual( Stem("klps"), "klps");});
test("klubblokaler -> klubblokal", function() {deepEqual( Stem("klubblokaler"), "klubblokal");});
test("klump -> klump", function() {deepEqual( Stem("klump"), "klump");});
test("klumpen -> klump", function() {deepEqual( Stem("klumpen"), "klump");});
test("klumper -> klump", function() {deepEqual( Stem("klumper"), "klump");});
test("klynk -> klynk", function() {deepEqual( Stem("klynk"), "klynk");});
test("klynkende -> klynk", function() {deepEqual( Stem("klynkende"), "klynk");});
test("klynker -> klynk", function() {deepEqual( Stem("klynker"), "klynk");});
test("klyper -> klyp", function() {deepEqual( Stem("klyper"), "klyp");});
test("klår -> klår", function() {deepEqual( Stem("klår"), "klår");});
test("klårare -> klårar", function() {deepEqual( Stem("klårare"), "klårar");});
test("klårast -> klår", function() {deepEqual( Stem("klårast"), "klår");});
test("klåre -> klår", function() {deepEqual( Stem("klåre"), "klår");});
test("klårgjerande -> klårgjer", function() {deepEqual( Stem("klårgjerande"), "klårgjer");});
test("klårgjere -> klårgjer", function() {deepEqual( Stem("klårgjere"), "klårgjer");});
test("klårleggje -> klårleggj", function() {deepEqual( Stem("klårleggje"), "klårleggj");});
test("klårt -> klårt", function() {deepEqual( Stem("klårt"), "klårt");});
test("klær -> klær", function() {deepEqual( Stem("klær"), "klær");});
test("klærne -> klærn", function() {deepEqual( Stem("klærne"), "klærn");});
test("kløftede -> kløft", function() {deepEqual( Stem("kløftede"), "kløft");});
test("kløkt -> kløkt", function() {deepEqual( Stem("kløkt"), "kløkt");});
test("klør -> klør", function() {deepEqual( Stem("klør"), "klør");});
test("klørne -> klørn", function() {deepEqual( Stem("klørne"), "klørn");});
test("kløv -> kløv", function() {deepEqual( Stem("kløv"), "kløv");});
test("kløver -> kløv", function() {deepEqual( Stem("kløver"), "kløv");});
test("km -> km", function() {deepEqual( Stem("km"), "km");});
test("knaker -> knak", function() {deepEqual( Stem("knaker"), "knak");});
test("knapp -> knapp", function() {deepEqual( Stem("knapp"), "knapp");});
test("knappe -> knapp", function() {deepEqual( Stem("knappe"), "knapp");});
test("knapphet -> knapp", function() {deepEqual( Stem("knapphet"), "knapp");});
test("knapt -> knapt", function() {deepEqual( Stem("knapt"), "knapt");});
test("knasende -> knas", function() {deepEqual( Stem("knasende"), "knas");});
test("knaser -> knas", function() {deepEqual( Stem("knaser"), "knas");});
test("kne -> kne", function() {deepEqual( Stem("kne"), "kne");});
test("kneet -> kneet", function() {deepEqual( Stem("kneet"), "kneet");});
test("knehasene -> knehas", function() {deepEqual( Stem("knehasene"), "knehas");});
test("knekke -> knekk", function() {deepEqual( Stem("knekke"), "knekk");});
test("knekker -> knekk", function() {deepEqual( Stem("knekker"), "knekk");});
test("knekkes -> knekk", function() {deepEqual( Stem("knekkes"), "knekk");});
test("knekkpunkt -> knekkpunkt", function() {deepEqual( Stem("knekkpunkt"), "knekkpunkt");});
test("knekkpunktene -> knekkpunkt", function() {deepEqual( Stem("knekkpunktene"), "knekkpunkt");});
test("knekt -> knekt", function() {deepEqual( Stem("knekt"), "knekt");});
test("kneler -> knel", function() {deepEqual( Stem("kneler"), "knel");});
test("knep -> knep", function() {deepEqual( Stem("knep"), "knep");});
test("knepper -> knepp", function() {deepEqual( Stem("knepper"), "knepp");});
test("kneppeskjærsutstikkeren -> kneppeskjærsutstikker", function() {deepEqual( Stem("kneppeskjærsutstikkeren"), "kneppeskjærsutstikker");});
test("knipe -> knip", function() {deepEqual( Stem("knipe"), "knip");});
test("knipen -> knip", function() {deepEqual( Stem("knipen"), "knip");});
test("kniper -> knip", function() {deepEqual( Stem("kniper"), "knip");});
test("knipser -> knips", function() {deepEqual( Stem("knipser"), "knips");});
test("knipset -> knips", function() {deepEqual( Stem("knipset"), "knips");});
test("knitrende -> knitr", function() {deepEqual( Stem("knitrende"), "knitr");});
test("kniv -> kniv", function() {deepEqual( Stem("kniv"), "kniv");});
test("kniven -> kniv", function() {deepEqual( Stem("kniven"), "kniv");});
test("kniver -> kniv", function() {deepEqual( Stem("kniver"), "kniv");});
test("knokene -> knok", function() {deepEqual( Stem("knokene"), "knok");});
test("knoklene -> knokl", function() {deepEqual( Stem("knoklene"), "knokl");});
test("knokler -> knokl", function() {deepEqual( Stem("knokler"), "knokl");});
test("knopper -> knopp", function() {deepEqual( Stem("knopper"), "knopp");});
test("knurrer -> knurr", function() {deepEqual( Stem("knurrer"), "knurr");});
test("knuse -> knus", function() {deepEqual( Stem("knuse"), "knus");});
test("knuser -> knus", function() {deepEqual( Stem("knuser"), "knus");});
test("knuses -> knus", function() {deepEqual( Stem("knuses"), "knus");});
test("knuste -> knust", function() {deepEqual( Stem("knuste"), "knust");});
test("knut -> knut", function() {deepEqual( Stem("knut"), "knut");});
test("knute -> knut", function() {deepEqual( Stem("knute"), "knut");});
test("knuten -> knut", function() {deepEqual( Stem("knuten"), "knut");});
test("knutepunkt -> knutepunkt", function() {deepEqual( Stem("knutepunkt"), "knutepunkt");});
test("knutepunkter -> knutepunkt", function() {deepEqual( Stem("knutepunkter"), "knutepunkt");});
test("knutepunkthavnene -> knutepunkthavn", function() {deepEqual( Stem("knutepunkthavnene"), "knutepunkthavn");});
test("knutepunktsprinsippet -> knutepunktsprinsipp", function() {deepEqual( Stem("knutepunktsprinsippet"), "knutepunktsprinsipp");});
test("knuter -> knut", function() {deepEqual( Stem("knuter"), "knut");});
test("knytast -> knyt", function() {deepEqual( Stem("knytast"), "knyt");});
test("knyte -> knyt", function() {deepEqual( Stem("knyte"), "knyt");});
test("knyter -> knyt", function() {deepEqual( Stem("knyter"), "knyt");});
test("knytt -> knytt", function() {deepEqual( Stem("knytt"), "knytt");});
test("knytte -> knytt", function() {deepEqual( Stem("knytte"), "knytt");});
test("knyttede -> knytt", function() {deepEqual( Stem("knyttede"), "knytt");});
test("knytter -> knytt", function() {deepEqual( Stem("knytter"), "knytt");});
test("knyttes -> knytt", function() {deepEqual( Stem("knyttes"), "knytt");});
test("knyttet -> knytt", function() {deepEqual( Stem("knyttet"), "knytt");});
test("knyttneven -> knyttnev", function() {deepEqual( Stem("knyttneven"), "knyttnev");});
test("knærne -> knærn", function() {deepEqual( Stem("knærne"), "knærn");});
test("kobler -> kobl", function() {deepEqual( Stem("kobler"), "kobl");});
test("koblet -> kobl", function() {deepEqual( Stem("koblet"), "kobl");});
test("kobling -> kobling", function() {deepEqual( Stem("kobling"), "kobling");});
test("koblingen -> kobling", function() {deepEqual( Stem("koblingen"), "kobling");});
test("koften -> koft", function() {deepEqual( Stem("koften"), "koft");});
test("koke -> kok", function() {deepEqual( Stem("koke"), "kok");});
test("kokegrop -> kokegrop", function() {deepEqual( Stem("kokegrop"), "kokegrop");});
test("kokekar -> kokek", function() {deepEqual( Stem("kokekar"), "kokek");});
test("koker -> kok", function() {deepEqual( Stem("koker"), "kok");});
test("kokingen -> koking", function() {deepEqual( Stem("kokingen"), "koking");});
test("kokken -> kokk", function() {deepEqual( Stem("kokken"), "kokk");});
test("kokt -> kokt", function() {deepEqual( Stem("kokt"), "kokt");});
test("kolber -> kolb", function() {deepEqual( Stem("kolber"), "kolb");});
test("koldbrann -> koldbrann", function() {deepEqual( Stem("koldbrann"), "koldbrann");});
test("kollegium -> kollegium", function() {deepEqual( Stem("kollegium"), "kollegium");});
test("kollektiv -> kollektiv", function() {deepEqual( Stem("kollektiv"), "kollektiv");});
test("kollektive -> kollektiv", function() {deepEqual( Stem("kollektive"), "kollektiv");});
test("kollektivet -> kollektiv", function() {deepEqual( Stem("kollektivet"), "kollektiv");});
test("kollektivordning -> kollektivordning", function() {deepEqual( Stem("kollektivordning"), "kollektivordning");});
test("kollektivordninger -> kollektivordning", function() {deepEqual( Stem("kollektivordninger"), "kollektivordning");});
test("kollektivt -> kollektiv", function() {deepEqual( Stem("kollektivt"), "kollektiv");});
test("kollektivtrafikken -> kollektivtrafikk", function() {deepEqual( Stem("kollektivtrafikken"), "kollektivtrafikk");});
test("kolliderer -> kollider", function() {deepEqual( Stem("kolliderer"), "kollider");});
test("kollisjon -> kollisjon", function() {deepEqual( Stem("kollisjon"), "kollisjon");});
test("kollisjonar -> kollisjon", function() {deepEqual( Stem("kollisjonar"), "kollisjon");});
test("kollisjoner -> kollisjon", function() {deepEqual( Stem("kollisjoner"), "kollisjon");});
test("kolonne -> kolonn", function() {deepEqual( Stem("kolonne"), "kolonn");});
test("kolonnen -> kolonn", function() {deepEqual( Stem("kolonnen"), "kolonn");});
test("kolonnene -> kolonn", function() {deepEqual( Stem("kolonnene"), "kolonn");});
test("kom -> kom", function() {deepEqual( Stem("kom"), "kom");});
test("komande -> kom", function() {deepEqual( Stem("komande"), "kom");});
test("kombinasjon -> kombinasjon", function() {deepEqual( Stem("kombinasjon"), "kombinasjon");});
test("kombinasjonar -> kombinasjon", function() {deepEqual( Stem("kombinasjonar"), "kombinasjon");});
test("kombinasjonen -> kombinasjon", function() {deepEqual( Stem("kombinasjonen"), "kombinasjon");});
test("kombinasjonsarealene -> kombinasjonsareal", function() {deepEqual( Stem("kombinasjonsarealene"), "kombinasjonsareal");});
test("kombinere -> kombiner", function() {deepEqual( Stem("kombinere"), "kombiner");});
test("kombineres -> kombiner", function() {deepEqual( Stem("kombineres"), "kombiner");});
test("kombinert -> kombiner", function() {deepEqual( Stem("kombinert"), "kombiner");});
test("kombinerte -> kombiner", function() {deepEqual( Stem("kombinerte"), "kombiner");});
test("kombiskip -> kombiskip", function() {deepEqual( Stem("kombiskip"), "kombiskip");});
test("kombiterminal -> kombiterminal", function() {deepEqual( Stem("kombiterminal"), "kombiterminal");});
test("kombitransporter -> kombitransport", function() {deepEqual( Stem("kombitransporter"), "kombitransport");});
test("kome -> kom", function() {deepEqual( Stem("kome"), "kom");});
test("komen -> kom", function() {deepEqual( Stem("komen"), "kom");});
test("komite -> komit", function() {deepEqual( Stem("komite"), "komit");});
test("komiteen -> komite", function() {deepEqual( Stem("komiteen"), "komite");});
test("komiteens -> komite", function() {deepEqual( Stem("komiteens"), "komite");});
test("komitemedlemmene -> komitemedlemm", function() {deepEqual( Stem("komitemedlemmene"), "komitemedlemm");});
test("komiteutgreiingar -> komiteutgreiing", function() {deepEqual( Stem("komiteutgreiingar"), "komiteutgreiing");});
test("kommandittselskaper -> kommandittselskap", function() {deepEqual( Stem("kommandittselskaper"), "kommandittselskap");});
test("komme -> komm", function() {deepEqual( Stem("komme"), "komm");});
test("kommentarer -> kommentar", function() {deepEqual( Stem("kommentarer"), "kommentar");});
test("kommentert -> kommenter", function() {deepEqual( Stem("kommentert"), "kommenter");});
test("kommenterte -> kommenter", function() {deepEqual( Stem("kommenterte"), "kommenter");});
test("kommer -> komm", function() {deepEqual( Stem("kommer"), "komm");});
test("kommersiell -> kommersiell", function() {deepEqual( Stem("kommersiell"), "kommersiell");});
test("kommersielle -> kommersiell", function() {deepEqual( Stem("kommersielle"), "kommersiell");});
test("kommet -> komm", function() {deepEqual( Stem("kommet"), "komm");});
test("kommisjonen -> kommisjon", function() {deepEqual( Stem("kommisjonen"), "kommisjon");});
test("kommisjonens -> kommisjon", function() {deepEqual( Stem("kommisjonens"), "kommisjon");});
test("kommunal -> kommunal", function() {deepEqual( Stem("kommunal"), "kommunal");});
test("kommunaldepartementet -> kommunaldepartement", function() {deepEqual( Stem("kommunaldepartementet"), "kommunaldepartement");});
test("kommunale -> kommunal", function() {deepEqual( Stem("kommunale"), "kommunal");});
test("kommunalrettslige -> kommunalretts", function() {deepEqual( Stem("kommunalrettslige"), "kommunalretts");});
test("kommunalt -> kommunalt", function() {deepEqual( Stem("kommunalt"), "kommunalt");});
test("kommunane -> kommun", function() {deepEqual( Stem("kommunane"), "kommun");});
test("kommunar -> kommun", function() {deepEqual( Stem("kommunar"), "kommun");});
test("kommune -> kommun", function() {deepEqual( Stem("kommune"), "kommun");});
test("kommuneadministrasjon -> kommuneadministrasjon", function() {deepEqual( Stem("kommuneadministrasjon"), "kommuneadministrasjon");});
test("kommunedelplan -> kommunedelplan", function() {deepEqual( Stem("kommunedelplan"), "kommunedelplan");});
test("kommunedelplanen -> kommunedelplan", function() {deepEqual( Stem("kommunedelplanen"), "kommunedelplan");});
test("kommunegrensen -> kommunegrens", function() {deepEqual( Stem("kommunegrensen"), "kommunegrens");});
test("kommunegrensene -> kommunegrens", function() {deepEqual( Stem("kommunegrensene"), "kommunegrens");});
test("kommunekassen -> kommunekass", function() {deepEqual( Stem("kommunekassen"), "kommunekass");});
test("kommunelov -> kommun", function() {deepEqual( Stem("kommunelov"), "kommun");});
test("kommuneloven -> kommun", function() {deepEqual( Stem("kommuneloven"), "kommun");});
test("kommunelovens -> kommun", function() {deepEqual( Stem("kommunelovens"), "kommun");});
test("kommunen -> kommun", function() {deepEqual( Stem("kommunen"), "kommun");});
test("kommunene -> kommun", function() {deepEqual( Stem("kommunene"), "kommun");});
test("kommunenes -> kommun", function() {deepEqual( Stem("kommunenes"), "kommun");});
test("kommunens -> kommun", function() {deepEqual( Stem("kommunens"), "kommun");});
test("kommuneplan -> kommuneplan", function() {deepEqual( Stem("kommuneplan"), "kommuneplan");});
test("kommuneplanen -> kommuneplan", function() {deepEqual( Stem("kommuneplanen"), "kommuneplan");});
test("kommuneplanens -> kommuneplan", function() {deepEqual( Stem("kommuneplanens"), "kommuneplan");});
test("kommuner -> kommun", function() {deepEqual( Stem("kommuner"), "kommun");});
test("kommuners -> kommun", function() {deepEqual( Stem("kommuners"), "kommun");});
test("kommunes -> kommun", function() {deepEqual( Stem("kommunes"), "kommun");});
test("kommunestyre -> kommunestyr", function() {deepEqual( Stem("kommunestyre"), "kommunestyr");});
test("kommunestyrene -> kommunestyr", function() {deepEqual( Stem("kommunestyrene"), "kommunestyr");});
test("kommunestyrer -> kommunestyr", function() {deepEqual( Stem("kommunestyrer"), "kommunestyr");});
test("kommunestyret -> kommunestyr", function() {deepEqual( Stem("kommunestyret"), "kommunestyr");});
test("kommunestyrets -> kommunestyr", function() {deepEqual( Stem("kommunestyrets"), "kommunestyr");});
test("kommunevalgperioden -> kommunevalgperiod", function() {deepEqual( Stem("kommunevalgperioden"), "kommunevalgperiod");});
test("kommunikasjon -> kommunikasjon", function() {deepEqual( Stem("kommunikasjon"), "kommunikasjon");});
test("kommunikasjonar -> kommunikasjon", function() {deepEqual( Stem("kommunikasjonar"), "kommunikasjon");});
test("kommunikasjonen -> kommunikasjon", function() {deepEqual( Stem("kommunikasjonen"), "kommunikasjon");});
test("kommunikasjonsforhold -> kommunikasjonsforhold", function() {deepEqual( Stem("kommunikasjonsforhold"), "kommunikasjonsforhold");});
test("komne -> komn", function() {deepEqual( Stem("komne"), "komn");});
test("kompensasjon -> kompensasjon", function() {deepEqual( Stem("kompensasjon"), "kompensasjon");});
test("kompensasjonen -> kompensasjon", function() {deepEqual( Stem("kompensasjonen"), "kompensasjon");});
test("kompensasjonsgrad -> kompensasjonsgrad", function() {deepEqual( Stem("kompensasjonsgrad"), "kompensasjonsgrad");});
test("kompensasjonsgraden -> kompensasjonsgrad", function() {deepEqual( Stem("kompensasjonsgraden"), "kompensasjonsgrad");});
test("kompensasjonsgrader -> kompensasjonsgrad", function() {deepEqual( Stem("kompensasjonsgrader"), "kompensasjonsgrad");});
test("kompensasjonsnivå -> kompensasjonsnivå", function() {deepEqual( Stem("kompensasjonsnivå"), "kompensasjonsnivå");});
test("kompensasjonsnivåene -> kompensasjonsnivå", function() {deepEqual( Stem("kompensasjonsnivåene"), "kompensasjonsnivå");});
test("kompensasjonsnivåer -> kompensasjonsnivå", function() {deepEqual( Stem("kompensasjonsnivåer"), "kompensasjonsnivå");});
test("kompensasjonsnivået -> kompensasjonsnivå", function() {deepEqual( Stem("kompensasjonsnivået"), "kompensasjonsnivå");});
test("kompensere -> kompenser", function() {deepEqual( Stem("kompensere"), "kompenser");});
test("kompenserer -> kompenser", function() {deepEqual( Stem("kompenserer"), "kompenser");});
test("kompensert -> kompenser", function() {deepEqual( Stem("kompensert"), "kompenser");});
test("kompetanse -> kompetans", function() {deepEqual( Stem("kompetanse"), "kompetans");});
test("kompetansen -> kompetans", function() {deepEqual( Stem("kompetansen"), "kompetans");});
test("kompetansepersoner -> kompetanseperson", function() {deepEqual( Stem("kompetansepersoner"), "kompetanseperson");});
test("kompetansestrid -> kompetansestrid", function() {deepEqual( Stem("kompetansestrid"), "kompetansestrid");});
test("kompleksitet -> kompleksit", function() {deepEqual( Stem("kompleksitet"), "kompleksit");});
test("kompletteringsregel -> kompletteringsregel", function() {deepEqual( Stem("kompletteringsregel"), "kompletteringsregel");});
test("kompletteringsregelen -> kompletteringsregel", function() {deepEqual( Stem("kompletteringsregelen"), "kompletteringsregel");});
test("komplikasjonar -> komplikasjon", function() {deepEqual( Stem("komplikasjonar"), "komplikasjon");});
test("komplikasjoner -> komplikasjon", function() {deepEqual( Stem("komplikasjoner"), "komplikasjon");});
test("komplisere -> kompliser", function() {deepEqual( Stem("komplisere"), "kompliser");});
test("komplisert -> kompliser", function() {deepEqual( Stem("komplisert"), "kompliser");});
test("kompliserte -> kompliser", function() {deepEqual( Stem("kompliserte"), "kompliser");});
test("komponent -> komponent", function() {deepEqual( Stem("komponent"), "komponent");});
test("komponenter -> komponent", function() {deepEqual( Stem("komponenter"), "komponent");});
test("komprimert -> komprimer", function() {deepEqual( Stem("komprimert"), "komprimer");});
test("kompromiss -> kompromiss", function() {deepEqual( Stem("kompromiss"), "kompromiss");});
test("kon -> kon", function() {deepEqual( Stem("kon"), "kon");});
test("kona -> kon", function() {deepEqual( Stem("kona"), "kon");});
test("kone -> kon", function() {deepEqual( Stem("kone"), "kon");});
test("koneløs -> koneløs", function() {deepEqual( Stem("koneløs"), "koneløs");});
test("konen -> kon", function() {deepEqual( Stem("konen"), "kon");});
test("koner -> kon", function() {deepEqual( Stem("koner"), "kon");});
test("konflikt -> konflikt", function() {deepEqual( Stem("konflikt"), "konflikt");});
test("konfliktar -> konflikt", function() {deepEqual( Stem("konfliktar"), "konflikt");});
test("konflikten -> konflikt", function() {deepEqual( Stem("konflikten"), "konflikt");});
test("konfliktene -> konflikt", function() {deepEqual( Stem("konfliktene"), "konflikt");});
test("konflikter -> konflikt", function() {deepEqual( Stem("konflikter"), "konflikt");});
test("konfliktforhold -> konfliktforhold", function() {deepEqual( Stem("konfliktforhold"), "konfliktforhold");});
test("konfliktfylt -> konfliktfylt", function() {deepEqual( Stem("konfliktfylt"), "konfliktfylt");});
test("konfliktområdet -> konfliktområd", function() {deepEqual( Stem("konfliktområdet"), "konfliktområd");});
test("konfliktsituasjonar -> konfliktsituasjon", function() {deepEqual( Stem("konfliktsituasjonar"), "konfliktsituasjon");});
test("konfliktsituasjoner -> konfliktsituasjon", function() {deepEqual( Stem("konfliktsituasjoner"), "konfliktsituasjon");});
test("kong -> kong", function() {deepEqual( Stem("kong"), "kong");});
test("konge -> kong", function() {deepEqual( Stem("konge"), "kong");});
test("kongelig -> kong", function() {deepEqual( Stem("kongelig"), "kong");});
test("kongen -> kong", function() {deepEqual( Stem("kongen"), "kong");});
test("kongens -> kong", function() {deepEqual( Stem("kongens"), "kong");});
test("konger -> kong", function() {deepEqual( Stem("konger"), "kong");});
test("kongsgården -> kongsgård", function() {deepEqual( Stem("kongsgården"), "kongsgård");});
test("kongshavn -> kongshavn", function() {deepEqual( Stem("kongshavn"), "kongshavn");});
test("kongssønnene -> kongssønn", function() {deepEqual( Stem("kongssønnene"), "kongssønn");});
test("konjunkturavhengig -> konjunkturavheng", function() {deepEqual( Stem("konjunkturavhengig"), "konjunkturavheng");});
test("konjunkturer -> konjunktur", function() {deepEqual( Stem("konjunkturer"), "konjunktur");});
test("konjunktursvingningene -> konjunktursvingning", function() {deepEqual( Stem("konjunktursvingningene"), "konjunktursvingning");});
test("konkluderer -> konkluder", function() {deepEqual( Stem("konkluderer"), "konkluder");});
test("konkluderte -> konkluder", function() {deepEqual( Stem("konkluderte"), "konkluder");});
test("konklusjon -> konklusjon", function() {deepEqual( Stem("konklusjon"), "konklusjon");});
test("konklusjonen -> konklusjon", function() {deepEqual( Stem("konklusjonen"), "konklusjon");});
test("konklusjonene -> konklusjon", function() {deepEqual( Stem("konklusjonene"), "konklusjon");});
test("konklusjoner -> konklusjon", function() {deepEqual( Stem("konklusjoner"), "konklusjon");});
test("konklusjonskapitlet -> konklusjonskapitl", function() {deepEqual( Stem("konklusjonskapitlet"), "konklusjonskapitl");});
test("konkret -> konkr", function() {deepEqual( Stem("konkret"), "konkr");});
test("konkrete -> konkret", function() {deepEqual( Stem("konkrete"), "konkret");});
test("konkretiserer -> konkretiser", function() {deepEqual( Stem("konkretiserer"), "konkretiser");});
test("konkretisering -> konkretisering", function() {deepEqual( Stem("konkretisering"), "konkretisering");});
test("konkretisert -> konkretiser", function() {deepEqual( Stem("konkretisert"), "konkretiser");});
test("konkurransdyktige -> konkurransdykt", function() {deepEqual( Stem("konkurransdyktige"), "konkurransdykt");});
test("konkurranse -> konkurrans", function() {deepEqual( Stem("konkurranse"), "konkurrans");});
test("konkurransebegrensende -> konkurransebegrens", function() {deepEqual( Stem("konkurransebegrensende"), "konkurransebegrens");});
test("konkurransedyktig -> konkurransedykt", function() {deepEqual( Stem("konkurransedyktig"), "konkurransedykt");});
test("konkurransedyktige -> konkurransedykt", function() {deepEqual( Stem("konkurransedyktige"), "konkurransedykt");});
test("konkurransedyktighet -> konkurransedykt", function() {deepEqual( Stem("konkurransedyktighet"), "konkurransedykt");});
test("konkurranseevne -> konkurranseevn", function() {deepEqual( Stem("konkurranseevne"), "konkurranseevn");});
test("konkurransefaktor -> konkurransefaktor", function() {deepEqual( Stem("konkurransefaktor"), "konkurransefaktor");});
test("konkurranseflatene -> konkurranseflat", function() {deepEqual( Stem("konkurranseflatene"), "konkurranseflat");});
test("konkurranseflater -> konkurranseflat", function() {deepEqual( Stem("konkurranseflater"), "konkurranseflat");});
test("konkurranseforhold -> konkurranseforhold", function() {deepEqual( Stem("konkurranseforhold"), "konkurranseforhold");});
test("konkurransefortrinn -> konkurransefortrinn", function() {deepEqual( Stem("konkurransefortrinn"), "konkurransefortrinn");});
test("konkurransehemmende -> konkurransehemm", function() {deepEqual( Stem("konkurransehemmende"), "konkurransehemm");});
test("konkurransekraft -> konkurransekraft", function() {deepEqual( Stem("konkurransekraft"), "konkurransekraft");});
test("konkurransekriteriene -> konkurransekriteri", function() {deepEqual( Stem("konkurransekriteriene"), "konkurransekriteri");});
test("konkurranselova -> konkurrans", function() {deepEqual( Stem("konkurranselova"), "konkurrans");});
test("konkurranseloven -> konkurrans", function() {deepEqual( Stem("konkurranseloven"), "konkurrans");});
test("konkurranselovens -> konkurrans", function() {deepEqual( Stem("konkurranselovens"), "konkurrans");});
test("konkurranselovgivning -> konkurranselovgivning", function() {deepEqual( Stem("konkurranselovgivning"), "konkurranselovgivning");});
test("konkurranselovgivningen -> konkurranselovgivning", function() {deepEqual( Stem("konkurranselovgivningen"), "konkurranselovgivning");});
test("konkurranselovgjeving -> konkurranselovgjeving", function() {deepEqual( Stem("konkurranselovgjeving"), "konkurranselovgjeving");});
test("konkurranselovgjevinga -> konkurranselovgjeving", function() {deepEqual( Stem("konkurranselovgjevinga"), "konkurranselovgjeving");});
test("konkurransemarked -> konkurransemarked", function() {deepEqual( Stem("konkurransemarked"), "konkurransemarked");});
test("konkurransemessige -> konkurransemess", function() {deepEqual( Stem("konkurransemessige"), "konkurransemess");});
test("konkurransen -> konkurrans", function() {deepEqual( Stem("konkurransen"), "konkurrans");});
test("konkurranseorienterte -> konkurranseorienter", function() {deepEqual( Stem("konkurranseorienterte"), "konkurranseorienter");});
test("konkurranseparameter -> konkurranseparamet", function() {deepEqual( Stem("konkurranseparameter"), "konkurranseparamet");});
test("konkurranseparametre -> konkurranseparametr", function() {deepEqual( Stem("konkurranseparametre"), "konkurranseparametr");});
test("konkurranseregler -> konkurranseregl", function() {deepEqual( Stem("konkurranseregler"), "konkurranseregl");});
test("konkurranserettslege -> konkurranseretts", function() {deepEqual( Stem("konkurranserettslege"), "konkurranseretts");});
test("konkurransesituasjonen -> konkurransesituasjon", function() {deepEqual( Stem("konkurransesituasjonen"), "konkurransesituasjon");});
test("konkurranseskadeleg -> konkurranseskad", function() {deepEqual( Stem("konkurranseskadeleg"), "konkurranseskad");});
test("konkurransetilsynet -> konkurransetilsyn", function() {deepEqual( Stem("konkurransetilsynet"), "konkurransetilsyn");});
test("konkurranseutsatt -> konkurranseutsatt", function() {deepEqual( Stem("konkurranseutsatt"), "konkurranseutsatt");});
test("konkurranseutsatte -> konkurranseutsatt", function() {deepEqual( Stem("konkurranseutsatte"), "konkurranseutsatt");});
test("konkurransevilkår -> konkurransevilkår", function() {deepEqual( Stem("konkurransevilkår"), "konkurransevilkår");});
test("konkurransevilkåra -> konkurransevilkår", function() {deepEqual( Stem("konkurransevilkåra"), "konkurransevilkår");});
test("konkurransevridende -> konkurransevrid", function() {deepEqual( Stem("konkurransevridende"), "konkurransevrid");});
test("konkurransvridende -> konkurransvrid", function() {deepEqual( Stem("konkurransvridende"), "konkurransvrid");});
test("konkurrent -> konkurrent", function() {deepEqual( Stem("konkurrent"), "konkurrent");});
test("konkurrentar -> konkurrent", function() {deepEqual( Stem("konkurrentar"), "konkurrent");});
test("konkurrerande -> konkurrer", function() {deepEqual( Stem("konkurrerande"), "konkurrer");});
test("konkurrere -> konkurrer", function() {deepEqual( Stem("konkurrere"), "konkurrer");});
test("konkurrerende -> konkurrer", function() {deepEqual( Stem("konkurrerende"), "konkurrer");});
test("konkurrerer -> konkurrer", function() {deepEqual( Stem("konkurrerer"), "konkurrer");});
test("konkurrert -> konkurrer", function() {deepEqual( Stem("konkurrert"), "konkurrer");});
test("konkurs -> konkur", function() {deepEqual( Stem("konkurs"), "konkur");});
test("konkursar -> konkurs", function() {deepEqual( Stem("konkursar"), "konkurs");});
test("konkursbehandling -> konkursbehandling", function() {deepEqual( Stem("konkursbehandling"), "konkursbehandling");});
test("konkursbu -> konkursbu", function() {deepEqual( Stem("konkursbu"), "konkursbu");});
test("konkursbuet -> konkursbu", function() {deepEqual( Stem("konkursbuet"), "konkursbu");});
test("konkursen -> konkurs", function() {deepEqual( Stem("konkursen"), "konkurs");});
test("konkurskarantene -> konkurskarant", function() {deepEqual( Stem("konkurskarantene"), "konkurskarant");});
test("konkurslova -> konkur", function() {deepEqual( Stem("konkurslova"), "konkur");});
test("konkursopning -> konkursopning", function() {deepEqual( Stem("konkursopning"), "konkursopning");});
test("konkursopninga -> konkursopning", function() {deepEqual( Stem("konkursopninga"), "konkursopning");});
test("konkursskyldnar -> konkursskyldn", function() {deepEqual( Stem("konkursskyldnar"), "konkursskyldn");});
test("konkurstilfelle -> konkurstilfell", function() {deepEqual( Stem("konkurstilfelle"), "konkurstilfell");});
test("konr -> konr", function() {deepEqual( Stem("konr"), "konr");});
test("konsekvens -> konsekv", function() {deepEqual( Stem("konsekvens"), "konsekv");});
test("konsekvensane -> konsekvens", function() {deepEqual( Stem("konsekvensane"), "konsekvens");});
test("konsekvensar -> konsekvens", function() {deepEqual( Stem("konsekvensar"), "konsekvens");});
test("konsekvensberegningene -> konsekvensberegning", function() {deepEqual( Stem("konsekvensberegningene"), "konsekvensberegning");});
test("konsekvensberegninger -> konsekvensberegning", function() {deepEqual( Stem("konsekvensberegninger"), "konsekvensberegning");});
test("konsekvensen -> konsekvens", function() {deepEqual( Stem("konsekvensen"), "konsekvens");});
test("konsekvensene -> konsekvens", function() {deepEqual( Stem("konsekvensene"), "konsekvens");});
test("konsekvenser -> konsekvens", function() {deepEqual( Stem("konsekvenser"), "konsekvens");});
test("konsekvensutredes -> konsekvensutr", function() {deepEqual( Stem("konsekvensutredes"), "konsekvensutr");});
test("konsekvensutredning -> konsekvensutredning", function() {deepEqual( Stem("konsekvensutredning"), "konsekvensutredning");});
test("konsekvensutredningen -> konsekvensutredning", function() {deepEqual( Stem("konsekvensutredningen"), "konsekvensutredning");});
test("konsekvensutredninger -> konsekvensutredning", function() {deepEqual( Stem("konsekvensutredninger"), "konsekvensutredning");});
test("konsekvensutredningsforskriftens -> konsekvensutredningsforskrift", function() {deepEqual( Stem("konsekvensutredningsforskriftens"), "konsekvensutredningsforskrift");});
test("konsekvensutredningsmeldingen -> konsekvensutredningsmelding", function() {deepEqual( Stem("konsekvensutredningsmeldingen"), "konsekvensutredningsmelding");});
test("konsekvensutredningsreglene -> konsekvensutredningsregl", function() {deepEqual( Stem("konsekvensutredningsreglene"), "konsekvensutredningsregl");});
test("konsekvensvurderingene -> konsekvensvurdering", function() {deepEqual( Stem("konsekvensvurderingene"), "konsekvensvurdering");});
test("konsekvensvurderinger -> konsekvensvurdering", function() {deepEqual( Stem("konsekvensvurderinger"), "konsekvensvurdering");});
test("konsentrasjon -> konsentrasjon", function() {deepEqual( Stem("konsentrasjon"), "konsentrasjon");});
test("konsentrasjonen -> konsentrasjon", function() {deepEqual( Stem("konsentrasjonen"), "konsentrasjon");});
test("konsentrerast -> konsentrer", function() {deepEqual( Stem("konsentrerast"), "konsentrer");});
test("konsentrere -> konsentrer", function() {deepEqual( Stem("konsentrere"), "konsentrer");});
test("konsentrerer -> konsentrer", function() {deepEqual( Stem("konsentrerer"), "konsentrer");});
test("konsentrert -> konsentrer", function() {deepEqual( Stem("konsentrert"), "konsentrer");});
test("konsentrerte -> konsentrer", function() {deepEqual( Stem("konsentrerte"), "konsentrer");});
test("konsern -> konsern", function() {deepEqual( Stem("konsern"), "konsern");});
test("konsernbegrepet -> konsernbegrep", function() {deepEqual( Stem("konsernbegrepet"), "konsernbegrep");});
test("konserner -> konsern", function() {deepEqual( Stem("konserner"), "konsern");});
test("konsernet -> konsern", function() {deepEqual( Stem("konsernet"), "konsern");});
test("konsernets -> konsern", function() {deepEqual( Stem("konsernets"), "konsern");});
test("konsernforetak -> konsernforetak", function() {deepEqual( Stem("konsernforetak"), "konsernforetak");});
test("konsernforhold -> konsernforhold", function() {deepEqual( Stem("konsernforhold"), "konsernforhold");});
test("konsernforholdet -> konsernforhold", function() {deepEqual( Stem("konsernforholdet"), "konsernforhold");});
test("konserninterne -> konsernintern", function() {deepEqual( Stem("konserninterne"), "konsernintern");});
test("konsernkontoordningar -> konsernkontoordning", function() {deepEqual( Stem("konsernkontoordningar"), "konsernkontoordning");});
test("konsernlignende -> konsernlign", function() {deepEqual( Stem("konsernlignende"), "konsernlign");});
test("konsernmodell -> konsernmodell", function() {deepEqual( Stem("konsernmodell"), "konsernmodell");});
test("konsernmodellen -> konsernmodell", function() {deepEqual( Stem("konsernmodellen"), "konsernmodell");});
test("konservativt -> konservativ", function() {deepEqual( Stem("konservativt"), "konservativ");});
test("konsesjon -> konsesjon", function() {deepEqual( Stem("konsesjon"), "konsesjon");});
test("konsesjonstildeling -> konsesjonstildeling", function() {deepEqual( Stem("konsesjonstildeling"), "konsesjonstildeling");});
test("konsistente -> konsistent", function() {deepEqual( Stem("konsistente"), "konsistent");});
test("konsolidering -> konsolidering", function() {deepEqual( Stem("konsolidering"), "konsolidering");});
test("konstant -> konstant", function() {deepEqual( Stem("konstant"), "konstant");});
test("konstatere -> konstater", function() {deepEqual( Stem("konstatere"), "konstater");});
test("konstaterer -> konstater", function() {deepEqual( Stem("konstaterer"), "konstater");});
test("konstatert -> konstater", function() {deepEqual( Stem("konstatert"), "konstater");});
test("konstituerande -> konstituer", function() {deepEqual( Stem("konstituerande"), "konstituer");});
test("konstruerer -> konstruer", function() {deepEqual( Stem("konstruerer"), "konstruer");});
test("konstruert -> konstruer", function() {deepEqual( Stem("konstruert"), "konstruer");});
test("konstruksjon -> konstruksjon", function() {deepEqual( Stem("konstruksjon"), "konstruksjon");});
test("konstruksjonar -> konstruksjon", function() {deepEqual( Stem("konstruksjonar"), "konstruksjon");});
test("konstruksjonsløsninger -> konstruksjonsløsning", function() {deepEqual( Stem("konstruksjonsløsninger"), "konstruksjonsløsning");});
test("konsulent -> konsulent", function() {deepEqual( Stem("konsulent"), "konsulent");});
test("konsulentar -> konsulent", function() {deepEqual( Stem("konsulentar"), "konsulent");});
test("konsulenter -> konsulent", function() {deepEqual( Stem("konsulenter"), "konsulent");});
test("konsulentrolle -> konsulentroll", function() {deepEqual( Stem("konsulentrolle"), "konsulentroll");});
test("konsulenttenester -> konsulenttenest", function() {deepEqual( Stem("konsulenttenester"), "konsulenttenest");});
test("konsulenttjenester -> konsulenttjenest", function() {deepEqual( Stem("konsulenttjenester"), "konsulenttjenest");});
test("konsum -> konsum", function() {deepEqual( Stem("konsum"), "konsum");});
test("konsumenter -> konsument", function() {deepEqual( Stem("konsumenter"), "konsument");});
test("konsumprisindeksen -> konsumprisindeks", function() {deepEqual( Stem("konsumprisindeksen"), "konsumprisindeks");});
test("konsumvarer -> konsumvar", function() {deepEqual( Stem("konsumvarer"), "konsumvar");});
test("kontakt -> kontakt", function() {deepEqual( Stem("kontakt"), "kontakt");});
test("kontakten -> kontakt", function() {deepEqual( Stem("kontakten"), "kontakt");});
test("kontaktutvalget -> kontaktutvalg", function() {deepEqual( Stem("kontaktutvalget"), "kontaktutvalg");});
test("kontant -> kontant", function() {deepEqual( Stem("kontant"), "kontant");});
test("kontantar -> kontant", function() {deepEqual( Stem("kontantar"), "kontant");});
test("kontantbetalinga -> kontantbetaling", function() {deepEqual( Stem("kontantbetalinga"), "kontantbetaling");});
test("kontanter -> kontant", function() {deepEqual( Stem("kontanter"), "kontant");});
test("kontantstrømanalyse -> kontantstrømanalys", function() {deepEqual( Stem("kontantstrømanalyse"), "kontantstrømanalys");});
test("kontantvederlag -> kontantvederlag", function() {deepEqual( Stem("kontantvederlag"), "kontantvederlag");});
test("kontantverdi -> kontantverdi", function() {deepEqual( Stem("kontantverdi"), "kontantverdi");});
test("konti -> konti", function() {deepEqual( Stem("konti"), "konti");});
test("kontinent -> kontinent", function() {deepEqual( Stem("kontinent"), "kontinent");});
test("kontinentale -> kontinental", function() {deepEqual( Stem("kontinentale"), "kontinental");});
test("kontinentet -> kontinent", function() {deepEqual( Stem("kontinentet"), "kontinent");});
test("kontinuerleg -> kontinuer", function() {deepEqual( Stem("kontinuerleg"), "kontinuer");});
test("kontinuerlig -> kontinuer", function() {deepEqual( Stem("kontinuerlig"), "kontinuer");});
test("kontinuitet -> kontinuit", function() {deepEqual( Stem("kontinuitet"), "kontinuit");});
test("kontinuiteten -> kontinuitet", function() {deepEqual( Stem("kontinuiteten"), "kontinuitet");});
test("konto -> konto", function() {deepEqual( Stem("konto"), "konto");});
test("kontoen -> konto", function() {deepEqual( Stem("kontoen"), "konto");});
test("kontoens -> konto", function() {deepEqual( Stem("kontoens"), "konto");});
test("kontoer -> konto", function() {deepEqual( Stem("kontoer"), "konto");});
test("kontoføring -> kontoføring", function() {deepEqual( Stem("kontoføring"), "kontoføring");});
test("kontohaver -> kontohav", function() {deepEqual( Stem("kontohaver"), "kontohav");});
test("kontohaveren -> kontohaver", function() {deepEqual( Stem("kontohaveren"), "kontohaver");});
test("kontohold -> kontohold", function() {deepEqual( Stem("kontohold"), "kontohold");});
test("kontorbedrifter -> kontorbedrift", function() {deepEqual( Stem("kontorbedrifter"), "kontorbedrift");});
test("kontorbygg -> kontorbygg", function() {deepEqual( Stem("kontorbygg"), "kontorbygg");});
test("kontorer -> kontor", function() {deepEqual( Stem("kontorer"), "kontor");});
test("kontorfellesskapet -> kontorfellesskap", function() {deepEqual( Stem("kontorfellesskapet"), "kontorfellesskap");});
test("kontorlokaler -> kontorlokal", function() {deepEqual( Stem("kontorlokaler"), "kontorlokal");});
test("kontorstifta -> kontorstift", function() {deepEqual( Stem("kontorstifta"), "kontorstift");});
test("kontorstiftast -> kontorstift", function() {deepEqual( Stem("kontorstiftast"), "kontorstift");});
test("kontorstifte -> kontorstift", function() {deepEqual( Stem("kontorstifte"), "kontorstift");});
test("kontorstifting -> kontorstifting", function() {deepEqual( Stem("kontorstifting"), "kontorstifting");});
test("kontoutskrift -> kontoutskrift", function() {deepEqual( Stem("kontoutskrift"), "kontoutskrift");});
test("kontoutskriften -> kontoutskrift", function() {deepEqual( Stem("kontoutskriften"), "kontoutskrift");});
test("kontoutskrifter -> kontoutskrift", function() {deepEqual( Stem("kontoutskrifter"), "kontoutskrift");});
test("kontrakt -> kontrakt", function() {deepEqual( Stem("kontrakt"), "kontrakt");});
test("kontrakten -> kontrakt", function() {deepEqual( Stem("kontrakten"), "kontrakt");});
test("kontraktens -> kontrakt", function() {deepEqual( Stem("kontraktens"), "kontrakt");});
test("kontrakter -> kontrakt", function() {deepEqual( Stem("kontrakter"), "kontrakt");});
test("kontrakters -> kontrakt", function() {deepEqual( Stem("kontrakters"), "kontrakt");});
test("kontraktsfestede -> kontraktsfest", function() {deepEqual( Stem("kontraktsfestede"), "kontraktsfest");});
test("kontraktsforhold -> kontraktsforhold", function() {deepEqual( Stem("kontraktsforhold"), "kontraktsforhold");});
test("kontraktsforpliktelser -> kontraktsforplikt", function() {deepEqual( Stem("kontraktsforpliktelser"), "kontraktsforplikt");});
test("kontraktsinngåelse -> kontraktsinngå", function() {deepEqual( Stem("kontraktsinngåelse"), "kontraktsinngå");});
test("kontraktslast -> kontraktsl", function() {deepEqual( Stem("kontraktslast"), "kontraktsl");});
test("kontraktslovene -> kontrakt", function() {deepEqual( Stem("kontraktslovene"), "kontrakt");});
test("kontraktsplikter -> kontraktsplikt", function() {deepEqual( Stem("kontraktsplikter"), "kontraktsplikt");});
test("kontraktsreglar -> kontraktsregl", function() {deepEqual( Stem("kontraktsreglar"), "kontraktsregl");});
test("kontraktsretten -> kontraktsrett", function() {deepEqual( Stem("kontraktsretten"), "kontraktsrett");});
test("kontraktsrettsleg -> kontraktsretts", function() {deepEqual( Stem("kontraktsrettsleg"), "kontraktsretts");});
test("kontroll -> kontroll", function() {deepEqual( Stem("kontroll"), "kontroll");});
test("kontrollansvar -> kontrollansv", function() {deepEqual( Stem("kontrollansvar"), "kontrollansv");});
test("kontrollansvaret -> kontrollansvar", function() {deepEqual( Stem("kontrollansvaret"), "kontrollansvar");});
test("kontrollansvarsregelen -> kontrollansvarsregel", function() {deepEqual( Stem("kontrollansvarsregelen"), "kontrollansvarsregel");});
test("kontrollansvarsreglane -> kontrollansvarsregl", function() {deepEqual( Stem("kontrollansvarsreglane"), "kontrollansvarsregl");});
test("kontrollen -> kontroll", function() {deepEqual( Stem("kontrollen"), "kontroll");});
test("kontrollerast -> kontroller", function() {deepEqual( Stem("kontrollerast"), "kontroller");});
test("kontrollere -> kontroller", function() {deepEqual( Stem("kontrollere"), "kontroller");});
test("kontrollerer -> kontroller", function() {deepEqual( Stem("kontrollerer"), "kontroller");});
test("kontrolleres -> kontroller", function() {deepEqual( Stem("kontrolleres"), "kontroller");});
test("kontrollert -> kontroller", function() {deepEqual( Stem("kontrollert"), "kontroller");});
test("kontrollerte -> kontroller", function() {deepEqual( Stem("kontrollerte"), "kontroller");});
test("kontrollhensyn -> kontrollhensyn", function() {deepEqual( Stem("kontrollhensyn"), "kontrollhensyn");});
test("kontrollinstanser -> kontrollinstans", function() {deepEqual( Stem("kontrollinstanser"), "kontrollinstans");});
test("kontrolloppgaver -> kontrolloppgav", function() {deepEqual( Stem("kontrolloppgaver"), "kontrolloppgav");});
test("kontrollsystemer -> kontrollsystem", function() {deepEqual( Stem("kontrollsystemer"), "kontrollsystem");});
test("kontrolltiltak -> kontrolltiltak", function() {deepEqual( Stem("kontrolltiltak"), "kontrolltiltak");});
test("konturene -> kontur", function() {deepEqual( Stem("konturene"), "kontur");});
test("konvensjonell -> konvensjonell", function() {deepEqual( Stem("konvensjonell"), "konvensjonell");});
test("konvensjonelle -> konvensjonell", function() {deepEqual( Stem("konvensjonelle"), "konvensjonell");});
test("konvensjonelt -> konvensjonelt", function() {deepEqual( Stem("konvensjonelt"), "konvensjonelt");});
test("konvertere -> konverter", function() {deepEqual( Stem("konvertere"), "konverter");});
test("konverteres -> konverter", function() {deepEqual( Stem("konverteres"), "konverter");});
test("konvertering -> konvertering", function() {deepEqual( Stem("konvertering"), "konvertering");});
test("konverteringen -> konvertering", function() {deepEqual( Stem("konverteringen"), "konvertering");});
test("konverteringstidspunktet -> konverteringstidspunkt", function() {deepEqual( Stem("konverteringstidspunktet"), "konverteringstidspunkt");});
test("kooperasjon -> kooperasjon", function() {deepEqual( Stem("kooperasjon"), "kooperasjon");});
test("kooperasjonen -> kooperasjon", function() {deepEqual( Stem("kooperasjonen"), "kooperasjon");});
test("kooperativ -> kooperativ", function() {deepEqual( Stem("kooperativ"), "kooperativ");});
test("kooperativa -> kooperativ", function() {deepEqual( Stem("kooperativa"), "kooperativ");});
test("kooperative -> kooperativ", function() {deepEqual( Stem("kooperative"), "kooperativ");});
test("kooperativet -> kooperativ", function() {deepEqual( Stem("kooperativet"), "kooperativ");});
test("kooperativt -> kooperativ", function() {deepEqual( Stem("kooperativt"), "kooperativ");});
test("koordinere -> koordiner", function() {deepEqual( Stem("koordinere"), "koordiner");});
test("koordinerer -> koordiner", function() {deepEqual( Stem("koordinerer"), "koordiner");});
test("koordinering -> koordinering", function() {deepEqual( Stem("koordinering"), "koordinering");});
test("koordinerings -> koordinering", function() {deepEqual( Stem("koordinerings"), "koordinering");});
test("koordinert -> koordiner", function() {deepEqual( Stem("koordinert"), "koordiner");});
test("kopi -> kopi", function() {deepEqual( Stem("kopi"), "kopi");});
test("kopiar -> kopi", function() {deepEqual( Stem("kopiar"), "kopi");});
test("kopla -> kopl", function() {deepEqual( Stem("kopla"), "kopl");});
test("kor -> kor", function() {deepEqual( Stem("kor"), "kor");});
test("kork -> kork", function() {deepEqual( Stem("kork"), "kork");});
test("korkje -> korkj", function() {deepEqual( Stem("korkje"), "korkj");});
test("korleis -> korleis", function() {deepEqual( Stem("korleis"), "korleis");});
test("korn -> korn", function() {deepEqual( Stem("korn"), "korn");});
test("kornsjø -> kornsjø", function() {deepEqual( Stem("kornsjø"), "kornsjø");});
test("kornåkrene -> kornåkr", function() {deepEqual( Stem("kornåkrene"), "kornåkr");});
test("korreksjon -> korreksjon", function() {deepEqual( Stem("korreksjon"), "korreksjon");});
test("korrekt -> korrekt", function() {deepEqual( Stem("korrekt"), "korrekt");});
test("korrekte -> korrekt", function() {deepEqual( Stem("korrekte"), "korrekt");});
test("korrelert -> korreler", function() {deepEqual( Stem("korrelert"), "korreler");});
test("korrespondanse -> korrespondans", function() {deepEqual( Stem("korrespondanse"), "korrespondans");});
test("korridor -> korridor", function() {deepEqual( Stem("korridor"), "korridor");});
test("korridorene -> korridor", function() {deepEqual( Stem("korridorene"), "korridor");});
test("korridorer -> korridor", function() {deepEqual( Stem("korridorer"), "korridor");});
test("korridorgruppa -> korridorgrupp", function() {deepEqual( Stem("korridorgruppa"), "korridorgrupp");});
test("korridorgruppen -> korridorgrupp", function() {deepEqual( Stem("korridorgruppen"), "korridorgrupp");});
test("korridortenkning -> korridortenkning", function() {deepEqual( Stem("korridortenkning"), "korridortenkning");});
test("korrigering -> korrigering", function() {deepEqual( Stem("korrigering"), "korrigering");});
test("korrigert -> korriger", function() {deepEqual( Stem("korrigert"), "korriger");});
test("kort -> kort", function() {deepEqual( Stem("kort"), "kort");});
test("kortare -> kortar", function() {deepEqual( Stem("kortare"), "kortar");});
test("kortast -> kort", function() {deepEqual( Stem("kortast"), "kort");});
test("korte -> kort", function() {deepEqual( Stem("korte"), "kort");});
test("kortere -> korter", function() {deepEqual( Stem("kortere"), "korter");});
test("kortest -> kortest", function() {deepEqual( Stem("kortest"), "kortest");});
test("korteste -> kortest", function() {deepEqual( Stem("korteste"), "kortest");});
test("kortfattet -> kortfatt", function() {deepEqual( Stem("kortfattet"), "kortfatt");});
test("kortform -> kortform", function() {deepEqual( Stem("kortform"), "kortform");});
test("korthet -> kort", function() {deepEqual( Stem("korthet"), "kort");});
test("kortsiden -> kortsid", function() {deepEqual( Stem("kortsiden"), "kortsid");});
test("kortsiktige -> kortsikt", function() {deepEqual( Stem("kortsiktige"), "kortsikt");});
test("kortvarig -> kortvar", function() {deepEqual( Stem("kortvarig"), "kortvar");});
test("kosnadseffektive -> kosnadseffektiv", function() {deepEqual( Stem("kosnadseffektive"), "kosnadseffektiv");});
test("kost -> kost", function() {deepEqual( Stem("kost"), "kost");});
test("kostar -> kost", function() {deepEqual( Stem("kostar"), "kost");});
test("kostbar -> kostb", function() {deepEqual( Stem("kostbar"), "kostb");});
test("kostbare -> kostbar", function() {deepEqual( Stem("kostbare"), "kostbar");});
test("kostbarhetene -> kostbar", function() {deepEqual( Stem("kostbarhetene"), "kostbar");});
test("kostbarheter -> kostbar", function() {deepEqual( Stem("kostbarheter"), "kostbar");});
test("koste -> kost", function() {deepEqual( Stem("koste"), "kost");});
test("kostelig -> kost", function() {deepEqual( Stem("kostelig"), "kost");});
test("koster -> kost", function() {deepEqual( Stem("koster"), "kost");});
test("kostn -> kostn", function() {deepEqual( Stem("kostn"), "kostn");});
test("kostnad -> kostnad", function() {deepEqual( Stem("kostnad"), "kostnad");});
test("kostnaden -> kostnad", function() {deepEqual( Stem("kostnaden"), "kostnad");});
test("kostnadene -> kostnad", function() {deepEqual( Stem("kostnadene"), "kostnad");});
test("kostnader -> kostnad", function() {deepEqual( Stem("kostnader"), "kostnad");});
test("kostnadsauke -> kostnadsauk", function() {deepEqual( Stem("kostnadsauke"), "kostnadsauk");});
test("kostnadsbaserte -> kostnadsbaser", function() {deepEqual( Stem("kostnadsbaserte"), "kostnadsbaser");});
test("kostnadseffekter -> kostnadseffekt", function() {deepEqual( Stem("kostnadseffekter"), "kostnadseffekt");});
test("kostnadseffektiv -> kostnadseffektiv", function() {deepEqual( Stem("kostnadseffektiv"), "kostnadseffektiv");});
test("kostnadseffektive -> kostnadseffektiv", function() {deepEqual( Stem("kostnadseffektive"), "kostnadseffektiv");});
test("kostnadseffektivitet -> kostnadseffektivit", function() {deepEqual( Stem("kostnadseffektivitet"), "kostnadseffektivit");});
test("kostnadsgevinster -> kostnadsgevinst", function() {deepEqual( Stem("kostnadsgevinster"), "kostnadsgevinst");});
test("kostnadshensyn -> kostnadshensyn", function() {deepEqual( Stem("kostnadshensyn"), "kostnadshensyn");});
test("kostnadskontroll -> kostnadskontroll", function() {deepEqual( Stem("kostnadskontroll"), "kostnadskontroll");});
test("kostnadskrevende -> kostnadskrev", function() {deepEqual( Stem("kostnadskrevende"), "kostnadskrev");});
test("kostnadskrevjande -> kostnadskrevj", function() {deepEqual( Stem("kostnadskrevjande"), "kostnadskrevj");});
test("kostnadsmessig -> kostnadsmess", function() {deepEqual( Stem("kostnadsmessig"), "kostnadsmess");});
test("kostnadsmessige -> kostnadsmess", function() {deepEqual( Stem("kostnadsmessige"), "kostnadsmess");});
test("kostnadsnivå -> kostnadsnivå", function() {deepEqual( Stem("kostnadsnivå"), "kostnadsnivå");});
test("kostnadsnivået -> kostnadsnivå", function() {deepEqual( Stem("kostnadsnivået"), "kostnadsnivå");});
test("kostnadsoptimale -> kostnadsoptimal", function() {deepEqual( Stem("kostnadsoptimale"), "kostnadsoptimal");});
test("kostnadsoverslag -> kostnadsoverslag", function() {deepEqual( Stem("kostnadsoverslag"), "kostnadsoverslag");});
test("kostnadsoverslaget -> kostnadsoverslag", function() {deepEqual( Stem("kostnadsoverslaget"), "kostnadsoverslag");});
test("kostnadssiden -> kostnadssid", function() {deepEqual( Stem("kostnadssiden"), "kostnadssid");});
test("kostnadstallene -> kostnadstall", function() {deepEqual( Stem("kostnadstallene"), "kostnadstall");});
test("kostnadsøkningen -> kostnadsøkning", function() {deepEqual( Stem("kostnadsøkningen"), "kostnadsøkning");});
test("kr -> kr", function() {deepEqual( Stem("kr"), "kr");});
test("krabbe -> krabb", function() {deepEqual( Stem("krabbe"), "krabb");});
test("krabber -> krabb", function() {deepEqual( Stem("krabber"), "krabb");});
test("kraft -> kraft", function() {deepEqual( Stem("kraft"), "kraft");});
test("kraften -> kraft", function() {deepEqual( Stem("kraften"), "kraft");});
test("kraftig -> kraft", function() {deepEqual( Stem("kraftig"), "kraft");});
test("kraftige -> kraft", function() {deepEqual( Stem("kraftige"), "kraft");});
test("kraftigst -> kraftigst", function() {deepEqual( Stem("kraftigst"), "kraftigst");});
test("kraftkjøp -> kraftkjøp", function() {deepEqual( Stem("kraftkjøp"), "kraftkjøp");});
test("kraftlag -> kraftlag", function() {deepEqual( Stem("kraftlag"), "kraftlag");});
test("krakk -> krakk", function() {deepEqual( Stem("krakk"), "krakk");});
test("kran -> kran", function() {deepEqual( Stem("kran"), "kran");});
test("kraner -> kran", function() {deepEqual( Stem("kraner"), "kran");});
test("krangel -> krangel", function() {deepEqual( Stem("krangel"), "krangel");});
test("krangle -> krangl", function() {deepEqual( Stem("krangle"), "krangl");});
test("krangler -> krangl", function() {deepEqual( Stem("krangler"), "krangl");});
test("kranhåndtering -> kranhåndtering", function() {deepEqual( Stem("kranhåndtering"), "kranhåndtering");});
test("kranser -> krans", function() {deepEqual( Stem("kranser"), "krans");});
test("kransystemer -> kransystem", function() {deepEqual( Stem("kransystemer"), "kransystem");});
test("kratt -> kratt", function() {deepEqual( Stem("kratt"), "kratt");});
test("krattet -> kratt", function() {deepEqual( Stem("krattet"), "kratt");});
test("krattskog -> krattskog", function() {deepEqual( Stem("krattskog"), "krattskog");});
test("krav -> krav", function() {deepEqual( Stem("krav"), "krav");});
test("krava -> krav", function() {deepEqual( Stem("krava"), "krav");});
test("kravde -> kravd", function() {deepEqual( Stem("kravde"), "kravd");});
test("kravene -> krav", function() {deepEqual( Stem("kravene"), "krav");});
test("kravet -> krav", function() {deepEqual( Stem("kravet"), "krav");});
test("kravsmål -> kravsmål", function() {deepEqual( Stem("kravsmål"), "kravsmål");});
test("kravsmålet -> kravsmål", function() {deepEqual( Stem("kravsmålet"), "kravsmål");});
test("kravstor -> kravstor", function() {deepEqual( Stem("kravstor"), "kravstor");});
test("kravt -> kravt", function() {deepEqual( Stem("kravt"), "kravt");});
test("krediterast -> krediter", function() {deepEqual( Stem("krediterast"), "krediter");});
test("kreditor -> kreditor", function() {deepEqual( Stem("kreditor"), "kreditor");});
test("kreditorane -> kreditor", function() {deepEqual( Stem("kreditorane"), "kreditor");});
test("kreditorar -> kreditor", function() {deepEqual( Stem("kreditorar"), "kreditor");});
test("kreditoren -> kreditor", function() {deepEqual( Stem("kreditoren"), "kreditor");});
test("kreditorer -> kreditor", function() {deepEqual( Stem("kreditorer"), "kreditor");});
test("kreditorinteressene -> kreditorinteress", function() {deepEqual( Stem("kreditorinteressene"), "kreditorinteress");});
test("kreditors -> kreditor", function() {deepEqual( Stem("kreditors"), "kreditor");});
test("kreditorsvik -> kreditorsvik", function() {deepEqual( Stem("kreditorsvik"), "kreditorsvik");});
test("kreditorvarsel -> kreditorvarsel", function() {deepEqual( Stem("kreditorvarsel"), "kreditorvarsel");});
test("kreditorvarselet -> kreditorvarsel", function() {deepEqual( Stem("kreditorvarselet"), "kreditorvarsel");});
test("kreditt -> kreditt", function() {deepEqual( Stem("kreditt"), "kreditt");});
test("kredittavtaler -> kredittavtal", function() {deepEqual( Stem("kredittavtaler"), "kredittavtal");});
test("kredittforholdet -> kredittforhold", function() {deepEqual( Stem("kredittforholdet"), "kredittforhold");});
test("kredittgjevinga -> kredittgjeving", function() {deepEqual( Stem("kredittgjevinga"), "kredittgjeving");});
test("kredittilgangen -> kredittilgang", function() {deepEqual( Stem("kredittilgangen"), "kredittilgang");});
test("kredittilsynet -> kredittilsyn", function() {deepEqual( Stem("kredittilsynet"), "kredittilsyn");});
test("kredittilsynets -> kredittilsyn", function() {deepEqual( Stem("kredittilsynets"), "kredittilsyn");});
test("kredittilsynsloven -> kredittilsyn", function() {deepEqual( Stem("kredittilsynsloven"), "kredittilsyn");});
test("kredittinstitusjon -> kredittinstitusjon", function() {deepEqual( Stem("kredittinstitusjon"), "kredittinstitusjon");});
test("kredittinstitusjoner -> kredittinstitusjon", function() {deepEqual( Stem("kredittinstitusjoner"), "kredittinstitusjon");});
test("kredittstellet -> kredittstell", function() {deepEqual( Stem("kredittstellet"), "kredittstell");});
test("kredittverdig -> kredittverd", function() {deepEqual( Stem("kredittverdig"), "kredittverd");});
test("kreftene -> kreft", function() {deepEqual( Stem("kreftene"), "kreft");});
test("krefter -> kreft", function() {deepEqual( Stem("krefter"), "kreft");});
test("krek -> krek", function() {deepEqual( Stem("krek"), "krek");});
test("kremter -> kremt", function() {deepEqual( Stem("kremter"), "kremt");});
test("krets -> kret", function() {deepEqual( Stem("krets"), "kret");});
test("kretser -> krets", function() {deepEqual( Stem("kretser"), "krets");});
test("krev -> krev", function() {deepEqual( Stem("krev"), "krev");});
test("kreve -> krev", function() {deepEqual( Stem("kreve"), "krev");});
test("krevende -> krev", function() {deepEqual( Stem("krevende"), "krev");});
test("krever -> krev", function() {deepEqual( Stem("krever"), "krev");});
test("kreves -> krev", function() {deepEqual( Stem("kreves"), "krev");});
test("krevjast -> krevj", function() {deepEqual( Stem("krevjast"), "krevj");});
test("krevje -> krevj", function() {deepEqual( Stem("krevje"), "krevj");});
test("krevst -> krevst", function() {deepEqual( Stem("krevst"), "krevst");});
test("krig -> krig", function() {deepEqual( Stem("krig"), "krig");});
test("krigen -> krig", function() {deepEqual( Stem("krigen"), "krig");});
test("kriger -> krig", function() {deepEqual( Stem("kriger"), "krig");});
test("krigere -> kriger", function() {deepEqual( Stem("krigere"), "kriger");});
test("krigerne -> krigern", function() {deepEqual( Stem("krigerne"), "krigern");});
test("krigersk -> krigersk", function() {deepEqual( Stem("krigersk"), "krigersk");});
test("krigstog -> krigstog", function() {deepEqual( Stem("krigstog"), "krigstog");});
test("krigstrommene -> krigstromm", function() {deepEqual( Stem("krigstrommene"), "krigstromm");});
test("kring -> kring", function() {deepEqual( Stem("kring"), "kring");});
test("krins -> krin", function() {deepEqual( Stem("krins"), "krin");});
test("krinsar -> krins", function() {deepEqual( Stem("krinsar"), "krins");});
test("krinsen -> krins", function() {deepEqual( Stem("krinsen"), "krins");});
test("krisa -> kris", function() {deepEqual( Stem("krisa"), "kris");});
test("kriser -> kris", function() {deepEqual( Stem("kriser"), "kris");});
test("krisescenarier -> krisescenari", function() {deepEqual( Stem("krisescenarier"), "krisescenari");});
test("krisesituasjonar -> krisesituasjon", function() {deepEqual( Stem("krisesituasjonar"), "krisesituasjon");});
test("krisesituasjoner -> krisesituasjon", function() {deepEqual( Stem("krisesituasjoner"), "krisesituasjon");});
test("kriseåra -> kriseår", function() {deepEqual( Stem("kriseåra"), "kriseår");});
test("kristeleg -> krist", function() {deepEqual( Stem("kristeleg"), "krist");});
test("kristelig -> krist", function() {deepEqual( Stem("kristelig"), "krist");});
test("kristensen -> kristens", function() {deepEqual( Stem("kristensen"), "kristens");});
test("kristiansand -> kristiansand", function() {deepEqual( Stem("kristiansand"), "kristiansand");});
test("kristiansund -> kristiansund", function() {deepEqual( Stem("kristiansund"), "kristiansund");});
test("kristin -> kristin", function() {deepEqual( Stem("kristin"), "kristin");});
test("kriteriene -> kriteri", function() {deepEqual( Stem("kriteriene"), "kriteri");});
test("kriterier -> kriteri", function() {deepEqual( Stem("kriterier"), "kriteri");});
test("kriteriet -> kriteri", function() {deepEqual( Stem("kriteriet"), "kriteri");});
test("kriterium -> kriterium", function() {deepEqual( Stem("kriterium"), "kriterium");});
test("kritikk -> kritikk", function() {deepEqual( Stem("kritikk"), "kritikk");});
test("kritiserast -> kritiser", function() {deepEqual( Stem("kritiserast"), "kritiser");});
test("kritisert -> kritiser", function() {deepEqual( Stem("kritisert"), "kritiser");});
test("kritisk -> kritisk", function() {deepEqual( Stem("kritisk"), "kritisk");});
test("kritiske -> kritisk", function() {deepEqual( Stem("kritiske"), "kritisk");});
test("kroer -> kroer", function() {deepEqual( Stem("kroer"), "kroer");});
test("krok -> krok", function() {deepEqual( Stem("krok"), "krok");});
test("kroken -> krok", function() {deepEqual( Stem("kroken"), "krok");});
test("kroker -> krok", function() {deepEqual( Stem("kroker"), "krok");});
test("krokrygget -> krokrygg", function() {deepEqual( Stem("krokrygget"), "krokrygg");});
test("kronebeløp -> kronebeløp", function() {deepEqual( Stem("kronebeløp"), "kronebeløp");});
test("kronen -> kron", function() {deepEqual( Stem("kronen"), "kron");});
test("kroner -> kron", function() {deepEqual( Stem("kroner"), "kron");});
test("kroneverdien -> kroneverdi", function() {deepEqual( Stem("kroneverdien"), "kroneverdi");});
test("krongle -> krongl", function() {deepEqual( Stem("krongle"), "krongl");});
test("kropp -> kropp", function() {deepEqual( Stem("kropp"), "kropp");});
test("kroppen -> kropp", function() {deepEqual( Stem("kroppen"), "kropp");});
test("kroppene -> kropp", function() {deepEqual( Stem("kroppene"), "kropp");});
test("kroppsløse -> kroppsløs", function() {deepEqual( Stem("kroppsløse"), "kroppsløs");});
test("krummer -> krumm", function() {deepEqual( Stem("krummer"), "krumm");});
test("krus -> krus", function() {deepEqual( Stem("krus"), "krus");});
test("kruset -> krus", function() {deepEqual( Stem("kruset"), "krus");});
test("kryp -> kryp", function() {deepEqual( Stem("kryp"), "kryp");});
test("krype -> kryp", function() {deepEqual( Stem("krype"), "kryp");});
test("kryper -> kryp", function() {deepEqual( Stem("kryper"), "kryp");});
test("kryr -> kryr", function() {deepEqual( Stem("kryr"), "kryr");});
test("kryss -> kryss", function() {deepEqual( Stem("kryss"), "kryss");});
test("kryssende -> kryss", function() {deepEqual( Stem("kryssende"), "kryss");});
test("krysser -> kryss", function() {deepEqual( Stem("krysser"), "kryss");});
test("krysset -> kryss", function() {deepEqual( Stem("krysset"), "kryss");});
test("kryssområder -> kryssområd", function() {deepEqual( Stem("kryssområder"), "kryssområd");});
test("kråke -> kråk", function() {deepEqual( Stem("kråke"), "kråk");});
test("kråkes -> kråk", function() {deepEqual( Stem("kråkes"), "kråk");});
test("krøker -> krøk", function() {deepEqual( Stem("krøker"), "krøk");});
test("krøp -> krøp", function() {deepEqual( Stem("krøp"), "krøp");});
test("ku -> ku", function() {deepEqual( Stem("ku"), "ku");});
test("kua -> kua", function() {deepEqual( Stem("kua"), "kua");});
test("kuer -> kuer", function() {deepEqual( Stem("kuer"), "kuer");});
test("kulde -> kuld", function() {deepEqual( Stem("kulde"), "kuld");});
test("kulden -> kuld", function() {deepEqual( Stem("kulden"), "kuld");});
test("kull -> kull", function() {deepEqual( Stem("kull"), "kull");});
test("kulltangenbroen -> kulltangenbro", function() {deepEqual( Stem("kulltangenbroen"), "kulltangenbro");});
test("kullterminal -> kullterminal", function() {deepEqual( Stem("kullterminal"), "kullterminal");});
test("kulturelle -> kulturell", function() {deepEqual( Stem("kulturelle"), "kulturell");});
test("kulturlandskap -> kulturlandskap", function() {deepEqual( Stem("kulturlandskap"), "kulturlandskap");});
test("kulturminner -> kulturminn", function() {deepEqual( Stem("kulturminner"), "kulturminn");});
test("kun -> kun", function() {deepEqual( Stem("kun"), "kun");});
test("kundane -> kund", function() {deepEqual( Stem("kundane"), "kund");});
test("kundar -> kund", function() {deepEqual( Stem("kundar"), "kund");});
test("kunde -> kund", function() {deepEqual( Stem("kunde"), "kund");});
test("kundeforhold -> kundeforhold", function() {deepEqual( Stem("kundeforhold"), "kundeforhold");});
test("kundegrupper -> kundegrupp", function() {deepEqual( Stem("kundegrupper"), "kundegrupp");});
test("kundehensyn -> kundehensyn", function() {deepEqual( Stem("kundehensyn"), "kundehensyn");});
test("kundemarkedet -> kundemarked", function() {deepEqual( Stem("kundemarkedet"), "kundemarked");});
test("kunden -> kund", function() {deepEqual( Stem("kunden"), "kund");});
test("kundene -> kund", function() {deepEqual( Stem("kundene"), "kund");});
test("kundens -> kund", function() {deepEqual( Stem("kundens"), "kund");});
test("kunder -> kund", function() {deepEqual( Stem("kunder"), "kund");});
test("kune -> kun", function() {deepEqual( Stem("kune"), "kun");});
test("kunna -> kunn", function() {deepEqual( Stem("kunna"), "kunn");});
test("kunne -> kunn", function() {deepEqual( Stem("kunne"), "kunn");});
test("kunnet -> kunn", function() {deepEqual( Stem("kunnet"), "kunn");});
test("kunngjerast -> kunngjer", function() {deepEqual( Stem("kunngjerast"), "kunngjer");});
test("kunngjere -> kunngjer", function() {deepEqual( Stem("kunngjere"), "kunngjer");});
test("kunngjering -> kunngjering", function() {deepEqual( Stem("kunngjering"), "kunngjering");});
test("kunngjeringa -> kunngjering", function() {deepEqual( Stem("kunngjeringa"), "kunngjering");});
test("kunngjeringar -> kunngjering", function() {deepEqual( Stem("kunngjeringar"), "kunngjering");});
test("kunngjeringsmåten -> kunngjeringsmåt", function() {deepEqual( Stem("kunngjeringsmåten"), "kunngjeringsmåt");});
test("kunnskap -> kunnskap", function() {deepEqual( Stem("kunnskap"), "kunnskap");});
test("kunnskapar -> kunnskap", function() {deepEqual( Stem("kunnskapar"), "kunnskap");});
test("kunnskaper -> kunnskap", function() {deepEqual( Stem("kunnskaper"), "kunnskap");});
test("kunnskapsoppbygging -> kunnskapsoppbygging", function() {deepEqual( Stem("kunnskapsoppbygging"), "kunnskapsoppbygging");});
test("kunnskapstørst -> kunnskapstørst", function() {deepEqual( Stem("kunnskapstørst"), "kunnskapstørst");});
test("kunst -> kunst", function() {deepEqual( Stem("kunst"), "kunst");});
test("kunsten -> kunst", function() {deepEqual( Stem("kunsten"), "kunst");});
test("kunster -> kunst", function() {deepEqual( Stem("kunster"), "kunst");});
test("kuppel -> kuppel", function() {deepEqual( Stem("kuppel"), "kuppel");});
test("kurant -> kurant", function() {deepEqual( Stem("kurant"), "kurant");});
test("kurs -> kur", function() {deepEqual( Stem("kurs"), "kur");});
test("kursen -> kurs", function() {deepEqual( Stem("kursen"), "kurs");});
test("kursivering -> kursivering", function() {deepEqual( Stem("kursivering"), "kursivering");});
test("kursreguleringsfond -> kursreguleringsfond", function() {deepEqual( Stem("kursreguleringsfond"), "kursreguleringsfond");});
test("kurvatur -> kurvatur", function() {deepEqual( Stem("kurvatur"), "kurvatur");});
test("kurve -> kurv", function() {deepEqual( Stem("kurve"), "kurv");});
test("kutter -> kutt", function() {deepEqual( Stem("kutter"), "kutt");});
test("kuttes -> kutt", function() {deepEqual( Stem("kuttes"), "kutt");});
test("kva -> kva", function() {deepEqual( Stem("kva"), "kva");});
test("kvalifikasjonar -> kvalifikasjon", function() {deepEqual( Stem("kvalifikasjonar"), "kvalifikasjon");});
test("kvalifisert -> kvalifiser", function() {deepEqual( Stem("kvalifisert"), "kvalifiser");});
test("kvalifiserte -> kvalifiser", function() {deepEqual( Stem("kvalifiserte"), "kvalifiser");});
test("kvalitativ -> kvalitativ", function() {deepEqual( Stem("kvalitativ"), "kvalitativ");});
test("kvalitativt -> kvalitativ", function() {deepEqual( Stem("kvalitativt"), "kvalitativ");});
test("kvalitet -> kvalit", function() {deepEqual( Stem("kvalitet"), "kvalit");});
test("kvalitetar -> kvalitet", function() {deepEqual( Stem("kvalitetar"), "kvalitet");});
test("kvaliteten -> kvalitet", function() {deepEqual( Stem("kvaliteten"), "kvalitet");});
test("kvalitetsaspektet -> kvalitetsaspekt", function() {deepEqual( Stem("kvalitetsaspektet"), "kvalitetsaspekt");});
test("kvalitetskontroll -> kvalitetskontroll", function() {deepEqual( Stem("kvalitetskontroll"), "kvalitetskontroll");});
test("kvalitetssikring -> kvalitetssikring", function() {deepEqual( Stem("kvalitetssikring"), "kvalitetssikring");});
test("kvalm -> kvalm", function() {deepEqual( Stem("kvalm"), "kvalm");});
test("kvalt -> kvalt", function() {deepEqual( Stem("kvalt"), "kvalt");});
test("kvanta -> kvant", function() {deepEqual( Stem("kvanta"), "kvant");});
test("kvar -> kvar", function() {deepEqual( Stem("kvar"), "kvar");});
test("kvarande -> kvar", function() {deepEqual( Stem("kvarande"), "kvar");});
test("kvarandre -> kvarandr", function() {deepEqual( Stem("kvarandre"), "kvarandr");});
test("kvardagane -> kvardag", function() {deepEqual( Stem("kvardagane"), "kvardag");});
test("kvardagar -> kvardag", function() {deepEqual( Stem("kvardagar"), "kvardag");});
test("kvart -> kvart", function() {deepEqual( Stem("kvart"), "kvart");});
test("kvartalsvis -> kvartalsvis", function() {deepEqual( Stem("kvartalsvis"), "kvartalsvis");});
test("kvaser -> kvas", function() {deepEqual( Stem("kvaser"), "kvas");});
test("kvasers -> kvas", function() {deepEqual( Stem("kvasers"), "kvas");});
test("kvasse -> kvass", function() {deepEqual( Stem("kvasse"), "kvass");});
test("kveder -> kved", function() {deepEqual( Stem("kveder"), "kved");});
test("kveile -> kveil", function() {deepEqual( Stem("kveile"), "kveil");});
test("kveiler -> kveil", function() {deepEqual( Stem("kveiler"), "kveil");});
test("kveld -> kveld", function() {deepEqual( Stem("kveld"), "kveld");});
test("kvelden -> kveld", function() {deepEqual( Stem("kvelden"), "kveld");});
test("kvelds -> kveld", function() {deepEqual( Stem("kvelds"), "kveld");});
test("kveldsmat -> kveldsmat", function() {deepEqual( Stem("kveldsmat"), "kveldsmat");});
test("kveldsmaten -> kveldsmat", function() {deepEqual( Stem("kveldsmaten"), "kveldsmat");});
test("kveles -> kvel", function() {deepEqual( Stem("kveles"), "kvel");});
test("kven -> kven", function() {deepEqual( Stem("kven"), "kven");});
test("kverke -> kverk", function() {deepEqual( Stem("kverke"), "kverk");});
test("kvern -> kvern", function() {deepEqual( Stem("kvern"), "kvern");});
test("kverna -> kvern", function() {deepEqual( Stem("kverna"), "kvern");});
test("kvernstein -> kvernstein", function() {deepEqual( Stem("kvernstein"), "kvernstein");});
test("kvernsteinene -> kvernstein", function() {deepEqual( Stem("kvernsteinene"), "kvernstein");});
test("kvier -> kvier", function() {deepEqual( Stem("kvier"), "kvier");});
test("kvikk -> kvikk", function() {deepEqual( Stem("kvikk"), "kvikk");});
test("kvikt -> kvikt", function() {deepEqual( Stem("kvikt"), "kvikt");});
test("kvile -> kvil", function() {deepEqual( Stem("kvile"), "kvil");});
test("kviler -> kvil", function() {deepEqual( Stem("kviler"), "kvil");});
test("kvinne -> kvinn", function() {deepEqual( Stem("kvinne"), "kvinn");});
test("kvinneklær -> kvinneklær", function() {deepEqual( Stem("kvinneklær"), "kvinneklær");});
test("kvinnelig -> kvinn", function() {deepEqual( Stem("kvinnelig"), "kvinn");});
test("kvinnelige -> kvinn", function() {deepEqual( Stem("kvinnelige"), "kvinn");});
test("kvinnen -> kvinn", function() {deepEqual( Stem("kvinnen"), "kvinn");});
test("kvinnene -> kvinn", function() {deepEqual( Stem("kvinnene"), "kvinn");});
test("kvinnens -> kvinn", function() {deepEqual( Stem("kvinnens"), "kvinn");});
test("kvinner -> kvinn", function() {deepEqual( Stem("kvinner"), "kvinn");});
test("kvinners -> kvinn", function() {deepEqual( Stem("kvinners"), "kvinn");});
test("kvinnfolk -> kvinnfolk", function() {deepEqual( Stem("kvinnfolk"), "kvinnfolk");});
test("kvist -> kvist", function() {deepEqual( Stem("kvist"), "kvist");});
test("kvisten -> kvist", function() {deepEqual( Stem("kvisten"), "kvist");});
test("kvister -> kvist", function() {deepEqual( Stem("kvister"), "kvist");});
test("kvitrer -> kvitr", function() {deepEqual( Stem("kvitrer"), "kvitr");});
test("kvitt -> kvitt", function() {deepEqual( Stem("kvitt"), "kvitt");});
test("kvitta -> kvitt", function() {deepEqual( Stem("kvitta"), "kvitt");});
test("kvittar -> kvitt", function() {deepEqual( Stem("kvittar"), "kvitt");});
test("kvitte -> kvitt", function() {deepEqual( Stem("kvitte"), "kvitt");});
test("kvitteringer -> kvittering", function() {deepEqual( Stem("kvitteringer"), "kvittering");});
test("kvm -> kvm", function() {deepEqual( Stem("kvm"), "kvm");});
test("kvoten -> kvot", function() {deepEqual( Stem("kvoten"), "kvot");});
test("kyllingene -> kylling", function() {deepEqual( Stem("kyllingene"), "kylling");});
test("kyllinger -> kylling", function() {deepEqual( Stem("kyllinger"), "kylling");});
test("kyndig -> kynd", function() {deepEqual( Stem("kyndig"), "kynd");});
test("kyndige -> kynd", function() {deepEqual( Stem("kyndige"), "kynd");});
test("kyr -> kyr", function() {deepEqual( Stem("kyr"), "kyr");});
test("kyrkje -> kyrkj", function() {deepEqual( Stem("kyrkje"), "kyrkj");});
test("kyss -> kyss", function() {deepEqual( Stem("kyss"), "kyss");});
test("kysse -> kyss", function() {deepEqual( Stem("kysse"), "kyss");});
test("kysser -> kyss", function() {deepEqual( Stem("kysser"), "kyss");});
test("kyst -> kyst", function() {deepEqual( Stem("kyst"), "kyst");});
test("kystdirektoratet -> kystdirektorat", function() {deepEqual( Stem("kystdirektoratet"), "kystdirektorat");});
test("kysten -> kyst", function() {deepEqual( Stem("kysten"), "kyst");});
test("kystkommuner -> kystkommun", function() {deepEqual( Stem("kystkommuner"), "kystkommun");});
test("kystsonen -> kystson", function() {deepEqual( Stem("kystsonen"), "kystson");});
test("kystsoneplan -> kystsoneplan", function() {deepEqual( Stem("kystsoneplan"), "kystsoneplan");});
test("kystterminal -> kystterminal", function() {deepEqual( Stem("kystterminal"), "kystterminal");});
test("kåre -> kår", function() {deepEqual( Stem("kåre"), "kår");});
test("kåt -> kåt", function() {deepEqual( Stem("kåt"), "kåt");});
test("kåte -> kåt", function() {deepEqual( Stem("kåte"), "kåt");});
test("kåtere -> kåter", function() {deepEqual( Stem("kåtere"), "kåter");});
test("kåteste -> kåtest", function() {deepEqual( Stem("kåteste"), "kåtest");});
test("kø -> kø", function() {deepEqual( Stem("kø"), "kø");});
test("københavn -> københavn", function() {deepEqual( Stem("københavn"), "københavn");});
test("køen -> køen", function() {deepEqual( Stem("køen"), "køen");});
test("køer -> køer", function() {deepEqual( Stem("køer"), "køer");});
test("køsystem -> køsystem", function() {deepEqual( Stem("køsystem"), "køsystem");});
test("l -> l", function() {deepEqual( Stem("l"), "l");});
test("la -> la", function() {deepEqual( Stem("la"), "la");});
test("labbene -> labb", function() {deepEqual( Stem("labbene"), "labb");});
test("laboratorie -> laboratori", function() {deepEqual( Stem("laboratorie"), "laboratori");});
test("lag -> lag", function() {deepEqual( Stem("lag"), "lag");});
test("laga -> lag", function() {deepEqual( Stem("laga"), "lag");});
test("lagar -> lag", function() {deepEqual( Stem("lagar"), "lag");});
test("lagast -> lag", function() {deepEqual( Stem("lagast"), "lag");});
test("lagd -> lagd", function() {deepEqual( Stem("lagd"), "lagd");});
test("lagde -> lagd", function() {deepEqual( Stem("lagde"), "lagd");});
test("lage -> lag", function() {deepEqual( Stem("lage"), "lag");});
test("lagen -> lag", function() {deepEqual( Stem("lagen"), "lag");});
test("lagene -> lag", function() {deepEqual( Stem("lagene"), "lag");});
test("lager -> lag", function() {deepEqual( Stem("lager"), "lag");});
test("lagerbedrifter -> lagerbedrift", function() {deepEqual( Stem("lagerbedrifter"), "lagerbedrift");});
test("lagerbygninger -> lagerbygning", function() {deepEqual( Stem("lagerbygninger"), "lagerbygning");});
test("lagerfunksjoner -> lagerfunksjon", function() {deepEqual( Stem("lagerfunksjoner"), "lagerfunksjon");});
test("lagerhold -> lagerhold", function() {deepEqual( Stem("lagerhold"), "lagerhold");});
test("lagerholdsfunksjoner -> lagerholdsfunksjon", function() {deepEqual( Stem("lagerholdsfunksjoner"), "lagerholdsfunksjon");});
test("lagersted -> lagersted", function() {deepEqual( Stem("lagersted"), "lagersted");});
test("lagervirksomheter -> lagervirksom", function() {deepEqual( Stem("lagervirksomheter"), "lagervirksom");});
test("lages -> lag", function() {deepEqual( Stem("lages"), "lag");});
test("laget -> lag", function() {deepEqual( Stem("laget"), "lag");});
test("lagetkrav -> lagetkrav", function() {deepEqual( Stem("lagetkrav"), "lagetkrav");});
test("lagets -> lag", function() {deepEqual( Stem("lagets"), "lag");});
test("lagmannsrett -> lagmannsrett", function() {deepEqual( Stem("lagmannsrett"), "lagmannsrett");});
test("lagmannsretten -> lagmannsrett", function() {deepEqual( Stem("lagmannsretten"), "lagmannsrett");});
test("lagre -> lagr", function() {deepEqual( Stem("lagre"), "lagr");});
test("lagrene -> lagr", function() {deepEqual( Stem("lagrene"), "lagr");});
test("lagring -> lagring", function() {deepEqual( Stem("lagring"), "lagring");});
test("lagsdrifta -> lagsdrift", function() {deepEqual( Stem("lagsdrifta"), "lagsdrift");});
test("lagsforholdet -> lagsforhold", function() {deepEqual( Stem("lagsforholdet"), "lagsforhold");});
test("lagsføremålet -> lagsføremål", function() {deepEqual( Stem("lagsføremålet"), "lagsføremål");});
test("lagskontoret -> lagskontor", function() {deepEqual( Stem("lagskontoret"), "lagskontor");});
test("lagsmidlane -> lagsmidl", function() {deepEqual( Stem("lagsmidlane"), "lagsmidl");});
test("lagsorgan -> lagsorgan", function() {deepEqual( Stem("lagsorgan"), "lagsorgan");});
test("lagsorgana -> lagsorgan", function() {deepEqual( Stem("lagsorgana"), "lagsorgan");});
test("lagsskyldnadene -> lagsskyldnad", function() {deepEqual( Stem("lagsskyldnadene"), "lagsskyldnad");});
test("lagt -> lagt", function() {deepEqual( Stem("lagt"), "lagt");});
test("lagtinget -> lagting", function() {deepEqual( Stem("lagtinget"), "lagting");});
test("laks -> laks", function() {deepEqual( Stem("laks"), "laks");});
test("laksens -> laks", function() {deepEqual( Stem("laksens"), "laks");});
test("laksestammen -> laksestamm", function() {deepEqual( Stem("laksestammen"), "laksestamm");});
test("lam -> lam", function() {deepEqual( Stem("lam"), "lam");});
test("lammekjøtt -> lammekjøtt", function() {deepEqual( Stem("lammekjøtt"), "lammekjøtt");});
test("lammeskinnslue -> lammeskinnslu", function() {deepEqual( Stem("lammeskinnslue"), "lammeskinnslu");});
test("lampe -> lamp", function() {deepEqual( Stem("lampe"), "lamp");});
test("lan -> lan", function() {deepEqual( Stem("lan"), "lan");});
test("land -> land", function() {deepEqual( Stem("land"), "land");});
test("landa -> land", function() {deepEqual( Stem("landa"), "land");});
test("landarealer -> landareal", function() {deepEqual( Stem("landarealer"), "landareal");});
test("landarealet -> landareal", function() {deepEqual( Stem("landarealet"), "landareal");});
test("landbasert -> landbaser", function() {deepEqual( Stem("landbasert"), "landbaser");});
test("landbaserte -> landbaser", function() {deepEqual( Stem("landbaserte"), "landbaser");});
test("landbruk -> landbruk", function() {deepEqual( Stem("landbruk"), "landbruk");});
test("landbruket -> landbruk", function() {deepEqual( Stem("landbruket"), "landbruk");});
test("landbruksavtalar -> landbruksavtal", function() {deepEqual( Stem("landbruksavtalar"), "landbruksavtal");});
test("landbrukssamvirket -> landbrukssamvirk", function() {deepEqual( Stem("landbrukssamvirket"), "landbrukssamvirk");});
test("landbrukssamvirkets -> landbrukssamvirk", function() {deepEqual( Stem("landbrukssamvirkets"), "landbrukssamvirk");});
test("landdistribusjon -> landdistribusjon", function() {deepEqual( Stem("landdistribusjon"), "landdistribusjon");});
test("lande -> land", function() {deepEqual( Stem("lande"), "land");});
test("landegrensene -> landegrens", function() {deepEqual( Stem("landegrensene"), "landegrens");});
test("landene -> land", function() {deepEqual( Stem("landene"), "land");});
test("lander -> land", function() {deepEqual( Stem("lander"), "land");});
test("landet -> land", function() {deepEqual( Stem("landet"), "land");});
test("landets -> land", function() {deepEqual( Stem("landets"), "land");});
test("landeveg -> landeveg", function() {deepEqual( Stem("landeveg"), "landeveg");});
test("landfast -> landf", function() {deepEqual( Stem("landfast"), "landf");});
test("landfordeling -> landfordeling", function() {deepEqual( Stem("landfordeling"), "landfordeling");});
test("landområde -> landområd", function() {deepEqual( Stem("landområde"), "landområd");});
test("lands -> land", function() {deepEqual( Stem("lands"), "land");});
test("landsbygda -> landsbygd", function() {deepEqual( Stem("landsbygda"), "landsbygd");});
test("landsdekkjande -> landsdekkj", function() {deepEqual( Stem("landsdekkjande"), "landsdekkj");});
test("landsdelene -> landsdel", function() {deepEqual( Stem("landsdelene"), "landsdel");});
test("landsdeler -> landsdel", function() {deepEqual( Stem("landsdeler"), "landsdel");});
test("landsforbund -> landsforbund", function() {deepEqual( Stem("landsforbund"), "landsforbund");});
test("landsforening -> landsforening", function() {deepEqual( Stem("landsforening"), "landsforening");});
test("landsgjennomsnittet -> landsgjennomsnitt", function() {deepEqual( Stem("landsgjennomsnittet"), "landsgjennomsnitt");});
test("landsiden -> landsid", function() {deepEqual( Stem("landsiden"), "landsid");});
test("landskapet -> landskap", function() {deepEqual( Stem("landskapet"), "landskap");});
test("landskillet -> landskill", function() {deepEqual( Stem("landskillet"), "landskill");});
test("landsorganisasjonen -> landsorganisasjon", function() {deepEqual( Stem("landsorganisasjonen"), "landsorganisasjon");});
test("landspensjonskasse -> landspensjonskass", function() {deepEqual( Stem("landspensjonskasse"), "landspensjonskass");});
test("landssamanslutning -> landssamanslutning", function() {deepEqual( Stem("landssamanslutning"), "landssamanslutning");});
test("landssamband -> landssamband", function() {deepEqual( Stem("landssamband"), "landssamband");});
test("landsting -> landsting", function() {deepEqual( Stem("landsting"), "landsting");});
test("landstotalen -> landstotal", function() {deepEqual( Stem("landstotalen"), "landstotal");});
test("landtransport -> landtransport", function() {deepEqual( Stem("landtransport"), "landtransport");});
test("landtransportdistanse -> landtransportdistans", function() {deepEqual( Stem("landtransportdistanse"), "landtransportdistans");});
test("landtransporten -> landtransport", function() {deepEqual( Stem("landtransporten"), "landtransport");});
test("landvegs -> landveg", function() {deepEqual( Stem("landvegs"), "landveg");});
test("landverts -> landvert", function() {deepEqual( Stem("landverts"), "landvert");});
test("lang -> lang", function() {deepEqual( Stem("lang"), "lang");});
test("langbent -> langbent", function() {deepEqual( Stem("langbent"), "langbent");});
test("langbordene -> langbord", function() {deepEqual( Stem("langbordene"), "langbord");});
test("langbordet -> langbord", function() {deepEqual( Stem("langbordet"), "langbord");});
test("lange -> lang", function() {deepEqual( Stem("lange"), "lang");});
test("langesund -> langesund", function() {deepEqual( Stem("langesund"), "langesund");});
test("langesundbukta -> langesundbukt", function() {deepEqual( Stem("langesundbukta"), "langesundbukt");});
test("langesundsfjorden -> langesundsfjord", function() {deepEqual( Stem("langesundsfjorden"), "langesundsfjord");});
test("langesundterminalen -> langesundterminal", function() {deepEqual( Stem("langesundterminalen"), "langesundterminal");});
test("langobarder -> langobard", function() {deepEqual( Stem("langobarder"), "langobard");});
test("langs -> lang", function() {deepEqual( Stem("langs"), "lang");});
test("langsetter -> langsett", function() {deepEqual( Stem("langsetter"), "langsett");});
test("langsiktig -> langsikt", function() {deepEqual( Stem("langsiktig"), "langsikt");});
test("langsiktige -> langsikt", function() {deepEqual( Stem("langsiktige"), "langsikt");});
test("langskjegger -> langskjegg", function() {deepEqual( Stem("langskjegger"), "langskjegg");});
test("langsomme -> langsomm", function() {deepEqual( Stem("langsomme"), "langsomm");});
test("langsommere -> langsommer", function() {deepEqual( Stem("langsommere"), "langsommer");});
test("langsomste -> langsomst", function() {deepEqual( Stem("langsomste"), "langsomst");});
test("langsomt -> langsomt", function() {deepEqual( Stem("langsomt"), "langsomt");});
test("langt -> langt", function() {deepEqual( Stem("langt"), "langt");});
test("langtidsplaner -> langtidsplan", function() {deepEqual( Stem("langtidsplaner"), "langtidsplan");});
test("langtidsprogram -> langtidsprogram", function() {deepEqual( Stem("langtidsprogram"), "langtidsprogram");});
test("langtidsprogramma -> langtidsprogramm", function() {deepEqual( Stem("langtidsprogramma"), "langtidsprogramm");});
test("langtidsprogrammet -> langtidsprogramm", function() {deepEqual( Stem("langtidsprogrammet"), "langtidsprogramm");});
test("langtidsprograms -> langtidsprogram", function() {deepEqual( Stem("langtidsprograms"), "langtidsprogram");});
test("langtur -> langtur", function() {deepEqual( Stem("langtur"), "langtur");});
test("langvarig -> langvar", function() {deepEqual( Stem("langvarig"), "langvar");});
test("langvarige -> langvar", function() {deepEqual( Stem("langvarige"), "langvar");});
test("langveggen -> langvegg", function() {deepEqual( Stem("langveggen"), "langvegg");});
test("langveggene -> langvegg", function() {deepEqual( Stem("langveggene"), "langvegg");});
test("lansert -> lanser", function() {deepEqual( Stem("lansert"), "lanser");});
test("lanterne -> lantern", function() {deepEqual( Stem("lanterne"), "lantern");});
test("lapper -> lapp", function() {deepEqual( Stem("lapper"), "lapp");});
test("lappeteppe -> lappetepp", function() {deepEqual( Stem("lappeteppe"), "lappetepp");});
test("lar -> lar", function() {deepEqual( Stem("lar"), "lar");});
test("larm -> larm", function() {deepEqual( Stem("larm"), "larm");});
test("larmen -> larm", function() {deepEqual( Stem("larmen"), "larm");});
test("larvik -> larvik", function() {deepEqual( Stem("larvik"), "larvik");});
test("larviksfjorden -> larviksfjord", function() {deepEqual( Stem("larviksfjorden"), "larviksfjord");});
test("lass -> lass", function() {deepEqual( Stem("lass"), "lass");});
test("lassevis -> lassevis", function() {deepEqual( Stem("lassevis"), "lassevis");});
test("last -> last", function() {deepEqual( Stem("last"), "last");});
test("lastbærer -> lastbær", function() {deepEqual( Stem("lastbærer"), "lastbær");});
test("laste -> last", function() {deepEqual( Stem("laste"), "last");});
test("lastebil -> lastebil", function() {deepEqual( Stem("lastebil"), "lastebil");});
test("lastebilen -> lastebil", function() {deepEqual( Stem("lastebilen"), "lastebil");});
test("lastebiler -> lastebil", function() {deepEqual( Stem("lastebiler"), "lastebil");});
test("lastebiltransport -> lastebiltransport", function() {deepEqual( Stem("lastebiltransport"), "lastebiltransport");});
test("lastebærer -> lastebær", function() {deepEqual( Stem("lastebærer"), "lastebær");});
test("lastebærere -> lastebærer", function() {deepEqual( Stem("lastebærere"), "lastebærer");});
test("lasteeiere -> lasteeier", function() {deepEqual( Stem("lasteeiere"), "lasteeier");});
test("lasteevne -> lasteevn", function() {deepEqual( Stem("lasteevne"), "lasteevn");});
test("lasten -> last", function() {deepEqual( Stem("lasten"), "last");});
test("lastens -> last", function() {deepEqual( Stem("lastens"), "last");});
test("laster -> last", function() {deepEqual( Stem("laster"), "last");});
test("lasterommet -> lasteromm", function() {deepEqual( Stem("lasterommet"), "lasteromm");});
test("lasteskip -> lasteskip", function() {deepEqual( Stem("lasteskip"), "lasteskip");});
test("lastesystemer -> lastesystem", function() {deepEqual( Stem("lastesystemer"), "lastesystem");});
test("lastet -> last", function() {deepEqual( Stem("lastet"), "last");});
test("lasteutstyr -> lasteutstyr", function() {deepEqual( Stem("lasteutstyr"), "lasteutstyr");});
test("lastevekt -> lastevekt", function() {deepEqual( Stem("lastevekt"), "lastevekt");});
test("lastevolum -> lastevolum", function() {deepEqual( Stem("lastevolum"), "lastevolum");});
test("lasting -> lasting", function() {deepEqual( Stem("lasting"), "lasting");});
test("lat -> lat", function() {deepEqual( Stem("lat"), "lat");});
test("late -> lat", function() {deepEqual( Stem("late"), "lat");});
test("later -> lat", function() {deepEqual( Stem("later"), "lat");});
test("latt -> latt", function() {deepEqual( Stem("latt"), "latt");});
test("latter -> latt", function() {deepEqual( Stem("latter"), "latt");});
test("latteren -> latter", function() {deepEqual( Stem("latteren"), "latter");});
test("laurdag -> laurdag", function() {deepEqual( Stem("laurdag"), "laurdag");});
test("laurdagar -> laurdag", function() {deepEqual( Stem("laurdagar"), "laurdag");});
test("lausøyre -> lausøyr", function() {deepEqual( Stem("lausøyre"), "lausøyr");});
test("lausøyreregisteret -> lausøyreregister", function() {deepEqual( Stem("lausøyreregisteret"), "lausøyreregister");});
test("lausøyreting -> lausøyreting", function() {deepEqual( Stem("lausøyreting"), "lausøyreting");});
test("lauvøy -> lauvøy", function() {deepEqual( Stem("lauvøy"), "lauvøy");});
test("lauvøysson -> lauvøysson", function() {deepEqual( Stem("lauvøysson"), "lauvøysson");});
test("lav -> lav", function() {deepEqual( Stem("lav"), "lav");});
test("lavavkastningsperiode -> lavavkastningsperiod", function() {deepEqual( Stem("lavavkastningsperiode"), "lavavkastningsperiod");});
test("lave -> lav", function() {deepEqual( Stem("lave"), "lav");});
test("lavere -> laver", function() {deepEqual( Stem("lavere"), "laver");});
test("lavest -> lavest", function() {deepEqual( Stem("lavest"), "lavest");});
test("laveste -> lavest", function() {deepEqual( Stem("laveste"), "lavest");});
test("lavkostnadsland -> lavkostnadsland", function() {deepEqual( Stem("lavkostnadsland"), "lavkostnadsland");});
test("lavori -> lavori", function() {deepEqual( Stem("lavori"), "lavori");});
test("lavoro -> lavoro", function() {deepEqual( Stem("lavoro"), "lavoro");});
test("lavt -> lavt", function() {deepEqual( Stem("lavt"), "lavt");});
test("lavtlønte -> lavtlønt", function() {deepEqual( Stem("lavtlønte"), "lavtlønt");});
test("le -> le", function() {deepEqual( Stem("le"), "le");});
test("leca -> lec", function() {deepEqual( Stem("leca"), "lec");});
test("ledd -> ledd", function() {deepEqual( Stem("ledd"), "ledd");});
test("leddet -> ledd", function() {deepEqual( Stem("leddet"), "ledd");});
test("ledds -> ledd", function() {deepEqual( Stem("ledds"), "ledd");});
test("lede -> led", function() {deepEqual( Stem("lede"), "led");});
test("ledelse -> led", function() {deepEqual( Stem("ledelse"), "led");});
test("ledelsen -> led", function() {deepEqual( Stem("ledelsen"), "led");});
test("leden -> led", function() {deepEqual( Stem("leden"), "led");});
test("ledende -> led", function() {deepEqual( Stem("ledende"), "led");});
test("ledene -> led", function() {deepEqual( Stem("ledene"), "led");});
test("leder -> led", function() {deepEqual( Stem("leder"), "led");});
test("ledervervet -> lederverv", function() {deepEqual( Stem("ledervervet"), "lederverv");});
test("ledes -> led", function() {deepEqual( Stem("ledes"), "led");});
test("ledetid -> ledetid", function() {deepEqual( Stem("ledetid"), "ledetid");});
test("ledetiden -> ledetid", function() {deepEqual( Stem("ledetiden"), "ledetid");});
test("ledig -> led", function() {deepEqual( Stem("ledig"), "led");});
test("ledige -> led", function() {deepEqual( Stem("ledige"), "led");});
test("leet -> leet", function() {deepEqual( Stem("leet"), "leet");});
test("lega -> leg", function() {deepEqual( Stem("lega"), "leg");});
test("legacoop -> legacoop", function() {deepEqual( Stem("legacoop"), "legacoop");});
test("legaldefinisjon -> legaldefinisjon", function() {deepEqual( Stem("legaldefinisjon"), "legaldefinisjon");});
test("legalpant -> legalpant", function() {deepEqual( Stem("legalpant"), "legalpant");});
test("legalpanterett -> legalpanterett", function() {deepEqual( Stem("legalpanterett"), "legalpanterett");});
test("legalpanteretten -> legalpanterett", function() {deepEqual( Stem("legalpanteretten"), "legalpanterett");});
test("lege -> leg", function() {deepEqual( Stem("lege"), "leg");});
test("legedrikk -> legedrikk", function() {deepEqual( Stem("legedrikk"), "legedrikk");});
test("legekunst -> legekunst", function() {deepEqual( Stem("legekunst"), "legekunst");});
test("legende -> leg", function() {deepEqual( Stem("legende"), "leg");});
test("legesenter -> legesent", function() {deepEqual( Stem("legesenter"), "legesent");});
test("legg -> legg", function() {deepEqual( Stem("legg"), "legg");});
test("legge -> legg", function() {deepEqual( Stem("legge"), "legg");});
test("legger -> legg", function() {deepEqual( Stem("legger"), "legg");});
test("legges -> legg", function() {deepEqual( Stem("legges"), "legg");});
test("leggjast -> leggj", function() {deepEqual( Stem("leggjast"), "leggj");});
test("leggje -> leggj", function() {deepEqual( Stem("leggje"), "leggj");});
test("legitimiteten -> legitimitet", function() {deepEqual( Stem("legitimiteten"), "legitimitet");});
test("legning -> legning", function() {deepEqual( Stem("legning"), "legning");});
test("lei -> lei", function() {deepEqual( Stem("lei"), "lei");});
test("leia -> leia", function() {deepEqual( Stem("leia"), "leia");});
test("leiar -> leiar", function() {deepEqual( Stem("leiar"), "leiar");});
test("leiarar -> leiar", function() {deepEqual( Stem("leiarar"), "leiar");});
test("leiaren -> leiar", function() {deepEqual( Stem("leiaren"), "leiar");});
test("leiast -> leiast", function() {deepEqual( Stem("leiast"), "leiast");});
test("leid -> leid", function() {deepEqual( Stem("leid"), "leid");});
test("leidd -> leidd", function() {deepEqual( Stem("leidd"), "leidd");});
test("leidningar -> leidning", function() {deepEqual( Stem("leidningar"), "leidning");});
test("leie -> leie", function() {deepEqual( Stem("leie"), "leie");});
test("leieavtaler -> leieavtal", function() {deepEqual( Stem("leieavtaler"), "leieavtal");});
test("leieforhold -> leieforhold", function() {deepEqual( Stem("leieforhold"), "leieforhold");});
test("leiegårder -> leiegård", function() {deepEqual( Stem("leiegårder"), "leiegård");});
test("leieinntekter -> leieinntekt", function() {deepEqual( Stem("leieinntekter"), "leieinntekt");});
test("leier -> leier", function() {deepEqual( Stem("leier"), "leier");});
test("leieren -> leier", function() {deepEqual( Stem("leieren"), "leier");});
test("leierett -> leierett", function() {deepEqual( Stem("leierett"), "leierett");});
test("leieretten -> leierett", function() {deepEqual( Stem("leieretten"), "leierett");});
test("leiga -> leig", function() {deepEqual( Stem("leiga"), "leig");});
test("leigar -> leig", function() {deepEqual( Stem("leigar"), "leig");});
test("leigarane -> leigar", function() {deepEqual( Stem("leigarane"), "leigar");});
test("leigarar -> leigar", function() {deepEqual( Stem("leigarar"), "leigar");});
test("leigaren -> leigar", function() {deepEqual( Stem("leigaren"), "leigar");});
test("leigarens -> leigar", function() {deepEqual( Stem("leigarens"), "leigar");});
test("leigast -> leig", function() {deepEqual( Stem("leigast"), "leig");});
test("leigde -> leigd", function() {deepEqual( Stem("leigde"), "leigd");});
test("leige -> leig", function() {deepEqual( Stem("leige"), "leig");});
test("leigeavtalane -> leigeavtal", function() {deepEqual( Stem("leigeavtalane"), "leigeavtal");});
test("leigeavtalar -> leigeavtal", function() {deepEqual( Stem("leigeavtalar"), "leigeavtal");});
test("leigeavtale -> leigeavtal", function() {deepEqual( Stem("leigeavtale"), "leigeavtal");});
test("leigeavtalen -> leigeavtal", function() {deepEqual( Stem("leigeavtalen"), "leigeavtal");});
test("leigebetaling -> leigebetaling", function() {deepEqual( Stem("leigebetaling"), "leigebetaling");});
test("leigebuarorganisasjonane -> leigebuarorganisasjon", function() {deepEqual( Stem("leigebuarorganisasjonane"), "leigebuarorganisasjon");});
test("leigebuarrørsla -> leigebuarrørsl", function() {deepEqual( Stem("leigebuarrørsla"), "leigebuarrørsl");});
test("leigebustad -> leigebustad", function() {deepEqual( Stem("leigebustad"), "leigebustad");});
test("leigebustaden -> leigebustad", function() {deepEqual( Stem("leigebustaden"), "leigebustad");});
test("leigebustader -> leigebustad", function() {deepEqual( Stem("leigebustader"), "leigebustad");});
test("leigeforhold -> leigeforhold", function() {deepEqual( Stem("leigeforhold"), "leigeforhold");});
test("leigeforholdet -> leigeforhold", function() {deepEqual( Stem("leigeforholdet"), "leigeforhold");});
test("leigegard -> leigegard", function() {deepEqual( Stem("leigegard"), "leigegard");});
test("leigegardslova -> leigegard", function() {deepEqual( Stem("leigegardslova"), "leigegard");});
test("leigeinntekter -> leigeinntekt", function() {deepEqual( Stem("leigeinntekter"), "leigeinntekt");});
test("leigekonstruksjonen -> leigekonstruksjon", function() {deepEqual( Stem("leigekonstruksjonen"), "leigekonstruksjon");});
test("leigekontraktar -> leigekontrakt", function() {deepEqual( Stem("leigekontraktar"), "leigekontrakt");});
test("leigemodellen -> leigemodell", function() {deepEqual( Stem("leigemodellen"), "leigemodell");});
test("leigenivået -> leigenivå", function() {deepEqual( Stem("leigenivået"), "leigenivå");});
test("leigeobjektet -> leigeobjekt", function() {deepEqual( Stem("leigeobjektet"), "leigeobjekt");});
test("leiger -> leig", function() {deepEqual( Stem("leiger"), "leig");});
test("leigereguleringa -> leigeregulering", function() {deepEqual( Stem("leigereguleringa"), "leigeregulering");});
test("leigeregulert -> leigereguler", function() {deepEqual( Stem("leigeregulert"), "leigereguler");});
test("leigerett -> leigerett", function() {deepEqual( Stem("leigerett"), "leigerett");});
test("leigerettane -> leigerett", function() {deepEqual( Stem("leigerettane"), "leigerett");});
test("leigerettar -> leigerett", function() {deepEqual( Stem("leigerettar"), "leigerett");});
test("leigeretten -> leigerett", function() {deepEqual( Stem("leigeretten"), "leigerett");});
test("leigt -> leigt", function() {deepEqual( Stem("leigt"), "leigt");});
test("leiing -> leiing", function() {deepEqual( Stem("leiing"), "leiing");});
test("leiinga -> leiing", function() {deepEqual( Stem("leiinga"), "leiing");});
test("leikeplass -> leikeplass", function() {deepEqual( Stem("leikeplass"), "leikeplass");});
test("leikeplassar -> leikeplass", function() {deepEqual( Stem("leikeplassar"), "leikeplass");});
test("leir -> leir", function() {deepEqual( Stem("leir"), "leir");});
test("leire -> leir", function() {deepEqual( Stem("leire"), "leir");});
test("leiren -> leir", function() {deepEqual( Stem("leiren"), "leir");});
test("leirkjempen -> leirkjemp", function() {deepEqual( Stem("leirkjempen"), "leirkjemp");});
test("leirtrollet -> leirtroll", function() {deepEqual( Stem("leirtrollet"), "leirtroll");});
test("leit -> leit", function() {deepEqual( Stem("leit"), "leit");});
test("lek -> lek", function() {deepEqual( Stem("lek"), "lek");});
test("leke -> lek", function() {deepEqual( Stem("leke"), "lek");});
test("leken -> lek", function() {deepEqual( Stem("leken"), "lek");});
test("lekent -> lekent", function() {deepEqual( Stem("lekent"), "lekent");});
test("leker -> lek", function() {deepEqual( Stem("leker"), "lek");});
test("lekne -> lekn", function() {deepEqual( Stem("lekne"), "lekn");});
test("lekte -> lekt", function() {deepEqual( Stem("lekte"), "lekt");});
test("lekter -> lekt", function() {deepEqual( Stem("lekter"), "lekt");});
test("lemlestede -> lemlest", function() {deepEqual( Stem("lemlestede"), "lemlest");});
test("lempast -> lemp", function() {deepEqual( Stem("lempast"), "lemp");});
test("lempeligere -> lempeliger", function() {deepEqual( Stem("lempeligere"), "lempeliger");});
test("lemper -> lemp", function() {deepEqual( Stem("lemper"), "lemp");});
test("lempes -> lemp", function() {deepEqual( Stem("lempes"), "lemp");});
test("lemping -> lemping", function() {deepEqual( Stem("lemping"), "lemping");});
test("lempingsreglar -> lempingsregl", function() {deepEqual( Stem("lempingsreglar"), "lempingsregl");});
test("lener -> len", function() {deepEqual( Stem("lener"), "len");});
test("lengd -> lengd", function() {deepEqual( Stem("lengd"), "lengd");});
test("lengda -> lengd", function() {deepEqual( Stem("lengda"), "lengd");});
test("lengde -> lengd", function() {deepEqual( Stem("lengde"), "lengd");});
test("lengden -> lengd", function() {deepEqual( Stem("lengden"), "lengd");});
test("lenge -> leng", function() {deepEqual( Stem("lenge"), "leng");});
test("lenger -> leng", function() {deepEqual( Stem("lenger"), "leng");});
test("lenging -> lenging", function() {deepEqual( Stem("lenging"), "lenging");});
test("lengje -> lengj", function() {deepEqual( Stem("lengje"), "lengj");});
test("lengre -> lengr", function() {deepEqual( Stem("lengre"), "lengr");});
test("lengsel -> lengsel", function() {deepEqual( Stem("lengsel"), "lengsel");});
test("lengst -> lengst", function() {deepEqual( Stem("lengst"), "lengst");});
test("lengste -> lengst", function() {deepEqual( Stem("lengste"), "lengst");});
test("lengstefrist -> lengstefrist", function() {deepEqual( Stem("lengstefrist"), "lengstefrist");});
test("lengstetida -> lengstetid", function() {deepEqual( Stem("lengstetida"), "lengstetid");});
test("lengte -> lengt", function() {deepEqual( Stem("lengte"), "lengt");});
test("lengter -> lengt", function() {deepEqual( Stem("lengter"), "lengt");});
test("lengtet -> lengt", function() {deepEqual( Stem("lengtet"), "lengt");});
test("lenke -> lenk", function() {deepEqual( Stem("lenke"), "lenk");});
test("lenken -> lenk", function() {deepEqual( Stem("lenken"), "lenk");});
test("lenkene -> lenk", function() {deepEqual( Stem("lenkene"), "lenk");});
test("lenker -> lenk", function() {deepEqual( Stem("lenker"), "lenk");});
test("lenket -> lenk", function() {deepEqual( Stem("lenket"), "lenk");});
test("lensmannen -> lensmann", function() {deepEqual( Stem("lensmannen"), "lensmann");});
test("lensmannsdistrikt -> lensmannsdistrikt", function() {deepEqual( Stem("lensmannsdistrikt"), "lensmannsdistrikt");});
test("leppene -> lepp", function() {deepEqual( Stem("leppene"), "lepp");});
test("ler -> ler", function() {deepEqual( Stem("ler"), "ler");});
test("lese -> les", function() {deepEqual( Stem("lese"), "les");});
test("lesen -> les", function() {deepEqual( Stem("lesen"), "les");});
test("leser -> les", function() {deepEqual( Stem("leser"), "les");});
test("leses -> les", function() {deepEqual( Stem("leses"), "les");});
test("leske -> lesk", function() {deepEqual( Stem("leske"), "lesk");});
test("let -> let", function() {deepEqual( Stem("let"), "let");});
test("lete -> let", function() {deepEqual( Stem("lete"), "let");});
test("leter -> let", function() {deepEqual( Stem("leter"), "let");});
test("lett -> lett", function() {deepEqual( Stem("lett"), "lett");});
test("lettar -> lett", function() {deepEqual( Stem("lettar"), "lett");});
test("lettare -> lettar", function() {deepEqual( Stem("lettare"), "lettar");});
test("lettast -> lett", function() {deepEqual( Stem("lettast"), "lett");});
test("lette -> lett", function() {deepEqual( Stem("lette"), "lett");});
test("letter -> lett", function() {deepEqual( Stem("letter"), "lett");});
test("lettere -> letter", function() {deepEqual( Stem("lettere"), "letter");});
test("lettest -> lettest", function() {deepEqual( Stem("lettest"), "lettest");});
test("lettet -> lett", function() {deepEqual( Stem("lettet"), "lett");});
test("levd -> levd", function() {deepEqual( Stem("levd"), "levd");});
test("levde -> levd", function() {deepEqual( Stem("levde"), "levd");});
test("leve -> lev", function() {deepEqual( Stem("leve"), "lev");});
test("levealder -> leveald", function() {deepEqual( Stem("levealder"), "leveald");});
test("levealderen -> levealder", function() {deepEqual( Stem("levealderen"), "levealder");});
test("levedyktig -> levedykt", function() {deepEqual( Stem("levedyktig"), "levedykt");});
test("leveform -> leveform", function() {deepEqual( Stem("leveform"), "leveform");});
test("levekår -> levekår", function() {deepEqual( Stem("levekår"), "levekår");});
test("levekårspolitikken -> levekårspolitikk", function() {deepEqual( Stem("levekårspolitikken"), "levekårspolitikk");});
test("levekårsundersøkelsen -> levekårsundersøk", function() {deepEqual( Stem("levekårsundersøkelsen"), "levekårsundersøk");});
test("levelalder -> levelald", function() {deepEqual( Stem("levelalder"), "levelald");});
test("leven -> lev", function() {deepEqual( Stem("leven"), "lev");});
test("levende -> lev", function() {deepEqual( Stem("levende"), "lev");});
test("levenet -> leven", function() {deepEqual( Stem("levenet"), "leven");});
test("lever -> lev", function() {deepEqual( Stem("lever"), "lev");});
test("leverandørar -> leverandør", function() {deepEqual( Stem("leverandørar"), "leverandør");});
test("leverandørens -> leverandør", function() {deepEqual( Stem("leverandørens"), "leverandør");});
test("leverandører -> leverandør", function() {deepEqual( Stem("leverandører"), "leverandør");});
test("leveranser -> leverans", function() {deepEqual( Stem("leveranser"), "leverans");});
test("leveransesikkerhet -> leveransesikker", function() {deepEqual( Stem("leveransesikkerhet"), "leveransesikker");});
test("leverantorer -> leverantor", function() {deepEqual( Stem("leverantorer"), "leverantor");});
test("leverast -> lever", function() {deepEqual( Stem("leverast"), "lever");});
test("levere -> lever", function() {deepEqual( Stem("levere"), "lever");});
test("levereglene -> leveregl", function() {deepEqual( Stem("levereglene"), "leveregl");});
test("leveregler -> leveregl", function() {deepEqual( Stem("leveregler"), "leveregl");});
test("leverer -> lever", function() {deepEqual( Stem("leverer"), "lever");});
test("leveres -> lever", function() {deepEqual( Stem("leveres"), "lever");});
test("levering -> levering", function() {deepEqual( Stem("levering"), "levering");});
test("leveringens -> levering", function() {deepEqual( Stem("leveringens"), "levering");});
test("leveringer -> levering", function() {deepEqual( Stem("leveringer"), "levering");});
test("leveringskjeden -> leveringskjed", function() {deepEqual( Stem("leveringskjeden"), "leveringskjed");});
test("leveringskrav -> leveringskrav", function() {deepEqual( Stem("leveringskrav"), "leveringskrav");});
test("leveringspålitelighet -> leveringspålit", function() {deepEqual( Stem("leveringspålitelighet"), "leveringspålit");});
test("leveringsservice -> leveringsservic", function() {deepEqual( Stem("leveringsservice"), "leveringsservic");});
test("leveringstidspunkt -> leveringstidspunkt", function() {deepEqual( Stem("leveringstidspunkt"), "leveringstidspunkt");});
test("leveringsønsker -> leveringsønsk", function() {deepEqual( Stem("leveringsønsker"), "leveringsønsk");});
test("levert -> lever", function() {deepEqual( Stem("levert"), "lever");});
test("levesett -> levesett", function() {deepEqual( Stem("levesett"), "levesett");});
test("levet -> lev", function() {deepEqual( Stem("levet"), "lev");});
test("levetid -> levetid", function() {deepEqual( Stem("levetid"), "levetid");});
test("levetida -> levetid", function() {deepEqual( Stem("levetida"), "levetid");});
test("levetidkilde -> levetidkild", function() {deepEqual( Stem("levetidkilde"), "levetidkild");});
test("lf -> lf", function() {deepEqual( Stem("lf"), "lf");});
test("li -> li", function() {deepEqual( Stem("li"), "li");});
test("lidd -> lidd", function() {deepEqual( Stem("lidd"), "lidd");});
test("lide -> lid", function() {deepEqual( Stem("lide"), "lid");});
test("lidelsen -> lid", function() {deepEqual( Stem("lidelsen"), "lid");});
test("lidskjalv -> lidskjalv", function() {deepEqual( Stem("lidskjalv"), "lidskjalv");});
test("lidt -> lidt", function() {deepEqual( Stem("lidt"), "lidt");});
test("lier -> lier", function() {deepEqual( Stem("lier"), "lier");});
test("lierstranda -> lierstrand", function() {deepEqual( Stem("lierstranda"), "lierstrand");});
test("life -> lif", function() {deepEqual( Stem("life"), "lif");});
test("lift -> lift", function() {deepEqual( Stem("lift"), "lift");});
test("ligg -> ligg", function() {deepEqual( Stem("ligg"), "ligg");});
test("ligge -> ligg", function() {deepEqual( Stem("ligge"), "ligg");});
test("liggende -> ligg", function() {deepEqual( Stem("liggende"), "ligg");});
test("ligger -> ligg", function() {deepEqual( Stem("ligger"), "ligg");});
test("ligget -> ligg", function() {deepEqual( Stem("ligget"), "ligg");});
test("liggetid -> liggetid", function() {deepEqual( Stem("liggetid"), "liggetid");});
test("liggetiden -> liggetid", function() {deepEqual( Stem("liggetiden"), "liggetid");});
test("liggjande -> liggj", function() {deepEqual( Stem("liggjande"), "liggj");});
test("liggje -> liggj", function() {deepEqual( Stem("liggje"), "liggj");});
test("light -> light", function() {deepEqual( Stem("light"), "light");});
test("ligne -> lign", function() {deepEqual( Stem("ligne"), "lign");});
test("lignende -> lign", function() {deepEqual( Stem("lignende"), "lign");});
test("ligner -> lign", function() {deepEqual( Stem("ligner"), "lign");});
test("lignet -> lign", function() {deepEqual( Stem("lignet"), "lign");});
test("ligning -> ligning", function() {deepEqual( Stem("ligning"), "ligning");});
test("ligningen -> ligning", function() {deepEqual( Stem("ligningen"), "ligning");});
test("lignings -> ligning", function() {deepEqual( Stem("lignings"), "ligning");});
test("ligningsforhold -> ligningsforhold", function() {deepEqual( Stem("ligningsforhold"), "ligningsforhold");});
test("ligningsforvaltning -> ligningsforvaltning", function() {deepEqual( Stem("ligningsforvaltning"), "ligningsforvaltning");});
test("ligningsloven -> ligning", function() {deepEqual( Stem("ligningsloven"), "ligning");});
test("ligningsmyndighetene -> ligningsmynd", function() {deepEqual( Stem("ligningsmyndighetene"), "ligningsmynd");});
test("ligningsmyndighetenes -> ligningsmynd", function() {deepEqual( Stem("ligningsmyndighetenes"), "ligningsmynd");});
test("ligningsmyndigheter -> ligningsmynd", function() {deepEqual( Stem("ligningsmyndigheter"), "ligningsmynd");});
test("ligningspraksis -> ligningspraksis", function() {deepEqual( Stem("ligningspraksis"), "ligningspraksis");});
test("ligningstekniske -> ligningsteknisk", function() {deepEqual( Stem("ligningstekniske"), "ligningsteknisk");});
test("lik -> lik", function() {deepEqual( Stem("lik"), "lik");});
test("like -> lik", function() {deepEqual( Stem("like"), "lik");});
test("likebehandles -> likebehandl", function() {deepEqual( Stem("likebehandles"), "likebehandl");});
test("likebehandling -> likebehandling", function() {deepEqual( Stem("likebehandling"), "likebehandling");});
test("likeins -> likein", function() {deepEqual( Stem("likeins"), "likein");});
test("likeledes -> likel", function() {deepEqual( Stem("likeledes"), "likel");});
test("likemenn -> likemenn", function() {deepEqual( Stem("likemenn"), "likemenn");});
test("likene -> lik", function() {deepEqual( Stem("likene"), "lik");});
test("liker -> lik", function() {deepEqual( Stem("liker"), "lik");});
test("likestille -> likestill", function() {deepEqual( Stem("likestille"), "likestill");});
test("likestilles -> likestill", function() {deepEqual( Stem("likestilles"), "likestill");});
test("likestilling -> likestilling", function() {deepEqual( Stem("likestilling"), "likestilling");});
test("likestillingshensyn -> likestillingshensyn", function() {deepEqual( Stem("likestillingshensyn"), "likestillingshensyn");});
test("likestillingsmessig -> likestillingsmess", function() {deepEqual( Stem("likestillingsmessig"), "likestillingsmess");});
test("likestilt -> likestilt", function() {deepEqual( Stem("likestilt"), "likestilt");});
test("likestilte -> likestilt", function() {deepEqual( Stem("likestilte"), "likestilt");});
test("liket -> lik", function() {deepEqual( Stem("liket"), "lik");});
test("likevel -> likevel", function() {deepEqual( Stem("likevel"), "likevel");});
test("likeverdig -> likeverd", function() {deepEqual( Stem("likeverdig"), "likeverd");});
test("likeverdige -> likeverd", function() {deepEqual( Stem("likeverdige"), "likeverd");});
test("likhet -> lik", function() {deepEqual( Stem("likhet"), "lik");});
test("likheter -> lik", function() {deepEqual( Stem("likheter"), "lik");});
test("likhetskrav -> likhetskrav", function() {deepEqual( Stem("likhetskrav"), "likhetskrav");});
test("likhetsprinsipp -> likhetsprinsipp", function() {deepEqual( Stem("likhetsprinsipp"), "likhetsprinsipp");});
test("likhetsprinsippet -> likhetsprinsipp", function() {deepEqual( Stem("likhetsprinsippet"), "likhetsprinsipp");});
test("likhetsvurderinger -> likhetsvurdering", function() {deepEqual( Stem("likhetsvurderinger"), "likhetsvurdering");});
test("liknande -> likn", function() {deepEqual( Stem("liknande"), "likn");});
test("liknar -> likn", function() {deepEqual( Stem("liknar"), "likn");});
test("likne -> likn", function() {deepEqual( Stem("likne"), "likn");});
test("likninga -> likning", function() {deepEqual( Stem("likninga"), "likning");});
test("likningsstyresmaktene -> likningsstyresmakt", function() {deepEqual( Stem("likningsstyresmaktene"), "likningsstyresmakt");});
test("likskap -> likskap", function() {deepEqual( Stem("likskap"), "likskap");});
test("likskapen -> likskap", function() {deepEqual( Stem("likskapen"), "likskap");});
test("likt -> likt", function() {deepEqual( Stem("likt"), "likt");});
test("likte -> likt", function() {deepEqual( Stem("likte"), "likt");});
test("likvide -> likvid", function() {deepEqual( Stem("likvide"), "likvid");});
test("likvider -> likvid", function() {deepEqual( Stem("likvider"), "likvid");});
test("likviditet -> likvidit", function() {deepEqual( Stem("likviditet"), "likvidit");});
test("likviditeten -> likviditet", function() {deepEqual( Stem("likviditeten"), "likviditet");});
test("likviditetsbehov -> likviditetsbehov", function() {deepEqual( Stem("likviditetsbehov"), "likviditetsbehov");});
test("likviditetsmessig -> likviditetsmess", function() {deepEqual( Stem("likviditetsmessig"), "likviditetsmess");});
test("likviditetsproblemer -> likviditetsproblem", function() {deepEqual( Stem("likviditetsproblemer"), "likviditetsproblem");});
test("likviditetsregnskap -> likviditetsregnskap", function() {deepEqual( Stem("likviditetsregnskap"), "likviditetsregnskap");});
test("lille -> lill", function() {deepEqual( Stem("lille"), "lill");});
test("lillebroren -> lillebror", function() {deepEqual( Stem("lillebroren"), "lillebror");});
test("lilleholt -> lilleholt", function() {deepEqual( Stem("lilleholt"), "lilleholt");});
test("limited -> limited", function() {deepEqual( Stem("limited"), "limited");});
test("limt -> limt", function() {deepEqual( Stem("limt"), "limt");});
test("line -> lin", function() {deepEqual( Stem("line"), "lin");});
test("linene -> lin", function() {deepEqual( Stem("linene"), "lin");});
test("liner -> lin", function() {deepEqual( Stem("liner"), "lin");});
test("lines -> lin", function() {deepEqual( Stem("lines"), "lin");});
test("lineær -> lineær", function() {deepEqual( Stem("lineær"), "lineær");});
test("lineære -> lineær", function() {deepEqual( Stem("lineære"), "lineær");});
test("lineært -> lineært", function() {deepEqual( Stem("lineært"), "lineært");});
test("linje -> linj", function() {deepEqual( Stem("linje"), "linj");});
test("linjefart -> linjefart", function() {deepEqual( Stem("linjefart"), "linjefart");});
test("linjefarten -> linjefart", function() {deepEqual( Stem("linjefarten"), "linjefart");});
test("linjeføringen -> linjeføring", function() {deepEqual( Stem("linjeføringen"), "linjeføring");});
test("linjegods -> linjegod", function() {deepEqual( Stem("linjegods"), "linjegod");});
test("linjene -> linj", function() {deepEqual( Stem("linjene"), "linj");});
test("linjenes -> linj", function() {deepEqual( Stem("linjenes"), "linj");});
test("linjenettet -> linjenett", function() {deepEqual( Stem("linjenettet"), "linjenett");});
test("linjeopplegg -> linjeopplegg", function() {deepEqual( Stem("linjeopplegg"), "linjeopplegg");});
test("linjer -> linj", function() {deepEqual( Stem("linjer"), "linj");});
test("linjerederiene -> linjerederi", function() {deepEqual( Stem("linjerederiene"), "linjerederi");});
test("linjerederienes -> linjerederi", function() {deepEqual( Stem("linjerederienes"), "linjerederi");});
test("linjerederier -> linjerederi", function() {deepEqual( Stem("linjerederier"), "linjerederi");});
test("linjeskip -> linjeskip", function() {deepEqual( Stem("linjeskip"), "linjeskip");});
test("linjetilbud -> linjetilbud", function() {deepEqual( Stem("linjetilbud"), "linjetilbud");});
test("linjetrafikken -> linjetrafikk", function() {deepEqual( Stem("linjetrafikken"), "linjetrafikk");});
test("lintråd -> lintråd", function() {deepEqual( Stem("lintråd"), "lintråd");});
test("lir -> lir", function() {deepEqual( Stem("lir"), "lir");});
test("lirker -> lirk", function() {deepEqual( Stem("lirker"), "lirk");});
test("lisens -> lis", function() {deepEqual( Stem("lisens"), "lis");});
test("list -> list", function() {deepEqual( Stem("list"), "list");});
test("lista -> list", function() {deepEqual( Stem("lista"), "list");});
test("liste -> list", function() {deepEqual( Stem("liste"), "list");});
test("lister -> list", function() {deepEqual( Stem("lister"), "list");});
test("listet -> list", function() {deepEqual( Stem("listet"), "list");});
test("listig -> list", function() {deepEqual( Stem("listig"), "list");});
test("listverk -> listverk", function() {deepEqual( Stem("listverk"), "listverk");});
test("lit -> lit", function() {deepEqual( Stem("lit"), "lit");});
test("lite -> lit", function() {deepEqual( Stem("lite"), "lit");});
test("liten -> lit", function() {deepEqual( Stem("liten"), "lit");});
test("litt -> litt", function() {deepEqual( Stem("litt"), "litt");});
test("litteraturen -> litteratur", function() {deepEqual( Stem("litteraturen"), "litteratur");});
test("litterære -> litterær", function() {deepEqual( Stem("litterære"), "litterær");});
test("liv -> liv", function() {deepEqual( Stem("liv"), "liv");});
test("live -> liv", function() {deepEqual( Stem("live"), "liv");});
test("livet -> liv", function() {deepEqual( Stem("livet"), "liv");});
test("livets -> liv", function() {deepEqual( Stem("livets"), "liv");});
test("livgivende -> livgiv", function() {deepEqual( Stem("livgivende"), "livgiv");});
test("livrente -> livrent", function() {deepEqual( Stem("livrente"), "livrent");});
test("livrenteforsikring -> livrenteforsikring", function() {deepEqual( Stem("livrenteforsikring"), "livrenteforsikring");});
test("livrenteforsikringen -> livrenteforsikring", function() {deepEqual( Stem("livrenteforsikringen"), "livrenteforsikring");});
test("livrenteforsikringer -> livrenteforsikring", function() {deepEqual( Stem("livrenteforsikringer"), "livrenteforsikring");});
test("livrenteforskriften -> livrenteforskrift", function() {deepEqual( Stem("livrenteforskriften"), "livrenteforskrift");});
test("livrenten -> livrent", function() {deepEqual( Stem("livrenten"), "livrent");});
test("livrenteordninger -> livrenteordning", function() {deepEqual( Stem("livrenteordninger"), "livrenteordning");});
test("livrenteproduktene -> livrenteprodukt", function() {deepEqual( Stem("livrenteproduktene"), "livrenteprodukt");});
test("livrenter -> livrent", function() {deepEqual( Stem("livrenter"), "livrent");});
test("livs -> liv", function() {deepEqual( Stem("livs"), "liv");});
test("livsarving -> livsarving", function() {deepEqual( Stem("livsarving"), "livsarving");});
test("livsfase -> livsfas", function() {deepEqual( Stem("livsfase"), "livsfas");});
test("livsforsikring -> livsforsikring", function() {deepEqual( Stem("livsforsikring"), "livsforsikring");});
test("livsforsikringar -> livsforsikring", function() {deepEqual( Stem("livsforsikringar"), "livsforsikring");});
test("livsforsikringsavtalen -> livsforsikringsavtal", function() {deepEqual( Stem("livsforsikringsavtalen"), "livsforsikringsavtal");});
test("livsforsikringsdirektiv -> livsforsikringsdirektiv", function() {deepEqual( Stem("livsforsikringsdirektiv"), "livsforsikringsdirektiv");});
test("livsforsikringsdirektivene -> livsforsikringsdirektiv", function() {deepEqual( Stem("livsforsikringsdirektivene"), "livsforsikringsdirektiv");});
test("livsforsikringspremie -> livsforsikringspremi", function() {deepEqual( Stem("livsforsikringspremie"), "livsforsikringspremi");});
test("livsforsikringsselskap -> livsforsikringsselskap", function() {deepEqual( Stem("livsforsikringsselskap"), "livsforsikringsselskap");});
test("livsforsikringsselskapa -> livsforsikringsselskap", function() {deepEqual( Stem("livsforsikringsselskapa"), "livsforsikringsselskap");});
test("livsforsikringsselskapene -> livsforsikringsselskap", function() {deepEqual( Stem("livsforsikringsselskapene"), "livsforsikringsselskap");});
test("livsforsikringsselskapenes -> livsforsikringsselskap", function() {deepEqual( Stem("livsforsikringsselskapenes"), "livsforsikringsselskap");});
test("livsforsikringsselskaper -> livsforsikringsselskap", function() {deepEqual( Stem("livsforsikringsselskaper"), "livsforsikringsselskap");});
test("livsforsikringsselskapet -> livsforsikringsselskap", function() {deepEqual( Stem("livsforsikringsselskapet"), "livsforsikringsselskap");});
test("livsforsikringsvirksomhet -> livsforsikringsvirksom", function() {deepEqual( Stem("livsforsikringsvirksomhet"), "livsforsikringsvirksom");});
test("livsinntekten -> livsinntekt", function() {deepEqual( Stem("livsinntekten"), "livsinntekt");});
test("livskvalitet -> livskvalit", function() {deepEqual( Stem("livskvalitet"), "livskvalit");});
test("livslang -> livslang", function() {deepEqual( Stem("livslang"), "livslang");});
test("livslange -> livslang", function() {deepEqual( Stem("livslange"), "livslang");});
test("livsledsager -> livsledsag", function() {deepEqual( Stem("livsledsager"), "livsledsag");});
test("livsløpet -> livsløp", function() {deepEqual( Stem("livsløpet"), "livsløp");});
test("livssituasjon -> livssituasjon", function() {deepEqual( Stem("livssituasjon"), "livssituasjon");});
test("livstørst -> livstørst", function() {deepEqual( Stem("livstørst"), "livstørst");});
test("livsvarig -> livsvar", function() {deepEqual( Stem("livsvarig"), "livsvar");});
test("livsvarige -> livsvar", function() {deepEqual( Stem("livsvarige"), "livsvar");});
test("livtrase -> livtras", function() {deepEqual( Stem("livtrase"), "livtras");});
test("ljåene -> ljåen", function() {deepEqual( Stem("ljåene"), "ljåen");});
test("lo -> lo", function() {deepEqual( Stem("lo"), "lo");});
test("lock -> lock", function() {deepEqual( Stem("lock"), "lock");});
test("lodne -> lodn", function() {deepEqual( Stem("lodne"), "lodn");});
test("logisk -> logisk", function() {deepEqual( Stem("logisk"), "logisk");});
test("logistikk -> logistikk", function() {deepEqual( Stem("logistikk"), "logistikk");});
test("logistikkbedrifter -> logistikkbedrift", function() {deepEqual( Stem("logistikkbedrifter"), "logistikkbedrift");});
test("logistikkfunksjonene -> logistikkfunksjon", function() {deepEqual( Stem("logistikkfunksjonene"), "logistikkfunksjon");});
test("logistikkfunksjoner -> logistikkfunksjon", function() {deepEqual( Stem("logistikkfunksjoner"), "logistikkfunksjon");});
test("logistikkkostnader -> logistikkkostnad", function() {deepEqual( Stem("logistikkkostnader"), "logistikkkostnad");});
test("logistikkløsning -> logistikkløsning", function() {deepEqual( Stem("logistikkløsning"), "logistikkløsning");});
test("logistikkløsninger -> logistikkløsning", function() {deepEqual( Stem("logistikkløsninger"), "logistikkløsning");});
test("logistikksammenheng -> logistikksammenheng", function() {deepEqual( Stem("logistikksammenheng"), "logistikksammenheng");});
test("logistikktankegang -> logistikktankegang", function() {deepEqual( Stem("logistikktankegang"), "logistikktankegang");});
test("logistikkteminalene -> logistikkteminal", function() {deepEqual( Stem("logistikkteminalene"), "logistikkteminal");});
test("logistikkterminalene -> logistikkterminal", function() {deepEqual( Stem("logistikkterminalene"), "logistikkterminal");});
test("logistiske -> logistisk", function() {deepEqual( Stem("logistiske"), "logistisk");});
test("logrer -> logr", function() {deepEqual( Stem("logrer"), "logr");});
test("lohavn -> lohavn", function() {deepEqual( Stem("lohavn"), "lohavn");});
test("lokal -> lokal", function() {deepEqual( Stem("lokal"), "lokal");});
test("lokale -> lokal", function() {deepEqual( Stem("lokale"), "lokal");});
test("lokalisere -> lokaliser", function() {deepEqual( Stem("lokalisere"), "lokaliser");});
test("lokaliseres -> lokaliser", function() {deepEqual( Stem("lokaliseres"), "lokaliser");});
test("lokalisering -> lokalisering", function() {deepEqual( Stem("lokalisering"), "lokalisering");});
test("lokaliseringen -> lokalisering", function() {deepEqual( Stem("lokaliseringen"), "lokalisering");});
test("lokaliseringsmønsteret -> lokaliseringsmønster", function() {deepEqual( Stem("lokaliseringsmønsteret"), "lokaliseringsmønster");});
test("lokaliseringspunkt -> lokaliseringspunkt", function() {deepEqual( Stem("lokaliseringspunkt"), "lokaliseringspunkt");});
test("lokaliseringsspørsmål -> lokaliseringsspørsmål", function() {deepEqual( Stem("lokaliseringsspørsmål"), "lokaliseringsspørsmål");});
test("lokaliseringsvalg -> lokaliseringsvalg", function() {deepEqual( Stem("lokaliseringsvalg"), "lokaliseringsvalg");});
test("lokaliseringsvurderingen -> lokaliseringsvurdering", function() {deepEqual( Stem("lokaliseringsvurderingen"), "lokaliseringsvurdering");});
test("lokalisert -> lokaliser", function() {deepEqual( Stem("lokalisert"), "lokaliser");});
test("lokalområder -> lokalområd", function() {deepEqual( Stem("lokalområder"), "lokalområd");});
test("lokalpolitiske -> lokalpolitisk", function() {deepEqual( Stem("lokalpolitiske"), "lokalpolitisk");});
test("lokalsamfunn -> lokalsamfunn", function() {deepEqual( Stem("lokalsamfunn"), "lokalsamfunn");});
test("lokalsamfunnet -> lokalsamfunn", function() {deepEqual( Stem("lokalsamfunnet"), "lokalsamfunn");});
test("lokalt -> lokalt", function() {deepEqual( Stem("lokalt"), "lokalt");});
test("lokaltrafikk -> lokaltrafikk", function() {deepEqual( Stem("lokaltrafikk"), "lokaltrafikk");});
test("lokaltrafikken -> lokaltrafikk", function() {deepEqual( Stem("lokaltrafikken"), "lokaltrafikk");});
test("loke -> lok", function() {deepEqual( Stem("loke"), "lok");});
test("loker -> lok", function() {deepEqual( Stem("loker"), "lok");});
test("lokes -> lok", function() {deepEqual( Stem("lokes"), "lok");});
test("lokk -> lokk", function() {deepEqual( Stem("lokk"), "lokk");});
test("lokke -> lokk", function() {deepEqual( Stem("lokke"), "lokk");});
test("lokker -> lokk", function() {deepEqual( Stem("lokker"), "lokk");});
test("lokket -> lokk", function() {deepEqual( Stem("lokket"), "lokk");});
test("lombardia -> lombardi", function() {deepEqual( Stem("lombardia"), "lombardi");});
test("loneskatt -> loneskatt", function() {deepEqual( Stem("loneskatt"), "loneskatt");});
test("loppe -> lopp", function() {deepEqual( Stem("loppe"), "lopp");});
test("loran -> loran", function() {deepEqual( Stem("loran"), "loran");});
test("los -> los", function() {deepEqual( Stem("los"), "los");});
test("losbordingsfelt -> losbordingsfelt", function() {deepEqual( Stem("losbordingsfelt"), "losbordingsfelt");});
test("losgebyrene -> losgebyr", function() {deepEqual( Stem("losgebyrene"), "losgebyr");});
test("losing -> losing", function() {deepEqual( Stem("losing"), "losing");});
test("losplikten -> losplikt", function() {deepEqual( Stem("losplikten"), "losplikt");});
test("loss -> loss", function() {deepEqual( Stem("loss"), "loss");});
test("losse -> loss", function() {deepEqual( Stem("losse"), "loss");});
test("lossearbeider -> lossearbeid", function() {deepEqual( Stem("lossearbeider"), "lossearbeid");});
test("losses -> loss", function() {deepEqual( Stem("losses"), "loss");});
test("lossesystemet -> lossesystem", function() {deepEqual( Stem("lossesystemet"), "lossesystem");});
test("losseutstyr -> losseutstyr", function() {deepEqual( Stem("losseutstyr"), "losseutstyr");});
test("lossing -> lossing", function() {deepEqual( Stem("lossing"), "lossing");});
test("lostjenesten -> lostjenest", function() {deepEqual( Stem("lostjenesten"), "lostjenest");});
test("losvirksomhet -> losvirksom", function() {deepEqual( Stem("losvirksomhet"), "losvirksom");});
test("lot -> lot", function() {deepEqual( Stem("lot"), "lot");});
test("lov -> lov", function() {deepEqual( Stem("lov"), "lov");});
test("lova -> lov", function() {deepEqual( Stem("lova"), "lov");});
test("lovarbeid -> lovarbeid", function() {deepEqual( Stem("lovarbeid"), "lovarbeid");});
test("lovarbeidet -> lovarbeid", function() {deepEqual( Stem("lovarbeidet"), "lovarbeid");});
test("lovbestemmelse -> lovbestemm", function() {deepEqual( Stem("lovbestemmelse"), "lovbestemm");});
test("lovbestemmelsene -> lovbestemm", function() {deepEqual( Stem("lovbestemmelsene"), "lovbestemm");});
test("lovbestemt -> lovbestemt", function() {deepEqual( Stem("lovbestemt"), "lovbestemt");});
test("lovbestemte -> lovbestemt", function() {deepEqual( Stem("lovbestemte"), "lovbestemt");});
test("love -> lov", function() {deepEqual( Stem("love"), "lov");});
test("loven -> lov", function() {deepEqual( Stem("loven"), "lov");});
test("lovendring -> lovendring", function() {deepEqual( Stem("lovendring"), "lovendring");});
test("lovendringar -> lovendring", function() {deepEqual( Stem("lovendringar"), "lovendring");});
test("lovendringen -> lovendring", function() {deepEqual( Stem("lovendringen"), "lovendring");});
test("lovendringene -> lovendring", function() {deepEqual( Stem("lovendringene"), "lovendring");});
test("lovendringenes -> lovendring", function() {deepEqual( Stem("lovendringenes"), "lovendring");});
test("lovene -> lov", function() {deepEqual( Stem("lovene"), "lov");});
test("lovens -> lov", function() {deepEqual( Stem("lovens"), "lov");});
test("lover -> lov", function() {deepEqual( Stem("lover"), "lov");});
test("lovet -> lov", function() {deepEqual( Stem("lovet"), "lov");});
test("lovfastsett -> lovfastsett", function() {deepEqual( Stem("lovfastsett"), "lovfastsett");});
test("lovfastsette -> lovfastsett", function() {deepEqual( Stem("lovfastsette"), "lovfastsett");});
test("lovfesta -> lovfest", function() {deepEqual( Stem("lovfesta"), "lovfest");});
test("lovfestast -> lovfest", function() {deepEqual( Stem("lovfestast"), "lovfest");});
test("lovfeste -> lovfest", function() {deepEqual( Stem("lovfeste"), "lovfest");});
test("lovfestede -> lovfest", function() {deepEqual( Stem("lovfestede"), "lovfest");});
test("lovfestes -> lovfest", function() {deepEqual( Stem("lovfestes"), "lovfest");});
test("lovfestet -> lovfest", function() {deepEqual( Stem("lovfestet"), "lovfest");});
test("lovfesting -> lovfesting", function() {deepEqual( Stem("lovfesting"), "lovfesting");});
test("lovforslaget -> lovforslag", function() {deepEqual( Stem("lovforslaget"), "lovforslag");});
test("lovforslagets -> lovforslag", function() {deepEqual( Stem("lovforslagets"), "lovforslag");});
test("lovføresegn -> lovføresegn", function() {deepEqual( Stem("lovføresegn"), "lovføresegn");});
test("lovføresegnene -> lovføresegn", function() {deepEqual( Stem("lovføresegnene"), "lovføresegn");});
test("lovgivingen -> lovgiving", function() {deepEqual( Stem("lovgivingen"), "lovgiving");});
test("lovgivning -> lovgivning", function() {deepEqual( Stem("lovgivning"), "lovgivning");});
test("lovgivningen -> lovgivning", function() {deepEqual( Stem("lovgivningen"), "lovgivning");});
test("lovgivningskompetanse -> lovgivningskompetans", function() {deepEqual( Stem("lovgivningskompetanse"), "lovgivningskompetans");});
test("lovgjevaren -> lovgjevar", function() {deepEqual( Stem("lovgjevaren"), "lovgjevar");});
test("lovgjevarens -> lovgjevar", function() {deepEqual( Stem("lovgjevarens"), "lovgjevar");});
test("lovgjeving -> lovgjeving", function() {deepEqual( Stem("lovgjeving"), "lovgjeving");});
test("lovgjevinga -> lovgjeving", function() {deepEqual( Stem("lovgjevinga"), "lovgjeving");});
test("lovgrunnlag -> lovgrunnlag", function() {deepEqual( Stem("lovgrunnlag"), "lovgrunnlag");});
test("lovheimel -> lovheimel", function() {deepEqual( Stem("lovheimel"), "lovheimel");});
test("lovleg -> lov", function() {deepEqual( Stem("lovleg"), "lov");});
test("lovlege -> lov", function() {deepEqual( Stem("lovlege"), "lov");});
test("lovlig -> lov", function() {deepEqual( Stem("lovlig"), "lov");});
test("lovmotiv -> lovmotiv", function() {deepEqual( Stem("lovmotiv"), "lovmotiv");});
test("lovmotiva -> lovmotiv", function() {deepEqual( Stem("lovmotiva"), "lovmotiv");});
test("lovn -> lovn", function() {deepEqual( Stem("lovn"), "lovn");});
test("lovnad -> lovnad", function() {deepEqual( Stem("lovnad"), "lovnad");});
test("lovpåbod -> lovpåbod", function() {deepEqual( Stem("lovpåbod"), "lovpåbod");});
test("lovpålagt -> lovpålagt", function() {deepEqual( Stem("lovpålagt"), "lovpålagt");});
test("lovregelen -> lovregel", function() {deepEqual( Stem("lovregelen"), "lovregel");});
test("lovreglar -> lovregl", function() {deepEqual( Stem("lovreglar"), "lovregl");});
test("lovregler -> lovregl", function() {deepEqual( Stem("lovregler"), "lovregl");});
test("lovregulering -> lovregulering", function() {deepEqual( Stem("lovregulering"), "lovregulering");});
test("lovreguleringa -> lovregulering", function() {deepEqual( Stem("lovreguleringa"), "lovregulering");});
test("lovreguleringen -> lovregulering", function() {deepEqual( Stem("lovreguleringen"), "lovregulering");});
test("lovregulert -> lovreguler", function() {deepEqual( Stem("lovregulert"), "lovreguler");});
test("lovregulerte -> lovreguler", function() {deepEqual( Stem("lovregulerte"), "lovreguler");});
test("lovstrukturelt -> lovstrukturelt", function() {deepEqual( Stem("lovstrukturelt"), "lovstrukturelt");});
test("lovstrukturutvalet -> lovstrukturutval", function() {deepEqual( Stem("lovstrukturutvalet"), "lovstrukturutval");});
test("lovteknisk -> lovteknisk", function() {deepEqual( Stem("lovteknisk"), "lovteknisk");});
test("lovtekst -> lovtekst", function() {deepEqual( Stem("lovtekst"), "lovtekst");});
test("lovtekstar -> lovtekst", function() {deepEqual( Stem("lovtekstar"), "lovtekst");});
test("lovteksten -> lovtekst", function() {deepEqual( Stem("lovteksten"), "lovtekst");});
test("lovtekster -> lovtekst", function() {deepEqual( Stem("lovtekster"), "lovtekst");});
test("lovutkast -> lovutk", function() {deepEqual( Stem("lovutkast"), "lovutk");});
test("lovutkastet -> lovutkast", function() {deepEqual( Stem("lovutkastet"), "lovutkast");});
test("lovutkastets -> lovutkast", function() {deepEqual( Stem("lovutkastets"), "lovutkast");});
test("lovutval -> lovutval", function() {deepEqual( Stem("lovutval"), "lovutval");});
test("lovval -> lovval", function() {deepEqual( Stem("lovval"), "lovval");});
test("lovverk -> lovverk", function() {deepEqual( Stem("lovverk"), "lovverk");});
test("lovverkene -> lovverk", function() {deepEqual( Stem("lovverkene"), "lovverk");});
test("lovverket -> lovverk", function() {deepEqual( Stem("lovverket"), "lovverk");});
test("ltp -> ltp", function() {deepEqual( Stem("ltp"), "ltp");});
test("ltps -> ltps", function() {deepEqual( Stem("ltps"), "ltps");});
test("lue -> lue", function() {deepEqual( Stem("lue"), "lue");});
test("luft -> luft", function() {deepEqual( Stem("luft"), "luft");});
test("luften -> luft", function() {deepEqual( Stem("luften"), "luft");});
test("luftetur -> luftetur", function() {deepEqual( Stem("luftetur"), "luftetur");});
test("luftfart -> luftfart", function() {deepEqual( Stem("luftfart"), "luftfart");});
test("luftfartslova -> luftfart", function() {deepEqual( Stem("luftfartslova"), "luftfart");});
test("luftfartsverket -> luftfartsverk", function() {deepEqual( Stem("luftfartsverket"), "luftfartsverk");});
test("luftfarty -> luftfarty", function() {deepEqual( Stem("luftfarty"), "luftfarty");});
test("luftfartyregister -> luftfartyregist", function() {deepEqual( Stem("luftfartyregister"), "luftfartyregist");});
test("luftfartyregisteret -> luftfartyregister", function() {deepEqual( Stem("luftfartyregisteret"), "luftfartyregister");});
test("luftfartøyregister -> luftfartøyregist", function() {deepEqual( Stem("luftfartøyregister"), "luftfartøyregist");});
test("luftforurensing -> luftforurensing", function() {deepEqual( Stem("luftforurensing"), "luftforurensing");});
test("luftforurensning -> luftforurensning", function() {deepEqual( Stem("luftforurensning"), "luftforurensning");});
test("lufthavn -> lufthavn", function() {deepEqual( Stem("lufthavn"), "lufthavn");});
test("luker -> luk", function() {deepEqual( Stem("luker"), "luk");});
test("lukke -> lukk", function() {deepEqual( Stem("lukke"), "lukk");});
test("lukkede -> lukk", function() {deepEqual( Stem("lukkede"), "lukk");});
test("lukker -> lukk", function() {deepEqual( Stem("lukker"), "lukk");});
test("lukket -> lukk", function() {deepEqual( Stem("lukket"), "lukk");});
test("lukt -> lukt", function() {deepEqual( Stem("lukt"), "lukt");});
test("lukter -> lukt", function() {deepEqual( Stem("lukter"), "lukt");});
test("lumske -> lumsk", function() {deepEqual( Stem("lumske"), "lumsk");});
test("lunden -> lund", function() {deepEqual( Stem("lunden"), "lund");});
test("lunder -> lund", function() {deepEqual( Stem("lunder"), "lund");});
test("lur -> lur", function() {deepEqual( Stem("lur"), "lur");});
test("lure -> lur", function() {deepEqual( Stem("lure"), "lur");});
test("lurer -> lur", function() {deepEqual( Stem("lurer"), "lur");});
test("lurest -> lurest", function() {deepEqual( Stem("lurest"), "lurest");});
test("lurt -> lurt", function() {deepEqual( Stem("lurt"), "lurt");});
test("lurte -> lurt", function() {deepEqual( Stem("lurte"), "lurt");});
test("lurvelevenet -> lurveleven", function() {deepEqual( Stem("lurvelevenet"), "lurveleven");});
test("lurvete -> lurvet", function() {deepEqual( Stem("lurvete"), "lurvet");});
test("lus -> lus", function() {deepEqual( Stem("lus"), "lus");});
test("luskende -> lusk", function() {deepEqual( Stem("luskende"), "lusk");});
test("lusker -> lusk", function() {deepEqual( Stem("lusker"), "lusk");});
test("lut -> lut", function() {deepEqual( Stem("lut"), "lut");});
test("lutast -> lut", function() {deepEqual( Stem("lutast"), "lut");});
test("lutkast -> lutk", function() {deepEqual( Stem("lutkast"), "lutk");});
test("lutryggete -> lutrygget", function() {deepEqual( Stem("lutryggete"), "lutrygget");});
test("ly -> ly", function() {deepEqual( Stem("ly"), "ly");});
test("lyd -> lyd", function() {deepEqual( Stem("lyd"), "lyd");});
test("lyde -> lyd", function() {deepEqual( Stem("lyde"), "lyd");});
test("lyden -> lyd", function() {deepEqual( Stem("lyden"), "lyd");});
test("lyder -> lyd", function() {deepEqual( Stem("lyder"), "lyd");});
test("lydløse -> lydløs", function() {deepEqual( Stem("lydløse"), "lydløs");});
test("lykke -> lykk", function() {deepEqual( Stem("lykke"), "lykk");});
test("lykkelig -> lykk", function() {deepEqual( Stem("lykkelig"), "lykk");});
test("lykten -> lykt", function() {deepEqual( Stem("lykten"), "lykt");});
test("lyn -> lyn", function() {deepEqual( Stem("lyn"), "lyn");});
test("lyner -> lyn", function() {deepEqual( Stem("lyner"), "lyn");});
test("lyng -> lyng", function() {deepEqual( Stem("lyng"), "lyng");});
test("lynget -> lyng", function() {deepEqual( Stem("lynget"), "lyng");});
test("lyngve -> lyngv", function() {deepEqual( Stem("lyngve"), "lyngv");});
test("lynsnart -> lynsnart", function() {deepEqual( Stem("lynsnart"), "lynsnart");});
test("lys -> lys", function() {deepEqual( Stem("lys"), "lys");});
test("lysaker -> lysak", function() {deepEqual( Stem("lysaker"), "lysak");});
test("lysast -> lys", function() {deepEqual( Stem("lysast"), "lys");});
test("lyse -> lys", function() {deepEqual( Stem("lyse"), "lys");});
test("lysende -> lys", function() {deepEqual( Stem("lysende"), "lys");});
test("lysene -> lys", function() {deepEqual( Stem("lysene"), "lys");});
test("lyser -> lys", function() {deepEqual( Stem("lyser"), "lys");});
test("lysere -> lyser", function() {deepEqual( Stem("lysere"), "lyser");});
test("lysest -> lysest", function() {deepEqual( Stem("lysest"), "lysest");});
test("lyset -> lys", function() {deepEqual( Stem("lyset"), "lys");});
test("lysingsblad -> lysingsblad", function() {deepEqual( Stem("lysingsblad"), "lysingsblad");});
test("lyskryss -> lyskryss", function() {deepEqual( Stem("lyskryss"), "lyskryss");});
test("lysner -> lysn", function() {deepEqual( Stem("lysner"), "lysn");});
test("lyst -> lyst", function() {deepEqual( Stem("lyst"), "lyst");});
test("lyste -> lyst", function() {deepEqual( Stem("lyste"), "lyst");});
test("lysten -> lyst", function() {deepEqual( Stem("lysten"), "lyst");});
test("lyster -> lyst", function() {deepEqual( Stem("lyster"), "lyst");});
test("lystig -> lyst", function() {deepEqual( Stem("lystig"), "lyst");});
test("lystrer -> lystr", function() {deepEqual( Stem("lystrer"), "lystr");});
test("lyt -> lyt", function() {deepEqual( Stem("lyt"), "lyt");});
test("lyte -> lyt", function() {deepEqual( Stem("lyte"), "lyt");});
test("lytt -> lytt", function() {deepEqual( Stem("lytt"), "lytt");});
test("lytte -> lytt", function() {deepEqual( Stem("lytte"), "lytt");});
test("lytter -> lytt", function() {deepEqual( Stem("lytter"), "lytt");});
test("lyttet -> lytt", function() {deepEqual( Stem("lyttet"), "lytt");});
test("lyve -> lyv", function() {deepEqual( Stem("lyve"), "lyv");});
test("lyver -> lyv", function() {deepEqual( Stem("lyver"), "lyv");});
test("lå -> lå", function() {deepEqual( Stem("lå"), "lå");});
test("låg -> låg", function() {deepEqual( Stem("låg"), "låg");});
test("lågare -> lågar", function() {deepEqual( Stem("lågare"), "lågar");});
test("lågaste -> lågast", function() {deepEqual( Stem("lågaste"), "lågast");});
test("låge -> låg", function() {deepEqual( Stem("låge"), "låg");});
test("lågen -> låg", function() {deepEqual( Stem("lågen"), "låg");});
test("lågt -> lågt", function() {deepEqual( Stem("lågt"), "lågt");});
test("lån -> lån", function() {deepEqual( Stem("lån"), "lån");});
test("låna -> lån", function() {deepEqual( Stem("låna"), "lån");});
test("lånast -> lån", function() {deepEqual( Stem("lånast"), "lån");});
test("låne -> lån", function() {deepEqual( Stem("låne"), "lån");});
test("lånebevis -> lånebevis", function() {deepEqual( Stem("lånebevis"), "lånebevis");});
test("lånefinansieringen -> lånefinansiering", function() {deepEqual( Stem("lånefinansieringen"), "lånefinansiering");});
test("låneforhold -> låneforhold", function() {deepEqual( Stem("låneforhold"), "låneforhold");});
test("lånegarantier -> lånegaranti", function() {deepEqual( Stem("lånegarantier"), "lånegaranti");});
test("låneinnskot -> låneinnskot", function() {deepEqual( Stem("låneinnskot"), "låneinnskot");});
test("låneinnskota -> låneinnskot", function() {deepEqual( Stem("låneinnskota"), "låneinnskot");});
test("låneinstitusjonar -> låneinstitusjon", function() {deepEqual( Stem("låneinstitusjonar"), "låneinstitusjon");});
test("lånekapital -> lånekapital", function() {deepEqual( Stem("lånekapital"), "lånekapital");});
test("lånemarkedet -> lånemarked", function() {deepEqual( Stem("lånemarkedet"), "lånemarked");});
test("låneopptak -> låneopptak", function() {deepEqual( Stem("låneopptak"), "låneopptak");});
test("låneopptaka -> låneopptak", function() {deepEqual( Stem("låneopptaka"), "låneopptak");});
test("låner -> lån", function() {deepEqual( Stem("låner"), "lån");});
test("lånes -> lån", function() {deepEqual( Stem("lånes"), "lån");});
test("lånet -> lån", function() {deepEqual( Stem("lånet"), "lån");});
test("låneterminar -> lånetermin", function() {deepEqual( Stem("låneterminar"), "lånetermin");});
test("lånetidspunktet -> lånetidspunkt", function() {deepEqual( Stem("lånetidspunktet"), "lånetidspunkt");});
test("låneutmåling -> låneutmåling", function() {deepEqual( Stem("låneutmåling"), "låneutmåling");});
test("låneutmålinga -> låneutmåling", function() {deepEqual( Stem("låneutmålinga"), "låneutmåling");});
test("lånevilkårene -> lånevilkår", function() {deepEqual( Stem("lånevilkårene"), "lånevilkår");});
test("långjevarar -> långjevar", function() {deepEqual( Stem("långjevarar"), "långjevar");});
test("lånt -> lånt", function() {deepEqual( Stem("lånt"), "lånt");});
test("låntakar -> låntak", function() {deepEqual( Stem("låntakar"), "låntak");});
test("lånte -> lånt", function() {deepEqual( Stem("lånte"), "lånt");});
test("lår -> lår", function() {deepEqual( Stem("lår"), "lår");});
test("lårbenet -> lårben", function() {deepEqual( Stem("lårbenet"), "lårben");});
test("lårene -> lår", function() {deepEqual( Stem("lårene"), "lår");});
test("låsen -> lås", function() {deepEqual( Stem("låsen"), "lås");});
test("låser -> lås", function() {deepEqual( Stem("låser"), "lås");});
test("låst -> låst", function() {deepEqual( Stem("låst"), "låst");});
test("lær -> lær", function() {deepEqual( Stem("lær"), "lær");});
test("lærdom -> lærdom", function() {deepEqual( Stem("lærdom"), "lærdom");});
test("lære -> lær", function() {deepEqual( Stem("lære"), "lær");});
test("lærer -> lær", function() {deepEqual( Stem("lærer"), "lær");});
test("læres -> lær", function() {deepEqual( Stem("læres"), "lær");});
test("lært -> lært", function() {deepEqual( Stem("lært"), "lært");});
test("lærte -> lært", function() {deepEqual( Stem("lærte"), "lært");});
test("læsø -> læsø", function() {deepEqual( Stem("læsø"), "læsø");});
test("lød -> lød", function() {deepEqual( Stem("lød"), "lød");});
test("løfte -> løft", function() {deepEqual( Stem("løfte"), "løft");});
test("løfter -> løft", function() {deepEqual( Stem("løfter"), "løft");});
test("løftet -> løft", function() {deepEqual( Stem("løftet"), "løft");});
test("løgn -> løgn", function() {deepEqual( Stem("løgn"), "løgn");});
test("løgnen -> løgn", function() {deepEqual( Stem("løgnen"), "løgn");});
test("løgnene -> løgn", function() {deepEqual( Stem("løgnene"), "løgn");});
test("løgner -> løgn", function() {deepEqual( Stem("løgner"), "løgn");});
test("løkkeberg -> løkkeberg", function() {deepEqual( Stem("løkkeberg"), "løkkeberg");});
test("løkker -> løkk", function() {deepEqual( Stem("løkker"), "løkk");});
test("løne -> løn", function() {deepEqual( Stem("løne"), "løn");});
test("lønn -> lønn", function() {deepEqual( Stem("lønn"), "lønn");});
test("lønnen -> lønn", function() {deepEqual( Stem("lønnen"), "lønn");});
test("lønninger -> lønning", function() {deepEqual( Stem("lønninger"), "lønning");});
test("lønns -> lønn", function() {deepEqual( Stem("lønns"), "lønn");});
test("lønnsbegrep -> lønnsbegrep", function() {deepEqual( Stem("lønnsbegrep"), "lønnsbegrep");});
test("lønnsbegrepet -> lønnsbegrep", function() {deepEqual( Stem("lønnsbegrepet"), "lønnsbegrep");});
test("lønnsbeskatning -> lønnsbeskatning", function() {deepEqual( Stem("lønnsbeskatning"), "lønnsbeskatning");});
test("lønnsbrøk -> lønnsbrøk", function() {deepEqual( Stem("lønnsbrøk"), "lønnsbrøk");});
test("lønnsendring -> lønnsendring", function() {deepEqual( Stem("lønnsendring"), "lønnsendring");});
test("lønnsendringer -> lønnsendring", function() {deepEqual( Stem("lønnsendringer"), "lønnsendring");});
test("lønnsevnen -> lønnsevn", function() {deepEqual( Stem("lønnsevnen"), "lønnsevn");});
test("lønnsfordelingen -> lønnsfordeling", function() {deepEqual( Stem("lønnsfordelingen"), "lønnsfordeling");});
test("lønnsforhandlinger -> lønnsforhandling", function() {deepEqual( Stem("lønnsforhandlinger"), "lønnsforhandling");});
test("lønnsforholdene -> lønnsforhold", function() {deepEqual( Stem("lønnsforholdene"), "lønnsforhold");});
test("lønnsgrunnlag -> lønnsgrunnlag", function() {deepEqual( Stem("lønnsgrunnlag"), "lønnsgrunnlag");});
test("lønnsgrunnlaget -> lønnsgrunnlag", function() {deepEqual( Stem("lønnsgrunnlaget"), "lønnsgrunnlag");});
test("lønnsgrupper -> lønnsgrupp", function() {deepEqual( Stem("lønnsgrupper"), "lønnsgrupp");});
test("lønnsinntekt -> lønnsinntekt", function() {deepEqual( Stem("lønnsinntekt"), "lønnsinntekt");});
test("lønnsintervall -> lønnsintervall", function() {deepEqual( Stem("lønnsintervall"), "lønnsintervall");});
test("lønnsintervallene -> lønnsintervall", function() {deepEqual( Stem("lønnsintervallene"), "lønnsintervall");});
test("lønnsintervaller -> lønnsintervall", function() {deepEqual( Stem("lønnsintervaller"), "lønnsintervall");});
test("lønnskostnad -> lønnskostnad", function() {deepEqual( Stem("lønnskostnad"), "lønnskostnad");});
test("lønnskostnader -> lønnskostnad", function() {deepEqual( Stem("lønnskostnader"), "lønnskostnad");});
test("lønnsmottakeren -> lønnsmottaker", function() {deepEqual( Stem("lønnsmottakeren"), "lønnsmottaker");});
test("lønnsnivå -> lønnsnivå", function() {deepEqual( Stem("lønnsnivå"), "lønnsnivå");});
test("lønnsnivåene -> lønnsnivå", function() {deepEqual( Stem("lønnsnivåene"), "lønnsnivå");});
test("lønnsnivåer -> lønnsnivå", function() {deepEqual( Stem("lønnsnivåer"), "lønnsnivå");});
test("lønnsnivået -> lønnsnivå", function() {deepEqual( Stem("lønnsnivået"), "lønnsnivå");});
test("lønnsomhet -> lønnsom", function() {deepEqual( Stem("lønnsomhet"), "lønnsom");});
test("lønnsomheten -> lønnsom", function() {deepEqual( Stem("lønnsomheten"), "lønnsom");});
test("lønnsomt -> lønnsomt", function() {deepEqual( Stem("lønnsomt"), "lønnsomt");});
test("lønnsoppgaver -> lønnsoppgav", function() {deepEqual( Stem("lønnsoppgaver"), "lønnsoppgav");});
test("lønnsstigning -> lønnsstigning", function() {deepEqual( Stem("lønnsstigning"), "lønnsstigning");});
test("lønnstaker -> lønnstak", function() {deepEqual( Stem("lønnstaker"), "lønnstak");});
test("lønnstakere -> lønnstaker", function() {deepEqual( Stem("lønnstakere"), "lønnstaker");});
test("lønnstakerne -> lønnstakern", function() {deepEqual( Stem("lønnstakerne"), "lønnstakern");});
test("lønnstillegg -> lønnstillegg", function() {deepEqual( Stem("lønnstillegg"), "lønnstillegg");});
test("lønnsutbetalinger -> lønnsutbetaling", function() {deepEqual( Stem("lønnsutbetalinger"), "lønnsutbetaling");});
test("lønnsutvikling -> lønnsutvikling", function() {deepEqual( Stem("lønnsutvikling"), "lønnsutvikling");});
test("lønnsutviklingen -> lønnsutvikling", function() {deepEqual( Stem("lønnsutviklingen"), "lønnsutvikling");});
test("lønnsvekst -> lønnsvekst", function() {deepEqual( Stem("lønnsvekst"), "lønnsvekst");});
test("lønnsveksten -> lønnsvekst", function() {deepEqual( Stem("lønnsveksten"), "lønnsvekst");});
test("lønnsøkning -> lønnsøkning", function() {deepEqual( Stem("lønnsøkning"), "lønnsøkning");});
test("lønnsøkningen -> lønnsøkning", function() {deepEqual( Stem("lønnsøkningen"), "lønnsøkning");});
test("lønnsøkninger -> lønnsøkning", function() {deepEqual( Stem("lønnsøkninger"), "lønnsøkning");});
test("lønsam -> lønsam", function() {deepEqual( Stem("lønsam"), "lønsam");});
test("lønsame -> lønsam", function() {deepEqual( Stem("lønsame"), "lønsam");});
test("lønsamt -> lønsamt", function() {deepEqual( Stem("lønsamt"), "lønsamt");});
test("lønsemd -> lønsemd", function() {deepEqual( Stem("lønsemd"), "lønsemd");});
test("lønte -> lønt", function() {deepEqual( Stem("lønte"), "lønt");});
test("løp -> løp", function() {deepEqual( Stem("løp"), "løp");});
test("løpe -> løp", function() {deepEqual( Stem("løpe"), "løp");});
test("løpefart -> løpefart", function() {deepEqual( Stem("løpefart"), "løpefart");});
test("løpende -> løp", function() {deepEqual( Stem("løpende"), "løp");});
test("løper -> løp", function() {deepEqual( Stem("løper"), "løp");});
test("løperen -> løper", function() {deepEqual( Stem("løperen"), "løper");});
test("løpet -> løp", function() {deepEqual( Stem("løpet"), "løp");});
test("løpetid -> løpetid", function() {deepEqual( Stem("løpetid"), "løpetid");});
test("løpetiden -> løpetid", function() {deepEqual( Stem("løpetiden"), "løpetid");});
test("løpt -> løpt", function() {deepEqual( Stem("løpt"), "løpt");});
test("lørenskogområdet -> lørenskogområd", function() {deepEqual( Stem("lørenskogområdet"), "lørenskogområd");});
test("løs -> løs", function() {deepEqual( Stem("løs"), "løs");});
test("løsbart -> løsbart", function() {deepEqual( Stem("løsbart"), "løsbart");});
test("løse -> løs", function() {deepEqual( Stem("løse"), "løs");});
test("løselig -> løs", function() {deepEqual( Stem("løselig"), "løs");});
test("løsepenger -> løsepeng", function() {deepEqual( Stem("løsepenger"), "løsepeng");});
test("løser -> løs", function() {deepEqual( Stem("løser"), "løs");});
test("løses -> løs", function() {deepEqual( Stem("løses"), "løs");});
test("løsgods -> løsgod", function() {deepEqual( Stem("løsgods"), "løsgod");});
test("løsne -> løsn", function() {deepEqual( Stem("løsne"), "løsn");});
test("løsner -> løsn", function() {deepEqual( Stem("løsner"), "løsn");});
test("løsning -> løsning", function() {deepEqual( Stem("løsning"), "løsning");});
test("løsningen -> løsning", function() {deepEqual( Stem("løsningen"), "løsning");});
test("løsningene -> løsning", function() {deepEqual( Stem("løsningene"), "løsning");});
test("løsninger -> løsning", function() {deepEqual( Stem("løsninger"), "løsning");});
test("løsningers -> løsning", function() {deepEqual( Stem("løsningers"), "løsning");});
test("løst -> løst", function() {deepEqual( Stem("løst"), "løst");});
test("løv -> løv", function() {deepEqual( Stem("løv"), "løv");});
test("løvverket -> løvverk", function() {deepEqual( Stem("løvverket"), "løvverk");});
test("løysast -> løys", function() {deepEqual( Stem("løysast"), "løys");});
test("løyse -> løys", function() {deepEqual( Stem("løyse"), "løys");});
test("løysing -> løysing", function() {deepEqual( Stem("løysing"), "løysing");});
test("løysinga -> løysing", function() {deepEqual( Stem("løysinga"), "løysing");});
test("løysingane -> løysing", function() {deepEqual( Stem("løysingane"), "løysing");});
test("løysingar -> løysing", function() {deepEqual( Stem("løysingar"), "løysing");});
test("løysingskravet -> løysingskrav", function() {deepEqual( Stem("løysingskravet"), "løysingskrav");});
test("løysingsrett -> løysingsrett", function() {deepEqual( Stem("løysingsrett"), "løysingsrett");});
test("løysingsrettar -> løysingsrett", function() {deepEqual( Stem("løysingsrettar"), "løysingsrett");});
test("løysingsretten -> løysingsrett", function() {deepEqual( Stem("løysingsretten"), "løysingsrett");});
test("løysingsrettslova -> løysingsrett", function() {deepEqual( Stem("løysingsrettslova"), "løysingsrett");});
test("løysingssummen -> løysingssumm", function() {deepEqual( Stem("løysingssummen"), "løysingssumm");});
test("løysingsummen -> løysingsumm", function() {deepEqual( Stem("løysingsummen"), "løysingsumm");});
test("løyst -> løyst", function() {deepEqual( Stem("løyst"), "løyst");});
test("løyste -> løyst", function() {deepEqual( Stem("løyste"), "løyst");});
test("løyvde -> løyvd", function() {deepEqual( Stem("løyvde"), "løyvd");});
test("løyve -> løyv", function() {deepEqual( Stem("løyve"), "løyv");});
test("løyvet -> løyv", function() {deepEqual( Stem("løyvet"), "løyv");});
test("løyvinga -> løyving", function() {deepEqual( Stem("løyvinga"), "løyving");});
test("m -> m", function() {deepEqual( Stem("m"), "m");});
test("madslien -> madsli", function() {deepEqual( Stem("madslien"), "madsli");});
test("maersk -> maersk", function() {deepEqual( Stem("maersk"), "maersk");});
test("magemålet -> magemål", function() {deepEqual( Stem("magemålet"), "magemål");});
test("mager -> mag", function() {deepEqual( Stem("mager"), "mag");});
test("magi -> magi", function() {deepEqual( Stem("magi"), "magi");});
test("magisk -> magisk", function() {deepEqual( Stem("magisk"), "magisk");});
test("magiske -> magisk", function() {deepEqual( Stem("magiske"), "magisk");});
test("magne -> magn", function() {deepEqual( Stem("magne"), "magn");});
test("magnor -> magnor", function() {deepEqual( Stem("magnor"), "magnor");});
test("magnus -> magnus", function() {deepEqual( Stem("magnus"), "magnus");});
test("mai -> mai", function() {deepEqual( Stem("mai"), "mai");});
test("makeløs -> makeløs", function() {deepEqual( Stem("makeløs"), "makeløs");});
test("maken -> mak", function() {deepEqual( Stem("maken"), "mak");});
test("makeskifte -> makeskift", function() {deepEqual( Stem("makeskifte"), "makeskift");});
test("makrobaserte -> makrobaser", function() {deepEqual( Stem("makrobaserte"), "makrobaser");});
test("makroøkonomiske -> makroøkonomisk", function() {deepEqual( Stem("makroøkonomiske"), "makroøkonomisk");});
test("maksimal -> maksimal", function() {deepEqual( Stem("maksimal"), "maksimal");});
test("maksimale -> maksimal", function() {deepEqual( Stem("maksimale"), "maksimal");});
test("maksimalgrense -> maksimalgrens", function() {deepEqual( Stem("maksimalgrense"), "maksimalgrens");});
test("maksimalgrensen -> maksimalgrens", function() {deepEqual( Stem("maksimalgrensen"), "maksimalgrens");});
test("maksimalgrenser -> maksimalgrens", function() {deepEqual( Stem("maksimalgrenser"), "maksimalgrens");});
test("maksimalpris -> maksimalpris", function() {deepEqual( Stem("maksimalpris"), "maksimalpris");});
test("maksimalprisane -> maksimalpris", function() {deepEqual( Stem("maksimalprisane"), "maksimalpris");});
test("maksimalprisar -> maksimalpris", function() {deepEqual( Stem("maksimalprisar"), "maksimalpris");});
test("maksimalprisen -> maksimalpris", function() {deepEqual( Stem("maksimalprisen"), "maksimalpris");});
test("maksimalprisregulering -> maksimalprisregulering", function() {deepEqual( Stem("maksimalprisregulering"), "maksimalprisregulering");});
test("maksimalprisreguleringa -> maksimalprisregulering", function() {deepEqual( Stem("maksimalprisreguleringa"), "maksimalprisregulering");});
test("maksimalsatsene -> maksimalsats", function() {deepEqual( Stem("maksimalsatsene"), "maksimalsats");});
test("maksimalsatser -> maksimalsats", function() {deepEqual( Stem("maksimalsatser"), "maksimalsats");});
test("maksimalt -> maksimalt", function() {deepEqual( Stem("maksimalt"), "maksimalt");});
test("maksimalytelser -> maksimalyt", function() {deepEqual( Stem("maksimalytelser"), "maksimalyt");});
test("maksimere -> maksimer", function() {deepEqual( Stem("maksimere"), "maksimer");});
test("maksimum -> maksimum", function() {deepEqual( Stem("maksimum"), "maksimum");});
test("makt -> makt", function() {deepEqual( Stem("makt"), "makt");});
test("makta -> makt", function() {deepEqual( Stem("makta"), "makt");});
test("maktar -> makt", function() {deepEqual( Stem("maktar"), "makt");});
test("maktene -> makt", function() {deepEqual( Stem("maktene"), "makt");});
test("makter -> makt", function() {deepEqual( Stem("makter"), "makt");});
test("maktmisbruk -> maktmisbruk", function() {deepEqual( Stem("maktmisbruk"), "maktmisbruk");});
test("mal -> mal", function() {deepEqual( Stem("mal"), "mal");});
test("malaren -> malar", function() {deepEqual( Stem("malaren"), "malar");});
test("male -> mal", function() {deepEqual( Stem("male"), "mal");});
test("malende -> mal", function() {deepEqual( Stem("malende"), "mal");});
test("maler -> mal", function() {deepEqual( Stem("maler"), "mal");});
test("mallmen -> mallm", function() {deepEqual( Stem("mallmen"), "mallm");});
test("malm -> malm", function() {deepEqual( Stem("malm"), "malm");});
test("malstrøm -> malstrøm", function() {deepEqual( Stem("malstrøm"), "malstrøm");});
test("malt -> malt", function() {deepEqual( Stem("malt"), "malt");});
test("man -> man", function() {deepEqual( Stem("man"), "man");});
test("mandat -> mandat", function() {deepEqual( Stem("mandat"), "mandat");});
test("mandatet -> mandat", function() {deepEqual( Stem("mandatet"), "mandat");});
test("mandatets -> mandat", function() {deepEqual( Stem("mandatets"), "mandat");});
test("manen -> man", function() {deepEqual( Stem("manen"), "man");});
test("mange -> mang", function() {deepEqual( Stem("mange"), "mang");});
test("mangehodete -> mangehodet", function() {deepEqual( Stem("mangehodete"), "mangehodet");});
test("mangel -> mangel", function() {deepEqual( Stem("mangel"), "mangel");});
test("mangelen -> mangel", function() {deepEqual( Stem("mangelen"), "mangel");});
test("mangelfull -> mangelfull", function() {deepEqual( Stem("mangelfull"), "mangelfull");});
test("mangelfulle -> mangelfull", function() {deepEqual( Stem("mangelfulle"), "mangelfull");});
test("mangelskrav -> mangelskrav", function() {deepEqual( Stem("mangelskrav"), "mangelskrav");});
test("mangelskrava -> mangelskrav", function() {deepEqual( Stem("mangelskrava"), "mangelskrav");});
test("mangfold -> mangfold", function() {deepEqual( Stem("mangfold"), "mangfold");});
test("manglande -> mangl", function() {deepEqual( Stem("manglande"), "mangl");});
test("manglane -> mangl", function() {deepEqual( Stem("manglane"), "mangl");});
test("manglar -> mangl", function() {deepEqual( Stem("manglar"), "mangl");});
test("manglende -> mangl", function() {deepEqual( Stem("manglende"), "mangl");});
test("mangler -> mangl", function() {deepEqual( Stem("mangler"), "mangl");});
test("manglet -> mangl", function() {deepEqual( Stem("manglet"), "mangl");});
test("mangt -> mangt", function() {deepEqual( Stem("mangt"), "mangt");});
test("manken -> mank", function() {deepEqual( Stem("manken"), "mank");});
test("mann -> mann", function() {deepEqual( Stem("mann"), "mann");});
test("mannefall -> mannefall", function() {deepEqual( Stem("mannefall"), "mannefall");});
test("mannen -> mann", function() {deepEqual( Stem("mannen"), "mann");});
test("mannfolkgæern -> mannfolkgæern", function() {deepEqual( Stem("mannfolkgæern"), "mannfolkgæern");});
test("manngard -> manngard", function() {deepEqual( Stem("manngard"), "manngard");});
test("manngarden -> manngard", function() {deepEqual( Stem("manngarden"), "manngard");});
test("mannlig -> mann", function() {deepEqual( Stem("mannlig"), "mann");});
test("mannlige -> mann", function() {deepEqual( Stem("mannlige"), "mann");});
test("manns -> mann", function() {deepEqual( Stem("manns"), "mann");});
test("mannskap -> mannskap", function() {deepEqual( Stem("mannskap"), "mannskap");});
test("mannvonde -> mannvond", function() {deepEqual( Stem("mannvonde"), "mannvond");});
test("mao -> mao", function() {deepEqual( Stem("mao"), "mao");});
test("mara -> mar", function() {deepEqual( Stem("mara"), "mar");});
test("marburg -> marburg", function() {deepEqual( Stem("marburg"), "marburg");});
test("margareta -> margaret", function() {deepEqual( Stem("margareta"), "margaret");});
test("margen -> marg", function() {deepEqual( Stem("margen"), "marg");});
test("marginale -> marginal", function() {deepEqual( Stem("marginale"), "marginal");});
test("marginalsatsen -> marginalsats", function() {deepEqual( Stem("marginalsatsen"), "marginalsats");});
test("marginalskatt -> marginalskatt", function() {deepEqual( Stem("marginalskatt"), "marginalskatt");});
test("marginalskatten -> marginalskatt", function() {deepEqual( Stem("marginalskatten"), "marginalskatt");});
test("marginalskatteprosentene -> marginalskatteprosent", function() {deepEqual( Stem("marginalskatteprosentene"), "marginalskatteprosent");});
test("marginalskattesatsen -> marginalskattesats", function() {deepEqual( Stem("marginalskattesatsen"), "marginalskattesats");});
test("marginalt -> marginalt", function() {deepEqual( Stem("marginalt"), "marginalt");});
test("maritim -> maritim", function() {deepEqual( Stem("maritim"), "maritim");});
test("maritime -> maritim", function() {deepEqual( Stem("maritime"), "maritim");});
test("mark -> mark", function() {deepEqual( Stem("mark"), "mark");});
test("marked -> marked", function() {deepEqual( Stem("marked"), "marked");});
test("markedene -> marked", function() {deepEqual( Stem("markedene"), "marked");});
test("markeder -> marked", function() {deepEqual( Stem("markeder"), "marked");});
test("markedet -> marked", function() {deepEqual( Stem("markedet"), "marked");});
test("markedets -> marked", function() {deepEqual( Stem("markedets"), "marked");});
test("markeds -> marked", function() {deepEqual( Stem("markeds"), "marked");});
test("markedsadgang -> markedsadgang", function() {deepEqual( Stem("markedsadgang"), "markedsadgang");});
test("markedsadgangen -> markedsadgang", function() {deepEqual( Stem("markedsadgangen"), "markedsadgang");});
test("markedsaktørene -> markedsaktør", function() {deepEqual( Stem("markedsaktørene"), "markedsaktør");});
test("markedsaktører -> markedsaktør", function() {deepEqual( Stem("markedsaktører"), "markedsaktør");});
test("markedsandel -> markedsandel", function() {deepEqual( Stem("markedsandel"), "markedsandel");});
test("markedsandeler -> markedsandel", function() {deepEqual( Stem("markedsandeler"), "markedsandel");});
test("markedsavkastning -> markedsavkastning", function() {deepEqual( Stem("markedsavkastning"), "markedsavkastning");});
test("markedsdeltaker -> markedsdeltak", function() {deepEqual( Stem("markedsdeltaker"), "markedsdeltak");});
test("markedsdominert -> markedsdominer", function() {deepEqual( Stem("markedsdominert"), "markedsdominer");});
test("markedsføring -> markedsføring", function() {deepEqual( Stem("markedsføring"), "markedsføring");});
test("markedsinndeks -> markedsinndeks", function() {deepEqual( Stem("markedsinndeks"), "markedsinndeks");});
test("markedsmakt -> markedsmakt", function() {deepEqual( Stem("markedsmakt"), "markedsmakt");});
test("markedsmekanismer -> markedsmekanism", function() {deepEqual( Stem("markedsmekanismer"), "markedsmekanism");});
test("markedsmessig -> markedsmess", function() {deepEqual( Stem("markedsmessig"), "markedsmess");});
test("markedsmessige -> markedsmess", function() {deepEqual( Stem("markedsmessige"), "markedsmess");});
test("markedsnærhet -> markedsnær", function() {deepEqual( Stem("markedsnærhet"), "markedsnær");});
test("markedsnærheten -> markedsnær", function() {deepEqual( Stem("markedsnærheten"), "markedsnær");});
test("markedsnært -> markedsnært", function() {deepEqual( Stem("markedsnært"), "markedsnært");});
test("markedsområde -> markedsområd", function() {deepEqual( Stem("markedsområde"), "markedsområd");});
test("markedsområder -> markedsområd", function() {deepEqual( Stem("markedsområder"), "markedsområd");});
test("markedsposisjon -> markedsposisjon", function() {deepEqual( Stem("markedsposisjon"), "markedsposisjon");});
test("markedsregulering -> markedsregulering", function() {deepEqual( Stem("markedsregulering"), "markedsregulering");});
test("markedsrente -> markedsrent", function() {deepEqual( Stem("markedsrente"), "markedsrent");});
test("markedsrisiko -> markedsrisiko", function() {deepEqual( Stem("markedsrisiko"), "markedsrisiko");});
test("markedssituasjonen -> markedssituasjon", function() {deepEqual( Stem("markedssituasjonen"), "markedssituasjon");});
test("markedstilgang -> markedstilgang", function() {deepEqual( Stem("markedstilgang"), "markedstilgang");});
test("markedstilpasning -> markedstilpasning", function() {deepEqual( Stem("markedstilpasning"), "markedstilpasning");});
test("markedstilpassede -> markedstilpass", function() {deepEqual( Stem("markedstilpassede"), "markedstilpass");});
test("markedsutviklingen -> markedsutvikling", function() {deepEqual( Stem("markedsutviklingen"), "markedsutvikling");});
test("markedsverdien -> markedsverdi", function() {deepEqual( Stem("markedsverdien"), "markedsverdi");});
test("markedsverdiene -> markedsverdi", function() {deepEqual( Stem("markedsverdiene"), "markedsverdi");});
test("markedsverdiprinsippet -> markedsverdiprinsipp", function() {deepEqual( Stem("markedsverdiprinsippet"), "markedsverdiprinsipp");});
test("markedsvilkår -> markedsvilkår", function() {deepEqual( Stem("markedsvilkår"), "markedsvilkår");});
test("marken -> mark", function() {deepEqual( Stem("marken"), "mark");});
test("markene -> mark", function() {deepEqual( Stem("markene"), "mark");});
test("markerast -> marker", function() {deepEqual( Stem("markerast"), "marker");});
test("markere -> marker", function() {deepEqual( Stem("markere"), "marker");});
test("markering -> markering", function() {deepEqual( Stem("markering"), "markering");});
test("markert -> marker", function() {deepEqual( Stem("markert"), "marker");});
test("market -> mark", function() {deepEqual( Stem("market"), "mark");});
test("marknad -> marknad", function() {deepEqual( Stem("marknad"), "marknad");});
test("marknaden -> marknad", function() {deepEqual( Stem("marknaden"), "marknad");});
test("marknadsendringar -> marknadsendring", function() {deepEqual( Stem("marknadsendringar"), "marknadsendring");});
test("marknadspris -> marknadspris", function() {deepEqual( Stem("marknadspris"), "marknadspris");});
test("marknadsprisane -> marknadspris", function() {deepEqual( Stem("marknadsprisane"), "marknadspris");});
test("marknadsprisar -> marknadspris", function() {deepEqual( Stem("marknadsprisar"), "marknadspris");});
test("marknadsprisen -> marknadspris", function() {deepEqual( Stem("marknadsprisen"), "marknadspris");});
test("marknadstilhøva -> marknadstilhøv", function() {deepEqual( Stem("marknadstilhøva"), "marknadstilhøv");});
test("marknadstilhøve -> marknadstilhøv", function() {deepEqual( Stem("marknadstilhøve"), "marknadstilhøv");});
test("marknadsutviklinga -> marknadsutvikling", function() {deepEqual( Stem("marknadsutviklinga"), "marknadsutvikling");});
test("marknadsverdien -> marknadsverdi", function() {deepEqual( Stem("marknadsverdien"), "marknadsverdi");});
test("markspiste -> markspist", function() {deepEqual( Stem("markspiste"), "markspist");});
test("markstukne -> markstukn", function() {deepEqual( Stem("markstukne"), "markstukn");});
test("mars -> mar", function() {deepEqual( Stem("mars"), "mar");});
test("martin -> martin", function() {deepEqual( Stem("martin"), "martin");});
test("mase -> mas", function() {deepEqual( Stem("mase"), "mas");});
test("masende -> mas", function() {deepEqual( Stem("masende"), "mas");});
test("maser -> mas", function() {deepEqual( Stem("maser"), "mas");});
test("maskene -> mask", function() {deepEqual( Stem("maskene"), "mask");});
test("masker -> mask", function() {deepEqual( Stem("masker"), "mask");});
test("maskeradene -> maskerad", function() {deepEqual( Stem("maskeradene"), "maskerad");});
test("maskin -> maskin", function() {deepEqual( Stem("maskin"), "maskin");});
test("maskiner -> maskin", function() {deepEqual( Stem("maskiner"), "maskin");});
test("maskinlesbar -> maskinlesb", function() {deepEqual( Stem("maskinlesbar"), "maskinlesb");});
test("maskinstasjonar -> maskinstasjon", function() {deepEqual( Stem("maskinstasjonar"), "maskinstasjon");});
test("maskinstopp -> maskinstopp", function() {deepEqual( Stem("maskinstopp"), "maskinstopp");});
test("massetransporter -> massetransport", function() {deepEqual( Stem("massetransporter"), "massetransport");});
test("mastemyr -> mastemyr", function() {deepEqual( Stem("mastemyr"), "mastemyr");});
test("masten -> mast", function() {deepEqual( Stem("masten"), "mast");});
test("mat -> mat", function() {deepEqual( Stem("mat"), "mat");});
test("matbordet -> matbord", function() {deepEqual( Stem("matbordet"), "matbord");});
test("maten -> mat", function() {deepEqual( Stem("maten"), "mat");});
test("mater -> mat", function() {deepEqual( Stem("mater"), "mat");});
test("materialane -> material", function() {deepEqual( Stem("materialane"), "material");});
test("materialar -> material", function() {deepEqual( Stem("materialar"), "material");});
test("materiale -> material", function() {deepEqual( Stem("materiale"), "material");});
test("materialet -> material", function() {deepEqual( Stem("materialet"), "material");});
test("materialiserer -> materialiser", function() {deepEqual( Stem("materialiserer"), "materialiser");});
test("materiell -> materiell", function() {deepEqual( Stem("materiell"), "materiell");});
test("matjord -> matjord", function() {deepEqual( Stem("matjord"), "matjord");});
test("matlyst -> matlyst", function() {deepEqual( Stem("matlyst"), "matlyst");});
test("matmor -> matmor", function() {deepEqual( Stem("matmor"), "matmor");});
test("matrestene -> matrest", function() {deepEqual( Stem("matrestene"), "matrest");});
test("matsekken -> matsekk", function() {deepEqual( Stem("matsekken"), "matsekk");});
test("matvarer -> matvar", function() {deepEqual( Stem("matvarer"), "matvar");});
test("maurtue -> maurtu", function() {deepEqual( Stem("maurtue"), "maurtu");});
test("mauseth -> mauseth", function() {deepEqual( Stem("mauseth"), "mauseth");});
test("mave -> mav", function() {deepEqual( Stem("mave"), "mav");});
test("mavemålet -> mavemål", function() {deepEqual( Stem("mavemålet"), "mavemål");});
test("maven -> mav", function() {deepEqual( Stem("maven"), "mav");});
test("med -> med", function() {deepEqual( Stem("med"), "med");});
test("medan -> medan", function() {deepEqual( Stem("medan"), "medan");});
test("meddele -> meddel", function() {deepEqual( Stem("meddele"), "meddel");});
test("medeier -> medei", function() {deepEqual( Stem("medeier"), "medei");});
test("medeigar -> med", function() {deepEqual( Stem("medeigar"), "med");});
test("medeigarar -> medeigar", function() {deepEqual( Stem("medeigarar"), "medeigar");});
test("medføre -> medfør", function() {deepEqual( Stem("medføre"), "medfør");});
test("medfører -> medfør", function() {deepEqual( Stem("medfører"), "medfør");});
test("medført -> medført", function() {deepEqual( Stem("medført"), "medført");});
test("medgift -> medgift", function() {deepEqual( Stem("medgift"), "medgift");});
test("medgått -> medgått", function() {deepEqual( Stem("medgått"), "medgått");});
test("medhald -> medhald", function() {deepEqual( Stem("medhald"), "medhald");});
test("medhjelpar -> medhjelp", function() {deepEqual( Stem("medhjelpar"), "medhjelp");});
test("medhjelparen -> medhjelpar", function() {deepEqual( Stem("medhjelparen"), "medhjelpar");});
test("medhjelper -> medhjelp", function() {deepEqual( Stem("medhjelper"), "medhjelp");});
test("medhold -> medhold", function() {deepEqual( Stem("medhold"), "medhold");});
test("medkontrahent -> medkontrahent", function() {deepEqual( Stem("medkontrahent"), "medkontrahent");});
test("medkontrahentar -> medkontrahent", function() {deepEqual( Stem("medkontrahentar"), "medkontrahent");});
test("medkontrahenten -> medkontrahent", function() {deepEqual( Stem("medkontrahenten"), "medkontrahent");});
test("medkontrahentens -> medkontrahent", function() {deepEqual( Stem("medkontrahentens"), "medkontrahent");});
test("medlem -> medlem", function() {deepEqual( Stem("medlem"), "medlem");});
test("medlemene -> medlem", function() {deepEqual( Stem("medlemene"), "medlem");});
test("medlemer -> medlem", function() {deepEqual( Stem("medlemer"), "medlem");});
test("medlemmarna -> medlemmarn", function() {deepEqual( Stem("medlemmarna"), "medlemmarn");});
test("medlemmarnas -> medlemmarn", function() {deepEqual( Stem("medlemmarnas"), "medlemmarn");});
test("medlemmen -> medlemm", function() {deepEqual( Stem("medlemmen"), "medlemm");});
test("medlemmene -> medlemm", function() {deepEqual( Stem("medlemmene"), "medlemm");});
test("medlemmenes -> medlemm", function() {deepEqual( Stem("medlemmenes"), "medlemm");});
test("medlemmer -> medlemm", function() {deepEqual( Stem("medlemmer"), "medlemm");});
test("medlemmers -> medlemm", function() {deepEqual( Stem("medlemmers"), "medlemm");});
test("medlemmet -> medlemm", function() {deepEqual( Stem("medlemmet"), "medlemm");});
test("medlemmets -> medlemm", function() {deepEqual( Stem("medlemmets"), "medlemm");});
test("medlems -> medlem", function() {deepEqual( Stem("medlems"), "medlem");});
test("medlemsaktiviteten -> medlemsaktivitet", function() {deepEqual( Stem("medlemsaktiviteten"), "medlemsaktivitet");});
test("medlemsblad -> medlemsblad", function() {deepEqual( Stem("medlemsblad"), "medlemsblad");});
test("medlemsdemokrati -> medlemsdemokrati", function() {deepEqual( Stem("medlemsdemokrati"), "medlemsdemokrati");});
test("medlemsfordel -> medlemsfordel", function() {deepEqual( Stem("medlemsfordel"), "medlemsfordel");});
test("medlemsfordelane -> medlemsfordel", function() {deepEqual( Stem("medlemsfordelane"), "medlemsfordel");});
test("medlemsfordelar -> medlemsfordel", function() {deepEqual( Stem("medlemsfordelar"), "medlemsfordel");});
test("medlemsforeiningar -> medlemsforeining", function() {deepEqual( Stem("medlemsforeiningar"), "medlemsforeining");});
test("medlemsføretak -> medlemsføretak", function() {deepEqual( Stem("medlemsføretak"), "medlemsføretak");});
test("medlemsgenerasjonar -> medlemsgenerasjon", function() {deepEqual( Stem("medlemsgenerasjonar"), "medlemsgenerasjon");});
test("medlemsgrupper -> medlemsgrupp", function() {deepEqual( Stem("medlemsgrupper"), "medlemsgrupp");});
test("medlemsinteresser -> medlemsinteress", function() {deepEqual( Stem("medlemsinteresser"), "medlemsinteress");});
test("medlemskap -> medlemskap", function() {deepEqual( Stem("medlemskap"), "medlemskap");});
test("medlemskapen -> medlemskap", function() {deepEqual( Stem("medlemskapen"), "medlemskap");});
test("medlemskapet -> medlemskap", function() {deepEqual( Stem("medlemskapet"), "medlemskap");});
test("medlemskapsperioden -> medlemskapsperiod", function() {deepEqual( Stem("medlemskapsperioden"), "medlemskapsperiod");});
test("medlemskarrieren -> medlemskarrier", function() {deepEqual( Stem("medlemskarrieren"), "medlemskarrier");});
test("medlemskommunene -> medlemskommun", function() {deepEqual( Stem("medlemskommunene"), "medlemskommun");});
test("medlemskontroll -> medlemskontroll", function() {deepEqual( Stem("medlemskontroll"), "medlemskontroll");});
test("medlemskontrollen -> medlemskontroll", function() {deepEqual( Stem("medlemskontrollen"), "medlemskontroll");});
test("medlemskontrollerte -> medlemskontroller", function() {deepEqual( Stem("medlemskontrollerte"), "medlemskontroller");});
test("medlemskort -> medlemskort", function() {deepEqual( Stem("medlemskort"), "medlemskort");});
test("medlemslag -> medlemslag", function() {deepEqual( Stem("medlemslag"), "medlemslag");});
test("medlemslaga -> medlemslag", function() {deepEqual( Stem("medlemslaga"), "medlemslag");});
test("medlemsland -> medlemsland", function() {deepEqual( Stem("medlemsland"), "medlemsland");});
test("medlemslands -> medlemsland", function() {deepEqual( Stem("medlemslands"), "medlemsland");});
test("medlemsorganisasjon -> medlemsorganisasjon", function() {deepEqual( Stem("medlemsorganisasjon"), "medlemsorganisasjon");});
test("medlemsorganisasjonar -> medlemsorganisasjon", function() {deepEqual( Stem("medlemsorganisasjonar"), "medlemsorganisasjon");});
test("medlemsskap -> medlemsskap", function() {deepEqual( Stem("medlemsskap"), "medlemsskap");});
test("medlemsskapsreglene -> medlemsskapsregl", function() {deepEqual( Stem("medlemsskapsreglene"), "medlemsskapsregl");});
test("medlemsstatene -> medlemsstat", function() {deepEqual( Stem("medlemsstatene"), "medlemsstat");});
test("medlemsstatenes -> medlemsstat", function() {deepEqual( Stem("medlemsstatenes"), "medlemsstat");});
test("medlemsstater -> medlemsstat", function() {deepEqual( Stem("medlemsstater"), "medlemsstat");});
test("medlemsstokken -> medlemsstokk", function() {deepEqual( Stem("medlemsstokken"), "medlemsstokk");});
test("medlemsstyret -> medlemsstyr", function() {deepEqual( Stem("medlemsstyret"), "medlemsstyr");});
test("medlemsstyring -> medlemsstyring", function() {deepEqual( Stem("medlemsstyring"), "medlemsstyring");});
test("medlemsstyrte -> medlemsstyrt", function() {deepEqual( Stem("medlemsstyrte"), "medlemsstyrt");});
test("medlemstal -> medlemstal", function() {deepEqual( Stem("medlemstal"), "medlemstal");});
test("medlemstallet -> medlemstall", function() {deepEqual( Stem("medlemstallet"), "medlemstall");});
test("medlemstenester -> medlemstenest", function() {deepEqual( Stem("medlemstenester"), "medlemstenest");});
test("medlemstid -> medlemstid", function() {deepEqual( Stem("medlemstid"), "medlemstid");});
test("medlemstiden -> medlemstid", function() {deepEqual( Stem("medlemstiden"), "medlemstid");});
test("medmindre -> medmindr", function() {deepEqual( Stem("medmindre"), "medmindr");});
test("medregne -> medregn", function() {deepEqual( Stem("medregne"), "medregn");});
test("medregnet -> medregn", function() {deepEqual( Stem("medregnet"), "medregn");});
test("medregning -> medregning", function() {deepEqual( Stem("medregning"), "medregning");});
test("medregningen -> medregning", function() {deepEqual( Stem("medregningen"), "medregning");});
test("medregningsadgangen -> medregningsadgang", function() {deepEqual( Stem("medregningsadgangen"), "medregningsadgang");});
test("medregningsreglene -> medregningsregl", function() {deepEqual( Stem("medregningsreglene"), "medregningsregl");});
test("medrekna -> medrekn", function() {deepEqual( Stem("medrekna"), "medrekn");});
test("medråderett -> medråderett", function() {deepEqual( Stem("medråderett"), "medråderett");});
test("medråderetten -> medråderett", function() {deepEqual( Stem("medråderetten"), "medråderett");});
test("medverka -> medverk", function() {deepEqual( Stem("medverka"), "medverk");});
test("medverkande -> medverk", function() {deepEqual( Stem("medverkande"), "medverk");});
test("medverkar -> medverk", function() {deepEqual( Stem("medverkar"), "medverk");});
test("medverkaransvaret -> medverkaransvar", function() {deepEqual( Stem("medverkaransvaret"), "medverkaransvar");});
test("medverke -> medverk", function() {deepEqual( Stem("medverke"), "medverk");});
test("medverknad -> medverknad", function() {deepEqual( Stem("medverknad"), "medverknad");});
test("medverknaden -> medverknad", function() {deepEqual( Stem("medverknaden"), "medverknad");});
test("medvind -> medvind", function() {deepEqual( Stem("medvind"), "medvind");});
test("medvirke -> medvirk", function() {deepEqual( Stem("medvirke"), "medvirk");});
test("medvirkning -> medvirkning", function() {deepEqual( Stem("medvirkning"), "medvirkning");});
test("meg -> meg", function() {deepEqual( Stem("meg"), "meg");});
test("meget -> meg", function() {deepEqual( Stem("meget"), "meg");});
test("megleren -> megler", function() {deepEqual( Stem("megleren"), "megler");});
test("mehr -> mehr", function() {deepEqual( Stem("mehr"), "mehr");});
test("meieri -> meieri", function() {deepEqual( Stem("meieri"), "meieri");});
test("meine -> mein", function() {deepEqual( Stem("meine"), "mein");});
test("meiner -> mein", function() {deepEqual( Stem("meiner"), "mein");});
test("meininga -> meining", function() {deepEqual( Stem("meininga"), "meining");});
test("meiningane -> meining", function() {deepEqual( Stem("meiningane"), "meining");});
test("meiningar -> meining", function() {deepEqual( Stem("meiningar"), "meining");});
test("meiningsinnhald -> meiningsinnhald", function() {deepEqual( Stem("meiningsinnhald"), "meiningsinnhald");});
test("meint -> meint", function() {deepEqual( Stem("meint"), "meint");});
test("meinte -> meint", function() {deepEqual( Stem("meinte"), "meint");});
test("meir -> meir", function() {deepEqual( Stem("meir"), "meir");});
test("meirinntekter -> meirinntekt", function() {deepEqual( Stem("meirinntekter"), "meirinntekt");});
test("meirkostnader -> meirkostnad", function() {deepEqual( Stem("meirkostnader"), "meirkostnad");});
test("meirverdiavgift -> meirverdiavgift", function() {deepEqual( Stem("meirverdiavgift"), "meirverdiavgift");});
test("meirverdiavgifta -> meirverdiavgift", function() {deepEqual( Stem("meirverdiavgifta"), "meirverdiavgift");});
test("mekanisk -> mekanisk", function() {deepEqual( Stem("mekanisk"), "mekanisk");});
test("mekanisme -> mekanism", function() {deepEqual( Stem("mekanisme"), "mekanism");});
test("meklartenester -> meklartenest", function() {deepEqual( Stem("meklartenester"), "meklartenest");});
test("mektig -> mekt", function() {deepEqual( Stem("mektig"), "mekt");});
test("mektige -> mekt", function() {deepEqual( Stem("mektige"), "mekt");});
test("mektigere -> mektiger", function() {deepEqual( Stem("mektigere"), "mektiger");});
test("mektigste -> mektigst", function() {deepEqual( Stem("mektigste"), "mektigst");});
test("meld -> meld", function() {deepEqual( Stem("meld"), "meld");});
test("meldast -> meld", function() {deepEqual( Stem("meldast"), "meld");});
test("melde -> meld", function() {deepEqual( Stem("melde"), "meld");});
test("melder -> meld", function() {deepEqual( Stem("melder"), "meld");});
test("meldes -> meld", function() {deepEqual( Stem("meldes"), "meld");});
test("melding -> melding", function() {deepEqual( Stem("melding"), "melding");});
test("meldinga -> melding", function() {deepEqual( Stem("meldinga"), "melding");});
test("meldingane -> melding", function() {deepEqual( Stem("meldingane"), "melding");});
test("meldingar -> melding", function() {deepEqual( Stem("meldingar"), "melding");});
test("meldingen -> melding", function() {deepEqual( Stem("meldingen"), "melding");});
test("meldingene -> melding", function() {deepEqual( Stem("meldingene"), "melding");});
test("meldinger -> melding", function() {deepEqual( Stem("meldinger"), "melding");});
test("meldt -> meld", function() {deepEqual( Stem("meldt"), "meld");});
test("melk -> melk", function() {deepEqual( Stem("melk"), "melk");});
test("melket -> melk", function() {deepEqual( Stem("melket"), "melk");});
test("mellan -> mellan", function() {deepEqual( Stem("mellan"), "mellan");});
test("mellom -> mellom", function() {deepEqual( Stem("mellom"), "mellom");});
test("mellombels -> mellombel", function() {deepEqual( Stem("mellombels"), "mellombel");});
test("mellomkomst -> mellomkomst", function() {deepEqual( Stem("mellomkomst"), "mellomkomst");});
test("mellomlagring -> mellomlagring", function() {deepEqual( Stem("mellomlagring"), "mellomlagring");});
test("mellomlang -> mellomlang", function() {deepEqual( Stem("mellomlang"), "mellomlang");});
test("mellomlange -> mellomlang", function() {deepEqual( Stem("mellomlange"), "mellomlang");});
test("mellomlangsiktige -> mellomlangsikt", function() {deepEqual( Stem("mellomlangsiktige"), "mellomlangsikt");});
test("mellomlangt -> mellomlangt", function() {deepEqual( Stem("mellomlangt"), "mellomlangt");});
test("mellomliggjande -> mellomliggj", function() {deepEqual( Stem("mellomliggjande"), "mellomliggj");});
test("mellomløsninger -> mellomløsning", function() {deepEqual( Stem("mellomløsninger"), "mellomløsning");});
test("mellomløysing -> mellomløysing", function() {deepEqual( Stem("mellomløysing"), "mellomløysing");});
test("mellommann -> mellommann", function() {deepEqual( Stem("mellommann"), "mellommann");});
test("mellommenn -> mellommenn", function() {deepEqual( Stem("mellommenn"), "mellommenn");});
test("mellomnivå -> mellomnivå", function() {deepEqual( Stem("mellomnivå"), "mellomnivå");});
test("mellomperiode -> mellomperiod", function() {deepEqual( Stem("mellomperiode"), "mellomperiod");});
test("mellomrekning -> mellomrekning", function() {deepEqual( Stem("mellomrekning"), "mellomrekning");});
test("mellomrekninga -> mellomrekning", function() {deepEqual( Stem("mellomrekninga"), "mellomrekning");});
test("mellomrekningsmidlane -> mellomrekningsmidl", function() {deepEqual( Stem("mellomrekningsmidlane"), "mellomrekningsmidl");});
test("mellomrekningsordninga -> mellomrekningsordning", function() {deepEqual( Stem("mellomrekningsordninga"), "mellomrekningsordning");});
test("mellomrom -> mellomrom", function() {deepEqual( Stem("mellomrom"), "mellomrom");});
test("mellomstasjon -> mellomstasjon", function() {deepEqual( Stem("mellomstasjon"), "mellomstasjon");});
test("mellomstasjonen -> mellomstasjon", function() {deepEqual( Stem("mellomstasjonen"), "mellomstasjon");});
test("mellomstore -> mellomstor", function() {deepEqual( Stem("mellomstore"), "mellomstor");});
test("mellomtida -> mellomtid", function() {deepEqual( Stem("mellomtida"), "mellomtid");});
test("mellomtiden -> mellomtid", function() {deepEqual( Stem("mellomtiden"), "mellomtid");});
test("mellomting -> mellomting", function() {deepEqual( Stem("mellomting"), "mellomting");});
test("mellomveg -> mellomveg", function() {deepEqual( Stem("mellomveg"), "mellomveg");});
test("melz -> melz", function() {deepEqual( Stem("melz"), "melz");});
test("men -> men", function() {deepEqual( Stem("men"), "men");});
test("mene -> men", function() {deepEqual( Stem("mene"), "men");});
test("mener -> men", function() {deepEqual( Stem("mener"), "men");});
test("menes -> men", function() {deepEqual( Stem("menes"), "men");});
test("mengd -> mengd", function() {deepEqual( Stem("mengd"), "mengd");});
test("mengda -> mengd", function() {deepEqual( Stem("mengda"), "mengd");});
test("mengde -> mengd", function() {deepEqual( Stem("mengde"), "mengd");});
test("mengden -> mengd", function() {deepEqual( Stem("mengden"), "mengd");});
test("mengdene -> mengd", function() {deepEqual( Stem("mengdene"), "mengd");});
test("mengder -> mengd", function() {deepEqual( Stem("mengder"), "mengd");});
test("menger -> meng", function() {deepEqual( Stem("menger"), "meng");});
test("mening -> mening", function() {deepEqual( Stem("mening"), "mening");});
test("meningen -> mening", function() {deepEqual( Stem("meningen"), "mening");});
test("menja -> menj", function() {deepEqual( Stem("menja"), "menj");});
test("menn -> menn", function() {deepEqual( Stem("menn"), "menn");});
test("mennene -> menn", function() {deepEqual( Stem("mennene"), "menn");});
test("menneske -> mennesk", function() {deepEqual( Stem("menneske"), "mennesk");});
test("menneskebarn -> menneskebarn", function() {deepEqual( Stem("menneskebarn"), "menneskebarn");});
test("menneskebarna -> menneskebarn", function() {deepEqual( Stem("menneskebarna"), "menneskebarn");});
test("menneskehår -> menneskehår", function() {deepEqual( Stem("menneskehår"), "menneskehår");});
test("menneskekryp -> menneskekryp", function() {deepEqual( Stem("menneskekryp"), "menneskekryp");});
test("menneskelignende -> menneskelign", function() {deepEqual( Stem("menneskelignende"), "menneskelign");});
test("menneskeliv -> menneskeliv", function() {deepEqual( Stem("menneskeliv"), "menneskeliv");});
test("menneskene -> mennesk", function() {deepEqual( Stem("menneskene"), "mennesk");});
test("menneskenes -> mennesk", function() {deepEqual( Stem("menneskenes"), "mennesk");});
test("menneskepar -> menneskep", function() {deepEqual( Stem("menneskepar"), "menneskep");});
test("mennesker -> mennesk", function() {deepEqual( Stem("mennesker"), "mennesk");});
test("menneskeslekt -> menneskeslekt", function() {deepEqual( Stem("menneskeslekt"), "menneskeslekt");});
test("menneskeslekten -> menneskeslekt", function() {deepEqual( Stem("menneskeslekten"), "menneskeslekt");});
test("menns -> menn", function() {deepEqual( Stem("menns"), "menn");});
test("mens -> men", function() {deepEqual( Stem("mens"), "men");});
test("ment -> ment", function() {deepEqual( Stem("ment"), "ment");});
test("mente -> ment", function() {deepEqual( Stem("mente"), "ment");});
test("mer -> mer", function() {deepEqual( Stem("mer"), "mer");});
test("merarbeid -> merarbeid", function() {deepEqual( Stem("merarbeid"), "merarbeid");});
test("meravkastningen -> meravkastning", function() {deepEqual( Stem("meravkastningen"), "meravkastning");});
test("merbelastning -> merbelastning", function() {deepEqual( Stem("merbelastning"), "merbelastning");});
test("merbelastningene -> merbelastning", function() {deepEqual( Stem("merbelastningene"), "merbelastning");});
test("merchanisms -> merchanism", function() {deepEqual( Stem("merchanisms"), "merchanism");});
test("merforpliktelsen -> merforplikt", function() {deepEqual( Stem("merforpliktelsen"), "merforplikt");});
test("merinnskudd -> merinnskudd", function() {deepEqual( Stem("merinnskudd"), "merinnskudd");});
test("merk -> merk", function() {deepEqual( Stem("merk"), "merk");});
test("merkbar -> merkb", function() {deepEqual( Stem("merkbar"), "merkb");});
test("merke -> merk", function() {deepEqual( Stem("merke"), "merk");});
test("merkelig -> merk", function() {deepEqual( Stem("merkelig"), "merk");});
test("merkelige -> merk", function() {deepEqual( Stem("merkelige"), "merk");});
test("merkeligste -> merkeligst", function() {deepEqual( Stem("merkeligste"), "merkeligst");});
test("merkene -> merk", function() {deepEqual( Stem("merkene"), "merk");});
test("merker -> merk", function() {deepEqual( Stem("merker"), "merk");});
test("merkes -> merk", function() {deepEqual( Stem("merkes"), "merk");});
test("merkesystemet -> merkesystem", function() {deepEqual( Stem("merkesystemet"), "merkesystem");});
test("merket -> merk", function() {deepEqual( Stem("merket"), "merk");});
test("merketjenesten -> merketjenest", function() {deepEqual( Stem("merketjenesten"), "merketjenest");});
test("merkevarer -> merkevar", function() {deepEqual( Stem("merkevarer"), "merkevar");});
test("merking -> merking", function() {deepEqual( Stem("merking"), "merking");});
test("merknad -> merknad", function() {deepEqual( Stem("merknad"), "merknad");});
test("merknadene -> merknad", function() {deepEqual( Stem("merknadene"), "merknad");});
test("merknader -> merknad", function() {deepEqual( Stem("merknader"), "merknad");});
test("merkostnader -> merkostnad", function() {deepEqual( Stem("merkostnader"), "merkostnad");});
test("merksam -> merksam", function() {deepEqual( Stem("merksam"), "merksam");});
test("merksame -> merksam", function() {deepEqual( Stem("merksame"), "merksam");});
test("merkverdig -> merkverd", function() {deepEqual( Stem("merkverdig"), "merkverd");});
test("merutgiftene -> merutgift", function() {deepEqual( Stem("merutgiftene"), "merutgift");});
test("messing -> messing", function() {deepEqual( Stem("messing"), "messing");});
test("mest -> mest", function() {deepEqual( Stem("mest"), "mest");});
test("mesta -> mest", function() {deepEqual( Stem("mesta"), "mest");});
test("meste -> mest", function() {deepEqual( Stem("meste"), "mest");});
test("mesteparten -> mestepart", function() {deepEqual( Stem("mesteparten"), "mestepart");});
test("mester -> mest", function() {deepEqual( Stem("mester"), "mest");});
test("mestersmed -> mestersmed", function() {deepEqual( Stem("mestersmed"), "mestersmed");});
test("mestersmeder -> mestersmed", function() {deepEqual( Stem("mestersmeder"), "mestersmed");});
test("mestertyv -> mestertyv", function() {deepEqual( Stem("mestertyv"), "mestertyv");});
test("mestrer -> mestr", function() {deepEqual( Stem("mestrer"), "mestr");});
test("mestret -> mestr", function() {deepEqual( Stem("mestret"), "mestr");});
test("metall -> metall", function() {deepEqual( Stem("metall"), "metall");});
test("metaller -> metall", function() {deepEqual( Stem("metaller"), "metall");});
test("metallklumpen -> metallklump", function() {deepEqual( Stem("metallklumpen"), "metallklump");});
test("metallproduksjon -> metallproduksjon", function() {deepEqual( Stem("metallproduksjon"), "metallproduksjon");});
test("metallprodukter -> metallprodukt", function() {deepEqual( Stem("metallprodukter"), "metallprodukt");});
test("meter -> met", function() {deepEqual( Stem("meter"), "met");});
test("metergrunnen -> metergrunn", function() {deepEqual( Stem("metergrunnen"), "metergrunn");});
test("meters -> met", function() {deepEqual( Stem("meters"), "met");});
test("metersbeltet -> metersbelt", function() {deepEqual( Stem("metersbeltet"), "metersbelt");});
test("metode -> metod", function() {deepEqual( Stem("metode"), "metod");});
test("metoden -> metod", function() {deepEqual( Stem("metoden"), "metod");});
test("metoder -> metod", function() {deepEqual( Stem("metoder"), "metod");});
test("metodisk -> metodisk", function() {deepEqual( Stem("metodisk"), "metodisk");});
test("mette -> mett", function() {deepEqual( Stem("mette"), "mett");});
test("mfl -> mfl", function() {deepEqual( Stem("mfl"), "mfl");});
test("mht -> mht", function() {deepEqual( Stem("mht"), "mht");});
test("michael -> michael", function() {deepEqual( Stem("michael"), "michael");});
test("michaels -> michael", function() {deepEqual( Stem("michaels"), "michael");});
test("middagstid -> middagstid", function() {deepEqual( Stem("middagstid"), "middagstid");});
test("middel -> middel", function() {deepEqual( Stem("middel"), "middel");});
test("middelklassen -> middelklass", function() {deepEqual( Stem("middelklassen"), "middelklass");});
test("middels -> middel", function() {deepEqual( Stem("middels"), "middel");});
test("midgard -> midgard", function() {deepEqual( Stem("midgard"), "midgard");});
test("midgards -> midgard", function() {deepEqual( Stem("midgards"), "midgard");});
test("midgardsormen -> midgardsorm", function() {deepEqual( Stem("midgardsormen"), "midgardsorm");});
test("midgardsormon -> midgardsormon", function() {deepEqual( Stem("midgardsormon"), "midgardsormon");});
test("midlane -> midl", function() {deepEqual( Stem("midlane"), "midl");});
test("midlar -> midl", function() {deepEqual( Stem("midlar"), "midl");});
test("midlene -> midl", function() {deepEqual( Stem("midlene"), "midl");});
test("midlenes -> midl", function() {deepEqual( Stem("midlenes"), "midl");});
test("midler -> midl", function() {deepEqual( Stem("midler"), "midl");});
test("midlere -> midler", function() {deepEqual( Stem("midlere"), "midler");});
test("midlertidig -> midlertid", function() {deepEqual( Stem("midlertidig"), "midlertid");});
test("midlertidige -> midlertid", function() {deepEqual( Stem("midlertidige"), "midlertid");});
test("midnattstid -> midnattstid", function() {deepEqual( Stem("midnattstid"), "midnattstid");});
test("midt -> midt", function() {deepEqual( Stem("midt"), "midt");});
test("midten -> midt", function() {deepEqual( Stem("midten"), "midt");});
test("mil -> mil", function() {deepEqual( Stem("mil"), "mil");});
test("milano -> milano", function() {deepEqual( Stem("milano"), "milano");});
test("mild -> mild", function() {deepEqual( Stem("mild"), "mild");});
test("mildare -> mildar", function() {deepEqual( Stem("mildare"), "mildar");});
test("militær -> militær", function() {deepEqual( Stem("militær"), "militær");});
test("militære -> militær", function() {deepEqual( Stem("militære"), "militær");});
test("militærteneste -> militærtenest", function() {deepEqual( Stem("militærteneste"), "militærtenest");});
test("militærtjeneste -> militærtjenest", function() {deepEqual( Stem("militærtjeneste"), "militærtjenest");});
test("miljø -> miljø", function() {deepEqual( Stem("miljø"), "miljø");});
test("miljøavdelingen -> miljøavdeling", function() {deepEqual( Stem("miljøavdelingen"), "miljøavdeling");});
test("miljøbelastende -> miljøbelast", function() {deepEqual( Stem("miljøbelastende"), "miljøbelast");});
test("miljøbelastning -> miljøbelastning", function() {deepEqual( Stem("miljøbelastning"), "miljøbelastning");});
test("miljøbelastningen -> miljøbelastning", function() {deepEqual( Stem("miljøbelastningen"), "miljøbelastning");});
test("miljøbelastninger -> miljøbelastning", function() {deepEqual( Stem("miljøbelastninger"), "miljøbelastning");});
test("miljødepartementet -> miljødepartement", function() {deepEqual( Stem("miljødepartementet"), "miljødepartement");});
test("miljødifferensierte -> miljødifferensier", function() {deepEqual( Stem("miljødifferensierte"), "miljødifferensier");});
test("miljøeffekter -> miljøeffekt", function() {deepEqual( Stem("miljøeffekter"), "miljøeffekt");});
test("miljøet -> miljø", function() {deepEqual( Stem("miljøet"), "miljø");});
test("miljøforbedring -> miljøforbedring", function() {deepEqual( Stem("miljøforbedring"), "miljøforbedring");});
test("miljøforbedringer -> miljøforbedring", function() {deepEqual( Stem("miljøforbedringer"), "miljøforbedring");});
test("miljøforhold -> miljøforhold", function() {deepEqual( Stem("miljøforhold"), "miljøforhold");});
test("miljøforstyrrende -> miljøforstyrr", function() {deepEqual( Stem("miljøforstyrrende"), "miljøforstyrr");});
test("miljøhensyn -> miljøhensyn", function() {deepEqual( Stem("miljøhensyn"), "miljøhensyn");});
test("miljøkonflikter -> miljøkonflikt", function() {deepEqual( Stem("miljøkonflikter"), "miljøkonflikt");});
test("miljøkostnadene -> miljøkostnad", function() {deepEqual( Stem("miljøkostnadene"), "miljøkostnad");});
test("miljøkostnader -> miljøkostnad", function() {deepEqual( Stem("miljøkostnader"), "miljøkostnad");});
test("miljøkrav -> miljøkrav", function() {deepEqual( Stem("miljøkrav"), "miljøkrav");});
test("miljøkriteriene -> miljøkriteri", function() {deepEqual( Stem("miljøkriteriene"), "miljøkriteri");});
test("miljømessig -> miljømess", function() {deepEqual( Stem("miljømessig"), "miljømess");});
test("miljømessige -> miljømess", function() {deepEqual( Stem("miljømessige"), "miljømess");});
test("miljøpolitikk -> miljøpolitikk", function() {deepEqual( Stem("miljøpolitikk"), "miljøpolitikk");});
test("miljøpolitikkens -> miljøpolitikk", function() {deepEqual( Stem("miljøpolitikkens"), "miljøpolitikk");});
test("miljøpolitisk -> miljøpolitisk", function() {deepEqual( Stem("miljøpolitisk"), "miljøpolitisk");});
test("miljøpolitiske -> miljøpolitisk", function() {deepEqual( Stem("miljøpolitiske"), "miljøpolitisk");});
test("miljøprioriteringstiltak -> miljøprioriteringstiltak", function() {deepEqual( Stem("miljøprioriteringstiltak"), "miljøprioriteringstiltak");});
test("miljøproblemene -> miljøproblem", function() {deepEqual( Stem("miljøproblemene"), "miljøproblem");});
test("miljøproblemer -> miljøproblem", function() {deepEqual( Stem("miljøproblemer"), "miljøproblem");});
test("miljørevisjon -> miljørevisjon", function() {deepEqual( Stem("miljørevisjon"), "miljørevisjon");});
test("miljøsikkerhet -> miljøsikker", function() {deepEqual( Stem("miljøsikkerhet"), "miljøsikker");});
test("miljøspørsmål -> miljøspørsmål", function() {deepEqual( Stem("miljøspørsmål"), "miljøspørsmål");});
test("miljøspørsmåla -> miljøspørsmål", function() {deepEqual( Stem("miljøspørsmåla"), "miljøspørsmål");});
test("miljøulemper -> miljøulemp", function() {deepEqual( Stem("miljøulemper"), "miljøulemp");});
test("miljøvennlig -> miljøvenn", function() {deepEqual( Stem("miljøvennlig"), "miljøvenn");});
test("miljøvennlige -> miljøvenn", function() {deepEqual( Stem("miljøvennlige"), "miljøvenn");});
test("miljøvernavdeling -> miljøvernavdeling", function() {deepEqual( Stem("miljøvernavdeling"), "miljøvernavdeling");});
test("miljøverndepartementet -> miljøverndepartement", function() {deepEqual( Stem("miljøverndepartementet"), "miljøverndepartement");});
test("miljøverndepartementets -> miljøverndepartement", function() {deepEqual( Stem("miljøverndepartementets"), "miljøverndepartement");});
test("mill -> mill", function() {deepEqual( Stem("mill"), "mill");});
test("milliarder -> milliard", function() {deepEqual( Stem("milliarder"), "milliard");});
test("million -> million", function() {deepEqual( Stem("million"), "million");});
test("millionar -> million", function() {deepEqual( Stem("millionar"), "million");});
test("millioner -> million", function() {deepEqual( Stem("millioner"), "million");});
test("mime -> mim", function() {deepEqual( Stem("mime"), "mim");});
test("mimes -> mim", function() {deepEqual( Stem("mimes"), "mim");});
test("min -> min", function() {deepEqual( Stem("min"), "min");});
test("mindre -> mindr", function() {deepEqual( Stem("mindre"), "mindr");});
test("mindretal -> mindretal", function() {deepEqual( Stem("mindretal"), "mindretal");});
test("mindretalet -> mindretal", function() {deepEqual( Stem("mindretalet"), "mindretal");});
test("mindretall -> mindretall", function() {deepEqual( Stem("mindretall"), "mindretall");});
test("mindretallet -> mindretall", function() {deepEqual( Stem("mindretallet"), "mindretall");});
test("mindretallets -> mindretall", function() {deepEqual( Stem("mindretallets"), "mindretall");});
test("mindretalsvern -> mindretalsvern", function() {deepEqual( Stem("mindretalsvern"), "mindretalsvern");});
test("mindretalsvernet -> mindretalsvern", function() {deepEqual( Stem("mindretalsvernet"), "mindretalsvern");});
test("mindreårig -> mindreår", function() {deepEqual( Stem("mindreårig"), "mindreår");});
test("mine -> min", function() {deepEqual( Stem("mine"), "min");});
test("mineralprodukter -> mineralprodukt", function() {deepEqual( Stem("mineralprodukter"), "mineralprodukt");});
test("minimal -> minimal", function() {deepEqual( Stem("minimal"), "minimal");});
test("minimale -> minimal", function() {deepEqual( Stem("minimale"), "minimal");});
test("minimalt -> minimalt", function() {deepEqual( Stem("minimalt"), "minimalt");});
test("minimerer -> minimer", function() {deepEqual( Stem("minimerer"), "minimer");});
test("minimert -> minimer", function() {deepEqual( Stem("minimert"), "minimer");});
test("minimum -> minimum", function() {deepEqual( Stem("minimum"), "minimum");});
test("minimumskrav -> minimumskrav", function() {deepEqual( Stem("minimumskrav"), "minimumskrav");});
test("ministeriet -> ministeri", function() {deepEqual( Stem("ministeriet"), "ministeri");});
test("ministerio -> ministerio", function() {deepEqual( Stem("ministerio"), "ministerio");});
test("minka -> mink", function() {deepEqual( Stem("minka"), "mink");});
test("minkar -> mink", function() {deepEqual( Stem("minkar"), "mink");});
test("minke -> mink", function() {deepEqual( Stem("minke"), "mink");});
test("minker -> mink", function() {deepEqual( Stem("minker"), "mink");});
test("minket -> mink", function() {deepEqual( Stem("minket"), "mink");});
test("minnast -> minn", function() {deepEqual( Stem("minnast"), "minn");});
test("minne -> minn", function() {deepEqual( Stem("minne"), "minn");});
test("minner -> minn", function() {deepEqual( Stem("minner"), "minn");});
test("minnet -> minn", function() {deepEqual( Stem("minnet"), "minn");});
test("minske -> minsk", function() {deepEqual( Stem("minske"), "minsk");});
test("minsker -> minsk", function() {deepEqual( Stem("minsker"), "minsk");});
test("minskes -> minsk", function() {deepEqual( Stem("minskes"), "minsk");});
test("minst -> minst", function() {deepEqual( Stem("minst"), "minst");});
test("minste -> minst", function() {deepEqual( Stem("minste"), "minst");});
test("minstealder -> minsteald", function() {deepEqual( Stem("minstealder"), "minsteald");});
test("minsteavkastning -> minsteavkastning", function() {deepEqual( Stem("minsteavkastning"), "minsteavkastning");});
test("minstefradraget -> minstefradrag", function() {deepEqual( Stem("minstefradraget"), "minstefradrag");});
test("minstefrist -> minstefrist", function() {deepEqual( Stem("minstefrist"), "minstefrist");});
test("minstegrad -> minstegrad", function() {deepEqual( Stem("minstegrad"), "minstegrad");});
test("minstegrense -> minstegrens", function() {deepEqual( Stem("minstegrense"), "minstegrens");});
test("minstegrensen -> minstegrens", function() {deepEqual( Stem("minstegrensen"), "minstegrens");});
test("minstegrenser -> minstegrens", function() {deepEqual( Stem("minstegrenser"), "minstegrens");});
test("minstekapital -> minstekapital", function() {deepEqual( Stem("minstekapital"), "minstekapital");});
test("minstekapitalen -> minstekapital", function() {deepEqual( Stem("minstekapitalen"), "minstekapital");});
test("minstekrav -> minstekrav", function() {deepEqual( Stem("minstekrav"), "minstekrav");});
test("minstekravene -> minstekrav", function() {deepEqual( Stem("minstekravene"), "minstekrav");});
test("minstekravet -> minstekrav", function() {deepEqual( Stem("minstekravet"), "minstekrav");});
test("minstelønn -> minstelønn", function() {deepEqual( Stem("minstelønn"), "minstelønn");});
test("minstenivå -> minstenivå", function() {deepEqual( Stem("minstenivå"), "minstenivå");});
test("minstenivåer -> minstenivå", function() {deepEqual( Stem("minstenivåer"), "minstenivå");});
test("minstenivået -> minstenivå", function() {deepEqual( Stem("minstenivået"), "minstenivå");});
test("minstepensjon -> minstepensjon", function() {deepEqual( Stem("minstepensjon"), "minstepensjon");});
test("minstepensjonen -> minstepensjon", function() {deepEqual( Stem("minstepensjonen"), "minstepensjon");});
test("minstesikring -> minstesikring", function() {deepEqual( Stem("minstesikring"), "minstesikring");});
test("minstetal -> minstetal", function() {deepEqual( Stem("minstetal"), "minstetal");});
test("minstetid -> minstetid", function() {deepEqual( Stem("minstetid"), "minstetid");});
test("minstetida -> minstetid", function() {deepEqual( Stem("minstetida"), "minstetid");});
test("minusgrader -> minusgrad", function() {deepEqual( Stem("minusgrader"), "minusgrad");});
test("minutter -> minutt", function() {deepEqual( Stem("minutter"), "minutt");});
test("misbruk -> misbruk", function() {deepEqual( Stem("misbruk"), "misbruk");});
test("misbrukes -> misbruk", function() {deepEqual( Stem("misbrukes"), "misbruk");});
test("misbruksregel -> misbruksregel", function() {deepEqual( Stem("misbruksregel"), "misbruksregel");});
test("misbruksregelen -> misbruksregel", function() {deepEqual( Stem("misbruksregelen"), "misbruksregel");});
test("misbruksreglane -> misbruksregl", function() {deepEqual( Stem("misbruksreglane"), "misbruksregl");});
test("misbruksreglar -> misbruksregl", function() {deepEqual( Stem("misbruksreglar"), "misbruksregl");});
test("misbrukt -> misbrukt", function() {deepEqual( Stem("misbrukt"), "misbrukt");});
test("misbrukte -> misbrukt", function() {deepEqual( Stem("misbrukte"), "misbrukt");});
test("misforståelse -> misforstå", function() {deepEqual( Stem("misforståelse"), "misforstå");});
test("misforståelser -> misforstå", function() {deepEqual( Stem("misforståelser"), "misforstå");});
test("mishald -> mishald", function() {deepEqual( Stem("mishald"), "mishald");});
test("mishaldande -> mishald", function() {deepEqual( Stem("mishaldande"), "mishald");});
test("mishalde -> mishald", function() {deepEqual( Stem("mishalde"), "mishald");});
test("mishaldet -> mishald", function() {deepEqual( Stem("mishaldet"), "mishald");});
test("mishaldne -> mishaldn", function() {deepEqual( Stem("mishaldne"), "mishaldn");});
test("mishaldskrav -> mishaldskrav", function() {deepEqual( Stem("mishaldskrav"), "mishaldskrav");});
test("mishaldssynspunkt -> mishaldssynspunkt", function() {deepEqual( Stem("mishaldssynspunkt"), "mishaldssynspunkt");});
test("mishaldstilfella -> mishaldstilfell", function() {deepEqual( Stem("mishaldstilfella"), "mishaldstilfell");});
test("mishaldstilfelle -> mishaldstilfell", function() {deepEqual( Stem("mishaldstilfelle"), "mishaldstilfell");});
test("mishaldsverknader -> mishaldsverknad", function() {deepEqual( Stem("mishaldsverknader"), "mishaldsverknad");});
test("mishaldsvurderinga -> mishaldsvurdering", function() {deepEqual( Stem("mishaldsvurderinga"), "mishaldsvurdering");});
test("misheld -> misheld", function() {deepEqual( Stem("misheld"), "misheld");});
test("mishøve -> mishøv", function() {deepEqual( Stem("mishøve"), "mishøv");});
test("mislykkes -> mislykk", function() {deepEqual( Stem("mislykkes"), "mislykk");});
test("misnøgd -> misnøgd", function() {deepEqual( Stem("misnøgd"), "misnøgd");});
test("misnøya -> misnøy", function() {deepEqual( Stem("misnøya"), "misnøy");});
test("misnøye -> misnøy", function() {deepEqual( Stem("misnøye"), "misnøy");});
test("misoppfattast -> misoppfatt", function() {deepEqual( Stem("misoppfattast"), "misoppfatt");});
test("mista -> mist", function() {deepEqual( Stem("mista"), "mist");});
test("mistanke -> mistank", function() {deepEqual( Stem("mistanke"), "mistank");});
test("mistar -> mist", function() {deepEqual( Stem("mistar"), "mist");});
test("miste -> mist", function() {deepEqual( Stem("miste"), "mist");});
test("misteltein -> misteltein", function() {deepEqual( Stem("misteltein"), "misteltein");});
test("mistelteinen -> misteltein", function() {deepEqual( Stem("mistelteinen"), "misteltein");});
test("mister -> mist", function() {deepEqual( Stem("mister"), "mist");});
test("mistet -> mist", function() {deepEqual( Stem("mistet"), "mist");});
test("mistro -> mistro", function() {deepEqual( Stem("mistro"), "mistro");});
test("mistydingar -> mistyding", function() {deepEqual( Stem("mistydingar"), "mistyding");});
test("misunnelig -> misunn", function() {deepEqual( Stem("misunnelig"), "misunn");});
test("misunner -> misunn", function() {deepEqual( Stem("misunner"), "misunn");});
test("misvisande -> misvis", function() {deepEqual( Stem("misvisande"), "misvis");});
test("mitgleiderzahl -> mitgleiderzahl", function() {deepEqual( Stem("mitgleiderzahl"), "mitgleiderzahl");});
test("mitglieder -> mitglied", function() {deepEqual( Stem("mitglieder"), "mitglied");});
test("mitt -> mitt", function() {deepEqual( Stem("mitt"), "mitt");});
test("mittels -> mittel", function() {deepEqual( Stem("mittels"), "mittel");});
test("mjaue -> mjaue", function() {deepEqual( Stem("mjaue"), "mjaue");});
test("mjauende -> mjauend", function() {deepEqual( Stem("mjauende"), "mjauend");});
test("mjauer -> mjauer", function() {deepEqual( Stem("mjauer"), "mjauer");});
test("mjød -> mjød", function() {deepEqual( Stem("mjød"), "mjød");});
test("mjøden -> mjød", function() {deepEqual( Stem("mjøden"), "mjød");});
test("mjølner -> mjøln", function() {deepEqual( Stem("mjølner"), "mjøln");});
test("mjøndalen -> mjøndal", function() {deepEqual( Stem("mjøndalen"), "mjøndal");});
test("mobile -> mobil", function() {deepEqual( Stem("mobile"), "mobil");});
test("mobilisering -> mobilisering", function() {deepEqual( Stem("mobilisering"), "mobilisering");});
test("mobilitet -> mobilit", function() {deepEqual( Stem("mobilitet"), "mobilit");});
test("mobiliteten -> mobilitet", function() {deepEqual( Stem("mobiliteten"), "mobilitet");});
test("mode -> mod", function() {deepEqual( Stem("mode"), "mod");});
test("modell -> modell", function() {deepEqual( Stem("modell"), "modell");});
test("modellane -> modell", function() {deepEqual( Stem("modellane"), "modell");});
test("modellar -> modell", function() {deepEqual( Stem("modellar"), "modell");});
test("modellberegningene -> modellberegning", function() {deepEqual( Stem("modellberegningene"), "modellberegning");});
test("modellberegninger -> modellberegning", function() {deepEqual( Stem("modellberegninger"), "modellberegning");});
test("modellen -> modell", function() {deepEqual( Stem("modellen"), "modell");});
test("modellene -> modell", function() {deepEqual( Stem("modellene"), "modell");});
test("modeller -> modell", function() {deepEqual( Stem("modeller"), "modell");});
test("moden -> mod", function() {deepEqual( Stem("moden"), "mod");});
test("moderat -> moderat", function() {deepEqual( Stem("moderat"), "moderat");});
test("modereres -> moderer", function() {deepEqual( Stem("modereres"), "moderer");});
test("moderne -> modern", function() {deepEqual( Stem("moderne"), "modern");});
test("modernisering -> modernisering", function() {deepEqual( Stem("modernisering"), "modernisering");});
test("moderniseringsprosjekter -> moderniseringsprosjekt", function() {deepEqual( Stem("moderniseringsprosjekter"), "moderniseringsprosjekt");});
test("modernisert -> moderniser", function() {deepEqual( Stem("modernisert"), "moderniser");});
test("modgunn -> modgunn", function() {deepEqual( Stem("modgunn"), "modgunn");});
test("modifikasjonar -> modifikasjon", function() {deepEqual( Stem("modifikasjonar"), "modifikasjon");});
test("modig -> mod", function() {deepEqual( Stem("modig"), "mod");});
test("modige -> mod", function() {deepEqual( Stem("modige"), "mod");});
test("modigste -> modigst", function() {deepEqual( Stem("modigste"), "modigst");});
test("mogleg -> mog", function() {deepEqual( Stem("mogleg"), "mog");});
test("moglege -> mog", function() {deepEqual( Stem("moglege"), "mog");});
test("mokkurkalve -> mokkurkalv", function() {deepEqual( Stem("mokkurkalve"), "mokkurkalv");});
test("moland -> moland", function() {deepEqual( Stem("moland"), "moland");});
test("molandutvalgets -> molandutvalg", function() {deepEqual( Stem("molandutvalgets"), "molandutvalg");});
test("moment -> moment", function() {deepEqual( Stem("moment"), "moment");});
test("momenta -> moment", function() {deepEqual( Stem("momenta"), "moment");});
test("momenter -> moment", function() {deepEqual( Stem("momenter"), "moment");});
test("momsnummer -> momsnumm", function() {deepEqual( Stem("momsnummer"), "momsnumm");});
test("momsnummerbaserte -> momsnummerbaser", function() {deepEqual( Stem("momsnummerbaserte"), "momsnummerbaser");});
test("mon -> mon", function() {deepEqual( Stem("mon"), "mon");});
test("monner -> monn", function() {deepEqual( Stem("monner"), "monn");});
test("monopol -> monopol", function() {deepEqual( Stem("monopol"), "monopol");});
test("monopollignende -> monopollign", function() {deepEqual( Stem("monopollignende"), "monopollign");});
test("monster -> monst", function() {deepEqual( Stem("monster"), "monst");});
test("monsteret -> monster", function() {deepEqual( Stem("monsteret"), "monster");});
test("monstre -> monstr", function() {deepEqual( Stem("monstre"), "monstr");});
test("mor -> mor", function() {deepEqual( Stem("mor"), "mor");});
test("moralsk -> moralsk", function() {deepEqual( Stem("moralsk"), "moralsk");});
test("mord -> mord", function() {deepEqual( Stem("mord"), "mord");});
test("moren -> mor", function() {deepEqual( Stem("moren"), "mor");});
test("morer -> mor", function() {deepEqual( Stem("morer"), "mor");});
test("morgen -> morg", function() {deepEqual( Stem("morgen"), "morg");});
test("morgendugg -> morgendugg", function() {deepEqual( Stem("morgendugg"), "morgendugg");});
test("morgenen -> morgen", function() {deepEqual( Stem("morgenen"), "morgen");});
test("morkne -> morkn", function() {deepEqual( Stem("morkne"), "morkn");});
test("moro -> moro", function() {deepEqual( Stem("moro"), "moro");});
test("morro -> morro", function() {deepEqual( Stem("morro"), "morro");});
test("mors -> mor", function() {deepEqual( Stem("mors"), "mor");});
test("morselskapet -> morselskap", function() {deepEqual( Stem("morselskapet"), "morselskap");});
test("morsom -> morsom", function() {deepEqual( Stem("morsom"), "morsom");});
test("mortifikasjon -> mortifikasjon", function() {deepEqual( Stem("mortifikasjon"), "mortifikasjon");});
test("mortifisere -> mortifiser", function() {deepEqual( Stem("mortifisere"), "mortifiser");});
test("mose -> mos", function() {deepEqual( Stem("mose"), "mos");});
test("mosegrodd -> mosegrodd", function() {deepEqual( Stem("mosegrodd"), "mosegrodd");});
test("mosegrodde -> mosegrodd", function() {deepEqual( Stem("mosegrodde"), "mosegrodd");});
test("mosjons -> mosjon", function() {deepEqual( Stem("mosjons"), "mosjon");});
test("moss -> moss", function() {deepEqual( Stem("moss"), "moss");});
test("mosseporten -> mosseport", function() {deepEqual( Stem("mosseporten"), "mosseport");});
test("mosseregionen -> mosseregion", function() {deepEqual( Stem("mosseregionen"), "mosseregion");});
test("mossevegen -> mosseveg", function() {deepEqual( Stem("mossevegen"), "mosseveg");});
test("mot -> mot", function() {deepEqual( Stem("mot"), "mot");});
test("motargument -> motargument", function() {deepEqual( Stem("motargument"), "motargument");});
test("motargumenter -> motargument", function() {deepEqual( Stem("motargumenter"), "motargument");});
test("motbydelige -> motbyd", function() {deepEqual( Stem("motbydelige"), "motbyd");});
test("motet -> mot", function() {deepEqual( Stem("motet"), "mot");});
test("motiv -> motiv", function() {deepEqual( Stem("motiv"), "motiv");});
test("motivasjonen -> motivasjon", function() {deepEqual( Stem("motivasjonen"), "motivasjon");});
test("motiver -> motiv", function() {deepEqual( Stem("motiver"), "motiv");});
test("motivere -> motiver", function() {deepEqual( Stem("motivere"), "motiver");});
test("motiveres -> motiver", function() {deepEqual( Stem("motiveres"), "motiver");});
test("motløs -> motløs", function() {deepEqual( Stem("motløs"), "motløs");});
test("motmelding -> motmelding", function() {deepEqual( Stem("motmelding"), "motmelding");});
test("motorveg -> motorveg", function() {deepEqual( Stem("motorveg"), "motorveg");});
test("motorvegar -> motorveg", function() {deepEqual( Stem("motorvegar"), "motorveg");});
test("motorvegbru -> motorvegbru", function() {deepEqual( Stem("motorvegbru"), "motorvegbru");});
test("motorveger -> motorveg", function() {deepEqual( Stem("motorveger"), "motorveg");});
test("motsatt -> motsatt", function() {deepEqual( Stem("motsatt"), "motsatt");});
test("motsatte -> motsatt", function() {deepEqual( Stem("motsatte"), "motsatt");});
test("motsegn -> motsegn", function() {deepEqual( Stem("motsegn"), "motsegn");});
test("motsegner -> motsegn", function() {deepEqual( Stem("motsegner"), "motsegn");});
test("motset -> mots", function() {deepEqual( Stem("motset"), "mots");});
test("motsetje -> motsetj", function() {deepEqual( Stem("motsetje"), "motsetj");});
test("motsetnad -> motsetnad", function() {deepEqual( Stem("motsetnad"), "motsetnad");});
test("motsetning -> motsetning", function() {deepEqual( Stem("motsetning"), "motsetning");});
test("motsetningar -> motsetning", function() {deepEqual( Stem("motsetningar"), "motsetning");});
test("motsetninger -> motsetning", function() {deepEqual( Stem("motsetninger"), "motsetning");});
test("motsetningsforhold -> motsetningsforhold", function() {deepEqual( Stem("motsetningsforhold"), "motsetningsforhold");});
test("motsetningsforholdet -> motsetningsforhold", function() {deepEqual( Stem("motsetningsforholdet"), "motsetningsforhold");});
test("motsett -> motsett", function() {deepEqual( Stem("motsett"), "motsett");});
test("motsette -> motsett", function() {deepEqual( Stem("motsette"), "motsett");});
test("motsi -> motsi", function() {deepEqual( Stem("motsi"), "motsi");});
test("motstand -> motstand", function() {deepEqual( Stem("motstand"), "motstand");});
test("motstanderen -> motstander", function() {deepEqual( Stem("motstanderen"), "motstander");});
test("motstrid -> motstrid", function() {deepEqual( Stem("motstrid"), "motstrid");});
test("motstridande -> motstrid", function() {deepEqual( Stem("motstridande"), "motstrid");});
test("motstrøms -> motstrøm", function() {deepEqual( Stem("motstrøms"), "motstrøm");});
test("motstykke -> motstykk", function() {deepEqual( Stem("motstykke"), "motstykk");});
test("motstykket -> motstykk", function() {deepEqual( Stem("motstykket"), "motstykk");});
test("motståande -> motstå", function() {deepEqual( Stem("motståande"), "motstå");});
test("motsvarer -> motsvar", function() {deepEqual( Stem("motsvarer"), "motsvar");});
test("motsvares -> motsvar", function() {deepEqual( Stem("motsvares"), "motsvar");});
test("motta -> mott", function() {deepEqual( Stem("motta"), "mott");});
test("mottak -> mottak", function() {deepEqual( Stem("mottak"), "mottak");});
test("mottakar -> mottak", function() {deepEqual( Stem("mottakar"), "mottak");});
test("mottakaren -> mottakar", function() {deepEqual( Stem("mottakaren"), "mottakar");});
test("mottaker -> mottak", function() {deepEqual( Stem("mottaker"), "mottak");});
test("mottakere -> mottaker", function() {deepEqual( Stem("mottakere"), "mottaker");});
test("mottakerer -> mottaker", function() {deepEqual( Stem("mottakerer"), "mottaker");});
test("mottakerfylke -> mottakerfylk", function() {deepEqual( Stem("mottakerfylke"), "mottakerfylk");});
test("mottakersted -> mottakersted", function() {deepEqual( Stem("mottakersted"), "mottakersted");});
test("mottaksanlegg -> mottaksanlegg", function() {deepEqual( Stem("mottaksanlegg"), "mottaksanlegg");});
test("mottaksfylke -> mottaksfylk", function() {deepEqual( Stem("mottaksfylke"), "mottaksfylk");});
test("mottaksordninger -> mottaksordning", function() {deepEqual( Stem("mottaksordninger"), "mottaksordning");});
test("mottakssted -> mottakssted", function() {deepEqual( Stem("mottakssted"), "mottakssted");});
test("mottar -> mott", function() {deepEqual( Stem("mottar"), "mott");});
test("mottatt -> mottatt", function() {deepEqual( Stem("mottatt"), "mottatt");});
test("motteke -> mottek", function() {deepEqual( Stem("motteke"), "mottek");});
test("motteken -> mottek", function() {deepEqual( Stem("motteken"), "mottek");});
test("mottekne -> mottekn", function() {deepEqual( Stem("mottekne"), "mottekn");});
test("mottiltak -> mottiltak", function() {deepEqual( Stem("mottiltak"), "mottiltak");});
test("mottok -> mottok", function() {deepEqual( Stem("mottok"), "mottok");});
test("motvekt -> motvekt", function() {deepEqual( Stem("motvekt"), "motvekt");});
test("motverka -> motverk", function() {deepEqual( Stem("motverka"), "motverk");});
test("motverke -> motverk", function() {deepEqual( Stem("motverke"), "motverk");});
test("motvilje -> motvilj", function() {deepEqual( Stem("motvilje"), "motvilj");});
test("motvirke -> motvirk", function() {deepEqual( Stem("motvirke"), "motvirk");});
test("motvirkes -> motvirk", function() {deepEqual( Stem("motvirkes"), "motvirk");});
test("moum -> moum", function() {deepEqual( Stem("moum"), "moum");});
test("mounted -> mounted", function() {deepEqual( Stem("mounted"), "mounted");});
test("mrd -> mrd", function() {deepEqual( Stem("mrd"), "mrd");});
test("mudret -> mudr", function() {deepEqual( Stem("mudret"), "mudr");});
test("muldvarp -> muldvarp", function() {deepEqual( Stem("muldvarp"), "muldvarp");});
test("mulig -> mul", function() {deepEqual( Stem("mulig"), "mul");});
test("mulige -> mul", function() {deepEqual( Stem("mulige"), "mul");});
test("muligens -> mul", function() {deepEqual( Stem("muligens"), "mul");});
test("muliggjør -> muliggjør", function() {deepEqual( Stem("muliggjør"), "muliggjør");});
test("mulighet -> mul", function() {deepEqual( Stem("mulighet"), "mul");});
test("muligheten -> mul", function() {deepEqual( Stem("muligheten"), "mul");});
test("mulighetene -> mul", function() {deepEqual( Stem("mulighetene"), "mul");});
test("muligheter -> mul", function() {deepEqual( Stem("muligheter"), "mul");});
test("mulighetsområde -> mulighetsområd", function() {deepEqual( Stem("mulighetsområde"), "mulighetsområd");});
test("mulighetsområdet -> mulighetsområd", function() {deepEqual( Stem("mulighetsområdet"), "mulighetsområd");});
test("multipliser -> multiplis", function() {deepEqual( Stem("multipliser"), "multiplis");});
test("multipliseres -> multipliser", function() {deepEqual( Stem("multipliseres"), "multipliser");});
test("mumlende -> muml", function() {deepEqual( Stem("mumlende"), "muml");});
test("mumler -> muml", function() {deepEqual( Stem("mumler"), "muml");});
test("mumlig -> mum", function() {deepEqual( Stem("mumlig"), "mum");});
test("munck -> munck", function() {deepEqual( Stem("munck"), "munck");});
test("mundilfare -> mundilfar", function() {deepEqual( Stem("mundilfare"), "mundilfar");});
test("munin -> munin", function() {deepEqual( Stem("munin"), "munin");});
test("munn -> munn", function() {deepEqual( Stem("munn"), "munn");});
test("munnen -> munn", function() {deepEqual( Stem("munnen"), "munn");});
test("munnet -> munn", function() {deepEqual( Stem("munnet"), "munn");});
test("munnfull -> munnfull", function() {deepEqual( Stem("munnfull"), "munnfull");});
test("munnhell -> munnhell", function() {deepEqual( Stem("munnhell"), "munnhell");});
test("munnvikene -> munnvik", function() {deepEqual( Stem("munnvikene"), "munnvik");});
test("muntre -> muntr", function() {deepEqual( Stem("muntre"), "muntr");});
test("mur -> mur", function() {deepEqual( Stem("mur"), "mur");});
test("muren -> mur", function() {deepEqual( Stem("muren"), "mur");});
test("murene -> mur", function() {deepEqual( Stem("murene"), "mur");});
test("murer -> mur", function() {deepEqual( Stem("murer"), "mur");});
test("musejakt -> musejakt", function() {deepEqual( Stem("musejakt"), "musejakt");});
test("musikk -> musikk", function() {deepEqual( Stem("musikk"), "musikk");});
test("musklene -> muskl", function() {deepEqual( Stem("musklene"), "muskl");});
test("muskler -> muskl", function() {deepEqual( Stem("muskler"), "muskl");});
test("muspellsheim -> muspellsheim", function() {deepEqual( Stem("muspellsheim"), "muspellsheim");});
test("muspellshæren -> muspellshær", function() {deepEqual( Stem("muspellshæren"), "muspellshær");});
test("muspellsønnene -> muspellsønn", function() {deepEqual( Stem("muspellsønnene"), "muspellsønn");});
test("mutt -> mutt", function() {deepEqual( Stem("mutt"), "mutt");});
test("mutue -> mutu", function() {deepEqual( Stem("mutue"), "mutu");});
test("mv -> mv", function() {deepEqual( Stem("mv"), "mv");});
test("mye -> mye", function() {deepEqual( Stem("mye"), "mye");});
test("mygg -> mygg", function() {deepEqual( Stem("mygg"), "mygg");});
test("myke -> myk", function() {deepEqual( Stem("myke"), "myk");});
test("mykere -> myker", function() {deepEqual( Stem("mykere"), "myker");});
test("mykje -> mykj", function() {deepEqual( Stem("mykje"), "mykj");});
test("mykt -> mykt", function() {deepEqual( Stem("mykt"), "mykt");});
test("mynde -> mynd", function() {deepEqual( Stem("mynde"), "mynd");});
test("myndet -> mynd", function() {deepEqual( Stem("myndet"), "mynd");});
test("myndige -> mynd", function() {deepEqual( Stem("myndige"), "mynd");});
test("myndighet -> mynd", function() {deepEqual( Stem("myndighet"), "mynd");});
test("myndigheten -> mynd", function() {deepEqual( Stem("myndigheten"), "mynd");});
test("myndighetene -> mynd", function() {deepEqual( Stem("myndighetene"), "mynd");});
test("myndighetenes -> mynd", function() {deepEqual( Stem("myndighetenes"), "mynd");});
test("myndigheter -> mynd", function() {deepEqual( Stem("myndigheter"), "mynd");});
test("myndigheters -> myndighet", function() {deepEqual( Stem("myndigheters"), "myndighet");});
test("myndighetsområde -> myndighetsområd", function() {deepEqual( Stem("myndighetsområde"), "myndighetsområd");});
test("myndighetsutøvelse -> myndighetsutøv", function() {deepEqual( Stem("myndighetsutøvelse"), "myndighetsutøv");});
test("myndighetsutøvelsen -> myndighetsutøv", function() {deepEqual( Stem("myndighetsutøvelsen"), "myndighetsutøv");});
test("myr -> myr", function() {deepEqual( Stem("myr"), "myr");});
test("myrhull -> myrhull", function() {deepEqual( Stem("myrhull"), "myrhull");});
test("myser -> mys", function() {deepEqual( Stem("myser"), "mys");});
test("mysing -> mysing", function() {deepEqual( Stem("mysing"), "mysing");});
test("må -> må", function() {deepEqual( Stem("må"), "må");});
test("måkeskrik -> måkeskrik", function() {deepEqual( Stem("måkeskrik"), "måkeskrik");});
test("mål -> mål", function() {deepEqual( Stem("mål"), "mål");});
test("måla -> mål", function() {deepEqual( Stem("måla"), "mål");});
test("målast -> mål", function() {deepEqual( Stem("målast"), "mål");});
test("målbevisst -> målbevisst", function() {deepEqual( Stem("målbevisst"), "målbevisst");});
test("måle -> mål", function() {deepEqual( Stem("måle"), "mål");});
test("målene -> mål", function() {deepEqual( Stem("målene"), "mål");});
test("måler -> mål", function() {deepEqual( Stem("måler"), "mål");});
test("målet -> mål", function() {deepEqual( Stem("målet"), "mål");});
test("måling -> måling", function() {deepEqual( Stem("måling"), "måling");});
test("målkonflikter -> målkonflikt", function() {deepEqual( Stem("målkonflikter"), "målkonflikt");});
test("målrettet -> målrett", function() {deepEqual( Stem("målrettet"), "målrett");});
test("målsatt -> målsatt", function() {deepEqual( Stem("målsatt"), "målsatt");});
test("målsatte -> målsatt", function() {deepEqual( Stem("målsatte"), "målsatt");});
test("målsetning -> målsetning", function() {deepEqual( Stem("målsetning"), "målsetning");});
test("målsetningen -> målsetning", function() {deepEqual( Stem("målsetningen"), "målsetning");});
test("målsetninger -> målsetning", function() {deepEqual( Stem("målsetninger"), "målsetning");});
test("målsetting -> målsetting", function() {deepEqual( Stem("målsetting"), "målsetting");});
test("målsettingen -> målsetting", function() {deepEqual( Stem("målsettingen"), "målsetting");});
test("målsettinger -> målsetting", function() {deepEqual( Stem("målsettinger"), "målsetting");});
test("målsikkerhet -> målsikker", function() {deepEqual( Stem("målsikkerhet"), "målsikker");});
test("målstørrelse -> målstørr", function() {deepEqual( Stem("målstørrelse"), "målstørr");});
test("målt -> målt", function() {deepEqual( Stem("målt"), "målt");});
test("måltid -> måltid", function() {deepEqual( Stem("måltid"), "måltid");});
test("måltidet -> måltid", function() {deepEqual( Stem("måltidet"), "måltid");});
test("månad -> månad", function() {deepEqual( Stem("månad"), "månad");});
test("månaden -> månad", function() {deepEqual( Stem("månaden"), "månad");});
test("månadene -> månad", function() {deepEqual( Stem("månadene"), "månad");});
test("månader -> månad", function() {deepEqual( Stem("månader"), "månad");});
test("månaders -> månad", function() {deepEqual( Stem("månaders"), "månad");});
test("månadleg -> månad", function() {deepEqual( Stem("månadleg"), "månad");});
test("månadlege -> månad", function() {deepEqual( Stem("månadlege"), "månad");});
test("månadsvis -> månadsvis", function() {deepEqual( Stem("månadsvis"), "månadsvis");});
test("måne -> mån", function() {deepEqual( Stem("måne"), "mån");});
test("måned -> måned", function() {deepEqual( Stem("måned"), "måned");});
test("månedene -> måned", function() {deepEqual( Stem("månedene"), "måned");});
test("måneder -> måned", function() {deepEqual( Stem("måneder"), "måned");});
test("månedlige -> måned", function() {deepEqual( Stem("månedlige"), "måned");});
test("måneløs -> måneløs", function() {deepEqual( Stem("måneløs"), "måneløs");});
test("månen -> mån", function() {deepEqual( Stem("månen"), "mån");});
test("måper -> måp", function() {deepEqual( Stem("måper"), "måp");});
test("måtar -> måt", function() {deepEqual( Stem("måtar"), "måt");});
test("måte -> måt", function() {deepEqual( Stem("måte"), "måt");});
test("måtelig -> måt", function() {deepEqual( Stem("måtelig"), "måt");});
test("måten -> måt", function() {deepEqual( Stem("måten"), "måt");});
test("måtene -> måt", function() {deepEqual( Stem("måtene"), "måt");});
test("måter -> måt", function() {deepEqual( Stem("måter"), "måt");});
test("måtta -> mått", function() {deepEqual( Stem("måtta"), "mått");});
test("måtte -> mått", function() {deepEqual( Stem("måtte"), "mått");});
test("måttet -> mått", function() {deepEqual( Stem("måttet"), "mått");});
test("mæland -> mæland", function() {deepEqual( Stem("mæland"), "mæland");});
test("mæle -> mæl", function() {deepEqual( Stem("mæle"), "mæl");});
test("møblar -> møbl", function() {deepEqual( Stem("møblar"), "møbl");});
test("mødre -> mødr", function() {deepEqual( Stem("mødre"), "mødr");});
test("mølen -> møl", function() {deepEqual( Stem("mølen"), "møl");});
test("mønet -> møn", function() {deepEqual( Stem("mønet"), "møn");});
test("mønster -> mønst", function() {deepEqual( Stem("mønster"), "mønst");});
test("mønsteret -> mønster", function() {deepEqual( Stem("mønsteret"), "mønster");});
test("mønsterkontrakten -> mønsterkontrakt", function() {deepEqual( Stem("mønsterkontrakten"), "mønsterkontrakt");});
test("mønstervedtektene -> mønstervedtekt", function() {deepEqual( Stem("mønstervedtektene"), "mønstervedtekt");});
test("mørbanket -> mørbank", function() {deepEqual( Stem("mørbanket"), "mørbank");});
test("møre -> mør", function() {deepEqual( Stem("møre"), "mør");});
test("mørk -> mørk", function() {deepEqual( Stem("mørk"), "mørk");});
test("mørke -> mørk", function() {deepEqual( Stem("mørke"), "mørk");});
test("mørkemaktene -> mørkemakt", function() {deepEqual( Stem("mørkemaktene"), "mørkemakt");});
test("mørket -> mørk", function() {deepEqual( Stem("mørket"), "mørk");});
test("mørketiden -> mørketid", function() {deepEqual( Stem("mørketiden"), "mørketid");});
test("mørkets -> mørk", function() {deepEqual( Stem("mørkets"), "mørk");});
test("mørkt -> mørkt", function() {deepEqual( Stem("mørkt"), "mørkt");});
test("mørkved -> mørkved", function() {deepEqual( Stem("mørkved"), "mørkved");});
test("møta -> møt", function() {deepEqual( Stem("møta"), "møt");});
test("møtast -> møt", function() {deepEqual( Stem("møtast"), "møt");});
test("møte -> møt", function() {deepEqual( Stem("møte"), "møt");});
test("møtedagen -> møtedag", function() {deepEqual( Stem("møtedagen"), "møtedag");});
test("møteleiar -> møtelei", function() {deepEqual( Stem("møteleiar"), "møtelei");});
test("møteleiaren -> møteleiar", function() {deepEqual( Stem("møteleiaren"), "møteleiar");});
test("møteleiarens -> møteleiar", function() {deepEqual( Stem("møteleiarens"), "møteleiar");});
test("møteleiing -> møteleiing", function() {deepEqual( Stem("møteleiing"), "møteleiing");});
test("møtene -> møt", function() {deepEqual( Stem("møtene"), "møt");});
test("møteplikt -> møteplikt", function() {deepEqual( Stem("møteplikt"), "møteplikt");});
test("møter -> møt", function() {deepEqual( Stem("møter"), "møt");});
test("møtereglar -> møteregl", function() {deepEqual( Stem("møtereglar"), "møteregl");});
test("møterett -> møterett", function() {deepEqual( Stem("møterett"), "møterett");});
test("møteretten -> møterett", function() {deepEqual( Stem("møteretten"), "møterett");});
test("møtes -> møt", function() {deepEqual( Stem("møtes"), "møt");});
test("møtesituasjoner -> møtesituasjon", function() {deepEqual( Stem("møtesituasjoner"), "møtesituasjon");});
test("møtest -> møtest", function() {deepEqual( Stem("møtest"), "møtest");});
test("møtet -> møt", function() {deepEqual( Stem("møtet"), "møt");});
test("møtevirksomhet -> møtevirksom", function() {deepEqual( Stem("møtevirksomhet"), "møtevirksom");});
test("møtt -> møtt", function() {deepEqual( Stem("møtt"), "møtt");});
test("møtte -> møtt", function() {deepEqual( Stem("møtte"), "møtt");});
test("møy -> møy", function() {deepEqual( Stem("møy"), "møy");});
test("n -> n", function() {deepEqual( Stem("n"), "n");});
test("nabokommune -> nabokommun", function() {deepEqual( Stem("nabokommune"), "nabokommun");});
test("naboland -> naboland", function() {deepEqual( Stem("naboland"), "naboland");});
test("nag -> nag", function() {deepEqual( Stem("nag"), "nag");});
test("naglfar -> naglf", function() {deepEqual( Stem("naglfar"), "naglf");});
test("naken -> nak", function() {deepEqual( Stem("naken"), "nak");});
test("nakent -> nakent", function() {deepEqual( Stem("nakent"), "nakent");});
test("nakken -> nakk", function() {deepEqual( Stem("nakken"), "nakk");});
test("nakne -> nakn", function() {deepEqual( Stem("nakne"), "nakn");});
test("namn -> namn", function() {deepEqual( Stem("namn"), "namn");});
test("namna -> namn", function() {deepEqual( Stem("namna"), "namn");});
test("namneendring -> namneendring", function() {deepEqual( Stem("namneendring"), "namneendring");});
test("namneendringa -> namneendring", function() {deepEqual( Stem("namneendringa"), "namneendring");});
test("namnet -> namn", function() {deepEqual( Stem("namnet"), "namn");});
test("namngjeven -> namngjev", function() {deepEqual( Stem("namngjeven"), "namngjev");});
test("namngjevne -> namngjevn", function() {deepEqual( Stem("namngjevne"), "namngjevn");});
test("namsretten -> namsrett", function() {deepEqual( Stem("namsretten"), "namsrett");});
test("namsstyresmakta -> namsstyresmakt", function() {deepEqual( Stem("namsstyresmakta"), "namsstyresmakt");});
test("namsstyresmaktene -> namsstyresmakt", function() {deepEqual( Stem("namsstyresmaktene"), "namsstyresmakt");});
test("nanna -> nann", function() {deepEqual( Stem("nanna"), "nann");});
test("nappe -> napp", function() {deepEqual( Stem("nappe"), "napp");});
test("napper -> napp", function() {deepEqual( Stem("napper"), "napp");});
test("nara -> nar", function() {deepEqual( Stem("nara"), "nar");});
test("narr -> narr", function() {deepEqual( Stem("narr"), "narr");});
test("narra -> narr", function() {deepEqual( Stem("narra"), "narr");});
test("narre -> narr", function() {deepEqual( Stem("narre"), "narr");});
test("narret -> narr", function() {deepEqual( Stem("narret"), "narr");});
test("narve -> narv", function() {deepEqual( Stem("narve"), "narv");});
test("narvesen -> narves", function() {deepEqual( Stem("narvesen"), "narves");});
test("narvik -> narvik", function() {deepEqual( Stem("narvik"), "narvik");});
test("nasjonal -> nasjonal", function() {deepEqual( Stem("nasjonal"), "nasjonal");});
test("nasjonalbudsjett -> nasjonalbudsjett", function() {deepEqual( Stem("nasjonalbudsjett"), "nasjonalbudsjett");});
test("nasjonalbudsjettet -> nasjonalbudsjett", function() {deepEqual( Stem("nasjonalbudsjettet"), "nasjonalbudsjett");});
test("nasjonale -> nasjonal", function() {deepEqual( Stem("nasjonale"), "nasjonal");});
test("nasjonalitet -> nasjonalit", function() {deepEqual( Stem("nasjonalitet"), "nasjonalit");});
test("nasjonalt -> nasjonalt", function() {deepEqual( Stem("nasjonalt"), "nasjonalt");});
test("nasjonene -> nasjon", function() {deepEqual( Stem("nasjonene"), "nasjon");});
test("natt -> natt", function() {deepEqual( Stem("natt"), "natt");});
test("natta -> natt", function() {deepEqual( Stem("natta"), "natt");});
test("nattefrosten -> nattefrost", function() {deepEqual( Stem("nattefrosten"), "nattefrost");});
test("nattely -> nattely", function() {deepEqual( Stem("nattely"), "nattely");});
test("nattemørket -> nattemørk", function() {deepEqual( Stem("nattemørket"), "nattemørk");});
test("natten -> natt", function() {deepEqual( Stem("natten"), "natt");});
test("nattens -> natt", function() {deepEqual( Stem("nattens"), "natt");});
test("nattestengning -> nattestengning", function() {deepEqual( Stem("nattestengning"), "nattestengning");});
test("nattsvart -> nattsvart", function() {deepEqual( Stem("nattsvart"), "nattsvart");});
test("natur -> natur", function() {deepEqual( Stem("natur"), "natur");});
test("naturaldeling -> naturaldeling", function() {deepEqual( Stem("naturaldeling"), "naturaldeling");});
test("naturalia -> naturali", function() {deepEqual( Stem("naturalia"), "naturali");});
test("naturalytelser -> naturalyt", function() {deepEqual( Stem("naturalytelser"), "naturalyt");});
test("naturgitte -> naturgitt", function() {deepEqual( Stem("naturgitte"), "naturgitt");});
test("naturinngrep -> naturinngrep", function() {deepEqual( Stem("naturinngrep"), "naturinngrep");});
test("naturlig -> natur", function() {deepEqual( Stem("naturlig"), "natur");});
test("naturlige -> natur", function() {deepEqual( Stem("naturlige"), "natur");});
test("naturligvis -> naturligvis", function() {deepEqual( Stem("naturligvis"), "naturligvis");});
test("naturmessige -> naturmess", function() {deepEqual( Stem("naturmessige"), "naturmess");});
test("naturreservat -> naturreservat", function() {deepEqual( Stem("naturreservat"), "naturreservat");});
test("naturreservatet -> naturreservat", function() {deepEqual( Stem("naturreservatet"), "naturreservat");});
test("naturressurser -> naturressurs", function() {deepEqual( Stem("naturressurser"), "naturressurs");});
test("naudssituasjonar -> naudssituasjon", function() {deepEqual( Stem("naudssituasjonar"), "naudssituasjon");});
test("nautiske -> nautisk", function() {deepEqual( Stem("nautiske"), "nautisk");});
test("nav -> nav", function() {deepEqual( Stem("nav"), "nav");});
test("navet -> nav", function() {deepEqual( Stem("navet"), "nav");});
test("navigasjon -> navigasjon", function() {deepEqual( Stem("navigasjon"), "navigasjon");});
test("navigasjonsassistanse -> navigasjonsassistans", function() {deepEqual( Stem("navigasjonsassistanse"), "navigasjonsassistans");});
test("navigasjonsdekning -> navigasjonsdekning", function() {deepEqual( Stem("navigasjonsdekning"), "navigasjonsdekning");});
test("navigasjonshjelpemidler -> navigasjonshjelpemidl", function() {deepEqual( Stem("navigasjonshjelpemidler"), "navigasjonshjelpemidl");});
test("navigasjonspolitikk -> navigasjonspolitikk", function() {deepEqual( Stem("navigasjonspolitikk"), "navigasjonspolitikk");});
test("navigasjonsspørsmål -> navigasjonsspørsmål", function() {deepEqual( Stem("navigasjonsspørsmål"), "navigasjonsspørsmål");});
test("navigatørene -> navigatør", function() {deepEqual( Stem("navigatørene"), "navigatør");});
test("navigere -> naviger", function() {deepEqual( Stem("navigere"), "naviger");});
test("navn -> navn", function() {deepEqual( Stem("navn"), "navn");});
test("navnene -> navn", function() {deepEqual( Stem("navnene"), "navn");});
test("navnet -> navn", function() {deepEqual( Stem("navnet"), "navn");});
test("navprinsippet -> navprinsipp", function() {deepEqual( Stem("navprinsippet"), "navprinsipp");});
test("nazionale -> nazional", function() {deepEqual( Stem("nazionale"), "nazional");});
test("nbbl -> nbbl", function() {deepEqual( Stem("nbbl"), "nbbl");});
test("nbbls -> nbbls", function() {deepEqual( Stem("nbbls"), "nbbls");});
test("nbo -> nbo", function() {deepEqual( Stem("nbo"), "nbo");});
test("nebb -> nebb", function() {deepEqual( Stem("nebb"), "nebb");});
test("nebbene -> nebb", function() {deepEqual( Stem("nebbene"), "nebb");});
test("nebbet -> nebb", function() {deepEqual( Stem("nebbet"), "nebb");});
test("ned -> ned", function() {deepEqual( Stem("ned"), "ned");});
test("nedafor -> nedafor", function() {deepEqual( Stem("nedafor"), "nedafor");});
test("nedbetaling -> nedbetaling", function() {deepEqual( Stem("nedbetaling"), "nedbetaling");});
test("nedbetalt -> nedbetalt", function() {deepEqual( Stem("nedbetalt"), "nedbetalt");});
test("nedbetalte -> nedbetalt", function() {deepEqual( Stem("nedbetalte"), "nedbetalt");});
test("nedbrente -> nedbrent", function() {deepEqual( Stem("nedbrente"), "nedbrent");});
test("nedbrytning -> nedbrytning", function() {deepEqual( Stem("nedbrytning"), "nedbrytning");});
test("nedbygge -> nedbygg", function() {deepEqual( Stem("nedbygge"), "nedbygg");});
test("nedbygging -> nedbygging", function() {deepEqual( Stem("nedbygging"), "nedbygging");});
test("nede -> ned", function() {deepEqual( Stem("nede"), "ned");});
test("nedenfor -> nedenfor", function() {deepEqual( Stem("nedenfor"), "nedenfor");});
test("nedenfra -> nedenfr", function() {deepEqual( Stem("nedenfra"), "nedenfr");});
test("nedenstående -> nedenstå", function() {deepEqual( Stem("nedenstående"), "nedenstå");});
test("nedereland -> nedereland", function() {deepEqual( Stem("nedereland"), "nedereland");});
test("nederlaget -> nederlag", function() {deepEqual( Stem("nederlaget"), "nederlag");});
test("nederland -> nederland", function() {deepEqual( Stem("nederland"), "nederland");});
test("nederste -> nederst", function() {deepEqual( Stem("nederste"), "nederst");});
test("nedfelle -> nedfell", function() {deepEqual( Stem("nedfelle"), "nedfell");});
test("nedfelles -> nedfell", function() {deepEqual( Stem("nedfelles"), "nedfell");});
test("nedfelt -> nedfelt", function() {deepEqual( Stem("nedfelt"), "nedfelt");});
test("nedjustert -> nedjuster", function() {deepEqual( Stem("nedjustert"), "nedjuster");});
test("nedlagd -> nedlagd", function() {deepEqual( Stem("nedlagd"), "nedlagd");});
test("nedlagt -> nedlagt", function() {deepEqual( Stem("nedlagt"), "nedlagt");});
test("nedlegge -> nedlegg", function() {deepEqual( Stem("nedlegge"), "nedlegg");});
test("nedleggelse -> nedlegg", function() {deepEqual( Stem("nedleggelse"), "nedlegg");});
test("nedlegges -> nedlegg", function() {deepEqual( Stem("nedlegges"), "nedlegg");});
test("nedlegging -> nedlegging", function() {deepEqual( Stem("nedlegging"), "nedlegging");});
test("nedover -> nedov", function() {deepEqual( Stem("nedover"), "nedov");});
test("nedprioritere -> nedprioriter", function() {deepEqual( Stem("nedprioritere"), "nedprioriter");});
test("nedpå -> nedpå", function() {deepEqual( Stem("nedpå"), "nedpå");});
test("nedre -> nedr", function() {deepEqual( Stem("nedre"), "nedr");});
test("nedsatt -> nedsatt", function() {deepEqual( Stem("nedsatt"), "nedsatt");});
test("nedsatte -> nedsatt", function() {deepEqual( Stem("nedsatte"), "nedsatt");});
test("nedsetjing -> nedsetjing", function() {deepEqual( Stem("nedsetjing"), "nedsetjing");});
test("nedsette -> nedsett", function() {deepEqual( Stem("nedsette"), "nedsett");});
test("nedsettelse -> nedsett", function() {deepEqual( Stem("nedsettelse"), "nedsett");});
test("nedskrivninger -> nedskrivning", function() {deepEqual( Stem("nedskrivninger"), "nedskrivning");});
test("nedsnedd -> nedsnedd", function() {deepEqual( Stem("nedsnedd"), "nedsnedd");});
test("nedstigande -> nedst", function() {deepEqual( Stem("nedstigande"), "nedst");});
test("negativ -> negativ", function() {deepEqual( Stem("negativ"), "negativ");});
test("negative -> negativ", function() {deepEqual( Stem("negative"), "negativ");});
test("negativt -> negativ", function() {deepEqual( Stem("negativt"), "negativ");});
test("neglene -> negl", function() {deepEqual( Stem("neglene"), "negl");});
test("negler -> negl", function() {deepEqual( Stem("negler"), "negl");});
test("nei -> nei", function() {deepEqual( Stem("nei"), "nei");});
test("neida -> neid", function() {deepEqual( Stem("neida"), "neid");});
test("neie -> neie", function() {deepEqual( Stem("neie"), "neie");});
test("neier -> neier", function() {deepEqual( Stem("neier"), "neier");});
test("nekta -> nekt", function() {deepEqual( Stem("nekta"), "nekt");});
test("nektar -> nekt", function() {deepEqual( Stem("nektar"), "nekt");});
test("nektast -> nekt", function() {deepEqual( Stem("nektast"), "nekt");});
test("nekte -> nekt", function() {deepEqual( Stem("nekte"), "nekt");});
test("nekter -> nekt", function() {deepEqual( Stem("nekter"), "nekt");});
test("nektet -> nekt", function() {deepEqual( Stem("nektet"), "nekt");});
test("nekting -> nekting", function() {deepEqual( Stem("nekting"), "nekting");});
test("nektinga -> nekting", function() {deepEqual( Stem("nektinga"), "nekting");});
test("nels -> nel", function() {deepEqual( Stem("nels"), "nel");});
test("nemleg -> nem", function() {deepEqual( Stem("nemleg"), "nem");});
test("nemlig -> nem", function() {deepEqual( Stem("nemlig"), "nem");});
test("nemnande -> nemn", function() {deepEqual( Stem("nemnande"), "nemn");});
test("nemnast -> nemn", function() {deepEqual( Stem("nemnast"), "nemn");});
test("nemnd -> nemnd", function() {deepEqual( Stem("nemnd"), "nemnd");});
test("nemnda -> nemnd", function() {deepEqual( Stem("nemnda"), "nemnd");});
test("nemnde -> nemnd", function() {deepEqual( Stem("nemnde"), "nemnd");});
test("nemndene -> nemnd", function() {deepEqual( Stem("nemndene"), "nemnd");});
test("nemnder -> nemnd", function() {deepEqual( Stem("nemnder"), "nemnd");});
test("nemne -> nemn", function() {deepEqual( Stem("nemne"), "nemn");});
test("nemner -> nemn", function() {deepEqual( Stem("nemner"), "nemn");});
test("nemning -> nemning", function() {deepEqual( Stem("nemning"), "nemning");});
test("nemninga -> nemning", function() {deepEqual( Stem("nemninga"), "nemning");});
test("nemningane -> nemning", function() {deepEqual( Stem("nemningane"), "nemning");});
test("nemningar -> nemning", function() {deepEqual( Stem("nemningar"), "nemning");});
test("nemnt -> nemnt", function() {deepEqual( Stem("nemnt"), "nemnt");});
test("nemo -> nemo", function() {deepEqual( Stem("nemo"), "nemo");});
test("neppe -> nepp", function() {deepEqual( Stem("neppe"), "nepp");});
test("nepsdatter -> nepsdatt", function() {deepEqual( Stem("nepsdatter"), "nepsdatt");});
test("neseborene -> nesebor", function() {deepEqual( Stem("neseborene"), "nesebor");});
test("nesen -> nes", function() {deepEqual( Stem("nesen"), "nes");});
test("nest -> nest", function() {deepEqual( Stem("nest"), "nest");});
test("neste -> nest", function() {deepEqual( Stem("neste"), "nest");});
test("nesten -> nest", function() {deepEqual( Stem("nesten"), "nest");});
test("nestenulykker -> nestenulykk", function() {deepEqual( Stem("nestenulykker"), "nestenulykk");});
test("nestleder -> nestled", function() {deepEqual( Stem("nestleder"), "nestled");});
test("nestledervervet -> nestlederverv", function() {deepEqual( Stem("nestledervervet"), "nestlederverv");});
test("nestleiar -> nestlei", function() {deepEqual( Stem("nestleiar"), "nestlei");});
test("nett -> nett", function() {deepEqual( Stem("nett"), "nett");});
test("netter -> nett", function() {deepEqual( Stem("netter"), "nett");});
test("nettet -> nett", function() {deepEqual( Stem("nettet"), "nett");});
test("netto -> netto", function() {deepEqual( Stem("netto"), "netto");});
test("nettoeiga -> netto", function() {deepEqual( Stem("nettoeiga"), "netto");});
test("nettoen -> netto", function() {deepEqual( Stem("nettoen"), "netto");});
test("nettoformue -> nettoformu", function() {deepEqual( Stem("nettoformue"), "nettoformu");});
test("nettopp -> nettopp", function() {deepEqual( Stem("nettopp"), "nettopp");});
test("nettopremier -> nettopremi", function() {deepEqual( Stem("nettopremier"), "nettopremi");});
test("nettoverdiane -> nettoverdi", function() {deepEqual( Stem("nettoverdiane"), "nettoverdi");});
test("nettoverdien -> nettoverdi", function() {deepEqual( Stem("nettoverdien"), "nettoverdi");});
test("nettoverdier -> nettoverdi", function() {deepEqual( Stem("nettoverdier"), "nettoverdi");});
test("nettsider -> nettsid", function() {deepEqual( Stem("nettsider"), "nettsid");});
test("nettverk -> nettverk", function() {deepEqual( Stem("nettverk"), "nettverk");});
test("network -> network", function() {deepEqual( Stem("network"), "network");});
test("neve -> nev", function() {deepEqual( Stem("neve"), "nev");});
test("nevekamp -> nevekamp", function() {deepEqual( Stem("nevekamp"), "nevekamp");});
test("nevekjemper -> nevekjemp", function() {deepEqual( Stem("nevekjemper"), "nevekjemp");});
test("neven -> nev", function() {deepEqual( Stem("neven"), "nev");});
test("nevene -> nev", function() {deepEqual( Stem("nevene"), "nev");});
test("never -> nev", function() {deepEqual( Stem("never"), "nev");});
test("nevn -> nevn", function() {deepEqual( Stem("nevn"), "nevn");});
test("nevne -> nevn", function() {deepEqual( Stem("nevne"), "nevn");});
test("nevner -> nevn", function() {deepEqual( Stem("nevner"), "nevn");});
test("nevnes -> nevn", function() {deepEqual( Stem("nevnes"), "nevn");});
test("nevneverdige -> nevneverd", function() {deepEqual( Stem("nevneverdige"), "nevneverd");});
test("nevnt -> nevnt", function() {deepEqual( Stem("nevnt"), "nevnt");});
test("nevnte -> nevnt", function() {deepEqual( Stem("nevnte"), "nevnt");});
test("new -> new", function() {deepEqual( Stem("new"), "new");});
test("nf -> nf", function() {deepEqual( Stem("nf"), "nf");});
test("nff -> nff", function() {deepEqual( Stem("nff"), "nff");});
test("nho -> nho", function() {deepEqual( Stem("nho"), "nho");});
test("ni -> ni", function() {deepEqual( Stem("ni"), "ni");});
test("niande -> niand", function() {deepEqual( Stem("niande"), "niand");});
test("nibr -> nibr", function() {deepEqual( Stem("nibr"), "nibr");});
test("nibrs -> nibr", function() {deepEqual( Stem("nibrs"), "nibr");});
test("nicht -> nicht", function() {deepEqual( Stem("nicht"), "nicht");});
test("nidhogg -> nidhogg", function() {deepEqual( Stem("nidhogg"), "nidhogg");});
test("niende -> niend", function() {deepEqual( Stem("niende"), "niend");});
test("niflheim -> niflheim", function() {deepEqual( Stem("niflheim"), "niflheim");});
test("nikker -> nikk", function() {deepEqual( Stem("nikker"), "nikk");});
test("nils -> nil", function() {deepEqual( Stem("nils"), "nil");});
test("nina -> nin", function() {deepEqual( Stem("nina"), "nin");});
test("nisjer -> nisj", function() {deepEqual( Stem("nisjer"), "nisj");});
test("nistemat -> nistemat", function() {deepEqual( Stem("nistemat"), "nistemat");});
test("nisten -> nist", function() {deepEqual( Stem("nisten"), "nist");});
test("nistepose -> nistepos", function() {deepEqual( Stem("nistepose"), "nistepos");});
test("nisteposen -> nistepos", function() {deepEqual( Stem("nisteposen"), "nistepos");});
test("nisteskreppa -> nisteskrepp", function() {deepEqual( Stem("nisteskreppa"), "nisteskrepp");});
test("nitberg -> nitberg", function() {deepEqual( Stem("nitberg"), "nitberg");});
test("nitbergs -> nitberg", function() {deepEqual( Stem("nitbergs"), "nitberg");});
test("nivå -> nivå", function() {deepEqual( Stem("nivå"), "nivå");});
test("nivåene -> nivå", function() {deepEqual( Stem("nivåene"), "nivå");});
test("nivåer -> nivå", function() {deepEqual( Stem("nivåer"), "nivå");});
test("nivået -> nivå", function() {deepEqual( Stem("nivået"), "nivå");});
test("njord -> njord", function() {deepEqual( Stem("njord"), "njord");});
test("njords -> njord", function() {deepEqual( Stem("njords"), "njord");});
test("nkl -> nkl", function() {deepEqual( Stem("nkl"), "nkl");});
test("no -> no", function() {deepEqual( Stem("no"), "no");});
test("noahs -> noah", function() {deepEqual( Stem("noahs"), "noah");});
test("noatun -> noatun", function() {deepEqual( Stem("noatun"), "noatun");});
test("noe -> noe", function() {deepEqual( Stem("noe"), "noe");});
test("noen -> noen", function() {deepEqual( Stem("noen"), "noen");});
test("noenlunde -> noenlund", function() {deepEqual( Stem("noenlunde"), "noenlund");});
test("nogjeldande -> nogjeld", function() {deepEqual( Stem("nogjeldande"), "nogjeld");});
test("nok -> nok", function() {deepEqual( Stem("nok"), "nok");});
test("noka -> nok", function() {deepEqual( Stem("noka"), "nok");});
test("noko -> noko", function() {deepEqual( Stem("noko"), "noko");});
test("nokolunde -> nokolund", function() {deepEqual( Stem("nokolunde"), "nokolund");});
test("nokon -> nokon", function() {deepEqual( Stem("nokon"), "nokon");});
test("nokre -> nokr", function() {deepEqual( Stem("nokre"), "nokr");});
test("nokså -> nokså", function() {deepEqual( Stem("nokså"), "nokså");});
test("nomenklaturen -> nomenklatur", function() {deepEqual( Stem("nomenklaturen"), "nomenklatur");});
test("nominell -> nominell", function() {deepEqual( Stem("nominell"), "nominell");});
test("nominelle -> nominell", function() {deepEqual( Stem("nominelle"), "nominell");});
test("nominelt -> nominelt", function() {deepEqual( Stem("nominelt"), "nominelt");});
test("nor -> nor", function() {deepEqual( Stem("nor"), "nor");});
test("norcem -> norcem", function() {deepEqual( Stem("norcem"), "norcem");});
test("norconsult -> norconsult", function() {deepEqual( Stem("norconsult"), "norconsult");});
test("nord -> nord", function() {deepEqual( Stem("nord"), "nord");});
test("nordeuropeisk -> nordeuropeisk", function() {deepEqual( Stem("nordeuropeisk"), "nordeuropeisk");});
test("nordisk -> nordisk", function() {deepEqual( Stem("nordisk"), "nordisk");});
test("nordiska -> nordisk", function() {deepEqual( Stem("nordiska"), "nordisk");});
test("nordiske -> nordisk", function() {deepEqual( Stem("nordiske"), "nordisk");});
test("nordlige -> nord", function() {deepEqual( Stem("nordlige"), "nord");});
test("nordover -> nordov", function() {deepEqual( Stem("nordover"), "nordov");});
test("nordre -> nordr", function() {deepEqual( Stem("nordre"), "nordr");});
test("nordsjøen -> nordsjø", function() {deepEqual( Stem("nordsjøen"), "nordsjø");});
test("nordsjøtrafikken -> nordsjøtrafikk", function() {deepEqual( Stem("nordsjøtrafikken"), "nordsjøtrafikk");});
test("nordøst -> nordøst", function() {deepEqual( Stem("nordøst"), "nordøst");});
test("noreg -> noreg", function() {deepEqual( Stem("noreg"), "noreg");});
test("noregs -> noreg", function() {deepEqual( Stem("noregs"), "noreg");});
test("norge -> norg", function() {deepEqual( Stem("norge"), "norg");});
test("norges -> norg", function() {deepEqual( Stem("norges"), "norg");});
test("norgeslast -> norgesl", function() {deepEqual( Stem("norgeslast"), "norgesl");});
test("norm -> norm", function() {deepEqual( Stem("norm"), "norm");});
test("normal -> normal", function() {deepEqual( Stem("normal"), "normal");});
test("normale -> normal", function() {deepEqual( Stem("normale"), "normal");});
test("normalordninga -> normalordning", function() {deepEqual( Stem("normalordninga"), "normalordning");});
test("normalt -> normalt", function() {deepEqual( Stem("normalt"), "normalt");});
test("normalvedtektene -> normalvedtekt", function() {deepEqual( Stem("normalvedtektene"), "normalvedtekt");});
test("normann -> normann", function() {deepEqual( Stem("normann"), "normann");});
test("normer -> norm", function() {deepEqual( Stem("normer"), "norm");});
test("normert -> normer", function() {deepEqual( Stem("normert"), "normer");});
test("nornen -> norn", function() {deepEqual( Stem("nornen"), "norn");});
test("nornene -> norn", function() {deepEqual( Stem("nornene"), "norn");});
test("norner -> norn", function() {deepEqual( Stem("norner"), "norn");});
test("norsk -> norsk", function() {deepEqual( Stem("norsk"), "norsk");});
test("norske -> norsk", function() {deepEqual( Stem("norske"), "norsk");});
test("noss -> noss", function() {deepEqual( Stem("noss"), "noss");});
test("notat -> notat", function() {deepEqual( Stem("notat"), "notat");});
test("notatet -> notat", function() {deepEqual( Stem("notatet"), "notat");});
test("note -> not", function() {deepEqual( Stem("note"), "not");});
test("noter -> not", function() {deepEqual( Stem("noter"), "not");});
test("notering -> notering", function() {deepEqual( Stem("notering"), "notering");});
test("noteringa -> notering", function() {deepEqual( Stem("noteringa"), "notering");});
test("notert -> noter", function() {deepEqual( Stem("notert"), "noter");});
test("noterte -> noter", function() {deepEqual( Stem("noterte"), "noter");});
test("notifikasjonskravet -> notifikasjonskrav", function() {deepEqual( Stem("notifikasjonskravet"), "notifikasjonskrav");});
test("nou -> nou", function() {deepEqual( Stem("nou"), "nou");});
test("november -> novemb", function() {deepEqual( Stem("november"), "novemb");});
test("noverande -> nover", function() {deepEqual( Stem("noverande"), "nover");});
test("nr -> nr", function() {deepEqual( Stem("nr"), "nr");});
test("nsb -> nsb", function() {deepEqual( Stem("nsb"), "nsb");});
test("nsbs -> nsbs", function() {deepEqual( Stem("nsbs"), "nsbs");});
test("ntp -> ntp", function() {deepEqual( Stem("ntp"), "ntp");});
test("null -> null", function() {deepEqual( Stem("null"), "null");});
test("numedalslågen -> numedalslåg", function() {deepEqual( Stem("numedalslågen"), "numedalslåg");});
test("nummer -> numm", function() {deepEqual( Stem("nummer"), "numm");});
test("nummeret -> nummer", function() {deepEqual( Stem("nummeret"), "nummer");});
test("nummerordningar -> nummerordning", function() {deepEqual( Stem("nummerordningar"), "nummerordning");});
test("nustad -> nustad", function() {deepEqual( Stem("nustad"), "nustad");});
test("nvvp -> nvvp", function() {deepEqual( Stem("nvvp"), "nvvp");});
test("ny -> ny", function() {deepEqual( Stem("ny"), "ny");});
test("nyanlegget -> nyanlegg", function() {deepEqual( Stem("nyanlegget"), "nyanlegg");});
test("nyansatte -> nyansatt", function() {deepEqual( Stem("nyansatte"), "nyansatt");});
test("nyansert -> nyanser", function() {deepEqual( Stem("nyansert"), "nyanser");});
test("nyanserte -> nyanser", function() {deepEqual( Stem("nyanserte"), "nyanser");});
test("nyare -> nyar", function() {deepEqual( Stem("nyare"), "nyar");});
test("nyaste -> nyast", function() {deepEqual( Stem("nyaste"), "nyast");});
test("nybrottsmenn -> nybrottsmenn", function() {deepEqual( Stem("nybrottsmenn"), "nybrottsmenn");});
test("nybyen -> nyby", function() {deepEqual( Stem("nybyen"), "nyby");});
test("nybygg -> nybygg", function() {deepEqual( Stem("nybygg"), "nybygg");});
test("nybygget -> nybygg", function() {deepEqual( Stem("nybygget"), "nybygg");});
test("nybygging -> nybygging", function() {deepEqual( Stem("nybygging"), "nybygging");});
test("nybygginga -> nybygging", function() {deepEqual( Stem("nybygginga"), "nybygging");});
test("nydelig -> nyd", function() {deepEqual( Stem("nydelig"), "nyd");});
test("nye -> nye", function() {deepEqual( Stem("nye"), "nye");});
test("nyere -> nyer", function() {deepEqual( Stem("nyere"), "nyer");});
test("nyetablering -> nyetablering", function() {deepEqual( Stem("nyetablering"), "nyetablering");});
test("nyetablerte -> nyetabler", function() {deepEqual( Stem("nyetablerte"), "nyetabler");});
test("nyfødte -> nyfød", function() {deepEqual( Stem("nyfødte"), "nyfød");});
test("nyinnmelde -> nyinnmeld", function() {deepEqual( Stem("nyinnmelde"), "nyinnmeld");});
test("nykommerne -> nykommern", function() {deepEqual( Stem("nykommerne"), "nykommern");});
test("nyleg -> nyleg", function() {deepEqual( Stem("nyleg"), "nyleg");});
test("nylig -> nyl", function() {deepEqual( Stem("nylig"), "nyl");});
test("nymalt -> nymalt", function() {deepEqual( Stem("nymalt"), "nymalt");});
test("nynnende -> nynn", function() {deepEqual( Stem("nynnende"), "nynn");});
test("nynner -> nynn", function() {deepEqual( Stem("nynner"), "nynn");});
test("nyoppførte -> nyoppført", function() {deepEqual( Stem("nyoppførte"), "nyoppført");});
test("nysgjerrig -> nysgjerr", function() {deepEqual( Stem("nysgjerrig"), "nysgjerr");});
test("nysgjerrige -> nysgjerr", function() {deepEqual( Stem("nysgjerrige"), "nysgjerr");});
test("nysgjerrighet -> nysgjerr", function() {deepEqual( Stem("nysgjerrighet"), "nysgjerr");});
test("nyskapning -> nyskapning", function() {deepEqual( Stem("nyskapning"), "nyskapning");});
test("nyskapninger -> nyskapning", function() {deepEqual( Stem("nyskapninger"), "nyskapning");});
test("nyskapt -> nyskapt", function() {deepEqual( Stem("nyskapt"), "nyskapt");});
test("nystifta -> nystift", function() {deepEqual( Stem("nystifta"), "nystift");});
test("nyte -> nyt", function() {deepEqual( Stem("nyte"), "nyt");});
test("nyter -> nyt", function() {deepEqual( Stem("nyter"), "nyt");});
test("nytt -> nytt", function() {deepEqual( Stem("nytt"), "nytt");});
test("nytta -> nytt", function() {deepEqual( Stem("nytta"), "nytt");});
test("nyttar -> nytt", function() {deepEqual( Stem("nyttar"), "nytt");});
test("nyttast -> nytt", function() {deepEqual( Stem("nyttast"), "nytt");});
test("nytte -> nytt", function() {deepEqual( Stem("nytte"), "nytt");});
test("nytteeffekter -> nytteeffekt", function() {deepEqual( Stem("nytteeffekter"), "nytteeffekt");});
test("nyttekostnadsanalyse -> nyttekostnadsanalys", function() {deepEqual( Stem("nyttekostnadsanalyse"), "nyttekostnadsanalys");});
test("nyttekostnadsanalyser -> nyttekostnadsanalys", function() {deepEqual( Stem("nyttekostnadsanalyser"), "nyttekostnadsanalys");});
test("nytten -> nytt", function() {deepEqual( Stem("nytten"), "nytt");});
test("nytter -> nytt", function() {deepEqual( Stem("nytter"), "nytt");});
test("nyttes -> nytt", function() {deepEqual( Stem("nyttes"), "nytt");});
test("nyttet -> nytt", function() {deepEqual( Stem("nyttet"), "nytt");});
test("nyttetrafikken -> nyttetrafikk", function() {deepEqual( Stem("nyttetrafikken"), "nyttetrafikk");});
test("nyttig -> nytt", function() {deepEqual( Stem("nyttig"), "nytt");});
test("nyttiggjøre -> nyttiggjør", function() {deepEqual( Stem("nyttiggjøre"), "nyttiggjør");});
test("nyval -> nyval", function() {deepEqual( Stem("nyval"), "nyval");});
test("nå -> nå", function() {deepEqual( Stem("nå"), "nå");});
test("nådd -> nådd", function() {deepEqual( Stem("nådd"), "nådd");});
test("nåde -> nåd", function() {deepEqual( Stem("nåde"), "nåd");});
test("nådeløs -> nådeløs", function() {deepEqual( Stem("nådeløs"), "nådeløs");});
test("någjeldende -> någjeld", function() {deepEqual( Stem("någjeldende"), "någjeld");});
test("nål -> nål", function() {deepEqual( Stem("nål"), "nål");});
test("når -> når", function() {deepEqual( Stem("når"), "når");});
test("nås -> nås", function() {deepEqual( Stem("nås"), "nås");});
test("nåstrand -> nåstrand", function() {deepEqual( Stem("nåstrand"), "nåstrand");});
test("nåtid -> nåtid", function() {deepEqual( Stem("nåtid"), "nåtid");});
test("nått -> nått", function() {deepEqual( Stem("nått"), "nått");});
test("nåverdi -> nåverdi", function() {deepEqual( Stem("nåverdi"), "nåverdi");});
test("nåverdien -> nåverdi", function() {deepEqual( Stem("nåverdien"), "nåverdi");});
test("nåværende -> nåvær", function() {deepEqual( Stem("nåværende"), "nåvær");});
test("nær -> nær", function() {deepEqual( Stem("nær"), "nær");});
test("nærare -> nærar", function() {deepEqual( Stem("nærare"), "nærar");});
test("nærast -> nær", function() {deepEqual( Stem("nærast"), "nær");});
test("næraste -> nærast", function() {deepEqual( Stem("næraste"), "nærast");});
test("nære -> nær", function() {deepEqual( Stem("nære"), "nær");});
test("nærhet -> nær", function() {deepEqual( Stem("nærhet"), "nær");});
test("nærheten -> nær", function() {deepEqual( Stem("nærheten"), "nær");});
test("næring -> næring", function() {deepEqual( Stem("næring"), "næring");});
test("næringer -> næring", function() {deepEqual( Stem("næringer"), "næring");});
test("nærings -> næring", function() {deepEqual( Stem("nærings"), "næring");});
test("næringsaktivitet -> næringsaktivit", function() {deepEqual( Stem("næringsaktivitet"), "næringsaktivit");});
test("næringsaktiviteter -> næringsaktivitet", function() {deepEqual( Stem("næringsaktiviteter"), "næringsaktivitet");});
test("næringsdrivande -> næringsdriv", function() {deepEqual( Stem("næringsdrivande"), "næringsdriv");});
test("næringsforhold -> næringsforhold", function() {deepEqual( Stem("næringsforhold"), "næringsforhold");});
test("næringsformål -> næringsformål", function() {deepEqual( Stem("næringsformål"), "næringsformål");});
test("næringsinteresser -> næringsinteress", function() {deepEqual( Stem("næringsinteresser"), "næringsinteress");});
test("næringsliv -> næringsliv", function() {deepEqual( Stem("næringsliv"), "næringsliv");});
test("næringslivet -> næringsliv", function() {deepEqual( Stem("næringslivet"), "næringsliv");});
test("næringslivets -> næringsliv", function() {deepEqual( Stem("næringslivets"), "næringsliv");});
test("næringslivsaktivitet -> næringslivsaktivit", function() {deepEqual( Stem("næringslivsaktivitet"), "næringslivsaktivit");});
test("næringslivspolitikk -> næringslivspolitikk", function() {deepEqual( Stem("næringslivspolitikk"), "næringslivspolitikk");});
test("næringslivsutvikling -> næringslivsutvikling", function() {deepEqual( Stem("næringslivsutvikling"), "næringslivsutvikling");});
test("næringsplan -> næringsplan", function() {deepEqual( Stem("næringsplan"), "næringsplan");});
test("næringspolitikk -> næringspolitikk", function() {deepEqual( Stem("næringspolitikk"), "næringspolitikk");});
test("næringspolitikken -> næringspolitikk", function() {deepEqual( Stem("næringspolitikken"), "næringspolitikk");});
test("næringspolitikkens -> næringspolitikk", function() {deepEqual( Stem("næringspolitikkens"), "næringspolitikk");});
test("næringspolitisk -> næringspolitisk", function() {deepEqual( Stem("næringspolitisk"), "næringspolitisk");});
test("næringspolitiske -> næringspolitisk", function() {deepEqual( Stem("næringspolitiske"), "næringspolitisk");});
test("næringsrettede -> næringsrett", function() {deepEqual( Stem("næringsrettede"), "næringsrett");});
test("næringsråd -> næringsråd", function() {deepEqual( Stem("næringsråd"), "næringsråd");});
test("næringssameiger -> næringssam", function() {deepEqual( Stem("næringssameiger"), "næringssam");});
test("næringsseksjonar -> næringsseksjon", function() {deepEqual( Stem("næringsseksjonar"), "næringsseksjon");});
test("næringsutvikling -> næringsutvikling", function() {deepEqual( Stem("næringsutvikling"), "næringsutvikling");});
test("næringsutviklingen -> næringsutvikling", function() {deepEqual( Stem("næringsutviklingen"), "næringsutvikling");});
test("næringsutøvere -> næringsutøver", function() {deepEqual( Stem("næringsutøvere"), "næringsutøver");});
test("næringsverksemd -> næringsverksemd", function() {deepEqual( Stem("næringsverksemd"), "næringsverksemd");});
test("næringsvirksomhet -> næringsvirksom", function() {deepEqual( Stem("næringsvirksomhet"), "næringsvirksom");});
test("næringsvirksomheten -> næringsvirksom", function() {deepEqual( Stem("næringsvirksomheten"), "næringsvirksom");});
test("næringsvirksomheter -> næringsvirksom", function() {deepEqual( Stem("næringsvirksomheter"), "næringsvirksom");});
test("næringsøkonomi -> næringsøkonomi", function() {deepEqual( Stem("næringsøkonomi"), "næringsøkonomi");});
test("næringsøkonomiske -> næringsøkonomisk", function() {deepEqual( Stem("næringsøkonomiske"), "næringsøkonomisk");});
test("nærliggende -> nærligg", function() {deepEqual( Stem("nærliggende"), "nærligg");});
test("nærliggjande -> nærliggj", function() {deepEqual( Stem("nærliggjande"), "nærliggj");});
test("nærmar -> nærm", function() {deepEqual( Stem("nærmar"), "nærm");});
test("nærme -> nærm", function() {deepEqual( Stem("nærme"), "nærm");});
test("nærmer -> nærm", function() {deepEqual( Stem("nærmer"), "nærm");});
test("nærmere -> nærmer", function() {deepEqual( Stem("nærmere"), "nærmer");});
test("nærmest -> nærmest", function() {deepEqual( Stem("nærmest"), "nærmest");});
test("nærmeste -> nærmest", function() {deepEqual( Stem("nærmeste"), "nærmest");});
test("nærmiljøet -> nærmiljø", function() {deepEqual( Stem("nærmiljøet"), "nærmiljø");});
test("nærområde -> nærområd", function() {deepEqual( Stem("nærområde"), "nærområd");});
test("nærområdene -> nærområd", function() {deepEqual( Stem("nærområdene"), "nærområd");});
test("nærområder -> nærområd", function() {deepEqual( Stem("nærområder"), "nærområd");});
test("nærskipsfarten -> nærskipsfart", function() {deepEqual( Stem("nærskipsfarten"), "nærskipsfart");});
test("nærståande -> nærstå", function() {deepEqual( Stem("nærståande"), "nærstå");});
test("nærstående -> nærstå", function() {deepEqual( Stem("nærstående"), "nærstå");});
test("nært -> nært", function() {deepEqual( Stem("nært"), "nært");});
test("nærtliggende -> nærtligg", function() {deepEqual( Stem("nærtliggende"), "nærtligg");});
test("nærtrafikk -> nærtrafikk", function() {deepEqual( Stem("nærtrafikk"), "nærtrafikk");});
test("nærvere -> nærver", function() {deepEqual( Stem("nærvere"), "nærver");});
test("nød -> nød", function() {deepEqual( Stem("nød"), "nød");});
test("nødig -> nød", function() {deepEqual( Stem("nødig"), "nød");});
test("nødt -> nødt", function() {deepEqual( Stem("nødt"), "nødt");});
test("nødvendig -> nødvend", function() {deepEqual( Stem("nødvendig"), "nødvend");});
test("nødvendige -> nødvend", function() {deepEqual( Stem("nødvendige"), "nødvend");});
test("nødvendigheten -> nødvend", function() {deepEqual( Stem("nødvendigheten"), "nødvend");});
test("nødvendigvis -> nødvendigvis", function() {deepEqual( Stem("nødvendigvis"), "nødvendigvis");});
test("nøgde -> nøgd", function() {deepEqual( Stem("nøgde"), "nøgd");});
test("nøkk -> nøkk", function() {deepEqual( Stem("nøkk"), "nøkk");});
test("nøkkel -> nøkkel", function() {deepEqual( Stem("nøkkel"), "nøkkel");});
test("nøkkelen -> nøkkel", function() {deepEqual( Stem("nøkkelen"), "nøkkel");});
test("nøkkelknippe -> nøkkelknipp", function() {deepEqual( Stem("nøkkelknippe"), "nøkkelknipp");});
test("nøkkelroller -> nøkkelroll", function() {deepEqual( Stem("nøkkelroller"), "nøkkelroll");});
test("nøktern -> nøktern", function() {deepEqual( Stem("nøktern"), "nøktern");});
test("nøkterne -> nøktern", function() {deepEqual( Stem("nøkterne"), "nøktern");});
test("nøle -> nøl", function() {deepEqual( Stem("nøle"), "nøl");});
test("nøler -> nøl", function() {deepEqual( Stem("nøler"), "nøl");});
test("nøtt -> nøtt", function() {deepEqual( Stem("nøtt"), "nøtt");});
test("nøtteskall -> nøtteskall", function() {deepEqual( Stem("nøtteskall"), "nøtteskall");});
test("nøyaktig -> nøyakt", function() {deepEqual( Stem("nøyaktig"), "nøyakt");});
test("nøyd -> nøyd", function() {deepEqual( Stem("nøyd"), "nøyd");});
test("nøye -> nøye", function() {deepEqual( Stem("nøye"), "nøye");});
test("nøyer -> nøyer", function() {deepEqual( Stem("nøyer"), "nøyer");});
test("nøyere -> nøyer", function() {deepEqual( Stem("nøyere"), "nøyer");});
test("nøytral -> nøytral", function() {deepEqual( Stem("nøytral"), "nøytral");});
test("nøytrale -> nøytral", function() {deepEqual( Stem("nøytrale"), "nøytral");});
test("nøytralitet -> nøytralit", function() {deepEqual( Stem("nøytralitet"), "nøytralit");});
test("nøytralt -> nøytralt", function() {deepEqual( Stem("nøytralt"), "nøytralt");});
test("o -> o", function() {deepEqual( Stem("o"), "o");});
test("objekta -> objekt", function() {deepEqual( Stem("objekta"), "objekt");});
test("objektet -> objekt", function() {deepEqual( Stem("objektet"), "objekt");});
test("obligasjonar -> obligasjon", function() {deepEqual( Stem("obligasjonar"), "obligasjon");});
test("obligasjonen -> obligasjon", function() {deepEqual( Stem("obligasjonen"), "obligasjon");});
test("obligasjonens -> obligasjon", function() {deepEqual( Stem("obligasjonens"), "obligasjon");});
test("obligasjoner -> obligasjon", function() {deepEqual( Stem("obligasjoner"), "obligasjon");});
test("obligasjonsinnskot -> obligasjonsinnskot", function() {deepEqual( Stem("obligasjonsinnskot"), "obligasjonsinnskot");});
test("obligasjonsleilegheiter -> obligasjonsleilegheit", function() {deepEqual( Stem("obligasjonsleilegheiter"), "obligasjonsleilegheit");});
test("obligasjonsleilighet -> obligasjonslei", function() {deepEqual( Stem("obligasjonsleilighet"), "obligasjonslei");});
test("obligatorisk -> obligatorisk", function() {deepEqual( Stem("obligatorisk"), "obligatorisk");});
test("obligatoriske -> obligatorisk", function() {deepEqual( Stem("obligatoriske"), "obligatorisk");});
test("obos -> obo", function() {deepEqual( Stem("obos"), "obo");});
test("observasjon -> observasjon", function() {deepEqual( Stem("observasjon"), "observasjon");});
test("observatør -> observatør", function() {deepEqual( Stem("observatør"), "observatør");});
test("observatørar -> observatør", function() {deepEqual( Stem("observatørar"), "observatør");});
test("observatøren -> observatør", function() {deepEqual( Stem("observatøren"), "observatør");});
test("observert -> observer", function() {deepEqual( Stem("observert"), "observer");});
test("och -> och", function() {deepEqual( Stem("och"), "och");});
test("od -> od", function() {deepEqual( Stem("od"), "od");});
test("odder -> odd", function() {deepEqual( Stem("odder"), "odd");});
test("odelstinget -> odelsting", function() {deepEqual( Stem("odelstinget"), "odelsting");});
test("oder -> oder", function() {deepEqual( Stem("oder"), "oder");});
test("odin -> odin", function() {deepEqual( Stem("odin"), "odin");});
test("odins -> odin", function() {deepEqual( Stem("odins"), "odin");});
test("oecd -> oecd", function() {deepEqual( Stem("oecd"), "oecd");});
test("of -> of", function() {deepEqual( Stem("of"), "of");});
test("off -> off", function() {deepEqual( Stem("off"), "off");});
test("offentleg -> offent", function() {deepEqual( Stem("offentleg"), "offent");});
test("offentlege -> offent", function() {deepEqual( Stem("offentlege"), "offent");});
test("offentlegrettslege -> offentlegretts", function() {deepEqual( Stem("offentlegrettslege"), "offentlegretts");});
test("offentlig -> offent", function() {deepEqual( Stem("offentlig"), "offent");});
test("offentlige -> offent", function() {deepEqual( Stem("offentlige"), "offent");});
test("offentliges -> offent", function() {deepEqual( Stem("offentliges"), "offent");});
test("offentligheten -> offent", function() {deepEqual( Stem("offentligheten"), "offent");});
test("offerfesten -> offerfest", function() {deepEqual( Stem("offerfesten"), "offerfest");});
test("offisiell -> offisiell", function() {deepEqual( Stem("offisiell"), "offisiell");});
test("ofres -> ofr", function() {deepEqual( Stem("ofres"), "ofr");});
test("oftare -> oftar", function() {deepEqual( Stem("oftare"), "oftar");});
test("oftast -> oft", function() {deepEqual( Stem("oftast"), "oft");});
test("ofte -> oft", function() {deepEqual( Stem("ofte"), "oft");});
test("oftere -> ofter", function() {deepEqual( Stem("oftere"), "ofter");});
test("oftest -> oftest", function() {deepEqual( Stem("oftest"), "oftest");});
test("og -> og", function() {deepEqual( Stem("og"), "og");});
test("også -> også", function() {deepEqual( Stem("også"), "også");});
test("ogvalfader -> ogvalfad", function() {deepEqual( Stem("ogvalfader"), "ogvalfad");});
test("ohnstad -> ohnstad", function() {deepEqual( Stem("ohnstad"), "ohnstad");});
test("ohv -> ohv", function() {deepEqual( Stem("ohv"), "ohv");});
test("ohvs -> ohv", function() {deepEqual( Stem("ohvs"), "ohv");});
test("oioioi -> oioioi", function() {deepEqual( Stem("oioioi"), "oioioi");});
test("okolne -> okoln", function() {deepEqual( Stem("okolne"), "okoln");});
test("okse -> oks", function() {deepEqual( Stem("okse"), "oks");});
test("oksehodet -> oksehod", function() {deepEqual( Stem("oksehodet"), "oksehod");});
test("okselår -> okselår", function() {deepEqual( Stem("okselår"), "okselår");});
test("oksene -> oks", function() {deepEqual( Stem("oksene"), "oks");});
test("okser -> oks", function() {deepEqual( Stem("okser"), "oks");});
test("oktober -> oktob", function() {deepEqual( Stem("oktober"), "oktob");});
test("ol -> ol", function() {deepEqual( Stem("ol"), "ol");});
test("ola -> ola", function() {deepEqual( Stem("ola"), "ola");});
test("olav -> olav", function() {deepEqual( Stem("olav"), "olav");});
test("oldebarn -> oldebarn", function() {deepEqual( Stem("oldebarn"), "oldebarn");});
test("oldemor -> oldemor", function() {deepEqual( Stem("oldemor"), "oldemor");});
test("oldinger -> olding", function() {deepEqual( Stem("oldinger"), "olding");});
test("olje -> olj", function() {deepEqual( Stem("olje"), "olj");});
test("oljehavn -> oljehavn", function() {deepEqual( Stem("oljehavn"), "oljehavn");});
test("oljehavnen -> oljehavn", function() {deepEqual( Stem("oljehavnen"), "oljehavn");});
test("oljeprodukter -> oljeprodukt", function() {deepEqual( Stem("oljeprodukter"), "oljeprodukt");});
test("oljeraffineriet -> oljeraffineri", function() {deepEqual( Stem("oljeraffineriet"), "oljeraffineri");});
test("olmt -> olmt", function() {deepEqual( Stem("olmt"), "olmt");});
test("olsen -> ols", function() {deepEqual( Stem("olsen"), "ols");});
test("om -> om", function() {deepEqual( Stem("om"), "om");});
test("ombestemmer -> ombestemm", function() {deepEqual( Stem("ombestemmer"), "ombestemm");});
test("ombodsordning -> ombodsordning", function() {deepEqual( Stem("ombodsordning"), "ombodsordning");});
test("ombord -> ombord", function() {deepEqual( Stem("ombord"), "ombord");});
test("ombygging -> ombygging", function() {deepEqual( Stem("ombygging"), "ombygging");});
test("ombygginga -> ombygging", function() {deepEqual( Stem("ombygginga"), "ombygging");});
test("ombyting -> ombyting", function() {deepEqual( Stem("ombyting"), "ombyting");});
test("ombyttingsbetraktning -> ombyttingsbetraktning", function() {deepEqual( Stem("ombyttingsbetraktning"), "ombyttingsbetraktning");});
test("omdannast -> omdann", function() {deepEqual( Stem("omdannast"), "omdann");});
test("omdanne -> omdann", function() {deepEqual( Stem("omdanne"), "omdann");});
test("omdannelse -> omdann", function() {deepEqual( Stem("omdannelse"), "omdann");});
test("omdannes -> omdann", function() {deepEqual( Stem("omdannes"), "omdann");});
test("omdanning -> omdanning", function() {deepEqual( Stem("omdanning"), "omdanning");});
test("omdanninga -> omdanning", function() {deepEqual( Stem("omdanninga"), "omdanning");});
test("omdanningen -> omdanning", function() {deepEqual( Stem("omdanningen"), "omdanning");});
test("omdanninger -> omdanning", function() {deepEqual( Stem("omdanninger"), "omdanning");});
test("omdanningsreglane -> omdanningsregl", function() {deepEqual( Stem("omdanningsreglane"), "omdanningsregl");});
test("omdanningstidspunktet -> omdanningstidspunkt", function() {deepEqual( Stem("omdanningstidspunktet"), "omdanningstidspunkt");});
test("omdanningsvedtaket -> omdanningsvedtak", function() {deepEqual( Stem("omdanningsvedtaket"), "omdanningsvedtak");});
test("omdeling -> omdeling", function() {deepEqual( Stem("omdeling"), "omdeling");});
test("omdiskutert -> omdiskuter", function() {deepEqual( Stem("omdiskutert"), "omdiskuter");});
test("omdisponeres -> omdisponer", function() {deepEqual( Stem("omdisponeres"), "omdisponer");});
test("omdisponering -> omdisponering", function() {deepEqual( Stem("omdisponering"), "omdisponering");});
test("omegn -> omegn", function() {deepEqual( Stem("omegn"), "omegn");});
test("omfang -> omfang", function() {deepEqual( Stem("omfang"), "omfang");});
test("omfanget -> omfang", function() {deepEqual( Stem("omfanget"), "omfang");});
test("omfatta -> omfatt", function() {deepEqual( Stem("omfatta"), "omfatt");});
test("omfattande -> omfatt", function() {deepEqual( Stem("omfattande"), "omfatt");});
test("omfattar -> omfatt", function() {deepEqual( Stem("omfattar"), "omfatt");});
test("omfattast -> omfatt", function() {deepEqual( Stem("omfattast"), "omfatt");});
test("omfatte -> omfatt", function() {deepEqual( Stem("omfatte"), "omfatt");});
test("omfattende -> omfatt", function() {deepEqual( Stem("omfattende"), "omfatt");});
test("omfatter -> omfatt", function() {deepEqual( Stem("omfatter"), "omfatt");});
test("omfattes -> omfatt", function() {deepEqual( Stem("omfattes"), "omfatt");});
test("omfattet -> omfatt", function() {deepEqual( Stem("omfattet"), "omfatt");});
test("omfavne -> omfavn", function() {deepEqual( Stem("omfavne"), "omfavn");});
test("omfavner -> omfavn", function() {deepEqual( Stem("omfavner"), "omfavn");});
test("omfavnet -> omfavn", function() {deepEqual( Stem("omfavnet"), "omfavn");});
test("omfordelende -> omfordel", function() {deepEqual( Stem("omfordelende"), "omfordel");});
test("omfram -> omfram", function() {deepEqual( Stem("omfram"), "omfram");});
test("omgang -> omgang", function() {deepEqual( Stem("omgang"), "omgang");});
test("omgitt -> omgitt", function() {deepEqual( Stem("omgitt"), "omgitt");});
test("omgivelsene -> omgiv", function() {deepEqual( Stem("omgivelsene"), "omgiv");});
test("omgjering -> omgjering", function() {deepEqual( Stem("omgjering"), "omgjering");});
test("omgjeringa -> omgjering", function() {deepEqual( Stem("omgjeringa"), "omgjering");});
test("omgjort -> omgjort", function() {deepEqual( Stem("omgjort"), "omgjort");});
test("omgjøre -> omgjør", function() {deepEqual( Stem("omgjøre"), "omgjør");});
test("omgrepa -> omgrep", function() {deepEqual( Stem("omgrepa"), "omgrep");});
test("omgrepet -> omgrep", function() {deepEqual( Stem("omgrepet"), "omgrep");});
test("omgåelse -> omgå", function() {deepEqual( Stem("omgåelse"), "omgå");});
test("omgåing -> omgåing", function() {deepEqual( Stem("omgåing"), "omgåing");});
test("omgåingar -> omgåing", function() {deepEqual( Stem("omgåingar"), "omgåing");});
test("omhandler -> omhandl", function() {deepEqual( Stem("omhandler"), "omhandl");});
test("omhandles -> omhandl", function() {deepEqual( Stem("omhandles"), "omhandl");});
test("omhandlet -> omhandl", function() {deepEqual( Stem("omhandlet"), "omhandl");});
test("omkjøring -> omkjøring", function() {deepEqual( Stem("omkjøring"), "omkjøring");});
test("omkostningene -> omkostning", function() {deepEqual( Stem("omkostningene"), "omkostning");});
test("omkostninger -> omkostning", function() {deepEqual( Stem("omkostninger"), "omkostning");});
test("omkranser -> omkrans", function() {deepEqual( Stem("omkranser"), "omkrans");});
test("omkring -> omkring", function() {deepEqual( Stem("omkring"), "omkring");});
test("omkringliggende -> omkringligg", function() {deepEqual( Stem("omkringliggende"), "omkringligg");});
test("omlag -> omlag", function() {deepEqual( Stem("omlag"), "omlag");});
test("omland -> omland", function() {deepEqual( Stem("omland"), "omland");});
test("omlastet -> omlast", function() {deepEqual( Stem("omlastet"), "omlast");});
test("omlasting -> omlasting", function() {deepEqual( Stem("omlasting"), "omlasting");});
test("omlastingen -> omlasting", function() {deepEqual( Stem("omlastingen"), "omlasting");});
test("omlastingsarealer -> omlastingsareal", function() {deepEqual( Stem("omlastingsarealer"), "omlastingsareal");});
test("omlastingsområder -> omlastingsområd", function() {deepEqual( Stem("omlastingsområder"), "omlastingsområd");});
test("omlastingspotensialet -> omlastingspotensial", function() {deepEqual( Stem("omlastingspotensialet"), "omlastingspotensial");});
test("omlastingsterminal -> omlastingsterminal", function() {deepEqual( Stem("omlastingsterminal"), "omlastingsterminal");});
test("omlastingsterminaler -> omlastingsterminal", function() {deepEqual( Stem("omlastingsterminaler"), "omlastingsterminal");});
test("omlastingsvekst -> omlastingsvekst", function() {deepEqual( Stem("omlastingsvekst"), "omlastingsvekst");});
test("omlastingsvolumer -> omlastingsvolum", function() {deepEqual( Stem("omlastingsvolumer"), "omlastingsvolum");});
test("omlastningen -> omlastning", function() {deepEqual( Stem("omlastningen"), "omlastning");});
test("omlastninger -> omlastning", function() {deepEqual( Stem("omlastninger"), "omlastning");});
test("omlastningsforhold -> omlastningsforhold", function() {deepEqual( Stem("omlastningsforhold"), "omlastningsforhold");});
test("omlastningshavn -> omlastningshavn", function() {deepEqual( Stem("omlastningshavn"), "omlastningshavn");});
test("omlastningsterminaler -> omlastningsterminal", function() {deepEqual( Stem("omlastningsterminaler"), "omlastningsterminal");});
test("omlastningsvolum -> omlastningsvolum", function() {deepEqual( Stem("omlastningsvolum"), "omlastningsvolum");});
test("omlegging -> omlegging", function() {deepEqual( Stem("omlegging"), "omlegging");});
test("omleggingar -> omlegging", function() {deepEqual( Stem("omleggingar"), "omlegging");});
test("omlegginger -> omlegging", function() {deepEqual( Stem("omlegginger"), "omlegging");});
test("omliggende -> omligg", function() {deepEqual( Stem("omliggende"), "omligg");});
test("omlokalisering -> omlokalisering", function() {deepEqual( Stem("omlokalisering"), "omlokalisering");});
test("omløpshastighet -> omløpshast", function() {deepEqual( Stem("omløpshastighet"), "omløpshast");});
test("omme -> omm", function() {deepEqual( Stem("omme"), "omm");});
test("omorganisere -> omorganiser", function() {deepEqual( Stem("omorganisere"), "omorganiser");});
test("omorganiseres -> omorganiser", function() {deepEqual( Stem("omorganiseres"), "omorganiser");});
test("omorganisert -> omorganiser", function() {deepEqual( Stem("omorganisert"), "omorganiser");});
test("omprioritering -> omprioritering", function() {deepEqual( Stem("omprioritering"), "omprioritering");});
test("omprioriteringer -> omprioritering", function() {deepEqual( Stem("omprioriteringer"), "omprioritering");});
test("omregnet -> omregn", function() {deepEqual( Stem("omregnet"), "omregn");});
test("omregning -> omregning", function() {deepEqual( Stem("omregning"), "omregning");});
test("områ -> områ", function() {deepEqual( Stem("områ"), "områ");});
test("område -> områd", function() {deepEqual( Stem("område"), "områd");});
test("områdene -> områd", function() {deepEqual( Stem("områdene"), "områd");});
test("områder -> områd", function() {deepEqual( Stem("områder"), "områd");});
test("områders -> områd", function() {deepEqual( Stem("områders"), "områd");});
test("området -> områd", function() {deepEqual( Stem("området"), "områd");});
test("områdets -> områd", function() {deepEqual( Stem("områdets"), "områd");});
test("områdingstid -> områdingstid", function() {deepEqual( Stem("områdingstid"), "områdingstid");});
test("omsetjast -> omsetj", function() {deepEqual( Stem("omsetjast"), "omsetj");});
test("omsetje -> omsetj", function() {deepEqual( Stem("omsetje"), "omsetj");});
test("omsetjeleg -> omsetj", function() {deepEqual( Stem("omsetjeleg"), "omsetj");});
test("omsetjelege -> omsetj", function() {deepEqual( Stem("omsetjelege"), "omsetj");});
test("omsetjing -> omsetjing", function() {deepEqual( Stem("omsetjing"), "omsetjing");});
test("omsetjinga -> omsetjing", function() {deepEqual( Stem("omsetjinga"), "omsetjing");});
test("omsetning -> omsetning", function() {deepEqual( Stem("omsetning"), "omsetning");});
test("omsetninga -> omsetning", function() {deepEqual( Stem("omsetninga"), "omsetning");});
test("omsetningservervarar -> omsetningservervar", function() {deepEqual( Stem("omsetningservervarar"), "omsetningservervar");});
test("omsetningsregulering -> omsetningsregulering", function() {deepEqual( Stem("omsetningsregulering"), "omsetningsregulering");});
test("omsetningsverdien -> omsetningsverdi", function() {deepEqual( Stem("omsetningsverdien"), "omsetningsverdi");});
test("omsette -> omsett", function() {deepEqual( Stem("omsette"), "omsett");});
test("omsettes -> omsett", function() {deepEqual( Stem("omsettes"), "omsett");});
test("omskiftninger -> omskiftning", function() {deepEqual( Stem("omskiftninger"), "omskiftning");});
test("omskipa -> omskip", function() {deepEqual( Stem("omskipa"), "omskip");});
test("omskiping -> omskiping", function() {deepEqual( Stem("omskiping"), "omskiping");});
test("omslaget -> omslag", function() {deepEqual( Stem("omslaget"), "omslag");});
test("omsorg -> omsorg", function() {deepEqual( Stem("omsorg"), "omsorg");});
test("omsorgsbehov -> omsorgsbehov", function() {deepEqual( Stem("omsorgsbehov"), "omsorgsbehov");});
test("omsorgsbustader -> omsorgsbustad", function() {deepEqual( Stem("omsorgsbustader"), "omsorgsbustad");});
test("omsorgstenester -> omsorgstenest", function() {deepEqual( Stem("omsorgstenester"), "omsorgstenest");});
test("omstenda -> omstend", function() {deepEqual( Stem("omstenda"), "omstend");});
test("omstende -> omst", function() {deepEqual( Stem("omstende"), "omst");});
test("omstendighet -> omstend", function() {deepEqual( Stem("omstendighet"), "omstend");});
test("omstillinger -> omstilling", function() {deepEqual( Stem("omstillinger"), "omstilling");});
test("omstillings -> omstilling", function() {deepEqual( Stem("omstillings"), "omstilling");});
test("omstillingsdyktig -> omstillingsdykt", function() {deepEqual( Stem("omstillingsdyktig"), "omstillingsdykt");});
test("omstillingstiltak -> omstillingstiltak", function() {deepEqual( Stem("omstillingstiltak"), "omstillingstiltak");});
test("omstillingstiltaka -> omstillingstiltak", function() {deepEqual( Stem("omstillingstiltaka"), "omstillingstiltak");});
test("omstreifer -> omstreif", function() {deepEqual( Stem("omstreifer"), "omstreif");});
test("omstridd -> omstridd", function() {deepEqual( Stem("omstridd"), "omstridd");});
test("omstridde -> omstridd", function() {deepEqual( Stem("omstridde"), "omstridd");});
test("omstridt -> omstrid", function() {deepEqual( Stem("omstridt"), "omstrid");});
test("omstrukturering -> omstrukturering", function() {deepEqual( Stem("omstrukturering"), "omstrukturering");});
test("omstruktureringer -> omstrukturering", function() {deepEqual( Stem("omstruktureringer"), "omstrukturering");});
test("omstøytast -> omstøyt", function() {deepEqual( Stem("omstøytast"), "omstøyt");});
test("omstøyting -> omstøyting", function() {deepEqual( Stem("omstøyting"), "omstøyting");});
test("omstøytingskravet -> omstøytingskrav", function() {deepEqual( Stem("omstøytingskravet"), "omstøytingskrav");});
test("omstøytingsregelen -> omstøytingsregel", function() {deepEqual( Stem("omstøytingsregelen"), "omstøytingsregel");});
test("omsyn -> omsyn", function() {deepEqual( Stem("omsyn"), "omsyn");});
test("omsyna -> omsyn", function() {deepEqual( Stem("omsyna"), "omsyn");});
test("omsynet -> omsyn", function() {deepEqual( Stem("omsynet"), "omsyn");});
test("omsynstaking -> omsynstaking", function() {deepEqual( Stem("omsynstaking"), "omsynstaking");});
test("omtala -> omtal", function() {deepEqual( Stem("omtala"), "omtal");});
test("omtalast -> omtal", function() {deepEqual( Stem("omtalast"), "omtal");});
test("omtale -> omtal", function() {deepEqual( Stem("omtale"), "omtal");});
test("omtalen -> omtal", function() {deepEqual( Stem("omtalen"), "omtal");});
test("omtaler -> omtal", function() {deepEqual( Stem("omtaler"), "omtal");});
test("omtales -> omtal", function() {deepEqual( Stem("omtales"), "omtal");});
test("omtalt -> omtalt", function() {deepEqual( Stem("omtalt"), "omtalt");});
test("omtrent -> omtrent", function() {deepEqual( Stem("omtrent"), "omtrent");});
test("omtvista -> omtvist", function() {deepEqual( Stem("omtvista"), "omtvist");});
test("omvandrende -> omvandr", function() {deepEqual( Stem("omvandrende"), "omvandr");});
test("omveg -> omveg", function() {deepEqual( Stem("omveg"), "omveg");});
test("omvei -> omvei", function() {deepEqual( Stem("omvei"), "omvei");});
test("omvende -> omv", function() {deepEqual( Stem("omvende"), "omv");});
test("omvendt -> omvend", function() {deepEqual( Stem("omvendt"), "omvend");});
test("omverda -> omverd", function() {deepEqual( Stem("omverda"), "omverd");});
test("on -> on", function() {deepEqual( Stem("on"), "on");});
test("ond -> ond", function() {deepEqual( Stem("ond"), "ond");});
test("onde -> ond", function() {deepEqual( Stem("onde"), "ond");});
test("ondskap -> ondskap", function() {deepEqual( Stem("ondskap"), "ondskap");});
test("ondskapsfull -> ondskapsfull", function() {deepEqual( Stem("ondskapsfull"), "ondskapsfull");});
test("ondskapsfulle -> ondskapsfull", function() {deepEqual( Stem("ondskapsfulle"), "ondskapsfull");});
test("ondskapsfullt -> ondskapsfullt", function() {deepEqual( Stem("ondskapsfullt"), "ondskapsfullt");});
test("ondt -> ondt", function() {deepEqual( Stem("ondt"), "ondt");});
test("ondurdis -> ondurdis", function() {deepEqual( Stem("ondurdis"), "ondurdis");});
test("onkelen -> onkel", function() {deepEqual( Stem("onkelen"), "onkel");});
test("ope -> ope", function() {deepEqual( Stem("ope"), "ope");});
test("open -> open", function() {deepEqual( Stem("open"), "open");});
test("openberre -> openberr", function() {deepEqual( Stem("openberre"), "openberr");});
test("openbert -> openber", function() {deepEqual( Stem("openbert"), "openber");});
test("openheit -> openheit", function() {deepEqual( Stem("openheit"), "openheit");});
test("operasjon -> operasjon", function() {deepEqual( Stem("operasjon"), "operasjon");});
test("operativ -> operativ", function() {deepEqual( Stem("operativ"), "operativ");});
test("operative -> operativ", function() {deepEqual( Stem("operative"), "operativ");});
test("operativt -> operativ", function() {deepEqual( Stem("operativt"), "operativ");});
test("operatør -> operatør", function() {deepEqual( Stem("operatør"), "operatør");});
test("operatøren -> operatør", function() {deepEqual( Stem("operatøren"), "operatør");});
test("operatørene -> operatør", function() {deepEqual( Stem("operatørene"), "operatør");});
test("operatører -> operatør", function() {deepEqual( Stem("operatører"), "operatør");});
test("operatørhold -> operatørhold", function() {deepEqual( Stem("operatørhold"), "operatørhold");});
test("operatørselskaper -> operatørselskap", function() {deepEqual( Stem("operatørselskaper"), "operatørselskap");});
test("operatørvirksomhet -> operatørvirksom", function() {deepEqual( Stem("operatørvirksomhet"), "operatørvirksom");});
test("operer -> oper", function() {deepEqual( Stem("operer"), "oper");});
test("operere -> operer", function() {deepEqual( Stem("operere"), "operer");});
test("opererer -> operer", function() {deepEqual( Stem("opererer"), "operer");});
test("opereres -> operer", function() {deepEqual( Stem("opereres"), "operer");});
test("opinionsleiarar -> opinionsleiar", function() {deepEqual( Stem("opinionsleiarar"), "opinionsleiar");});
test("opna -> opn", function() {deepEqual( Stem("opna"), "opn");});
test("opnar -> opn", function() {deepEqual( Stem("opnar"), "opn");});
test("opnare -> opnar", function() {deepEqual( Stem("opnare"), "opnar");});
test("opnast -> opn", function() {deepEqual( Stem("opnast"), "opn");});
test("opne -> opn", function() {deepEqual( Stem("opne"), "opn");});
test("opning -> opning", function() {deepEqual( Stem("opning"), "opning");});
test("opninga -> opning", function() {deepEqual( Stem("opninga"), "opning");});
test("opningsbalanse -> opningsbalans", function() {deepEqual( Stem("opningsbalanse"), "opningsbalans");});
test("opningsbalansen -> opningsbalans", function() {deepEqual( Stem("opningsbalansen"), "opningsbalans");});
test("opp -> opp", function() {deepEqual( Stem("opp"), "opp");});
test("oppad -> oppad", function() {deepEqual( Stem("oppad"), "oppad");});
test("opparbeide -> opparbeid", function() {deepEqual( Stem("opparbeide"), "opparbeid");});
test("opparbeidede -> opparbeid", function() {deepEqual( Stem("opparbeidede"), "opparbeid");});
test("opparbeidelse -> opparbeid", function() {deepEqual( Stem("opparbeidelse"), "opparbeid");});
test("opparbeider -> opparbeid", function() {deepEqual( Stem("opparbeider"), "opparbeid");});
test("opparbeides -> opparbeid", function() {deepEqual( Stem("opparbeides"), "opparbeid");});
test("opparbeidet -> opparbeid", function() {deepEqual( Stem("opparbeidet"), "opparbeid");});
test("opparbeiding -> opparbeiding", function() {deepEqual( Stem("opparbeiding"), "opparbeiding");});
test("oppattbygging -> oppattbygging", function() {deepEqual( Stem("oppattbygging"), "oppattbygging");});
test("oppbevarer -> oppbevar", function() {deepEqual( Stem("oppbevarer"), "oppbevar");});
test("oppbevaring -> oppbevaring", function() {deepEqual( Stem("oppbevaring"), "oppbevaring");});
test("oppblåst -> oppblåst", function() {deepEqual( Stem("oppblåst"), "oppblåst");});
test("oppblåste -> oppblåst", function() {deepEqual( Stem("oppblåste"), "oppblåst");});
test("oppbrente -> oppbrent", function() {deepEqual( Stem("oppbrente"), "oppbrent");});
test("oppbygd -> oppbygd", function() {deepEqual( Stem("oppbygd"), "oppbygd");});
test("oppbygde -> oppbygd", function() {deepEqual( Stem("oppbygde"), "oppbygd");});
test("oppbygget -> oppbygg", function() {deepEqual( Stem("oppbygget"), "oppbygg");});
test("oppbygging -> oppbygging", function() {deepEqual( Stem("oppbygging"), "oppbygging");});
test("oppbygginga -> oppbygging", function() {deepEqual( Stem("oppbygginga"), "oppbygging");});
test("oppbyggingen -> oppbygging", function() {deepEqual( Stem("oppbyggingen"), "oppbygging");});
test("oppdage -> oppdag", function() {deepEqual( Stem("oppdage"), "oppdag");});
test("oppdager -> oppdag", function() {deepEqual( Stem("oppdager"), "oppdag");});
test("oppdaterte -> oppdater", function() {deepEqual( Stem("oppdaterte"), "oppdater");});
test("oppdeling -> oppdeling", function() {deepEqual( Stem("oppdeling"), "oppdeling");});
test("oppdelingen -> oppdeling", function() {deepEqual( Stem("oppdelingen"), "oppdeling");});
test("oppdelt -> oppdelt", function() {deepEqual( Stem("oppdelt"), "oppdelt");});
test("oppdrag -> oppdrag", function() {deepEqual( Stem("oppdrag"), "oppdrag");});
test("oppdraget -> oppdrag", function() {deepEqual( Stem("oppdraget"), "oppdrag");});
test("oppdragsavtale -> oppdragsavtal", function() {deepEqual( Stem("oppdragsavtale"), "oppdragsavtal");});
test("oppdragsgivere -> oppdragsgiver", function() {deepEqual( Stem("oppdragsgivere"), "oppdragsgiver");});
test("oppdragstakaren -> oppdragstakar", function() {deepEqual( Stem("oppdragstakaren"), "oppdragstakar");});
test("oppe -> opp", function() {deepEqual( Stem("oppe"), "opp");});
test("oppebærer -> oppebær", function() {deepEqual( Stem("oppebærer"), "oppebær");});
test("oppfarende -> oppfar", function() {deepEqual( Stem("oppfarende"), "oppfar");});
test("oppfatning -> oppfatning", function() {deepEqual( Stem("oppfatning"), "oppfatning");});
test("oppfatninga -> oppfatning", function() {deepEqual( Stem("oppfatninga"), "oppfatning");});
test("oppfatningane -> oppfatning", function() {deepEqual( Stem("oppfatningane"), "oppfatning");});
test("oppfatningar -> oppfatning", function() {deepEqual( Stem("oppfatningar"), "oppfatning");});
test("oppfatningene -> oppfatning", function() {deepEqual( Stem("oppfatningene"), "oppfatning");});
test("oppfatninger -> oppfatning", function() {deepEqual( Stem("oppfatninger"), "oppfatning");});
test("oppfatta -> oppfatt", function() {deepEqual( Stem("oppfatta"), "oppfatt");});
test("oppfattar -> oppfatt", function() {deepEqual( Stem("oppfattar"), "oppfatt");});
test("oppfattast -> oppfatt", function() {deepEqual( Stem("oppfattast"), "oppfatt");});
test("oppfatte -> oppfatt", function() {deepEqual( Stem("oppfatte"), "oppfatt");});
test("oppfatter -> oppfatt", function() {deepEqual( Stem("oppfatter"), "oppfatt");});
test("oppfattes -> oppfatt", function() {deepEqual( Stem("oppfattes"), "oppfatt");});
test("oppfordre -> oppfordr", function() {deepEqual( Stem("oppfordre"), "oppfordr");});
test("oppfylle -> oppfyll", function() {deepEqual( Stem("oppfylle"), "oppfyll");});
test("oppfyller -> oppfyll", function() {deepEqual( Stem("oppfyller"), "oppfyll");});
test("oppfylles -> oppfyll", function() {deepEqual( Stem("oppfylles"), "oppfyll");});
test("oppfylling -> oppfylling", function() {deepEqual( Stem("oppfylling"), "oppfylling");});
test("oppfyllinga -> oppfylling", function() {deepEqual( Stem("oppfyllinga"), "oppfylling");});
test("oppfylt -> oppfylt", function() {deepEqual( Stem("oppfylt"), "oppfylt");});
test("oppfylte -> oppfylt", function() {deepEqual( Stem("oppfylte"), "oppfylt");});
test("oppfølging -> oppfølging", function() {deepEqual( Stem("oppfølging"), "oppfølging");});
test("oppfølginga -> oppfølging", function() {deepEqual( Stem("oppfølginga"), "oppfølging");});
test("oppfølgning -> oppfølgning", function() {deepEqual( Stem("oppfølgning"), "oppfølgning");});
test("oppfører -> oppfør", function() {deepEqual( Stem("oppfører"), "oppfør");});
test("oppføring -> oppføring", function() {deepEqual( Stem("oppføring"), "oppføring");});
test("oppføringa -> oppføring", function() {deepEqual( Stem("oppføringa"), "oppføring");});
test("oppført -> oppført", function() {deepEqual( Stem("oppført"), "oppført");});
test("oppførte -> oppført", function() {deepEqual( Stem("oppførte"), "oppført");});
test("oppgangar -> oppgang", function() {deepEqual( Stem("oppgangar"), "oppgang");});
test("oppgave -> oppgav", function() {deepEqual( Stem("oppgave"), "oppgav");});
test("oppgaven -> oppgav", function() {deepEqual( Stem("oppgaven"), "oppgav");});
test("oppgavene -> oppgav", function() {deepEqual( Stem("oppgavene"), "oppgav");});
test("oppgaveplikten -> oppgaveplikt", function() {deepEqual( Stem("oppgaveplikten"), "oppgaveplikt");});
test("oppgaver -> oppgav", function() {deepEqual( Stem("oppgaver"), "oppgav");});
test("oppgir -> oppgir", function() {deepEqual( Stem("oppgir"), "oppgir");});
test("oppgis -> oppgis", function() {deepEqual( Stem("oppgis"), "oppgis");});
test("oppgitt -> oppgitt", function() {deepEqual( Stem("oppgitt"), "oppgitt");});
test("oppgjer -> oppgj", function() {deepEqual( Stem("oppgjer"), "oppgj");});
test("oppgjeret -> oppgjer", function() {deepEqual( Stem("oppgjeret"), "oppgjer");});
test("oppgjevast -> oppgjev", function() {deepEqual( Stem("oppgjevast"), "oppgjev");});
test("oppgjeve -> oppgjev", function() {deepEqual( Stem("oppgjeve"), "oppgjev");});
test("oppgjeven -> oppgjev", function() {deepEqual( Stem("oppgjeven"), "oppgjev");});
test("oppgjevne -> oppgjevn", function() {deepEqual( Stem("oppgjevne"), "oppgjevn");});
test("oppgjør -> oppgjør", function() {deepEqual( Stem("oppgjør"), "oppgjør");});
test("oppgjøret -> oppgjør", function() {deepEqual( Stem("oppgjøret"), "oppgjør");});
test("oppgjørstidspunktet -> oppgjørstidspunkt", function() {deepEqual( Stem("oppgjørstidspunktet"), "oppgjørstidspunkt");});
test("oppgradering -> oppgradering", function() {deepEqual( Stem("oppgradering"), "oppgradering");});
test("oppgåva -> oppgåv", function() {deepEqual( Stem("oppgåva"), "oppgåv");});
test("oppgåve -> oppgåv", function() {deepEqual( Stem("oppgåve"), "oppgåv");});
test("oppgåvefordelinga -> oppgåvefordeling", function() {deepEqual( Stem("oppgåvefordelinga"), "oppgåvefordeling");});
test("oppgåvene -> oppgåv", function() {deepEqual( Stem("oppgåvene"), "oppgåv");});
test("oppgåver -> oppgåv", function() {deepEqual( Stem("oppgåver"), "oppgåv");});
test("opphald -> opphald", function() {deepEqual( Stem("opphald"), "opphald");});
test("opphav -> opphav", function() {deepEqual( Stem("opphav"), "opphav");});
test("opphavet -> opphav", function() {deepEqual( Stem("opphavet"), "opphav");});
test("opphavleg -> opphav", function() {deepEqual( Stem("opphavleg"), "opphav");});
test("opphavlege -> opphav", function() {deepEqual( Stem("opphavlege"), "opphav");});
test("opphavssted -> opphavssted", function() {deepEqual( Stem("opphavssted"), "opphavssted");});
test("oppheva -> opphev", function() {deepEqual( Stem("oppheva"), "opphev");});
test("oppheve -> opphev", function() {deepEqual( Stem("oppheve"), "opphev");});
test("oppheves -> opphev", function() {deepEqual( Stem("oppheves"), "opphev");});
test("opphevet -> opphev", function() {deepEqual( Stem("opphevet"), "opphev");});
test("opphisset -> opphiss", function() {deepEqual( Stem("opphisset"), "opphiss");});
test("oppholder -> opphold", function() {deepEqual( Stem("oppholder"), "opphold");});
test("opphør -> opphør", function() {deepEqual( Stem("opphør"), "opphør");});
test("opphøre -> opphør", function() {deepEqual( Stem("opphøre"), "opphør");});
test("opphørende -> opphør", function() {deepEqual( Stem("opphørende"), "opphør");});
test("opphører -> opphør", function() {deepEqual( Stem("opphører"), "opphør");});
test("opphøret -> opphør", function() {deepEqual( Stem("opphøret"), "opphør");});
test("opphørsgrunner -> opphørsgrunn", function() {deepEqual( Stem("opphørsgrunner"), "opphørsgrunn");});
test("opphørstidspunktet -> opphørstidspunkt", function() {deepEqual( Stem("opphørstidspunktet"), "opphørstidspunkt");});
test("opphørsåret -> opphørsår", function() {deepEqual( Stem("opphørsåret"), "opphørsår");});
test("opphørt -> opphørt", function() {deepEqual( Stem("opphørt"), "opphørt");});
test("oppjusteres -> oppjuster", function() {deepEqual( Stem("oppjusteres"), "oppjuster");});
test("oppkalt -> oppkalt", function() {deepEqual( Stem("oppkalt"), "oppkalt");});
test("oppkavet -> oppkav", function() {deepEqual( Stem("oppkavet"), "oppkav");});
test("oppkjøp -> oppkjøp", function() {deepEqual( Stem("oppkjøp"), "oppkjøp");});
test("oppkrevd -> oppkrevd", function() {deepEqual( Stem("oppkrevd"), "oppkrevd");});
test("oppkreve -> oppkrev", function() {deepEqual( Stem("oppkreve"), "oppkrev");});
test("oppkreves -> oppkrev", function() {deepEqual( Stem("oppkreves"), "oppkrev");});
test("opplagring -> opplagring", function() {deepEqual( Stem("opplagring"), "opplagring");});
test("opplagt -> opplagt", function() {deepEqual( Stem("opplagt"), "opplagt");});
test("oppland -> oppland", function() {deepEqual( Stem("oppland"), "oppland");});
test("opplandet -> oppland", function() {deepEqual( Stem("opplandet"), "oppland");});
test("opplegg -> opplegg", function() {deepEqual( Stem("opplegg"), "opplegg");});
test("opplegget -> opplegg", function() {deepEqual( Stem("opplegget"), "opplegg");});
test("opplevd -> opplevd", function() {deepEqual( Stem("opplevd"), "opplevd");});
test("oppleve -> opplev", function() {deepEqual( Stem("oppleve"), "opplev");});
test("opplever -> opplev", function() {deepEqual( Stem("opplever"), "opplev");});
test("oppleves -> opplev", function() {deepEqual( Stem("oppleves"), "opplev");});
test("opplistingen -> opplisting", function() {deepEqual( Stem("opplistingen"), "opplisting");});
test("opplysande -> opplys", function() {deepEqual( Stem("opplysande"), "opplys");});
test("opplysast -> opplys", function() {deepEqual( Stem("opplysast"), "opplys");});
test("opplyse -> opplys", function() {deepEqual( Stem("opplyse"), "opplys");});
test("opplyser -> opplys", function() {deepEqual( Stem("opplyser"), "opplys");});
test("opplyses -> opplys", function() {deepEqual( Stem("opplyses"), "opplys");});
test("opplysning -> opplysning", function() {deepEqual( Stem("opplysning"), "opplysning");});
test("opplysninga -> opplysning", function() {deepEqual( Stem("opplysninga"), "opplysning");});
test("opplysningane -> opplysning", function() {deepEqual( Stem("opplysningane"), "opplysning");});
test("opplysningar -> opplysning", function() {deepEqual( Stem("opplysningar"), "opplysning");});
test("opplysningene -> opplysning", function() {deepEqual( Stem("opplysningene"), "opplysning");});
test("opplysninger -> opplysning", function() {deepEqual( Stem("opplysninger"), "opplysning");});
test("opplysningsplikt -> opplysningsplikt", function() {deepEqual( Stem("opplysningsplikt"), "opplysningsplikt");});
test("opplysningsplikta -> opplysningsplikt", function() {deepEqual( Stem("opplysningsplikta"), "opplysningsplikt");});
test("opplysningsverksemd -> opplysningsverksemd", function() {deepEqual( Stem("opplysningsverksemd"), "opplysningsverksemd");});
test("opplyst -> opplyst", function() {deepEqual( Stem("opplyst"), "opplyst");});
test("opplåning -> opplåning", function() {deepEqual( Stem("opplåning"), "opplåning");});
test("opplæring -> opplæring", function() {deepEqual( Stem("opplæring"), "opplæring");});
test("oppløses -> oppløs", function() {deepEqual( Stem("oppløses"), "oppløs");});
test("oppløsning -> oppløsning", function() {deepEqual( Stem("oppløsning"), "oppløsning");});
test("oppløsningsvedtaket -> oppløsningsvedtak", function() {deepEqual( Stem("oppløsningsvedtaket"), "oppløsningsvedtak");});
test("oppløysast -> oppløys", function() {deepEqual( Stem("oppløysast"), "oppløys");});
test("oppløyse -> oppløys", function() {deepEqual( Stem("oppløyse"), "oppløys");});
test("oppløysing -> oppløysing", function() {deepEqual( Stem("oppløysing"), "oppløysing");});
test("oppløysinga -> oppløysing", function() {deepEqual( Stem("oppløysinga"), "oppløysing");});
test("oppløysingar -> oppløysing", function() {deepEqual( Stem("oppløysingar"), "oppløysing");});
test("oppløysingsgrunnen -> oppløysingsgrunn", function() {deepEqual( Stem("oppløysingsgrunnen"), "oppløysingsgrunn");});
test("oppløysingsreglane -> oppløysingsregl", function() {deepEqual( Stem("oppløysingsreglane"), "oppløysingsregl");});
test("oppløysingssituasjon -> oppløysingssituasjon", function() {deepEqual( Stem("oppløysingssituasjon"), "oppløysingssituasjon");});
test("oppløysingstilfella -> oppløysingstilfell", function() {deepEqual( Stem("oppløysingstilfella"), "oppløysingstilfell");});
test("oppløysingsvedtaket -> oppløysingsvedtak", function() {deepEqual( Stem("oppløysingsvedtaket"), "oppløysingsvedtak");});
test("oppløyst -> oppløyst", function() {deepEqual( Stem("oppløyst"), "oppløyst");});
test("oppløyste -> oppløyst", function() {deepEqual( Stem("oppløyste"), "oppløyst");});
test("oppmerking -> oppmerking", function() {deepEqual( Stem("oppmerking"), "oppmerking");});
test("oppmerkingen -> oppmerking", function() {deepEqual( Stem("oppmerkingen"), "oppmerking");});
test("oppmerksom -> oppmerksom", function() {deepEqual( Stem("oppmerksom"), "oppmerksom");});
test("oppmerksomhet -> oppmerksom", function() {deepEqual( Stem("oppmerksomhet"), "oppmerksom");});
test("oppmode -> oppmod", function() {deepEqual( Stem("oppmode"), "oppmod");});
test("oppmoding -> oppmoding", function() {deepEqual( Stem("oppmoding"), "oppmoding");});
test("oppmodinga -> oppmoding", function() {deepEqual( Stem("oppmodinga"), "oppmoding");});
test("oppmuntres -> oppmuntr", function() {deepEqual( Stem("oppmuntres"), "oppmuntr");});
test("oppnemnast -> oppnemn", function() {deepEqual( Stem("oppnemnast"), "oppnemn");});
test("oppnemnde -> oppnemnd", function() {deepEqual( Stem("oppnemnde"), "oppnemnd");});
test("oppnemne -> oppnemn", function() {deepEqual( Stem("oppnemne"), "oppnemn");});
test("oppnemner -> oppnemn", function() {deepEqual( Stem("oppnemner"), "oppnemn");});
test("oppnemning -> oppnemning", function() {deepEqual( Stem("oppnemning"), "oppnemning");});
test("oppnemningsrett -> oppnemningsrett", function() {deepEqual( Stem("oppnemningsrett"), "oppnemningsrett");});
test("oppnemnt -> oppnemnt", function() {deepEqual( Stem("oppnemnt"), "oppnemnt");});
test("oppnevne -> oppnevn", function() {deepEqual( Stem("oppnevne"), "oppnevn");});
test("oppnevner -> oppnevn", function() {deepEqual( Stem("oppnevner"), "oppnevn");});
test("oppnevnes -> oppnevn", function() {deepEqual( Stem("oppnevnes"), "oppnevn");});
test("oppnevning -> oppnevning", function() {deepEqual( Stem("oppnevning"), "oppnevning");});
test("oppnevnt -> oppnevnt", function() {deepEqual( Stem("oppnevnt"), "oppnevnt");});
test("oppnå -> oppnå", function() {deepEqual( Stem("oppnå"), "oppnå");});
test("oppnådd -> oppnådd", function() {deepEqual( Stem("oppnådd"), "oppnådd");});
test("oppnådde -> oppnådd", function() {deepEqual( Stem("oppnådde"), "oppnådd");});
test("oppnår -> oppnår", function() {deepEqual( Stem("oppnår"), "oppnår");});
test("oppnås -> oppnås", function() {deepEqual( Stem("oppnås"), "oppnås");});
test("oppover -> oppov", function() {deepEqual( Stem("oppover"), "oppov");});
test("oppregnet -> oppregn", function() {deepEqual( Stem("oppregnet"), "oppregn");});
test("oppregning -> oppregning", function() {deepEqual( Stem("oppregning"), "oppregning");});
test("oppregningen -> oppregning", function() {deepEqual( Stem("oppregningen"), "oppregning");});
test("oppregulering -> oppregulering", function() {deepEqual( Stem("oppregulering"), "oppregulering");});
test("oppreising -> oppreising", function() {deepEqual( Stem("oppreising"), "oppreising");});
test("oppreist -> oppreist", function() {deepEqual( Stem("oppreist"), "oppreist");});
test("opprekning -> opprekning", function() {deepEqual( Stem("opprekning"), "opprekning");});
test("opprekninga -> opprekning", function() {deepEqual( Stem("opprekninga"), "opprekning");});
test("opprett -> opprett", function() {deepEqual( Stem("opprett"), "opprett");});
test("oppretta -> opprett", function() {deepEqual( Stem("oppretta"), "opprett");});
test("opprettast -> opprett", function() {deepEqual( Stem("opprettast"), "opprett");});
test("opprette -> opprett", function() {deepEqual( Stem("opprette"), "opprett");});
test("opprettelse -> opprett", function() {deepEqual( Stem("opprettelse"), "opprett");});
test("opprettelsen -> opprett", function() {deepEqual( Stem("opprettelsen"), "opprett");});
test("oppretter -> opprett", function() {deepEqual( Stem("oppretter"), "opprett");});
test("opprettes -> opprett", function() {deepEqual( Stem("opprettes"), "opprett");});
test("opprettet -> opprett", function() {deepEqual( Stem("opprettet"), "opprett");});
test("opprettholde -> oppretthold", function() {deepEqual( Stem("opprettholde"), "oppretthold");});
test("opprettholdelse -> oppretthold", function() {deepEqual( Stem("opprettholdelse"), "oppretthold");});
test("opprettholder -> oppretthold", function() {deepEqual( Stem("opprettholder"), "oppretthold");});
test("opprettholdes -> oppretthold", function() {deepEqual( Stem("opprettholdes"), "oppretthold");});
test("opprettholdt -> oppretthold", function() {deepEqual( Stem("opprettholdt"), "oppretthold");});
test("oppretting -> oppretting", function() {deepEqual( Stem("oppretting"), "oppretting");});
test("opprinnelig -> opprinn", function() {deepEqual( Stem("opprinnelig"), "opprinn");});
test("opprinnelige -> opprinn", function() {deepEqual( Stem("opprinnelige"), "opprinn");});
test("opprinnelse -> opprinn", function() {deepEqual( Stem("opprinnelse"), "opprinn");});
test("opprinnelsen -> opprinn", function() {deepEqual( Stem("opprinnelsen"), "opprinn");});
test("opprinnelses -> opprinn", function() {deepEqual( Stem("opprinnelses"), "opprinn");});
test("opprinnelsessted -> opprinnelsessted", function() {deepEqual( Stem("opprinnelsessted"), "opprinnelsessted");});
test("opprinnelsessteder -> opprinnelsessted", function() {deepEqual( Stem("opprinnelsessteder"), "opprinnelsessted");});
test("opprusting -> opprusting", function() {deepEqual( Stem("opprusting"), "opprusting");});
test("opprustning -> opprustning", function() {deepEqual( Stem("opprustning"), "opprustning");});
test("opprydding -> opprydding", function() {deepEqual( Stem("opprydding"), "opprydding");});
test("opprykksrett -> opprykksrett", function() {deepEqual( Stem("opprykksrett"), "opprykksrett");});
test("opprør -> opprør", function() {deepEqual( Stem("opprør"), "opprør");});
test("oppsamla -> oppsaml", function() {deepEqual( Stem("oppsamla"), "oppsaml");});
test("oppsamlede -> oppsaml", function() {deepEqual( Stem("oppsamlede"), "oppsaml");});
test("oppsamlet -> oppsaml", function() {deepEqual( Stem("oppsamlet"), "oppsaml");});
test("oppsamlingsfond -> oppsamlingsfond", function() {deepEqual( Stem("oppsamlingsfond"), "oppsamlingsfond");});
test("oppsatt -> oppsatt", function() {deepEqual( Stem("oppsatt"), "oppsatt");});
test("oppseielege -> oppsei", function() {deepEqual( Stem("oppseielege"), "oppsei");});
test("oppseiing -> oppseiing", function() {deepEqual( Stem("oppseiing"), "oppseiing");});
test("oppseiinga -> oppseiing", function() {deepEqual( Stem("oppseiinga"), "oppseiing");});
test("oppseiingar -> oppseiing", function() {deepEqual( Stem("oppseiingar"), "oppseiing");});
test("oppseiingsfrist -> oppseiingsfrist", function() {deepEqual( Stem("oppseiingsfrist"), "oppseiingsfrist");});
test("oppseiingsfristane -> oppseiingsfrist", function() {deepEqual( Stem("oppseiingsfristane"), "oppseiingsfrist");});
test("oppseiingsfristen -> oppseiingsfrist", function() {deepEqual( Stem("oppseiingsfristen"), "oppseiingsfrist");});
test("oppseiingsreglane -> oppseiingsregl", function() {deepEqual( Stem("oppseiingsreglane"), "oppseiingsregl");});
test("oppseiingsretten -> oppseiingsrett", function() {deepEqual( Stem("oppseiingsretten"), "oppseiingsrett");});
test("oppseiingstid -> oppseiingstid", function() {deepEqual( Stem("oppseiingstid"), "oppseiingstid");});
test("oppseiingsvern -> oppseiingsvern", function() {deepEqual( Stem("oppseiingsvern"), "oppseiingsvern");});
test("oppsettelsestiden -> oppsettelsestid", function() {deepEqual( Stem("oppsettelsestiden"), "oppsettelsestid");});
test("oppsettet -> oppsett", function() {deepEqual( Stem("oppsettet"), "oppsett");});
test("oppsikt -> oppsikt", function() {deepEqual( Stem("oppsikt"), "oppsikt");});
test("oppskrives -> oppskriv", function() {deepEqual( Stem("oppskrives"), "oppskriv");});
test("oppskrivninger -> oppskrivning", function() {deepEqual( Stem("oppskrivninger"), "oppskrivning");});
test("oppskåret -> oppskår", function() {deepEqual( Stem("oppskåret"), "oppskår");});
test("oppslag -> oppslag", function() {deepEqual( Stem("oppslag"), "oppslag");});
test("oppslutning -> oppslutning", function() {deepEqual( Stem("oppslutning"), "oppslutning");});
test("oppslutninga -> oppslutning", function() {deepEqual( Stem("oppslutninga"), "oppslutning");});
test("oppsparing -> oppsparing", function() {deepEqual( Stem("oppsparing"), "oppsparing");});
test("oppsparingen -> oppsparing", function() {deepEqual( Stem("oppsparingen"), "oppsparing");});
test("oppsparingsbehovet -> oppsparingsbehov", function() {deepEqual( Stem("oppsparingsbehovet"), "oppsparingsbehov");});
test("oppsparingselement -> oppsparingselement", function() {deepEqual( Stem("oppsparingselement"), "oppsparingselement");});
test("oppsparingsfasen -> oppsparingsfas", function() {deepEqual( Stem("oppsparingsfasen"), "oppsparingsfas");});
test("oppsparingsperioden -> oppsparingsperiod", function() {deepEqual( Stem("oppsparingsperioden"), "oppsparingsperiod");});
test("oppsparingstiden -> oppsparingstid", function() {deepEqual( Stem("oppsparingstiden"), "oppsparingstid");});
test("oppspart -> oppspart", function() {deepEqual( Stem("oppspart"), "oppspart");});
test("oppsparte -> oppspart", function() {deepEqual( Stem("oppsparte"), "oppspart");});
test("oppspinn -> oppspinn", function() {deepEqual( Stem("oppspinn"), "oppspinn");});
test("oppsplitting -> oppsplitting", function() {deepEqual( Stem("oppsplitting"), "oppsplitting");});
test("oppstiging -> oppstiging", function() {deepEqual( Stem("oppstiging"), "oppstiging");});
test("oppstigingsrett -> oppstigingsrett", function() {deepEqual( Stem("oppstigingsrett"), "oppstigingsrett");});
test("oppstilles -> oppstill", function() {deepEqual( Stem("oppstilles"), "oppstill");});
test("oppstilling -> oppstilling", function() {deepEqual( Stem("oppstilling"), "oppstilling");});
test("oppstillingsplaner -> oppstillingsplan", function() {deepEqual( Stem("oppstillingsplaner"), "oppstillingsplan");});
test("oppstilt -> oppstilt", function() {deepEqual( Stem("oppstilt"), "oppstilt");});
test("oppsto -> oppsto", function() {deepEqual( Stem("oppsto"), "oppsto");});
test("oppstod -> oppstod", function() {deepEqual( Stem("oppstod"), "oppstod");});
test("oppstyret -> oppstyr", function() {deepEqual( Stem("oppstyret"), "oppstyr");});
test("oppstå -> oppstå", function() {deepEqual( Stem("oppstå"), "oppstå");});
test("oppstår -> oppstår", function() {deepEqual( Stem("oppstår"), "oppstår");});
test("oppstått -> oppstått", function() {deepEqual( Stem("oppstått"), "oppstått");});
test("oppsummerer -> oppsummer", function() {deepEqual( Stem("oppsummerer"), "oppsummer");});
test("oppsummering -> oppsummering", function() {deepEqual( Stem("oppsummering"), "oppsummering");});
test("oppsummert -> oppsummer", function() {deepEqual( Stem("oppsummert"), "oppsummer");});
test("oppsøke -> oppsøk", function() {deepEqual( Stem("oppsøke"), "oppsøk");});
test("oppsøker -> oppsøk", function() {deepEqual( Stem("oppsøker"), "oppsøk");});
test("oppta -> oppt", function() {deepEqual( Stem("oppta"), "oppt");});
test("opptak -> opptak", function() {deepEqual( Stem("opptak"), "opptak");});
test("opptakelse -> opptak", function() {deepEqual( Stem("opptakelse"), "opptak");});
test("opptaksvilkårene -> opptaksvilkår", function() {deepEqual( Stem("opptaksvilkårene"), "opptaksvilkår");});
test("opptas -> oppt", function() {deepEqual( Stem("opptas"), "oppt");});
test("opptatt -> opptatt", function() {deepEqual( Stem("opptatt"), "opptatt");});
test("oppteikning -> oppteikning", function() {deepEqual( Stem("oppteikning"), "oppteikning");});
test("oppteikninga -> oppteikning", function() {deepEqual( Stem("oppteikninga"), "oppteikning");});
test("opptil -> opptil", function() {deepEqual( Stem("opptil"), "opptil");});
test("opptjene -> opptj", function() {deepEqual( Stem("opptjene"), "opptj");});
test("opptjener -> opptjen", function() {deepEqual( Stem("opptjener"), "opptjen");});
test("opptjenes -> opptj", function() {deepEqual( Stem("opptjenes"), "opptj");});
test("opptjening -> opptjening", function() {deepEqual( Stem("opptjening"), "opptjening");});
test("opptjeningen -> opptjening", function() {deepEqual( Stem("opptjeningen"), "opptjening");});
test("opptjeningsgrunnlag -> opptjeningsgrunnlag", function() {deepEqual( Stem("opptjeningsgrunnlag"), "opptjeningsgrunnlag");});
test("opptjeningsmodell -> opptjeningsmodell", function() {deepEqual( Stem("opptjeningsmodell"), "opptjeningsmodell");});
test("opptjeningsperioden -> opptjeningsperiod", function() {deepEqual( Stem("opptjeningsperioden"), "opptjeningsperiod");});
test("opptjeningsprofil -> opptjeningsprofil", function() {deepEqual( Stem("opptjeningsprofil"), "opptjeningsprofil");});
test("opptjeningsprofilen -> opptjeningsprofil", function() {deepEqual( Stem("opptjeningsprofilen"), "opptjeningsprofil");});
test("opptjeningssystem -> opptjeningssystem", function() {deepEqual( Stem("opptjeningssystem"), "opptjeningssystem");});
test("opptjeningstid -> opptjeningstid", function() {deepEqual( Stem("opptjeningstid"), "opptjeningstid");});
test("opptjeningstiden -> opptjeningstid", function() {deepEqual( Stem("opptjeningstiden"), "opptjeningstid");});
test("opptjeningstidspunktet -> opptjeningstidspunkt", function() {deepEqual( Stem("opptjeningstidspunktet"), "opptjeningstidspunkt");});
test("opptjeningsår -> opptjeningsår", function() {deepEqual( Stem("opptjeningsår"), "opptjeningsår");});
test("opptjent -> opptjent", function() {deepEqual( Stem("opptjent"), "opptjent");});
test("opptjente -> opptjent", function() {deepEqual( Stem("opptjente"), "opptjent");});
test("opptreden -> opptred", function() {deepEqual( Stem("opptreden"), "opptred");});
test("opptrer -> opptr", function() {deepEqual( Stem("opptrer"), "opptr");});
test("opptrinnsrett -> opptrinnsrett", function() {deepEqual( Stem("opptrinnsrett"), "opptrinnsrett");});
test("oppussing -> oppussing", function() {deepEqual( Stem("oppussing"), "oppussing");});
test("oppveier -> oppvei", function() {deepEqual( Stem("oppveier"), "oppvei");});
test("oppå -> oppå", function() {deepEqual( Stem("oppå"), "oppå");});
test("optimal -> optimal", function() {deepEqual( Stem("optimal"), "optimal");});
test("optimale -> optimal", function() {deepEqual( Stem("optimale"), "optimal");});
test("optimaliseres -> optimaliser", function() {deepEqual( Stem("optimaliseres"), "optimaliser");});
test("optimalisering -> optimalisering", function() {deepEqual( Stem("optimalisering"), "optimalisering");});
test("optimalisert -> optimaliser", function() {deepEqual( Stem("optimalisert"), "optimaliser");});
test("optimalt -> optimalt", function() {deepEqual( Stem("optimalt"), "optimalt");});
test("ord -> ord", function() {deepEqual( Stem("ord"), "ord");});
test("orda -> ord", function() {deepEqual( Stem("orda"), "ord");});
test("ordbruken -> ordbruk", function() {deepEqual( Stem("ordbruken"), "ordbruk");});
test("orde -> ord", function() {deepEqual( Stem("orde"), "ord");});
test("orden -> ord", function() {deepEqual( Stem("orden"), "ord");});
test("ordene -> ord", function() {deepEqual( Stem("ordene"), "ord");});
test("ordens -> ord", function() {deepEqual( Stem("ordens"), "ord");});
test("ordensreglar -> ordensregl", function() {deepEqual( Stem("ordensreglar"), "ordensregl");});
test("ordentlig -> ordent", function() {deepEqual( Stem("ordentlig"), "ordent");});
test("ordet -> ord", function() {deepEqual( Stem("ordet"), "ord");});
test("ordføraren -> ordførar", function() {deepEqual( Stem("ordføraren"), "ordførar");});
test("ordinær -> ordinær", function() {deepEqual( Stem("ordinær"), "ordinær");});
test("ordinære -> ordinær", function() {deepEqual( Stem("ordinære"), "ordinær");});
test("ordinært -> ordinært", function() {deepEqual( Stem("ordinært"), "ordinært");});
test("ordlegginga -> ordlegging", function() {deepEqual( Stem("ordlegginga"), "ordlegging");});
test("ordlyd -> ordlyd", function() {deepEqual( Stem("ordlyd"), "ordlyd");});
test("ordlyden -> ordlyd", function() {deepEqual( Stem("ordlyden"), "ordlyd");});
test("ordna -> ordn", function() {deepEqual( Stem("ordna"), "ordn");});
test("ordnast -> ordn", function() {deepEqual( Stem("ordnast"), "ordn");});
test("ordne -> ordn", function() {deepEqual( Stem("ordne"), "ordn");});
test("ordnet -> ordn", function() {deepEqual( Stem("ordnet"), "ordn");});
test("ordning -> ordning", function() {deepEqual( Stem("ordning"), "ordning");});
test("ordninga -> ordning", function() {deepEqual( Stem("ordninga"), "ordning");});
test("ordningane -> ordning", function() {deepEqual( Stem("ordningane"), "ordning");});
test("ordningar -> ordning", function() {deepEqual( Stem("ordningar"), "ordning");});
test("ordningen -> ordning", function() {deepEqual( Stem("ordningen"), "ordning");});
test("ordningene -> ordning", function() {deepEqual( Stem("ordningene"), "ordning");});
test("ordningenes -> ordning", function() {deepEqual( Stem("ordningenes"), "ordning");});
test("ordningens -> ordning", function() {deepEqual( Stem("ordningens"), "ordning");});
test("ordninger -> ordning", function() {deepEqual( Stem("ordninger"), "ordning");});
test("ordre -> ordr", function() {deepEqual( Stem("ordre"), "ordr");});
test("ordren -> ordr", function() {deepEqual( Stem("ordren"), "ordr");});
test("ordreplassering -> ordreplassering", function() {deepEqual( Stem("ordreplassering"), "ordreplassering");});
test("ordreproduksjon -> ordreproduksjon", function() {deepEqual( Stem("ordreproduksjon"), "ordreproduksjon");});
test("ordrer -> ordr", function() {deepEqual( Stem("ordrer"), "ordr");});
test("ordrestyres -> ordrestyr", function() {deepEqual( Stem("ordrestyres"), "ordrestyr");});
test("ordrestyrt -> ordrestyrt", function() {deepEqual( Stem("ordrestyrt"), "ordrestyrt");});
test("ordskiftet -> ordskift", function() {deepEqual( Stem("ordskiftet"), "ordskift");});
test("ordspill -> ordspill", function() {deepEqual( Stem("ordspill"), "ordspill");});
test("organ -> organ", function() {deepEqual( Stem("organ"), "organ");});
test("organa -> organ", function() {deepEqual( Stem("organa"), "organ");});
test("organer -> organ", function() {deepEqual( Stem("organer"), "organ");});
test("organet -> organ", function() {deepEqual( Stem("organet"), "organ");});
test("organisasjon -> organisasjon", function() {deepEqual( Stem("organisasjon"), "organisasjon");});
test("organisasjonane -> organisasjon", function() {deepEqual( Stem("organisasjonane"), "organisasjon");});
test("organisasjonar -> organisasjon", function() {deepEqual( Stem("organisasjonar"), "organisasjon");});
test("organisasjonen -> organisasjon", function() {deepEqual( Stem("organisasjonen"), "organisasjon");});
test("organisasjoner -> organisasjon", function() {deepEqual( Stem("organisasjoner"), "organisasjon");});
test("organisasjonsarbeid -> organisasjonsarbeid", function() {deepEqual( Stem("organisasjonsarbeid"), "organisasjonsarbeid");});
test("organisasjonsform -> organisasjonsform", function() {deepEqual( Stem("organisasjonsform"), "organisasjonsform");});
test("organisasjonsforma -> organisasjonsform", function() {deepEqual( Stem("organisasjonsforma"), "organisasjonsform");});
test("organisasjonsformen -> organisasjonsform", function() {deepEqual( Stem("organisasjonsformen"), "organisasjonsform");});
test("organisasjonsmodell -> organisasjonsmodell", function() {deepEqual( Stem("organisasjonsmodell"), "organisasjonsmodell");});
test("organisasjonsmodellen -> organisasjonsmodell", function() {deepEqual( Stem("organisasjonsmodellen"), "organisasjonsmodell");});
test("organisasjonsnummer -> organisasjonsnumm", function() {deepEqual( Stem("organisasjonsnummer"), "organisasjonsnumm");});
test("organisation -> organisation", function() {deepEqual( Stem("organisation"), "organisation");});
test("organisatorisk -> organisatorisk", function() {deepEqual( Stem("organisatorisk"), "organisatorisk");});
test("organisatoriske -> organisatorisk", function() {deepEqual( Stem("organisatoriske"), "organisatorisk");});
test("organiserast -> organiser", function() {deepEqual( Stem("organiserast"), "organiser");});
test("organisere -> organiser", function() {deepEqual( Stem("organisere"), "organiser");});
test("organiserer -> organiser", function() {deepEqual( Stem("organiserer"), "organiser");});
test("organiseres -> organiser", function() {deepEqual( Stem("organiseres"), "organiser");});
test("organisering -> organisering", function() {deepEqual( Stem("organisering"), "organisering");});
test("organiseringa -> organisering", function() {deepEqual( Stem("organiseringa"), "organisering");});
test("organiseringen -> organisering", function() {deepEqual( Stem("organiseringen"), "organisering");});
test("organiseringsmessige -> organiseringsmess", function() {deepEqual( Stem("organiseringsmessige"), "organiseringsmess");});
test("organiseringsmodell -> organiseringsmodell", function() {deepEqual( Stem("organiseringsmodell"), "organiseringsmodell");});
test("organiseringsspørsmålet -> organiseringsspørsmål", function() {deepEqual( Stem("organiseringsspørsmålet"), "organiseringsspørsmål");});
test("organisert -> organiser", function() {deepEqual( Stem("organisert"), "organiser");});
test("organiserte -> organiser", function() {deepEqual( Stem("organiserte"), "organiser");});
test("organismer -> organism", function() {deepEqual( Stem("organismer"), "organism");});
test("orientere -> orienter", function() {deepEqual( Stem("orientere"), "orienter");});
test("orienterer -> orienter", function() {deepEqual( Stem("orienterer"), "orienter");});
test("orientering -> orientering", function() {deepEqual( Stem("orientering"), "orientering");});
test("orientert -> orienter", function() {deepEqual( Stem("orientert"), "orienter");});
test("orienterte -> orienter", function() {deepEqual( Stem("orienterte"), "orienter");});
test("originaler -> original", function() {deepEqual( Stem("originaler"), "original");});
test("orke -> ork", function() {deepEqual( Stem("orke"), "ork");});
test("orker -> ork", function() {deepEqual( Stem("orker"), "ork");});
test("orket -> ork", function() {deepEqual( Stem("orket"), "ork");});
test("orm -> orm", function() {deepEqual( Stem("orm"), "orm");});
test("ormebol -> ormebol", function() {deepEqual( Stem("ormebol"), "ormebol");});
test("ormen -> orm", function() {deepEqual( Stem("ormen"), "orm");});
test("ormens -> orm", function() {deepEqual( Stem("ormens"), "orm");});
test("ormer -> orm", function() {deepEqual( Stem("ormer"), "orm");});
test("ormsund -> ormsund", function() {deepEqual( Stem("ormsund"), "ormsund");});
test("ormsundkaia -> ormsundkai", function() {deepEqual( Stem("ormsundkaia"), "ormsundkai");});
test("ormsundterminalen -> ormsundterminal", function() {deepEqual( Stem("ormsundterminalen"), "ormsundterminal");});
test("orsakar -> orsak", function() {deepEqual( Stem("orsakar"), "orsak");});
test("orskurd -> orskurd", function() {deepEqual( Stem("orskurd"), "orskurd");});
test("orskurdar -> orskurd", function() {deepEqual( Stem("orskurdar"), "orskurd");});
test("orskurden -> orskurd", function() {deepEqual( Stem("orskurden"), "orskurd");});
test("osb -> osb", function() {deepEqual( Stem("osb"), "osb");});
test("oslo -> oslo", function() {deepEqual( Stem("oslo"), "oslo");});
test("oslobehov -> oslobehov", function() {deepEqual( Stem("oslobehov"), "oslobehov");});
test("oslofjord -> oslofjord", function() {deepEqual( Stem("oslofjord"), "oslofjord");});
test("oslofjorden -> oslofjord", function() {deepEqual( Stem("oslofjorden"), "oslofjord");});
test("oslofjordens -> oslofjord", function() {deepEqual( Stem("oslofjordens"), "oslofjord");});
test("oslofjordforbindelsen -> oslofjordforbind", function() {deepEqual( Stem("oslofjordforbindelsen"), "oslofjordforbind");});
test("oslofjordhavnene -> oslofjordhavn", function() {deepEqual( Stem("oslofjordhavnene"), "oslofjordhavn");});
test("oslofjordhavnenes -> oslofjordhavn", function() {deepEqual( Stem("oslofjordhavnenes"), "oslofjordhavn");});
test("oslofjordhavner -> oslofjordhavn", function() {deepEqual( Stem("oslofjordhavner"), "oslofjordhavn");});
test("oslofjordhavneutvalget -> oslofjordhavneutvalg", function() {deepEqual( Stem("oslofjordhavneutvalget"), "oslofjordhavneutvalg");});
test("oslofjordområdet -> oslofjordområd", function() {deepEqual( Stem("oslofjordområdet"), "oslofjordområd");});
test("oslofjordregionen -> oslofjordregion", function() {deepEqual( Stem("oslofjordregionen"), "oslofjordregion");});
test("oslogodset -> oslogods", function() {deepEqual( Stem("oslogodset"), "oslogods");});
test("oslomarkedet -> oslomarked", function() {deepEqual( Stem("oslomarkedet"), "oslomarked");});
test("osloområdet -> osloområd", function() {deepEqual( Stem("osloområdet"), "osloområd");});
test("oslos -> oslo", function() {deepEqual( Stem("oslos"), "oslo");});
test("oss -> oss", function() {deepEqual( Stem("oss"), "oss");});
test("osv -> osv", function() {deepEqual( Stem("osv"), "osv");});
test("ot -> ot", function() {deepEqual( Stem("ot"), "ot");});
test("oter -> oter", function() {deepEqual( Stem("oter"), "oter");});
test("oteren -> oter", function() {deepEqual( Stem("oteren"), "oter");});
test("oterskinnet -> oterskinn", function() {deepEqual( Stem("oterskinnet"), "oterskinn");});
test("out -> out", function() {deepEqual( Stem("out"), "out");});
test("ovafor -> ovafor", function() {deepEqual( Stem("ovafor"), "ovafor");});
test("ovenfor -> ovenfor", function() {deepEqual( Stem("ovenfor"), "ovenfor");});
test("ovennevnte -> ovennevnt", function() {deepEqual( Stem("ovennevnte"), "ovennevnt");});
test("oventil -> oventil", function() {deepEqual( Stem("oventil"), "oventil");});
test("over -> over", function() {deepEqual( Stem("over"), "over");});
test("overalt -> overalt", function() {deepEqual( Stem("overalt"), "overalt");});
test("overblikk -> overblikk", function() {deepEqual( Stem("overblikk"), "overblikk");});
test("overbygning -> overbygning", function() {deepEqual( Stem("overbygning"), "overbygning");});
test("overbygningen -> overbygning", function() {deepEqual( Stem("overbygningen"), "overbygning");});
test("overdra -> overdr", function() {deepEqual( Stem("overdra"), "overdr");});
test("overdragande -> overdrag", function() {deepEqual( Stem("overdragande"), "overdrag");});
test("overdragast -> overdrag", function() {deepEqual( Stem("overdragast"), "overdrag");});
test("overdragelse -> overdrag", function() {deepEqual( Stem("overdragelse"), "overdrag");});
test("overdragelsen -> overdrag", function() {deepEqual( Stem("overdragelsen"), "overdrag");});
test("overdragende -> overdrag", function() {deepEqual( Stem("overdragende"), "overdrag");});
test("overdraging -> overdraging", function() {deepEqual( Stem("overdraging"), "overdraging");});
test("overdraginga -> overdraging", function() {deepEqual( Stem("overdraginga"), "overdraging");});
test("overdreg -> overdreg", function() {deepEqual( Stem("overdreg"), "overdreg");});
test("overdrive -> overdriv", function() {deepEqual( Stem("overdrive"), "overdriv");});
test("overende -> over", function() {deepEqual( Stem("overende"), "over");});
test("overens -> over", function() {deepEqual( Stem("overens"), "over");});
test("overensstemmelse -> overensstemm", function() {deepEqual( Stem("overensstemmelse"), "overensstemm");});
test("overenstemmelse -> overenstemm", function() {deepEqual( Stem("overenstemmelse"), "overenstemm");});
test("overfall -> overfall", function() {deepEqual( Stem("overfall"), "overfall");});
test("overfaller -> overfall", function() {deepEqual( Stem("overfaller"), "overfall");});
test("overfalt -> overfalt", function() {deepEqual( Stem("overfalt"), "overfalt");});
test("overflod -> overflod", function() {deepEqual( Stem("overflod"), "overflod");});
test("overflyttes -> overflytt", function() {deepEqual( Stem("overflyttes"), "overflytt");});
test("overflødig -> overflød", function() {deepEqual( Stem("overflødig"), "overflød");});
test("overfor -> overfor", function() {deepEqual( Stem("overfor"), "overfor");});
test("overførast -> overfør", function() {deepEqual( Stem("overførast"), "overfør");});
test("overførbar -> overførb", function() {deepEqual( Stem("overførbar"), "overførb");});
test("overføre -> overfør", function() {deepEqual( Stem("overføre"), "overfør");});
test("overfører -> overfør", function() {deepEqual( Stem("overfører"), "overfør");});
test("overføres -> overfør", function() {deepEqual( Stem("overføres"), "overfør");});
test("overføring -> overføring", function() {deepEqual( Stem("overføring"), "overføring");});
test("overføringa -> overføring", function() {deepEqual( Stem("overføringa"), "overføring");});
test("overføringar -> overføring", function() {deepEqual( Stem("overføringar"), "overføring");});
test("overføringen -> overføring", function() {deepEqual( Stem("overføringen"), "overføring");});
test("overføringer -> overføring", function() {deepEqual( Stem("overføringer"), "overføring");});
test("overføringsadgang -> overføringsadgang", function() {deepEqual( Stem("overføringsadgang"), "overføringsadgang");});
test("overføringsordningar -> overføringsordning", function() {deepEqual( Stem("overføringsordningar"), "overføringsordning");});
test("overføringsrett -> overføringsrett", function() {deepEqual( Stem("overføringsrett"), "overføringsrett");});
test("overføringsretten -> overføringsrett", function() {deepEqual( Stem("overføringsretten"), "overføringsrett");});
test("overført -> overført", function() {deepEqual( Stem("overført"), "overført");});
test("overførte -> overført", function() {deepEqual( Stem("overførte"), "overført");});
test("overgang -> overgang", function() {deepEqual( Stem("overgang"), "overgang");});
test("overgangen -> overgang", function() {deepEqual( Stem("overgangen"), "overgang");});
test("overganger -> overgang", function() {deepEqual( Stem("overganger"), "overgang");});
test("overgangsbestemmelse -> overgangsbestemm", function() {deepEqual( Stem("overgangsbestemmelse"), "overgangsbestemm");});
test("overgangsfasar -> overgangsfas", function() {deepEqual( Stem("overgangsfasar"), "overgangsfas");});
test("overgangsfase -> overgangsfas", function() {deepEqual( Stem("overgangsfase"), "overgangsfas");});
test("overgangsordning -> overgangsordning", function() {deepEqual( Stem("overgangsordning"), "overgangsordning");});
test("overgangsordninger -> overgangsordning", function() {deepEqual( Stem("overgangsordninger"), "overgangsordning");});
test("overgangsperiode -> overgangsperiod", function() {deepEqual( Stem("overgangsperiode"), "overgangsperiod");});
test("overgangsperioden -> overgangsperiod", function() {deepEqual( Stem("overgangsperioden"), "overgangsperiod");});
test("overgangsproblem -> overgangsproblem", function() {deepEqual( Stem("overgangsproblem"), "overgangsproblem");});
test("overgangsregel -> overgangsregel", function() {deepEqual( Stem("overgangsregel"), "overgangsregel");});
test("overgangsregelen -> overgangsregel", function() {deepEqual( Stem("overgangsregelen"), "overgangsregel");});
test("overgangsreglane -> overgangsregl", function() {deepEqual( Stem("overgangsreglane"), "overgangsregl");});
test("overgangsreglar -> overgangsregl", function() {deepEqual( Stem("overgangsreglar"), "overgangsregl");});
test("overgangsreglarikraftsetjing -> overgangsreglarikraftsetjing", function() {deepEqual( Stem("overgangsreglarikraftsetjing"), "overgangsreglarikraftsetjing");});
test("overgangsregler -> overgangsregl", function() {deepEqual( Stem("overgangsregler"), "overgangsregl");});
test("overgangstid -> overgangstid", function() {deepEqual( Stem("overgangstid"), "overgangstid");});
test("overgangstida -> overgangstid", function() {deepEqual( Stem("overgangstida"), "overgangstid");});
test("overgangstilfella -> overgangstilfell", function() {deepEqual( Stem("overgangstilfella"), "overgangstilfell");});
test("overgir -> overgir", function() {deepEqual( Stem("overgir"), "overgir");});
test("overgå -> overgå", function() {deepEqual( Stem("overgå"), "overgå");});
test("overgår -> overgår", function() {deepEqual( Stem("overgår"), "overgår");});
test("overhalden -> overhald", function() {deepEqual( Stem("overhalden"), "overhald");});
test("overhodet -> overhod", function() {deepEqual( Stem("overhodet"), "overhod");});
test("overholde -> overhold", function() {deepEqual( Stem("overholde"), "overhold");});
test("overholdelse -> overhold", function() {deepEqual( Stem("overholdelse"), "overhold");});
test("overholdes -> overhold", function() {deepEqual( Stem("overholdes"), "overhold");});
test("overholdt -> overhold", function() {deepEqual( Stem("overholdt"), "overhold");});
test("overkant -> overkant", function() {deepEqual( Stem("overkant"), "overkant");});
test("overkapasitet -> overkapasit", function() {deepEqual( Stem("overkapasitet"), "overkapasit");});
test("overkjeven -> overkjev", function() {deepEqual( Stem("overkjeven"), "overkjev");});
test("overkomeleg -> overkom", function() {deepEqual( Stem("overkomeleg"), "overkom");});
test("overkroppen -> overkropp", function() {deepEqual( Stem("overkroppen"), "overkropp");});
test("overkurs -> overkur", function() {deepEqual( Stem("overkurs"), "overkur");});
test("overlastast -> overlast", function() {deepEqual( Stem("overlastast"), "overlast");});
test("overlatast -> overlat", function() {deepEqual( Stem("overlatast"), "overlat");});
test("overlate -> overlat", function() {deepEqual( Stem("overlate"), "overlat");});
test("overlaten -> overlat", function() {deepEqual( Stem("overlaten"), "overlat");});
test("overlating -> overlating", function() {deepEqual( Stem("overlating"), "overlating");});
test("overlatinga -> overlating", function() {deepEqual( Stem("overlatinga"), "overlating");});
test("overlegninger -> overlegning", function() {deepEqual( Stem("overlegninger"), "overlegning");});
test("overlever -> overlev", function() {deepEqual( Stem("overlever"), "overlev");});
test("overleverast -> overlever", function() {deepEqual( Stem("overleverast"), "overlever");});
test("overleveres -> overlever", function() {deepEqual( Stem("overleveres"), "overlever");});
test("overlevering -> overlevering", function() {deepEqual( Stem("overlevering"), "overlevering");});
test("overleveringa -> overlevering", function() {deepEqual( Stem("overleveringa"), "overlevering");});
test("overmakten -> overmakt", function() {deepEqual( Stem("overmakten"), "overmakt");});
test("overmodig -> overmod", function() {deepEqual( Stem("overmodig"), "overmod");});
test("overmotet -> overmot", function() {deepEqual( Stem("overmotet"), "overmot");});
test("overnatte -> overnatt", function() {deepEqual( Stem("overnatte"), "overnatt");});
test("overnattet -> overnatt", function() {deepEqual( Stem("overnattet"), "overnatt");});
test("overoppsyn -> overoppsyn", function() {deepEqual( Stem("overoppsyn"), "overoppsyn");});
test("overorda -> overord", function() {deepEqual( Stem("overorda"), "overord");});
test("overordna -> overordn", function() {deepEqual( Stem("overordna"), "overordn");});
test("overordnede -> overordn", function() {deepEqual( Stem("overordnede"), "overordn");});
test("overordnet -> overordn", function() {deepEqual( Stem("overordnet"), "overordn");});
test("overordnete -> overordnet", function() {deepEqual( Stem("overordnete"), "overordnet");});
test("overprøving -> overprøving", function() {deepEqual( Stem("overprøving"), "overprøving");});
test("overprøvinga -> overprøving", function() {deepEqual( Stem("overprøvinga"), "overprøving");});
test("overraskelse -> overrask", function() {deepEqual( Stem("overraskelse"), "overrask");});
test("overraskende -> overrask", function() {deepEqual( Stem("overraskende"), "overrask");});
test("overrasket -> overrask", function() {deepEqual( Stem("overrasket"), "overrask");});
test("oversendelsesforslag -> oversendelsesforslag", function() {deepEqual( Stem("oversendelsesforslag"), "oversendelsesforslag");});
test("oversendes -> overs", function() {deepEqual( Stem("oversendes"), "overs");});
test("oversendt -> oversend", function() {deepEqual( Stem("oversendt"), "oversend");});
test("overseten -> overset", function() {deepEqual( Stem("overseten"), "overset");});
test("oversetne -> oversetn", function() {deepEqual( Stem("oversetne"), "oversetn");});
test("oversikt -> oversikt", function() {deepEqual( Stem("oversikt"), "oversikt");});
test("oversikten -> oversikt", function() {deepEqual( Stem("oversikten"), "oversikt");});
test("oversikter -> oversikt", function() {deepEqual( Stem("oversikter"), "oversikt");});
test("oversiktleg -> oversikt", function() {deepEqual( Stem("oversiktleg"), "oversikt");});
test("oversiktlege -> oversikt", function() {deepEqual( Stem("oversiktlege"), "oversikt");});
test("oversiktlig -> oversikt", function() {deepEqual( Stem("oversiktlig"), "oversikt");});
test("oversiktlige -> oversikt", function() {deepEqual( Stem("oversiktlige"), "oversikt");});
test("oversiktlighet -> oversikt", function() {deepEqual( Stem("oversiktlighet"), "oversikt");});
test("oversiktsbildet -> oversiktsbild", function() {deepEqual( Stem("oversiktsbildet"), "oversiktsbild");});
test("oversiktsmessig -> oversiktsmess", function() {deepEqual( Stem("oversiktsmessig"), "oversiktsmess");});
test("oversiktstallene -> oversiktstall", function() {deepEqual( Stem("oversiktstallene"), "oversiktstall");});
test("oversitje -> oversitj", function() {deepEqual( Stem("oversitje"), "oversitj");});
test("oversitjing -> oversitjing", function() {deepEqual( Stem("oversitjing"), "oversitjing");});
test("oversjøisk -> oversjøisk", function() {deepEqual( Stem("oversjøisk"), "oversjøisk");});
test("oversjøiske -> oversjøisk", function() {deepEqual( Stem("oversjøiske"), "oversjøisk");});
test("overskot -> overskot", function() {deepEqual( Stem("overskot"), "overskot");});
test("overskotet -> overskot", function() {deepEqual( Stem("overskotet"), "overskot");});
test("overskotslikviditet -> overskotslikvidit", function() {deepEqual( Stem("overskotslikviditet"), "overskotslikvidit");});
test("overskotslikviditeten -> overskotslikviditet", function() {deepEqual( Stem("overskotslikviditeten"), "overskotslikviditet");});
test("overskotsutdeling -> overskotsutdeling", function() {deepEqual( Stem("overskotsutdeling"), "overskotsutdeling");});
test("overskott -> overskott", function() {deepEqual( Stem("overskott"), "overskott");});
test("overskottsutdelning -> overskottsutdelning", function() {deepEqual( Stem("overskottsutdelning"), "overskottsutdelning");});
test("overskrevs -> overskrev", function() {deepEqual( Stem("overskrevs"), "overskrev");});
test("overskride -> overskrid", function() {deepEqual( Stem("overskride"), "overskrid");});
test("overskrides -> overskrid", function() {deepEqual( Stem("overskrides"), "overskrid");});
test("overskriding -> overskriding", function() {deepEqual( Stem("overskriding"), "overskriding");});
test("overskridingar -> overskriding", function() {deepEqual( Stem("overskridingar"), "overskriding");});
test("overskriften -> overskrift", function() {deepEqual( Stem("overskriften"), "overskrift");});
test("overskudd -> overskudd", function() {deepEqual( Stem("overskudd"), "overskudd");});
test("overskuddene -> overskudd", function() {deepEqual( Stem("overskuddene"), "overskudd");});
test("overskuddet -> overskudd", function() {deepEqual( Stem("overskuddet"), "overskudd");});
test("overskuddsdeling -> overskuddsdeling", function() {deepEqual( Stem("overskuddsdeling"), "overskuddsdeling");});
test("overskuddsfond -> overskuddsfond", function() {deepEqual( Stem("overskuddsfond"), "overskuddsfond");});
test("overskuddsgods -> overskuddsgod", function() {deepEqual( Stem("overskuddsgods"), "overskuddsgod");});
test("overskuddstildeling -> overskuddstildeling", function() {deepEqual( Stem("overskuddstildeling"), "overskuddstildeling");});
test("overskuelig -> oversku", function() {deepEqual( Stem("overskuelig"), "oversku");});
test("overskytande -> overskyt", function() {deepEqual( Stem("overskytande"), "overskyt");});
test("overskytende -> overskyt", function() {deepEqual( Stem("overskytende"), "overskyt");});
test("overskyter -> overskyt", function() {deepEqual( Stem("overskyter"), "overskyt");});
test("overskøyting -> overskøyting", function() {deepEqual( Stem("overskøyting"), "overskøyting");});
test("overslaget -> overslag", function() {deepEqual( Stem("overslaget"), "overslag");});
test("overstige -> overst", function() {deepEqual( Stem("overstige"), "overst");});
test("overstiger -> overst", function() {deepEqual( Stem("overstiger"), "overst");});
test("oversvømmelsen -> oversvømm", function() {deepEqual( Stem("oversvømmelsen"), "oversvømm");});
test("oversyn -> oversyn", function() {deepEqual( Stem("oversyn"), "oversyn");});
test("overta -> overt", function() {deepEqual( Stem("overta"), "overt");});
test("overtagelse -> overtag", function() {deepEqual( Stem("overtagelse"), "overtag");});
test("overtakande -> overtak", function() {deepEqual( Stem("overtakande"), "overtak");});
test("overtakast -> overtak", function() {deepEqual( Stem("overtakast"), "overtak");});
test("overtakende -> overtak", function() {deepEqual( Stem("overtakende"), "overtak");});
test("overtaket -> overtak", function() {deepEqual( Stem("overtaket"), "overtak");});
test("overtaking -> overtaking", function() {deepEqual( Stem("overtaking"), "overtaking");});
test("overtakinga -> overtaking", function() {deepEqual( Stem("overtakinga"), "overtaking");});
test("overtale -> overtal", function() {deepEqual( Stem("overtale"), "overtal");});
test("overtaler -> overtal", function() {deepEqual( Stem("overtaler"), "overtal");});
test("overtar -> overt", function() {deepEqual( Stem("overtar"), "overt");});
test("overtatt -> overtatt", function() {deepEqual( Stem("overtatt"), "overtatt");});
test("overtek -> overtek", function() {deepEqual( Stem("overtek"), "overtek");});
test("overteke -> overtek", function() {deepEqual( Stem("overteke"), "overtek");});
test("overteken -> overtek", function() {deepEqual( Stem("overteken"), "overtek");});
test("overtekne -> overtekn", function() {deepEqual( Stem("overtekne"), "overtekn");});
test("overtid -> overtid", function() {deepEqual( Stem("overtid"), "overtid");});
test("overtidsbetaling -> overtidsbetaling", function() {deepEqual( Stem("overtidsbetaling"), "overtidsbetaling");});
test("overtok -> overtok", function() {deepEqual( Stem("overtok"), "overtok");});
test("overtredelse -> overtred", function() {deepEqual( Stem("overtredelse"), "overtred");});
test("overtyding -> overtyding", function() {deepEqual( Stem("overtyding"), "overtyding");});
test("overveielser -> overvei", function() {deepEqual( Stem("overveielser"), "overvei");});
test("overvekt -> overvekt", function() {deepEqual( Stem("overvekt"), "overvekt");});
test("overvinne -> overvinn", function() {deepEqual( Stem("overvinne"), "overvinn");});
test("overvunne -> overvunn", function() {deepEqual( Stem("overvunne"), "overvunn");});
test("overvurdering -> overvurdering", function() {deepEqual( Stem("overvurdering"), "overvurdering");});
test("overvurdert -> overvurder", function() {deepEqual( Stem("overvurdert"), "overvurder");});
test("overvurderte -> overvurder", function() {deepEqual( Stem("overvurderte"), "overvurder");});
test("overvåking -> overvåking", function() {deepEqual( Stem("overvåking"), "overvåking");});
test("overvåkingen -> overvåking", function() {deepEqual( Stem("overvåkingen"), "overvåking");});
test("ovh -> ovh", function() {deepEqual( Stem("ovh"), "ovh");});
test("ovn -> ovn", function() {deepEqual( Stem("ovn"), "ovn");});
test("ownership -> ownership", function() {deepEqual( Stem("ownership"), "ownership");});
test("p -> p", function() {deepEqual( Stem("p"), "p");});
test("pa -> pa", function() {deepEqual( Stem("pa"), "pa");});
test("pakke -> pakk", function() {deepEqual( Stem("pakke"), "pakk");});
test("pakker -> pakk", function() {deepEqual( Stem("pakker"), "pakk");});
test("pakkes -> pakk", function() {deepEqual( Stem("pakkes"), "pakk");});
test("pakket -> pakk", function() {deepEqual( Stem("pakket"), "pakk");});
test("palletert -> palleter", function() {deepEqual( Stem("palletert"), "palleter");});
test("pannen -> pann", function() {deepEqual( Stem("pannen"), "pann");});
test("pant -> pant", function() {deepEqual( Stem("pant"), "pant");});
test("pantebrev -> pantebrev", function() {deepEqual( Stem("pantebrev"), "pantebrev");});
test("pantebreva -> pantebrev", function() {deepEqual( Stem("pantebreva"), "pantebrev");});
test("pantekravet -> pantekrav", function() {deepEqual( Stem("pantekravet"), "pantekrav");});
test("pantel -> pantel", function() {deepEqual( Stem("pantel"), "pantel");});
test("pantelova -> pant", function() {deepEqual( Stem("pantelova"), "pant");});
test("panteobjekt -> panteobjekt", function() {deepEqual( Stem("panteobjekt"), "panteobjekt");});
test("panterett -> panterett", function() {deepEqual( Stem("panterett"), "panterett");});
test("panterettane -> panterett", function() {deepEqual( Stem("panterettane"), "panterett");});
test("panterettar -> panterett", function() {deepEqual( Stem("panterettar"), "panterett");});
test("panteretten -> panterett", function() {deepEqual( Stem("panteretten"), "panterett");});
test("pantesikra -> pantesikr", function() {deepEqual( Stem("pantesikra"), "pantesikr");});
test("pantesikring -> pantesikring", function() {deepEqual( Stem("pantesikring"), "pantesikring");});
test("pantet -> pant", function() {deepEqual( Stem("pantet"), "pant");});
test("pantetrygd -> pantetrygd", function() {deepEqual( Stem("pantetrygd"), "pantetrygd");});
test("panthavar -> panthav", function() {deepEqual( Stem("panthavar"), "panthav");});
test("panthavarane -> panthavar", function() {deepEqual( Stem("panthavarane"), "panthavar");});
test("panthavarar -> panthavar", function() {deepEqual( Stem("panthavarar"), "panthavar");});
test("panthavaren -> panthavar", function() {deepEqual( Stem("panthavaren"), "panthavar");});
test("panthavarforhold -> panthavarforhold", function() {deepEqual( Stem("panthavarforhold"), "panthavarforhold");});
test("pantobjekt -> pantobjekt", function() {deepEqual( Stem("pantobjekt"), "pantobjekt");});
test("pantobjektet -> pantobjekt", function() {deepEqual( Stem("pantobjektet"), "pantobjekt");});
test("pantobligasjonane -> pantobligasjon", function() {deepEqual( Stem("pantobligasjonane"), "pantobligasjon");});
test("pantobligasjonar -> pantobligasjon", function() {deepEqual( Stem("pantobligasjonar"), "pantobligasjon");});
test("pantobligasjonen -> pantobligasjon", function() {deepEqual( Stem("pantobligasjonen"), "pantobligasjon");});
test("pantsetjaren -> pantsetjar", function() {deepEqual( Stem("pantsetjaren"), "pantsetjar");});
test("pantsetjast -> pantsetj", function() {deepEqual( Stem("pantsetjast"), "pantsetj");});
test("pantsetje -> pantsetj", function() {deepEqual( Stem("pantsetje"), "pantsetj");});
test("pantsetjing -> pantsetjing", function() {deepEqual( Stem("pantsetjing"), "pantsetjing");});
test("pantsett -> pantsett", function() {deepEqual( Stem("pantsett"), "pantsett");});
test("pantsettelse -> pantsett", function() {deepEqual( Stem("pantsettelse"), "pantsett");});
test("pantsettes -> pantsett", function() {deepEqual( Stem("pantsettes"), "pantsett");});
test("paper -> pap", function() {deepEqual( Stem("paper"), "pap");});
test("papir -> papir", function() {deepEqual( Stem("papir"), "papir");});
test("papireksport -> papireksport", function() {deepEqual( Stem("papireksport"), "papireksport");});
test("papirindustri -> papirindustri", function() {deepEqual( Stem("papirindustri"), "papirindustri");});
test("papirindustrien -> papirindustri", function() {deepEqual( Stem("papirindustrien"), "papirindustri");});
test("papirvarer -> papirvar", function() {deepEqual( Stem("papirvarer"), "papirvar");});
test("papp -> papp", function() {deepEqual( Stem("papp"), "papp");});
test("par -> par", function() {deepEqual( Stem("par"), "par");});
test("parabolantenna -> parabolantenn", function() {deepEqual( Stem("parabolantenna"), "parabolantenn");});
test("parabolantenner -> parabolantenn", function() {deepEqual( Stem("parabolantenner"), "parabolantenn");});
test("paradoks -> paradoks", function() {deepEqual( Stem("paradoks"), "paradoks");});
test("paradoksale -> paradoksal", function() {deepEqual( Stem("paradoksale"), "paradoksal");});
test("paragraf -> paragraf", function() {deepEqual( Stem("paragraf"), "paragraf");});
test("paragrafane -> paragraf", function() {deepEqual( Stem("paragrafane"), "paragraf");});
test("paragrafar -> paragraf", function() {deepEqual( Stem("paragrafar"), "paragraf");});
test("paragrafen -> paragraf", function() {deepEqual( Stem("paragrafen"), "paragraf");});
test("paragrafens -> paragraf", function() {deepEqual( Stem("paragrafens"), "paragraf");});
test("paragrafer -> paragraf", function() {deepEqual( Stem("paragrafer"), "paragraf");});
test("parallell -> parallell", function() {deepEqual( Stem("parallell"), "parallell");});
test("parallellar -> parallell", function() {deepEqual( Stem("parallellar"), "parallell");});
test("parallelle -> parallell", function() {deepEqual( Stem("parallelle"), "parallell");});
test("parallellen -> parallell", function() {deepEqual( Stem("parallellen"), "parallell");});
test("paralleller -> parallell", function() {deepEqual( Stem("paralleller"), "parallell");});
test("parallelt -> parallelt", function() {deepEqual( Stem("parallelt"), "parallelt");});
test("parametere -> parameter", function() {deepEqual( Stem("parametere"), "parameter");});
test("parametre -> parametr", function() {deepEqual( Stem("parametre"), "parametr");});
test("parentes -> parent", function() {deepEqual( Stem("parentes"), "parent");});
test("paret -> par", function() {deepEqual( Stem("paret"), "par");});
test("parkeringsplass -> parkeringsplass", function() {deepEqual( Stem("parkeringsplass"), "parkeringsplass");});
test("part -> part", function() {deepEqual( Stem("part"), "part");});
test("partane -> part", function() {deepEqual( Stem("partane"), "part");});
test("partar -> part", function() {deepEqual( Stem("partar"), "part");});
test("parten -> part", function() {deepEqual( Stem("parten"), "part");});
test("parter -> part", function() {deepEqual( Stem("parter"), "part");});
test("parti -> parti", function() {deepEqual( Stem("parti"), "parti");});
test("partier -> parti", function() {deepEqual( Stem("partier"), "parti");});
test("partilast -> partil", function() {deepEqual( Stem("partilast"), "partil");});
test("partnarar -> partnar", function() {deepEqual( Stem("partnarar"), "partnar");});
test("partner -> partn", function() {deepEqual( Stem("partner"), "partn");});
test("partnerskap -> partnerskap", function() {deepEqual( Stem("partnerskap"), "partnerskap");});
test("partnerskapsliknende -> partnerskapslikn", function() {deepEqual( Stem("partnerskapsliknende"), "partnerskapslikn");});
test("partsforhold -> partsforhold", function() {deepEqual( Stem("partsforhold"), "partsforhold");});
test("pass -> pass", function() {deepEqual( Stem("pass"), "pass");});
test("passande -> pass", function() {deepEqual( Stem("passande"), "pass");});
test("passar -> pass", function() {deepEqual( Stem("passar"), "pass");});
test("passasjerer -> passasjer", function() {deepEqual( Stem("passasjerer"), "passasjer");});
test("passasjerfergene -> passasjerferg", function() {deepEqual( Stem("passasjerfergene"), "passasjerferg");});
test("passasjerferjen -> passasjerferj", function() {deepEqual( Stem("passasjerferjen"), "passasjerferj");});
test("passasjerferjene -> passasjerferj", function() {deepEqual( Stem("passasjerferjene"), "passasjerferj");});
test("passasjerferjer -> passasjerferj", function() {deepEqual( Stem("passasjerferjer"), "passasjerferj");});
test("passasjergrunnlag -> passasjergrunnlag", function() {deepEqual( Stem("passasjergrunnlag"), "passasjergrunnlag");});
test("passasjertrafikken -> passasjertrafikk", function() {deepEqual( Stem("passasjertrafikken"), "passasjertrafikk");});
test("passe -> pass", function() {deepEqual( Stem("passe"), "pass");});
test("passende -> pass", function() {deepEqual( Stem("passende"), "pass");});
test("passer -> pass", function() {deepEqual( Stem("passer"), "pass");});
test("passere -> passer", function() {deepEqual( Stem("passere"), "passer");});
test("passerer -> passer", function() {deepEqual( Stem("passerer"), "passer");});
test("passering -> passering", function() {deepEqual( Stem("passering"), "passering");});
test("passerte -> passer", function() {deepEqual( Stem("passerte"), "passer");});
test("passiv -> passiv", function() {deepEqual( Stem("passiv"), "passiv");});
test("passiva -> passiv", function() {deepEqual( Stem("passiva"), "passiv");});
test("passivitet -> passivit", function() {deepEqual( Stem("passivitet"), "passivit");});
test("patterød -> patterød", function() {deepEqual( Stem("patterød"), "patterød");});
test("pause -> paus", function() {deepEqual( Stem("pause"), "paus");});
test("pausen -> paus", function() {deepEqual( Stem("pausen"), "paus");});
test("pbe -> pbe", function() {deepEqual( Stem("pbe"), "pbe");});
test("pbes -> pbes", function() {deepEqual( Stem("pbes"), "pbes");});
test("pbl -> pbl", function() {deepEqual( Stem("pbl"), "pbl");});
test("peikast -> peik", function() {deepEqual( Stem("peikast"), "peik");});
test("peike -> peik", function() {deepEqual( Stem("peike"), "peik");});
test("peiker -> peik", function() {deepEqual( Stem("peiker"), "peik");});
test("peikt -> peikt", function() {deepEqual( Stem("peikt"), "peikt");});
test("peikte -> peikt", function() {deepEqual( Stem("peikte"), "peikt");});
test("peisen -> peis", function() {deepEqual( Stem("peisen"), "peis");});
test("pek -> pek", function() {deepEqual( Stem("pek"), "pek");});
test("peke -> pek", function() {deepEqual( Stem("peke"), "pek");});
test("pekefinger -> pekefing", function() {deepEqual( Stem("pekefinger"), "pekefing");});
test("pekepinn -> pekepinn", function() {deepEqual( Stem("pekepinn"), "pekepinn");});
test("peker -> pek", function() {deepEqual( Stem("peker"), "pek");});
test("pekes -> pek", function() {deepEqual( Stem("pekes"), "pek");});
test("pekt -> pekt", function() {deepEqual( Stem("pekt"), "pekt");});
test("peler -> pel", function() {deepEqual( Stem("peler"), "pel");});
test("pels -> pel", function() {deepEqual( Stem("pels"), "pel");});
test("pendler -> pendl", function() {deepEqual( Stem("pendler"), "pendl");});
test("pene -> pen", function() {deepEqual( Stem("pene"), "pen");});
test("peneste -> penest", function() {deepEqual( Stem("peneste"), "penest");});
test("pengane -> peng", function() {deepEqual( Stem("pengane"), "peng");});
test("pengar -> peng", function() {deepEqual( Stem("pengar"), "peng");});
test("penge -> peng", function() {deepEqual( Stem("penge"), "peng");});
test("pengefordringer -> pengefordring", function() {deepEqual( Stem("pengefordringer"), "pengefordring");});
test("pengekrav -> pengekrav", function() {deepEqual( Stem("pengekrav"), "pengekrav");});
test("pengekreditorar -> pengekreditor", function() {deepEqual( Stem("pengekreditorar"), "pengekreditor");});
test("pengemangel -> pengemangel", function() {deepEqual( Stem("pengemangel"), "pengemangel");});
test("penger -> peng", function() {deepEqual( Stem("penger"), "peng");});
test("pensionkostnader -> pensionkostnad", function() {deepEqual( Stem("pensionkostnader"), "pensionkostnad");});
test("pensions -> pension", function() {deepEqual( Stem("pensions"), "pension");});
test("pensjon -> pensjon", function() {deepEqual( Stem("pensjon"), "pensjon");});
test("pensjonalderen -> pensjonalder", function() {deepEqual( Stem("pensjonalderen"), "pensjonalder");});
test("pensjonen -> pensjon", function() {deepEqual( Stem("pensjonen"), "pensjon");});
test("pensjonene -> pensjon", function() {deepEqual( Stem("pensjonene"), "pensjon");});
test("pensjonenes -> pensjon", function() {deepEqual( Stem("pensjonenes"), "pensjon");});
test("pensjonens -> pensjon", function() {deepEqual( Stem("pensjonens"), "pensjon");});
test("pensjoner -> pensjon", function() {deepEqual( Stem("pensjoner"), "pensjon");});
test("pensjonering -> pensjonering", function() {deepEqual( Stem("pensjonering"), "pensjonering");});
test("pensjoneringstidspunktet -> pensjoneringstidspunkt", function() {deepEqual( Stem("pensjoneringstidspunktet"), "pensjoneringstidspunkt");});
test("pensjonerte -> pensjoner", function() {deepEqual( Stem("pensjonerte"), "pensjoner");});
test("pensjonist -> pensjonist", function() {deepEqual( Stem("pensjonist"), "pensjonist");});
test("pensjonistbeskatningen -> pensjonistbeskatning", function() {deepEqual( Stem("pensjonistbeskatningen"), "pensjonistbeskatning");});
test("pensjonistektepar -> pensjonistektep", function() {deepEqual( Stem("pensjonistektepar"), "pensjonistektep");});
test("pensjonisten -> pensjonist", function() {deepEqual( Stem("pensjonisten"), "pensjonist");});
test("pensjonistene -> pensjonist", function() {deepEqual( Stem("pensjonistene"), "pensjonist");});
test("pensjonistenes -> pensjonist", function() {deepEqual( Stem("pensjonistenes"), "pensjonist");});
test("pensjonistens -> pensjonist", function() {deepEqual( Stem("pensjonistens"), "pensjonist");});
test("pensjonister -> pensjonist", function() {deepEqual( Stem("pensjonister"), "pensjonist");});
test("pensjonists -> pensjonist", function() {deepEqual( Stem("pensjonists"), "pensjonist");});
test("pensjonisttilværelse -> pensjonisttilvær", function() {deepEqual( Stem("pensjonisttilværelse"), "pensjonisttilvær");});
test("pensjonisttilværelsen -> pensjonisttilvær", function() {deepEqual( Stem("pensjonisttilværelsen"), "pensjonisttilvær");});
test("pensjonkapitalen -> pensjonkapital", function() {deepEqual( Stem("pensjonkapitalen"), "pensjonkapital");});
test("pensjonnivå -> pensjonnivå", function() {deepEqual( Stem("pensjonnivå"), "pensjonnivå");});
test("pensjons -> pensjon", function() {deepEqual( Stem("pensjons"), "pensjon");});
test("pensjonsalder -> pensjonsald", function() {deepEqual( Stem("pensjonsalder"), "pensjonsald");});
test("pensjonsalderen -> pensjonsalder", function() {deepEqual( Stem("pensjonsalderen"), "pensjonsalder");});
test("pensjonsaldersnormen -> pensjonsaldersnorm", function() {deepEqual( Stem("pensjonsaldersnormen"), "pensjonsaldersnorm");});
test("pensjonsaldre -> pensjonsaldr", function() {deepEqual( Stem("pensjonsaldre"), "pensjonsaldr");});
test("pensjonsavtale -> pensjonsavtal", function() {deepEqual( Stem("pensjonsavtale"), "pensjonsavtal");});
test("pensjonsavtalene -> pensjonsavtal", function() {deepEqual( Stem("pensjonsavtalene"), "pensjonsavtal");});
test("pensjonsavtaler -> pensjonsavtal", function() {deepEqual( Stem("pensjonsavtaler"), "pensjonsavtal");});
test("pensjonsbegrepet -> pensjonsbegrep", function() {deepEqual( Stem("pensjonsbegrepet"), "pensjonsbegrep");});
test("pensjonsbehov -> pensjonsbehov", function() {deepEqual( Stem("pensjonsbehov"), "pensjonsbehov");});
test("pensjonsbehovet -> pensjonsbehov", function() {deepEqual( Stem("pensjonsbehovet"), "pensjonsbehov");});
test("pensjonsbeløp -> pensjonsbeløp", function() {deepEqual( Stem("pensjonsbeløp"), "pensjonsbeløp");});
test("pensjonsberegningen -> pensjonsberegning", function() {deepEqual( Stem("pensjonsberegningen"), "pensjonsberegning");});
test("pensjonsberettigede -> pensjonsberett", function() {deepEqual( Stem("pensjonsberettigede"), "pensjonsberett");});
test("pensjonsberettigedes -> pensjonsberett", function() {deepEqual( Stem("pensjonsberettigedes"), "pensjonsberett");});
test("pensjonsbeskatning -> pensjonsbeskatning", function() {deepEqual( Stem("pensjonsbeskatning"), "pensjonsbeskatning");});
test("pensjonsbeskatningen -> pensjonsbeskatning", function() {deepEqual( Stem("pensjonsbeskatningen"), "pensjonsbeskatning");});
test("pensjonsbevis -> pensjonsbevis", function() {deepEqual( Stem("pensjonsbevis"), "pensjonsbevis");});
test("pensjonsfond -> pensjonsfond", function() {deepEqual( Stem("pensjonsfond"), "pensjonsfond");});
test("pensjonsfondene -> pensjonsfond", function() {deepEqual( Stem("pensjonsfondene"), "pensjonsfond");});
test("pensjonsforhold -> pensjonsforhold", function() {deepEqual( Stem("pensjonsforhold"), "pensjonsforhold");});
test("pensjonsforholdene -> pensjonsforhold", function() {deepEqual( Stem("pensjonsforholdene"), "pensjonsforhold");});
test("pensjonsformer -> pensjonsform", function() {deepEqual( Stem("pensjonsformer"), "pensjonsform");});
test("pensjonsformue -> pensjonsformu", function() {deepEqual( Stem("pensjonsformue"), "pensjonsformu");});
test("pensjonsformuen -> pensjonsformu", function() {deepEqual( Stem("pensjonsformuen"), "pensjonsformu");});
test("pensjonsformål -> pensjonsformål", function() {deepEqual( Stem("pensjonsformål"), "pensjonsformål");});
test("pensjonsforpliktelse -> pensjonsforplikt", function() {deepEqual( Stem("pensjonsforpliktelse"), "pensjonsforplikt");});
test("pensjonsforpliktelser -> pensjonsforplikt", function() {deepEqual( Stem("pensjonsforpliktelser"), "pensjonsforplikt");});
test("pensjonsforsikring -> pensjonsforsikring", function() {deepEqual( Stem("pensjonsforsikring"), "pensjonsforsikring");});
test("pensjonsforsikringen -> pensjonsforsikring", function() {deepEqual( Stem("pensjonsforsikringen"), "pensjonsforsikring");});
test("pensjonsforsikringer -> pensjonsforsikring", function() {deepEqual( Stem("pensjonsforsikringer"), "pensjonsforsikring");});
test("pensjonsforsikringsavtale -> pensjonsforsikringsavtal", function() {deepEqual( Stem("pensjonsforsikringsavtale"), "pensjonsforsikringsavtal");});
test("pensjonsforsikringsavtaler -> pensjonsforsikringsavtal", function() {deepEqual( Stem("pensjonsforsikringsavtaler"), "pensjonsforsikringsavtal");});
test("pensjonsforsikringskontrakt -> pensjonsforsikringskontrakt", function() {deepEqual( Stem("pensjonsforsikringskontrakt"), "pensjonsforsikringskontrakt");});
test("pensjonsforsikringskontrakter -> pensjonsforsikringskontrakt", function() {deepEqual( Stem("pensjonsforsikringskontrakter"), "pensjonsforsikringskontrakt");});
test("pensjonsforsikringsordning -> pensjonsforsikringsordning", function() {deepEqual( Stem("pensjonsforsikringsordning"), "pensjonsforsikringsordning");});
test("pensjonsforsikringsordninger -> pensjonsforsikringsordning", function() {deepEqual( Stem("pensjonsforsikringsordninger"), "pensjonsforsikringsordning");});
test("pensjonsforsikringspremie -> pensjonsforsikringspremi", function() {deepEqual( Stem("pensjonsforsikringspremie"), "pensjonsforsikringspremi");});
test("pensjonsforsikringsutvalget -> pensjonsforsikringsutvalg", function() {deepEqual( Stem("pensjonsforsikringsutvalget"), "pensjonsforsikringsutvalg");});
test("pensjonsforum -> pensjonsforum", function() {deepEqual( Stem("pensjonsforum"), "pensjonsforum");});
test("pensjonsgivende -> pensjonsgiv", function() {deepEqual( Stem("pensjonsgivende"), "pensjonsgiv");});
test("pensjonsgrunnlaget -> pensjonsgrunnlag", function() {deepEqual( Stem("pensjonsgrunnlaget"), "pensjonsgrunnlag");});
test("pensjonsinnbetaling -> pensjonsinnbetaling", function() {deepEqual( Stem("pensjonsinnbetaling"), "pensjonsinnbetaling");});
test("pensjonsinnbetalingene -> pensjonsinnbetaling", function() {deepEqual( Stem("pensjonsinnbetalingene"), "pensjonsinnbetaling");});
test("pensjonsinnbetalinger -> pensjonsinnbetaling", function() {deepEqual( Stem("pensjonsinnbetalinger"), "pensjonsinnbetaling");});
test("pensjonsinnretningen -> pensjonsinnretning", function() {deepEqual( Stem("pensjonsinnretningen"), "pensjonsinnretning");});
test("pensjonsinnretningene -> pensjonsinnretning", function() {deepEqual( Stem("pensjonsinnretningene"), "pensjonsinnretning");});
test("pensjonsinnskudd -> pensjonsinnskudd", function() {deepEqual( Stem("pensjonsinnskudd"), "pensjonsinnskudd");});
test("pensjonsinnskuddene -> pensjonsinnskudd", function() {deepEqual( Stem("pensjonsinnskuddene"), "pensjonsinnskudd");});
test("pensjonsinnskuddenes -> pensjonsinnskudd", function() {deepEqual( Stem("pensjonsinnskuddenes"), "pensjonsinnskudd");});
test("pensjonsinnskuddet -> pensjonsinnskudd", function() {deepEqual( Stem("pensjonsinnskuddet"), "pensjonsinnskudd");});
test("pensjonsinntekt -> pensjonsinntekt", function() {deepEqual( Stem("pensjonsinntekt"), "pensjonsinntekt");});
test("pensjonsintervallet -> pensjonsintervall", function() {deepEqual( Stem("pensjonsintervallet"), "pensjonsintervall");});
test("pensjonskapital -> pensjonskapital", function() {deepEqual( Stem("pensjonskapital"), "pensjonskapital");});
test("pensjonskapitalbevis -> pensjonskapitalbevis", function() {deepEqual( Stem("pensjonskapitalbevis"), "pensjonskapitalbevis");});
test("pensjonskapitalbeviset -> pensjonskapitalbevis", function() {deepEqual( Stem("pensjonskapitalbeviset"), "pensjonskapitalbevis");});
test("pensjonskapitalen -> pensjonskapital", function() {deepEqual( Stem("pensjonskapitalen"), "pensjonskapital");});
test("pensjonskapitalens -> pensjonskapital", function() {deepEqual( Stem("pensjonskapitalens"), "pensjonskapital");});
test("pensjonskapitalkonti -> pensjonskapitalkonti", function() {deepEqual( Stem("pensjonskapitalkonti"), "pensjonskapitalkonti");});
test("pensjonskapitalkontoen -> pensjonskapitalkonto", function() {deepEqual( Stem("pensjonskapitalkontoen"), "pensjonskapitalkonto");});
test("pensjonskapitel -> pensjonskapitel", function() {deepEqual( Stem("pensjonskapitel"), "pensjonskapitel");});
test("pensjonskasse -> pensjonskass", function() {deepEqual( Stem("pensjonskasse"), "pensjonskass");});
test("pensjonskasseforskriften -> pensjonskasseforskrift", function() {deepEqual( Stem("pensjonskasseforskriften"), "pensjonskasseforskrift");});
test("pensjonskassen -> pensjonskass", function() {deepEqual( Stem("pensjonskassen"), "pensjonskass");});
test("pensjonskassene -> pensjonskass", function() {deepEqual( Stem("pensjonskassene"), "pensjonskass");});
test("pensjonskassenes -> pensjonskass", function() {deepEqual( Stem("pensjonskassenes"), "pensjonskass");});
test("pensjonskassens -> pensjonskass", function() {deepEqual( Stem("pensjonskassens"), "pensjonskass");});
test("pensjonskasser -> pensjonskass", function() {deepEqual( Stem("pensjonskasser"), "pensjonskass");});
test("pensjonskassers -> pensjonskass", function() {deepEqual( Stem("pensjonskassers"), "pensjonskass");});
test("pensjonskollektivet -> pensjonskollektiv", function() {deepEqual( Stem("pensjonskollektivet"), "pensjonskollektiv");});
test("pensjonskonti -> pensjonskonti", function() {deepEqual( Stem("pensjonskonti"), "pensjonskonti");});
test("pensjonskonto -> pensjonskonto", function() {deepEqual( Stem("pensjonskonto"), "pensjonskonto");});
test("pensjonskontoen -> pensjonskonto", function() {deepEqual( Stem("pensjonskontoen"), "pensjonskonto");});
test("pensjonskostnaden -> pensjonskostnad", function() {deepEqual( Stem("pensjonskostnaden"), "pensjonskostnad");});
test("pensjonskostnadene -> pensjonskostnad", function() {deepEqual( Stem("pensjonskostnadene"), "pensjonskostnad");});
test("pensjonskostnader -> pensjonskostnad", function() {deepEqual( Stem("pensjonskostnader"), "pensjonskostnad");});
test("pensjonsløsninger -> pensjonsløsning", function() {deepEqual( Stem("pensjonsløsninger"), "pensjonsløsning");});
test("pensjonsmessig -> pensjonsmess", function() {deepEqual( Stem("pensjonsmessig"), "pensjonsmess");});
test("pensjonsmessige -> pensjonsmess", function() {deepEqual( Stem("pensjonsmessige"), "pensjonsmess");});
test("pensjonsmidlene -> pensjonsmidl", function() {deepEqual( Stem("pensjonsmidlene"), "pensjonsmidl");});
test("pensjonsmidler -> pensjonsmidl", function() {deepEqual( Stem("pensjonsmidler"), "pensjonsmidl");});
test("pensjonsnivå -> pensjonsnivå", function() {deepEqual( Stem("pensjonsnivå"), "pensjonsnivå");});
test("pensjonsnivåene -> pensjonsnivå", function() {deepEqual( Stem("pensjonsnivåene"), "pensjonsnivå");});
test("pensjonsnivået -> pensjonsnivå", function() {deepEqual( Stem("pensjonsnivået"), "pensjonsnivå");});
test("pensjonsoppbygging -> pensjonsoppbygging", function() {deepEqual( Stem("pensjonsoppbygging"), "pensjonsoppbygging");});
test("pensjonsopptjening -> pensjonsopptjening", function() {deepEqual( Stem("pensjonsopptjening"), "pensjonsopptjening");});
test("pensjonsordning -> pensjonsordning", function() {deepEqual( Stem("pensjonsordning"), "pensjonsordning");});
test("pensjonsordningen -> pensjonsordning", function() {deepEqual( Stem("pensjonsordningen"), "pensjonsordning");});
test("pensjonsordningene -> pensjonsordning", function() {deepEqual( Stem("pensjonsordningene"), "pensjonsordning");});
test("pensjonsordningens -> pensjonsordning", function() {deepEqual( Stem("pensjonsordningens"), "pensjonsordning");});
test("pensjonsordninger -> pensjonsordning", function() {deepEqual( Stem("pensjonsordninger"), "pensjonsordning");});
test("pensjonsordningers -> pensjonsordning", function() {deepEqual( Stem("pensjonsordningers"), "pensjonsordning");});
test("pensjonsordnings -> pensjonsordning", function() {deepEqual( Stem("pensjonsordnings"), "pensjonsordning");});
test("pensjonspareavtaler -> pensjonspareavtal", function() {deepEqual( Stem("pensjonspareavtaler"), "pensjonspareavtal");});
test("pensjonsparing -> pensjonsparing", function() {deepEqual( Stem("pensjonsparing"), "pensjonsparing");});
test("pensjonsplan -> pensjonsplan", function() {deepEqual( Stem("pensjonsplan"), "pensjonsplan");});
test("pensjonsplanen -> pensjonsplan", function() {deepEqual( Stem("pensjonsplanen"), "pensjonsplan");});
test("pensjonsplanene -> pensjonsplan", function() {deepEqual( Stem("pensjonsplanene"), "pensjonsplan");});
test("pensjonsplaner -> pensjonsplan", function() {deepEqual( Stem("pensjonsplaner"), "pensjonsplan");});
test("pensjonspolitikk -> pensjonspolitikk", function() {deepEqual( Stem("pensjonspolitikk"), "pensjonspolitikk");});
test("pensjonspolitisk -> pensjonspolitisk", function() {deepEqual( Stem("pensjonspolitisk"), "pensjonspolitisk");});
test("pensjonspolitiske -> pensjonspolitisk", function() {deepEqual( Stem("pensjonspolitiske"), "pensjonspolitisk");});
test("pensjonsprosent -> pensjonsprosent", function() {deepEqual( Stem("pensjonsprosent"), "pensjonsprosent");});
test("pensjonsprosenten -> pensjonsprosent", function() {deepEqual( Stem("pensjonsprosenten"), "pensjonsprosent");});
test("pensjonsreguleringsfond -> pensjonsreguleringsfond", function() {deepEqual( Stem("pensjonsreguleringsfond"), "pensjonsreguleringsfond");});
test("pensjonsreserve -> pensjonsreserv", function() {deepEqual( Stem("pensjonsreserve"), "pensjonsreserv");});
test("pensjonsrett -> pensjonsrett", function() {deepEqual( Stem("pensjonsrett"), "pensjonsrett");});
test("pensjonsrettigheten -> pensjonsrett", function() {deepEqual( Stem("pensjonsrettigheten"), "pensjonsrett");});
test("pensjonsrettighetene -> pensjonsrett", function() {deepEqual( Stem("pensjonsrettighetene"), "pensjonsrett");});
test("pensjonsrettigheter -> pensjonsrett", function() {deepEqual( Stem("pensjonsrettigheter"), "pensjonsrett");});
test("pensjonssammenheng -> pensjonssammenheng", function() {deepEqual( Stem("pensjonssammenheng"), "pensjonssammenheng");});
test("pensjonsskyddscentralen -> pensjonsskyddscentral", function() {deepEqual( Stem("pensjonsskyddscentralen"), "pensjonsskyddscentral");});
test("pensjonsspareavtale -> pensjonsspareavtal", function() {deepEqual( Stem("pensjonsspareavtale"), "pensjonsspareavtal");});
test("pensjonsspareavtalen -> pensjonsspareavtal", function() {deepEqual( Stem("pensjonsspareavtalen"), "pensjonsspareavtal");});
test("pensjonsspareavtalene -> pensjonsspareavtal", function() {deepEqual( Stem("pensjonsspareavtalene"), "pensjonsspareavtal");});
test("pensjonsspareavtaler -> pensjonsspareavtal", function() {deepEqual( Stem("pensjonsspareavtaler"), "pensjonsspareavtal");});
test("pensjonsspareren -> pensjonssparer", function() {deepEqual( Stem("pensjonsspareren"), "pensjonssparer");});
test("pensjonssparerens -> pensjonssparer", function() {deepEqual( Stem("pensjonssparerens"), "pensjonssparer");});
test("pensjonssparing -> pensjonssparing", function() {deepEqual( Stem("pensjonssparing"), "pensjonssparing");});
test("pensjonssparingen -> pensjonssparing", function() {deepEqual( Stem("pensjonssparingen"), "pensjonssparing");});
test("pensjonsspørsmål -> pensjonsspørsmål", function() {deepEqual( Stem("pensjonsspørsmål"), "pensjonsspørsmål");});
test("pensjonssystem -> pensjonssystem", function() {deepEqual( Stem("pensjonssystem"), "pensjonssystem");});
test("pensjonssystemene -> pensjonssystem", function() {deepEqual( Stem("pensjonssystemene"), "pensjonssystem");});
test("pensjonssystemer -> pensjonssystem", function() {deepEqual( Stem("pensjonssystemer"), "pensjonssystem");});
test("pensjonssystemet -> pensjonssystem", function() {deepEqual( Stem("pensjonssystemet"), "pensjonssystem");});
test("pensjonstilbud -> pensjonstilbud", function() {deepEqual( Stem("pensjonstilbud"), "pensjonstilbud");});
test("pensjonstilfellet -> pensjonstilfell", function() {deepEqual( Stem("pensjonstilfellet"), "pensjonstilfell");});
test("pensjonstilskudd -> pensjonstilskudd", function() {deepEqual( Stem("pensjonstilskudd"), "pensjonstilskudd");});
test("pensjonstilskuddet -> pensjonstilskudd", function() {deepEqual( Stem("pensjonstilskuddet"), "pensjonstilskudd");});
test("pensjonsutbetaling -> pensjonsutbetaling", function() {deepEqual( Stem("pensjonsutbetaling"), "pensjonsutbetaling");});
test("pensjonsutbetalingen -> pensjonsutbetaling", function() {deepEqual( Stem("pensjonsutbetalingen"), "pensjonsutbetaling");});
test("pensjonsutbetalingene -> pensjonsutbetaling", function() {deepEqual( Stem("pensjonsutbetalingene"), "pensjonsutbetaling");});
test("pensjonsutbetalinger -> pensjonsutbetaling", function() {deepEqual( Stem("pensjonsutbetalinger"), "pensjonsutbetaling");});
test("pensjonsutgifter -> pensjonsutgift", function() {deepEqual( Stem("pensjonsutgifter"), "pensjonsutgift");});
test("pensjonsvilkår -> pensjonsvilkår", function() {deepEqual( Stem("pensjonsvilkår"), "pensjonsvilkår");});
test("pensjonsytelse -> pensjonsyt", function() {deepEqual( Stem("pensjonsytelse"), "pensjonsyt");});
test("pensjonsytelsen -> pensjonsyt", function() {deepEqual( Stem("pensjonsytelsen"), "pensjonsyt");});
test("pensjonsytelsene -> pensjonsyt", function() {deepEqual( Stem("pensjonsytelsene"), "pensjonsyt");});
test("pensjonsytelser -> pensjonsyt", function() {deepEqual( Stem("pensjonsytelser"), "pensjonsyt");});
test("pensjonsøyemed -> pensjonsøyemed", function() {deepEqual( Stem("pensjonsøyemed"), "pensjonsøyemed");});
test("pent -> pent", function() {deepEqual( Stem("pent"), "pent");});
test("per -> per", function() {deepEqual( Stem("per"), "per");});
test("periodar -> period", function() {deepEqual( Stem("periodar"), "period");});
test("periode -> period", function() {deepEqual( Stem("periode"), "period");});
test("perioden -> period", function() {deepEqual( Stem("perioden"), "period");});
test("periodene -> period", function() {deepEqual( Stem("periodene"), "period");});
test("periodens -> period", function() {deepEqual( Stem("periodens"), "period");});
test("perioder -> period", function() {deepEqual( Stem("perioder"), "period");});
test("periodiseres -> periodiser", function() {deepEqual( Stem("periodiseres"), "periodiser");});
test("periodiseringen -> periodisering", function() {deepEqual( Stem("periodiseringen"), "periodisering");});
test("periodiseringsprinsipp -> periodiseringsprinsipp", function() {deepEqual( Stem("periodiseringsprinsipp"), "periodiseringsprinsipp");});
test("periodiseringsprinsipper -> periodiseringsprinsipp", function() {deepEqual( Stem("periodiseringsprinsipper"), "periodiseringsprinsipp");});
test("periodisert -> periodiser", function() {deepEqual( Stem("periodisert"), "periodiser");});
test("periodisk -> periodisk", function() {deepEqual( Stem("periodisk"), "periodisk");});
test("periodiske -> periodisk", function() {deepEqual( Stem("periodiske"), "periodisk");});
test("permanens -> perman", function() {deepEqual( Stem("permanens"), "perman");});
test("permanent -> permanent", function() {deepEqual( Stem("permanent"), "permanent");});
test("permanente -> permanent", function() {deepEqual( Stem("permanente"), "permanent");});
test("permisjon -> permisjon", function() {deepEqual( Stem("permisjon"), "permisjon");});
test("permisjonen -> permisjon", function() {deepEqual( Stem("permisjonen"), "permisjon");});
test("permisjoner -> permisjon", function() {deepEqual( Stem("permisjoner"), "permisjon");});
test("permisjonstiden -> permisjonstid", function() {deepEqual( Stem("permisjonstiden"), "permisjonstid");});
test("permisjonstidspunktet -> permisjonstidspunkt", function() {deepEqual( Stem("permisjonstidspunktet"), "permisjonstidspunkt");});
test("permittering -> permittering", function() {deepEqual( Stem("permittering"), "permittering");});
test("permitteringer -> permittering", function() {deepEqual( Stem("permitteringer"), "permittering");});
test("permittert -> permitter", function() {deepEqual( Stem("permittert"), "permitter");});
test("permitterte -> permitter", function() {deepEqual( Stem("permitterte"), "permitter");});
test("person -> person", function() {deepEqual( Stem("person"), "person");});
test("personane -> person", function() {deepEqual( Stem("personane"), "person");});
test("personar -> person", function() {deepEqual( Stem("personar"), "person");});
test("personbiler -> personbil", function() {deepEqual( Stem("personbiler"), "personbil");});
test("personen -> person", function() {deepEqual( Stem("personen"), "person");});
test("personene -> person", function() {deepEqual( Stem("personene"), "person");});
test("personens -> person", function() {deepEqual( Stem("personens"), "person");});
test("personer -> person", function() {deepEqual( Stem("personer"), "person");});
test("personfellesskap -> personfellesskap", function() {deepEqual( Stem("personfellesskap"), "personfellesskap");});
test("persongrupper -> persongrupp", function() {deepEqual( Stem("persongrupper"), "persongrupp");});
test("personinntekt -> personinntekt", function() {deepEqual( Stem("personinntekt"), "personinntekt");});
test("personinntekten -> personinntekt", function() {deepEqual( Stem("personinntekten"), "personinntekt");});
test("personleg -> person", function() {deepEqual( Stem("personleg"), "person");});
test("personlege -> person", function() {deepEqual( Stem("personlege"), "person");});
test("personopplysningar -> personopplysning", function() {deepEqual( Stem("personopplysningar"), "personopplysning");});
test("personskifte -> personskift", function() {deepEqual( Stem("personskifte"), "personskift");});
test("persontrafikken -> persontrafikk", function() {deepEqual( Stem("persontrafikken"), "persontrafikk");});
test("perspektiv -> perspektiv", function() {deepEqual( Stem("perspektiv"), "perspektiv");});
test("perspektivene -> perspektiv", function() {deepEqual( Stem("perspektivene"), "perspektiv");});
test("perspektiver -> perspektiv", function() {deepEqual( Stem("perspektiver"), "perspektiv");});
test("perspektivet -> perspektiv", function() {deepEqual( Stem("perspektivet"), "perspektiv");});
test("persson -> persson", function() {deepEqual( Stem("persson"), "persson");});
test("peser -> pes", function() {deepEqual( Stem("peser"), "pes");});
test("pest -> pest", function() {deepEqual( Stem("pest"), "pest");});
test("peter -> pet", function() {deepEqual( Stem("peter"), "pet");});
test("peterson -> peterson", function() {deepEqual( Stem("peterson"), "peterson");});
test("petter -> pett", function() {deepEqual( Stem("petter"), "pett");});
test("pga -> pga", function() {deepEqual( Stem("pga"), "pga");});
test("philipps -> philipp", function() {deepEqual( Stem("philipps"), "philipp");});
test("piggeple -> piggepl", function() {deepEqual( Stem("piggeple"), "piggepl");});
test("pike -> pik", function() {deepEqual( Stem("pike"), "pik");});
test("piken -> pik", function() {deepEqual( Stem("piken"), "pik");});
test("pil -> pil", function() {deepEqual( Stem("pil"), "pil");});
test("pilen -> pil", function() {deepEqual( Stem("pilen"), "pil");});
test("piler -> pil", function() {deepEqual( Stem("piler"), "pil");});
test("pilskudd -> pilskudd", function() {deepEqual( Stem("pilskudd"), "pilskudd");});
test("pimpesten -> pimpest", function() {deepEqual( Stem("pimpesten"), "pimpest");});
test("pinefulle -> pinefull", function() {deepEqual( Stem("pinefulle"), "pinefull");});
test("pinne -> pinn", function() {deepEqual( Stem("pinne"), "pinn");});
test("pinsler -> pinsl", function() {deepEqual( Stem("pinsler"), "pinsl");});
test("pipende -> pip", function() {deepEqual( Stem("pipende"), "pip");});
test("piper -> pip", function() {deepEqual( Stem("piper"), "pip");});
test("pipete -> pipet", function() {deepEqual( Stem("pipete"), "pipet");});
test("pirret -> pirr", function() {deepEqual( Stem("pirret"), "pirr");});
test("pisker -> pisk", function() {deepEqual( Stem("pisker"), "pisk");});
test("pisser -> piss", function() {deepEqual( Stem("pisser"), "piss");});
test("pjokk -> pjokk", function() {deepEqual( Stem("pjokk"), "pjokk");});
test("pjusket -> pjusk", function() {deepEqual( Stem("pjusket"), "pjusk");});
test("pjuskete -> pjusket", function() {deepEqual( Stem("pjuskete"), "pjusket");});
test("pkt -> pkt", function() {deepEqual( Stem("pkt"), "pkt");});
test("plage -> plag", function() {deepEqual( Stem("plage"), "plag");});
test("plager -> plag", function() {deepEqual( Stem("plager"), "plag");});
test("plaget -> plag", function() {deepEqual( Stem("plaget"), "plag");});
test("plagsam -> plagsam", function() {deepEqual( Stem("plagsam"), "plagsam");});
test("plan -> plan", function() {deepEqual( Stem("plan"), "plan");});
test("planane -> plan", function() {deepEqual( Stem("planane"), "plan");});
test("planar -> plan", function() {deepEqual( Stem("planar"), "plan");});
test("planarbeid -> planarbeid", function() {deepEqual( Stem("planarbeid"), "planarbeid");});
test("planarbeider -> planarbeid", function() {deepEqual( Stem("planarbeider"), "planarbeid");});
test("planarbeidet -> planarbeid", function() {deepEqual( Stem("planarbeidet"), "planarbeid");});
test("plandokument -> plandokument", function() {deepEqual( Stem("plandokument"), "plandokument");});
test("planen -> plan", function() {deepEqual( Stem("planen"), "plan");});
test("planene -> plan", function() {deepEqual( Stem("planene"), "plan");});
test("planens -> plan", function() {deepEqual( Stem("planens"), "plan");});
test("planer -> plan", function() {deepEqual( Stem("planer"), "plan");});
test("planforutsetningene -> planforutsetning", function() {deepEqual( Stem("planforutsetningene"), "planforutsetning");});
test("planforutsetninger -> planforutsetning", function() {deepEqual( Stem("planforutsetninger"), "planforutsetning");});
test("plangrunnlag -> plangrunnlag", function() {deepEqual( Stem("plangrunnlag"), "plangrunnlag");});
test("plangrunnlaget -> plangrunnlag", function() {deepEqual( Stem("plangrunnlaget"), "plangrunnlag");});
test("planhorisont -> planhorisont", function() {deepEqual( Stem("planhorisont"), "planhorisont");});
test("planhorisonter -> planhorisont", function() {deepEqual( Stem("planhorisonter"), "planhorisont");});
test("planlagde -> planlagd", function() {deepEqual( Stem("planlagde"), "planlagd");});
test("planlagt -> planlagt", function() {deepEqual( Stem("planlagt"), "planlagt");});
test("planlagte -> planlagt", function() {deepEqual( Stem("planlagte"), "planlagt");});
test("planlegg -> planlegg", function() {deepEqual( Stem("planlegg"), "planlegg");});
test("planlegge -> planlegg", function() {deepEqual( Stem("planlegge"), "planlegg");});
test("planlegger -> planlegg", function() {deepEqual( Stem("planlegger"), "planlegg");});
test("planlegges -> planlegg", function() {deepEqual( Stem("planlegges"), "planlegg");});
test("planlegging -> planlegging", function() {deepEqual( Stem("planlegging"), "planlegging");});
test("planlegginga -> planlegging", function() {deepEqual( Stem("planlegginga"), "planlegging");});
test("planleggingen -> planlegging", function() {deepEqual( Stem("planleggingen"), "planlegging");});
test("planleggings -> planlegging", function() {deepEqual( Stem("planleggings"), "planlegging");});
test("planleggingsstadiet -> planleggingsstadi", function() {deepEqual( Stem("planleggingsstadiet"), "planleggingsstadi");});
test("planleggingsvirksomhet -> planleggingsvirksom", function() {deepEqual( Stem("planleggingsvirksomhet"), "planleggingsvirksom");});
test("planleggje -> planleggj", function() {deepEqual( Stem("planleggje"), "planleggj");});
test("planlovgivningen -> planlovgivning", function() {deepEqual( Stem("planlovgivningen"), "planlovgivning");});
test("planløsninger -> planløsning", function() {deepEqual( Stem("planløsninger"), "planløsning");});
test("planmessig -> planmess", function() {deepEqual( Stem("planmessig"), "planmess");});
test("planoppgave -> planoppgav", function() {deepEqual( Stem("planoppgave"), "planoppgav");});
test("planperioden -> planperiod", function() {deepEqual( Stem("planperioden"), "planperiod");});
test("planprosessen -> planprosess", function() {deepEqual( Stem("planprosessen"), "planprosess");});
test("planrammen -> planramm", function() {deepEqual( Stem("planrammen"), "planramm");});
test("planrammer -> planramm", function() {deepEqual( Stem("planrammer"), "planramm");});
test("plansituasjonen -> plansituasjon", function() {deepEqual( Stem("plansituasjonen"), "plansituasjon");});
test("planstatus -> planstatus", function() {deepEqual( Stem("planstatus"), "planstatus");});
test("planstyresmakt -> planstyresmakt", function() {deepEqual( Stem("planstyresmakt"), "planstyresmakt");});
test("plante -> plant", function() {deepEqual( Stem("plante"), "plant");});
test("planter -> plant", function() {deepEqual( Stem("planter"), "plant");});
test("plantet -> plant", function() {deepEqual( Stem("plantet"), "plant");});
test("plantype -> plantyp", function() {deepEqual( Stem("plantype"), "plantyp");});
test("planvedtak -> planvedtak", function() {deepEqual( Stem("planvedtak"), "planvedtak");});
test("plar -> plar", function() {deepEqual( Stem("plar"), "plar");});
test("plaske -> plask", function() {deepEqual( Stem("plaske"), "plask");});
test("plasker -> plask", function() {deepEqual( Stem("plasker"), "plask");});
test("plass -> plass", function() {deepEqual( Stem("plass"), "plass");});
test("plassen -> plass", function() {deepEqual( Stem("plassen"), "plass");});
test("plasserast -> plasser", function() {deepEqual( Stem("plasserast"), "plasser");});
test("plassere -> plasser", function() {deepEqual( Stem("plassere"), "plasser");});
test("plasserer -> plasser", function() {deepEqual( Stem("plasserer"), "plasser");});
test("plasseres -> plasser", function() {deepEqual( Stem("plasseres"), "plasser");});
test("plassering -> plassering", function() {deepEqual( Stem("plassering"), "plassering");});
test("plasseringa -> plassering", function() {deepEqual( Stem("plasseringa"), "plassering");});
test("plasseringar -> plassering", function() {deepEqual( Stem("plasseringar"), "plassering");});
test("plasseringen -> plassering", function() {deepEqual( Stem("plasseringen"), "plassering");});
test("plasseringer -> plassering", function() {deepEqual( Stem("plasseringer"), "plassering");});
test("plasseringsalternativer -> plasseringsalternativ", function() {deepEqual( Stem("plasseringsalternativer"), "plasseringsalternativ");});
test("plasseringsformene -> plasseringsform", function() {deepEqual( Stem("plasseringsformene"), "plasseringsform");});
test("plasseringsformer -> plasseringsform", function() {deepEqual( Stem("plasseringsformer"), "plasseringsform");});
test("plassert -> plasser", function() {deepEqual( Stem("plassert"), "plasser");});
test("plasserte -> plasser", function() {deepEqual( Stem("plasserte"), "plasser");});
test("plattform -> plattform", function() {deepEqual( Stem("plattform"), "plattform");});
test("pleie -> pleie", function() {deepEqual( Stem("pleie"), "pleie");});
test("pleier -> pleier", function() {deepEqual( Stem("pleier"), "pleier");});
test("plenumsmøter -> plenumsmøt", function() {deepEqual( Stem("plenumsmøter"), "plenumsmøt");});
test("plikt -> plikt", function() {deepEqual( Stem("plikt"), "plikt");});
test("plikta -> plikt", function() {deepEqual( Stem("plikta"), "plikt");});
test("pliktbrot -> pliktbrot", function() {deepEqual( Stem("pliktbrot"), "pliktbrot");});
test("plikten -> plikt", function() {deepEqual( Stem("plikten"), "plikt");});
test("pliktene -> plikt", function() {deepEqual( Stem("pliktene"), "plikt");});
test("plikter -> plikt", function() {deepEqual( Stem("plikter"), "plikt");});
test("pliktet -> plikt", function() {deepEqual( Stem("pliktet"), "plikt");});
test("pliktig -> plikt", function() {deepEqual( Stem("pliktig"), "plikt");});
test("pliktige -> plikt", function() {deepEqual( Stem("pliktige"), "plikt");});
test("plm -> plm", function() {deepEqual( Stem("plm"), "plm");});
test("plogen -> plog", function() {deepEqual( Stem("plogen"), "plog");});
test("pludder -> pludd", function() {deepEqual( Stem("pludder"), "pludd");});
test("plukke -> plukk", function() {deepEqual( Stem("plukke"), "plukk");});
test("plukket -> plukk", function() {deepEqual( Stem("plukket"), "plukk");});
test("pluss -> pluss", function() {deepEqual( Stem("pluss"), "pluss");});
test("plutselig -> pluts", function() {deepEqual( Stem("plutselig"), "pluts");});
test("plystrer -> plystr", function() {deepEqual( Stem("plystrer"), "plystr");});
test("pløyer -> pløyer", function() {deepEqual( Stem("pløyer"), "pløyer");});
test("poeng -> poeng", function() {deepEqual( Stem("poeng"), "poeng");});
test("poenget -> poeng", function() {deepEqual( Stem("poenget"), "poeng");});
test("poenghistorie -> poenghistori", function() {deepEqual( Stem("poenghistorie"), "poenghistori");});
test("poetisk -> poetisk", function() {deepEqual( Stem("poetisk"), "poetisk");});
test("poetiske -> poetisk", function() {deepEqual( Stem("poetiske"), "poetisk");});
test("polisen -> polis", function() {deepEqual( Stem("polisen"), "polis");});
test("politikk -> politikk", function() {deepEqual( Stem("politikk"), "politikk");});
test("politikken -> politikk", function() {deepEqual( Stem("politikken"), "politikk");});
test("politikkområde -> politikkområd", function() {deepEqual( Stem("politikkområde"), "politikkområd");});
test("politikkområder -> politikkområd", function() {deepEqual( Stem("politikkområder"), "politikkområd");});
test("politisk -> politisk", function() {deepEqual( Stem("politisk"), "politisk");});
test("politiske -> politisk", function() {deepEqual( Stem("politiske"), "politisk");});
test("porsgrunn -> porsgrunn", function() {deepEqual( Stem("porsgrunn"), "porsgrunn");});
test("port -> port", function() {deepEqual( Stem("port"), "port");});
test("portefølje -> portefølj", function() {deepEqual( Stem("portefølje"), "portefølj");});
test("porteføljen -> portefølj", function() {deepEqual( Stem("porteføljen"), "portefølj");});
test("porteføljer -> portefølj", function() {deepEqual( Stem("porteføljer"), "portefølj");});
test("porteføljesammensetningen -> porteføljesammensetning", function() {deepEqual( Stem("porteføljesammensetningen"), "porteføljesammensetning");});
test("porten -> port", function() {deepEqual( Stem("porten"), "port");});
test("portnerservice -> portnerservic", function() {deepEqual( Stem("portnerservice"), "portnerservic");});
test("ports -> port", function() {deepEqual( Stem("ports"), "port");});
test("portstolper -> portstolp", function() {deepEqual( Stem("portstolper"), "portstolp");});
test("portvakt -> portvakt", function() {deepEqual( Stem("portvakt"), "portvakt");});
test("posisjon -> posisjon", function() {deepEqual( Stem("posisjon"), "posisjon");});
test("posisjonar -> posisjon", function() {deepEqual( Stem("posisjonar"), "posisjon");});
test("posisjonen -> posisjon", function() {deepEqual( Stem("posisjonen"), "posisjon");});
test("posisjonere -> posisjoner", function() {deepEqual( Stem("posisjonere"), "posisjoner");});
test("posisjoneres -> posisjoner", function() {deepEqual( Stem("posisjoneres"), "posisjoner");});
test("posisjonering -> posisjonering", function() {deepEqual( Stem("posisjonering"), "posisjonering");});
test("posisjonert -> posisjoner", function() {deepEqual( Stem("posisjonert"), "posisjoner");});
test("positiv -> positiv", function() {deepEqual( Stem("positiv"), "positiv");});
test("positive -> positiv", function() {deepEqual( Stem("positive"), "positiv");});
test("positivt -> positiv", function() {deepEqual( Stem("positivt"), "positiv");});
test("post -> post", function() {deepEqual( Stem("post"), "post");});
test("postadresse -> postadress", function() {deepEqual( Stem("postadresse"), "postadress");});
test("postkassene -> postkass", function() {deepEqual( Stem("postkassene"), "postkass");});
test("postselskaper -> postselskap", function() {deepEqual( Stem("postselskaper"), "postselskap");});
test("poten -> pot", function() {deepEqual( Stem("poten"), "pot");});
test("potensial -> potensial", function() {deepEqual( Stem("potensial"), "potensial");});
test("potensiale -> potensial", function() {deepEqual( Stem("potensiale"), "potensial");});
test("potensialene -> potensial", function() {deepEqual( Stem("potensialene"), "potensial");});
test("potensialet -> potensial", function() {deepEqual( Stem("potensialet"), "potensial");});
test("potensiell -> potensiell", function() {deepEqual( Stem("potensiell"), "potensiell");});
test("potensielle -> potensiell", function() {deepEqual( Stem("potensielle"), "potensiell");});
test("potensielt -> potensielt", function() {deepEqual( Stem("potensielt"), "potensielt");});
test("pr -> pr", function() {deepEqual( Stem("pr"), "pr");});
test("praksis -> praksis", function() {deepEqual( Stem("praksis"), "praksis");});
test("praksisen -> praksis", function() {deepEqual( Stem("praksisen"), "praksis");});
test("praksisens -> praksis", function() {deepEqual( Stem("praksisens"), "praksis");});
test("praktiserbart -> praktiserbart", function() {deepEqual( Stem("praktiserbart"), "praktiserbart");});
test("praktiserer -> praktiser", function() {deepEqual( Stem("praktiserer"), "praktiser");});
test("praktisering -> praktisering", function() {deepEqual( Stem("praktisering"), "praktisering");});
test("praktiseringa -> praktisering", function() {deepEqual( Stem("praktiseringa"), "praktisering");});
test("praktiseringen -> praktisering", function() {deepEqual( Stem("praktiseringen"), "praktisering");});
test("praktisert -> praktiser", function() {deepEqual( Stem("praktisert"), "praktiser");});
test("praktisk -> praktisk", function() {deepEqual( Stem("praktisk"), "praktisk");});
test("praktiske -> praktisk", function() {deepEqual( Stem("praktiske"), "praktisk");});
test("prammen -> pramm", function() {deepEqual( Stem("prammen"), "pramm");});
test("prat -> prat", function() {deepEqual( Stem("prat"), "prat");});
test("preferanser -> preferans", function() {deepEqual( Stem("preferanser"), "preferans");});
test("prefereres -> preferer", function() {deepEqual( Stem("prefereres"), "preferer");});
test("preg -> preg", function() {deepEqual( Stem("preg"), "preg");});
test("prega -> preg", function() {deepEqual( Stem("prega"), "preg");});
test("preges -> preg", function() {deepEqual( Stem("preges"), "preg");});
test("preget -> preg", function() {deepEqual( Stem("preget"), "preg");});
test("preklusiv -> preklusiv", function() {deepEqual( Stem("preklusiv"), "preklusiv");});
test("preklusivt -> preklusiv", function() {deepEqual( Stem("preklusivt"), "preklusiv");});
test("prekær -> prekær", function() {deepEqual( Stem("prekær"), "prekær");});
test("prekære -> prekær", function() {deepEqual( Stem("prekære"), "prekær");});
test("preller -> prell", function() {deepEqual( Stem("preller"), "prell");});
test("premiar -> premi", function() {deepEqual( Stem("premiar"), "premi");});
test("premie -> premi", function() {deepEqual( Stem("premie"), "premi");});
test("premiebeløp -> premiebeløp", function() {deepEqual( Stem("premiebeløp"), "premiebeløp");});
test("premiebeløpene -> premiebeløp", function() {deepEqual( Stem("premiebeløpene"), "premiebeløp");});
test("premieberegning -> premieberegning", function() {deepEqual( Stem("premieberegning"), "premieberegning");});
test("premieberegningen -> premieberegning", function() {deepEqual( Stem("premieberegningen"), "premieberegning");});
test("premiebetaling -> premiebetaling", function() {deepEqual( Stem("premiebetaling"), "premiebetaling");});
test("premiebetalingen -> premiebetaling", function() {deepEqual( Stem("premiebetalingen"), "premiebetaling");});
test("premiebetalinger -> premiebetaling", function() {deepEqual( Stem("premiebetalinger"), "premiebetaling");});
test("premiebetalingsperiodens -> premiebetalingsperiod", function() {deepEqual( Stem("premiebetalingsperiodens"), "premiebetalingsperiod");});
test("premiebetalingstiden -> premiebetalingstid", function() {deepEqual( Stem("premiebetalingstiden"), "premiebetalingstid");});
test("premiefastsettelsen -> premiefastsett", function() {deepEqual( Stem("premiefastsettelsen"), "premiefastsett");});
test("premiefond -> premiefond", function() {deepEqual( Stem("premiefond"), "premiefond");});
test("premiefondet -> premiefond", function() {deepEqual( Stem("premiefondet"), "premiefond");});
test("premiefondets -> premiefond", function() {deepEqual( Stem("premiefondets"), "premiefond");});
test("premiefondsmidlene -> premiefondsmidl", function() {deepEqual( Stem("premiefondsmidlene"), "premiefondsmidl");});
test("premiefondsmidler -> premiefondsmidl", function() {deepEqual( Stem("premiefondsmidler"), "premiefondsmidl");});
test("premiefritak -> premiefritak", function() {deepEqual( Stem("premiefritak"), "premiefritak");});
test("premiefritaket -> premiefritak", function() {deepEqual( Stem("premiefritaket"), "premiefritak");});
test("premieinnbetaling -> premieinnbetaling", function() {deepEqual( Stem("premieinnbetaling"), "premieinnbetaling");});
test("premieinnbetalingar -> premieinnbetaling", function() {deepEqual( Stem("premieinnbetalingar"), "premieinnbetaling");});
test("premieinnbetalingen -> premieinnbetaling", function() {deepEqual( Stem("premieinnbetalingen"), "premieinnbetaling");});
test("premieinnbetalingene -> premieinnbetaling", function() {deepEqual( Stem("premieinnbetalingene"), "premieinnbetaling");});
test("premieinnbetalinger -> premieinnbetaling", function() {deepEqual( Stem("premieinnbetalinger"), "premieinnbetaling");});
test("premien -> premi", function() {deepEqual( Stem("premien"), "premi");});
test("premiene -> premi", function() {deepEqual( Stem("premiene"), "premi");});
test("premier -> premi", function() {deepEqual( Stem("premier"), "premi");});
test("premiereserve -> premiereserv", function() {deepEqual( Stem("premiereserve"), "premiereserv");});
test("premiereserven -> premiereserv", function() {deepEqual( Stem("premiereserven"), "premiereserv");});
test("premieskatteloven -> premieskatt", function() {deepEqual( Stem("premieskatteloven"), "premieskatt");});
test("premieskatten -> premieskatt", function() {deepEqual( Stem("premieskatten"), "premieskatt");});
test("premietariffene -> premietariff", function() {deepEqual( Stem("premietariffene"), "premietariff");});
test("premieøkningene -> premieøkning", function() {deepEqual( Stem("premieøkningene"), "premieøkning");});
test("premiss -> premiss", function() {deepEqual( Stem("premiss"), "premiss");});
test("premissane -> premiss", function() {deepEqual( Stem("premissane"), "premiss");});
test("premissar -> premiss", function() {deepEqual( Stem("premissar"), "premiss");});
test("premissene -> premiss", function() {deepEqual( Stem("premissene"), "premiss");});
test("premisser -> premiss", function() {deepEqual( Stem("premisser"), "premiss");});
test("presentasjon -> presentasjon", function() {deepEqual( Stem("presentasjon"), "presentasjon");});
test("presentasjonen -> presentasjon", function() {deepEqual( Stem("presentasjonen"), "presentasjon");});
test("presentere -> presenter", function() {deepEqual( Stem("presentere"), "presenter");});
test("presenterer -> presenter", function() {deepEqual( Stem("presenterer"), "presenter");});
test("presenteres -> presenter", function() {deepEqual( Stem("presenteres"), "presenter");});
test("presentert -> presenter", function() {deepEqual( Stem("presentert"), "presenter");});
test("presenterte -> presenter", function() {deepEqual( Stem("presenterte"), "presenter");});
test("presisere -> presiser", function() {deepEqual( Stem("presisere"), "presiser");});
test("presiserer -> presiser", function() {deepEqual( Stem("presiserer"), "presiser");});
test("presiseres -> presiser", function() {deepEqual( Stem("presiseres"), "presiser");});
test("presisering -> presisering", function() {deepEqual( Stem("presisering"), "presisering");});
test("presiseringa -> presisering", function() {deepEqual( Stem("presiseringa"), "presisering");});
test("presiseringen -> presisering", function() {deepEqual( Stem("presiseringen"), "presisering");});
test("presisert -> presiser", function() {deepEqual( Stem("presisert"), "presiser");});
test("presisjon -> presisjon", function() {deepEqual( Stem("presisjon"), "presisjon");});
test("presist -> presist", function() {deepEqual( Stem("presist"), "presist");});
test("press -> press", function() {deepEqual( Stem("press"), "press");});
test("pressede -> press", function() {deepEqual( Stem("pressede"), "press");});
test("presser -> press", function() {deepEqual( Stem("presser"), "press");});
test("presserende -> presser", function() {deepEqual( Stem("presserende"), "presser");});
test("presses -> press", function() {deepEqual( Stem("presses"), "press");});
test("presset -> press", function() {deepEqual( Stem("presset"), "press");});
test("presstendenser -> presstendens", function() {deepEqual( Stem("presstendenser"), "presstendens");});
test("presumptivt -> presumptiv", function() {deepEqual( Stem("presumptivt"), "presumptiv");});
test("preventivt -> preventiv", function() {deepEqual( Stem("preventivt"), "preventiv");});
test("previdenza -> previdenz", function() {deepEqual( Stem("previdenza"), "previdenz");});
test("prikk -> prikk", function() {deepEqual( Stem("prikk"), "prikk");});
test("primære -> primær", function() {deepEqual( Stem("primære"), "primær");});
test("primært -> primært", function() {deepEqual( Stem("primært"), "primært");});
test("prinsessen -> prinsess", function() {deepEqual( Stem("prinsessen"), "prinsess");});
test("prinsipalt -> prinsipalt", function() {deepEqual( Stem("prinsipalt"), "prinsipalt");});
test("prinsipiell -> prinsipiell", function() {deepEqual( Stem("prinsipiell"), "prinsipiell");});
test("prinsipielle -> prinsipiell", function() {deepEqual( Stem("prinsipielle"), "prinsipiell");});
test("prinsipielt -> prinsipielt", function() {deepEqual( Stem("prinsipielt"), "prinsipielt");});
test("prinsipp -> prinsipp", function() {deepEqual( Stem("prinsipp"), "prinsipp");});
test("prinsippa -> prinsipp", function() {deepEqual( Stem("prinsippa"), "prinsipp");});
test("prinsippene -> prinsipp", function() {deepEqual( Stem("prinsippene"), "prinsipp");});
test("prinsipper -> prinsipp", function() {deepEqual( Stem("prinsipper"), "prinsipp");});
test("prinsippet -> prinsipp", function() {deepEqual( Stem("prinsippet"), "prinsipp");});
test("prinsippforskjeller -> prinsippforskjell", function() {deepEqual( Stem("prinsippforskjeller"), "prinsippforskjell");});
test("prinsippføresegn -> prinsippføresegn", function() {deepEqual( Stem("prinsippføresegn"), "prinsippføresegn");});
test("priori -> priori", function() {deepEqual( Stem("priori"), "priori");});
test("prioritere -> prioriter", function() {deepEqual( Stem("prioritere"), "prioriter");});
test("prioriteres -> prioriter", function() {deepEqual( Stem("prioriteres"), "prioriter");});
test("prioritering -> prioritering", function() {deepEqual( Stem("prioritering"), "prioritering");});
test("prioriteringer -> prioritering", function() {deepEqual( Stem("prioriteringer"), "prioritering");});
test("prioritert -> prioriter", function() {deepEqual( Stem("prioritert"), "prioriter");});
test("prioriterte -> prioriter", function() {deepEqual( Stem("prioriterte"), "prioriter");});
test("prioritet -> priorit", function() {deepEqual( Stem("prioritet"), "priorit");});
test("prioritetar -> prioritet", function() {deepEqual( Stem("prioritetar"), "prioritet");});
test("prioriteten -> prioritet", function() {deepEqual( Stem("prioriteten"), "prioritet");});
test("prioritetsendringar -> prioritetsendring", function() {deepEqual( Stem("prioritetsendringar"), "prioritetsendring");});
test("prioritetsreglane -> prioritetsregl", function() {deepEqual( Stem("prioritetsreglane"), "prioritetsregl");});
test("prioritetsreglar -> prioritetsregl", function() {deepEqual( Stem("prioritetsreglar"), "prioritetsregl");});
test("prioritetsviking -> prioritetsviking", function() {deepEqual( Stem("prioritetsviking"), "prioritetsviking");});
test("pris -> pris", function() {deepEqual( Stem("pris"), "pris");});
test("prisane -> pris", function() {deepEqual( Stem("prisane"), "pris");});
test("prisar -> pris", function() {deepEqual( Stem("prisar"), "pris");});
test("prisavslag -> prisavslag", function() {deepEqual( Stem("prisavslag"), "prisavslag");});
test("prisdanninga -> prisdanning", function() {deepEqual( Stem("prisdanninga"), "prisdanning");});
test("prisen -> pris", function() {deepEqual( Stem("prisen"), "pris");});
test("prisene -> pris", function() {deepEqual( Stem("prisene"), "pris");});
test("priser -> pris", function() {deepEqual( Stem("priser"), "pris");});
test("prises -> pris", function() {deepEqual( Stem("prises"), "pris");});
test("priset -> pris", function() {deepEqual( Stem("priset"), "pris");});
test("prisfastsetjing -> prisfastsetjing", function() {deepEqual( Stem("prisfastsetjing"), "prisfastsetjing");});
test("prising -> prising", function() {deepEqual( Stem("prising"), "prising");});
test("prisingen -> prising", function() {deepEqual( Stem("prisingen"), "prising");});
test("prisklasse -> prisklass", function() {deepEqual( Stem("prisklasse"), "prisklass");});
test("prisklausular -> prisklausul", function() {deepEqual( Stem("prisklausular"), "prisklausul");});
test("priskonkurranse -> priskonkurrans", function() {deepEqual( Stem("priskonkurranse"), "priskonkurrans");});
test("prisnivå -> prisnivå", function() {deepEqual( Stem("prisnivå"), "prisnivå");});
test("prisnivået -> prisnivå", function() {deepEqual( Stem("prisnivået"), "prisnivå");});
test("prisreglane -> prisregl", function() {deepEqual( Stem("prisreglane"), "prisregl");});
test("prisreglar -> prisregl", function() {deepEqual( Stem("prisreglar"), "prisregl");});
test("prisregulering -> prisregulering", function() {deepEqual( Stem("prisregulering"), "prisregulering");});
test("prisreguleringa -> prisregulering", function() {deepEqual( Stem("prisreguleringa"), "prisregulering");});
test("prisregulert -> prisreguler", function() {deepEqual( Stem("prisregulert"), "prisreguler");});
test("prissetjinga -> prissetjing", function() {deepEqual( Stem("prissetjinga"), "prissetjing");});
test("prissetting -> prissetting", function() {deepEqual( Stem("prissetting"), "prissetting");});
test("prisskilnader -> prisskilnad", function() {deepEqual( Stem("prisskilnader"), "prisskilnad");});
test("prisstiging -> prisstiging", function() {deepEqual( Stem("prisstiging"), "prisstiging");});
test("prisstigning -> prisstigning", function() {deepEqual( Stem("prisstigning"), "prisstigning");});
test("prisstigningen -> prisstigning", function() {deepEqual( Stem("prisstigningen"), "prisstigning");});
test("prisvilkår -> prisvilkår", function() {deepEqual( Stem("prisvilkår"), "prisvilkår");});
test("privat -> privat", function() {deepEqual( Stem("privat"), "privat");});
test("privatdisponibel -> privatdisponibel", function() {deepEqual( Stem("privatdisponibel"), "privatdisponibel");});
test("private -> privat", function() {deepEqual( Stem("private"), "privat");});
test("privatrett -> privatrett", function() {deepEqual( Stem("privatrett"), "privatrett");});
test("privatrettslege -> privatretts", function() {deepEqual( Stem("privatrettslege"), "privatretts");});
test("privatrettslig -> privatretts", function() {deepEqual( Stem("privatrettslig"), "privatretts");});
test("problem -> problem", function() {deepEqual( Stem("problem"), "problem");});
test("problematikken -> problematikk", function() {deepEqual( Stem("problematikken"), "problematikk");});
test("problematisk -> problematisk", function() {deepEqual( Stem("problematisk"), "problematisk");});
test("problemene -> problem", function() {deepEqual( Stem("problemene"), "problem");});
test("problemer -> problem", function() {deepEqual( Stem("problemer"), "problem");});
test("problemet -> problem", function() {deepEqual( Stem("problemet"), "problem");});
test("problemstilling -> problemstilling", function() {deepEqual( Stem("problemstilling"), "problemstilling");});
test("problemstillinga -> problemstilling", function() {deepEqual( Stem("problemstillinga"), "problemstilling");});
test("problemstillingane -> problemstilling", function() {deepEqual( Stem("problemstillingane"), "problemstilling");});
test("problemstillingar -> problemstilling", function() {deepEqual( Stem("problemstillingar"), "problemstilling");});
test("problemstillingen -> problemstilling", function() {deepEqual( Stem("problemstillingen"), "problemstilling");});
test("problemstillingene -> problemstilling", function() {deepEqual( Stem("problemstillingene"), "problemstilling");});
test("problemstillinger -> problemstilling", function() {deepEqual( Stem("problemstillinger"), "problemstilling");});
test("prod -> prod", function() {deepEqual( Stem("prod"), "prod");});
test("produksjon -> produksjon", function() {deepEqual( Stem("produksjon"), "produksjon");});
test("produksjonen -> produksjon", function() {deepEqual( Stem("produksjonen"), "produksjon");});
test("produksjons -> produksjon", function() {deepEqual( Stem("produksjons"), "produksjon");});
test("produksjonsanlegg -> produksjonsanlegg", function() {deepEqual( Stem("produksjonsanlegg"), "produksjonsanlegg");});
test("produksjonsbedrifter -> produksjonsbedrift", function() {deepEqual( Stem("produksjonsbedrifter"), "produksjonsbedrift");});
test("produksjonsgrunnlag -> produksjonsgrunnlag", function() {deepEqual( Stem("produksjonsgrunnlag"), "produksjonsgrunnlag");});
test("produksjonskapasitet -> produksjonskapasit", function() {deepEqual( Stem("produksjonskapasitet"), "produksjonskapasit");});
test("produksjonskostnader -> produksjonskostnad", function() {deepEqual( Stem("produksjonskostnader"), "produksjonskostnad");});
test("produksjonsleddet -> produksjonsledd", function() {deepEqual( Stem("produksjonsleddet"), "produksjonsledd");});
test("produksjonsmønster -> produksjonsmønst", function() {deepEqual( Stem("produksjonsmønster"), "produksjonsmønst");});
test("produksjonsmønstre -> produksjonsmønstr", function() {deepEqual( Stem("produksjonsmønstre"), "produksjonsmønstr");});
test("produksjonsområde -> produksjonsområd", function() {deepEqual( Stem("produksjonsområde"), "produksjonsområd");});
test("produksjonssted -> produksjonssted", function() {deepEqual( Stem("produksjonssted"), "produksjonssted");});
test("produksjonsvirksomhet -> produksjonsvirksom", function() {deepEqual( Stem("produksjonsvirksomhet"), "produksjonsvirksom");});
test("produksjonsvirksomheter -> produksjonsvirksom", function() {deepEqual( Stem("produksjonsvirksomheter"), "produksjonsvirksom");});
test("produkt -> produkt", function() {deepEqual( Stem("produkt"), "produkt");});
test("produkta -> produkt", function() {deepEqual( Stem("produkta"), "produkt");});
test("produkter -> produkt", function() {deepEqual( Stem("produkter"), "produkt");});
test("produktive -> produktiv", function() {deepEqual( Stem("produktive"), "produktiv");});
test("produktkrav -> produktkrav", function() {deepEqual( Stem("produktkrav"), "produktkrav");});
test("produktpris -> produktpris", function() {deepEqual( Stem("produktpris"), "produktpris");});
test("produktspesialisering -> produktspesialisering", function() {deepEqual( Stem("produktspesialisering"), "produktspesialisering");});
test("produsent -> produsent", function() {deepEqual( Stem("produsent"), "produsent");});
test("produsenter -> produsent", function() {deepEqual( Stem("produsenter"), "produsent");});
test("produsentleddet -> produsentledd", function() {deepEqual( Stem("produsentleddet"), "produsentledd");});
test("produsentorganisasjonar -> produsentorganisasjon", function() {deepEqual( Stem("produsentorganisasjonar"), "produsentorganisasjon");});
test("produsere -> produser", function() {deepEqual( Stem("produsere"), "produser");});
test("profesjonalitet -> profesjonalit", function() {deepEqual( Stem("profesjonalitet"), "profesjonalit");});
test("profesjonell -> profesjonell", function() {deepEqual( Stem("profesjonell"), "profesjonell");});
test("profesjonelle -> profesjonell", function() {deepEqual( Stem("profesjonelle"), "profesjonell");});
test("profesjonelt -> profesjonelt", function() {deepEqual( Stem("profesjonelt"), "profesjonelt");});
test("profesjonsvis -> profesjonsvis", function() {deepEqual( Stem("profesjonsvis"), "profesjonsvis");});
test("professor -> professor", function() {deepEqual( Stem("professor"), "professor");});
test("profil -> profil", function() {deepEqual( Stem("profil"), "profil");});
test("profilen -> profil", function() {deepEqual( Stem("profilen"), "profil");});
test("profilene -> profil", function() {deepEqual( Stem("profilene"), "profil");});
test("profiler -> profil", function() {deepEqual( Stem("profiler"), "profil");});
test("proforma -> proform", function() {deepEqual( Stem("proforma"), "proform");});
test("proformaselskaper -> proformaselskap", function() {deepEqual( Stem("proformaselskaper"), "proformaselskap");});
test("prognose -> prognos", function() {deepEqual( Stem("prognose"), "prognos");});
test("prognosealternativet -> prognosealternativ", function() {deepEqual( Stem("prognosealternativet"), "prognosealternativ");});
test("prognosearbeid -> prognosearbeid", function() {deepEqual( Stem("prognosearbeid"), "prognosearbeid");});
test("prognosearbeider -> prognosearbeid", function() {deepEqual( Stem("prognosearbeider"), "prognosearbeid");});
test("prognoseformål -> prognoseformål", function() {deepEqual( Stem("prognoseformål"), "prognoseformål");});
test("prognosemakeren -> prognosemaker", function() {deepEqual( Stem("prognosemakeren"), "prognosemaker");});
test("prognosen -> prognos", function() {deepEqual( Stem("prognosen"), "prognos");});
test("prognosene -> prognos", function() {deepEqual( Stem("prognosene"), "prognos");});
test("prognoser -> prognos", function() {deepEqual( Stem("prognoser"), "prognos");});
test("prognoseresultater -> prognoseresultat", function() {deepEqual( Stem("prognoseresultater"), "prognoseresultat");});
test("programkategorien -> programkategori", function() {deepEqual( Stem("programkategorien"), "programkategori");});
test("programmene -> programm", function() {deepEqual( Stem("programmene"), "programm");});
test("programmer -> programm", function() {deepEqual( Stem("programmer"), "programm");});
test("progressiv -> progressiv", function() {deepEqual( Stem("progressiv"), "progressiv");});
test("proklama -> proklam", function() {deepEqual( Stem("proklama"), "proklam");});
test("prokura -> prokur", function() {deepEqual( Stem("prokura"), "prokur");});
test("prokuralova -> prokura", function() {deepEqual( Stem("prokuralova"), "prokura");});
test("prop -> prop", function() {deepEqual( Stem("prop"), "prop");});
test("property -> property", function() {deepEqual( Stem("property"), "property");});
test("proposisjon -> proposisjon", function() {deepEqual( Stem("proposisjon"), "proposisjon");});
test("proposisjonen -> proposisjon", function() {deepEqual( Stem("proposisjonen"), "proposisjon");});
test("proratarisk -> proratarisk", function() {deepEqual( Stem("proratarisk"), "proratarisk");});
test("prosedyre -> prosedyr", function() {deepEqual( Stem("prosedyre"), "prosedyr");});
test("prosent -> prosent", function() {deepEqual( Stem("prosent"), "prosent");});
test("prosentandel -> prosentandel", function() {deepEqual( Stem("prosentandel"), "prosentandel");});
test("prosentandelen -> prosentandel", function() {deepEqual( Stem("prosentandelen"), "prosentandel");});
test("prosentdel -> prosentdel", function() {deepEqual( Stem("prosentdel"), "prosentdel");});
test("prosenten -> prosent", function() {deepEqual( Stem("prosenten"), "prosent");});
test("prosentene -> prosent", function() {deepEqual( Stem("prosentene"), "prosent");});
test("prosentfordelingene -> prosentfordeling", function() {deepEqual( Stem("prosentfordelingene"), "prosentfordeling");});
test("prosentpoeng -> prosentpoeng", function() {deepEqual( Stem("prosentpoeng"), "prosentpoeng");});
test("prosentsats -> prosentsat", function() {deepEqual( Stem("prosentsats"), "prosentsat");});
test("prosentsatsen -> prosentsats", function() {deepEqual( Stem("prosentsatsen"), "prosentsats");});
test("prosentsatser -> prosentsats", function() {deepEqual( Stem("prosentsatser"), "prosentsats");});
test("prosentvis -> prosentvis", function() {deepEqual( Stem("prosentvis"), "prosentvis");});
test("prosentvise -> prosentvis", function() {deepEqual( Stem("prosentvise"), "prosentvis");});
test("prosess -> prosess", function() {deepEqual( Stem("prosess"), "prosess");});
test("prosessen -> prosess", function() {deepEqual( Stem("prosessen"), "prosess");});
test("prosjekt -> prosjekt", function() {deepEqual( Stem("prosjekt"), "prosjekt");});
test("prosjekta -> prosjekt", function() {deepEqual( Stem("prosjekta"), "prosjekt");});
test("prosjektene -> prosjekt", function() {deepEqual( Stem("prosjektene"), "prosjekt");});
test("prosjekter -> prosjekt", function() {deepEqual( Stem("prosjekter"), "prosjekt");});
test("prosjektet -> prosjekt", function() {deepEqual( Stem("prosjektet"), "prosjekt");});
test("prosjektrapport -> prosjektrapport", function() {deepEqual( Stem("prosjektrapport"), "prosjektrapport");});
test("prospekt -> prospekt", function() {deepEqual( Stem("prospekt"), "prospekt");});
test("protesterer -> protester", function() {deepEqual( Stem("protesterer"), "protester");});
test("protokoll -> protokoll", function() {deepEqual( Stem("protokoll"), "protokoll");});
test("protokollar -> protokoll", function() {deepEqual( Stem("protokollar"), "protokoll");});
test("protokollen -> protokoll", function() {deepEqual( Stem("protokollen"), "protokoll");});
test("protokollføring -> protokollføring", function() {deepEqual( Stem("protokollføring"), "protokollføring");});
test("proveny -> proveny", function() {deepEqual( Stem("proveny"), "proveny");});
test("provenymessige -> provenymess", function() {deepEqual( Stem("provenymessige"), "provenymess");});
test("provenytap -> provenytap", function() {deepEqual( Stem("provenytap"), "provenytap");});
test("provenytapet -> provenytap", function() {deepEqual( Stem("provenytapet"), "provenytap");});
test("provenyvirkningen -> provenyvirkning", function() {deepEqual( Stem("provenyvirkningen"), "provenyvirkning");});
test("provenyvirkningene -> provenyvirkning", function() {deepEqual( Stem("provenyvirkningene"), "provenyvirkning");});
test("provisjon -> provisjon", function() {deepEqual( Stem("provisjon"), "provisjon");});
test("prp -> prp", function() {deepEqual( Stem("prp"), "prp");});
test("prufungsverbande -> prufungsverb", function() {deepEqual( Stem("prufungsverbande"), "prufungsverb");});
test("pruster -> prust", function() {deepEqual( Stem("pruster"), "prust");});
test("prøv -> prøv", function() {deepEqual( Stem("prøv"), "prøv");});
test("prøvast -> prøv", function() {deepEqual( Stem("prøvast"), "prøv");});
test("prøvd -> prøvd", function() {deepEqual( Stem("prøvd"), "prøvd");});
test("prøvde -> prøvd", function() {deepEqual( Stem("prøvde"), "prøvd");});
test("prøve -> prøv", function() {deepEqual( Stem("prøve"), "prøv");});
test("prøver -> prøv", function() {deepEqual( Stem("prøver"), "prøv");});
test("prøves -> prøv", function() {deepEqual( Stem("prøves"), "prøv");});
test("prøving -> prøving", function() {deepEqual( Stem("prøving"), "prøving");});
test("prøvt -> prøvt", function() {deepEqual( Stem("prøvt"), "prøvt");});
test("pst -> pst", function() {deepEqual( Stem("pst"), "pst");});
test("psykisk -> psykisk", function() {deepEqual( Stem("psykisk"), "psykisk");});
test("psykiske -> psykisk", function() {deepEqual( Stem("psykiske"), "psykisk");});
test("pubblici -> pubblici", function() {deepEqual( Stem("pubblici"), "pubblici");});
test("publikum -> publikum", function() {deepEqual( Stem("publikum"), "publikum");});
test("publisert -> publiser", function() {deepEqual( Stem("publisert"), "publiser");});
test("puff -> puff", function() {deepEqual( Stem("puff"), "puff");});
test("pung -> pung", function() {deepEqual( Stem("pung"), "pung");});
test("pungen -> pung", function() {deepEqual( Stem("pungen"), "pung");});
test("punkt -> punkt", function() {deepEqual( Stem("punkt"), "punkt");});
test("punkta -> punkt", function() {deepEqual( Stem("punkta"), "punkt");});
test("punktanslag -> punktanslag", function() {deepEqual( Stem("punktanslag"), "punktanslag");});
test("punktene -> punkt", function() {deepEqual( Stem("punktene"), "punkt");});
test("punkter -> punkt", function() {deepEqual( Stem("punkter"), "punkt");});
test("punktet -> punkt", function() {deepEqual( Stem("punktet"), "punkt");});
test("punktlighet -> punkt", function() {deepEqual( Stem("punktlighet"), "punkt");});
test("punktum -> punktum", function() {deepEqual( Stem("punktum"), "punktum");});
test("punktumet -> punktum", function() {deepEqual( Stem("punktumet"), "punktum");});
test("puslespillbrikker -> puslespillbrikk", function() {deepEqual( Stem("puslespillbrikker"), "puslespillbrikk");});
test("puslete -> puslet", function() {deepEqual( Stem("puslete"), "puslet");});
test("pusling -> pusling", function() {deepEqual( Stem("pusling"), "pusling");});
test("pust -> pust", function() {deepEqual( Stem("pust"), "pust");});
test("puste -> pust", function() {deepEqual( Stem("puste"), "pust");});
test("pusten -> pust", function() {deepEqual( Stem("pusten"), "pust");});
test("puster -> pust", function() {deepEqual( Stem("puster"), "pust");});
test("pyntet -> pynt", function() {deepEqual( Stem("pyntet"), "pynt");});
test("pyse -> pys", function() {deepEqual( Stem("pyse"), "pys");});
test("på -> på", function() {deepEqual( Stem("på"), "på");});
test("påbegynner -> påbegynn", function() {deepEqual( Stem("påbegynner"), "påbegynn");});
test("påbegynnes -> påbegynn", function() {deepEqual( Stem("påbegynnes"), "påbegynn");});
test("påbod -> påbod", function() {deepEqual( Stem("påbod"), "påbod");});
test("påboda -> påbod", function() {deepEqual( Stem("påboda"), "påbod");});
test("påbode -> påbod", function() {deepEqual( Stem("påbode"), "påbod");});
test("påboden -> påbod", function() {deepEqual( Stem("påboden"), "påbod");});
test("påbodet -> påbod", function() {deepEqual( Stem("påbodet"), "påbod");});
test("påbodne -> påbodn", function() {deepEqual( Stem("påbodne"), "påbodn");});
test("påby -> påby", function() {deepEqual( Stem("påby"), "påby");});
test("påbygging -> påbygging", function() {deepEqual( Stem("påbygging"), "påbygging");});
test("påbyggingssaker -> påbyggingssak", function() {deepEqual( Stem("påbyggingssaker"), "påbyggingssak");});
test("pådra -> pådr", function() {deepEqual( Stem("pådra"), "pådr");});
test("pådrage -> pådrag", function() {deepEqual( Stem("pådrage"), "pådrag");});
test("pådregne -> pådregn", function() {deepEqual( Stem("pådregne"), "pådregn");});
test("pådriv -> pådriv", function() {deepEqual( Stem("pådriv"), "pådriv");});
test("påfølgende -> påfølg", function() {deepEqual( Stem("påfølgende"), "påfølg");});
test("påførast -> påfør", function() {deepEqual( Stem("påførast"), "påfør");});
test("påføre -> påfør", function() {deepEqual( Stem("påføre"), "påfør");});
test("påfører -> påfør", function() {deepEqual( Stem("påfører"), "påfør");});
test("påføres -> påfør", function() {deepEqual( Stem("påføres"), "påfør");});
test("påført -> påført", function() {deepEqual( Stem("påført"), "påført");});
test("pågående -> pågå", function() {deepEqual( Stem("pågående"), "pågå");});
test("pågår -> pågår", function() {deepEqual( Stem("pågår"), "pågår");});
test("pågått -> pågått", function() {deepEqual( Stem("pågått"), "pågått");});
test("påhefta -> påheft", function() {deepEqual( Stem("påhefta"), "påheft");});
test("påhefte -> påheft", function() {deepEqual( Stem("påhefte"), "påheft");});
test("påhviler -> påhvil", function() {deepEqual( Stem("påhviler"), "påhvil");});
test("påkjærast -> påkjær", function() {deepEqual( Stem("påkjærast"), "påkjær");});
test("påklages -> påklag", function() {deepEqual( Stem("påklages"), "påklag");});
test("påkommende -> påkomm", function() {deepEqual( Stem("påkommende"), "påkomm");});
test("påkostingar -> påkosting", function() {deepEqual( Stem("påkostingar"), "påkosting");});
test("påkostning -> påkostning", function() {deepEqual( Stem("påkostning"), "påkostning");});
test("påkostninger -> påkostning", function() {deepEqual( Stem("påkostninger"), "påkostning");});
test("påkrav -> påkrav", function() {deepEqual( Stem("påkrav"), "påkrav");});
test("påkrevet -> påkrev", function() {deepEqual( Stem("påkrevet"), "påkrev");});
test("pål -> pål", function() {deepEqual( Stem("pål"), "pål");});
test("påla -> pål", function() {deepEqual( Stem("påla"), "pål");});
test("pålagde -> pålagd", function() {deepEqual( Stem("pålagde"), "pålagd");});
test("pålagt -> pålagt", function() {deepEqual( Stem("pålagt"), "pålagt");});
test("pålagte -> pålagt", function() {deepEqual( Stem("pålagte"), "pålagt");});
test("pålegg -> pålegg", function() {deepEqual( Stem("pålegg"), "pålegg");});
test("pålegga -> pålegg", function() {deepEqual( Stem("pålegga"), "pålegg");});
test("pålegge -> pålegg", function() {deepEqual( Stem("pålegge"), "pålegg");});
test("pålegger -> pålegg", function() {deepEqual( Stem("pålegger"), "pålegg");});
test("pålegges -> pålegg", function() {deepEqual( Stem("pålegges"), "pålegg");});
test("pålegget -> pålegg", function() {deepEqual( Stem("pålegget"), "pålegg");});
test("påleggjast -> påleggj", function() {deepEqual( Stem("påleggjast"), "påleggj");});
test("påleggje -> påleggj", function() {deepEqual( Stem("påleggje"), "påleggj");});
test("påleggskompetanse -> påleggskompetans", function() {deepEqual( Stem("påleggskompetanse"), "påleggskompetans");});
test("pålitelege -> pålit", function() {deepEqual( Stem("pålitelege"), "pålit");});
test("pålitelig -> pålit", function() {deepEqual( Stem("pålitelig"), "pålit");});
test("pålitelige -> pålit", function() {deepEqual( Stem("pålitelige"), "pålit");});
test("pålitelighet -> pålit", function() {deepEqual( Stem("pålitelighet"), "pålit");});
test("pålydande -> pålyd", function() {deepEqual( Stem("pålydande"), "pålyd");});
test("pålydende -> pålyd", function() {deepEqual( Stem("pålydende"), "pålyd");});
test("påløpe -> påløp", function() {deepEqual( Stem("påløpe"), "påløp");});
test("påløper -> påløp", function() {deepEqual( Stem("påløper"), "påløp");});
test("påløpt -> påløpt", function() {deepEqual( Stem("påløpt"), "påløpt");});
test("påløpte -> påløpt", function() {deepEqual( Stem("påløpte"), "påløpt");});
test("påmelde -> påmeld", function() {deepEqual( Stem("påmelde"), "påmeld");});
test("påminning -> påminning", function() {deepEqual( Stem("påminning"), "påminning");});
test("påpeikt -> påpeikt", function() {deepEqual( Stem("påpeikt"), "påpeikt");});
test("påpeke -> påpek", function() {deepEqual( Stem("påpeke"), "påpek");});
test("påpeker -> påpek", function() {deepEqual( Stem("påpeker"), "påpek");});
test("påpekes -> påpek", function() {deepEqual( Stem("påpekes"), "påpek");});
test("påpeking -> påpeking", function() {deepEqual( Stem("påpeking"), "påpeking");});
test("påpekningen -> påpekning", function() {deepEqual( Stem("påpekningen"), "påpekning");});
test("påpekt -> påpekt", function() {deepEqual( Stem("påpekt"), "påpekt");});
test("pårekneleg -> pårekn", function() {deepEqual( Stem("pårekneleg"), "pårekn");});
test("påse -> pås", function() {deepEqual( Stem("påse"), "pås");});
test("påslag -> påslag", function() {deepEqual( Stem("påslag"), "påslag");});
test("påstand -> påstand", function() {deepEqual( Stem("påstand"), "påstand");});
test("påstått -> påstått", function() {deepEqual( Stem("påstått"), "påstått");});
test("påta -> påt", function() {deepEqual( Stem("påta"), "påt");});
test("påtale -> påtal", function() {deepEqual( Stem("påtale"), "påtal");});
test("påtar -> påt", function() {deepEqual( Stem("påtar"), "påt");});
test("påtatt -> påtatt", function() {deepEqual( Stem("påtatt"), "påtatt");});
test("påtegning -> påtegning", function() {deepEqual( Stem("påtegning"), "påtegning");});
test("påtrengende -> påtreng", function() {deepEqual( Stem("påtrengende"), "påtreng");});
test("påvente -> påvent", function() {deepEqual( Stem("påvente"), "påvent");});
test("påverka -> påverk", function() {deepEqual( Stem("påverka"), "påverk");});
test("påverkar -> påverk", function() {deepEqual( Stem("påverkar"), "påverk");});
test("påverke -> påverk", function() {deepEqual( Stem("påverke"), "påverk");});
test("påverknaden -> påverknad", function() {deepEqual( Stem("påverknaden"), "påverknad");});
test("påvirke -> påvirk", function() {deepEqual( Stem("påvirke"), "påvirk");});
test("påvirker -> påvirk", function() {deepEqual( Stem("påvirker"), "påvirk");});
test("påvirkes -> påvirk", function() {deepEqual( Stem("påvirkes"), "påvirk");});
test("påvirket -> påvirk", function() {deepEqual( Stem("påvirket"), "påvirk");});
test("påvirkning -> påvirkning", function() {deepEqual( Stem("påvirkning"), "påvirkning");});
test("påvisast -> påvis", function() {deepEqual( Stem("påvisast"), "påvis");});
test("påvise -> påvis", function() {deepEqual( Stem("påvise"), "påvis");});
test("påvist -> påvist", function() {deepEqual( Stem("påvist"), "påvist");});
test("pøse -> pøs", function() {deepEqual( Stem("pøse"), "pøs");});
test("quorum -> quorum", function() {deepEqual( Stem("quorum"), "quorum");});
test("r -> r", function() {deepEqual( Stem("r"), "r");});
test("rabalder -> rabald", function() {deepEqual( Stem("rabalder"), "rabald");});
test("rabattar -> rabatt", function() {deepEqual( Stem("rabattar"), "rabatt");});
test("rabattavtalar -> rabattavtal", function() {deepEqual( Stem("rabattavtalar"), "rabattavtal");});
test("rabatten -> rabatt", function() {deepEqual( Stem("rabatten"), "rabatt");});
test("rabattordningar -> rabattordning", function() {deepEqual( Stem("rabattordningar"), "rabattordning");});
test("rad -> rad", function() {deepEqual( Stem("rad"), "rad");});
test("radar -> rad", function() {deepEqual( Stem("radar"), "rad");});
test("radardekning -> radardekning", function() {deepEqual( Stem("radardekning"), "radardekning");});
test("radarovervåkningen -> radarovervåkning", function() {deepEqual( Stem("radarovervåkningen"), "radarovervåkning");});
test("radarseilas -> radarseil", function() {deepEqual( Stem("radarseilas"), "radarseil");});
test("radarutrustning -> radarutrustning", function() {deepEqual( Stem("radarutrustning"), "radarutrustning");});
test("raden -> rad", function() {deepEqual( Stem("raden"), "rad");});
test("rader -> rad", function() {deepEqual( Stem("rader"), "rad");});
test("radikalt -> radikalt", function() {deepEqual( Stem("radikalt"), "radikalt");});
test("radio -> radio", function() {deepEqual( Stem("radio"), "radio");});
test("radiokommunikasjon -> radiokommunikasjon", function() {deepEqual( Stem("radiokommunikasjon"), "radiokommunikasjon");});
test("ragnarok -> ragnarok", function() {deepEqual( Stem("ragnarok"), "ragnarok");});
test("rail -> rail", function() {deepEqual( Stem("rail"), "rail");});
test("rake -> rak", function() {deepEqual( Stem("rake"), "rak");});
test("raker -> rak", function() {deepEqual( Stem("raker"), "rak");});
test("rakk -> rakk", function() {deepEqual( Stem("rakk"), "rakk");});
test("rakkestadsvingen -> rakkestadsving", function() {deepEqual( Stem("rakkestadsvingen"), "rakkestadsving");});
test("ramlende -> raml", function() {deepEqual( Stem("ramlende"), "raml");});
test("ramler -> raml", function() {deepEqual( Stem("ramler"), "raml");});
test("ramma -> ramm", function() {deepEqual( Stem("ramma"), "ramm");});
test("ramme -> ramm", function() {deepEqual( Stem("ramme"), "ramm");});
test("rammeavtale -> rammeavtal", function() {deepEqual( Stem("rammeavtale"), "rammeavtal");});
test("rammebetingelsene -> rammebeting", function() {deepEqual( Stem("rammebetingelsene"), "rammebeting");});
test("rammebetingelser -> rammebeting", function() {deepEqual( Stem("rammebetingelser"), "rammebeting");});
test("rammelovgiving -> rammelovgiving", function() {deepEqual( Stem("rammelovgiving"), "rammelovgiving");});
test("rammen -> ramm", function() {deepEqual( Stem("rammen"), "ramm");});
test("rammene -> ramm", function() {deepEqual( Stem("rammene"), "ramm");});
test("rammeprogram -> rammeprogram", function() {deepEqual( Stem("rammeprogram"), "rammeprogram");});
test("rammeprogrammet -> rammeprogramm", function() {deepEqual( Stem("rammeprogrammet"), "rammeprogramm");});
test("rammer -> ramm", function() {deepEqual( Stem("rammer"), "ramm");});
test("rammes -> ramm", function() {deepEqual( Stem("rammes"), "ramm");});
test("rammet -> ramm", function() {deepEqual( Stem("rammet"), "ramm");});
test("rammeverk -> rammeverk", function() {deepEqual( Stem("rammeverk"), "rammeverk");});
test("rammeverket -> rammeverk", function() {deepEqual( Stem("rammeverket"), "rammeverk");});
test("rammevilkår -> rammevilkår", function() {deepEqual( Stem("rammevilkår"), "rammevilkår");});
test("rammevilkåra -> rammevilkår", function() {deepEqual( Stem("rammevilkåra"), "rammevilkår");});
test("ramper -> ramp", function() {deepEqual( Stem("ramper"), "ramp");});
test("ramse -> rams", function() {deepEqual( Stem("ramse"), "rams");});
test("ramser -> rams", function() {deepEqual( Stem("ramser"), "rams");});
test("randbebyggelsen -> randbebygg", function() {deepEqual( Stem("randbebyggelsen"), "randbebygg");});
test("randi -> randi", function() {deepEqual( Stem("randi"), "randi");});
test("randsonen -> randson", function() {deepEqual( Stem("randsonen"), "randson");});
test("range -> rang", function() {deepEqual( Stem("range"), "rang");});
test("rangeres -> ranger", function() {deepEqual( Stem("rangeres"), "ranger");});
test("rangering -> rangering", function() {deepEqual( Stem("rangering"), "rangering");});
test("rangt -> rangt", function() {deepEqual( Stem("rangt"), "rangt");});
test("rank -> rank", function() {deepEqual( Stem("rank"), "rank");});
test("rant -> rant", function() {deepEqual( Stem("rant"), "rant");});
test("raper -> rap", function() {deepEqual( Stem("raper"), "rap");});
test("rappkjeftet -> rappkjeft", function() {deepEqual( Stem("rappkjeftet"), "rappkjeft");});
test("rapport -> rapport", function() {deepEqual( Stem("rapport"), "rapport");});
test("rapporten -> rapport", function() {deepEqual( Stem("rapporten"), "rapport");});
test("rapportering -> rapportering", function() {deepEqual( Stem("rapportering"), "rapportering");});
test("rar -> rar", function() {deepEqual( Stem("rar"), "rar");});
test("rart -> rart", function() {deepEqual( Stem("rart"), "rart");});
test("ras -> ras", function() {deepEqual( Stem("ras"), "ras");});
test("rasa -> ras", function() {deepEqual( Stem("rasa"), "ras");});
test("rase -> ras", function() {deepEqual( Stem("rase"), "ras");});
test("rasende -> ras", function() {deepEqual( Stem("rasende"), "ras");});
test("raser -> ras", function() {deepEqual( Stem("raser"), "ras");});
test("raseri -> raseri", function() {deepEqual( Stem("raseri"), "raseri");});
test("raset -> ras", function() {deepEqual( Stem("raset"), "ras");});
test("rasjonaliseringsgevinster -> rasjonaliseringsgevinst", function() {deepEqual( Stem("rasjonaliseringsgevinster"), "rasjonaliseringsgevinst");});
test("rasjonaliseringsvinstar -> rasjonaliseringsvinst", function() {deepEqual( Stem("rasjonaliseringsvinstar"), "rasjonaliseringsvinst");});
test("rasjonell -> rasjonell", function() {deepEqual( Stem("rasjonell"), "rasjonell");});
test("rasjonelle -> rasjonell", function() {deepEqual( Stem("rasjonelle"), "rasjonell");});
test("rasjonelt -> rasjonelt", function() {deepEqual( Stem("rasjonelt"), "rasjonelt");});
test("rask -> rask", function() {deepEqual( Stem("rask"), "rask");});
test("raske -> rask", function() {deepEqual( Stem("raske"), "rask");});
test("raskere -> rasker", function() {deepEqual( Stem("raskere"), "rasker");});
test("raskt -> raskt", function() {deepEqual( Stem("raskt"), "raskt");});
test("rastløs -> rastløs", function() {deepEqual( Stem("rastløs"), "rastløs");});
test("rastløse -> rastløs", function() {deepEqual( Stem("rastløse"), "rastløs");});
test("rastløsheten -> rastløs", function() {deepEqual( Stem("rastløsheten"), "rastløs");});
test("ratatosk -> ratatosk", function() {deepEqual( Stem("ratatosk"), "ratatosk");});
test("rate -> rat", function() {deepEqual( Stem("rate"), "rat");});
test("rateforsikring -> rateforsikring", function() {deepEqual( Stem("rateforsikring"), "rateforsikring");});
test("rateforsikringer -> rateforsikring", function() {deepEqual( Stem("rateforsikringer"), "rateforsikring");});
test("rateoppsparing -> rateoppsparing", function() {deepEqual( Stem("rateoppsparing"), "rateoppsparing");});
test("rateordningene -> rateordning", function() {deepEqual( Stem("rateordningene"), "rateordning");});
test("ratten -> ratt", function() {deepEqual( Stem("ratten"), "ratt");});
test("raudung -> raudung", function() {deepEqual( Stem("raudung"), "raudung");});
test("raus -> raus", function() {deepEqual( Stem("raus"), "raus");});
test("ravneguden -> ravnegud", function() {deepEqual( Stem("ravneguden"), "ravnegud");});
test("ravnene -> ravn", function() {deepEqual( Stem("ravnene"), "ravn");});
test("ravner -> ravn", function() {deepEqual( Stem("ravner"), "ravn");});
test("rdir -> rdir", function() {deepEqual( Stem("rdir"), "rdir");});
test("reaksjoner -> reaksjon", function() {deepEqual( Stem("reaksjoner"), "reaksjon");});
test("realavkastning -> realavkastning", function() {deepEqual( Stem("realavkastning"), "realavkastning");});
test("realavkastnings -> realavkastning", function() {deepEqual( Stem("realavkastnings"), "realavkastning");});
test("realindeksert -> realindekser", function() {deepEqual( Stem("realindeksert"), "realindekser");});
test("realisasjon -> realisasjon", function() {deepEqual( Stem("realisasjon"), "realisasjon");});
test("realisasjonen -> realisasjon", function() {deepEqual( Stem("realisasjonen"), "realisasjon");});
test("realisere -> realiser", function() {deepEqual( Stem("realisere"), "realiser");});
test("realiserer -> realiser", function() {deepEqual( Stem("realiserer"), "realiser");});
test("realiseres -> realiser", function() {deepEqual( Stem("realiseres"), "realiser");});
test("realisering -> realisering", function() {deepEqual( Stem("realisering"), "realisering");});
test("realisert -> realiser", function() {deepEqual( Stem("realisert"), "realiser");});
test("realiserte -> realiser", function() {deepEqual( Stem("realiserte"), "realiser");});
test("realismen -> realism", function() {deepEqual( Stem("realismen"), "realism");});
test("realistisk -> realistisk", function() {deepEqual( Stem("realistisk"), "realistisk");});
test("realistiske -> realistisk", function() {deepEqual( Stem("realistiske"), "realistisk");});
test("realitet -> realit", function() {deepEqual( Stem("realitet"), "realit");});
test("realitetane -> realitet", function() {deepEqual( Stem("realitetane"), "realitet");});
test("realiteten -> realitet", function() {deepEqual( Stem("realiteten"), "realitet");});
test("realitetene -> realitet", function() {deepEqual( Stem("realitetene"), "realitet");});
test("realitetsendring -> realitetsendring", function() {deepEqual( Stem("realitetsendring"), "realitetsendring");});
test("realitetsforskjell -> realitetsforskjell", function() {deepEqual( Stem("realitetsforskjell"), "realitetsforskjell");});
test("realitetsspørsmåla -> realitetsspørsmål", function() {deepEqual( Stem("realitetsspørsmåla"), "realitetsspørsmål");});
test("realitetsvotering -> realitetsvotering", function() {deepEqual( Stem("realitetsvotering"), "realitetsvotering");});
test("reallønnsvekst -> reallønnsvekst", function() {deepEqual( Stem("reallønnsvekst"), "reallønnsvekst");});
test("realregister -> realregist", function() {deepEqual( Stem("realregister"), "realregist");});
test("realregistera -> realregister", function() {deepEqual( Stem("realregistera"), "realregister");});
test("realregistrerte -> realregistrer", function() {deepEqual( Stem("realregistrerte"), "realregistrer");});
test("realrenteavgift -> realrenteavgift", function() {deepEqual( Stem("realrenteavgift"), "realrenteavgift");});
test("realrenteavgiften -> realrenteavgift", function() {deepEqual( Stem("realrenteavgiften"), "realrenteavgift");});
test("recent -> recent", function() {deepEqual( Stem("recent"), "recent");});
test("red -> red", function() {deepEqual( Stem("red"), "red");});
test("redd -> redd", function() {deepEqual( Stem("redd"), "redd");});
test("redde -> redd", function() {deepEqual( Stem("redde"), "redd");});
test("redder -> redd", function() {deepEqual( Stem("redder"), "redd");});
test("reddest -> reddest", function() {deepEqual( Stem("reddest"), "reddest");});
test("reddhare -> reddhar", function() {deepEqual( Stem("reddhare"), "reddhar");});
test("rede -> red", function() {deepEqual( Stem("rede"), "red");});
test("redegjort -> redegjort", function() {deepEqual( Stem("redegjort"), "redegjort");});
test("redegjøre -> redegjør", function() {deepEqual( Stem("redegjøre"), "redegjør");});
test("redegjørelse -> redegjør", function() {deepEqual( Stem("redegjørelse"), "redegjør");});
test("redelig -> red", function() {deepEqual( Stem("redelig"), "red");});
test("rederi -> rederi", function() {deepEqual( Stem("rederi"), "rederi");});
test("rederiene -> rederi", function() {deepEqual( Stem("rederiene"), "rederi");});
test("rederienes -> rederi", function() {deepEqual( Stem("rederienes"), "rederi");});
test("rederier -> rederi", function() {deepEqual( Stem("rederier"), "rederi");});
test("rederiforbund -> rederiforbund", function() {deepEqual( Stem("rederiforbund"), "rederiforbund");});
test("rederinæringen -> rederinæring", function() {deepEqual( Stem("rederinæringen"), "rederinæring");});
test("redistribueres -> redistribuer", function() {deepEqual( Stem("redistribueres"), "redistribuer");});
test("redsel -> redsel", function() {deepEqual( Stem("redsel"), "redsel");});
test("redselshjelm -> redselshjelm", function() {deepEqual( Stem("redselshjelm"), "redselshjelm");});
test("redskap -> redskap", function() {deepEqual( Stem("redskap"), "redskap");});
test("redskapene -> redskap", function() {deepEqual( Stem("redskapene"), "redskap");});
test("redskapet -> redskap", function() {deepEqual( Stem("redskapet"), "redskap");});
test("reduksjon -> reduksjon", function() {deepEqual( Stem("reduksjon"), "reduksjon");});
test("reduksjonen -> reduksjon", function() {deepEqual( Stem("reduksjonen"), "reduksjon");});
test("reduserast -> reduser", function() {deepEqual( Stem("reduserast"), "reduser");});
test("redusere -> reduser", function() {deepEqual( Stem("redusere"), "reduser");});
test("reduserer -> reduser", function() {deepEqual( Stem("reduserer"), "reduser");});
test("reduseres -> reduser", function() {deepEqual( Stem("reduseres"), "reduser");});
test("redusering -> redusering", function() {deepEqual( Stem("redusering"), "redusering");});
test("redusert -> reduser", function() {deepEqual( Stem("redusert"), "reduser");});
test("reduserte -> reduser", function() {deepEqual( Stem("reduserte"), "reduser");});
test("reell -> reell", function() {deepEqual( Stem("reell"), "reell");});
test("reelle -> reell", function() {deepEqual( Stem("reelle"), "reell");});
test("reelt -> reelt", function() {deepEqual( Stem("reelt"), "reelt");});
test("referansegruppe -> referansegrupp", function() {deepEqual( Stem("referansegruppe"), "referansegrupp");});
test("referansegruppen -> referansegrupp", function() {deepEqual( Stem("referansegruppen"), "referansegrupp");});
test("referat -> referat", function() {deepEqual( Stem("referat"), "referat");});
test("refererer -> referer", function() {deepEqual( Stem("refererer"), "referer");});
test("refereres -> referer", function() {deepEqual( Stem("refereres"), "referer");});
test("refererte -> referer", function() {deepEqual( Stem("refererte"), "referer");});
test("reflektere -> reflekter", function() {deepEqual( Stem("reflektere"), "reflekter");});
test("reflekterer -> reflekter", function() {deepEqual( Stem("reflekterer"), "reflekter");});
test("reflektert -> reflekter", function() {deepEqual( Stem("reflektert"), "reflekter");});
test("refse -> refs", function() {deepEqual( Stem("refse"), "refs");});
test("refundert -> refunder", function() {deepEqual( Stem("refundert"), "refunder");});
test("refusjon -> refusjon", function() {deepEqual( Stem("refusjon"), "refusjon");});
test("regel -> regel", function() {deepEqual( Stem("regel"), "regel");});
test("regelen -> regel", function() {deepEqual( Stem("regelen"), "regel");});
test("regelendringar -> regelendring", function() {deepEqual( Stem("regelendringar"), "regelendring");});
test("regelene -> regel", function() {deepEqual( Stem("regelene"), "regel");});
test("regelmessige -> regelmess", function() {deepEqual( Stem("regelmessige"), "regelmess");});
test("regelsetta -> regelsett", function() {deepEqual( Stem("regelsetta"), "regelsett");});
test("regelutforming -> regelutforming", function() {deepEqual( Stem("regelutforming"), "regelutforming");});
test("regelverk -> regelverk", function() {deepEqual( Stem("regelverk"), "regelverk");});
test("regelverkene -> regelverk", function() {deepEqual( Stem("regelverkene"), "regelverk");});
test("regelverket -> regelverk", function() {deepEqual( Stem("regelverket"), "regelverk");});
test("regelverkets -> regelverk", function() {deepEqual( Stem("regelverkets"), "regelverk");});
test("regelverksutforming -> regelverksutforming", function() {deepEqual( Stem("regelverksutforming"), "regelverksutforming");});
test("regi -> regi", function() {deepEqual( Stem("regi"), "regi");});
test("regin -> regin", function() {deepEqual( Stem("regin"), "regin");});
test("region -> region", function() {deepEqual( Stem("region"), "region");});
test("regional -> regional", function() {deepEqual( Stem("regional"), "regional");});
test("regionaldepartementet -> regionaldepartement", function() {deepEqual( Stem("regionaldepartementet"), "regionaldepartement");});
test("regionale -> regional", function() {deepEqual( Stem("regionale"), "regional");});
test("regionalplanlegging -> regionalplanlegging", function() {deepEqual( Stem("regionalplanlegging"), "regionalplanlegging");});
test("regionalpolitikken -> regionalpolitikk", function() {deepEqual( Stem("regionalpolitikken"), "regionalpolitikk");});
test("regionalpolitisk -> regionalpolitisk", function() {deepEqual( Stem("regionalpolitisk"), "regionalpolitisk");});
test("regionalpolitiske -> regionalpolitisk", function() {deepEqual( Stem("regionalpolitiske"), "regionalpolitisk");});
test("regionalsjef -> regionalsjef", function() {deepEqual( Stem("regionalsjef"), "regionalsjef");});
test("regionalt -> regionalt", function() {deepEqual( Stem("regionalt"), "regionalt");});
test("regionaløkonomiske -> regionaløkonomisk", function() {deepEqual( Stem("regionaløkonomiske"), "regionaløkonomisk");});
test("regionane -> region", function() {deepEqual( Stem("regionane"), "region");});
test("regionen -> region", function() {deepEqual( Stem("regionen"), "region");});
test("regionene -> region", function() {deepEqual( Stem("regionene"), "region");});
test("regionens -> region", function() {deepEqual( Stem("regionens"), "region");});
test("regioner -> region", function() {deepEqual( Stem("regioner"), "region");});
test("regionforskning -> regionforskning", function() {deepEqual( Stem("regionforskning"), "regionforskning");});
test("regionstyresmaktene -> regionstyresmakt", function() {deepEqual( Stem("regionstyresmaktene"), "regionstyresmakt");});
test("register -> regist", function() {deepEqual( Stem("register"), "regist");});
test("registera -> register", function() {deepEqual( Stem("registera"), "register");});
test("registereigaren -> registereigar", function() {deepEqual( Stem("registereigaren"), "registereigar");});
test("registeret -> register", function() {deepEqual( Stem("registeret"), "register");});
test("registerføraren -> registerførar", function() {deepEqual( Stem("registerføraren"), "registerførar");});
test("registerordning -> registerordning", function() {deepEqual( Stem("registerordning"), "registerordning");});
test("registerspørsmålet -> registerspørsmål", function() {deepEqual( Stem("registerspørsmålet"), "registerspørsmål");});
test("registert -> register", function() {deepEqual( Stem("registert"), "register");});
test("registerutskrift -> registerutskrift", function() {deepEqual( Stem("registerutskrift"), "registerutskrift");});
test("registrerast -> registrer", function() {deepEqual( Stem("registrerast"), "registrer");});
test("registrere -> registrer", function() {deepEqual( Stem("registrere"), "registrer");});
test("registrerer -> registrer", function() {deepEqual( Stem("registrerer"), "registrer");});
test("registreres -> registrer", function() {deepEqual( Stem("registreres"), "registrer");});
test("registrering -> registrering", function() {deepEqual( Stem("registrering"), "registrering");});
test("registreringa -> registrering", function() {deepEqual( Stem("registreringa"), "registrering");});
test("registreringane -> registrering", function() {deepEqual( Stem("registreringane"), "registrering");});
test("registreringer -> registrering", function() {deepEqual( Stem("registreringer"), "registrering");});
test("registreringsdag -> registreringsdag", function() {deepEqual( Stem("registreringsdag"), "registreringsdag");});
test("registreringsdagen -> registreringsdag", function() {deepEqual( Stem("registreringsdagen"), "registreringsdag");});
test("registreringsfeil -> registreringsfeil", function() {deepEqual( Stem("registreringsfeil"), "registreringsfeil");});
test("registreringsordning -> registreringsordning", function() {deepEqual( Stem("registreringsordning"), "registreringsordning");});
test("registreringsordninga -> registreringsordning", function() {deepEqual( Stem("registreringsordninga"), "registreringsordning");});
test("registreringsordningane -> registreringsordning", function() {deepEqual( Stem("registreringsordningane"), "registreringsordning");});
test("registreringsordningar -> registreringsordning", function() {deepEqual( Stem("registreringsordningar"), "registreringsordning");});
test("registreringsreglane -> registreringsregl", function() {deepEqual( Stem("registreringsreglane"), "registreringsregl");});
test("registreringstidspunktet -> registreringstidspunkt", function() {deepEqual( Stem("registreringstidspunktet"), "registreringstidspunkt");});
test("registrert -> registrer", function() {deepEqual( Stem("registrert"), "registrer");});
test("registrerte -> registrer", function() {deepEqual( Stem("registrerte"), "registrer");});
test("regjering -> regjering", function() {deepEqual( Stem("regjering"), "regjering");});
test("regjeringa -> regjering", function() {deepEqual( Stem("regjeringa"), "regjering");});
test("regjeringen -> regjering", function() {deepEqual( Stem("regjeringen"), "regjering");});
test("regjeringens -> regjering", function() {deepEqual( Stem("regjeringens"), "regjering");});
test("regjeringspartiene -> regjeringsparti", function() {deepEqual( Stem("regjeringspartiene"), "regjeringsparti");});
test("regjerningen -> regjerning", function() {deepEqual( Stem("regjerningen"), "regjerning");});
test("reglane -> regl", function() {deepEqual( Stem("reglane"), "regl");});
test("reglar -> regl", function() {deepEqual( Stem("reglar"), "regl");});
test("reglementet -> reglement", function() {deepEqual( Stem("reglementet"), "reglement");});
test("reglene -> regl", function() {deepEqual( Stem("reglene"), "regl");});
test("regler -> regl", function() {deepEqual( Stem("regler"), "regl");});
test("regn -> regn", function() {deepEqual( Stem("regn"), "regn");});
test("regnbue -> regnbu", function() {deepEqual( Stem("regnbue"), "regnbu");});
test("regnbuebroen -> regnbuebro", function() {deepEqual( Stem("regnbuebroen"), "regnbuebro");});
test("regnbuen -> regnbu", function() {deepEqual( Stem("regnbuen"), "regnbu");});
test("regne -> regn", function() {deepEqual( Stem("regne"), "regn");});
test("regneeksempler -> regneeksempl", function() {deepEqual( Stem("regneeksempler"), "regneeksempl");});
test("regner -> regn", function() {deepEqual( Stem("regner"), "regn");});
test("regnes -> regn", function() {deepEqual( Stem("regnes"), "regn");});
test("regnet -> regn", function() {deepEqual( Stem("regnet"), "regn");});
test("regnskap -> regnskap", function() {deepEqual( Stem("regnskap"), "regnskap");});
test("regnskapene -> regnskap", function() {deepEqual( Stem("regnskapene"), "regnskap");});
test("regnskaper -> regnskap", function() {deepEqual( Stem("regnskaper"), "regnskap");});
test("regnskapet -> regnskap", function() {deepEqual( Stem("regnskapet"), "regnskap");});
test("regnskapsavleggelse -> regnskapsavlegg", function() {deepEqual( Stem("regnskapsavleggelse"), "regnskapsavlegg");});
test("regnskapsføring -> regnskapsføring", function() {deepEqual( Stem("regnskapsføring"), "regnskapsføring");});
test("regnskapskontrollør -> regnskapskontrollør", function() {deepEqual( Stem("regnskapskontrollør"), "regnskapskontrollør");});
test("regnskapslov -> regnskap", function() {deepEqual( Stem("regnskapslov"), "regnskap");});
test("regnskapsloven -> regnskap", function() {deepEqual( Stem("regnskapsloven"), "regnskap");});
test("regnskapslovens -> regnskap", function() {deepEqual( Stem("regnskapslovens"), "regnskap");});
test("regnskapslovutvalget -> regnskapslovutvalg", function() {deepEqual( Stem("regnskapslovutvalget"), "regnskapslovutvalg");});
test("regnskapsplikt -> regnskapsplikt", function() {deepEqual( Stem("regnskapsplikt"), "regnskapsplikt");});
test("regnskapsplikten -> regnskapsplikt", function() {deepEqual( Stem("regnskapsplikten"), "regnskapsplikt");});
test("regnskapspliktiges -> regnskapsplikt", function() {deepEqual( Stem("regnskapspliktiges"), "regnskapsplikt");});
test("regnskapsprinsipper -> regnskapsprinsipp", function() {deepEqual( Stem("regnskapsprinsipper"), "regnskapsprinsipp");});
test("regnskapsprinsippet -> regnskapsprinsipp", function() {deepEqual( Stem("regnskapsprinsippet"), "regnskapsprinsipp");});
test("regnskapsreglene -> regnskapsregl", function() {deepEqual( Stem("regnskapsreglene"), "regnskapsregl");});
test("regnskapsregler -> regnskapsregl", function() {deepEqual( Stem("regnskapsregler"), "regnskapsregl");});
test("regnskapsskikk -> regnskapsskikk", function() {deepEqual( Stem("regnskapsskikk"), "regnskapsskikk");});
test("regnskapsstandarden -> regnskapsstandard", function() {deepEqual( Stem("regnskapsstandarden"), "regnskapsstandard");});
test("regnskapsår -> regnskapsår", function() {deepEqual( Stem("regnskapsår"), "regnskapsår");});
test("regnskapsåret -> regnskapsår", function() {deepEqual( Stem("regnskapsåret"), "regnskapsår");});
test("regnvåte -> regnvåt", function() {deepEqual( Stem("regnvåte"), "regnvåt");});
test("regnvær -> regnvær", function() {deepEqual( Stem("regnvær"), "regnvær");});
test("regress -> regress", function() {deepEqual( Stem("regress"), "regress");});
test("regresskrav -> regresskrav", function() {deepEqual( Stem("regresskrav"), "regresskrav");});
test("regressomgangen -> regressomgang", function() {deepEqual( Stem("regressomgangen"), "regressomgang");});
test("regularitet -> regularit", function() {deepEqual( Stem("regularitet"), "regularit");});
test("regulariteten -> regularitet", function() {deepEqual( Stem("regulariteten"), "regularitet");});
test("regularitetsproblemer -> regularitetsproblem", function() {deepEqual( Stem("regularitetsproblemer"), "regularitetsproblem");});
test("regulerast -> reguler", function() {deepEqual( Stem("regulerast"), "reguler");});
test("regulere -> reguler", function() {deepEqual( Stem("regulere"), "reguler");});
test("regulerer -> reguler", function() {deepEqual( Stem("regulerer"), "reguler");});
test("reguleres -> reguler", function() {deepEqual( Stem("reguleres"), "reguler");});
test("regulering -> regulering", function() {deepEqual( Stem("regulering"), "regulering");});
test("reguleringa -> regulering", function() {deepEqual( Stem("reguleringa"), "regulering");});
test("reguleringen -> regulering", function() {deepEqual( Stem("reguleringen"), "regulering");});
test("reguleringsforslag -> reguleringsforslag", function() {deepEqual( Stem("reguleringsforslag"), "reguleringsforslag");});
test("reguleringskonflikter -> reguleringskonflikt", function() {deepEqual( Stem("reguleringskonflikter"), "reguleringskonflikt");});
test("reguleringsmekanismene -> reguleringsmekanism", function() {deepEqual( Stem("reguleringsmekanismene"), "reguleringsmekanism");});
test("reguleringsmekanismer -> reguleringsmekanism", function() {deepEqual( Stem("reguleringsmekanismer"), "reguleringsmekanism");});
test("reguleringsmessig -> reguleringsmess", function() {deepEqual( Stem("reguleringsmessig"), "reguleringsmess");});
test("reguleringsmessige -> reguleringsmess", function() {deepEqual( Stem("reguleringsmessige"), "reguleringsmess");});
test("reguleringsmyndighet -> reguleringsmynd", function() {deepEqual( Stem("reguleringsmyndighet"), "reguleringsmynd");});
test("reguleringsplan -> reguleringsplan", function() {deepEqual( Stem("reguleringsplan"), "reguleringsplan");});
test("reguleringsplanarbeidet -> reguleringsplanarbeid", function() {deepEqual( Stem("reguleringsplanarbeidet"), "reguleringsplanarbeid");});
test("reguleringsplanen -> reguleringsplan", function() {deepEqual( Stem("reguleringsplanen"), "reguleringsplan");});
test("reguleringsplaner -> reguleringsplan", function() {deepEqual( Stem("reguleringsplaner"), "reguleringsplan");});
test("reguleringsplanforslagets -> reguleringsplanforslag", function() {deepEqual( Stem("reguleringsplanforslagets"), "reguleringsplanforslag");});
test("reguleringsplannivå -> reguleringsplannivå", function() {deepEqual( Stem("reguleringsplannivå"), "reguleringsplannivå");});
test("reguleringssaker -> reguleringssak", function() {deepEqual( Stem("reguleringssaker"), "reguleringssak");});
test("reguleringstiltak -> reguleringstiltak", function() {deepEqual( Stem("reguleringstiltak"), "reguleringstiltak");});
test("reguleringsvedtak -> reguleringsvedtak", function() {deepEqual( Stem("reguleringsvedtak"), "reguleringsvedtak");});
test("regulert -> reguler", function() {deepEqual( Stem("regulert"), "reguler");});
test("regulerte -> reguler", function() {deepEqual( Stem("regulerte"), "reguler");});
test("regulær -> regulær", function() {deepEqual( Stem("regulær"), "regulær");});
test("regulære -> regulær", function() {deepEqual( Stem("regulære"), "regulær");});
test("rehabilitering -> rehabilitering", function() {deepEqual( Stem("rehabilitering"), "rehabilitering");});
test("reidmar -> reidm", function() {deepEqual( Stem("reidmar"), "reidm");});
test("reidmars -> reidmar", function() {deepEqual( Stem("reidmars"), "reidmar");});
test("rein -> rein", function() {deepEqual( Stem("rein"), "rein");});
test("reine -> rein", function() {deepEqual( Stem("reine"), "rein");});
test("reinertsen -> reinerts", function() {deepEqual( Stem("reinertsen"), "reinerts");});
test("reinsing -> reinsing", function() {deepEqual( Stem("reinsing"), "reinsing");});
test("reint -> reint", function() {deepEqual( Stem("reint"), "reint");});
test("reinvestere -> reinvester", function() {deepEqual( Stem("reinvestere"), "reinvester");});
test("reinvesteres -> reinvester", function() {deepEqual( Stem("reinvesteres"), "reinvester");});
test("reinvestering -> reinvestering", function() {deepEqual( Stem("reinvestering"), "reinvestering");});
test("reinvesteringsadgang -> reinvesteringsadgang", function() {deepEqual( Stem("reinvesteringsadgang"), "reinvesteringsadgang");});
test("reinvesteringsadgangen -> reinvesteringsadgang", function() {deepEqual( Stem("reinvesteringsadgangen"), "reinvesteringsadgang");});
test("reinvesterte -> reinvester", function() {deepEqual( Stem("reinvesterte"), "reinvester");});
test("reis -> reis", function() {deepEqual( Stem("reis"), "reis");});
test("reisast -> reis", function() {deepEqual( Stem("reisast"), "reis");});
test("reise -> reis", function() {deepEqual( Stem("reise"), "reis");});
test("reiseaktivitet -> reiseaktivit", function() {deepEqual( Stem("reiseaktivitet"), "reiseaktivit");});
test("reisebyrå -> reisebyrå", function() {deepEqual( Stem("reisebyrå"), "reisebyrå");});
test("reisefeller -> reisefell", function() {deepEqual( Stem("reisefeller"), "reisefell");});
test("reisefølget -> reisefølg", function() {deepEqual( Stem("reisefølget"), "reisefølg");});
test("reiseklare -> reiseklar", function() {deepEqual( Stem("reiseklare"), "reiseklar");});
test("reisen -> reis", function() {deepEqual( Stem("reisen"), "reis");});
test("reisene -> reis", function() {deepEqual( Stem("reisene"), "reis");});
test("reiser -> reis", function() {deepEqual( Stem("reiser"), "reis");});
test("reises -> reis", function() {deepEqual( Stem("reises"), "reis");});
test("reising -> reising", function() {deepEqual( Stem("reising"), "reising");});
test("reist -> reist", function() {deepEqual( Stem("reist"), "reist");});
test("rekalkuleres -> rekalkuler", function() {deepEqual( Stem("rekalkuleres"), "rekalkuler");});
test("rekende -> rek", function() {deepEqual( Stem("rekende"), "rek");});
test("rekk -> rekk", function() {deepEqual( Stem("rekk"), "rekk");});
test("rekke -> rekk", function() {deepEqual( Stem("rekke"), "rekk");});
test("rekker -> rekk", function() {deepEqual( Stem("rekker"), "rekk");});
test("rekkevidden -> rekkevidd", function() {deepEqual( Stem("rekkevidden"), "rekkevidd");});
test("rekkje -> rekkj", function() {deepEqual( Stem("rekkje"), "rekkj");});
test("rekkjefølgja -> rekkjefølgj", function() {deepEqual( Stem("rekkjefølgja"), "rekkjefølgj");});
test("rekkjefølgje -> rekkjefølgj", function() {deepEqual( Stem("rekkjefølgje"), "rekkjefølgj");});
test("rekkjehus -> rekkjehus", function() {deepEqual( Stem("rekkjehus"), "rekkjehus");});
test("rekkjevidda -> rekkjevidd", function() {deepEqual( Stem("rekkjevidda"), "rekkjevidd");});
test("reklamasjonar -> reklamasjon", function() {deepEqual( Stem("reklamasjonar"), "reklamasjon");});
test("reklamasjonsfristar -> reklamasjonsfrist", function() {deepEqual( Stem("reklamasjonsfristar"), "reklamasjonsfrist");});
test("reklamasjonsnemnder -> reklamasjonsnemnd", function() {deepEqual( Stem("reklamasjonsnemnder"), "reklamasjonsnemnd");});
test("rekna -> rekn", function() {deepEqual( Stem("rekna"), "rekn");});
test("reknar -> rekn", function() {deepEqual( Stem("reknar"), "rekn");});
test("reknast -> rekn", function() {deepEqual( Stem("reknast"), "rekn");});
test("rekne -> rekn", function() {deepEqual( Stem("rekne"), "rekn");});
test("rekneskap -> rekneskap", function() {deepEqual( Stem("rekneskap"), "rekneskap");});
test("rekneskapane -> rekneskap", function() {deepEqual( Stem("rekneskapane"), "rekneskap");});
test("rekneskapen -> rekneskap", function() {deepEqual( Stem("rekneskapen"), "rekneskap");});
test("rekneskapsførsel -> rekneskapsførsel", function() {deepEqual( Stem("rekneskapsførsel"), "rekneskapsførsel");});
test("rekneskapskunnige -> rekneskapskunn", function() {deepEqual( Stem("rekneskapskunnige"), "rekneskapskunn");});
test("rekneskapslova -> rekneskap", function() {deepEqual( Stem("rekneskapslova"), "rekneskap");});
test("rekneskapsmateriale -> rekneskapsmaterial", function() {deepEqual( Stem("rekneskapsmateriale"), "rekneskapsmaterial");});
test("rekneskapsopplysningar -> rekneskapsopplysning", function() {deepEqual( Stem("rekneskapsopplysningar"), "rekneskapsopplysning");});
test("rekneskapsplikt -> rekneskapsplikt", function() {deepEqual( Stem("rekneskapsplikt"), "rekneskapsplikt");});
test("rekneskapsrapportering -> rekneskapsrapportering", function() {deepEqual( Stem("rekneskapsrapportering"), "rekneskapsrapportering");});
test("rekneskapsregisteret -> rekneskapsregister", function() {deepEqual( Stem("rekneskapsregisteret"), "rekneskapsregister");});
test("rekneskapsreglane -> rekneskapsregl", function() {deepEqual( Stem("rekneskapsreglane"), "rekneskapsregl");});
test("rekneskapsreglar -> rekneskapsregl", function() {deepEqual( Stem("rekneskapsreglar"), "rekneskapsregl");});
test("rekneskapsskikk -> rekneskapsskikk", function() {deepEqual( Stem("rekneskapsskikk"), "rekneskapsskikk");});
test("rekneskapsår -> rekneskapsår", function() {deepEqual( Stem("rekneskapsår"), "rekneskapsår");});
test("rekneskapsåret -> rekneskapsår", function() {deepEqual( Stem("rekneskapsåret"), "rekneskapsår");});
test("reknestykket -> reknestykk", function() {deepEqual( Stem("reknestykket"), "reknestykk");});
test("rekning -> rekning", function() {deepEqual( Stem("rekning"), "rekning");});
test("rekningsbasis -> rekningsbasis", function() {deepEqual( Stem("rekningsbasis"), "rekningsbasis");});
test("rekningsprinsipp -> rekningsprinsipp", function() {deepEqual( Stem("rekningsprinsipp"), "rekningsprinsipp");});
test("rekningsprinsippet -> rekningsprinsipp", function() {deepEqual( Stem("rekningsprinsippet"), "rekningsprinsipp");});
test("rekningssvarande -> rekningssvar", function() {deepEqual( Stem("rekningssvarande"), "rekningssvar");});
test("rekreasjon -> rekreasjon", function() {deepEqual( Stem("rekreasjon"), "rekreasjon");});
test("rekreasjonsformål -> rekreasjonsformål", function() {deepEqual( Stem("rekreasjonsformål"), "rekreasjonsformål");});
test("rekreasjonsverdier -> rekreasjonsverdi", function() {deepEqual( Stem("rekreasjonsverdier"), "rekreasjonsverdi");});
test("relasjoner -> relasjon", function() {deepEqual( Stem("relasjoner"), "relasjon");});
test("relatert -> relater", function() {deepEqual( Stem("relatert"), "relater");});
test("relativ -> relativ", function() {deepEqual( Stem("relativ"), "relativ");});
test("relative -> relativ", function() {deepEqual( Stem("relative"), "relativ");});
test("relativt -> relativ", function() {deepEqual( Stem("relativt"), "relativ");});
test("relevans -> relevan", function() {deepEqual( Stem("relevans"), "relevan");});
test("relevant -> relevant", function() {deepEqual( Stem("relevant"), "relevant");});
test("relevante -> relevant", function() {deepEqual( Stem("relevante"), "relevant");});
test("religiøs -> religiøs", function() {deepEqual( Stem("religiøs"), "religiøs");});
test("rem -> rem", function() {deepEqual( Stem("rem"), "rem");});
test("remmen -> remm", function() {deepEqual( Stem("remmen"), "remm");});
test("ren -> ren", function() {deepEqual( Stem("ren"), "ren");});
test("rene -> ren", function() {deepEqual( Stem("rene"), "ren");});
test("rengjøring -> rengjøring", function() {deepEqual( Stem("rengjøring"), "rengjøring");});
test("renkespill -> renkespill", function() {deepEqual( Stem("renkespill"), "renkespill");});
test("renn -> renn", function() {deepEqual( Stem("renn"), "renn");});
test("renne -> renn", function() {deepEqual( Stem("renne"), "renn");});
test("renner -> renn", function() {deepEqual( Stem("renner"), "renn");});
test("renovering -> renovering", function() {deepEqual( Stem("renovering"), "renovering");});
test("rent -> rent", function() {deepEqual( Stem("rent"), "rent");});
test("renta -> rent", function() {deepEqual( Stem("renta"), "rent");});
test("rente -> rent", function() {deepEqual( Stem("rente"), "rent");});
test("renteavkastning -> renteavkastning", function() {deepEqual( Stem("renteavkastning"), "renteavkastning");});
test("rentebetingelser -> rentebeting", function() {deepEqual( Stem("rentebetingelser"), "rentebeting");});
test("rentefastsettelsen -> rentefastsett", function() {deepEqual( Stem("rentefastsettelsen"), "rentefastsett");});
test("renteforsikring -> renteforsikring", function() {deepEqual( Stem("renteforsikring"), "renteforsikring");});
test("renteforsikringer -> renteforsikring", function() {deepEqual( Stem("renteforsikringer"), "renteforsikring");});
test("rentefot -> rentefot", function() {deepEqual( Stem("rentefot"), "rentefot");});
test("renteinntektene -> renteinntekt", function() {deepEqual( Stem("renteinntektene"), "renteinntekt");});
test("renteinntekter -> renteinntekt", function() {deepEqual( Stem("renteinntekter"), "renteinntekt");});
test("rentelova -> rent", function() {deepEqual( Stem("rentelova"), "rent");});
test("rentemargin -> rentemargin", function() {deepEqual( Stem("rentemargin"), "rentemargin");});
test("rentemarkedet -> rentemarked", function() {deepEqual( Stem("rentemarkedet"), "rentemarked");});
test("renten -> rent", function() {deepEqual( Stem("renten"), "rent");});
test("rentenivå -> rentenivå", function() {deepEqual( Stem("rentenivå"), "rentenivå");});
test("renteoppgaver -> renteoppgav", function() {deepEqual( Stem("renteoppgaver"), "renteoppgav");});
test("renter -> rent", function() {deepEqual( Stem("renter"), "rent");});
test("rentesatser -> rentesats", function() {deepEqual( Stem("rentesatser"), "rentesats");});
test("rentesrente -> rentesrent", function() {deepEqual( Stem("rentesrente"), "rentesrent");});
test("rentevilkår -> rentevilkår", function() {deepEqual( Stem("rentevilkår"), "rentevilkår");});
test("reparasjon -> reparasjon", function() {deepEqual( Stem("reparasjon"), "reparasjon");});
test("reparasjonane -> reparasjon", function() {deepEqual( Stem("reparasjonane"), "reparasjon");});
test("reparasjonar -> reparasjon", function() {deepEqual( Stem("reparasjonar"), "reparasjon");});
test("reparasjonsverksted -> reparasjonsverksted", function() {deepEqual( Stem("reparasjonsverksted"), "reparasjonsverksted");});
test("reparere -> reparer", function() {deepEqual( Stem("reparere"), "reparer");});
test("reparerer -> reparer", function() {deepEqual( Stem("reparerer"), "reparer");});
test("representant -> representant", function() {deepEqual( Stem("representant"), "representant");});
test("representantane -> representant", function() {deepEqual( Stem("representantane"), "representant");});
test("representantar -> representant", function() {deepEqual( Stem("representantar"), "representant");});
test("representanten -> representant", function() {deepEqual( Stem("representanten"), "representant");});
test("representantene -> representant", function() {deepEqual( Stem("representantene"), "representant");});
test("representanter -> representant", function() {deepEqual( Stem("representanter"), "representant");});
test("representantskap -> representantskap", function() {deepEqual( Stem("representantskap"), "representantskap");});
test("representantskapet -> representantskap", function() {deepEqual( Stem("representantskapet"), "representantskap");});
test("representantskapets -> representantskap", function() {deepEqual( Stem("representantskapets"), "representantskap");});
test("representasjon -> representasjon", function() {deepEqual( Stem("representasjon"), "representasjon");});
test("representasjonen -> representasjon", function() {deepEqual( Stem("representasjonen"), "representasjon");});
test("representasjonsrett -> representasjonsrett", function() {deepEqual( Stem("representasjonsrett"), "representasjonsrett");});
test("representativ -> representativ", function() {deepEqual( Stem("representativ"), "representativ");});
test("representative -> representativ", function() {deepEqual( Stem("representative"), "representativ");});
test("representativitet -> representativit", function() {deepEqual( Stem("representativitet"), "representativit");});
test("representativt -> representativ", function() {deepEqual( Stem("representativt"), "representativ");});
test("representer -> represent", function() {deepEqual( Stem("representer"), "represent");});
test("representere -> representer", function() {deepEqual( Stem("representere"), "representer");});
test("representerer -> representer", function() {deepEqual( Stem("representerer"), "representer");});
test("representert -> representer", function() {deepEqual( Stem("representert"), "representer");});
test("representerte -> representer", function() {deepEqual( Stem("representerte"), "representer");});
test("rere -> rer", function() {deepEqual( Stem("rere"), "rer");});
test("res -> res", function() {deepEqual( Stem("res"), "res");});
test("reservar -> reserv", function() {deepEqual( Stem("reservar"), "reserv");});
test("reservasjonen -> reservasjon", function() {deepEqual( Stem("reservasjonen"), "reservasjon");});
test("reservasjoner -> reservasjon", function() {deepEqual( Stem("reservasjoner"), "reservasjon");});
test("reservatets -> reservat", function() {deepEqual( Stem("reservatets"), "reservat");});
test("reserve -> reserv", function() {deepEqual( Stem("reserve"), "reserv");});
test("reservefond -> reservefond", function() {deepEqual( Stem("reservefond"), "reservefond");});
test("reserver -> reserv", function() {deepEqual( Stem("reserver"), "reserv");});
test("reservere -> reserver", function() {deepEqual( Stem("reservere"), "reserver");});
test("reserveregel -> reserveregel", function() {deepEqual( Stem("reserveregel"), "reserveregel");});
test("reservert -> reserver", function() {deepEqual( Stem("reservert"), "reserver");});
test("reserverte -> reserver", function() {deepEqual( Stem("reserverte"), "reserver");});
test("resolusjon -> resolusjon", function() {deepEqual( Stem("resolusjon"), "resolusjon");});
test("respekt -> respekt", function() {deepEqual( Stem("respekt"), "respekt");});
test("respekterast -> respekter", function() {deepEqual( Stem("respekterast"), "respekter");});
test("respektere -> respekter", function() {deepEqual( Stem("respektere"), "respekter");});
test("respektert -> respekter", function() {deepEqual( Stem("respektert"), "respekter");});
test("respektive -> respektiv", function() {deepEqual( Stem("respektive"), "respektiv");});
test("ressurs -> ressur", function() {deepEqual( Stem("ressurs"), "ressur");});
test("ressursane -> ressurs", function() {deepEqual( Stem("ressursane"), "ressurs");});
test("ressursbruk -> ressursbruk", function() {deepEqual( Stem("ressursbruk"), "ressursbruk");});
test("ressursbruken -> ressursbruk", function() {deepEqual( Stem("ressursbruken"), "ressursbruk");});
test("ressurseffektiv -> ressurseffektiv", function() {deepEqual( Stem("ressurseffektiv"), "ressurseffektiv");});
test("ressursene -> ressurs", function() {deepEqual( Stem("ressursene"), "ressurs");});
test("ressurser -> ressurs", function() {deepEqual( Stem("ressurser"), "ressurs");});
test("ressursinnsats -> ressursinnsat", function() {deepEqual( Stem("ressursinnsats"), "ressursinnsat");});
test("ressurskrevende -> ressurskrev", function() {deepEqual( Stem("ressurskrevende"), "ressurskrev");});
test("ressursomsyna -> ressursomsyn", function() {deepEqual( Stem("ressursomsyna"), "ressursomsyn");});
test("ressursutnyttelse -> ressursutnytt", function() {deepEqual( Stem("ressursutnyttelse"), "ressursutnytt");});
test("ressursutnytting -> ressursutnytting", function() {deepEqual( Stem("ressursutnytting"), "ressursutnytting");});
test("restansane -> restans", function() {deepEqual( Stem("restansane"), "restans");});
test("restansar -> restans", function() {deepEqual( Stem("restansar"), "restans");});
test("resten -> rest", function() {deepEqual( Stem("resten"), "rest");});
test("restene -> rest", function() {deepEqual( Stem("restene"), "rest");});
test("resterende -> rester", function() {deepEqual( Stem("resterende"), "rester");});
test("restgjelda -> restgjeld", function() {deepEqual( Stem("restgjelda"), "restgjeld");});
test("restriksjonar -> restriksjon", function() {deepEqual( Stem("restriksjonar"), "restriksjon");});
test("restriksjoner -> restriksjon", function() {deepEqual( Stem("restriksjoner"), "restriksjon");});
test("restruktureringene -> restrukturering", function() {deepEqual( Stem("restruktureringene"), "restrukturering");});
test("resultat -> resultat", function() {deepEqual( Stem("resultat"), "resultat");});
test("resultatavhengig -> resultatavheng", function() {deepEqual( Stem("resultatavhengig"), "resultatavheng");});
test("resultatene -> resultat", function() {deepEqual( Stem("resultatene"), "resultat");});
test("resultater -> resultat", function() {deepEqual( Stem("resultater"), "resultat");});
test("resultatet -> resultat", function() {deepEqual( Stem("resultatet"), "resultat");});
test("resultatlikhet -> resultatlik", function() {deepEqual( Stem("resultatlikhet"), "resultatlik");});
test("resultatmessig -> resultatmess", function() {deepEqual( Stem("resultatmessig"), "resultatmess");});
test("resultatmessige -> resultatmess", function() {deepEqual( Stem("resultatmessige"), "resultatmess");});
test("resultatregnskap -> resultatregnskap", function() {deepEqual( Stem("resultatregnskap"), "resultatregnskap");});
test("resultatutviklinga -> resultatutvikling", function() {deepEqual( Stem("resultatutviklinga"), "resultatutvikling");});
test("resultere -> resulter", function() {deepEqual( Stem("resultere"), "resulter");});
test("resulterer -> resulter", function() {deepEqual( Stem("resulterer"), "resulter");});
test("resursbruk -> resursbruk", function() {deepEqual( Stem("resursbruk"), "resursbruk");});
test("retning -> retning", function() {deepEqual( Stem("retning"), "retning");});
test("retninger -> retning", function() {deepEqual( Stem("retninger"), "retning");});
test("retningsbalanse -> retningsbalans", function() {deepEqual( Stem("retningsbalanse"), "retningsbalans");});
test("retningsbalansen -> retningsbalans", function() {deepEqual( Stem("retningsbalansen"), "retningsbalans");});
test("retningsgivende -> retningsgiv", function() {deepEqual( Stem("retningsgivende"), "retningsgiv");});
test("retningsgiver -> retningsgiv", function() {deepEqual( Stem("retningsgiver"), "retningsgiv");});
test("retningslina -> retningslin", function() {deepEqual( Stem("retningslina"), "retningslin");});
test("retningslinene -> retningslin", function() {deepEqual( Stem("retningslinene"), "retningslin");});
test("retningsliner -> retningslin", function() {deepEqual( Stem("retningsliner"), "retningslin");});
test("retningslinje -> retningslinj", function() {deepEqual( Stem("retningslinje"), "retningslinj");});
test("retningslinjene -> retningslinj", function() {deepEqual( Stem("retningslinjene"), "retningslinj");});
test("retningslinjer -> retningslinj", function() {deepEqual( Stem("retningslinjer"), "retningslinj");});
test("retningsubalanse -> retningsubalans", function() {deepEqual( Stem("retningsubalanse"), "retningsubalans");});
test("rett -> rett", function() {deepEqual( Stem("rett"), "rett");});
test("retta -> rett", function() {deepEqual( Stem("retta"), "rett");});
test("rettane -> rett", function() {deepEqual( Stem("rettane"), "rett");});
test("rettar -> rett", function() {deepEqual( Stem("rettar"), "rett");});
test("rettargangslovgjevinga -> rettargangslovgjeving", function() {deepEqual( Stem("rettargangslovgjevinga"), "rettargangslovgjeving");});
test("rettast -> rett", function() {deepEqual( Stem("rettast"), "rett");});
test("rettaste -> rettast", function() {deepEqual( Stem("rettaste"), "rettast");});
test("rette -> rett", function() {deepEqual( Stem("rette"), "rett");});
test("rettede -> rett", function() {deepEqual( Stem("rettede"), "rett");});
test("retteleg -> rett", function() {deepEqual( Stem("retteleg"), "rett");});
test("retten -> rett", function() {deepEqual( Stem("retten"), "rett");});
test("retter -> rett", function() {deepEqual( Stem("retter"), "rett");});
test("rettes -> rett", function() {deepEqual( Stem("rettes"), "rett");});
test("rettet -> rett", function() {deepEqual( Stem("rettet"), "rett");});
test("rettferd -> rettferd", function() {deepEqual( Stem("rettferd"), "rettferd");});
test("rettferdig -> rettferd", function() {deepEqual( Stem("rettferdig"), "rettferd");});
test("rettferdighet -> rettferd", function() {deepEqual( Stem("rettferdighet"), "rettferd");});
test("rettferdighetsideal -> rettferdighetsideal", function() {deepEqual( Stem("rettferdighetsideal"), "rettferdighetsideal");});
test("rettigheten -> rett", function() {deepEqual( Stem("rettigheten"), "rett");});
test("rettighetene -> rett", function() {deepEqual( Stem("rettighetene"), "rett");});
test("rettigheter -> rett", function() {deepEqual( Stem("rettigheter"), "rett");});
test("rettighetsforholdene -> rettighetsforhold", function() {deepEqual( Stem("rettighetsforholdene"), "rettighetsforhold");});
test("rettighetshaver -> rettighetshav", function() {deepEqual( Stem("rettighetshaver"), "rettighetshav");});
test("rettighetshaveren -> rettighetshaver", function() {deepEqual( Stem("rettighetshaveren"), "rettighetshaver");});
test("rettighetsregister -> rettighetsregist", function() {deepEqual( Stem("rettighetsregister"), "rettighetsregist");});
test("retting -> retting", function() {deepEqual( Stem("retting"), "retting");});
test("rettinga -> retting", function() {deepEqual( Stem("rettinga"), "retting");});
test("rettkjende -> rettkj", function() {deepEqual( Stem("rettkjende"), "rettkj");});
test("rettkomen -> rettkom", function() {deepEqual( Stem("rettkomen"), "rettkom");});
test("rettleiande -> rettlei", function() {deepEqual( Stem("rettleiande"), "rettlei");});
test("rettleiing -> rettleiing", function() {deepEqual( Stem("rettleiing"), "rettleiing");});
test("rettsavgjerd -> rettsavgjerd", function() {deepEqual( Stem("rettsavgjerd"), "rettsavgjerd");});
test("rettsavgjerder -> rettsavgjerd", function() {deepEqual( Stem("rettsavgjerder"), "rettsavgjerd");});
test("rettserverv -> rettserverv", function() {deepEqual( Stem("rettserverv"), "rettserverv");});
test("rettservervet -> rettserverv", function() {deepEqual( Stem("rettservervet"), "rettserverv");});
test("rettsforhold -> rettsforhold", function() {deepEqual( Stem("rettsforhold"), "rettsforhold");});
test("rettsforholda -> rettsforhold", function() {deepEqual( Stem("rettsforholda"), "rettsforhold");});
test("rettsforholdet -> rettsforhold", function() {deepEqual( Stem("rettsforholdet"), "rettsforhold");});
test("rettsgebyr -> rettsgebyr", function() {deepEqual( Stem("rettsgebyr"), "rettsgebyr");});
test("rettsgebyret -> rettsgebyr", function() {deepEqual( Stem("rettsgebyret"), "rettsgebyr");});
test("rettsgebyrlova -> rettsgebyr", function() {deepEqual( Stem("rettsgebyrlova"), "rettsgebyr");});
test("rettshavar -> rettshav", function() {deepEqual( Stem("rettshavar"), "rettshav");});
test("rettshavarane -> rettshavar", function() {deepEqual( Stem("rettshavarane"), "rettshavar");});
test("rettshavaren -> rettshavar", function() {deepEqual( Stem("rettshavaren"), "rettshavar");});
test("rettskraft -> rettskraft", function() {deepEqual( Stem("rettskraft"), "rettskraft");});
test("rettskraftig -> rettskraft", function() {deepEqual( Stem("rettskraftig"), "rettskraft");});
test("rettskraftverknad -> rettskraftverknad", function() {deepEqual( Stem("rettskraftverknad"), "rettskraftverknad");});
test("rettsleg -> retts", function() {deepEqual( Stem("rettsleg"), "retts");});
test("rettslege -> retts", function() {deepEqual( Stem("rettslege"), "retts");});
test("rettslig -> retts", function() {deepEqual( Stem("rettslig"), "retts");});
test("rettsmekling -> rettsmekling", function() {deepEqual( Stem("rettsmekling"), "rettsmekling");});
test("rettsovergang -> rettsovergang", function() {deepEqual( Stem("rettsovergang"), "rettsovergang");});
test("rettspraksis -> rettspraksis", function() {deepEqual( Stem("rettspraksis"), "rettspraksis");});
test("rettsregister -> rettsregist", function() {deepEqual( Stem("rettsregister"), "rettsregist");});
test("rettsregistera -> rettsregister", function() {deepEqual( Stem("rettsregistera"), "rettsregister");});
test("rettsregisteret -> rettsregister", function() {deepEqual( Stem("rettsregisteret"), "rettsregister");});
test("rettsregistrering -> rettsregistrering", function() {deepEqual( Stem("rettsregistrering"), "rettsregistrering");});
test("rettsregler -> rettsregl", function() {deepEqual( Stem("rettsregler"), "rettsregl");});
test("rettssak -> rettssak", function() {deepEqual( Stem("rettssak"), "rettssak");});
test("rettsspørsmål -> rettsspørsmål", function() {deepEqual( Stem("rettsspørsmål"), "rettsspørsmål");});
test("rettsstiftelser -> rettsstift", function() {deepEqual( Stem("rettsstiftelser"), "rettsstift");});
test("rettsstifting -> rettsstifting", function() {deepEqual( Stem("rettsstifting"), "rettsstifting");});
test("rettsstiftingane -> rettsstifting", function() {deepEqual( Stem("rettsstiftingane"), "rettsstifting");});
test("rettsstiftingar -> rettsstifting", function() {deepEqual( Stem("rettsstiftingar"), "rettsstifting");});
test("rettsstilling -> rettsstilling", function() {deepEqual( Stem("rettsstilling"), "rettsstilling");});
test("rettsstillinga -> rettsstilling", function() {deepEqual( Stem("rettsstillinga"), "rettsstilling");});
test("rettsstoffet -> rettsstoff", function() {deepEqual( Stem("rettsstoffet"), "rettsstoff");});
test("rettssubjekt -> rettssubjekt", function() {deepEqual( Stem("rettssubjekt"), "rettssubjekt");});
test("rettssubjekter -> rettssubjekt", function() {deepEqual( Stem("rettssubjekter"), "rettssubjekt");});
test("rettstilstand -> rettstilstand", function() {deepEqual( Stem("rettstilstand"), "rettstilstand");});
test("rettstilstanden -> rettstilstand", function() {deepEqual( Stem("rettstilstanden"), "rettstilstand");});
test("rettsuvisse -> rettsuviss", function() {deepEqual( Stem("rettsuvisse"), "rettsuviss");});
test("rettsverknadene -> rettsverknad", function() {deepEqual( Stem("rettsverknadene"), "rettsverknad");});
test("rettsverknader -> rettsverknad", function() {deepEqual( Stem("rettsverknader"), "rettsverknad");});
test("rettsvern -> rettsvern", function() {deepEqual( Stem("rettsvern"), "rettsvern");});
test("rettsvernakt -> rettsvernakt", function() {deepEqual( Stem("rettsvernakt"), "rettsvernakt");});
test("rettsvernet -> rettsvern", function() {deepEqual( Stem("rettsvernet"), "rettsvern");});
test("rettsvernreglane -> rettsvernregl", function() {deepEqual( Stem("rettsvernreglane"), "rettsvernregl");});
test("rettsvirkninger -> rettsvirkning", function() {deepEqual( Stem("rettsvirkninger"), "rettsvirkning");});
test("returkommisjonar -> returkommisjon", function() {deepEqual( Stem("returkommisjonar"), "returkommisjon");});
test("returlast -> returl", function() {deepEqual( Stem("returlast"), "returl");});
test("returprovisjonar -> returprovisjon", function() {deepEqual( Stem("returprovisjonar"), "returprovisjon");});
test("returreisen -> returreis", function() {deepEqual( Stem("returreisen"), "returreis");});
test("rev -> rev", function() {deepEqual( Stem("rev"), "rev");});
test("reversering -> reversering", function() {deepEqual( Stem("reversering"), "reversering");});
test("reversibel -> reversibel", function() {deepEqual( Stem("reversibel"), "reversibel");});
test("revestreker -> revestrek", function() {deepEqual( Stem("revestreker"), "revestrek");});
test("revet -> rev", function() {deepEqual( Stem("revet"), "rev");});
test("reviderast -> revider", function() {deepEqual( Stem("reviderast"), "revider");});
test("revidert -> revider", function() {deepEqual( Stem("revidert"), "revider");});
test("reviderte -> revider", function() {deepEqual( Stem("reviderte"), "revider");});
test("revierhavna -> revierhavn", function() {deepEqual( Stem("revierhavna"), "revierhavn");});
test("revisjon -> revisjon", function() {deepEqual( Stem("revisjon"), "revisjon");});
test("revisjonen -> revisjon", function() {deepEqual( Stem("revisjonen"), "revisjon");});
test("revisjonsmelding -> revisjonsmelding", function() {deepEqual( Stem("revisjonsmelding"), "revisjonsmelding");});
test("revisjonsmeldinga -> revisjonsmelding", function() {deepEqual( Stem("revisjonsmeldinga"), "revisjonsmelding");});
test("revisjonsplikt -> revisjonsplikt", function() {deepEqual( Stem("revisjonsplikt"), "revisjonsplikt");});
test("revisor -> revisor", function() {deepEqual( Stem("revisor"), "revisor");});
test("revisorar -> revisor", function() {deepEqual( Stem("revisorar"), "revisor");});
test("revisorers -> revisor", function() {deepEqual( Stem("revisorers"), "revisor");});
test("revisorfråsegn -> revisorfråsegn", function() {deepEqual( Stem("revisorfråsegn"), "revisorfråsegn");});
test("revisorlova -> revisor", function() {deepEqual( Stem("revisorlova"), "revisor");});
test("revisormelding -> revisormelding", function() {deepEqual( Stem("revisormelding"), "revisormelding");});
test("revisoroppdraget -> revisoroppdrag", function() {deepEqual( Stem("revisoroppdraget"), "revisoroppdrag");});
test("revisors -> revisor", function() {deepEqual( Stem("revisors"), "revisor");});
test("revner -> revn", function() {deepEqual( Stem("revner"), "revn");});
test("revurdering -> revurdering", function() {deepEqual( Stem("revurdering"), "revurdering");});
test("ri -> ri", function() {deepEqual( Stem("ri"), "ri");});
test("ridd -> ridd", function() {deepEqual( Stem("ridd"), "ridd");});
test("ridekunst -> ridekunst", function() {deepEqual( Stem("ridekunst"), "ridekunst");});
test("ridende -> rid", function() {deepEqual( Stem("ridende"), "rid");});
test("rideredskap -> rideredskap", function() {deepEqual( Stem("rideredskap"), "rideredskap");});
test("ridetur -> ridetur", function() {deepEqual( Stem("ridetur"), "ridetur");});
test("rig -> rig", function() {deepEqual( Stem("rig"), "rig");});
test("rigger -> rigg", function() {deepEqual( Stem("rigger"), "rigg");});
test("rigide -> rigid", function() {deepEqual( Stem("rigide"), "rigid");});
test("rik -> rik", function() {deepEqual( Stem("rik"), "rik");});
test("rikdom -> rikdom", function() {deepEqual( Stem("rikdom"), "rikdom");});
test("rike -> rik", function() {deepEqual( Stem("rike"), "rik");});
test("rikelig -> rik", function() {deepEqual( Stem("rikelig"), "rik");});
test("rikeste -> rikest", function() {deepEqual( Stem("rikeste"), "rikest");});
test("riket -> rik", function() {deepEqual( Stem("riket"), "rik");});
test("rikke -> rikk", function() {deepEqual( Stem("rikke"), "rikk");});
test("riksbyggen -> riksbygg", function() {deepEqual( Stem("riksbyggen"), "riksbygg");});
test("riksdagens -> riksdag", function() {deepEqual( Stem("riksdagens"), "riksdag");});
test("riksdekkende -> riksdekk", function() {deepEqual( Stem("riksdekkende"), "riksdekk");});
test("riksforbund -> riksforbund", function() {deepEqual( Stem("riksforbund"), "riksforbund");});
test("riksgrensen -> riksgrens", function() {deepEqual( Stem("riksgrensen"), "riksgrens");});
test("riksnivå -> riksnivå", function() {deepEqual( Stem("riksnivå"), "riksnivå");});
test("rikspolitiske -> rikspolitisk", function() {deepEqual( Stem("rikspolitiske"), "rikspolitisk");});
test("riksveg -> riksveg", function() {deepEqual( Stem("riksveg"), "riksveg");});
test("riksveger -> riksveg", function() {deepEqual( Stem("riksveger"), "riksveg");});
test("riksvegforbindelse -> riksvegforbind", function() {deepEqual( Stem("riksvegforbindelse"), "riksvegforbind");});
test("riksvegnettet -> riksvegnett", function() {deepEqual( Stem("riksvegnettet"), "riksvegnett");});
test("riksvegplaner -> riksvegplan", function() {deepEqual( Stem("riksvegplaner"), "riksvegplan");});
test("riktig -> rikt", function() {deepEqual( Stem("riktig"), "rikt");});
test("riktige -> rikt", function() {deepEqual( Stem("riktige"), "rikt");});
test("riktignok -> riktignok", function() {deepEqual( Stem("riktignok"), "riktignok");});
test("rim -> rim", function() {deepEqual( Stem("rim"), "rim");});
test("rimeleg -> rim", function() {deepEqual( Stem("rimeleg"), "rim");});
test("rimelegare -> rimelegar", function() {deepEqual( Stem("rimelegare"), "rimelegar");});
test("rimelege -> rim", function() {deepEqual( Stem("rimelege"), "rim");});
test("rimelig -> rim", function() {deepEqual( Stem("rimelig"), "rim");});
test("rimelige -> rim", function() {deepEqual( Stem("rimelige"), "rim");});
test("rimelighet -> rim", function() {deepEqual( Stem("rimelighet"), "rim");});
test("rimet -> rim", function() {deepEqual( Stem("rimet"), "rim");});
test("rimfakse -> rimfaks", function() {deepEqual( Stem("rimfakse"), "rimfaks");});
test("rimfrost -> rimfrost", function() {deepEqual( Stem("rimfrost"), "rimfrost");});
test("rimgrimne -> rimgrimn", function() {deepEqual( Stem("rimgrimne"), "rimgrimn");});
test("rimkledde -> rimkledd", function() {deepEqual( Stem("rimkledde"), "rimkledd");});
test("rimlaget -> rimlag", function() {deepEqual( Stem("rimlaget"), "rimlag");});
test("rimslåtte -> rimslått", function() {deepEqual( Stem("rimslåtte"), "rimslått");});
test("rimtussenes -> rimtuss", function() {deepEqual( Stem("rimtussenes"), "rimtuss");});
test("rimtusser -> rimtuss", function() {deepEqual( Stem("rimtusser"), "rimtuss");});
test("rimtusseslekter -> rimtusseslekt", function() {deepEqual( Stem("rimtusseslekter"), "rimtusseslekt");});
test("rind -> rind", function() {deepEqual( Stem("rind"), "rind");});
test("rinds -> rind", function() {deepEqual( Stem("rinds"), "rind");});
test("ring -> ring", function() {deepEqual( Stem("ring"), "ring");});
test("ringdal -> ringdal", function() {deepEqual( Stem("ringdal"), "ringdal");});
test("ringen -> ring", function() {deepEqual( Stem("ringen"), "ring");});
test("ringer -> ring", function() {deepEqual( Stem("ringer"), "ring");});
test("ringhorne -> ringhorn", function() {deepEqual( Stem("ringhorne"), "ringhorn");});
test("ringveien -> ringvei", function() {deepEqual( Stem("ringveien"), "ringvei");});
test("ringvirkninger -> ringvirkning", function() {deepEqual( Stem("ringvirkninger"), "ringvirkning");});
test("rir -> rir", function() {deepEqual( Stem("rir"), "rir");});
test("rise -> ris", function() {deepEqual( Stem("rise"), "ris");});
test("riser -> ris", function() {deepEqual( Stem("riser"), "ris");});
test("risikabel -> risikabel", function() {deepEqual( Stem("risikabel"), "risikabel");});
test("risikabelt -> risikabelt", function() {deepEqual( Stem("risikabelt"), "risikabelt");});
test("risikere -> risiker", function() {deepEqual( Stem("risikere"), "risiker");});
test("risikerer -> risiker", function() {deepEqual( Stem("risikerer"), "risiker");});
test("risiko -> risiko", function() {deepEqual( Stem("risiko"), "risiko");});
test("risikoaksept -> risikoaksept", function() {deepEqual( Stem("risikoaksept"), "risikoaksept");});
test("risikoberegning -> risikoberegning", function() {deepEqual( Stem("risikoberegning"), "risikoberegning");});
test("risikobetont -> risikobetont", function() {deepEqual( Stem("risikobetont"), "risikobetont");});
test("risikoelement -> risikoelement", function() {deepEqual( Stem("risikoelement"), "risikoelement");});
test("risikoen -> risiko", function() {deepEqual( Stem("risikoen"), "risiko");});
test("risikofond -> risikofond", function() {deepEqual( Stem("risikofond"), "risikofond");});
test("risikofondet -> risikofond", function() {deepEqual( Stem("risikofondet"), "risikofond");});
test("risikoforhold -> risikoforhold", function() {deepEqual( Stem("risikoforhold"), "risikoforhold");});
test("risikoforsikringer -> risikoforsikring", function() {deepEqual( Stem("risikoforsikringer"), "risikoforsikring");});
test("risikofri -> risikofri", function() {deepEqual( Stem("risikofri"), "risikofri");});
test("risikofrie -> risikofri", function() {deepEqual( Stem("risikofrie"), "risikofri");});
test("risikofylt -> risikofylt", function() {deepEqual( Stem("risikofylt"), "risikofylt");});
test("risikofylte -> risikofylt", function() {deepEqual( Stem("risikofylte"), "risikofylt");});
test("risikokapital -> risikokapital", function() {deepEqual( Stem("risikokapital"), "risikokapital");});
test("risikokapitalen -> risikokapital", function() {deepEqual( Stem("risikokapitalen"), "risikokapital");});
test("risikomessig -> risikomess", function() {deepEqual( Stem("risikomessig"), "risikomess");});
test("risikomomentet -> risikomoment", function() {deepEqual( Stem("risikomomentet"), "risikomoment");});
test("risikomåling -> risikomåling", function() {deepEqual( Stem("risikomåling"), "risikomåling");});
test("risikonivået -> risikonivå", function() {deepEqual( Stem("risikonivået"), "risikonivå");});
test("risikoplassering -> risikoplassering", function() {deepEqual( Stem("risikoplassering"), "risikoplassering");});
test("risikopremie -> risikopremi", function() {deepEqual( Stem("risikopremie"), "risikopremi");});
test("risikopremier -> risikopremi", function() {deepEqual( Stem("risikopremier"), "risikopremi");});
test("risikoprofil -> risikoprofil", function() {deepEqual( Stem("risikoprofil"), "risikoprofil");});
test("risikospredning -> risikospredning", function() {deepEqual( Stem("risikospredning"), "risikospredning");});
test("risikotaking -> risikotaking", function() {deepEqual( Stem("risikotaking"), "risikotaking");});
test("risikoviljug -> risikoviljug", function() {deepEqual( Stem("risikoviljug"), "risikoviljug");});
test("risikovillig -> risikovil", function() {deepEqual( Stem("risikovillig"), "risikovil");});
test("risikovurderinger -> risikovurdering", function() {deepEqual( Stem("risikovurderinger"), "risikovurdering");});
test("risikoytelser -> risikoyt", function() {deepEqual( Stem("risikoytelser"), "risikoyt");});
test("risk -> risk", function() {deepEqual( Stem("risk"), "risk");});
test("risp -> risp", function() {deepEqual( Stem("risp"), "risp");});
test("risser -> riss", function() {deepEqual( Stem("risser"), "riss");});
test("risset -> riss", function() {deepEqual( Stem("risset"), "riss");});
test("riste -> rist", function() {deepEqual( Stem("riste"), "rist");});
test("rister -> rist", function() {deepEqual( Stem("rister"), "rist");});
test("ristet -> rist", function() {deepEqual( Stem("ristet"), "rist");});
test("risting -> risting", function() {deepEqual( Stem("risting"), "risting");});
test("rive -> riv", function() {deepEqual( Stem("rive"), "riv");});
test("river -> riv", function() {deepEqual( Stem("river"), "riv");});
test("rives -> riv", function() {deepEqual( Stem("rives"), "riv");});
test("rivning -> rivning", function() {deepEqual( Stem("rivning"), "rivning");});
test("ro -> ro", function() {deepEqual( Stem("ro"), "ro");});
test("roar -> roar", function() {deepEqual( Stem("roar"), "roar");});
test("robuste -> robust", function() {deepEqual( Stem("robuste"), "robust");});
test("robusthet -> robust", function() {deepEqual( Stem("robusthet"), "robust");});
test("rockwool -> rockwool", function() {deepEqual( Stem("rockwool"), "rockwool");});
test("rodd -> rodd", function() {deepEqual( Stem("rodd"), "rodd");});
test("roende -> roend", function() {deepEqual( Stem("roende"), "roend");});
test("rogaland -> rogaland", function() {deepEqual( Stem("rogaland"), "rogaland");});
test("rognebusk -> rognebusk", function() {deepEqual( Stem("rognebusk"), "rognebusk");});
test("rokvam -> rokvam", function() {deepEqual( Stem("rokvam"), "rokvam");});
test("rolig -> rol", function() {deepEqual( Stem("rolig"), "rol");});
test("roligheten -> rol", function() {deepEqual( Stem("roligheten"), "rol");});
test("roll -> roll", function() {deepEqual( Stem("roll"), "roll");});
test("rolla -> roll", function() {deepEqual( Stem("rolla"), "roll");});
test("rolle -> roll", function() {deepEqual( Stem("rolle"), "roll");});
test("rolledelingen -> rolledeling", function() {deepEqual( Stem("rolledelingen"), "rolledeling");});
test("rollefordeling -> rollefordeling", function() {deepEqual( Stem("rollefordeling"), "rollefordeling");});
test("rollen -> roll", function() {deepEqual( Stem("rollen"), "roll");});
test("roller -> roll", function() {deepEqual( Stem("roller"), "roll");});
test("rom -> rom", function() {deepEqual( Stem("rom"), "rom");});
test("romerike -> romerik", function() {deepEqual( Stem("romerike"), "romerik");});
test("romerrike -> romerrik", function() {deepEqual( Stem("romerrike"), "romerrik");});
test("rommer -> romm", function() {deepEqual( Stem("rommer"), "romm");});
test("rommet -> romm", function() {deepEqual( Stem("rommet"), "romm");});
test("romsdal -> romsdal", function() {deepEqual( Stem("romsdal"), "romsdal");});
test("romslig -> roms", function() {deepEqual( Stem("romslig"), "roms");});
test("romslige -> roms", function() {deepEqual( Stem("romslige"), "roms");});
test("rop -> rop", function() {deepEqual( Stem("rop"), "rop");});
test("rope -> rop", function() {deepEqual( Stem("rope"), "rop");});
test("roper -> rop", function() {deepEqual( Stem("roper"), "rop");});
test("ropt -> ropt", function() {deepEqual( Stem("ropt"), "ropt");});
test("ropte -> ropt", function() {deepEqual( Stem("ropte"), "ropt");});
test("ror -> ror", function() {deepEqual( Stem("ror"), "ror");});
test("roret -> ror", function() {deepEqual( Stem("roret"), "ror");});
test("ros -> ros", function() {deepEqual( Stem("ros"), "ros");});
test("roser -> ros", function() {deepEqual( Stem("roser"), "ros");});
test("roses -> ros", function() {deepEqual( Stem("roses"), "ros");});
test("roskva -> roskv", function() {deepEqual( Stem("roskva"), "roskv");});
test("roskvas -> roskv", function() {deepEqual( Stem("roskvas"), "roskv");});
test("rostiophus -> rostiophus", function() {deepEqual( Stem("rostiophus"), "rostiophus");});
test("rostratt -> rostratt", function() {deepEqual( Stem("rostratt"), "rostratt");});
test("rot -> rot", function() {deepEqual( Stem("rot"), "rot");});
test("rote -> rot", function() {deepEqual( Stem("rote"), "rot");});
test("roten -> rot", function() {deepEqual( Stem("roten"), "rot");});
test("roter -> rot", function() {deepEqual( Stem("roter"), "rot");});
test("roterminalene -> roterminal", function() {deepEqual( Stem("roterminalene"), "roterminal");});
test("roteskadar -> roteskad", function() {deepEqual( Stem("roteskadar"), "roteskad");});
test("rotet -> rot", function() {deepEqual( Stem("rotet"), "rot");});
test("rotterdam -> rotterdam", function() {deepEqual( Stem("rotterdam"), "rotterdam");});
test("rovdyrtenner -> rovdyrtenn", function() {deepEqual( Stem("rovdyrtenner"), "rovdyrtenn");});
test("rpr -> rpr", function() {deepEqual( Stem("rpr"), "rpr");});
test("rprs -> rprs", function() {deepEqual( Stem("rprs"), "rprs");});
test("rt -> rt", function() {deepEqual( Stem("rt"), "rt");});
test("rufsete -> rufset", function() {deepEqual( Stem("rufsete"), "rufset");});
test("ruger -> rug", function() {deepEqual( Stem("ruger"), "rug");});
test("rugger -> rugg", function() {deepEqual( Stem("rugger"), "rugg");});
test("rugtvedt -> rugtved", function() {deepEqual( Stem("rugtvedt"), "rugtved");});
test("ruiner -> ruin", function() {deepEqual( Stem("ruiner"), "ruin");});
test("rukket -> rukk", function() {deepEqual( Stem("rukket"), "rukk");});
test("rullende -> rull", function() {deepEqual( Stem("rullende"), "rull");});
test("ruller -> rull", function() {deepEqual( Stem("ruller"), "rull");});
test("rullering -> rullering", function() {deepEqual( Stem("rullering"), "rullering");});
test("rullestenene -> rullesten", function() {deepEqual( Stem("rullestenene"), "rullesten");});
test("rullestokkene -> rullestokk", function() {deepEqual( Stem("rullestokkene"), "rullestokk");});
test("rumpe -> rump", function() {deepEqual( Stem("rumpe"), "rump");});
test("rund -> rund", function() {deepEqual( Stem("rund"), "rund");});
test("rundar -> rund", function() {deepEqual( Stem("rundar"), "rund");});
test("runde -> rund", function() {deepEqual( Stem("runde"), "rund");});
test("rundt -> rund", function() {deepEqual( Stem("rundt"), "rund");});
test("rundtur -> rundtur", function() {deepEqual( Stem("rundtur"), "rundtur");});
test("rundturer -> rundtur", function() {deepEqual( Stem("rundturer"), "rundtur");});
test("runekunst -> runekunst", function() {deepEqual( Stem("runekunst"), "runekunst");});
test("runer -> run", function() {deepEqual( Stem("runer"), "run");});
test("runetegnene -> runetegn", function() {deepEqual( Stem("runetegnene"), "runetegn");});
test("runger -> rung", function() {deepEqual( Stem("runger"), "rung");});
test("rungne -> rungn", function() {deepEqual( Stem("rungne"), "rungn");});
test("rungnes -> rungn", function() {deepEqual( Stem("rungnes"), "rungn");});
test("rushtrafikken -> rushtrafikk", function() {deepEqual( Stem("rushtrafikken"), "rushtrafikk");});
test("rusk -> rusk", function() {deepEqual( Stem("rusk"), "rusk");});
test("rusproblem -> rusproblem", function() {deepEqual( Stem("rusproblem"), "rusproblem");});
test("russiske -> russisk", function() {deepEqual( Stem("russiske"), "russisk");});
test("russland -> russland", function() {deepEqual( Stem("russland"), "russland");});
test("ruste -> rust", function() {deepEqual( Stem("ruste"), "rust");});
test("rustet -> rust", function() {deepEqual( Stem("rustet"), "rust");});
test("rustfarget -> rustfarg", function() {deepEqual( Stem("rustfarget"), "rustfarg");});
test("rustne -> rustn", function() {deepEqual( Stem("rustne"), "rustn");});
test("rute -> rut", function() {deepEqual( Stem("rute"), "rut");});
test("rutemønster -> rutemønst", function() {deepEqual( Stem("rutemønster"), "rutemønst");});
test("rutemønstre -> rutemønstr", function() {deepEqual( Stem("rutemønstre"), "rutemønstr");});
test("ruten -> rut", function() {deepEqual( Stem("ruten"), "rut");});
test("rutene -> rut", function() {deepEqual( Stem("rutene"), "rut");});
test("rutenes -> rut", function() {deepEqual( Stem("rutenes"), "rut");});
test("rutenettet -> rutenett", function() {deepEqual( Stem("rutenettet"), "rutenett");});
test("ruteopplegg -> ruteopplegg", function() {deepEqual( Stem("ruteopplegg"), "ruteopplegg");});
test("rutepapir -> rutepapir", function() {deepEqual( Stem("rutepapir"), "rutepapir");});
test("ruter -> rut", function() {deepEqual( Stem("ruter"), "rut");});
test("rutetilbud -> rutetilbud", function() {deepEqual( Stem("rutetilbud"), "rutetilbud");});
test("rutetilbudet -> rutetilbud", function() {deepEqual( Stem("rutetilbudet"), "rutetilbud");});
test("rutinane -> rutin", function() {deepEqual( Stem("rutinane"), "rutin");});
test("rutinar -> rutin", function() {deepEqual( Stem("rutinar"), "rutin");});
test("rutine -> rutin", function() {deepEqual( Stem("rutine"), "rutin");});
test("ruver -> ruv", function() {deepEqual( Stem("ruver"), "ruv");});
test("rydda -> rydd", function() {deepEqual( Stem("rydda"), "rydd");});
test("rydder -> rydd", function() {deepEqual( Stem("rydder"), "rydd");});
test("ryddet -> rydd", function() {deepEqual( Stem("ryddet"), "rydd");});
test("ryen -> ryen", function() {deepEqual( Stem("ryen"), "ryen");});
test("rygge -> rygg", function() {deepEqual( Stem("rygge"), "rygg");});
test("ryggen -> rygg", function() {deepEqual( Stem("ryggen"), "rygg");});
test("rygger -> rygg", function() {deepEqual( Stem("rygger"), "rygg");});
test("ryke -> ryk", function() {deepEqual( Stem("ryke"), "ryk");});
test("ryker -> ryk", function() {deepEqual( Stem("ryker"), "ryk");});
test("rykk -> rykk", function() {deepEqual( Stem("rykk"), "rykk");});
test("rykke -> rykk", function() {deepEqual( Stem("rykke"), "rykk");});
test("rykker -> rykk", function() {deepEqual( Stem("rykker"), "rykk");});
test("rykket -> rykk", function() {deepEqual( Stem("rykket"), "rykk");});
test("rykter -> rykt", function() {deepEqual( Stem("rykter"), "rykt");});
test("ryktet -> rykt", function() {deepEqual( Stem("ryktet"), "rykt");});
test("rynke -> rynk", function() {deepEqual( Stem("rynke"), "rynk");});
test("rynkede -> rynk", function() {deepEqual( Stem("rynkede"), "rynk");});
test("rynkene -> rynk", function() {deepEqual( Stem("rynkene"), "rynk");});
test("rynker -> rynk", function() {deepEqual( Stem("rynker"), "rynk");});
test("rynket -> rynk", function() {deepEqual( Stem("rynket"), "rynk");});
test("rynkete -> rynket", function() {deepEqual( Stem("rynkete"), "rynket");});
test("ryster -> ryst", function() {deepEqual( Stem("ryster"), "ryst");});
test("rytter -> rytt", function() {deepEqual( Stem("rytter"), "rytt");});
test("ryttere -> rytter", function() {deepEqual( Stem("ryttere"), "rytter");});
test("rytteren -> rytter", function() {deepEqual( Stem("rytteren"), "rytter");});
test("rytterne -> ryttern", function() {deepEqual( Stem("rytterne"), "ryttern");});
test("rå -> rå", function() {deepEqual( Stem("rå"), "rå");});
test("råd -> råd", function() {deepEqual( Stem("råd"), "råd");});
test("rådde -> rådd", function() {deepEqual( Stem("rådde"), "rådd");});
test("råde -> råd", function() {deepEqual( Stem("råde"), "råd");});
test("rådene -> råd", function() {deepEqual( Stem("rådene"), "råd");});
test("råder -> råd", function() {deepEqual( Stem("råder"), "råd");});
test("råderett -> råderett", function() {deepEqual( Stem("råderett"), "råderett");});
test("råderetten -> råderett", function() {deepEqual( Stem("råderetten"), "råderett");});
test("råderettsforbod -> råderettsforbod", function() {deepEqual( Stem("råderettsforbod"), "råderettsforbod");});
test("rådet -> råd", function() {deepEqual( Stem("rådet"), "råd");});
test("rådgivende -> rådgiv", function() {deepEqual( Stem("rådgivende"), "rådgiv");});
test("rådgiver -> rådgiv", function() {deepEqual( Stem("rådgiver"), "rådgiv");});
test("rådgivere -> rådgiver", function() {deepEqual( Stem("rådgivere"), "rådgiver");});
test("rådgivning -> rådgivning", function() {deepEqual( Stem("rådgivning"), "rådgivning");});
test("rådgjevar -> rådgjev", function() {deepEqual( Stem("rådgjevar"), "rådgjev");});
test("rådgjevaren -> rådgjevar", function() {deepEqual( Stem("rådgjevaren"), "rådgjevar");});
test("rådgjevinga -> rådgjeving", function() {deepEqual( Stem("rådgjevinga"), "rådgjeving");});
test("rådighet -> råd", function() {deepEqual( Stem("rådighet"), "råd");});
test("rådsdirektiv -> rådsdirektiv", function() {deepEqual( Stem("rådsdirektiv"), "rådsdirektiv");});
test("rådslagning -> rådslagning", function() {deepEqual( Stem("rådslagning"), "rådslagning");});
test("rådsmøte -> rådsmøt", function() {deepEqual( Stem("rådsmøte"), "rådsmøt");});
test("rådsmøter -> rådsmøt", function() {deepEqual( Stem("rådsmøter"), "rådsmøt");});
test("rådsvedtak -> rådsvedtak", function() {deepEqual( Stem("rådsvedtak"), "rådsvedtak");});
test("rådvill -> rådvill", function() {deepEqual( Stem("rådvill"), "rådvill");});
test("råk -> råk", function() {deepEqual( Stem("råk"), "råk");});
test("råka -> råk", function() {deepEqual( Stem("råka"), "råk");});
test("råkar -> råk", function() {deepEqual( Stem("råkar"), "råk");});
test("råkast -> råk", function() {deepEqual( Stem("råkast"), "råk");});
test("råmaterialet -> råmaterial", function() {deepEqual( Stem("råmaterialet"), "råmaterial");});
test("rån -> rån", function() {deepEqual( Stem("rån"), "rån");});
test("rår -> rår", function() {deepEqual( Stem("rår"), "rår");});
test("råsterke -> råsterk", function() {deepEqual( Stem("råsterke"), "råsterk");});
test("råstoff -> råstoff", function() {deepEqual( Stem("råstoff"), "råstoff");});
test("råstoffer -> råstoff", function() {deepEqual( Stem("råstoffer"), "råstoff");});
test("råtne -> råtn", function() {deepEqual( Stem("råtne"), "råtn");});
test("råtner -> råtn", function() {deepEqual( Stem("råtner"), "råtn");});
test("rått -> rått", function() {deepEqual( Stem("rått"), "rått");});
test("råtten -> rått", function() {deepEqual( Stem("råtten"), "rått");});
test("råvareinntak -> råvareinntak", function() {deepEqual( Stem("råvareinntak"), "råvareinntak");});
test("råvarer -> råvar", function() {deepEqual( Stem("råvarer"), "råvar");});
test("ræsvelg -> ræsvelg", function() {deepEqual( Stem("ræsvelg"), "ræsvelg");});
test("rød -> rød", function() {deepEqual( Stem("rød"), "rød");});
test("røde -> rød", function() {deepEqual( Stem("røde"), "rød");});
test("rødeste -> rødest", function() {deepEqual( Stem("rødeste"), "rødest");});
test("rødhåret -> rødhår", function() {deepEqual( Stem("rødhåret"), "rødhår");});
test("rødmer -> rødm", function() {deepEqual( Stem("rødmer"), "rødm");});
test("rødskjeggete -> rødskjegget", function() {deepEqual( Stem("rødskjeggete"), "rødskjegget");});
test("rødsprengt -> rødsprengt", function() {deepEqual( Stem("rødsprengt"), "rødsprengt");});
test("rødt -> rødt", function() {deepEqual( Stem("rødt"), "rødt");});
test("røk -> røk", function() {deepEqual( Stem("røk"), "røk");});
test("rømme -> rømm", function() {deepEqual( Stem("rømme"), "rømm");});
test("rømmer -> rømm", function() {deepEqual( Stem("rømmer"), "rømm");});
test("røpe -> røp", function() {deepEqual( Stem("røpe"), "røp");});
test("røper -> røp", function() {deepEqual( Stem("røper"), "røp");});
test("røre -> rør", function() {deepEqual( Stem("røre"), "rør");});
test("rører -> rør", function() {deepEqual( Stem("rører"), "rør");});
test("rørt -> rørt", function() {deepEqual( Stem("rørt"), "rørt");});
test("rørte -> rørt", function() {deepEqual( Stem("rørte"), "rørt");});
test("røsker -> røsk", function() {deepEqual( Stem("røsker"), "røsk");});
test("røttene -> røtt", function() {deepEqual( Stem("røttene"), "røtt");});
test("røtter -> røtt", function() {deepEqual( Stem("røtter"), "røtt");});
test("røve -> røv", function() {deepEqual( Stem("røve"), "røv");});
test("røver -> røv", function() {deepEqual( Stem("røver"), "røv");});
test("røvet -> røv", function() {deepEqual( Stem("røvet"), "røv");});
test("røyken -> røyk", function() {deepEqual( Stem("røyken"), "røyk");});
test("røynsla -> røynsl", function() {deepEqual( Stem("røynsla"), "røynsl");});
test("røynsle -> røynsl", function() {deepEqual( Stem("røynsle"), "røynsl");});
test("røynslene -> røynsl", function() {deepEqual( Stem("røynslene"), "røynsl");});
test("røynsler -> røynsl", function() {deepEqual( Stem("røynsler"), "røynsl");});
test("røyr -> røyr", function() {deepEqual( Stem("røyr"), "røyr");});
test("røys -> røys", function() {deepEqual( Stem("røys"), "røys");});
test("røyst -> røyst", function() {deepEqual( Stem("røyst"), "røyst");});
test("røysta -> røyst", function() {deepEqual( Stem("røysta"), "røyst");});
test("røystar -> røyst", function() {deepEqual( Stem("røystar"), "røyst");});
test("røyste -> røyst", function() {deepEqual( Stem("røyste"), "røyst");});
test("røysteforklåringar -> røysteforklåring", function() {deepEqual( Stem("røysteforklåringar"), "røysteforklåring");});
test("røystene -> røyst", function() {deepEqual( Stem("røystene"), "røyst");});
test("røyster -> røyst", function() {deepEqual( Stem("røyster"), "røyst");});
test("røystereglane -> røysteregl", function() {deepEqual( Stem("røystereglane"), "røysteregl");});
test("røystereglar -> røysteregl", function() {deepEqual( Stem("røystereglar"), "røysteregl");});
test("røysterett -> røysterett", function() {deepEqual( Stem("røysterett"), "røysterett");});
test("røysteretten -> røysterett", function() {deepEqual( Stem("røysteretten"), "røysterett");});
test("røystetal -> røystetal", function() {deepEqual( Stem("røystetal"), "røystetal");});
test("røystetalet -> røystetal", function() {deepEqual( Stem("røystetalet"), "røystetal");});
test("røysting -> røysting", function() {deepEqual( Stem("røysting"), "røysting");});
test("røystinga -> røysting", function() {deepEqual( Stem("røystinga"), "røysting");});
test("røystingane -> røysting", function() {deepEqual( Stem("røystingane"), "røysting");});
test("s -> s", function() {deepEqual( Stem("s"), "s");});
test("sa -> sa", function() {deepEqual( Stem("sa"), "sa");});
test("sabo -> sabo", function() {deepEqual( Stem("sabo"), "sabo");});
test("sabotere -> saboter", function() {deepEqual( Stem("sabotere"), "saboter");});
test("sadeltøy -> sadeltøy", function() {deepEqual( Stem("sadeltøy"), "sadeltøy");});
test("saf -> saf", function() {deepEqual( Stem("saf"), "saf");});
test("safir -> safir", function() {deepEqual( Stem("safir"), "safir");});
test("sagd -> sagd", function() {deepEqual( Stem("sagd"), "sagd");});
test("sagt -> sagt", function() {deepEqual( Stem("sagt"), "sagt");});
test("sak -> sak", function() {deepEqual( Stem("sak"), "sak");});
test("saka -> sak", function() {deepEqual( Stem("saka"), "sak");});
test("saken -> sak", function() {deepEqual( Stem("saken"), "sak");});
test("sakene -> sak", function() {deepEqual( Stem("sakene"), "sak");});
test("saker -> sak", function() {deepEqual( Stem("saker"), "sak");});
test("sakleg -> sak", function() {deepEqual( Stem("sakleg"), "sak");});
test("saklege -> sak", function() {deepEqual( Stem("saklege"), "sak");});
test("saklig -> sak", function() {deepEqual( Stem("saklig"), "sak");});
test("saklige -> sak", function() {deepEqual( Stem("saklige"), "sak");});
test("saklista -> saklist", function() {deepEqual( Stem("saklista"), "saklist");});
test("sakliste -> saklist", function() {deepEqual( Stem("sakliste"), "saklist");});
test("saksbehandler -> saksbehandl", function() {deepEqual( Stem("saksbehandler"), "saksbehandl");});
test("saksbehandling -> saksbehandling", function() {deepEqual( Stem("saksbehandling"), "saksbehandling");});
test("saksbehandlinga -> saksbehandling", function() {deepEqual( Stem("saksbehandlinga"), "saksbehandling");});
test("saksbehandlingsfeil -> saksbehandlingsfeil", function() {deepEqual( Stem("saksbehandlingsfeil"), "saksbehandlingsfeil");});
test("saksbehandlingsregelen -> saksbehandlingsregel", function() {deepEqual( Stem("saksbehandlingsregelen"), "saksbehandlingsregel");});
test("saksbehandlingsregler -> saksbehandlingsregl", function() {deepEqual( Stem("saksbehandlingsregler"), "saksbehandlingsregl");});
test("saksdokument -> saksdokument", function() {deepEqual( Stem("saksdokument"), "saksdokument");});
test("saksforberedelse -> saksforbered", function() {deepEqual( Stem("saksforberedelse"), "saksforbered");});
test("saksforutsetninger -> saksforutsetning", function() {deepEqual( Stem("saksforutsetninger"), "saksforutsetning");});
test("saksområde -> saksområd", function() {deepEqual( Stem("saksområde"), "saksområd");});
test("sakspapir -> sakspapir", function() {deepEqual( Stem("sakspapir"), "sakspapir");});
test("saksøkerens -> saksøker", function() {deepEqual( Stem("saksøkerens"), "saksøker");});
test("saksøkjarane -> saksøkjar", function() {deepEqual( Stem("saksøkjarane"), "saksøkjar");});
test("saksøkjaren -> saksøkjar", function() {deepEqual( Stem("saksøkjaren"), "saksøkjar");});
test("saksøkte -> saksøkt", function() {deepEqual( Stem("saksøkte"), "saksøkt");});
test("sakte -> sakt", function() {deepEqual( Stem("sakte"), "sakt");});
test("saktens -> sakt", function() {deepEqual( Stem("saktens"), "sakt");});
test("sal -> sal", function() {deepEqual( Stem("sal"), "sal");});
test("saldo -> saldo", function() {deepEqual( Stem("saldo"), "saldo");});
test("salen -> sal", function() {deepEqual( Stem("salen"), "sal");});
test("saler -> sal", function() {deepEqual( Stem("saler"), "sal");});
test("sales -> sal", function() {deepEqual( Stem("sales"), "sal");});
test("salet -> sal", function() {deepEqual( Stem("salet"), "sal");});
test("salg -> salg", function() {deepEqual( Stem("salg"), "salg");});
test("salget -> salg", function() {deepEqual( Stem("salget"), "salg");});
test("salgsavtaler -> salgsavtal", function() {deepEqual( Stem("salgsavtaler"), "salgsavtal");});
test("salgsinntektene -> salgsinntekt", function() {deepEqual( Stem("salgsinntektene"), "salgsinntekt");});
test("salgsinntekter -> salgsinntekt", function() {deepEqual( Stem("salgsinntekter"), "salgsinntekt");});
test("salslag -> salslag", function() {deepEqual( Stem("salslag"), "salslag");});
test("salsoppdrag -> salsoppdrag", function() {deepEqual( Stem("salsoppdrag"), "salsoppdrag");});
test("salspålegg -> salspålegg", function() {deepEqual( Stem("salspålegg"), "salspålegg");});
test("salspålegget -> salspålegg", function() {deepEqual( Stem("salspålegget"), "salspålegg");});
test("salstilfella -> salstilfell", function() {deepEqual( Stem("salstilfella"), "salstilfell");});
test("salsverdi -> salsverdi", function() {deepEqual( Stem("salsverdi"), "salsverdi");});
test("salsverdien -> salsverdi", function() {deepEqual( Stem("salsverdien"), "salsverdi");});
test("salt -> salt", function() {deepEqual( Stem("salt"), "salt");});
test("saltaskene -> saltask", function() {deepEqual( Stem("saltaskene"), "saltask");});
test("salte -> salt", function() {deepEqual( Stem("salte"), "salt");});
test("salve -> salv", function() {deepEqual( Stem("salve"), "salv");});
test("salver -> salv", function() {deepEqual( Stem("salver"), "salv");});
test("saman -> saman", function() {deepEqual( Stem("saman"), "saman");});
test("samanblanding -> samanblanding", function() {deepEqual( Stem("samanblanding"), "samanblanding");});
test("samandrag -> samandrag", function() {deepEqual( Stem("samandrag"), "samandrag");});
test("samanhalde -> samanhald", function() {deepEqual( Stem("samanhalde"), "samanhald");});
test("samanhalden -> samanhald", function() {deepEqual( Stem("samanhalden"), "samanhald");});
test("samanheng -> samanheng", function() {deepEqual( Stem("samanheng"), "samanheng");});
test("samanhengar -> samanheng", function() {deepEqual( Stem("samanhengar"), "samanheng");});
test("samanhengen -> samanheng", function() {deepEqual( Stem("samanhengen"), "samanheng");});
test("samanhengens -> samanheng", function() {deepEqual( Stem("samanhengens"), "samanheng");});
test("samanknytinga -> samanknyting", function() {deepEqual( Stem("samanknytinga"), "samanknyting");});
test("samanlikna -> samanlikn", function() {deepEqual( Stem("samanlikna"), "samanlikn");});
test("samanliknar -> samanlikn", function() {deepEqual( Stem("samanliknar"), "samanlikn");});
test("samanliknast -> samanlikn", function() {deepEqual( Stem("samanliknast"), "samanlikn");});
test("samanlikne -> samanlikn", function() {deepEqual( Stem("samanlikne"), "samanlikn");});
test("samanlikning -> samanlikning", function() {deepEqual( Stem("samanlikning"), "samanlikning");});
test("samanlikninga -> samanlikning", function() {deepEqual( Stem("samanlikninga"), "samanlikning");});
test("samansett -> samansett", function() {deepEqual( Stem("samansett"), "samansett");});
test("samansette -> samansett", function() {deepEqual( Stem("samansette"), "samansett");});
test("samanskriving -> samanskriving", function() {deepEqual( Stem("samanskriving"), "samanskriving");});
test("samanslegne -> samanslegn", function() {deepEqual( Stem("samanslegne"), "samanslegn");});
test("samanslutning -> samanslutning", function() {deepEqual( Stem("samanslutning"), "samanslutning");});
test("samanslutninga -> samanslutning", function() {deepEqual( Stem("samanslutninga"), "samanslutning");});
test("samanslutningane -> samanslutning", function() {deepEqual( Stem("samanslutningane"), "samanslutning");});
test("samanslutningar -> samanslutning", function() {deepEqual( Stem("samanslutningar"), "samanslutning");});
test("samanslutningsforma -> samanslutningsform", function() {deepEqual( Stem("samanslutningsforma"), "samanslutningsform");});
test("samanslutningsformene -> samanslutningsform", function() {deepEqual( Stem("samanslutningsformene"), "samanslutningsform");});
test("samanslutningsrettsleg -> samanslutningsretts", function() {deepEqual( Stem("samanslutningsrettsleg"), "samanslutningsretts");});
test("samanslutningsrettslege -> samanslutningsretts", function() {deepEqual( Stem("samanslutningsrettslege"), "samanslutningsretts");});
test("samanslåing -> samanslåing", function() {deepEqual( Stem("samanslåing"), "samanslåing");});
test("samanslåinga -> samanslåing", function() {deepEqual( Stem("samanslåinga"), "samanslåing");});
test("samanslåingar -> samanslåing", function() {deepEqual( Stem("samanslåingar"), "samanslåing");});
test("samarbeid -> samarbeid", function() {deepEqual( Stem("samarbeid"), "samarbeid");});
test("samarbeidd -> samarbeidd", function() {deepEqual( Stem("samarbeidd"), "samarbeidd");});
test("samarbeide -> samarbeid", function() {deepEqual( Stem("samarbeide"), "samarbeid");});
test("samarbeidende -> samarbeid", function() {deepEqual( Stem("samarbeidende"), "samarbeid");});
test("samarbeider -> samarbeid", function() {deepEqual( Stem("samarbeider"), "samarbeid");});
test("samarbeidet -> samarbeid", function() {deepEqual( Stem("samarbeidet"), "samarbeid");});
test("samarbeidets -> samarbeid", function() {deepEqual( Stem("samarbeidets"), "samarbeid");});
test("samarbeidsforhold -> samarbeidsforhold", function() {deepEqual( Stem("samarbeidsforhold"), "samarbeidsforhold");});
test("samarbeidsformen -> samarbeidsform", function() {deepEqual( Stem("samarbeidsformen"), "samarbeidsform");});
test("samarbeidsformer -> samarbeidsform", function() {deepEqual( Stem("samarbeidsformer"), "samarbeidsform");});
test("samarbeidskommune -> samarbeidskommun", function() {deepEqual( Stem("samarbeidskommune"), "samarbeidskommun");});
test("samarbeidskommunene -> samarbeidskommun", function() {deepEqual( Stem("samarbeidskommunene"), "samarbeidskommun");});
test("samarbeidskommunenes -> samarbeidskommun", function() {deepEqual( Stem("samarbeidskommunenes"), "samarbeidskommun");});
test("samarbeidsløsninger -> samarbeidsløsning", function() {deepEqual( Stem("samarbeidsløsninger"), "samarbeidsløsning");});
test("samarbeidsmodeller -> samarbeidsmodell", function() {deepEqual( Stem("samarbeidsmodeller"), "samarbeidsmodell");});
test("samarbeidsområdet -> samarbeidsområd", function() {deepEqual( Stem("samarbeidsområdet"), "samarbeidsområd");});
test("samarbeidsorganer -> samarbeidsorgan", function() {deepEqual( Stem("samarbeidsorganer"), "samarbeidsorgan");});
test("samarbeidsorganet -> samarbeidsorgan", function() {deepEqual( Stem("samarbeidsorganet"), "samarbeidsorgan");});
test("samarbeidsorganisasjon -> samarbeidsorganisasjon", function() {deepEqual( Stem("samarbeidsorganisasjon"), "samarbeidsorganisasjon");});
test("samarbeidspartnar -> samarbeidspartn", function() {deepEqual( Stem("samarbeidspartnar"), "samarbeidspartn");});
test("samarbeidspartnarar -> samarbeidspartnar", function() {deepEqual( Stem("samarbeidspartnarar"), "samarbeidspartnar");});
test("samarbeidstiltak -> samarbeidstiltak", function() {deepEqual( Stem("samarbeidstiltak"), "samarbeidstiltak");});
test("samarbeidsutval -> samarbeidsutval", function() {deepEqual( Stem("samarbeidsutval"), "samarbeidsutval");});
test("samarbeidsutvala -> samarbeidsutval", function() {deepEqual( Stem("samarbeidsutvala"), "samarbeidsutval");});
test("samarbeidsutvalet -> samarbeidsutval", function() {deepEqual( Stem("samarbeidsutvalet"), "samarbeidsutval");});
test("samarbeidt -> samarbeid", function() {deepEqual( Stem("samarbeidt"), "samarbeid");});
test("samband -> samband", function() {deepEqual( Stem("samband"), "samband");});
test("sambandskomite -> sambandskomit", function() {deepEqual( Stem("sambandskomite"), "sambandskomit");});
test("samboer -> sambo", function() {deepEqual( Stem("samboer"), "sambo");});
test("sambuar -> sambu", function() {deepEqual( Stem("sambuar"), "sambu");});
test("sambuarar -> sambuar", function() {deepEqual( Stem("sambuarar"), "sambuar");});
test("sambuarforholdet -> sambuarforhold", function() {deepEqual( Stem("sambuarforholdet"), "sambuarforhold");});
test("sambuarskap -> sambuarskap", function() {deepEqual( Stem("sambuarskap"), "sambuarskap");});
test("samd -> samd", function() {deepEqual( Stem("samd"), "samd");});
test("samde -> samd", function() {deepEqual( Stem("samde"), "samd");});
test("same -> sam", function() {deepEqual( Stem("same"), "sam");});
test("sameie -> samei", function() {deepEqual( Stem("sameie"), "samei");});
test("sameieforholdet -> sameieforhold", function() {deepEqual( Stem("sameieforholdet"), "sameieforhold");});
test("sameiermøtet -> sameiermøt", function() {deepEqual( Stem("sameiermøtet"), "sameiermøt");});
test("sameiets -> samei", function() {deepEqual( Stem("sameiets"), "samei");});
test("sameiga -> sam", function() {deepEqual( Stem("sameiga"), "sam");});
test("sameigar -> sam", function() {deepEqual( Stem("sameigar"), "sam");});
test("sameigarane -> sameigar", function() {deepEqual( Stem("sameigarane"), "sameigar");});
test("sameigarar -> sameigar", function() {deepEqual( Stem("sameigarar"), "sameigar");});
test("sameigaren -> sameigar", function() {deepEqual( Stem("sameigaren"), "sameigar");});
test("sameigarmøte -> sameigarmøt", function() {deepEqual( Stem("sameigarmøte"), "sameigarmøt");});
test("sameigarmøtet -> sameigarmøt", function() {deepEqual( Stem("sameigarmøtet"), "sameigarmøt");});
test("sameige -> sam", function() {deepEqual( Stem("sameige"), "sam");});
test("sameigeforhold -> sameigeforhold", function() {deepEqual( Stem("sameigeforhold"), "sameigeforhold");});
test("sameigelova -> sameig", function() {deepEqual( Stem("sameigelova"), "sameig");});
test("sameigepart -> sameigepart", function() {deepEqual( Stem("sameigepart"), "sameigepart");});
test("sameigepartane -> sameigepart", function() {deepEqual( Stem("sameigepartane"), "sameigepart");});
test("sameigepartar -> sameigepart", function() {deepEqual( Stem("sameigepartar"), "sameigepart");});
test("sameigeparten -> sameigepart", function() {deepEqual( Stem("sameigeparten"), "sameigepart");});
test("sameiger -> sam", function() {deepEqual( Stem("sameiger"), "sam");});
test("sameigevedtektene -> sameigevedtekt", function() {deepEqual( Stem("sameigevedtektene"), "sameigevedtekt");});
test("sameigevedtekter -> sameigevedtekt", function() {deepEqual( Stem("sameigevedtekter"), "sameigevedtekt");});
test("sameinast -> samein", function() {deepEqual( Stem("sameinast"), "samein");});
test("sameine -> samein", function() {deepEqual( Stem("sameine"), "samein");});
test("sameleis -> sameleis", function() {deepEqual( Stem("sameleis"), "sameleis");});
test("samferdsel -> samferdsel", function() {deepEqual( Stem("samferdsel"), "samferdsel");});
test("samferdsels -> samferdsel", function() {deepEqual( Stem("samferdsels"), "samferdsel");});
test("samferdselsdepartement -> samferdselsdepartement", function() {deepEqual( Stem("samferdselsdepartement"), "samferdselsdepartement");});
test("samferdselsdepartementet -> samferdselsdepartement", function() {deepEqual( Stem("samferdselsdepartementet"), "samferdselsdepartement");});
test("samferdselskomiteen -> samferdselskomite", function() {deepEqual( Stem("samferdselskomiteen"), "samferdselskomite");});
test("samferdselsløsninger -> samferdselsløsning", function() {deepEqual( Stem("samferdselsløsninger"), "samferdselsløsning");});
test("samferdselsmessig -> samferdselsmess", function() {deepEqual( Stem("samferdselsmessig"), "samferdselsmess");});
test("samferdselsmessige -> samferdselsmess", function() {deepEqual( Stem("samferdselsmessige"), "samferdselsmess");});
test("samferdselsmønsteret -> samferdselsmønster", function() {deepEqual( Stem("samferdselsmønsteret"), "samferdselsmønster");});
test("samferdselsnett -> samferdselsnett", function() {deepEqual( Stem("samferdselsnett"), "samferdselsnett");});
test("samferdselsnettet -> samferdselsnett", function() {deepEqual( Stem("samferdselsnettet"), "samferdselsnett");});
test("samferdselsplanlegging -> samferdselsplanlegging", function() {deepEqual( Stem("samferdselsplanlegging"), "samferdselsplanlegging");});
test("samferdselspolitikken -> samferdselspolitikk", function() {deepEqual( Stem("samferdselspolitikken"), "samferdselspolitikk");});
test("samferdselspolitisk -> samferdselspolitisk", function() {deepEqual( Stem("samferdselspolitisk"), "samferdselspolitisk");});
test("samferdselspolitiske -> samferdselspolitisk", function() {deepEqual( Stem("samferdselspolitiske"), "samferdselspolitisk");});
test("samferdselssektoren -> samferdselssektor", function() {deepEqual( Stem("samferdselssektoren"), "samferdselssektor");});
test("samferdselstilbudet -> samferdselstilbud", function() {deepEqual( Stem("samferdselstilbudet"), "samferdselstilbud");});
test("samfunn -> samfunn", function() {deepEqual( Stem("samfunn"), "samfunn");});
test("samfunnet -> samfunn", function() {deepEqual( Stem("samfunnet"), "samfunn");});
test("samfunnets -> samfunn", function() {deepEqual( Stem("samfunnets"), "samfunn");});
test("samfunns -> samfunn", function() {deepEqual( Stem("samfunns"), "samfunn");});
test("samfunnsansvar -> samfunnsansv", function() {deepEqual( Stem("samfunnsansvar"), "samfunnsansv");});
test("samfunnsforskning -> samfunnsforskning", function() {deepEqual( Stem("samfunnsforskning"), "samfunnsforskning");});
test("samfunnshensyn -> samfunnshensyn", function() {deepEqual( Stem("samfunnshensyn"), "samfunnshensyn");});
test("samfunnsinteresser -> samfunnsinteress", function() {deepEqual( Stem("samfunnsinteresser"), "samfunnsinteress");});
test("samfunnsmessige -> samfunnsmess", function() {deepEqual( Stem("samfunnsmessige"), "samfunnsmess");});
test("samfunnsnyttig -> samfunnsnytt", function() {deepEqual( Stem("samfunnsnyttig"), "samfunnsnytt");});
test("samfunnsøkonomisk -> samfunnsøkonomisk", function() {deepEqual( Stem("samfunnsøkonomisk"), "samfunnsøkonomisk");});
test("samfunnsøkonomiske -> samfunnsøkonomisk", function() {deepEqual( Stem("samfunnsøkonomiske"), "samfunnsøkonomisk");});
test("samhandel -> samhandel", function() {deepEqual( Stem("samhandel"), "samhandel");});
test("samhandelen -> samhandel", function() {deepEqual( Stem("samhandelen"), "samhandel");});
test("samhandlar -> samhandl", function() {deepEqual( Stem("samhandlar"), "samhandl");});
test("samhandle -> samhandl", function() {deepEqual( Stem("samhandle"), "samhandl");});
test("samkjøringsgevinster -> samkjøringsgevinst", function() {deepEqual( Stem("samkjøringsgevinster"), "samkjøringsgevinst");});
test("samkvem -> samkvem", function() {deepEqual( Stem("samkvem"), "samkvem");});
test("samla -> saml", function() {deepEqual( Stem("samla"), "saml");});
test("samlande -> saml", function() {deepEqual( Stem("samlande"), "saml");});
test("samlar -> saml", function() {deepEqual( Stem("samlar"), "saml");});
test("samlast -> saml", function() {deepEqual( Stem("samlast"), "saml");});
test("samlastere -> samlaster", function() {deepEqual( Stem("samlastere"), "samlaster");});
test("samlasterne -> samlastern", function() {deepEqual( Stem("samlasterne"), "samlastern");});
test("samlasternes -> samlastern", function() {deepEqual( Stem("samlasternes"), "samlastern");});
test("samlastgods -> samlastgod", function() {deepEqual( Stem("samlastgods"), "samlastgod");});
test("samlasting -> samlasting", function() {deepEqual( Stem("samlasting"), "samlasting");});
test("samlastsentralene -> samlastsentral", function() {deepEqual( Stem("samlastsentralene"), "samlastsentral");});
test("samlastterminal -> samlastterminal", function() {deepEqual( Stem("samlastterminal"), "samlastterminal");});
test("samlastterminalene -> samlastterminal", function() {deepEqual( Stem("samlastterminalene"), "samlastterminal");});
test("samlastterminaler -> samlastterminal", function() {deepEqual( Stem("samlastterminaler"), "samlastterminal");});
test("samle -> saml", function() {deepEqual( Stem("samle"), "saml");});
test("samlede -> saml", function() {deepEqual( Stem("samlede"), "saml");});
test("samler -> saml", function() {deepEqual( Stem("samler"), "saml");});
test("samles -> saml", function() {deepEqual( Stem("samles"), "saml");});
test("samleseksjon -> samleseksjon", function() {deepEqual( Stem("samleseksjon"), "samleseksjon");});
test("samlet -> saml", function() {deepEqual( Stem("samlet"), "saml");});
test("samling -> samling", function() {deepEqual( Stem("samling"), "samling");});
test("samlivsbrot -> samlivsbrot", function() {deepEqual( Stem("samlivsbrot"), "samlivsbrot");});
test("samlokalisering -> samlokalisering", function() {deepEqual( Stem("samlokalisering"), "samlokalisering");});
test("samlokaliseringen -> samlokalisering", function() {deepEqual( Stem("samlokaliseringen"), "samlokalisering");});
test("samme -> samm", function() {deepEqual( Stem("samme"), "samm");});
test("sammelignbare -> sammelignbar", function() {deepEqual( Stem("sammelignbare"), "sammelignbar");});
test("sammen -> samm", function() {deepEqual( Stem("sammen"), "samm");});
test("sammenblanding -> sammenblanding", function() {deepEqual( Stem("sammenblanding"), "sammenblanding");});
test("sammendrag -> sammendrag", function() {deepEqual( Stem("sammendrag"), "sammendrag");});
test("sammendraget -> sammendrag", function() {deepEqual( Stem("sammendraget"), "sammendrag");});
test("sammenfall -> sammenfall", function() {deepEqual( Stem("sammenfall"), "sammenfall");});
test("sammenfallende -> sammenfall", function() {deepEqual( Stem("sammenfallende"), "sammenfall");});
test("sammenheng -> sammenheng", function() {deepEqual( Stem("sammenheng"), "sammenheng");});
test("sammenhengen -> sammenheng", function() {deepEqual( Stem("sammenhengen"), "sammenheng");});
test("sammenhengende -> sammenheng", function() {deepEqual( Stem("sammenhengende"), "sammenheng");});
test("sammenhenger -> sammenheng", function() {deepEqual( Stem("sammenhenger"), "sammenheng");});
test("sammenholder -> sammenhold", function() {deepEqual( Stem("sammenholder"), "sammenhold");});
test("sammenholdt -> sammenhold", function() {deepEqual( Stem("sammenholdt"), "sammenhold");});
test("sammenknytning -> sammenknytning", function() {deepEqual( Stem("sammenknytning"), "sammenknytning");});
test("sammenlagt -> sammenlagt", function() {deepEqual( Stem("sammenlagt"), "sammenlagt");});
test("sammenlignbar -> sammenlignb", function() {deepEqual( Stem("sammenlignbar"), "sammenlignb");});
test("sammenlignbare -> sammenlignbar", function() {deepEqual( Stem("sammenlignbare"), "sammenlignbar");});
test("sammenlignbarhet -> sammenlignbar", function() {deepEqual( Stem("sammenlignbarhet"), "sammenlignbar");});
test("sammenligne -> sammenlign", function() {deepEqual( Stem("sammenligne"), "sammenlign");});
test("sammenligner -> sammenlign", function() {deepEqual( Stem("sammenligner"), "sammenlign");});
test("sammenlignet -> sammenlign", function() {deepEqual( Stem("sammenlignet"), "sammenlign");});
test("sammenligning -> sammenligning", function() {deepEqual( Stem("sammenligning"), "sammenligning");});
test("sammenligninger -> sammenligning", function() {deepEqual( Stem("sammenligninger"), "sammenligning");});
test("sammenliknbare -> sammenliknbar", function() {deepEqual( Stem("sammenliknbare"), "sammenliknbar");});
test("sammenlikne -> sammenlikn", function() {deepEqual( Stem("sammenlikne"), "sammenlikn");});
test("sammenlikner -> sammenlikn", function() {deepEqual( Stem("sammenlikner"), "sammenlikn");});
test("sammenliknet -> sammenlikn", function() {deepEqual( Stem("sammenliknet"), "sammenlikn");});
test("sammenlikning -> sammenlikning", function() {deepEqual( Stem("sammenlikning"), "sammenlikning");});
test("sammenlikningen -> sammenlikning", function() {deepEqual( Stem("sammenlikningen"), "sammenlikning");});
test("sammenlikninger -> sammenlikning", function() {deepEqual( Stem("sammenlikninger"), "sammenlikning");});
test("sammensatt -> sammensatt", function() {deepEqual( Stem("sammensatt"), "sammensatt");});
test("sammensatte -> sammensatt", function() {deepEqual( Stem("sammensatte"), "sammensatt");});
test("sammensetning -> sammensetning", function() {deepEqual( Stem("sammensetning"), "sammensetning");});
test("sammensetningen -> sammensetning", function() {deepEqual( Stem("sammensetningen"), "sammensetning");});
test("sammensettes -> sammensett", function() {deepEqual( Stem("sammensettes"), "sammensett");});
test("sammenslutning -> sammenslutning", function() {deepEqual( Stem("sammenslutning"), "sammenslutning");});
test("sammenslutningen -> sammenslutning", function() {deepEqual( Stem("sammenslutningen"), "sammenslutning");});
test("sammenslutninger -> sammenslutning", function() {deepEqual( Stem("sammenslutninger"), "sammenslutning");});
test("sammenslåing -> sammenslåing", function() {deepEqual( Stem("sammenslåing"), "sammenslåing");});
test("sammenslåingen -> sammenslåing", function() {deepEqual( Stem("sammenslåingen"), "sammenslåing");});
test("sammenslåinger -> sammenslåing", function() {deepEqual( Stem("sammenslåinger"), "sammenslåing");});
test("sammenslåingsprosess -> sammenslåingsprosess", function() {deepEqual( Stem("sammenslåingsprosess"), "sammenslåingsprosess");});
test("sammenslåingsvariant -> sammenslåingsvariant", function() {deepEqual( Stem("sammenslåingsvariant"), "sammenslåingsvariant");});
test("sammenslåtte -> sammenslått", function() {deepEqual( Stem("sammenslåtte"), "sammenslått");});
test("sammenstilling -> sammenstilling", function() {deepEqual( Stem("sammenstilling"), "sammenstilling");});
test("sammenstøtet -> sammenstøt", function() {deepEqual( Stem("sammenstøtet"), "sammenstøt");});
test("samordna -> samordn", function() {deepEqual( Stem("samordna"), "samordn");});
test("samordnast -> samordn", function() {deepEqual( Stem("samordnast"), "samordn");});
test("samordne -> samordn", function() {deepEqual( Stem("samordne"), "samordn");});
test("samordnende -> samordn", function() {deepEqual( Stem("samordnende"), "samordn");});
test("samordner -> samordn", function() {deepEqual( Stem("samordner"), "samordn");});
test("samordnet -> samordn", function() {deepEqual( Stem("samordnet"), "samordn");});
test("samordning -> samordning", function() {deepEqual( Stem("samordning"), "samordning");});
test("samordninga -> samordning", function() {deepEqual( Stem("samordninga"), "samordning");});
test("samordningen -> samordning", function() {deepEqual( Stem("samordningen"), "samordning");});
test("samråd -> samråd", function() {deepEqual( Stem("samråd"), "samråd");});
test("samrøystes -> samrøyst", function() {deepEqual( Stem("samrøystes"), "samrøyst");});
test("sams -> sam", function() {deepEqual( Stem("sams"), "sam");});
test("samspel -> samspel", function() {deepEqual( Stem("samspel"), "samspel");});
test("samspelet -> samspel", function() {deepEqual( Stem("samspelet"), "samspel");});
test("samspill -> samspill", function() {deepEqual( Stem("samspill"), "samspill");});
test("samstundes -> samstund", function() {deepEqual( Stem("samstundes"), "samstund");});
test("samsvar -> samsv", function() {deepEqual( Stem("samsvar"), "samsv");});
test("samsvarar -> samsvar", function() {deepEqual( Stem("samsvarar"), "samsvar");});
test("samsvarer -> samsvar", function() {deepEqual( Stem("samsvarer"), "samsvar");});
test("samsvaret -> samsvar", function() {deepEqual( Stem("samsvaret"), "samsvar");});
test("samsøy -> samsøy", function() {deepEqual( Stem("samsøy"), "samsøy");});
test("samt -> samt", function() {deepEqual( Stem("samt"), "samt");});
test("samtale -> samtal", function() {deepEqual( Stem("samtale"), "samtal");});
test("samtaler -> samtal", function() {deepEqual( Stem("samtaler"), "samtal");});
test("samtidig -> samtid", function() {deepEqual( Stem("samtidig"), "samtid");});
test("samtidige -> samtid", function() {deepEqual( Stem("samtidige"), "samtid");});
test("samtlige -> samt", function() {deepEqual( Stem("samtlige"), "samt");});
test("samtykka -> samtykk", function() {deepEqual( Stem("samtykka"), "samtykk");});
test("samtykke -> samtykk", function() {deepEqual( Stem("samtykke"), "samtykk");});
test("samtykkeregelen -> samtykkeregel", function() {deepEqual( Stem("samtykkeregelen"), "samtykkeregel");});
test("samtykket -> samtykk", function() {deepEqual( Stem("samtykket"), "samtykk");});
test("samtykkje -> samtykkj", function() {deepEqual( Stem("samtykkje"), "samtykkj");});
test("samtykkjer -> samtykkj", function() {deepEqual( Stem("samtykkjer"), "samtykkj");});
test("samtykt -> samtykt", function() {deepEqual( Stem("samtykt"), "samtykt");});
test("samvariasjon -> samvariasjon", function() {deepEqual( Stem("samvariasjon"), "samvariasjon");});
test("samverkan -> samverkan", function() {deepEqual( Stem("samverkan"), "samverkan");});
test("samvirka -> samvirk", function() {deepEqual( Stem("samvirka"), "samvirk");});
test("samvirke -> samvirk", function() {deepEqual( Stem("samvirke"), "samvirk");});
test("samvirkeboka -> samvirkebok", function() {deepEqual( Stem("samvirkeboka"), "samvirkebok");});
test("samvirkeforma -> samvirkeform", function() {deepEqual( Stem("samvirkeforma"), "samvirkeform");});
test("samvirkeføretak -> samvirkeføretak", function() {deepEqual( Stem("samvirkeføretak"), "samvirkeføretak");});
test("samvirkeføretaka -> samvirkeføretak", function() {deepEqual( Stem("samvirkeføretaka"), "samvirkeføretak");});
test("samvirkeføretaket -> samvirkeføretak", function() {deepEqual( Stem("samvirkeføretaket"), "samvirkeføretak");});
test("samvirkelag -> samvirkelag", function() {deepEqual( Stem("samvirkelag"), "samvirkelag");});
test("samvirkelaga -> samvirkelag", function() {deepEqual( Stem("samvirkelaga"), "samvirkelag");});
test("samvirkelaget -> samvirkelag", function() {deepEqual( Stem("samvirkelaget"), "samvirkelag");});
test("samvirkelov -> samvirk", function() {deepEqual( Stem("samvirkelov"), "samvirk");});
test("samvirkelovutvalet -> samvirkelovutval", function() {deepEqual( Stem("samvirkelovutvalet"), "samvirkelovutval");});
test("samvirkeorganisasjon -> samvirkeorganisasjon", function() {deepEqual( Stem("samvirkeorganisasjon"), "samvirkeorganisasjon");});
test("samvirkeorganisasjonane -> samvirkeorganisasjon", function() {deepEqual( Stem("samvirkeorganisasjonane"), "samvirkeorganisasjon");});
test("samvirkeorganisasjonar -> samvirkeorganisasjon", function() {deepEqual( Stem("samvirkeorganisasjonar"), "samvirkeorganisasjon");});
test("samvirkeorganisering -> samvirkeorganisering", function() {deepEqual( Stem("samvirkeorganisering"), "samvirkeorganisering");});
test("samvirkepreget -> samvirkepreg", function() {deepEqual( Stem("samvirkepreget"), "samvirkepreg");});
test("samvirkeprinsipp -> samvirkeprinsipp", function() {deepEqual( Stem("samvirkeprinsipp"), "samvirkeprinsipp");});
test("samvirkeprinsippa -> samvirkeprinsipp", function() {deepEqual( Stem("samvirkeprinsippa"), "samvirkeprinsipp");});
test("samvirkeprinsipper -> samvirkeprinsipp", function() {deepEqual( Stem("samvirkeprinsipper"), "samvirkeprinsipp");});
test("samvirkerørsla -> samvirkerørsl", function() {deepEqual( Stem("samvirkerørsla"), "samvirkerørsl");});
test("samvirkesamanheng -> samvirkesamanheng", function() {deepEqual( Stem("samvirkesamanheng"), "samvirkesamanheng");});
test("samvirket -> samvirk", function() {deepEqual( Stem("samvirket"), "samvirk");});
test("samvirketiltak -> samvirketiltak", function() {deepEqual( Stem("samvirketiltak"), "samvirketiltak");});
test("samvirketiltaka -> samvirketiltak", function() {deepEqual( Stem("samvirketiltaka"), "samvirketiltak");});
test("samvirkeutvalget -> samvirkeutvalg", function() {deepEqual( Stem("samvirkeutvalget"), "samvirkeutvalg");});
test("samvittighet -> samvitt", function() {deepEqual( Stem("samvittighet"), "samvitt");});
test("sand -> sand", function() {deepEqual( Stem("sand"), "sand");});
test("sandefjord -> sandefjord", function() {deepEqual( Stem("sandefjord"), "sandefjord");});
test("sandessjøen -> sandessjø", function() {deepEqual( Stem("sandessjøen"), "sandessjø");});
test("sandnessjøen -> sandnessjø", function() {deepEqual( Stem("sandnessjøen"), "sandnessjø");});
test("sandstrand -> sandstrand", function() {deepEqual( Stem("sandstrand"), "sandstrand");});
test("sanerast -> saner", function() {deepEqual( Stem("sanerast"), "saner");});
test("sang -> sang", function() {deepEqual( Stem("sang"), "sang");});
test("sanger -> sang", function() {deepEqual( Stem("sanger"), "sang");});
test("sanksjoner -> sanksjon", function() {deepEqual( Stem("sanksjoner"), "sanksjon");});
test("sann -> sann", function() {deepEqual( Stem("sann"), "sann");});
test("sannelig -> sann", function() {deepEqual( Stem("sannelig"), "sann");});
test("sannhet -> sann", function() {deepEqual( Stem("sannhet"), "sann");});
test("sannheten -> sann", function() {deepEqual( Stem("sannheten"), "sann");});
test("sannsynlig -> sannsyn", function() {deepEqual( Stem("sannsynlig"), "sannsyn");});
test("sannsynlige -> sannsyn", function() {deepEqual( Stem("sannsynlige"), "sannsyn");});
test("sannsynliggjøre -> sannsynliggjør", function() {deepEqual( Stem("sannsynliggjøre"), "sannsynliggjør");});
test("sannsynlighet -> sannsyn", function() {deepEqual( Stem("sannsynlighet"), "sannsyn");});
test("sannsynligheten -> sannsyn", function() {deepEqual( Stem("sannsynligheten"), "sannsyn");});
test("sannsynligvis -> sannsynligvis", function() {deepEqual( Stem("sannsynligvis"), "sannsynligvis");});
test("sans -> san", function() {deepEqual( Stem("sans"), "san");});
test("sanser -> sans", function() {deepEqual( Stem("sanser"), "sans");});
test("sant -> sant", function() {deepEqual( Stem("sant"), "sant");});
test("sarpsborg -> sarpsborg", function() {deepEqual( Stem("sarpsborg"), "sarpsborg");});
test("sarskild -> sarskild", function() {deepEqual( Stem("sarskild"), "sarskild");});
test("sarskilda -> sarskild", function() {deepEqual( Stem("sarskilda"), "sarskild");});
test("sats -> sat", function() {deepEqual( Stem("sats"), "sat");});
test("satsa -> sats", function() {deepEqual( Stem("satsa"), "sats");});
test("satse -> sats", function() {deepEqual( Stem("satse"), "sats");});
test("satsen -> sats", function() {deepEqual( Stem("satsen"), "sats");});
test("satsene -> sats", function() {deepEqual( Stem("satsene"), "sats");});
test("satser -> sats", function() {deepEqual( Stem("satser"), "sats");});
test("satses -> sats", function() {deepEqual( Stem("satses"), "sats");});
test("satset -> sats", function() {deepEqual( Stem("satset"), "sats");});
test("satsing -> satsing", function() {deepEqual( Stem("satsing"), "satsing");});
test("satsingsområde -> satsingsområd", function() {deepEqual( Stem("satsingsområde"), "satsingsområd");});
test("satsstruktur -> satsstruktur", function() {deepEqual( Stem("satsstruktur"), "satsstruktur");});
test("satsstrukturen -> satsstruktur", function() {deepEqual( Stem("satsstrukturen"), "satsstruktur");});
test("satsstrukturene -> satsstruktur", function() {deepEqual( Stem("satsstrukturene"), "satsstruktur");});
test("satsstrukturer -> satsstruktur", function() {deepEqual( Stem("satsstrukturer"), "satsstruktur");});
test("satt -> satt", function() {deepEqual( Stem("satt"), "satt");});
test("satte -> satt", function() {deepEqual( Stem("satte"), "satt");});
test("sauene -> sauen", function() {deepEqual( Stem("sauene"), "sauen");});
test("sauer -> sauer", function() {deepEqual( Stem("sauer"), "sauer");});
test("saugbrugsforeningen -> saugbrugsforening", function() {deepEqual( Stem("saugbrugsforeningen"), "saugbrugsforening");});
test("saugbruksforeningen -> saugbruksforening", function() {deepEqual( Stem("saugbruksforeningen"), "saugbruksforening");});
test("sauholmene -> sauholm", function() {deepEqual( Stem("sauholmene"), "sauholm");});
test("sauøya -> sauøya", function() {deepEqual( Stem("sauøya"), "sauøya");});
test("savner -> savn", function() {deepEqual( Stem("savner"), "savn");});
test("sbc -> sbc", function() {deepEqual( Stem("sbc"), "sbc");});
test("scan -> scan", function() {deepEqual( Stem("scan"), "scan");});
test("scanproof -> scanproof", function() {deepEqual( Stem("scanproof"), "scanproof");});
test("scc -> scc", function() {deepEqual( Stem("scc"), "scc");});
test("scenariebeskrivelsene -> scenariebeskriv", function() {deepEqual( Stem("scenariebeskrivelsene"), "scenariebeskriv");});
test("scenarier -> scenari", function() {deepEqual( Stem("scenarier"), "scenari");});
test("scenario -> scenario", function() {deepEqual( Stem("scenario"), "scenario");});
test("schwencke -> schwenck", function() {deepEqual( Stem("schwencke"), "schwenck");});
test("schøne -> schøn", function() {deepEqual( Stem("schøne"), "schøn");});
test("score -> scor", function() {deepEqual( Stem("score"), "scor");});
test("se -> se", function() {deepEqual( Stem("se"), "se");});
test("sea -> sea", function() {deepEqual( Stem("sea"), "sea");});
test("sedd -> sedd", function() {deepEqual( Stem("sedd"), "sedd");});
test("sedde -> sedd", function() {deepEqual( Stem("sedde"), "sedd");});
test("sees -> sees", function() {deepEqual( Stem("sees"), "sees");});
test("seg -> seg", function() {deepEqual( Stem("seg"), "seg");});
test("segment -> segment", function() {deepEqual( Stem("segment"), "segment");});
test("segmenter -> segment", function() {deepEqual( Stem("segmenter"), "segment");});
test("segner -> segn", function() {deepEqual( Stem("segner"), "segn");});
test("seiast -> seiast", function() {deepEqual( Stem("seiast"), "seiast");});
test("seid -> seid", function() {deepEqual( Stem("seid"), "seid");});
test("seie -> seie", function() {deepEqual( Stem("seie"), "seie");});
test("seier -> seier", function() {deepEqual( Stem("seier"), "seier");});
test("seil -> seil", function() {deepEqual( Stem("seil"), "seil");});
test("seilas -> seil", function() {deepEqual( Stem("seilas"), "seil");});
test("seilbare -> seilbar", function() {deepEqual( Stem("seilbare"), "seilbar");});
test("seile -> seil", function() {deepEqual( Stem("seile"), "seil");});
test("seilene -> seil", function() {deepEqual( Stem("seilene"), "seil");});
test("seiler -> seil", function() {deepEqual( Stem("seiler"), "seil");});
test("seilet -> seil", function() {deepEqual( Stem("seilet"), "seil");});
test("seilingsforhold -> seilingsforhold", function() {deepEqual( Stem("seilingsforhold"), "seilingsforhold");});
test("seilingsopplegg -> seilingsopplegg", function() {deepEqual( Stem("seilingsopplegg"), "seilingsopplegg");});
test("seilingsreglene -> seilingsregl", function() {deepEqual( Stem("seilingsreglene"), "seilingsregl");});
test("seilingsregler -> seilingsregl", function() {deepEqual( Stem("seilingsregler"), "seilingsregl");});
test("seilingstider -> seilingstid", function() {deepEqual( Stem("seilingstider"), "seilingstid");});
test("seilt -> seilt", function() {deepEqual( Stem("seilt"), "seilt");});
test("sein -> sein", function() {deepEqual( Stem("sein"), "sein");});
test("seinare -> seinar", function() {deepEqual( Stem("seinare"), "seinar");});
test("seinast -> sein", function() {deepEqual( Stem("seinast"), "sein");});
test("seinaste -> seinast", function() {deepEqual( Stem("seinaste"), "seinast");});
test("seinere -> seiner", function() {deepEqual( Stem("seinere"), "seiner");});
test("seinke -> seink", function() {deepEqual( Stem("seinke"), "seink");});
test("seint -> seint", function() {deepEqual( Stem("seint"), "seint");});
test("seire -> seir", function() {deepEqual( Stem("seire"), "seir");});
test("seiren -> seir", function() {deepEqual( Stem("seiren"), "seir");});
test("seirens -> seir", function() {deepEqual( Stem("seirens"), "seir");});
test("seirer -> seir", function() {deepEqual( Stem("seirer"), "seir");});
test("seiret -> seir", function() {deepEqual( Stem("seiret"), "seir");});
test("sek -> sek", function() {deepEqual( Stem("sek"), "sek");});
test("sekk -> sekk", function() {deepEqual( Stem("sekk"), "sekk");});
test("sekken -> sekk", function() {deepEqual( Stem("sekken"), "sekk");});
test("sekretariat -> sekretariat", function() {deepEqual( Stem("sekretariat"), "sekretariat");});
test("sekretariatet -> sekretariat", function() {deepEqual( Stem("sekretariatet"), "sekretariat");});
test("sekretær -> sekretær", function() {deepEqual( Stem("sekretær"), "sekretær");});
test("seks -> seks", function() {deepEqual( Stem("seks"), "seks");});
test("seksjon -> seksjon", function() {deepEqual( Stem("seksjon"), "seksjon");});
test("seksjonane -> seksjon", function() {deepEqual( Stem("seksjonane"), "seksjon");});
test("seksjonar -> seksjon", function() {deepEqual( Stem("seksjonar"), "seksjon");});
test("seksjonen -> seksjon", function() {deepEqual( Stem("seksjonen"), "seksjon");});
test("seksjoner -> seksjon", function() {deepEqual( Stem("seksjoner"), "seksjon");});
test("seksjonering -> seksjonering", function() {deepEqual( Stem("seksjonering"), "seksjonering");});
test("seksjoneringa -> seksjonering", function() {deepEqual( Stem("seksjoneringa"), "seksjonering");});
test("seksjonerte -> seksjoner", function() {deepEqual( Stem("seksjonerte"), "seksjoner");});
test("seksjonsameiga -> seksjonsam", function() {deepEqual( Stem("seksjonsameiga"), "seksjonsam");});
test("seksjonseigarane -> seksjonseigar", function() {deepEqual( Stem("seksjonseigarane"), "seksjonseigar");});
test("seksjonseigarar -> seksjonseigar", function() {deepEqual( Stem("seksjonseigarar"), "seksjonseigar");});
test("seksjonseigaren -> seksjonseigar", function() {deepEqual( Stem("seksjonseigaren"), "seksjonseigar");});
test("seksjonsforma -> seksjonsform", function() {deepEqual( Stem("seksjonsforma"), "seksjonsform");});
test("seksjonssameier -> seksjonssamei", function() {deepEqual( Stem("seksjonssameier"), "seksjonssamei");});
test("seksjonssameiga -> seksjonssam", function() {deepEqual( Stem("seksjonssameiga"), "seksjonssam");});
test("seksjonssameigarar -> seksjonssameigar", function() {deepEqual( Stem("seksjonssameigarar"), "seksjonssameigar");});
test("seksjonssameige -> seksjonssam", function() {deepEqual( Stem("seksjonssameige"), "seksjonssam");});
test("seksjonssameigene -> seksjonssam", function() {deepEqual( Stem("seksjonssameigene"), "seksjonssam");});
test("seksjonssameiger -> seksjonssam", function() {deepEqual( Stem("seksjonssameiger"), "seksjonssam");});
test("seksjonssjef -> seksjonssjef", function() {deepEqual( Stem("seksjonssjef"), "seksjonssjef");});
test("sektor -> sektor", function() {deepEqual( Stem("sektor"), "sektor");});
test("sektorar -> sektor", function() {deepEqual( Stem("sektorar"), "sektor");});
test("sektoren -> sektor", function() {deepEqual( Stem("sektoren"), "sektor");});
test("sektorer -> sektor", function() {deepEqual( Stem("sektorer"), "sektor");});
test("sektors -> sektor", function() {deepEqual( Stem("sektors"), "sektor");});
test("sektorvise -> sektorvis", function() {deepEqual( Stem("sektorvise"), "sektorvis");});
test("sekundærpantsetjing -> sekundærpantsetjing", function() {deepEqual( Stem("sekundærpantsetjing"), "sekundærpantsetjing");});
test("sekundært -> sekundært", function() {deepEqual( Stem("sekundært"), "sekundært");});
test("sel -> sel", function() {deepEqual( Stem("sel"), "sel");});
test("seld -> seld", function() {deepEqual( Stem("seld"), "seld");});
test("selde -> seld", function() {deepEqual( Stem("selde"), "seld");});
test("seleksjon -> seleksjon", function() {deepEqual( Stem("seleksjon"), "seleksjon");});
test("seleksjonsproblemene -> seleksjonsproblem", function() {deepEqual( Stem("seleksjonsproblemene"), "seleksjonsproblem");});
test("seleksjonsproblemer -> seleksjonsproblem", function() {deepEqual( Stem("seleksjonsproblemer"), "seleksjonsproblem");});
test("selene -> sel", function() {deepEqual( Stem("selene"), "sel");});
test("seler -> sel", function() {deepEqual( Stem("seler"), "sel");});
test("selge -> selg", function() {deepEqual( Stem("selge"), "selg");});
test("selges -> selg", function() {deepEqual( Stem("selges"), "selg");});
test("seljar -> selj", function() {deepEqual( Stem("seljar"), "selj");});
test("seljaransvar -> seljaransv", function() {deepEqual( Stem("seljaransvar"), "seljaransv");});
test("seljarar -> seljar", function() {deepEqual( Stem("seljarar"), "seljar");});
test("seljaren -> seljar", function() {deepEqual( Stem("seljaren"), "seljar");});
test("seljast -> selj", function() {deepEqual( Stem("seljast"), "selj");});
test("selje -> selj", function() {deepEqual( Stem("selje"), "selj");});
test("seljefløyte -> seljefløyt", function() {deepEqual( Stem("seljefløyte"), "seljefløyt");});
test("selskabsformerne -> selskabsformern", function() {deepEqual( Stem("selskabsformerne"), "selskabsformern");});
test("selskap -> selskap", function() {deepEqual( Stem("selskap"), "selskap");});
test("selskapa -> selskap", function() {deepEqual( Stem("selskapa"), "selskap");});
test("selskapene -> selskap", function() {deepEqual( Stem("selskapene"), "selskap");});
test("selskapenes -> selskap", function() {deepEqual( Stem("selskapenes"), "selskap");});
test("selskaper -> selskap", function() {deepEqual( Stem("selskaper"), "selskap");});
test("selskapers -> selskap", function() {deepEqual( Stem("selskapers"), "selskap");});
test("selskapet -> selskap", function() {deepEqual( Stem("selskapet"), "selskap");});
test("selskapets -> selskap", function() {deepEqual( Stem("selskapets"), "selskap");});
test("selskaps -> selskap", function() {deepEqual( Stem("selskaps"), "selskap");});
test("selskapsavtalen -> selskapsavtal", function() {deepEqual( Stem("selskapsavtalen"), "selskapsavtal");});
test("selskapsdirektiv -> selskapsdirektiv", function() {deepEqual( Stem("selskapsdirektiv"), "selskapsdirektiv");});
test("selskapsendringer -> selskapsendring", function() {deepEqual( Stem("selskapsendringer"), "selskapsendring");});
test("selskapsform -> selskapsform", function() {deepEqual( Stem("selskapsform"), "selskapsform");});
test("selskapsformer -> selskapsform", function() {deepEqual( Stem("selskapsformer"), "selskapsform");});
test("selskapskreditorar -> selskapskreditor", function() {deepEqual( Stem("selskapskreditorar"), "selskapskreditor");});
test("selskapslova -> selskap", function() {deepEqual( Stem("selskapslova"), "selskap");});
test("selskapsloven -> selskap", function() {deepEqual( Stem("selskapsloven"), "selskap");});
test("selskapspartane -> selskapspart", function() {deepEqual( Stem("selskapspartane"), "selskapspart");});
test("selskapspartar -> selskapspart", function() {deepEqual( Stem("selskapspartar"), "selskapspart");});
test("selskapsrettsleg -> selskapsretts", function() {deepEqual( Stem("selskapsrettsleg"), "selskapsretts");});
test("selskapsrettslege -> selskapsretts", function() {deepEqual( Stem("selskapsrettslege"), "selskapsretts");});
test("selskapsrettslige -> selskapsretts", function() {deepEqual( Stem("selskapsrettslige"), "selskapsretts");});
test("selskapsskattelov -> selskapsskatt", function() {deepEqual( Stem("selskapsskattelov"), "selskapsskatt");});
test("selskapsskatteloven -> selskapsskatt", function() {deepEqual( Stem("selskapsskatteloven"), "selskapsskatt");});
test("selt -> selt", function() {deepEqual( Stem("selt"), "selt");});
test("selv -> selv", function() {deepEqual( Stem("selv"), "selv");});
test("selve -> selv", function() {deepEqual( Stem("selve"), "selv");});
test("selveste -> selvest", function() {deepEqual( Stem("selveste"), "selvest");});
test("selvfinansierende -> selvfinansier", function() {deepEqual( Stem("selvfinansierende"), "selvfinansier");});
test("selvforsterkende -> selvforsterk", function() {deepEqual( Stem("selvforsterkende"), "selvforsterk");});
test("selvfølgelig -> selvfølg", function() {deepEqual( Stem("selvfølgelig"), "selvfølg");});
test("selvig -> selv", function() {deepEqual( Stem("selvig"), "selv");});
test("selvsagt -> selvsagt", function() {deepEqual( Stem("selvsagt"), "selvsagt");});
test("selvsikkert -> selvsikker", function() {deepEqual( Stem("selvsikkert"), "selvsikker");});
test("selvstendig -> selvstend", function() {deepEqual( Stem("selvstendig"), "selvstend");});
test("selvstendige -> selvstend", function() {deepEqual( Stem("selvstendige"), "selvstend");});
test("selvstyre -> selvstyr", function() {deepEqual( Stem("selvstyre"), "selvstyr");});
test("sement -> sement", function() {deepEqual( Stem("sement"), "sement");});
test("semitrailer -> semitrail", function() {deepEqual( Stem("semitrailer"), "semitrail");});
test("semitrailere -> semitrailer", function() {deepEqual( Stem("semitrailere"), "semitrailer");});
test("sen -> sen", function() {deepEqual( Stem("sen"), "sen");});
test("send -> send", function() {deepEqual( Stem("send"), "send");});
test("sendast -> send", function() {deepEqual( Stem("sendast"), "send");});
test("sende -> send", function() {deepEqual( Stem("sende"), "send");});
test("sendebud -> sendebud", function() {deepEqual( Stem("sendebud"), "sendebud");});
test("sendebudene -> sendebud", function() {deepEqual( Stem("sendebudene"), "sendebud");});
test("sender -> send", function() {deepEqual( Stem("sender"), "send");});
test("sendes -> send", function() {deepEqual( Stem("sendes"), "send");});
test("sendingsstørrelser -> sendingsstørr", function() {deepEqual( Stem("sendingsstørrelser"), "sendingsstørr");});
test("sendt -> send", function() {deepEqual( Stem("sendt"), "send");});
test("sendte -> send", function() {deepEqual( Stem("sendte"), "send");});
test("sener -> sen", function() {deepEqual( Stem("sener"), "sen");});
test("senere -> sener", function() {deepEqual( Stem("senere"), "sener");});
test("senest -> senest", function() {deepEqual( Stem("senest"), "senest");});
test("seneste -> senest", function() {deepEqual( Stem("seneste"), "senest");});
test("seng -> seng", function() {deepEqual( Stem("seng"), "seng");});
test("sengehalmen -> sengehalm", function() {deepEqual( Stem("sengehalmen"), "sengehalm");});
test("sengekammer -> sengekamm", function() {deepEqual( Stem("sengekammer"), "sengekamm");});
test("sengen -> seng", function() {deepEqual( Stem("sengen"), "seng");});
test("senger -> seng", function() {deepEqual( Stem("senger"), "seng");});
test("sengestolpen -> sengestolp", function() {deepEqual( Stem("sengestolpen"), "sengestolp");});
test("sengestolpene -> sengestolp", function() {deepEqual( Stem("sengestolpene"), "sengestolp");});
test("sengs -> seng", function() {deepEqual( Stem("sengs"), "seng");});
test("seniorrådgiver -> seniorrådgiv", function() {deepEqual( Stem("seniorrådgiver"), "seniorrådgiv");});
test("seniorrådgjevar -> seniorrådgjev", function() {deepEqual( Stem("seniorrådgjevar"), "seniorrådgjev");});
test("sent -> sent", function() {deepEqual( Stem("sent"), "sent");});
test("senter -> sent", function() {deepEqual( Stem("senter"), "sent");});
test("senterpartiet -> senterparti", function() {deepEqual( Stem("senterpartiet"), "senterparti");});
test("sentral -> sentral", function() {deepEqual( Stem("sentral"), "sentral");});
test("sentralbyrå -> sentralbyrå", function() {deepEqual( Stem("sentralbyrå"), "sentralbyrå");});
test("sentralbyrås -> sentralbyrås", function() {deepEqual( Stem("sentralbyrås"), "sentralbyrås");});
test("sentrale -> sentral", function() {deepEqual( Stem("sentrale"), "sentral");});
test("sentralene -> sentral", function() {deepEqual( Stem("sentralene"), "sentral");});
test("sentraleuropeiske -> sentraleuropeisk", function() {deepEqual( Stem("sentraleuropeiske"), "sentraleuropeisk");});
test("sentralforbund -> sentralforbund", function() {deepEqual( Stem("sentralforbund"), "sentralforbund");});
test("sentralhavn -> sentralhavn", function() {deepEqual( Stem("sentralhavn"), "sentralhavn");});
test("sentralhavna -> sentralhavn", function() {deepEqual( Stem("sentralhavna"), "sentralhavn");});
test("sentralisering -> sentralisering", function() {deepEqual( Stem("sentralisering"), "sentralisering");});
test("sentraliseringseffekt -> sentraliseringseffekt", function() {deepEqual( Stem("sentraliseringseffekt"), "sentraliseringseffekt");});
test("sentraliseringskrefter -> sentraliseringskreft", function() {deepEqual( Stem("sentraliseringskrefter"), "sentraliseringskreft");});
test("sentraliseringstendens -> sentraliseringstend", function() {deepEqual( Stem("sentraliseringstendens"), "sentraliseringstend");});
test("sentraliseringstendenser -> sentraliseringstendens", function() {deepEqual( Stem("sentraliseringstendenser"), "sentraliseringstendens");});
test("sentralisert -> sentraliser", function() {deepEqual( Stem("sentralisert"), "sentraliser");});
test("sentrallager -> sentrallag", function() {deepEqual( Stem("sentrallager"), "sentrallag");});
test("sentrallagre -> sentrallagr", function() {deepEqual( Stem("sentrallagre"), "sentrallagr");});
test("sentralt -> sentralt", function() {deepEqual( Stem("sentralt"), "sentralt");});
test("sentrum -> sentrum", function() {deepEqual( Stem("sentrum"), "sentrum");});
test("sentrumsområdene -> sentrumsområd", function() {deepEqual( Stem("sentrumsområdene"), "sentrumsområd");});
test("sentrumsplanen -> sentrumsplan", function() {deepEqual( Stem("sentrumsplanen"), "sentrumsplan");});
test("separasjon -> separasjon", function() {deepEqual( Stem("separasjon"), "separasjon");});
test("separasjonen -> separasjon", function() {deepEqual( Stem("separasjonen"), "separasjon");});
test("separat -> separat", function() {deepEqual( Stem("separat"), "separat");});
test("separate -> separat", function() {deepEqual( Stem("separate"), "separat");});
test("separerte -> separer", function() {deepEqual( Stem("separerte"), "separer");});
test("september -> septemb", function() {deepEqual( Stem("september"), "septemb");});
test("ser -> ser", function() {deepEqual( Stem("ser"), "ser");});
test("sertifikat -> sertifikat", function() {deepEqual( Stem("sertifikat"), "sertifikat");});
test("sertifikater -> sertifikat", function() {deepEqual( Stem("sertifikater"), "sertifikat");});
test("service -> servic", function() {deepEqual( Stem("service"), "servic");});
test("servicehavn -> servicehavn", function() {deepEqual( Stem("servicehavn"), "servicehavn");});
test("servicenæringens -> servicenæring", function() {deepEqual( Stem("servicenæringens"), "servicenæring");});
test("services -> servic", function() {deepEqual( Stem("services"), "servic");});
test("servituttar -> servitutt", function() {deepEqual( Stem("servituttar"), "servitutt");});
test("ses -> ses", function() {deepEqual( Stem("ses"), "ses");});
test("sesong -> sesong", function() {deepEqual( Stem("sesong"), "sesong");});
test("sesongarbeider -> sesongarbeid", function() {deepEqual( Stem("sesongarbeider"), "sesongarbeid");});
test("sesongarbeidere -> sesongarbeider", function() {deepEqual( Stem("sesongarbeidere"), "sesongarbeider");});
test("sesongarbeideres -> sesongarbeider", function() {deepEqual( Stem("sesongarbeideres"), "sesongarbeider");});
test("sessrymne -> sessrymn", function() {deepEqual( Stem("sessrymne"), "sessrymn");});
test("set -> set", function() {deepEqual( Stem("set"), "set");});
test("sete -> set", function() {deepEqual( Stem("sete"), "set");});
test("setjast -> setj", function() {deepEqual( Stem("setjast"), "setj");});
test("setje -> setj", function() {deepEqual( Stem("setje"), "setj");});
test("setning -> setning", function() {deepEqual( Stem("setning"), "setning");});
test("setninger -> setning", function() {deepEqual( Stem("setninger"), "setning");});
test("setningsskadar -> setningsskad", function() {deepEqual( Stem("setningsskadar"), "setningsskad");});
test("sett -> sett", function() {deepEqual( Stem("sett"), "sett");});
test("sette -> sett", function() {deepEqual( Stem("sette"), "sett");});
test("setter -> sett", function() {deepEqual( Stem("setter"), "sett");});
test("settes -> sett", function() {deepEqual( Stem("settes"), "sett");});
test("sevjen -> sevj", function() {deepEqual( Stem("sevjen"), "sevj");});
test("shapiro -> shapiro", function() {deepEqual( Stem("shapiro"), "shapiro");});
test("si -> si", function() {deepEqual( Stem("si"), "si");});
test("sia -> sia", function() {deepEqual( Stem("sia"), "sia");});
test("sida -> sid", function() {deepEqual( Stem("sida"), "sid");});
test("side -> sid", function() {deepEqual( Stem("side"), "sid");});
test("sidelastere -> sidelaster", function() {deepEqual( Stem("sidelastere"), "sidelaster");});
test("siden -> sid", function() {deepEqual( Stem("siden"), "sid");});
test("sidene -> sid", function() {deepEqual( Stem("sidene"), "sid");});
test("sideportsbåter -> sideportsbåt", function() {deepEqual( Stem("sideportsbåter"), "sideportsbåt");});
test("sider -> sid", function() {deepEqual( Stem("sider"), "sid");});
test("siderom -> siderom", function() {deepEqual( Stem("siderom"), "siderom");});
test("siderommet -> sideromm", function() {deepEqual( Stem("siderommet"), "sideromm");});
test("sidespor -> sidespor", function() {deepEqual( Stem("sidespor"), "sidespor");});
test("sidesprang -> sidesprang", function() {deepEqual( Stem("sidesprang"), "sidesprang");});
test("sidestilles -> sidestill", function() {deepEqual( Stem("sidestilles"), "sidestill");});
test("sier -> sier", function() {deepEqual( Stem("sier"), "sier");});
test("sies -> sies", function() {deepEqual( Stem("sies"), "sies");});
test("siffernivå -> siffernivå", function() {deepEqual( Stem("siffernivå"), "siffernivå");});
test("sige -> sig", function() {deepEqual( Stem("sige"), "sig");});
test("signal -> signal", function() {deepEqual( Stem("signal"), "signal");});
test("signaler -> signal", function() {deepEqual( Stem("signaler"), "signal");});
test("signalisere -> signaliser", function() {deepEqual( Stem("signalisere"), "signaliser");});
test("signifikant -> signifikant", function() {deepEqual( Stem("signifikant"), "signifikant");});
test("sigurd -> sigurd", function() {deepEqual( Stem("sigurd"), "sigurd");});
test("sigyn -> sigyn", function() {deepEqual( Stem("sigyn"), "sigyn");});
test("sikatomta -> sikatomt", function() {deepEqual( Stem("sikatomta"), "sikatomt");});
test("sikker -> sikk", function() {deepEqual( Stem("sikker"), "sikk");});
test("sikkerhet -> sikker", function() {deepEqual( Stem("sikkerhet"), "sikker");});
test("sikkerheten -> sikker", function() {deepEqual( Stem("sikkerheten"), "sikker");});
test("sikkerhets -> sikkerh", function() {deepEqual( Stem("sikkerhets"), "sikkerh");});
test("sikkerhetsgebyr -> sikkerhetsgebyr", function() {deepEqual( Stem("sikkerhetsgebyr"), "sikkerhetsgebyr");});
test("sikkerhetsmessige -> sikkerhetsmess", function() {deepEqual( Stem("sikkerhetsmessige"), "sikkerhetsmess");});
test("sikkerhetsnivå -> sikkerhetsnivå", function() {deepEqual( Stem("sikkerhetsnivå"), "sikkerhetsnivå");});
test("sikkerhetssystemet -> sikkerhetssystem", function() {deepEqual( Stem("sikkerhetssystemet"), "sikkerhetssystem");});
test("sikkert -> sikker", function() {deepEqual( Stem("sikkert"), "sikker");});
test("siklende -> sikl", function() {deepEqual( Stem("siklende"), "sikl");});
test("sikler -> sikl", function() {deepEqual( Stem("sikler"), "sikl");});
test("sikra -> sikr", function() {deepEqual( Stem("sikra"), "sikr");});
test("sikrar -> sikr", function() {deepEqual( Stem("sikrar"), "sikr");});
test("sikrare -> sikrar", function() {deepEqual( Stem("sikrare"), "sikrar");});
test("sikrast -> sikr", function() {deepEqual( Stem("sikrast"), "sikr");});
test("sikre -> sikr", function() {deepEqual( Stem("sikre"), "sikr");});
test("sikrer -> sikr", function() {deepEqual( Stem("sikrer"), "sikr");});
test("sikrere -> sikrer", function() {deepEqual( Stem("sikrere"), "sikrer");});
test("sikres -> sikr", function() {deepEqual( Stem("sikres"), "sikr");});
test("sikreste -> sikrest", function() {deepEqual( Stem("sikreste"), "sikrest");});
test("sikret -> sikr", function() {deepEqual( Stem("sikret"), "sikr");});
test("sikring -> sikring", function() {deepEqual( Stem("sikring"), "sikring");});
test("sikringsordning -> sikringsordning", function() {deepEqual( Stem("sikringsordning"), "sikringsordning");});
test("sikringsordningane -> sikringsordning", function() {deepEqual( Stem("sikringsordningane"), "sikringsordning");});
test("sikringsordningar -> sikringsordning", function() {deepEqual( Stem("sikringsordningar"), "sikringsordning");});
test("sikt -> sikt", function() {deepEqual( Stem("sikt"), "sikt");});
test("sikta -> sikt", function() {deepEqual( Stem("sikta"), "sikt");});
test("siktbegrensninger -> siktbegrensning", function() {deepEqual( Stem("siktbegrensninger"), "siktbegrensning");});
test("sikte -> sikt", function() {deepEqual( Stem("sikte"), "sikt");});
test("siktemål -> siktemål", function() {deepEqual( Stem("siktemål"), "siktemål");});
test("siktemålet -> siktemål", function() {deepEqual( Stem("siktemålet"), "siktemål");});
test("sikter -> sikt", function() {deepEqual( Stem("sikter"), "sikt");});
test("siktes -> sikt", function() {deepEqual( Stem("siktes"), "sikt");});
test("siljan -> siljan", function() {deepEqual( Stem("siljan"), "siljan");});
test("silkebånd -> silkebånd", function() {deepEqual( Stem("silkebånd"), "silkebånd");});
test("simpelt -> simpelt", function() {deepEqual( Stem("simpelt"), "simpelt");});
test("simultanstifting -> simultanstifting", function() {deepEqual( Stem("simultanstifting"), "simultanstifting");});
test("sin -> sin", function() {deepEqual( Stem("sin"), "sin");});
test("sindige -> sind", function() {deepEqual( Stem("sindige"), "sind");});
test("sindre -> sindr", function() {deepEqual( Stem("sindre"), "sindr");});
test("sine -> sin", function() {deepEqual( Stem("sine"), "sin");});
test("singasteinen -> singastein", function() {deepEqual( Stem("singasteinen"), "singastein");});
test("singel -> singel", function() {deepEqual( Stem("singel"), "singel");});
test("single -> singl", function() {deepEqual( Stem("single"), "singl");});
test("sinne -> sinn", function() {deepEqual( Stem("sinne"), "sinn");});
test("sinnet -> sinn", function() {deepEqual( Stem("sinnet"), "sinn");});
test("sinns -> sinn", function() {deepEqual( Stem("sinns"), "sinn");});
test("sint -> sint", function() {deepEqual( Stem("sint"), "sint");});
test("sinte -> sint", function() {deepEqual( Stem("sinte"), "sint");});
test("sintere -> sinter", function() {deepEqual( Stem("sintere"), "sinter");});
test("sirkelen -> sirkel", function() {deepEqual( Stem("sirkelen"), "sirkel");});
test("sirkulasjon -> sirkulasjon", function() {deepEqual( Stem("sirkulasjon"), "sirkulasjon");});
test("sist -> sist", function() {deepEqual( Stem("sist"), "sist");});
test("siste -> sist", function() {deepEqual( Stem("siste"), "sist");});
test("sistnemnde -> sistnemnd", function() {deepEqual( Stem("sistnemnde"), "sistnemnd");});
test("sistnevnte -> sistnevnt", function() {deepEqual( Stem("sistnevnte"), "sistnevnt");});
test("sit -> sit", function() {deepEqual( Stem("sit"), "sit");});
test("sitatet -> sitat", function() {deepEqual( Stem("sitatet"), "sitat");});
test("sitc -> sitc", function() {deepEqual( Stem("sitc"), "sitc");});
test("sitert -> siter", function() {deepEqual( Stem("sitert"), "siter");});
test("siterte -> siter", function() {deepEqual( Stem("siterte"), "siter");});
test("sitjande -> sitj", function() {deepEqual( Stem("sitjande"), "sitj");});
test("sitje -> sitj", function() {deepEqual( Stem("sitje"), "sitj");});
test("sitt -> sitt", function() {deepEqual( Stem("sitt"), "sitt");});
test("sitte -> sitt", function() {deepEqual( Stem("sitte"), "sitt");});
test("sittende -> sitt", function() {deepEqual( Stem("sittende"), "sitt");});
test("sitter -> sitt", function() {deepEqual( Stem("sitter"), "sitt");});
test("sittet -> sitt", function() {deepEqual( Stem("sittet"), "sitt");});
test("situasjon -> situasjon", function() {deepEqual( Stem("situasjon"), "situasjon");});
test("situasjonar -> situasjon", function() {deepEqual( Stem("situasjonar"), "situasjon");});
test("situasjonen -> situasjon", function() {deepEqual( Stem("situasjonen"), "situasjon");});
test("situasjoner -> situasjon", function() {deepEqual( Stem("situasjoner"), "situasjon");});
test("situasjonsbeskrivelse -> situasjonsbeskriv", function() {deepEqual( Stem("situasjonsbeskrivelse"), "situasjonsbeskriv");});
test("siv -> siv", function() {deepEqual( Stem("siv"), "siv");});
test("sivil -> sivil", function() {deepEqual( Stem("sivil"), "sivil");});
test("sivile -> sivil", function() {deepEqual( Stem("sivile"), "sivil");});
test("sivillovboka -> sivillovbok", function() {deepEqual( Stem("sivillovboka"), "sivillovbok");});
test("sjablonmessig -> sjablonmess", function() {deepEqual( Stem("sjablonmessig"), "sjablonmess");});
test("sjalu -> sjalu", function() {deepEqual( Stem("sjalu"), "sjalu");});
test("sjansen -> sjans", function() {deepEqual( Stem("sjansen"), "sjans");});
test("sjanser -> sjans", function() {deepEqual( Stem("sjanser"), "sjans");});
test("sjavn -> sjavn", function() {deepEqual( Stem("sjavn"), "sjavn");});
test("sjekta -> sjekt", function() {deepEqual( Stem("sjekta"), "sjekt");});
test("sjel -> sjel", function() {deepEqual( Stem("sjel"), "sjel");});
test("sjeldan -> sjeldan", function() {deepEqual( Stem("sjeldan"), "sjeldan");});
test("sjelden -> sjeld", function() {deepEqual( Stem("sjelden"), "sjeld");});
test("sjeldnare -> sjeldnar", function() {deepEqual( Stem("sjeldnare"), "sjeldnar");});
test("sjeldne -> sjeldn", function() {deepEqual( Stem("sjeldne"), "sjeldn");});
test("sjeldnere -> sjeldner", function() {deepEqual( Stem("sjeldnere"), "sjeldner");});
test("sjelen -> sjel", function() {deepEqual( Stem("sjelen"), "sjel");});
test("sjenanse -> sjenans", function() {deepEqual( Stem("sjenanse"), "sjenans");});
test("sjenert -> sjener", function() {deepEqual( Stem("sjenert"), "sjener");});
test("sjette -> sjett", function() {deepEqual( Stem("sjette"), "sjett");});
test("sjettedel -> sjettedel", function() {deepEqual( Stem("sjettedel"), "sjettedel");});
test("sjikanering -> sjikanering", function() {deepEqual( Stem("sjikanering"), "sjikanering");});
test("sju -> sju", function() {deepEqual( Stem("sju"), "sju");});
test("sjuande -> sjuand", function() {deepEqual( Stem("sjuande"), "sjuand");});
test("sjukdom -> sjukdom", function() {deepEqual( Stem("sjukdom"), "sjukdom");});
test("sjuke -> sjuk", function() {deepEqual( Stem("sjuke"), "sjuk");});
test("sjukeheimar -> sjukeheim", function() {deepEqual( Stem("sjukeheimar"), "sjukeheim");});
test("sjursøya -> sjursøy", function() {deepEqual( Stem("sjursøya"), "sjursøy");});
test("sjursøyas -> sjursøy", function() {deepEqual( Stem("sjursøyas"), "sjursøy");});
test("sjå -> sjå", function() {deepEqual( Stem("sjå"), "sjå");});
test("sjåast -> sjåast", function() {deepEqual( Stem("sjåast"), "sjåast");});
test("sjælland -> sjælland", function() {deepEqual( Stem("sjælland"), "sjælland");});
test("sjø -> sjø", function() {deepEqual( Stem("sjø"), "sjø");});
test("sjøarealer -> sjøareal", function() {deepEqual( Stem("sjøarealer"), "sjøareal");});
test("sjødyrene -> sjødyr", function() {deepEqual( Stem("sjødyrene"), "sjødyr");});
test("sjøen -> sjøen", function() {deepEqual( Stem("sjøen"), "sjøen");});
test("sjøfarende -> sjøfar", function() {deepEqual( Stem("sjøfarende"), "sjøfar");});
test("sjøfart -> sjøfart", function() {deepEqual( Stem("sjøfart"), "sjøfart");});
test("sjøfartsdirektoratet -> sjøfartsdirektorat", function() {deepEqual( Stem("sjøfartsdirektoratet"), "sjøfartsdirektorat");});
test("sjøfolk -> sjøfolk", function() {deepEqual( Stem("sjøfolk"), "sjøfolk");});
test("sjøfraktene -> sjøfrakt", function() {deepEqual( Stem("sjøfraktene"), "sjøfrakt");});
test("sjøjotner -> sjøjotn", function() {deepEqual( Stem("sjøjotner"), "sjøjotn");});
test("sjøkantarealer -> sjøkantareal", function() {deepEqual( Stem("sjøkantarealer"), "sjøkantareal");});
test("sjøkantbaserte -> sjøkantbaser", function() {deepEqual( Stem("sjøkantbaserte"), "sjøkantbaser");});
test("sjøkantlokalisert -> sjøkantlokaliser", function() {deepEqual( Stem("sjøkantlokalisert"), "sjøkantlokaliser");});
test("sjøkantlokaliserte -> sjøkantlokaliser", function() {deepEqual( Stem("sjøkantlokaliserte"), "sjøkantlokaliser");});
test("sjøkart -> sjøkart", function() {deepEqual( Stem("sjøkart"), "sjøkart");});
test("sjøkonge -> sjøkong", function() {deepEqual( Stem("sjøkonge"), "sjøkong");});
test("sjøkongen -> sjøkong", function() {deepEqual( Stem("sjøkongen"), "sjøkong");});
test("sjølv -> sjølv", function() {deepEqual( Stem("sjølv"), "sjølv");});
test("sjølvdømme -> sjølvdømm", function() {deepEqual( Stem("sjølvdømme"), "sjølvdømm");});
test("sjølve -> sjølv", function() {deepEqual( Stem("sjølve"), "sjølv");});
test("sjølveigande -> sjølv", function() {deepEqual( Stem("sjølveigande"), "sjølv");});
test("sjølveigarar -> sjølveigar", function() {deepEqual( Stem("sjølveigarar"), "sjølveigar");});
test("sjølvhjelp -> sjølvhjelp", function() {deepEqual( Stem("sjølvhjelp"), "sjølvhjelp");});
test("sjølvhjelpsorganisasjonar -> sjølvhjelpsorganisasjon", function() {deepEqual( Stem("sjølvhjelpsorganisasjonar"), "sjølvhjelpsorganisasjon");});
test("sjølvhjelpstanken -> sjølvhjelpstank", function() {deepEqual( Stem("sjølvhjelpstanken"), "sjølvhjelpstank");});
test("sjølvkost -> sjølvkost", function() {deepEqual( Stem("sjølvkost"), "sjølvkost");});
test("sjølvkostprinsipp -> sjølvkostprinsipp", function() {deepEqual( Stem("sjølvkostprinsipp"), "sjølvkostprinsipp");});
test("sjølvkostprinsippet -> sjølvkostprinsipp", function() {deepEqual( Stem("sjølvkostprinsippet"), "sjølvkostprinsipp");});
test("sjølvmelding -> sjølvmelding", function() {deepEqual( Stem("sjølvmelding"), "sjølvmelding");});
test("sjølvmotseiande -> sjølvmotsei", function() {deepEqual( Stem("sjølvmotseiande"), "sjølvmotsei");});
test("sjølvsagt -> sjølvsagt", function() {deepEqual( Stem("sjølvsagt"), "sjølvsagt");});
test("sjølvskiftande -> sjølvskift", function() {deepEqual( Stem("sjølvskiftande"), "sjølvskift");});
test("sjølvskuldgaranti -> sjølvskuldgaranti", function() {deepEqual( Stem("sjølvskuldgaranti"), "sjølvskuldgaranti");});
test("sjølvstendig -> sjølvstend", function() {deepEqual( Stem("sjølvstendig"), "sjølvstend");});
test("sjølvstendige -> sjølvstend", function() {deepEqual( Stem("sjølvstendige"), "sjølvstend");});
test("sjølvstyre -> sjølvstyr", function() {deepEqual( Stem("sjølvstyre"), "sjølvstyr");});
test("sjølvstyret -> sjølvstyr", function() {deepEqual( Stem("sjølvstyret"), "sjølvstyr");});
test("sjølvstyrt -> sjølvstyrt", function() {deepEqual( Stem("sjølvstyrt"), "sjølvstyrt");});
test("sjølvstyrte -> sjølvstyrt", function() {deepEqual( Stem("sjølvstyrte"), "sjølvstyrt");});
test("sjøområdene -> sjøområd", function() {deepEqual( Stem("sjøområdene"), "sjøområd");});
test("sjøområder -> sjøområd", function() {deepEqual( Stem("sjøområder"), "sjøområd");});
test("sjøreise -> sjøreis", function() {deepEqual( Stem("sjøreise"), "sjøreis");});
test("sjørholt -> sjørholt", function() {deepEqual( Stem("sjørholt"), "sjørholt");});
test("sjøs -> sjøs", function() {deepEqual( Stem("sjøs"), "sjøs");});
test("sjøside -> sjøsid", function() {deepEqual( Stem("sjøside"), "sjøsid");});
test("sjøsiden -> sjøsid", function() {deepEqual( Stem("sjøsiden"), "sjøsid");});
test("sjøsidens -> sjøsid", function() {deepEqual( Stem("sjøsidens"), "sjøsid");});
test("sjøsideområder -> sjøsideområd", function() {deepEqual( Stem("sjøsideområder"), "sjøsideområd");});
test("sjøtrafikk -> sjøtrafikk", function() {deepEqual( Stem("sjøtrafikk"), "sjøtrafikk");});
test("sjøtrafikken -> sjøtrafikk", function() {deepEqual( Stem("sjøtrafikken"), "sjøtrafikk");});
test("sjøtransport -> sjøtransport", function() {deepEqual( Stem("sjøtransport"), "sjøtransport");});
test("sjøtransportarbeidet -> sjøtransportarbeid", function() {deepEqual( Stem("sjøtransportarbeidet"), "sjøtransportarbeid");});
test("sjøtransporten -> sjøtransport", function() {deepEqual( Stem("sjøtransporten"), "sjøtransport");});
test("sjøtransportens -> sjøtransport", function() {deepEqual( Stem("sjøtransportens"), "sjøtransport");});
test("sjøtransporter -> sjøtransport", function() {deepEqual( Stem("sjøtransporter"), "sjøtransport");});
test("sjøtransportkorridorer -> sjøtransportkorridor", function() {deepEqual( Stem("sjøtransportkorridorer"), "sjøtransportkorridor");});
test("sjøtransportløsninger -> sjøtransportløsning", function() {deepEqual( Stem("sjøtransportløsninger"), "sjøtransportløsning");});
test("sjøtransportpolitikk -> sjøtransportpolitikk", function() {deepEqual( Stem("sjøtransportpolitikk"), "sjøtransportpolitikk");});
test("sjøtransporttilbud -> sjøtransporttilbud", function() {deepEqual( Stem("sjøtransporttilbud"), "sjøtransporttilbud");});
test("sjøtransporttilbudet -> sjøtransporttilbud", function() {deepEqual( Stem("sjøtransporttilbudet"), "sjøtransporttilbud");});
test("sjøvegen -> sjøveg", function() {deepEqual( Stem("sjøvegen"), "sjøveg");});
test("sjøvegs -> sjøveg", function() {deepEqual( Stem("sjøvegs"), "sjøveg");});
test("sjøveien -> sjøvei", function() {deepEqual( Stem("sjøveien"), "sjøvei");});
test("sjøverts -> sjøvert", function() {deepEqual( Stem("sjøverts"), "sjøvert");});
test("ska -> ska", function() {deepEqual( Stem("ska"), "ska");});
test("skabbete -> skabbet", function() {deepEqual( Stem("skabbete"), "skabbet");});
test("skadane -> skad", function() {deepEqual( Stem("skadane"), "skad");});
test("skadar -> skad", function() {deepEqual( Stem("skadar"), "skad");});
test("skadd -> skadd", function() {deepEqual( Stem("skadd"), "skadd");});
test("skadde -> skadd", function() {deepEqual( Stem("skadde"), "skadd");});
test("skade -> skad", function() {deepEqual( Stem("skade"), "skad");});
test("skadebot -> skadebot", function() {deepEqual( Stem("skadebot"), "skadebot");});
test("skadebotansvar -> skadebotansv", function() {deepEqual( Stem("skadebotansvar"), "skadebotansv");});
test("skadebotansvaret -> skadebotansvar", function() {deepEqual( Stem("skadebotansvaret"), "skadebotansvar");});
test("skadebotansvarleg -> skadebotansvar", function() {deepEqual( Stem("skadebotansvarleg"), "skadebotansvar");});
test("skadebotansvarlege -> skadebotansvar", function() {deepEqual( Stem("skadebotansvarlege"), "skadebotansvar");});
test("skadebotkrav -> skadebotkrav", function() {deepEqual( Stem("skadebotkrav"), "skadebotkrav");});
test("skadebotkravet -> skadebotkrav", function() {deepEqual( Stem("skadebotkravet"), "skadebotkrav");});
test("skadebotlova -> skadebot", function() {deepEqual( Stem("skadebotlova"), "skadebot");});
test("skadebotregel -> skadebotregel", function() {deepEqual( Stem("skadebotregel"), "skadebotregel");});
test("skadebotregelen -> skadebotregel", function() {deepEqual( Stem("skadebotregelen"), "skadebotregel");});
test("skadebotreglane -> skadebotregl", function() {deepEqual( Stem("skadebotreglane"), "skadebotregl");});
test("skadebotreglar -> skadebotregl", function() {deepEqual( Stem("skadebotreglar"), "skadebotregl");});
test("skadefryd -> skadefryd", function() {deepEqual( Stem("skadefryd"), "skadefryd");});
test("skadelidande -> skadelid", function() {deepEqual( Stem("skadelidande"), "skadelid");});
test("skadelidne -> skadelidn", function() {deepEqual( Stem("skadelidne"), "skadelidn");});
test("skadelidte -> skadelid", function() {deepEqual( Stem("skadelidte"), "skadelid");});
test("skaden -> skad", function() {deepEqual( Stem("skaden"), "skad");});
test("skadens -> skad", function() {deepEqual( Stem("skadens"), "skad");});
test("skadeoppgjer -> skadeoppgj", function() {deepEqual( Stem("skadeoppgjer"), "skadeoppgj");});
test("skader -> skad", function() {deepEqual( Stem("skader"), "skad");});
test("skadet -> skad", function() {deepEqual( Stem("skadet"), "skad");});
test("skadeutvikling -> skadeutvikling", function() {deepEqual( Stem("skadeutvikling"), "skadeutvikling");});
test("skaff -> skaff", function() {deepEqual( Stem("skaff"), "skaff");});
test("skaffa -> skaff", function() {deepEqual( Stem("skaffa"), "skaff");});
test("skaffar -> skaff", function() {deepEqual( Stem("skaffar"), "skaff");});
test("skaffast -> skaff", function() {deepEqual( Stem("skaffast"), "skaff");});
test("skaffe -> skaff", function() {deepEqual( Stem("skaffe"), "skaff");});
test("skaffer -> skaff", function() {deepEqual( Stem("skaffer"), "skaff");});
test("skaffet -> skaff", function() {deepEqual( Stem("skaffet"), "skaff");});
test("skaftet -> skaft", function() {deepEqual( Stem("skaftet"), "skaft");});
test("skal -> skal", function() {deepEqual( Stem("skal"), "skal");});
test("skala -> skal", function() {deepEqual( Stem("skala"), "skal");});
test("skalaen -> skala", function() {deepEqual( Stem("skalaen"), "skala");});
test("skaldekunst -> skaldekunst", function() {deepEqual( Stem("skaldekunst"), "skaldekunst");});
test("skaldemjøden -> skaldemjød", function() {deepEqual( Stem("skaldemjøden"), "skaldemjød");});
test("skalder -> skald", function() {deepEqual( Stem("skalder"), "skald");});
test("skalle -> skall", function() {deepEqual( Stem("skalle"), "skall");});
test("skallen -> skall", function() {deepEqual( Stem("skallen"), "skall");});
test("skallene -> skall", function() {deepEqual( Stem("skallene"), "skall");});
test("skalpeller -> skalpell", function() {deepEqual( Stem("skalpeller"), "skalpell");});
test("skam -> skam", function() {deepEqual( Stem("skam"), "skam");});
test("skamferte -> skamfer", function() {deepEqual( Stem("skamferte"), "skamfer");});
test("skamfull -> skamfull", function() {deepEqual( Stem("skamfull"), "skamfull");});
test("skammelig -> skamm", function() {deepEqual( Stem("skammelig"), "skamm");});
test("skandia -> skandi", function() {deepEqual( Stem("skandia"), "skandi");});
test("skap -> skap", function() {deepEqual( Stem("skap"), "skap");});
test("skapdører -> skapdør", function() {deepEqual( Stem("skapdører"), "skapdør");});
test("skape -> skap", function() {deepEqual( Stem("skape"), "skap");});
test("skapelse -> skap", function() {deepEqual( Stem("skapelse"), "skap");});
test("skaper -> skap", function() {deepEqual( Stem("skaper"), "skap");});
test("skaperverk -> skaperverk", function() {deepEqual( Stem("skaperverk"), "skaperverk");});
test("skapes -> skap", function() {deepEqual( Stem("skapes"), "skap");});
test("skapet -> skap", function() {deepEqual( Stem("skapet"), "skap");});
test("skapning -> skapning", function() {deepEqual( Stem("skapning"), "skapning");});
test("skapningene -> skapning", function() {deepEqual( Stem("skapningene"), "skapning");});
test("skapninger -> skapning", function() {deepEqual( Stem("skapninger"), "skapning");});
test("skapt -> skapt", function() {deepEqual( Stem("skapt"), "skapt");});
test("skapte -> skapt", function() {deepEqual( Stem("skapte"), "skapt");});
test("skar -> skar", function() {deepEqual( Stem("skar"), "skar");});
test("skare -> skar", function() {deepEqual( Stem("skare"), "skar");});
test("skarp -> skarp", function() {deepEqual( Stem("skarp"), "skarp");});
test("skarpe -> skarp", function() {deepEqual( Stem("skarpe"), "skarp");});
test("skarve -> skarv", function() {deepEqual( Stem("skarve"), "skarv");});
test("skatt -> skatt", function() {deepEqual( Stem("skatt"), "skatt");});
test("skatte -> skatt", function() {deepEqual( Stem("skatte"), "skatt");});
test("skattebegrensningsregelen -> skattebegrensningsregel", function() {deepEqual( Stem("skattebegrensningsregelen"), "skattebegrensningsregel");});
test("skattebegunstiget -> skattebegunst", function() {deepEqual( Stem("skattebegunstiget"), "skattebegunst");});
test("skattebesparelsen -> skattebespar", function() {deepEqual( Stem("skattebesparelsen"), "skattebespar");});
test("skattebestemmelsene -> skattebestemm", function() {deepEqual( Stem("skattebestemmelsene"), "skattebestemm");});
test("skattebetalerne -> skattebetalern", function() {deepEqual( Stem("skattebetalerne"), "skattebetalern");});
test("skattedirektoratet -> skattedirektorat", function() {deepEqual( Stem("skattedirektoratet"), "skattedirektorat");});
test("skattefavorisere -> skattefavoriser", function() {deepEqual( Stem("skattefavorisere"), "skattefavoriser");});
test("skattefavorisering -> skattefavorisering", function() {deepEqual( Stem("skattefavorisering"), "skattefavorisering");});
test("skattefavoriseringen -> skattefavorisering", function() {deepEqual( Stem("skattefavoriseringen"), "skattefavorisering");});
test("skattefavorisert -> skattefavoriser", function() {deepEqual( Stem("skattefavorisert"), "skattefavoriser");});
test("skattefavoriserte -> skattefavoriser", function() {deepEqual( Stem("skattefavoriserte"), "skattefavoriser");});
test("skattefordel -> skattefordel", function() {deepEqual( Stem("skattefordel"), "skattefordel");});
test("skattefordelar -> skattefordel", function() {deepEqual( Stem("skattefordelar"), "skattefordel");});
test("skattefordelen -> skattefordel", function() {deepEqual( Stem("skattefordelen"), "skattefordel");});
test("skattefordelene -> skattefordel", function() {deepEqual( Stem("skattefordelene"), "skattefordel");});
test("skattefordeler -> skattefordel", function() {deepEqual( Stem("skattefordeler"), "skattefordel");});
test("skattefradrag -> skattefradrag", function() {deepEqual( Stem("skattefradrag"), "skattefradrag");});
test("skattefri -> skattefri", function() {deepEqual( Stem("skattefri"), "skattefri");});
test("skattefrihet -> skattefri", function() {deepEqual( Stem("skattefrihet"), "skattefri");});
test("skatteinntekter -> skatteinntekt", function() {deepEqual( Stem("skatteinntekter"), "skatteinntekt");});
test("skatteinsentiver -> skatteinsentiv", function() {deepEqual( Stem("skatteinsentiver"), "skatteinsentiv");});
test("skatteklasse -> skatteklass", function() {deepEqual( Stem("skatteklasse"), "skatteklass");});
test("skattekontroll -> skattekontroll", function() {deepEqual( Stem("skattekontroll"), "skattekontroll");});
test("skattelettelser -> skattelett", function() {deepEqual( Stem("skattelettelser"), "skattelett");});
test("skatteligningen -> skatteligning", function() {deepEqual( Stem("skatteligningen"), "skatteligning");});
test("skattelov -> skatt", function() {deepEqual( Stem("skattelov"), "skatt");});
test("skattelova -> skatt", function() {deepEqual( Stem("skattelova"), "skatt");});
test("skatteloven -> skatt", function() {deepEqual( Stem("skatteloven"), "skatt");});
test("skattelovgivingen -> skattelovgiving", function() {deepEqual( Stem("skattelovgivingen"), "skattelovgiving");});
test("skattelovgivningen -> skattelovgivning", function() {deepEqual( Stem("skattelovgivningen"), "skattelovgivning");});
test("skattelovgivningens -> skattelovgivning", function() {deepEqual( Stem("skattelovgivningens"), "skattelovgivning");});
test("skattemessig -> skattemess", function() {deepEqual( Stem("skattemessig"), "skattemess");});
test("skattemessige -> skattemess", function() {deepEqual( Stem("skattemessige"), "skattemess");});
test("skattemyndigheten -> skattemynd", function() {deepEqual( Stem("skattemyndigheten"), "skattemynd");});
test("skattemyndighetene -> skattemynd", function() {deepEqual( Stem("skattemyndighetene"), "skattemynd");});
test("skatten -> skatt", function() {deepEqual( Stem("skatten"), "skatt");});
test("skattenøytralitet -> skattenøytralit", function() {deepEqual( Stem("skattenøytralitet"), "skattenøytralit");});
test("skatteplikt -> skatteplikt", function() {deepEqual( Stem("skatteplikt"), "skatteplikt");});
test("skatteplikten -> skatteplikt", function() {deepEqual( Stem("skatteplikten"), "skatteplikt");});
test("skattepliktens -> skatteplikt", function() {deepEqual( Stem("skattepliktens"), "skatteplikt");});
test("skattepliktig -> skatteplikt", function() {deepEqual( Stem("skattepliktig"), "skatteplikt");});
test("skattepliktige -> skatteplikt", function() {deepEqual( Stem("skattepliktige"), "skatteplikt");});
test("skattepliktiges -> skatteplikt", function() {deepEqual( Stem("skattepliktiges"), "skatteplikt");});
test("skattepolitikk -> skattepolitikk", function() {deepEqual( Stem("skattepolitikk"), "skattepolitikk");});
test("skatter -> skatt", function() {deepEqual( Stem("skatter"), "skatt");});
test("skattereformen -> skattereform", function() {deepEqual( Stem("skattereformen"), "skattereform");});
test("skattereglane -> skatteregl", function() {deepEqual( Stem("skattereglane"), "skatteregl");});
test("skattereglar -> skatteregl", function() {deepEqual( Stem("skattereglar"), "skatteregl");});
test("skattereglene -> skatteregl", function() {deepEqual( Stem("skattereglene"), "skatteregl");});
test("skatteregler -> skatteregl", function() {deepEqual( Stem("skatteregler"), "skatteregl");});
test("skatteretten -> skatterett", function() {deepEqual( Stem("skatteretten"), "skatterett");});
test("skatterettslig -> skatteretts", function() {deepEqual( Stem("skatterettslig"), "skatteretts");});
test("skatterettslige -> skatteretts", function() {deepEqual( Stem("skatterettslige"), "skatteretts");});
test("skattesammenheng -> skattesammenheng", function() {deepEqual( Stem("skattesammenheng"), "skattesammenheng");});
test("skattesats -> skattesat", function() {deepEqual( Stem("skattesats"), "skattesat");});
test("skattespørsmål -> skattespørsmål", function() {deepEqual( Stem("skattespørsmål"), "skattespørsmål");});
test("skattestimulert -> skattestimuler", function() {deepEqual( Stem("skattestimulert"), "skattestimuler");});
test("skattestimulerte -> skattestimuler", function() {deepEqual( Stem("skattestimulerte"), "skattestimuler");});
test("skattestyresmakter -> skattestyresmakt", function() {deepEqual( Stem("skattestyresmakter"), "skattestyresmakt");});
test("skattesubjekt -> skattesubjekt", function() {deepEqual( Stem("skattesubjekt"), "skattesubjekt");});
test("skattesystem -> skattesystem", function() {deepEqual( Stem("skattesystem"), "skattesystem");});
test("skattesystemet -> skattesystem", function() {deepEqual( Stem("skattesystemet"), "skattesystem");});
test("skattetrekket -> skattetrekk", function() {deepEqual( Stem("skattetrekket"), "skattetrekk");});
test("skatteutsettelse -> skatteutsett", function() {deepEqual( Stem("skatteutsettelse"), "skatteutsett");});
test("skatteutsettelsen -> skatteutsett", function() {deepEqual( Stem("skatteutsettelsen"), "skatteutsett");});
test("skattevedtak -> skattevedtak", function() {deepEqual( Stem("skattevedtak"), "skattevedtak");});
test("skattevedtaket -> skattevedtak", function() {deepEqual( Stem("skattevedtaket"), "skattevedtak");});
test("skattlagt -> skattlagt", function() {deepEqual( Stem("skattlagt"), "skattlagt");});
test("skattlagte -> skattlagt", function() {deepEqual( Stem("skattlagte"), "skattlagt");});
test("skattlegges -> skattlegg", function() {deepEqual( Stem("skattlegges"), "skattlegg");});
test("skattlegging -> skattlegging", function() {deepEqual( Stem("skattlegging"), "skattlegging");});
test("skattyter -> skattyt", function() {deepEqual( Stem("skattyter"), "skattyt");});
test("skattytere -> skattyter", function() {deepEqual( Stem("skattytere"), "skattyter");});
test("skattyteren -> skattyter", function() {deepEqual( Stem("skattyteren"), "skattyter");});
test("skattyters -> skattyt", function() {deepEqual( Stem("skattyters"), "skattyt");});
test("skavanker -> skavank", function() {deepEqual( Stem("skavanker"), "skavank");});
test("ske -> ske", function() {deepEqual( Stem("ske"), "ske");});
test("skeivdeling -> skeivdeling", function() {deepEqual( Stem("skeivdeling"), "skeivdeling");});
test("skeive -> skeiv", function() {deepEqual( Stem("skeive"), "skeiv");});
test("skeivt -> skeivt", function() {deepEqual( Stem("skeivt"), "skeivt");});
test("skepsisen -> skepsis", function() {deepEqual( Stem("skepsisen"), "skepsis");});
test("skeptisk -> skeptisk", function() {deepEqual( Stem("skeptisk"), "skeptisk");});
test("ski -> ski", function() {deepEqual( Stem("ski"), "ski");});
test("skidbladner -> skidbladn", function() {deepEqual( Stem("skidbladner"), "skidbladn");});
test("skien -> skien", function() {deepEqual( Stem("skien"), "skien");});
test("skift -> skift", function() {deepEqual( Stem("skift"), "skift");});
test("skifta -> skift", function() {deepEqual( Stem("skifta"), "skift");});
test("skiftar -> skift", function() {deepEqual( Stem("skiftar"), "skift");});
test("skifte -> skift", function() {deepEqual( Stem("skifte"), "skift");});
test("skiftelova -> skift", function() {deepEqual( Stem("skiftelova"), "skift");});
test("skiftenede -> skiften", function() {deepEqual( Stem("skiftenede"), "skiften");});
test("skifter -> skift", function() {deepEqual( Stem("skifter"), "skift");});
test("skifteretten -> skifterett", function() {deepEqual( Stem("skifteretten"), "skifterett");});
test("skiftes -> skift", function() {deepEqual( Stem("skiftes"), "skift");});
test("skiftestasjonen -> skiftestasjon", function() {deepEqual( Stem("skiftestasjonen"), "skiftestasjon");});
test("skiftet -> skift", function() {deepEqual( Stem("skiftet"), "skift");});
test("skifting -> skifting", function() {deepEqual( Stem("skifting"), "skifting");});
test("skigarden -> skigard", function() {deepEqual( Stem("skigarden"), "skigard");});
test("skigudinne -> skigudinn", function() {deepEqual( Stem("skigudinne"), "skigudinn");});
test("skikka -> skikk", function() {deepEqual( Stem("skikka"), "skikk");});
test("skikke -> skikk", function() {deepEqual( Stem("skikke"), "skikk");});
test("skikkelig -> skikk", function() {deepEqual( Stem("skikkelig"), "skikk");});
test("skikkelse -> skikk", function() {deepEqual( Stem("skikkelse"), "skikk");});
test("skikkelsen -> skikk", function() {deepEqual( Stem("skikkelsen"), "skikk");});
test("skikkelser -> skikk", function() {deepEqual( Stem("skikkelser"), "skikk");});
test("skikker -> skikk", function() {deepEqual( Stem("skikker"), "skikk");});
test("skikket -> skikk", function() {deepEqual( Stem("skikket"), "skikk");});
test("skil -> skil", function() {deepEqual( Stem("skil"), "skil");});
test("skilde -> skild", function() {deepEqual( Stem("skilde"), "skild");});
test("skilja -> skilj", function() {deepEqual( Stem("skilja"), "skilj");});
test("skiljast -> skilj", function() {deepEqual( Stem("skiljast"), "skilj");});
test("skilje -> skilj", function() {deepEqual( Stem("skilje"), "skilj");});
test("skiljet -> skilj", function() {deepEqual( Stem("skiljet"), "skilj");});
test("skiljevegger -> skiljevegg", function() {deepEqual( Stem("skiljevegger"), "skiljevegg");});
test("skille -> skill", function() {deepEqual( Stem("skille"), "skill");});
test("skiller -> skill", function() {deepEqual( Stem("skiller"), "skill");});
test("skilles -> skill", function() {deepEqual( Stem("skilles"), "skill");});
test("skillet -> skill", function() {deepEqual( Stem("skillet"), "skill");});
test("skilnad -> skilnad", function() {deepEqual( Stem("skilnad"), "skilnad");});
test("skilnaden -> skilnad", function() {deepEqual( Stem("skilnaden"), "skilnad");});
test("skilnadene -> skilnad", function() {deepEqual( Stem("skilnadene"), "skilnad");});
test("skilnader -> skilnad", function() {deepEqual( Stem("skilnader"), "skilnad");});
test("skilsdom -> skilsdom", function() {deepEqual( Stem("skilsdom"), "skilsdom");});
test("skilsdomsavtalar -> skilsdomsavtal", function() {deepEqual( Stem("skilsdomsavtalar"), "skilsdomsavtal");});
test("skilsmål -> skilsmål", function() {deepEqual( Stem("skilsmål"), "skilsmål");});
test("skilt -> skilt", function() {deepEqual( Stem("skilt"), "skilt");});
test("skiltet -> skilt", function() {deepEqual( Stem("skiltet"), "skilt");});
test("skimrer -> skimr", function() {deepEqual( Stem("skimrer"), "skimr");});
test("skimter -> skimt", function() {deepEqual( Stem("skimter"), "skimt");});
test("skinfakse -> skinfaks", function() {deepEqual( Stem("skinfakse"), "skinfaks");});
test("skingrende -> skingr", function() {deepEqual( Stem("skingrende"), "skingr");});
test("skinnegående -> skinnegå", function() {deepEqual( Stem("skinnegående"), "skinnegå");});
test("skinnende -> skinn", function() {deepEqual( Stem("skinnende"), "skinn");});
test("skinner -> skinn", function() {deepEqual( Stem("skinner"), "skinn");});
test("skinnet -> skinn", function() {deepEqual( Stem("skinnet"), "skinn");});
test("skinnfellen -> skinnfell", function() {deepEqual( Stem("skinnfellen"), "skinnfell");});
test("skinnpung -> skinnpung", function() {deepEqual( Stem("skinnpung"), "skinnpung");});
test("skint -> skint", function() {deepEqual( Stem("skint"), "skint");});
test("skinte -> skint", function() {deepEqual( Stem("skinte"), "skint");});
test("skip -> skip", function() {deepEqual( Stem("skip"), "skip");});
test("skipa -> skip", function() {deepEqual( Stem("skipa"), "skip");});
test("skipar -> skip", function() {deepEqual( Stem("skipar"), "skip");});
test("skipe -> skip", function() {deepEqual( Stem("skipe"), "skip");});
test("skipene -> skip", function() {deepEqual( Stem("skipene"), "skip");});
test("skipenes -> skip", function() {deepEqual( Stem("skipenes"), "skip");});
test("skipet -> skip", function() {deepEqual( Stem("skipet"), "skip");});
test("skiping -> skiping", function() {deepEqual( Stem("skiping"), "skiping");});
test("skipling -> skipling", function() {deepEqual( Stem("skipling"), "skipling");});
test("skipningene -> skipning", function() {deepEqual( Stem("skipningene"), "skipning");});
test("skipningsmønster -> skipningsmønst", function() {deepEqual( Stem("skipningsmønster"), "skipningsmønst");});
test("skipningsvolum -> skipningsvolum", function() {deepEqual( Stem("skipningsvolum"), "skipningsvolum");});
test("skipsaksjeselskap -> skipsaksjeselskap", function() {deepEqual( Stem("skipsaksjeselskap"), "skipsaksjeselskap");});
test("skipsandel -> skipsandel", function() {deepEqual( Stem("skipsandel"), "skipsandel");});
test("skipsanløpene -> skipsanløp", function() {deepEqual( Stem("skipsanløpene"), "skipsanløp");});
test("skipsdekket -> skipsdekk", function() {deepEqual( Stem("skipsdekket"), "skipsdekk");});
test("skipsfart -> skipsfart", function() {deepEqual( Stem("skipsfart"), "skipsfart");});
test("skipsfarten -> skipsfart", function() {deepEqual( Stem("skipsfarten"), "skipsfart");});
test("skipsfraktede -> skipsfrakt", function() {deepEqual( Stem("skipsfraktede"), "skipsfrakt");});
test("skipshastighet -> skipshast", function() {deepEqual( Stem("skipshastighet"), "skipshast");});
test("skipsløsninger -> skipsløsning", function() {deepEqual( Stem("skipsløsninger"), "skipsløsning");});
test("skipsregister -> skipsregist", function() {deepEqual( Stem("skipsregister"), "skipsregist");});
test("skipsregistera -> skipsregister", function() {deepEqual( Stem("skipsregistera"), "skipsregister");});
test("skipsstørrelse -> skipsstørr", function() {deepEqual( Stem("skipsstørrelse"), "skipsstørr");});
test("skipsstørrelser -> skipsstørr", function() {deepEqual( Stem("skipsstørrelser"), "skipsstørr");});
test("skipstilbud -> skipstilbud", function() {deepEqual( Stem("skipstilbud"), "skipstilbud");});
test("skipstrafikk -> skipstrafikk", function() {deepEqual( Stem("skipstrafikk"), "skipstrafikk");});
test("skipstrafikken -> skipstrafikk", function() {deepEqual( Stem("skipstrafikken"), "skipstrafikk");});
test("skipstransport -> skipstransport", function() {deepEqual( Stem("skipstransport"), "skipstransport");});
test("skipstransporten -> skipstransport", function() {deepEqual( Stem("skipstransporten"), "skipstransport");});
test("skipstyper -> skipstyp", function() {deepEqual( Stem("skipstyper"), "skipstyp");});
test("skirne -> skirn", function() {deepEqual( Stem("skirne"), "skirn");});
test("skisse -> skiss", function() {deepEqual( Stem("skisse"), "skiss");});
test("skissemessige -> skissemess", function() {deepEqual( Stem("skissemessige"), "skissemess");});
test("skissere -> skisser", function() {deepEqual( Stem("skissere"), "skisser");});
test("skisserer -> skisser", function() {deepEqual( Stem("skisserer"), "skisser");});
test("skisseres -> skisser", function() {deepEqual( Stem("skisseres"), "skisser");});
test("skissert -> skisser", function() {deepEqual( Stem("skissert"), "skisser");});
test("skisserte -> skisser", function() {deepEqual( Stem("skisserte"), "skisser");});
test("skitten -> skitt", function() {deepEqual( Stem("skitten"), "skitt");});
test("skittent -> skittent", function() {deepEqual( Stem("skittent"), "skittent");});
test("skive -> skiv", function() {deepEqual( Stem("skive"), "skiv");});
test("skje -> skje", function() {deepEqual( Stem("skje"), "skje");});
test("skjebne -> skjebn", function() {deepEqual( Stem("skjebne"), "skjebn");});
test("skjebnen -> skjebn", function() {deepEqual( Stem("skjebnen"), "skjebn");});
test("skjebnetråd -> skjebnetråd", function() {deepEqual( Stem("skjebnetråd"), "skjebnetråd");});
test("skjedd -> skjedd", function() {deepEqual( Stem("skjedd"), "skjedd");});
test("skjedde -> skjedd", function() {deepEqual( Stem("skjedde"), "skjedd");});
test("skjeftet -> skjeft", function() {deepEqual( Stem("skjeftet"), "skjeft");});
test("skjegg -> skjegg", function() {deepEqual( Stem("skjegg"), "skjegg");});
test("skjegget -> skjegg", function() {deepEqual( Stem("skjegget"), "skjegg");});
test("skjeggete -> skjegget", function() {deepEqual( Stem("skjeggete"), "skjegget");});
test("skjeggløse -> skjeggløs", function() {deepEqual( Stem("skjeggløse"), "skjeggløs");});
test("skjell -> skjell", function() {deepEqual( Stem("skjell"), "skjell");});
test("skjellete -> skjellet", function() {deepEqual( Stem("skjellete"), "skjellet");});
test("skjellsord -> skjellsord", function() {deepEqual( Stem("skjellsord"), "skjellsord");});
test("skjelne -> skjeln", function() {deepEqual( Stem("skjelne"), "skjeln");});
test("skjelve -> skjelv", function() {deepEqual( Stem("skjelve"), "skjelv");});
test("skjelvende -> skjelv", function() {deepEqual( Stem("skjelvende"), "skjelv");});
test("skjelver -> skjelv", function() {deepEqual( Stem("skjelver"), "skjelv");});
test("skjematisk -> skjematisk", function() {deepEqual( Stem("skjematisk"), "skjematisk");});
test("skjemt -> skjemt", function() {deepEqual( Stem("skjemt"), "skjemt");});
test("skjenk -> skjenk", function() {deepEqual( Stem("skjenk"), "skjenk");});
test("skjenke -> skjenk", function() {deepEqual( Stem("skjenke"), "skjenk");});
test("skjenker -> skjenk", function() {deepEqual( Stem("skjenker"), "skjenk");});
test("skjer -> skjer", function() {deepEqual( Stem("skjer"), "skjer");});
test("skjere -> skjer", function() {deepEqual( Stem("skjere"), "skjer");});
test("skjerma -> skjerm", function() {deepEqual( Stem("skjerma"), "skjerm");});
test("skjerme -> skjerm", function() {deepEqual( Stem("skjerme"), "skjerm");});
test("skjermes -> skjerm", function() {deepEqual( Stem("skjermes"), "skjerm");});
test("skjermet -> skjerm", function() {deepEqual( Stem("skjermet"), "skjerm");});
test("skjerming -> skjerming", function() {deepEqual( Stem("skjerming"), "skjerming");});
test("skjerpe -> skjerp", function() {deepEqual( Stem("skjerpe"), "skjerp");});
test("skjerpede -> skjerp", function() {deepEqual( Stem("skjerpede"), "skjerp");});
test("skjett -> skjett", function() {deepEqual( Stem("skjett"), "skjett");});
test("skjev -> skjev", function() {deepEqual( Stem("skjev"), "skjev");});
test("skjevheter -> skjev", function() {deepEqual( Stem("skjevheter"), "skjev");});
test("skjevseleksjon -> skjevseleksjon", function() {deepEqual( Stem("skjevseleksjon"), "skjevseleksjon");});
test("skjold -> skjold", function() {deepEqual( Stem("skjold"), "skjold");});
test("skjoldene -> skjold", function() {deepEqual( Stem("skjoldene"), "skjold");});
test("skjoldet -> skjold", function() {deepEqual( Stem("skjoldet"), "skjold");});
test("skjoldungene -> skjoldung", function() {deepEqual( Stem("skjoldungene"), "skjoldung");});
test("skjule -> skjul", function() {deepEqual( Stem("skjule"), "skjul");});
test("skjuler -> skjul", function() {deepEqual( Stem("skjuler"), "skjul");});
test("skjult -> skjult", function() {deepEqual( Stem("skjult"), "skjult");});
test("skjær -> skjær", function() {deepEqual( Stem("skjær"), "skjær");});
test("skjære -> skjær", function() {deepEqual( Stem("skjære"), "skjær");});
test("skjærende -> skjær", function() {deepEqual( Stem("skjærende"), "skjær");});
test("skjærer -> skjær", function() {deepEqual( Stem("skjærer"), "skjær");});
test("skjøn -> skjøn", function() {deepEqual( Stem("skjøn"), "skjøn");});
test("skjønet -> skjøn", function() {deepEqual( Stem("skjønet"), "skjøn");});
test("skjønne -> skjønn", function() {deepEqual( Stem("skjønne"), "skjønn");});
test("skjønner -> skjønn", function() {deepEqual( Stem("skjønner"), "skjønn");});
test("skjønnhet -> skjønn", function() {deepEqual( Stem("skjønnhet"), "skjønn");});
test("skjønnsmessig -> skjønnsmess", function() {deepEqual( Stem("skjønnsmessig"), "skjønnsmess");});
test("skjørt -> skjørt", function() {deepEqual( Stem("skjørt"), "skjørt");});
test("skjørtene -> skjørt", function() {deepEqual( Stem("skjørtene"), "skjørt");});
test("skjøter -> skjøt", function() {deepEqual( Stem("skjøter"), "skjøt");});
test("skjøvet -> skjøv", function() {deepEqual( Stem("skjøvet"), "skjøv");});
test("skli -> skli", function() {deepEqual( Stem("skli"), "skli");});
test("sko -> sko", function() {deepEqual( Stem("sko"), "sko");});
test("skodden -> skodd", function() {deepEqual( Stem("skodden"), "skodd");});
test("skoene -> skoen", function() {deepEqual( Stem("skoene"), "skoen");});
test("skog -> skog", function() {deepEqual( Stem("skog"), "skog");});
test("skogen -> skog", function() {deepEqual( Stem("skogen"), "skog");});
test("skogene -> skog", function() {deepEqual( Stem("skogene"), "skog");});
test("skoger -> skog", function() {deepEqual( Stem("skoger"), "skog");});
test("skogholt -> skogholt", function() {deepEqual( Stem("skogholt"), "skogholt");});
test("skoglandet -> skogland", function() {deepEqual( Stem("skoglandet"), "skogland");});
test("skogs -> skog", function() {deepEqual( Stem("skogs"), "skog");});
test("skoll -> skoll", function() {deepEqual( Stem("skoll"), "skoll");});
test("skolten -> skolt", function() {deepEqual( Stem("skolten"), "skolt");});
test("skote -> skot", function() {deepEqual( Stem("skote"), "skot");});
test("skotter -> skott", function() {deepEqual( Stem("skotter"), "skott");});
test("skou -> skou", function() {deepEqual( Stem("skou"), "skou");});
test("skrangler -> skrangl", function() {deepEqual( Stem("skrangler"), "skrangl");});
test("skrankene -> skrank", function() {deepEqual( Stem("skrankene"), "skrank");});
test("skranker -> skrank", function() {deepEqual( Stem("skranker"), "skrank");});
test("skrapeklev -> skrapeklev", function() {deepEqual( Stem("skrapeklev"), "skrapeklev");});
test("skraper -> skrap", function() {deepEqual( Stem("skraper"), "skrap");});
test("skratter -> skratt", function() {deepEqual( Stem("skratter"), "skratt");});
test("skrekkelig -> skrekk", function() {deepEqual( Stem("skrekkelig"), "skrekk");});
test("skrekkelige -> skrekk", function() {deepEqual( Stem("skrekkelige"), "skrekk");});
test("skremme -> skremm", function() {deepEqual( Stem("skremme"), "skremm");});
test("skremmende -> skremm", function() {deepEqual( Stem("skremmende"), "skremm");});
test("skremmer -> skremm", function() {deepEqual( Stem("skremmer"), "skremm");});
test("skremt -> skremt", function() {deepEqual( Stem("skremt"), "skremt");});
test("skremte -> skremt", function() {deepEqual( Stem("skremte"), "skremt");});
test("skrever -> skrev", function() {deepEqual( Stem("skrever"), "skrev");});
test("skrevet -> skrev", function() {deepEqual( Stem("skrevet"), "skrev");});
test("skrevs -> skrev", function() {deepEqual( Stem("skrevs"), "skrev");});
test("skriftelig -> skrift", function() {deepEqual( Stem("skriftelig"), "skrift");});
test("skriftleg -> skrift", function() {deepEqual( Stem("skriftleg"), "skrift");});
test("skriftlig -> skrift", function() {deepEqual( Stem("skriftlig"), "skrift");});
test("skrik -> skrik", function() {deepEqual( Stem("skrik"), "skrik");});
test("skrike -> skrik", function() {deepEqual( Stem("skrike"), "skrik");});
test("skrikene -> skrik", function() {deepEqual( Stem("skrikene"), "skrik");});
test("skriker -> skrik", function() {deepEqual( Stem("skriker"), "skrik");});
test("skrin -> skrin", function() {deepEqual( Stem("skrin"), "skrin");});
test("skrinet -> skrin", function() {deepEqual( Stem("skrinet"), "skrin");});
test("skrinlegges -> skrinlegg", function() {deepEqual( Stem("skrinlegges"), "skrinlegg");});
test("skritt -> skritt", function() {deepEqual( Stem("skritt"), "skritt");});
test("skriv -> skriv", function() {deepEqual( Stem("skriv"), "skriv");});
test("skrivast -> skriv", function() {deepEqual( Stem("skrivast"), "skriv");});
test("skrive -> skriv", function() {deepEqual( Stem("skrive"), "skriv");});
test("skriver -> skriv", function() {deepEqual( Stem("skriver"), "skriv");});
test("skrives -> skriv", function() {deepEqual( Stem("skrives"), "skriv");});
test("skrivne -> skrivn", function() {deepEqual( Stem("skrivne"), "skrivn");});
test("skrotet -> skrot", function() {deepEqual( Stem("skrotet"), "skrot");});
test("skrotstein -> skrotstein", function() {deepEqual( Stem("skrotstein"), "skrotstein");});
test("skryme -> skrym", function() {deepEqual( Stem("skryme"), "skrym");});
test("skrymes -> skrym", function() {deepEqual( Stem("skrymes"), "skrym");});
test("skryt -> skryt", function() {deepEqual( Stem("skryt"), "skryt");});
test("skryte -> skryt", function() {deepEqual( Stem("skryte"), "skryt");});
test("skryter -> skryt", function() {deepEqual( Stem("skryter"), "skryt");});
test("skrå -> skrå", function() {deepEqual( Stem("skrå"), "skrå");});
test("skudd -> skudd", function() {deepEqual( Stem("skudd"), "skudd");});
test("skuddet -> skudd", function() {deepEqual( Stem("skuddet"), "skudd");});
test("skuer -> skuer", function() {deepEqual( Stem("skuer"), "skuer");});
test("skuffet -> skuff", function() {deepEqual( Stem("skuffet"), "skuff");});
test("skular -> skul", function() {deepEqual( Stem("skular"), "skul");});
test("skuld -> skuld", function() {deepEqual( Stem("skuld"), "skuld");});
test("skulder -> skuld", function() {deepEqual( Stem("skulder"), "skuld");});
test("skulderen -> skulder", function() {deepEqual( Stem("skulderen"), "skulder");});
test("skuldre -> skuldr", function() {deepEqual( Stem("skuldre"), "skuldr");});
test("skuldrene -> skuldr", function() {deepEqual( Stem("skuldrene"), "skuldr");});
test("skuler -> skul", function() {deepEqual( Stem("skuler"), "skul");});
test("skulle -> skull", function() {deepEqual( Stem("skulle"), "skull");});
test("skumdråper -> skumdråp", function() {deepEqual( Stem("skumdråper"), "skumdråp");});
test("skumle -> skuml", function() {deepEqual( Stem("skumle"), "skuml");});
test("skummel -> skummel", function() {deepEqual( Stem("skummel"), "skummel");});
test("skummende -> skumm", function() {deepEqual( Stem("skummende"), "skumm");});
test("skumpet -> skump", function() {deepEqual( Stem("skumpet"), "skump");});
test("skur -> skur", function() {deepEqual( Stem("skur"), "skur");});
test("skure -> skur", function() {deepEqual( Stem("skure"), "skur");});
test("skurer -> skur", function() {deepEqual( Stem("skurer"), "skur");});
test("skurt -> skurt", function() {deepEqual( Stem("skurt"), "skurt");});
test("skutt -> skutt", function() {deepEqual( Stem("skutt"), "skutt");});
test("skvetter -> skvett", function() {deepEqual( Stem("skvetter"), "skvett");});
test("skvettes -> skvett", function() {deepEqual( Stem("skvettes"), "skvett");});
test("skybanke -> skybank", function() {deepEqual( Stem("skybanke"), "skybank");});
test("skyene -> skyen", function() {deepEqual( Stem("skyene"), "skyen");});
test("skyer -> skyer", function() {deepEqual( Stem("skyer"), "skyer");});
test("skygge -> skygg", function() {deepEqual( Stem("skygge"), "skygg");});
test("skyggen -> skygg", function() {deepEqual( Stem("skyggen"), "skygg");});
test("skygger -> skygg", function() {deepEqual( Stem("skygger"), "skygg");});
test("skyid -> skyid", function() {deepEqual( Stem("skyid"), "skyid");});
test("skyld -> skyld", function() {deepEqual( Stem("skyld"), "skyld");});
test("skyldansvar -> skyldansv", function() {deepEqual( Stem("skyldansvar"), "skyldansv");});
test("skyldansvaret -> skyldansvar", function() {deepEqual( Stem("skyldansvaret"), "skyldansvar");});
test("skylden -> skyld", function() {deepEqual( Stem("skylden"), "skyld");});
test("skylder -> skyld", function() {deepEqual( Stem("skylder"), "skyld");});
test("skyldes -> skyld", function() {deepEqual( Stem("skyldes"), "skyld");});
test("skyldforhold -> skyldforhold", function() {deepEqual( Stem("skyldforhold"), "skyldforhold");});
test("skyldgrunnlag -> skyldgrunnlag", function() {deepEqual( Stem("skyldgrunnlag"), "skyldgrunnlag");});
test("skyldig -> skyld", function() {deepEqual( Stem("skyldig"), "skyld");});
test("skyldige -> skyld", function() {deepEqual( Stem("skyldige"), "skyld");});
test("skyldnadene -> skyldnad", function() {deepEqual( Stem("skyldnadene"), "skyldnad");});
test("skyldnader -> skyldnad", function() {deepEqual( Stem("skyldnader"), "skyldnad");});
test("skyldneren -> skyldner", function() {deepEqual( Stem("skyldneren"), "skyldner");});
test("skyldnerens -> skyldner", function() {deepEqual( Stem("skyldnerens"), "skyldner");});
test("skylle -> skyll", function() {deepEqual( Stem("skylle"), "skyll");});
test("skyller -> skyll", function() {deepEqual( Stem("skyller"), "skyll");});
test("skynd -> skynd", function() {deepEqual( Stem("skynd"), "skynd");});
test("skynde -> skynd", function() {deepEqual( Stem("skynde"), "skynd");});
test("skynder -> skynd", function() {deepEqual( Stem("skynder"), "skynd");});
test("skyndet -> skynd", function() {deepEqual( Stem("skyndet"), "skynd");});
test("skyr -> skyr", function() {deepEqual( Stem("skyr"), "skyr");});
test("skyt -> skyt", function() {deepEqual( Stem("skyt"), "skyt");});
test("skytast -> skyt", function() {deepEqual( Stem("skytast"), "skyt");});
test("skyte -> skyt", function() {deepEqual( Stem("skyte"), "skyt");});
test("skyter -> skyt", function() {deepEqual( Stem("skyter"), "skyt");});
test("skytes -> skyt", function() {deepEqual( Stem("skytes"), "skyt");});
test("skyve -> skyv", function() {deepEqual( Stem("skyve"), "skyv");});
test("skyver -> skyv", function() {deepEqual( Stem("skyver"), "skyv");});
test("skyves -> skyv", function() {deepEqual( Stem("skyves"), "skyv");});
test("skål -> skål", function() {deepEqual( Stem("skål"), "skål");});
test("skåler -> skål", function() {deepEqual( Stem("skåler"), "skål");});
test("skåne -> skån", function() {deepEqual( Stem("skåne"), "skån");});
test("skåner -> skån", function() {deepEqual( Stem("skåner"), "skån");});
test("skånsomt -> skånsomt", function() {deepEqual( Stem("skånsomt"), "skånsomt");});
test("skøyte -> skøyt", function() {deepEqual( Stem("skøyte"), "skøyt");});
test("sladder -> sladd", function() {deepEqual( Stem("sladder"), "sladd");});
test("sladre -> sladr", function() {deepEqual( Stem("sladre"), "sladr");});
test("sladrehanker -> sladrehank", function() {deepEqual( Stem("sladrehanker"), "sladrehank");});
test("sladrer -> sladr", function() {deepEqual( Stem("sladrer"), "sladr");});
test("sladret -> sladr", function() {deepEqual( Stem("sladret"), "sladr");});
test("slag -> slag", function() {deepEqual( Stem("slag"), "slag");});
test("slaga -> slag", function() {deepEqual( Stem("slaga"), "slag");});
test("slagentangen -> slagentang", function() {deepEqual( Stem("slagentangen"), "slagentang");});
test("slaget -> slag", function() {deepEqual( Stem("slaget"), "slag");});
test("slagmarken -> slagmark", function() {deepEqual( Stem("slagmarken"), "slagmark");});
test("slags -> slag", function() {deepEqual( Stem("slags"), "slag");});
test("slagsmål -> slagsmål", function() {deepEqual( Stem("slagsmål"), "slagsmål");});
test("slakte -> slakt", function() {deepEqual( Stem("slakte"), "slakt");});
test("slaktedyr -> slaktedyr", function() {deepEqual( Stem("slaktedyr"), "slaktedyr");});
test("slakter -> slakt", function() {deepEqual( Stem("slakter"), "slakt");});
test("slaktet -> slakt", function() {deepEqual( Stem("slaktet"), "slakt");});
test("slange -> slang", function() {deepEqual( Stem("slange"), "slang");});
test("slangehodet -> slangehod", function() {deepEqual( Stem("slangehodet"), "slangehod");});
test("slangen -> slang", function() {deepEqual( Stem("slangen"), "slang");});
test("slapp -> slapp", function() {deepEqual( Stem("slapp"), "slapp");});
test("slarvekjerringer -> slarvekjerring", function() {deepEqual( Stem("slarvekjerringer"), "slarvekjerring");});
test("slede -> sled", function() {deepEqual( Stem("slede"), "sled");});
test("sleden -> sled", function() {deepEqual( Stem("sleden"), "sled");});
test("slege -> sleg", function() {deepEqual( Stem("slege"), "sleg");});
test("slegne -> slegn", function() {deepEqual( Stem("slegne"), "slegn");});
test("sleipner -> sleipn", function() {deepEqual( Stem("sleipner"), "sleipn");});
test("sleivkjeftet -> sleivkjeft", function() {deepEqual( Stem("sleivkjeftet"), "sleivkjeft");});
test("slekt -> slekt", function() {deepEqual( Stem("slekt"), "slekt");});
test("slekten -> slekt", function() {deepEqual( Stem("slekten"), "slekt");});
test("slekter -> slekt", function() {deepEqual( Stem("slekter"), "slekt");});
test("slektning -> slektning", function() {deepEqual( Stem("slektning"), "slektning");});
test("slektningar -> slektning", function() {deepEqual( Stem("slektningar"), "slektning");});
test("slenger -> sleng", function() {deepEqual( Stem("slenger"), "sleng");});
test("slengkyss -> slengkyss", function() {deepEqual( Stem("slengkyss"), "slengkyss");});
test("slengt -> slengt", function() {deepEqual( Stem("slengt"), "slengt");});
test("slepende -> slep", function() {deepEqual( Stem("slepende"), "slep");});
test("sleper -> slep", function() {deepEqual( Stem("sleper"), "slep");});
test("slepp -> slepp", function() {deepEqual( Stem("slepp"), "slepp");});
test("sleppe -> slepp", function() {deepEqual( Stem("sleppe"), "slepp");});
test("slept -> slept", function() {deepEqual( Stem("slept"), "slept");});
test("slet -> slet", function() {deepEqual( Stem("slet"), "slet");});
test("slett -> slett", function() {deepEqual( Stem("slett"), "slett");});
test("sletta -> slett", function() {deepEqual( Stem("sletta"), "slett");});
test("slettast -> slett", function() {deepEqual( Stem("slettast"), "slett");});
test("slette -> slett", function() {deepEqual( Stem("slette"), "slett");});
test("sletten -> slett", function() {deepEqual( Stem("sletten"), "slett");});
test("sletter -> slett", function() {deepEqual( Stem("sletter"), "slett");});
test("sletting -> sletting", function() {deepEqual( Stem("sletting"), "sletting");});
test("slik -> slik", function() {deepEqual( Stem("slik"), "slik");});
test("slike -> slik", function() {deepEqual( Stem("slike"), "slik");});
test("slikke -> slikk", function() {deepEqual( Stem("slikke"), "slikk");});
test("slikker -> slikk", function() {deepEqual( Stem("slikker"), "slikk");});
test("slikket -> slikk", function() {deepEqual( Stem("slikket"), "slikk");});
test("slikt -> slikt", function() {deepEqual( Stem("slikt"), "slikt");});
test("slim -> slim", function() {deepEqual( Stem("slim"), "slim");});
test("slimet -> slim", function() {deepEqual( Stem("slimet"), "slim");});
test("slipp -> slipp", function() {deepEqual( Stem("slipp"), "slipp");});
test("slippe -> slipp", function() {deepEqual( Stem("slippe"), "slipp");});
test("slipper -> slipp", function() {deepEqual( Stem("slipper"), "slipp");});
test("slippes -> slipp", function() {deepEqual( Stem("slippes"), "slipp");});
test("slit -> slit", function() {deepEqual( Stem("slit"), "slit");});
test("slitasje -> slitasj", function() {deepEqual( Stem("slitasje"), "slitasj");});
test("slite -> slit", function() {deepEqual( Stem("slite"), "slit");});
test("sliten -> slit", function() {deepEqual( Stem("sliten"), "slit");});
test("sliter -> slit", function() {deepEqual( Stem("sliter"), "slit");});
test("slites -> slit", function() {deepEqual( Stem("slites"), "slit");});
test("slitt -> slitt", function() {deepEqual( Stem("slitt"), "slitt");});
test("slo -> slo", function() {deepEqual( Stem("slo"), "slo");});
test("sloss -> sloss", function() {deepEqual( Stem("sloss"), "sloss");});
test("slottet -> slott", function() {deepEqual( Stem("slottet"), "slott");});
test("slottsparktunnelen -> slottsparktunnel", function() {deepEqual( Stem("slottsparktunnelen"), "slottsparktunnel");});
test("slu -> slu", function() {deepEqual( Stem("slu"), "slu");});
test("sludre -> sludr", function() {deepEqual( Stem("sludre"), "sludr");});
test("sludrer -> sludr", function() {deepEqual( Stem("sludrer"), "sludr");});
test("sluke -> sluk", function() {deepEqual( Stem("sluke"), "sluk");});
test("sluker -> sluk", function() {deepEqual( Stem("sluker"), "sluk");});
test("slukke -> slukk", function() {deepEqual( Stem("slukke"), "slukk");});
test("slukkes -> slukk", function() {deepEqual( Stem("slukkes"), "slukk");});
test("slukket -> slukk", function() {deepEqual( Stem("slukket"), "slukk");});
test("slukne -> slukn", function() {deepEqual( Stem("slukne"), "slukn");});
test("slukner -> slukn", function() {deepEqual( Stem("slukner"), "slukn");});
test("slukt -> slukt", function() {deepEqual( Stem("slukt"), "slukt");});
test("slukøret -> slukør", function() {deepEqual( Stem("slukøret"), "slukør");});
test("sluppet -> slupp", function() {deepEqual( Stem("sluppet"), "slupp");});
test("slurk -> slurk", function() {deepEqual( Stem("slurk"), "slurk");});
test("slurken -> slurk", function() {deepEqual( Stem("slurken"), "slurk");});
test("slutt -> slutt", function() {deepEqual( Stem("slutt"), "slutt");});
test("sluttar -> slutt", function() {deepEqual( Stem("sluttar"), "slutt");});
test("sluttbehandlet -> sluttbehandl", function() {deepEqual( Stem("sluttbehandlet"), "sluttbehandl");});
test("sluttbruker -> sluttbruk", function() {deepEqual( Stem("sluttbruker"), "sluttbruk");});
test("slutte -> slutt", function() {deepEqual( Stem("slutte"), "slutt");});
test("slutten -> slutt", function() {deepEqual( Stem("slutten"), "slutt");});
test("slutter -> slutt", function() {deepEqual( Stem("slutter"), "slutt");});
test("sluttes -> slutt", function() {deepEqual( Stem("sluttes"), "slutt");});
test("sluttet -> slutt", function() {deepEqual( Stem("sluttet"), "slutt");});
test("sluttfasen -> sluttfas", function() {deepEqual( Stem("sluttfasen"), "sluttfas");});
test("sluttført -> sluttført", function() {deepEqual( Stem("sluttført"), "sluttført");});
test("sluttlønn -> sluttlønn", function() {deepEqual( Stem("sluttlønn"), "sluttlønn");});
test("sluttlønnen -> sluttlønn", function() {deepEqual( Stem("sluttlønnen"), "sluttlønn");});
test("sluttlønnsbasert -> sluttlønnsbaser", function() {deepEqual( Stem("sluttlønnsbasert"), "sluttlønnsbaser");});
test("sluttlønnsbaserte -> sluttlønnsbaser", function() {deepEqual( Stem("sluttlønnsbaserte"), "sluttlønnsbaser");});
test("sluttlønnsprinsippet -> sluttlønnsprinsipp", function() {deepEqual( Stem("sluttlønnsprinsippet"), "sluttlønnsprinsipp");});
test("sluttregnskapet -> sluttregnskap", function() {deepEqual( Stem("sluttregnskapet"), "sluttregnskap");});
test("slynger -> slyng", function() {deepEqual( Stem("slynger"), "slyng");});
test("slå -> slå", function() {deepEqual( Stem("slå"), "slå");});
test("slåande -> slåand", function() {deepEqual( Stem("slåande"), "slåand");});
test("slåast -> slåast", function() {deepEqual( Stem("slåast"), "slåast");});
test("slåen -> slåen", function() {deepEqual( Stem("slåen"), "slåen");});
test("slår -> slår", function() {deepEqual( Stem("slår"), "slår");});
test("slås -> slås", function() {deepEqual( Stem("slås"), "slås");});
test("slåss -> slåss", function() {deepEqual( Stem("slåss"), "slåss");});
test("slåsskamp -> slåsskamp", function() {deepEqual( Stem("slåsskamp"), "slåsskamp");});
test("slåsskjempene -> slåsskjemp", function() {deepEqual( Stem("slåsskjempene"), "slåsskjemp");});
test("slåsskjemper -> slåsskjemp", function() {deepEqual( Stem("slåsskjemper"), "slåsskjemp");});
test("slått -> slått", function() {deepEqual( Stem("slått"), "slått");});
test("slåttefolk -> slåttefolk", function() {deepEqual( Stem("slåttefolk"), "slåttefolk");});
test("slør -> slør", function() {deepEqual( Stem("slør"), "slør");});
test("sløret -> slør", function() {deepEqual( Stem("sløret"), "slør");});
test("sløve -> sløv", function() {deepEqual( Stem("sløve"), "sløv");});
test("sløvet -> sløv", function() {deepEqual( Stem("sløvet"), "sløv");});
test("smak -> smak", function() {deepEqual( Stem("smak"), "smak");});
test("smake -> smak", function() {deepEqual( Stem("smake"), "smak");});
test("smaker -> smak", function() {deepEqual( Stem("smaker"), "smak");});
test("smakt -> smakt", function() {deepEqual( Stem("smakt"), "smakt");});
test("smal -> smal", function() {deepEqual( Stem("smal"), "smal");});
test("smale -> smal", function() {deepEqual( Stem("smale"), "smal");});
test("smalere -> smaler", function() {deepEqual( Stem("smalere"), "smaler");});
test("smatter -> smatt", function() {deepEqual( Stem("smatter"), "smatt");});
test("smed -> smed", function() {deepEqual( Stem("smed"), "smed");});
test("smedarbeid -> smedarbeid", function() {deepEqual( Stem("smedarbeid"), "smedarbeid");});
test("smeden -> smed", function() {deepEqual( Stem("smeden"), "smed");});
test("smedene -> smed", function() {deepEqual( Stem("smedene"), "smed");});
test("smeder -> smed", function() {deepEqual( Stem("smeder"), "smed");});
test("smedkunster -> smedkunst", function() {deepEqual( Stem("smedkunster"), "smedkunst");});
test("smelle -> smell", function() {deepEqual( Stem("smelle"), "smell");});
test("smeller -> smell", function() {deepEqual( Stem("smeller"), "smell");});
test("smelte -> smelt", function() {deepEqual( Stem("smelte"), "smelt");});
test("smelter -> smelt", function() {deepEqual( Stem("smelter"), "smelt");});
test("smeltet -> smelt", function() {deepEqual( Stem("smeltet"), "smelt");});
test("smertene -> smert", function() {deepEqual( Stem("smertene"), "smert");});
test("smi -> smi", function() {deepEqual( Stem("smi"), "smi");});
test("smia -> smia", function() {deepEqual( Stem("smia"), "smia");});
test("smidd -> smidd", function() {deepEqual( Stem("smidd"), "smidd");});
test("smidde -> smidd", function() {deepEqual( Stem("smidde"), "smidd");});
test("smidig -> smid", function() {deepEqual( Stem("smidig"), "smid");});
test("smiene -> smien", function() {deepEqual( Stem("smiene"), "smien");});
test("smiger -> smig", function() {deepEqual( Stem("smiger"), "smig");});
test("smigre -> smigr", function() {deepEqual( Stem("smigre"), "smigr");});
test("smil -> smil", function() {deepEqual( Stem("smil"), "smil");});
test("smile -> smil", function() {deepEqual( Stem("smile"), "smil");});
test("smiler -> smil", function() {deepEqual( Stem("smiler"), "smil");});
test("smilet -> smil", function() {deepEqual( Stem("smilet"), "smil");});
test("smilte -> smilt", function() {deepEqual( Stem("smilte"), "smilt");});
test("smir -> smir", function() {deepEqual( Stem("smir"), "smir");});
test("smiske -> smisk", function() {deepEqual( Stem("smiske"), "smisk");});
test("smisker -> smisk", function() {deepEqual( Stem("smisker"), "smisk");});
test("smittende -> smitt", function() {deepEqual( Stem("smittende"), "smitt");});
test("smitter -> smitt", function() {deepEqual( Stem("smitter"), "smitt");});
test("smoltens -> smolt", function() {deepEqual( Stem("smoltens"), "smolt");});
test("smurte -> smurt", function() {deepEqual( Stem("smurte"), "smurt");});
test("smyge -> smyg", function() {deepEqual( Stem("smyge"), "smyg");});
test("smyger -> smyg", function() {deepEqual( Stem("smyger"), "smyg");});
test("smykkelåsen -> smykkelås", function() {deepEqual( Stem("smykkelåsen"), "smykkelås");});
test("smykker -> smykk", function() {deepEqual( Stem("smykker"), "smykk");});
test("smykket -> smykk", function() {deepEqual( Stem("smykket"), "smykk");});
test("smykketyven -> smykketyv", function() {deepEqual( Stem("smykketyven"), "smykketyv");});
test("små -> små", function() {deepEqual( Stem("små"), "små");});
test("småbiter -> småbit", function() {deepEqual( Stem("småbiter"), "småbit");});
test("småbonde -> småbond", function() {deepEqual( Stem("småbonde"), "småbond");});
test("småfe -> småf", function() {deepEqual( Stem("småfe"), "småf");});
test("småguttene -> smågutt", function() {deepEqual( Stem("småguttene"), "smågutt");});
test("smågutter -> smågutt", function() {deepEqual( Stem("smågutter"), "smågutt");});
test("småhus -> småhus", function() {deepEqual( Stem("småhus"), "småhus");});
test("småpakkeforsendelser -> småpakkeforsend", function() {deepEqual( Stem("småpakkeforsendelser"), "småpakkeforsend");});
test("småpakker -> småpakk", function() {deepEqual( Stem("småpakker"), "småpakk");});
test("småvilt -> småvilt", function() {deepEqual( Stem("småvilt"), "småvilt");});
test("smører -> smør", function() {deepEqual( Stem("smører"), "smør");});
test("smøring -> smøring", function() {deepEqual( Stem("smøring"), "smøring");});
test("snakk -> snakk", function() {deepEqual( Stem("snakk"), "snakk");});
test("snakke -> snakk", function() {deepEqual( Stem("snakke"), "snakk");});
test("snakker -> snakk", function() {deepEqual( Stem("snakker"), "snakk");});
test("snakkes -> snakk", function() {deepEqual( Stem("snakkes"), "snakk");});
test("snakket -> snakk", function() {deepEqual( Stem("snakket"), "snakk");});
test("snar -> snar", function() {deepEqual( Stem("snar"), "snar");});
test("snarare -> snarar", function() {deepEqual( Stem("snarare"), "snarar");});
test("snarast -> snar", function() {deepEqual( Stem("snarast"), "snar");});
test("snare -> snar", function() {deepEqual( Stem("snare"), "snar");});
test("snarere -> snarer", function() {deepEqual( Stem("snarere"), "snarer");});
test("snarlig -> snar", function() {deepEqual( Stem("snarlig"), "snar");});
test("snart -> snart", function() {deepEqual( Stem("snart"), "snart");});
test("snartur -> snartur", function() {deepEqual( Stem("snartur"), "snartur");});
test("snarvegen -> snarveg", function() {deepEqual( Stem("snarvegen"), "snarveg");});
test("snarvei -> snarvei", function() {deepEqual( Stem("snarvei"), "snarvei");});
test("snarveien -> snarvei", function() {deepEqual( Stem("snarveien"), "snarvei");});
test("snarveier -> snarvei", function() {deepEqual( Stem("snarveier"), "snarvei");});
test("snauklippet -> snauklipp", function() {deepEqual( Stem("snauklippet"), "snauklipp");});
test("snaut -> snaut", function() {deepEqual( Stem("snaut"), "snaut");});
test("snautt -> snautt", function() {deepEqual( Stem("snautt"), "snautt");});
test("sne -> sne", function() {deepEqual( Stem("sne"), "sne");});
test("sneen -> sneen", function() {deepEqual( Stem("sneen"), "sneen");});
test("snefonnene -> snefonn", function() {deepEqual( Stem("snefonnene"), "snefonn");});
test("snehule -> snehul", function() {deepEqual( Stem("snehule"), "snehul");});
test("snek -> snek", function() {deepEqual( Stem("snek"), "snek");});
test("sneket -> snek", function() {deepEqual( Stem("sneket"), "snek");});
test("snerrende -> snerr", function() {deepEqual( Stem("snerrende"), "snerr");});
test("snerrer -> snerr", function() {deepEqual( Stem("snerrer"), "snerr");});
test("snevre -> snevr", function() {deepEqual( Stem("snevre"), "snevr");});
test("snevrere -> snevrer", function() {deepEqual( Stem("snevrere"), "snevrer");});
test("sniker -> snik", function() {deepEqual( Stem("sniker"), "snik");});
test("snill -> snill", function() {deepEqual( Stem("snill"), "snill");});
test("snille -> snill", function() {deepEqual( Stem("snille"), "snill");});
test("snitt -> snitt", function() {deepEqual( Stem("snitt"), "snitt");});
test("sno -> sno", function() {deepEqual( Stem("sno"), "sno");});
test("snor -> snor", function() {deepEqual( Stem("snor"), "snor");});
test("snoren -> snor", function() {deepEqual( Stem("snoren"), "snor");});
test("snorke -> snork", function() {deepEqual( Stem("snorke"), "snork");});
test("snorkende -> snork", function() {deepEqual( Stem("snorkende"), "snork");});
test("snorker -> snork", function() {deepEqual( Stem("snorker"), "snork");});
test("snu -> snu", function() {deepEqual( Stem("snu"), "snu");});
test("snubler -> snubl", function() {deepEqual( Stem("snubler"), "snubl");});
test("snudd -> snudd", function() {deepEqual( Stem("snudd"), "snudd");});
test("snufser -> snufs", function() {deepEqual( Stem("snufser"), "snufs");});
test("snur -> snur", function() {deepEqual( Stem("snur"), "snur");});
test("snus -> snus", function() {deepEqual( Stem("snus"), "snus");});
test("snø -> snø", function() {deepEqual( Stem("snø"), "snø");});
test("snøen -> snøen", function() {deepEqual( Stem("snøen"), "snøen");});
test("snøfter -> snøft", function() {deepEqual( Stem("snøfter"), "snøft");});
test("snøre -> snør", function() {deepEqual( Stem("snøre"), "snør");});
test("snøret -> snør", function() {deepEqual( Stem("snøret"), "snør");});
test("snøvler -> snøvl", function() {deepEqual( Stem("snøvler"), "snøvl");});
test("social -> social", function() {deepEqual( Stem("social"), "social");});
test("sog -> sog", function() {deepEqual( Stem("sog"), "sog");});
test("sogn -> sogn", function() {deepEqual( Stem("sogn"), "sogn");});
test("sokkeletasjen -> sokkeletasj", function() {deepEqual( Stem("sokkeletasjen"), "sokkeletasj");});
test("sol -> sol", function() {deepEqual( Stem("sol"), "sol");});
test("solberg -> solberg", function() {deepEqual( Stem("solberg"), "solberg");});
test("solbergkrysset -> solbergkryss", function() {deepEqual( Stem("solbergkrysset"), "solbergkryss");});
test("soldatene -> soldat", function() {deepEqual( Stem("soldatene"), "soldat");});
test("soldater -> soldat", function() {deepEqual( Stem("soldater"), "soldat");});
test("solen -> sol", function() {deepEqual( Stem("solen"), "sol");});
test("solgt -> solgt", function() {deepEqual( Stem("solgt"), "solgt");});
test("solgte -> solgt", function() {deepEqual( Stem("solgte"), "solgt");});
test("solid -> solid", function() {deepEqual( Stem("solid"), "solid");});
test("solidarisk -> solidarisk", function() {deepEqual( Stem("solidarisk"), "solidarisk");});
test("solidaritet -> solidarit", function() {deepEqual( Stem("solidaritet"), "solidarit");});
test("solidariteten -> solidaritet", function() {deepEqual( Stem("solidariteten"), "solidaritet");});
test("solidaritetsalternativet -> solidaritetsalternativ", function() {deepEqual( Stem("solidaritetsalternativet"), "solidaritetsalternativ");});
test("soliditet -> solidit", function() {deepEqual( Stem("soliditet"), "solidit");});
test("soliditetskrav -> soliditetskrav", function() {deepEqual( Stem("soliditetskrav"), "soliditetskrav");});
test("soloppgang -> soloppgang", function() {deepEqual( Stem("soloppgang"), "soloppgang");});
test("soloppgangen -> soloppgang", function() {deepEqual( Stem("soloppgangen"), "soloppgang");});
test("solskinn -> solskinn", function() {deepEqual( Stem("solskinn"), "solskinn");});
test("soltegnet -> soltegn", function() {deepEqual( Stem("soltegnet"), "soltegn");});
test("solvognen -> solvogn", function() {deepEqual( Stem("solvognen"), "solvogn");});
test("som -> som", function() {deepEqual( Stem("som"), "som");});
test("somme -> somm", function() {deepEqual( Stem("somme"), "somm");});
test("sommer -> somm", function() {deepEqual( Stem("sommer"), "somm");});
test("sommerdag -> sommerdag", function() {deepEqual( Stem("sommerdag"), "sommerdag");});
test("sommeren -> sommer", function() {deepEqual( Stem("sommeren"), "sommer");});
test("sommerfuglvinger -> sommerfuglving", function() {deepEqual( Stem("sommerfuglvinger"), "sommerfuglving");});
test("sommersesongen -> sommersesong", function() {deepEqual( Stem("sommersesongen"), "sommersesong");});
test("somtid -> somtid", function() {deepEqual( Stem("somtid"), "somtid");});
test("son -> son", function() {deepEqual( Stem("son"), "son");});
test("sorg -> sorg", function() {deepEqual( Stem("sorg"), "sorg");});
test("sorgløst -> sorgløst", function() {deepEqual( Stem("sorgløst"), "sorgløst");});
test("sort -> sort", function() {deepEqual( Stem("sort"), "sort");});
test("sorte -> sort", function() {deepEqual( Stem("sorte"), "sort");});
test("sortering -> sortering", function() {deepEqual( Stem("sortering"), "sortering");});
test("sorteringsanlegg -> sorteringsanlegg", function() {deepEqual( Stem("sorteringsanlegg"), "sorteringsanlegg");});
test("sortkledd -> sortkledd", function() {deepEqual( Stem("sortkledd"), "sortkledd");});
test("sortkledde -> sortkledd", function() {deepEqual( Stem("sortkledde"), "sortkledd");});
test("sortkledte -> sortkled", function() {deepEqual( Stem("sortkledte"), "sortkled");});
test("sosial -> sosial", function() {deepEqual( Stem("sosial"), "sosial");});
test("sosiale -> sosial", function() {deepEqual( Stem("sosiale"), "sosial");});
test("sosialforsikringssystem -> sosialforsikringssystem", function() {deepEqual( Stem("sosialforsikringssystem"), "sosialforsikringssystem");});
test("sosialistisk -> sosialistisk", function() {deepEqual( Stem("sosialistisk"), "sosialistisk");});
test("sosialkomiteen -> sosialkomite", function() {deepEqual( Stem("sosialkomiteen"), "sosialkomite");});
test("sosialkomiteens -> sosialkomite", function() {deepEqual( Stem("sosialkomiteens"), "sosialkomite");});
test("sosialkontor -> sosialkontor", function() {deepEqual( Stem("sosialkontor"), "sosialkontor");});
test("sosialpolitisk -> sosialpolitisk", function() {deepEqual( Stem("sosialpolitisk"), "sosialpolitisk");});
test("sosialt -> sosialt", function() {deepEqual( Stem("sosialt"), "sosialt");});
test("sosialtenestelova -> sosialtenest", function() {deepEqual( Stem("sosialtenestelova"), "sosialtenest");});
test("sosialtjenesten -> sosialtjenest", function() {deepEqual( Stem("sosialtjenesten"), "sosialtjenest");});
test("sot -> sot", function() {deepEqual( Stem("sot"), "sot");});
test("sotbrun -> sotbrun", function() {deepEqual( Stem("sotbrun"), "sotbrun");});
test("sou -> sou", function() {deepEqual( Stem("sou"), "sou");});
test("sov -> sov", function() {deepEqual( Stem("sov"), "sov");});
test("sove -> sov", function() {deepEqual( Stem("sove"), "sov");});
test("sovekammeret -> sovekammer", function() {deepEqual( Stem("sovekammeret"), "sovekammer");});
test("sovende -> sov", function() {deepEqual( Stem("sovende"), "sov");});
test("sover -> sov", function() {deepEqual( Stem("sover"), "sov");});
test("soverommet -> soveromm", function() {deepEqual( Stem("soverommet"), "soveromm");});
test("sovet -> sov", function() {deepEqual( Stem("sovet"), "sov");});
test("sovner -> sovn", function() {deepEqual( Stem("sovner"), "sovn");});
test("sovnet -> sovn", function() {deepEqual( Stem("sovnet"), "sovn");});
test("spakt -> spakt", function() {deepEqual( Stem("spakt"), "spakt");});
test("spankulerer -> spankuler", function() {deepEqual( Stem("spankulerer"), "spankuler");});
test("spann -> spann", function() {deepEqual( Stem("spann"), "spann");});
test("spare -> spar", function() {deepEqual( Stem("spare"), "spar");});
test("spareavtale -> spareavtal", function() {deepEqual( Stem("spareavtale"), "spareavtal");});
test("spareavtalen -> spareavtal", function() {deepEqual( Stem("spareavtalen"), "spareavtal");});
test("spareavtalene -> spareavtal", function() {deepEqual( Stem("spareavtalene"), "spareavtal");});
test("spareavtaler -> spareavtal", function() {deepEqual( Stem("spareavtaler"), "spareavtal");});
test("sparebank -> sparebank", function() {deepEqual( Stem("sparebank"), "sparebank");});
test("sparebankane -> sparebank", function() {deepEqual( Stem("sparebankane"), "sparebank");});
test("sparebankforeningen -> sparebankforening", function() {deepEqual( Stem("sparebankforeningen"), "sparebankforening");});
test("sparebanklova -> sparebank", function() {deepEqual( Stem("sparebanklova"), "sparebank");});
test("sparebeløp -> sparebeløp", function() {deepEqual( Stem("sparebeløp"), "sparebeløp");});
test("sparedelen -> sparedel", function() {deepEqual( Stem("sparedelen"), "sparedel");});
test("spareelement -> spareelement", function() {deepEqual( Stem("spareelement"), "spareelement");});
test("spareform -> spareform", function() {deepEqual( Stem("spareform"), "spareform");});
test("spareformen -> spareform", function() {deepEqual( Stem("spareformen"), "spareform");});
test("spareformer -> spareform", function() {deepEqual( Stem("spareformer"), "spareform");});
test("spareinnskot -> spareinnskot", function() {deepEqual( Stem("spareinnskot"), "spareinnskot");});
test("spareinnskota -> spareinnskot", function() {deepEqual( Stem("spareinnskota"), "spareinnskot");});
test("sparekapital -> sparekapital", function() {deepEqual( Stem("sparekapital"), "sparekapital");});
test("sparekasser -> sparekass", function() {deepEqual( Stem("sparekasser"), "sparekass");});
test("sparekontrakter -> sparekontrakt", function() {deepEqual( Stem("sparekontrakter"), "sparekontrakt");});
test("sparelag -> sparelag", function() {deepEqual( Stem("sparelag"), "sparelag");});
test("sparemarkedet -> sparemarked", function() {deepEqual( Stem("sparemarkedet"), "sparemarked");});
test("sparemidlane -> sparemidl", function() {deepEqual( Stem("sparemidlane"), "sparemidl");});
test("sparemidlar -> sparemidl", function() {deepEqual( Stem("sparemidlar"), "sparemidl");});
test("sparemidlene -> sparemidl", function() {deepEqual( Stem("sparemidlene"), "sparemidl");});
test("sparemidler -> sparemidl", function() {deepEqual( Stem("sparemidler"), "sparemidl");});
test("spareordning -> spareordning", function() {deepEqual( Stem("spareordning"), "spareordning");});
test("spareordningene -> spareordning", function() {deepEqual( Stem("spareordningene"), "spareordning");});
test("spareordninger -> spareordning", function() {deepEqual( Stem("spareordninger"), "spareordning");});
test("spareprodukt -> spareprodukt", function() {deepEqual( Stem("spareprodukt"), "spareprodukt");});
test("spareprodukter -> spareprodukt", function() {deepEqual( Stem("spareprodukter"), "spareprodukt");});
test("sparer -> spar", function() {deepEqual( Stem("sparer"), "spar");});
test("spareren -> sparer", function() {deepEqual( Stem("spareren"), "sparer");});
test("sparerens -> sparer", function() {deepEqual( Stem("sparerens"), "sparer");});
test("sparesaldoen -> sparesaldo", function() {deepEqual( Stem("sparesaldoen"), "sparesaldo");});
test("spareverksemda -> spareverksemd", function() {deepEqual( Stem("spareverksemda"), "spareverksemd");});
test("sparing -> sparing", function() {deepEqual( Stem("sparing"), "sparing");});
test("sparinga -> sparing", function() {deepEqual( Stem("sparinga"), "sparing");});
test("sparingen -> sparing", function() {deepEqual( Stem("sparingen"), "sparing");});
test("spark -> spark", function() {deepEqual( Stem("spark"), "spark");});
test("sparkassan -> sparkassan", function() {deepEqual( Stem("sparkassan"), "sparkassan");});
test("sparkasse -> sparkass", function() {deepEqual( Stem("sparkasse"), "sparkass");});
test("sparke -> spark", function() {deepEqual( Stem("sparke"), "spark");});
test("sparker -> spark", function() {deepEqual( Stem("sparker"), "spark");});
test("sparket -> spark", function() {deepEqual( Stem("sparket"), "spark");});
test("spart -> spart", function() {deepEqual( Stem("spart"), "spart");});
test("spedisjons -> spedisjon", function() {deepEqual( Stem("spedisjons"), "spedisjon");});
test("spedisjonstjenester -> spedisjonstjenest", function() {deepEqual( Stem("spedisjonstjenester"), "spedisjonstjenest");});
test("speditørene -> speditør", function() {deepEqual( Stem("speditørene"), "speditør");});
test("speditører -> speditør", function() {deepEqual( Stem("speditører"), "speditør");});
test("spegla -> spegl", function() {deepEqual( Stem("spegla"), "spegl");});
test("speide -> speid", function() {deepEqual( Stem("speide"), "speid");});
test("speider -> speid", function() {deepEqual( Stem("speider"), "speid");});
test("speilbilde -> speilbild", function() {deepEqual( Stem("speilbilde"), "speilbild");});
test("spekter -> spekt", function() {deepEqual( Stem("spekter"), "spekt");});
test("spekulant -> spekulant", function() {deepEqual( Stem("spekulant"), "spekulant");});
test("spekulasjonsobjekt -> spekulasjonsobjekt", function() {deepEqual( Stem("spekulasjonsobjekt"), "spekulasjonsobjekt");});
test("spela -> spel", function() {deepEqual( Stem("spela"), "spel");});
test("spelar -> spel", function() {deepEqual( Stem("spelar"), "spel");});
test("spele -> spel", function() {deepEqual( Stem("spele"), "spel");});
test("spelerom -> spelerom", function() {deepEqual( Stem("spelerom"), "spelerom");});
test("spenene -> spen", function() {deepEqual( Stem("spenene"), "spen");});
test("spenn -> spenn", function() {deepEqual( Stem("spenn"), "spenn");});
test("spennende -> spenn", function() {deepEqual( Stem("spennende"), "spenn");});
test("spenner -> spenn", function() {deepEqual( Stem("spenner"), "spenn");});
test("spennet -> spenn", function() {deepEqual( Stem("spennet"), "spenn");});
test("spenninga -> spenning", function() {deepEqual( Stem("spenninga"), "spenning");});
test("spenningsfelt -> spenningsfelt", function() {deepEqual( Stem("spenningsfelt"), "spenningsfelt");});
test("spenntak -> spenntak", function() {deepEqual( Stem("spenntak"), "spenntak");});
test("spennvidden -> spennvidd", function() {deepEqual( Stem("spennvidden"), "spennvidd");});
test("spent -> spent", function() {deepEqual( Stem("spent"), "spent");});
test("spente -> spent", function() {deepEqual( Stem("spente"), "spent");});
test("sperre -> sperr", function() {deepEqual( Stem("sperre"), "sperr");});
test("sperrer -> sperr", function() {deepEqual( Stem("sperrer"), "sperr");});
test("spesialbustader -> spesialbustad", function() {deepEqual( Stem("spesialbustader"), "spesialbustad");});
test("spesialhavn -> spesialhavn", function() {deepEqual( Stem("spesialhavn"), "spesialhavn");});
test("spesialisering -> spesialisering", function() {deepEqual( Stem("spesialisering"), "spesialisering");});
test("spesialisert -> spesialiser", function() {deepEqual( Stem("spesialisert"), "spesialiser");});
test("spesialiserte -> spesialiser", function() {deepEqual( Stem("spesialiserte"), "spesialiser");});
test("spesialitetsprinsippet -> spesialitetsprinsipp", function() {deepEqual( Stem("spesialitetsprinsippet"), "spesialitetsprinsipp");});
test("spesialmerknadene -> spesialmerknad", function() {deepEqual( Stem("spesialmerknadene"), "spesialmerknad");});
test("spesialmerknader -> spesialmerknad", function() {deepEqual( Stem("spesialmerknader"), "spesialmerknad");});
test("spesialområder -> spesialområd", function() {deepEqual( Stem("spesialområder"), "spesialområd");});
test("spesialregel -> spesialregel", function() {deepEqual( Stem("spesialregel"), "spesialregel");});
test("spesialtilfelle -> spesialtilfell", function() {deepEqual( Stem("spesialtilfelle"), "spesialtilfell");});
test("spesiell -> spesiell", function() {deepEqual( Stem("spesiell"), "spesiell");});
test("spesielle -> spesiell", function() {deepEqual( Stem("spesielle"), "spesiell");});
test("spesielt -> spesielt", function() {deepEqual( Stem("spesielt"), "spesielt");});
test("spesifikasjon -> spesifikasjon", function() {deepEqual( Stem("spesifikasjon"), "spesifikasjon");});
test("spesifikasjonskrav -> spesifikasjonskrav", function() {deepEqual( Stem("spesifikasjonskrav"), "spesifikasjonskrav");});
test("spesifikke -> spesifikk", function() {deepEqual( Stem("spesifikke"), "spesifikk");});
test("spesifikt -> spesifikt", function() {deepEqual( Stem("spesifikt"), "spesifikt");});
test("spesifiserer -> spesifiser", function() {deepEqual( Stem("spesifiserer"), "spesifiser");});
test("spesifiseres -> spesifiser", function() {deepEqual( Stem("spesifiseres"), "spesifiser");});
test("spesifisert -> spesifiser", function() {deepEqual( Stem("spesifisert"), "spesifiser");});
test("spesifiserte -> spesifiser", function() {deepEqual( Stem("spesifiserte"), "spesifiser");});
test("spikker -> spikk", function() {deepEqual( Stem("spikker"), "spikk");});
test("spilene -> spil", function() {deepEqual( Stem("spilene"), "spil");});
test("spill -> spill", function() {deepEqual( Stem("spill"), "spill");});
test("spille -> spill", function() {deepEqual( Stem("spille"), "spill");});
test("spiller -> spill", function() {deepEqual( Stem("spiller"), "spill");});
test("spilloppmakeren -> spilloppmaker", function() {deepEqual( Stem("spilloppmakeren"), "spilloppmaker");});
test("spilt -> spilt", function() {deepEqual( Stem("spilt"), "spilt");});
test("spire -> spir", function() {deepEqual( Stem("spire"), "spir");});
test("spise -> spis", function() {deepEqual( Stem("spise"), "spis");});
test("spiser -> spis", function() {deepEqual( Stem("spiser"), "spis");});
test("spises -> spis", function() {deepEqual( Stem("spises"), "spis");});
test("spissen -> spiss", function() {deepEqual( Stem("spissen"), "spiss");});
test("spist -> spist", function() {deepEqual( Stem("spist"), "spist");});
test("spiste -> spist", function() {deepEqual( Stem("spiste"), "spist");});
test("spk -> spk", function() {deepEqual( Stem("spk"), "spk");});
test("splinten -> splint", function() {deepEqual( Stem("splinten"), "splint");});
test("splintene -> splint", function() {deepEqual( Stem("splintene"), "splint");});
test("splintres -> splintr", function() {deepEqual( Stem("splintres"), "splintr");});
test("sponene -> spon", function() {deepEqual( Stem("sponene"), "spon");});
test("sponhaug -> sponhaug", function() {deepEqual( Stem("sponhaug"), "sponhaug");});
test("sponhaugen -> sponhaug", function() {deepEqual( Stem("sponhaugen"), "sponhaug");});
test("sponvikskansen -> sponvikskans", function() {deepEqual( Stem("sponvikskansen"), "sponvikskans");});
test("spor -> spor", function() {deepEqual( Stem("spor"), "spor");});
test("sporadisk -> sporadisk", function() {deepEqual( Stem("sporadisk"), "sporadisk");});
test("sporene -> spor", function() {deepEqual( Stem("sporene"), "spor");});
test("sporet -> spor", function() {deepEqual( Stem("sporet"), "spor");});
test("sporforbindelse -> sporforbind", function() {deepEqual( Stem("sporforbindelse"), "sporforbind");});
test("sportilknytning -> sportilknytning", function() {deepEqual( Stem("sportilknytning"), "sportilknytning");});
test("spott -> spott", function() {deepEqual( Stem("spott"), "spott");});
test("spotter -> spott", function() {deepEqual( Stem("spotter"), "spott");});
test("sprakende -> sprak", function() {deepEqual( Stem("sprakende"), "sprak");});
test("sprakk -> sprakk", function() {deepEqual( Stem("sprakk"), "sprakk");});
test("sprang -> sprang", function() {deepEqual( Stem("sprang"), "sprang");});
test("spranget -> sprang", function() {deepEqual( Stem("spranget"), "sprang");});
test("spratt -> spratt", function() {deepEqual( Stem("spratt"), "spratt");});
test("spre -> spre", function() {deepEqual( Stem("spre"), "spre");});
test("spreading -> spreading", function() {deepEqual( Stem("spreading"), "spreading");});
test("spredning -> spredning", function() {deepEqual( Stem("spredning"), "spredning");});
test("spredningen -> spredning", function() {deepEqual( Stem("spredningen"), "spredning");});
test("spredningsalternativer -> spredningsalternativ", function() {deepEqual( Stem("spredningsalternativer"), "spredningsalternativ");});
test("spredningsformer -> spredningsform", function() {deepEqual( Stem("spredningsformer"), "spredningsform");});
test("spredningsmønster -> spredningsmønst", function() {deepEqual( Stem("spredningsmønster"), "spredningsmønst");});
test("spredningsnett -> spredningsnett", function() {deepEqual( Stem("spredningsnett"), "spredningsnett");});
test("spredt -> spredt", function() {deepEqual( Stem("spredt"), "spredt");});
test("spreiast -> spreiast", function() {deepEqual( Stem("spreiast"), "spreiast");});
test("spreidde -> spreidd", function() {deepEqual( Stem("spreidde"), "spreidd");});
test("sprekere -> spreker", function() {deepEqual( Stem("sprekere"), "spreker");});
test("sprekk -> sprekk", function() {deepEqual( Stem("sprekk"), "sprekk");});
test("sprekke -> sprekk", function() {deepEqual( Stem("sprekke"), "sprekk");});
test("sprekker -> sprekk", function() {deepEqual( Stem("sprekker"), "sprekk");});
test("sprell -> sprell", function() {deepEqual( Stem("sprell"), "sprell");});
test("sprellende -> sprell", function() {deepEqual( Stem("sprellende"), "sprell");});
test("spreller -> sprell", function() {deepEqual( Stem("spreller"), "sprell");});
test("sprenge -> spreng", function() {deepEqual( Stem("sprenge"), "spreng");});
test("sprenger -> spreng", function() {deepEqual( Stem("sprenger"), "spreng");});
test("sprenges -> spreng", function() {deepEqual( Stem("sprenges"), "spreng");});
test("sprengkulda -> sprengkuld", function() {deepEqual( Stem("sprengkulda"), "sprengkuld");});
test("sprengninger -> sprengning", function() {deepEqual( Stem("sprengninger"), "sprengning");});
test("sprengrir -> sprengrir", function() {deepEqual( Stem("sprengrir"), "sprengrir");});
test("sprengt -> sprengt", function() {deepEqual( Stem("sprengt"), "sprengt");});
test("spres -> spres", function() {deepEqual( Stem("spres"), "spres");});
test("spretter -> sprett", function() {deepEqual( Stem("spretter"), "sprett");});
test("sprik -> sprik", function() {deepEqual( Stem("sprik"), "sprik");});
test("spriker -> sprik", function() {deepEqual( Stem("spriker"), "sprik");});
test("spriket -> sprik", function() {deepEqual( Stem("spriket"), "sprik");});
test("springer -> spring", function() {deepEqual( Stem("springer"), "spring");});
test("springskaller -> springskall", function() {deepEqual( Stem("springskaller"), "springskall");});
test("spruten -> sprut", function() {deepEqual( Stem("spruten"), "sprut");});
test("spruter -> sprut", function() {deepEqual( Stem("spruter"), "sprut");});
test("sprutet -> sprut", function() {deepEqual( Stem("sprutet"), "sprut");});
test("språk -> språk", function() {deepEqual( Stem("språk"), "språk");});
test("språkbruk -> språkbruk", function() {deepEqual( Stem("språkbruk"), "språkbruk");});
test("språket -> språk", function() {deepEqual( Stem("språket"), "språk");});
test("språkkunnskapar -> språkkunnskap", function() {deepEqual( Stem("språkkunnskapar"), "språkkunnskap");});
test("språklig -> språk", function() {deepEqual( Stem("språklig"), "språk");});
test("spurt -> spurt", function() {deepEqual( Stem("spurt"), "spurt");});
test("spurte -> spurt", function() {deepEqual( Stem("spurte"), "spurt");});
test("spyd -> spyd", function() {deepEqual( Stem("spyd"), "spyd");});
test("spydet -> spyd", function() {deepEqual( Stem("spydet"), "spyd");});
test("spydkast -> spydk", function() {deepEqual( Stem("spydkast"), "spydk");});
test("spyende -> spyend", function() {deepEqual( Stem("spyende"), "spyend");});
test("spyr -> spyr", function() {deepEqual( Stem("spyr"), "spyr");});
test("spytt -> spytt", function() {deepEqual( Stem("spytt"), "spytt");});
test("spytte -> spytt", function() {deepEqual( Stem("spytte"), "spytt");});
test("spytter -> spytt", function() {deepEqual( Stem("spytter"), "spytt");});
test("spyttet -> spytt", function() {deepEqual( Stem("spyttet"), "spytt");});
test("spå -> spå", function() {deepEqual( Stem("spå"), "spå");});
test("spådd -> spådd", function() {deepEqual( Stem("spådd"), "spådd");});
test("spådommen -> spådomm", function() {deepEqual( Stem("spådommen"), "spådomm");});
test("spåkjerringer -> spåkjerring", function() {deepEqual( Stem("spåkjerringer"), "spåkjerring");});
test("spåkoner -> spåkon", function() {deepEqual( Stem("spåkoner"), "spåkon");});
test("spåkunster -> spåkunst", function() {deepEqual( Stem("spåkunster"), "spåkunst");});
test("spåkvinne -> spåkvinn", function() {deepEqual( Stem("spåkvinne"), "spåkvinn");});
test("spåkvinnen -> spåkvinn", function() {deepEqual( Stem("spåkvinnen"), "spåkvinn");});
test("spåkvinner -> spåkvinn", function() {deepEqual( Stem("spåkvinner"), "spåkvinn");});
test("spøk -> spøk", function() {deepEqual( Stem("spøk"), "spøk");});
test("spøker -> spøk", function() {deepEqual( Stem("spøker"), "spøk");});
test("spør -> spør", function() {deepEqual( Stem("spør"), "spør");});
test("spørje -> spørj", function() {deepEqual( Stem("spørje"), "spørj");});
test("spørre -> spørr", function() {deepEqual( Stem("spørre"), "spørr");});
test("spørrende -> spørr", function() {deepEqual( Stem("spørrende"), "spørr");});
test("spørres -> spørr", function() {deepEqual( Stem("spørres"), "spørr");});
test("spørreundersøkelse -> spørreundersøk", function() {deepEqual( Stem("spørreundersøkelse"), "spørreundersøk");});
test("spørsmål -> spørsmål", function() {deepEqual( Stem("spørsmål"), "spørsmål");});
test("spørsmåla -> spørsmål", function() {deepEqual( Stem("spørsmåla"), "spørsmål");});
test("spørsmålene -> spørsmål", function() {deepEqual( Stem("spørsmålene"), "spørsmål");});
test("spørsmålet -> spørsmål", function() {deepEqual( Stem("spørsmålet"), "spørsmål");});
test("ssbs -> ssbs", function() {deepEqual( Stem("ssbs"), "ssbs");});
test("st -> st", function() {deepEqual( Stem("st"), "st");});
test("stabber -> stabb", function() {deepEqual( Stem("stabber"), "stabb");});
test("stabburet -> stabbur", function() {deepEqual( Stem("stabburet"), "stabbur");});
test("stabil -> stabil", function() {deepEqual( Stem("stabil"), "stabil");});
test("stabile -> stabil", function() {deepEqual( Stem("stabile"), "stabil");});
test("stabilisert -> stabiliser", function() {deepEqual( Stem("stabilisert"), "stabiliser");});
test("stabilitet -> stabilit", function() {deepEqual( Stem("stabilitet"), "stabilit");});
test("stabilt -> stabilt", function() {deepEqual( Stem("stabilt"), "stabilt");});
test("stablekraner -> stablekran", function() {deepEqual( Stem("stablekraner"), "stablekran");});
test("stablekransystemer -> stablekransystem", function() {deepEqual( Stem("stablekransystemer"), "stablekransystem");});
test("stablekranteknologi -> stablekranteknologi", function() {deepEqual( Stem("stablekranteknologi"), "stablekranteknologi");});
test("stables -> stabl", function() {deepEqual( Stem("stables"), "stabl");});
test("stableteknologi -> stableteknologi", function() {deepEqual( Stem("stableteknologi"), "stableteknologi");});
test("stabling -> stabling", function() {deepEqual( Stem("stabling"), "stabling");});
test("stad -> stad", function() {deepEqual( Stem("stad"), "stad");});
test("staden -> stad", function() {deepEqual( Stem("staden"), "stad");});
test("stader -> stad", function() {deepEqual( Stem("stader"), "stad");});
test("stades -> stad", function() {deepEqual( Stem("stades"), "stad");});
test("stadfesta -> stadfest", function() {deepEqual( Stem("stadfesta"), "stadfest");});
test("stadfestast -> stadfest", function() {deepEqual( Stem("stadfestast"), "stadfest");});
test("stadfeste -> stadfest", function() {deepEqual( Stem("stadfeste"), "stadfest");});
test("stadfestes -> stadfest", function() {deepEqual( Stem("stadfestes"), "stadfest");});
test("stadfestet -> stadfest", function() {deepEqual( Stem("stadfestet"), "stadfest");});
test("stadfesting -> stadfesting", function() {deepEqual( Stem("stadfesting"), "stadfesting");});
test("stadfestingsorskurd -> stadfestingsorskurd", function() {deepEqual( Stem("stadfestingsorskurd"), "stadfestingsorskurd");});
test("stadig -> stad", function() {deepEqual( Stem("stadig"), "stad");});
test("stadige -> stad", function() {deepEqual( Stem("stadige"), "stad");});
test("stagge -> stagg", function() {deepEqual( Stem("stagge"), "stagg");});
test("stagger -> stagg", function() {deepEqual( Stem("stagger"), "stagg");});
test("stagnasjon -> stagnasjon", function() {deepEqual( Stem("stagnasjon"), "stagnasjon");});
test("stagnere -> stagner", function() {deepEqual( Stem("stagnere"), "stagner");});
test("staking -> staking", function() {deepEqual( Stem("staking"), "staking");});
test("stakk -> stakk", function() {deepEqual( Stem("stakk"), "stakk");});
test("stakkar -> stakk", function() {deepEqual( Stem("stakkar"), "stakk");});
test("stakkars -> stakkar", function() {deepEqual( Stem("stakkars"), "stakkar");});
test("stamfar -> stamf", function() {deepEqual( Stem("stamfar"), "stamf");});
test("stammen -> stamm", function() {deepEqual( Stem("stammen"), "stamm");});
test("stammer -> stamm", function() {deepEqual( Stem("stammer"), "stamm");});
test("stamnett -> stamnett", function() {deepEqual( Stem("stamnett"), "stamnett");});
test("stamnettet -> stamnett", function() {deepEqual( Stem("stamnettet"), "stamnett");});
test("stamper -> stamp", function() {deepEqual( Stem("stamper"), "stamp");});
test("stamveg -> stamveg", function() {deepEqual( Stem("stamveg"), "stamveg");});
test("stamvegforbindelsen -> stamvegforbind", function() {deepEqual( Stem("stamvegforbindelsen"), "stamvegforbind");});
test("stamvegnettet -> stamvegnett", function() {deepEqual( Stem("stamvegnettet"), "stamvegnett");});
test("stamvegtilknytning -> stamvegtilknytning", function() {deepEqual( Stem("stamvegtilknytning"), "stamvegtilknytning");});
test("stand -> stand", function() {deepEqual( Stem("stand"), "stand");});
test("standard -> standard", function() {deepEqual( Stem("standard"), "standard");});
test("standardberegnet -> standardberegn", function() {deepEqual( Stem("standardberegnet"), "standardberegn");});
test("standardberegning -> standardberegning", function() {deepEqual( Stem("standardberegning"), "standardberegning");});
test("standarden -> standard", function() {deepEqual( Stem("standarden"), "standard");});
test("standardfradrag -> standardfradrag", function() {deepEqual( Stem("standardfradrag"), "standardfradrag");});
test("standardfradragene -> standardfradrag", function() {deepEqual( Stem("standardfradragene"), "standardfradrag");});
test("standardisering -> standardisering", function() {deepEqual( Stem("standardisering"), "standardisering");});
test("standardiserte -> standardiser", function() {deepEqual( Stem("standardiserte"), "standardiser");});
test("standardsikring -> standardsikring", function() {deepEqual( Stem("standardsikring"), "standardsikring");});
test("standpunkt -> standpunkt", function() {deepEqual( Stem("standpunkt"), "standpunkt");});
test("standpunkta -> standpunkt", function() {deepEqual( Stem("standpunkta"), "standpunkt");});
test("stange -> stang", function() {deepEqual( Stem("stange"), "stang");});
test("stanger -> stang", function() {deepEqual( Stem("stanger"), "stang");});
test("stanken -> stank", function() {deepEqual( Stem("stanken"), "stank");});
test("stans -> stan", function() {deepEqual( Stem("stans"), "stan");});
test("stansa -> stans", function() {deepEqual( Stem("stansa"), "stans");});
test("stanse -> stans", function() {deepEqual( Stem("stanse"), "stans");});
test("stanser -> stans", function() {deepEqual( Stem("stanser"), "stans");});
test("stanset -> stans", function() {deepEqual( Stem("stanset"), "stans");});
test("stappe -> stapp", function() {deepEqual( Stem("stappe"), "stapp");});
test("star -> star", function() {deepEqual( Stem("star"), "star");});
test("starkad -> starkad", function() {deepEqual( Stem("starkad"), "starkad");});
test("start -> start", function() {deepEqual( Stem("start"), "start");});
test("starte -> start", function() {deepEqual( Stem("starte"), "start");});
test("starter -> start", function() {deepEqual( Stem("starter"), "start");});
test("startes -> start", function() {deepEqual( Stem("startes"), "start");});
test("startet -> start", function() {deepEqual( Stem("startet"), "start");});
test("startlønn -> startlønn", function() {deepEqual( Stem("startlønn"), "startlønn");});
test("stas -> stas", function() {deepEqual( Stem("stas"), "stas");});
test("staselig -> stas", function() {deepEqual( Stem("staselig"), "stas");});
test("staselige -> stas", function() {deepEqual( Stem("staselige"), "stas");});
test("stasjon -> stasjon", function() {deepEqual( Stem("stasjon"), "stasjon");});
test("stasjons -> stasjon", function() {deepEqual( Stem("stasjons"), "stasjon");});
test("stat -> stat", function() {deepEqual( Stem("stat"), "stat");});
test("staten -> stat", function() {deepEqual( Stem("staten"), "stat");});
test("statens -> stat", function() {deepEqual( Stem("statens"), "stat");});
test("stater -> stat", function() {deepEqual( Stem("stater"), "stat");});
test("states -> stat", function() {deepEqual( Stem("states"), "stat");});
test("statistikk -> statistikk", function() {deepEqual( Stem("statistikk"), "statistikk");});
test("statistisk -> statistisk", function() {deepEqual( Stem("statistisk"), "statistisk");});
test("statistiske -> statistisk", function() {deepEqual( Stem("statistiske"), "statistisk");});
test("statlege -> stat", function() {deepEqual( Stem("statlege"), "stat");});
test("statlig -> stat", function() {deepEqual( Stem("statlig"), "stat");});
test("statlige -> stat", function() {deepEqual( Stem("statlige"), "stat");});
test("statlånsrente -> statlånsrent", function() {deepEqual( Stem("statlånsrente"), "statlånsrent");});
test("stats -> stat", function() {deepEqual( Stem("stats"), "stat");});
test("statsautorisert -> statsautoriser", function() {deepEqual( Stem("statsautorisert"), "statsautoriser");});
test("statsautoriserte -> statsautoriser", function() {deepEqual( Stem("statsautoriserte"), "statsautoriser");});
test("statsborgarskap -> statsborgarskap", function() {deepEqual( Stem("statsborgarskap"), "statsborgarskap");});
test("statsborgere -> statsborger", function() {deepEqual( Stem("statsborgere"), "statsborger");});
test("statsborgerskap -> statsborgerskap", function() {deepEqual( Stem("statsborgerskap"), "statsborgerskap");});
test("statsbudsjettet -> statsbudsjett", function() {deepEqual( Stem("statsbudsjettet"), "statsbudsjett");});
test("statsen -> stats", function() {deepEqual( Stem("statsen"), "stats");});
test("statsmidler -> statsmidl", function() {deepEqual( Stem("statsmidler"), "statsmidl");});
test("statsråd -> statsråd", function() {deepEqual( Stem("statsråd"), "statsråd");});
test("statsstøtte -> statsstøtt", function() {deepEqual( Stem("statsstøtte"), "statsstøtt");});
test("status -> status", function() {deepEqual( Stem("status"), "status");});
test("statusen -> status", function() {deepEqual( Stem("statusen"), "status");});
test("staur -> staur", function() {deepEqual( Stem("staur"), "staur");});
test("staute -> staut", function() {deepEqual( Stem("staute"), "staut");});
test("stav -> stav", function() {deepEqual( Stem("stav"), "stav");});
test("stavanger -> stavang", function() {deepEqual( Stem("stavanger"), "stavang");});
test("stavbærerske -> stavbærersk", function() {deepEqual( Stem("stavbærerske"), "stavbærersk");});
test("staven -> stav", function() {deepEqual( Stem("staven"), "stav");});
test("stavnen -> stavn", function() {deepEqual( Stem("stavnen"), "stavn");});
test("stavrende -> stavr", function() {deepEqual( Stem("stavrende"), "stavr");});
test("stebarn -> stebarn", function() {deepEqual( Stem("stebarn"), "stebarn");});
test("sted -> sted", function() {deepEqual( Stem("sted"), "sted");});
test("stedbundet -> stedbund", function() {deepEqual( Stem("stedbundet"), "stedbund");});
test("stede -> sted", function() {deepEqual( Stem("stede"), "sted");});
test("steden -> sted", function() {deepEqual( Stem("steden"), "sted");});
test("stedene -> sted", function() {deepEqual( Stem("stedene"), "sted");});
test("steder -> sted", function() {deepEqual( Stem("steder"), "sted");});
test("stedet -> sted", function() {deepEqual( Stem("stedet"), "sted");});
test("stedsforming -> stedsforming", function() {deepEqual( Stem("stedsforming"), "stedsforming");});
test("stedvis -> stedvis", function() {deepEqual( Stem("stedvis"), "stedvis");});
test("steg -> steg", function() {deepEqual( Stem("steg"), "steg");});
test("steget -> steg", function() {deepEqual( Stem("steget"), "steg");});
test("steil -> steil", function() {deepEqual( Stem("steil"), "steil");});
test("steilene -> steil", function() {deepEqual( Stem("steilene"), "steil");});
test("stein -> stein", function() {deepEqual( Stem("stein"), "stein");});
test("steineksport -> steineksport", function() {deepEqual( Stem("steineksport"), "steineksport");});
test("steinene -> stein", function() {deepEqual( Stem("steinene"), "stein");});
test("steinnes -> steinn", function() {deepEqual( Stem("steinnes"), "steinn");});
test("steinrøys -> steinrøy", function() {deepEqual( Stem("steinrøys"), "steinrøy");});
test("steinrøyser -> steinrøys", function() {deepEqual( Stem("steinrøyser"), "steinrøys");});
test("steke -> stek", function() {deepEqual( Stem("steke"), "stek");});
test("stekt -> stekt", function() {deepEqual( Stem("stekt"), "stekt");});
test("stell -> stell", function() {deepEqual( Stem("stell"), "stell");});
test("stelle -> stell", function() {deepEqual( Stem("stelle"), "stell");});
test("stelt -> stelt", function() {deepEqual( Stem("stelt"), "stelt");});
test("stemme -> stemm", function() {deepEqual( Stem("stemme"), "stemm");});
test("stemmen -> stemm", function() {deepEqual( Stem("stemmen"), "stemm");});
test("stemmene -> stemm", function() {deepEqual( Stem("stemmene"), "stemm");});
test("stemmer -> stemm", function() {deepEqual( Stem("stemmer"), "stemm");});
test("stemmerett -> stemmerett", function() {deepEqual( Stem("stemmerett"), "stemmerett");});
test("stemninga -> stemning", function() {deepEqual( Stem("stemninga"), "stemning");});
test("stemte -> stemt", function() {deepEqual( Stem("stemte"), "stemt");});
test("sten -> sten", function() {deepEqual( Stem("sten"), "sten");});
test("stendig -> stend", function() {deepEqual( Stem("stendig"), "stend");});
test("stenen -> sten", function() {deepEqual( Stem("stenen"), "sten");});
test("stenene -> sten", function() {deepEqual( Stem("stenene"), "sten");});
test("stener -> sten", function() {deepEqual( Stem("stener"), "sten");});
test("stengd -> stengd", function() {deepEqual( Stem("stengd"), "stengd");});
test("stengde -> stengd", function() {deepEqual( Stem("stengde"), "stengd");});
test("stenge -> steng", function() {deepEqual( Stem("stenge"), "steng");});
test("stengjast -> stengj", function() {deepEqual( Stem("stengjast"), "stengj");});
test("stengje -> stengj", function() {deepEqual( Stem("stengje"), "stengj");});
test("stengjer -> stengj", function() {deepEqual( Stem("stengjer"), "stengj");});
test("stengt -> stengt", function() {deepEqual( Stem("stengt"), "stengt");});
test("stenk -> stenk", function() {deepEqual( Stem("stenk"), "stenk");});
test("stenkisten -> stenkist", function() {deepEqual( Stem("stenkisten"), "stenkist");});
test("stenmurene -> stenmur", function() {deepEqual( Stem("stenmurene"), "stenmur");});
test("stenstolpe -> stenstolp", function() {deepEqual( Stem("stenstolpe"), "stenstolp");});
test("stephen -> steph", function() {deepEqual( Stem("stephen"), "steph");});
test("steppene -> stepp", function() {deepEqual( Stem("steppene"), "stepp");});
test("sterk -> sterk", function() {deepEqual( Stem("sterk"), "sterk");});
test("sterkare -> sterkar", function() {deepEqual( Stem("sterkare"), "sterkar");});
test("sterkaste -> sterkast", function() {deepEqual( Stem("sterkaste"), "sterkast");});
test("sterke -> sterk", function() {deepEqual( Stem("sterke"), "sterk");});
test("sterkere -> sterker", function() {deepEqual( Stem("sterkere"), "sterker");});
test("sterkest -> sterkest", function() {deepEqual( Stem("sterkest"), "sterkest");});
test("sterkeste -> sterkest", function() {deepEqual( Stem("sterkeste"), "sterkest");});
test("sterkt -> sterkt", function() {deepEqual( Stem("sterkt"), "sterkt");});
test("stesønn -> stesønn", function() {deepEqual( Stem("stesønn"), "stesønn");});
test("stesønnen -> stesønn", function() {deepEqual( Stem("stesønnen"), "stesønn");});
test("stettar -> stett", function() {deepEqual( Stem("stettar"), "stett");});
test("stevnemøte -> stevnemøt", function() {deepEqual( Stem("stevnemøte"), "stevnemøt");});
test("stien -> stien", function() {deepEqual( Stem("stien"), "stien");});
test("stier -> stier", function() {deepEqual( Stem("stier"), "stier");});
test("stifta -> stift", function() {deepEqual( Stem("stifta"), "stift");});
test("stiftar -> stift", function() {deepEqual( Stem("stiftar"), "stift");});
test("stiftarane -> stiftar", function() {deepEqual( Stem("stiftarane"), "stiftar");});
test("stiftarar -> stiftar", function() {deepEqual( Stem("stiftarar"), "stiftar");});
test("stiftaren -> stiftar", function() {deepEqual( Stem("stiftaren"), "stiftar");});
test("stiftast -> stift", function() {deepEqual( Stem("stiftast"), "stift");});
test("stifte -> stift", function() {deepEqual( Stem("stifte"), "stift");});
test("stiftelse -> stift", function() {deepEqual( Stem("stiftelse"), "stift");});
test("stiftelser -> stift", function() {deepEqual( Stem("stiftelser"), "stift");});
test("stiftelsesgrunnlaget -> stiftelsesgrunnlag", function() {deepEqual( Stem("stiftelsesgrunnlaget"), "stiftelsesgrunnlag");});
test("stiftelsesloven -> stiftelse", function() {deepEqual( Stem("stiftelsesloven"), "stiftelse");});
test("stiftelseslovens -> stiftelse", function() {deepEqual( Stem("stiftelseslovens"), "stiftelse");});
test("stifting -> stifting", function() {deepEqual( Stem("stifting"), "stifting");});
test("stiftinga -> stifting", function() {deepEqual( Stem("stiftinga"), "stifting");});
test("stiftingar -> stifting", function() {deepEqual( Stem("stiftingar"), "stifting");});
test("stiftingsdokument -> stiftingsdokument", function() {deepEqual( Stem("stiftingsdokument"), "stiftingsdokument");});
test("stiftingsdokumentet -> stiftingsdokument", function() {deepEqual( Stem("stiftingsdokumentet"), "stiftingsdokument");});
test("stiftingsgrunnlaget -> stiftingsgrunnlag", function() {deepEqual( Stem("stiftingsgrunnlaget"), "stiftingsgrunnlag");});
test("stiftingslova -> stifting", function() {deepEqual( Stem("stiftingslova"), "stifting");});
test("stiftingsmøtet -> stiftingsmøt", function() {deepEqual( Stem("stiftingsmøtet"), "stiftingsmøt");});
test("stiftingsutgiftene -> stiftingsutgift", function() {deepEqual( Stem("stiftingsutgiftene"), "stiftingsutgift");});
test("stiftingsutgifter -> stiftingsutgift", function() {deepEqual( Stem("stiftingsutgifter"), "stiftingsutgift");});
test("stiftingsvilkåra -> stiftingsvilkår", function() {deepEqual( Stem("stiftingsvilkåra"), "stiftingsvilkår");});
test("stig -> stig", function() {deepEqual( Stem("stig"), "stig");});
test("stige -> stig", function() {deepEqual( Stem("stige"), "stig");});
test("stigende -> stig", function() {deepEqual( Stem("stigende"), "stig");});
test("stiger -> stig", function() {deepEqual( Stem("stiger"), "stig");});
test("stigninger -> stigning", function() {deepEqual( Stem("stigninger"), "stigning");});
test("stikk -> stikk", function() {deepEqual( Stem("stikk"), "stikk");});
test("stikke -> stikk", function() {deepEqual( Stem("stikke"), "stikk");});
test("stikker -> stikk", function() {deepEqual( Stem("stikker"), "stikk");});
test("stikkes -> stikk", function() {deepEqual( Stem("stikkes"), "stikk");});
test("stikkord -> stikkord", function() {deepEqual( Stem("stikkord"), "stikkord");});
test("stilisert -> stiliser", function() {deepEqual( Stem("stilisert"), "stiliser");});
test("stiliserte -> stiliser", function() {deepEqual( Stem("stiliserte"), "stiliser");});
test("stillast -> still", function() {deepEqual( Stem("stillast"), "still");});
test("stille -> still", function() {deepEqual( Stem("stille"), "still");});
test("stiller -> still", function() {deepEqual( Stem("stiller"), "still");});
test("stilles -> still", function() {deepEqual( Stem("stilles"), "still");});
test("stilling -> stilling", function() {deepEqual( Stem("stilling"), "stilling");});
test("stillinga -> stilling", function() {deepEqual( Stem("stillinga"), "stilling");});
test("stillingar -> stilling", function() {deepEqual( Stem("stillingar"), "stilling");});
test("stillingen -> stilling", function() {deepEqual( Stem("stillingen"), "stilling");});
test("stillinger -> stilling", function() {deepEqual( Stem("stillinger"), "stilling");});
test("stillingsandel -> stillingsandel", function() {deepEqual( Stem("stillingsandel"), "stillingsandel");});
test("stillingsfullmakt -> stillingsfullmakt", function() {deepEqual( Stem("stillingsfullmakt"), "stillingsfullmakt");});
test("stillingsgruppe -> stillingsgrupp", function() {deepEqual( Stem("stillingsgruppe"), "stillingsgrupp");});
test("stillingsinstruksar -> stillingsinstruks", function() {deepEqual( Stem("stillingsinstruksar"), "stillingsinstruks");});
test("stillingsskifter -> stillingsskift", function() {deepEqual( Stem("stillingsskifter"), "stillingsskift");});
test("stilt -> stilt", function() {deepEqual( Stem("stilt"), "stilt");});
test("stilte -> stilt", function() {deepEqual( Stem("stilte"), "stilt");});
test("stime -> stim", function() {deepEqual( Stem("stime"), "stim");});
test("stimler -> stiml", function() {deepEqual( Stem("stimler"), "stiml");});
test("stimulansen -> stimulans", function() {deepEqual( Stem("stimulansen"), "stimulans");});
test("stimulere -> stimuler", function() {deepEqual( Stem("stimulere"), "stimuler");});
test("stimulerer -> stimuler", function() {deepEqual( Stem("stimulerer"), "stimuler");});
test("stimulering -> stimulering", function() {deepEqual( Stem("stimulering"), "stimulering");});
test("stinker -> stink", function() {deepEqual( Stem("stinker"), "stink");});
test("stipulert -> stipuler", function() {deepEqual( Stem("stipulert"), "stipuler");});
test("stirre -> stirr", function() {deepEqual( Stem("stirre"), "stirr");});
test("stirrer -> stirr", function() {deepEqual( Stem("stirrer"), "stirr");});
test("stiv -> stiv", function() {deepEqual( Stem("stiv"), "stiv");});
test("stive -> stiv", function() {deepEqual( Stem("stive"), "stiv");});
test("stivnet -> stivn", function() {deepEqual( Stem("stivnet"), "stivn");});
test("stjal -> stjal", function() {deepEqual( Stem("stjal"), "stjal");});
test("stjele -> stjel", function() {deepEqual( Stem("stjele"), "stjel");});
test("stjerne -> stjern", function() {deepEqual( Stem("stjerne"), "stjern");});
test("stjernen -> stjern", function() {deepEqual( Stem("stjernen"), "stjern");});
test("stjernene -> stjern", function() {deepEqual( Stem("stjernene"), "stjern");});
test("stjerner -> stjern", function() {deepEqual( Stem("stjerner"), "stjern");});
test("stk -> stk", function() {deepEqual( Stem("stk"), "stk");});
test("sto -> sto", function() {deepEqual( Stem("sto"), "sto");});
test("stockholm -> stockholm", function() {deepEqual( Stem("stockholm"), "stockholm");});
test("stod -> stod", function() {deepEqual( Stem("stod"), "stod");});
test("stoda -> stod", function() {deepEqual( Stem("stoda"), "stod");});
test("stokk -> stokk", function() {deepEqual( Stem("stokk"), "stokk");});
test("stokke -> stokk", function() {deepEqual( Stem("stokke"), "stokk");});
test("stokken -> stokk", function() {deepEqual( Stem("stokken"), "stokk");});
test("stokkene -> stokk", function() {deepEqual( Stem("stokkene"), "stokk");});
test("stol -> stol", function() {deepEqual( Stem("stol"), "stol");});
test("stole -> stol", function() {deepEqual( Stem("stole"), "stol");});
test("stolen -> stol", function() {deepEqual( Stem("stolen"), "stol");});
test("stolene -> stol", function() {deepEqual( Stem("stolene"), "stol");});
test("stoler -> stol", function() {deepEqual( Stem("stoler"), "stol");});
test("stolpe -> stolp", function() {deepEqual( Stem("stolpe"), "stolp");});
test("stolpen -> stolp", function() {deepEqual( Stem("stolpen"), "stolp");});
test("stolt -> stolt", function() {deepEqual( Stem("stolt"), "stolt");});
test("stolte -> stolt", function() {deepEqual( Stem("stolte"), "stolt");});
test("stoltere -> stolter", function() {deepEqual( Stem("stoltere"), "stolter");});
test("stolthet -> stolt", function() {deepEqual( Stem("stolthet"), "stolt");});
test("stoppe -> stopp", function() {deepEqual( Stem("stoppe"), "stopp");});
test("stopper -> stopp", function() {deepEqual( Stem("stopper"), "stopp");});
test("stoppet -> stopp", function() {deepEqual( Stem("stoppet"), "stopp");});
test("stor -> stor", function() {deepEqual( Stem("stor"), "stor");});
test("storbritannia -> storbritanni", function() {deepEqual( Stem("storbritannia"), "storbritanni");});
test("storbyene -> storby", function() {deepEqual( Stem("storbyene"), "storby");});
test("stordriftsfordelene -> stordriftsfordel", function() {deepEqual( Stem("stordriftsfordelene"), "stordriftsfordel");});
test("stordriftsfordeler -> stordriftsfordel", function() {deepEqual( Stem("stordriftsfordeler"), "stordriftsfordel");});
test("store -> stor", function() {deepEqual( Stem("store"), "stor");});
test("storebroren -> storebror", function() {deepEqual( Stem("storebroren"), "storebror");});
test("storesøster -> storesøst", function() {deepEqual( Stem("storesøster"), "storesøst");});
test("storleik -> storleik", function() {deepEqual( Stem("storleik"), "storleik");});
test("storleiken -> storleik", function() {deepEqual( Stem("storleiken"), "storleik");});
test("storm -> storm", function() {deepEqual( Stem("storm"), "storm");});
test("stormannsgal -> stormannsgal", function() {deepEqual( Stem("stormannsgal"), "stormannsgal");});
test("stormen -> storm", function() {deepEqual( Stem("stormen"), "storm");});
test("stormende -> storm", function() {deepEqual( Stem("stormende"), "storm");});
test("stormer -> storm", function() {deepEqual( Stem("stormer"), "storm");});
test("stormet -> storm", function() {deepEqual( Stem("stormet"), "storm");});
test("stormkastene -> stormkast", function() {deepEqual( Stem("stormkastene"), "stormkast");});
test("stormvind -> stormvind", function() {deepEqual( Stem("stormvind"), "stormvind");});
test("stormvær -> stormvær", function() {deepEqual( Stem("stormvær"), "stormvær");});
test("storstilet -> storstil", function() {deepEqual( Stem("storstilet"), "storstil");});
test("stort -> stort", function() {deepEqual( Stem("stort"), "stort");});
test("stortinget -> storting", function() {deepEqual( Stem("stortinget"), "storting");});
test("stortingets -> storting", function() {deepEqual( Stem("stortingets"), "storting");});
test("stortingsbehandling -> stortingsbehandling", function() {deepEqual( Stem("stortingsbehandling"), "stortingsbehandling");});
test("stortingsbehandlingen -> stortingsbehandling", function() {deepEqual( Stem("stortingsbehandlingen"), "stortingsbehandling");});
test("stortingskomiteen -> stortingskomite", function() {deepEqual( Stem("stortingskomiteen"), "stortingskomite");});
test("stortingsmelding -> stortingsmelding", function() {deepEqual( Stem("stortingsmelding"), "stortingsmelding");});
test("stortingsmeldingen -> stortingsmelding", function() {deepEqual( Stem("stortingsmeldingen"), "stortingsmelding");});
test("stortingsmeldingene -> stortingsmelding", function() {deepEqual( Stem("stortingsmeldingene"), "stortingsmelding");});
test("stortingsmeldinger -> stortingsmelding", function() {deepEqual( Stem("stortingsmeldinger"), "stortingsmelding");});
test("stortingsvedtak -> stortingsvedtak", function() {deepEqual( Stem("stortingsvedtak"), "stortingsvedtak");});
test("stortåen -> stortå", function() {deepEqual( Stem("stortåen"), "stortå");});
test("storverk -> storverk", function() {deepEqual( Stem("storverk"), "storverk");});
test("storøyde -> storøyd", function() {deepEqual( Stem("storøyde"), "storøyd");});
test("stp -> stp", function() {deepEqual( Stem("stp"), "stp");});
test("straff -> straff", function() {deepEqual( Stem("straff"), "straff");});
test("straffast -> straff", function() {deepEqual( Stem("straffast"), "straff");});
test("straffe -> straff", function() {deepEqual( Stem("straffe"), "straff");});
test("straffeføresegn -> straffeføresegn", function() {deepEqual( Stem("straffeføresegn"), "straffeføresegn");});
test("straffeføresegner -> straffeføresegn", function() {deepEqual( Stem("straffeføresegner"), "straffeføresegn");});
test("straffelova -> straff", function() {deepEqual( Stem("straffelova"), "straff");});
test("strafferegelen -> strafferegel", function() {deepEqual( Stem("strafferegelen"), "strafferegel");});
test("straffereglane -> strafferegl", function() {deepEqual( Stem("straffereglane"), "strafferegl");});
test("straffes -> straff", function() {deepEqual( Stem("straffes"), "straff");});
test("straffesak -> straffesak", function() {deepEqual( Stem("straffesak"), "straffesak");});
test("straks -> straks", function() {deepEqual( Stem("straks"), "straks");});
test("stramme -> stramm", function() {deepEqual( Stem("stramme"), "stramm");});
test("strammer -> stramm", function() {deepEqual( Stem("strammer"), "stramm");});
test("strammere -> strammer", function() {deepEqual( Stem("strammere"), "strammer");});
test("strand -> strand", function() {deepEqual( Stem("strand"), "strand");});
test("stranden -> strand", function() {deepEqual( Stem("stranden"), "strand");});
test("strandet -> strand", function() {deepEqual( Stem("strandet"), "strand");});
test("strandlinjen -> strandlinj", function() {deepEqual( Stem("strandlinjen"), "strandlinj");});
test("strandområdene -> strandområd", function() {deepEqual( Stem("strandområdene"), "strandområd");});
test("strandområder -> strandområd", function() {deepEqual( Stem("strandområder"), "strandområd");});
test("strandsonen -> strandson", function() {deepEqual( Stem("strandsonen"), "strandson");});
test("strategi -> strategi", function() {deepEqual( Stem("strategi"), "strategi");});
test("strategier -> strategi", function() {deepEqual( Stem("strategier"), "strategi");});
test("strategiplan -> strategiplan", function() {deepEqual( Stem("strategiplan"), "strategiplan");});
test("strategiplanarbeidet -> strategiplanarbeid", function() {deepEqual( Stem("strategiplanarbeidet"), "strategiplanarbeid");});
test("strategiplanen -> strategiplan", function() {deepEqual( Stem("strategiplanen"), "strategiplan");});
test("strategiplanens -> strategiplan", function() {deepEqual( Stem("strategiplanens"), "strategiplan");});
test("strategiplaner -> strategiplan", function() {deepEqual( Stem("strategiplaner"), "strategiplan");});
test("strategiplans -> strategiplan", function() {deepEqual( Stem("strategiplans"), "strategiplan");});
test("strategisk -> strategisk", function() {deepEqual( Stem("strategisk"), "strategisk");});
test("strategiske -> strategisk", function() {deepEqual( Stem("strategiske"), "strategisk");});
test("straum -> straum", function() {deepEqual( Stem("straum"), "straum");});
test("streife -> streif", function() {deepEqual( Stem("streife"), "streif");});
test("streifer -> streif", function() {deepEqual( Stem("streifer"), "streif");});
test("streik -> streik", function() {deepEqual( Stem("streik"), "streik");});
test("strekke -> strekk", function() {deepEqual( Stem("strekke"), "strekk");});
test("strekker -> strekk", function() {deepEqual( Stem("strekker"), "strekk");});
test("strekkje -> strekkj", function() {deepEqual( Stem("strekkje"), "strekkj");});
test("strekkjer -> strekkj", function() {deepEqual( Stem("strekkjer"), "strekkj");});
test("strekning -> strekning", function() {deepEqual( Stem("strekning"), "strekning");});
test("strekningen -> strekning", function() {deepEqual( Stem("strekningen"), "strekning");});
test("strekninger -> strekning", function() {deepEqual( Stem("strekninger"), "strekning");});
test("strekpunkt -> strekpunkt", function() {deepEqual( Stem("strekpunkt"), "strekpunkt");});
test("strekpunktene -> strekpunkt", function() {deepEqual( Stem("strekpunktene"), "strekpunkt");});
test("streng -> streng", function() {deepEqual( Stem("streng"), "streng");});
test("strengare -> strengar", function() {deepEqual( Stem("strengare"), "strengar");});
test("strenge -> streng", function() {deepEqual( Stem("strenge"), "streng");});
test("strengen -> streng", function() {deepEqual( Stem("strengen"), "streng");});
test("strengere -> strenger", function() {deepEqual( Stem("strengere"), "strenger");});
test("strengt -> strengt", function() {deepEqual( Stem("strengt"), "strengt");});
test("strev -> strev", function() {deepEqual( Stem("strev"), "strev");});
test("strever -> strev", function() {deepEqual( Stem("strever"), "strev");});
test("stri -> stri", function() {deepEqual( Stem("stri"), "stri");});
test("strid -> strid", function() {deepEqual( Stem("strid"), "strid");});
test("stride -> strid", function() {deepEqual( Stem("stride"), "strid");});
test("striden -> strid", function() {deepEqual( Stem("striden"), "strid");});
test("strider -> strid", function() {deepEqual( Stem("strider"), "strid");});
test("strides -> strid", function() {deepEqual( Stem("strides"), "strid");});
test("stridigheter -> strid", function() {deepEqual( Stem("stridigheter"), "strid");});
test("strie -> strie", function() {deepEqual( Stem("strie"), "strie");});
test("striglet -> strigl", function() {deepEqual( Stem("striglet"), "strigl");});
test("strimer -> strim", function() {deepEqual( Stem("strimer"), "strim");});
test("strippes -> stripp", function() {deepEqual( Stem("strippes"), "stripp");});
test("stripping -> stripping", function() {deepEqual( Stem("stripping"), "stripping");});
test("strir -> strir", function() {deepEqual( Stem("strir"), "strir");});
test("stritter -> stritt", function() {deepEqual( Stem("stritter"), "stritt");});
test("struktur -> struktur", function() {deepEqual( Stem("struktur"), "struktur");});
test("strukturelle -> strukturell", function() {deepEqual( Stem("strukturelle"), "strukturell");});
test("strukturen -> struktur", function() {deepEqual( Stem("strukturen"), "struktur");});
test("strukturendringer -> strukturendring", function() {deepEqual( Stem("strukturendringer"), "strukturendring");});
test("strukturer -> struktur", function() {deepEqual( Stem("strukturer"), "struktur");});
test("strupen -> strup", function() {deepEqual( Stem("strupen"), "strup");});
test("stryk -> stryk", function() {deepEqual( Stem("stryk"), "stryk");});
test("stryke -> stryk", function() {deepEqual( Stem("stryke"), "stryk");});
test("strykene -> stryk", function() {deepEqual( Stem("strykene"), "stryk");});
test("stryker -> stryk", function() {deepEqual( Stem("stryker"), "stryk");});
test("strå -> strå", function() {deepEqual( Stem("strå"), "strå");});
test("stråler -> strål", function() {deepEqual( Stem("stråler"), "strål");});
test("stråpersonar -> stråperson", function() {deepEqual( Stem("stråpersonar"), "stråperson");});
test("strøk -> strøk", function() {deepEqual( Stem("strøk"), "strøk");});
test("strøm -> strøm", function() {deepEqual( Stem("strøm"), "strøm");});
test("strømforholdene -> strømforhold", function() {deepEqual( Stem("strømforholdene"), "strømforhold");});
test("strømføringen -> strømføring", function() {deepEqual( Stem("strømføringen"), "strømføring");});
test("strømme -> strømm", function() {deepEqual( Stem("strømme"), "strømm");});
test("strømmen -> strømm", function() {deepEqual( Stem("strømmen"), "strømm");});
test("strømmende -> strømm", function() {deepEqual( Stem("strømmende"), "strømm");});
test("strømmer -> strømm", function() {deepEqual( Stem("strømmer"), "strømm");});
test("strømmet -> strømm", function() {deepEqual( Stem("strømmet"), "strømm");});
test("strømstad -> strømstad", function() {deepEqual( Stem("strømstad"), "strømstad");});
test("stubbe -> stubb", function() {deepEqual( Stem("stubbe"), "stubb");});
test("studere -> studer", function() {deepEqual( Stem("studere"), "studer");});
test("studerer -> studer", function() {deepEqual( Stem("studerer"), "studer");});
test("studie -> studi", function() {deepEqual( Stem("studie"), "studi");});
test("studiene -> studi", function() {deepEqual( Stem("studiene"), "studi");});
test("studier -> studi", function() {deepEqual( Stem("studier"), "studi");});
test("studietur -> studietur", function() {deepEqual( Stem("studietur"), "studietur");});
test("stuedøra -> stuedør", function() {deepEqual( Stem("stuedøra"), "stuedør");});
test("stuffes -> stuff", function() {deepEqual( Stem("stuffes"), "stuff");});
test("stuffing -> stuffing", function() {deepEqual( Stem("stuffing"), "stuffing");});
test("stukket -> stukk", function() {deepEqual( Stem("stukket"), "stukk");});
test("stum -> stum", function() {deepEqual( Stem("stum"), "stum");});
test("stumme -> stumm", function() {deepEqual( Stem("stumme"), "stumm");});
test("stummende -> stumm", function() {deepEqual( Stem("stummende"), "stumm");});
test("stump -> stump", function() {deepEqual( Stem("stump"), "stump");});
test("stund -> stund", function() {deepEqual( Stem("stund"), "stund");});
test("stundom -> stundom", function() {deepEqual( Stem("stundom"), "stundom");});
test("stup -> stup", function() {deepEqual( Stem("stup"), "stup");});
test("stuper -> stup", function() {deepEqual( Stem("stuper"), "stup");});
test("stupet -> stup", function() {deepEqual( Stem("stupet"), "stup");});
test("sture -> stur", function() {deepEqual( Stem("sture"), "stur");});
test("sturer -> stur", function() {deepEqual( Stem("sturer"), "stur");});
test("sturte -> sturt", function() {deepEqual( Stem("sturte"), "sturt");});
test("stusser -> stuss", function() {deepEqual( Stem("stusser"), "stuss");});
test("stuten -> stut", function() {deepEqual( Stem("stuten"), "stut");});
test("stygg -> stygg", function() {deepEqual( Stem("stygg"), "stygg");});
test("stygge -> stygg", function() {deepEqual( Stem("stygge"), "stygg");});
test("styggelig -> stygg", function() {deepEqual( Stem("styggelig"), "stygg");});
test("styggeste -> styggest", function() {deepEqual( Stem("styggeste"), "styggest");});
test("stygt -> stygt", function() {deepEqual( Stem("stygt"), "stygt");});
test("stykke -> stykk", function() {deepEqual( Stem("stykke"), "stykk");});
test("stykker -> stykk", function() {deepEqual( Stem("stykker"), "stykk");});
test("stykket -> stykk", function() {deepEqual( Stem("stykket"), "stykk");});
test("stykkgods -> stykkgod", function() {deepEqual( Stem("stykkgods"), "stykkgod");});
test("stykkgodsbåter -> stykkgodsbåt", function() {deepEqual( Stem("stykkgodsbåter"), "stykkgodsbåt");});
test("stykkgodsdelen -> stykkgodsdel", function() {deepEqual( Stem("stykkgodsdelen"), "stykkgodsdel");});
test("stykkgodsdistribusjon -> stykkgodsdistribusjon", function() {deepEqual( Stem("stykkgodsdistribusjon"), "stykkgodsdistribusjon");});
test("stykkgodsdistribusjonen -> stykkgodsdistribusjon", function() {deepEqual( Stem("stykkgodsdistribusjonen"), "stykkgodsdistribusjon");});
test("stykkgodseksporten -> stykkgodseksport", function() {deepEqual( Stem("stykkgodseksporten"), "stykkgodseksport");});
test("stykkgodset -> stykkgods", function() {deepEqual( Stem("stykkgodset"), "stykkgods");});
test("stykkgodsfarten -> stykkgodsfart", function() {deepEqual( Stem("stykkgodsfarten"), "stykkgodsfart");});
test("stykkgodshandel -> stykkgodshandel", function() {deepEqual( Stem("stykkgodshandel"), "stykkgodshandel");});
test("stykkgodshaven -> stykkgodshav", function() {deepEqual( Stem("stykkgodshaven"), "stykkgodshav");});
test("stykkgodshavn -> stykkgodshavn", function() {deepEqual( Stem("stykkgodshavn"), "stykkgodshavn");});
test("stykkgodshavnen -> stykkgodshavn", function() {deepEqual( Stem("stykkgodshavnen"), "stykkgodshavn");});
test("stykkgodshavnene -> stykkgodshavn", function() {deepEqual( Stem("stykkgodshavnene"), "stykkgodshavn");});
test("stykkgodshåndtering -> stykkgodshåndtering", function() {deepEqual( Stem("stykkgodshåndtering"), "stykkgodshåndtering");});
test("stykkgodshåndteringen -> stykkgodshåndtering", function() {deepEqual( Stem("stykkgodshåndteringen"), "stykkgodshåndtering");});
test("stykkgodsimport -> stykkgodsimport", function() {deepEqual( Stem("stykkgodsimport"), "stykkgodsimport");});
test("stykkgodsimporten -> stykkgodsimport", function() {deepEqual( Stem("stykkgodsimporten"), "stykkgodsimport");});
test("stykkgodskaier -> stykkgodskai", function() {deepEqual( Stem("stykkgodskaier"), "stykkgodskai");});
test("stykkgodsklassifiserte -> stykkgodsklassifiser", function() {deepEqual( Stem("stykkgodsklassifiserte"), "stykkgodsklassifiser");});
test("stykkgodsmarkedet -> stykkgodsmarked", function() {deepEqual( Stem("stykkgodsmarkedet"), "stykkgodsmarked");});
test("stykkgodsmengdene -> stykkgodsmengd", function() {deepEqual( Stem("stykkgodsmengdene"), "stykkgodsmengd");});
test("stykkgodsmengder -> stykkgodsmengd", function() {deepEqual( Stem("stykkgodsmengder"), "stykkgodsmengd");});
test("stykkgodsomlasting -> stykkgodsomlasting", function() {deepEqual( Stem("stykkgodsomlasting"), "stykkgodsomlasting");});
test("stykkgodsomlastingen -> stykkgodsomlasting", function() {deepEqual( Stem("stykkgodsomlastingen"), "stykkgodsomlasting");});
test("stykkgodsomsetning -> stykkgodsomsetning", function() {deepEqual( Stem("stykkgodsomsetning"), "stykkgodsomsetning");});
test("stykkgodsomsetningen -> stykkgodsomsetning", function() {deepEqual( Stem("stykkgodsomsetningen"), "stykkgodsomsetning");});
test("stykkgodsomslaget -> stykkgodsomslag", function() {deepEqual( Stem("stykkgodsomslaget"), "stykkgodsomslag");});
test("stykkgodspotensialet -> stykkgodspotensial", function() {deepEqual( Stem("stykkgodspotensialet"), "stykkgodspotensial");});
test("stykkgodstrafikk -> stykkgodstrafikk", function() {deepEqual( Stem("stykkgodstrafikk"), "stykkgodstrafikk");});
test("stykkgodstrafikken -> stykkgodstrafikk", function() {deepEqual( Stem("stykkgodstrafikken"), "stykkgodstrafikk");});
test("stykkgodstransport -> stykkgodstransport", function() {deepEqual( Stem("stykkgodstransport"), "stykkgodstransport");});
test("stykkgodsutviklingen -> stykkgodsutvikling", function() {deepEqual( Stem("stykkgodsutviklingen"), "stykkgodsutvikling");});
test("stykkgodsvarer -> stykkgodsvar", function() {deepEqual( Stem("stykkgodsvarer"), "stykkgodsvar");});
test("stykkgodsveksten -> stykkgodsvekst", function() {deepEqual( Stem("stykkgodsveksten"), "stykkgodsvekst");});
test("stykkgodsvolumer -> stykkgodsvolum", function() {deepEqual( Stem("stykkgodsvolumer"), "stykkgodsvolum");});
test("styr -> styr", function() {deepEqual( Stem("styr"), "styr");});
test("styra -> styr", function() {deepEqual( Stem("styra"), "styr");});
test("styrande -> styr", function() {deepEqual( Stem("styrande"), "styr");});
test("styrast -> styr", function() {deepEqual( Stem("styrast"), "styr");});
test("styre -> styr", function() {deepEqual( Stem("styre"), "styr");});
test("styrearbeidet -> styrearbeid", function() {deepEqual( Stem("styrearbeidet"), "styrearbeid");});
test("styrebehandling -> styrebehandling", function() {deepEqual( Stem("styrebehandling"), "styrebehandling");});
test("styrebehandlinga -> styrebehandling", function() {deepEqual( Stem("styrebehandlinga"), "styrebehandling");});
test("styreinstruks -> styreinstruks", function() {deepEqual( Stem("styreinstruks"), "styreinstruks");});
test("styrekompetansen -> styrekompetans", function() {deepEqual( Stem("styrekompetansen"), "styrekompetans");});
test("styreleiar -> styrelei", function() {deepEqual( Stem("styreleiar"), "styrelei");});
test("styreleiaren -> styreleiar", function() {deepEqual( Stem("styreleiaren"), "styreleiar");});
test("styremedlem -> styremedlem", function() {deepEqual( Stem("styremedlem"), "styremedlem");});
test("styremedlemmen -> styremedlemm", function() {deepEqual( Stem("styremedlemmen"), "styremedlemm");});
test("styremedlemmene -> styremedlemm", function() {deepEqual( Stem("styremedlemmene"), "styremedlemm");});
test("styremedlemmer -> styremedlemm", function() {deepEqual( Stem("styremedlemmer"), "styremedlemm");});
test("styremøta -> styremøt", function() {deepEqual( Stem("styremøta"), "styremøt");});
test("styremøte -> styremøt", function() {deepEqual( Stem("styremøte"), "styremøt");});
test("styremøtet -> styremøt", function() {deepEqual( Stem("styremøtet"), "styremøt");});
test("styrende -> styr", function() {deepEqual( Stem("styrende"), "styr");});
test("styreprotokoll -> styreprotokoll", function() {deepEqual( Stem("styreprotokoll"), "styreprotokoll");});
test("styrer -> styr", function() {deepEqual( Stem("styrer"), "styr");});
test("styrerepresentasjon -> styrerepresentasjon", function() {deepEqual( Stem("styrerepresentasjon"), "styrerepresentasjon");});
test("styres -> styr", function() {deepEqual( Stem("styres"), "styr");});
test("styresakene -> styresak", function() {deepEqual( Stem("styresakene"), "styresak");});
test("styresamansetjing -> styresamansetjing", function() {deepEqual( Stem("styresamansetjing"), "styresamansetjing");});
test("styresamansetjinga -> styresamansetjing", function() {deepEqual( Stem("styresamansetjinga"), "styresamansetjing");});
test("styresmaktene -> styresmakt", function() {deepEqual( Stem("styresmaktene"), "styresmakt");});
test("styresmakter -> styresmakt", function() {deepEqual( Stem("styresmakter"), "styresmakt");});
test("styret -> styr", function() {deepEqual( Stem("styret"), "styr");});
test("styrets -> styr", function() {deepEqual( Stem("styrets"), "styr");});
test("styrevalet -> styreval", function() {deepEqual( Stem("styrevalet"), "styreval");});
test("styrevedtak -> styrevedtak", function() {deepEqual( Stem("styrevedtak"), "styrevedtak");});
test("styrevedtaka -> styrevedtak", function() {deepEqual( Stem("styrevedtaka"), "styrevedtak");});
test("styrevedtaket -> styrevedtak", function() {deepEqual( Stem("styrevedtaket"), "styrevedtak");});
test("styring -> styring", function() {deepEqual( Stem("styring"), "styring");});
test("styringa -> styring", function() {deepEqual( Stem("styringa"), "styring");});
test("styringen -> styring", function() {deepEqual( Stem("styringen"), "styring");});
test("styringsgruppe -> styringsgrupp", function() {deepEqual( Stem("styringsgruppe"), "styringsgrupp");});
test("styringsgruppen -> styringsgrupp", function() {deepEqual( Stem("styringsgruppen"), "styringsgrupp");});
test("styringsgruppens -> styringsgrupp", function() {deepEqual( Stem("styringsgruppens"), "styringsgrupp");});
test("styringsinstrument -> styringsinstrument", function() {deepEqual( Stem("styringsinstrument"), "styringsinstrument");});
test("styringsorgan -> styringsorgan", function() {deepEqual( Stem("styringsorgan"), "styringsorgan");});
test("styringsorganer -> styringsorgan", function() {deepEqual( Stem("styringsorganer"), "styringsorgan");});
test("styringsredskap -> styringsredskap", function() {deepEqual( Stem("styringsredskap"), "styringsredskap");});
test("styrke -> styrk", function() {deepEqual( Stem("styrke"), "styrk");});
test("styrkebelte -> styrkebelt", function() {deepEqual( Stem("styrkebelte"), "styrkebelt");});
test("styrkebeltet -> styrkebelt", function() {deepEqual( Stem("styrkebeltet"), "styrkebelt");});
test("styrken -> styrk", function() {deepEqual( Stem("styrken"), "styrk");});
test("styrkeprøve -> styrkeprøv", function() {deepEqual( Stem("styrkeprøve"), "styrkeprøv");});
test("styrkeprøven -> styrkeprøv", function() {deepEqual( Stem("styrkeprøven"), "styrkeprøv");});
test("styrker -> styrk", function() {deepEqual( Stem("styrker"), "styrk");});
test("styrket -> styrk", function() {deepEqual( Stem("styrket"), "styrk");});
test("styrking -> styrking", function() {deepEqual( Stem("styrking"), "styrking");});
test("styrkje -> styrkj", function() {deepEqual( Stem("styrkje"), "styrkj");});
test("styrkjer -> styrkj", function() {deepEqual( Stem("styrkjer"), "styrkj");});
test("styrkt -> styrkt", function() {deepEqual( Stem("styrkt"), "styrkt");});
test("styrt -> styrt", function() {deepEqual( Stem("styrt"), "styrt");});
test("styrte -> styrt", function() {deepEqual( Stem("styrte"), "styrt");});
test("styrter -> styrt", function() {deepEqual( Stem("styrter"), "styrt");});
test("stå -> stå", function() {deepEqual( Stem("stå"), "stå");});
test("ståande -> ståand", function() {deepEqual( Stem("ståande"), "ståand");});
test("stående -> ståend", function() {deepEqual( Stem("stående"), "ståend");});
test("stål -> stål", function() {deepEqual( Stem("stål"), "stål");});
test("stålimport -> stålimport", function() {deepEqual( Stem("stålimport"), "stålimport");});
test("står -> står", function() {deepEqual( Stem("står"), "står");});
test("stått -> stått", function() {deepEqual( Stem("stått"), "stått");});
test("stø -> stø", function() {deepEqual( Stem("stø"), "stø");});
test("støere -> støer", function() {deepEqual( Stem("støere"), "støer");});
test("støkk -> støkk", function() {deepEqual( Stem("støkk"), "støkk");});
test("støl -> støl", function() {deepEqual( Stem("støl"), "støl");});
test("støle -> støl", function() {deepEqual( Stem("støle"), "støl");});
test("stønad -> stønad", function() {deepEqual( Stem("stønad"), "stønad");});
test("stønn -> stønn", function() {deepEqual( Stem("stønn"), "stønn");});
test("stønner -> stønn", function() {deepEqual( Stem("stønner"), "stønn");});
test("større -> størr", function() {deepEqual( Stem("større"), "størr");});
test("størrelse -> størr", function() {deepEqual( Stem("størrelse"), "størr");});
test("størrelsen -> størr", function() {deepEqual( Stem("størrelsen"), "størr");});
test("størrelsene -> størr", function() {deepEqual( Stem("størrelsene"), "størr");});
test("størrelser -> størr", function() {deepEqual( Stem("størrelser"), "størr");});
test("størrelsesorden -> størrelsesord", function() {deepEqual( Stem("størrelsesorden"), "størrelsesord");});
test("størst -> størst", function() {deepEqual( Stem("størst"), "størst");});
test("største -> størst", function() {deepEqual( Stem("største"), "størst");});
test("størstedelen -> størstedel", function() {deepEqual( Stem("størstedelen"), "størstedel");});
test("støtte -> støtt", function() {deepEqual( Stem("støtte"), "støtt");});
test("støtteordningene -> støtteordning", function() {deepEqual( Stem("støtteordningene"), "støtteordning");});
test("støtter -> støtt", function() {deepEqual( Stem("støtter"), "støtt");});
test("støttet -> støtt", function() {deepEqual( Stem("støttet"), "støtt");});
test("støy -> støy", function() {deepEqual( Stem("støy"), "støy");});
test("støymessig -> støymess", function() {deepEqual( Stem("støymessig"), "støymess");});
test("subber -> subb", function() {deepEqual( Stem("subber"), "subb");});
test("subjektene -> subjekt", function() {deepEqual( Stem("subjektene"), "subjekt");});
test("subjekter -> subjekt", function() {deepEqual( Stem("subjekter"), "subjekt");});
test("subsidiar -> subsidi", function() {deepEqual( Stem("subsidiar"), "subsidi");});
test("subsidieordningar -> subsidieordning", function() {deepEqual( Stem("subsidieordningar"), "subsidieordning");});
test("subsidier -> subsidi", function() {deepEqual( Stem("subsidier"), "subsidi");});
test("subsidiering -> subsidiering", function() {deepEqual( Stem("subsidiering"), "subsidiering");});
test("subsidiert -> subsidier", function() {deepEqual( Stem("subsidiert"), "subsidier");});
test("subsidierte -> subsidier", function() {deepEqual( Stem("subsidierte"), "subsidier");});
test("subsidiær -> subsidiær", function() {deepEqual( Stem("subsidiær"), "subsidiær");});
test("subsidiært -> subsidiært", function() {deepEqual( Stem("subsidiært"), "subsidiært");});
test("substansiell -> substansiell", function() {deepEqual( Stem("substansiell"), "substansiell");});
test("substituert -> substituer", function() {deepEqual( Stem("substituert"), "substituer");});
test("sug -> sug", function() {deepEqual( Stem("sug"), "sug");});
test("sugende -> sug", function() {deepEqual( Stem("sugende"), "sug");});
test("suger -> sug", function() {deepEqual( Stem("suger"), "sug");});
test("suget -> sug", function() {deepEqual( Stem("suget"), "sug");});
test("sukk -> sukk", function() {deepEqual( Stem("sukk"), "sukk");});
test("sukker -> sukk", function() {deepEqual( Stem("sukker"), "sukk");});
test("sult -> sult", function() {deepEqual( Stem("sult"), "sult");});
test("sulte -> sult", function() {deepEqual( Stem("sulte"), "sult");});
test("sulten -> sult", function() {deepEqual( Stem("sulten"), "sult");});
test("sultet -> sult", function() {deepEqual( Stem("sultet"), "sult");});
test("sultne -> sultn", function() {deepEqual( Stem("sultne"), "sultn");});
test("sum -> sum", function() {deepEqual( Stem("sum"), "sum");});
test("summar -> summ", function() {deepEqual( Stem("summar"), "summ");});
test("summarisk -> summarisk", function() {deepEqual( Stem("summarisk"), "summarisk");});
test("summen -> summ", function() {deepEqual( Stem("summen"), "summ");});
test("summende -> summ", function() {deepEqual( Stem("summende"), "summ");});
test("sundagar -> sundag", function() {deepEqual( Stem("sundagar"), "sundag");});
test("sunde -> sund", function() {deepEqual( Stem("sunde"), "sund");});
test("sunget -> sung", function() {deepEqual( Stem("sunget"), "sung");});
test("sunket -> sunk", function() {deepEqual( Stem("sunket"), "sunk");});
test("sunn -> sunn", function() {deepEqual( Stem("sunn"), "sunn");});
test("super -> sup", function() {deepEqual( Stem("super"), "sup");});
test("suppen -> supp", function() {deepEqual( Stem("suppen"), "supp");});
test("supplement -> supplement", function() {deepEqual( Stem("supplement"), "supplement");});
test("supplementary -> supplementary", function() {deepEqual( Stem("supplementary"), "supplementary");});
test("supplere -> suppler", function() {deepEqual( Stem("supplere"), "suppler");});
test("supplerende -> suppler", function() {deepEqual( Stem("supplerende"), "suppler");});
test("supplerer -> suppler", function() {deepEqual( Stem("supplerer"), "suppler");});
test("supplering -> supplering", function() {deepEqual( Stem("supplering"), "supplering");});
test("suppleringsval -> suppleringsval", function() {deepEqual( Stem("suppleringsval"), "suppleringsval");});
test("supplert -> suppler", function() {deepEqual( Stem("supplert"), "suppler");});
test("sur -> sur", function() {deepEqual( Stem("sur"), "sur");});
test("surere -> surer", function() {deepEqual( Stem("surere"), "surer");});
test("surklende -> surkl", function() {deepEqual( Stem("surklende"), "surkl");});
test("surre -> surr", function() {deepEqual( Stem("surre"), "surr");});
test("surret -> surr", function() {deepEqual( Stem("surret"), "surr");});
test("surrogat -> surrogat", function() {deepEqual( Stem("surrogat"), "surrogat");});
test("surt -> surt", function() {deepEqual( Stem("surt"), "surt");});
test("sus -> sus", function() {deepEqual( Stem("sus"), "sus");});
test("suse -> sus", function() {deepEqual( Stem("suse"), "sus");});
test("susende -> sus", function() {deepEqual( Stem("susende"), "sus");});
test("suser -> sus", function() {deepEqual( Stem("suser"), "sus");});
test("susete -> suset", function() {deepEqual( Stem("susete"), "suset");});
test("sutrer -> sutr", function() {deepEqual( Stem("sutrer"), "sutr");});
test("suttung -> suttung", function() {deepEqual( Stem("suttung"), "suttung");});
test("suttungs -> suttung", function() {deepEqual( Stem("suttungs"), "suttung");});
test("svaberg -> svaberg", function() {deepEqual( Stem("svaberg"), "svaberg");});
test("svadilfare -> svadilfar", function() {deepEqual( Stem("svadilfare"), "svadilfar");});
test("svaier -> svaier", function() {deepEqual( Stem("svaier"), "svaier");});
test("svak -> svak", function() {deepEqual( Stem("svak"), "svak");});
test("svakare -> svakar", function() {deepEqual( Stem("svakare"), "svakar");});
test("svake -> svak", function() {deepEqual( Stem("svake"), "svak");});
test("svakere -> svaker", function() {deepEqual( Stem("svakere"), "svaker");});
test("svakhet -> svak", function() {deepEqual( Stem("svakhet"), "svak");});
test("svakheter -> svak", function() {deepEqual( Stem("svakheter"), "svak");});
test("svakt -> svakt", function() {deepEqual( Stem("svakt"), "svakt");});
test("svalbard -> svalbard", function() {deepEqual( Stem("svalbard"), "svalbard");});
test("svanene -> svan", function() {deepEqual( Stem("svanene"), "svan");});
test("svaner -> svan", function() {deepEqual( Stem("svaner"), "svan");});
test("svangerskap -> svangerskap", function() {deepEqual( Stem("svangerskap"), "svangerskap");});
test("svangerskapspermisjon -> svangerskapspermisjon", function() {deepEqual( Stem("svangerskapspermisjon"), "svangerskapspermisjon");});
test("svanser -> svans", function() {deepEqual( Stem("svanser"), "svans");});
test("svanvik -> svanvik", function() {deepEqual( Stem("svanvik"), "svanvik");});
test("svar -> svar", function() {deepEqual( Stem("svar"), "svar");});
test("svara -> svar", function() {deepEqual( Stem("svara"), "svar");});
test("svarar -> svar", function() {deepEqual( Stem("svarar"), "svar");});
test("svare -> svar", function() {deepEqual( Stem("svare"), "svar");});
test("svarende -> svar", function() {deepEqual( Stem("svarende"), "svar");});
test("svarer -> svar", function() {deepEqual( Stem("svarer"), "svar");});
test("svares -> svar", function() {deepEqual( Stem("svares"), "svar");});
test("svaret -> svar", function() {deepEqual( Stem("svaret"), "svar");});
test("svart -> svart", function() {deepEqual( Stem("svart"), "svart");});
test("svartalver -> svartalv", function() {deepEqual( Stem("svartalver"), "svartalv");});
test("svartalvheim -> svartalvheim", function() {deepEqual( Stem("svartalvheim"), "svartalvheim");});
test("svarte -> svart", function() {deepEqual( Stem("svarte"), "svart");});
test("svartmale -> svartmal", function() {deepEqual( Stem("svartmale"), "svartmal");});
test("svartner -> svartn", function() {deepEqual( Stem("svartner"), "svartn");});
test("svartsyk -> svartsyk", function() {deepEqual( Stem("svartsyk"), "svartsyk");});
test("sveio -> sveio", function() {deepEqual( Stem("sveio"), "sveio");});
test("sveits -> sveit", function() {deepEqual( Stem("sveits"), "sveit");});
test("sveket -> svek", function() {deepEqual( Stem("sveket"), "svek");});
test("svekke -> svekk", function() {deepEqual( Stem("svekke"), "svekk");});
test("svekkelse -> svekk", function() {deepEqual( Stem("svekkelse"), "svekk");});
test("svekkes -> svekk", function() {deepEqual( Stem("svekkes"), "svekk");});
test("svekket -> svekk", function() {deepEqual( Stem("svekket"), "svekk");});
test("svelg -> svelg", function() {deepEqual( Stem("svelg"), "svelg");});
test("svelge -> svelg", function() {deepEqual( Stem("svelge"), "svelg");});
test("svelger -> svelg", function() {deepEqual( Stem("svelger"), "svelg");});
test("svelvik -> svelvik", function() {deepEqual( Stem("svelvik"), "svelvik");});
test("svelvikstrømmen -> svelvikstrømm", function() {deepEqual( Stem("svelvikstrømmen"), "svelvikstrømm");});
test("svelvikstrømmens -> svelvikstrømm", function() {deepEqual( Stem("svelvikstrømmens"), "svelvikstrømm");});
test("svenner -> svenn", function() {deepEqual( Stem("svenner"), "svenn");});
test("svensk -> svensk", function() {deepEqual( Stem("svensk"), "svensk");});
test("svenske -> svensk", function() {deepEqual( Stem("svenske"), "svensk");});
test("svenskegrensen -> svenskegrens", function() {deepEqual( Stem("svenskegrensen"), "svenskegrens");});
test("svenskekongen -> svenskekong", function() {deepEqual( Stem("svenskekongen"), "svenskekong");});
test("sverd -> sverd", function() {deepEqual( Stem("sverd"), "sverd");});
test("sverdet -> sverd", function() {deepEqual( Stem("sverdet"), "sverd");});
test("sverdspissen -> sverdspiss", function() {deepEqual( Stem("sverdspissen"), "sverdspiss");});
test("sverdsvingere -> sverdsvinger", function() {deepEqual( Stem("sverdsvingere"), "sverdsvinger");});
test("sverg -> sverg", function() {deepEqual( Stem("sverg"), "sverg");});
test("sverger -> sverg", function() {deepEqual( Stem("sverger"), "sverg");});
test("sverget -> sverg", function() {deepEqual( Stem("sverget"), "sverg");});
test("sverige -> sver", function() {deepEqual( Stem("sverige"), "sver");});
test("sveriges -> sver", function() {deepEqual( Stem("sveriges"), "sver");});
test("svett -> svett", function() {deepEqual( Stem("svett"), "svett");});
test("svette -> svett", function() {deepEqual( Stem("svette"), "svett");});
test("svetter -> svett", function() {deepEqual( Stem("svetter"), "svett");});
test("svevende -> svev", function() {deepEqual( Stem("svevende"), "svev");});
test("svever -> svev", function() {deepEqual( Stem("svever"), "svev");});
test("svi -> svi", function() {deepEqual( Stem("svi"), "svi");});
test("svidd -> svidd", function() {deepEqual( Stem("svidd"), "svidd");});
test("svik -> svik", function() {deepEqual( Stem("svik"), "svik");});
test("svike -> svik", function() {deepEqual( Stem("svike"), "svik");});
test("svikta -> svikt", function() {deepEqual( Stem("svikta"), "svikt");});
test("svikter -> svikt", function() {deepEqual( Stem("svikter"), "svikt");});
test("sviktet -> svikt", function() {deepEqual( Stem("sviktet"), "svikt");});
test("svimle -> sviml", function() {deepEqual( Stem("svimle"), "sviml");});
test("svimmel -> svimmel", function() {deepEqual( Stem("svimmel"), "svimmel");});
test("svinekjøtt -> svinekjøtt", function() {deepEqual( Stem("svinekjøtt"), "svinekjøtt");});
test("svineskinn -> svineskinn", function() {deepEqual( Stem("svineskinn"), "svineskinn");});
test("svinesund -> svinesund", function() {deepEqual( Stem("svinesund"), "svinesund");});
test("svinet -> svin", function() {deepEqual( Stem("svinet"), "svin");});
test("sving -> sving", function() {deepEqual( Stem("sving"), "sving");});
test("svinga -> sving", function() {deepEqual( Stem("svinga"), "sving");});
test("svinge -> sving", function() {deepEqual( Stem("svinge"), "sving");});
test("svingende -> sving", function() {deepEqual( Stem("svingende"), "sving");});
test("svinger -> sving", function() {deepEqual( Stem("svinger"), "sving");});
test("svingingane -> svinging", function() {deepEqual( Stem("svingingane"), "svinging");});
test("svingninger -> svingning", function() {deepEqual( Stem("svingninger"), "svingning");});
test("svingte -> svingt", function() {deepEqual( Stem("svingte"), "svingt");});
test("svinser -> svins", function() {deepEqual( Stem("svinser"), "svins");});
test("svir -> svir", function() {deepEqual( Stem("svir"), "svir");});
test("svirelaget -> svirelag", function() {deepEqual( Stem("svirelaget"), "svirelag");});
test("svovelkis -> svovelkis", function() {deepEqual( Stem("svovelkis"), "svovelkis");});
test("svært -> svært", function() {deepEqual( Stem("svært"), "svært");});
test("svøm -> svøm", function() {deepEqual( Stem("svøm"), "svøm");});
test("svømme -> svømm", function() {deepEqual( Stem("svømme"), "svømm");});
test("svømmebasseng -> svømmebasseng", function() {deepEqual( Stem("svømmebasseng"), "svømmebasseng");});
test("svømmehud -> svømmehud", function() {deepEqual( Stem("svømmehud"), "svømmehud");});
test("svømmer -> svømm", function() {deepEqual( Stem("svømmer"), "svømm");});
test("syd -> syd", function() {deepEqual( Stem("syd"), "syd");});
test("syder -> syd", function() {deepEqual( Stem("syder"), "syd");});
test("sydfra -> sydfr", function() {deepEqual( Stem("sydfra"), "sydfr");});
test("sydgående -> sydgå", function() {deepEqual( Stem("sydgående"), "sydgå");});
test("sydhavna -> sydhavn", function() {deepEqual( Stem("sydhavna"), "sydhavn");});
test("sydhimmelen -> sydhimmel", function() {deepEqual( Stem("sydhimmelen"), "sydhimmel");});
test("sydover -> sydov", function() {deepEqual( Stem("sydover"), "sydov");});
test("sydsiden -> sydsid", function() {deepEqual( Stem("sydsiden"), "sydsid");});
test("sydspissen -> sydspiss", function() {deepEqual( Stem("sydspissen"), "sydspiss");});
test("sydvestover -> sydvestov", function() {deepEqual( Stem("sydvestover"), "sydvestov");});
test("sydøst -> sydøst", function() {deepEqual( Stem("sydøst"), "sydøst");});
test("syk -> syk", function() {deepEqual( Stem("syk"), "syk");});
test("sykdom -> sykdom", function() {deepEqual( Stem("sykdom"), "sykdom");});
test("sykdommen -> sykdomm", function() {deepEqual( Stem("sykdommen"), "sykdomm");});
test("syke -> syk", function() {deepEqual( Stem("syke"), "syk");});
test("sykeleie -> sykelei", function() {deepEqual( Stem("sykeleie"), "sykelei");});
test("syl -> syl", function() {deepEqual( Stem("syl"), "syl");});
test("symbolsk -> symbolsk", function() {deepEqual( Stem("symbolsk"), "symbolsk");});
test("symmetri -> symmetri", function() {deepEqual( Stem("symmetri"), "symmetri");});
test("syn -> syn", function() {deepEqual( Stem("syn"), "syn");});
test("synd -> synd", function() {deepEqual( Stem("synd"), "synd");});
test("syne -> syn", function() {deepEqual( Stem("syne"), "syn");});
test("syner -> syn", function() {deepEqual( Stem("syner"), "syn");});
test("synes -> syn", function() {deepEqual( Stem("synes"), "syn");});
test("synest -> synest", function() {deepEqual( Stem("synest"), "synest");});
test("synet -> syn", function() {deepEqual( Stem("synet"), "syn");});
test("synfaring -> synfaring", function() {deepEqual( Stem("synfaring"), "synfaring");});
test("synge -> syng", function() {deepEqual( Stem("synge"), "syng");});
test("synger -> syng", function() {deepEqual( Stem("synger"), "syng");});
test("synke -> synk", function() {deepEqual( Stem("synke"), "synk");});
test("synkende -> synk", function() {deepEqual( Stem("synkende"), "synk");});
test("synker -> synk", function() {deepEqual( Stem("synker"), "synk");});
test("synlege -> syn", function() {deepEqual( Stem("synlege"), "syn");});
test("synlig -> syn", function() {deepEqual( Stem("synlig"), "syn");});
test("synlige -> syn", function() {deepEqual( Stem("synlige"), "syn");});
test("synsmåtane -> synsmåt", function() {deepEqual( Stem("synsmåtane"), "synsmåt");});
test("synspunkt -> synspunkt", function() {deepEqual( Stem("synspunkt"), "synspunkt");});
test("synspunkta -> synspunkt", function() {deepEqual( Stem("synspunkta"), "synspunkt");});
test("synspunkter -> synspunkt", function() {deepEqual( Stem("synspunkter"), "synspunkt");});
test("synspunktet -> synspunkt", function() {deepEqual( Stem("synspunktet"), "synspunkt");});
test("synsstad -> synsstad", function() {deepEqual( Stem("synsstad"), "synsstad");});
test("synsstaden -> synsstad", function() {deepEqual( Stem("synsstaden"), "synsstad");});
test("syntes -> synt", function() {deepEqual( Stem("syntes"), "synt");});
test("syr -> syr", function() {deepEqual( Stem("syr"), "syr");});
test("sysken -> sysk", function() {deepEqual( Stem("sysken"), "sysk");});
test("sysselsatte -> sysselsatt", function() {deepEqual( Stem("sysselsatte"), "sysselsatt");});
test("sysselsetting -> sysselsetting", function() {deepEqual( Stem("sysselsetting"), "sysselsetting");});
test("sysselsettingsvirkninger -> sysselsettingsvirkning", function() {deepEqual( Stem("sysselsettingsvirkninger"), "sysselsettingsvirkning");});
test("system -> system", function() {deepEqual( Stem("system"), "system");});
test("systematisk -> systematisk", function() {deepEqual( Stem("systematisk"), "systematisk");});
test("systematiske -> systematisk", function() {deepEqual( Stem("systematiske"), "systematisk");});
test("systemer -> system", function() {deepEqual( Stem("systemer"), "system");});
test("systemet -> system", function() {deepEqual( Stem("systemet"), "system");});
test("systemkonkurranse -> systemkonkurrans", function() {deepEqual( Stem("systemkonkurranse"), "systemkonkurrans");});
test("systemløsninger -> systemløsning", function() {deepEqual( Stem("systemløsninger"), "systemløsning");});
test("systemtogløsninger -> systemtogløsning", function() {deepEqual( Stem("systemtogløsninger"), "systemtogløsning");});
test("syte -> syt", function() {deepEqual( Stem("syte"), "syt");});
test("syvende -> syv", function() {deepEqual( Stem("syvende"), "syv");});
test("så -> så", function() {deepEqual( Stem("så"), "så");});
test("sådan -> sådan", function() {deepEqual( Stem("sådan"), "sådan");});
test("sådd -> sådd", function() {deepEqual( Stem("sådd"), "sådd");});
test("såfall -> såfall", function() {deepEqual( Stem("såfall"), "såfall");});
test("såfremt -> såfremt", function() {deepEqual( Stem("såfremt"), "såfremt");});
test("såg -> såg", function() {deepEqual( Stem("såg"), "såg");});
test("såkalla -> såkall", function() {deepEqual( Stem("såkalla"), "såkall");});
test("såkalt -> såkalt", function() {deepEqual( Stem("såkalt"), "såkalt");});
test("såkalte -> såkalt", function() {deepEqual( Stem("såkalte"), "såkalt");});
test("således -> sål", function() {deepEqual( Stem("således"), "sål");});
test("såleis -> såleis", function() {deepEqual( Stem("såleis"), "såleis");});
test("sånn -> sånn", function() {deepEqual( Stem("sånn"), "sånn");});
test("såpass -> såpass", function() {deepEqual( Stem("såpass"), "såpass");});
test("sår -> sår", function() {deepEqual( Stem("sår"), "sår");});
test("såre -> sår", function() {deepEqual( Stem("såre"), "sår");});
test("sårene -> sår", function() {deepEqual( Stem("sårene"), "sår");});
test("sårer -> sår", function() {deepEqual( Stem("sårer"), "sår");});
test("såret -> sår", function() {deepEqual( Stem("såret"), "sår");});
test("sårt -> sårt", function() {deepEqual( Stem("sårt"), "sårt");});
test("såvel -> såvel", function() {deepEqual( Stem("såvel"), "såvel");});
test("såvidt -> såvid", function() {deepEqual( Stem("såvidt"), "såvid");});
test("sæming -> sæming", function() {deepEqual( Stem("sæming"), "sæming");});
test("særaldersgrenser -> særaldersgrens", function() {deepEqual( Stem("særaldersgrenser"), "særaldersgrens");});
test("særbehandling -> særbehandling", function() {deepEqual( Stem("særbehandling"), "særbehandling");});
test("særbehandlingen -> særbehandling", function() {deepEqual( Stem("særbehandlingen"), "særbehandling");});
test("særbestemmelser -> særbestemm", function() {deepEqual( Stem("særbestemmelser"), "særbestemm");});
test("særdeles -> særdel", function() {deepEqual( Stem("særdeles"), "særdel");});
test("særdrag -> særdrag", function() {deepEqual( Stem("særdrag"), "særdrag");});
test("særdraga -> særdrag", function() {deepEqual( Stem("særdraga"), "særdrag");});
test("særfordeler -> særfordel", function() {deepEqual( Stem("særfordeler"), "særfordel");});
test("særfradrag -> særfradrag", function() {deepEqual( Stem("særfradrag"), "særfradrag");});
test("særimne -> særimn", function() {deepEqual( Stem("særimne"), "særimn");});
test("særinteresse -> særinteress", function() {deepEqual( Stem("særinteresse"), "særinteress");});
test("særinteresser -> særinteress", function() {deepEqual( Stem("særinteresser"), "særinteress");});
test("særleg -> sær", function() {deepEqual( Stem("særleg"), "sær");});
test("særlege -> sær", function() {deepEqual( Stem("særlege"), "sær");});
test("særlig -> sær", function() {deepEqual( Stem("særlig"), "sær");});
test("særlige -> sær", function() {deepEqual( Stem("særlige"), "sær");});
test("særlovgjeving -> særlovgjeving", function() {deepEqual( Stem("særlovgjeving"), "særlovgjeving");});
test("særlovgjevinga -> særlovgjeving", function() {deepEqual( Stem("særlovgjevinga"), "særlovgjeving");});
test("særløysingar -> særløysing", function() {deepEqual( Stem("særløysingar"), "særløysing");});
test("særmerknad -> særmerknad", function() {deepEqual( Stem("særmerknad"), "særmerknad");});
test("særmerknadetil -> særmerknadetil", function() {deepEqual( Stem("særmerknadetil"), "særmerknadetil");});
test("særordningar -> særordning", function() {deepEqual( Stem("særordningar"), "særordning");});
test("særpreg -> særpreg", function() {deepEqual( Stem("særpreg"), "særpreg");});
test("særprega -> særpreg", function() {deepEqual( Stem("særprega"), "særpreg");});
test("særpregar -> særpreg", function() {deepEqual( Stem("særpregar"), "særpreg");});
test("særpreget -> særpreg", function() {deepEqual( Stem("særpreget"), "særpreg");});
test("særregel -> særregel", function() {deepEqual( Stem("særregel"), "særregel");});
test("særregelen -> særregel", function() {deepEqual( Stem("særregelen"), "særregel");});
test("særreglane -> særregl", function() {deepEqual( Stem("særreglane"), "særregl");});
test("særreglar -> særregl", function() {deepEqual( Stem("særreglar"), "særregl");});
test("særreglene -> særregl", function() {deepEqual( Stem("særreglene"), "særregl");});
test("særregler -> særregl", function() {deepEqual( Stem("særregler"), "særregl");});
test("særregulering -> særregulering", function() {deepEqual( Stem("særregulering"), "særregulering");});
test("særrettar -> særrett", function() {deepEqual( Stem("særrettar"), "særrett");});
test("særskild -> særskild", function() {deepEqual( Stem("særskild"), "særskild");});
test("særskilde -> særskild", function() {deepEqual( Stem("særskilde"), "særskild");});
test("særskilt -> særskilt", function() {deepEqual( Stem("særskilt"), "særskilt");});
test("særskilte -> særskilt", function() {deepEqual( Stem("særskilte"), "særskilt");});
test("særstilling -> særstilling", function() {deepEqual( Stem("særstilling"), "særstilling");});
test("særtillegg -> særtillegg", function() {deepEqual( Stem("særtillegg"), "særtillegg");});
test("særtillegget -> særtillegg", function() {deepEqual( Stem("særtillegget"), "særtillegg");});
test("særvilkår -> særvilkår", function() {deepEqual( Stem("særvilkår"), "særvilkår");});
test("sæther -> sæth", function() {deepEqual( Stem("sæther"), "sæth");});
test("søk -> søk", function() {deepEqual( Stem("søk"), "søk");});
test("søke -> søk", function() {deepEqual( Stem("søke"), "søk");});
test("søker -> søk", function() {deepEqual( Stem("søker"), "søk");});
test("søkes -> søk", function() {deepEqual( Stem("søkes"), "søk");});
test("søkjaransiennitet -> søkjaransiennit", function() {deepEqual( Stem("søkjaransiennitet"), "søkjaransiennit");});
test("søkjaransienniteten -> søkjaransiennitet", function() {deepEqual( Stem("søkjaransienniteten"), "søkjaransiennitet");});
test("søkje -> søkj", function() {deepEqual( Stem("søkje"), "søkj");});
test("søkjegod -> søkjegod", function() {deepEqual( Stem("søkjegod"), "søkjegod");});
test("søkjer -> søkj", function() {deepEqual( Stem("søkjer"), "søkj");});
test("søknad -> søknad", function() {deepEqual( Stem("søknad"), "søknad");});
test("søknaden -> søknad", function() {deepEqual( Stem("søknaden"), "søknad");});
test("søksmål -> søksmål", function() {deepEqual( Stem("søksmål"), "søksmål");});
test("søksmålet -> søksmål", function() {deepEqual( Stem("søksmålet"), "søksmål");});
test("søksmåls -> søksmål", function() {deepEqual( Stem("søksmåls"), "søksmål");});
test("søksmålsfrist -> søksmålsfrist", function() {deepEqual( Stem("søksmålsfrist"), "søksmålsfrist");});
test("søksmålsfristen -> søksmålsfrist", function() {deepEqual( Stem("søksmålsfristen"), "søksmålsfrist");});
test("søksmålsrett -> søksmålsrett", function() {deepEqual( Stem("søksmålsrett"), "søksmålsrett");});
test("søkt -> søkt", function() {deepEqual( Stem("søkt"), "søkt");});
test("søkte -> søkt", function() {deepEqual( Stem("søkte"), "søkt");});
test("sølv -> sølv", function() {deepEqual( Stem("sølv"), "sølv");});
test("søndre -> søndr", function() {deepEqual( Stem("søndre"), "søndr");});
test("sønn -> sønn", function() {deepEqual( Stem("sønn"), "sønn");});
test("sønnavind -> sønnavind", function() {deepEqual( Stem("sønnavind"), "sønnavind");});
test("sønnen -> sønn", function() {deepEqual( Stem("sønnen"), "sønn");});
test("sønnene -> sønn", function() {deepEqual( Stem("sønnene"), "sønn");});
test("sønner -> sønn", function() {deepEqual( Stem("sønner"), "sønn");});
test("sør -> sør", function() {deepEqual( Stem("sør"), "sør");});
test("sørenga -> søreng", function() {deepEqual( Stem("sørenga"), "søreng");});
test("sørge -> sørg", function() {deepEqual( Stem("sørge"), "sørg");});
test("sørgelig -> sørg", function() {deepEqual( Stem("sørgelig"), "sørg");});
test("sørger -> sørg", function() {deepEqual( Stem("sørger"), "sørg");});
test("sørget -> sørg", function() {deepEqual( Stem("sørget"), "sørg");});
test("sørgjer -> sørgj", function() {deepEqual( Stem("sørgjer"), "sørgj");});
test("sørkorridoren -> sørkorridor", function() {deepEqual( Stem("sørkorridoren"), "sørkorridor");});
test("sørlandsbanen -> sørlandsban", function() {deepEqual( Stem("sørlandsbanen"), "sørlandsban");});
test("sørover -> sørov", function() {deepEqual( Stem("sørover"), "sørov");});
test("sørpehull -> sørpehull", function() {deepEqual( Stem("sørpehull"), "sørpehull");});
test("sørside -> sørsid", function() {deepEqual( Stem("sørside"), "sørsid");});
test("sørsiden -> sørsid", function() {deepEqual( Stem("sørsiden"), "sørsid");});
test("sørvendte -> sørvend", function() {deepEqual( Stem("sørvendte"), "sørvend");});
test("sørvisinnstilling -> sørvisinnstilling", function() {deepEqual( Stem("sørvisinnstilling"), "sørvisinnstilling");});
test("søsken -> søsk", function() {deepEqual( Stem("søsken"), "søsk");});
test("søster -> søst", function() {deepEqual( Stem("søster"), "søst");});
test("søsteren -> søster", function() {deepEqual( Stem("søsteren"), "søster");});
test("søstre -> søstr", function() {deepEqual( Stem("søstre"), "søstr");});
test("søstrene -> søstr", function() {deepEqual( Stem("søstrene"), "søstr");});
test("søt -> søt", function() {deepEqual( Stem("søt"), "søt");});
test("søtere -> søter", function() {deepEqual( Stem("søtere"), "søter");});
test("søvn -> søvn", function() {deepEqual( Stem("søvn"), "søvn");});
test("søvne -> søvn", function() {deepEqual( Stem("søvne"), "søvn");});
test("søvntorn -> søvntorn", function() {deepEqual( Stem("søvntorn"), "søvntorn");});
test("søyle -> søyl", function() {deepEqual( Stem("søyle"), "søyl");});
test("søyler -> søyl", function() {deepEqual( Stem("søyler"), "søyl");});
test("t -> t", function() {deepEqual( Stem("t"), "t");});
test("ta -> ta", function() {deepEqual( Stem("ta"), "ta");});
test("tabell -> tabell", function() {deepEqual( Stem("tabell"), "tabell");});
test("tabellen -> tabell", function() {deepEqual( Stem("tabellen"), "tabell");});
test("tabellene -> tabell", function() {deepEqual( Stem("tabellene"), "tabell");});
test("taggete -> tagget", function() {deepEqual( Stem("taggete"), "tagget");});
test("tak -> tak", function() {deepEqual( Stem("tak"), "tak");});
test("takast -> tak", function() {deepEqual( Stem("takast"), "tak");});
test("takbjelkene -> takbjelk", function() {deepEqual( Stem("takbjelkene"), "takbjelk");});
test("takernes -> takern", function() {deepEqual( Stem("takernes"), "takern");});
test("taket -> tak", function() {deepEqual( Stem("taket"), "tak");});
test("takk -> takk", function() {deepEqual( Stem("takk"), "takk");});
test("takke -> takk", function() {deepEqual( Stem("takke"), "takk");});
test("takker -> takk", function() {deepEqual( Stem("takker"), "takk");});
test("takket -> takk", function() {deepEqual( Stem("takket"), "takk");});
test("takknemlig -> takknem", function() {deepEqual( Stem("takknemlig"), "takknem");});
test("takknemlighet -> takknem", function() {deepEqual( Stem("takknemlighet"), "takknem");});
test("takkonstruksjon -> takkonstruksjon", function() {deepEqual( Stem("takkonstruksjon"), "takkonstruksjon");});
test("takle -> takl", function() {deepEqual( Stem("takle"), "takl");});
test("takskjegget -> takskjegg", function() {deepEqual( Stem("takskjegget"), "takskjegg");});
test("takstnemnder -> takstnemnd", function() {deepEqual( Stem("takstnemnder"), "takstnemnd");});
test("takt -> takt", function() {deepEqual( Stem("takt"), "takt");});
test("takten -> takt", function() {deepEqual( Stem("takten"), "takt");});
test("taktfast -> taktf", function() {deepEqual( Stem("taktfast"), "taktf");});
test("tal -> tal", function() {deepEqual( Stem("tal"), "tal");});
test("tala -> tal", function() {deepEqual( Stem("tala"), "tal");});
test("talar -> tal", function() {deepEqual( Stem("talar"), "tal");});
test("tale -> tal", function() {deepEqual( Stem("tale"), "tal");});
test("taler -> tal", function() {deepEqual( Stem("taler"), "tal");});
test("talerett -> talerett", function() {deepEqual( Stem("talerett"), "talerett");});
test("talet -> tal", function() {deepEqual( Stem("talet"), "tal");});
test("tall -> tall", function() {deepEqual( Stem("tall"), "tall");});
test("talleksempler -> talleksempl", function() {deepEqual( Stem("talleksempler"), "talleksempl");});
test("tallene -> tall", function() {deepEqual( Stem("tallene"), "tall");});
test("tallet -> tall", function() {deepEqual( Stem("tallet"), "tall");});
test("tallfeste -> tallfest", function() {deepEqual( Stem("tallfeste"), "tallfest");});
test("tallgrunnlaget -> tallgrunnlag", function() {deepEqual( Stem("tallgrunnlaget"), "tallgrunnlag");});
test("tallrik -> tallrik", function() {deepEqual( Stem("tallrik"), "tallrik");});
test("tallrike -> tallrik", function() {deepEqual( Stem("tallrike"), "tallrik");});
test("talt -> talt", function() {deepEqual( Stem("talt"), "talt");});
test("tamme -> tamm", function() {deepEqual( Stem("tamme"), "tamm");});
test("tang -> tang", function() {deepEqual( Stem("tang"), "tang");});
test("tangen -> tang", function() {deepEqual( Stem("tangen"), "tang");});
test("tangent -> tangent", function() {deepEqual( Stem("tangent"), "tangent");});
test("tangstrødde -> tangstrødd", function() {deepEqual( Stem("tangstrødde"), "tangstrødd");});
test("tankane -> tank", function() {deepEqual( Stem("tankane"), "tank");});
test("tanke -> tank", function() {deepEqual( Stem("tanke"), "tank");});
test("tankegang -> tankegang", function() {deepEqual( Stem("tankegang"), "tankegang");});
test("tankegangen -> tankegang", function() {deepEqual( Stem("tankegangen"), "tankegang");});
test("tankeløs -> tankeløs", function() {deepEqual( Stem("tankeløs"), "tankeløs");});
test("tanken -> tank", function() {deepEqual( Stem("tanken"), "tank");});
test("tankene -> tank", function() {deepEqual( Stem("tankene"), "tank");});
test("tanker -> tank", function() {deepEqual( Stem("tanker"), "tank");});
test("tankespråk -> tankespråk", function() {deepEqual( Stem("tankespråk"), "tankespråk");});
test("tann -> tann", function() {deepEqual( Stem("tann"), "tann");});
test("tanngnjost -> tanngnjost", function() {deepEqual( Stem("tanngnjost"), "tanngnjost");});
test("tanngrisne -> tanngrisn", function() {deepEqual( Stem("tanngrisne"), "tanngrisn");});
test("tannløs -> tannløs", function() {deepEqual( Stem("tannløs"), "tannløs");});
test("tannløse -> tannløs", function() {deepEqual( Stem("tannløse"), "tannløs");});
test("tap -> tap", function() {deepEqual( Stem("tap"), "tap");});
test("tapa -> tap", function() {deepEqual( Stem("tapa"), "tap");});
test("tape -> tap", function() {deepEqual( Stem("tape"), "tap");});
test("taper -> tap", function() {deepEqual( Stem("taper"), "tap");});
test("tapet -> tap", function() {deepEqual( Stem("tapet"), "tap");});
test("tapetsering -> tapetsering", function() {deepEqual( Stem("tapetsering"), "tapetsering");});
test("tappa -> tapp", function() {deepEqual( Stem("tappa"), "tapp");});
test("tappar -> tapp", function() {deepEqual( Stem("tappar"), "tapp");});
test("tappe -> tapp", function() {deepEqual( Stem("tappe"), "tapp");});
test("tapper -> tapp", function() {deepEqual( Stem("tapper"), "tapp");});
test("tapping -> tapping", function() {deepEqual( Stem("tapping"), "tapping");});
test("tappinga -> tapping", function() {deepEqual( Stem("tappinga"), "tapping");});
test("tapre -> tapr", function() {deepEqual( Stem("tapre"), "tapr");});
test("tapsfordeling -> tapsfordeling", function() {deepEqual( Stem("tapsfordeling"), "tapsfordeling");});
test("tapspostane -> tapspost", function() {deepEqual( Stem("tapspostane"), "tapspost");});
test("tapsrisiko -> tapsrisiko", function() {deepEqual( Stem("tapsrisiko"), "tapsrisiko");});
test("tapsrisikoen -> tapsrisiko", function() {deepEqual( Stem("tapsrisikoen"), "tapsrisiko");});
test("tapt -> tapt", function() {deepEqual( Stem("tapt"), "tapt");});
test("tapte -> tapt", function() {deepEqual( Stem("tapte"), "tapt");});
test("tar -> tar", function() {deepEqual( Stem("tar"), "tar");});
test("tariffavtale -> tariffavtal", function() {deepEqual( Stem("tariffavtale"), "tariffavtal");});
test("tariffavtaler -> tariffavtal", function() {deepEqual( Stem("tariffavtaler"), "tariffavtal");});
test("tarifforhandlingene -> tarifforhandling", function() {deepEqual( Stem("tarifforhandlingene"), "tarifforhandling");});
test("tarmene -> tarm", function() {deepEqual( Stem("tarmene"), "tarm");});
test("tas -> tas", function() {deepEqual( Stem("tas"), "tas");});
test("tassen -> tass", function() {deepEqual( Stem("tassen"), "tass");});
test("tassler -> tassl", function() {deepEqual( Stem("tassler"), "tassl");});
test("tatt -> tatt", function() {deepEqual( Stem("tatt"), "tatt");});
test("tau -> tau", function() {deepEqual( Stem("tau"), "tau");});
test("taubåt -> taubåt", function() {deepEqual( Stem("taubåt"), "taubåt");});
test("taubåthjelp -> taubåthjelp", function() {deepEqual( Stem("taubåthjelp"), "taubåthjelp");});
test("tauender -> tauend", function() {deepEqual( Stem("tauender"), "tauend");});
test("taus -> taus", function() {deepEqual( Stem("taus"), "taus");});
test("tause -> taus", function() {deepEqual( Stem("tause"), "taus");});
test("taushet -> taus", function() {deepEqual( Stem("taushet"), "taus");});
test("taustump -> taustump", function() {deepEqual( Stem("taustump"), "taustump");});
test("td -> td", function() {deepEqual( Stem("td"), "td");});
test("team -> team", function() {deepEqual( Stem("team"), "team");});
test("teften -> teft", function() {deepEqual( Stem("teften"), "teft");});
test("tegn -> tegn", function() {deepEqual( Stem("tegn"), "tegn");});
test("tegne -> tegn", function() {deepEqual( Stem("tegne"), "tegn");});
test("tegner -> tegn", function() {deepEqual( Stem("tegner"), "tegn");});
test("tegnes -> tegn", function() {deepEqual( Stem("tegnes"), "tegn");});
test("tegnet -> tegn", function() {deepEqual( Stem("tegnet"), "tegn");});
test("tegning -> tegning", function() {deepEqual( Stem("tegning"), "tegning");});
test("tegningstidspunktet -> tegningstidspunkt", function() {deepEqual( Stem("tegningstidspunktet"), "tegningstidspunkt");});
test("teieplikt -> teieplikt", function() {deepEqual( Stem("teieplikt"), "teieplikt");});
test("teieplikta -> teieplikt", function() {deepEqual( Stem("teieplikta"), "teieplikt");});
test("teiepliktreglane -> teiepliktregl", function() {deepEqual( Stem("teiepliktreglane"), "teiepliktregl");});
test("teikna -> teikn", function() {deepEqual( Stem("teikna"), "teikn");});
test("teiknar -> teikn", function() {deepEqual( Stem("teiknar"), "teikn");});
test("teiknast -> teikn", function() {deepEqual( Stem("teiknast"), "teikn");});
test("teikne -> teikn", function() {deepEqual( Stem("teikne"), "teikn");});
test("teikning -> teikning", function() {deepEqual( Stem("teikning"), "teikning");});
test("teikninga -> teikning", function() {deepEqual( Stem("teikninga"), "teikning");});
test("teikningar -> teikning", function() {deepEqual( Stem("teikningar"), "teikning");});
test("teikningsavgift -> teikningsavgift", function() {deepEqual( Stem("teikningsavgift"), "teikningsavgift");});
test("teikningsrett -> teikningsrett", function() {deepEqual( Stem("teikningsrett"), "teikningsrett");});
test("tek -> tek", function() {deepEqual( Stem("tek"), "tek");});
test("teke -> tek", function() {deepEqual( Stem("teke"), "tek");});
test("teken -> tek", function() {deepEqual( Stem("teken"), "tek");});
test("tekne -> tekn", function() {deepEqual( Stem("tekne"), "tekn");});
test("teknisk -> teknisk", function() {deepEqual( Stem("teknisk"), "teknisk");});
test("tekniske -> teknisk", function() {deepEqual( Stem("tekniske"), "teknisk");});
test("teknologi -> teknologi", function() {deepEqual( Stem("teknologi"), "teknologi");});
test("teksten -> tekst", function() {deepEqual( Stem("teksten"), "tekst");});
test("tekstene -> tekst", function() {deepEqual( Stem("tekstene"), "tekst");});
test("tekster -> tekst", function() {deepEqual( Stem("tekster"), "tekst");});
test("tel -> tel", function() {deepEqual( Stem("tel"), "tel");});
test("telefon -> telefon", function() {deepEqual( Stem("telefon"), "telefon");});
test("telekomunikasjonsinfrastruktur -> telekomunikasjonsinfrastruktur", function() {deepEqual( Stem("telekomunikasjonsinfrastruktur"), "telekomunikasjonsinfrastruktur");});
test("telemark -> telemark", function() {deepEqual( Stem("telemark"), "telemark");});
test("teletenester -> teletenest", function() {deepEqual( Stem("teletenester"), "teletenest");});
test("telje -> telj", function() {deepEqual( Stem("telje"), "telj");});
test("telle -> tell", function() {deepEqual( Stem("telle"), "tell");});
test("teller -> tell", function() {deepEqual( Stem("teller"), "tell");});
test("temaet -> tema", function() {deepEqual( Stem("temaet"), "tema");});
test("tematisk -> tematisk", function() {deepEqual( Stem("tematisk"), "tematisk");});
test("temme -> temm", function() {deepEqual( Stem("temme"), "temm");});
test("temmet -> temm", function() {deepEqual( Stem("temmet"), "temm");});
test("temperaturer -> temperatur", function() {deepEqual( Stem("temperaturer"), "temperatur");});
test("ten -> ten", function() {deepEqual( Stem("ten"), "ten");});
test("tendens -> tend", function() {deepEqual( Stem("tendens"), "tend");});
test("tene -> ten", function() {deepEqual( Stem("tene"), "ten");});
test("tener -> ten", function() {deepEqual( Stem("tener"), "ten");});
test("teneste -> tenest", function() {deepEqual( Stem("teneste"), "tenest");});
test("tenestebustader -> tenestebustad", function() {deepEqual( Stem("tenestebustader"), "tenestebustad");});
test("tenestene -> tenest", function() {deepEqual( Stem("tenestene"), "tenest");});
test("tenester -> tenest", function() {deepEqual( Stem("tenester"), "tenest");});
test("tenestetid -> tenestetid", function() {deepEqual( Stem("tenestetid"), "tenestetid");});
test("tenestetida -> tenestetid", function() {deepEqual( Stem("tenestetida"), "tenestetid");});
test("tenestettida -> tenestettid", function() {deepEqual( Stem("tenestettida"), "tenestettid");});
test("tenk -> tenk", function() {deepEqual( Stem("tenk"), "tenk");});
test("tenke -> tenk", function() {deepEqual( Stem("tenke"), "tenk");});
test("tenkelige -> tenk", function() {deepEqual( Stem("tenkelige"), "tenk");});
test("tenker -> tenk", function() {deepEqual( Stem("tenker"), "tenk");});
test("tenkes -> tenk", function() {deepEqual( Stem("tenkes"), "tenk");});
test("tenkjast -> tenkj", function() {deepEqual( Stem("tenkjast"), "tenkj");});
test("tenkje -> tenkj", function() {deepEqual( Stem("tenkje"), "tenkj");});
test("tenkjer -> tenkj", function() {deepEqual( Stem("tenkjer"), "tenkj");});
test("tenksom -> tenksom", function() {deepEqual( Stem("tenksom"), "tenksom");});
test("tenksomt -> tenksomt", function() {deepEqual( Stem("tenksomt"), "tenksomt");});
test("tenkt -> tenkt", function() {deepEqual( Stem("tenkt"), "tenkt");});
test("tenkte -> tenkt", function() {deepEqual( Stem("tenkte"), "tenkt");});
test("tenleg -> ten", function() {deepEqual( Stem("tenleg"), "ten");});
test("tenlege -> ten", function() {deepEqual( Stem("tenlege"), "ten");});
test("tennene -> tenn", function() {deepEqual( Stem("tennene"), "tenn");});
test("tenner -> tenn", function() {deepEqual( Stem("tenner"), "tenn");});
test("tennes -> tenn", function() {deepEqual( Stem("tennes"), "tenn");});
test("tent -> tent", function() {deepEqual( Stem("tent"), "tent");});
test("tente -> tent", function() {deepEqual( Stem("tente"), "tent");});
test("teoretisk -> teoretisk", function() {deepEqual( Stem("teoretisk"), "teoretisk");});
test("teoretiske -> teoretisk", function() {deepEqual( Stem("teoretiske"), "teoretisk");});
test("teori -> teori", function() {deepEqual( Stem("teori"), "teori");});
test("teorien -> teori", function() {deepEqual( Stem("teorien"), "teori");});
test("teppe -> tepp", function() {deepEqual( Stem("teppe"), "tepp");});
test("teppet -> tepp", function() {deepEqual( Stem("teppet"), "tepp");});
test("ter -> ter", function() {deepEqual( Stem("ter"), "ter");});
test("termer -> term", function() {deepEqual( Stem("termer"), "term");});
test("terminal -> terminal", function() {deepEqual( Stem("terminal"), "terminal");});
test("terminalbehandles -> terminalbehandl", function() {deepEqual( Stem("terminalbehandles"), "terminalbehandl");});
test("terminalbehandling -> terminalbehandling", function() {deepEqual( Stem("terminalbehandling"), "terminalbehandling");});
test("terminalbehandlingen -> terminalbehandling", function() {deepEqual( Stem("terminalbehandlingen"), "terminalbehandling");});
test("terminaldrift -> terminaldrift", function() {deepEqual( Stem("terminaldrift"), "terminaldrift");});
test("terminaldriften -> terminaldrift", function() {deepEqual( Stem("terminaldriften"), "terminaldrift");});
test("terminalen -> terminal", function() {deepEqual( Stem("terminalen"), "terminal");});
test("terminalene -> terminal", function() {deepEqual( Stem("terminalene"), "terminal");});
test("terminaler -> terminal", function() {deepEqual( Stem("terminaler"), "terminal");});
test("terminalfunksjon -> terminalfunksjon", function() {deepEqual( Stem("terminalfunksjon"), "terminalfunksjon");});
test("terminalhavn -> terminalhavn", function() {deepEqual( Stem("terminalhavn"), "terminalhavn");});
test("terminalhåndteringen -> terminalhåndtering", function() {deepEqual( Stem("terminalhåndteringen"), "terminalhåndtering");});
test("terminallokalisering -> terminallokalisering", function() {deepEqual( Stem("terminallokalisering"), "terminallokalisering");});
test("terminalområder -> terminalområd", function() {deepEqual( Stem("terminalområder"), "terminalområd");});
test("terminalområdet -> terminalområd", function() {deepEqual( Stem("terminalområdet"), "terminalområd");});
test("terminaloperasjonen -> terminaloperasjon", function() {deepEqual( Stem("terminaloperasjonen"), "terminaloperasjon");});
test("terminaloperatørene -> terminaloperatør", function() {deepEqual( Stem("terminaloperatørene"), "terminaloperatør");});
test("terminaloperatørenes -> terminaloperatør", function() {deepEqual( Stem("terminaloperatørenes"), "terminaloperatør");});
test("terminaloperatører -> terminaloperatør", function() {deepEqual( Stem("terminaloperatører"), "terminaloperatør");});
test("terminaltypene -> terminaltyp", function() {deepEqual( Stem("terminaltypene"), "terminaltyp");});
test("terminalvirksomhet -> terminalvirksom", function() {deepEqual( Stem("terminalvirksomhet"), "terminalvirksom");});
test("terminalvirksomheter -> terminalvirksom", function() {deepEqual( Stem("terminalvirksomheter"), "terminalvirksom");});
test("terminbeløp -> terminbeløp", function() {deepEqual( Stem("terminbeløp"), "terminbeløp");});
test("terminbeløpet -> terminbeløp", function() {deepEqual( Stem("terminbeløpet"), "terminbeløp");});
test("terminer -> termin", function() {deepEqual( Stem("terminer"), "termin");});
test("terminvise -> terminvis", function() {deepEqual( Stem("terminvise"), "terminvis");});
test("terne -> tern", function() {deepEqual( Stem("terne"), "tern");});
test("terner -> tern", function() {deepEqual( Stem("terner"), "tern");});
test("terskelverdier -> terskelverdi", function() {deepEqual( Stem("terskelverdier"), "terskelverdi");});
test("tett -> tett", function() {deepEqual( Stem("tett"), "tett");});
test("tettbebyggelsen -> tettbebygg", function() {deepEqual( Stem("tettbebyggelsen"), "tettbebygg");});
test("tettbygd -> tettbygd", function() {deepEqual( Stem("tettbygd"), "tettbygd");});
test("tettbygde -> tettbygd", function() {deepEqual( Stem("tettbygde"), "tettbygd");});
test("tette -> tett", function() {deepEqual( Stem("tette"), "tett");});
test("tettere -> tetter", function() {deepEqual( Stem("tettere"), "tetter");});
test("tettpakket -> tettpakk", function() {deepEqual( Stem("tettpakket"), "tettpakk");});
test("tettstader -> tettstad", function() {deepEqual( Stem("tettstader"), "tettstad");});
test("tettsteder -> tettsted", function() {deepEqual( Stem("tettsteder"), "tettsted");});
test("tettsteds -> tettsted", function() {deepEqual( Stem("tettsteds"), "tettsted");});
test("tettstedsbebyggelse -> tettstedsbebygg", function() {deepEqual( Stem("tettstedsbebyggelse"), "tettstedsbebygg");});
test("tettstedsområder -> tettstedsområd", function() {deepEqual( Stem("tettstedsområder"), "tettstedsområd");});
test("teu -> teu", function() {deepEqual( Stem("teu"), "teu");});
test("teus -> teus", function() {deepEqual( Stem("teus"), "teus");});
test("the -> the", function() {deepEqual( Stem("the"), "the");});
test("ti -> ti", function() {deepEqual( Stem("ti"), "ti");});
test("tiandepart -> tiandepart", function() {deepEqual( Stem("tiandepart"), "tiandepart");});
test("tid -> tid", function() {deepEqual( Stem("tid"), "tid");});
test("tida -> tid", function() {deepEqual( Stem("tida"), "tid");});
test("tide -> tid", function() {deepEqual( Stem("tide"), "tid");});
test("tidel -> tidel", function() {deepEqual( Stem("tidel"), "tidel");});
test("tiden -> tid", function() {deepEqual( Stem("tiden"), "tid");});
test("tidene -> tid", function() {deepEqual( Stem("tidene"), "tid");});
test("tidenes -> tid", function() {deepEqual( Stem("tidenes"), "tid");});
test("tider -> tid", function() {deepEqual( Stem("tider"), "tid");});
test("tidfestet -> tidfest", function() {deepEqual( Stem("tidfestet"), "tidfest");});
test("tidkrevende -> tidkrev", function() {deepEqual( Stem("tidkrevende"), "tidkrev");});
test("tidkrevjande -> tidkrevj", function() {deepEqual( Stem("tidkrevjande"), "tidkrevj");});
test("tidleg -> tid", function() {deepEqual( Stem("tidleg"), "tid");});
test("tidlegare -> tidlegar", function() {deepEqual( Stem("tidlegare"), "tidlegar");});
test("tidlegast -> tid", function() {deepEqual( Stem("tidlegast"), "tid");});
test("tidlege -> tid", function() {deepEqual( Stem("tidlege"), "tid");});
test("tidlig -> tid", function() {deepEqual( Stem("tidlig"), "tid");});
test("tidlige -> tid", function() {deepEqual( Stem("tidlige"), "tid");});
test("tidligere -> tidliger", function() {deepEqual( Stem("tidligere"), "tidliger");});
test("tidligst -> tidligst", function() {deepEqual( Stem("tidligst"), "tidligst");});
test("tidligsådd -> tidligsådd", function() {deepEqual( Stem("tidligsådd"), "tidligsådd");});
test("tidobbelte -> tidobbelt", function() {deepEqual( Stem("tidobbelte"), "tidobbelt");});
test("tids -> tid", function() {deepEqual( Stem("tids"), "tid");});
test("tidsangivelsene -> tidsangiv", function() {deepEqual( Stem("tidsangivelsene"), "tidsangiv");});
test("tidsavgrensa -> tidsavgrens", function() {deepEqual( Stem("tidsavgrensa"), "tidsavgrens");});
test("tidsavgrensing -> tidsavgrensing", function() {deepEqual( Stem("tidsavgrensing"), "tidsavgrensing");});
test("tidsavgrensingar -> tidsavgrensing", function() {deepEqual( Stem("tidsavgrensingar"), "tidsavgrensing");});
test("tidsavhengig -> tidsavheng", function() {deepEqual( Stem("tidsavhengig"), "tidsavheng");});
test("tidsbruk -> tidsbruk", function() {deepEqual( Stem("tidsbruk"), "tidsbruk");});
test("tidseffektive -> tidseffektiv", function() {deepEqual( Stem("tidseffektive"), "tidseffektiv");});
test("tidsforskyvningen -> tidsforskyvning", function() {deepEqual( Stem("tidsforskyvningen"), "tidsforskyvning");});
test("tidsfrist -> tidsfrist", function() {deepEqual( Stem("tidsfrist"), "tidsfrist");});
test("tidshorisont -> tidshorisont", function() {deepEqual( Stem("tidshorisont"), "tidshorisont");});
test("tidshorisonten -> tidshorisont", function() {deepEqual( Stem("tidshorisonten"), "tidshorisont");});
test("tidshorisontene -> tidshorisont", function() {deepEqual( Stem("tidshorisontene"), "tidshorisont");});
test("tidskontoordning -> tidskontoordning", function() {deepEqual( Stem("tidskontoordning"), "tidskontoordning");});
test("tidskostnader -> tidskostnad", function() {deepEqual( Stem("tidskostnader"), "tidskostnad");});
test("tidspartar -> tidspart", function() {deepEqual( Stem("tidspartar"), "tidspart");});
test("tidsperspektiv -> tidsperspektiv", function() {deepEqual( Stem("tidsperspektiv"), "tidsperspektiv");});
test("tidsperspektivene -> tidsperspektiv", function() {deepEqual( Stem("tidsperspektivene"), "tidsperspektiv");});
test("tidsperspektiver -> tidsperspektiv", function() {deepEqual( Stem("tidsperspektiver"), "tidsperspektiv");});
test("tidsperspektivet -> tidsperspektiv", function() {deepEqual( Stem("tidsperspektivet"), "tidsperspektiv");});
test("tidspunkt -> tidspunkt", function() {deepEqual( Stem("tidspunkt"), "tidspunkt");});
test("tidspunkter -> tidspunkt", function() {deepEqual( Stem("tidspunkter"), "tidspunkt");});
test("tidspunktet -> tidspunkt", function() {deepEqual( Stem("tidspunktet"), "tidspunkt");});
test("tidsramme -> tidsramm", function() {deepEqual( Stem("tidsramme"), "tidsramm");});
test("tidsrammen -> tidsramm", function() {deepEqual( Stem("tidsrammen"), "tidsramm");});
test("tidsrom -> tidsrom", function() {deepEqual( Stem("tidsrom"), "tidsrom");});
test("tidsrommet -> tidsromm", function() {deepEqual( Stem("tidsrommet"), "tidsromm");});
test("tidsskriftrom -> tidsskriftrom", function() {deepEqual( Stem("tidsskriftrom"), "tidsskriftrom");});
test("tidstap -> tidstap", function() {deepEqual( Stem("tidstap"), "tidstap");});
test("tidsubestemt -> tidsubestemt", function() {deepEqual( Stem("tidsubestemt"), "tidsubestemt");});
test("tidvis -> tidvis", function() {deepEqual( Stem("tidvis"), "tidvis");});
test("tie -> tie", function() {deepEqual( Stem("tie"), "tie");});
test("tiendedel -> tiendedel", function() {deepEqual( Stem("tiendedel"), "tiendedel");});
test("tier -> tier", function() {deepEqual( Stem("tier"), "tier");});
test("tiet -> tiet", function() {deepEqual( Stem("tiet"), "tiet");});
test("tigger -> tigg", function() {deepEqual( Stem("tigger"), "tigg");});
test("til -> til", function() {deepEqual( Stem("til"), "til");});
test("tilbake -> tilbak", function() {deepEqual( Stem("tilbake"), "tilbak");});
test("tilbakebetaling -> tilbakebetaling", function() {deepEqual( Stem("tilbakebetaling"), "tilbakebetaling");});
test("tilbakeføre -> tilbakefør", function() {deepEqual( Stem("tilbakeføre"), "tilbakefør");});
test("tilbakeføres -> tilbakefør", function() {deepEqual( Stem("tilbakeføres"), "tilbakefør");});
test("tilbakeføring -> tilbakeføring", function() {deepEqual( Stem("tilbakeføring"), "tilbakeføring");});
test("tilbakeføringa -> tilbakeføring", function() {deepEqual( Stem("tilbakeføringa"), "tilbakeføring");});
test("tilbakeføringsåret -> tilbakeføringsår", function() {deepEqual( Stem("tilbakeføringsåret"), "tilbakeføringsår");});
test("tilbakeført -> tilbakeført", function() {deepEqual( Stem("tilbakeført"), "tilbakeført");});
test("tilbakeførte -> tilbakeført", function() {deepEqual( Stem("tilbakeførte"), "tilbakeført");});
test("tilbakeholde -> tilbakehold", function() {deepEqual( Stem("tilbakeholde"), "tilbakehold");});
test("tilbakeholdenhet -> tilbakeholden", function() {deepEqual( Stem("tilbakeholdenhet"), "tilbakeholden");});
test("tilbakeholder -> tilbakehold", function() {deepEqual( Stem("tilbakeholder"), "tilbakehold");});
test("tilbakeholdes -> tilbakehold", function() {deepEqual( Stem("tilbakeholdes"), "tilbakehold");});
test("tilbakeverkande -> tilbakeverk", function() {deepEqual( Stem("tilbakeverkande"), "tilbakeverk");});
test("tilbakeverknad -> tilbakeverknad", function() {deepEqual( Stem("tilbakeverknad"), "tilbakeverknad");});
test("tilbod -> tilbod", function() {deepEqual( Stem("tilbod"), "tilbod");});
test("tilbodet -> tilbod", function() {deepEqual( Stem("tilbodet"), "tilbod");});
test("tilbringertjeneste -> tilbringertjenest", function() {deepEqual( Stem("tilbringertjeneste"), "tilbringertjenest");});
test("tilbud -> tilbud", function() {deepEqual( Stem("tilbud"), "tilbud");});
test("tilbudene -> tilbud", function() {deepEqual( Stem("tilbudene"), "tilbud");});
test("tilbudet -> tilbud", function() {deepEqual( Stem("tilbudet"), "tilbud");});
test("tilbudssiden -> tilbudssid", function() {deepEqual( Stem("tilbudssiden"), "tilbudssid");});
test("tilbudt -> tilbud", function() {deepEqual( Stem("tilbudt"), "tilbud");});
test("tilbudte -> tilbud", function() {deepEqual( Stem("tilbudte"), "tilbud");});
test("tilby -> tilby", function() {deepEqual( Stem("tilby"), "tilby");});
test("tilbyder -> tilbyd", function() {deepEqual( Stem("tilbyder"), "tilbyd");});
test("tilbydere -> tilbyder", function() {deepEqual( Stem("tilbydere"), "tilbyder");});
test("tilbyderne -> tilbydern", function() {deepEqual( Stem("tilbyderne"), "tilbydern");});
test("tilbydernes -> tilbydern", function() {deepEqual( Stem("tilbydernes"), "tilbydern");});
test("tilbydt -> tilbyd", function() {deepEqual( Stem("tilbydt"), "tilbyd");});
test("tilbyr -> tilbyr", function() {deepEqual( Stem("tilbyr"), "tilbyr");});
test("tilbys -> tilby", function() {deepEqual( Stem("tilbys"), "tilby");});
test("tilbørleg -> tilbør", function() {deepEqual( Stem("tilbørleg"), "tilbør");});
test("tildeles -> tildel", function() {deepEqual( Stem("tildeles"), "tildel");});
test("tildeling -> tildeling", function() {deepEqual( Stem("tildeling"), "tildeling");});
test("tildelt -> tildelt", function() {deepEqual( Stem("tildelt"), "tildelt");});
test("tildelte -> tildelt", function() {deepEqual( Stem("tildelte"), "tildelt");});
test("tildligpensjonering -> tildligpensjonering", function() {deepEqual( Stem("tildligpensjonering"), "tildligpensjonering");});
test("tildriv -> tildriv", function() {deepEqual( Stem("tildriv"), "tildriv");});
test("tileigne -> tileign", function() {deepEqual( Stem("tileigne"), "tileign");});
test("tilfalle -> tilfall", function() {deepEqual( Stem("tilfalle"), "tilfall");});
test("tilfaller -> tilfall", function() {deepEqual( Stem("tilfaller"), "tilfall");});
test("tilfalt -> tilfalt", function() {deepEqual( Stem("tilfalt"), "tilfalt");});
test("tilfanget -> tilfang", function() {deepEqual( Stem("tilfanget"), "tilfang");});
test("tilfeldig -> tilfeld", function() {deepEqual( Stem("tilfeldig"), "tilfeld");});
test("tilfeldige -> tilfeld", function() {deepEqual( Stem("tilfeldige"), "tilfeld");});
test("tilfeldighet -> tilfeld", function() {deepEqual( Stem("tilfeldighet"), "tilfeld");});
test("tilfell -> tilfell", function() {deepEqual( Stem("tilfell"), "tilfell");});
test("tilfella -> tilfell", function() {deepEqual( Stem("tilfella"), "tilfell");});
test("tilfelle -> tilfell", function() {deepEqual( Stem("tilfelle"), "tilfell");});
test("tilfellene -> tilfell", function() {deepEqual( Stem("tilfellene"), "tilfell");});
test("tilfeller -> tilfell", function() {deepEqual( Stem("tilfeller"), "tilfell");});
test("tilfellet -> tilfell", function() {deepEqual( Stem("tilfellet"), "tilfell");});
test("tilflyter -> tilflyt", function() {deepEqual( Stem("tilflyter"), "tilflyt");});
test("tilflytting -> tilflytting", function() {deepEqual( Stem("tilflytting"), "tilflytting");});
test("tilfredsstillande -> tilfredsstill", function() {deepEqual( Stem("tilfredsstillande"), "tilfredsstill");});
test("tilfredsstille -> tilfredsstill", function() {deepEqual( Stem("tilfredsstille"), "tilfredsstill");});
test("tilfredsstillende -> tilfredsstill", function() {deepEqual( Stem("tilfredsstillende"), "tilfredsstill");});
test("tilfredsstiller -> tilfredsstill", function() {deepEqual( Stem("tilfredsstiller"), "tilfredsstill");});
test("tilføre -> tilfør", function() {deepEqual( Stem("tilføre"), "tilfør");});
test("tilfører -> tilfør", function() {deepEqual( Stem("tilfører"), "tilfør");});
test("tilføres -> tilfør", function() {deepEqual( Stem("tilføres"), "tilfør");});
test("tilføring -> tilføring", function() {deepEqual( Stem("tilføring"), "tilføring");});
test("tilførsel -> tilførsel", function() {deepEqual( Stem("tilførsel"), "tilførsel");});
test("tilført -> tilført", function() {deepEqual( Stem("tilført"), "tilført");});
test("tilføyde -> tilføyd", function() {deepEqual( Stem("tilføyde"), "tilføyd");});
test("tilføyelse -> tilføy", function() {deepEqual( Stem("tilføyelse"), "tilføy");});
test("tilføyelsen -> tilføy", function() {deepEqual( Stem("tilføyelsen"), "tilføy");});
test("tilgang -> tilgang", function() {deepEqual( Stem("tilgang"), "tilgang");});
test("tilgangen -> tilgang", function() {deepEqual( Stem("tilgangen"), "tilgang");});
test("tilgir -> tilgir", function() {deepEqual( Stem("tilgir"), "tilgir");});
test("tilgjenge -> tilgjeng", function() {deepEqual( Stem("tilgjenge"), "tilgjeng");});
test("tilgjengeleg -> tilgjeng", function() {deepEqual( Stem("tilgjengeleg"), "tilgjeng");});
test("tilgjengelege -> tilgjeng", function() {deepEqual( Stem("tilgjengelege"), "tilgjeng");});
test("tilgjengelig -> tilgjeng", function() {deepEqual( Stem("tilgjengelig"), "tilgjeng");});
test("tilgjengelige -> tilgjeng", function() {deepEqual( Stem("tilgjengelige"), "tilgjeng");});
test("tilgjengelighet -> tilgjeng", function() {deepEqual( Stem("tilgjengelighet"), "tilgjeng");});
test("tilgodehavande -> tilgodehav", function() {deepEqual( Stem("tilgodehavande"), "tilgodehav");});
test("tilgodesedd -> tilgodesedd", function() {deepEqual( Stem("tilgodesedd"), "tilgodesedd");});
test("tilgodeser -> tilgodes", function() {deepEqual( Stem("tilgodeser"), "tilgodes");});
test("tilgodesjå -> tilgodesjå", function() {deepEqual( Stem("tilgodesjå"), "tilgodesjå");});
test("tilgrising -> tilgrising", function() {deepEqual( Stem("tilgrising"), "tilgrising");});
test("tilhenger -> tilheng", function() {deepEqual( Stem("tilhenger"), "tilheng");});
test("tilhengere -> tilhenger", function() {deepEqual( Stem("tilhengere"), "tilhenger");});
test("tilhøre -> tilhør", function() {deepEqual( Stem("tilhøre"), "tilhør");});
test("tilhørende -> tilhør", function() {deepEqual( Stem("tilhørende"), "tilhør");});
test("tilhører -> tilhør", function() {deepEqual( Stem("tilhører"), "tilhør");});
test("tilhøva -> tilhøv", function() {deepEqual( Stem("tilhøva"), "tilhøv");});
test("tilhøve -> tilhøv", function() {deepEqual( Stem("tilhøve"), "tilhøv");});
test("tilhøvet -> tilhøv", function() {deepEqual( Stem("tilhøvet"), "tilhøv");});
test("tilhøyrande -> tilhøyr", function() {deepEqual( Stem("tilhøyrande"), "tilhøyr");});
test("tilhøyrde -> tilhøyrd", function() {deepEqual( Stem("tilhøyrde"), "tilhøyrd");});
test("tilhøyre -> tilhøyr", function() {deepEqual( Stem("tilhøyre"), "tilhøyr");});
test("tilhøyrer -> tilhøyr", function() {deepEqual( Stem("tilhøyrer"), "tilhøyr");});
test("tilhøyrsel -> tilhøyrsel", function() {deepEqual( Stem("tilhøyrsel"), "tilhøyrsel");});
test("tilhøyrsle -> tilhøyrsl", function() {deepEqual( Stem("tilhøyrsle"), "tilhøyrsl");});
test("tilhøyrslereglane -> tilhøyrsleregl", function() {deepEqual( Stem("tilhøyrslereglane"), "tilhøyrsleregl");});
test("tilknyting -> tilknyting", function() {deepEqual( Stem("tilknyting"), "tilknyting");});
test("tilknytinga -> tilknyting", function() {deepEqual( Stem("tilknytinga"), "tilknyting");});
test("tilknytingsband -> tilknytingsband", function() {deepEqual( Stem("tilknytingsband"), "tilknytingsband");});
test("tilknytingsbanda -> tilknytingsband", function() {deepEqual( Stem("tilknytingsbanda"), "tilknytingsband");});
test("tilknytingsforhold -> tilknytingsforhold", function() {deepEqual( Stem("tilknytingsforhold"), "tilknytingsforhold");});
test("tilknytingsforholdet -> tilknytingsforhold", function() {deepEqual( Stem("tilknytingsforholdet"), "tilknytingsforhold");});
test("tilknytingsforma -> tilknytingsform", function() {deepEqual( Stem("tilknytingsforma"), "tilknytingsform");});
test("tilknytingsformer -> tilknytingsform", function() {deepEqual( Stem("tilknytingsformer"), "tilknytingsform");});
test("tilknytning -> tilknytning", function() {deepEqual( Stem("tilknytning"), "tilknytning");});
test("tilknytningen -> tilknytning", function() {deepEqual( Stem("tilknytningen"), "tilknytning");});
test("tilknytninger -> tilknytning", function() {deepEqual( Stem("tilknytninger"), "tilknytning");});
test("tilknytningsforhold -> tilknytningsforhold", function() {deepEqual( Stem("tilknytningsforhold"), "tilknytningsforhold");});
test("tilknytt -> tilknytt", function() {deepEqual( Stem("tilknytt"), "tilknytt");});
test("tilknytte -> tilknytt", function() {deepEqual( Stem("tilknytte"), "tilknytt");});
test("tilknyttede -> tilknytt", function() {deepEqual( Stem("tilknyttede"), "tilknytt");});
test("tilknyttes -> tilknytt", function() {deepEqual( Stem("tilknyttes"), "tilknytt");});
test("tilknyttet -> tilknytt", function() {deepEqual( Stem("tilknyttet"), "tilknytt");});
test("tilkomme -> tilkomm", function() {deepEqual( Stem("tilkomme"), "tilkomm");});
test("tilkommer -> tilkomm", function() {deepEqual( Stem("tilkommer"), "tilkomm");});
test("till -> till", function() {deepEqual( Stem("till"), "till");});
test("tillagd -> tillagd", function() {deepEqual( Stem("tillagd"), "tillagd");});
test("tillagde -> tillagd", function() {deepEqual( Stem("tillagde"), "tillagd");});
test("tillagt -> tillagt", function() {deepEqual( Stem("tillagt"), "tillagt");});
test("tillatast -> tillat", function() {deepEqual( Stem("tillatast"), "tillat");});
test("tillate -> tillat", function() {deepEqual( Stem("tillate"), "tillat");});
test("tillatelse -> tillat", function() {deepEqual( Stem("tillatelse"), "tillat");});
test("tillaten -> tillat", function() {deepEqual( Stem("tillaten"), "tillat");});
test("tillates -> tillat", function() {deepEqual( Stem("tillates"), "tillat");});
test("tillatne -> tillatn", function() {deepEqual( Stem("tillatne"), "tillatn");});
test("tillatt -> tillatt", function() {deepEqual( Stem("tillatt"), "tillatt");});
test("tillegg -> tillegg", function() {deepEqual( Stem("tillegg"), "tillegg");});
test("tillegge -> tillegg", function() {deepEqual( Stem("tillegge"), "tillegg");});
test("tillegger -> tillegg", function() {deepEqual( Stem("tillegger"), "tillegg");});
test("tillegges -> tillegg", function() {deepEqual( Stem("tillegges"), "tillegg");});
test("tilleggsavsetninger -> tilleggsavsetning", function() {deepEqual( Stem("tilleggsavsetninger"), "tilleggsavsetning");});
test("tilleggsavtalar -> tilleggsavtal", function() {deepEqual( Stem("tilleggsavtalar"), "tilleggsavtal");});
test("tilleggsavtalen -> tilleggsavtal", function() {deepEqual( Stem("tilleggsavtalen"), "tilleggsavtal");});
test("tilleggsbevilgning -> tilleggsbevilgning", function() {deepEqual( Stem("tilleggsbevilgning"), "tilleggsbevilgning");});
test("tilleggsføremål -> tilleggsføremål", function() {deepEqual( Stem("tilleggsføremål"), "tilleggsføremål");});
test("tilleggsføremåla -> tilleggsføremål", function() {deepEqual( Stem("tilleggsføremåla"), "tilleggsføremål");});
test("tilleggsføremålet -> tilleggsføremål", function() {deepEqual( Stem("tilleggsføremålet"), "tilleggsføremål");});
test("tilleggsinnkalling -> tilleggsinnkalling", function() {deepEqual( Stem("tilleggsinnkalling"), "tilleggsinnkalling");});
test("tilleggsinnskot -> tilleggsinnskot", function() {deepEqual( Stem("tilleggsinnskot"), "tilleggsinnskot");});
test("tilleggsinnskotet -> tilleggsinnskot", function() {deepEqual( Stem("tilleggsinnskotet"), "tilleggsinnskot");});
test("tilleggskapasitet -> tilleggskapasit", function() {deepEqual( Stem("tilleggskapasitet"), "tilleggskapasit");});
test("tilleggskapital -> tilleggskapital", function() {deepEqual( Stem("tilleggskapital"), "tilleggskapital");});
test("tilleggskontraktane -> tilleggskontrakt", function() {deepEqual( Stem("tilleggskontraktane"), "tilleggskontrakt");});
test("tilleggskontraktar -> tilleggskontrakt", function() {deepEqual( Stem("tilleggskontraktar"), "tilleggskontrakt");});
test("tilleggsmandat -> tilleggsmandat", function() {deepEqual( Stem("tilleggsmandat"), "tilleggsmandat");});
test("tilleggsopplysningar -> tilleggsopplysning", function() {deepEqual( Stem("tilleggsopplysningar"), "tilleggsopplysning");});
test("tilleggspensjon -> tilleggspensjon", function() {deepEqual( Stem("tilleggspensjon"), "tilleggspensjon");});
test("tilleggspensjonen -> tilleggspensjon", function() {deepEqual( Stem("tilleggspensjonen"), "tilleggspensjon");});
test("tilleggspensjonsordning -> tilleggspensjonsordning", function() {deepEqual( Stem("tilleggspensjonsordning"), "tilleggspensjonsordning");});
test("tilleggspensjonsordningen -> tilleggspensjonsordning", function() {deepEqual( Stem("tilleggspensjonsordningen"), "tilleggspensjonsordning");});
test("tilleggspensjonsordninger -> tilleggspensjonsordning", function() {deepEqual( Stem("tilleggspensjonsordninger"), "tilleggspensjonsordning");});
test("tilleggspensjonsprosent -> tilleggspensjonsprosent", function() {deepEqual( Stem("tilleggspensjonsprosent"), "tilleggspensjonsprosent");});
test("tilleggsreglar -> tilleggsregl", function() {deepEqual( Stem("tilleggsreglar"), "tilleggsregl");});
test("tilleggsregler -> tilleggsregl", function() {deepEqual( Stem("tilleggsregler"), "tilleggsregl");});
test("tilleggssikkerhet -> tilleggssikker", function() {deepEqual( Stem("tilleggssikkerhet"), "tilleggssikker");});
test("tilleggstilråding -> tilleggstilråding", function() {deepEqual( Stem("tilleggstilråding"), "tilleggstilråding");});
test("tilleggstrafikk -> tilleggstrafikk", function() {deepEqual( Stem("tilleggstrafikk"), "tilleggstrafikk");});
test("tilleggsytelse -> tilleggsyt", function() {deepEqual( Stem("tilleggsytelse"), "tilleggsyt");});
test("tilleggsytelsene -> tilleggsyt", function() {deepEqual( Stem("tilleggsytelsene"), "tilleggsyt");});
test("tilleggsytelser -> tilleggsyt", function() {deepEqual( Stem("tilleggsytelser"), "tilleggsyt");});
test("tillet -> till", function() {deepEqual( Stem("tillet"), "till");});
test("tilligge -> tilligg", function() {deepEqual( Stem("tilligge"), "tilligg");});
test("tilligger -> tilligg", function() {deepEqual( Stem("tilligger"), "tilligg");});
test("tillit -> tillit", function() {deepEqual( Stem("tillit"), "tillit");});
test("tillita -> tillit", function() {deepEqual( Stem("tillita"), "tillit");});
test("tillitsmann -> tillitsmann", function() {deepEqual( Stem("tillitsmann"), "tillitsmann");});
test("tillitsperson -> tillitsperson", function() {deepEqual( Stem("tillitsperson"), "tillitsperson");});
test("tillitsvald -> tillitsvald", function() {deepEqual( Stem("tillitsvald"), "tillitsvald");});
test("tillitsvalde -> tillitsvald", function() {deepEqual( Stem("tillitsvalde"), "tillitsvald");});
test("tillitsverv -> tillitsverv", function() {deepEqual( Stem("tillitsverv"), "tillitsverv");});
test("tilnavn -> tilnavn", function() {deepEqual( Stem("tilnavn"), "tilnavn");});
test("tilnytingsbanda -> tilnytingsband", function() {deepEqual( Stem("tilnytingsbanda"), "tilnytingsband");});
test("tilnærma -> tilnærm", function() {deepEqual( Stem("tilnærma"), "tilnærm");});
test("tilnærmet -> tilnærm", function() {deepEqual( Stem("tilnærmet"), "tilnærm");});
test("tilnærming -> tilnærming", function() {deepEqual( Stem("tilnærming"), "tilnærming");});
test("tilnærminger -> tilnærming", function() {deepEqual( Stem("tilnærminger"), "tilnærming");});
test("tilordnede -> tilordn", function() {deepEqual( Stem("tilordnede"), "tilordn");});
test("tilordnes -> tilordn", function() {deepEqual( Stem("tilordnes"), "tilordn");});
test("tilordnet -> tilordn", function() {deepEqual( Stem("tilordnet"), "tilordn");});
test("tilordning -> tilordning", function() {deepEqual( Stem("tilordning"), "tilordning");});
test("tilordningen -> tilordning", function() {deepEqual( Stem("tilordningen"), "tilordning");});
test("tilpasning -> tilpasning", function() {deepEqual( Stem("tilpasning"), "tilpasning");});
test("tilpasningen -> tilpasning", function() {deepEqual( Stem("tilpasningen"), "tilpasning");});
test("tilpasninger -> tilpasning", function() {deepEqual( Stem("tilpasninger"), "tilpasning");});
test("tilpasningsdyktig -> tilpasningsdykt", function() {deepEqual( Stem("tilpasningsdyktig"), "tilpasningsdykt");});
test("tilpasningsmuligheter -> tilpasningsmu", function() {deepEqual( Stem("tilpasningsmuligheter"), "tilpasningsmu");});
test("tilpassa -> tilpass", function() {deepEqual( Stem("tilpassa"), "tilpass");});
test("tilpassast -> tilpass", function() {deepEqual( Stem("tilpassast"), "tilpass");});
test("tilpasse -> tilpass", function() {deepEqual( Stem("tilpasse"), "tilpass");});
test("tilpasseleg -> tilpass", function() {deepEqual( Stem("tilpasseleg"), "tilpass");});
test("tilpasser -> tilpass", function() {deepEqual( Stem("tilpasser"), "tilpass");});
test("tilpasses -> tilpass", function() {deepEqual( Stem("tilpasses"), "tilpass");});
test("tilpasset -> tilpass", function() {deepEqual( Stem("tilpasset"), "tilpass");});
test("tilpassete -> tilpasset", function() {deepEqual( Stem("tilpassete"), "tilpasset");});
test("tilpassing -> tilpassing", function() {deepEqual( Stem("tilpassing"), "tilpassing");});
test("tilpassingar -> tilpassing", function() {deepEqual( Stem("tilpassingar"), "tilpassing");});
test("tilpassingsvanskar -> tilpassingsvansk", function() {deepEqual( Stem("tilpassingsvanskar"), "tilpassingsvansk");});
test("tilrettelagde -> tilrettelagd", function() {deepEqual( Stem("tilrettelagde"), "tilrettelagd");});
test("tilrettelegge -> tilrettelegg", function() {deepEqual( Stem("tilrettelegge"), "tilrettelegg");});
test("tilretteleggelse -> tilrettelegg", function() {deepEqual( Stem("tilretteleggelse"), "tilrettelegg");});
test("tilretteleggende -> tilrettelegg", function() {deepEqual( Stem("tilretteleggende"), "tilrettelegg");});
test("tilrettelegges -> tilrettelegg", function() {deepEqual( Stem("tilrettelegges"), "tilrettelegg");});
test("tilrettelegging -> tilrettelegging", function() {deepEqual( Stem("tilrettelegging"), "tilrettelegging");});
test("tilrå -> tilrå", function() {deepEqual( Stem("tilrå"), "tilrå");});
test("tilrådeleg -> tilråd", function() {deepEqual( Stem("tilrådeleg"), "tilråd");});
test("tilrådelig -> tilråd", function() {deepEqual( Stem("tilrådelig"), "tilråd");});
test("tilråding -> tilråding", function() {deepEqual( Stem("tilråding"), "tilråding");});
test("tilrådinger -> tilråding", function() {deepEqual( Stem("tilrådinger"), "tilråding");});
test("tilrår -> tilrår", function() {deepEqual( Stem("tilrår"), "tilrår");});
test("tilseie -> tilsei", function() {deepEqual( Stem("tilseie"), "tilsei");});
test("tilseier -> tilsei", function() {deepEqual( Stem("tilseier"), "tilsei");});
test("tilseiing -> tilseiing", function() {deepEqual( Stem("tilseiing"), "tilseiing");});
test("tilsendt -> tilsend", function() {deepEqual( Stem("tilsendt"), "tilsend");});
test("tilsetje -> tilsetj", function() {deepEqual( Stem("tilsetje"), "tilsetj");});
test("tilsetjing -> tilsetjing", function() {deepEqual( Stem("tilsetjing"), "tilsetjing");});
test("tilsetjinga -> tilsetjing", function() {deepEqual( Stem("tilsetjinga"), "tilsetjing");});
test("tilsetjingar -> tilsetjing", function() {deepEqual( Stem("tilsetjingar"), "tilsetjing");});
test("tilsetjingsavtale -> tilsetjingsavtal", function() {deepEqual( Stem("tilsetjingsavtale"), "tilsetjingsavtal");});
test("tilsetjingsforhold -> tilsetjingsforhold", function() {deepEqual( Stem("tilsetjingsforhold"), "tilsetjingsforhold");});
test("tilsett -> tilsett", function() {deepEqual( Stem("tilsett"), "tilsett");});
test("tilsette -> tilsett", function() {deepEqual( Stem("tilsette"), "tilsett");});
test("tilsi -> tilsi", function() {deepEqual( Stem("tilsi"), "tilsi");});
test("tilsier -> tilsi", function() {deepEqual( Stem("tilsier"), "tilsi");});
test("tilskot -> tilskot", function() {deepEqual( Stem("tilskot"), "tilskot");});
test("tilskota -> tilskot", function() {deepEqual( Stem("tilskota"), "tilskot");});
test("tilskotsordningar -> tilskotsordning", function() {deepEqual( Stem("tilskotsordningar"), "tilskotsordning");});
test("tilskrives -> tilskriv", function() {deepEqual( Stem("tilskrives"), "tilskriv");});
test("tilskudd -> tilskudd", function() {deepEqual( Stem("tilskudd"), "tilskudd");});
test("tilskuddene -> tilskudd", function() {deepEqual( Stem("tilskuddene"), "tilskudd");});
test("tilskuddet -> tilskudd", function() {deepEqual( Stem("tilskuddet"), "tilskudd");});
test("tilskuddsordning -> tilskuddsordning", function() {deepEqual( Stem("tilskuddsordning"), "tilskuddsordning");});
test("tilskuddssatsene -> tilskuddssats", function() {deepEqual( Stem("tilskuddssatsene"), "tilskuddssats");});
test("tilskuddssatser -> tilskuddssats", function() {deepEqual( Stem("tilskuddssatser"), "tilskuddssats");});
test("tilskuere -> tilskuer", function() {deepEqual( Stem("tilskuere"), "tilskuer");});
test("tilslutning -> tilslutning", function() {deepEqual( Stem("tilslutning"), "tilslutning");});
test("tilslutta -> tilslutt", function() {deepEqual( Stem("tilslutta"), "tilslutt");});
test("tilsluttet -> tilslutt", function() {deepEqual( Stem("tilsluttet"), "tilslutt");});
test("tilslørte -> tilslørt", function() {deepEqual( Stem("tilslørte"), "tilslørt");});
test("tilstanden -> tilstand", function() {deepEqual( Stem("tilstanden"), "tilstand");});
test("tilstede -> tilst", function() {deepEqual( Stem("tilstede"), "tilst");});
test("tilstrebe -> tilstreb", function() {deepEqual( Stem("tilstrebe"), "tilstreb");});
test("tilstreber -> tilstreb", function() {deepEqual( Stem("tilstreber"), "tilstreb");});
test("tilstrebes -> tilstreb", function() {deepEqual( Stem("tilstrebes"), "tilstreb");});
test("tilstrekkeleg -> tilstrekk", function() {deepEqual( Stem("tilstrekkeleg"), "tilstrekk");});
test("tilstrekkelig -> tilstrekk", function() {deepEqual( Stem("tilstrekkelig"), "tilstrekk");});
test("tilstrekkelige -> tilstrekk", function() {deepEqual( Stem("tilstrekkelige"), "tilstrekk");});
test("tilstøtende -> tilstøt", function() {deepEqual( Stem("tilstøtende"), "tilstøt");});
test("tilstøytande -> tilstøyt", function() {deepEqual( Stem("tilstøytande"), "tilstøyt");});
test("tilsvarande -> tilsvar", function() {deepEqual( Stem("tilsvarande"), "tilsvar");});
test("tilsvare -> tilsvar", function() {deepEqual( Stem("tilsvare"), "tilsvar");});
test("tilsvarende -> tilsvar", function() {deepEqual( Stem("tilsvarende"), "tilsvar");});
test("tilsvarer -> tilsvar", function() {deepEqual( Stem("tilsvarer"), "tilsvar");});
test("tilsyn -> tilsyn", function() {deepEqual( Stem("tilsyn"), "tilsyn");});
test("tilsynelatende -> tilsynelat", function() {deepEqual( Stem("tilsynelatende"), "tilsynelat");});
test("tilsynet -> tilsyn", function() {deepEqual( Stem("tilsynet"), "tilsyn");});
test("tilsynsansvar -> tilsynsansv", function() {deepEqual( Stem("tilsynsansvar"), "tilsynsansv");});
test("tilsynsansvaret -> tilsynsansvar", function() {deepEqual( Stem("tilsynsansvaret"), "tilsynsansvar");});
test("tilsynsarbeidet -> tilsynsarbeid", function() {deepEqual( Stem("tilsynsarbeidet"), "tilsynsarbeid");});
test("tilsynsbehovet -> tilsynsbehov", function() {deepEqual( Stem("tilsynsbehovet"), "tilsynsbehov");});
test("tilsynsfunksjonane -> tilsynsfunksjon", function() {deepEqual( Stem("tilsynsfunksjonane"), "tilsynsfunksjon");});
test("tilsynsloven -> tilsyn", function() {deepEqual( Stem("tilsynsloven"), "tilsyn");});
test("tilsynsmessige -> tilsynsmess", function() {deepEqual( Stem("tilsynsmessige"), "tilsynsmess");});
test("tilsynsmyndighet -> tilsynsmynd", function() {deepEqual( Stem("tilsynsmyndighet"), "tilsynsmynd");});
test("tilsynsmyndigheten -> tilsynsmynd", function() {deepEqual( Stem("tilsynsmyndigheten"), "tilsynsmynd");});
test("tilsynsmyndighetene -> tilsynsmynd", function() {deepEqual( Stem("tilsynsmyndighetene"), "tilsynsmynd");});
test("tilsynsmyndigheter -> tilsynsmynd", function() {deepEqual( Stem("tilsynsmyndigheter"), "tilsynsmynd");});
test("tilsynsoppgaven -> tilsynsoppgav", function() {deepEqual( Stem("tilsynsoppgaven"), "tilsynsoppgav");});
test("tilsynsoppgåva -> tilsynsoppgåv", function() {deepEqual( Stem("tilsynsoppgåva"), "tilsynsoppgåv");});
test("tilsynsorgan -> tilsynsorgan", function() {deepEqual( Stem("tilsynsorgan"), "tilsynsorgan");});
test("tilsynsretten -> tilsynsrett", function() {deepEqual( Stem("tilsynsretten"), "tilsynsrett");});
test("tiltagende -> tiltag", function() {deepEqual( Stem("tiltagende"), "tiltag");});
test("tiltak -> tiltak", function() {deepEqual( Stem("tiltak"), "tiltak");});
test("tiltaka -> tiltak", function() {deepEqual( Stem("tiltaka"), "tiltak");});
test("tiltakende -> tiltak", function() {deepEqual( Stem("tiltakende"), "tiltak");});
test("tiltakene -> tiltak", function() {deepEqual( Stem("tiltakene"), "tiltak");});
test("tiltaket -> tiltak", function() {deepEqual( Stem("tiltaket"), "tiltak");});
test("tiltar -> tilt", function() {deepEqual( Stem("tiltar"), "tilt");});
test("tiltrekke -> tiltrekk", function() {deepEqual( Stem("tiltrekke"), "tiltrekk");});
test("tiltrekkes -> tiltrekk", function() {deepEqual( Stem("tiltrekkes"), "tiltrekk");});
test("tiltrer -> tiltr", function() {deepEqual( Stem("tiltrer"), "tiltr");});
test("tiltro -> tiltro", function() {deepEqual( Stem("tiltro"), "tiltro");});
test("tiltrådt -> tiltråd", function() {deepEqual( Stem("tiltrådt"), "tiltråd");});
test("tilvekst -> tilvekst", function() {deepEqual( Stem("tilvekst"), "tilvekst");});
test("tilveksten -> tilvekst", function() {deepEqual( Stem("tilveksten"), "tilvekst");});
test("tilvisast -> tilvis", function() {deepEqual( Stem("tilvisast"), "tilvis");});
test("tilvising -> tilvising", function() {deepEqual( Stem("tilvising"), "tilvising");});
test("tilvisinga -> tilvising", function() {deepEqual( Stem("tilvisinga"), "tilvising");});
test("tilvisingar -> tilvising", function() {deepEqual( Stem("tilvisingar"), "tilvising");});
test("tilvisning -> tilvisning", function() {deepEqual( Stem("tilvisning"), "tilvisning");});
test("tilværelse -> tilvær", function() {deepEqual( Stem("tilværelse"), "tilvær");});
test("tilårskomne -> tilårskomn", function() {deepEqual( Stem("tilårskomne"), "tilårskomn");});
test("time -> tim", function() {deepEqual( Stem("time"), "tim");});
test("timer -> tim", function() {deepEqual( Stem("timer"), "tim");});
test("timers -> tim", function() {deepEqual( Stem("timers"), "tim");});
test("timersregelen -> timersregel", function() {deepEqual( Stem("timersregelen"), "timersregel");});
test("times -> tim", function() {deepEqual( Stem("times"), "tim");});
test("timing -> timing", function() {deepEqual( Stem("timing"), "timing");});
test("ting -> ting", function() {deepEqual( Stem("ting"), "ting");});
test("tingar -> ting", function() {deepEqual( Stem("tingar"), "ting");});
test("tinglysast -> tinglys", function() {deepEqual( Stem("tinglysast"), "tinglys");});
test("tinglyse -> tinglys", function() {deepEqual( Stem("tinglyse"), "tinglys");});
test("tinglysing -> tinglysing", function() {deepEqual( Stem("tinglysing"), "tinglysing");});
test("tinglysinga -> tinglysing", function() {deepEqual( Stem("tinglysinga"), "tinglysing");});
test("tinglysingsdommarane -> tinglysingsdommar", function() {deepEqual( Stem("tinglysingsdommarane"), "tinglysingsdommar");});
test("tinglysingsfeilen -> tinglysingsfeil", function() {deepEqual( Stem("tinglysingsfeilen"), "tinglysingsfeil");});
test("tinglysingskontora -> tinglysingskontor", function() {deepEqual( Stem("tinglysingskontora"), "tinglysingskontor");});
test("tinglysingslova -> tinglysing", function() {deepEqual( Stem("tinglysingslova"), "tinglysing");});
test("tinglysingslovutkastet -> tinglysingslovutkast", function() {deepEqual( Stem("tinglysingslovutkastet"), "tinglysingslovutkast");});
test("tinglysingssperre -> tinglysingssperr", function() {deepEqual( Stem("tinglysingssperre"), "tinglysingssperr");});
test("tinglysingsutkastet -> tinglysingsutkast", function() {deepEqual( Stem("tinglysingsutkastet"), "tinglysingsutkast");});
test("tinglyst -> tinglyst", function() {deepEqual( Stem("tinglyst"), "tinglyst");});
test("tinglyste -> tinglyst", function() {deepEqual( Stem("tinglyste"), "tinglyst");});
test("tings -> ting", function() {deepEqual( Stem("tings"), "ting");});
test("tingsinnskot -> tingsinnskot", function() {deepEqual( Stem("tingsinnskot"), "tingsinnskot");});
test("tinningen -> tinning", function() {deepEqual( Stem("tinningen"), "tinning");});
test("tinningene -> tinning", function() {deepEqual( Stem("tinningene"), "tinning");});
test("tirret -> tirr", function() {deepEqual( Stem("tirret"), "tirr");});
test("tisker -> tisk", function() {deepEqual( Stem("tisker"), "tisk");});
test("tisket -> tisk", function() {deepEqual( Stem("tisket"), "tisk");});
test("tispe -> tisp", function() {deepEqual( Stem("tispe"), "tisp");});
test("tissler -> tissl", function() {deepEqual( Stem("tissler"), "tissl");});
test("tista -> tist", function() {deepEqual( Stem("tista"), "tist");});
test("titt -> titt", function() {deepEqual( Stem("titt"), "titt");});
test("tittelen -> tittel", function() {deepEqual( Stem("tittelen"), "tittel");});
test("tiår -> tiår", function() {deepEqual( Stem("tiår"), "tiår");});
test("tiåret -> tiår", function() {deepEqual( Stem("tiåret"), "tiår");});
test("tiårperioden -> tiårperiod", function() {deepEqual( Stem("tiårperioden"), "tiårperiod");});
test("tiårsperiode -> tiårsperiod", function() {deepEqual( Stem("tiårsperiode"), "tiårsperiod");});
test("tja -> tja", function() {deepEqual( Stem("tja"), "tja");});
test("tjalve -> tjalv", function() {deepEqual( Stem("tjalve"), "tjalv");});
test("tjanster -> tjanst", function() {deepEqual( Stem("tjanster"), "tjanst");});
test("tjatse -> tjats", function() {deepEqual( Stem("tjatse"), "tjats");});
test("tjatses -> tjats", function() {deepEqual( Stem("tjatses"), "tjats");});
test("tjene -> tjen", function() {deepEqual( Stem("tjene"), "tjen");});
test("tjener -> tjen", function() {deepEqual( Stem("tjener"), "tjen");});
test("tjenere -> tjener", function() {deepEqual( Stem("tjenere"), "tjener");});
test("tjeneste -> tjenest", function() {deepEqual( Stem("tjeneste"), "tjenest");});
test("tjenestefolk -> tjenestefolk", function() {deepEqual( Stem("tjenestefolk"), "tjenestefolk");});
test("tjenestefolkene -> tjenestefolk", function() {deepEqual( Stem("tjenestefolkene"), "tjenestefolk");});
test("tjenesteforhold -> tjenesteforhold", function() {deepEqual( Stem("tjenesteforhold"), "tjenesteforhold");});
test("tjenesteforholdet -> tjenesteforhold", function() {deepEqual( Stem("tjenesteforholdet"), "tjenesteforhold");});
test("tjenestejente -> tjenestejent", function() {deepEqual( Stem("tjenestejente"), "tjenestejent");});
test("tjenestekvinner -> tjenestekvinn", function() {deepEqual( Stem("tjenestekvinner"), "tjenestekvinn");});
test("tjenestemannsgruppen -> tjenestemannsgrupp", function() {deepEqual( Stem("tjenestemannsgruppen"), "tjenestemannsgrupp");});
test("tjenestemenn -> tjenestemenn", function() {deepEqual( Stem("tjenestemenn"), "tjenestemenn");});
test("tjenestemessige -> tjenestemess", function() {deepEqual( Stem("tjenestemessige"), "tjenestemess");});
test("tjenestene -> tjenest", function() {deepEqual( Stem("tjenestene"), "tjenest");});
test("tjenestepensjon -> tjenestepensjon", function() {deepEqual( Stem("tjenestepensjon"), "tjenestepensjon");});
test("tjenestepensjoner -> tjenestepensjon", function() {deepEqual( Stem("tjenestepensjoner"), "tjenestepensjon");});
test("tjenestepensjonsdekningen -> tjenestepensjonsdekning", function() {deepEqual( Stem("tjenestepensjonsdekningen"), "tjenestepensjonsdekning");});
test("tjenestepensjonsforsikring -> tjenestepensjonsforsikring", function() {deepEqual( Stem("tjenestepensjonsforsikring"), "tjenestepensjonsforsikring");});
test("tjenestepensjonsforsikringen -> tjenestepensjonsforsikring", function() {deepEqual( Stem("tjenestepensjonsforsikringen"), "tjenestepensjonsforsikring");});
test("tjenestepensjonsområdet -> tjenestepensjonsområd", function() {deepEqual( Stem("tjenestepensjonsområdet"), "tjenestepensjonsområd");});
test("tjenestepensjonsordning -> tjenestepensjonsordning", function() {deepEqual( Stem("tjenestepensjonsordning"), "tjenestepensjonsordning");});
test("tjenestepensjonsordningen -> tjenestepensjonsordning", function() {deepEqual( Stem("tjenestepensjonsordningen"), "tjenestepensjonsordning");});
test("tjenestepensjonsordningene -> tjenestepensjonsordning", function() {deepEqual( Stem("tjenestepensjonsordningene"), "tjenestepensjonsordning");});
test("tjenestepensjonsordninger -> tjenestepensjonsordning", function() {deepEqual( Stem("tjenestepensjonsordninger"), "tjenestepensjonsordning");});
test("tjenestepensjonssystemet -> tjenestepensjonssystem", function() {deepEqual( Stem("tjenestepensjonssystemet"), "tjenestepensjonssystem");});
test("tjenestepike -> tjenestepik", function() {deepEqual( Stem("tjenestepike"), "tjenestepik");});
test("tjenestepikene -> tjenestepik", function() {deepEqual( Stem("tjenestepikene"), "tjenestepik");});
test("tjenester -> tjenest", function() {deepEqual( Stem("tjenester"), "tjenest");});
test("tjenestetid -> tjenestetid", function() {deepEqual( Stem("tjenestetid"), "tjenestetid");});
test("tjenestetilbud -> tjenestetilbud", function() {deepEqual( Stem("tjenestetilbud"), "tjenestetilbud");});
test("tjenesteytere -> tjenesteyter", function() {deepEqual( Stem("tjenesteytere"), "tjenesteyter");});
test("tjenesteyteren -> tjenesteyter", function() {deepEqual( Stem("tjenesteyteren"), "tjenesteyter");});
test("tjenesteyting -> tjenesteyting", function() {deepEqual( Stem("tjenesteyting"), "tjenesteyting");});
test("tjent -> tjent", function() {deepEqual( Stem("tjent"), "tjent");});
test("tjern -> tjern", function() {deepEqual( Stem("tjern"), "tjern");});
test("tjoret -> tjor", function() {deepEqual( Stem("tjoret"), "tjor");});
test("tjue -> tjue", function() {deepEqual( Stem("tjue"), "tjue");});
test("tjuedagarsfristen -> tjuedagarsfrist", function() {deepEqual( Stem("tjuedagarsfristen"), "tjuedagarsfrist");});
test("tjuedel -> tjuedel", function() {deepEqual( Stem("tjuedel"), "tjuedel");});
test("tjuvholmen -> tjuvholm", function() {deepEqual( Stem("tjuvholmen"), "tjuvholm");});
test("tjærebredd -> tjærebredd", function() {deepEqual( Stem("tjærebredd"), "tjærebredd");});
test("to -> to", function() {deepEqual( Stem("to"), "to");});
test("todagers -> todag", function() {deepEqual( Stem("todagers"), "todag");});
test("tofte -> toft", function() {deepEqual( Stem("tofte"), "toft");});
test("tog -> tog", function() {deepEqual( Stem("tog"), "tog");});
test("toger -> tog", function() {deepEqual( Stem("toger"), "tog");});
test("tok -> tok", function() {deepEqual( Stem("tok"), "tok");});
test("tokk -> tokk", function() {deepEqual( Stem("tokk"), "tokk");});
test("tole -> tol", function() {deepEqual( Stem("tole"), "tol");});
test("tolka -> tolk", function() {deepEqual( Stem("tolka"), "tolk");});
test("tolkast -> tolk", function() {deepEqual( Stem("tolkast"), "tolk");});
test("tolke -> tolk", function() {deepEqual( Stem("tolke"), "tolk");});
test("tolket -> tolk", function() {deepEqual( Stem("tolket"), "tolk");});
test("tolking -> tolking", function() {deepEqual( Stem("tolking"), "tolking");});
test("tolkinga -> tolking", function() {deepEqual( Stem("tolkinga"), "tolking");});
test("tolkingstvil -> tolkingstvil", function() {deepEqual( Stem("tolkingstvil"), "tolkingstvil");});
test("tolkning -> tolkning", function() {deepEqual( Stem("tolkning"), "tolkning");});
test("tolkningen -> tolkning", function() {deepEqual( Stem("tolkningen"), "tolkning");});
test("tolkningspraksis -> tolkningspraksis", function() {deepEqual( Stem("tolkningspraksis"), "tolkningspraksis");});
test("tollbehandlingen -> tollbehandling", function() {deepEqual( Stem("tollbehandlingen"), "tollbehandling");});
test("tolldepartementet -> tolldepartement", function() {deepEqual( Stem("tolldepartementet"), "tolldepartement");});
test("tollekniven -> tollekniv", function() {deepEqual( Stem("tollekniven"), "tollekniv");});
test("tollmaterialets -> tollmaterial", function() {deepEqual( Stem("tollmaterialets"), "tollmaterial");});
test("tollpost -> tollpost", function() {deepEqual( Stem("tollpost"), "tollpost");});
test("tollsted -> tollsted", function() {deepEqual( Stem("tollsted"), "tollsted");});
test("tollvesenet -> tollvesen", function() {deepEqual( Stem("tollvesenet"), "tollvesen");});
test("tollvesenets -> tollvesen", function() {deepEqual( Stem("tollvesenets"), "tollvesen");});
test("tolv -> tolv", function() {deepEqual( Stem("tolv"), "tolv");});
test("tom -> tom", function() {deepEqual( Stem("tom"), "tom");});
test("tomannsbustadene -> tomannsbustad", function() {deepEqual( Stem("tomannsbustadene"), "tomannsbustad");});
test("tomannsbustader -> tomannsbustad", function() {deepEqual( Stem("tomannsbustader"), "tomannsbustad");});
test("tomcontainere -> tomcontainer", function() {deepEqual( Stem("tomcontainere"), "tomcontainer");});
test("tomhendt -> tomhend", function() {deepEqual( Stem("tomhendt"), "tomhend");});
test("tomheten -> tom", function() {deepEqual( Stem("tomheten"), "tom");});
test("tomkjøring -> tomkjøring", function() {deepEqual( Stem("tomkjøring"), "tomkjøring");});
test("tomme -> tomm", function() {deepEqual( Stem("tomme"), "tomm");});
test("tommelen -> tommel", function() {deepEqual( Stem("tommelen"), "tommel");});
test("tomrommet -> tomromm", function() {deepEqual( Stem("tomrommet"), "tomromm");});
test("tomsekker -> tomsekk", function() {deepEqual( Stem("tomsekker"), "tomsekk");});
test("tomt -> tomt", function() {deepEqual( Stem("tomt"), "tomt");});
test("tomta -> tomt", function() {deepEqual( Stem("tomta"), "tomt");});
test("tomtefesteforhold -> tomtefesteforhold", function() {deepEqual( Stem("tomtefesteforhold"), "tomtefesteforhold");});
test("tomtegrunn -> tomtegrunn", function() {deepEqual( Stem("tomtegrunn"), "tomtegrunn");});
test("tomtekjøp -> tomtekjøp", function() {deepEqual( Stem("tomtekjøp"), "tomtekjøp");});
test("tomtene -> tomt", function() {deepEqual( Stem("tomtene"), "tomt");});
test("tomteområde -> tomteområd", function() {deepEqual( Stem("tomteområde"), "tomteområd");});
test("tomtepriser -> tomtepris", function() {deepEqual( Stem("tomtepriser"), "tomtepris");});
test("tomter -> tomt", function() {deepEqual( Stem("tomter"), "tomt");});
test("tomteseljar -> tomteselj", function() {deepEqual( Stem("tomteseljar"), "tomteselj");});
test("tomteselskap -> tomteselskap", function() {deepEqual( Stem("tomteselskap"), "tomteselskap");});
test("tomtetildeling -> tomtetildeling", function() {deepEqual( Stem("tomtetildeling"), "tomtetildeling");});
test("tonn -> tonn", function() {deepEqual( Stem("tonn"), "tonn");});
test("tonnasje -> tonnasj", function() {deepEqual( Stem("tonnasje"), "tonnasj");});
test("tonnasjen -> tonnasj", function() {deepEqual( Stem("tonnasjen"), "tonnasj");});
test("tonnkilometer -> tonnkilomet", function() {deepEqual( Stem("tonnkilometer"), "tonnkilomet");});
test("tonnkm -> tonnkm", function() {deepEqual( Stem("tonnkm"), "tonnkm");});
test("tonnmengder -> tonnmengd", function() {deepEqual( Stem("tonnmengder"), "tonnmengd");});
test("top -> top", function() {deepEqual( Stem("top"), "top");});
test("toplanskrysset -> toplanskryss", function() {deepEqual( Stem("toplanskrysset"), "toplanskryss");});
test("topografiske -> topografisk", function() {deepEqual( Stem("topografiske"), "topografisk");});
test("topp -> topp", function() {deepEqual( Stem("topp"), "topp");});
test("toppen -> topp", function() {deepEqual( Stem("toppen"), "topp");});
test("topper -> topp", function() {deepEqual( Stem("topper"), "topp");});
test("topphastighet -> topphast", function() {deepEqual( Stem("topphastighet"), "topphast");});
test("toppskatt -> toppskatt", function() {deepEqual( Stem("toppskatt"), "toppskatt");});
test("tor -> tor", function() {deepEqual( Stem("tor"), "tor");});
test("torde -> tord", function() {deepEqual( Stem("torde"), "tord");});
test("torden -> tord", function() {deepEqual( Stem("torden"), "tord");});
test("tordengud -> tordengud", function() {deepEqual( Stem("tordengud"), "tordengud");});
test("tordenguden -> tordengud", function() {deepEqual( Stem("tordenguden"), "tordengud");});
test("tordenskrall -> tordenskrall", function() {deepEqual( Stem("tordenskrall"), "tordenskrall");});
test("tordner -> tordn", function() {deepEqual( Stem("tordner"), "tordn");});
test("tornehekk -> tornehekk", function() {deepEqual( Stem("tornehekk"), "tornehekk");});
test("tors -> tor", function() {deepEqual( Stem("tors"), "tor");});
test("torskeøynene -> torskeøyn", function() {deepEqual( Stem("torskeøynene"), "torskeøyn");});
test("torsønnene -> torsønn", function() {deepEqual( Stem("torsønnene"), "torsønn");});
test("toseksjonsregelen -> toseksjonsregel", function() {deepEqual( Stem("toseksjonsregelen"), "toseksjonsregel");});
test("tosk -> tosk", function() {deepEqual( Stem("tosk"), "tosk");});
test("tosken -> tosk", function() {deepEqual( Stem("tosken"), "tosk");});
test("tosporet -> tospor", function() {deepEqual( Stem("tosporet"), "tospor");});
test("total -> total", function() {deepEqual( Stem("total"), "total");});
test("totale -> total", function() {deepEqual( Stem("totale"), "total");});
test("totalkostnaden -> totalkostnad", function() {deepEqual( Stem("totalkostnaden"), "totalkostnad");});
test("totalkostnader -> totalkostnad", function() {deepEqual( Stem("totalkostnader"), "totalkostnad");});
test("totalløsninger -> totalløsning", function() {deepEqual( Stem("totalløsninger"), "totalløsning");});
test("totalmengde -> totalmengd", function() {deepEqual( Stem("totalmengde"), "totalmengd");});
test("totalpremien -> totalpremi", function() {deepEqual( Stem("totalpremien"), "totalpremi");});
test("totalskadd -> totalskadd", function() {deepEqual( Stem("totalskadd"), "totalskadd");});
test("totalskadde -> totalskadd", function() {deepEqual( Stem("totalskadde"), "totalskadd");});
test("totalskade -> totalskad", function() {deepEqual( Stem("totalskade"), "totalskad");});
test("totalt -> totalt", function() {deepEqual( Stem("totalt"), "totalt");});
test("totaltall -> totaltall", function() {deepEqual( Stem("totaltall"), "totaltall");});
test("totalvolumene -> totalvolum", function() {deepEqual( Stem("totalvolumene"), "totalvolum");});
test("towards -> toward", function() {deepEqual( Stem("towards"), "toward");});
test("toårsfristen -> toårsfrist", function() {deepEqual( Stem("toårsfristen"), "toårsfrist");});
test("toårsperiodar -> toårsperiod", function() {deepEqual( Stem("toårsperiodar"), "toårsperiod");});
test("toårsregelen -> toårsregel", function() {deepEqual( Stem("toårsregelen"), "toårsregel");});
test("tpes -> tpes", function() {deepEqual( Stem("tpes"), "tpes");});
test("trade -> trad", function() {deepEqual( Stem("trade"), "trad");});
test("tradisjon -> tradisjon", function() {deepEqual( Stem("tradisjon"), "tradisjon");});
test("tradisjonar -> tradisjon", function() {deepEqual( Stem("tradisjonar"), "tradisjon");});
test("tradisjonell -> tradisjonell", function() {deepEqual( Stem("tradisjonell"), "tradisjonell");});
test("tradisjonelle -> tradisjonell", function() {deepEqual( Stem("tradisjonelle"), "tradisjonell");});
test("tradisjonelt -> tradisjonelt", function() {deepEqual( Stem("tradisjonelt"), "tradisjonelt");});
test("tradisjonen -> tradisjon", function() {deepEqual( Stem("tradisjonen"), "tradisjon");});
test("traff -> traff", function() {deepEqual( Stem("traff"), "traff");});
test("trafikk -> trafikk", function() {deepEqual( Stem("trafikk"), "trafikk");});
test("trafikkavvikling -> trafikkavvikling", function() {deepEqual( Stem("trafikkavvikling"), "trafikkavvikling");});
test("trafikkavviklingen -> trafikkavvikling", function() {deepEqual( Stem("trafikkavviklingen"), "trafikkavvikling");});
test("trafikkavviklingsproblemer -> trafikkavviklingsproblem", function() {deepEqual( Stem("trafikkavviklingsproblemer"), "trafikkavviklingsproblem");});
test("trafikkbegrensninger -> trafikkbegrensning", function() {deepEqual( Stem("trafikkbegrensninger"), "trafikkbegrensning");});
test("trafikkbelastede -> trafikkbelast", function() {deepEqual( Stem("trafikkbelastede"), "trafikkbelast");});
test("trafikkbelastning -> trafikkbelastning", function() {deepEqual( Stem("trafikkbelastning"), "trafikkbelastning");});
test("trafikkbelastningen -> trafikkbelastning", function() {deepEqual( Stem("trafikkbelastningen"), "trafikkbelastning");});
test("trafikkbelastninger -> trafikkbelastning", function() {deepEqual( Stem("trafikkbelastninger"), "trafikkbelastning");});
test("trafikkbildet -> trafikkbild", function() {deepEqual( Stem("trafikkbildet"), "trafikkbild");});
test("trafikken -> trafikk", function() {deepEqual( Stem("trafikken"), "trafikk");});
test("trafikkens -> trafikk", function() {deepEqual( Stem("trafikkens"), "trafikk");});
test("trafikkerer -> trafikker", function() {deepEqual( Stem("trafikkerer"), "trafikker");});
test("trafikkert -> trafikker", function() {deepEqual( Stem("trafikkert"), "trafikker");});
test("trafikkerte -> trafikker", function() {deepEqual( Stem("trafikkerte"), "trafikker");});
test("trafikkfordeling -> trafikkfordeling", function() {deepEqual( Stem("trafikkfordeling"), "trafikkfordeling");});
test("trafikkgenererende -> trafikkgenerer", function() {deepEqual( Stem("trafikkgenererende"), "trafikkgenerer");});
test("trafikkhavn -> trafikkhavn", function() {deepEqual( Stem("trafikkhavn"), "trafikkhavn");});
test("trafikkhavneanlegg -> trafikkhavneanlegg", function() {deepEqual( Stem("trafikkhavneanlegg"), "trafikkhavneanlegg");});
test("trafikkhavnene -> trafikkhavn", function() {deepEqual( Stem("trafikkhavnene"), "trafikkhavn");});
test("trafikkhavner -> trafikkhavn", function() {deepEqual( Stem("trafikkhavner"), "trafikkhavn");});
test("trafikkhavnvirksomhet -> trafikkhavnvirksom", function() {deepEqual( Stem("trafikkhavnvirksomhet"), "trafikkhavnvirksom");});
test("trafikkløsning -> trafikkløsning", function() {deepEqual( Stem("trafikkløsning"), "trafikkløsning");});
test("trafikkmengde -> trafikkmengd", function() {deepEqual( Stem("trafikkmengde"), "trafikkmengd");});
test("trafikkmengder -> trafikkmengd", function() {deepEqual( Stem("trafikkmengder"), "trafikkmengd");});
test("trafikkmessig -> trafikkmess", function() {deepEqual( Stem("trafikkmessig"), "trafikkmess");});
test("trafikkmessige -> trafikkmess", function() {deepEqual( Stem("trafikkmessige"), "trafikkmess");});
test("trafikkmønster -> trafikkmønst", function() {deepEqual( Stem("trafikkmønster"), "trafikkmønst");});
test("trafikkmønsteret -> trafikkmønster", function() {deepEqual( Stem("trafikkmønsteret"), "trafikkmønster");});
test("trafikkoverskudd -> trafikkoverskudd", function() {deepEqual( Stem("trafikkoverskudd"), "trafikkoverskudd");});
test("trafikkproblemer -> trafikkproblem", function() {deepEqual( Stem("trafikkproblemer"), "trafikkproblem");});
test("trafikkregulerende -> trafikkreguler", function() {deepEqual( Stem("trafikkregulerende"), "trafikkreguler");});
test("trafikkreguleringer -> trafikkregulering", function() {deepEqual( Stem("trafikkreguleringer"), "trafikkregulering");});
test("trafikksentral -> trafikksentral", function() {deepEqual( Stem("trafikksentral"), "trafikksentral");});
test("trafikksentralen -> trafikksentral", function() {deepEqual( Stem("trafikksentralen"), "trafikksentral");});
test("trafikksentralene -> trafikksentral", function() {deepEqual( Stem("trafikksentralene"), "trafikksentral");});
test("trafikksentraler -> trafikksentral", function() {deepEqual( Stem("trafikksentraler"), "trafikksentral");});
test("trafikkseparasjonssystem -> trafikkseparasjonssystem", function() {deepEqual( Stem("trafikkseparasjonssystem"), "trafikkseparasjonssystem");});
test("trafikkseparasjonssytem -> trafikkseparasjonssytem", function() {deepEqual( Stem("trafikkseparasjonssytem"), "trafikkseparasjonssytem");});
test("trafikksikkerhet -> trafikksikker", function() {deepEqual( Stem("trafikksikkerhet"), "trafikksikker");});
test("trafikksituasjon -> trafikksituasjon", function() {deepEqual( Stem("trafikksituasjon"), "trafikksituasjon");});
test("trafikksituasjonen -> trafikksituasjon", function() {deepEqual( Stem("trafikksituasjonen"), "trafikksituasjon");});
test("trafikkstrømmer -> trafikkstrømm", function() {deepEqual( Stem("trafikkstrømmer"), "trafikkstrømm");});
test("trafikktellinger -> trafikktelling", function() {deepEqual( Stem("trafikktellinger"), "trafikktelling");});
test("trafikktetthet -> trafikktett", function() {deepEqual( Stem("trafikktetthet"), "trafikktett");});
test("trafikktettheten -> trafikktett", function() {deepEqual( Stem("trafikktettheten"), "trafikktett");});
test("trafikkutvikling -> trafikkutvikling", function() {deepEqual( Stem("trafikkutvikling"), "trafikkutvikling");});
test("trafikkutviklingen -> trafikkutvikling", function() {deepEqual( Stem("trafikkutviklingen"), "trafikkutvikling");});
test("trafikkvekst -> trafikkvekst", function() {deepEqual( Stem("trafikkvekst"), "trafikkvekst");});
test("trafikkveksten -> trafikkvekst", function() {deepEqual( Stem("trafikkveksten"), "trafikkvekst");});
test("trafikkvekstrater -> trafikkvekstrat", function() {deepEqual( Stem("trafikkvekstrater"), "trafikkvekstrat");});
test("trafikkvolumer -> trafikkvolum", function() {deepEqual( Stem("trafikkvolumer"), "trafikkvolum");});
test("trafikkvolumet -> trafikkvolum", function() {deepEqual( Stem("trafikkvolumet"), "trafikkvolum");});
test("trafikkvolums -> trafikkvolum", function() {deepEqual( Stem("trafikkvolums"), "trafikkvolum");});
test("trafikkøkning -> trafikkøkning", function() {deepEqual( Stem("trafikkøkning"), "trafikkøkning");});
test("trafikkøkninger -> trafikkøkning", function() {deepEqual( Stem("trafikkøkninger"), "trafikkøkning");});
test("trailer -> trail", function() {deepEqual( Stem("trailer"), "trail");});
test("trailere -> trailer", function() {deepEqual( Stem("trailere"), "trailer");});
test("trailerutstyr -> trailerutstyr", function() {deepEqual( Stem("trailerutstyr"), "trailerutstyr");});
test("traktaten -> traktat", function() {deepEqual( Stem("traktaten"), "traktat");});
test("traktatens -> traktat", function() {deepEqual( Stem("traktatens"), "traktat");});
test("traller -> trall", function() {deepEqual( Stem("traller"), "trall");});
test("trampe -> tramp", function() {deepEqual( Stem("trampe"), "tramp");});
test("trampende -> tramp", function() {deepEqual( Stem("trampende"), "tramp");});
test("tramper -> tramp", function() {deepEqual( Stem("tramper"), "tramp");});
test("trampet -> tramp", function() {deepEqual( Stem("trampet"), "tramp");});
test("trang -> trang", function() {deepEqual( Stem("trang"), "trang");});
test("trange -> trang", function() {deepEqual( Stem("trange"), "trang");});
test("trangt -> trangt", function() {deepEqual( Stem("trangt"), "trangt");});
test("tranportarbeidet -> tranportarbeid", function() {deepEqual( Stem("tranportarbeidet"), "tranportarbeid");});
test("trans -> tran", function() {deepEqual( Stem("trans"), "tran");});
test("transaksjon -> transaksjon", function() {deepEqual( Stem("transaksjon"), "transaksjon");});
test("transaksjonar -> transaksjon", function() {deepEqual( Stem("transaksjonar"), "transaksjon");});
test("transaksjonen -> transaksjon", function() {deepEqual( Stem("transaksjonen"), "transaksjon");});
test("transeuropeiske -> transeuropeisk", function() {deepEqual( Stem("transeuropeiske"), "transeuropeisk");});
test("transformering -> transformering", function() {deepEqual( Stem("transformering"), "transformering");});
test("transitt -> transitt", function() {deepEqual( Stem("transitt"), "transitt");});
test("transittcontainerne -> transittcontainern", function() {deepEqual( Stem("transittcontainerne"), "transittcontainern");});
test("transittgods -> transittgod", function() {deepEqual( Stem("transittgods"), "transittgod");});
test("transitthavn -> transitthavn", function() {deepEqual( Stem("transitthavn"), "transitthavn");});
test("transittlast -> transittl", function() {deepEqual( Stem("transittlast"), "transittl");});
test("transittrafikk -> transittrafikk", function() {deepEqual( Stem("transittrafikk"), "transittrafikk");});
test("transport -> transport", function() {deepEqual( Stem("transport"), "transport");});
test("transportalternativ -> transportalternativ", function() {deepEqual( Stem("transportalternativ"), "transportalternativ");});
test("transportarbeid -> transportarbeid", function() {deepEqual( Stem("transportarbeid"), "transportarbeid");});
test("transportarbeidet -> transportarbeid", function() {deepEqual( Stem("transportarbeidet"), "transportarbeid");});
test("transportavstand -> transportavstand", function() {deepEqual( Stem("transportavstand"), "transportavstand");});
test("transportavstander -> transportavstand", function() {deepEqual( Stem("transportavstander"), "transportavstand");});
test("transportavvikling -> transportavvikling", function() {deepEqual( Stem("transportavvikling"), "transportavvikling");});
test("transportbedriftene -> transportbedrift", function() {deepEqual( Stem("transportbedriftene"), "transportbedrift");});
test("transportbedrifter -> transportbedrift", function() {deepEqual( Stem("transportbedrifter"), "transportbedrift");});
test("transportbehov -> transportbehov", function() {deepEqual( Stem("transportbehov"), "transportbehov");});
test("transportbildet -> transportbild", function() {deepEqual( Stem("transportbildet"), "transportbild");});
test("transportbransjen -> transportbransj", function() {deepEqual( Stem("transportbransjen"), "transportbransj");});
test("transportbrukere -> transportbruker", function() {deepEqual( Stem("transportbrukere"), "transportbruker");});
test("transportbrukeren -> transportbruker", function() {deepEqual( Stem("transportbrukeren"), "transportbruker");});
test("transportbrukerne -> transportbrukern", function() {deepEqual( Stem("transportbrukerne"), "transportbrukern");});
test("transportbrukernes -> transportbrukern", function() {deepEqual( Stem("transportbrukernes"), "transportbrukern");});
test("transportbærere -> transportbærer", function() {deepEqual( Stem("transportbærere"), "transportbærer");});
test("transportdistanse -> transportdistans", function() {deepEqual( Stem("transportdistanse"), "transportdistans");});
test("transporten -> transport", function() {deepEqual( Stem("transporten"), "transport");});
test("transportene -> transport", function() {deepEqual( Stem("transportene"), "transport");});
test("transporter -> transport", function() {deepEqual( Stem("transporter"), "transport");});
test("transporterer -> transporter", function() {deepEqual( Stem("transporterer"), "transporter");});
test("transporteres -> transporter", function() {deepEqual( Stem("transporteres"), "transporter");});
test("transportert -> transporter", function() {deepEqual( Stem("transportert"), "transporter");});
test("transporterte -> transporter", function() {deepEqual( Stem("transporterte"), "transporter");});
test("transportetater -> transportetat", function() {deepEqual( Stem("transportetater"), "transportetat");});
test("transportetterspørsel -> transportetterspørsel", function() {deepEqual( Stem("transportetterspørsel"), "transportetterspørsel");});
test("transportfirmaer -> transportfirma", function() {deepEqual( Stem("transportfirmaer"), "transportfirma");});
test("transportform -> transportform", function() {deepEqual( Stem("transportform"), "transportform");});
test("transportformen -> transportform", function() {deepEqual( Stem("transportformen"), "transportform");});
test("transportformene -> transportform", function() {deepEqual( Stem("transportformene"), "transportform");});
test("transportformer -> transportform", function() {deepEqual( Stem("transportformer"), "transportform");});
test("transportinfrastruktur -> transportinfrastruktur", function() {deepEqual( Stem("transportinfrastruktur"), "transportinfrastruktur");});
test("transportkjeden -> transportkjed", function() {deepEqual( Stem("transportkjeden"), "transportkjed");});
test("transportkjeder -> transportkjed", function() {deepEqual( Stem("transportkjeder"), "transportkjed");});
test("transportkjøpere -> transportkjøper", function() {deepEqual( Stem("transportkjøpere"), "transportkjøper");});
test("transportkjøperne -> transportkjøpern", function() {deepEqual( Stem("transportkjøperne"), "transportkjøpern");});
test("transportkjøpernes -> transportkjøpern", function() {deepEqual( Stem("transportkjøpernes"), "transportkjøpern");});
test("transportknutepunkt -> transportknutepunkt", function() {deepEqual( Stem("transportknutepunkt"), "transportknutepunkt");});
test("transportkorridor -> transportkorridor", function() {deepEqual( Stem("transportkorridor"), "transportkorridor");});
test("transportkorridorene -> transportkorridor", function() {deepEqual( Stem("transportkorridorene"), "transportkorridor");});
test("transportkorridorer -> transportkorridor", function() {deepEqual( Stem("transportkorridorer"), "transportkorridor");});
test("transportkostnad -> transportkostnad", function() {deepEqual( Stem("transportkostnad"), "transportkostnad");});
test("transportkostnadene -> transportkostnad", function() {deepEqual( Stem("transportkostnadene"), "transportkostnad");});
test("transportkostnader -> transportkostnad", function() {deepEqual( Stem("transportkostnader"), "transportkostnad");});
test("transportkostnadsmessige -> transportkostnadsmess", function() {deepEqual( Stem("transportkostnadsmessige"), "transportkostnadsmess");});
test("transportkrevende -> transportkrev", function() {deepEqual( Stem("transportkrevende"), "transportkrev");});
test("transportkvalitet -> transportkvalit", function() {deepEqual( Stem("transportkvalitet"), "transportkvalit");});
test("transportkvaliteten -> transportkvalitet", function() {deepEqual( Stem("transportkvaliteten"), "transportkvalitet");});
test("transportleddene -> transportledd", function() {deepEqual( Stem("transportleddene"), "transportledd");});
test("transportleddet -> transportledd", function() {deepEqual( Stem("transportleddet"), "transportledd");});
test("transportlenker -> transportlenk", function() {deepEqual( Stem("transportlenker"), "transportlenk");});
test("transportlinkene -> transportlink", function() {deepEqual( Stem("transportlinkene"), "transportlink");});
test("transportløsning -> transportløsning", function() {deepEqual( Stem("transportløsning"), "transportløsning");});
test("transportløsningen -> transportløsning", function() {deepEqual( Stem("transportløsningen"), "transportløsning");});
test("transportløsningene -> transportløsning", function() {deepEqual( Stem("transportløsningene"), "transportløsning");});
test("transportløsninger -> transportløsning", function() {deepEqual( Stem("transportløsninger"), "transportløsning");});
test("transportmarkedet -> transportmarked", function() {deepEqual( Stem("transportmarkedet"), "transportmarked");});
test("transportmateriell -> transportmateriell", function() {deepEqual( Stem("transportmateriell"), "transportmateriell");});
test("transportmessig -> transportmess", function() {deepEqual( Stem("transportmessig"), "transportmess");});
test("transportmessige -> transportmess", function() {deepEqual( Stem("transportmessige"), "transportmess");});
test("transportmiddel -> transportmiddel", function() {deepEqual( Stem("transportmiddel"), "transportmiddel");});
test("transportmiddelfordelingen -> transportmiddelfordeling", function() {deepEqual( Stem("transportmiddelfordelingen"), "transportmiddelfordeling");});
test("transportmidlene -> transportmidl", function() {deepEqual( Stem("transportmidlene"), "transportmidl");});
test("transportmidler -> transportmidl", function() {deepEqual( Stem("transportmidler"), "transportmidl");});
test("transportmåte -> transportmåt", function() {deepEqual( Stem("transportmåte"), "transportmåt");});
test("transportmåter -> transportmåt", function() {deepEqual( Stem("transportmåter"), "transportmåt");});
test("transportmønstre -> transportmønstr", function() {deepEqual( Stem("transportmønstre"), "transportmønstr");});
test("transportmønstrene -> transportmønstr", function() {deepEqual( Stem("transportmønstrene"), "transportmønstr");});
test("transportnett -> transportnett", function() {deepEqual( Stem("transportnett"), "transportnett");});
test("transportnettet -> transportnett", function() {deepEqual( Stem("transportnettet"), "transportnett");});
test("transportnettverket -> transportnettverk", function() {deepEqual( Stem("transportnettverket"), "transportnettverk");});
test("transportomfang -> transportomfang", function() {deepEqual( Stem("transportomfang"), "transportomfang");});
test("transportoppgaver -> transportoppgav", function() {deepEqual( Stem("transportoppgaver"), "transportoppgav");});
test("transportopplegg -> transportopplegg", function() {deepEqual( Stem("transportopplegg"), "transportopplegg");});
test("transportorganisering -> transportorganisering", function() {deepEqual( Stem("transportorganisering"), "transportorganisering");});
test("transportperspektiv -> transportperspektiv", function() {deepEqual( Stem("transportperspektiv"), "transportperspektiv");});
test("transportplan -> transportplan", function() {deepEqual( Stem("transportplan"), "transportplan");});
test("transportplanen -> transportplan", function() {deepEqual( Stem("transportplanen"), "transportplan");});
test("transportplanlegging -> transportplanlegging", function() {deepEqual( Stem("transportplanlegging"), "transportplanlegging");});
test("transportpolitikken -> transportpolitikk", function() {deepEqual( Stem("transportpolitikken"), "transportpolitikk");});
test("transportpris -> transportpris", function() {deepEqual( Stem("transportpris"), "transportpris");});
test("transportprosjekter -> transportprosjekt", function() {deepEqual( Stem("transportprosjekter"), "transportprosjekt");});
test("transportrelaterte -> transportrelater", function() {deepEqual( Stem("transportrelaterte"), "transportrelater");});
test("transportruten -> transportrut", function() {deepEqual( Stem("transportruten"), "transportrut");});
test("transportsammenheng -> transportsammenheng", function() {deepEqual( Stem("transportsammenheng"), "transportsammenheng");});
test("transportsektoren -> transportsektor", function() {deepEqual( Stem("transportsektoren"), "transportsektor");});
test("transportsektorene -> transportsektor", function() {deepEqual( Stem("transportsektorene"), "transportsektor");});
test("transportselskapene -> transportselskap", function() {deepEqual( Stem("transportselskapene"), "transportselskap");});
test("transportselskaper -> transportselskap", function() {deepEqual( Stem("transportselskaper"), "transportselskap");});
test("transportstrømmene -> transportstrømm", function() {deepEqual( Stem("transportstrømmene"), "transportstrømm");});
test("transportstrømmer -> transportstrømm", function() {deepEqual( Stem("transportstrømmer"), "transportstrømm");});
test("transportsystem -> transportsystem", function() {deepEqual( Stem("transportsystem"), "transportsystem");});
test("transportsystemer -> transportsystem", function() {deepEqual( Stem("transportsystemer"), "transportsystem");});
test("transportsystemers -> transportsystem", function() {deepEqual( Stem("transportsystemers"), "transportsystem");});
test("transportsystemet -> transportsystem", function() {deepEqual( Stem("transportsystemet"), "transportsystem");});
test("transportsystemets -> transportsystem", function() {deepEqual( Stem("transportsystemets"), "transportsystem");});
test("transporttilbud -> transporttilbud", function() {deepEqual( Stem("transporttilbud"), "transporttilbud");});
test("transporttjeneste -> transporttjenest", function() {deepEqual( Stem("transporttjeneste"), "transporttjenest");});
test("transporttjenester -> transporttjenest", function() {deepEqual( Stem("transporttjenester"), "transporttjenest");});
test("transportutviklingen -> transportutvikling", function() {deepEqual( Stem("transportutviklingen"), "transportutvikling");});
test("transportveg -> transportveg", function() {deepEqual( Stem("transportveg"), "transportveg");});
test("transportvirksomhet -> transportvirksom", function() {deepEqual( Stem("transportvirksomhet"), "transportvirksom");});
test("transportvirksomheter -> transportvirksom", function() {deepEqual( Stem("transportvirksomheter"), "transportvirksom");});
test("transportvolumer -> transportvolum", function() {deepEqual( Stem("transportvolumer"), "transportvolum");});
test("transportårene -> transportår", function() {deepEqual( Stem("transportårene"), "transportår");});
test("transportøkonomi -> transportøkonomi", function() {deepEqual( Stem("transportøkonomi"), "transportøkonomi");});
test("transportøkonomisk -> transportøkonomisk", function() {deepEqual( Stem("transportøkonomisk"), "transportøkonomisk");});
test("transportørene -> transportør", function() {deepEqual( Stem("transportørene"), "transportør");});
test("transportørenes -> transportør", function() {deepEqual( Stem("transportørenes"), "transportør");});
test("transportørens -> transportør", function() {deepEqual( Stem("transportørens"), "transportør");});
test("transportører -> transportør", function() {deepEqual( Stem("transportører"), "transportør");});
test("trappes -> trapp", function() {deepEqual( Stem("trappes"), "trapp");});
test("trase -> tras", function() {deepEqual( Stem("trase"), "tras");});
test("trasket -> trask", function() {deepEqual( Stem("trasket"), "trask");});
test("trass -> trass", function() {deepEqual( Stem("trass"), "trass");});
test("trassen -> trass", function() {deepEqual( Stem("trassen"), "trass");});
test("trassig -> trass", function() {deepEqual( Stem("trassig"), "trass");});
test("trau -> trau", function() {deepEqual( Stem("trau"), "trau");});
test("trauet -> trauet", function() {deepEqual( Stem("trauet"), "trauet");});
test("travemunde -> travemund", function() {deepEqual( Stem("travemunde"), "travemund");});
test("travle -> travl", function() {deepEqual( Stem("travle"), "travl");});
test("tre -> tre", function() {deepEqual( Stem("tre"), "tre");});
test("tredel -> tredel", function() {deepEqual( Stem("tredel"), "tredel");});
test("tredelar -> tredel", function() {deepEqual( Stem("tredelar"), "tredel");});
test("tredeler -> tredel", function() {deepEqual( Stem("tredeler"), "tredel");});
test("tredeling -> tredeling", function() {deepEqual( Stem("tredeling"), "tredeling");});
test("tredels -> tredel", function() {deepEqual( Stem("tredels"), "tredel");});
test("tredje -> tredj", function() {deepEqual( Stem("tredje"), "tredj");});
test("tredjedel -> tredjedel", function() {deepEqual( Stem("tredjedel"), "tredjedel");});
test("tredjedelen -> tredjedel", function() {deepEqual( Stem("tredjedelen"), "tredjedel");});
test("tredjedeler -> tredjedel", function() {deepEqual( Stem("tredjedeler"), "tredjedel");});
test("tredjedels -> tredjedel", function() {deepEqual( Stem("tredjedels"), "tredjedel");});
test("tredjemann -> tredjemann", function() {deepEqual( Stem("tredjemann"), "tredjemann");});
test("tredjemenn -> tredjemenn", function() {deepEqual( Stem("tredjemenn"), "tredjemenn");});
test("tredjeparten -> tredjepart", function() {deepEqual( Stem("tredjeparten"), "tredjepart");});
test("tredjeperson -> tredjeperson", function() {deepEqual( Stem("tredjeperson"), "tredjeperson");});
test("tredjepersonen -> tredjeperson", function() {deepEqual( Stem("tredjepersonen"), "tredjeperson");});
test("tredjepersons -> tredjeperson", function() {deepEqual( Stem("tredjepersons"), "tredjeperson");});
test("tredoblet -> tredobl", function() {deepEqual( Stem("tredoblet"), "tredobl");});
test("treet -> treet", function() {deepEqual( Stem("treet"), "treet");});
test("treffande -> treff", function() {deepEqual( Stem("treffande"), "treff");});
test("treffe -> treff", function() {deepEqual( Stem("treffe"), "treff");});
test("treffende -> treff", function() {deepEqual( Stem("treffende"), "treff");});
test("treffer -> treff", function() {deepEqual( Stem("treffer"), "treff");});
test("treffes -> treff", function() {deepEqual( Stem("treffes"), "treff");});
test("trefigurer -> trefigur", function() {deepEqual( Stem("trefigurer"), "trefigur");});
test("trefork -> trefork", function() {deepEqual( Stem("trefork"), "trefork");});
test("tregere -> treger", function() {deepEqual( Stem("tregere"), "treger");});
test("trekk -> trekk", function() {deepEqual( Stem("trekk"), "trekk");});
test("trekke -> trekk", function() {deepEqual( Stem("trekke"), "trekk");});
test("trekker -> trekk", function() {deepEqual( Stem("trekker"), "trekk");});
test("trekkes -> trekk", function() {deepEqual( Stem("trekkes"), "trekk");});
test("trekkjast -> trekkj", function() {deepEqual( Stem("trekkjast"), "trekkj");});
test("trekkje -> trekkj", function() {deepEqual( Stem("trekkje"), "trekkj");});
test("trekkjer -> trekkj", function() {deepEqual( Stem("trekkjer"), "trekkj");});
test("trekkvogn -> trekkvogn", function() {deepEqual( Stem("trekkvogn"), "trekkvogn");});
test("trekte -> trekt", function() {deepEqual( Stem("trekte"), "trekt");});
test("trelast -> trel", function() {deepEqual( Stem("trelast"), "trel");});
test("trelemmer -> trelemm", function() {deepEqual( Stem("trelemmer"), "trelemm");});
test("trell -> trell", function() {deepEqual( Stem("trell"), "trell");});
test("trellene -> trell", function() {deepEqual( Stem("trellene"), "trell");});
test("treller -> trell", function() {deepEqual( Stem("treller"), "trell");});
test("trellkvinnene -> trellkvinn", function() {deepEqual( Stem("trellkvinnene"), "trellkvinn");});
test("trellkvinner -> trellkvinn", function() {deepEqual( Stem("trellkvinner"), "trellkvinn");});
test("tremasse -> tremass", function() {deepEqual( Stem("tremasse"), "tremass");});
test("trend -> trend", function() {deepEqual( Stem("trend"), "trend");});
test("trenden -> trend", function() {deepEqual( Stem("trenden"), "trend");});
test("trender -> trend", function() {deepEqual( Stem("trender"), "trend");});
test("trendmessig -> trendmess", function() {deepEqual( Stem("trendmessig"), "trendmess");});
test("trendmessige -> trendmess", function() {deepEqual( Stem("trendmessige"), "trendmess");});
test("trends -> trend", function() {deepEqual( Stem("trends"), "trend");});
test("trener -> tren", function() {deepEqual( Stem("trener"), "tren");});
test("trenere -> trener", function() {deepEqual( Stem("trenere"), "trener");});
test("trenet -> tren", function() {deepEqual( Stem("trenet"), "tren");});
test("treng -> treng", function() {deepEqual( Stem("treng"), "treng");});
test("trenge -> treng", function() {deepEqual( Stem("trenge"), "treng");});
test("trenger -> treng", function() {deepEqual( Stem("trenger"), "treng");});
test("trengje -> trengj", function() {deepEqual( Stem("trengje"), "trengj");});
test("trengs -> treng", function() {deepEqual( Stem("trengs"), "treng");});
test("trengst -> trengst", function() {deepEqual( Stem("trengst"), "trengst");});
test("trengt -> trengt", function() {deepEqual( Stem("trengt"), "trengt");});
test("trengte -> trengt", function() {deepEqual( Stem("trengte"), "trengt");});
test("trening -> trening", function() {deepEqual( Stem("trening"), "trening");});
test("trepunktsløsning -> trepunktsløsning", function() {deepEqual( Stem("trepunktsløsning"), "trepunktsløsning");});
test("trer -> trer", function() {deepEqual( Stem("trer"), "trer");});
test("trerot -> trerot", function() {deepEqual( Stem("trerot"), "trerot");});
test("tresleiv -> tresleiv", function() {deepEqual( Stem("tresleiv"), "tresleiv");});
test("trestammen -> trestamm", function() {deepEqual( Stem("trestammen"), "trestamm");});
test("trestammer -> trestamm", function() {deepEqual( Stem("trestammer"), "trestamm");});
test("trestokkene -> trestokk", function() {deepEqual( Stem("trestokkene"), "trestokk");});
test("trestokker -> trestokk", function() {deepEqual( Stem("trestokker"), "trestokk");});
test("tretoppene -> tretopp", function() {deepEqual( Stem("tretoppene"), "tretopp");});
test("trett -> trett", function() {deepEqual( Stem("trett"), "trett");});
test("trette -> trett", function() {deepEqual( Stem("trette"), "trett");});
test("tretti -> tretti", function() {deepEqual( Stem("tretti"), "tretti");});
test("trettiårsregelen -> trettiårsregel", function() {deepEqual( Stem("trettiårsregelen"), "trettiårsregel");});
test("triangel -> triangel", function() {deepEqual( Stem("triangel"), "triangel");});
test("triller -> trill", function() {deepEqual( Stem("triller"), "trill");});
test("trimrommet -> trimromm", function() {deepEqual( Stem("trimrommet"), "trimromm");});
test("trinn -> trinn", function() {deepEqual( Stem("trinn"), "trinn");});
test("trinnene -> trinn", function() {deepEqual( Stem("trinnene"), "trinn");});
test("trinns -> trinn", function() {deepEqual( Stem("trinns"), "trinn");});
test("trist -> trist", function() {deepEqual( Stem("trist"), "trist");});
test("trives -> triv", function() {deepEqual( Stem("trives"), "triv");});
test("trivielt -> trivielt", function() {deepEqual( Stem("trivielt"), "trivielt");});
test("trivsel -> trivsel", function() {deepEqual( Stem("trivsel"), "trivsel");});
test("trivst -> trivst", function() {deepEqual( Stem("trivst"), "trivst");});
test("tro -> tro", function() {deepEqual( Stem("tro"), "tro");});
test("trodd -> trodd", function() {deepEqual( Stem("trodd"), "trodd");});
test("trodde -> trodd", function() {deepEqual( Stem("trodde"), "trodd");});
test("trofast -> trof", function() {deepEqual( Stem("trofast"), "trof");});
test("trofaste -> trofast", function() {deepEqual( Stem("trofaste"), "trofast");});
test("trolig -> trol", function() {deepEqual( Stem("trolig"), "trol");});
test("troll -> troll", function() {deepEqual( Stem("troll"), "troll");});
test("trollborg -> trollborg", function() {deepEqual( Stem("trollborg"), "trollborg");});
test("trollborgen -> trollborg", function() {deepEqual( Stem("trollborgen"), "trollborg");});
test("trolldom -> trolldom", function() {deepEqual( Stem("trolldom"), "trolldom");});
test("trolldomskunster -> trolldomskunst", function() {deepEqual( Stem("trolldomskunster"), "trolldomskunst");});
test("trollene -> troll", function() {deepEqual( Stem("trollene"), "troll");});
test("trollet -> troll", function() {deepEqual( Stem("trollet"), "troll");});
test("trolljenter -> trolljent", function() {deepEqual( Stem("trolljenter"), "trolljent");});
test("trolljern -> trolljern", function() {deepEqual( Stem("trolljern"), "trolljern");});
test("trollkjerring -> trollkjerring", function() {deepEqual( Stem("trollkjerring"), "trollkjerring");});
test("trollkjerringer -> trollkjerring", function() {deepEqual( Stem("trollkjerringer"), "trollkjerring");});
test("trollkongen -> trollkong", function() {deepEqual( Stem("trollkongen"), "trollkong");});
test("trollkvinne -> trollkvinn", function() {deepEqual( Stem("trollkvinne"), "trollkvinn");});
test("trollkvinnen -> trollkvinn", function() {deepEqual( Stem("trollkvinnen"), "trollkvinn");});
test("trollmann -> trollmann", function() {deepEqual( Stem("trollmann"), "trollmann");});
test("trollskog -> trollskog", function() {deepEqual( Stem("trollskog"), "trollskog");});
test("trollslekten -> trollslekt", function() {deepEqual( Stem("trollslekten"), "trollslekt");});
test("tromsø -> tromsø", function() {deepEqual( Stem("tromsø"), "tromsø");});
test("trond -> trond", function() {deepEqual( Stem("trond"), "trond");});
test("trondheim -> trondheim", function() {deepEqual( Stem("trondheim"), "trondheim");});
test("tronen -> tron", function() {deepEqual( Stem("tronen"), "tron");});
test("troner -> tron", function() {deepEqual( Stem("troner"), "tron");});
test("trongare -> trongar", function() {deepEqual( Stem("trongare"), "trongar");});
test("trongst -> trongst", function() {deepEqual( Stem("trongst"), "trongst");});
test("tronstolen -> tronstol", function() {deepEqual( Stem("tronstolen"), "tronstol");});
test("tror -> tror", function() {deepEqual( Stem("tror"), "tror");});
test("troskap -> troskap", function() {deepEqual( Stem("troskap"), "troskap");});
test("troskaps -> troskap", function() {deepEqual( Stem("troskaps"), "troskap");});
test("troskyldig -> troskyld", function() {deepEqual( Stem("troskyldig"), "troskyld");});
test("troskyldighet -> troskyld", function() {deepEqual( Stem("troskyldighet"), "troskyld");});
test("tross -> tross", function() {deepEqual( Stem("tross"), "tross");});
test("trosser -> tross", function() {deepEqual( Stem("trosser"), "tross");});
test("troverdigheten -> troverd", function() {deepEqual( Stem("troverdigheten"), "troverd");});
test("tru -> tru", function() {deepEqual( Stem("tru"), "tru");});
test("trucker -> truck", function() {deepEqual( Stem("trucker"), "truck");});
test("trud -> trud", function() {deepEqual( Stem("trud"), "trud");});
test("trudvang -> trudvang", function() {deepEqual( Stem("trudvang"), "trudvang");});
test("true -> true", function() {deepEqual( Stem("true"), "true");});
test("truende -> truend", function() {deepEqual( Stem("truende"), "truend");});
test("truer -> truer", function() {deepEqual( Stem("truer"), "truer");});
test("truet -> truet", function() {deepEqual( Stem("truet"), "truet");});
test("truffet -> truff", function() {deepEqual( Stem("truffet"), "truff");});
test("trukket -> trukk", function() {deepEqual( Stem("trukket"), "trukk");});
test("truleg -> truleg", function() {deepEqual( Stem("truleg"), "truleg");});
test("trur -> trur", function() {deepEqual( Stem("trur"), "trur");});
test("trusler -> trusl", function() {deepEqual( Stem("trusler"), "trusl");});
test("trutt -> trutt", function() {deepEqual( Stem("trutt"), "trutt");});
test("truvedkjenning -> truvedkjenning", function() {deepEqual( Stem("truvedkjenning"), "truvedkjenning");});
test("truverdet -> truverd", function() {deepEqual( Stem("truverdet"), "truverd");});
test("trygd -> trygd", function() {deepEqual( Stem("trygd"), "trygd");});
test("trygda -> trygd", function() {deepEqual( Stem("trygda"), "trygd");});
test("trygdeavgift -> trygdeavgift", function() {deepEqual( Stem("trygdeavgift"), "trygdeavgift");});
test("trygdeavgiften -> trygdeavgift", function() {deepEqual( Stem("trygdeavgiften"), "trygdeavgift");});
test("trygdeetatens -> trygdeetat", function() {deepEqual( Stem("trygdeetatens"), "trygdeetat");});
test("trygdens -> trygd", function() {deepEqual( Stem("trygdens"), "trygd");});
test("trygdeordninger -> trygdeordning", function() {deepEqual( Stem("trygdeordninger"), "trygdeordning");});
test("trygdesystemet -> trygdesystem", function() {deepEqual( Stem("trygdesystemet"), "trygdesystem");});
test("trygdet -> trygd", function() {deepEqual( Stem("trygdet"), "trygd");});
test("trygdgjeving -> trygdgjeving", function() {deepEqual( Stem("trygdgjeving"), "trygdgjeving");});
test("trygdgjevinga -> trygdgjeving", function() {deepEqual( Stem("trygdgjevinga"), "trygdgjeving");});
test("trygg -> trygg", function() {deepEqual( Stem("trygg"), "trygg");});
test("tryggare -> tryggar", function() {deepEqual( Stem("tryggare"), "tryggar");});
test("trygge -> trygg", function() {deepEqual( Stem("trygge"), "trygg");});
test("tryggeste -> tryggest", function() {deepEqual( Stem("tryggeste"), "tryggest");});
test("tryggingsventilen -> tryggingsventil", function() {deepEqual( Stem("tryggingsventilen"), "tryggingsventil");});
test("tryggleik -> tryggleik", function() {deepEqual( Stem("tryggleik"), "tryggleik");});
test("trygt -> trygt", function() {deepEqual( Stem("trygt"), "trygt");});
test("trykker -> trykk", function() {deepEqual( Stem("trykker"), "trykk");});
test("trykkjer -> trykkj", function() {deepEqual( Stem("trykkjer"), "trykkj");});
test("trykte -> trykt", function() {deepEqual( Stem("trykte"), "trykt");});
test("trylleord -> trylleord", function() {deepEqual( Stem("trylleord"), "trylleord");});
test("tryller -> tryll", function() {deepEqual( Stem("tryller"), "tryll");});
test("tryllesangene -> tryllesang", function() {deepEqual( Stem("tryllesangene"), "tryllesang");});
test("tryllesanger -> tryllesang", function() {deepEqual( Stem("tryllesanger"), "tryllesang");});
test("tryllesøvn -> tryllesøvn", function() {deepEqual( Stem("tryllesøvn"), "tryllesøvn");});
test("tryllevers -> tryllev", function() {deepEqual( Stem("tryllevers"), "tryllev");});
test("trym -> trym", function() {deepEqual( Stem("trym"), "trym");});
test("trymheim -> trymheim", function() {deepEqual( Stem("trymheim"), "trymheim");});
test("tryms -> trym", function() {deepEqual( Stem("tryms"), "trym");});
test("trymsheim -> trymsheim", function() {deepEqual( Stem("trymsheim"), "trymsheim");});
test("trå -> trå", function() {deepEqual( Stem("trå"), "trå");});
test("tråd -> tråd", function() {deepEqual( Stem("tråd"), "tråd");});
test("tråder -> tråd", function() {deepEqual( Stem("tråder"), "tråd");});
test("trådt -> trådt", function() {deepEqual( Stem("trådt"), "trådt");});
test("trådte -> trådt", function() {deepEqual( Stem("trådte"), "trådt");});
test("trær -> trær", function() {deepEqual( Stem("trær"), "trær");});
test("trærne -> trærn", function() {deepEqual( Stem("trærne"), "trærn");});
test("trøndelag -> trøndelag", function() {deepEqual( Stem("trøndelag"), "trøndelag");});
test("trør -> trør", function() {deepEqual( Stem("trør"), "trør");});
test("trøst -> trøst", function() {deepEqual( Stem("trøst"), "trøst");});
test("trøste -> trøst", function() {deepEqual( Stem("trøste"), "trøst");});
test("trøster -> trøst", function() {deepEqual( Stem("trøster"), "trøst");});
test("tu -> tu", function() {deepEqual( Stem("tu"), "tu");});
test("tumler -> tuml", function() {deepEqual( Stem("tumler"), "tuml");});
test("tummelumsk -> tummelumsk", function() {deepEqual( Stem("tummelumsk"), "tummelumsk");});
test("tunet -> tun", function() {deepEqual( Stem("tunet"), "tun");});
test("tung -> tung", function() {deepEqual( Stem("tung"), "tung");});
test("tunge -> tung", function() {deepEqual( Stem("tunge"), "tung");});
test("tungen -> tung", function() {deepEqual( Stem("tungen"), "tung");});
test("tunger -> tung", function() {deepEqual( Stem("tunger"), "tung");});
test("tungt -> tungt", function() {deepEqual( Stem("tungt"), "tungt");});
test("tungtrafikk -> tungtrafikk", function() {deepEqual( Stem("tungtrafikk"), "tungtrafikk");});
test("tungtrafikken -> tungtrafikk", function() {deepEqual( Stem("tungtrafikken"), "tungtrafikk");});
test("tungtrafikkens -> tungtrafikk", function() {deepEqual( Stem("tungtrafikkens"), "tungtrafikk");});
test("tungtransport -> tungtransport", function() {deepEqual( Stem("tungtransport"), "tungtransport");});
test("tungtransportbil -> tungtransportbil", function() {deepEqual( Stem("tungtransportbil"), "tungtransportbil");});
test("tungtransporten -> tungtransport", function() {deepEqual( Stem("tungtransporten"), "tungtransport");});
test("tungtvegande -> tungtveg", function() {deepEqual( Stem("tungtvegande"), "tungtveg");});
test("tungvint -> tungvint", function() {deepEqual( Stem("tungvint"), "tungvint");});
test("tunnel -> tunnel", function() {deepEqual( Stem("tunnel"), "tunnel");});
test("tunnelen -> tunnel", function() {deepEqual( Stem("tunnelen"), "tunnel");});
test("tunneler -> tunnel", function() {deepEqual( Stem("tunneler"), "tunnel");});
test("tunnelgjennomføring -> tunnelgjennomføring", function() {deepEqual( Stem("tunnelgjennomføring"), "tunnelgjennomføring");});
test("tunnelløsning -> tunnelløsning", function() {deepEqual( Stem("tunnelløsning"), "tunnelløsning");});
test("tuntre -> tuntr", function() {deepEqual( Stem("tuntre"), "tuntr");});
test("tuntreet -> tuntre", function() {deepEqual( Stem("tuntreet"), "tuntre");});
test("tur -> tur", function() {deepEqual( Stem("tur"), "tur");});
test("ture -> tur", function() {deepEqual( Stem("ture"), "tur");});
test("tusen -> tus", function() {deepEqual( Stem("tusen"), "tus");});
test("tusener -> tusen", function() {deepEqual( Stem("tusener"), "tusen");});
test("tusenvis -> tusenvis", function() {deepEqual( Stem("tusenvis"), "tusenvis");});
test("tusler -> tusl", function() {deepEqual( Stem("tusler"), "tusl");});
test("tussefolkets -> tussefolk", function() {deepEqual( Stem("tussefolkets"), "tussefolk");});
test("tussekongen -> tussekong", function() {deepEqual( Stem("tussekongen"), "tussekong");});
test("tussekonger -> tussekong", function() {deepEqual( Stem("tussekonger"), "tussekong");});
test("tusser -> tuss", function() {deepEqual( Stem("tusser"), "tuss");});
test("tussete -> tusset", function() {deepEqual( Stem("tussete"), "tusset");});
test("tuter -> tut", function() {deepEqual( Stem("tuter"), "tut");});
test("tv -> tv", function() {deepEqual( Stem("tv"), "tv");});
test("tvang -> tvang", function() {deepEqual( Stem("tvang"), "tvang");});
test("tvangsakkord -> tvangsakkord", function() {deepEqual( Stem("tvangsakkord"), "tvangsakkord");});
test("tvangsbruk -> tvangsbruk", function() {deepEqual( Stem("tvangsbruk"), "tvangsbruk");});
test("tvangsdekning -> tvangsdekning", function() {deepEqual( Stem("tvangsdekning"), "tvangsdekning");});
test("tvangsdekningen -> tvangsdekning", function() {deepEqual( Stem("tvangsdekningen"), "tvangsdekning");});
test("tvangsfråviking -> tvangsfråviking", function() {deepEqual( Stem("tvangsfråviking"), "tvangsfråviking");});
test("tvangsfullbyrdelse -> tvangsfullbyrd", function() {deepEqual( Stem("tvangsfullbyrdelse"), "tvangsfullbyrd");});
test("tvangsfullføring -> tvangsfullføring", function() {deepEqual( Stem("tvangsfullføring"), "tvangsfullføring");});
test("tvangsfullføringslova -> tvangsfullføring", function() {deepEqual( Stem("tvangsfullføringslova"), "tvangsfullføring");});
test("tvangsfullført -> tvangsfullført", function() {deepEqual( Stem("tvangsfullført"), "tvangsfullført");});
test("tvangsgrunnlaga -> tvangsgrunnlag", function() {deepEqual( Stem("tvangsgrunnlaga"), "tvangsgrunnlag");});
test("tvangsinndrivelse -> tvangsinndriv", function() {deepEqual( Stem("tvangsinndrivelse"), "tvangsinndriv");});
test("tvangsl -> tvangsl", function() {deepEqual( Stem("tvangsl"), "tvangsl");});
test("tvangslova -> tvang", function() {deepEqual( Stem("tvangslova"), "tvang");});
test("tvangsmiddel -> tvangsmiddel", function() {deepEqual( Stem("tvangsmiddel"), "tvangsmiddel");});
test("tvangsmulkt -> tvangsmulkt", function() {deepEqual( Stem("tvangsmulkt"), "tvangsmulkt");});
test("tvangssal -> tvangssal", function() {deepEqual( Stem("tvangssal"), "tvangssal");});
test("tvangssalet -> tvangssal", function() {deepEqual( Stem("tvangssalet"), "tvangssal");});
test("tvangssalg -> tvangssalg", function() {deepEqual( Stem("tvangssalg"), "tvangssalg");});
test("tvangsseld -> tvangsseld", function() {deepEqual( Stem("tvangsseld"), "tvangsseld");});
test("tvangsseljast -> tvangsselj", function() {deepEqual( Stem("tvangsseljast"), "tvangsselj");});
test("tvekamp -> tvekamp", function() {deepEqual( Stem("tvekamp"), "tvekamp");});
test("tvekampen -> tvekamp", function() {deepEqual( Stem("tvekampen"), "tvekamp");});
test("tverrbjelken -> tverrbjelk", function() {deepEqual( Stem("tverrbjelken"), "tverrbjelk");});
test("tverrgående -> tverrgå", function() {deepEqual( Stem("tverrgående"), "tverrgå");});
test("tverrpolitisk -> tverrpolitisk", function() {deepEqual( Stem("tverrpolitisk"), "tverrpolitisk");});
test("tverrsektoriell -> tverrsektoriell", function() {deepEqual( Stem("tverrsektoriell"), "tverrsektoriell");});
test("tvers -> tver", function() {deepEqual( Stem("tvers"), "tver");});
test("tvert -> tvert", function() {deepEqual( Stem("tvert"), "tvert");});
test("tvertimot -> tvertimot", function() {deepEqual( Stem("tvertimot"), "tvertimot");});
test("tvi -> tvi", function() {deepEqual( Stem("tvi"), "tvi");});
test("tvil -> tvil", function() {deepEqual( Stem("tvil"), "tvil");});
test("tvilande -> tvil", function() {deepEqual( Stem("tvilande"), "tvil");});
test("tvile -> tvil", function() {deepEqual( Stem("tvile"), "tvil");});
test("tvilen -> tvil", function() {deepEqual( Stem("tvilen"), "tvil");});
test("tvilende -> tvil", function() {deepEqual( Stem("tvilende"), "tvil");});
test("tviler -> tvil", function() {deepEqual( Stem("tviler"), "tvil");});
test("tvilsamt -> tvilsamt", function() {deepEqual( Stem("tvilsamt"), "tvilsamt");});
test("tvilsomt -> tvilsomt", function() {deepEqual( Stem("tvilsomt"), "tvilsomt");});
test("tvilsspørsmål -> tvilsspørsmål", function() {deepEqual( Stem("tvilsspørsmål"), "tvilsspørsmål");});
test("tvilsspørsmåla -> tvilsspørsmål", function() {deepEqual( Stem("tvilsspørsmåla"), "tvilsspørsmål");});
test("tvilstilfelle -> tvilstilfell", function() {deepEqual( Stem("tvilstilfelle"), "tvilstilfell");});
test("tvinge -> tving", function() {deepEqual( Stem("tvinge"), "tving");});
test("tvinger -> tving", function() {deepEqual( Stem("tvinger"), "tving");});
test("tvinges -> tving", function() {deepEqual( Stem("tvinges"), "tving");});
test("tvist -> tvist", function() {deepEqual( Stem("tvist"), "tvist");});
test("tvistane -> tvist", function() {deepEqual( Stem("tvistane"), "tvist");});
test("tvistar -> tvist", function() {deepEqual( Stem("tvistar"), "tvist");});
test("tvisteløysing -> tvisteløysing", function() {deepEqual( Stem("tvisteløysing"), "tvisteløysing");});
test("tvisteløysingsorgan -> tvisteløysingsorgan", function() {deepEqual( Stem("tvisteløysingsorgan"), "tvisteløysingsorgan");});
test("tvistemål -> tvistemål", function() {deepEqual( Stem("tvistemål"), "tvistemål");});
test("tvistemålslov -> tvistemål", function() {deepEqual( Stem("tvistemålslov"), "tvistemål");});
test("tvistemålslova -> tvistemål", function() {deepEqual( Stem("tvistemålslova"), "tvistemål");});
test("tvisten -> tvist", function() {deepEqual( Stem("tvisten"), "tvist");});
test("tvungen -> tvung", function() {deepEqual( Stem("tvungen"), "tvung");});
test("tvunget -> tvung", function() {deepEqual( Stem("tvunget"), "tvung");});
test("twenty -> twenty", function() {deepEqual( Stem("twenty"), "twenty");});
test("tyde -> tyd", function() {deepEqual( Stem("tyde"), "tyd");});
test("tydeleg -> tyd", function() {deepEqual( Stem("tydeleg"), "tyd");});
test("tydelig -> tyd", function() {deepEqual( Stem("tydelig"), "tyd");});
test("tydelige -> tyd", function() {deepEqual( Stem("tydelige"), "tyd");});
test("tydeligere -> tydeliger", function() {deepEqual( Stem("tydeligere"), "tydeliger");});
test("tydeliggjort -> tydeliggjort", function() {deepEqual( Stem("tydeliggjort"), "tydeliggjort");});
test("tydeliggjøre -> tydeliggjør", function() {deepEqual( Stem("tydeliggjøre"), "tydeliggjør");});
test("tyder -> tyd", function() {deepEqual( Stem("tyder"), "tyd");});
test("tyding -> tyding", function() {deepEqual( Stem("tyding"), "tyding");});
test("tydinga -> tyding", function() {deepEqual( Stem("tydinga"), "tyding");});
test("tydingar -> tyding", function() {deepEqual( Stem("tydingar"), "tyding");});
test("tygger -> tygg", function() {deepEqual( Stem("tygger"), "tygg");});
test("tygget -> tygg", function() {deepEqual( Stem("tygget"), "tygg");});
test("tykke -> tykk", function() {deepEqual( Stem("tykke"), "tykk");});
test("tykkere -> tykker", function() {deepEqual( Stem("tykkere"), "tykker");});
test("tykt -> tykt", function() {deepEqual( Stem("tykt"), "tykt");});
test("tyngdepunkt -> tyngdepunkt", function() {deepEqual( Stem("tyngdepunkt"), "tyngdepunkt");});
test("tyngdepunktet -> tyngdepunkt", function() {deepEqual( Stem("tyngdepunktet"), "tyngdepunkt");});
test("tyngende -> tyng", function() {deepEqual( Stem("tyngende"), "tyng");});
test("tyngjande -> tyngj", function() {deepEqual( Stem("tyngjande"), "tyngj");});
test("tyngst -> tyngst", function() {deepEqual( Stem("tyngst"), "tyngst");});
test("tyngste -> tyngst", function() {deepEqual( Stem("tyngste"), "tyngst");});
test("tynn -> tynn", function() {deepEqual( Stem("tynn"), "tynn");});
test("tynt -> tynt", function() {deepEqual( Stem("tynt"), "tynt");});
test("typane -> typ", function() {deepEqual( Stem("typane"), "typ");});
test("typar -> typ", function() {deepEqual( Stem("typar"), "typ");});
test("type -> typ", function() {deepEqual( Stem("type"), "typ");});
test("typeeksempel -> typeeksempel", function() {deepEqual( Stem("typeeksempel"), "typeeksempel");});
test("typen -> typ", function() {deepEqual( Stem("typen"), "typ");});
test("typene -> typ", function() {deepEqual( Stem("typene"), "typ");});
test("typer -> typ", function() {deepEqual( Stem("typer"), "typ");});
test("typisk -> typisk", function() {deepEqual( Stem("typisk"), "typisk");});
test("typiske -> typisk", function() {deepEqual( Stem("typiske"), "typisk");});
test("tyr -> tyr", function() {deepEqual( Stem("tyr"), "tyr");});
test("tyrs -> tyr", function() {deepEqual( Stem("tyrs"), "tyr");});
test("tysk -> tysk", function() {deepEqual( Stem("tysk"), "tysk");});
test("tyske -> tysk", function() {deepEqual( Stem("tyske"), "tysk");});
test("tyskland -> tyskland", function() {deepEqual( Stem("tyskland"), "tyskland");});
test("tysvær -> tysvær", function() {deepEqual( Stem("tysvær"), "tysvær");});
test("tyter -> tyt", function() {deepEqual( Stem("tyter"), "tyt");});
test("tyv -> tyv", function() {deepEqual( Stem("tyv"), "tyv");});
test("tyve -> tyv", function() {deepEqual( Stem("tyve"), "tyv");});
test("tyven -> tyv", function() {deepEqual( Stem("tyven"), "tyv");});
test("tyveriet -> tyveri", function() {deepEqual( Stem("tyveriet"), "tyveri");});
test("tå -> tå", function() {deepEqual( Stem("tå"), "tå");});
test("tåa -> tåa", function() {deepEqual( Stem("tåa"), "tåa");});
test("tåke -> tåk", function() {deepEqual( Stem("tåke"), "tåk");});
test("tåkeheimen -> tåkeheim", function() {deepEqual( Stem("tåkeheimen"), "tåkeheim");});
test("tåken -> tåk", function() {deepEqual( Stem("tåken"), "tåk");});
test("tåle -> tål", function() {deepEqual( Stem("tåle"), "tål");});
test("tåler -> tål", function() {deepEqual( Stem("tåler"), "tål");});
test("tålmodig -> tålmod", function() {deepEqual( Stem("tålmodig"), "tålmod");});
test("tålmodighet -> tålmod", function() {deepEqual( Stem("tålmodighet"), "tålmod");});
test("tålmodigheten -> tålmod", function() {deepEqual( Stem("tålmodigheten"), "tålmod");});
test("tålt -> tålt", function() {deepEqual( Stem("tålt"), "tålt");});
test("tåre -> tår", function() {deepEqual( Stem("tåre"), "tår");});
test("tårene -> tår", function() {deepEqual( Stem("tårene"), "tår");});
test("tårer -> tår", function() {deepEqual( Stem("tårer"), "tår");});
test("tårn -> tårn", function() {deepEqual( Stem("tårn"), "tårn");});
test("tårner -> tårn", function() {deepEqual( Stem("tårner"), "tårn");});
test("tælen -> tæl", function() {deepEqual( Stem("tælen"), "tæl");});
test("tær -> tær", function() {deepEqual( Stem("tær"), "tær");});
test("tære -> tær", function() {deepEqual( Stem("tære"), "tær");});
test("tærne -> tærn", function() {deepEqual( Stem("tærne"), "tærn");});
test("tøi -> tøi", function() {deepEqual( Stem("tøi"), "tøi");});
test("tømme -> tømm", function() {deepEqual( Stem("tømme"), "tømm");});
test("tømmene -> tømm", function() {deepEqual( Stem("tømmene"), "tømm");});
test("tømmer -> tømm", function() {deepEqual( Stem("tømmer"), "tømm");});
test("tømmerimporten -> tømmerimport", function() {deepEqual( Stem("tømmerimporten"), "tømmerimport");});
test("tømmerstokkene -> tømmerstokk", function() {deepEqual( Stem("tømmerstokkene"), "tømmerstokk");});
test("tømmertransport -> tømmertransport", function() {deepEqual( Stem("tømmertransport"), "tømmertransport");});
test("tømmertransporter -> tømmertransport", function() {deepEqual( Stem("tømmertransporter"), "tømmertransport");});
test("tømmervegger -> tømmervegg", function() {deepEqual( Stem("tømmervegger"), "tømmervegg");});
test("tømmes -> tømm", function() {deepEqual( Stem("tømmes"), "tømm");});
test("tønnen -> tønn", function() {deepEqual( Stem("tønnen"), "tønn");});
test("tønner -> tønn", function() {deepEqual( Stem("tønner"), "tønn");});
test("tønsberg -> tønsberg", function() {deepEqual( Stem("tønsberg"), "tønsberg");});
test("tør -> tør", function() {deepEqual( Stem("tør"), "tør");});
test("tørker -> tørk", function() {deepEqual( Stem("tørker"), "tørk");});
test("tørner -> tørn", function() {deepEqual( Stem("tørner"), "tørn");});
test("tørr -> tørr", function() {deepEqual( Stem("tørr"), "tørr");});
test("tørrbulk -> tørrbulk", function() {deepEqual( Stem("tørrbulk"), "tørrbulk");});
test("tørrbulkgodset -> tørrbulkgods", function() {deepEqual( Stem("tørrbulkgodset"), "tørrbulkgods");});
test("tørrbulkkai -> tørrbulkkai", function() {deepEqual( Stem("tørrbulkkai"), "tørrbulkkai");});
test("tørrbulkomslag -> tørrbulkomslag", function() {deepEqual( Stem("tørrbulkomslag"), "tørrbulkomslag");});
test("tørre -> tørr", function() {deepEqual( Stem("tørre"), "tørr");});
test("tørst -> tørst", function() {deepEqual( Stem("tørst"), "tørst");});
test("tørste -> tørst", function() {deepEqual( Stem("tørste"), "tørst");});
test("tørstet -> tørst", function() {deepEqual( Stem("tørstet"), "tørst");});
test("tørt -> tørt", function() {deepEqual( Stem("tørt"), "tørt");});
test("tøy -> tøy", function() {deepEqual( Stem("tøy"), "tøy");});
test("tøyle -> tøyl", function() {deepEqual( Stem("tøyle"), "tøyl");});
test("tøyler -> tøyl", function() {deepEqual( Stem("tøyler"), "tøyl");});
test("tøyser -> tøys", function() {deepEqual( Stem("tøyser"), "tøys");});
test("uakseptable -> uakseptabl", function() {deepEqual( Stem("uakseptable"), "uakseptabl");});
test("uaktuelt -> uaktuelt", function() {deepEqual( Stem("uaktuelt"), "uaktuelt");});
test("uanseelig -> uanse", function() {deepEqual( Stem("uanseelig"), "uanse");});
test("uansett -> uansett", function() {deepEqual( Stem("uansett"), "uansett");});
test("uavbrutt -> uavbrutt", function() {deepEqual( Stem("uavbrutt"), "uavbrutt");});
test("uavgjort -> uavgjort", function() {deepEqual( Stem("uavgjort"), "uavgjort");});
test("uavgrensa -> uavgrens", function() {deepEqual( Stem("uavgrensa"), "uavgrens");});
test("uavhengig -> uavheng", function() {deepEqual( Stem("uavhengig"), "uavheng");});
test("uavhengige -> uavheng", function() {deepEqual( Stem("uavhengige"), "uavheng");});
test("uavkortet -> uavkort", function() {deepEqual( Stem("uavkortet"), "uavkort");});
test("ubalanse -> ubalans", function() {deepEqual( Stem("ubalanse"), "ubalans");});
test("ubedte -> ubed", function() {deepEqual( Stem("ubedte"), "ubed");});
test("ubegrensede -> ubegrens", function() {deepEqual( Stem("ubegrensede"), "ubegrens");});
test("ubegrenset -> ubegrens", function() {deepEqual( Stem("ubegrenset"), "ubegrens");});
test("ubegripelig -> ubegrip", function() {deepEqual( Stem("ubegripelig"), "ubegrip");});
test("ubenyttet -> ubenytt", function() {deepEqual( Stem("ubenyttet"), "ubenytt");});
test("uberegnelig -> uberegn", function() {deepEqual( Stem("uberegnelig"), "uberegn");});
test("uberegnelige -> uberegn", function() {deepEqual( Stem("uberegnelige"), "uberegn");});
test("uberørte -> uberørt", function() {deepEqual( Stem("uberørte"), "uberørt");});
test("ubestemt -> ubestemt", function() {deepEqual( Stem("ubestemt"), "ubestemt");});
test("ubetinga -> ubeting", function() {deepEqual( Stem("ubetinga"), "ubeting");});
test("ubetinget -> ubeting", function() {deepEqual( Stem("ubetinget"), "ubeting");});
test("ubetydelig -> ubetyd", function() {deepEqual( Stem("ubetydelig"), "ubetyd");});
test("ubunden -> ubund", function() {deepEqual( Stem("ubunden"), "ubund");});
test("ubygde -> ubygd", function() {deepEqual( Stem("ubygde"), "ubygd");});
test("ubøyelig -> ubøy", function() {deepEqual( Stem("ubøyelig"), "ubøy");});
test("udekket -> udekk", function() {deepEqual( Stem("udekket"), "udekk");});
test("udekte -> udekt", function() {deepEqual( Stem("udekte"), "udekt");});
test("udgave -> udgav", function() {deepEqual( Stem("udgave"), "udgav");});
test("udjerv -> udjerv", function() {deepEqual( Stem("udjerv"), "udjerv");});
test("udyret -> udyr", function() {deepEqual( Stem("udyret"), "udyr");});
test("udyrs -> udyr", function() {deepEqual( Stem("udyrs"), "udyr");});
test("ueigentleg -> ueigent", function() {deepEqual( Stem("ueigentleg"), "ueigent");});
test("ueinsarta -> ueinsart", function() {deepEqual( Stem("ueinsarta"), "ueinsart");});
test("uendelig -> uend", function() {deepEqual( Stem("uendelig"), "uend");});
test("uendelige -> uend", function() {deepEqual( Stem("uendelige"), "uend");});
test("uendret -> uendr", function() {deepEqual( Stem("uendret"), "uendr");});
test("ufattelig -> ufatt", function() {deepEqual( Stem("ufattelig"), "ufatt");});
test("uforanderlig -> uforander", function() {deepEqual( Stem("uforanderlig"), "uforander");});
test("uforandret -> uforandr", function() {deepEqual( Stem("uforandret"), "uforandr");});
test("uforfalle -> uforfall", function() {deepEqual( Stem("uforfalle"), "uforfall");});
test("uforholdsmessig -> uforholdsmess", function() {deepEqual( Stem("uforholdsmessig"), "uforholdsmess");});
test("uforlikte -> uforlikt", function() {deepEqual( Stem("uforlikte"), "uforlikt");});
test("uformelig -> uform", function() {deepEqual( Stem("uformelig"), "uform");});
test("uformelle -> uformell", function() {deepEqual( Stem("uformelle"), "uformell");});
test("uforsiktig -> uforsikt", function() {deepEqual( Stem("uforsiktig"), "uforsikt");});
test("uforsvarleg -> uforsvar", function() {deepEqual( Stem("uforsvarleg"), "uforsvar");});
test("uforsvarlege -> uforsvar", function() {deepEqual( Stem("uforsvarlege"), "uforsvar");});
test("uforsvarlig -> uforsvar", function() {deepEqual( Stem("uforsvarlig"), "uforsvar");});
test("uforutsett -> uforutsett", function() {deepEqual( Stem("uforutsett"), "uforutsett");});
test("ufred -> ufred", function() {deepEqual( Stem("ufred"), "ufred");});
test("ufri -> ufri", function() {deepEqual( Stem("ufri"), "ufri");});
test("ufriviljuge -> ufriviljug", function() {deepEqual( Stem("ufriviljuge"), "ufriviljug");});
test("ufråvikeleg -> ufråvik", function() {deepEqual( Stem("ufråvikeleg"), "ufråvik");});
test("ufråvikelege -> ufråvik", function() {deepEqual( Stem("ufråvikelege"), "ufråvik");});
test("ufullstendig -> ufullstend", function() {deepEqual( Stem("ufullstendig"), "ufullstend");});
test("ufullstendige -> ufullstend", function() {deepEqual( Stem("ufullstendige"), "ufullstend");});
test("ufyselig -> ufys", function() {deepEqual( Stem("ufyselig"), "ufys");});
test("ufyselige -> ufys", function() {deepEqual( Stem("ufyselige"), "ufys");});
test("ufør -> ufør", function() {deepEqual( Stem("ufør"), "ufør");});
test("uføre -> ufør", function() {deepEqual( Stem("uføre"), "ufør");});
test("uføreforsikring -> uføreforsikring", function() {deepEqual( Stem("uføreforsikring"), "uføreforsikring");});
test("uføregraden -> uføregrad", function() {deepEqual( Stem("uføregraden"), "uføregrad");});
test("uførepensjon -> uførepensjon", function() {deepEqual( Stem("uførepensjon"), "uførepensjon");});
test("uførepensjonen -> uførepensjon", function() {deepEqual( Stem("uførepensjonen"), "uførepensjon");});
test("uførepensjonens -> uførepensjon", function() {deepEqual( Stem("uførepensjonens"), "uførepensjon");});
test("uførepensjoner -> uførepensjon", function() {deepEqual( Stem("uførepensjoner"), "uførepensjon");});
test("uførepensjonister -> uførepensjonist", function() {deepEqual( Stem("uførepensjonister"), "uførepensjonist");});
test("uførepensjonsforsikring -> uførepensjonsforsikring", function() {deepEqual( Stem("uførepensjonsforsikring"), "uførepensjonsforsikring");});
test("uføretidspunktet -> uføretidspunkt", function() {deepEqual( Stem("uføretidspunktet"), "uføretidspunkt");});
test("uføreytelser -> uføreyt", function() {deepEqual( Stem("uføreytelser"), "uføreyt");});
test("uførhet -> ufør", function() {deepEqual( Stem("uførhet"), "ufør");});
test("uførheten -> ufør", function() {deepEqual( Stem("uførheten"), "ufør");});
test("ugagnskråka -> ugagnskråk", function() {deepEqual( Stem("ugagnskråka"), "ugagnskråk");});
test("ugagnskråke -> ugagnskråk", function() {deepEqual( Stem("ugagnskråke"), "ugagnskråk");});
test("uggla -> uggl", function() {deepEqual( Stem("uggla"), "uggl");});
test("ugifte -> ugift", function() {deepEqual( Stem("ugifte"), "ugift");});
test("ugjennomsiktig -> ugjennomsikt", function() {deepEqual( Stem("ugjennomsiktig"), "ugjennomsikt");});
test("ugjennomsiktige -> ugjennomsikt", function() {deepEqual( Stem("ugjennomsiktige"), "ugjennomsikt");});
test("ugjerne -> ugjern", function() {deepEqual( Stem("ugjerne"), "ugjern");});
test("ugjerningsmenn -> ugjerningsmenn", function() {deepEqual( Stem("ugjerningsmenn"), "ugjerningsmenn");});
test("ugyldig -> ugyld", function() {deepEqual( Stem("ugyldig"), "ugyld");});
test("ugyldige -> ugyld", function() {deepEqual( Stem("ugyldige"), "ugyld");});
test("uheldig -> uheld", function() {deepEqual( Stem("uheldig"), "uheld");});
test("uheldige -> uheld", function() {deepEqual( Stem("uheldige"), "uheld");});
test("uhell -> uhell", function() {deepEqual( Stem("uhell"), "uhell");});
test("uhensiktsmessig -> uhensiktsmess", function() {deepEqual( Stem("uhensiktsmessig"), "uhensiktsmess");});
test("uhevnet -> uhevn", function() {deepEqual( Stem("uhevnet"), "uhevn");});
test("uhyggelig -> uhygg", function() {deepEqual( Stem("uhyggelig"), "uhygg");});
test("uhyggelige -> uhygg", function() {deepEqual( Stem("uhyggelige"), "uhygg");});
test("uhyrer -> uhyr", function() {deepEqual( Stem("uhyrer"), "uhyr");});
test("uhyret -> uhyr", function() {deepEqual( Stem("uhyret"), "uhyr");});
test("uinnfridde -> uinnfridd", function() {deepEqual( Stem("uinnfridde"), "uinnfridd");});
test("ujamn -> ujamn", function() {deepEqual( Stem("ujamn"), "ujamn");});
test("uke -> uke", function() {deepEqual( Stem("uke"), "uke");});
test("ukedager -> ukedag", function() {deepEqual( Stem("ukedager"), "ukedag");});
test("uken -> uken", function() {deepEqual( Stem("uken"), "uken");});
test("ukentlig -> ukent", function() {deepEqual( Stem("ukentlig"), "ukent");});
test("uker -> uker", function() {deepEqual( Stem("uker"), "uker");});
test("ukjent -> ukjent", function() {deepEqual( Stem("ukjent"), "ukjent");});
test("ukjente -> ukjent", function() {deepEqual( Stem("ukjente"), "ukjent");});
test("uklar -> ukl", function() {deepEqual( Stem("uklar"), "ukl");});
test("uklare -> uklar", function() {deepEqual( Stem("uklare"), "uklar");});
test("uklarhet -> uklar", function() {deepEqual( Stem("uklarhet"), "uklar");});
test("uklarheter -> uklar", function() {deepEqual( Stem("uklarheter"), "uklar");});
test("uklart -> uklart", function() {deepEqual( Stem("uklart"), "uklart");});
test("uklok -> uklok", function() {deepEqual( Stem("uklok"), "uklok");});
test("uklokt -> uklokt", function() {deepEqual( Stem("uklokt"), "uklokt");});
test("uklår -> uklår", function() {deepEqual( Stem("uklår"), "uklår");});
test("uklåre -> uklår", function() {deepEqual( Stem("uklåre"), "uklår");});
test("uklårt -> uklårt", function() {deepEqual( Stem("uklårt"), "uklårt");});
test("ukrevet -> ukrev", function() {deepEqual( Stem("ukrevet"), "ukrev");});
test("ulage -> ulag", function() {deepEqual( Stem("ulage"), "ulag");});
test("ulefoss -> ulefoss", function() {deepEqual( Stem("ulefoss"), "ulefoss");});
test("ulempa -> ulemp", function() {deepEqual( Stem("ulempa"), "ulemp");});
test("ulempe -> ulemp", function() {deepEqual( Stem("ulempe"), "ulemp");});
test("ulempene -> ulemp", function() {deepEqual( Stem("ulempene"), "ulemp");});
test("ulemper -> ulemp", function() {deepEqual( Stem("ulemper"), "ulemp");});
test("uler -> uler", function() {deepEqual( Stem("uler"), "uler");});
test("uleselige -> ules", function() {deepEqual( Stem("uleselige"), "ules");});
test("ulik -> ulik", function() {deepEqual( Stem("ulik"), "ulik");});
test("ulike -> ulik", function() {deepEqual( Stem("ulike"), "ulik");});
test("ulikhet -> ulik", function() {deepEqual( Stem("ulikhet"), "ulik");});
test("ulikhetene -> ulik", function() {deepEqual( Stem("ulikhetene"), "ulik");});
test("ulikheter -> ulik", function() {deepEqual( Stem("ulikheter"), "ulik");});
test("ulikskap -> ulikskap", function() {deepEqual( Stem("ulikskap"), "ulikskap");});
test("ulikskapen -> ulikskap", function() {deepEqual( Stem("ulikskapen"), "ulikskap");});
test("ulikt -> ulikt", function() {deepEqual( Stem("ulikt"), "ulikt");});
test("ull -> ull", function() {deepEqual( Stem("ull"), "ull");});
test("ullen -> ull", function() {deepEqual( Stem("ullen"), "ull");});
test("ulmer -> ulm", function() {deepEqual( Stem("ulmer"), "ulm");});
test("ulovfesta -> ulovfest", function() {deepEqual( Stem("ulovfesta"), "ulovfest");});
test("ulovleg -> ulov", function() {deepEqual( Stem("ulovleg"), "ulov");});
test("ulv -> ulv", function() {deepEqual( Stem("ulv"), "ulv");});
test("ulve -> ulv", function() {deepEqual( Stem("ulve"), "ulv");});
test("ulvegapet -> ulvegap", function() {deepEqual( Stem("ulvegapet"), "ulvegap");});
test("ulveham -> ulveham", function() {deepEqual( Stem("ulveham"), "ulveham");});
test("ulvekjeften -> ulvekjeft", function() {deepEqual( Stem("ulvekjeften"), "ulvekjeft");});
test("ulven -> ulv", function() {deepEqual( Stem("ulven"), "ulv");});
test("ulvene -> ulv", function() {deepEqual( Stem("ulvene"), "ulv");});
test("ulver -> ulv", function() {deepEqual( Stem("ulver"), "ulv");});
test("ulveskikkelse -> ulveskikk", function() {deepEqual( Stem("ulveskikkelse"), "ulveskikk");});
test("ulvesnute -> ulvesnut", function() {deepEqual( Stem("ulvesnute"), "ulvesnut");});
test("ulvestemmer -> ulvestemm", function() {deepEqual( Stem("ulvestemmer"), "ulvestemm");});
test("ulvetid -> ulvetid", function() {deepEqual( Stem("ulvetid"), "ulvetid");});
test("ulvungen -> ulvung", function() {deepEqual( Stem("ulvungen"), "ulvung");});
test("ulydighet -> ulyd", function() {deepEqual( Stem("ulydighet"), "ulyd");});
test("ulykke -> ulykk", function() {deepEqual( Stem("ulykke"), "ulykk");});
test("ulykkelig -> ulykk", function() {deepEqual( Stem("ulykkelig"), "ulykk");});
test("ulykkelige -> ulykk", function() {deepEqual( Stem("ulykkelige"), "ulykk");});
test("ulykker -> ulykk", function() {deepEqual( Stem("ulykker"), "ulykk");});
test("ulykkesfugl -> ulykkesfugl", function() {deepEqual( Stem("ulykkesfugl"), "ulykkesfugl");});
test("ulykkeskostnader -> ulykkeskostnad", function() {deepEqual( Stem("ulykkeskostnader"), "ulykkeskostnad");});
test("ulyst -> ulyst", function() {deepEqual( Stem("ulyst"), "ulyst");});
test("ulønsamt -> ulønsamt", function() {deepEqual( Stem("ulønsamt"), "ulønsamt");});
test("umettelige -> umett", function() {deepEqual( Stem("umettelige"), "umett");});
test("umiddelbar -> umiddelb", function() {deepEqual( Stem("umiddelbar"), "umiddelb");});
test("umiddelbart -> umiddelbart", function() {deepEqual( Stem("umiddelbart"), "umiddelbart");});
test("umogleg -> umog", function() {deepEqual( Stem("umogleg"), "umog");});
test("umulig -> umu", function() {deepEqual( Stem("umulig"), "umu");});
test("umulige -> umu", function() {deepEqual( Stem("umulige"), "umu");});
test("umyndig -> umynd", function() {deepEqual( Stem("umyndig"), "umynd");});
test("umyndiggjorde -> umyndiggjord", function() {deepEqual( Stem("umyndiggjorde"), "umyndiggjord");});
test("und -> und", function() {deepEqual( Stem("und"), "und");});
test("undamentet -> undament", function() {deepEqual( Stem("undamentet"), "undament");});
test("under -> und", function() {deepEqual( Stem("under"), "und");});
test("underdekning -> underdekning", function() {deepEqual( Stem("underdekning"), "underdekning");});
test("underdirektør -> underdirektør", function() {deepEqual( Stem("underdirektør"), "underdirektør");});
test("underforstått -> underforstått", function() {deepEqual( Stem("underforstått"), "underforstått");});
test("underfulle -> underfull", function() {deepEqual( Stem("underfulle"), "underfull");});
test("undergang -> undergang", function() {deepEqual( Stem("undergang"), "undergang");});
test("undergis -> undergis", function() {deepEqual( Stem("undergis"), "undergis");});
test("undergitt -> undergitt", function() {deepEqual( Stem("undergitt"), "undergitt");});
test("undergruppe -> undergrupp", function() {deepEqual( Stem("undergruppe"), "undergrupp");});
test("underjordisk -> underjordisk", function() {deepEqual( Stem("underjordisk"), "underjordisk");});
test("underjordiske -> underjordisk", function() {deepEqual( Stem("underjordiske"), "underjordisk");});
test("underkant -> underkant", function() {deepEqual( Stem("underkant"), "underkant");});
test("underkapitler -> underkapitl", function() {deepEqual( Stem("underkapitler"), "underkapitl");});
test("underkjeven -> underkjev", function() {deepEqual( Stem("underkjeven"), "underkjev");});
test("underkurs -> underkur", function() {deepEqual( Stem("underkurs"), "underkur");});
test("underlag -> underlag", function() {deepEqual( Stem("underlag"), "underlag");});
test("underlagde -> underlagd", function() {deepEqual( Stem("underlagde"), "underlagd");});
test("underlagsmateriale -> underlagsmaterial", function() {deepEqual( Stem("underlagsmateriale"), "underlagsmaterial");});
test("underlagsmaterialet -> underlagsmaterial", function() {deepEqual( Stem("underlagsmaterialet"), "underlagsmaterial");});
test("underlagt -> underlagt", function() {deepEqual( Stem("underlagt"), "underlagt");});
test("underlegges -> underlegg", function() {deepEqual( Stem("underlegges"), "underlegg");});
test("underleveranser -> underleverans", function() {deepEqual( Stem("underleveranser"), "underleverans");});
test("underlig -> under", function() {deepEqual( Stem("underlig"), "under");});
test("underlige -> under", function() {deepEqual( Stem("underlige"), "under");});
test("underliggende -> underligg", function() {deepEqual( Stem("underliggende"), "underligg");});
test("underminere -> underminer", function() {deepEqual( Stem("underminere"), "underminer");});
test("underordna -> underordn", function() {deepEqual( Stem("underordna"), "underordn");});
test("underordnet -> underordn", function() {deepEqual( Stem("underordnet"), "underordn");});
test("underordnete -> underordnet", function() {deepEqual( Stem("underordnete"), "underordnet");});
test("underpris -> underpris", function() {deepEqual( Stem("underpris"), "underpris");});
test("underprising -> underprising", function() {deepEqual( Stem("underprising"), "underprising");});
test("underrapportering -> underrapportering", function() {deepEqual( Stem("underrapportering"), "underrapportering");});
test("underrapporteringen -> underrapportering", function() {deepEqual( Stem("underrapporteringen"), "underrapportering");});
test("underskift -> underskift", function() {deepEqual( Stem("underskift"), "underskift");});
test("underskifter -> underskift", function() {deepEqual( Stem("underskifter"), "underskift");});
test("underskot -> underskot", function() {deepEqual( Stem("underskot"), "underskot");});
test("underskrift -> underskrift", function() {deepEqual( Stem("underskrift"), "underskrift");});
test("underskriftene -> underskrift", function() {deepEqual( Stem("underskriftene"), "underskrift");});
test("underskrifter -> underskrift", function() {deepEqual( Stem("underskrifter"), "underskrift");});
test("underskrivast -> underskriv", function() {deepEqual( Stem("underskrivast"), "underskriv");});
test("underskrive -> underskriv", function() {deepEqual( Stem("underskrive"), "underskriv");});
test("underskriven -> underskriv", function() {deepEqual( Stem("underskriven"), "underskriv");});
test("underskriving -> underskriving", function() {deepEqual( Stem("underskriving"), "underskriving");});
test("underskudd -> underskudd", function() {deepEqual( Stem("underskudd"), "underskudd");});
test("underskuddet -> underskudd", function() {deepEqual( Stem("underskuddet"), "underskudd");});
test("understreke -> understrek", function() {deepEqual( Stem("understreke"), "understrek");});
test("understreker -> understrek", function() {deepEqual( Stem("understreker"), "understrek");});
test("understrekes -> understrek", function() {deepEqual( Stem("understrekes"), "understrek");});
test("understøtter -> understøtt", function() {deepEqual( Stem("understøtter"), "understøtt");});
test("undersøke -> undersøk", function() {deepEqual( Stem("undersøke"), "undersøk");});
test("undersøkelse -> undersøk", function() {deepEqual( Stem("undersøkelse"), "undersøk");});
test("undersøkelsen -> undersøk", function() {deepEqual( Stem("undersøkelsen"), "undersøk");});
test("undersøkelsene -> undersøk", function() {deepEqual( Stem("undersøkelsene"), "undersøk");});
test("undersøkelser -> undersøk", function() {deepEqual( Stem("undersøkelser"), "undersøk");});
test("undersøkingane -> undersøking", function() {deepEqual( Stem("undersøkingane"), "undersøking");});
test("undersøkingar -> undersøking", function() {deepEqual( Stem("undersøkingar"), "undersøking");});
test("undersøkje -> undersøkj", function() {deepEqual( Stem("undersøkje"), "undersøkj");});
test("undersøkjer -> undersøkj", function() {deepEqual( Stem("undersøkjer"), "undersøkj");});
test("undersøkt -> undersøkt", function() {deepEqual( Stem("undersøkt"), "undersøkt");});
test("underteiknast -> underteikn", function() {deepEqual( Stem("underteiknast"), "underteikn");});
test("undervegs -> underveg", function() {deepEqual( Stem("undervegs"), "underveg");});
test("underveis -> underveis", function() {deepEqual( Stem("underveis"), "underveis");});
test("undervurderer -> undervurder", function() {deepEqual( Stem("undervurderer"), "undervurder");});
test("undervurderte -> undervurder", function() {deepEqual( Stem("undervurderte"), "undervurder");});
test("undre -> undr", function() {deepEqual( Stem("undre"), "undr");});
test("undrende -> undr", function() {deepEqual( Stem("undrende"), "undr");});
test("undrer -> undr", function() {deepEqual( Stem("undrer"), "undr");});
test("undres -> undr", function() {deepEqual( Stem("undres"), "undr");});
test("undring -> undring", function() {deepEqual( Stem("undring"), "undring");});
test("ung -> ung", function() {deepEqual( Stem("ung"), "ung");});
test("ungdom -> ungdom", function() {deepEqual( Stem("ungdom"), "ungdom");});
test("ungdommen -> ungdomm", function() {deepEqual( Stem("ungdommen"), "ungdomm");});
test("ungdoms -> ungdom", function() {deepEqual( Stem("ungdoms"), "ungdom");});
test("ungdomsbustader -> ungdomsbustad", function() {deepEqual( Stem("ungdomsbustader"), "ungdomsbustad");});
test("unge -> ung", function() {deepEqual( Stem("unge"), "ung");});
test("ungen -> ung", function() {deepEqual( Stem("ungen"), "ung");});
test("unger -> ung", function() {deepEqual( Stem("unger"), "ung");});
test("ungr -> ungr", function() {deepEqual( Stem("ungr"), "ungr");});
test("union -> union", function() {deepEqual( Stem("union"), "union");});
test("unionen -> union", function() {deepEqual( Stem("unionen"), "union");});
test("uniship -> uniship", function() {deepEqual( Stem("uniship"), "uniship");});
test("unit -> unit", function() {deepEqual( Stem("unit"), "unit");});
test("united -> united", function() {deepEqual( Stem("united"), "united");});
test("unitisering -> unitisering", function() {deepEqual( Stem("unitisering"), "unitisering");});
test("unitiseringsgraden -> unitiseringsgrad", function() {deepEqual( Stem("unitiseringsgraden"), "unitiseringsgrad");});
test("unitisert -> unitiser", function() {deepEqual( Stem("unitisert"), "unitiser");});
test("unitiserte -> unitiser", function() {deepEqual( Stem("unitiserte"), "unitiser");});
test("universell -> universell", function() {deepEqual( Stem("universell"), "universell");});
test("universitat -> universitat", function() {deepEqual( Stem("universitat"), "universitat");});
test("university -> university", function() {deepEqual( Stem("university"), "university");});
test("unna -> unn", function() {deepEqual( Stem("unna"), "unn");});
test("unne -> unn", function() {deepEqual( Stem("unne"), "unn");});
test("unner -> unn", function() {deepEqual( Stem("unner"), "unn");});
test("unngå -> unngå", function() {deepEqual( Stem("unngå"), "unngå");});
test("unngår -> unngår", function() {deepEqual( Stem("unngår"), "unngår");});
test("unngås -> unngås", function() {deepEqual( Stem("unngås"), "unngås");});
test("unngått -> unngått", function() {deepEqual( Stem("unngått"), "unngått");});
test("unnlate -> unnlat", function() {deepEqual( Stem("unnlate"), "unnlat");});
test("unnlater -> unnlat", function() {deepEqual( Stem("unnlater"), "unnlat");});
test("unnlatt -> unnlatt", function() {deepEqual( Stem("unnlatt"), "unnlatt");});
test("unnslippe -> unnslipp", function() {deepEqual( Stem("unnslippe"), "unnslipp");});
test("unntak -> unntak", function() {deepEqual( Stem("unntak"), "unntak");});
test("unntaka -> unntak", function() {deepEqual( Stem("unntaka"), "unntak");});
test("unntaket -> unntak", function() {deepEqual( Stem("unntaket"), "unntak");});
test("unntaksregel -> unntaksregel", function() {deepEqual( Stem("unntaksregel"), "unntaksregel");});
test("unntaksregelen -> unntaksregel", function() {deepEqual( Stem("unntaksregelen"), "unntaksregel");});
test("unntakstilfeller -> unntakstilfell", function() {deepEqual( Stem("unntakstilfeller"), "unntakstilfell");});
test("unntaksvis -> unntaksvis", function() {deepEqual( Stem("unntaksvis"), "unntaksvis");});
test("unntas -> unnt", function() {deepEqual( Stem("unntas"), "unnt");});
test("unntatt -> unntatt", function() {deepEqual( Stem("unntatt"), "unntatt");});
test("unormale -> unormal", function() {deepEqual( Stem("unormale"), "unormal");});
test("unødig -> unød", function() {deepEqual( Stem("unødig"), "unød");});
test("unødvendig -> unødvend", function() {deepEqual( Stem("unødvendig"), "unødvend");});
test("unødvendige -> unødvend", function() {deepEqual( Stem("unødvendige"), "unødvend");});
test("uomtvista -> uomtvist", function() {deepEqual( Stem("uomtvista"), "uomtvist");});
test("uoppseieleg -> uoppsei", function() {deepEqual( Stem("uoppseieleg"), "uoppsei");});
test("uoppseielege -> uoppsei", function() {deepEqual( Stem("uoppseielege"), "uoppsei");});
test("uorden -> uord", function() {deepEqual( Stem("uorden"), "uord");});
test("uoverdrageleg -> uoverdrag", function() {deepEqual( Stem("uoverdrageleg"), "uoverdrag");});
test("uoversiktleg -> uoversikt", function() {deepEqual( Stem("uoversiktleg"), "uoversikt");});
test("uoversiktlig -> uoversikt", function() {deepEqual( Stem("uoversiktlig"), "uoversikt");});
test("up -> up", function() {deepEqual( Stem("up"), "up");});
test("uppfyller -> uppfyll", function() {deepEqual( Stem("uppfyller"), "uppfyll");});
test("upplagan -> upplagan", function() {deepEqual( Stem("upplagan"), "upplagan");});
test("uppsala -> uppsal", function() {deepEqual( Stem("uppsala"), "uppsal");});
test("upraktisk -> upraktisk", function() {deepEqual( Stem("upraktisk"), "upraktisk");});
test("upraktiske -> upraktisk", function() {deepEqual( Stem("upraktiske"), "upraktisk");});
test("uprøvd -> uprøvd", function() {deepEqual( Stem("uprøvd"), "uprøvd");});
test("ur -> ur", function() {deepEqual( Stem("ur"), "ur");});
test("urasjonell -> urasjonell", function() {deepEqual( Stem("urasjonell"), "urasjonell");});
test("urd -> urd", function() {deepEqual( Stem("urd"), "urd");});
test("urds -> urd", function() {deepEqual( Stem("urds"), "urd");});
test("urealisert -> urealiser", function() {deepEqual( Stem("urealisert"), "urealiser");});
test("urealiserte -> urealiser", function() {deepEqual( Stem("urealiserte"), "urealiser");});
test("urealistisk -> urealistisk", function() {deepEqual( Stem("urealistisk"), "urealistisk");});
test("uredd -> uredd", function() {deepEqual( Stem("uredd"), "uredd");});
test("uregistrert -> uregistrer", function() {deepEqual( Stem("uregistrert"), "uregistrer");});
test("uregistrerte -> uregistrer", function() {deepEqual( Stem("uregistrerte"), "uregistrer");});
test("uregulert -> ureguler", function() {deepEqual( Stem("uregulert"), "ureguler");});
test("urette -> urett", function() {deepEqual( Stem("urette"), "urett");});
test("urettferdig -> urettferd", function() {deepEqual( Stem("urettferdig"), "urettferd");});
test("urimeleg -> urim", function() {deepEqual( Stem("urimeleg"), "urim");});
test("urimelege -> urim", function() {deepEqual( Stem("urimelege"), "urim");});
test("urimelig -> urim", function() {deepEqual( Stem("urimelig"), "urim");});
test("uro -> uro", function() {deepEqual( Stem("uro"), "uro");});
test("urolig -> uro", function() {deepEqual( Stem("urolig"), "uro");});
test("urolige -> uro", function() {deepEqual( Stem("urolige"), "uro");});
test("urter -> urt", function() {deepEqual( Stem("urter"), "urt");});
test("urtiden -> urtid", function() {deepEqual( Stem("urtiden"), "urtid");});
test("uråd -> uråd", function() {deepEqual( Stem("uråd"), "uråd");});
test("urørlig -> urør", function() {deepEqual( Stem("urørlig"), "urør");});
test("usa -> usa", function() {deepEqual( Stem("usa"), "usa");});
test("usakleg -> usak", function() {deepEqual( Stem("usakleg"), "usak");});
test("usamde -> usamd", function() {deepEqual( Stem("usamde"), "usamd");});
test("uselde -> useld", function() {deepEqual( Stem("uselde"), "useld");});
test("useljeleg -> uselj", function() {deepEqual( Stem("useljeleg"), "uselj");});
test("usemje -> usemj", function() {deepEqual( Stem("usemje"), "usemj");});
test("usikker -> usikk", function() {deepEqual( Stem("usikker"), "usikk");});
test("usikkerhet -> usikker", function() {deepEqual( Stem("usikkerhet"), "usikker");});
test("usikkerheten -> usikker", function() {deepEqual( Stem("usikkerheten"), "usikker");});
test("usikkerhetsperiode -> usikkerhetsperiod", function() {deepEqual( Stem("usikkerhetsperiode"), "usikkerhetsperiod");});
test("usikkert -> usikker", function() {deepEqual( Stem("usikkert"), "usikker");});
test("usikra -> usikr", function() {deepEqual( Stem("usikra"), "usikr");});
test("usikre -> usikr", function() {deepEqual( Stem("usikre"), "usikr");});
test("uskadd -> uskadd", function() {deepEqual( Stem("uskadd"), "uskadd");});
test("uskadde -> uskadd", function() {deepEqual( Stem("uskadde"), "uskadd");});
test("uskifte -> uskift", function() {deepEqual( Stem("uskifte"), "uskift");});
test("uskiftet -> uskift", function() {deepEqual( Stem("uskiftet"), "uskift");});
test("uskikk -> uskikk", function() {deepEqual( Stem("uskikk"), "uskikk");});
test("uskyidige -> uskyid", function() {deepEqual( Stem("uskyidige"), "uskyid");});
test("uskylden -> uskyld", function() {deepEqual( Stem("uskylden"), "uskyld");});
test("uskyldig -> uskyld", function() {deepEqual( Stem("uskyldig"), "uskyld");});
test("uskyldsrene -> uskyldsr", function() {deepEqual( Stem("uskyldsrene"), "uskyldsr");});
test("uslingen -> usling", function() {deepEqual( Stem("uslingen"), "usling");});
test("uslinger -> usling", function() {deepEqual( Stem("uslinger"), "usling");});
test("uspesisfisert -> uspesisfiser", function() {deepEqual( Stem("uspesisfisert"), "uspesisfiser");});
test("ustyrtelig -> ustyrt", function() {deepEqual( Stem("ustyrtelig"), "ustyrt");});
test("ustøtt -> ustøtt", function() {deepEqual( Stem("ustøtt"), "ustøtt");});
test("usynlige -> usyn", function() {deepEqual( Stem("usynlige"), "usyn");});
test("usårlig -> usår", function() {deepEqual( Stem("usårlig"), "usår");});
test("ut -> ut", function() {deepEqual( Stem("ut"), "ut");});
test("utad -> utad", function() {deepEqual( Stem("utad"), "utad");});
test("utafor -> utafor", function() {deepEqual( Stem("utafor"), "utafor");});
test("utaforståande -> utaforstå", function() {deepEqual( Stem("utaforståande"), "utaforstå");});
test("utafrå -> utafrå", function() {deepEqual( Stem("utafrå"), "utafrå");});
test("utan -> utan", function() {deepEqual( Stem("utan"), "utan");});
test("utanfrå -> utanfrå", function() {deepEqual( Stem("utanfrå"), "utanfrå");});
test("utanom -> utanom", function() {deepEqual( Stem("utanom"), "utanom");});
test("utarbeidast -> utarbeid", function() {deepEqual( Stem("utarbeidast"), "utarbeid");});
test("utarbeidde -> utarbeidd", function() {deepEqual( Stem("utarbeidde"), "utarbeidd");});
test("utarbeide -> utarbeid", function() {deepEqual( Stem("utarbeide"), "utarbeid");});
test("utarbeidelse -> utarbeid", function() {deepEqual( Stem("utarbeidelse"), "utarbeid");});
test("utarbeidelsen -> utarbeid", function() {deepEqual( Stem("utarbeidelsen"), "utarbeid");});
test("utarbeider -> utarbeid", function() {deepEqual( Stem("utarbeider"), "utarbeid");});
test("utarbeides -> utarbeid", function() {deepEqual( Stem("utarbeides"), "utarbeid");});
test("utarbeidet -> utarbeid", function() {deepEqual( Stem("utarbeidet"), "utarbeid");});
test("utarbeiding -> utarbeiding", function() {deepEqual( Stem("utarbeiding"), "utarbeiding");});
test("utbedring -> utbedring", function() {deepEqual( Stem("utbedring"), "utbedring");});
test("utbedringer -> utbedring", function() {deepEqual( Stem("utbedringer"), "utbedring");});
test("utbetale -> utbetal", function() {deepEqual( Stem("utbetale"), "utbetal");});
test("utbetaler -> utbetal", function() {deepEqual( Stem("utbetaler"), "utbetal");});
test("utbetales -> utbetal", function() {deepEqual( Stem("utbetales"), "utbetal");});
test("utbetaling -> utbetaling", function() {deepEqual( Stem("utbetaling"), "utbetaling");});
test("utbetalingane -> utbetaling", function() {deepEqual( Stem("utbetalingane"), "utbetaling");});
test("utbetalingar -> utbetaling", function() {deepEqual( Stem("utbetalingar"), "utbetaling");});
test("utbetalingen -> utbetaling", function() {deepEqual( Stem("utbetalingen"), "utbetaling");});
test("utbetalingene -> utbetaling", function() {deepEqual( Stem("utbetalingene"), "utbetaling");});
test("utbetalingenes -> utbetaling", function() {deepEqual( Stem("utbetalingenes"), "utbetaling");});
test("utbetalinger -> utbetaling", function() {deepEqual( Stem("utbetalinger"), "utbetaling");});
test("utbetalingsdagen -> utbetalingsdag", function() {deepEqual( Stem("utbetalingsdagen"), "utbetalingsdag");});
test("utbetalingsdatoen -> utbetalingsdato", function() {deepEqual( Stem("utbetalingsdatoen"), "utbetalingsdato");});
test("utbetalingsfasen -> utbetalingsfas", function() {deepEqual( Stem("utbetalingsfasen"), "utbetalingsfas");});
test("utbetalingsperiode -> utbetalingsperiod", function() {deepEqual( Stem("utbetalingsperiode"), "utbetalingsperiod");});
test("utbetalingsperioden -> utbetalingsperiod", function() {deepEqual( Stem("utbetalingsperioden"), "utbetalingsperiod");});
test("utbetalingsperiodens -> utbetalingsperiod", function() {deepEqual( Stem("utbetalingsperiodens"), "utbetalingsperiod");});
test("utbetalingsprofil -> utbetalingsprofil", function() {deepEqual( Stem("utbetalingsprofil"), "utbetalingsprofil");});
test("utbetalingsprofilen -> utbetalingsprofil", function() {deepEqual( Stem("utbetalingsprofilen"), "utbetalingsprofil");});
test("utbetalingsreglene -> utbetalingsregl", function() {deepEqual( Stem("utbetalingsreglene"), "utbetalingsregl");});
test("utbetalingstiden -> utbetalingstid", function() {deepEqual( Stem("utbetalingstiden"), "utbetalingstid");});
test("utbetalingstidspunktet -> utbetalingstidspunkt", function() {deepEqual( Stem("utbetalingstidspunktet"), "utbetalingstidspunkt");});
test("utbetalingsår -> utbetalingsår", function() {deepEqual( Stem("utbetalingsår"), "utbetalingsår");});
test("utbetalt -> utbetalt", function() {deepEqual( Stem("utbetalt"), "utbetalt");});
test("utbetalte -> utbetalt", function() {deepEqual( Stem("utbetalte"), "utbetalt");});
test("utbetrast -> utbetr", function() {deepEqual( Stem("utbetrast"), "utbetr");});
test("utbetre -> utbetr", function() {deepEqual( Stem("utbetre"), "utbetr");});
test("utbetring -> utbetring", function() {deepEqual( Stem("utbetring"), "utbetring");});
test("utbetringa -> utbetring", function() {deepEqual( Stem("utbetringa"), "utbetring");});
test("utbetringsplikt -> utbetringsplikt", function() {deepEqual( Stem("utbetringsplikt"), "utbetringsplikt");});
test("utbredelse -> utbred", function() {deepEqual( Stem("utbredelse"), "utbred");});
test("utbredelsen -> utbred", function() {deepEqual( Stem("utbredelsen"), "utbred");});
test("utbredt -> utbred", function() {deepEqual( Stem("utbredt"), "utbred");});
test("utbreidd -> utbreidd", function() {deepEqual( Stem("utbreidd"), "utbreidd");});
test("utbreidde -> utbreidd", function() {deepEqual( Stem("utbreidde"), "utbreidd");});
test("utbrent -> utbrent", function() {deepEqual( Stem("utbrent"), "utbrent");});
test("utbudet -> utbud", function() {deepEqual( Stem("utbudet"), "utbud");});
test("utbygd -> utbygd", function() {deepEqual( Stem("utbygd"), "utbygd");});
test("utbygde -> utbygd", function() {deepEqual( Stem("utbygde"), "utbygd");});
test("utbygg -> utbygg", function() {deepEqual( Stem("utbygg"), "utbygg");});
test("utbygger -> utbygg", function() {deepEqual( Stem("utbygger"), "utbygg");});
test("utbygges -> utbygg", function() {deepEqual( Stem("utbygges"), "utbygg");});
test("utbygget -> utbygg", function() {deepEqual( Stem("utbygget"), "utbygg");});
test("utbygging -> utbygging", function() {deepEqual( Stem("utbygging"), "utbygging");});
test("utbygginga -> utbygging", function() {deepEqual( Stem("utbygginga"), "utbygging");});
test("utbyggingen -> utbygging", function() {deepEqual( Stem("utbyggingen"), "utbygging");});
test("utbyggingene -> utbygging", function() {deepEqual( Stem("utbyggingene"), "utbygging");});
test("utbygginger -> utbygging", function() {deepEqual( Stem("utbygginger"), "utbygging");});
test("utbyggings -> utbygging", function() {deepEqual( Stem("utbyggings"), "utbygging");});
test("utbyggingsalternativet -> utbyggingsalternativ", function() {deepEqual( Stem("utbyggingsalternativet"), "utbyggingsalternativ");});
test("utbyggingsbehov -> utbyggingsbehov", function() {deepEqual( Stem("utbyggingsbehov"), "utbyggingsbehov");});
test("utbyggingsform -> utbyggingsform", function() {deepEqual( Stem("utbyggingsform"), "utbyggingsform");});
test("utbyggingsgrad -> utbyggingsgrad", function() {deepEqual( Stem("utbyggingsgrad"), "utbyggingsgrad");});
test("utbyggingskostnader -> utbyggingskostnad", function() {deepEqual( Stem("utbyggingskostnader"), "utbyggingskostnad");});
test("utbyggingsmodell -> utbyggingsmodell", function() {deepEqual( Stem("utbyggingsmodell"), "utbyggingsmodell");});
test("utbyggingsmodellen -> utbyggingsmodell", function() {deepEqual( Stem("utbyggingsmodellen"), "utbyggingsmodell");});
test("utbyggingsmuligheter -> utbyggingsmu", function() {deepEqual( Stem("utbyggingsmuligheter"), "utbyggingsmu");});
test("utbyggingsmønsteret -> utbyggingsmønster", function() {deepEqual( Stem("utbyggingsmønsteret"), "utbyggingsmønster");});
test("utbyggingsområde -> utbyggingsområd", function() {deepEqual( Stem("utbyggingsområde"), "utbyggingsområd");});
test("utbyggingsplan -> utbyggingsplan", function() {deepEqual( Stem("utbyggingsplan"), "utbyggingsplan");});
test("utbyggingsplanene -> utbyggingsplan", function() {deepEqual( Stem("utbyggingsplanene"), "utbyggingsplan");});
test("utbyggingsplaner -> utbyggingsplan", function() {deepEqual( Stem("utbyggingsplaner"), "utbyggingsplan");});
test("utbyggingspotensiale -> utbyggingspotensial", function() {deepEqual( Stem("utbyggingspotensiale"), "utbyggingspotensial");});
test("utbyggingstakten -> utbyggingstakt", function() {deepEqual( Stem("utbyggingstakten"), "utbyggingstakt");});
test("utbyggingstiltak -> utbyggingstiltak", function() {deepEqual( Stem("utbyggingstiltak"), "utbyggingstiltak");});
test("utbyggjar -> utbyggj", function() {deepEqual( Stem("utbyggjar"), "utbyggj");});
test("utbyggjarane -> utbyggjar", function() {deepEqual( Stem("utbyggjarane"), "utbyggjar");});
test("utbyggjarar -> utbyggjar", function() {deepEqual( Stem("utbyggjarar"), "utbyggjar");});
test("utbyggjaren -> utbyggjar", function() {deepEqual( Stem("utbyggjaren"), "utbyggjar");});
test("utbyggjarrolle -> utbyggjarroll", function() {deepEqual( Stem("utbyggjarrolle"), "utbyggjarroll");});
test("utbyggjarsida -> utbyggjarsid", function() {deepEqual( Stem("utbyggjarsida"), "utbyggjarsid");});
test("utbyggjartilfella -> utbyggjartilfell", function() {deepEqual( Stem("utbyggjartilfella"), "utbyggjartilfell");});
test("utbygt -> utbygt", function() {deepEqual( Stem("utbygt"), "utbygt");});
test("utbyte -> utbyt", function() {deepEqual( Stem("utbyte"), "utbyt");});
test("utbytte -> utbytt", function() {deepEqual( Stem("utbytte"), "utbytt");});
test("utdanning -> utdanning", function() {deepEqual( Stem("utdanning"), "utdanning");});
test("utdeling -> utdeling", function() {deepEqual( Stem("utdeling"), "utdeling");});
test("utdelinga -> utdeling", function() {deepEqual( Stem("utdelinga"), "utdeling");});
test("utdelingane -> utdeling", function() {deepEqual( Stem("utdelingane"), "utdeling");});
test("utdelingar -> utdeling", function() {deepEqual( Stem("utdelingar"), "utdeling");});
test("utdelt -> utdelt", function() {deepEqual( Stem("utdelt"), "utdelt");});
test("utdelte -> utdelt", function() {deepEqual( Stem("utdelte"), "utdelt");});
test("utdrag -> utdrag", function() {deepEqual( Stem("utdrag"), "utdrag");});
test("utdypes -> utdyp", function() {deepEqual( Stem("utdypes"), "utdyp");});
test("utdyping -> utdyping", function() {deepEqual( Stem("utdyping"), "utdyping");});
test("utdypninger -> utdypning", function() {deepEqual( Stem("utdypninger"), "utdypning");});
test("ute -> ute", function() {deepEqual( Stem("ute"), "ute");});
test("uteanlegg -> uteanlegg", function() {deepEqual( Stem("uteanlegg"), "uteanlegg");});
test("uteareal -> uteareal", function() {deepEqual( Stem("uteareal"), "uteareal");});
test("utearealene -> uteareal", function() {deepEqual( Stem("utearealene"), "uteareal");});
test("utelukke -> utelukk", function() {deepEqual( Stem("utelukke"), "utelukk");});
test("utelukkende -> utelukk", function() {deepEqual( Stem("utelukkende"), "utelukk");});
test("utelukker -> utelukk", function() {deepEqual( Stem("utelukker"), "utelukk");});
test("utelukkes -> utelukk", function() {deepEqual( Stem("utelukkes"), "utelukk");});
test("utelukket -> utelukk", function() {deepEqual( Stem("utelukket"), "utelukk");});
test("uten -> uten", function() {deepEqual( Stem("uten"), "uten");});
test("utenfor -> utenfor", function() {deepEqual( Stem("utenfor"), "utenfor");});
test("utenfra -> utenfr", function() {deepEqual( Stem("utenfra"), "utenfr");});
test("utenlands -> utenland", function() {deepEqual( Stem("utenlands"), "utenland");});
test("utenlandsferjene -> utenlandsferj", function() {deepEqual( Stem("utenlandsferjene"), "utenlandsferj");});
test("utenlandsforbindelser -> utenlandsforbind", function() {deepEqual( Stem("utenlandsforbindelser"), "utenlandsforbind");});
test("utenlandsk -> utenlandsk", function() {deepEqual( Stem("utenlandsk"), "utenlandsk");});
test("utenlandske -> utenlandsk", function() {deepEqual( Stem("utenlandske"), "utenlandsk");});
test("utenlandstrafikk -> utenlandstrafikk", function() {deepEqual( Stem("utenlandstrafikk"), "utenlandstrafikk");});
test("utenleg -> uten", function() {deepEqual( Stem("utenleg"), "uten");});
test("utenom -> utenom", function() {deepEqual( Stem("utenom"), "utenom");});
test("utenriks -> utenriks", function() {deepEqual( Stem("utenriks"), "utenriks");});
test("utenriksfart -> utenriksfart", function() {deepEqual( Stem("utenriksfart"), "utenriksfart");});
test("utenrikshandel -> utenrikshandel", function() {deepEqual( Stem("utenrikshandel"), "utenrikshandel");});
test("utenrikshandelen -> utenrikshandel", function() {deepEqual( Stem("utenrikshandelen"), "utenrikshandel");});
test("utenrikshandelens -> utenrikshandel", function() {deepEqual( Stem("utenrikshandelens"), "utenrikshandel");});
test("utenrikshandelsstatistikk -> utenrikshandelsstatistikk", function() {deepEqual( Stem("utenrikshandelsstatistikk"), "utenrikshandelsstatistikk");});
test("utenrikshandelsstatistikken -> utenrikshandelsstatistikk", function() {deepEqual( Stem("utenrikshandelsstatistikken"), "utenrikshandelsstatistikk");});
test("utenrikshandelstransporter -> utenrikshandelstransport", function() {deepEqual( Stem("utenrikshandelstransporter"), "utenrikshandelstransport");});
test("utenrikshavn -> utenrikshavn", function() {deepEqual( Stem("utenrikshavn"), "utenrikshavn");});
test("utenrikstrafikk -> utenrikstrafikk", function() {deepEqual( Stem("utenrikstrafikk"), "utenrikstrafikk");});
test("utenrikstransporter -> utenrikstransport", function() {deepEqual( Stem("utenrikstransporter"), "utenrikstransport");});
test("uteområde -> uteområd", function() {deepEqual( Stem("uteområde"), "uteområd");});
test("utestengd -> utestengd", function() {deepEqual( Stem("utestengd"), "utestengd");});
test("utestenging -> utestenging", function() {deepEqual( Stem("utestenging"), "utestenging");});
test("utestenginga -> utestenging", function() {deepEqual( Stem("utestenginga"), "utestenging");});
test("utette -> utett", function() {deepEqual( Stem("utette"), "utett");});
test("utetter -> utett", function() {deepEqual( Stem("utetter"), "utett");});
test("utfalding -> utfalding", function() {deepEqual( Stem("utfalding"), "utfalding");});
test("utfall -> utfall", function() {deepEqual( Stem("utfall"), "utfall");});
test("utfallet -> utfall", function() {deepEqual( Stem("utfallet"), "utfall");});
test("utfart -> utfart", function() {deepEqual( Stem("utfart"), "utfart");});
test("utferda -> utferd", function() {deepEqual( Stem("utferda"), "utferd");});
test("utferdaren -> utferdar", function() {deepEqual( Stem("utferdaren"), "utferdar");});
test("utferdast -> utferd", function() {deepEqual( Stem("utferdast"), "utferd");});
test("utferde -> utferd", function() {deepEqual( Stem("utferde"), "utferd");});
test("utferdige -> utferd", function() {deepEqual( Stem("utferdige"), "utferd");});
test("utferding -> utferding", function() {deepEqual( Stem("utferding"), "utferding");});
test("utfisjonering -> utfisjonering", function() {deepEqual( Stem("utfisjonering"), "utfisjonering");});
test("utflytting -> utflytting", function() {deepEqual( Stem("utflytting"), "utflytting");});
test("utfor -> utfor", function() {deepEqual( Stem("utfor"), "utfor");});
test("utfordre -> utfordr", function() {deepEqual( Stem("utfordre"), "utfordr");});
test("utfordring -> utfordring", function() {deepEqual( Stem("utfordring"), "utfordring");});
test("utfordringen -> utfordring", function() {deepEqual( Stem("utfordringen"), "utfordring");});
test("utfordringene -> utfordring", function() {deepEqual( Stem("utfordringene"), "utfordring");});
test("utfordringer -> utfordring", function() {deepEqual( Stem("utfordringer"), "utfordring");});
test("utforma -> utform", function() {deepEqual( Stem("utforma"), "utform");});
test("utformast -> utform", function() {deepEqual( Stem("utformast"), "utform");});
test("utforme -> utform", function() {deepEqual( Stem("utforme"), "utform");});
test("utformer -> utform", function() {deepEqual( Stem("utformer"), "utform");});
test("utformes -> utform", function() {deepEqual( Stem("utformes"), "utform");});
test("utformet -> utform", function() {deepEqual( Stem("utformet"), "utform");});
test("utforming -> utforming", function() {deepEqual( Stem("utforming"), "utforming");});
test("utforminga -> utforming", function() {deepEqual( Stem("utforminga"), "utforming");});
test("utformingen -> utforming", function() {deepEqual( Stem("utformingen"), "utforming");});
test("utformingene -> utforming", function() {deepEqual( Stem("utformingene"), "utforming");});
test("utforminger -> utforming", function() {deepEqual( Stem("utforminger"), "utforming");});
test("utfyllande -> utfyll", function() {deepEqual( Stem("utfyllande"), "utfyll");});
test("utfyllende -> utfyll", function() {deepEqual( Stem("utfyllende"), "utfyll");});
test("utfyller -> utfyll", function() {deepEqual( Stem("utfyller"), "utfyll");});
test("utfylles -> utfyll", function() {deepEqual( Stem("utfylles"), "utfyll");});
test("utfylling -> utfylling", function() {deepEqual( Stem("utfylling"), "utfylling");});
test("utfyllingene -> utfylling", function() {deepEqual( Stem("utfyllingene"), "utfylling");});
test("utfyllinger -> utfylling", function() {deepEqual( Stem("utfyllinger"), "utfylling");});
test("utfyllingsområde -> utfyllingsområd", function() {deepEqual( Stem("utfyllingsområde"), "utfyllingsområd");});
test("utførande -> utfør", function() {deepEqual( Stem("utførande"), "utfør");});
test("utførast -> utfør", function() {deepEqual( Stem("utførast"), "utfør");});
test("utføre -> utfør", function() {deepEqual( Stem("utføre"), "utfør");});
test("utførelse -> utfør", function() {deepEqual( Stem("utførelse"), "utfør");});
test("utfører -> utfør", function() {deepEqual( Stem("utfører"), "utfør");});
test("utføres -> utfør", function() {deepEqual( Stem("utføres"), "utfør");});
test("utføring -> utføring", function() {deepEqual( Stem("utføring"), "utføring");});
test("utføringa -> utføring", function() {deepEqual( Stem("utføringa"), "utføring");});
test("utførleg -> utfør", function() {deepEqual( Stem("utførleg"), "utfør");});
test("utførlege -> utfør", function() {deepEqual( Stem("utførlege"), "utfør");});
test("utført -> utført", function() {deepEqual( Stem("utført"), "utført");});
test("utgang -> utgang", function() {deepEqual( Stem("utgang"), "utgang");});
test("utgangen -> utgang", function() {deepEqual( Stem("utgangen"), "utgang");});
test("utgangspunkt -> utgangspunkt", function() {deepEqual( Stem("utgangspunkt"), "utgangspunkt");});
test("utgangspunktet -> utgangspunkt", function() {deepEqual( Stem("utgangspunktet"), "utgangspunkt");});
test("utgard -> utgard", function() {deepEqual( Stem("utgard"), "utgard");});
test("utgiften -> utgift", function() {deepEqual( Stem("utgiften"), "utgift");});
test("utgiftene -> utgift", function() {deepEqual( Stem("utgiftene"), "utgift");});
test("utgifter -> utgift", function() {deepEqual( Stem("utgifter"), "utgift");});
test("utgiftsføres -> utgiftsfør", function() {deepEqual( Stem("utgiftsføres"), "utgiftsfør");});
test("utgiftsgodtgjørelser -> utgiftsgodtgjør", function() {deepEqual( Stem("utgiftsgodtgjørelser"), "utgiftsgodtgjør");});
test("utgiftsmønsteret -> utgiftsmønster", function() {deepEqual( Stem("utgiftsmønsteret"), "utgiftsmønster");});
test("utgitt -> utgitt", function() {deepEqual( Stem("utgitt"), "utgitt");});
test("utgivelse -> utgiv", function() {deepEqual( Stem("utgivelse"), "utgiv");});
test("utgjer -> utgj", function() {deepEqual( Stem("utgjer"), "utgj");});
test("utgjere -> utgjer", function() {deepEqual( Stem("utgjere"), "utgjer");});
test("utgjeven -> utgjev", function() {deepEqual( Stem("utgjeven"), "utgjev");});
test("utgjorde -> utgjord", function() {deepEqual( Stem("utgjorde"), "utgjord");});
test("utgjort -> utgjort", function() {deepEqual( Stem("utgjort"), "utgjort");});
test("utgjør -> utgjør", function() {deepEqual( Stem("utgjør"), "utgjør");});
test("utgjøre -> utgjør", function() {deepEqual( Stem("utgjøre"), "utgjør");});
test("utgjøres -> utgjør", function() {deepEqual( Stem("utgjøres"), "utgjør");});
test("utgreiing -> utgreiing", function() {deepEqual( Stem("utgreiing"), "utgreiing");});
test("utgreiinga -> utgreiing", function() {deepEqual( Stem("utgreiinga"), "utgreiing");});
test("utgreiingar -> utgreiing", function() {deepEqual( Stem("utgreiingar"), "utgreiing");});
test("utgå -> utgå", function() {deepEqual( Stem("utgå"), "utgå");});
test("utgående -> utgå", function() {deepEqual( Stem("utgående"), "utgå");});
test("utgår -> utgår", function() {deepEqual( Stem("utgår"), "utgår");});
test("utgått -> utgått", function() {deepEqual( Stem("utgått"), "utgått");});
test("utholing -> utholing", function() {deepEqual( Stem("utholing"), "utholing");});
test("utilfredsstillende -> utilfredsstill", function() {deepEqual( Stem("utilfredsstillende"), "utilfredsstill");});
test("utilsiktede -> utilsikt", function() {deepEqual( Stem("utilsiktede"), "utilsikt");});
test("utilsiktet -> utilsikt", function() {deepEqual( Stem("utilsiktet"), "utilsikt");});
test("utjamningsmeldinga -> utjamningsmelding", function() {deepEqual( Stem("utjamningsmeldinga"), "utjamningsmelding");});
test("utjevne -> utjevn", function() {deepEqual( Stem("utjevne"), "utjevn");});
test("utjevner -> utjevn", function() {deepEqual( Stem("utjevner"), "utjevn");});
test("utjevnes -> utjevn", function() {deepEqual( Stem("utjevnes"), "utjevn");});
test("utjevning -> utjevning", function() {deepEqual( Stem("utjevning"), "utjevning");});
test("utjevningsbehovet -> utjevningsbehov", function() {deepEqual( Stem("utjevningsbehovet"), "utjevningsbehov");});
test("utkanten -> utkant", function() {deepEqual( Stem("utkanten"), "utkant");});
test("utkantområde -> utkantområd", function() {deepEqual( Stem("utkantområde"), "utkantområd");});
test("utkast -> utk", function() {deepEqual( Stem("utkast"), "utk");});
test("utkasta -> utkast", function() {deepEqual( Stem("utkasta"), "utkast");});
test("utkastet -> utkast", function() {deepEqual( Stem("utkastet"), "utkast");});
test("utkastets -> utkast", function() {deepEqual( Stem("utkastets"), "utkast");});
test("utkasting -> utkasting", function() {deepEqual( Stem("utkasting"), "utkasting");});
test("utkastingssaker -> utkastingssak", function() {deepEqual( Stem("utkastingssaker"), "utkastingssak");});
test("utkjøring -> utkjøring", function() {deepEqual( Stem("utkjøring"), "utkjøring");});
test("utland -> utland", function() {deepEqual( Stem("utland"), "utland");});
test("utlandet -> utland", function() {deepEqual( Stem("utlandet"), "utland");});
test("utlegg -> utlegg", function() {deepEqual( Stem("utlegg"), "utlegg");});
test("utlegget -> utlegg", function() {deepEqual( Stem("utlegget"), "utlegg");});
test("utlegging -> utlegging", function() {deepEqual( Stem("utlegging"), "utlegging");});
test("utleggspant -> utleggspant", function() {deepEqual( Stem("utleggspant"), "utleggspant");});
test("utleggstakaren -> utleggstakar", function() {deepEqual( Stem("utleggstakaren"), "utleggstakar");});
test("utleid -> utleid", function() {deepEqual( Stem("utleid"), "utleid");});
test("utleidd -> utleidd", function() {deepEqual( Stem("utleidd"), "utleidd");});
test("utleidde -> utleidd", function() {deepEqual( Stem("utleidde"), "utleidd");});
test("utleie -> utlei", function() {deepEqual( Stem("utleie"), "utlei");});
test("utleieren -> utleier", function() {deepEqual( Stem("utleieren"), "utleier");});
test("utleiga -> utl", function() {deepEqual( Stem("utleiga"), "utl");});
test("utleigar -> utl", function() {deepEqual( Stem("utleigar"), "utl");});
test("utleigarar -> utleigar", function() {deepEqual( Stem("utleigarar"), "utleigar");});
test("utleigaren -> utleigar", function() {deepEqual( Stem("utleigaren"), "utleigar");});
test("utleigarselskap -> utleigarselskap", function() {deepEqual( Stem("utleigarselskap"), "utleigarselskap");});
test("utleigd -> utleigd", function() {deepEqual( Stem("utleigd"), "utleigd");});
test("utleige -> utl", function() {deepEqual( Stem("utleige"), "utl");});
test("utleigebustad -> utleigebustad", function() {deepEqual( Stem("utleigebustad"), "utleigebustad");});
test("utleigebustadene -> utleigebustad", function() {deepEqual( Stem("utleigebustadene"), "utleigebustad");});
test("utleigebustader -> utleigebustad", function() {deepEqual( Stem("utleigebustader"), "utleigebustad");});
test("utleigebygg -> utleigebygg", function() {deepEqual( Stem("utleigebygg"), "utleigebygg");});
test("utleigeeigdom -> utleigeeigdom", function() {deepEqual( Stem("utleigeeigdom"), "utleigeeigdom");});
test("utleigeeigedom -> utleigeeigedom", function() {deepEqual( Stem("utleigeeigedom"), "utleigeeigedom");});
test("utleigeeigedommar -> utleigeeigedomm", function() {deepEqual( Stem("utleigeeigedommar"), "utleigeeigedomm");});
test("utleigemodellar -> utleigemodell", function() {deepEqual( Stem("utleigemodellar"), "utleigemodell");});
test("utleigeobjekt -> utleigeobjekt", function() {deepEqual( Stem("utleigeobjekt"), "utleigeobjekt");});
test("utleigeselskap -> utleigeselskap", function() {deepEqual( Stem("utleigeselskap"), "utleigeselskap");});
test("utleigeverksemd -> utleigeverksemd", function() {deepEqual( Stem("utleigeverksemd"), "utleigeverksemd");});
test("utleigeverksemda -> utleigeverksemd", function() {deepEqual( Stem("utleigeverksemda"), "utleigeverksemd");});
test("utlikner -> utlikn", function() {deepEqual( Stem("utlikner"), "utlikn");});
test("utlikninga -> utlikning", function() {deepEqual( Stem("utlikninga"), "utlikning");});
test("utlån -> utlån", function() {deepEqual( Stem("utlån"), "utlån");});
test("utlåna -> utlån", function() {deepEqual( Stem("utlåna"), "utlån");});
test("utlånaren -> utlånar", function() {deepEqual( Stem("utlånaren"), "utlånar");});
test("utlånsordningane -> utlånsordning", function() {deepEqual( Stem("utlånsordningane"), "utlånsordning");});
test("utlånsverksemd -> utlånsverksemd", function() {deepEqual( Stem("utlånsverksemd"), "utlånsverksemd");});
test("utløp -> utløp", function() {deepEqual( Stem("utløp"), "utløp");});
test("utløpet -> utløp", function() {deepEqual( Stem("utløpet"), "utløp");});
test("utløse -> utløs", function() {deepEqual( Stem("utløse"), "utløs");});
test("utløser -> utløs", function() {deepEqual( Stem("utløser"), "utløs");});
test("utløses -> utløs", function() {deepEqual( Stem("utløses"), "utløs");});
test("utløst -> utløst", function() {deepEqual( Stem("utløst"), "utløst");});
test("utløyser -> utløys", function() {deepEqual( Stem("utløyser"), "utløys");});
test("utløysing -> utløysing", function() {deepEqual( Stem("utløysing"), "utløysing");});
test("utløysinga -> utløysing", function() {deepEqual( Stem("utløysinga"), "utløysing");});
test("utløysingsgrunnen -> utløysingsgrunn", function() {deepEqual( Stem("utløysingsgrunnen"), "utløysingsgrunn");});
test("utløysingsregel -> utløysingsregel", function() {deepEqual( Stem("utløysingsregel"), "utløysingsregel");});
test("utløysingssaka -> utløysingssak", function() {deepEqual( Stem("utløysingssaka"), "utløysingssak");});
test("utløysingssummen -> utløysingssumm", function() {deepEqual( Stem("utløysingssummen"), "utløysingssumm");});
test("utløyst -> utløyst", function() {deepEqual( Stem("utløyst"), "utløyst");});
test("utmarkande -> utmark", function() {deepEqual( Stem("utmarkande"), "utmark");});
test("utmattet -> utmatt", function() {deepEqual( Stem("utmattet"), "utmatt");});
test("utmeldelse -> utmeld", function() {deepEqual( Stem("utmeldelse"), "utmeld");});
test("utmelding -> utmelding", function() {deepEqual( Stem("utmelding"), "utmelding");});
test("utmeldinga -> utmelding", function() {deepEqual( Stem("utmeldinga"), "utmelding");});
test("utmerket -> utmerk", function() {deepEqual( Stem("utmerket"), "utmerk");});
test("utmåles -> utmål", function() {deepEqual( Stem("utmåles"), "utmål");});
test("utmålinga -> utmåling", function() {deepEqual( Stem("utmålinga"), "utmåling");});
test("utnytta -> utnytt", function() {deepEqual( Stem("utnytta"), "utnytt");});
test("utnytte -> utnytt", function() {deepEqual( Stem("utnytte"), "utnytt");});
test("utnyttelse -> utnytt", function() {deepEqual( Stem("utnyttelse"), "utnytt");});
test("utnyttelsen -> utnytt", function() {deepEqual( Stem("utnyttelsen"), "utnytt");});
test("utnyttelsesgrad -> utnyttelsesgrad", function() {deepEqual( Stem("utnyttelsesgrad"), "utnyttelsesgrad");});
test("utnyttes -> utnytt", function() {deepEqual( Stem("utnyttes"), "utnytt");});
test("utnytting -> utnytting", function() {deepEqual( Stem("utnytting"), "utnytting");});
test("utnyttinga -> utnytting", function() {deepEqual( Stem("utnyttinga"), "utnytting");});
test("utover -> utov", function() {deepEqual( Stem("utover"), "utov");});
test("utpeiking -> utpeiking", function() {deepEqual( Stem("utpeiking"), "utpeiking");});
test("utpeikte -> utpeikt", function() {deepEqual( Stem("utpeikte"), "utpeikt");});
test("utpekt -> utpekt", function() {deepEqual( Stem("utpekt"), "utpekt");});
test("utpenslinga -> utpensling", function() {deepEqual( Stem("utpenslinga"), "utpensling");});
test("utporsjoneres -> utporsjoner", function() {deepEqual( Stem("utporsjoneres"), "utporsjoner");});
test("utprøving -> utprøving", function() {deepEqual( Stem("utprøving"), "utprøving");});
test("utpå -> utpå", function() {deepEqual( Stem("utpå"), "utpå");});
test("utrasing -> utrasing", function() {deepEqual( Stem("utrasing"), "utrasing");});
test("utrede -> utr", function() {deepEqual( Stem("utrede"), "utr");});
test("utredes -> utr", function() {deepEqual( Stem("utredes"), "utr");});
test("utredet -> utred", function() {deepEqual( Stem("utredet"), "utred");});
test("utredning -> utredning", function() {deepEqual( Stem("utredning"), "utredning");});
test("utredningen -> utredning", function() {deepEqual( Stem("utredningen"), "utredning");});
test("utredningens -> utredning", function() {deepEqual( Stem("utredningens"), "utredning");});
test("utredninger -> utredning", function() {deepEqual( Stem("utredninger"), "utredning");});
test("utredningsarbeid -> utredningsarbeid", function() {deepEqual( Stem("utredningsarbeid"), "utredningsarbeid");});
test("utredningsarbeider -> utredningsarbeid", function() {deepEqual( Stem("utredningsarbeider"), "utredningsarbeid");});
test("utredningsbehov -> utredningsbehov", function() {deepEqual( Stem("utredningsbehov"), "utredningsbehov");});
test("utredningsinstruksen -> utredningsinstruks", function() {deepEqual( Stem("utredningsinstruksen"), "utredningsinstruks");});
test("utredningsplikten -> utredningsplikt", function() {deepEqual( Stem("utredningsplikten"), "utredningsplikt");});
test("utredningsprosjekter -> utredningsprosjekt", function() {deepEqual( Stem("utredningsprosjekter"), "utredningsprosjekt");});
test("utrenet -> utren", function() {deepEqual( Stem("utrenet"), "utren");});
test("utro -> utro", function() {deepEqual( Stem("utro"), "utro");});
test("utrolig -> utro", function() {deepEqual( Stem("utrolig"), "utro");});
test("utrolige -> utro", function() {deepEqual( Stem("utrolige"), "utro");});
test("utrustning -> utrustning", function() {deepEqual( Stem("utrustning"), "utrustning");});
test("utrygg -> utrygg", function() {deepEqual( Stem("utrygg"), "utrygg");});
test("utrygge -> utrygg", function() {deepEqual( Stem("utrygge"), "utrygg");});
test("utrygt -> utrygt", function() {deepEqual( Stem("utrygt"), "utrygt");});
test("utrådt -> utråd", function() {deepEqual( Stem("utrådt"), "utråd");});
test("utrøstelig -> utrøst", function() {deepEqual( Stem("utrøstelig"), "utrøst");});
test("utsagn -> utsagn", function() {deepEqual( Stem("utsagn"), "utsagn");});
test("utsatt -> utsatt", function() {deepEqual( Stem("utsatt"), "utsatt");});
test("utseende -> utse", function() {deepEqual( Stem("utseende"), "utse");});
test("utseendet -> utseend", function() {deepEqual( Stem("utseendet"), "utseend");});
test("utsetjande -> utsetj", function() {deepEqual( Stem("utsetjande"), "utsetj");});
test("utsetje -> utsetj", function() {deepEqual( Stem("utsetje"), "utsetj");});
test("utsett -> utsett", function() {deepEqual( Stem("utsett"), "utsett");});
test("utsette -> utsett", function() {deepEqual( Stem("utsette"), "utsett");});
test("utsettelse -> utsett", function() {deepEqual( Stem("utsettelse"), "utsett");});
test("utsettes -> utsett", function() {deepEqual( Stem("utsettes"), "utsett");});
test("utsikt -> utsikt", function() {deepEqual( Stem("utsikt"), "utsikt");});
test("utsiktene -> utsikt", function() {deepEqual( Stem("utsiktene"), "utsikt");});
test("utsikter -> utsikt", function() {deepEqual( Stem("utsikter"), "utsikt");});
test("utskifting -> utskifting", function() {deepEqual( Stem("utskifting"), "utskifting");});
test("utskiftingar -> utskifting", function() {deepEqual( Stem("utskiftingar"), "utskifting");});
test("utskiljing -> utskiljing", function() {deepEqual( Stem("utskiljing"), "utskiljing");});
test("utskillelse -> utskill", function() {deepEqual( Stem("utskillelse"), "utskill");});
test("utskillelsen -> utskill", function() {deepEqual( Stem("utskillelsen"), "utskill");});
test("utskilles -> utskill", function() {deepEqual( Stem("utskilles"), "utskill");});
test("utskilling -> utskilling", function() {deepEqual( Stem("utskilling"), "utskilling");});
test("utskilt -> utskilt", function() {deepEqual( Stem("utskilt"), "utskilt");});
test("utskilte -> utskilt", function() {deepEqual( Stem("utskilte"), "utskilt");});
test("utskiping -> utskiping", function() {deepEqual( Stem("utskiping"), "utskiping");});
test("utskjemt -> utskjemt", function() {deepEqual( Stem("utskjemt"), "utskjemt");});
test("utskrift -> utskrift", function() {deepEqual( Stem("utskrift"), "utskrift");});
test("utskriving -> utskriving", function() {deepEqual( Stem("utskriving"), "utskriving");});
test("utskårne -> utskårn", function() {deepEqual( Stem("utskårne"), "utskårn");});
test("utslag -> utslag", function() {deepEqual( Stem("utslag"), "utslag");});
test("utslaget -> utslag", function() {deepEqual( Stem("utslaget"), "utslag");});
test("utslagsgivende -> utslagsgiv", function() {deepEqual( Stem("utslagsgivende"), "utslagsgiv");});
test("utslipp -> utslipp", function() {deepEqual( Stem("utslipp"), "utslipp");});
test("utslippskostnader -> utslippskostnad", function() {deepEqual( Stem("utslippskostnader"), "utslippskostnad");});
test("utslått -> utslått", function() {deepEqual( Stem("utslått"), "utslått");});
test("utslåtte -> utslått", function() {deepEqual( Stem("utslåtte"), "utslått");});
test("utspring -> utspring", function() {deepEqual( Stem("utspring"), "utspring");});
test("utstede -> utst", function() {deepEqual( Stem("utstede"), "utst");});
test("utstedelse -> utsted", function() {deepEqual( Stem("utstedelse"), "utsted");});
test("utsteder -> utsted", function() {deepEqual( Stem("utsteder"), "utsted");});
test("utstedes -> utst", function() {deepEqual( Stem("utstedes"), "utst");});
test("utstedt -> utsted", function() {deepEqual( Stem("utstedt"), "utsted");});
test("utstengd -> utstengd", function() {deepEqual( Stem("utstengd"), "utstengd");});
test("utstenging -> utstenging", function() {deepEqual( Stem("utstenging"), "utstenging");});
test("utstenginga -> utstenging", function() {deepEqual( Stem("utstenginga"), "utstenging");});
test("utstoppete -> utstoppet", function() {deepEqual( Stem("utstoppete"), "utstoppet");});
test("utstrakt -> utstrakt", function() {deepEqual( Stem("utstrakt"), "utstrakt");});
test("utstrekning -> utstrekning", function() {deepEqual( Stem("utstrekning"), "utstrekning");});
test("utstyr -> utstyr", function() {deepEqual( Stem("utstyr"), "utstyr");});
test("utstyres -> utstyr", function() {deepEqual( Stem("utstyres"), "utstyr");});
test("utstyret -> utstyr", function() {deepEqual( Stem("utstyret"), "utstyr");});
test("utsyn -> utsyn", function() {deepEqual( Stem("utsyn"), "utsyn");});
test("uttak -> uttak", function() {deepEqual( Stem("uttak"), "uttak");});
test("uttala -> uttal", function() {deepEqual( Stem("uttala"), "uttal");});
test("uttale -> uttal", function() {deepEqual( Stem("uttale"), "uttal");});
test("uttalelse -> uttal", function() {deepEqual( Stem("uttalelse"), "uttal");});
test("uttalelser -> uttal", function() {deepEqual( Stem("uttalelser"), "uttal");});
test("uttaler -> uttal", function() {deepEqual( Stem("uttaler"), "uttal");});
test("uttalt -> uttalt", function() {deepEqual( Stem("uttalt"), "uttalt");});
test("uttalte -> uttalt", function() {deepEqual( Stem("uttalte"), "uttalt");});
test("uttrade -> uttrad", function() {deepEqual( Stem("uttrade"), "uttrad");});
test("uttransport -> uttransport", function() {deepEqual( Stem("uttransport"), "uttransport");});
test("uttreden -> uttred", function() {deepEqual( Stem("uttreden"), "uttred");});
test("uttrykk -> uttrykk", function() {deepEqual( Stem("uttrykk"), "uttrykk");});
test("uttrykkelig -> uttrykk", function() {deepEqual( Stem("uttrykkelig"), "uttrykk");});
test("uttrykkene -> uttrykk", function() {deepEqual( Stem("uttrykkene"), "uttrykk");});
test("uttrykker -> uttrykk", function() {deepEqual( Stem("uttrykker"), "uttrykk");});
test("uttrykket -> uttrykk", function() {deepEqual( Stem("uttrykket"), "uttrykk");});
test("uttrykt -> uttrykt", function() {deepEqual( Stem("uttrykt"), "uttrykt");});
test("uttømmande -> uttømm", function() {deepEqual( Stem("uttømmande"), "uttømm");});
test("uttømmende -> uttømm", function() {deepEqual( Stem("uttømmende"), "uttømm");});
test("utval -> utval", function() {deepEqual( Stem("utval"), "utval");});
test("utvala -> utval", function() {deepEqual( Stem("utvala"), "utval");});
test("utvalet -> utval", function() {deepEqual( Stem("utvalet"), "utval");});
test("utvalets -> utval", function() {deepEqual( Stem("utvalets"), "utval");});
test("utvalg -> utvalg", function() {deepEqual( Stem("utvalg"), "utvalg");});
test("utvalget -> utvalg", function() {deepEqual( Stem("utvalget"), "utvalg");});
test("utvalgets -> utvalg", function() {deepEqual( Stem("utvalgets"), "utvalg");});
test("utvalgsarbeid -> utvalgsarbeid", function() {deepEqual( Stem("utvalgsarbeid"), "utvalgsarbeid");});
test("utvalgsarbeidet -> utvalgsarbeid", function() {deepEqual( Stem("utvalgsarbeidet"), "utvalgsarbeid");});
test("utvalgsundersøkelse -> utvalgsundersøk", function() {deepEqual( Stem("utvalgsundersøkelse"), "utvalgsundersøk");});
test("utvalgte -> utvalgt", function() {deepEqual( Stem("utvalgte"), "utvalgt");});
test("utvalsmedlemmene -> utvalsmedlemm", function() {deepEqual( Stem("utvalsmedlemmene"), "utvalsmedlemm");});
test("utvalsmedlemmer -> utvalsmedlemm", function() {deepEqual( Stem("utvalsmedlemmer"), "utvalsmedlemm");});
test("utvatna -> utvatn", function() {deepEqual( Stem("utvatna"), "utvatn");});
test("utveg -> utveg", function() {deepEqual( Stem("utveg"), "utveg");});
test("utvegen -> utveg", function() {deepEqual( Stem("utvegen"), "utveg");});
test("utvei -> utvei", function() {deepEqual( Stem("utvei"), "utvei");});
test("utvendig -> utvend", function() {deepEqual( Stem("utvendig"), "utvend");});
test("utvida -> utvid", function() {deepEqual( Stem("utvida"), "utvid");});
test("utvide -> utvid", function() {deepEqual( Stem("utvide"), "utvid");});
test("utvidede -> utvid", function() {deepEqual( Stem("utvidede"), "utvid");});
test("utvidelse -> utvid", function() {deepEqual( Stem("utvidelse"), "utvid");});
test("utvidelsen -> utvid", function() {deepEqual( Stem("utvidelsen"), "utvid");});
test("utvidelser -> utvid", function() {deepEqual( Stem("utvidelser"), "utvid");});
test("utvidelsesmuligheter -> utvidelsesmu", function() {deepEqual( Stem("utvidelsesmuligheter"), "utvidelsesmu");});
test("utvidelsesplanene -> utvidelsesplan", function() {deepEqual( Stem("utvidelsesplanene"), "utvidelsesplan");});
test("utvidelsesplaner -> utvidelsesplan", function() {deepEqual( Stem("utvidelsesplaner"), "utvidelsesplan");});
test("utvidelsespotensiale -> utvidelsespotensial", function() {deepEqual( Stem("utvidelsespotensiale"), "utvidelsespotensial");});
test("utvidelsestrinnet -> utvidelsestrinn", function() {deepEqual( Stem("utvidelsestrinnet"), "utvidelsestrinn");});
test("utvider -> utvid", function() {deepEqual( Stem("utvider"), "utvid");});
test("utvides -> utvid", function() {deepEqual( Stem("utvides"), "utvid");});
test("utvidet -> utvid", function() {deepEqual( Stem("utvidet"), "utvid");});
test("utvidete -> utvidet", function() {deepEqual( Stem("utvidete"), "utvidet");});
test("utvidingar -> utviding", function() {deepEqual( Stem("utvidingar"), "utviding");});
test("utvikla -> utvikl", function() {deepEqual( Stem("utvikla"), "utvikl");});
test("utvikle -> utvikl", function() {deepEqual( Stem("utvikle"), "utvikl");});
test("utvikler -> utvikl", function() {deepEqual( Stem("utvikler"), "utvikl");});
test("utvikles -> utvikl", function() {deepEqual( Stem("utvikles"), "utvikl");});
test("utviklet -> utvikl", function() {deepEqual( Stem("utviklet"), "utvikl");});
test("utvikling -> utvikling", function() {deepEqual( Stem("utvikling"), "utvikling");});
test("utviklinga -> utvikling", function() {deepEqual( Stem("utviklinga"), "utvikling");});
test("utviklingen -> utvikling", function() {deepEqual( Stem("utviklingen"), "utvikling");});
test("utviklingpotensiale -> utviklingpotensial", function() {deepEqual( Stem("utviklingpotensiale"), "utviklingpotensial");});
test("utviklingsbaner -> utviklingsban", function() {deepEqual( Stem("utviklingsbaner"), "utviklingsban");});
test("utviklingsforløp -> utviklingsforløp", function() {deepEqual( Stem("utviklingsforløp"), "utviklingsforløp");});
test("utviklingsmuligheter -> utviklingsmu", function() {deepEqual( Stem("utviklingsmuligheter"), "utviklingsmu");});
test("utviklingsområder -> utviklingsområd", function() {deepEqual( Stem("utviklingsområder"), "utviklingsområd");});
test("utviklingsplan -> utviklingsplan", function() {deepEqual( Stem("utviklingsplan"), "utviklingsplan");});
test("utviklingsplanene -> utviklingsplan", function() {deepEqual( Stem("utviklingsplanene"), "utviklingsplan");});
test("utviklingsplaner -> utviklingsplan", function() {deepEqual( Stem("utviklingsplaner"), "utviklingsplan");});
test("utviklingsprosjekt -> utviklingsprosjekt", function() {deepEqual( Stem("utviklingsprosjekt"), "utviklingsprosjekt");});
test("utviklingstendens -> utviklingstend", function() {deepEqual( Stem("utviklingstendens"), "utviklingstend");});
test("utviklingstendenser -> utviklingstendens", function() {deepEqual( Stem("utviklingstendenser"), "utviklingstendens");});
test("utviklingstrekk -> utviklingstrekk", function() {deepEqual( Stem("utviklingstrekk"), "utviklingstrekk");});
test("utvise -> utvis", function() {deepEqual( Stem("utvise"), "utvis");});
test("utviska -> utvisk", function() {deepEqual( Stem("utviska"), "utvisk");});
test("utydelig -> utyd", function() {deepEqual( Stem("utydelig"), "utyd");});
test("utyskene -> utysk", function() {deepEqual( Stem("utyskene"), "utysk");});
test("utysket -> utysk", function() {deepEqual( Stem("utysket"), "utysk");});
test("utålmodig -> utålmod", function() {deepEqual( Stem("utålmodig"), "utålmod");});
test("utøvande -> utøv", function() {deepEqual( Stem("utøvande"), "utøv");});
test("utøvast -> utøv", function() {deepEqual( Stem("utøvast"), "utøv");});
test("utøve -> utøv", function() {deepEqual( Stem("utøve"), "utøv");});
test("utøvelse -> utøv", function() {deepEqual( Stem("utøvelse"), "utøv");});
test("utøvelsen -> utøv", function() {deepEqual( Stem("utøvelsen"), "utøv");});
test("utøver -> utøv", function() {deepEqual( Stem("utøver"), "utøv");});
test("utøves -> utøv", function() {deepEqual( Stem("utøves"), "utøv");});
test("utøvinga -> utøving", function() {deepEqual( Stem("utøvinga"), "utøving");});
test("uvand -> uvand", function() {deepEqual( Stem("uvand"), "uvand");});
test("uvanleg -> uvan", function() {deepEqual( Stem("uvanleg"), "uvan");});
test("uvanlege -> uvan", function() {deepEqual( Stem("uvanlege"), "uvan");});
test("uvanlig -> uvan", function() {deepEqual( Stem("uvanlig"), "uvan");});
test("uvant -> uvant", function() {deepEqual( Stem("uvant"), "uvant");});
test("uvedkomande -> uvedkom", function() {deepEqual( Stem("uvedkomande"), "uvedkom");});
test("uvenns -> uvenn", function() {deepEqual( Stem("uvenns"), "uvenn");});
test("uventa -> uvent", function() {deepEqual( Stem("uventa"), "uvent");});
test("uventede -> uvent", function() {deepEqual( Stem("uventede"), "uvent");});
test("uventet -> uvent", function() {deepEqual( Stem("uventet"), "uvent");});
test("uver -> uver", function() {deepEqual( Stem("uver"), "uver");});
test("uvesentleg -> uvesent", function() {deepEqual( Stem("uvesentleg"), "uvesent");});
test("uvisse -> uviss", function() {deepEqual( Stem("uvisse"), "uviss");});
test("uvisshet -> uviss", function() {deepEqual( Stem("uvisshet"), "uviss");});
test("uværet -> uvær", function() {deepEqual( Stem("uværet"), "uvær");});
test("v -> v", function() {deepEqual( Stem("v"), "v");});
test("vader -> vad", function() {deepEqual( Stem("vader"), "vad");});
test("vagger -> vagg", function() {deepEqual( Stem("vagger"), "vagg");});
test("vagt -> vagt", function() {deepEqual( Stem("vagt"), "vagt");});
test("vakker -> vakk", function() {deepEqual( Stem("vakker"), "vakk");});
test("vakkert -> vakker", function() {deepEqual( Stem("vakkert"), "vakker");});
test("vakler -> vakl", function() {deepEqual( Stem("vakler"), "vakl");});
test("vakre -> vakr", function() {deepEqual( Stem("vakre"), "vakr");});
test("vakrere -> vakrer", function() {deepEqual( Stem("vakrere"), "vakrer");});
test("vakreste -> vakrest", function() {deepEqual( Stem("vakreste"), "vakrest");});
test("vakse -> vaks", function() {deepEqual( Stem("vakse"), "vaks");});
test("vakt -> vakt", function() {deepEqual( Stem("vakt"), "vakt");});
test("vakter -> vakt", function() {deepEqual( Stem("vakter"), "vakt");});
test("vaktmann -> vaktmann", function() {deepEqual( Stem("vaktmann"), "vaktmann");});
test("vaktmeistertenester -> vaktmeistertenest", function() {deepEqual( Stem("vaktmeistertenester"), "vaktmeistertenest");});
test("vaktmenn -> vaktmenn", function() {deepEqual( Stem("vaktmenn"), "vaktmenn");});
test("vaktmester -> vaktmest", function() {deepEqual( Stem("vaktmester"), "vaktmest");});
test("vaktpost -> vaktpost", function() {deepEqual( Stem("vaktpost"), "vaktpost");});
test("vaktsomme -> vaktsomm", function() {deepEqual( Stem("vaktsomme"), "vaktsomm");});
test("vakttårnet -> vakttårn", function() {deepEqual( Stem("vakttårnet"), "vakttårn");});
test("val -> val", function() {deepEqual( Stem("val"), "val");});
test("vald -> vald", function() {deepEqual( Stem("vald"), "vald");});
test("valda -> vald", function() {deepEqual( Stem("valda"), "vald");});
test("valdar -> vald", function() {deepEqual( Stem("valdar"), "vald");});
test("valde -> vald", function() {deepEqual( Stem("valde"), "vald");});
test("vale -> val", function() {deepEqual( Stem("vale"), "val");});
test("valet -> val", function() {deepEqual( Stem("valet"), "val");});
test("valfridom -> valfridom", function() {deepEqual( Stem("valfridom"), "valfridom");});
test("valfridommen -> valfridomm", function() {deepEqual( Stem("valfridommen"), "valfridomm");});
test("valg -> valg", function() {deepEqual( Stem("valg"), "valg");});
test("valgene -> valg", function() {deepEqual( Stem("valgene"), "valg");});
test("valget -> valg", function() {deepEqual( Stem("valget"), "valg");});
test("valgfrihet -> valgfri", function() {deepEqual( Stem("valgfrihet"), "valgfri");});
test("valgfritt -> valgfritt", function() {deepEqual( Stem("valgfritt"), "valgfritt");});
test("valgmulighetene -> valgmu", function() {deepEqual( Stem("valgmulighetene"), "valgmu");});
test("valgmuligheter -> valgmu", function() {deepEqual( Stem("valgmuligheter"), "valgmu");});
test("valgrett -> valgrett", function() {deepEqual( Stem("valgrett"), "valgrett");});
test("valgt -> valgt", function() {deepEqual( Stem("valgt"), "valgt");});
test("valgte -> valgt", function() {deepEqual( Stem("valgte"), "valgt");});
test("valhall -> valhall", function() {deepEqual( Stem("valhall"), "valhall");});
test("valkomite -> valkomit", function() {deepEqual( Stem("valkomite"), "valkomit");});
test("valkomiteen -> valkomite", function() {deepEqual( Stem("valkomiteen"), "valkomite");});
test("valkyrjen -> valkyrj", function() {deepEqual( Stem("valkyrjen"), "valkyrj");});
test("valkyrjene -> valkyrj", function() {deepEqual( Stem("valkyrjene"), "valkyrj");});
test("valkyrjer -> valkyrj", function() {deepEqual( Stem("valkyrjer"), "valkyrj");});
test("valmåten -> valmåt", function() {deepEqual( Stem("valmåten"), "valmåt");});
test("valperioden -> valperiod", function() {deepEqual( Stem("valperioden"), "valperiod");});
test("valrett -> valrett", function() {deepEqual( Stem("valrett"), "valrett");});
test("valretten -> valrett", function() {deepEqual( Stem("valretten"), "valrett");});
test("valt -> valt", function() {deepEqual( Stem("valt"), "valt");});
test("vanaheim -> vanaheim", function() {deepEqual( Stem("vanaheim"), "vanaheim");});
test("vandalene -> vandal", function() {deepEqual( Stem("vandalene"), "vandal");});
test("vande -> vand", function() {deepEqual( Stem("vande"), "vand");});
test("vandre -> vandr", function() {deepEqual( Stem("vandre"), "vandr");});
test("vandrende -> vandr", function() {deepEqual( Stem("vandrende"), "vandr");});
test("vandrer -> vandr", function() {deepEqual( Stem("vandrer"), "vandr");});
test("vandret -> vandr", function() {deepEqual( Stem("vandret"), "vandr");});
test("vandringene -> vandring", function() {deepEqual( Stem("vandringene"), "vandring");});
test("vandringsmann -> vandringsmann", function() {deepEqual( Stem("vandringsmann"), "vandringsmann");});
test("vandringsmannen -> vandringsmann", function() {deepEqual( Stem("vandringsmannen"), "vandringsmann");});
test("vandringsstaven -> vandringsstav", function() {deepEqual( Stem("vandringsstaven"), "vandringsstav");});
test("vanene -> van", function() {deepEqual( Stem("vanene"), "van");});
test("vanenes -> van", function() {deepEqual( Stem("vanenes"), "van");});
test("vaner -> van", function() {deepEqual( Stem("vaner"), "van");});
test("vaneslekt -> vaneslekt", function() {deepEqual( Stem("vaneslekt"), "vaneslekt");});
test("vanleg -> van", function() {deepEqual( Stem("vanleg"), "van");});
test("vanlege -> van", function() {deepEqual( Stem("vanlege"), "van");});
test("vanlegvis -> vanlegvis", function() {deepEqual( Stem("vanlegvis"), "vanlegvis");});
test("vanlig -> van", function() {deepEqual( Stem("vanlig"), "van");});
test("vanlige -> van", function() {deepEqual( Stem("vanlige"), "van");});
test("vanligste -> vanligst", function() {deepEqual( Stem("vanligste"), "vanligst");});
test("vanligvis -> vanligvis", function() {deepEqual( Stem("vanligvis"), "vanligvis");});
test("vann -> vann", function() {deepEqual( Stem("vann"), "vann");});
test("vannet -> vann", function() {deepEqual( Stem("vannet"), "vann");});
test("vannkanten -> vannkant", function() {deepEqual( Stem("vannkanten"), "vannkant");});
test("vannkvalitet -> vannkvalit", function() {deepEqual( Stem("vannkvalitet"), "vannkvalit");});
test("vanns -> vann", function() {deepEqual( Stem("vanns"), "vann");});
test("vanntroll -> vanntroll", function() {deepEqual( Stem("vanntroll"), "vanntroll");});
test("vannveger -> vannveg", function() {deepEqual( Stem("vannveger"), "vannveg");});
test("vanskane -> vansk", function() {deepEqual( Stem("vanskane"), "vansk");});
test("vanskar -> vansk", function() {deepEqual( Stem("vanskar"), "vansk");});
test("vanske -> vansk", function() {deepEqual( Stem("vanske"), "vansk");});
test("vanskeleg -> vansk", function() {deepEqual( Stem("vanskeleg"), "vansk");});
test("vanskelegare -> vanskelegar", function() {deepEqual( Stem("vanskelegare"), "vanskelegar");});
test("vanskelege -> vansk", function() {deepEqual( Stem("vanskelege"), "vansk");});
test("vanskelegstilte -> vanskelegstilt", function() {deepEqual( Stem("vanskelegstilte"), "vanskelegstilt");});
test("vanskelig -> vansk", function() {deepEqual( Stem("vanskelig"), "vansk");});
test("vanskelige -> vansk", function() {deepEqual( Stem("vanskelige"), "vansk");});
test("vanskeligere -> vanskeliger", function() {deepEqual( Stem("vanskeligere"), "vanskeliger");});
test("vanskeliggjøre -> vanskeliggjør", function() {deepEqual( Stem("vanskeliggjøre"), "vanskeliggjør");});
test("vanskeligheter -> vansk", function() {deepEqual( Stem("vanskeligheter"), "vansk");});
test("vanskeligstilte -> vanskeligstilt", function() {deepEqual( Stem("vanskeligstilte"), "vanskeligstilt");});
test("vansker -> vansk", function() {deepEqual( Stem("vansker"), "vansk");});
test("vant -> vant", function() {deepEqual( Stem("vant"), "vant");});
test("vanta -> vant", function() {deepEqual( Stem("vanta"), "vant");});
test("vantar -> vant", function() {deepEqual( Stem("vantar"), "vant");});
test("vante -> vant", function() {deepEqual( Stem("vante"), "vant");});
test("vantro -> vantro", function() {deepEqual( Stem("vantro"), "vantro");});
test("vanvidd -> vanvidd", function() {deepEqual( Stem("vanvidd"), "vanvidd");});
test("vanviddet -> vanvidd", function() {deepEqual( Stem("vanviddet"), "vanvidd");});
test("var -> var", function() {deepEqual( Stem("var"), "var");});
test("varafolk -> varafolk", function() {deepEqual( Stem("varafolk"), "varafolk");});
test("varaleiaren -> varaleiar", function() {deepEqual( Stem("varaleiaren"), "varaleiar");});
test("varamedlem -> varamedlem", function() {deepEqual( Stem("varamedlem"), "varamedlem");});
test("varamedlemmen -> varamedlemm", function() {deepEqual( Stem("varamedlemmen"), "varamedlemm");});
test("varamedlemmer -> varamedlemm", function() {deepEqual( Stem("varamedlemmer"), "varamedlemm");});
test("varandra -> varandr", function() {deepEqual( Stem("varandra"), "varandr");});
test("varanger -> varang", function() {deepEqual( Stem("varanger"), "varang");});
test("varangerfjorden -> varangerfjord", function() {deepEqual( Stem("varangerfjorden"), "varangerfjord");});
test("vararevisor -> vararevisor", function() {deepEqual( Stem("vararevisor"), "vararevisor");});
test("vararevisorar -> vararevisor", function() {deepEqual( Stem("vararevisorar"), "vararevisor");});
test("vare -> var", function() {deepEqual( Stem("vare"), "var");});
test("varedistribusjon -> varedistribusjon", function() {deepEqual( Stem("varedistribusjon"), "varedistribusjon");});
test("vareeier -> vareei", function() {deepEqual( Stem("vareeier"), "vareei");});
test("vareeiere -> vareeier", function() {deepEqual( Stem("vareeiere"), "vareeier");});
test("vareeierene -> vareeier", function() {deepEqual( Stem("vareeierene"), "vareeier");});
test("vareeierens -> vareeier", function() {deepEqual( Stem("vareeierens"), "vareeier");});
test("vareeierne -> vareeiern", function() {deepEqual( Stem("vareeierne"), "vareeiern");});
test("vareeiernes -> vareeiern", function() {deepEqual( Stem("vareeiernes"), "vareeiern");});
test("vareeiers -> vareei", function() {deepEqual( Stem("vareeiers"), "vareei");});
test("vareflyt -> vareflyt", function() {deepEqual( Stem("vareflyt"), "vareflyt");});
test("varegrupper -> varegrupp", function() {deepEqual( Stem("varegrupper"), "varegrupp");});
test("varehandel -> varehandel", function() {deepEqual( Stem("varehandel"), "varehandel");});
test("varehandelen -> varehandel", function() {deepEqual( Stem("varehandelen"), "varehandel");});
test("varehandelskjedene -> varehandelskjed", function() {deepEqual( Stem("varehandelskjedene"), "varehandelskjed");});
test("vareinnsats -> vareinnsat", function() {deepEqual( Stem("vareinnsats"), "vareinnsat");});
test("varemedlemmer -> varemedlemm", function() {deepEqual( Stem("varemedlemmer"), "varemedlemm");});
test("varen -> var", function() {deepEqual( Stem("varen"), "var");});
test("varene -> var", function() {deepEqual( Stem("varene"), "var");});
test("varens -> var", function() {deepEqual( Stem("varens"), "var");});
test("vareomsetning -> vareomsetning", function() {deepEqual( Stem("vareomsetning"), "vareomsetning");});
test("vareproduksjon -> vareproduksjon", function() {deepEqual( Stem("vareproduksjon"), "vareproduksjon");});
test("vareproduksjonen -> vareproduksjon", function() {deepEqual( Stem("vareproduksjonen"), "vareproduksjon");});
test("vareprodusenter -> vareprodusent", function() {deepEqual( Stem("vareprodusenter"), "vareprodusent");});
test("vareprofil -> vareprofil", function() {deepEqual( Stem("vareprofil"), "vareprofil");});
test("varer -> var", function() {deepEqual( Stem("varer"), "var");});
test("vareslag -> vareslag", function() {deepEqual( Stem("vareslag"), "vareslag");});
test("varestrømmene -> varestrømm", function() {deepEqual( Stem("varestrømmene"), "varestrømm");});
test("varetransport -> varetransport", function() {deepEqual( Stem("varetransport"), "varetransport");});
test("varetypene -> varetyp", function() {deepEqual( Stem("varetypene"), "varetyp");});
test("varetyper -> varetyp", function() {deepEqual( Stem("varetyper"), "varetyp");});
test("vareutval -> vareutval", function() {deepEqual( Stem("vareutval"), "vareutval");});
test("vareverdi -> vareverdi", function() {deepEqual( Stem("vareverdi"), "vareverdi");});
test("vareverdiene -> vareverdi", function() {deepEqual( Stem("vareverdiene"), "vareverdi");});
test("varg -> varg", function() {deepEqual( Stem("varg"), "varg");});
test("variabel -> variabel", function() {deepEqual( Stem("variabel"), "variabel");});
test("variablene -> variabl", function() {deepEqual( Stem("variablene"), "variabl");});
test("varians -> varian", function() {deepEqual( Stem("varians"), "varian");});
test("variant -> variant", function() {deepEqual( Stem("variant"), "variant");});
test("variantar -> variant", function() {deepEqual( Stem("variantar"), "variant");});
test("varianten -> variant", function() {deepEqual( Stem("varianten"), "variant");});
test("variasjon -> variasjon", function() {deepEqual( Stem("variasjon"), "variasjon");});
test("variasjonane -> variasjon", function() {deepEqual( Stem("variasjonane"), "variasjon");});
test("variasjonene -> variasjon", function() {deepEqual( Stem("variasjonene"), "variasjon");});
test("variasjoner -> variasjon", function() {deepEqual( Stem("variasjoner"), "variasjon");});
test("variasjonsbreidd -> variasjonsbreidd", function() {deepEqual( Stem("variasjonsbreidd"), "variasjonsbreidd");});
test("varierande -> varier", function() {deepEqual( Stem("varierande"), "varier");});
test("variere -> varier", function() {deepEqual( Stem("variere"), "varier");});
test("varierende -> varier", function() {deepEqual( Stem("varierende"), "varier");});
test("varierer -> varier", function() {deepEqual( Stem("varierer"), "varier");});
test("variert -> varier", function() {deepEqual( Stem("variert"), "varier");});
test("varierte -> varier", function() {deepEqual( Stem("varierte"), "varier");});
test("varig -> var", function() {deepEqual( Stem("varig"), "var");});
test("varige -> var", function() {deepEqual( Stem("varige"), "var");});
test("varighet -> var", function() {deepEqual( Stem("varighet"), "var");});
test("varm -> varm", function() {deepEqual( Stem("varm"), "varm");});
test("varme -> varm", function() {deepEqual( Stem("varme"), "varm");});
test("varmen -> varm", function() {deepEqual( Stem("varmen"), "varm");});
test("varmer -> varm", function() {deepEqual( Stem("varmer"), "varm");});
test("varmesentralar -> varmesentral", function() {deepEqual( Stem("varmesentralar"), "varmesentral");});
test("varmeste -> varmest", function() {deepEqual( Stem("varmeste"), "varmest");});
test("varmt -> varmt", function() {deepEqual( Stem("varmt"), "varmt");});
test("varsam -> varsam", function() {deepEqual( Stem("varsam"), "varsam");});
test("varsel -> varsel", function() {deepEqual( Stem("varsel"), "varsel");});
test("varselet -> varsel", function() {deepEqual( Stem("varselet"), "varsel");});
test("varsla -> varsl", function() {deepEqual( Stem("varsla"), "varsl");});
test("varslast -> varsl", function() {deepEqual( Stem("varslast"), "varsl");});
test("varsle -> varsl", function() {deepEqual( Stem("varsle"), "varsl");});
test("varslet -> varsl", function() {deepEqual( Stem("varslet"), "varsl");});
test("varsling -> varsling", function() {deepEqual( Stem("varsling"), "varsling");});
test("vart -> vart", function() {deepEqual( Stem("vart"), "vart");});
test("varte -> vart", function() {deepEqual( Stem("varte"), "vart");});
test("vask -> vask", function() {deepEqual( Stem("vask"), "vask");});
test("vasker -> vask", function() {deepEqual( Stem("vasker"), "vask");});
test("vaskeri -> vaskeri", function() {deepEqual( Stem("vaskeri"), "vaskeri");});
test("vaskes -> vask", function() {deepEqual( Stem("vaskes"), "vask");});
test("vasket -> vask", function() {deepEqual( Stem("vasket"), "vask");});
test("vasser -> vass", function() {deepEqual( Stem("vasser"), "vass");});
test("vasst -> vasst", function() {deepEqual( Stem("vasst"), "vasst");});
test("vassum -> vassum", function() {deepEqual( Stem("vassum"), "vassum");});
test("vatn -> vatn", function() {deepEqual( Stem("vatn"), "vatn");});
test("ve -> ve", function() {deepEqual( Stem("ve"), "ve");});
test("ved -> ved", function() {deepEqual( Stem("ved"), "ved");});
test("veddemål -> veddemål", function() {deepEqual( Stem("veddemål"), "veddemål");});
test("veddemålet -> veddemål", function() {deepEqual( Stem("veddemålet"), "veddemål");});
test("vedder -> vedd", function() {deepEqual( Stem("vedder"), "vedd");});
test("vederlag -> vederlag", function() {deepEqual( Stem("vederlag"), "vederlag");});
test("vederlaget -> vederlag", function() {deepEqual( Stem("vederlaget"), "vederlag");});
test("vederlags -> vederlag", function() {deepEqual( Stem("vederlags"), "vederlag");});
test("vederlagssatsar -> vederlagssats", function() {deepEqual( Stem("vederlagssatsar"), "vederlagssats");});
test("vedgår -> vedgår", function() {deepEqual( Stem("vedgår"), "vedgår");});
test("vedkjem -> vedkjem", function() {deepEqual( Stem("vedkjem"), "vedkjem");});
test("vedkomande -> vedkom", function() {deepEqual( Stem("vedkomande"), "vedkom");});
test("vedkommende -> vedkomm", function() {deepEqual( Stem("vedkommende"), "vedkomm");});
test("vedkommendes -> vedkomm", function() {deepEqual( Stem("vedkommendes"), "vedkomm");});
test("vedlagte -> vedlagt", function() {deepEqual( Stem("vedlagte"), "vedlagt");});
test("vedlegg -> vedlegg", function() {deepEqual( Stem("vedlegg"), "vedlegg");});
test("vedlegga -> vedlegg", function() {deepEqual( Stem("vedlegga"), "vedlegg");});
test("vedlegget -> vedlegg", function() {deepEqual( Stem("vedlegget"), "vedlegg");});
test("vedleggets -> vedlegg", function() {deepEqual( Stem("vedleggets"), "vedlegg");});
test("vedlikehald -> vedlikehald", function() {deepEqual( Stem("vedlikehald"), "vedlikehald");});
test("vedlikehalden -> vedlikehald", function() {deepEqual( Stem("vedlikehalden"), "vedlikehald");});
test("vedlikehaldet -> vedlikehald", function() {deepEqual( Stem("vedlikehaldet"), "vedlikehald");});
test("vedlikehalds -> vedlikehald", function() {deepEqual( Stem("vedlikehalds"), "vedlikehald");});
test("vedlikehaldsarbeid -> vedlikehaldsarbeid", function() {deepEqual( Stem("vedlikehaldsarbeid"), "vedlikehaldsarbeid");});
test("vedlikehaldsmanglar -> vedlikehaldsmangl", function() {deepEqual( Stem("vedlikehaldsmanglar"), "vedlikehaldsmangl");});
test("vedlikehaldsplikt -> vedlikehaldsplikt", function() {deepEqual( Stem("vedlikehaldsplikt"), "vedlikehaldsplikt");});
test("vedlikehaldsplikta -> vedlikehaldsplikt", function() {deepEqual( Stem("vedlikehaldsplikta"), "vedlikehaldsplikt");});
test("vedlikehaldspliktene -> vedlikehaldsplikt", function() {deepEqual( Stem("vedlikehaldspliktene"), "vedlikehaldsplikt");});
test("vedlikehaldsreglane -> vedlikehaldsregl", function() {deepEqual( Stem("vedlikehaldsreglane"), "vedlikehaldsregl");});
test("vedlikehold -> vedlikehold", function() {deepEqual( Stem("vedlikehold"), "vedlikehold");});
test("vedrørende -> vedrør", function() {deepEqual( Stem("vedrørende"), "vedrør");});
test("vedrører -> vedrør", function() {deepEqual( Stem("vedrører"), "vedrør");});
test("vedskive -> vedskiv", function() {deepEqual( Stem("vedskive"), "vedskiv");});
test("vedta -> vedt", function() {deepEqual( Stem("vedta"), "vedt");});
test("vedtagelse -> vedtag", function() {deepEqual( Stem("vedtagelse"), "vedtag");});
test("vedtagelsen -> vedtag", function() {deepEqual( Stem("vedtagelsen"), "vedtag");});
test("vedtak -> vedtak", function() {deepEqual( Stem("vedtak"), "vedtak");});
test("vedtaka -> vedtak", function() {deepEqual( Stem("vedtaka"), "vedtak");});
test("vedtakast -> vedtak", function() {deepEqual( Stem("vedtakast"), "vedtak");});
test("vedtaket -> vedtak", function() {deepEqual( Stem("vedtaket"), "vedtak");});
test("vedtaking -> vedtaking", function() {deepEqual( Stem("vedtaking"), "vedtaking");});
test("vedtakinga -> vedtaking", function() {deepEqual( Stem("vedtakinga"), "vedtaking");});
test("vedtaksført -> vedtaksført", function() {deepEqual( Stem("vedtaksført"), "vedtaksført");});
test("vedtaksmessig -> vedtaksmess", function() {deepEqual( Stem("vedtaksmessig"), "vedtaksmess");});
test("vedtaksmyndighet -> vedtaksmynd", function() {deepEqual( Stem("vedtaksmyndighet"), "vedtaksmynd");});
test("vedtaksprosedyre -> vedtaksprosedyr", function() {deepEqual( Stem("vedtaksprosedyre"), "vedtaksprosedyr");});
test("vedtaksprosedyren -> vedtaksprosedyr", function() {deepEqual( Stem("vedtaksprosedyren"), "vedtaksprosedyr");});
test("vedtaksprotokoll -> vedtaksprotokoll", function() {deepEqual( Stem("vedtaksprotokoll"), "vedtaksprotokoll");});
test("vedtar -> vedt", function() {deepEqual( Stem("vedtar"), "vedt");});
test("vedtas -> vedt", function() {deepEqual( Stem("vedtas"), "vedt");});
test("vedtatt -> vedtatt", function() {deepEqual( Stem("vedtatt"), "vedtatt");});
test("vedtatte -> vedtatt", function() {deepEqual( Stem("vedtatte"), "vedtatt");});
test("vedtek -> vedtek", function() {deepEqual( Stem("vedtek"), "vedtek");});
test("vedteke -> vedtek", function() {deepEqual( Stem("vedteke"), "vedtek");});
test("vedteken -> vedtek", function() {deepEqual( Stem("vedteken"), "vedtek");});
test("vedtekne -> vedtekn", function() {deepEqual( Stem("vedtekne"), "vedtekn");});
test("vedtekstfesta -> vedtekstfest", function() {deepEqual( Stem("vedtekstfesta"), "vedtekstfest");});
test("vedtektene -> vedtekt", function() {deepEqual( Stem("vedtektene"), "vedtekt");});
test("vedtektenes -> vedtekt", function() {deepEqual( Stem("vedtektenes"), "vedtekt");});
test("vedtekter -> vedtekt", function() {deepEqual( Stem("vedtekter"), "vedtekt");});
test("vedtektfeste -> vedtektfest", function() {deepEqual( Stem("vedtektfeste"), "vedtektfest");});
test("vedtektsendring -> vedtektsendring", function() {deepEqual( Stem("vedtektsendring"), "vedtektsendring");});
test("vedtektsendringane -> vedtektsendring", function() {deepEqual( Stem("vedtektsendringane"), "vedtektsendring");});
test("vedtektsendringar -> vedtektsendring", function() {deepEqual( Stem("vedtektsendringar"), "vedtektsendring");});
test("vedtektsfesta -> vedtektsfest", function() {deepEqual( Stem("vedtektsfesta"), "vedtektsfest");});
test("vedtektsfestar -> vedtektsfest", function() {deepEqual( Stem("vedtektsfestar"), "vedtektsfest");});
test("vedtektsfestast -> vedtektsfest", function() {deepEqual( Stem("vedtektsfestast"), "vedtektsfest");});
test("vedtektsfeste -> vedtektsfest", function() {deepEqual( Stem("vedtektsfeste"), "vedtektsfest");});
test("vedtektsfestede -> vedtektsfest", function() {deepEqual( Stem("vedtektsfestede"), "vedtektsfest");});
test("vedtektsfesting -> vedtektsfesting", function() {deepEqual( Stem("vedtektsfesting"), "vedtektsfesting");});
test("vedtektsfleirtal -> vedtektsfleirtal", function() {deepEqual( Stem("vedtektsfleirtal"), "vedtektsfleirtal");});
test("vedtektsføresegn -> vedtektsføresegn", function() {deepEqual( Stem("vedtektsføresegn"), "vedtektsføresegn");});
test("vedtektsføresegna -> vedtektsføresegn", function() {deepEqual( Stem("vedtektsføresegna"), "vedtektsføresegn");});
test("vedtektsføresegnene -> vedtektsføresegn", function() {deepEqual( Stem("vedtektsføresegnene"), "vedtektsføresegn");});
test("vedtektsføresegner -> vedtektsføresegn", function() {deepEqual( Stem("vedtektsføresegner"), "vedtektsføresegn");});
test("vedtektsklausul -> vedtektsklausul", function() {deepEqual( Stem("vedtektsklausul"), "vedtektsklausul");});
test("vedtektsklausular -> vedtektsklausul", function() {deepEqual( Stem("vedtektsklausular"), "vedtektsklausul");});
test("vedtektsveto -> vedtektsveto", function() {deepEqual( Stem("vedtektsveto"), "vedtektsveto");});
test("vedtektsvetoet -> vedtektsveto", function() {deepEqual( Stem("vedtektsvetoet"), "vedtektsveto");});
test("vedtok -> vedtok", function() {deepEqual( Stem("vedtok"), "vedtok");});
test("veene -> veen", function() {deepEqual( Stem("veene"), "veen");});
test("veg -> veg", function() {deepEqual( Stem("veg"), "veg");});
test("veganlegg -> veganlegg", function() {deepEqual( Stem("veganlegg"), "veganlegg");});
test("vegar -> veg", function() {deepEqual( Stem("vegar"), "veg");});
test("vegast -> veg", function() {deepEqual( Stem("vegast"), "veg");});
test("vegdirektoratet -> vegdirektorat", function() {deepEqual( Stem("vegdirektoratet"), "vegdirektorat");});
test("vegen -> veg", function() {deepEqual( Stem("vegen"), "veg");});
test("vegene -> veg", function() {deepEqual( Stem("vegene"), "veg");});
test("veger -> veg", function() {deepEqual( Stem("veger"), "veg");});
test("vegforbindelse -> vegforbind", function() {deepEqual( Stem("vegforbindelse"), "vegforbind");});
test("vegforbindelsen -> vegforbind", function() {deepEqual( Stem("vegforbindelsen"), "vegforbind");});
test("vegforbindelsene -> vegforbind", function() {deepEqual( Stem("vegforbindelsene"), "vegforbind");});
test("vegformål -> vegformål", function() {deepEqual( Stem("vegformål"), "vegformål");});
test("vegframføring -> vegframføring", function() {deepEqual( Stem("vegframføring"), "vegframføring");});
test("vegføringer -> vegføring", function() {deepEqual( Stem("vegføringer"), "vegføring");});
test("vegg -> vegg", function() {deepEqual( Stem("vegg"), "vegg");});
test("veggen -> vegg", function() {deepEqual( Stem("veggen"), "vegg");});
test("veggene -> vegg", function() {deepEqual( Stem("veggene"), "vegg");});
test("vegger -> vegg", function() {deepEqual( Stem("vegger"), "vegg");});
test("veggkonstruksjonar -> veggkonstruksjon", function() {deepEqual( Stem("veggkonstruksjonar"), "veggkonstruksjon");});
test("vegkontoret -> vegkontor", function() {deepEqual( Stem("vegkontoret"), "vegkontor");});
test("vegkorridorer -> vegkorridor", function() {deepEqual( Stem("vegkorridorer"), "vegkorridor");});
test("vegkostnader -> vegkostnad", function() {deepEqual( Stem("vegkostnader"), "vegkostnad");});
test("vegløsning -> vegløsning", function() {deepEqual( Stem("vegløsning"), "vegløsning");});
test("vegløsningene -> vegløsning", function() {deepEqual( Stem("vegløsningene"), "vegløsning");});
test("vegløsninger -> vegløsning", function() {deepEqual( Stem("vegløsninger"), "vegløsning");});
test("vegne -> vegn", function() {deepEqual( Stem("vegne"), "vegn");});
test("vegner -> vegn", function() {deepEqual( Stem("vegner"), "vegn");});
test("vegnett -> vegnett", function() {deepEqual( Stem("vegnett"), "vegnett");});
test("vegnettet -> vegnett", function() {deepEqual( Stem("vegnettet"), "vegnett");});
test("vegnettets -> vegnett", function() {deepEqual( Stem("vegnettets"), "vegnett");});
test("vegnormal -> vegnormal", function() {deepEqual( Stem("vegnormal"), "vegnormal");});
test("vegpakke -> vegpakk", function() {deepEqual( Stem("vegpakke"), "vegpakk");});
test("vegplaner -> vegplan", function() {deepEqual( Stem("vegplaner"), "vegplan");});
test("vegruten -> vegrut", function() {deepEqual( Stem("vegruten"), "vegrut");});
test("vegsalt -> vegsalt", function() {deepEqual( Stem("vegsalt"), "vegsalt");});
test("vegsiden -> vegsid", function() {deepEqual( Stem("vegsiden"), "vegsid");});
test("vegsituasjonen -> vegsituasjon", function() {deepEqual( Stem("vegsituasjonen"), "vegsituasjon");});
test("vegslitasje -> vegslitasj", function() {deepEqual( Stem("vegslitasje"), "vegslitasj");});
test("vegstrekningen -> vegstrekning", function() {deepEqual( Stem("vegstrekningen"), "vegstrekning");});
test("vegstrekninger -> vegstrekning", function() {deepEqual( Stem("vegstrekninger"), "vegstrekning");});
test("vegsystem -> vegsystem", function() {deepEqual( Stem("vegsystem"), "vegsystem");});
test("vegsystemene -> vegsystem", function() {deepEqual( Stem("vegsystemene"), "vegsystem");});
test("vegsystemer -> vegsystem", function() {deepEqual( Stem("vegsystemer"), "vegsystem");});
test("vegtam -> vegtam", function() {deepEqual( Stem("vegtam"), "vegtam");});
test("vegtilknytning -> vegtilknytning", function() {deepEqual( Stem("vegtilknytning"), "vegtilknytning");});
test("vegtilknytningen -> vegtilknytning", function() {deepEqual( Stem("vegtilknytningen"), "vegtilknytning");});
test("vegtiltak -> vegtiltak", function() {deepEqual( Stem("vegtiltak"), "vegtiltak");});
test("vegtrafikk -> vegtrafikk", function() {deepEqual( Stem("vegtrafikk"), "vegtrafikk");});
test("vegtrafikken -> vegtrafikk", function() {deepEqual( Stem("vegtrafikken"), "vegtrafikk");});
test("vegtrafikkplan -> vegtrafikkplan", function() {deepEqual( Stem("vegtrafikkplan"), "vegtrafikkplan");});
test("vegtransport -> vegtransport", function() {deepEqual( Stem("vegtransport"), "vegtransport");});
test("vegtransporten -> vegtransport", function() {deepEqual( Stem("vegtransporten"), "vegtransport");});
test("vegtransportkostnadene -> vegtransportkostnad", function() {deepEqual( Stem("vegtransportkostnadene"), "vegtransportkostnad");});
test("vegtraseen -> vegtrase", function() {deepEqual( Stem("vegtraseen"), "vegtrase");});
test("vegvesen -> vegves", function() {deepEqual( Stem("vegvesen"), "vegves");});
test("vegvesens -> vegves", function() {deepEqual( Stem("vegvesens"), "vegves");});
test("vei -> vei", function() {deepEqual( Stem("vei"), "vei");});
test("veie -> veie", function() {deepEqual( Stem("veie"), "veie");});
test("veien -> veien", function() {deepEqual( Stem("veien"), "veien");});
test("veier -> veier", function() {deepEqual( Stem("veier"), "veier");});
test("veierud -> veierud", function() {deepEqual( Stem("veierud"), "veierud");});
test("veies -> veies", function() {deepEqual( Stem("veies"), "veies");});
test("veiet -> veiet", function() {deepEqual( Stem("veiet"), "veiet");});
test("veik -> veik", function() {deepEqual( Stem("veik"), "veik");});
test("veikare -> veikar", function() {deepEqual( Stem("veikare"), "veikar");});
test("veike -> veik", function() {deepEqual( Stem("veike"), "veik");});
test("veikro -> veikro", function() {deepEqual( Stem("veikro"), "veikro");});
test("veiledende -> veiled", function() {deepEqual( Stem("veiledende"), "veiled");});
test("veiledning -> veiledning", function() {deepEqual( Stem("veiledning"), "veiledning");});
test("veit -> veit", function() {deepEqual( Stem("veit"), "veit");});
test("veiver -> veiv", function() {deepEqual( Stem("veiver"), "veiv");});
test("veka -> vek", function() {deepEqual( Stem("veka"), "vek");});
test("veke -> vek", function() {deepEqual( Stem("veke"), "vek");});
test("veker -> vek", function() {deepEqual( Stem("veker"), "vek");});
test("vekers -> vek", function() {deepEqual( Stem("vekers"), "vek");});
test("vekes -> vek", function() {deepEqual( Stem("vekes"), "vek");});
test("veket -> vek", function() {deepEqual( Stem("veket"), "vek");});
test("vekk -> vekk", function() {deepEqual( Stem("vekk"), "vekk");});
test("vekke -> vekk", function() {deepEqual( Stem("vekke"), "vekk");});
test("vekker -> vekk", function() {deepEqual( Stem("vekker"), "vekk");});
test("vekkes -> vekk", function() {deepEqual( Stem("vekkes"), "vekk");});
test("vekket -> vekk", function() {deepEqual( Stem("vekket"), "vekk");});
test("vekse -> veks", function() {deepEqual( Stem("vekse"), "veks");});
test("vekselflak -> vekselflak", function() {deepEqual( Stem("vekselflak"), "vekselflak");});
test("vekslande -> veksl", function() {deepEqual( Stem("vekslande"), "veksl");});
test("vekst -> vekst", function() {deepEqual( Stem("vekst"), "vekst");});
test("vekstanslag -> vekstanslag", function() {deepEqual( Stem("vekstanslag"), "vekstanslag");});
test("veksten -> vekst", function() {deepEqual( Stem("veksten"), "vekst");});
test("vekstforutsetningene -> vekstforutsetning", function() {deepEqual( Stem("vekstforutsetningene"), "vekstforutsetning");});
test("vekstkraftig -> vekstkraft", function() {deepEqual( Stem("vekstkraftig"), "vekstkraft");});
test("vekstområde -> vekstområd", function() {deepEqual( Stem("vekstområde"), "vekstområd");});
test("vekstpotensial -> vekstpotensial", function() {deepEqual( Stem("vekstpotensial"), "vekstpotensial");});
test("vekstpotensiale -> vekstpotensial", function() {deepEqual( Stem("vekstpotensiale"), "vekstpotensial");});
test("vekstpotensialet -> vekstpotensial", function() {deepEqual( Stem("vekstpotensialet"), "vekstpotensial");});
test("vekstrate -> vekstrat", function() {deepEqual( Stem("vekstrate"), "vekstrat");});
test("vekstratene -> vekstrat", function() {deepEqual( Stem("vekstratene"), "vekstrat");});
test("vekstrater -> vekstrat", function() {deepEqual( Stem("vekstrater"), "vekstrat");});
test("veksttakten -> veksttakt", function() {deepEqual( Stem("veksttakten"), "veksttakt");});
test("veksttendenser -> veksttendens", function() {deepEqual( Stem("veksttendenser"), "veksttendens");});
test("veksttrend -> veksttrend", function() {deepEqual( Stem("veksttrend"), "veksttrend");});
test("vekt -> vekt", function() {deepEqual( Stem("vekt"), "vekt");});
test("vekta -> vekt", function() {deepEqual( Stem("vekta"), "vekt");});
test("vektede -> vekt", function() {deepEqual( Stem("vektede"), "vekt");});
test("vekten -> vekt", function() {deepEqual( Stem("vekten"), "vekt");});
test("vektenhet -> vekten", function() {deepEqual( Stem("vektenhet"), "vekten");});
test("vekter -> vekt", function() {deepEqual( Stem("vekter"), "vekt");});
test("vektet -> vekt", function() {deepEqual( Stem("vektet"), "vekt");});
test("vekting -> vekting", function() {deepEqual( Stem("vekting"), "vekting");});
test("vektlagt -> vektlagt", function() {deepEqual( Stem("vektlagt"), "vektlagt");});
test("vektlegge -> vektlegg", function() {deepEqual( Stem("vektlegge"), "vektlegg");});
test("vektlegges -> vektlegg", function() {deepEqual( Stem("vektlegges"), "vektlegg");});
test("vektlegging -> vektlegging", function() {deepEqual( Stem("vektlegging"), "vektlegging");});
test("vektleggingen -> vektlegging", function() {deepEqual( Stem("vektleggingen"), "vektlegging");});
test("vel -> vel", function() {deepEqual( Stem("vel"), "vel");});
test("velbegrunnede -> velbegrunn", function() {deepEqual( Stem("velbegrunnede"), "velbegrunn");});
test("velberget -> velberg", function() {deepEqual( Stem("velberget"), "velberg");});
test("veldig -> veld", function() {deepEqual( Stem("veldig"), "veld");});
test("veldige -> veld", function() {deepEqual( Stem("veldige"), "veld");});
test("velegnet -> velegn", function() {deepEqual( Stem("velegnet"), "velegn");});
test("veletablerte -> veletabler", function() {deepEqual( Stem("veletablerte"), "veletabler");});
test("velferd -> velferd", function() {deepEqual( Stem("velferd"), "velferd");});
test("velferdsgode -> velferdsgod", function() {deepEqual( Stem("velferdsgode"), "velferdsgod");});
test("velferdsmeldingen -> velferdsmelding", function() {deepEqual( Stem("velferdsmeldingen"), "velferdsmelding");});
test("velferdsmeldingens -> velferdsmelding", function() {deepEqual( Stem("velferdsmeldingens"), "velferdsmelding");});
test("velferdsordninger -> velferdsordning", function() {deepEqual( Stem("velferdsordninger"), "velferdsordning");});
test("velferdstilbod -> velferdstilbod", function() {deepEqual( Stem("velferdstilbod"), "velferdstilbod");});
test("velferdstiltak -> velferdstiltak", function() {deepEqual( Stem("velferdstiltak"), "velferdstiltak");});
test("velforeining -> velforeining", function() {deepEqual( Stem("velforeining"), "velforeining");});
test("velfunderte -> velfunder", function() {deepEqual( Stem("velfunderte"), "velfunder");});
test("velg -> velg", function() {deepEqual( Stem("velg"), "velg");});
test("velge -> velg", function() {deepEqual( Stem("velge"), "velg");});
test("velger -> velg", function() {deepEqual( Stem("velger"), "velg");});
test("velges -> velg", function() {deepEqual( Stem("velges"), "velg");});
test("velgjerd -> velgjerd", function() {deepEqual( Stem("velgjerd"), "velgjerd");});
test("veljast -> velj", function() {deepEqual( Stem("veljast"), "velj");});
test("velje -> velj", function() {deepEqual( Stem("velje"), "velj");});
test("velkjend -> velkjend", function() {deepEqual( Stem("velkjend"), "velkjend");});
test("velkommen -> velkomm", function() {deepEqual( Stem("velkommen"), "velkomm");});
test("velluktende -> vellukt", function() {deepEqual( Stem("velluktende"), "vellukt");});
test("vellykkete -> vellykket", function() {deepEqual( Stem("vellykkete"), "vellykket");});
test("velsigner -> velsign", function() {deepEqual( Stem("velsigner"), "velsign");});
test("velskapt -> velskapt", function() {deepEqual( Stem("velskapt"), "velskapt");});
test("velstand -> velstand", function() {deepEqual( Stem("velstand"), "velstand");});
test("velta -> velt", function() {deepEqual( Stem("velta"), "velt");});
test("veltalende -> veltal", function() {deepEqual( Stem("veltalende"), "veltal");});
test("veltalenhet -> veltalen", function() {deepEqual( Stem("veltalenhet"), "veltalen");});
test("veltast -> velt", function() {deepEqual( Stem("veltast"), "velt");});
test("velte -> velt", function() {deepEqual( Stem("velte"), "velt");});
test("velter -> velt", function() {deepEqual( Stem("velter"), "velt");});
test("veltet -> velt", function() {deepEqual( Stem("veltet"), "velt");});
test("velutformede -> velutform", function() {deepEqual( Stem("velutformede"), "velutform");});
test("vende -> vend", function() {deepEqual( Stem("vende"), "vend");});
test("vender -> vend", function() {deepEqual( Stem("vender"), "vend");});
test("vendes -> vend", function() {deepEqual( Stem("vendes"), "vend");});
test("vendt -> vend", function() {deepEqual( Stem("vendt"), "vend");});
test("vendte -> vend", function() {deepEqual( Stem("vendte"), "vend");});
test("vene -> ven", function() {deepEqual( Stem("vene"), "ven");});
test("venn -> venn", function() {deepEqual( Stem("venn"), "venn");});
test("vennen -> venn", function() {deepEqual( Stem("vennen"), "venn");});
test("vennene -> venn", function() {deepEqual( Stem("vennene"), "venn");});
test("venner -> venn", function() {deepEqual( Stem("venner"), "venn");});
test("vennet -> venn", function() {deepEqual( Stem("vennet"), "venn");});
test("vennlig -> venn", function() {deepEqual( Stem("vennlig"), "venn");});
test("vennlige -> venn", function() {deepEqual( Stem("vennlige"), "venn");});
test("vennskap -> vennskap", function() {deepEqual( Stem("vennskap"), "vennskap");});
test("vennskapet -> vennskap", function() {deepEqual( Stem("vennskapet"), "vennskap");});
test("venstre -> venstr", function() {deepEqual( Stem("venstre"), "venstr");});
test("venstreparti -> venstreparti", function() {deepEqual( Stem("venstreparti"), "venstreparti");});
test("vent -> vent", function() {deepEqual( Stem("vent"), "vent");});
test("vente -> vent", function() {deepEqual( Stem("vente"), "vent");});
test("venteleg -> vent", function() {deepEqual( Stem("venteleg"), "vent");});
test("ventelister -> ventelist", function() {deepEqual( Stem("ventelister"), "ventelist");});
test("ventende -> vent", function() {deepEqual( Stem("ventende"), "vent");});
test("venter -> vent", function() {deepEqual( Stem("venter"), "vent");});
test("ventes -> vent", function() {deepEqual( Stem("ventes"), "vent");});
test("ventet -> vent", function() {deepEqual( Stem("ventet"), "vent");});
test("ventetid -> ventetid", function() {deepEqual( Stem("ventetid"), "ventetid");});
test("ventilar -> ventil", function() {deepEqual( Stem("ventilar"), "ventil");});
test("ver -> ver", function() {deepEqual( Stem("ver"), "ver");});
test("vera -> ver", function() {deepEqual( Stem("vera"), "ver");});
test("verande -> ver", function() {deepEqual( Stem("verande"), "ver");});
test("verd -> verd", function() {deepEqual( Stem("verd"), "verd");});
test("verda -> verd", function() {deepEqual( Stem("verda"), "verd");});
test("verdande -> verd", function() {deepEqual( Stem("verdande"), "verd");});
test("verden -> verd", function() {deepEqual( Stem("verden"), "verd");});
test("verdener -> verden", function() {deepEqual( Stem("verdener"), "verden");});
test("verdens -> verd", function() {deepEqual( Stem("verdens"), "verd");});
test("verdensbanken -> verdensbank", function() {deepEqual( Stem("verdensbanken"), "verdensbank");});
test("verdensbankens -> verdensbank", function() {deepEqual( Stem("verdensbankens"), "verdensbank");});
test("verdenshavet -> verdenshav", function() {deepEqual( Stem("verdenshavet"), "verdenshav");});
test("verdenstreet -> verdenstre", function() {deepEqual( Stem("verdenstreet"), "verdenstre");});
test("verdi -> verdi", function() {deepEqual( Stem("verdi"), "verdi");});
test("verdiane -> verdi", function() {deepEqual( Stem("verdiane"), "verdi");});
test("verdiansettelse -> verdiansett", function() {deepEqual( Stem("verdiansettelse"), "verdiansett");});
test("verdiar -> verdi", function() {deepEqual( Stem("verdiar"), "verdi");});
test("verdien -> verdi", function() {deepEqual( Stem("verdien"), "verdi");});
test("verdiene -> verdi", function() {deepEqual( Stem("verdiene"), "verdi");});
test("verdier -> verdi", function() {deepEqual( Stem("verdier"), "verdi");});
test("verdifall -> verdifall", function() {deepEqual( Stem("verdifall"), "verdifall");});
test("verdifastsettelser -> verdifastsett", function() {deepEqual( Stem("verdifastsettelser"), "verdifastsett");});
test("verdiforholda -> verdiforhold", function() {deepEqual( Stem("verdiforholda"), "verdiforhold");});
test("verdiforholdet -> verdiforhold", function() {deepEqual( Stem("verdiforholdet"), "verdiforhold");});
test("verdifulle -> verdifull", function() {deepEqual( Stem("verdifulle"), "verdifull");});
test("verdifullt -> verdifullt", function() {deepEqual( Stem("verdifullt"), "verdifullt");});
test("verdig -> verd", function() {deepEqual( Stem("verdig"), "verd");});
test("verdighet -> verd", function() {deepEqual( Stem("verdighet"), "verd");});
test("verdikjeden -> verdikjed", function() {deepEqual( Stem("verdikjeden"), "verdikjed");});
test("verdikjedene -> verdikjed", function() {deepEqual( Stem("verdikjedene"), "verdikjed");});
test("verdikjeder -> verdikjed", function() {deepEqual( Stem("verdikjeder"), "verdikjed");});
test("verdilaus -> verdilaus", function() {deepEqual( Stem("verdilaus"), "verdilaus");});
test("verdipapir -> verdipapir", function() {deepEqual( Stem("verdipapir"), "verdipapir");});
test("verdipapirene -> verdipapir", function() {deepEqual( Stem("verdipapirene"), "verdipapir");});
test("verdipapirer -> verdipapir", function() {deepEqual( Stem("verdipapirer"), "verdipapir");});
test("verdipapirfond -> verdipapirfond", function() {deepEqual( Stem("verdipapirfond"), "verdipapirfond");});
test("verdipapirfondenes -> verdipapirfond", function() {deepEqual( Stem("verdipapirfondenes"), "verdipapirfond");});
test("verdipapirfondloven -> verdipapirfond", function() {deepEqual( Stem("verdipapirfondloven"), "verdipapirfond");});
test("verdipapirfondsforvaltning -> verdipapirfondsforvaltning", function() {deepEqual( Stem("verdipapirfondsforvaltning"), "verdipapirfondsforvaltning");});
test("verdipapirfondsforvaltningen -> verdipapirfondsforvaltning", function() {deepEqual( Stem("verdipapirfondsforvaltningen"), "verdipapirfondsforvaltning");});
test("verdipapirfondsloven -> verdipapirfond", function() {deepEqual( Stem("verdipapirfondsloven"), "verdipapirfond");});
test("verdipapirhandel -> verdipapirhandel", function() {deepEqual( Stem("verdipapirhandel"), "verdipapirhandel");});
test("verdipapirsentralen -> verdipapirsentral", function() {deepEqual( Stem("verdipapirsentralen"), "verdipapirsentral");});
test("verdireduksjon -> verdireduksjon", function() {deepEqual( Stem("verdireduksjon"), "verdireduksjon");});
test("verdireduksjonen -> verdireduksjon", function() {deepEqual( Stem("verdireduksjonen"), "verdireduksjon");});
test("verdiskaping -> verdiskaping", function() {deepEqual( Stem("verdiskaping"), "verdiskaping");});
test("verdiskapingen -> verdiskaping", function() {deepEqual( Stem("verdiskapingen"), "verdiskaping");});
test("verdiskapning -> verdiskapning", function() {deepEqual( Stem("verdiskapning"), "verdiskapning");});
test("verdistiging -> verdistiging", function() {deepEqual( Stem("verdistiging"), "verdistiging");});
test("verdistigning -> verdistigning", function() {deepEqual( Stem("verdistigning"), "verdistigning");});
test("verditilhøva -> verditilhøv", function() {deepEqual( Stem("verditilhøva"), "verditilhøv");});
test("verdiutvikling -> verdiutvikling", function() {deepEqual( Stem("verdiutvikling"), "verdiutvikling");});
test("verdiutviklingen -> verdiutvikling", function() {deepEqual( Stem("verdiutviklingen"), "verdiutvikling");});
test("verdiøkning -> verdiøkning", function() {deepEqual( Stem("verdiøkning"), "verdiøkning");});
test("verdiøkninger -> verdiøkning", function() {deepEqual( Stem("verdiøkninger"), "verdiøkning");});
test("verdsetjing -> verdsetjing", function() {deepEqual( Stem("verdsetjing"), "verdsetjing");});
test("verdskrigen -> verdskr", function() {deepEqual( Stem("verdskrigen"), "verdskr");});
test("verdt -> verd", function() {deepEqual( Stem("verdt"), "verd");});
test("vere -> ver", function() {deepEqual( Stem("vere"), "ver");});
test("verge -> verg", function() {deepEqual( Stem("verge"), "verg");});
test("vergeløs -> vergeløs", function() {deepEqual( Stem("vergeløs"), "vergeløs");});
test("veritas -> verit", function() {deepEqual( Stem("veritas"), "verit");});
test("verk -> verk", function() {deepEqual( Stem("verk"), "verk");});
test("verka -> verk", function() {deepEqual( Stem("verka"), "verk");});
test("verkar -> verk", function() {deepEqual( Stem("verkar"), "verk");});
test("verke -> verk", function() {deepEqual( Stem("verke"), "verk");});
test("verkeleg -> verk", function() {deepEqual( Stem("verkeleg"), "verk");});
test("verkemiddel -> verkemiddel", function() {deepEqual( Stem("verkemiddel"), "verkemiddel");});
test("verken -> verk", function() {deepEqual( Stem("verken"), "verk");});
test("verkeområde -> verkeområd", function() {deepEqual( Stem("verkeområde"), "verkeområd");});
test("verkeområdet -> verkeområd", function() {deepEqual( Stem("verkeområdet"), "verkeområd");});
test("verknad -> verknad", function() {deepEqual( Stem("verknad"), "verknad");});
test("verknadane -> verknad", function() {deepEqual( Stem("verknadane"), "verknad");});
test("verknaden -> verknad", function() {deepEqual( Stem("verknaden"), "verknad");});
test("verknadene -> verknad", function() {deepEqual( Stem("verknadene"), "verknad");});
test("verknader -> verknad", function() {deepEqual( Stem("verknader"), "verknad");});
test("verks -> verk", function() {deepEqual( Stem("verks"), "verk");});
test("verksamhet -> verksam", function() {deepEqual( Stem("verksamhet"), "verksam");});
test("verksemd -> verksemd", function() {deepEqual( Stem("verksemd"), "verksemd");});
test("verksemda -> verksemd", function() {deepEqual( Stem("verksemda"), "verksemd");});
test("verksemdsområde -> verksemdsområd", function() {deepEqual( Stem("verksemdsområde"), "verksemdsområd");});
test("verksemdstypar -> verksemdstyp", function() {deepEqual( Stem("verksemdstypar"), "verksemdstyp");});
test("verktøy -> verktøy", function() {deepEqual( Stem("verktøy"), "verktøy");});
test("vern -> vern", function() {deepEqual( Stem("vern"), "vern");});
test("verna -> vern", function() {deepEqual( Stem("verna"), "vern");});
test("vernast -> vern", function() {deepEqual( Stem("vernast"), "vern");});
test("verne -> vern", function() {deepEqual( Stem("verne"), "vern");});
test("vernende -> vern", function() {deepEqual( Stem("vernende"), "vern");});
test("verner -> vern", function() {deepEqual( Stem("verner"), "vern");});
test("vernereglar -> verneregl", function() {deepEqual( Stem("vernereglar"), "verneregl");});
test("vernes -> vern", function() {deepEqual( Stem("vernes"), "vern");});
test("vernet -> vern", function() {deepEqual( Stem("vernet"), "vern");});
test("vernetiltak -> vernetiltak", function() {deepEqual( Stem("vernetiltak"), "vernetiltak");});
test("verneverdier -> verneverdi", function() {deepEqual( Stem("verneverdier"), "verneverdi");});
test("verre -> verr", function() {deepEqual( Stem("verre"), "verr");});
test("versjonen -> versjon", function() {deepEqual( Stem("versjonen"), "versjon");});
test("verst -> verst", function() {deepEqual( Stem("verst"), "verst");});
test("verste -> verst", function() {deepEqual( Stem("verste"), "verst");});
test("vert -> vert", function() {deepEqual( Stem("vert"), "vert");});
test("vertsfolket -> vertsfolk", function() {deepEqual( Stem("vertsfolket"), "vertsfolk");});
test("vertskap -> vertskap", function() {deepEqual( Stem("vertskap"), "vertskap");});
test("vertskommunen -> vertskommun", function() {deepEqual( Stem("vertskommunen"), "vertskommun");});
test("vertskommuner -> vertskommun", function() {deepEqual( Stem("vertskommuner"), "vertskommun");});
test("vertslandet -> vertsland", function() {deepEqual( Stem("vertslandet"), "vertsland");});
test("verv -> verv", function() {deepEqual( Stem("verv"), "verv");});
test("vervet -> verv", function() {deepEqual( Stem("vervet"), "verv");});
test("vesen -> ves", function() {deepEqual( Stem("vesen"), "ves");});
test("vesenene -> vesen", function() {deepEqual( Stem("vesenene"), "vesen");});
test("vesener -> vesen", function() {deepEqual( Stem("vesener"), "vesen");});
test("vesentleg -> vesent", function() {deepEqual( Stem("vesentleg"), "vesent");});
test("vesentlege -> vesent", function() {deepEqual( Stem("vesentlege"), "vesent");});
test("vesentlig -> vesent", function() {deepEqual( Stem("vesentlig"), "vesent");});
test("vesentlige -> vesent", function() {deepEqual( Stem("vesentlige"), "vesent");});
test("vesentligste -> vesentligst", function() {deepEqual( Stem("vesentligste"), "vesentligst");});
test("vesle -> vesl", function() {deepEqual( Stem("vesle"), "vesl");});
test("vest -> vest", function() {deepEqual( Stem("vest"), "vest");});
test("vesterelven -> vesterelv", function() {deepEqual( Stem("vesterelven"), "vesterelv");});
test("vestfjorden -> vestfjord", function() {deepEqual( Stem("vestfjorden"), "vestfjord");});
test("vestfold -> vestfold", function() {deepEqual( Stem("vestfold"), "vestfold");});
test("vestfoldbanen -> vestfoldban", function() {deepEqual( Stem("vestfoldbanen"), "vestfoldban");});
test("vesthavn -> vesthavn", function() {deepEqual( Stem("vesthavn"), "vesthavn");});
test("vestlige -> vest", function() {deepEqual( Stem("vestlige"), "vest");});
test("vestover -> vestov", function() {deepEqual( Stem("vestover"), "vestov");});
test("vestre -> vestr", function() {deepEqual( Stem("vestre"), "vestr");});
test("vestsiden -> vestsid", function() {deepEqual( Stem("vestsiden"), "vestsid");});
test("vet -> vet", function() {deepEqual( Stem("vet"), "vet");});
test("veto -> veto", function() {deepEqual( Stem("veto"), "veto");});
test("vetoet -> veto", function() {deepEqual( Stem("vetoet"), "veto");});
test("vett -> vett", function() {deepEqual( Stem("vett"), "vett");});
test("vettene -> vett", function() {deepEqual( Stem("vettene"), "vett");});
test("vetter -> vett", function() {deepEqual( Stem("vetter"), "vett");});
test("vettet -> vett", function() {deepEqual( Stem("vettet"), "vett");});
test("vev -> vev", function() {deepEqual( Stem("vev"), "vev");});
test("vevsider -> vevsid", function() {deepEqual( Stem("vevsider"), "vevsid");});
test("vi -> vi", function() {deepEqual( Stem("vi"), "vi");});
test("via -> via", function() {deepEqual( Stem("via"), "via");});
test("vibeke -> vibek", function() {deepEqual( Stem("vibeke"), "vibek");});
test("victorin -> victorin", function() {deepEqual( Stem("victorin"), "victorin");});
test("vid -> vid", function() {deepEqual( Stem("vid"), "vid");});
test("vidar -> vid", function() {deepEqual( Stem("vidar"), "vid");});
test("vidare -> vidar", function() {deepEqual( Stem("vidare"), "vidar");});
test("vidareførast -> vidarefør", function() {deepEqual( Stem("vidareførast"), "vidarefør");});
test("vidareføre -> vidarefør", function() {deepEqual( Stem("vidareføre"), "vidarefør");});
test("vidareføring -> vidareføring", function() {deepEqual( Stem("vidareføring"), "vidareføring");});
test("vidareført -> vidareført", function() {deepEqual( Stem("vidareført"), "vidareført");});
test("vidaresal -> vidaresal", function() {deepEqual( Stem("vidaresal"), "vidaresal");});
test("vidareutvikling -> vidareutvikling", function() {deepEqual( Stem("vidareutvikling"), "vidareutvikling");});
test("vidder -> vidd", function() {deepEqual( Stem("vidder"), "vidd");});
test("vide -> vid", function() {deepEqual( Stem("vide"), "vid");});
test("videokamera -> videokamer", function() {deepEqual( Stem("videokamera"), "videokamer");});
test("videre -> vider", function() {deepEqual( Stem("videre"), "vider");});
test("viderebefordres -> viderebefordr", function() {deepEqual( Stem("viderebefordres"), "viderebefordr");});
test("viderebefordring -> viderebefordring", function() {deepEqual( Stem("viderebefordring"), "viderebefordring");});
test("videredistribusjon -> videredistribusjon", function() {deepEqual( Stem("videredistribusjon"), "videredistribusjon");});
test("videredistribusjonen -> videredistribusjon", function() {deepEqual( Stem("videredistribusjonen"), "videredistribusjon");});
test("videreføre -> viderefør", function() {deepEqual( Stem("videreføre"), "viderefør");});
test("viderefører -> viderefør", function() {deepEqual( Stem("viderefører"), "viderefør");});
test("videreføres -> viderefør", function() {deepEqual( Stem("videreføres"), "viderefør");});
test("videreføring -> videreføring", function() {deepEqual( Stem("videreføring"), "videreføring");});
test("videreført -> videreført", function() {deepEqual( Stem("videreført"), "videreført");});
test("videretransport -> videretransport", function() {deepEqual( Stem("videretransport"), "videretransport");});
test("videreutvikling -> videreutvikling", function() {deepEqual( Stem("videreutvikling"), "videreutvikling");});
test("videreutviklingen -> videreutvikling", function() {deepEqual( Stem("videreutviklingen"), "videreutvikling");});
test("vidgrunna -> vidgrunn", function() {deepEqual( Stem("vidgrunna"), "vidgrunn");});
test("vidi -> vidi", function() {deepEqual( Stem("vidi"), "vidi");});
test("vidt -> vidt", function() {deepEqual( Stem("vidt"), "vidt");});
test("vidtgående -> vidtgå", function() {deepEqual( Stem("vidtgående"), "vidtgå");});
test("vies -> vies", function() {deepEqual( Stem("vies"), "vies");});
test("viet -> viet", function() {deepEqual( Stem("viet"), "viet");});
test("vifte -> vift", function() {deepEqual( Stem("vifte"), "vift");});
test("vifter -> vift", function() {deepEqual( Stem("vifter"), "vift");});
test("vigrid -> vigrid", function() {deepEqual( Stem("vigrid"), "vigrid");});
test("vii -> vii", function() {deepEqual( Stem("vii"), "vii");});
test("viii -> viii", function() {deepEqual( Stem("viii"), "viii");});
test("vik -> vik", function() {deepEqual( Stem("vik"), "vik");});
test("vike -> vik", function() {deepEqual( Stem("vike"), "vik");});
test("viker -> vik", function() {deepEqual( Stem("viker"), "vik");});
test("vikinga -> viking", function() {deepEqual( Stem("vikinga"), "viking");});
test("viktig -> vikt", function() {deepEqual( Stem("viktig"), "vikt");});
test("viktigare -> viktigar", function() {deepEqual( Stem("viktigare"), "viktigar");});
test("viktigast -> vikt", function() {deepEqual( Stem("viktigast"), "vikt");});
test("viktigaste -> viktigast", function() {deepEqual( Stem("viktigaste"), "viktigast");});
test("viktige -> vikt", function() {deepEqual( Stem("viktige"), "vikt");});
test("viktigere -> viktiger", function() {deepEqual( Stem("viktigere"), "viktiger");});
test("viktighet -> vikt", function() {deepEqual( Stem("viktighet"), "vikt");});
test("viktigheten -> vikt", function() {deepEqual( Stem("viktigheten"), "vikt");});
test("viktigst -> viktigst", function() {deepEqual( Stem("viktigst"), "viktigst");});
test("viktigste -> viktigst", function() {deepEqual( Stem("viktigste"), "viktigst");});
test("vil -> vil", function() {deepEqual( Stem("vil"), "vil");});
test("vilja -> vilj", function() {deepEqual( Stem("vilja"), "vilj");});
test("vilje -> vilj", function() {deepEqual( Stem("vilje"), "vilj");});
test("viljeløse -> viljeløs", function() {deepEqual( Stem("viljeløse"), "viljeløs");});
test("viljug -> viljug", function() {deepEqual( Stem("viljug"), "viljug");});
test("viljuge -> viljug", function() {deepEqual( Stem("viljuge"), "viljug");});
test("vilken -> vilk", function() {deepEqual( Stem("vilken"), "vilk");});
test("vilkår -> vilkår", function() {deepEqual( Stem("vilkår"), "vilkår");});
test("vilkåra -> vilkår", function() {deepEqual( Stem("vilkåra"), "vilkår");});
test("vilkårene -> vilkår", function() {deepEqual( Stem("vilkårene"), "vilkår");});
test("vilkåret -> vilkår", function() {deepEqual( Stem("vilkåret"), "vilkår");});
test("vilkårleg -> vilkår", function() {deepEqual( Stem("vilkårleg"), "vilkår");});
test("vilkårlege -> vilkår", function() {deepEqual( Stem("vilkårlege"), "vilkår");});
test("vill -> vill", function() {deepEqual( Stem("vill"), "vill");});
test("ville -> vill", function() {deepEqual( Stem("ville"), "vill");});
test("villere -> viller", function() {deepEqual( Stem("villere"), "viller");});
test("villeste -> villest", function() {deepEqual( Stem("villeste"), "villest");});
test("villhester -> villhest", function() {deepEqual( Stem("villhester"), "villhest");});
test("villig -> vil", function() {deepEqual( Stem("villig"), "vil");});
test("villkor -> villkor", function() {deepEqual( Stem("villkor"), "villkor");});
test("villmann -> villmann", function() {deepEqual( Stem("villmann"), "villmann");});
test("villmannens -> villmann", function() {deepEqual( Stem("villmannens"), "villmann");});
test("villrede -> villr", function() {deepEqual( Stem("villrede"), "villr");});
test("vilt -> vilt", function() {deepEqual( Stem("vilt"), "vilt");});
test("vimsete -> vimset", function() {deepEqual( Stem("vimsete"), "vimset");});
test("vimur -> vimur", function() {deepEqual( Stem("vimur"), "vimur");});
test("vin -> vin", function() {deepEqual( Stem("vin"), "vin");});
test("vind -> vind", function() {deepEqual( Stem("vind"), "vind");});
test("vindauge -> vindaug", function() {deepEqual( Stem("vindauge"), "vindaug");});
test("vinden -> vind", function() {deepEqual( Stem("vinden"), "vind");});
test("vinder -> vind", function() {deepEqual( Stem("vinder"), "vind");});
test("vindforholdene -> vindforhold", function() {deepEqual( Stem("vindforholdene"), "vindforhold");});
test("vindkast -> vindk", function() {deepEqual( Stem("vindkast"), "vindk");});
test("vindpust -> vindpust", function() {deepEqual( Stem("vindpust"), "vindpust");});
test("vinduene -> vindu", function() {deepEqual( Stem("vinduene"), "vindu");});
test("vingene -> ving", function() {deepEqual( Stem("vingene"), "ving");});
test("vinger -> ving", function() {deepEqual( Stem("vinger"), "ving");});
test("vingeslag -> vingeslag", function() {deepEqual( Stem("vingeslag"), "vingeslag");});
test("vingeslagene -> vingeslag", function() {deepEqual( Stem("vingeslagene"), "vingeslag");});
test("vinglete -> vinglet", function() {deepEqual( Stem("vinglete"), "vinglet");});
test("vinilene -> vinil", function() {deepEqual( Stem("vinilene"), "vinil");});
test("vinilenes -> vinil", function() {deepEqual( Stem("vinilenes"), "vinil");});
test("vinker -> vink", function() {deepEqual( Stem("vinker"), "vink");});
test("vinket -> vink", function() {deepEqual( Stem("vinket"), "vink");});
test("vinkling -> vinkling", function() {deepEqual( Stem("vinkling"), "vinkling");});
test("vinn -> vinn", function() {deepEqual( Stem("vinn"), "vinn");});
test("vinnast -> vinn", function() {deepEqual( Stem("vinnast"), "vinn");});
test("vinne -> vinn", function() {deepEqual( Stem("vinne"), "vinn");});
test("vinner -> vinn", function() {deepEqual( Stem("vinner"), "vinn");});
test("vinninger -> vinning", function() {deepEqual( Stem("vinninger"), "vinning");});
test("vinst -> vinst", function() {deepEqual( Stem("vinst"), "vinst");});
test("vinstar -> vinst", function() {deepEqual( Stem("vinstar"), "vinst");});
test("vinsten -> vinst", function() {deepEqual( Stem("vinsten"), "vinst");});
test("vinter -> vint", function() {deepEqual( Stem("vinter"), "vint");});
test("vinterbro -> vinterbro", function() {deepEqual( Stem("vinterbro"), "vinterbro");});
test("vinterdag -> vinterdag", function() {deepEqual( Stem("vinterdag"), "vinterdag");});
test("vintere -> vinter", function() {deepEqual( Stem("vintere"), "vinter");});
test("vinteren -> vinter", function() {deepEqual( Stem("vinteren"), "vinter");});
test("vintre -> vintr", function() {deepEqual( Stem("vintre"), "vintr");});
test("vippetangen -> vippetang", function() {deepEqual( Stem("vippetangen"), "vippetang");});
test("vippetangens -> vippetang", function() {deepEqual( Stem("vippetangens"), "vippetang");});
test("virke -> virk", function() {deepEqual( Stem("virke"), "virk");});
test("virkedag -> virkedag", function() {deepEqual( Stem("virkedag"), "virkedag");});
test("virkedøgn -> virkedøgn", function() {deepEqual( Stem("virkedøgn"), "virkedøgn");});
test("virkelig -> virk", function() {deepEqual( Stem("virkelig"), "virk");});
test("virkelige -> virk", function() {deepEqual( Stem("virkelige"), "virk");});
test("virkeligheten -> virk", function() {deepEqual( Stem("virkeligheten"), "virk");});
test("virkemiddel -> virkemiddel", function() {deepEqual( Stem("virkemiddel"), "virkemiddel");});
test("virkemiddelbruk -> virkemiddelbruk", function() {deepEqual( Stem("virkemiddelbruk"), "virkemiddelbruk");});
test("virkemiddelet -> virkemiddel", function() {deepEqual( Stem("virkemiddelet"), "virkemiddel");});
test("virkemidlene -> virkemidl", function() {deepEqual( Stem("virkemidlene"), "virkemidl");});
test("virkemidler -> virkemidl", function() {deepEqual( Stem("virkemidler"), "virkemidl");});
test("virkeområde -> virkeområd", function() {deepEqual( Stem("virkeområde"), "virkeområd");});
test("virker -> virk", function() {deepEqual( Stem("virker"), "virk");});
test("virket -> virk", function() {deepEqual( Stem("virket"), "virk");});
test("virkning -> virkning", function() {deepEqual( Stem("virkning"), "virkning");});
test("virkningen -> virkning", function() {deepEqual( Stem("virkningen"), "virkning");});
test("virkningene -> virkning", function() {deepEqual( Stem("virkningene"), "virkning");});
test("virkninger -> virkning", function() {deepEqual( Stem("virkninger"), "virkning");});
test("virksom -> virksom", function() {deepEqual( Stem("virksom"), "virksom");});
test("virksomhet -> virksom", function() {deepEqual( Stem("virksomhet"), "virksom");});
test("virksomheten -> virksom", function() {deepEqual( Stem("virksomheten"), "virksom");});
test("virksomhetene -> virksom", function() {deepEqual( Stem("virksomhetene"), "virksom");});
test("virksomhetens -> virksom", function() {deepEqual( Stem("virksomhetens"), "virksom");});
test("virksomheter -> virksom", function() {deepEqual( Stem("virksomheter"), "virksom");});
test("virksomhetsbegrep -> virksomhetsbegrep", function() {deepEqual( Stem("virksomhetsbegrep"), "virksomhetsbegrep");});
test("virksomhetsbegrepet -> virksomhetsbegrep", function() {deepEqual( Stem("virksomhetsbegrepet"), "virksomhetsbegrep");});
test("virksomhetsoverdragelse -> virksomhetsoverdrag", function() {deepEqual( Stem("virksomhetsoverdragelse"), "virksomhetsoverdrag");});
test("virksomhetsoverdragelsen -> virksomhetsoverdrag", function() {deepEqual( Stem("virksomhetsoverdragelsen"), "virksomhetsoverdrag");});
test("virksomhetsoverdragelser -> virksomhetsoverdrag", function() {deepEqual( Stem("virksomhetsoverdragelser"), "virksomhetsoverdrag");});
test("virksomhetsutøvelsen -> virksomhetsutøv", function() {deepEqual( Stem("virksomhetsutøvelsen"), "virksomhetsutøv");});
test("virvlende -> virvl", function() {deepEqual( Stem("virvlende"), "virvl");});
test("vis -> vis", function() {deepEqual( Stem("vis"), "vis");});
test("visast -> vis", function() {deepEqual( Stem("visast"), "vis");});
test("visdom -> visdom", function() {deepEqual( Stem("visdom"), "visdom");});
test("visdommens -> visdomm", function() {deepEqual( Stem("visdommens"), "visdomm");});
test("visdomskrefter -> visdomskreft", function() {deepEqual( Stem("visdomskrefter"), "visdomskreft");});
test("vise -> vis", function() {deepEqual( Stem("vise"), "vis");});
test("viser -> vis", function() {deepEqual( Stem("viser"), "vis");});
test("visere -> viser", function() {deepEqual( Stem("visere"), "viser");});
test("vises -> vis", function() {deepEqual( Stem("vises"), "vis");});
test("viset -> vis", function() {deepEqual( Stem("viset"), "vis");});
test("visjoner -> visjon", function() {deepEqual( Stem("visjoner"), "visjon");});
test("vislie -> visli", function() {deepEqual( Stem("vislie"), "visli");});
test("vismenn -> vismenn", function() {deepEqual( Stem("vismenn"), "vismenn");});
test("visne -> visn", function() {deepEqual( Stem("visne"), "visn");});
test("viss -> viss", function() {deepEqual( Stem("viss"), "viss");});
test("vissa -> viss", function() {deepEqual( Stem("vissa"), "viss");});
test("visse -> viss", function() {deepEqual( Stem("visse"), "viss");});
test("visst -> visst", function() {deepEqual( Stem("visst"), "visst");});
test("visste -> visst", function() {deepEqual( Stem("visste"), "visst");});
test("vist -> vist", function() {deepEqual( Stem("vist"), "vist");});
test("viste -> vist", function() {deepEqual( Stem("viste"), "vist");});
test("visuelle -> visuell", function() {deepEqual( Stem("visuelle"), "visuell");});
test("visuelt -> visuelt", function() {deepEqual( Stem("visuelt"), "visuelt");});
test("vit -> vit", function() {deepEqual( Stem("vit"), "vit");});
test("vital -> vital", function() {deepEqual( Stem("vital"), "vital");});
test("vitalisere -> vitaliser", function() {deepEqual( Stem("vitalisere"), "vitaliser");});
test("vite -> vit", function() {deepEqual( Stem("vite"), "vit");});
test("vitne -> vitn", function() {deepEqual( Stem("vitne"), "vitn");});
test("vogn -> vogn", function() {deepEqual( Stem("vogn"), "vogn");});
test("vognen -> vogn", function() {deepEqual( Stem("vognen"), "vogn");});
test("vognene -> vogn", function() {deepEqual( Stem("vognene"), "vogn");});
test("vognskifteområde -> vognskifteområd", function() {deepEqual( Stem("vognskifteområde"), "vognskifteområd");});
test("vogntog -> vogntog", function() {deepEqual( Stem("vogntog"), "vogntog");});
test("voks -> voks", function() {deepEqual( Stem("voks"), "voks");});
test("vokse -> voks", function() {deepEqual( Stem("vokse"), "voks");});
test("voksen -> voks", function() {deepEqual( Stem("voksen"), "voks");});
test("vokser -> voks", function() {deepEqual( Stem("vokser"), "voks");});
test("voksne -> voksn", function() {deepEqual( Stem("voksne"), "voksn");});
test("vokst -> vokst", function() {deepEqual( Stem("vokst"), "vokst");});
test("vokste -> vokst", function() {deepEqual( Stem("vokste"), "vokst");});
test("vokte -> vokt", function() {deepEqual( Stem("vokte"), "vokt");});
test("vokter -> vokt", function() {deepEqual( Stem("vokter"), "vokt");});
test("vold -> vold", function() {deepEqual( Stem("vold"), "vold");});
test("voldgift -> voldgift", function() {deepEqual( Stem("voldgift"), "voldgift");});
test("voldsfjorden -> voldsfjord", function() {deepEqual( Stem("voldsfjorden"), "voldsfjord");});
test("voldsom -> voldsom", function() {deepEqual( Stem("voldsom"), "voldsom");});
test("voldsomme -> voldsomm", function() {deepEqual( Stem("voldsomme"), "voldsomm");});
test("voldsomt -> voldsomt", function() {deepEqual( Stem("voldsomt"), "voldsomt");});
test("voldtas -> vold", function() {deepEqual( Stem("voldtas"), "vold");});
test("volen -> vol", function() {deepEqual( Stem("volen"), "vol");});
test("volker -> volk", function() {deepEqual( Stem("volker"), "volk");});
test("vollen -> voll", function() {deepEqual( Stem("vollen"), "voll");});
test("vollsfjorden -> vollsfjord", function() {deepEqual( Stem("vollsfjorden"), "vollsfjord");});
test("volsung -> volsung", function() {deepEqual( Stem("volsung"), "volsung");});
test("volumer -> volum", function() {deepEqual( Stem("volumer"), "volum");});
test("volumet -> volum", function() {deepEqual( Stem("volumet"), "volum");});
test("volummessig -> volummess", function() {deepEqual( Stem("volummessig"), "volummess");});
test("volumutvikling -> volumutvikling", function() {deepEqual( Stem("volumutvikling"), "volumutvikling");});
test("volumvekst -> volumvekst", function() {deepEqual( Stem("volumvekst"), "volumvekst");});
test("volve -> volv", function() {deepEqual( Stem("volve"), "volv");});
test("volven -> volv", function() {deepEqual( Stem("volven"), "volv");});
test("von -> von", function() {deepEqual( Stem("von"), "von");});
test("vond -> vond", function() {deepEqual( Stem("vond"), "vond");});
test("vonde -> vond", function() {deepEqual( Stem("vonde"), "vond");});
test("vondt -> vond", function() {deepEqual( Stem("vondt"), "vond");});
test("voner -> von", function() {deepEqual( Stem("voner"), "von");});
test("vore -> vor", function() {deepEqual( Stem("vore"), "vor");});
test("vorte -> vort", function() {deepEqual( Stem("vorte"), "vort");});
test("vorten -> vort", function() {deepEqual( Stem("vorten"), "vort");});
test("vorter -> vort", function() {deepEqual( Stem("vorter"), "vort");});
test("vortne -> vortn", function() {deepEqual( Stem("vortne"), "vortn");});
test("voss -> voss", function() {deepEqual( Stem("voss"), "voss");});
test("voteringsforslag -> voteringsforslag", function() {deepEqual( Stem("voteringsforslag"), "voteringsforslag");});
test("vott -> vott", function() {deepEqual( Stem("vott"), "vott");});
test("votten -> vott", function() {deepEqual( Stem("votten"), "vott");});
test("votter -> vott", function() {deepEqual( Stem("votter"), "vott");});
test("vrang -> vrang", function() {deepEqual( Stem("vrang"), "vrang");});
test("vrangt -> vrangt", function() {deepEqual( Stem("vrangt"), "vrangt");});
test("vred -> vred", function() {deepEqual( Stem("vred"), "vred");});
test("vrenge -> vreng", function() {deepEqual( Stem("vrenge"), "vreng");});
test("vrenger -> vreng", function() {deepEqual( Stem("vrenger"), "vreng");});
test("vri -> vri", function() {deepEqual( Stem("vri"), "vri");});
test("vridd -> vridd", function() {deepEqual( Stem("vridd"), "vridd");});
test("vridde -> vridd", function() {deepEqual( Stem("vridde"), "vridd");});
test("vridende -> vrid", function() {deepEqual( Stem("vridende"), "vrid");});
test("vridning -> vridning", function() {deepEqual( Stem("vridning"), "vridning");});
test("vrikke -> vrikk", function() {deepEqual( Stem("vrikke"), "vrikk");});
test("vrikker -> vrikk", function() {deepEqual( Stem("vrikker"), "vrikk");});
test("vrinsker -> vrinsk", function() {deepEqual( Stem("vrinsker"), "vrinsk");});
test("vrir -> vrir", function() {deepEqual( Stem("vrir"), "vrir");});
test("vris -> vris", function() {deepEqual( Stem("vris"), "vris");});
test("vrister -> vrist", function() {deepEqual( Stem("vrister"), "vrist");});
test("vuggen -> vugg", function() {deepEqual( Stem("vuggen"), "vugg");});
test("vugger -> vugg", function() {deepEqual( Stem("vugger"), "vugg");});
test("vunnet -> vunn", function() {deepEqual( Stem("vunnet"), "vunn");});
test("vurderast -> vurder", function() {deepEqual( Stem("vurderast"), "vurder");});
test("vurdere -> vurder", function() {deepEqual( Stem("vurdere"), "vurder");});
test("vurderer -> vurder", function() {deepEqual( Stem("vurderer"), "vurder");});
test("vurderes -> vurder", function() {deepEqual( Stem("vurderes"), "vurder");});
test("vurdering -> vurdering", function() {deepEqual( Stem("vurdering"), "vurdering");});
test("vurderinga -> vurdering", function() {deepEqual( Stem("vurderinga"), "vurdering");});
test("vurderingar -> vurdering", function() {deepEqual( Stem("vurderingar"), "vurdering");});
test("vurderingen -> vurdering", function() {deepEqual( Stem("vurderingen"), "vurdering");});
test("vurderingene -> vurdering", function() {deepEqual( Stem("vurderingene"), "vurdering");});
test("vurderinger -> vurdering", function() {deepEqual( Stem("vurderinger"), "vurdering");});
test("vurdert -> vurder", function() {deepEqual( Stem("vurdert"), "vurder");});
test("vurderte -> vurder", function() {deepEqual( Stem("vurderte"), "vurder");});
test("vvo -> vvo", function() {deepEqual( Stem("vvo"), "vvo");});
test("våge -> våg", function() {deepEqual( Stem("våge"), "våg");});
test("våger -> våg", function() {deepEqual( Stem("våger"), "våg");});
test("vågestykket -> vågestykk", function() {deepEqual( Stem("vågestykket"), "vågestykk");});
test("våget -> våg", function() {deepEqual( Stem("våget"), "våg");});
test("våken -> våk", function() {deepEqual( Stem("våken"), "våk");});
test("våkne -> våkn", function() {deepEqual( Stem("våkne"), "våkn");});
test("våkner -> våkn", function() {deepEqual( Stem("våkner"), "våkn");});
test("våknet -> våkn", function() {deepEqual( Stem("våknet"), "våkn");});
test("våle -> vål", function() {deepEqual( Stem("våle"), "vål");});
test("våpen -> våp", function() {deepEqual( Stem("våpen"), "våp");});
test("våpenlek -> våpenlek", function() {deepEqual( Stem("våpenlek"), "våpenlek");});
test("våpenleken -> våpenlek", function() {deepEqual( Stem("våpenleken"), "våpenlek");});
test("våpenløs -> våpenløs", function() {deepEqual( Stem("våpenløs"), "våpenløs");});
test("våpnene -> våpn", function() {deepEqual( Stem("våpnene"), "våpn");});
test("vår -> vår", function() {deepEqual( Stem("vår"), "vår");});
test("våre -> vår", function() {deepEqual( Stem("våre"), "vår");});
test("våren -> vår", function() {deepEqual( Stem("våren"), "vår");});
test("våres -> vår", function() {deepEqual( Stem("våres"), "vår");});
test("vårgresset -> vårgress", function() {deepEqual( Stem("vårgresset"), "vårgress");});
test("vårt -> vårt", function() {deepEqual( Stem("vårt"), "vårt");});
test("våt -> våt", function() {deepEqual( Stem("våt"), "våt");});
test("våtbulk -> våtbulk", function() {deepEqual( Stem("våtbulk"), "våtbulk");});
test("våte -> våt", function() {deepEqual( Stem("våte"), "våt");});
test("vått -> vått", function() {deepEqual( Stem("vått"), "vått");});
test("vægne -> vægn", function() {deepEqual( Stem("vægne"), "vægn");});
test("vækerøkrysset -> vækerøkryss", function() {deepEqual( Stem("vækerøkrysset"), "vækerøkryss");});
test("væpnet -> væpn", function() {deepEqual( Stem("væpnet"), "væpn");});
test("vær -> vær", function() {deepEqual( Stem("vær"), "vær");});
test("være -> vær", function() {deepEqual( Stem("være"), "vær");});
test("værende -> vær", function() {deepEqual( Stem("værende"), "vær");});
test("været -> vær", function() {deepEqual( Stem("været"), "vær");});
test("værforhold -> værforhold", function() {deepEqual( Stem("værforhold"), "værforhold");});
test("værforholdene -> værforhold", function() {deepEqual( Stem("værforholdene"), "værforhold");});
test("værhår -> værhår", function() {deepEqual( Stem("værhår"), "værhår");});
test("værs -> vær", function() {deepEqual( Stem("værs"), "vær");});
test("vært -> vært", function() {deepEqual( Stem("vært"), "vært");});
test("væske -> væsk", function() {deepEqual( Stem("væske"), "væsk");});
test("væsker -> væsk", function() {deepEqual( Stem("væsker"), "væsk");});
test("wealth -> wealth", function() {deepEqual( Stem("wealth"), "wealth");});
test("welche -> welch", function() {deepEqual( Stem("welche"), "welch");});
test("wenche -> wench", function() {deepEqual( Stem("wenche"), "wench");});
test("wessel -> wessel", function() {deepEqual( Stem("wessel"), "wessel");});
test("wielockx -> wielockx", function() {deepEqual( Stem("wielockx"), "wielockx");});
test("willy -> willy", function() {deepEqual( Stem("willy"), "willy");});
test("wirtschaft -> wirtschaft", function() {deepEqual( Stem("wirtschaft"), "wirtschaft");});
test("wirtschaftsgenossenschaften -> wirtschaftsgenossenschaft", function() {deepEqual( Stem("wirtschaftsgenossenschaften"), "wirtschaftsgenossenschaft");});
test("wohnungsbaugenossenschaften -> wohnungsbaugenossenschaft", function() {deepEqual( Stem("wohnungsbaugenossenschaften"), "wohnungsbaugenossenschaft");});
test("wohnungseigentum -> wohnungseigentum", function() {deepEqual( Stem("wohnungseigentum"), "wohnungseigentum");});
test("wohnungsgenossenschaftsmitglieder -> wohnungsgenossenschaftsmitglied", function() {deepEqual( Stem("wohnungsgenossenschaftsmitglieder"), "wohnungsgenossenschaftsmitglied");});
test("wohnungsnutzergenossenschaften -> wohnungsnutzergenossenschaft", function() {deepEqual( Stem("wohnungsnutzergenossenschaften"), "wohnungsnutzergenossenschaft");});
test("wohnungsunternehmen -> wohnungsunternehm", function() {deepEqual( Stem("wohnungsunternehmen"), "wohnungsunternehm");});
test("wolff -> wolff", function() {deepEqual( Stem("wolff"), "wolff");});
test("wto -> wto", function() {deepEqual( Stem("wto"), "wto");});
test("xviii -> xviii", function() {deepEqual( Stem("xviii"), "xviii");});
test("xx -> xx", function() {deepEqual( Stem("xx"), "xx");});
test("ydmyket -> ydmyk", function() {deepEqual( Stem("ydmyket"), "ydmyk");});
test("ydt -> ydt", function() {deepEqual( Stem("ydt"), "ydt");});
test("ygg -> ygg", function() {deepEqual( Stem("ygg"), "ygg");});
test("yggdrasil -> yggdrasil", function() {deepEqual( Stem("yggdrasil"), "yggdrasil");});
test("yggdrasils -> yggdrasil", function() {deepEqual( Stem("yggdrasils"), "yggdrasil");});
test("yh -> yh", function() {deepEqual( Stem("yh"), "yh");});
test("yin -> yin", function() {deepEqual( Stem("yin"), "yin");});
test("ymer -> ymer", function() {deepEqual( Stem("ymer"), "ymer");});
test("ymers -> ymer", function() {deepEqual( Stem("ymers"), "ymer");});
test("ymse -> yms", function() {deepEqual( Stem("ymse"), "yms");});
test("yngre -> yngr", function() {deepEqual( Stem("yngre"), "yngr");});
test("yngste -> yngst", function() {deepEqual( Stem("yngste"), "yngst");});
test("york -> york", function() {deepEqual( Stem("york"), "york");});
test("yr -> yr", function() {deepEqual( Stem("yr"), "yr");});
test("yre -> yre", function() {deepEqual( Stem("yre"), "yre");});
test("yrke -> yrk", function() {deepEqual( Stem("yrke"), "yrk");});
test("yrkedagen -> yrkedag", function() {deepEqual( Stem("yrkedagen"), "yrkedag");});
test("yrkesaktiv -> yrkesaktiv", function() {deepEqual( Stem("yrkesaktiv"), "yrkesaktiv");});
test("yrkesaktive -> yrkesaktiv", function() {deepEqual( Stem("yrkesaktive"), "yrkesaktiv");});
test("yrkesaktivitet -> yrkesaktivit", function() {deepEqual( Stem("yrkesaktivitet"), "yrkesaktivit");});
test("yrkesaktiviteten -> yrkesaktivitet", function() {deepEqual( Stem("yrkesaktiviteten"), "yrkesaktivitet");});
test("yrkesaktivt -> yrkesaktiv", function() {deepEqual( Stem("yrkesaktivt"), "yrkesaktiv");});
test("yrkesbaserte -> yrkesbaser", function() {deepEqual( Stem("yrkesbaserte"), "yrkesbaser");});
test("yrkesdeltagelse -> yrkesdeltag", function() {deepEqual( Stem("yrkesdeltagelse"), "yrkesdeltag");});
test("yrkesdeltakelse -> yrkesdeltak", function() {deepEqual( Stem("yrkesdeltakelse"), "yrkesdeltak");});
test("yrkesdeltaking -> yrkesdeltaking", function() {deepEqual( Stem("yrkesdeltaking"), "yrkesdeltaking");});
test("yrkesdøgn -> yrkesdøgn", function() {deepEqual( Stem("yrkesdøgn"), "yrkesdøgn");});
test("yrkesdøgntrafikk -> yrkesdøgntrafikk", function() {deepEqual( Stem("yrkesdøgntrafikk"), "yrkesdøgntrafikk");});
test("yrkesgrupper -> yrkesgrupp", function() {deepEqual( Stem("yrkesgrupper"), "yrkesgrupp");});
test("yrkeskarrieren -> yrkeskarrier", function() {deepEqual( Stem("yrkeskarrieren"), "yrkeskarrier");});
test("yrkesmessige -> yrkesmess", function() {deepEqual( Stem("yrkesmessige"), "yrkesmess");});
test("yrkesorganisasjonenes -> yrkesorganisasjon", function() {deepEqual( Stem("yrkesorganisasjonenes"), "yrkesorganisasjon");});
test("yrkesskadeforsikring -> yrkesskadeforsikring", function() {deepEqual( Stem("yrkesskadeforsikring"), "yrkesskadeforsikring");});
test("yrkesutøvar -> yrkesutøv", function() {deepEqual( Stem("yrkesutøvar"), "yrkesutøv");});
test("yrkesutøvarar -> yrkesutøvar", function() {deepEqual( Stem("yrkesutøvarar"), "yrkesutøvar");});
test("yte -> yte", function() {deepEqual( Stem("yte"), "yte");});
test("ytelse -> ytels", function() {deepEqual( Stem("ytelse"), "ytels");});
test("ytelsen -> ytels", function() {deepEqual( Stem("ytelsen"), "ytels");});
test("ytelsene -> ytels", function() {deepEqual( Stem("ytelsene"), "ytels");});
test("ytelsenes -> ytels", function() {deepEqual( Stem("ytelsenes"), "ytels");});
test("ytelsens -> ytels", function() {deepEqual( Stem("ytelsens"), "ytels");});
test("ytelser -> ytels", function() {deepEqual( Stem("ytelser"), "ytels");});
test("ytelses -> ytels", function() {deepEqual( Stem("ytelses"), "ytels");});
test("ytelsesbasert -> ytelsesbaser", function() {deepEqual( Stem("ytelsesbasert"), "ytelsesbaser");});
test("ytelsesbaserte -> ytelsesbaser", function() {deepEqual( Stem("ytelsesbaserte"), "ytelsesbaser");});
test("ytelsesberettigede -> ytelsesberett", function() {deepEqual( Stem("ytelsesberettigede"), "ytelsesberett");});
test("ytelsesnivå -> ytelsesnivå", function() {deepEqual( Stem("ytelsesnivå"), "ytelsesnivå");});
test("ytelsesnivåene -> ytelsesnivå", function() {deepEqual( Stem("ytelsesnivåene"), "ytelsesnivå");});
test("ytelsesnivået -> ytelsesnivå", function() {deepEqual( Stem("ytelsesnivået"), "ytelsesnivå");});
test("ytelsesoppbygging -> ytelsesoppbygging", function() {deepEqual( Stem("ytelsesoppbygging"), "ytelsesoppbygging");});
test("ytelsesordning -> ytelsesordning", function() {deepEqual( Stem("ytelsesordning"), "ytelsesordning");});
test("ytelsesordninger -> ytelsesordning", function() {deepEqual( Stem("ytelsesordninger"), "ytelsesordning");});
test("ytelsesperioden -> ytelsesperiod", function() {deepEqual( Stem("ytelsesperioden"), "ytelsesperiod");});
test("ytelsesperiodens -> ytelsesperiod", function() {deepEqual( Stem("ytelsesperiodens"), "ytelsesperiod");});
test("ytelsesplan -> ytelsesplan", function() {deepEqual( Stem("ytelsesplan"), "ytelsesplan");});
test("ytelsesplanen -> ytelsesplan", function() {deepEqual( Stem("ytelsesplanen"), "ytelsesplan");});
test("ytelsessammensetningen -> ytelsessammensetning", function() {deepEqual( Stem("ytelsessammensetningen"), "ytelsessammensetning");});
test("yter -> yter", function() {deepEqual( Stem("yter"), "yter");});
test("ytes -> ytes", function() {deepEqual( Stem("ytes"), "ytes");});
test("yting -> yting", function() {deepEqual( Stem("yting"), "yting");});
test("ytinga -> yting", function() {deepEqual( Stem("ytinga"), "yting");});
test("ytingar -> yting", function() {deepEqual( Stem("ytingar"), "yting");});
test("ytingsbaserte -> ytingsbaser", function() {deepEqual( Stem("ytingsbaserte"), "ytingsbaser");});
test("ytre -> ytr", function() {deepEqual( Stem("ytre"), "ytr");});
test("ytste -> ytst", function() {deepEqual( Stem("ytste"), "ytst");});
test("ytt -> ytt", function() {deepEqual( Stem("ytt"), "ytt");});
test("ytte -> ytt", function() {deepEqual( Stem("ytte"), "ytt");});
test("ytterdør -> ytterdør", function() {deepEqual( Stem("ytterdør"), "ytterdør");});
test("ytterdører -> ytterdør", function() {deepEqual( Stem("ytterdører"), "ytterdør");});
test("ytterkant -> ytterkant", function() {deepEqual( Stem("ytterkant"), "ytterkant");});
test("ytterligere -> ytterliger", function() {deepEqual( Stem("ytterligere"), "ytterliger");});
test("ytterliggere -> ytterligger", function() {deepEqual( Stem("ytterliggere"), "ytterligger");});
test("ytterst -> ytterst", function() {deepEqual( Stem("ytterst"), "ytterst");});
test("ytterste -> ytterst", function() {deepEqual( Stem("ytterste"), "ytterst");});
test("zapffe -> zapff", function() {deepEqual( Stem("zapffe"), "zapff");});
test("zealand -> zealand", function() {deepEqual( Stem("zealand"), "zealand");});
test("zeebrugge -> zeebrugg", function() {deepEqual( Stem("zeebrugge"), "zeebrugg");});
test("zu -> zu", function() {deepEqual( Stem("zu"), "zu");});
test("å -> å", function() {deepEqual( Stem("å"), "å");});
test("åe -> åe", function() {deepEqual( Stem("åe"), "åe");});
test("åge -> åge", function() {deepEqual( Stem("åge"), "åge");});
test("åker -> åker", function() {deepEqual( Stem("åker"), "åker");});
test("åkeren -> åker", function() {deepEqual( Stem("åkeren"), "åker");});
test("åkre -> åkr", function() {deepEqual( Stem("åkre"), "åkr");});
test("ål -> ål", function() {deepEqual( Stem("ål"), "ål");});
test("åle -> åle", function() {deepEqual( Stem("åle"), "åle");});
test("åleine -> ålein", function() {deepEqual( Stem("åleine"), "ålein");});
test("ålesund -> ålesund", function() {deepEqual( Stem("ålesund"), "ålesund");});
test("åmsvartne -> åmsvartn", function() {deepEqual( Stem("åmsvartne"), "åmsvartn");});
test("åndalsnes -> åndalsn", function() {deepEqual( Stem("åndalsnes"), "åndalsn");});
test("ånde -> ånd", function() {deepEqual( Stem("ånde"), "ånd");});
test("åpen -> åpen", function() {deepEqual( Stem("åpen"), "åpen");});
test("åpenbare -> åpenbar", function() {deepEqual( Stem("åpenbare"), "åpenbar");});
test("åpenbart -> åpenbart", function() {deepEqual( Stem("åpenbart"), "åpenbart");});
test("åpenlys -> åpenly", function() {deepEqual( Stem("åpenlys"), "åpenly");});
test("åpent -> åpent", function() {deepEqual( Stem("åpent"), "åpent");});
test("åpne -> åpn", function() {deepEqual( Stem("åpne"), "åpn");});
test("åpner -> åpn", function() {deepEqual( Stem("åpner"), "åpn");});
test("åpnes -> åpn", function() {deepEqual( Stem("åpnes"), "åpn");});
test("åpnet -> åpn", function() {deepEqual( Stem("åpnet"), "åpn");});
test("åpning -> åpning", function() {deepEqual( Stem("åpning"), "åpning");});
test("år -> år", function() {deepEqual( Stem("år"), "år");});
test("åra -> åra", function() {deepEqual( Stem("åra"), "åra");});
test("årene -> åren", function() {deepEqual( Stem("årene"), "åren");});
test("årer -> årer", function() {deepEqual( Stem("årer"), "årer");});
test("året -> året", function() {deepEqual( Stem("året"), "året");});
test("åretak -> åretak", function() {deepEqual( Stem("åretak"), "åretak");});
test("årets -> året", function() {deepEqual( Stem("årets"), "året");});
test("årevis -> årevis", function() {deepEqual( Stem("årevis"), "årevis");});
test("århundre -> århundr", function() {deepEqual( Stem("århundre"), "århundr");});
test("århundret -> århundr", function() {deepEqual( Stem("århundret"), "århundr");});
test("årleg -> årleg", function() {deepEqual( Stem("årleg"), "årleg");});
test("årlege -> årleg", function() {deepEqual( Stem("årlege"), "årleg");});
test("årlig -> årl", function() {deepEqual( Stem("årlig"), "årl");});
test("årlige -> årl", function() {deepEqual( Stem("årlige"), "årl");});
test("årrekkje -> årrekkj", function() {deepEqual( Stem("årrekkje"), "årrekkj");});
test("årringen -> årring", function() {deepEqual( Stem("årringen"), "årring");});
test("årringer -> årring", function() {deepEqual( Stem("årringer"), "årring");});
test("års -> års", function() {deepEqual( Stem("års"), "års");});
test("årsak -> årsak", function() {deepEqual( Stem("årsak"), "årsak");});
test("årsaka -> årsak", function() {deepEqual( Stem("årsaka"), "årsak");});
test("årsaken -> årsak", function() {deepEqual( Stem("årsaken"), "årsak");});
test("årsaker -> årsak", function() {deepEqual( Stem("årsaker"), "årsak");});
test("årsbalanse -> årsbalans", function() {deepEqual( Stem("årsbalanse"), "årsbalans");});
test("årsbasis -> årsbasis", function() {deepEqual( Stem("årsbasis"), "årsbasis");});
test("årsberetning -> årsberetning", function() {deepEqual( Stem("årsberetning"), "årsberetning");});
test("årsmelding -> årsmelding", function() {deepEqual( Stem("årsmelding"), "årsmelding");});
test("årsmeldinga -> årsmelding", function() {deepEqual( Stem("årsmeldinga"), "årsmelding");});
test("årsoppgjer -> årsoppgj", function() {deepEqual( Stem("årsoppgjer"), "årsoppgj");});
test("årsoppgjeret -> årsoppgjer", function() {deepEqual( Stem("årsoppgjeret"), "årsoppgjer");});
test("årsoppgjør -> årsoppgjør", function() {deepEqual( Stem("årsoppgjør"), "årsoppgjør");});
test("årsoppgjøret -> årsoppgjør", function() {deepEqual( Stem("årsoppgjøret"), "årsoppgjør");});
test("årsoppgjørsforskriften -> årsoppgjørsforskrift", function() {deepEqual( Stem("årsoppgjørsforskriften"), "årsoppgjørsforskrift");});
test("årsoppgjørskapittelet -> årsoppgjørskapittel", function() {deepEqual( Stem("årsoppgjørskapittelet"), "årsoppgjørskapittel");});
test("årspengane -> årspeng", function() {deepEqual( Stem("årspengane"), "årspeng");});
test("årspengar -> årspeng", function() {deepEqual( Stem("årspengar"), "årspeng");});
test("årsperiode -> årsperiod", function() {deepEqual( Stem("årsperiode"), "årsperiod");});
test("årspremier -> årspremi", function() {deepEqual( Stem("årspremier"), "årspremi");});
test("årsregnskapet -> årsregnskap", function() {deepEqual( Stem("årsregnskapet"), "årsregnskap");});
test("årsregnskapsreglene -> årsregnskapsregl", function() {deepEqual( Stem("årsregnskapsreglene"), "årsregnskapsregl");});
test("årsrekneskap -> årsrekneskap", function() {deepEqual( Stem("årsrekneskap"), "årsrekneskap");});
test("årsrekneskapen -> årsrekneskap", function() {deepEqual( Stem("årsrekneskapen"), "årsrekneskap");});
test("årsresultatet -> årsresultat", function() {deepEqual( Stem("årsresultatet"), "årsresultat");});
test("årsskifte -> årsskift", function() {deepEqual( Stem("årsskifte"), "årsskift");});
test("årsskiftet -> årsskift", function() {deepEqual( Stem("årsskiftet"), "årsskift");});
test("årum -> årum", function() {deepEqual( Stem("årum"), "årum");});
test("årvold -> årvold", function() {deepEqual( Stem("årvold"), "årvold");});
test("årvoldkrysset -> årvoldkryss", function() {deepEqual( Stem("årvoldkrysset"), "årvoldkryss");});
test("åsa -> åsa", function() {deepEqual( Stem("åsa"), "åsa");});
test("åsene -> åsen", function() {deepEqual( Stem("åsene"), "åsen");});
test("åser -> åser", function() {deepEqual( Stem("åser"), "åser");});
test("åsgard -> åsgard", function() {deepEqual( Stem("åsgard"), "åsgard");});
test("åsgards -> åsgard", function() {deepEqual( Stem("åsgards"), "åsgard");});
test("åshild -> åshild", function() {deepEqual( Stem("åshild"), "åshild");});
test("åsmund -> åsmund", function() {deepEqual( Stem("åsmund"), "åsmund");});
test("åt -> åt", function() {deepEqual( Stem("åt"), "åt");});
test("åtferd -> åtferd", function() {deepEqual( Stem("åtferd"), "åtferd");});
test("åtgjerd -> åtgjerd", function() {deepEqual( Stem("åtgjerd"), "åtgjerd");});
test("ått -> ått", function() {deepEqual( Stem("ått"), "ått");});
test("åttande -> ått", function() {deepEqual( Stem("åttande"), "ått");});
test("åtte -> ått", function() {deepEqual( Stem("åtte"), "ått");});
test("åttefotede -> åttefot", function() {deepEqual( Stem("åttefotede"), "åttefot");});
test("åttefotete -> åttefotet", function() {deepEqual( Stem("åttefotete"), "åttefotet");});
test("åttende -> ått", function() {deepEqual( Stem("åttende"), "ått");});
test("åtvaring -> åtvaring", function() {deepEqual( Stem("åtvaring"), "åtvaring");});
test("ægir -> ægir", function() {deepEqual( Stem("ægir"), "ægir");});
test("ægirs -> ægir", function() {deepEqual( Stem("ægirs"), "ægir");});
test("ærbødighet -> ærbød", function() {deepEqual( Stem("ærbødighet"), "ærbød");});
test("ære -> ære", function() {deepEqual( Stem("ære"), "ære");});
test("ærefullt -> ærefullt", function() {deepEqual( Stem("ærefullt"), "ærefullt");});
test("æren -> æren", function() {deepEqual( Stem("æren"), "æren");});
test("ærend -> ærend", function() {deepEqual( Stem("ærend"), "ærend");});
test("ærendet -> ærend", function() {deepEqual( Stem("ærendet"), "ærend");});
test("ærlegdom -> ærlegdom", function() {deepEqual( Stem("ærlegdom"), "ærlegdom");});
test("ærlig -> ærl", function() {deepEqual( Stem("ærlig"), "ærl");});
test("æsene -> æsen", function() {deepEqual( Stem("æsene"), "æsen");});
test("æsenes -> æsen", function() {deepEqual( Stem("æsenes"), "æsen");});
test("æser -> æser", function() {deepEqual( Stem("æser"), "æser");});
test("ætt -> ætt", function() {deepEqual( Stem("ætt"), "ætt");});
test("øde -> øde", function() {deepEqual( Stem("øde"), "øde");});
test("ødelagt -> ødelagt", function() {deepEqual( Stem("ødelagt"), "ødelagt");});
test("ødelagte -> ødelagt", function() {deepEqual( Stem("ødelagte"), "ødelagt");});
test("ødelegge -> ødelegg", function() {deepEqual( Stem("ødelegge"), "ødelegg");});
test("ødemarken -> ødemark", function() {deepEqual( Stem("ødemarken"), "ødemark");});
test("ødemarker -> ødemark", function() {deepEqual( Stem("ødemarker"), "ødemark");});
test("øke -> øke", function() {deepEqual( Stem("øke"), "øke");});
test("økende -> økend", function() {deepEqual( Stem("økende"), "økend");});
test("øker -> øker", function() {deepEqual( Stem("øker"), "øker");});
test("økes -> økes", function() {deepEqual( Stem("økes"), "økes");});
test("økning -> økning", function() {deepEqual( Stem("økning"), "økning");});
test("økningen -> økning", function() {deepEqual( Stem("økningen"), "økning");});
test("økningene -> økning", function() {deepEqual( Stem("økningene"), "økning");});
test("økninger -> økning", function() {deepEqual( Stem("økninger"), "økning");});
test("økonomi -> økonomi", function() {deepEqual( Stem("økonomi"), "økonomi");});
test("økonomien -> økonomi", function() {deepEqual( Stem("økonomien"), "økonomi");});
test("økonomiene -> økonomi", function() {deepEqual( Stem("økonomiene"), "økonomi");});
test("økonomiplan -> økonomiplan", function() {deepEqual( Stem("økonomiplan"), "økonomiplan");});
test("økonomisk -> økonomisk", function() {deepEqual( Stem("økonomisk"), "økonomisk");});
test("økonomiske -> økonomisk", function() {deepEqual( Stem("økonomiske"), "økonomisk");});
test("øks -> øks", function() {deepEqual( Stem("øks"), "øks");});
test("økser -> øks", function() {deepEqual( Stem("økser"), "øks");});
test("økt -> økt", function() {deepEqual( Stem("økt"), "økt");});
test("økte -> økt", function() {deepEqual( Stem("økte"), "økt");});
test("øl -> øl", function() {deepEqual( Stem("øl"), "øl");});
test("øldunkene -> øldunk", function() {deepEqual( Stem("øldunkene"), "øldunk");});
test("ølet -> ølet", function() {deepEqual( Stem("ølet"), "ølet");});
test("ølkruset -> ølkrus", function() {deepEqual( Stem("ølkruset"), "ølkrus");});
test("ønske -> ønsk", function() {deepEqual( Stem("ønske"), "ønsk");});
test("ønskede -> ønsk", function() {deepEqual( Stem("ønskede"), "ønsk");});
test("ønskelig -> ønsk", function() {deepEqual( Stem("ønskelig"), "ønsk");});
test("ønskelige -> ønsk", function() {deepEqual( Stem("ønskelige"), "ønsk");});
test("ønskeligheten -> ønsk", function() {deepEqual( Stem("ønskeligheten"), "ønsk");});
test("ønsker -> ønsk", function() {deepEqual( Stem("ønsker"), "ønsk");});
test("ønskes -> ønsk", function() {deepEqual( Stem("ønskes"), "ønsk");});
test("ønsket -> ønsk", function() {deepEqual( Stem("ønsket"), "ønsk");});
test("ønskje -> ønskj", function() {deepEqual( Stem("ønskje"), "ønskj");});
test("ønskjeleg -> ønskj", function() {deepEqual( Stem("ønskjeleg"), "ønskj");});
test("ønskjer -> ønskj", function() {deepEqual( Stem("ønskjer"), "ønskj");});
test("ønskt -> ønskt", function() {deepEqual( Stem("ønskt"), "ønskt");});
test("ønskte -> ønskt", function() {deepEqual( Stem("ønskte"), "ønskt");});
test("ør -> ør", function() {deepEqual( Stem("ør"), "ør");});
test("øra -> øra", function() {deepEqual( Stem("øra"), "øra");});
test("øre -> øre", function() {deepEqual( Stem("øre"), "øre");});
test("ørefik -> ørefik", function() {deepEqual( Stem("ørefik"), "ørefik");});
test("øremerkede -> øremerk", function() {deepEqual( Stem("øremerkede"), "øremerk");});
test("øremerket -> øremerk", function() {deepEqual( Stem("øremerket"), "øremerk");});
test("øremerking -> øremerking", function() {deepEqual( Stem("øremerking"), "øremerking");});
test("ørene -> øren", function() {deepEqual( Stem("ørene"), "øren");});
test("ører -> ører", function() {deepEqual( Stem("ører"), "ører");});
test("øresundforbindelsen -> øresundforbind", function() {deepEqual( Stem("øresundforbindelsen"), "øresundforbind");});
test("øresundsforbindelsen -> øresundsforbind", function() {deepEqual( Stem("øresundsforbindelsen"), "øresundsforbind");});
test("øret -> øret", function() {deepEqual( Stem("øret"), "øret");});
test("ørje -> ørj", function() {deepEqual( Stem("ørje"), "ørj");});
test("ørn -> ørn", function() {deepEqual( Stem("ørn"), "ørn");});
test("ørneham -> ørneham", function() {deepEqual( Stem("ørneham"), "ørneham");});
test("ørnehammen -> ørnehamm", function() {deepEqual( Stem("ørnehammen"), "ørnehamm");});
test("ørnen -> ørn", function() {deepEqual( Stem("ørnen"), "ørn");});
test("ørner -> ørn", function() {deepEqual( Stem("ørner"), "ørn");});
test("ørske -> ørsk", function() {deepEqual( Stem("ørske"), "ørsk");});
test("øse -> øse", function() {deepEqual( Stem("øse"), "øse");});
test("øsekar -> øsek", function() {deepEqual( Stem("øsekar"), "øsek");});
test("øser -> øser", function() {deepEqual( Stem("øser"), "øser");});
test("øst -> øst", function() {deepEqual( Stem("øst"), "øst");});
test("østfold -> østfold", function() {deepEqual( Stem("østfold"), "østfold");});
test("østfoldhavnene -> østfoldhavn", function() {deepEqual( Stem("østfoldhavnene"), "østfoldhavn");});
test("østfoldhavner -> østfoldhavn", function() {deepEqual( Stem("østfoldhavner"), "østfoldhavn");});
test("østfra -> østfr", function() {deepEqual( Stem("østfra"), "østfr");});
test("østhavn -> østhavn", function() {deepEqual( Stem("østhavn"), "østhavn");});
test("østhavna -> østhavn", function() {deepEqual( Stem("østhavna"), "østhavn");});
test("østland -> østland", function() {deepEqual( Stem("østland"), "østland");});
test("østlandet -> østland", function() {deepEqual( Stem("østlandet"), "østland");});
test("østlandsfylkene -> østlandsfylk", function() {deepEqual( Stem("østlandsfylkene"), "østlandsfylk");});
test("østlandshavnene -> østlandshavn", function() {deepEqual( Stem("østlandshavnene"), "østlandshavn");});
test("østlandsområder -> østlandsområd", function() {deepEqual( Stem("østlandsområder"), "østlandsområd");});
test("østlandsområdet -> østlandsområd", function() {deepEqual( Stem("østlandsområdet"), "østlandsområd");});
test("østlandsregionen -> østlandsregion", function() {deepEqual( Stem("østlandsregionen"), "østlandsregion");});
test("østlandsregionens -> østlandsregion", function() {deepEqual( Stem("østlandsregionens"), "østlandsregion");});
test("østlandssamarbeidet -> østlandssamarbeid", function() {deepEqual( Stem("østlandssamarbeidet"), "østlandssamarbeid");});
test("østlig -> øst", function() {deepEqual( Stem("østlig"), "øst");});
test("østlige -> øst", function() {deepEqual( Stem("østlige"), "øst");});
test("østmoe -> østmo", function() {deepEqual( Stem("østmoe"), "østmo");});
test("østover -> østov", function() {deepEqual( Stem("østover"), "østov");});
test("østre -> østr", function() {deepEqual( Stem("østre"), "østr");});
test("østside -> østsid", function() {deepEqual( Stem("østside"), "østsid");});
test("østsiden -> østsid", function() {deepEqual( Stem("østsiden"), "østsid");});
test("østvendte -> østvend", function() {deepEqual( Stem("østvendte"), "østvend");});
test("øve -> øve", function() {deepEqual( Stem("øve"), "øve");});
test("øver -> øver", function() {deepEqual( Stem("øver"), "øver");});
test("øverste -> øverst", function() {deepEqual( Stem("øverste"), "øverst");});
test("øvre -> øvr", function() {deepEqual( Stem("øvre"), "øvr");});
test("øvrig -> øvr", function() {deepEqual( Stem("øvrig"), "øvr");});
test("øvrige -> øvr", function() {deepEqual( Stem("øvrige"), "øvr");});
test("øvste -> øvst", function() {deepEqual( Stem("øvste"), "øvst");});
test("øy -> øy", function() {deepEqual( Stem("øy"), "øy");});
test("øya -> øya", function() {deepEqual( Stem("øya"), "øya");});
test("øydelagde -> øydelagd", function() {deepEqual( Stem("øydelagde"), "øydelagd");});
test("øydelagt -> øydelagt", function() {deepEqual( Stem("øydelagt"), "øydelagt");});
test("øydelegging -> øydelegging", function() {deepEqual( Stem("øydelegging"), "øydelegging");});
test("øydelegginga -> øydelegging", function() {deepEqual( Stem("øydelegginga"), "øydelegging");});
test("øye -> øye", function() {deepEqual( Stem("øye"), "øye");});
test("øyeblikk -> øyeblikk", function() {deepEqual( Stem("øyeblikk"), "øyeblikk");});
test("øyeblikkelig -> øyeblikk", function() {deepEqual( Stem("øyeblikkelig"), "øyeblikk");});
test("øyeblikket -> øyeblikk", function() {deepEqual( Stem("øyeblikket"), "øyeblikk");});
test("øyelokkene -> øyelokk", function() {deepEqual( Stem("øyelokkene"), "øyelokk");});
test("øyelokket -> øyelokk", function() {deepEqual( Stem("øyelokket"), "øyelokk");});
test("øyenvipper -> øyenvipp", function() {deepEqual( Stem("øyenvipper"), "øyenvipp");});
test("øyet -> øyet", function() {deepEqual( Stem("øyet"), "øyet");});
test("øyne -> øyn", function() {deepEqual( Stem("øyne"), "øyn");});
test("øynene -> øyn", function() {deepEqual( Stem("øynene"), "øyn");});
test("øystein -> øystein", function() {deepEqual( Stem("øystein"), "øystein");});
